// Auto generated by JuleC.
// JuleC version: beta 0.0.6 @master
// Date: 2/11/2023 14.12 (DD/MM/YYYY) (HH.MM) UTC
//
// Recommended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#include "api/jule.hpp"                                   

#include <dirent.h>
#include <cstdio>
#include <sys/stat.h>
#include <fcntl.h>
#include <time.h>
#include "std/jule/integrated/integrated.hpp"                                   
#include "std/process/cmd.hpp"                                   

struct _1eb7d8048_Importer;
struct _1ec1c55b1_Kind;
struct _1ec2d8be1_Lookup;
struct _1ec748ded_CommonFlag;

struct _1e8d8d535_AnsiEscape;


struct _1e8d8d535_Logger;


struct _1e8e90769_accept_range;


struct _1e904e87d_LazyBuff;


struct _1e8e1506d_DirEntry;


struct _1e8e1506d_Directory;


struct _1e8e1b6a1_File;


struct _1e8e2d5d6_Status;


struct _1e9c9a7a4_Cmd;


struct _1e8ea7cc0_Log;


struct _1e9c59675_FloatInfo;


struct _1e9c59675_DecimalSlice;


struct _1ea033a09_LeftCheat;


struct _1ea033a09_Decimal;


struct _1ea84b541_FoldPair;


struct _1ea84b541_CaseRange;


struct _1ea84b541_Range16;


struct _1ea84b541_Range32;


struct _1ea84b541_RangeTable;


struct _1ea7465e5_Token;


struct _1ea701c98_File;


struct _1ea703492_KindPair;


struct _1ea703492_Lex;


struct _1ea6ecac9_Ast;


struct _1ea6ee955_CommentGroup;


struct _1ea6ee955_NamespaceTypeDecl;


struct _1ea6ee955_SptrTypeDecl;


struct _1ea6ee955_SlcTypeDecl;


struct _1ea6ee955_TupleTypeDecl;


struct _1ea6ee955_PtrTypeDecl;


struct _1ea6ee955_ArrTypeDecl;


struct _1ea6ee955_MapTypeDecl;


struct _1ea6ee955_RetTypeDecl;


struct _1ea6ee955_TupleExpr;


struct _1ea6ee955_CastExpr;


struct _1ea6ee955_StructLit;


struct _1ea6ee955_ScopeTree;


struct _1ea6ee955_Conditional;


struct _1ea713260_FileInfo;


struct _1ea713260_PackageInfo;


struct _1ea722e73_Stmt;


struct _1ea722e73_ScopeParser;


struct _1ea715b69_CallData;


struct _1ea715b69_ExprBuilder;


struct _1eb381c13_Parser;


struct _1eb6540c3_TypeBuilder;


struct _1ec3e4b65_Const;


struct _1eb29bdd6_FieldIns;


struct _1eb29bdd6_StructIns;


struct _1eb627195_RetType;


struct _1eb627195_ParamIns;


struct _1eb627195_FnIns;


struct _1eb736eec_ReferenceStack;


struct _1eb736eec_SymbolBuilder;


struct _1eb7d5892_Scope;


struct _1eb7d5892_If;


struct _1eb7d5892_Else;


struct _1eb7d5892_Conditional;


struct _1eb7d5892_InfIter;


struct _1eb7d5892_WhileIter;


struct _1eb7d5892_RangeIter;


struct _1eb7d5892_ContSt;


struct _1eb7d5892_BreakSt;


struct _1eb7d5892_Label;


struct _1eb7d5892_GotoSt;


struct _1eb7d5892_Postfix;


struct _1eb7d5892_Assign;


struct _1eb7d5892_MultiAssign;


struct _1eb7d5892_Match;


struct _1eb7d5892_Case;


struct _1eb7d5892_FallSt;


struct _1eb7d5892_RetSt;


struct _1eb7d5892_ScopeGoto;


struct _1eb7d5892_ScopeChecker;


struct _1eb7ccdea_BinopExprModel;


struct _1eb7ccdea_UnaryExprModel;


struct _1eb7ccdea_StructArgExprModel;


struct _1eb7ccdea_StructLitExprModel;


struct _1eb7ccdea_AllocStructLitExprModel;


struct _1eb7ccdea_CastingExprModel;


struct _1eb7ccdea_SliceExprModel;


struct _1eb7ccdea_IndexigExprModel;


struct _1eb7ccdea_AnonFnExprModel;


struct _1eb7ccdea_KeyValPairExprModel;


struct _1eb7ccdea_MapExprModel;


struct _1eb7ccdea_SlicingExprModel;


struct _1eb7ccdea_TraitSubIdentExprModel;


struct _1eb7ccdea_StructSubIdentExprModel;


struct _1eb7ccdea_StructStaticIdentExprModel;


struct _1eb7ccdea_ArrayExprModel;


struct _1eb7ccdea_CommonIdentExprModel;


struct _1eb7ccdea_CommonSubIdentExprModel;


struct _1eb7ccdea_TupleExprModel;


struct _1eb7ccdea_BuiltinOutCallExprModel;


struct _1eb7ccdea_BuiltinOutlnCallExprModel;


struct _1eb7ccdea_BuiltinCloneCallExprModel;


struct _1eb7ccdea_BuiltinNewCallExprModel;


struct _1eb7ccdea_BuiltinMakeCallExprModel;


struct _1eb7ccdea_BuiltinAppendCallExprModel;


struct _1eb7ccdea_BuiltinErrorCallExprModel;


struct _1eb7ccdea_SizeofExprModel;


struct _1eb7ccdea_AlignofExprModel;


struct _1eb7ccdea_RuneExprModel;


struct _1eb7ccdea_IntegratedToStrExprModel;


struct _1eb7ccdea_TernaryExprModel;


struct _1eb7ccdea_BackendEmitExprModel;


struct _1eb98e61c_DirectiveChecker;


struct _1eb7d8048_Package;


struct _1eb9ed0d7_Sema;


struct _1eba533d4_IterRelation;


struct _1eba534e4_RangeChecker;


struct _1ebcb6081_SymbolTable;


struct _1ebcce31e_Data;


struct _1ebcce31e_Value;


struct _1ebcce31e_Eval;


struct _1ec1c55b1_TypeKind;


struct _1ec1c55b1_TypeSymbol;


struct _1ec1c55b1_Prim;


struct _1ec1c55b1_Sptr;


struct _1ec1c55b1_Slc;


struct _1ec1c55b1_Tuple;


struct _1ec1c55b1_Map;


struct _1ec1c55b1_Arr;


struct _1ec1c55b1_Ptr;


struct _1ec1c55b1_Referencer;


struct _1ea693388_DirectiveEval;


struct _1ea6cd59e_PlainImporter;


struct _1ea66c175_OrderedDefines;


struct _1ea66c175_DefineOrderer;


struct _1ea65d034_ScopeDeadCode;


struct _1d059016d_AbsTime;


struct _1d059016d_Time;


struct _1d059016d_Duration;


struct _1ec748ded_Flag_0;

struct _1ec748ded_Flag_1;

struct _1ec748ded_Flag_2;

struct _1ec748ded_Flag_3;

struct _1ec748ded_Flag_4;


struct _1ec748ded_FlagSet;


struct _1ea6ee955_RangeKind;


struct _1ea6ee955_BreakSt;


struct _1ea6ee955_ContSt;


struct _1ea6ee955_If;


struct _1ea6ee955_Else;


struct _1ea6ee955_Directive;


struct _1ea6ee955_TypeAliasDecl;


struct _1eb7ccdea_FnCallExprModel;


struct _1ea6ee955_Case;


struct _1ea6ee955_MatchCase;


struct _1ea6ee955_UseDecl;


struct _1ea6ee955_EnumItemDecl;


struct _1ea6ee955_EnumDecl;


struct _1ea6ee955_FieldDecl;


struct _1ea6ee955_StructDecl;


struct _1ea6ee955_TraitDecl;


struct _1ea6ee955_Impl;


struct _1ea6ee955_Expr;


struct _1ea6ee955_UseExpr;


struct _1ea6ee955_TypeDecl;


struct _1ea6ee955_LitExpr;


struct _1ea6ee955_UnsafeExpr;


struct _1ea6ee955_CoExpr;


struct _1eb382692_AssignInfo;


struct _1ea6ee955_IdentExpr;


struct _1eb7ccdea_BuiltinPanicCallExprModel;


struct _1eb7ccdea_BuiltinAssertCallExprModel;


struct _1ea6ee955_UnaryExpr;


struct _1ea6ee955_VariadicExpr;


struct _1eb29bdd6_Field;


struct _1eb29bdd6_Struct;


struct _1ea6ee955_IdentTypeDecl;


struct _1ea6ee955_NsSelectionExpr;


struct _1ea6ee955_SubIdentExpr;


struct _1eb627195_Param;


struct _1eb627195_Fn;


struct _1ea6ee955_BinopExpr;


struct _1eb7d8048_ImportInfo;


struct _1ea6ee955_FnCallExpr;


struct _1ea6ee955_FieldExprPair;


struct _1eb736eec_Pass;


struct _1eba533d4_Var;


struct _1eba534e4_TypeCompatibilityChecker;


struct _1eba534e4_AssignTypeChecker;


struct _1eba534e4_DynamicTypeAnnotation;


struct _1eba534e4_FnCallArgChecker;


struct _1eba534e4_StructLitChecker;


struct _1ea6ee955_Node;


struct _1eba534e4_RetTypeChecker;


struct _1eb7c68e9_Trait;


struct _1eb7c7e7d_EnumItem;


struct _1eb7c7e7d_Enum;


struct _1eb7d363c_Impl;


struct _1ebcce31e_BinopSolver;


struct _1ec1c55b1_TypeAlias;


struct _1ea6ee955_BraceLit;


struct _1ea6ee955_KeyValPair;


struct _1ea6ee955_SliceExpr;


struct _1ea6ee955_IndexingExpr;


struct _1ea6ee955_SlicingExpr;


struct _1ea6ee955_TernaryExpr;


struct _1ea6ee955_GenericDecl;


struct _1ea6ee955_LabelSt;


struct _1ea6ee955_GotoSt;


struct _1ea6ee955_FallSt;


struct _1ec1c55b1_TypeChecker;


struct _1ea6ee955_AssignLeft;


struct _1ea6ee955_AssignSt;


struct _1ea66c0ed_IR;


struct _1ea6ee955_Comment;


struct _1ea6ee955_ParamDecl;


struct _1ea6ee955_FnDecl;


struct _1ea6ee955_VarDecl;


struct _1ea6ee955_RetSt;


struct _1ea6ee955_Iter;


struct _1eb7d5892_ScopeLabel;


struct _1ea6ee955_WhileKind;


struct _1ec748ded_ArgParser;

struct _1eb7d8048_Importer {
	virtual ~_1eb7d8048_Importer(void) {}

	virtual void _method_set_mod_path(jule::Str _1635_path) {}
	virtual jule::Str _method_get_mod_path(void) { return {}; }
	virtual jule::Ptr<_1eb7d8048_ImportInfo> _method_get_import(jule::Str _2533_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>,jule::Slice<_1e8ea7cc0_Log>> _method_import_package(jule::Str _3037_path,jule::Bool _3048_update_mod) { return {}; }
	virtual void _method_imported(jule::Ptr<_1eb7d8048_ImportInfo>) {}
};

struct _1ec1c55b1_Kind {
	virtual ~_1ec1c55b1_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _5722_other) { return {}; }
};

struct _1ec2d8be1_Lookup {
	virtual ~_1ec2d8be1_Lookup(void) {}

	virtual jule::Ptr<_1eb7d8048_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ptr<_1eb7d8048_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ptr<_1eba533d4_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ptr<_1ec1c55b1_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ptr<_1eb29bdd6_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ptr<_1eb627195_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ptr<_1eb7c68e9_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ptr<_1eb7c7e7d_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _1ec748ded_CommonFlag {
	virtual ~_1ec748ded_CommonFlag(void) {}

	virtual jule::Str _method_name(void) { return {}; }
	virtual jule::I32 _method_short(void) { return {}; }
	virtual jule::Str _method_what(void) { return {}; }
	virtual void _method_reset(void) {}
};


struct _1e8d8d535_AnsiEscape {
	

	_1e8d8d535_AnsiEscape(void) = default;

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(const _1e8d8d535_AnsiEscape &_Src) const { return true; }

	inline bool operator!=(const _1e8d8d535_AnsiEscape &_Src) const { return !this->operator==(_Src); }
};


struct _1e8d8d535_Logger {
	

	_1e8d8d535_Logger(void) = default;

	static inline void _static_method_log_flat(_1e8ea7cc0_Log&);


	static inline void _static_method_log_error(_1e8ea7cc0_Log&);


	static inline void _static_method_log(_1e8ea7cc0_Log&);


	static inline void _static_method_print_logs(jule::Slice<_1e8ea7cc0_Log>&);


	inline bool operator==(const _1e8d8d535_Logger &_Src) const { return true; }

	inline bool operator!=(const _1e8d8d535_Logger &_Src) const { return !this->operator==(_Src); }
};


struct _1e8e90769_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();


	_1e8e90769_accept_range(jule::U8 __param_lo, jule::U8 __param_hi): _field_lo(__param_lo), _field_hi(__param_hi) {}

	

	_1e8e90769_accept_range(void) = default;

	inline bool operator==(const _1e8e90769_accept_range &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _1e8e90769_accept_range &_Src) const { return !this->operator==(_Src); }
};


struct _1e904e87d_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::Int _field_w = jule::Int();
	jule::Str _field_vol_and_path = jule::Str();
	jule::Int _field_vol_len = jule::Int();


	_1e904e87d_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len): _field_path(__param_path), _field_buff(__param_buff), _field_w(__param_w), _field_vol_and_path(__param_vol_and_path), _field_vol_len(__param_vol_len) {}

	

	_1e904e87d_LazyBuff(void) = default;

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _1e904e87d_LazyBuff &_Src) const {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _1e904e87d_LazyBuff &_Src) const { return !this->operator==(_Src); }
};


struct _1e8e1506d_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_1e8e2d5d6_Status> _field_stat = jule::Ptr<_1e8e2d5d6_Status>();


	_1e8e1506d_DirEntry(jule::Str __param_name, jule::Ptr<_1e8e2d5d6_Status> __param_stat): _field_name(__param_name), _field_stat(__param_stat) {}

	

	_1e8e1506d_DirEntry(void) = default;

	inline bool operator==(const _1e8e1506d_DirEntry &_Src) const {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _1e8e1506d_DirEntry &_Src) const { return !this->operator==(_Src); }
};


struct _1e8e1506d_Directory {
	

	_1e8e1506d_Directory(void) = default;

	static inline jule::Exceptional<jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_create(jule::Str);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline bool operator==(const _1e8e1506d_Directory &_Src) const { return true; }

	inline bool operator!=(const _1e8e1506d_Directory &_Src) const { return !this->operator==(_Src); }
};


struct _1e8e1b6a1_File {
	jule::Uintptr _field_handle = jule::Uintptr();


	_1e8e1b6a1_File(jule::Uintptr __param_handle): _field_handle(__param_handle) {}

	

	_1e8e1b6a1_File(void) = default;

	static inline jule::Ptr<_1e8e1b6a1_File> _static_method_new(jule::Uintptr);


	static inline jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>> _static_method_create(jule::Str);


	static inline jule::Exceptional<jule::Slice<jule::U8>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_write(jule::Str,jule::Slice<jule::U8>,jule::Int);


	inline jule::Exceptional<jule::I64> _method_seek(jule::I64,jule::Int);


	inline jule::VoidExceptional _method_close(void);


	static inline jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>> _static_method_open(jule::Str,jule::Int,jule::Int);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8>);


	inline bool operator==(const _1e8e1b6a1_File &_Src) const {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _1e8e1b6a1_File &_Src) const { return !this->operator==(_Src); }
};


struct _1e8e2d5d6_Status {
	jule::Uint _field_mode = jule::Uint();
	jule::Uint _field_size = jule::Uint();


	_1e8e2d5d6_Status(jule::Uint __param_mode, jule::Uint __param_size): _field_mode(__param_mode), _field_size(__param_size) {}

	

	_1e8e2d5d6_Status(void) = default;

	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	static inline jule::Exceptional<jule::Ptr<_1e8e2d5d6_Status>> _static_method_of(jule::Str);


	inline bool operator==(const _1e8e2d5d6_Status &_Src) const {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1e8e2d5d6_Status &_Src) const { return !this->operator==(_Src); }
};


struct _1e9c9a7a4_Cmd {
	jule::Str _field__fle = jule::Str();
	jule::Int _field__pid = jule::Int();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();


	_1e9c9a7a4_Cmd(jule::Str __param__fle, jule::Int __param__pid, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_env): _field__fle(__param__fle), _field__pid(__param__pid), _field_args(__param_args), _field_env(__param_env) {}

	

	_1e9c9a7a4_Cmd(void) = default;

	static inline jule::Ptr<_1e9c9a7a4_Cmd> _static_method_new(jule::Str);


	inline jule::Int _method_pid(void);


	inline jule::Str _method_file(void);


	inline jule::VoidExceptional _method_spawn(void);


	inline jule::VoidExceptional _method_kill(void);


	inline jule::Exceptional<jule::Int> _method_wait(void);


	inline bool operator==(const _1e9c9a7a4_Cmd &_Src) const {
		return 
			this->_field__fle == _Src._field__fle &&
			this->_field__pid == _Src._field__pid &&
			this->_field_args == _Src._field_args &&
			this->_field_env == _Src._field_env;
	}

	inline bool operator!=(const _1e9c9a7a4_Cmd &_Src) const { return !this->operator==(_Src); }
};


struct _1e8ea7cc0_Log {
	jule::Int _field_kind = 0LLU;
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();


	_1e8ea7cc0_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion): _field_kind(__param_kind), _field_row(__param_row), _field_column(__param_column), _field_path(__param_path), _field_text(__param_text), _field_line(__param_line), _field_suggestion(__param_suggestion) {}

	

	_1e8ea7cc0_Log(void) = default;

	inline bool operator==(const _1e8ea7cc0_Log &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text &&
			this->_field_line == _Src._field_line &&
			this->_field_suggestion == _Src._field_suggestion;
	}

	inline bool operator!=(const _1e8ea7cc0_Log &_Src) const { return !this->operator==(_Src); }
};


struct _1e9c59675_FloatInfo {
	jule::Uint _field_mantbits = jule::Uint();
	jule::Uint _field_expbits = jule::Uint();
	jule::Int _field_bias = jule::Int();


	_1e9c59675_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias): _field_mantbits(__param_mantbits), _field_expbits(__param_expbits), _field_bias(__param_bias) {}

	

	_1e9c59675_FloatInfo(void) = default;

	inline bool operator==(const _1e9c59675_FloatInfo &_Src) const {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _1e9c59675_FloatInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1e9c59675_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();


	_1e9c59675_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg) {}

	

	_1e9c59675_DecimalSlice(void) = default;

	inline bool operator==(const _1e9c59675_DecimalSlice &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _1e9c59675_DecimalSlice &_Src) const { return !this->operator==(_Src); }
};


struct _1ea033a09_LeftCheat {
	jule::Int _field_delta = jule::Int();
	jule::Str _field_cutoff = jule::Str();


	_1ea033a09_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff): _field_delta(__param_delta), _field_cutoff(__param_cutoff) {}

	

	_1ea033a09_LeftCheat(void) = default;

	inline bool operator==(const _1ea033a09_LeftCheat &_Src) const {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _1ea033a09_LeftCheat &_Src) const { return !this->operator==(_Src); }
};


struct _1ea033a09_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();


	_1ea033a09_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg), _field_trunc(__param_trunc) {}

	

	_1ea033a09_Decimal(void) = default;

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_1e9c59675_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _1ea033a09_Decimal &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _1ea033a09_Decimal &_Src) const { return !this->operator==(_Src); }
};


struct _1ea84b541_FoldPair {
	jule::U16 _field_from = jule::U16();
	jule::U16 _field_to = jule::U16();


	_1ea84b541_FoldPair(jule::U16 __param_from, jule::U16 __param_to): _field_from(__param_from), _field_to(__param_to) {}

	

	_1ea84b541_FoldPair(void) = default;

	inline bool operator==(const _1ea84b541_FoldPair &_Src) const {
		return 
			this->_field_from == _Src._field_from &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _1ea84b541_FoldPair &_Src) const { return !this->operator==(_Src); }
};


struct _1ea84b541_CaseRange {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::Array<jule::I32,3> _field_delta = jule::Array<jule::I32,3>();


	_1ea84b541_CaseRange(jule::U32 __param_lo, jule::U32 __param_hi, jule::Array<jule::I32,3> __param_delta): _field_lo(__param_lo), _field_hi(__param_hi), _field_delta(__param_delta) {}

	

	_1ea84b541_CaseRange(void) = default;

	inline bool operator==(const _1ea84b541_CaseRange &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_delta == _Src._field_delta;
	}

	inline bool operator!=(const _1ea84b541_CaseRange &_Src) const { return !this->operator==(_Src); }
};


struct _1ea84b541_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();


	_1ea84b541_Range16(jule::U16 __param_lo, jule::U16 __param_hi, jule::U16 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_1ea84b541_Range16(void) = default;

	inline bool operator==(const _1ea84b541_Range16 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _1ea84b541_Range16 &_Src) const { return !this->operator==(_Src); }
};


struct _1ea84b541_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();


	_1ea84b541_Range32(jule::U32 __param_lo, jule::U32 __param_hi, jule::U32 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_1ea84b541_Range32(void) = default;

	inline bool operator==(const _1ea84b541_Range32 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _1ea84b541_Range32 &_Src) const { return !this->operator==(_Src); }
};


struct _1ea84b541_RangeTable {
	jule::Slice<_1ea84b541_Range16> _field_r16 = jule::Slice<_1ea84b541_Range16>();
	jule::Slice<_1ea84b541_Range32> _field_r32 = jule::Slice<_1ea84b541_Range32>();
	jule::Int _field_latin_offset = jule::Int();


	_1ea84b541_RangeTable(jule::Slice<_1ea84b541_Range16> __param_r16, jule::Slice<_1ea84b541_Range32> __param_r32, jule::Int __param_latin_offset): _field_r16(__param_r16), _field_r32(__param_r32), _field_latin_offset(__param_latin_offset) {}

	

	_1ea84b541_RangeTable(void) = default;

	inline bool operator==(const _1ea84b541_RangeTable &_Src) const {
		return 
			this->_field_r16 == _Src._field_r16 &&
			this->_field_r32 == _Src._field_r32 &&
			this->_field_latin_offset == _Src._field_latin_offset;
	}

	inline bool operator!=(const _1ea84b541_RangeTable &_Src) const { return !this->operator==(_Src); }
};


struct _1ea7465e5_Token {
	jule::Ptr<_1ea701c98_File> _field_file = jule::Ptr<_1ea701c98_File>();
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_kind = jule::Str();
	jule::Uint _field_id = 0LLU;


	_1ea7465e5_Token(jule::Ptr<_1ea701c98_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id): _field_file(__param_file), _field_row(__param_row), _field_column(__param_column), _field_kind(__param_kind), _field_id(__param_id) {}

	

	_1ea7465e5_Token(void) = default;

	inline jule::U8 _method_prec(void);


	inline bool operator==(const _1ea7465e5_Token &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _1ea7465e5_Token &_Src) const { return !this->operator==(_Src); }
};


struct _1ea701c98_File {
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Str _field__path = jule::Str();
	jule::Slice<_1ea7465e5_Token> _field__tokens = jule::Slice<_1ea7465e5_Token>();


	_1ea701c98_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, jule::Slice<_1ea7465e5_Token> __param__tokens): _field_data(__param_data), _field__path(__param__path), _field__tokens(__param__tokens) {}

	

	_1ea701c98_File(void) = default;

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline jule::Slice<_1ea7465e5_Token> _method_tokens(void);


	inline jule::Str _method_get_row(jule::Int);


	inline bool operator==(const _1ea701c98_File &_Src) const {
		return 
			this->_field_data == _Src._field_data &&
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _1ea701c98_File &_Src) const { return !this->operator==(_Src); }
};


struct _1ea703492_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::Uint _field_id = 0LLU;


	_1ea703492_KindPair(jule::Str __param_kind, jule::Uint __param_id): _field_kind(__param_kind), _field_id(__param_id) {}

	

	_1ea703492_KindPair(void) = default;

	inline bool operator==(const _1ea703492_KindPair &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _1ea703492_KindPair &_Src) const { return !this->operator==(_Src); }
};


struct _1ea703492_Lex {
	jule::Slice<_1ea7465e5_Token> _field_tokens = jule::Slice<_1ea7465e5_Token>();
	jule::Ptr<_1ea701c98_File> _field_file = jule::Ptr<_1ea701c98_File>();
	jule::Int _field_pos = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Int _field_row = jule::Int();
	jule::Slice<_1e8ea7cc0_Log> _field_errors = jule::Slice<_1e8ea7cc0_Log>();


	_1ea703492_Lex(jule::Slice<_1ea7465e5_Token> __param_tokens, jule::Ptr<_1ea701c98_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_1e8ea7cc0_Log> __param_errors): _field_tokens(__param_tokens), _field_file(__param_file), _field_pos(__param_pos), _field_column(__param_column), _field_row(__param_row), _field_errors(__param_errors) {}

	

	_1ea703492_Lex(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_1ea7465e5_Token&,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>&);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_1ea7465e5_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>&);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>&);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>&,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>&);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>&,jule::Str,jule::Uint,_1ea7465e5_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_1ea7465e5_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>&,_1ea7465e5_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>&,_1ea7465e5_Token&);


	inline _1ea7465e5_Token _method_token(void);


	inline bool operator==(const _1ea703492_Lex &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1ea703492_Lex &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ecac9_Ast {
	jule::Ptr<_1ea701c98_File> _field_file = jule::Ptr<_1ea701c98_File>();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Slice<jule::Ptr<_1ea6ee955_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_1ea6ee955_UseDecl>>();
	jule::Slice<jule::Ptr<_1ea6ee955_Impl>> _field_impls = jule::Slice<jule::Ptr<_1ea6ee955_Impl>>();
	jule::Slice<_1ea6ee955_Node> _field_decls = jule::Slice<_1ea6ee955_Node>();


	_1ea6ecac9_Ast(jule::Ptr<_1ea701c98_File> __param_file, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_top_directives, jule::Slice<jule::Ptr<_1ea6ee955_UseDecl>> __param_use_decls, jule::Slice<jule::Ptr<_1ea6ee955_Impl>> __param_impls, jule::Slice<_1ea6ee955_Node> __param_decls): _field_file(__param_file), _field_top_directives(__param_top_directives), _field_use_decls(__param_use_decls), _field_impls(__param_impls), _field_decls(__param_decls) {}

	

	_1ea6ecac9_Ast(void) = default;

	inline bool operator==(const _1ea6ecac9_Ast &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _1ea6ecac9_Ast &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_CommentGroup {
	jule::Slice<jule::Ptr<_1ea6ee955_Comment>> _field_comments = jule::Slice<jule::Ptr<_1ea6ee955_Comment>>();


	_1ea6ee955_CommentGroup(jule::Slice<jule::Ptr<_1ea6ee955_Comment>> __param_comments): _field_comments(__param_comments) {}

	

	_1ea6ee955_CommentGroup(void) = default;

	inline bool operator==(const _1ea6ee955_CommentGroup &_Src) const {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _1ea6ee955_CommentGroup &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_NamespaceTypeDecl {
	jule::Slice<_1ea7465e5_Token> _field_idents = jule::Slice<_1ea7465e5_Token>();
	jule::Ptr<_1ea6ee955_IdentTypeDecl> _field_kind = jule::Ptr<_1ea6ee955_IdentTypeDecl>();


	_1ea6ee955_NamespaceTypeDecl(jule::Slice<_1ea7465e5_Token> __param_idents, jule::Ptr<_1ea6ee955_IdentTypeDecl> __param_kind): _field_idents(__param_idents), _field_kind(__param_kind) {}

	

	_1ea6ee955_NamespaceTypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_NamespaceTypeDecl &_Src) const {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ea6ee955_NamespaceTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_SptrTypeDecl {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_elem = jule::Ptr<_1ea6ee955_TypeDecl>();


	_1ea6ee955_SptrTypeDecl(jule::Ptr<_1ea6ee955_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1ea6ee955_SptrTypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_SptrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ea6ee955_SptrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_SlcTypeDecl {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_elem = jule::Ptr<_1ea6ee955_TypeDecl>();


	_1ea6ee955_SlcTypeDecl(jule::Ptr<_1ea6ee955_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1ea6ee955_SlcTypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_SlcTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ea6ee955_SlcTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_TupleTypeDecl {
	jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>();


	_1ea6ee955_TupleTypeDecl(jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> __param_types): _field_types(__param_types) {}

	

	_1ea6ee955_TupleTypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_TupleTypeDecl &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1ea6ee955_TupleTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_PtrTypeDecl {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_elem = jule::Ptr<_1ea6ee955_TypeDecl>();


	_1ea6ee955_PtrTypeDecl(jule::Ptr<_1ea6ee955_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1ea6ee955_PtrTypeDecl(void) = default;

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1ea6ee955_PtrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ea6ee955_PtrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_ArrTypeDecl {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_elem = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Ptr<_1ea6ee955_Expr> _field_size = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_ArrTypeDecl(jule::Ptr<_1ea6ee955_TypeDecl> __param_elem, jule::Ptr<_1ea6ee955_Expr> __param_size): _field_elem(__param_elem), _field_size(__param_size) {}

	

	_1ea6ee955_ArrTypeDecl(void) = default;

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _1ea6ee955_ArrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1ea6ee955_ArrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_MapTypeDecl {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_key = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Ptr<_1ea6ee955_TypeDecl> _field_val = jule::Ptr<_1ea6ee955_TypeDecl>();


	_1ea6ee955_MapTypeDecl(jule::Ptr<_1ea6ee955_TypeDecl> __param_key, jule::Ptr<_1ea6ee955_TypeDecl> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1ea6ee955_MapTypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_MapTypeDecl &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1ea6ee955_MapTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_RetTypeDecl {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Slice<_1ea7465e5_Token> _field_idents = jule::Slice<_1ea7465e5_Token>();


	_1ea6ee955_RetTypeDecl(jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Slice<_1ea7465e5_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1ea6ee955_RetTypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_RetTypeDecl &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _1ea6ee955_RetTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_TupleExpr {
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _field_expr = jule::Slice<jule::Ptr<_1ea6ee955_Expr>>();


	_1ea6ee955_TupleExpr(jule::Slice<jule::Ptr<_1ea6ee955_Expr>> __param_expr): _field_expr(__param_expr) {}

	

	_1ea6ee955_TupleExpr(void) = default;

	inline bool operator==(const _1ea6ee955_TupleExpr &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_TupleExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_CastExpr {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Any _field_expr = jule::Any();


	_1ea6ee955_CastExpr(jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Any __param_expr): _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_1ea6ee955_CastExpr(void) = default;

	inline bool operator==(const _1ea6ee955_CastExpr &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_CastExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_StructLit {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1ea6ee955_StructLit(jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs): _field_kind(__param_kind), _field_exprs(__param_exprs) {}

	

	_1ea6ee955_StructLit(void) = default;

	inline bool operator==(const _1ea6ee955_StructLit &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1ea6ee955_StructLit &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_ScopeTree {
	jule::Ptr<_1ea6ee955_ScopeTree> _field_parent = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1ea6ee955_ScopeTree(jule::Ptr<_1ea6ee955_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1ea6ee955_ScopeTree(void) = default;

	inline bool operator==(const _1ea6ee955_ScopeTree &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1ea6ee955_ScopeTree &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Conditional {
	jule::Ptr<_1ea6ee955_If> _field_head = jule::Ptr<_1ea6ee955_If>();
	jule::Slice<jule::Ptr<_1ea6ee955_If>> _field_tail = jule::Slice<jule::Ptr<_1ea6ee955_If>>();
	jule::Ptr<_1ea6ee955_Else> _field_default = jule::Ptr<_1ea6ee955_Else>();


	_1ea6ee955_Conditional(jule::Ptr<_1ea6ee955_If> __param_head, jule::Slice<jule::Ptr<_1ea6ee955_If>> __param_tail, jule::Ptr<_1ea6ee955_Else> __param_default): _field_head(__param_head), _field_tail(__param_tail), _field_default(__param_default) {}

	

	_1ea6ee955_Conditional(void) = default;

	inline bool operator==(const _1ea6ee955_Conditional &_Src) const {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1ea6ee955_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _1ea713260_FileInfo {
	jule::Ptr<_1ea6ecac9_Ast> _field_ast = jule::Ptr<_1ea6ecac9_Ast>();
	jule::Slice<_1e8ea7cc0_Log> _field_errors = jule::Slice<_1e8ea7cc0_Log>();


	_1ea713260_FileInfo(jule::Ptr<_1ea6ecac9_Ast> __param_ast, jule::Slice<_1e8ea7cc0_Log> __param_errors): _field_ast(__param_ast), _field_errors(__param_errors) {}

	

	_1ea713260_FileInfo(void) = default;

	inline bool operator==(const _1ea713260_FileInfo &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1ea713260_FileInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1ea713260_PackageInfo {
	jule::Slice<jule::Ptr<_1ea713260_FileInfo>> _field_files = jule::Slice<jule::Ptr<_1ea713260_FileInfo>>();


	_1ea713260_PackageInfo(jule::Slice<jule::Ptr<_1ea713260_FileInfo>> __param_files): _field_files(__param_files) {}

	

	_1ea713260_PackageInfo(void) = default;

	inline bool operator==(const _1ea713260_PackageInfo &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1ea713260_PackageInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1ea722e73_Stmt {
	jule::Slice<_1ea7465e5_Token> _field_tokens = jule::Slice<_1ea7465e5_Token>();
	jule::Bool _field_terminated = jule::Bool();


	_1ea722e73_Stmt(jule::Slice<_1ea7465e5_Token> __param_tokens, jule::Bool __param_terminated): _field_tokens(__param_tokens), _field_terminated(__param_terminated) {}

	

	_1ea722e73_Stmt(void) = default;

	inline bool operator==(const _1ea722e73_Stmt &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _1ea722e73_Stmt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea722e73_ScopeParser {
	jule::Ptr<_1eb381c13_Parser> _field_p = jule::Ptr<_1eb381c13_Parser>();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_s = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _field_stmts = jule::Slice<jule::Ptr<_1ea722e73_Stmt>>();
	jule::Int _field_pos = jule::Int();


	_1ea722e73_ScopeParser(jule::Ptr<_1eb381c13_Parser> __param_p, jule::Ptr<_1ea6ee955_ScopeTree> __param_s, jule::Slice<jule::Ptr<_1ea722e73_Stmt>> __param_stmts, jule::Int __param_pos): _field_p(__param_p), _field_s(__param_s), _field_stmts(__param_stmts), _field_pos(__param_pos) {}

	

	_1ea722e73_ScopeParser(void) = default;

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_1ea7465e5_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea722e73_Stmt> _method_next(void);


	inline jule::Ptr<_1ea6ee955_ScopeTree> _method_build_scope(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_var_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_ret_st(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ptr<_1ea722e73_Stmt>&);


	inline jule::Ptr<_1ea6ee955_WhileKind> _method_build_while_iter_kind(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_VarDecl> _method_build_range_kind_key(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_1ea7465e5_Token>>&);


	inline void _method_setup_range_kind_keys_plain(jule::Ptr<_1ea6ee955_RangeKind>&,jule::Slice<_1ea7465e5_Token>&);


	inline void _method_setup_range_kind_keys_explicit(jule::Ptr<_1ea6ee955_RangeKind>&,jule::Slice<_1ea7465e5_Token>&);


	inline void _method_setup_range_kind_keys(jule::Ptr<_1ea6ee955_RangeKind>&,jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_RangeKind> _method_build_range_iter_kind(jule::Slice<_1ea7465e5_Token>&,jule::Slice<_1ea7465e5_Token>&,_1ea7465e5_Token&);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_1ea7465e5_Token>&,_1ea7465e5_Token&);


	inline jule::Any _method_build_common_iter(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ptr<_1ea722e73_Stmt>&);


	inline jule::Any _method_build_break_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_cont_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_If> _method_build_if(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_Else> _method_build_else(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_comment_st(_1ea7465e5_Token&);


	inline jule::Any _method_build_co_call_st(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_fall_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_push_case_expr(jule::Slice<_1ea7465e5_Token>,_1ea7465e5_Token,jule::Bool,jule::Slice<jule::Ptr<_1ea6ee955_Expr>>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _method_build_case_exprs(jule::Slice<_1ea7465e5_Token>&,jule::Bool);


	inline jule::Ptr<_1ea6ee955_ScopeTree> _method_build_case_scope(jule::Slice<_1ea7465e5_Token>&);


	inline std::tuple<jule::Ptr<_1ea6ee955_Case>,jule::Bool> _method_build_case(jule::Slice<_1ea7465e5_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ptr<_1ea6ee955_Case>>,jule::Ptr<_1ea6ee955_Else>> _method_build_cases(jule::Slice<_1ea7465e5_Token>,jule::Bool);


	inline jule::Ptr<_1ea6ee955_MatchCase> _method_build_match_case(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_ScopeTree> _method_build_scope_st(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_LabelSt> _method_build_label_st(jule::Slice<_1ea7465e5_Token>&);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1eb382692_AssignInfo> _method_build_assign_info(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_AssignLeft> _method_build_assign_l(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_1ea7465e5_Token>>&);


	inline std::tuple<jule::Ptr<_1ea6ee955_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_1ea7465e5_Token>&);


	inline std::tuple<jule::Ptr<_1ea6ee955_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_1ea7465e5_Token>);


	inline std::tuple<jule::Ptr<_1ea6ee955_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_use_expr(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_st(jule::Ptr<_1ea722e73_Stmt>&);


	inline void _method_build(jule::Slice<_1ea7465e5_Token>&,jule::Ptr<_1ea6ee955_ScopeTree>&);


	inline bool operator==(const _1ea722e73_ScopeParser &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1ea722e73_ScopeParser &_Src) const { return !this->operator==(_Src); }
};


struct _1ea715b69_CallData {
	jule::Slice<_1ea7465e5_Token> _field_expr_tokens = jule::Slice<_1ea7465e5_Token>();
	jule::Slice<_1ea7465e5_Token> _field_args_tokens = jule::Slice<_1ea7465e5_Token>();
	jule::Slice<_1ea7465e5_Token> _field_generics_tokens = jule::Slice<_1ea7465e5_Token>();


	_1ea715b69_CallData(jule::Slice<_1ea7465e5_Token> __param_expr_tokens, jule::Slice<_1ea7465e5_Token> __param_args_tokens, jule::Slice<_1ea7465e5_Token> __param_generics_tokens): _field_expr_tokens(__param_expr_tokens), _field_args_tokens(__param_args_tokens), _field_generics_tokens(__param_generics_tokens) {}

	

	_1ea715b69_CallData(void) = default;

	inline bool operator==(const _1ea715b69_CallData &_Src) const {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _1ea715b69_CallData &_Src) const { return !this->operator==(_Src); }
};


struct _1ea715b69_ExprBuilder {
	jule::Ptr<_1eb381c13_Parser> _field_p = jule::Ptr<_1eb381c13_Parser>();


	_1ea715b69_ExprBuilder(jule::Ptr<_1eb381c13_Parser> __param_p): _field_p(__param_p) {}

	

	_1ea715b69_ExprBuilder(void) = default;

	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_1ea6ee955_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_1ea7465e5_Token>>&);


	inline jule::Ptr<_1ea6ee955_LitExpr> _method_build_lit(_1ea7465e5_Token);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_primitive_type(_1ea7465e5_Token&);


	inline jule::Any _method_build_single(_1ea7465e5_Token);


	inline jule::Ptr<_1ea6ee955_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_UnaryExpr> _method_build_unary(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_type(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_sub_ident(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_VariadicExpr> _method_build_variadic(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_CastExpr> _method_try_build_cast(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_push_arg(jule::Slice<jule::Ptr<_1ea6ee955_Expr>>&,jule::Slice<_1ea7465e5_Token>,_1ea7465e5_Token);


	inline jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _method_build_args(jule::Slice<_1ea7465e5_Token>);


	inline jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _method_build_call_generics(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_FnCallExpr> _method_build_fn_call(_1ea7465e5_Token&,jule::Ptr<_1ea715b69_CallData>&);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_FnDecl> _method_build_anon_fn(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_unsafe(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_push_range_lit_part(jule::Slice<_1ea7465e5_Token>,_1ea7465e5_Token,jule::Slice<jule::Slice<_1ea7465e5_Token>>&);


	inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_StructLit> _method_build_typed_struct_literal(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_BraceLit> _method_build_brace_lit(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_brace_range(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _method_get_enumerable_parts(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_SliceExpr> _method_build_slice(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_IndexingExpr> _method_build_indexing(jule::Slice<_1ea7465e5_Token>,jule::Slice<_1ea7465e5_Token>,_1ea7465e5_Token);


	inline jule::Ptr<_1ea6ee955_SlicingExpr> _method_build_slicing(jule::Slice<_1ea7465e5_Token>&,jule::Slice<_1ea7465e5_Token>&,jule::Int&,_1ea7465e5_Token&);


	inline jule::Any _method_build_bracket_range(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_ternary(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_data(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_BinopExpr> _method_build_binop(jule::Slice<_1ea7465e5_Token>&,jule::Int);


	inline jule::Any _method_build(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Any _method_build_kind(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_Expr> _method_build_from_tokens(jule::Slice<_1ea7465e5_Token>);


	inline bool operator==(const _1ea715b69_ExprBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _1ea715b69_ExprBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1eb381c13_Parser {
	jule::Ptr<_1eb381c13_Parser> self;

	jule::Ptr<_1ea6ecac9_Ast> _field_ast = jule::Ptr<_1ea6ecac9_Ast>();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_comment_group = jule::Ptr<_1ea6ee955_CommentGroup>();
	jule::Slice<_1e8ea7cc0_Log> _field_errors = jule::Slice<_1e8ea7cc0_Log>();


	_1eb381c13_Parser(jule::Ptr<_1ea6ecac9_Ast> __param_ast, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Ptr<_1ea6ee955_CommentGroup> __param_comment_group, jule::Slice<_1e8ea7cc0_Log> __param_errors): _field_ast(__param_ast), _field_directives(__param_directives), _field_comment_group(__param_comment_group), _field_errors(__param_errors) {
		this->self = jule::Ptr<_1eb381c13_Parser>::make(this, nullptr);

	}

	~_1eb381c13_Parser(void) { this->self.ref = nullptr; }

	_1eb381c13_Parser(void) { this->self = jule::Ptr<_1eb381c13_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_1ea6ee955_Expr> _method_build_expr(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_Directive> _method_build_directive(jule::Slice<_1ea7465e5_Token>);


	inline void _method_push_directive(jule::Ptr<_1ea6ee955_Directive>);


	inline jule::Ptr<_1ea6ee955_ScopeTree> _method_build_scope(jule::Slice<_1ea7465e5_Token>&);


	inline std::tuple<jule::Ptr<_1ea6ee955_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_1ea7465e5_Token>&,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ptr<_1ea6ee955_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_1ea7465e5_Token>&,jule::Int*,jule::Bool);


	inline jule::Ptr<_1ea6ee955_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_build_var_type_and_expr(jule::Ptr<_1ea6ee955_VarDecl>&,jule::Slice<_1ea7465e5_Token>&);


	inline void _method_build_var_common(jule::Ptr<_1ea6ee955_VarDecl>&,jule::Slice<_1ea7465e5_Token>);


	inline void _method_build_var_begin(jule::Ptr<_1ea6ee955_VarDecl>&,jule::Ptr<jule::Int>,jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_VarDecl> _method_build_var(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_GenericDecl> _method_build_generic(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _method_build_generics(jule::Slice<_1ea7465e5_Token>&,_1ea7465e5_Token&);


	inline jule::Ptr<_1ea6ee955_ParamDecl> _method_build_self_param(jule::Slice<_1ea7465e5_Token>);


	inline void _method_param_type_begin(jule::Ptr<_1ea6ee955_ParamDecl>&,jule::Int&,jule::Slice<_1ea7465e5_Token>&);


	inline void _method_build_param_type(jule::Ptr<_1ea6ee955_ParamDecl>&,jule::Slice<_1ea7465e5_Token>&);


	inline void _method_param_body_id(jule::Ptr<_1ea6ee955_ParamDecl>,_1ea7465e5_Token);


	inline void _method_build_param_body(jule::Ptr<_1ea6ee955_ParamDecl>&,jule::Ptr<jule::Int>,jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_ParamDecl> _method_build_param(jule::Slice<_1ea7465e5_Token>);


	inline void _method_check_params(jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>> _method_build_params(jule::Slice<_1ea7465e5_Token>&,jule::Bool);


	inline std::tuple<jule::Ptr<_1ea6ee955_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_1ea7465e5_Token>&,jule::Int&);


	inline std::tuple<jule::Ptr<_1ea6ee955_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_1ea7465e5_Token>&,jule::Int&);


	inline jule::Ptr<_1ea6ee955_FnDecl> _method_build_fn_prototype(jule::Slice<_1ea7465e5_Token>&,jule::Int&,jule::Bool);


	inline jule::Ptr<_1ea6ee955_FnDecl> _method_build_fn(jule::Slice<_1ea7465e5_Token>&,jule::Bool,jule::Bool);


	inline jule::Slice<_1ea7465e5_Token> _method_get_use_decl_selectors(jule::Slice<_1ea7465e5_Token>);


	inline void _method_build_cpp_use_decl(jule::Ptr<_1ea6ee955_UseDecl>&,jule::Slice<_1ea7465e5_Token>&);


	inline void _method_build_std_use_decl(jule::Ptr<_1ea6ee955_UseDecl>&,jule::Slice<_1ea7465e5_Token>);


	inline void _method_build_ident_use_decl(jule::Ptr<_1ea6ee955_UseDecl>&,jule::Slice<_1ea7465e5_Token>);


	inline void _method_parse_use_decl(jule::Ptr<_1ea6ee955_UseDecl>&,jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_UseDecl> _method_build_use_decl(jule::Slice<_1ea7465e5_Token>,jule::Bool);


	inline jule::Ptr<_1ea6ee955_Expr> _method_build_enum_item_expr(jule::Ptr<jule::Int>,jule::Slice<_1ea7465e5_Token>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>> _method_build_enum_items(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_EnumDecl> _method_build_enum_decl(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_FieldDecl> _method_build_field(jule::Slice<_1ea7465e5_Token>);


	inline jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_StructDecl> _method_build_struct_decl(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_check_method_receiver(jule::Ptr<_1ea6ee955_FnDecl>&);


	inline jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> _method_build_trait_methods(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_TraitDecl> _method_build_trait_decl(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_FnDecl> _method_build_cpp_link_fn(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_VarDecl> _method_build_cpp_link_var(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_StructDecl> _method_build_cpp_link_struct(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_1ea7465e5_Token>);


	inline jule::Ptr<_1ea6ee955_UseDecl> _method_build_cpp_link_use(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_FnDecl> _method_get_method(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_parse_impl_body(jule::Ptr<_1ea6ee955_Impl>&,jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_Impl> _method_build_impl(jule::Slice<_1ea7465e5_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_check_comment_group(_1ea6ee955_Node&);


	inline void _method_check_directive(_1ea6ee955_Node&);


	inline void _method_apply_fn_meta(jule::Ptr<_1ea6ee955_FnDecl>&,jule::Bool);


	inline void _method_apply_meta(_1ea6ee955_Node&,jule::Bool);


	inline void _method_check_use_decl(_1ea6ee955_Node&);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_1ea7465e5_Token>);


	inline _1ea6ee955_Node _method_parse_node(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_append_node(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_1ea7465e5_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_1ea7465e5_Token&,jule::Slice<_1ea7465e5_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_1ea7465e5_Token,jule::Str,jule::Slice<_1ea7465e5_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_1ea7465e5_Token>&);


	inline void _method_parse(jule::Ptr<_1ea701c98_File>&);


	inline bool operator==(const _1eb381c13_Parser &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1eb381c13_Parser &_Src) const { return !this->operator==(_Src); }
};


struct _1eb6540c3_TypeBuilder {
	jule::Ptr<_1eb381c13_Parser> _field_p = jule::Ptr<_1eb381c13_Parser>();
	jule::Slice<_1ea7465e5_Token> _field_tokens = jule::Slice<_1ea7465e5_Token>();
	jule::Int* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();


	_1eb6540c3_TypeBuilder(jule::Ptr<_1eb381c13_Parser> __param_p, jule::Slice<_1ea7465e5_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err): _field_p(__param_p), _field_tokens(__param_tokens), _field_i(__param_i), _field_err(__param_err) {}

	

	_1eb6540c3_TypeBuilder(void) = default;

	inline void _method_push_err(_1ea7465e5_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_prim(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _method_ident_generics(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_ident(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_fn(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_ptr(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_sptr(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_op(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_slc(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_arr(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_map(jule::Int,jule::Slice<_1ea7465e5_Token>&);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_build_enumerable(void);


	inline jule::Ptr<_1ea6ee955_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ptr<_1ea6ee955_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _1eb6540c3_TypeBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _1eb6540c3_TypeBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1ec3e4b65_Const {
	jule::Any _field_data = jule::Any();


	_1ec3e4b65_Const(jule::Any __param_data): _field_data(__param_data) {}

	

	_1ec3e4b65_Const(void) = default;

	static inline jule::Ptr<_1ec3e4b65_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ptr<_1ec3e4b65_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ptr<_1ec3e4b65_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ptr<_1ec3e4b65_Const> _static_method_new_str(jule::Str);


	static inline jule::Ptr<_1ec3e4b65_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ptr<_1ec3e4b65_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_1ec3e4b65_Const);


	inline jule::Bool _method_and(_1ec3e4b65_Const);


	inline jule::Bool _method_or(_1ec3e4b65_Const);


	inline jule::Bool _method_eqs(_1ec3e4b65_Const);


	inline jule::Bool _method_lt(_1ec3e4b65_Const);


	inline jule::Bool _method_gt(_1ec3e4b65_Const);


	inline jule::Bool _method_add(_1ec3e4b65_Const);


	inline jule::Bool _method_sub(_1ec3e4b65_Const);


	inline jule::Bool _method_mul(_1ec3e4b65_Const);


	inline jule::Bool _method_div(_1ec3e4b65_Const);


	inline jule::Bool _method_mod(_1ec3e4b65_Const);


	inline jule::Bool _method_bitwise_and(_1ec3e4b65_Const);


	inline jule::Bool _method_bitwise_or(_1ec3e4b65_Const);


	inline jule::Bool _method_xor(_1ec3e4b65_Const);


	inline jule::Bool _method_lshift(_1ec3e4b65_Const);


	inline jule::Bool _method_rshift(_1ec3e4b65_Const);


	inline bool operator==(const _1ec3e4b65_Const &_Src) const {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1ec3e4b65_Const &_Src) const { return !this->operator==(_Src); }
};


struct _1eb29bdd6_FieldIns {
	jule::Ptr<_1eb29bdd6_Field> _field_decl = jule::Ptr<_1eb29bdd6_Field>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1eb29bdd6_FieldIns(jule::Ptr<_1eb29bdd6_Field> __param_decl, jule::Ptr<_1ec1c55b1_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1eb29bdd6_FieldIns(void) = default;

	inline bool operator==(const _1eb29bdd6_FieldIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1eb29bdd6_FieldIns &_Src) const { return !this->operator==(_Src); }
};


struct _1eb29bdd6_StructIns: public _1ec1c55b1_Kind {
	jule::Ptr<_1eb29bdd6_StructIns> self;

	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_1eb29bdd6_Struct> _field_decl = jule::Ptr<_1eb29bdd6_Struct>();
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>();
	jule::Slice<jule::Ptr<_1eb29bdd6_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_1eb29bdd6_FieldIns>>();
	jule::Slice<jule::Ptr<_1eb627195_Fn>> _field_methods = jule::Slice<jule::Ptr<_1eb627195_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_1eb736eec_ReferenceStack> _field_references = jule::Ptr<_1eb736eec_ReferenceStack>();


	_1eb29bdd6_StructIns(jule::Bool __param_checked, jule::Ptr<_1eb29bdd6_Struct> __param_decl, jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1eb29bdd6_FieldIns>> __param_fields, jule::Slice<jule::Ptr<_1eb627195_Fn>> __param_methods, jule::Bool __param_mutable, jule::Ptr<_1eb736eec_ReferenceStack> __param_references): _field_checked(__param_checked), _field_decl(__param_decl), _field_generics(__param_generics), _field_fields(__param_fields), _field_methods(__param_methods), _field_mutable(__param_mutable), _field_references(__param_references) {
		this->self = jule::Ptr<_1eb29bdd6_StructIns>::make(this, nullptr);

	}

	~_1eb29bdd6_StructIns(void) { this->self.ref = nullptr; }

	_1eb29bdd6_StructIns(void) { this->self = jule::Ptr<_1eb29bdd6_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Bool _method_same(jule::Ptr<_1eb29bdd6_StructIns>);


	inline jule::Ptr<_1eb627195_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb29bdd6_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _1eb29bdd6_StructIns &_Src) const {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _1eb29bdd6_StructIns &_Src) const { return !this->operator==(_Src); }
};


struct _1eb627195_RetType {
	jule::Ptr<_1ec1c55b1_TypeSymbol> _field_kind = jule::Ptr<_1ec1c55b1_TypeSymbol>();
	jule::Slice<_1ea7465e5_Token> _field_idents = jule::Slice<_1ea7465e5_Token>();


	_1eb627195_RetType(jule::Ptr<_1ec1c55b1_TypeSymbol> __param_kind, jule::Slice<_1ea7465e5_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1eb627195_RetType(void) = default;

	inline bool operator==(const _1eb627195_RetType &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _1eb627195_RetType &_Src) const { return !this->operator==(_Src); }
};


struct _1eb627195_ParamIns {
	jule::Ptr<_1eb627195_Param> _field_decl = jule::Ptr<_1eb627195_Param>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1eb627195_ParamIns(jule::Ptr<_1eb627195_Param> __param_decl, jule::Ptr<_1ec1c55b1_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1eb627195_ParamIns(void) = default;

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _1eb627195_ParamIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1eb627195_ParamIns &_Src) const { return !this->operator==(_Src); }
};


struct _1eb627195_FnIns: public _1ec1c55b1_Kind {
	jule::Ptr<_1eb627195_FnIns> self;

	jule::Ptr<_1eb29bdd6_StructIns> _field_owner = jule::Ptr<_1eb29bdd6_StructIns>();
	jule::Ptr<_1eb627195_Fn> _field_decl = jule::Ptr<_1eb627195_Fn>();
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>();
	jule::Slice<jule::Ptr<_1eb627195_ParamIns>> _field_params = jule::Slice<jule::Ptr<_1eb627195_ParamIns>>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_result = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();
	jule::Ptr<_1eb736eec_ReferenceStack> _field_references = jule::Ptr<_1eb736eec_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Ptr<_1eb736eec_ReferenceStack> _field_refers = jule::Ptr<_1eb736eec_ReferenceStack>();
	jule::U8 _field_caller = jule::U8();
	jule::Bool _field_reloaded = jule::Bool();


	_1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns> __param_owner, jule::Ptr<_1eb627195_Fn> __param_decl, jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1eb627195_ParamIns>> __param_params, jule::Ptr<_1ec1c55b1_TypeKind> __param_result, jule::Ptr<_1eb7d5892_Scope> __param_scope, jule::Ptr<_1eb736eec_ReferenceStack> __param_references, jule::Bool __param_anon, jule::Ptr<_1eb736eec_ReferenceStack> __param_refers, jule::U8 __param_caller, jule::Bool __param_reloaded): _field_owner(__param_owner), _field_decl(__param_decl), _field_generics(__param_generics), _field_params(__param_params), _field_result(__param_result), _field_scope(__param_scope), _field_references(__param_references), _field_anon(__param_anon), _field_refers(__param_refers), _field_caller(__param_caller), _field_reloaded(__param_reloaded) {
		this->self = jule::Ptr<_1eb627195_FnIns>::make(this, nullptr);

	}

	~_1eb627195_FnIns(void) { this->self.ref = nullptr; }

	_1eb627195_FnIns(void) { this->self = jule::Ptr<_1eb627195_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_same(jule::Ptr<_1eb627195_FnIns>);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(const _1eb627195_FnIns &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_anon == _Src._field_anon &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded;
	}

	inline bool operator!=(const _1eb627195_FnIns &_Src) const { return !this->operator==(_Src); }
};


struct _1eb736eec_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();


	_1eb736eec_ReferenceStack(jule::Slice<jule::Any> __param_buffer): _field_buffer(__param_buffer) {}

	

	_1eb736eec_ReferenceStack(void) = default;

	static inline jule::Ptr<_1eb736eec_ReferenceStack> _static_method_new(void);


	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline jule::Bool _method_exist_0(jule::Ptr<_1eba533d4_Var>);
	inline jule::Bool _method_exist_1(jule::Ptr<_1eb627195_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ptr<_1eb29bdd6_StructIns>);


	inline bool operator==(const _1eb736eec_ReferenceStack &_Src) const {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _1eb736eec_ReferenceStack &_Src) const { return !this->operator==(_Src); }
};


struct _1eb736eec_SymbolBuilder {
	jule::Ptr<_1eb736eec_SymbolBuilder> self;

	jule::Ptr<_1eb736eec_SymbolBuilder> _field_owner = jule::Ptr<_1eb736eec_SymbolBuilder>();
	jule::Trait<_1eb7d8048_Importer> _field_importer = jule::Trait<_1eb7d8048_Importer>();
	jule::Slice<_1e8ea7cc0_Log> _field_errors = jule::Slice<_1e8ea7cc0_Log>();
	jule::Ptr<_1ea6ecac9_Ast> _field_ast = jule::Ptr<_1ea6ecac9_Ast>();
	jule::Ptr<_1ebcb6081_SymbolTable> _field_table = jule::Ptr<_1ebcb6081_SymbolTable>();


	_1eb736eec_SymbolBuilder(jule::Ptr<_1eb736eec_SymbolBuilder> __param_owner, jule::Trait<_1eb7d8048_Importer> __param_importer, jule::Slice<_1e8ea7cc0_Log> __param_errors, jule::Ptr<_1ea6ecac9_Ast> __param_ast, jule::Ptr<_1ebcb6081_SymbolTable> __param_table): _field_owner(__param_owner), _field_importer(__param_importer), _field_errors(__param_errors), _field_ast(__param_ast), _field_table(__param_table) {
		this->self = jule::Ptr<_1eb736eec_SymbolBuilder>::make(this, nullptr);

	}

	~_1eb736eec_SymbolBuilder(void) { this->self.ref = nullptr; }

	_1eb736eec_SymbolBuilder(void) { this->self = jule::Ptr<_1eb736eec_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ptr<_1eb736eec_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_1ea7465e5_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_1ea7465e5_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_build_cpp_header_import(jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_build_std_import(jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_build_ident_import(jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_build_import(jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ptr<_1eb7d8048_ImportInfo>&);


	inline void _method_impl_import_selections(jule::Ptr<_1eb7d8048_ImportInfo>&,jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ptr<_1eb736eec_SymbolBuilder>&,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ptr<_1eb736eec_SymbolBuilder>&,jule::Ptr<_1eb7d8048_ImportInfo>&,_1ea7465e5_Token&);


	inline jule::Bool _method_check_import_cycles(jule::Ptr<_1eb7d8048_ImportInfo>,jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Bool _method_import_package(jule::Ptr<_1eb7d8048_ImportInfo>&,jule::Ptr<_1ea6ee955_UseDecl>&);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_import_use_decl(jule::Ptr<_1ea6ee955_UseDecl>&);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_1ea6ee955_Node&);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _1eb736eec_SymbolBuilder &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _1eb736eec_SymbolBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Scope {
	jule::Ptr<_1eb7d5892_Scope> _field_parent = jule::Ptr<_1eb7d5892_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1eb7d5892_Scope(jule::Ptr<_1eb7d5892_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1eb7d5892_Scope(void) = default;

	inline bool operator==(const _1eb7d5892_Scope &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1eb7d5892_Scope &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();


	_1eb7d5892_If(jule::Any __param_expr, jule::Ptr<_1eb7d5892_Scope> __param_scope): _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1eb7d5892_If(void) = default;

	inline bool operator==(const _1eb7d5892_If &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1eb7d5892_If &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Else {
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();


	_1eb7d5892_Else(jule::Ptr<_1eb7d5892_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1eb7d5892_Else(void) = default;

	inline bool operator==(const _1eb7d5892_Else &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1eb7d5892_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Conditional {
	jule::Slice<jule::Ptr<_1eb7d5892_If>> _field_elifs = jule::Slice<jule::Ptr<_1eb7d5892_If>>();
	jule::Ptr<_1eb7d5892_Else> _field_default = jule::Ptr<_1eb7d5892_Else>();


	_1eb7d5892_Conditional(jule::Slice<jule::Ptr<_1eb7d5892_If>> __param_elifs, jule::Ptr<_1eb7d5892_Else> __param_default): _field_elifs(__param_elifs), _field_default(__param_default) {}

	

	_1eb7d5892_Conditional(void) = default;

	inline bool operator==(const _1eb7d5892_Conditional &_Src) const {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1eb7d5892_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_InfIter {
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();


	_1eb7d5892_InfIter(jule::Ptr<_1eb7d5892_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1eb7d5892_InfIter(void) = default;

	inline bool operator==(const _1eb7d5892_InfIter &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1eb7d5892_InfIter &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();


	_1eb7d5892_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ptr<_1eb7d5892_Scope> __param_scope): _field_expr(__param_expr), _field_next(__param_next), _field_scope(__param_scope) {}

	

	_1eb7d5892_WhileIter(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1eb7d5892_WhileIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1eb7d5892_WhileIter &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_RangeIter {
	jule::Ptr<_1ebcce31e_Data> _field_expr = jule::Ptr<_1ebcce31e_Data>();
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();
	jule::Ptr<_1eba533d4_Var> _field_key_a = jule::Ptr<_1eba533d4_Var>();
	jule::Ptr<_1eba533d4_Var> _field_key_b = jule::Ptr<_1eba533d4_Var>();


	_1eb7d5892_RangeIter(jule::Ptr<_1ebcce31e_Data> __param_expr, jule::Ptr<_1eb7d5892_Scope> __param_scope, jule::Ptr<_1eba533d4_Var> __param_key_a, jule::Ptr<_1eba533d4_Var> __param_key_b): _field_expr(__param_expr), _field_scope(__param_scope), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1eb7d5892_RangeIter(void) = default;

	inline bool operator==(const _1eb7d5892_RangeIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1eb7d5892_RangeIter &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_ContSt {
	jule::Uintptr _field_it = jule::Uintptr();


	_1eb7d5892_ContSt(jule::Uintptr __param_it): _field_it(__param_it) {}

	

	_1eb7d5892_ContSt(void) = default;

	inline bool operator==(const _1eb7d5892_ContSt &_Src) const {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _1eb7d5892_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_BreakSt {
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_mtch = jule::Uintptr();


	_1eb7d5892_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch): _field_it(__param_it), _field_mtch(__param_mtch) {}

	

	_1eb7d5892_BreakSt(void) = default;

	inline bool operator==(const _1eb7d5892_BreakSt &_Src) const {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _1eb7d5892_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Label {
	jule::Str _field_ident = jule::Str();


	_1eb7d5892_Label(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1eb7d5892_Label(void) = default;

	inline bool operator==(const _1eb7d5892_Label &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1eb7d5892_Label &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_GotoSt {
	jule::Str _field_ident = jule::Str();


	_1eb7d5892_GotoSt(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1eb7d5892_GotoSt(void) = default;

	inline bool operator==(const _1eb7d5892_GotoSt &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1eb7d5892_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_1eb7d5892_Postfix(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1eb7d5892_Postfix(void) = default;

	inline bool operator==(const _1eb7d5892_Postfix &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1eb7d5892_Postfix &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Assign {
	jule::Any _field_l = jule::Any();
	jule::Any _field_r = jule::Any();
	jule::Str _field_op = jule::Str();


	_1eb7d5892_Assign(jule::Any __param_l, jule::Any __param_r, jule::Str __param_op): _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1eb7d5892_Assign(void) = default;

	inline bool operator==(const _1eb7d5892_Assign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1eb7d5892_Assign &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();


	_1eb7d5892_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r): _field_l(__param_l), _field_r(__param_r) {}

	

	_1eb7d5892_MultiAssign(void) = default;

	inline bool operator==(const _1eb7d5892_MultiAssign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _1eb7d5892_MultiAssign &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Match {
	jule::Ptr<_1ebcce31e_Data> _field_expr = jule::Ptr<_1ebcce31e_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_1eb7d5892_Case>> _field_cases = jule::Slice<jule::Ptr<_1eb7d5892_Case>>();
	jule::Ptr<_1eb7d5892_Case> _field_default = jule::Ptr<_1eb7d5892_Case>();


	_1eb7d5892_Match(jule::Ptr<_1ebcce31e_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ptr<_1eb7d5892_Case>> __param_cases, jule::Ptr<_1eb7d5892_Case> __param_default): _field_expr(__param_expr), _field_type_match(__param_type_match), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1eb7d5892_Match(void) = default;

	inline jule::Bool _method_is_generic_type_match(void);


	inline bool operator==(const _1eb7d5892_Match &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1eb7d5892_Match &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_Case {
	jule::Ptr<_1eb7d5892_Match> _field_owner = jule::Ptr<_1eb7d5892_Match>();
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();
	jule::Slice<jule::Ptr<_1ebcce31e_Data>> _field_exprs = jule::Slice<jule::Ptr<_1ebcce31e_Data>>();
	jule::Ptr<_1eb7d5892_Case> _field_next = jule::Ptr<_1eb7d5892_Case>();


	_1eb7d5892_Case(jule::Ptr<_1eb7d5892_Match> __param_owner, jule::Ptr<_1eb7d5892_Scope> __param_scope, jule::Slice<jule::Ptr<_1ebcce31e_Data>> __param_exprs, jule::Ptr<_1eb7d5892_Case> __param_next): _field_owner(__param_owner), _field_scope(__param_scope), _field_exprs(__param_exprs), _field_next(__param_next) {}

	

	_1eb7d5892_Case(void) = default;

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _1eb7d5892_Case &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _1eb7d5892_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_FallSt {
	jule::Uintptr _field_dest_case = jule::Uintptr();


	_1eb7d5892_FallSt(jule::Uintptr __param_dest_case): _field_dest_case(__param_dest_case) {}

	

	_1eb7d5892_FallSt(void) = default;

	inline bool operator==(const _1eb7d5892_FallSt &_Src) const {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _1eb7d5892_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_RetSt {
	jule::Ptr<_1eb627195_FnIns> _field_func = jule::Ptr<_1eb627195_FnIns>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_vars = jule::Slice<jule::Ptr<_1eba533d4_Var>>();
	jule::Any _field_expr = jule::Any();


	_1eb7d5892_RetSt(jule::Ptr<_1eb627195_FnIns> __param_func, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_vars, jule::Any __param_expr): _field_func(__param_func), _field_vars(__param_vars), _field_expr(__param_expr) {}

	

	_1eb7d5892_RetSt(void) = default;

	inline bool operator==(const _1eb7d5892_RetSt &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7d5892_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_ScopeGoto {
	jule::Ptr<_1ea6ee955_GotoSt> _field_gt = jule::Ptr<_1ea6ee955_GotoSt>();
	jule::Ptr<_1eb7d5892_ScopeChecker> _field_scope = jule::Ptr<_1eb7d5892_ScopeChecker>();
	jule::Int _field_pos = jule::Int();


	_1eb7d5892_ScopeGoto(jule::Ptr<_1ea6ee955_GotoSt> __param_gt, jule::Ptr<_1eb7d5892_ScopeChecker> __param_scope, jule::Int __param_pos): _field_gt(__param_gt), _field_scope(__param_scope), _field_pos(__param_pos) {}

	

	_1eb7d5892_ScopeGoto(void) = default;

	inline bool operator==(const _1eb7d5892_ScopeGoto &_Src) const {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1eb7d5892_ScopeGoto &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_ScopeChecker: public _1ec2d8be1_Lookup {
	jule::Ptr<_1eb7d5892_ScopeChecker> self;

	jule::Ptr<_1eb9ed0d7_Sema> _field_s = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Ptr<_1eb627195_FnIns> _field_owner = jule::Ptr<_1eb627195_FnIns>();
	jule::Ptr<_1eb7d5892_ScopeChecker> _field_parent = jule::Ptr<_1eb7d5892_ScopeChecker>();
	jule::Int _field_child_index = jule::Int();
	jule::Ptr<_1ebcb6081_SymbolTable> _field_table = jule::Ptr<_1ebcb6081_SymbolTable>();
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_tree = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_result = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_cse = jule::Uintptr();
	jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>>();
	jule::Int _field_i = jule::Int();


	_1eb7d5892_ScopeChecker(jule::Ptr<_1eb9ed0d7_Sema> __param_s, jule::Ptr<_1eb627195_FnIns> __param_owner, jule::Ptr<_1eb7d5892_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ptr<_1ebcb6081_SymbolTable> __param_table, jule::Ptr<_1eb7d5892_Scope> __param_scope, jule::Ptr<_1ea6ee955_ScopeTree> __param_tree, jule::Ptr<_1ec1c55b1_TypeKind> __param_result, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>> __param_labels, jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>> __param_gotos, jule::Int __param_i): _field_s(__param_s), _field_owner(__param_owner), _field_parent(__param_parent), _field_child_index(__param_child_index), _field_table(__param_table), _field_scope(__param_scope), _field_tree(__param_tree), _field_result(__param_result), _field_it(__param_it), _field_cse(__param_cse), _field_labels(__param_labels), _field_gotos(__param_gotos), _field_i(__param_i) {
		this->self = jule::Ptr<_1eb7d5892_ScopeChecker>::make(this, nullptr);

	}

	~_1eb7d5892_ScopeChecker(void) { this->self.ref = nullptr; }

	_1eb7d5892_ScopeChecker(void) { this->self = jule::Ptr<_1eb7d5892_ScopeChecker>::make(this, nullptr); }

	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>);


	inline jule::Ptr<_1eba533d4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ec1c55b1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb29bdd6_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb627195_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb7c68e9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Bool _method_is_deferred(void);


	inline jule::Ptr<_1eb7d5892_ScopeChecker> _method_get_root(void);


	inline jule::Ptr<_1eb7d5892_Label> _method_find_label(jule::Str);


	inline jule::Ptr<_1eb7d5892_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ptr<_1eb7d5892_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ptr<_1ea6ee955_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ptr<_1ea6ee955_TypeAliasDecl>);


	inline jule::Ptr<_1eb7d5892_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ptr<_1ea6ee955_ScopeTree>&,jule::Ptr<_1eb7d5892_Scope>&,jule::Ptr<_1eb7d5892_ScopeChecker>&);


	inline jule::Ptr<_1eb7d5892_Scope> _method_check_child_sc(jule::Ptr<_1ea6ee955_ScopeTree>&,jule::Ptr<_1eb7d5892_ScopeChecker>&);


	inline jule::Ptr<_1eb7d5892_Scope> _method_check_child(jule::Ptr<_1ea6ee955_ScopeTree>&);


	inline void _method_check_anon_scope(jule::Ptr<_1ea6ee955_ScopeTree>);


	inline void _method_process_error_call(jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>&,_1ea7465e5_Token);


	inline void _method_check_expr(jule::Ptr<_1ea6ee955_Expr>);


	inline void _method_check_co_expr(jule::Ptr<_1ea6ee955_CoExpr>);


	inline jule::Ptr<_1eb7d5892_If> _method_check_if(jule::Ptr<_1ea6ee955_If>);


	inline jule::Ptr<_1eb7d5892_Else> _method_check_else(jule::Ptr<_1ea6ee955_Else>);


	inline void _method_check_conditional(jule::Ptr<_1ea6ee955_Conditional>);


	inline jule::Ptr<_1eb7d5892_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ptr<_1ea6ee955_ScopeTree>,jule::Ptr<_1eb7d5892_ScopeChecker>);


	inline jule::Ptr<_1eb7d5892_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ptr<_1ea6ee955_ScopeTree>&);


	inline void _method_check_inf_iter(jule::Ptr<_1ea6ee955_Iter>&);


	inline void _method_check_while_iter(jule::Ptr<_1ea6ee955_Iter>&);


	inline void _method_check_range_iter(jule::Ptr<_1ea6ee955_Iter>&);


	inline void _method_check_iter(jule::Ptr<_1ea6ee955_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ptr<_1eb7d5892_ContSt> _method_check_cont_valid_scope(jule::Ptr<_1ea6ee955_ContSt>);


	inline void _method_check_cont(jule::Ptr<_1ea6ee955_ContSt>);


	inline void _method_check_label(jule::Ptr<_1ea6ee955_LabelSt>);


	inline void _method_push_goto(jule::Ptr<_1ea6ee955_GotoSt>);


	inline void _method_check_postfix(jule::Ptr<_1ea6ee955_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ptr<_1ea6ee955_AssignSt>&);


	inline void _method___process_end_part_of_multi_assign(jule::Ptr<_1eb7d5892_MultiAssign>,jule::Ptr<_1ea6ee955_AssignSt>,jule::Ptr<_1ea6ee955_AssignLeft>,jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1ebcce31e_Data>);


	inline void _method_check_ret_multi_assign(jule::Ptr<_1ea6ee955_AssignSt>&);


	inline void _method_check_multi_assign(jule::Ptr<_1ea6ee955_AssignSt>&);


	inline void _method_check_assign_st(jule::Ptr<_1ea6ee955_AssignSt>);


	inline jule::Ptr<_1eb7d5892_Scope> _method_check_case_scope(jule::Ptr<_1eb7d5892_Case>&,jule::Ptr<_1ea6ee955_ScopeTree>&);


	inline jule::Ptr<_1eb7d5892_Case> _method_check_case(jule::Ptr<_1eb7d5892_Match>,jule::Int,jule::Ptr<_1ea6ee955_Case>,jule::Ptr<_1ebcce31e_Data>);


	inline void _method_check_cases(jule::Ptr<_1ea6ee955_MatchCase>&,jule::Ptr<_1eb7d5892_Match>,jule::Ptr<_1ebcce31e_Data>);


	inline jule::Ptr<_1eb7d5892_Case> _method_check_default(jule::Ptr<_1eb7d5892_Match>,jule::Ptr<_1ea6ee955_Else>);


	inline void _method_check_comptime_panic(jule::Ptr<_1eb7d5892_Scope>&,_1ea7465e5_Token);


	inline void _method_push_type_match(jule::Ptr<_1eb7d5892_Match>,jule::Ptr<_1ea6ee955_MatchCase>&);


	inline void _method_check_type_match(jule::Ptr<_1ea6ee955_MatchCase>&);


	inline void _method_check_common_match(jule::Ptr<_1ea6ee955_MatchCase>&);


	inline void _method_check_match(jule::Ptr<_1ea6ee955_MatchCase>);


	inline void _method_check_fall(jule::Ptr<_1ea6ee955_FallSt>);


	inline jule::Ptr<_1eb7d5892_BreakSt> _method_check_break_with_label(jule::Ptr<_1ea6ee955_BreakSt>);


	inline jule::Ptr<_1eb7d5892_BreakSt> _method_check_plain_break(jule::Ptr<_1ea6ee955_BreakSt>);


	inline void _method_check_break(jule::Ptr<_1ea6ee955_BreakSt>);


	inline void _method_check_ret(jule::Ptr<_1ea6ee955_RetSt>);


	inline void _method_check_use_expr(jule::Ptr<_1ea6ee955_UseExpr>);


	inline void _method_check_node(jule::Any&);


	inline void _method_check_result(void);


	inline void _method_check_tree(void);


	inline void _method_check_goto(jule::Ptr<_1eb7d5892_ScopeGoto>&,jule::Ptr<_1eb7d5892_ScopeLabel>&);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ptr<_1ea6ee955_ScopeTree>&,jule::Ptr<_1eb7d5892_Scope>&);


	inline jule::Ptr<_1eb7d5892_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _1eb7d5892_ScopeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_result == _Src._field_result &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1eb7d5892_ScopeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BinopExprModel {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	jule::Str _field_op = jule::Str();


	_1eb7ccdea_BinopExprModel(jule::Any __param_left, jule::Any __param_right, jule::Str __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1eb7ccdea_BinopExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BinopExprModel &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1eb7ccdea_BinopExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_UnaryExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_1eb7ccdea_UnaryExprModel(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1eb7ccdea_UnaryExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_UnaryExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1eb7ccdea_UnaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_StructArgExprModel {
	jule::Ptr<_1eb29bdd6_FieldIns> _field_field = jule::Ptr<_1eb29bdd6_FieldIns>();
	jule::Any _field_expr = jule::Any();


	_1eb7ccdea_StructArgExprModel(jule::Ptr<_1eb29bdd6_FieldIns> __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1eb7ccdea_StructArgExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_StructArgExprModel &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7ccdea_StructArgExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_StructLitExprModel {
	jule::Ptr<_1eb29bdd6_StructIns> _field_strct = jule::Ptr<_1eb29bdd6_StructIns>();
	jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>>();


	_1eb7ccdea_StructLitExprModel(jule::Ptr<_1eb29bdd6_StructIns> __param_strct, jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>> __param_args): _field_strct(__param_strct), _field_args(__param_args) {}

	

	_1eb7ccdea_StructLitExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_StructLitExprModel &_Src) const {
		return 
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1eb7ccdea_StructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_AllocStructLitExprModel {
	jule::Ptr<_1eb7ccdea_StructLitExprModel> _field_lit = jule::Ptr<_1eb7ccdea_StructLitExprModel>();


	_1eb7ccdea_AllocStructLitExprModel(jule::Ptr<_1eb7ccdea_StructLitExprModel> __param_lit): _field_lit(__param_lit) {}

	

	_1eb7ccdea_AllocStructLitExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_AllocStructLitExprModel &_Src) const {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _1eb7ccdea_AllocStructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_CastingExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_expr_kind = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1eb7ccdea_CastingExprModel(jule::Any __param_expr, jule::Ptr<_1ec1c55b1_TypeKind> __param_kind, jule::Ptr<_1ec1c55b1_TypeKind> __param_expr_kind): _field_expr(__param_expr), _field_kind(__param_kind), _field_expr_kind(__param_expr_kind) {}

	

	_1eb7ccdea_CastingExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_CastingExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _1eb7ccdea_CastingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_SliceExprModel {
	jule::Ptr<_1ec1c55b1_TypeKind> _field_elem_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1eb7ccdea_SliceExprModel(jule::Ptr<_1ec1c55b1_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems): _field_elem_kind(__param_elem_kind), _field_elems(__param_elems) {}

	

	_1eb7ccdea_SliceExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_SliceExprModel &_Src) const {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1eb7ccdea_SliceExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_IndexigExprModel {
	jule::Ptr<_1ebcce31e_Data> _field_expr = jule::Ptr<_1ebcce31e_Data>();
	jule::Ptr<_1ebcce31e_Data> _field_index = jule::Ptr<_1ebcce31e_Data>();


	_1eb7ccdea_IndexigExprModel(jule::Ptr<_1ebcce31e_Data> __param_expr, jule::Ptr<_1ebcce31e_Data> __param_index): _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1eb7ccdea_IndexigExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_IndexigExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _1eb7ccdea_IndexigExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_AnonFnExprModel {
	jule::Ptr<_1eb627195_FnIns> _field_func = jule::Ptr<_1eb627195_FnIns>();
	jule::Bool _field_global = jule::Bool();


	_1eb7ccdea_AnonFnExprModel(jule::Ptr<_1eb627195_FnIns> __param_func, jule::Bool __param_global): _field_func(__param_func), _field_global(__param_global) {}

	

	_1eb7ccdea_AnonFnExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_AnonFnExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _1eb7ccdea_AnonFnExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();


	_1eb7ccdea_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1eb7ccdea_KeyValPairExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_KeyValPairExprModel &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1eb7ccdea_KeyValPairExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_MapExprModel {
	jule::Ptr<_1ec1c55b1_TypeKind> _field_key_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_val_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Slice<jule::Ptr<_1eb7ccdea_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_1eb7ccdea_KeyValPairExprModel>>();


	_1eb7ccdea_MapExprModel(jule::Ptr<_1ec1c55b1_TypeKind> __param_key_kind, jule::Ptr<_1ec1c55b1_TypeKind> __param_val_kind, jule::Slice<jule::Ptr<_1eb7ccdea_KeyValPairExprModel>> __param_entries): _field_key_kind(__param_key_kind), _field_val_kind(__param_val_kind), _field_entries(__param_entries) {}

	

	_1eb7ccdea_MapExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_MapExprModel &_Src) const {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _1eb7ccdea_MapExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_SlicingExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_1eb7ccdea_SlicingExprModel(jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_1eb7ccdea_SlicingExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_SlicingExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _1eb7ccdea_SlicingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_TraitSubIdentExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1eb7ccdea_TraitSubIdentExprModel(jule::Any __param_expr, jule::Str __param_ident): _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1eb7ccdea_TraitSubIdentExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_TraitSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1eb7ccdea_TraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_StructSubIdentExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_expr_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1eb627195_FnIns> _field_method = jule::Ptr<_1eb627195_FnIns>();
	jule::Ptr<_1eb29bdd6_FieldIns> _field_field = jule::Ptr<_1eb29bdd6_FieldIns>();


	_1eb7ccdea_StructSubIdentExprModel(jule::Any __param_expr, jule::Ptr<_1ec1c55b1_TypeKind> __param_expr_kind, jule::Ptr<_1eb627195_FnIns> __param_method, jule::Ptr<_1eb29bdd6_FieldIns> __param_field): _field_expr(__param_expr), _field_expr_kind(__param_expr_kind), _field_method(__param_method), _field_field(__param_field) {}

	

	_1eb7ccdea_StructSubIdentExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_StructSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _1eb7ccdea_StructSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_StructStaticIdentExprModel {
	jule::Ptr<_1eb29bdd6_StructIns> _field_structure = jule::Ptr<_1eb29bdd6_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1eb627195_FnIns> _field_method = jule::Ptr<_1eb627195_FnIns>();


	_1eb7ccdea_StructStaticIdentExprModel(jule::Ptr<_1eb29bdd6_StructIns> __param_structure, jule::Any __param_expr, jule::Ptr<_1eb627195_FnIns> __param_method): _field_structure(__param_structure), _field_expr(__param_expr), _field_method(__param_method) {}

	

	_1eb7ccdea_StructStaticIdentExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_StructStaticIdentExprModel &_Src) const {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _1eb7ccdea_StructStaticIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_ArrayExprModel {
	jule::Ptr<_1ec1c55b1_Arr> _field_kind = jule::Ptr<_1ec1c55b1_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1eb7ccdea_ArrayExprModel(jule::Ptr<_1ec1c55b1_Arr> __param_kind, jule::Slice<jule::Any> __param_elems): _field_kind(__param_kind), _field_elems(__param_elems) {}

	

	_1eb7ccdea_ArrayExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_ArrayExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1eb7ccdea_ArrayExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();


	_1eb7ccdea_CommonIdentExprModel(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1eb7ccdea_CommonIdentExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_CommonIdentExprModel &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1eb7ccdea_CommonIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_CommonSubIdentExprModel {
	jule::Ptr<_1ec1c55b1_TypeKind> _field_expr_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1eb7ccdea_CommonSubIdentExprModel(jule::Ptr<_1ec1c55b1_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident): _field_expr_kind(__param_expr_kind), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1eb7ccdea_CommonSubIdentExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_CommonSubIdentExprModel &_Src) const {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1eb7ccdea_CommonSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_TupleExprModel {
	jule::Slice<jule::Ptr<_1ebcce31e_Data>> _field_datas = jule::Slice<jule::Ptr<_1ebcce31e_Data>>();


	_1eb7ccdea_TupleExprModel(jule::Slice<jule::Ptr<_1ebcce31e_Data>> __param_datas): _field_datas(__param_datas) {}

	

	_1eb7ccdea_TupleExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_TupleExprModel &_Src) const {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _1eb7ccdea_TupleExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1eb7ccdea_BuiltinOutCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1eb7ccdea_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinOutCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinOutCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1eb7ccdea_BuiltinOutlnCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1eb7ccdea_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinOutlnCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinOutlnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();


	_1eb7ccdea_BuiltinCloneCallExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1eb7ccdea_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinCloneCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinCloneCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinNewCallExprModel {
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Any _field_init = jule::Any();


	_1eb7ccdea_BuiltinNewCallExprModel(jule::Ptr<_1ec1c55b1_TypeKind> __param_kind, jule::Any __param_init): _field_kind(__param_kind), _field_init(__param_init) {}

	

	_1eb7ccdea_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinNewCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinNewCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinMakeCallExprModel {
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();


	_1eb7ccdea_BuiltinMakeCallExprModel(jule::Ptr<_1ec1c55b1_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap): _field_kind(__param_kind), _field_len(__param_len), _field_cap(__param_cap) {}

	

	_1eb7ccdea_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinMakeCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinMakeCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();


	_1eb7ccdea_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements): _field_dest(__param_dest), _field_elements(__param_elements) {}

	

	_1eb7ccdea_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinAppendCallExprModel &_Src) const {
		return 
			this->_field_dest == _Src._field_dest &&
			this->_field_elements == _Src._field_elements;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinAppendCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinErrorCallExprModel {
	jule::Ptr<_1eb627195_FnIns> _field_func = jule::Ptr<_1eb627195_FnIns>();
	jule::Any _field_err = jule::Any();


	_1eb7ccdea_BuiltinErrorCallExprModel(jule::Ptr<_1eb627195_FnIns> __param_func, jule::Any __param_err): _field_func(__param_func), _field_err(__param_err) {}

	

	_1eb7ccdea_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinErrorCallExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinErrorCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_SizeofExprModel {
	jule::Any _field_expr = jule::Any();


	_1eb7ccdea_SizeofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1eb7ccdea_SizeofExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_SizeofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7ccdea_SizeofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_AlignofExprModel {
	jule::Any _field_expr = jule::Any();


	_1eb7ccdea_AlignofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1eb7ccdea_AlignofExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_AlignofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7ccdea_AlignofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_RuneExprModel {
	jule::I32 _field_code = jule::I32();


	_1eb7ccdea_RuneExprModel(jule::I32 __param_code): _field_code(__param_code) {}

	

	_1eb7ccdea_RuneExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_RuneExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _1eb7ccdea_RuneExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();


	_1eb7ccdea_IntegratedToStrExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1eb7ccdea_IntegratedToStrExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_IntegratedToStrExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7ccdea_IntegratedToStrExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_TernaryExprModel {
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_1eb7ccdea_TernaryExprModel(jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_1eb7ccdea_TernaryExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_TernaryExprModel &_Src) const {
		return 
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _1eb7ccdea_TernaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();


	_1eb7ccdea_BackendEmitExprModel(jule::Str __param_code): _field_code(__param_code) {}

	

	_1eb7ccdea_BackendEmitExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BackendEmitExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _1eb7ccdea_BackendEmitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb98e61c_DirectiveChecker {
	jule::Ptr<_1eb9ed0d7_Sema> _field_s = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_d = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Any _field_o = jule::Any();


	_1eb98e61c_DirectiveChecker(jule::Ptr<_1eb9ed0d7_Sema> __param_s, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_d, jule::Any __param_o): _field_s(__param_s), _field_d(__param_d), _field_o(__param_o) {}

	

	_1eb98e61c_DirectiveChecker(void) = default;

	inline void _method_check_cdef(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check_typedef(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check_derive(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check_namespace(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check_deprecated(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check_test(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check_directive(jule::Ptr<_1ea6ee955_Directive>&);


	inline void _method_check(void);


	inline bool operator==(const _1eb98e61c_DirectiveChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_d == _Src._field_d &&
			this->_field_o == _Src._field_o;
	}

	inline bool operator!=(const _1eb98e61c_DirectiveChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d8048_Package: public _1ec2d8be1_Lookup {
	jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>();


	_1eb7d8048_Package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>> __param_files): _field_files(__param_files) {}

	

	_1eb7d8048_Package(void) = default;

	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>);


	inline jule::Ptr<_1eba533d4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ec1c55b1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb29bdd6_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb627195_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb7c68e9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _1eb7d8048_Package &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1eb7d8048_Package &_Src) const { return !this->operator==(_Src); }
};


struct _1eb9ed0d7_Sema: public _1ec2d8be1_Lookup {
	jule::Ptr<_1eb9ed0d7_Sema> self;

	jule::Slice<_1e8ea7cc0_Log> _field_errors = jule::Slice<_1e8ea7cc0_Log>();
	jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>();
	jule::Ptr<_1ebcb6081_SymbolTable> _field_file = jule::Ptr<_1ebcb6081_SymbolTable>();
	jule::Int _field_flags = 0LL;


	_1eb9ed0d7_Sema(jule::Slice<_1e8ea7cc0_Log> __param_errors, jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>> __param_files, jule::Ptr<_1ebcb6081_SymbolTable> __param_file, jule::Int __param_flags): _field_errors(__param_errors), _field_files(__param_files), _field_file(__param_file), _field_flags(__param_flags) {
		this->self = jule::Ptr<_1eb9ed0d7_Sema>::make(this, nullptr);

	}

	~_1eb9ed0d7_Sema(void) { this->self.ref = nullptr; }

	_1eb9ed0d7_Sema(void) { this->self = jule::Ptr<_1eb9ed0d7_Sema>::make(this, nullptr); }

	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>);


	inline jule::Ptr<_1eba533d4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ec1c55b1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb29bdd6_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb627195_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb7c68e9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_flag(jule::Int);


	inline void _method_set_current_file(jule::Ptr<_1ebcb6081_SymbolTable>);


	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_1ea7465e5_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline void _method_check_directives(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>&,jule::Any);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_1ea7465e5_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ptr<_1eb7d8048_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ptr<_1eb7d8048_ImportInfo>&);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ptr<_1eb7d8048_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ptr<_1eb7d8048_ImportInfo>&);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ptr<_1ec1c55b1_TypeSymbol>&,jule::Trait<_1ec2d8be1_Lookup>,jule::Ptr<_1ec1c55b1_Referencer>);


	inline jule::Bool _method_check_type(jule::Ptr<_1ec1c55b1_TypeSymbol>&,jule::Trait<_1ec2d8be1_Lookup>);


	inline jule::Ptr<_1ec1c55b1_TypeKind> _method_build_type_with_generics(jule::Ptr<_1ea6ee955_TypeDecl>&,jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>);


	inline jule::Ptr<_1ec1c55b1_TypeKind> _method_build_type(jule::Ptr<_1ea6ee955_TypeDecl>&);


	inline jule::Ptr<_1ebcce31e_Eval> _method_evalpd(jule::Trait<_1ec2d8be1_Lookup>,jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1eba533d4_Var>);


	inline jule::Ptr<_1ebcce31e_Eval> _method_evalp(jule::Trait<_1ec2d8be1_Lookup>,jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Ptr<_1ebcce31e_Eval> _method_eval(jule::Trait<_1ec2d8be1_Lookup>);


	inline void _method_check_assign_type(jule::Bool,jule::Ptr<_1ec1c55b1_TypeKind>&,jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token);


	inline jule::Bool _method_check_type_compatibility(jule::Ptr<_1ec1c55b1_TypeKind>&,jule::Ptr<_1ec1c55b1_TypeKind>&,_1ea7465e5_Token&);


	inline jule::Ptr<_1ec1c55b1_TypeKind> _method_build_non_generic_type_kind(jule::Ptr<_1ea6ee955_TypeDecl>&,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>&);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ptr<_1eb627195_FnIns>&);


	inline jule::Ptr<_1eb627195_FnIns> _method_get_trait_check_fn_kind(jule::Ptr<_1eb627195_Fn>&);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ptr<_1eb627195_FnIns>&);


	inline void _method_check_ref_validity_for_init_expr(jule::Bool,jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token&);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ptr<_1ec1c55b1_TypeKind>&,jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token&);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ptr<_1ec1c55b1_TypeAlias>&,jule::Trait<_1ec2d8be1_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ptr<_1ec1c55b1_TypeAlias>&,jule::Trait<_1ec2d8be1_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ptr<_1ec1c55b1_TypeAlias>&);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ptr<_1eb7c7e7d_Enum>);


	inline void _method_check_enum_items_str(jule::Ptr<_1eb7c7e7d_Enum>&);


	inline void _method_check_enum_items_int(jule::Ptr<_1eb7c7e7d_Enum>&);


	inline void _method_check_enum_decl(jule::Ptr<_1eb7c7e7d_Enum>&);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>&);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ptr<_1eb627195_Fn>&);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ptr<_1eb627195_Fn>&);


	inline jule::Bool _method_check_fn_decl_types(jule::Ptr<_1eb627195_Fn>&);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ptr<_1eb627195_Fn>&);


	inline void _method_check_trait_decl_method(jule::Ptr<_1eb627195_Fn>&);


	inline void _method_check_trait_decl_methods(jule::Ptr<_1eb7c68e9_Trait>&);


	inline void _method_check_trait_decl(jule::Ptr<_1eb7c68e9_Trait>&);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ptr<_1eb7c68e9_Trait>&,jule::Ptr<_1eb7d363c_Impl>&);


	inline jule::Bool _method_impl_to_struct(jule::Ptr<_1eb29bdd6_Struct>&,jule::Ptr<_1eb7d363c_Impl>&);


	inline void _method_impl_trait(jule::Ptr<_1eb7d363c_Impl>&);


	inline void _method_impl_struct(jule::Ptr<_1eb7d363c_Impl>&);


	inline void _method_impl_impl(jule::Ptr<_1eb7d363c_Impl>&);


	inline void _method_check_var_decl(jule::Ptr<_1eba533d4_Var>&,jule::Trait<_1ec2d8be1_Lookup>);


	inline void _method_check_global_var_decl(jule::Ptr<_1eba533d4_Var>&);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ptr<_1eb29bdd6_Struct>&,jule::Ptr<_1eb7c68e9_Trait>&);


	inline jule::Bool _method_check_struct_impls(jule::Ptr<_1eb29bdd6_Struct>&);


	inline jule::Bool _method_check_struct_fields(jule::Ptr<_1eb29bdd6_Struct>&);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ptr<_1eb29bdd6_Struct>&);


	inline void _method_check_struct_decl(jule::Ptr<_1eb29bdd6_Struct>&);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ptr<_1eb627195_Fn>&);


	inline jule::Bool _method_check_fn_decls(void);


	inline void _method_push_cycle_error(jule::Ptr<_1eb29bdd6_Struct>&,jule::Ptr<_1eb29bdd6_Struct>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1eb29bdd6_Struct>&,jule::Ptr<_1eb29bdd6_Struct>&,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ptr<_1eb29bdd6_Struct>&,jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ptr<_1eb29bdd6_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ptr<_1eb29bdd6_Struct>&);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token&);


	inline void _method_check_var(jule::Ptr<_1eba533d4_Var>&);


	inline void _method_check_type_var(jule::Ptr<_1eba533d4_Var>&,jule::Trait<_1ec2d8be1_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ptr<_1eb29bdd6_StructIns>&,jule::Ptr<_1eb627195_Fn>&);


	inline void _method_check_type_struct(jule::Ptr<_1eb29bdd6_Struct>&);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ptr<_1eb627195_FnIns>&);


	inline void _method_check_fn_ins_sc(jule::Ptr<_1eb627195_FnIns>&,jule::Ptr<_1eb7d5892_ScopeChecker>&);


	inline void _method_check_fn_ins(jule::Ptr<_1eb627195_FnIns>&);


	inline void _method_check_type_fn(jule::Ptr<_1eb627195_Fn>&);


	inline void _method_check_test_fn(jule::Ptr<_1eb627195_FnIns>&);


	inline void _method_precheck_type_fn(jule::Ptr<_1eb627195_Fn>&);


	inline void _method_precheck_fn_types(void);


	inline void _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&);


	inline bool operator==(const _1eb9ed0d7_Sema &_Src) const {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file &&
			this->_field_flags == _Src._field_flags;
	}

	inline bool operator!=(const _1eb9ed0d7_Sema &_Src) const { return !this->operator==(_Src); }
};


struct _1eba533d4_IterRelation {
	jule::Ptr<_1eba533d4_Var> _field_range = jule::Ptr<_1eba533d4_Var>();


	_1eba533d4_IterRelation(jule::Ptr<_1eba533d4_Var> __param_range): _field_range(__param_range) {}

	

	_1eba533d4_IterRelation(void) = default;

	inline bool operator==(const _1eba533d4_IterRelation &_Src) const {
		return 
			this->_field_range == _Src._field_range;
	}

	inline bool operator!=(const _1eba533d4_IterRelation &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_RangeChecker {
	jule::Ptr<_1eb7d5892_ScopeChecker> _field_sc = jule::Ptr<_1eb7d5892_ScopeChecker>();
	jule::Ptr<_1ea6ee955_RangeKind> _field_rang = jule::Ptr<_1ea6ee955_RangeKind>();
	jule::Ptr<_1eb7d5892_RangeIter> _field_kind = jule::Ptr<_1eb7d5892_RangeIter>();
	jule::Ptr<_1ebcce31e_Data> _field_d = jule::Ptr<_1ebcce31e_Data>();


	_1eba534e4_RangeChecker(jule::Ptr<_1eb7d5892_ScopeChecker> __param_sc, jule::Ptr<_1ea6ee955_RangeKind> __param_rang, jule::Ptr<_1eb7d5892_RangeIter> __param_kind, jule::Ptr<_1ebcce31e_Data> __param_d): _field_sc(__param_sc), _field_rang(__param_rang), _field_kind(__param_kind), _field_d(__param_d) {}

	

	_1eba534e4_RangeChecker(void) = default;

	inline jule::Ptr<_1eba533d4_Var> _method_build_var(jule::Ptr<_1ea6ee955_VarDecl>&);


	inline void _method_set_size_key(void);


	inline void _method_check_range_expr_validity(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1eba533d4_Var>&,jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1eba534e4_RangeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1eba534e4_RangeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1ebcb6081_SymbolTable: public _1ec2d8be1_Lookup {
	jule::Ptr<_1ea701c98_File> _field_file = jule::Ptr<_1ea701c98_File>();
	jule::Slice<_1eb736eec_Pass> _field_passes = jule::Slice<_1eb736eec_Pass>();
	jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_vars = jule::Slice<jule::Ptr<_1eba533d4_Var>>();
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>();
	jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _field_structs = jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>();
	jule::Slice<jule::Ptr<_1eb627195_Fn>> _field_funcs = jule::Slice<jule::Ptr<_1eb627195_Fn>>();
	jule::Slice<jule::Ptr<_1eb7c68e9_Trait>> _field_traits = jule::Slice<jule::Ptr<_1eb7c68e9_Trait>>();
	jule::Slice<jule::Ptr<_1eb7c7e7d_Enum>> _field_enums = jule::Slice<jule::Ptr<_1eb7c7e7d_Enum>>();
	jule::Slice<jule::Ptr<_1eb7d363c_Impl>> _field_impls = jule::Slice<jule::Ptr<_1eb7d363c_Impl>>();


	_1ebcb6081_SymbolTable(jule::Ptr<_1ea701c98_File> __param_file, jule::Slice<_1eb736eec_Pass> __param_passes, jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> __param_imports, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_vars, jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> __param_structs, jule::Slice<jule::Ptr<_1eb627195_Fn>> __param_funcs, jule::Slice<jule::Ptr<_1eb7c68e9_Trait>> __param_traits, jule::Slice<jule::Ptr<_1eb7c7e7d_Enum>> __param_enums, jule::Slice<jule::Ptr<_1eb7d363c_Impl>> __param_impls): _field_file(__param_file), _field_passes(__param_passes), _field_imports(__param_imports), _field_vars(__param_vars), _field_type_aliases(__param_type_aliases), _field_structs(__param_structs), _field_funcs(__param_funcs), _field_traits(__param_traits), _field_enums(__param_enums), _field_impls(__param_impls) {}

	

	_1ebcb6081_SymbolTable(void) = default;

	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>);


	inline jule::Ptr<_1eba533d4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ec1c55b1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb29bdd6_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb627195_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb7c68e9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_find_enum(jule::Str);


	inline jule::Ptr<_1eba533d4_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ptr<_1ec1c55b1_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _1ebcb6081_SymbolTable &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _1ebcb6081_SymbolTable &_Src) const { return !this->operator==(_Src); }
};


struct _1ebcce31e_Data {
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_cast_kind = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_1ec3e4b65_Const> _field_constant = jule::Ptr<_1ec3e4b65_Const>();


	_1ebcce31e_Data(jule::Ptr<_1ec1c55b1_TypeKind> __param_kind, jule::Ptr<_1ec1c55b1_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ptr<_1ec3e4b65_Const> __param_constant): _field_kind(__param_kind), _field_cast_kind(__param_cast_kind), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_lvalue(__param_lvalue), _field_is_rune(__param_is_rune), _field_model(__param_model), _field_decl(__param_decl), _field_constant(__param_constant) {}

	

	_1ebcce31e_Data(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline jule::Bool _method_good_operand(jule::Ptr<_1ebcce31e_Data>&);


	inline bool operator==(const _1ebcce31e_Data &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _1ebcce31e_Data &_Src) const { return !this->operator==(_Src); }
};


struct _1ebcce31e_Value {
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();
	jule::Ptr<_1ebcce31e_Data> _field_data = jule::Ptr<_1ebcce31e_Data>();


	_1ebcce31e_Value(jule::Ptr<_1ea6ee955_Expr> __param_expr, jule::Ptr<_1ebcce31e_Data> __param_data): _field_expr(__param_expr), _field_data(__param_data) {}

	

	_1ebcce31e_Value(void) = default;

	inline bool operator==(const _1ebcce31e_Value &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1ebcce31e_Value &_Src) const { return !this->operator==(_Src); }
};


struct _1ebcce31e_Eval {
	jule::Ptr<_1ebcce31e_Eval> self;

	jule::Ptr<_1eb9ed0d7_Sema> _field_s = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Trait<_1ec2d8be1_Lookup> _field_lookup = jule::Trait<_1ec2d8be1_Lookup>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_prefix = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_1eba533d4_Var> _field_owner = jule::Ptr<_1eba533d4_Var>();


	_1ebcce31e_Eval(jule::Ptr<_1eb9ed0d7_Sema> __param_s, jule::Trait<_1ec2d8be1_Lookup> __param_lookup, jule::Ptr<_1ec1c55b1_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Bool __param_immutable, jule::Bool __param_ignored, jule::Bool __param_dis_builtin, jule::Ptr<_1eba533d4_Var> __param_owner): _field_s(__param_s), _field_lookup(__param_lookup), _field_prefix(__param_prefix), _field_unsafety(__param_unsafety), _field_immutable(__param_immutable), _field_ignored(__param_ignored), _field_dis_builtin(__param_dis_builtin), _field_owner(__param_owner) {
		this->self = jule::Ptr<_1ebcce31e_Eval>::make(this, nullptr);

	}

	~_1ebcce31e_Eval(void) { this->self.ref = nullptr; }

	_1ebcce31e_Eval(void) { this->self = jule::Ptr<_1ebcce31e_Eval>::make(this, nullptr); }

	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_nil(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_str(jule::Ptr<_1ea6ee955_LitExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_bool(jule::Ptr<_1ea6ee955_LitExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_rune(jule::Ptr<_1ea6ee955_LitExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_float(jule::Ptr<_1ea6ee955_LitExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_int(jule::Ptr<_1ea6ee955_LitExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_lit_num(jule::Ptr<_1ea6ee955_LitExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_lit(jule::Ptr<_1ea6ee955_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ptr<_1eb736eec_ReferenceStack>&);


	inline void _method_push_reference_to_fn(jule::Ptr<_1eb627195_FnIns>&);


	inline void _method_push_reference_to_var(jule::Ptr<_1eba533d4_Var>&);


	inline void _method_push_reference_to_struct(jule::Ptr<_1eb29bdd6_StructIns>&);


	inline jule::Ptr<_1ebcce31e_Data> _method___eval_enum(jule::Ptr<_1eb7c7e7d_Enum>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_enum(jule::Ptr<_1eb7c7e7d_Enum>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method___eval_struct(jule::Ptr<_1eb29bdd6_StructIns>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_struct(jule::Ptr<_1eb29bdd6_StructIns>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_fn_ins(jule::Ptr<_1eb627195_FnIns>);


	inline void _method_check_deprecated(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>&,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_fn(jule::Ptr<_1eb627195_Fn>,_1ea7465e5_Token);


	inline void _method_push_illegal_cycle_error(jule::Ptr<_1eba533d4_Var>&,jule::Ptr<_1eba533d4_Var>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1eba533d4_Var>&,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_1eba533d4_Var>&,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_var(jule::Ptr<_1eba533d4_Var>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_type_alias(jule::Ptr<_1ec1c55b1_TypeAlias>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_def(jule::Any,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_ident(jule::Ptr<_1ea6ee955_IdentExpr>);


	inline void _method_eval_unary_minus(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_eval_unary_plus(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_eval_unary_caret(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_eval_unary_excl(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_eval_unary_star(jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token&);


	inline void _method_eval_unary_amper(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_eval_unary_type_decl(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_UnaryExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_unary(jule::Ptr<_1ea6ee955_UnaryExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_variadic(jule::Ptr<_1ea6ee955_VariadicExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_unsafe(jule::Ptr<_1ea6ee955_UnsafeExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_arr(jule::Ptr<_1ea6ee955_SliceExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_exp_slc(jule::Ptr<_1ea6ee955_SliceExpr>,jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_slice_expr(jule::Ptr<_1ea6ee955_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token);


	inline void _method_indexing_ptr(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline void _method_indexing_arr(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline void _method_indexing_slc(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline void _method_indexing_map(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline void _method_indexing_str(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline void _method_to_indexing(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_ident_decl_from_indexing(jule::Ptr<_1ea6ee955_IndexingExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_indexing(jule::Ptr<_1ea6ee955_IndexingExpr>);


	inline std::tuple<jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1ebcce31e_Data>> _method_eval_slicing_exprs(jule::Ptr<_1ea6ee955_SlicingExpr>&);


	inline void _method_slicing_arr(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_slicing_slc(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_slicing_str(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_check_slicing(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ea6ee955_SlicingExpr>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_slicing(jule::Ptr<_1ea6ee955_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_struct(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_ref(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_slc(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_str(jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_int(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_num(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_prim(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline void _method_cast_constant(jule::Ptr<_1ec1c55b1_TypeKind>&,jule::Ptr<_1ebcce31e_Data>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_cast_by_type_n_data(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_cast(jule::Ptr<_1ea6ee955_CastExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_ns_selection(jule::Ptr<_1ea6ee955_NsSelectionExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_struct_lit_explicit(jule::Ptr<_1eb29bdd6_StructIns>,jule::Slice<jule::Any>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_struct_lit(jule::Ptr<_1ea6ee955_StructLit>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_type(jule::Ptr<_1ea6ee955_TypeDecl>);


	inline void _method_call_type_fn(jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ptr<_1eb627195_FnIns>,jule::Ptr<_1ea6ee955_FnCallExpr>);


	inline void _method_call_builtin_fn(jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_check_fn_of_concurrent_call(jule::Ptr<_1eb627195_FnIns>&,_1ea7465e5_Token);


	inline void _method_process_exceptional_handler(jule::Ptr<_1eb627195_FnIns>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_call_fn(jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_fn_call(jule::Ptr<_1ea6ee955_FnCallExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_enum_static(jule::Ptr<_1eb7c7e7d_Enum>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_struct_static(jule::Ptr<_1eb29bdd6_StructIns>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_trait_sub_ident(jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1eb7c68e9_Trait>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_struct_sub_ident(jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1eb29bdd6_StructIns>,jule::Ptr<_1ea6ee955_SubIdentExpr>,jule::Bool);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_slice_sub_ident(jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_array_sub_ident(jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_map_sub_ident(jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_str_sub_ident(jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_int_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_uint_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_i8_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_i16_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_i32_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_i64_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_u8_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_u16_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_u32_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_u64_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_f32_type_tatic(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_f64_type_static(_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_prim_static(jule::Str,_1ea7465e5_Token);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_type_static(jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1ea6ee955_SubIdentExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_obj_sub_ident(jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1ea6ee955_SubIdentExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_sub_ident(jule::Ptr<_1ea6ee955_SubIdentExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_tuple(jule::Ptr<_1ea6ee955_TupleExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_map(jule::Ptr<_1ec1c55b1_Map>,jule::Ptr<_1ea6ee955_BraceLit>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_brace_lit(jule::Ptr<_1ea6ee955_BraceLit>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_anon_fn(jule::Ptr<_1ea6ee955_FnDecl>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_binop(jule::Ptr<_1ea6ee955_BinopExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_ternary(jule::Ptr<_1ea6ee955_TernaryExpr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval(jule::Ptr<_1ea6ee955_Expr>);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_expr(jule::Ptr<_1ea6ee955_Expr>);


	inline bool operator==(const _1ebcce31e_Eval &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_immutable == _Src._field_immutable &&
			this->_field_ignored == _Src._field_ignored &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_owner == _Src._field_owner;
	}

	inline bool operator!=(const _1ebcce31e_Eval &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_TypeKind: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_TypeKind> self;

	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_1ec1c55b1_Kind> _field_kind = jule::Trait<_1ec1c55b1_Kind>();


	_1ec1c55b1_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_generic, jule::Bool __param_variadic, jule::Trait<_1ec1c55b1_Kind> __param_kind): _field_cpp_ident(__param_cpp_ident), _field_generic(__param_generic), _field_variadic(__param_variadic), _field_kind(__param_kind) {
		this->self = jule::Ptr<_1ec1c55b1_TypeKind>::make(this, nullptr);

	}

	~_1ec1c55b1_TypeKind(void) { this->self.ref = nullptr; }

	_1ec1c55b1_TypeKind(void) { this->self = jule::Ptr<_1ec1c55b1_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Bool _method_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_void(void);


	inline jule::Bool _method_mutable(void);


	inline jule::Bool _method_nil_compatible(void);


	inline jule::Bool _method_supports_cloning(void);


	inline jule::Bool _method_variadicable(void);


	inline jule::Ptr<_1ec1c55b1_Prim> _method_prim(void);


	inline jule::Ptr<_1ec1c55b1_Sptr> _method_sptr(void);


	inline jule::Ptr<_1ec1c55b1_Ptr> _method_ptr(void);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_enm(void);


	inline jule::Ptr<_1ec1c55b1_Arr> _method_arr(void);


	inline jule::Ptr<_1ec1c55b1_Slc> _method_slc(void);


	inline jule::Ptr<_1eb627195_FnIns> _method_fnc(void);


	inline jule::Ptr<_1eb29bdd6_StructIns> _method_strct(void);


	inline jule::Ptr<_1eb7c68e9_Trait> _method_trt(void);


	inline jule::Ptr<_1ec1c55b1_Map> _method_map(void);


	inline jule::Ptr<_1ec1c55b1_Tuple> _method_tup(void);


	inline bool operator==(const _1ec1c55b1_TypeKind &_Src) const {
		return 
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_generic == _Src._field_generic &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ec1c55b1_TypeKind &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_TypeSymbol {
	jule::Ptr<_1ea6ee955_TypeDecl> _field_decl = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_kind = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl> __param_decl, jule::Ptr<_1ec1c55b1_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1ec1c55b1_TypeSymbol(void) = default;

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _1ec1c55b1_TypeSymbol &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ec1c55b1_TypeSymbol &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Prim: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Prim> self;

	jule::Str _field_kind = jule::Str();


	_1ec1c55b1_Prim(jule::Str __param_kind): _field_kind(__param_kind) {
		this->self = jule::Ptr<_1ec1c55b1_Prim>::make(this, nullptr);

	}

	~_1ec1c55b1_Prim(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Prim(void) { this->self = jule::Ptr<_1ec1c55b1_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _1ec1c55b1_Prim &_Src) const {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ec1c55b1_Prim &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Sptr: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Sptr> self;

	jule::Ptr<_1ec1c55b1_TypeKind> _field_elem = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1ec1c55b1_Sptr(jule::Ptr<_1ec1c55b1_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ec1c55b1_Sptr>::make(this, nullptr);

	}

	~_1ec1c55b1_Sptr(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Sptr(void) { this->self = jule::Ptr<_1ec1c55b1_Sptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline bool operator==(const _1ec1c55b1_Sptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ec1c55b1_Sptr &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Slc: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Slc> self;

	jule::Ptr<_1ec1c55b1_TypeKind> _field_elem = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1ec1c55b1_Slc(jule::Ptr<_1ec1c55b1_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ec1c55b1_Slc>::make(this, nullptr);

	}

	~_1ec1c55b1_Slc(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Slc(void) { this->self = jule::Ptr<_1ec1c55b1_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline bool operator==(const _1ec1c55b1_Slc &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ec1c55b1_Slc &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Tuple: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Tuple> self;

	jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>();


	_1ec1c55b1_Tuple(jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> __param_types): _field_types(__param_types) {
		this->self = jule::Ptr<_1ec1c55b1_Tuple>::make(this, nullptr);

	}

	~_1ec1c55b1_Tuple(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Tuple(void) { this->self = jule::Ptr<_1ec1c55b1_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline bool operator==(const _1ec1c55b1_Tuple &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1ec1c55b1_Tuple &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Map: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Map> self;

	jule::Ptr<_1ec1c55b1_TypeKind> _field_key = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_val = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1ec1c55b1_Map(jule::Ptr<_1ec1c55b1_TypeKind> __param_key, jule::Ptr<_1ec1c55b1_TypeKind> __param_val): _field_key(__param_key), _field_val(__param_val) {
		this->self = jule::Ptr<_1ec1c55b1_Map>::make(this, nullptr);

	}

	~_1ec1c55b1_Map(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Map(void) { this->self = jule::Ptr<_1ec1c55b1_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline bool operator==(const _1ec1c55b1_Map &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1ec1c55b1_Map &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Arr: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Arr> self;

	jule::Bool _field_auto = jule::Bool();
	jule::Int _field_n = jule::Int();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_elem = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1ec1c55b1_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ptr<_1ec1c55b1_TypeKind> __param_elem): _field_auto(__param_auto), _field_n(__param_n), _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ec1c55b1_Arr>::make(this, nullptr);

	}

	~_1ec1c55b1_Arr(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Arr(void) { this->self = jule::Ptr<_1ec1c55b1_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline bool operator==(const _1ec1c55b1_Arr &_Src) const {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ec1c55b1_Arr &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Ptr: public _1ec1c55b1_Kind {
	jule::Ptr<_1ec1c55b1_Ptr> self;

	jule::Ptr<_1ec1c55b1_TypeKind> _field_elem = jule::Ptr<_1ec1c55b1_TypeKind>();


	_1ec1c55b1_Ptr(jule::Ptr<_1ec1c55b1_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ec1c55b1_Ptr>::make(this, nullptr);

	}

	~_1ec1c55b1_Ptr(void) { this->self.ref = nullptr; }

	_1ec1c55b1_Ptr(void) { this->self = jule::Ptr<_1ec1c55b1_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1ec1c55b1_Ptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1ec1c55b1_Ptr &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;


	_1ec1c55b1_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs): _field_ident(__param_ident), _field_owner(__param_owner), _field_refs(__param_refs) {}

	

	_1ec1c55b1_Referencer(void) = default;

	inline bool operator==(const _1ec1c55b1_Referencer &_Src) const {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _1ec1c55b1_Referencer &_Src) const { return !this->operator==(_Src); }
};


struct _1ea693388_DirectiveEval {
	jule::Slice<_1e8ea7cc0_Log> _field_logs = jule::Slice<_1e8ea7cc0_Log>();
	jule::Ptr<_1ea6ee955_Directive> _field_d = jule::Ptr<_1ea6ee955_Directive>();


	_1ea693388_DirectiveEval(jule::Slice<_1e8ea7cc0_Log> __param_logs, jule::Ptr<_1ea6ee955_Directive> __param_d): _field_logs(__param_logs), _field_d(__param_d) {}

	

	_1ea693388_DirectiveEval(void) = default;

	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _method_split_operans(jule::Str,jule::Slice<_1ea7465e5_Token>&);


	inline jule::Bool _method_eval_directive_ident(jule::Str);


	inline jule::Bool _method_eval_directive_part(jule::Slice<_1ea7465e5_Token>);


	inline jule::Bool _method_eval(void);


	inline bool operator==(const _1ea693388_DirectiveEval &_Src) const {
		return 
			this->_field_logs == _Src._field_logs &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1ea693388_DirectiveEval &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6cd59e_PlainImporter: public _1eb7d8048_Importer {
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> _field_all_packages = jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>>();


	_1ea6cd59e_PlainImporter(jule::Str __param_mod, jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> __param_all_packages): _field_mod(__param_mod), _field_all_packages(__param_all_packages) {}

	

	_1ea6cd59e_PlainImporter(void) = default;

	inline void _method_set_mod_path(jule::Str);


	inline jule::Str _method_get_mod_path(void);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>,jule::Slice<_1e8ea7cc0_Log>> _method_import_package(jule::Str,jule::Bool);


	inline void _method_imported(jule::Ptr<_1eb7d8048_ImportInfo>);


	inline bool operator==(const _1ea6cd59e_PlainImporter &_Src) const {
		return 
			this->_field_mod == _Src._field_mod &&
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _1ea6cd59e_PlainImporter &_Src) const { return !this->operator==(_Src); }
};


struct _1ea66c175_OrderedDefines {
	jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _field_structs = jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_globals = jule::Slice<jule::Ptr<_1eba533d4_Var>>();


	_1ea66c175_OrderedDefines(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> __param_structs, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_globals): _field_structs(__param_structs), _field_globals(__param_globals) {}

	

	_1ea66c175_OrderedDefines(void) = default;

	inline bool operator==(const _1ea66c175_OrderedDefines &_Src) const {
		return 
			this->_field_structs == _Src._field_structs &&
			this->_field_globals == _Src._field_globals;
	}

	inline bool operator!=(const _1ea66c175_OrderedDefines &_Src) const { return !this->operator==(_Src); }
};


struct _1ea66c175_DefineOrderer {
	

	_1ea66c175_DefineOrderer(void) = default;

	static inline jule::Bool _static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_1eba533d4_Var>>&,jule::Ptr<_1eba533d4_Var>);
	static inline jule::Bool _static_method_is_common_ordered_1(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&,jule::Ptr<_1eb29bdd6_Struct>);


	static inline void _static_method_order_common_0(jule::Slice<jule::Ptr<_1eba533d4_Var>>&);
	static inline void _static_method_order_common_1(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&);


	static inline void _static_method_order_variables(jule::Slice<jule::Ptr<_1eba533d4_Var>>&);


	static inline void _static_method_order_structures(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&);


	inline bool operator==(const _1ea66c175_DefineOrderer &_Src) const { return true; }

	inline bool operator!=(const _1ea66c175_DefineOrderer &_Src) const { return !this->operator==(_Src); }
};


struct _1ea65d034_ScopeDeadCode {
	jule::Ptr<_1ea65d034_ScopeDeadCode> self;

	jule::Ptr<_1ea65d034_ScopeDeadCode> _field_parent = jule::Ptr<_1ea65d034_ScopeDeadCode>();
	jule::Ptr<_1eb7d5892_Scope> _field_s = jule::Ptr<_1eb7d5892_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::Int _field_i = jule::Int();


	_1ea65d034_ScopeDeadCode(jule::Ptr<_1ea65d034_ScopeDeadCode> __param_parent, jule::Ptr<_1eb7d5892_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::Int __param_i): _field_parent(__param_parent), _field_s(__param_s), _field_stmts(__param_stmts), _field_i(__param_i) {
		this->self = jule::Ptr<_1ea65d034_ScopeDeadCode>::make(this, nullptr);

	}

	~_1ea65d034_ScopeDeadCode(void) { this->self.ref = nullptr; }

	_1ea65d034_ScopeDeadCode(void) { this->self = jule::Ptr<_1ea65d034_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ptr<_1eb7d5892_Scope>&);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _1ea65d034_ScopeDeadCode &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1ea65d034_ScopeDeadCode &_Src) const { return !this->operator==(_Src); }
};


struct _1d059016d_AbsTime {
	jule::Uint _field_day = jule::Uint();
	jule::Uint _field_week_day = jule::Uint();
	jule::Uint _field_year_day = jule::Uint();
	jule::Uint _field_month = jule::Uint();
	jule::Uint _field_year = jule::Uint();
	jule::Uint _field_second = jule::Uint();
	jule::Uint _field_minute = jule::Uint();
	jule::Uint _field_hour = jule::Uint();


	_1d059016d_AbsTime(jule::Uint __param_day, jule::Uint __param_week_day, jule::Uint __param_year_day, jule::Uint __param_month, jule::Uint __param_year, jule::Uint __param_second, jule::Uint __param_minute, jule::Uint __param_hour): _field_day(__param_day), _field_week_day(__param_week_day), _field_year_day(__param_year_day), _field_month(__param_month), _field_year(__param_year), _field_second(__param_second), _field_minute(__param_minute), _field_hour(__param_hour) {}

	

	_1d059016d_AbsTime(void) = default;

	inline jule::U64 _method_unix(void);


	inline bool operator==(const _1d059016d_AbsTime &_Src) const {
		return 
			this->_field_day == _Src._field_day &&
			this->_field_week_day == _Src._field_week_day &&
			this->_field_year_day == _Src._field_year_day &&
			this->_field_month == _Src._field_month &&
			this->_field_year == _Src._field_year &&
			this->_field_second == _Src._field_second &&
			this->_field_minute == _Src._field_minute &&
			this->_field_hour == _Src._field_hour;
	}

	inline bool operator!=(const _1d059016d_AbsTime &_Src) const { return !this->operator==(_Src); }
};


struct _1d059016d_Time {
	jule::U64 _field_sec = jule::U64();


	_1d059016d_Time(jule::U64 __param_sec): _field_sec(__param_sec) {}

	

	_1d059016d_Time(void) = default;

	static inline _1d059016d_Time _static_method_unix(jule::U64);


	static inline _1d059016d_Time _static_method_now(void);


	inline jule::U64 _method_unix(void);


	inline jule::Uint _method_day(void);


	inline jule::Uint _method_month(void);


	inline jule::Uint _method_year(void);


	inline jule::Uint _method_second(void);


	inline jule::Uint _method_minute(void);


	inline jule::Uint _method_hour(void);


	inline _1d059016d_AbsTime _method_abs(void);


	inline bool operator==(const _1d059016d_Time &_Src) const {
		return 
			this->_field_sec == _Src._field_sec;
	}

	inline bool operator!=(const _1d059016d_Time &_Src) const { return !this->operator==(_Src); }
};


struct _1d059016d_Duration {
	

	_1d059016d_Duration(void) = default;

	static inline jule::I64 _static_method_nanoseconds(jule::I64);


	static inline jule::I64 _static_method_microseconds(jule::I64);


	static inline jule::I64 _static_method_milliseconds(jule::I64);


	static inline jule::I64 _static_method_seconds(jule::I64);


	static inline jule::I64 _static_method_minutes(jule::I64);


	static inline jule::I64 _static_method_hours(jule::I64);


	inline bool operator==(const _1d059016d_Duration &_Src) const { return true; }

	inline bool operator!=(const _1d059016d_Duration &_Src) const { return !this->operator==(_Src); }
};


struct _1ec748ded_Flag_0: public _1ec748ded_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Int _field__default = jule::Int();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Int> _field__data = jule::Ptr<jule::Int>();


	_1ec748ded_Flag_0(jule::Str __param__name, jule::I32 __param__short, jule::Int __param__default, jule::Str __param__what, jule::Ptr<jule::Int> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1ec748ded_Flag_0(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1ec748ded_Flag_0 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1ec748ded_Flag_0 &_Src) const { return !this->operator==(_Src); }
};

struct _1ec748ded_Flag_1: public _1ec748ded_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Uint _field__default = jule::Uint();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Uint> _field__data = jule::Ptr<jule::Uint>();


	_1ec748ded_Flag_1(jule::Str __param__name, jule::I32 __param__short, jule::Uint __param__default, jule::Str __param__what, jule::Ptr<jule::Uint> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1ec748ded_Flag_1(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1ec748ded_Flag_1 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1ec748ded_Flag_1 &_Src) const { return !this->operator==(_Src); }
};

struct _1ec748ded_Flag_2: public _1ec748ded_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();


	_1ec748ded_Flag_2(jule::Str __param__name, jule::I32 __param__short, jule::F64 __param__default, jule::Str __param__what, jule::Ptr<jule::F64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1ec748ded_Flag_2(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1ec748ded_Flag_2 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1ec748ded_Flag_2 &_Src) const { return !this->operator==(_Src); }
};

struct _1ec748ded_Flag_3: public _1ec748ded_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();


	_1ec748ded_Flag_3(jule::Str __param__name, jule::I32 __param__short, jule::Bool __param__default, jule::Str __param__what, jule::Ptr<jule::Bool> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1ec748ded_Flag_3(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1ec748ded_Flag_3 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1ec748ded_Flag_3 &_Src) const { return !this->operator==(_Src); }
};

struct _1ec748ded_Flag_4: public _1ec748ded_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();


	_1ec748ded_Flag_4(jule::Str __param__name, jule::I32 __param__short, jule::Str __param__default, jule::Str __param__what, jule::Ptr<jule::Str> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1ec748ded_Flag_4(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1ec748ded_Flag_4 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1ec748ded_Flag_4 &_Src) const { return !this->operator==(_Src); }
};


struct _1ec748ded_FlagSet {
	jule::Slice<jule::Trait<_1ec748ded_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_1ec748ded_CommonFlag>>();


	_1ec748ded_FlagSet(jule::Slice<jule::Trait<_1ec748ded_CommonFlag>> __param__flags): _field__flags(__param__flags) {}

	

	_1ec748ded_FlagSet(void) = default;

	static inline jule::Ptr<_1ec748ded_FlagSet> _static_method_new(void);


	inline jule::Trait<_1ec748ded_CommonFlag> _method_find_flag(jule::Str);


	inline jule::Trait<_1ec748ded_CommonFlag> _method_find_flag_short(jule::I32);


	inline jule::Slice<jule::Trait<_1ec748ded_CommonFlag>> _method_flags(void);


	inline jule::Exceptional<jule::Slice<jule::Str>> _method_parse(jule::Slice<jule::Str>);


	inline void _method_reset(void);


	inline jule::Ptr<_1ec748ded_Flag_3> _method_add_flag_common_0(jule::Str,jule::I32,jule::Str);
	inline jule::Ptr<_1ec748ded_Flag_4> _method_add_flag_common_1(jule::Str,jule::I32,jule::Str);




	inline void _method_add_var_0(jule::Ptr<jule::Bool>,jule::Str,jule::I32,jule::Str);
	inline void _method_add_var_1(jule::Ptr<jule::Str>,jule::Str,jule::I32,jule::Str);


	inline bool operator==(const _1ec748ded_FlagSet &_Src) const {
		return 
			this->_field__flags == _Src._field__flags;
	}

	inline bool operator!=(const _1ec748ded_FlagSet &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_RangeKind {
	_1ea7465e5_Token _field_in_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();
	jule::Ptr<_1ea6ee955_VarDecl> _field_key_a = jule::Ptr<_1ea6ee955_VarDecl>();
	jule::Ptr<_1ea6ee955_VarDecl> _field_key_b = jule::Ptr<_1ea6ee955_VarDecl>();


	_1ea6ee955_RangeKind(_1ea7465e5_Token __param_in_token, jule::Ptr<_1ea6ee955_Expr> __param_expr, jule::Ptr<_1ea6ee955_VarDecl> __param_key_a, jule::Ptr<_1ea6ee955_VarDecl> __param_key_b): _field_in_token(__param_in_token), _field_expr(__param_expr), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1ea6ee955_RangeKind(void) = default;

	inline bool operator==(const _1ea6ee955_RangeKind &_Src) const {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1ea6ee955_RangeKind &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_BreakSt {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	_1ea7465e5_Token _field_label = _1ea7465e5_Token();


	_1ea6ee955_BreakSt(_1ea7465e5_Token __param_token, _1ea7465e5_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1ea6ee955_BreakSt(void) = default;

	inline bool operator==(const _1ea6ee955_BreakSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1ea6ee955_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_ContSt {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	_1ea7465e5_Token _field_label = _1ea7465e5_Token();


	_1ea6ee955_ContSt(_1ea7465e5_Token __param_token, _1ea7465e5_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1ea6ee955_ContSt(void) = default;

	inline bool operator==(const _1ea6ee955_ContSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1ea6ee955_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_If {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();


	_1ea6ee955_If(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_Expr> __param_expr, jule::Ptr<_1ea6ee955_ScopeTree> __param_scope): _field_token(__param_token), _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1ea6ee955_If(void) = default;

	inline bool operator==(const _1ea6ee955_If &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1ea6ee955_If &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Else {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();


	_1ea6ee955_Else(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_ScopeTree> __param_scope): _field_token(__param_token), _field_scope(__param_scope) {}

	

	_1ea6ee955_Else(void) = default;

	inline bool operator==(const _1ea6ee955_Else &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1ea6ee955_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Directive {
	_1ea7465e5_Token _field_tag = _1ea7465e5_Token();
	jule::Slice<_1ea7465e5_Token> _field_args = jule::Slice<_1ea7465e5_Token>();


	_1ea6ee955_Directive(_1ea7465e5_Token __param_tag, jule::Slice<_1ea7465e5_Token> __param_args): _field_tag(__param_tag), _field_args(__param_args) {}

	

	_1ea6ee955_Directive(void) = default;

	inline bool operator==(const _1ea6ee955_Directive &_Src) const {
		return 
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1ea6ee955_Directive &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_TypeAliasDecl {
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_doc_comments = jule::Ptr<_1ea6ee955_CommentGroup>();


	_1ea6ee955_TypeAliasDecl(jule::Ptr<_1ea6ee955_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Ptr<_1ea6ee955_CommentGroup> __param_doc_comments): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc_comments(__param_doc_comments) {}

	

	_1ea6ee955_TypeAliasDecl(void) = default;

	inline bool operator==(const _1ea6ee955_TypeAliasDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _1ea6ee955_TypeAliasDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_FnCallExprModel {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1eb627195_FnIns> _field_func = jule::Ptr<_1eb627195_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_1eb7d5892_Scope> _field_except = jule::Ptr<_1eb7d5892_Scope>();
	jule::Bool _field_assigned = jule::Bool();


	_1eb7ccdea_FnCallExprModel(_1ea7465e5_Token __param_token, jule::Ptr<_1eb627195_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args, jule::Ptr<_1eb7d5892_Scope> __param_except, jule::Bool __param_assigned): _field_token(__param_token), _field_func(__param_func), _field_is_co(__param_is_co), _field_expr(__param_expr), _field_args(__param_args), _field_except(__param_except), _field_assigned(__param_assigned) {}

	

	_1eb7ccdea_FnCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_FnCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args &&
			this->_field_except == _Src._field_except &&
			this->_field_assigned == _Src._field_assigned;
	}

	inline bool operator!=(const _1eb7ccdea_FnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Case {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1ea6ee955_Expr>>();


	_1ea6ee955_Case(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1ea6ee955_Expr>> __param_exprs): _field_token(__param_token), _field_scope(__param_scope), _field_exprs(__param_exprs) {}

	

	_1ea6ee955_Case(void) = default;

	inline bool operator==(const _1ea6ee955_Case &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1ea6ee955_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_MatchCase {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();
	jule::Slice<jule::Ptr<_1ea6ee955_Case>> _field_cases = jule::Slice<jule::Ptr<_1ea6ee955_Case>>();
	jule::Ptr<_1ea6ee955_Else> _field_default = jule::Ptr<_1ea6ee955_Else>();


	_1ea6ee955_MatchCase(_1ea7465e5_Token __param_token, jule::Bool __param_type_match, jule::Ptr<_1ea6ee955_Expr> __param_expr, jule::Slice<jule::Ptr<_1ea6ee955_Case>> __param_cases, jule::Ptr<_1ea6ee955_Else> __param_default): _field_token(__param_token), _field_type_match(__param_type_match), _field_expr(__param_expr), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1ea6ee955_MatchCase(void) = default;

	inline bool operator==(const _1ea6ee955_MatchCase &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1ea6ee955_MatchCase &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_UseDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<_1ea7465e5_Token> _field_selected = jule::Slice<_1ea7465e5_Token>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();


	_1ea6ee955_UseDecl(_1ea7465e5_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_1ea7465e5_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std): _field_token(__param_token), _field_link_path(__param_link_path), _field_alias(__param_alias), _field_full(__param_full), _field_selected(__param_selected), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std) {}

	

	_1ea6ee955_UseDecl(void) = default;

	inline bool operator==(const _1ea6ee955_UseDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_alias == _Src._field_alias &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _1ea6ee955_UseDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_EnumItemDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_EnumItemDecl(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Ptr<_1ea6ee955_Expr> __param_expr): _field_token(__param_token), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_1ea6ee955_EnumItemDecl(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1ea6ee955_EnumItemDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_EnumItemDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_EnumDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>>();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_doc_comments = jule::Ptr<_1ea6ee955_CommentGroup>();


	_1ea6ee955_EnumDecl(_1ea7465e5_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>> __param_items, jule::Ptr<_1ea6ee955_CommentGroup> __param_doc_comments): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc_comments(__param_doc_comments) {}

	

	_1ea6ee955_EnumDecl(void) = default;

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _1ea6ee955_EnumDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _1ea6ee955_EnumDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_FieldDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();


	_1ea6ee955_FieldDecl(_1ea7465e5_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1ea6ee955_TypeDecl> __param_kind): _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind) {}

	

	_1ea6ee955_FieldDecl(void) = default;

	inline bool operator==(const _1ea6ee955_FieldDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ea6ee955_FieldDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_StructDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_doc_comments = jule::Ptr<_1ea6ee955_CommentGroup>();
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>();


	_1ea6ee955_StructDecl(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Ptr<_1ea6ee955_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_generics(__param_generics) {}

	

	_1ea6ee955_StructDecl(void) = default;

	inline bool operator==(const _1ea6ee955_StructDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _1ea6ee955_StructDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_TraitDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_doc_comments = jule::Ptr<_1ea6ee955_CommentGroup>();
	jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>>();


	_1ea6ee955_TraitDecl(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ptr<_1ea6ee955_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> __param_methods): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_doc_comments(__param_doc_comments), _field_methods(__param_methods) {}

	

	_1ea6ee955_TraitDecl(void) = default;

	inline bool operator==(const _1ea6ee955_TraitDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _1ea6ee955_TraitDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Impl {
	_1ea7465e5_Token _field_base = _1ea7465e5_Token();
	_1ea7465e5_Token _field_dest = _1ea7465e5_Token();
	jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>>();
	jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>>();


	_1ea6ee955_Impl(_1ea7465e5_Token __param_base, _1ea7465e5_Token __param_dest, jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> __param_methods, jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1ea6ee955_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _1ea6ee955_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _1ea6ee955_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Expr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_kind = jule::Any();


	_1ea6ee955_Expr(_1ea7465e5_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_1ea6ee955_Expr(void) = default;

	inline bool operator==(const _1ea6ee955_Expr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ea6ee955_Expr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_UseExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_UseExpr(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1ea6ee955_UseExpr(void) = default;

	inline bool operator==(const _1ea6ee955_UseExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_UseExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_TypeDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_kind = jule::Any();


	_1ea6ee955_TypeDecl(_1ea7465e5_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_1ea6ee955_TypeDecl(void) = default;

	inline bool operator==(const _1ea6ee955_TypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1ea6ee955_TypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_LitExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_value = jule::Str();


	_1ea6ee955_LitExpr(_1ea7465e5_Token __param_token, jule::Str __param_value): _field_token(__param_token), _field_value(__param_value) {}

	

	_1ea6ee955_LitExpr(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _1ea6ee955_LitExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1ea6ee955_LitExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_UnsafeExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();


	_1ea6ee955_UnsafeExpr(_1ea7465e5_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1ea6ee955_UnsafeExpr(void) = default;

	inline bool operator==(const _1ea6ee955_UnsafeExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_UnsafeExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_CoExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_CoExpr(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1ea6ee955_CoExpr(void) = default;

	inline bool operator==(const _1ea6ee955_CoExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_CoExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1eb382692_AssignInfo {
	jule::Slice<_1ea7465e5_Token> _field_l = jule::Slice<_1ea7465e5_Token>();
	jule::Slice<_1ea7465e5_Token> _field_r = jule::Slice<_1ea7465e5_Token>();
	_1ea7465e5_Token _field_setter = _1ea7465e5_Token();
	jule::Bool _field_ok = jule::Bool();


	_1eb382692_AssignInfo(jule::Slice<_1ea7465e5_Token> __param_l, jule::Slice<_1ea7465e5_Token> __param_r, _1ea7465e5_Token __param_setter, jule::Bool __param_ok): _field_l(__param_l), _field_r(__param_r), _field_setter(__param_setter), _field_ok(__param_ok) {}

	

	_1eb382692_AssignInfo(void) = default;

	inline bool operator==(const _1eb382692_AssignInfo &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _1eb382692_AssignInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_IdentExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();


	_1ea6ee955_IdentExpr(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked) {}

	

	_1ea6ee955_IdentExpr(void) = default;

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _1ea6ee955_IdentExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _1ea6ee955_IdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinPanicCallExprModel {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();


	_1eb7ccdea_BuiltinPanicCallExprModel(_1ea7465e5_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1eb7ccdea_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinPanicCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinPanicCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7ccdea_BuiltinAssertCallExprModel {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();


	_1eb7ccdea_BuiltinAssertCallExprModel(_1ea7465e5_Token __param_token, jule::Any __param_expr, jule::Str __param_log): _field_token(__param_token), _field_expr(__param_expr), _field_log(__param_log) {}

	

	_1eb7ccdea_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(const _1eb7ccdea_BuiltinAssertCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_log == _Src._field_log;
	}

	inline bool operator!=(const _1eb7ccdea_BuiltinAssertCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_UnaryExpr {
	_1ea7465e5_Token _field_op = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();


	_1ea6ee955_UnaryExpr(_1ea7465e5_Token __param_op, jule::Any __param_expr): _field_op(__param_op), _field_expr(__param_expr) {}

	

	_1ea6ee955_UnaryExpr(void) = default;

	inline bool operator==(const _1ea6ee955_UnaryExpr &_Src) const {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_UnaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_VariadicExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();


	_1ea6ee955_VariadicExpr(_1ea7465e5_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1ea6ee955_VariadicExpr(void) = default;

	inline bool operator==(const _1ea6ee955_VariadicExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_VariadicExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1eb29bdd6_Field {
	jule::Ptr<_1eb29bdd6_Field> self;

	jule::Ptr<_1eb29bdd6_Struct> _field_owner = jule::Ptr<_1eb29bdd6_Struct>();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ec1c55b1_TypeSymbol> _field_kind = jule::Ptr<_1ec1c55b1_TypeSymbol>();


	_1eb29bdd6_Field(jule::Ptr<_1eb29bdd6_Struct> __param_owner, _1ea7465e5_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1ec1c55b1_TypeSymbol> __param_kind): _field_owner(__param_owner), _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind) {
		this->self = jule::Ptr<_1eb29bdd6_Field>::make(this, nullptr);

	}

	~_1eb29bdd6_Field(void) { this->self.ref = nullptr; }

	_1eb29bdd6_Field(void) { this->self = jule::Ptr<_1eb29bdd6_Field>::make(this, nullptr); }

	inline jule::Ptr<_1eb29bdd6_FieldIns> _method_instance(void);


	inline bool operator==(const _1eb29bdd6_Field &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1eb29bdd6_Field &_Src) const { return !this->operator==(_Src); }
};


struct _1eb29bdd6_Struct {
	jule::Ptr<_1eb29bdd6_Struct> self;

	jule::Ptr<_1eb9ed0d7_Sema> _field_sema = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _field_depends = jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>();
	jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _field_uses = jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1eb29bdd6_Field>> _field_fields = jule::Slice<jule::Ptr<_1eb29bdd6_Field>>();
	jule::Slice<jule::Ptr<_1eb627195_Fn>> _field_methods = jule::Slice<jule::Ptr<_1eb627195_Fn>>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_statics = jule::Slice<jule::Ptr<_1eba533d4_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>();
	jule::Slice<jule::Ptr<_1eb7c68e9_Trait>> _field_implements = jule::Slice<jule::Ptr<_1eb7c68e9_Trait>>();
	jule::Slice<jule::Ptr<_1eb29bdd6_StructIns>> _field_instances = jule::Slice<jule::Ptr<_1eb29bdd6_StructIns>>();


	_1eb29bdd6_Struct(jule::Ptr<_1eb9ed0d7_Sema> __param_sema, jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> __param_depends, jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> __param_uses, _1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_1eb29bdd6_Field>> __param_fields, jule::Slice<jule::Ptr<_1eb627195_Fn>> __param_methods, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_statics, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> __param_generics, jule::Slice<jule::Ptr<_1eb7c68e9_Trait>> __param_implements, jule::Slice<jule::Ptr<_1eb29bdd6_StructIns>> __param_instances): _field_sema(__param_sema), _field_depends(__param_depends), _field_uses(__param_uses), _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_methods(__param_methods), _field_statics(__param_statics), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc(__param_doc), _field_generics(__param_generics), _field_implements(__param_implements), _field_instances(__param_instances) {
		this->self = jule::Ptr<_1eb29bdd6_Struct>::make(this, nullptr);

	}

	~_1eb29bdd6_Struct(void) { this->self.ref = nullptr; }

	_1eb29bdd6_Struct(void) { this->self = jule::Ptr<_1eb29bdd6_Struct>::make(this, nullptr); }

	inline jule::Ptr<_1eb29bdd6_StructIns> _method_instance(void);


	inline jule::Ptr<_1eb29bdd6_StructIns> _method_append_instance(jule::Ptr<_1eb29bdd6_StructIns>&);


	inline jule::Ptr<_1eb627195_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1eba533d4_Var> _method_find_static(jule::Str);


	inline jule::Ptr<_1eb29bdd6_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ptr<_1eb7c68e9_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ptr<_1eb29bdd6_Struct>);


	inline jule::Bool _method_has_ref_accessible(void);


	inline bool operator==(const _1eb29bdd6_Struct &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1eb29bdd6_Struct &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_IdentTypeDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>();


	_1ea6ee955_IdentTypeDecl(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_generics(__param_generics) {}

	

	_1ea6ee955_IdentTypeDecl(void) = default;

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _1ea6ee955_IdentTypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _1ea6ee955_IdentTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_NsSelectionExpr {
	jule::Slice<_1ea7465e5_Token> _field_ns = jule::Slice<_1ea7465e5_Token>();
	_1ea7465e5_Token _field_ident = _1ea7465e5_Token();


	_1ea6ee955_NsSelectionExpr(jule::Slice<_1ea7465e5_Token> __param_ns, _1ea7465e5_Token __param_ident): _field_ns(__param_ns), _field_ident(__param_ident) {}

	

	_1ea6ee955_NsSelectionExpr(void) = default;

	inline bool operator==(const _1ea6ee955_NsSelectionExpr &_Src) const {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1ea6ee955_NsSelectionExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Any _field_expr = jule::Any();
	_1ea7465e5_Token _field_ident = _1ea7465e5_Token();


	_1ea6ee955_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _1ea7465e5_Token __param_ident): _field_is_self(__param_is_self), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1ea6ee955_SubIdentExpr(void) = default;

	inline bool operator==(const _1ea6ee955_SubIdentExpr &_Src) const {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1ea6ee955_SubIdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1eb627195_Param {
	jule::Ptr<_1eb627195_Param> self;

	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1ec1c55b1_TypeSymbol> _field_kind = jule::Ptr<_1ec1c55b1_TypeSymbol>();
	jule::Str _field_ident = jule::Str();


	_1eb627195_Param(_1ea7465e5_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1ec1c55b1_TypeSymbol> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {
		this->self = jule::Ptr<_1eb627195_Param>::make(this, nullptr);

	}

	~_1eb627195_Param(void) { this->self.ref = nullptr; }

	_1eb627195_Param(void) { this->self = jule::Ptr<_1eb627195_Param>::make(this, nullptr); }

	inline jule::Ptr<_1eb627195_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _1eb627195_Param &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1eb627195_Param &_Src) const { return !this->operator==(_Src); }
};


struct _1eb627195_Fn {
	jule::Ptr<_1eb627195_Fn> self;

	jule::Ptr<_1eb9ed0d7_Sema> _field_sema = jule::Ptr<_1eb9ed0d7_Sema>();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>();
	jule::Ptr<_1eb627195_RetType> _field_result = jule::Ptr<_1eb627195_RetType>();
	jule::Slice<jule::Ptr<_1eb627195_Param>> _field_params = jule::Slice<jule::Ptr<_1eb627195_Param>>();
	jule::Ptr<_1eb29bdd6_Struct> _field_owner = jule::Ptr<_1eb29bdd6_Struct>();
	jule::Slice<jule::Ptr<_1eb627195_FnIns>> _field_instances = jule::Slice<jule::Ptr<_1eb627195_FnIns>>();


	_1eb627195_Fn(jule::Ptr<_1eb9ed0d7_Sema> __param_sema, _1ea7465e5_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Str __param_doc, jule::Ptr<_1ea6ee955_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> __param_generics, jule::Ptr<_1eb627195_RetType> __param_result, jule::Slice<jule::Ptr<_1eb627195_Param>> __param_params, jule::Ptr<_1eb29bdd6_Struct> __param_owner, jule::Slice<jule::Ptr<_1eb627195_FnIns>> __param_instances): _field_sema(__param_sema), _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc(__param_doc), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params), _field_owner(__param_owner), _field_instances(__param_instances) {
		this->self = jule::Ptr<_1eb627195_Fn>::make(this, nullptr);

	}

	~_1eb627195_Fn(void) { this->self.ref = nullptr; }

	_1eb627195_Fn(void) { this->self = jule::Ptr<_1eb627195_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ptr<_1eb627195_FnIns> _method_instance_force(void);


	inline jule::Ptr<_1eb627195_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ptr<_1eb627195_FnIns>&);


	inline bool operator==(const _1eb627195_Fn &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1eb627195_Fn &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_BinopExpr {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_1ea7465e5_Token _field_op = _1ea7465e5_Token();


	_1ea6ee955_BinopExpr(jule::Any __param_left, jule::Any __param_right, _1ea7465e5_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1ea6ee955_BinopExpr(void) = default;

	inline bool operator==(const _1ea6ee955_BinopExpr &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1ea6ee955_BinopExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d8048_ImportInfo: public _1ec2d8be1_Lookup {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<_1ea7465e5_Token> _field_selected = jule::Slice<_1ea7465e5_Token>();
	jule::Ptr<_1eb7d8048_Package> _field_package = jule::Ptr<_1eb7d8048_Package>();


	_1eb7d8048_ImportInfo(_1ea7465e5_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_1ea7465e5_Token> __param_selected, jule::Ptr<_1eb7d8048_Package> __param_package): _field_token(__param_token), _field_path(__param_path), _field_link_path(__param_link_path), _field_ident(__param_ident), _field_alias(__param_alias), _field_duplicate(__param_duplicate), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std), _field_import_all(__param_import_all), _field_selected(__param_selected), _field_package(__param_package) {}

	

	_1eb7d8048_ImportInfo(void) = default;

	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1eb7d8048_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>);


	inline jule::Ptr<_1eba533d4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ec1c55b1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb29bdd6_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb627195_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1eb7c68e9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline jule::Bool _method_is_accessible_via_selection(void);


	inline bool operator==(const _1eb7d8048_ImportInfo &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_alias == _Src._field_alias &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package;
	}

	inline bool operator!=(const _1eb7d8048_ImportInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_FnCallExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();
	jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>();
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _field_args = jule::Slice<jule::Ptr<_1ea6ee955_Expr>>();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_exception = jule::Ptr<_1ea6ee955_ScopeTree>();


	_1ea6ee955_FnCallExpr(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_Expr> __param_expr, jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> __param_generics, jule::Slice<jule::Ptr<_1ea6ee955_Expr>> __param_args, jule::Ptr<_1ea6ee955_ScopeTree> __param_exception): _field_token(__param_token), _field_expr(__param_expr), _field_generics(__param_generics), _field_args(__param_args), _field_exception(__param_exception) {}

	

	_1ea6ee955_FnCallExpr(void) = default;

	inline jule::Bool _method_unhandled(void);


	inline jule::Bool _method_ignored(void);


	inline bool operator==(const _1ea6ee955_FnCallExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_exception == _Src._field_exception;
	}

	inline bool operator!=(const _1ea6ee955_FnCallExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_FieldExprPair {
	_1ea7465e5_Token _field_field = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();


	_1ea6ee955_FieldExprPair(_1ea7465e5_Token __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1ea6ee955_FieldExprPair(void) = default;

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _1ea6ee955_FieldExprPair &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_FieldExprPair &_Src) const { return !this->operator==(_Src); }
};


struct _1eb736eec_Pass {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_text = jule::Str();


	_1eb736eec_Pass(_1ea7465e5_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_1eb736eec_Pass(void) = default;

	inline bool operator==(const _1eb736eec_Pass &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1eb736eec_Pass &_Src) const { return !this->operator==(_Src); }
};


struct _1eba533d4_Var {
	jule::Ptr<_1eb7d5892_Scope> _field_scope = jule::Ptr<_1eb7d5892_Scope>();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_1ec1c55b1_TypeSymbol> _field_kind = jule::Ptr<_1ec1c55b1_TypeSymbol>();
	jule::Ptr<_1ebcce31e_Value> _field_value = jule::Ptr<_1ebcce31e_Value>();
	jule::Ptr<_1eb736eec_ReferenceStack> _field_references = jule::Ptr<_1eb736eec_ReferenceStack>();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Ptr<_1eba533d4_IterRelation> _field_iter_relation = jule::Ptr<_1eba533d4_IterRelation>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_depends = jule::Slice<jule::Ptr<_1eba533d4_Var>>();


	_1eba533d4_Var(jule::Ptr<_1eb7d5892_Scope> __param_scope, _1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ptr<_1ec1c55b1_TypeSymbol> __param_kind, jule::Ptr<_1ebcce31e_Value> __param_value, jule::Ptr<_1eb736eec_ReferenceStack> __param_references, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Ptr<_1eba533d4_IterRelation> __param_iter_relation, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_depends): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_constant(__param_constant), _field_mutable(__param_mutable), _field_public(__param_public), _field_used(__param_used), _field_statically(__param_statically), _field_reference(__param_reference), _field_doc(__param_doc), _field_kind(__param_kind), _field_value(__param_value), _field_references(__param_references), _field_directives(__param_directives), _field_iter_relation(__param_iter_relation), _field_depends(__param_depends) {}

	

	_1eba533d4_Var(void) = default;

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _1eba533d4_Var &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_directives == _Src._field_directives &&
			this->_field_iter_relation == _Src._field_iter_relation &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _1eba533d4_Var &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_TypeCompatibilityChecker {
	jule::Ptr<_1eb9ed0d7_Sema> _field_s = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_dest = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_src = jule::Ptr<_1ec1c55b1_TypeKind>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();


	_1eba534e4_TypeCompatibilityChecker(jule::Ptr<_1eb9ed0d7_Sema> __param_s, jule::Ptr<_1ec1c55b1_TypeKind> __param_dest, jule::Ptr<_1ec1c55b1_TypeKind> __param_src, _1ea7465e5_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_src(__param_src), _field_error_token(__param_error_token) {}

	

	_1eba534e4_TypeCompatibilityChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1eba534e4_TypeCompatibilityChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _1eba534e4_TypeCompatibilityChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_AssignTypeChecker {
	jule::Ptr<_1eb9ed0d7_Sema> _field_s = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Ptr<_1ec1c55b1_TypeKind> _field_dest = jule::Ptr<_1ec1c55b1_TypeKind>();
	jule::Ptr<_1ebcce31e_Data> _field_d = jule::Ptr<_1ebcce31e_Data>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();


	_1eba534e4_AssignTypeChecker(jule::Ptr<_1eb9ed0d7_Sema> __param_s, jule::Ptr<_1ec1c55b1_TypeKind> __param_dest, jule::Ptr<_1ebcce31e_Data> __param_d, _1ea7465e5_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_d(__param_d), _field_error_token(__param_error_token) {}

	

	_1eba534e4_AssignTypeChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_is_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1eba534e4_AssignTypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _1eba534e4_AssignTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_DynamicTypeAnnotation {
	jule::Ptr<_1ebcce31e_Eval> _field_e = jule::Ptr<_1ebcce31e_Eval>();
	jule::Ptr<_1eb627195_FnIns> _field_f = jule::Ptr<_1eb627195_FnIns>();
	jule::Ptr<_1eb627195_ParamIns> _field_p = jule::Ptr<_1eb627195_ParamIns>();
	jule::Ptr<_1ebcce31e_Data> _field_a = jule::Ptr<_1ebcce31e_Data>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();
	jule::Ptr<_1ec1c55b1_TypeKind>* _field_k = nullptr;


	_1eba534e4_DynamicTypeAnnotation(jule::Ptr<_1ebcce31e_Eval> __param_e, jule::Ptr<_1eb627195_FnIns> __param_f, jule::Ptr<_1eb627195_ParamIns> __param_p, jule::Ptr<_1ebcce31e_Data> __param_a, _1ea7465e5_Token __param_error_token, jule::Ptr<_1ec1c55b1_TypeKind>* __param_k): _field_e(__param_e), _field_f(__param_f), _field_p(__param_p), _field_a(__param_a), _field_error_token(__param_error_token), _field_k(__param_k) {}

	

	_1eba534e4_DynamicTypeAnnotation(void) = default;

	inline void _method_push_generic(jule::Ptr<_1ec1c55b1_TypeKind>&,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_slc(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_check_map_key(jule::Ptr<_1ec1c55b1_TypeKind>*,jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_map(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_fn(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_ptr(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_sptr(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_any(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate_kind(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _1eba534e4_DynamicTypeAnnotation &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _1eba534e4_DynamicTypeAnnotation &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_FnCallArgChecker {
	jule::Ptr<_1ebcce31e_Eval> _field_e = jule::Ptr<_1ebcce31e_Eval>();
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _field_args = jule::Slice<jule::Ptr<_1ea6ee955_Expr>>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();
	jule::Ptr<_1eb627195_FnIns> _field_f = jule::Ptr<_1eb627195_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();


	_1eba534e4_FnCallArgChecker(jule::Ptr<_1ebcce31e_Eval> __param_e, jule::Slice<jule::Ptr<_1ea6ee955_Expr>> __param_args, _1ea7465e5_Token __param_error_token, jule::Ptr<_1eb627195_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models): _field_e(__param_e), _field_args(__param_args), _field_error_token(__param_error_token), _field_f(__param_f), _field_dynamic_annotation(__param_dynamic_annotation), _field_arg_models(__param_arg_models) {}

	

	_1eba534e4_FnCallArgChecker(void) = default;

	inline void _method_push_err_token(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ptr<_1eb627195_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>&);


	inline jule::Bool _method_check_arg(jule::Ptr<_1eb627195_ParamIns>&,jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token&);


	inline jule::Bool _method_push(jule::Ptr<_1eb627195_ParamIns>&,jule::Ptr<_1ea6ee955_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ptr<_1eb627195_ParamIns>&,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>&);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1eba534e4_FnCallArgChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _1eba534e4_FnCallArgChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_StructLitChecker {
	jule::Ptr<_1ebcce31e_Eval> _field_e = jule::Ptr<_1ebcce31e_Eval>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();
	jule::Ptr<_1eb29bdd6_StructIns> _field_s = jule::Ptr<_1eb29bdd6_StructIns>();
	jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>>();


	_1eba534e4_StructLitChecker(jule::Ptr<_1ebcce31e_Eval> __param_e, _1ea7465e5_Token __param_error_token, jule::Ptr<_1eb29bdd6_StructIns> __param_s, jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>> __param_args): _field_e(__param_e), _field_error_token(__param_error_token), _field_s(__param_s), _field_args(__param_args) {}

	

	_1eba534e4_StructLitChecker(void) = default;

	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ptr<_1eb29bdd6_FieldIns>&,jule::Ptr<_1ebcce31e_Data>&,_1ea7465e5_Token&);


	inline void _method_check_pair(jule::Ptr<_1ea6ee955_FieldExprPair>&,jule::Slice<jule::Any>&);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>&);


	inline void _method_check(jule::Slice<jule::Any>&);


	inline bool operator==(const _1eba534e4_StructLitChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1eba534e4_StructLitChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Node {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_data = jule::Any();


	_1ea6ee955_Node(_1ea7465e5_Token __param_token, jule::Any __param_data): _field_token(__param_token), _field_data(__param_data) {}

	

	_1ea6ee955_Node(void) = default;

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_directive(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _1ea6ee955_Node &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1ea6ee955_Node &_Src) const { return !this->operator==(_Src); }
};


struct _1eba534e4_RetTypeChecker {
	jule::Ptr<_1eb7d5892_ScopeChecker> _field_sc = jule::Ptr<_1eb7d5892_ScopeChecker>();
	jule::Ptr<_1eb627195_FnIns> _field_f = jule::Ptr<_1eb627195_FnIns>();
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>();
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1ea6ee955_Expr>>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_vars = jule::Slice<jule::Ptr<_1eba533d4_Var>>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();
	jule::Any _field_model = jule::Any();


	_1eba534e4_RetTypeChecker(jule::Ptr<_1eb7d5892_ScopeChecker> __param_sc, jule::Ptr<_1eb627195_FnIns> __param_f, jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> __param_types, jule::Slice<jule::Ptr<_1ea6ee955_Expr>> __param_exprs, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_vars, _1ea7465e5_Token __param_error_token, jule::Any __param_model): _field_sc(__param_sc), _field_f(__param_f), _field_types(__param_types), _field_exprs(__param_exprs), _field_vars(__param_vars), _field_error_token(__param_error_token), _field_model(__param_model) {}

	

	_1eba534e4_RetTypeChecker(void) = default;

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ptr<_1ea6ee955_Expr>&);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ptr<_1ea6ee955_Expr>&);


	inline bool operator==(const _1eba534e4_RetTypeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _1eba534e4_RetTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7c68e9_Trait: public _1ec1c55b1_Kind {
	jule::Ptr<_1eb7c68e9_Trait> self;

	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_1eb627195_Fn>> _field_methods = jule::Slice<jule::Ptr<_1eb627195_Fn>>();
	jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _field_implemented = jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>();


	_1eb7c68e9_Trait(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_doc, jule::Slice<jule::Ptr<_1eb627195_Fn>> __param_methods, jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> __param_implemented): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_mutable(__param_mutable), _field_doc(__param_doc), _field_methods(__param_methods), _field_implemented(__param_implemented) {
		this->self = jule::Ptr<_1eb7c68e9_Trait>::make(this, nullptr);

	}

	~_1eb7c68e9_Trait(void) { this->self.ref = nullptr; }

	_1eb7c68e9_Trait(void) { this->self = jule::Ptr<_1eb7c68e9_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ptr<_1eb627195_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _1eb7c68e9_Trait &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _1eb7c68e9_Trait &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7c7e7d_EnumItem {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ebcce31e_Value> _field_value = jule::Ptr<_1ebcce31e_Value>();


	_1eb7c7e7d_EnumItem(_1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Ptr<_1ebcce31e_Value> __param_value): _field_token(__param_token), _field_ident(__param_ident), _field_value(__param_value) {}

	

	_1eb7c7e7d_EnumItem(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1eb7c7e7d_EnumItem &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1eb7c7e7d_EnumItem &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7c7e7d_Enum: public _1ec1c55b1_Kind {
	jule::Ptr<_1eb7c7e7d_Enum> self;

	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ec1c55b1_TypeSymbol> _field_kind = jule::Ptr<_1ec1c55b1_TypeSymbol>();
	jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>> _field_items = jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>>();
	jule::Str _field_doc = jule::Str();


	_1eb7c7e7d_Enum(_1ea7465e5_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1ec1c55b1_TypeSymbol> __param_kind, jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>> __param_items, jule::Str __param_doc): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc(__param_doc) {
		this->self = jule::Ptr<_1eb7c7e7d_Enum>::make(this, nullptr);

	}

	~_1eb7c7e7d_Enum(void) { this->self.ref = nullptr; }

	_1eb7c7e7d_Enum(void) { this->self = jule::Ptr<_1eb7c7e7d_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ec1c55b1_TypeKind>);


	inline jule::Ptr<_1eb7c7e7d_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _1eb7c7e7d_Enum &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _1eb7c7e7d_Enum &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d363c_Impl {
	_1ea7465e5_Token _field_base = _1ea7465e5_Token();
	_1ea7465e5_Token _field_dest = _1ea7465e5_Token();
	jule::Slice<jule::Ptr<_1eb627195_Fn>> _field_methods = jule::Slice<jule::Ptr<_1eb627195_Fn>>();
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _field_statics = jule::Slice<jule::Ptr<_1eba533d4_Var>>();


	_1eb7d363c_Impl(_1ea7465e5_Token __param_base, _1ea7465e5_Token __param_dest, jule::Slice<jule::Ptr<_1eb627195_Fn>> __param_methods, jule::Slice<jule::Ptr<_1eba533d4_Var>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1eb7d363c_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _1eb7d363c_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _1eb7d363c_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1ebcce31e_BinopSolver {
	jule::Ptr<_1ebcce31e_Eval> _field_e = jule::Ptr<_1ebcce31e_Eval>();
	jule::Ptr<_1ebcce31e_Data> _field_l = jule::Ptr<_1ebcce31e_Data>();
	jule::Ptr<_1ebcce31e_Data> _field_r = jule::Ptr<_1ebcce31e_Data>();
	_1ea7465e5_Token _field_op = _1ea7465e5_Token();


	_1ebcce31e_BinopSolver(jule::Ptr<_1ebcce31e_Eval> __param_e, jule::Ptr<_1ebcce31e_Data> __param_l, jule::Ptr<_1ebcce31e_Data> __param_r, _1ea7465e5_Token __param_op): _field_e(__param_e), _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1ebcce31e_BinopSolver(void) = default;

	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_nil(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_enum(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_sptr(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_ptr(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_arr(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_slc(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_fn(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_struct(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_trait(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_any(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_bool(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_mod(void);


	inline jule::Bool _method_numbers_are_compatibile(jule::Str&,jule::Str&);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_float(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_int(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval_prim(void);


	inline jule::Ptr<_1ebcce31e_Data> _method_eval(void);


	inline void _method_solve_const(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_post_const(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_check_data(jule::Ptr<_1ebcce31e_Data>&);


	inline void _method_check_datas(void);


	inline void _method_set_model(jule::Ptr<_1ebcce31e_Data>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_solve_explicit(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>&);


	inline jule::Ptr<_1ebcce31e_Data> _method_solve(jule::Ptr<_1ea6ee955_BinopExpr>&);


	inline bool operator==(const _1ebcce31e_BinopSolver &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1ebcce31e_BinopSolver &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_TypeAlias {
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ec1c55b1_TypeSymbol> _field_kind = jule::Ptr<_1ec1c55b1_TypeSymbol>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();


	_1ec1c55b1_TypeAlias(jule::Ptr<_1ea6ee955_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, jule::Bool __param_generic, _1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Ptr<_1ec1c55b1_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_used(__param_used), _field_generic(__param_generic), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc(__param_doc), _field_refers(__param_refers) {}

	

	_1ec1c55b1_TypeAlias(void) = default;

	inline bool operator==(const _1ec1c55b1_TypeAlias &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_generic == _Src._field_generic &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _1ec1c55b1_TypeAlias &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_BraceLit {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1ea6ee955_BraceLit(_1ea7465e5_Token __param_token, jule::Slice<jule::Any> __param_exprs): _field_token(__param_token), _field_exprs(__param_exprs) {}

	

	_1ea6ee955_BraceLit(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _1ea6ee955_BraceLit &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1ea6ee955_BraceLit &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_KeyValPair {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();
	_1ea7465e5_Token _field_colon = _1ea7465e5_Token();


	_1ea6ee955_KeyValPair(jule::Any __param_key, jule::Any __param_val, _1ea7465e5_Token __param_colon): _field_key(__param_key), _field_val(__param_val), _field_colon(__param_colon) {}

	

	_1ea6ee955_KeyValPair(void) = default;

	inline bool operator==(const _1ea6ee955_KeyValPair &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _1ea6ee955_KeyValPair &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_SliceExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1ea6ee955_SliceExpr(_1ea7465e5_Token __param_token, jule::Slice<jule::Any> __param_elems): _field_token(__param_token), _field_elems(__param_elems) {}

	

	_1ea6ee955_SliceExpr(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _1ea6ee955_SliceExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1ea6ee955_SliceExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_IndexingExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_index = jule::Any();


	_1ea6ee955_IndexingExpr(_1ea7465e5_Token __param_token, jule::Any __param_expr, jule::Any __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1ea6ee955_IndexingExpr(void) = default;

	inline bool operator==(const _1ea6ee955_IndexingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _1ea6ee955_IndexingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_SlicingExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_start = jule::Any();
	jule::Any _field_to = jule::Any();


	_1ea6ee955_SlicingExpr(_1ea7465e5_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to): _field_token(__param_token), _field_expr(__param_expr), _field_start(__param_start), _field_to(__param_to) {}

	

	_1ea6ee955_SlicingExpr(void) = default;

	inline bool operator==(const _1ea6ee955_SlicingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _1ea6ee955_SlicingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_TernaryExpr {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_1ea6ee955_TernaryExpr(_1ea7465e5_Token __param_token, jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_token(__param_token), _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_1ea6ee955_TernaryExpr(void) = default;

	inline bool operator==(const _1ea6ee955_TernaryExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _1ea6ee955_TernaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_GenericDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();


	_1ea6ee955_GenericDecl(_1ea7465e5_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1ea6ee955_GenericDecl(void) = default;

	inline bool operator==(const _1ea6ee955_GenericDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1ea6ee955_GenericDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_LabelSt {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();


	_1ea6ee955_LabelSt(_1ea7465e5_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1ea6ee955_LabelSt(void) = default;

	inline bool operator==(const _1ea6ee955_LabelSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1ea6ee955_LabelSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_GotoSt {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	_1ea7465e5_Token _field_label = _1ea7465e5_Token();


	_1ea6ee955_GotoSt(_1ea7465e5_Token __param_token, _1ea7465e5_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1ea6ee955_GotoSt(void) = default;

	inline bool operator==(const _1ea6ee955_GotoSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1ea6ee955_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_FallSt {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();


	_1ea6ee955_FallSt(_1ea7465e5_Token __param_token): _field_token(__param_token) {}

	

	_1ea6ee955_FallSt(void) = default;

	inline bool operator==(const _1ea6ee955_FallSt &_Src) const {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _1ea6ee955_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ec1c55b1_TypeChecker {
	jule::Ptr<_1eb9ed0d7_Sema> _field_s = jule::Ptr<_1eb9ed0d7_Sema>();
	jule::Trait<_1ec2d8be1_Lookup> _field_lookup = jule::Trait<_1ec2d8be1_Lookup>();
	jule::Ptr<_1ec1c55b1_Referencer> _field_referencer = jule::Ptr<_1ec1c55b1_Referencer>();
	_1ea7465e5_Token _field_error_token = _1ea7465e5_Token();
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>();
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();


	_1ec1c55b1_TypeChecker(jule::Ptr<_1eb9ed0d7_Sema> __param_s, jule::Trait<_1ec2d8be1_Lookup> __param_lookup, jule::Ptr<_1ec1c55b1_Referencer> __param_referencer, _1ea7465e5_Token __param_error_token, jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain, jule::Bool __param_dis_builtin): _field_s(__param_s), _field_lookup(__param_lookup), _field_referencer(__param_referencer), _field_error_token(__param_error_token), _field_ignore_generics(__param_ignore_generics), _field_use_generics(__param_use_generics), _field_not_plain(__param_not_plain), _field_dis_builtin(__param_dis_builtin) {}

	

	_1ec1c55b1_TypeChecker(void) = default;

	inline void _method_push_err(_1ea7465e5_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Ptr<_1ec1c55b1_Prim> _method_build_prim(jule::Ptr<_1ea6ee955_IdentTypeDecl>&);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_1ea6ee955_IdentTypeDecl>&,jule::Any);


	inline jule::Trait<_1ec1c55b1_Kind> _method_from_type_alias(jule::Ptr<_1ea6ee955_IdentTypeDecl>&,jule::Ptr<_1ec1c55b1_TypeAlias>&);


	inline jule::Ptr<_1eb7c7e7d_Enum> _method_from_enum(jule::Ptr<_1ea6ee955_IdentTypeDecl>&,jule::Ptr<_1eb7c7e7d_Enum>&);


	inline jule::Bool _method_check_struct_ins(jule::Ptr<_1eb29bdd6_StructIns>&,_1ea7465e5_Token&);


	inline void _method_append_used_struct_reference(jule::Ptr<_1eb29bdd6_Struct>&);


	inline jule::Ptr<_1eb29bdd6_StructIns> _method_from_struct(jule::Ptr<_1ea6ee955_IdentTypeDecl>&,jule::Ptr<_1eb29bdd6_Struct>&);


	inline jule::Trait<_1ec1c55b1_Kind> _method_get_def(jule::Ptr<_1ea6ee955_IdentTypeDecl>&);


	inline jule::Trait<_1ec1c55b1_Kind> _method_build_ident(jule::Ptr<_1ea6ee955_IdentTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_Sptr> _method_build_sptr_from_type(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Ptr<_1ec1c55b1_Sptr> _method_build_sptr(jule::Ptr<_1ea6ee955_SptrTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_Ptr> _method_build_ptr_from_type(jule::Ptr<_1ec1c55b1_TypeKind>&);


	inline jule::Ptr<_1ec1c55b1_Ptr> _method_build_ptr(jule::Ptr<_1ea6ee955_PtrTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_Slc> _method_build_slc(jule::Ptr<_1ea6ee955_SlcTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_Arr> _method_build_arr(jule::Ptr<_1ea6ee955_ArrTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_Map> _method_build_map(jule::Ptr<_1ea6ee955_MapTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_Tuple> _method_build_tuple(jule::Ptr<_1ea6ee955_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ptr<_1eb627195_FnIns>&);


	inline jule::Ptr<_1eb627195_FnIns> _method_build_fn(jule::Ptr<_1ea6ee955_FnDecl>);


	inline jule::Trait<_1ec1c55b1_Kind> _method_build_by_namespace(jule::Ptr<_1ea6ee955_NamespaceTypeDecl>);


	inline jule::Ptr<_1ec1c55b1_TypeKind> _method_build(jule::Any&);


	inline jule::Ptr<_1ec1c55b1_TypeKind> _method_check_decl(jule::Ptr<_1ea6ee955_TypeDecl>&);


	inline void _method_check(jule::Ptr<_1ec1c55b1_TypeSymbol>&);


	inline bool operator==(const _1ec1c55b1_TypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain &&
			this->_field_dis_builtin == _Src._field_dis_builtin;
	}

	inline bool operator!=(const _1ec1c55b1_TypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_AssignLeft {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_AssignLeft(_1ea7465e5_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ptr<_1ea6ee955_Expr> __param_expr): _field_token(__param_token), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_1ea6ee955_AssignLeft(void) = default;

	inline bool operator==(const _1ea6ee955_AssignLeft &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_AssignLeft &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	_1ea7465e5_Token _field_setter = _1ea7465e5_Token();
	jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>>();
	jule::Ptr<_1ea6ee955_Expr> _field_right = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_AssignSt(jule::Bool __param_declarative, _1ea7465e5_Token __param_setter, jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>> __param_left, jule::Ptr<_1ea6ee955_Expr> __param_right): _field_declarative(__param_declarative), _field_setter(__param_setter), _field_left(__param_left), _field_right(__param_right) {}

	

	_1ea6ee955_AssignSt(void) = default;

	inline bool operator==(const _1ea6ee955_AssignSt &_Src) const {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _1ea6ee955_AssignSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea66c0ed_IR {
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_1eb7d8048_Package> _field_main = jule::Ptr<_1eb7d8048_Package>();
	jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>>();
	_1ea66c175_OrderedDefines _field_ordered = _1ea66c175_OrderedDefines();


	_1ea66c0ed_IR(jule::Slice<jule::Str> __param_passes, jule::Ptr<_1eb7d8048_Package> __param_main, jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> __param_used, _1ea66c175_OrderedDefines __param_ordered): _field_passes(__param_passes), _field_main(__param_main), _field_used(__param_used), _field_ordered(__param_ordered) {}

	

	_1ea66c0ed_IR(void) = default;

	static inline std::tuple<jule::Ptr<_1ea66c0ed_IR>,jule::Slice<_1e8ea7cc0_Log>> _static_method_build(jule::Str,jule::Int);


	inline void _method_append_structs(jule::Ptr<_1eb7d8048_Package>&,jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&);


	inline jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _method_get_all_structures(void);


	inline void _method_append_vars(jule::Ptr<_1eb7d8048_Package>&,jule::Slice<jule::Ptr<_1eba533d4_Var>>&);


	inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _method_get_all_variables(void);


	inline void _method_order(void);


	inline bool operator==(const _1ea66c0ed_IR &_Src) const {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used &&
			this->_field_ordered == _Src._field_ordered;
	}

	inline bool operator!=(const _1ea66c0ed_IR &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Comment {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_text = jule::Str();


	_1ea6ee955_Comment(_1ea7465e5_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_1ea6ee955_Comment(void) = default;

	inline bool operator==(const _1ea6ee955_Comment &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1ea6ee955_Comment &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_ParamDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Str _field_ident = jule::Str();


	_1ea6ee955_ParamDecl(_1ea7465e5_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_1ea6ee955_ParamDecl(void) = default;

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _1ea6ee955_ParamDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1ea6ee955_ParamDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_FnDecl {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_doc_comments = jule::Ptr<_1ea6ee955_CommentGroup>();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>();
	jule::Ptr<_1ea6ee955_RetTypeDecl> _field_result = jule::Ptr<_1ea6ee955_RetTypeDecl>();
	jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>>();


	_1ea6ee955_FnDecl(_1ea7465e5_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Ptr<_1ea6ee955_CommentGroup> __param_doc_comments, jule::Ptr<_1ea6ee955_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> __param_generics, jule::Ptr<_1ea6ee955_RetTypeDecl> __param_result, jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>> __param_params): _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params) {}

	

	_1ea6ee955_FnDecl(void) = default;

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _1ea6ee955_FnDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _1ea6ee955_FnDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_VarDecl {
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_1ea6ee955_Directive>> _field_directives = jule::Slice<jule::Ptr<_1ea6ee955_Directive>>();
	jule::Ptr<_1ea6ee955_CommentGroup> _field_doc_comments = jule::Ptr<_1ea6ee955_CommentGroup>();
	jule::Ptr<_1ea6ee955_TypeDecl> _field_kind = jule::Ptr<_1ea6ee955_TypeDecl>();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_VarDecl(jule::Ptr<_1ea6ee955_ScopeTree> __param_scope, _1ea7465e5_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ptr<_1ea6ee955_Directive>> __param_directives, jule::Ptr<_1ea6ee955_CommentGroup> __param_doc_comments, jule::Ptr<_1ea6ee955_TypeDecl> __param_kind, jule::Ptr<_1ea6ee955_Expr> __param_expr): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_public(__param_public), _field_mutable(__param_mutable), _field_constant(__param_constant), _field_statically(__param_statically), _field_reference(__param_reference), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_1ea6ee955_VarDecl(void) = default;

	inline bool operator==(const _1ea6ee955_VarDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_VarDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_RetSt {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();


	_1ea6ee955_RetSt(_1ea7465e5_Token __param_token, jule::Ptr<_1ea6ee955_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1ea6ee955_RetSt(void) = default;

	inline bool operator==(const _1ea6ee955_RetSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1ea6ee955_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_Iter {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_1ea6ee955_ScopeTree> _field_scope = jule::Ptr<_1ea6ee955_ScopeTree>();


	_1ea6ee955_Iter(_1ea7465e5_Token __param_token, jule::Any __param_kind, jule::Ptr<_1ea6ee955_ScopeTree> __param_scope): _field_token(__param_token), _field_kind(__param_kind), _field_scope(__param_scope) {}

	

	_1ea6ee955_Iter(void) = default;

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _1ea6ee955_Iter &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1ea6ee955_Iter &_Src) const { return !this->operator==(_Src); }
};


struct _1eb7d5892_ScopeLabel {
	_1ea7465e5_Token _field_token = _1ea7465e5_Token();
	jule::Ptr<_1eb7d5892_Label> _field_label = jule::Ptr<_1eb7d5892_Label>();
	jule::Int _field_pos = jule::Int();
	jule::Ptr<_1eb7d5892_ScopeChecker> _field_scope = jule::Ptr<_1eb7d5892_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();


	_1eb7d5892_ScopeLabel(_1ea7465e5_Token __param_token, jule::Ptr<_1eb7d5892_Label> __param_label, jule::Int __param_pos, jule::Ptr<_1eb7d5892_ScopeChecker> __param_scope, jule::Bool __param_used): _field_token(__param_token), _field_label(__param_label), _field_pos(__param_pos), _field_scope(__param_scope), _field_used(__param_used) {}

	

	_1eb7d5892_ScopeLabel(void) = default;

	inline bool operator==(const _1eb7d5892_ScopeLabel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _1eb7d5892_ScopeLabel &_Src) const { return !this->operator==(_Src); }
};


struct _1ea6ee955_WhileKind {
	jule::Ptr<_1ea6ee955_Expr> _field_expr = jule::Ptr<_1ea6ee955_Expr>();
	jule::Any _field_next = jule::Any();
	_1ea7465e5_Token _field_next_token = _1ea7465e5_Token();


	_1ea6ee955_WhileKind(jule::Ptr<_1ea6ee955_Expr> __param_expr, jule::Any __param_next, _1ea7465e5_Token __param_next_token): _field_expr(__param_expr), _field_next(__param_next), _field_next_token(__param_next_token) {}

	

	_1ea6ee955_WhileKind(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1ea6ee955_WhileKind &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _1ea6ee955_WhileKind &_Src) const { return !this->operator==(_Src); }
};


struct _1ec748ded_ArgParser {
	_1ec748ded_FlagSet _field_set = _1ec748ded_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::Int _field_i = jule::Int();


	_1ec748ded_ArgParser(_1ec748ded_FlagSet __param_set, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_content, jule::Int __param_i): _field_set(__param_set), _field_args(__param_args), _field_content(__param_content), _field_i(__param_i) {}

	

	_1ec748ded_ArgParser(void) = default;

	inline std::tuple<jule::Int,jule::Bool> _method_parse_integer_0(jule::Str&,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>);
	inline std::tuple<jule::Uint,jule::Bool> _method_parse_integer_1(jule::Str&,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>);


	inline jule::Str _method_get_data(void);


	inline jule::VoidExceptional _method_process_flag(jule::Trait<_1ec748ded_CommonFlag>&);


	inline jule::VoidExceptional _method_single_dash(jule::Str&);


	inline jule::VoidExceptional _method_double_dash(jule::Str&);


	inline jule::VoidExceptional _method_try_arg(void);


	inline jule::VoidExceptional _method_parse(void);


	inline bool operator==(const _1ec748ded_ArgParser &_Src) const {
		return 
			this->_field_set == _Src._field_set &&
			this->_field_args == _Src._field_args &&
			this->_field_content == _Src._field_content &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1ec748ded_ArgParser &_Src) const { return !this->operator==(_Src); }
};


inline jule::I32 _1e8eee29a_decode_rune(jule::I32,jule::I32);
inline std::tuple<jule::I32,jule::I32> _1e8eee29a_encode_rune(jule::I32);
inline jule::Slice<jule::I32> _1e8eee29a_decode(jule::Slice<jule::U16>);
inline jule::Slice<jule::U16> _1e8eee29a_append_rune(jule::Slice<jule::U16>,jule::I32);
inline jule::Slice<jule::U16> _1e8ed85a3_utf16_from_str(jule::Str);
inline jule::Str _1e8ed85a3_utf16_to_str(jule::Slice<jule::U16>);
inline jule::Str _1e8ed85a3_u16_ptr_to_str(jule::U16*);
inline jule::Int _1e8e5b03c_get_last_errno(void);
inline jule::Uintptr _1e8e5d46d_get_std_handle(jule::Uintptr);
inline jule::Int _1e8e5d46d_wstat(jule::U16*,struct stat*);
inline jule::Int _1e8e5d46d__wopen(jule::U16*,jule::Int,jule::Int);
inline jule::U32 _1e8e5d46d_get_last_error(void);
inline jule::U32 _1e8e5d46d_get_current_directory(jule::U32,jule::U16*);
inline jule::Bool _1e8e5d46d_delete_file(jule::U16*);
inline jule::Bool _1e8e5d46d_create_directory(jule::U16*);
inline jule::Bool _1e8e5d46d_remove_directory(jule::U16*);
inline _WDIR* _1e8e5d46d__wopendir(jule::U16*);
inline struct _wdirent* _1e8e5d46d__wreaddir(_WDIR*);
inline jule::Int _1e8e5d46d__wclosedir(_WDIR*);
inline jule::U32 _1e8e5d46d_get_full_path_name(jule::U16*,jule::U32,jule::U16*,jule::U16**);
inline jule::Bool _1e8e5d46d_get_console_mode(jule::Uintptr,jule::Int&);
inline jule::Bool _1e8e5d46d_set_console_mode(jule::Uintptr,jule::Int);
inline jule::Bool _1e8e5d46d_write_console(jule::Uintptr,jule::U16*,jule::Int,jule::Int&,void*);
inline jule::Bool _1e8e5d46d_read_console(jule::Uintptr,jule::U16*,jule::Int,jule::Int&,void*);
inline jule::I64 _1e8e79de6_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _1e8e79de6_read(jule::Int,void*,jule::Uint);
inline jule::Int _1e8e79de6_close(jule::Int);
inline jule::Int _1e8e79de6_write(jule::Int,void*,jule::Uint);
inline void _1e8e79de6_exit(jule::Int);
inline std::tuple<jule::I32,jule::Int> _1e8e90769_decode_rune(jule::Slice<jule::U8>);
inline jule::Int _1e8e90769_rune_len(jule::I32);
inline jule::Int _1e8e90769_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1e8e90769_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1e8e90769_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Int _1e91124bd_get_last_os_error_windows(void);
inline jule::Slice<jule::Str> _1e911755b_args(void);
inline jule::Exceptional<jule::Str> _1e911755b_working_dir(void);
inline jule::Exceptional<jule::Str> _1e91175d3___getwd(void);
inline jule::Bool _1e9030991_is_path_sep(jule::U8);
inline jule::Bool _1e9030991_is_slash(jule::U8);
inline jule::U8 _1e9030991_to_upper(jule::U8);
inline jule::Int _1e9030991_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Str,jule::Bool> _1e9030991_cut_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _1e9030991_full_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _1e9030991___abs(jule::Str);
inline jule::Str _1e9030991___join(jule::Slice<jule::Str>);
inline jule::Str _1e904e87d_clean(jule::Str);
inline jule::Str _1e904e87d_from_slash(jule::Str);
inline jule::Str _1e904e87d_join(jule::Slice<jule::Str>);
inline jule::Str _1e904e87d_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _1e904e87d_abs(jule::Str);
inline jule::Str _1e904e87d_base(jule::Str);
inline jule::Str _1e904e87d_dir(jule::Str);
inline jule::Str _1e904e87d_volume_name(jule::Str);
inline jule::Int _1e8da4bde_get_last_fs_error(void);
inline jule::Bool _1e8e3030d_is_console_handle(jule::Uintptr);
inline jule::Int _1e9c9a60b_get_last_process_error(void);
inline void _1e9cbbc04_exit(jule::Int);
inline jule::Str _1e9cbbc04_executable(void);
inline jule::Bool _1e8e27beb_is_std_header_path(jule::Str);
inline jule::Bool _1e8e27beb_is_valid_header_ext(jule::Str);
inline jule::Bool _1e8e27beb_is_valid_cpp_ext(jule::Str);
inline jule::Str _1e8ea7cc0_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1e8ea7cc0_arg_to_str(jule::Any);
inline jule::Int _1e8ea7cc0_find_next_fmt(jule::Str);
inline jule::Str _1e8ea7cc0_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1e902b9c0_is_top_directive(jule::Str);
inline jule::Bool _1e9c67d6a_is_windows(jule::Str);
inline jule::Bool _1e9c67d6a_is_darwin(jule::Str);
inline jule::Bool _1e9c67d6a_is_linux(jule::Str);
inline jule::Bool _1e9c67d6a_is_i386(jule::Str);
inline jule::Bool _1e9c67d6a_is_amd64(jule::Str);
inline jule::Bool _1e9c67d6a_is_arm64(jule::Str);
inline jule::Bool _1e9c67d6a_is_unix(jule::Str);
inline jule::Bool _1e9c67d6a_is_32bit(jule::Str);
inline jule::Bool _1e9c67d6a_is_64bit(jule::Str);
inline void _1e9c5edd9_exit_err(jule::Str);
inline void _1e9c5edd9_init(void);
inline jule::Int _1ea57e83a_leading_zeros64(jule::U64);
inline jule::Int _1ea57e83a_trailing_zeros(jule::Uint);
inline jule::Int _1ea57e83a_trailing_zeros32(jule::U32);
inline jule::Int _1ea57e83a_trailing_zeros64(jule::U64);
inline jule::Int _1ea57e83a_len32(jule::U32);
inline jule::Int _1ea57e83a_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _1ea57e83a_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::U64,jule::U64> _1ea57e83a_mul64(jule::U64,jule::U64);
inline jule::U32 _1ea0a58b1_f32_bits(jule::F32);
inline jule::F32 _1ea0a58b1_f32_from_bits(jule::U32);
inline jule::U64 _1ea0a58b1_f64_bits(jule::F64);
inline jule::F64 _1ea0a58b1_f64_from_bits(jule::U64);
inline jule::F64 _1ea153376_nan(void);
inline jule::Bool _1ea153376_is_nan(jule::F64);
inline jule::F64 _1ea153376_inf(jule::Int);
inline jule::Bool _1ea153376_is_inf(jule::F64,jule::Int);
inline jule::F64 _1ea20777c_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _1ea253c6d_modf(jule::F64);
inline jule::Str _1e9c59675_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _1e9c59675_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _1e9c59675_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_1e9c59675_FloatInfo&);
inline jule::Slice<jule::U8> _1e9c59675_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_1e9c59675_DecimalSlice,jule::Int,jule::U8);
inline void _1e9c59675_round_shortest(_1ea033a09_Decimal&,jule::U64,jule::Int,_1e9c59675_FloatInfo&);
inline jule::Slice<jule::U8> _1e9c59675_fmt_e(jule::Slice<jule::U8>,jule::Bool,_1e9c59675_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _1e9c59675_fmt_f(jule::Slice<jule::U8>,jule::Bool,_1e9c59675_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _1e9c59675_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_1e9c59675_FloatInfo&);
inline jule::Slice<jule::U8> _1e9c59675_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_1e9c59675_FloatInfo&);
inline jule::Int _1e9c59675_min(jule::Int,jule::Int);
inline jule::Int _1e9c59675_max(jule::Int,jule::Int);
inline jule::U8 _1e9c683ba_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _1e9c683ba_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _1e9c683ba_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _1e9c5e768_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1e9c5e768_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _1e9c4b6bc_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _1e9c4b6bc_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _1e9c4b6bc_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _1e9c4b6bc_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1e9c4b6bc_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _1e9c4b6bc_atof_hex(jule::Str,_1e9c59675_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _1e9c4b6bc_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _1e9c4b6bc_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _1e9c4b6bc_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _1e9c4b6bc_parse_float(jule::Str,jule::Int);
inline void _1e9e9b664_ryu_ftoa_fixed32(_1e9c59675_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _1e9e9b664_ryu_ftoa_fixed64(_1e9c59675_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _1e9e9b664_format_decimal(_1e9c59675_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _1e9e9b664_ryu_ftoa_shortest(_1e9c59675_DecimalSlice&,jule::U64,jule::Int,_1e9c59675_FloatInfo&);
inline jule::Int _1e9e9b664_mul_by_log2_log10(jule::Int);
inline jule::Int _1e9e9b664_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _1e9e9b664_compute_bounds(jule::U64,jule::Int,_1e9c59675_FloatInfo&);
inline void _1e9e9b664_ryu_digits(_1e9c59675_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _1e9e9b664_ryu_digits32(_1e9c59675_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _1e9e9b664_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _1e9e9b664_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _1e9e9b664_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _1e9e9b664_divmod1e9(jule::U64);
inline void _1ea033a09_trim(_1ea033a09_Decimal&);
inline void _1ea033a09_right_shift(_1ea033a09_Decimal&,jule::Uint);
inline jule::Bool _1ea033a09_prefix_is_less_than(jule::Array<jule::U8,800>,jule::Int,jule::Str);
inline void _1ea033a09_left_shift(_1ea033a09_Decimal&,jule::Uint);
inline jule::Bool _1ea033a09_should_round_up(_1ea033a09_Decimal&,jule::Int);
inline jule::Str _1e9e077ac_fmt_uint(jule::U64,jule::Int);
inline jule::Str _1e9e077ac_fmt_int(jule::I64,jule::Int);
inline jule::Str _1e9e077ac_itoa(jule::Int);
inline jule::Str _1e9e077ac_small(jule::Int);
inline jule::Bool _1e9e077ac_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1e9e077ac_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline void _1e9c5e35b_push_opt_level(jule::Int);
inline jule::Bool _1ea78a21b_is_letter(jule::I32);
inline jule::Bool _1ea84b541_is16(jule::Slice<_1ea84b541_Range16>,jule::U16);
inline jule::Bool _1ea84b541_is32(jule::Slice<_1ea84b541_Range32>,jule::U32);
inline jule::Bool _1ea84b541_is_excluding_latin(jule::Ptr<_1ea84b541_RangeTable>,jule::I32);
inline jule::Bool _1ea7465e5_is_unary_op(jule::Str);
inline jule::Bool _1ea7465e5_is_bin_op(jule::Str);
inline jule::Bool _1ea7465e5_is_str(jule::Str);
inline jule::Bool _1ea7465e5_is_raw_str(jule::Str);
inline jule::Bool _1ea7465e5_is_rune(jule::Str);
inline jule::Bool _1ea7465e5_is_bool(jule::Str);
inline jule::Bool _1ea7465e5_contains_any(jule::Str,jule::Str);
inline jule::Bool _1ea7465e5_is_float(jule::Str);
inline jule::Bool _1ea7465e5_is_num(jule::Str);
inline jule::Bool _1ea7465e5_is_ignore_ident(jule::Str);
inline jule::Bool _1ea7465e5_is_anon_ident(jule::Str);
inline jule::Bool _1ea7465e5_is_space(jule::I32);
inline jule::Bool _1ea7465e5_is_letter(jule::I32);
inline jule::Bool _1ea7465e5_is_decimal(jule::U8);
inline jule::Bool _1ea7465e5_is_binary(jule::U8);
inline jule::Bool _1ea7465e5_is_octal(jule::U8);
inline jule::Bool _1ea7465e5_is_hex(jule::U8);
inline jule::Bool _1ea7465e5_is_assign(jule::Uint);
inline jule::Bool _1ea7465e5_is_postfix_op(jule::Str);
inline jule::Bool _1ea7465e5_is_assign_op(jule::Str);
inline jule::Ptr<_1ea701c98_File> _1ea701c98_new_file_set(jule::Str);
inline _1e8ea7cc0_Log _1ea703492_make_err(jule::Int,jule::Int,jule::Ptr<_1ea701c98_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1ea703492_bytes_has_prefix(jule::Slice<jule::U8>&,jule::Str);
inline jule::Str _1ea703492_float_fmt_e(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_float_fmt_p(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_float_num(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_common_num(jule::Slice<jule::U8>&);
inline jule::Str _1ea703492_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _1ea703492_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _1ea703492_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _1ea703492_is_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _1ea703492_is_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _1ea703492_is_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _1ea703492_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _1ea703492_hex_escape(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1ea703492_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _1ea703492_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _1ea703492_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _1ea703492_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_1e8ea7cc0_Log> _1ea703492_lex(jule::Ptr<_1ea701c98_File>);
inline jule::Bool _1ea70c204_find_module_file(jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>&);
inline jule::Str _1ea70c204_find_module_file_deep(jule::Str);
inline jule::Slice<_1e8ea7cc0_Log> _1ea70c204_check_module_file(jule::Str);
inline jule::Ptr<_1ea713260_FileInfo> _1ea713260_parse_file(jule::Ptr<_1ea701c98_File>);
inline std::tuple<jule::Ptr<_1ea6ecac9_Ast>,jule::Slice<_1e8ea7cc0_Log>> _1ea713260_parse_fileset(jule::Ptr<_1ea701c98_File>);
inline jule::Ptr<_1ea6ee955_ScopeTree> _1ea722e73_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _1ea722e73_is_st(_1ea7465e5_Token,_1ea7465e5_Token);
inline jule::Bool _1ea722e73_prev_is_incomplete_expr(jule::Slice<_1ea7465e5_Token>&,jule::Int&);
inline std::tuple<jule::Int,jule::Bool> _1ea722e73_next_st_pos(jule::Slice<_1ea7465e5_Token>&,jule::Int);
inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Bool> _1ea722e73_skip_st(jule::Int&,jule::Slice<_1ea7465e5_Token>);
inline jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _1ea722e73_split_stmts(jule::Slice<_1ea7465e5_Token>&);
inline jule::Ptr<_1ea715b69_CallData> _1ea715b69_get_call_data(jule::Slice<_1ea7465e5_Token>&);
inline jule::Slice<_1ea7465e5_Token> _1ea715b69_get_block_expr(jule::Slice<_1ea7465e5_Token>&);
inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Slice<_1ea7465e5_Token>> _1ea715b69_split_colon(jule::Slice<_1ea7465e5_Token>&);
inline jule::Slice<_1ea7465e5_Token> _1ea715b69_eliminate_comments(jule::Slice<_1ea7465e5_Token>&);
inline jule::Int _1ea715b69_find_lowest_prec_op(jule::Slice<_1ea7465e5_Token>&);
inline jule::Ptr<_1ea6ee955_IdentExpr> _1ea715b69_build_ident_expr(_1ea7465e5_Token&);
inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Int> _1ea715b69_get_range_expr_tokens(jule::Slice<_1ea7465e5_Token>&);
inline jule::Bool _1eb382692_check_assign_tokens(jule::Slice<_1ea7465e5_Token>&);
inline _1e8ea7cc0_Log _1eb381c13_make_err(jule::Int,jule::Int,jule::Ptr<_1ea701c98_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_1ea7465e5_Token> _1eb381c13_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_1ea7465e5_Token>&);
inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Slice<_1ea7465e5_Token>> _1eb381c13_range_last(jule::Slice<_1ea7465e5_Token>&);
inline std::tuple<jule::Slice<jule::Slice<_1ea7465e5_Token>>,jule::Slice<_1e8ea7cc0_Log>> _1eb381c13_parts(jule::Slice<_1ea7465e5_Token>&,jule::Uint,jule::Bool);
inline jule::Str _1eb381c13_get_close_kind_of_brace(jule::Str);
inline _1e8ea7cc0_Log _1eb381c13_compiler_err(_1ea7465e5_Token&,jule::Str&,jule::Slice<jule::Any>);
inline void _1eb381c13_push_suggestion(_1e8ea7cc0_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_1ea6ee955_Comment> _1eb381c13_build_comment(_1ea7465e5_Token&);
inline jule::Str _1eb381c13_tokstoa(jule::Slice<_1ea7465e5_Token>&);
inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_build_void_type(void);
inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_build_prim_type(_1ea7465e5_Token);
inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Int> _1eb6540c3_split_map_range(jule::Slice<_1ea7465e5_Token>&,jule::Int&);
inline void _1ec3e4b65_lshift_unsig(_1ec3e4b65_Const&,_1ec3e4b65_Const&);
inline void _1ec3e4b65_rshift_unsig(_1ec3e4b65_Const&,_1ec3e4b65_Const&);
inline jule::Str _1ec3e5eda_real_kind_of(jule::Str);
inline jule::Int _1ec3e5eda_bitsize_of(jule::Str);
inline jule::Str _1ec3e5eda_int_from_bits(jule::U64);
inline jule::Str _1ec3e5eda_uint_from_bits(jule::U64);
inline jule::Str _1ec3e5eda_float_from_bits(jule::U64);
inline jule::Bool _1ec3e5eda_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _1ec3e5eda_bitsize_of_float(jule::F64);
inline jule::U64 _1ec3e5eda_bitsize_of_int(jule::I64);
inline jule::U64 _1ec3e5eda_bitsize_of_uint(jule::U64);
inline jule::F64 _1ec3e8d67_min(jule::Str);
inline jule::F64 _1ec3e8d67_max(jule::Str);
inline jule::Bool _1ec3e7717_is_i8_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_i16_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_i32_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_i64_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_u8_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_u16_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_u32_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_u64_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_f32_compatible(jule::Str);
inline jule::Bool _1ec3e7717_is_f64_compatible(jule::Str);
inline jule::Bool _1ec3e7717_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _1ec3e7717_is_i16_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_i32_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_i64_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_u16_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_u32_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_u64_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_f32_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_f64_greater(jule::Str);
inline jule::Bool _1ec3e7717_is_greater(jule::Str,jule::Str);
inline jule::Bool _1ec4784ce_is_sig_int(jule::Str);
inline jule::Bool _1ec4784ce_is_unsig_int(jule::Str);
inline jule::Bool _1ec4784ce_is_int(jule::Str);
inline jule::Bool _1ec4784ce_is_float(jule::Str);
inline jule::Bool _1ec4784ce_is_num(jule::Str);
inline jule::Bool _1ec52e1de_is_ascii(jule::I32);
inline jule::I32 _1ec52e1de_to_rune(jule::Slice<jule::U8>);
inline jule::Str _1ec52e1de_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _1ec52e1de_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _1ec52e1de_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _1ec52e1de_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Slice<jule::U8> _1ec52e1de_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Bool _1eb627195_kind_uses_generics(jule::Ptr<_1ec1c55b1_TypeKind>,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>&);
inline jule::Bool _1eb627195_parameter_uses_generics(jule::Ptr<_1eb627195_Param>&,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>&);
inline jule::Str _1eb736eec_str_repeat(jule::Str,jule::Int);
inline jule::Str _1eb736eec_build_doc(jule::Ptr<_1ea6ee955_CommentGroup>);
inline jule::Ptr<_1ec1c55b1_TypeSymbol> _1eb736eec_build_type(jule::Ptr<_1ea6ee955_TypeDecl>);
inline jule::Ptr<_1ebcce31e_Value> _1eb736eec_build_expr(jule::Ptr<_1ea6ee955_Expr>);
inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb736eec_build_type_alias(jule::Ptr<_1ea6ee955_TypeAliasDecl>);
inline jule::Ptr<_1eb29bdd6_Field> _1eb736eec_build_field(jule::Ptr<_1ea6ee955_FieldDecl>);
inline jule::Slice<jule::Ptr<_1eb29bdd6_Field>> _1eb736eec_build_fields(jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>>&);
inline jule::Ptr<_1eb29bdd6_Struct> _1eb736eec_build_struct(jule::Ptr<_1ea6ee955_StructDecl>);
inline jule::Ptr<_1eb627195_Param> _1eb736eec_build_param(jule::Ptr<_1ea6ee955_ParamDecl>);
inline jule::Slice<jule::Ptr<_1eb627195_Param>> _1eb736eec_build_params(jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>>&);
inline jule::Ptr<_1eb627195_RetType> _1eb736eec_build_ret_type(jule::Ptr<_1ea6ee955_RetTypeDecl>);
inline jule::Ptr<_1eb627195_Fn> _1eb736eec_build_fn(jule::Ptr<_1ea6ee955_FnDecl>);
inline jule::Slice<jule::Ptr<_1eb627195_Fn>> _1eb736eec_build_methods(jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>>&);
inline jule::Ptr<_1eb7c68e9_Trait> _1eb736eec_build_trait(jule::Ptr<_1ea6ee955_TraitDecl>);
inline jule::Ptr<_1eb7c7e7d_EnumItem> _1eb736eec_build_enum_item(jule::Ptr<_1ea6ee955_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>> _1eb736eec_build_enum_items(jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>>&);
inline jule::Ptr<_1eb7c7e7d_Enum> _1eb736eec_build_enum(jule::Ptr<_1ea6ee955_EnumDecl>);
inline jule::Ptr<_1eba533d4_Var> _1eb736eec_build_var(jule::Ptr<_1ea6ee955_VarDecl>);
inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1eb736eec_build_vars(jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>>);
inline jule::Ptr<_1eb7d363c_Impl> _1eb736eec_build_impl(jule::Ptr<_1ea6ee955_Impl>);
inline jule::Ptr<_1eb7d5892_ScopeChecker> _1eb7d5892_new_scope_checker_base(jule::Ptr<_1eb9ed0d7_Sema>&,jule::Ptr<_1eb627195_FnIns>);
inline jule::Ptr<_1eb7d5892_ScopeChecker> _1eb7d5892_new_scope_checker(jule::Ptr<_1eb9ed0d7_Sema>&,jule::Ptr<_1eb627195_FnIns>);
inline jule::Ptr<_1eb7d5892_ScopeLabel> _1eb7d5892_find_label_parent(jule::Str,jule::Ptr<_1eb7d5892_ScopeChecker>);
inline jule::Bool _1eb7d5892_stmt_is_goto_scope(jule::Any&,jule::Ptr<_1eb7d5892_Scope>&);
inline jule::Int _1eb7d5892_count_match_type(jule::Ptr<_1eb7d5892_Match>&,jule::Ptr<_1ec1c55b1_TypeKind>&);
inline jule::Slice<jule::Ptr<_1ebcce31e_Data>> _1eb7d5892_get_datas_from_tuple_data(jule::Ptr<_1ebcce31e_Data>&);
inline jule::Slice<jule::Any> _1eb7d5892_get_expr_models(jule::Any&);
inline jule::Bool _1eb7d5892_check_mut(jule::Ptr<_1eb9ed0d7_Sema>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);
inline jule::Bool _1eb7d5892_check_assign(jule::Ptr<_1eb9ed0d7_Sema>&,jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1ebcce31e_Data>,_1ea7465e5_Token);
inline jule::Bool _1eb7d5892_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _1eb7d5892_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _1eb7d5892_st_is_def(jule::Any&);
inline jule::Ptr<_1eba533d4_Var> _1eb7d8048_find_var_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb7d8048_find_type_alias_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1eb29bdd6_Struct> _1eb7d8048_find_struct_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1eb627195_Fn> _1eb7d8048_find_fn_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1eb7c68e9_Trait> _1eb7d8048_find_trait_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Str);
inline jule::Ptr<_1eb7c7e7d_Enum> _1eb7d8048_find_enum_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Str);
inline jule::Bool _1eb7d8048_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1eb9ed0d7_is_valid_model_for_ref(jule::Any);
inline _1e8ea7cc0_Log _1eb9ed0d7_compiler_err(_1ea7465e5_Token&,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1eb9ed0d7_imp_is_lookupable(jule::Ptr<_1eb7d8048_ImportInfo>&,jule::Str);
inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1eb9ed0d7_build_ret_vars(jule::Ptr<_1eb627195_FnIns>&);
inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1eb9ed0d7_build_param_vars(jule::Ptr<_1eb627195_FnIns>&);
inline jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _1eb9ed0d7_build_generic_type_aliases(jule::Ptr<_1eb627195_FnIns>&);
inline jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_find_file(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>&,jule::Ptr<_1ea701c98_File>&);
inline std::tuple<jule::Bool,jule::Bool> _1eb9ed0d7_conditional_has_ret(jule::Ptr<_1eb7d5892_Conditional>);
inline jule::Bool _1eb9ed0d7_match_has_ret(jule::Ptr<_1eb7d5892_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _1eb9ed0d7___has_ret(jule::Ptr<_1eb7d5892_Scope>);
inline jule::Bool _1eb9ed0d7_has_ret(jule::Ptr<_1eb7d5892_Scope>);
inline void _1eb9ed0d7_push_suggestion(_1e8ea7cc0_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _1eba534e4_get_result_types(jule::Ptr<_1ec1c55b1_TypeKind>&);
inline jule::Bool _1eba534e4_trait_has_reference_receiver(jule::Ptr<_1eb7c68e9_Trait>&);
inline jule::Bool _1eba534e4_float_assignable(jule::Str,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Bool _1eba534e4_sig_assignable(jule::Str,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Bool _1eba534e4_unsig_assignable(jule::Str,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Bool _1eba534e4_int_assignable(jule::Str,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ea6ee955_Directive> _1ebcce31e_find_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>&,jule::Str);
inline jule::Any _1ebcce31e_find_builtins_import(jule::Str,jule::Ptr<_1eb7d8048_ImportInfo>);
inline void _1ebcce31e_make_struct_lit_alloc(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1eb7ccdea_StructLitExprModel>&);
inline jule::Ptr<_1eba533d4_Var> _1ebcce31e_build_error_var(jule::Ptr<_1eb7d5892_Scope>&,jule::Ptr<_1ea6ee955_FnCallExpr>&);
inline jule::Any _1ebcce31e_find_builtins_sema(jule::Str,jule::Ptr<_1eb9ed0d7_Sema>);
inline jule::Bool _1ebcce31e_is_ok_for_shifting(jule::Ptr<_1ebcce31e_Data>&);
inline jule::Bool _1ebcce31e_is_instanced_struct(jule::Ptr<_1eb29bdd6_StructIns>);
inline jule::Bool _1ebcce31e_is_ptr_arithmetic_compatible_int(jule::Ptr<_1ebcce31e_Data>&);
inline void _1ebcce31e_normalize_bitsize(jule::Ptr<_1ebcce31e_Data>&);
inline void _1ebcce31e_normalize_type(jule::Ptr<_1ebcce31e_Data>&);
inline void _1ebcce31e_apply_cast_kind_model(jule::Ptr<_1ebcce31e_Data>&);
inline void _1ebcce31e_apply_cast_kind(jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_build_void_data(void);
inline jule::Str _1ebcce31e_kind_by_bitsize(jule::Any);
inline jule::Str _1ebcce31e_check_data_for_integer_indexing(jule::Ptr<_1ebcce31e_Data>&);
inline jule::Bool _1ec1c55b1_has_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>&,jule::Str);
inline jule::Bool _1ec1c55b1_can_get_ptr(jule::Ptr<_1ebcce31e_Data>&);
inline jule::Bool _1ec1c55b1_is_valid_for_sptr_type(jule::Ptr<_1ec1c55b1_TypeKind>&);
inline jule::Bool _1ec1c55b1_is_valid_for_ref(jule::Ptr<_1ec1c55b1_TypeKind>&);
inline jule::Bool _1ec1c55b1_is_builtin_str_convertable(jule::Ptr<_1ec1c55b1_TypeKind>&);
inline jule::Str _1ec1c55b1_build_link_path_by_tokens(jule::Slice<_1ea7465e5_Token>&);
inline jule::Ptr<_1ec1c55b1_Prim> _1ec1c55b1_build_prim_type(jule::Str);
inline jule::Ptr<_1eb29bdd6_Struct> _1ec1c55b1_get_struct_from_kind(jule::Ptr<_1ec1c55b1_TypeKind>);
inline jule::Bool _1ec1c55b1_is_prim(jule::Str);
inline std::tuple<jule::Ptr<_1ebcb6081_SymbolTable>,jule::Slice<_1e8ea7cc0_Log>> _1ebd050c0_build_symbols(jule::Ptr<_1ea6ecac9_Ast>&,jule::Trait<_1eb7d8048_Importer>&,jule::Ptr<_1eb736eec_SymbolBuilder>);
inline std::tuple<jule::Ptr<_1eb7d8048_Package>,jule::Slice<_1e8ea7cc0_Log>> _1ebd050c0___analyze_package(jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>&,jule::Trait<_1eb7d8048_Importer>&,jule::Int&);
inline std::tuple<jule::Ptr<_1eb7d8048_Package>,jule::Slice<_1e8ea7cc0_Log>> _1ebd050c0_analyze_package(jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>,jule::Trait<_1eb7d8048_Importer>,jule::Int);
inline jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)> _1ec2ee113_find_builtin_caller(jule::U8);
inline jule::Ptr<_1eb627195_FnIns> _1ec2ee113_find_builtin_fn(jule::Str);
inline jule::Ptr<_1ec1c55b1_TypeAlias> _1ec2ee113_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_1eb7c68e9_Trait> _1ec2ee113_find_builtin_trait(jule::Str);
inline jule::Any _1ec2ee113_find_builtin_def(jule::Str);
inline jule::Any _1ec2ee113_find_builtin_def_std_debug(jule::Str);
inline jule::Any _1ec2ee113_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1ec2ee113_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _1ec2ee113_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_common_plain(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_common(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_common_mut(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_error(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_out(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_outln(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_new(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_panic(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_make(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_append(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_copy(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_clone(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_assert(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_mem_size_of(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_mem_align_of(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_jule_integrated_inline(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_debug_out(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_debug_outln(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _1ea6918d6_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _1ea6918d6_check_arch(jule::Str);
inline jule::Bool _1ea6918d6_is_pass_file_annotation(jule::Str);
inline void _1ea6bb812_set_os_flags(void);
inline void _1ea6bb812_set_arch_flags(void);
inline void _1ea6bb812_init_flags(void);
inline void _1ea6cd59e_exit_err(jule::Str);
inline jule::Slice<jule::U8> _1ea6cd59e_read_buff(jule::Str);
inline _1e8ea7cc0_Log _1ea6cd59e_flat_compiler_err(jule::Str);
inline std::tuple<jule::Bool,jule::Slice<_1e8ea7cc0_Log>> _1ea6cd59e_is_pass_build_directives(jule::Ptr<_1ea6ecac9_Ast>&);
inline void _1ea66c0ed_push_passes(jule::Ptr<_1eb7d8048_Package>&,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _1ea66c0ed_get_all_unique_passes(jule::Ptr<_1eb7d8048_Package>&,jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>>);
inline jule::Bool _1e9c6e03b_is_exist(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _1e9c6e03b_is_dead(jule::Any);
inline void _1e9c6e03b_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _1e9c6e03b_is_all_references_are_dead(jule::Ptr<_1eb736eec_ReferenceStack>);
inline jule::Bool _1e9c6e03b_is_fn_dead(jule::Ptr<_1eb627195_FnIns>);
inline jule::Bool _1e9c6e03b_is_var_dead(jule::Ptr<_1eba533d4_Var>);
inline jule::Bool _1e9c6e03b_is_struct_dead(jule::Ptr<_1eb29bdd6_StructIns>);
inline jule::Bool _1e9c6e03b_is_trait_dead(jule::Ptr<_1eb7c68e9_Trait>);
inline void _1e9c6e03b_eliminate_dead_functions(jule::Slice<jule::Ptr<_1eb627195_Fn>>&);
inline void _1e9c6e03b_eliminate_dead_globals(jule::Ptr<_1eb7d8048_Package>&);
inline void _1e9c6e03b_eliminate_dead_functions_package(jule::Ptr<_1eb7d8048_Package>&);
inline void _1e9c6e03b_catch_alive_init(jule::Ptr<_1eb7d8048_Package>&);
inline void _1e9c6e03b_eliminate_package(jule::Ptr<_1eb7d8048_Package>&);
inline void _1e9c6e03b_eliminate(jule::Ptr<_1ea66c0ed_IR>&);
inline void _1ea65d034_eliminate_dead_code_of_scope(jule::Ptr<_1eb7d5892_Scope>);
inline jule::U64 _1d059016d_unix(void);
inline jule::U64 _1d059016d_unix_year_to_seconds(jule::Uint,jule::Bool&);
inline jule::U64 _1d059016d_unix_month_to_seconds(jule::Uint,jule::Bool);
inline jule::Bool _1e9c80d3e_iter_expr_is_copy_optimizable(jule::Ptr<_1ebcce31e_Data>&,jule::Ptr<_1eba533d4_Var>&);
inline jule::Str _1e9c80d3e_gen_range_index_iter(jule::Ptr<_1eb7d5892_RangeIter>&);
inline jule::Str _1e9c80d3e_gen_range_hashmap_iter(jule::Ptr<_1eb7d5892_RangeIter>&);
inline jule::Str _1e9c80d3e_gen_if(jule::Ptr<_1eb7d5892_If>);
inline jule::Str _1e9c80d3e_gen_conditional(jule::Ptr<_1eb7d5892_Conditional>);
inline jule::Str _1e9c80d3e_gen_inf_iter(jule::Ptr<_1eb7d5892_InfIter>);
inline jule::Str _1e9c80d3e_gen_while_iter(jule::Ptr<_1eb7d5892_WhileIter>);
inline jule::Str _1e9c80d3e_gen_range_iter(jule::Ptr<_1eb7d5892_RangeIter>);
inline jule::Str _1e9c80d3e_gen_cont(jule::Ptr<_1eb7d5892_ContSt>);
inline jule::Str _1e9c80d3e_gen_label(jule::Ptr<_1eb7d5892_Label>);
inline jule::Str _1e9c80d3e_gen_goto(jule::Ptr<_1eb7d5892_GotoSt>);
inline jule::Str _1e9c80d3e_gen_postfix(jule::Ptr<_1eb7d5892_Postfix>);
inline jule::Str _1e9c80d3e_gen_div_by_zero_assign(jule::Ptr<_1eb7d5892_Assign>);
inline jule::Str _1e9c80d3e_gen_assign(jule::Ptr<_1eb7d5892_Assign>);
inline jule::Str _1e9c80d3e_gen_multi_assign(jule::Ptr<_1eb7d5892_MultiAssign>);
inline jule::Str _1e9c80d3e_get_case_match_expr(jule::Ptr<_1eb7d5892_Match>&);
inline jule::Str _1e9c80d3e_gen_case(jule::Ptr<_1eb7d5892_Match>,jule::Ptr<_1eb7d5892_Case>);
inline jule::Str _1e9c80d3e_gen_match(jule::Ptr<_1eb7d5892_Match>);
inline jule::Str _1e9c80d3e_gen_fall_st(jule::Ptr<_1eb7d5892_FallSt>);
inline jule::Str _1e9c80d3e_gen_break_st(jule::Ptr<_1eb7d5892_BreakSt>);
inline jule::Str _1e9c80d3e_gen_ret_vars(jule::Ptr<_1eb7d5892_RetSt>);
inline jule::Str _1e9c80d3e_gen_ret_expr_tuple(jule::Ptr<_1eb7d5892_RetSt>);
inline jule::Str _1e9c80d3e_gen_ret_expr(jule::Ptr<_1eb7d5892_RetSt>);
inline jule::Str _1e9c80d3e_gen_ret_st(jule::Ptr<_1eb7d5892_RetSt>);
inline jule::Str _1e9c80d3e_gen_data_expr(jule::Ptr<_1ebcce31e_Data>);
inline jule::Str _1e9c80d3e_gen_scope_var(jule::Ptr<_1eba533d4_Var>);
inline jule::Str _1e9c80d3e_gen_st(jule::Any);
inline jule::Str _1e9c80d3e_gen_scope(jule::Ptr<_1eb7d5892_Scope>);
inline jule::Str _1e9c80d3e_gen_fn_scope(jule::Ptr<_1eb627195_FnIns>);
inline jule::Str _1e9c80d3e_gen_method_scope(jule::Ptr<_1eb627195_FnIns>);
inline jule::Str _1eb8b628b_concat_all_parts(jule::Slice<_1ea7465e5_Token>);
inline jule::Str _1eb8b628b_get_accessor(jule::Ptr<_1ec1c55b1_TypeKind>&);
inline jule::Str _1eb8b628b_decompose_common_esq(jule::U8);
inline jule::Str _1eb8b628b_sbtoa(jule::U8);
inline jule::Str _1eb8b628b_get_cstr_model(jule::Slice<jule::U8>);
inline jule::Str _1eb8b628b_get_str_model(jule::Ptr<_1ec3e4b65_Const>&);
inline jule::Str _1eb8b628b_get_bool_model(jule::Ptr<_1ec3e4b65_Const>&);
inline jule::Str _1eb8b628b_get_nil_model(void);
inline jule::Str _1eb8b628b_gen_float_special_cases(jule::F64&);
inline jule::Str _1eb8b628b_ftoa(jule::F64,jule::Int);
inline jule::Str _1eb8b628b_get_f32_model(jule::Ptr<_1ec3e4b65_Const>&);
inline jule::Str _1eb8b628b_get_f64_model(jule::Ptr<_1ec3e4b65_Const>&);
inline jule::Str _1eb8b628b_get_float_model(jule::Ptr<_1ebcce31e_Data>&);
inline jule::Str _1eb8b628b_i64toa(jule::I64);
inline jule::Str _1eb8b628b_get_i64_model(jule::Ptr<_1ec3e4b65_Const>&);
inline jule::Str _1eb8b628b_u64toa(jule::U64);
inline jule::Str _1eb8b628b_get_u64_model(jule::Ptr<_1ec3e4b65_Const>);
inline jule::Str _1eb8b628b_gen_const_expr(jule::Ptr<_1ebcce31e_Data>);
inline jule::Str _1eb8b628b_gen_const_expr_model(jule::Ptr<_1ec3e4b65_Const>);
inline jule::Str _1eb8b628b_gen_div_by_zero_binop_expr_model(jule::Str,jule::Any,jule::Any);
inline jule::Str _1eb8b628b_gen_binop_expr_model(jule::Ptr<_1eb7ccdea_BinopExprModel>);
inline jule::Str _1eb8b628b_gen_var_expr_model(jule::Ptr<_1eba533d4_Var>);
inline jule::Str _1eb8b628b_gen_struct_expr_model(jule::Ptr<_1eb29bdd6_Struct>);
inline jule::Str _1eb8b628b_gen_struct_ins_expr_model(jule::Ptr<_1eb29bdd6_StructIns>);
inline jule::Str _1eb8b628b_gen_unary_expr_model(jule::Ptr<_1eb7ccdea_UnaryExprModel>);
inline jule::Str _1eb8b628b_gen_cpp_struct_lit_expr_model(jule::Ptr<_1eb7ccdea_StructLitExprModel>);
inline jule::Str _1eb8b628b_gen_struct_lit_expr_model(jule::Ptr<_1eb7ccdea_StructLitExprModel>);
inline jule::Str _1eb8b628b_gen_alloc_struct_lit_expr_model(jule::Ptr<_1eb7ccdea_AllocStructLitExprModel>);
inline jule::Str _1eb8b628b_gen_casting_expr_model(jule::Ptr<_1eb7ccdea_CastingExprModel>);
inline jule::Str _1eb8b628b_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _1eb8b628b_gen_expr_model_for_call(jule::Any);
inline jule::Str _1eb8b628b_gen_pure_fn_call_expr_model(jule::Ptr<_1eb7ccdea_FnCallExprModel>&);
inline jule::Bool _1eb8b628b_is_forwarded(jule::Ptr<_1eb7d5892_Scope>&);
inline jule::Bool _1eb8b628b_is_std_package(jule::Str,jule::Str);
inline jule::Str _1eb8b628b_gen_fn_call_expr_model(jule::Ptr<_1eb7ccdea_FnCallExprModel>);
inline jule::Str _1eb8b628b_gen_slice_expr_model(jule::Ptr<_1eb7ccdea_SliceExprModel>);
inline jule::Str _1eb8b628b_gen_indexing_expr_model(jule::Ptr<_1eb7ccdea_IndexigExprModel>);
inline jule::Str _1eb8b628b_gen_anon_fn_expr_model(jule::Ptr<_1eb7ccdea_AnonFnExprModel>);
inline jule::Str _1eb8b628b_gen_map_expr_model(jule::Ptr<_1eb7ccdea_MapExprModel>);
inline jule::Str _1eb8b628b_gen_slicing_expr_model(jule::Ptr<_1eb7ccdea_SlicingExprModel>);
inline jule::Str _1eb8b628b_gen_trait_sub_ident_expr_model(jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>);
inline jule::Str _1eb8b628b_gen_struct_sub_ident_expr_model(jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>);
inline jule::Str _1eb8b628b_gen_common_ident_expr_model(jule::Ptr<_1eb7ccdea_CommonIdentExprModel>);
inline jule::Str _1eb8b628b_gen_common_sub_ident_expr_model(jule::Ptr<_1eb7ccdea_CommonSubIdentExprModel>);
inline jule::Str _1eb8b628b_gen_array_expr_model(jule::Ptr<_1eb7ccdea_ArrayExprModel>);
inline jule::Str _1eb8b628b_gen_fn_ins_expr_model_common(jule::Ptr<_1eb627195_FnIns>);
inline jule::Str _1eb8b628b_gen_fn_ins_expr_model(jule::Ptr<_1eb627195_FnIns>);
inline jule::Str _1eb8b628b_gen_tuple_expr_model(jule::Ptr<_1eb7ccdea_TupleExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_new_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinNewCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_out_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_outln_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinOutlnCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_panic_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_assert_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinAssertCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_error_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_make_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinMakeCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_append_call_expr_model_assign_opt(jule::Bool,jule::Str&,jule::Ptr<_1ec1c55b1_TypeKind>&,jule::Ptr<_1eb7ccdea_SliceExprModel>&,jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>&);
inline std::tuple<jule::Str,jule::Bool> _1eb8b628b_gen_builtin_append_call_expr_model_assign(jule::Any,jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_append_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>);
inline jule::Str _1eb8b628b_gen_builtin_clone_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinCloneCallExprModel>);
inline jule::Str _1eb8b628b_gen_sizeof_expr_model(jule::Ptr<_1eb7ccdea_SizeofExprModel>);
inline jule::Str _1eb8b628b_gen_alignof_expr_model(jule::Ptr<_1eb7ccdea_AlignofExprModel>);
inline jule::Str _1eb8b628b_gen_rune_expr_model(jule::Ptr<_1eb7ccdea_RuneExprModel>);
inline jule::Str _1eb8b628b_gen_struct_static_ident_expr_model(jule::Ptr<_1eb7ccdea_StructStaticIdentExprModel>);
inline jule::Str _1eb8b628b_gen_integrated_to_str_expr_model(jule::Ptr<_1eb7ccdea_IntegratedToStrExprModel>);
inline jule::Str _1eb8b628b_gen_ternary_expr_model(jule::Ptr<_1eb7ccdea_TernaryExprModel>);
inline jule::Str _1eb8b628b_gen_backend_emit_expr_model(jule::Ptr<_1eb7ccdea_BackendEmitExprModel>);
inline jule::Str _1eb8b628b_gen_expr_model(jule::Any);
inline jule::Str _1eb8b628b_gen_expr(jule::Any);
inline jule::Str _1eb8b628b_gen_val(jule::Ptr<_1ebcce31e_Value>);
inline jule::Str _1eb8b628b_get_init_expr(jule::Ptr<_1ec1c55b1_TypeKind>);
inline jule::Str _1ec7bdeea_get_derive_fn_decl_clone(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec7bdeea_get_derive_fn_def_clone(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec7be58e_as_ident(jule::Str);
inline jule::Str _1ec7be58e_as_jt(jule::Str);
inline jule::Str _1ec7be58e_get_addr_as_ident(jule::Uintptr);
inline jule::Str _1ec7be58e_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _1ec7be58e_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _1ec7be58e_fn_out_ident(jule::Ptr<_1eb627195_Fn>&);
inline jule::Str _1ec7be58e_fn_ins_out_ident(jule::Ptr<_1eb627195_FnIns>&);
inline jule::Str _1ec7be58e_trait_out_ident(jule::Ptr<_1eb7c68e9_Trait>);
inline jule::Str _1ec7be58e_param_out_ident(jule::Ptr<_1eb627195_Param>&);
inline jule::Str _1ec7be58e_struct_out_ident(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec7be58e_struct_ins_out_ident(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec7be58e_field_out_ident(jule::Ptr<_1eb29bdd6_Field>&);
inline jule::Str _1ec7be58e_var_out_ident(jule::Ptr<_1eba533d4_Var>);
inline jule::Str _1ec7be58e_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _1ec7be58e_iter_end_label_ident(jule::Uintptr);
inline jule::Str _1ec7be58e_iter_next_label_ident(jule::Uintptr);
inline jule::Str _1ec7be58e_label_ident(jule::Str);
inline jule::Str _1ec7be58e_match_end_label_ident(jule::Uintptr);
inline jule::Str _1ec7be58e_case_begin_label_ident(jule::Uintptr);
inline jule::Ptr<_1ea6ee955_Directive> _1ec7e92ab_find_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>&,jule::Str);
inline jule::Bool _1ec7e92ab_has_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>&,jule::Str);
inline jule::Str _1ec7e92ab_gen_prim_kind(jule::Ptr<_1ec1c55b1_Prim>);
inline jule::Str _1ec7e92ab_gen_tuple_kind(jule::Ptr<_1ec1c55b1_Tuple>);
inline jule::Str _1ec7e92ab_as_sptr_kind(jule::Str);
inline jule::Str _1ec7e92ab_gen_sptr_kind(jule::Ptr<_1ec1c55b1_Sptr>);
inline jule::Str _1ec7e92ab_gen_ptr_kind(jule::Ptr<_1ec1c55b1_Ptr>);
inline jule::Str _1ec7e92ab_gen_enum_kind(jule::Ptr<_1eb7c7e7d_Enum>);
inline jule::Str _1ec7e92ab_as_slice_kind(jule::Ptr<_1ec1c55b1_TypeKind>);
inline jule::Str _1ec7e92ab_gen_slice_kind(jule::Ptr<_1ec1c55b1_Slc>);
inline jule::Str _1ec7e92ab_gen_map_kind(jule::Ptr<_1ec1c55b1_Map>);
inline jule::Str _1ec7e92ab_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _1ec7e92ab_gen_trait_kind(jule::Ptr<_1eb7c68e9_Trait>);
inline jule::Str _1ec7e92ab_gen_struct_kind(jule::Ptr<_1eb29bdd6_Struct>);
inline jule::Str _1ec7e92ab_gen_struct_kind_ins(jule::Ptr<_1eb29bdd6_StructIns>);
inline jule::Str _1ec7e92ab_gen_array_kind(jule::Ptr<_1ec1c55b1_Arr>);
inline jule::Str _1ec7e92ab_gen_fn_anon_decl(jule::Ptr<_1eb627195_FnIns>);
inline jule::Str _1ec7e92ab_gen_fn_kind(jule::Ptr<_1eb627195_FnIns>);
inline jule::Str _1ec7e92ab_gen_type_kind(jule::Ptr<_1ec1c55b1_TypeKind>);
inline void _1ec821b85_add_indent(void);
inline void _1ec821b85_done_indent(void);
inline jule::Str _1ec821b85_indent(void);
inline jule::Bool _1ec821b85_is_cpp_header_file(jule::Str);
inline jule::Str _1ec821b85_gen_links(jule::Ptr<_1ea66c0ed_IR>&);
inline jule::Str _1ec821b85_gen_fn_result(jule::Ptr<_1eb627195_Fn>&);
inline jule::Str _1ec821b85_gen_fn_ins_result(jule::Ptr<_1eb627195_FnIns>&);
inline jule::Str _1ec821b85_gen_param_prototype(jule::Ptr<_1eb627195_Param>&);
inline jule::Str _1ec821b85_gen_param_ins(jule::Ptr<_1eb627195_ParamIns>&);
inline jule::Str _1ec821b85_gen_param_ins_prototype(jule::Ptr<_1eb627195_ParamIns>&);
inline jule::Str _1ec821b85_gen_param(jule::Ptr<_1eb627195_Param>&);
inline jule::Str _1ec821b85_gen_params(jule::Slice<jule::Ptr<_1eb627195_Param>>&);
inline jule::Str _1ec821b85_gen_params_ins(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>&);
inline jule::Str _1ec821b85_gen_params_prototypes(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>&);
inline jule::Str _1ec821b85_gen_trait(jule::Ptr<_1eb7c68e9_Trait>&);
inline jule::Str _1ec821b85_gen_traits_tbl(jule::Ptr<_1ebcb6081_SymbolTable>&);
inline jule::Str _1ec821b85_gen_traits_pkg(jule::Ptr<_1eb7d8048_Package>&);
inline jule::Str _1ec821b85_gen_traits(jule::Ptr<_1ea66c0ed_IR>&);
inline jule::Str _1ec821b85_gen_trait_prototype(jule::Ptr<_1eb7c68e9_Trait>&);
inline jule::Str _1ec821b85_gen_trait_prototypes(jule::Ptr<_1eb7d8048_Package>&);
inline jule::Str _1ec821b85_gen_struct_plain_prototype(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec821b85_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&);
inline jule::Str _1ec821b85_gen_struct_traits(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec821b85_gen_field_decl(jule::Ptr<_1eb29bdd6_FieldIns>&);
inline jule::Str _1ec821b85_gen_struct_self_field_type_kind(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_self_field(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_self_field_init_st(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_constructor(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_destructor(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_operators(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_derive_defs_prototypes(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_ins_prototype(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_prototype(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec821b85_gen_struct_prototypes(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&);
inline jule::Str _1ec821b85_gen_fn_decl_head(jule::Ptr<_1eb627195_FnIns>&,jule::Bool);
inline jule::Str _1ec821b85_gen_fn_prototype(jule::Ptr<_1eb627195_Fn>&,jule::Bool);
inline jule::Str _1ec821b85_gen_fn_prototypes(jule::Ptr<_1eb7d8048_Package>&);
inline jule::Str _1ec821b85_gen_prototypes(jule::Ptr<_1ea66c0ed_IR>&);
inline jule::Str _1ec821b85_gen_var_init_expr(jule::Ptr<_1eba533d4_Var>&,jule::Str);
inline jule::Str _1ec821b85_gen_var(jule::Ptr<_1eba533d4_Var>);
inline jule::Str _1ec821b85_gen_globals(jule::Slice<jule::Ptr<_1eba533d4_Var>>&);
inline jule::Str _1ec821b85_gen_fn(jule::Ptr<_1eb627195_Fn>&);
inline jule::Str _1ec821b85_gen_pkg_fns(jule::Ptr<_1eb7d8048_Package>&);
inline jule::Str _1ec821b85_gen_struct_method_defs(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_ostream(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_derive_defs(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct_ins(jule::Ptr<_1eb29bdd6_StructIns>&);
inline jule::Str _1ec821b85_gen_struct(jule::Ptr<_1eb29bdd6_Struct>&);
inline jule::Str _1ec821b85_gen_structs(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>&);
inline jule::Str _1ec821b85_gen_fns(jule::Ptr<_1ea66c0ed_IR>&);
inline void _1ec821b85_push_init(jule::Ptr<_1eb7d8048_Package>&,jule::Str&);
inline jule::Str _1ec821b85_gen_init_caller(jule::Ptr<_1ea66c0ed_IR>&);
inline jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_find_testing_package(jule::Ptr<_1ea66c0ed_IR>&);
inline void _1ec821b85_append_test(jule::Str&,jule::Ptr<_1eb627195_FnIns>);
inline void _1ec821b85_append_package_tests(jule::Str&,jule::Ptr<_1eb7d8048_Package>&);
inline void _1ec821b85_append_test_point(jule::Str&,jule::Ptr<_1ea66c0ed_IR>&);
inline void _1ec821b85_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _1ec821b85_gen(jule::Ptr<_1ea66c0ed_IR>&);
inline jule::Str _1e8d6c657_str_repeat(jule::Str,jule::Int);
inline void _1e8d6c657_print_error_message(jule::Str);
inline void _1e8d6c657_help(jule::Slice<jule::Str>&);
inline void _1e8d6c657_version(jule::Slice<jule::Str>&);
inline void _1e8d6c657_tool_distos(void);
inline void _1e8d6c657_tool_distarch(void);
inline void _1e8d6c657_tool(jule::Slice<jule::Str>&);
inline void _1e8d6c657_julenv(jule::Slice<jule::Str>&);
inline void _1e8d6c657_mod(jule::Slice<jule::Str>&);
inline jule::Bool _1e8d6c657_process_command(jule::Slice<jule::Str>&);
inline void _1e8d6c657_exit_err(jule::Str);
void entry_point(void);
inline void _1e8d6ce1b___init_common(void);
inline void _1e8da33d5___enable_vtp(void);
inline void _1e8da33d5_init(void);
inline void _1e8da9078_write_output(jule::Str,jule::Str);
inline void _1e8da9078_clear_objects(void);
inline void _1e8da9078_compile_ir(jule::Str,jule::Str);
inline void _1e8da9078_do_spell(jule::Str,jule::Str,jule::Str);
inline jule::Bool _1e8da9078_is_cpp_source_file(jule::Str);
inline void _1e8da9078_push_comp_cmd_clang(jule::Str&);
inline void _1e8da9078_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _1e8da9078_gen_compile_cmd(jule::Str,jule::Ptr<_1ea66c0ed_IR>&);
inline jule::Str _1e8da9078_get_compile_path(void);
inline void _1e8da9078_apply_target_independent_optimizations(jule::Ptr<_1ea66c0ed_IR>&);
inline void _1e8da9078_check_compiler_flag(void);
inline void _1e8da9078_check_target_arch(jule::Str);
inline void _1e8da9078_check_target_os(jule::Str);
inline void _1e8da9078_check_target_flag(jule::Str&);
inline void _1e8da9078_check_opt_flag(jule::Str&);
inline jule::Slice<jule::Str> _1e8da9078_check_flags(jule::Slice<jule::Str>&);
inline void _1e8da9078_setup_sema_flags(jule::Int&);
inline jule::Ptr<_1ea66c0ed_IR> _1e8da9078_build_ir(jule::Slice<jule::Str>&);
inline void _1e8da9078_compile_command(jule::Slice<jule::Str>&);


static jule::Str _1e8da9078_COMPILER = jule::Str();
static jule::Str _1e8da9078_COMPILER_PATH = jule::Str();
static jule::Str _1e8da9078_OUT_DIR = jule::Str("dist", 4);
static jule::Str _1e8da9078_OUT_NAME = jule::Str("ir.cpp", 6);
static jule::Str _1e8da9078_OUT = jule::Str();
static jule::Str _1e8da9078_CPP_STD = jule::Str("c++17", 5);
static jule::Bool _1e8da9078_SHADOWING = false;
static jule::Bool _1e8da9078_TRANSPILATION = false;
static jule::Array<jule::Str,4> _1e8e27beb_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
static jule::Array<jule::Str,3> _1e8e27beb_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
static jule::Array<jule::Str,1> _1e8e27beb_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
static jule::Array<jule::Str,3> _1e9c67d6a_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
static jule::Array<jule::Str,3> _1e9c67d6a_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
static jule::Str _1e9c5edd9_PATH_STDLIB = jule::Str();
static jule::Str _1e9c5edd9_PATH_EXEC = jule::Str();
static jule::Str _1e9c5edd9_PATH_WD = jule::Str();
static jule::Str _1e9c5edd9_PATH_API = jule::Str();
static jule::Array<jule::U8,32> _1ea57e83a_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
static jule::Array<jule::U8,64> _1ea57e83a_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
static _1e9c59675_FloatInfo _1e9c59675_F32_INFO = _1e9c59675_FloatInfo(23LLU,8LLU,-127LL);
static _1e9c59675_FloatInfo _1e9c59675_F64_INFO = _1e9c59675_FloatInfo(52LLU,11LLU,-1023LL);
static jule::Array<jule::Array<jule::U64,2>,696> _1e9c5e768_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
static jule::Slice<jule::Int> _1e9c4b6bc_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
static jule::Slice<jule::F64> _1e9c4b6bc_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
static jule::Slice<jule::F32> _1e9c4b6bc_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
static jule::Array<jule::U64,20> _1e9e9b664_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
static jule::Slice<_1ea033a09_LeftCheat> _1ea033a09_LEFTCHEATS = jule::Slice<_1ea033a09_LeftCheat>({_1ea033a09_LeftCheat(0LL,jule::Str()),_1ea033a09_LeftCheat(1LL,jule::Str("5", 1)),_1ea033a09_LeftCheat(1LL,jule::Str("25", 2)),_1ea033a09_LeftCheat(1LL,jule::Str("125", 3)),_1ea033a09_LeftCheat(2LL,jule::Str("625", 3)),_1ea033a09_LeftCheat(2LL,jule::Str("3125", 4)),_1ea033a09_LeftCheat(2LL,jule::Str("15625", 5)),_1ea033a09_LeftCheat(3LL,jule::Str("78125", 5)),_1ea033a09_LeftCheat(3LL,jule::Str("390625", 6)),_1ea033a09_LeftCheat(3LL,jule::Str("1953125", 7)),_1ea033a09_LeftCheat(4LL,jule::Str("9765625", 7)),_1ea033a09_LeftCheat(4LL,jule::Str("48828125", 8)),_1ea033a09_LeftCheat(4LL,jule::Str("244140625", 9)),_1ea033a09_LeftCheat(4LL,jule::Str("1220703125", 10)),_1ea033a09_LeftCheat(5LL,jule::Str("6103515625", 10)),_1ea033a09_LeftCheat(5LL,jule::Str("30517578125", 11)),_1ea033a09_LeftCheat(5LL,jule::Str("152587890625", 12)),_1ea033a09_LeftCheat(6LL,jule::Str("762939453125", 12)),_1ea033a09_LeftCheat(6LL,jule::Str("3814697265625", 13)),_1ea033a09_LeftCheat(6LL,jule::Str("19073486328125", 14)),_1ea033a09_LeftCheat(7LL,jule::Str("95367431640625", 14)),_1ea033a09_LeftCheat(7LL,jule::Str("476837158203125", 15)),_1ea033a09_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_1ea033a09_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_1ea033a09_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_1ea033a09_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_1ea033a09_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_1ea033a09_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_1ea033a09_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_1ea033a09_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_1ea033a09_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_1ea033a09_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_1ea033a09_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_1ea033a09_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_1ea033a09_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_1ea033a09_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_1ea033a09_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_1ea033a09_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_1ea033a09_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_1ea033a09_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_1ea033a09_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_1ea033a09_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_1ea033a09_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_1ea033a09_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_1ea033a09_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_1ea033a09_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_1ea033a09_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_1ea033a09_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_1ea033a09_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_1ea033a09_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_1ea033a09_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_1ea033a09_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_1ea033a09_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_1ea033a09_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_1ea033a09_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_1ea033a09_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_1ea033a09_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_1ea033a09_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_1ea033a09_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_1ea033a09_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_1ea033a09_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
static jule::Bool _1e9c5e35b_PRODUCTION = false;
static jule::Bool _1e9c5e35b_OPT_COPY = false;
static jule::Bool _1e9c5e35b_OPT_DEADCODE = false;
static jule::Bool _1e9c5e35b_OPT_APPEND = false;
static jule::Bool _1e9c5e35b_OPT_MATH = false;
static jule::Bool _1e9c5e35b_OPT_ACCESS = false;
static jule::Bool _1e9c5e35b_OPT_INLINE = false;
static jule::Bool _1e9c5e35b_OPT_PTR = false;
static jule::Bool _1e9ca741a_TEST = false;
static jule::Ptr<_1ea84b541_RangeTable> _1ea858a26__L = jule::new_struct<_1ea84b541_RangeTable>(new( std::nothrow ) _1ea84b541_RangeTable(jule::Slice<_1ea84b541_Range16>({_1ea84b541_Range16(65LLU,90LLU,1LLU),_1ea84b541_Range16(97LLU,122LLU,1LLU),_1ea84b541_Range16(170LLU,181LLU,11LLU),_1ea84b541_Range16(186LLU,192LLU,6LLU),_1ea84b541_Range16(193LLU,214LLU,1LLU),_1ea84b541_Range16(216LLU,246LLU,1LLU),_1ea84b541_Range16(248LLU,705LLU,1LLU),_1ea84b541_Range16(710LLU,721LLU,1LLU),_1ea84b541_Range16(736LLU,740LLU,1LLU),_1ea84b541_Range16(748LLU,750LLU,2LLU),_1ea84b541_Range16(880LLU,884LLU,1LLU),_1ea84b541_Range16(886LLU,887LLU,1LLU),_1ea84b541_Range16(890LLU,893LLU,1LLU),_1ea84b541_Range16(895LLU,902LLU,7LLU),_1ea84b541_Range16(904LLU,906LLU,1LLU),_1ea84b541_Range16(908LLU,910LLU,2LLU),_1ea84b541_Range16(911LLU,929LLU,1LLU),_1ea84b541_Range16(931LLU,1013LLU,1LLU),_1ea84b541_Range16(1015LLU,1153LLU,1LLU),_1ea84b541_Range16(1162LLU,1327LLU,1LLU),_1ea84b541_Range16(1329LLU,1366LLU,1LLU),_1ea84b541_Range16(1369LLU,1376LLU,7LLU),_1ea84b541_Range16(1377LLU,1416LLU,1LLU),_1ea84b541_Range16(1488LLU,1514LLU,1LLU),_1ea84b541_Range16(1519LLU,1522LLU,1LLU),_1ea84b541_Range16(1568LLU,1610LLU,1LLU),_1ea84b541_Range16(1646LLU,1647LLU,1LLU),_1ea84b541_Range16(1649LLU,1747LLU,1LLU),_1ea84b541_Range16(1749LLU,1765LLU,16LLU),_1ea84b541_Range16(1766LLU,1774LLU,8LLU),_1ea84b541_Range16(1775LLU,1786LLU,11LLU),_1ea84b541_Range16(1787LLU,1788LLU,1LLU),_1ea84b541_Range16(1791LLU,1808LLU,17LLU),_1ea84b541_Range16(1810LLU,1839LLU,1LLU),_1ea84b541_Range16(1869LLU,1957LLU,1LLU),_1ea84b541_Range16(1969LLU,1994LLU,25LLU),_1ea84b541_Range16(1995LLU,2026LLU,1LLU),_1ea84b541_Range16(2036LLU,2037LLU,1LLU),_1ea84b541_Range16(2042LLU,2048LLU,6LLU),_1ea84b541_Range16(2049LLU,2069LLU,1LLU),_1ea84b541_Range16(2074LLU,2084LLU,10LLU),_1ea84b541_Range16(2088LLU,2112LLU,24LLU),_1ea84b541_Range16(2113LLU,2136LLU,1LLU),_1ea84b541_Range16(2144LLU,2154LLU,1LLU),_1ea84b541_Range16(2160LLU,2183LLU,1LLU),_1ea84b541_Range16(2185LLU,2190LLU,1LLU),_1ea84b541_Range16(2208LLU,2249LLU,1LLU),_1ea84b541_Range16(2308LLU,2361LLU,1LLU),_1ea84b541_Range16(2365LLU,2384LLU,19LLU),_1ea84b541_Range16(2392LLU,2401LLU,1LLU),_1ea84b541_Range16(2417LLU,2432LLU,1LLU),_1ea84b541_Range16(2437LLU,2444LLU,1LLU),_1ea84b541_Range16(2447LLU,2448LLU,1LLU),_1ea84b541_Range16(2451LLU,2472LLU,1LLU),_1ea84b541_Range16(2474LLU,2480LLU,1LLU),_1ea84b541_Range16(2482LLU,2486LLU,4LLU),_1ea84b541_Range16(2487LLU,2489LLU,1LLU),_1ea84b541_Range16(2493LLU,2510LLU,17LLU),_1ea84b541_Range16(2524LLU,2525LLU,1LLU),_1ea84b541_Range16(2527LLU,2529LLU,1LLU),_1ea84b541_Range16(2544LLU,2545LLU,1LLU),_1ea84b541_Range16(2556LLU,2565LLU,9LLU),_1ea84b541_Range16(2566LLU,2570LLU,1LLU),_1ea84b541_Range16(2575LLU,2576LLU,1LLU),_1ea84b541_Range16(2579LLU,2600LLU,1LLU),_1ea84b541_Range16(2602LLU,2608LLU,1LLU),_1ea84b541_Range16(2610LLU,2611LLU,1LLU),_1ea84b541_Range16(2613LLU,2614LLU,1LLU),_1ea84b541_Range16(2616LLU,2617LLU,1LLU),_1ea84b541_Range16(2649LLU,2652LLU,1LLU),_1ea84b541_Range16(2654LLU,2674LLU,20LLU),_1ea84b541_Range16(2675LLU,2676LLU,1LLU),_1ea84b541_Range16(2693LLU,2701LLU,1LLU),_1ea84b541_Range16(2703LLU,2705LLU,1LLU),_1ea84b541_Range16(2707LLU,2728LLU,1LLU),_1ea84b541_Range16(2730LLU,2736LLU,1LLU),_1ea84b541_Range16(2738LLU,2739LLU,1LLU),_1ea84b541_Range16(2741LLU,2745LLU,1LLU),_1ea84b541_Range16(2749LLU,2768LLU,19LLU),_1ea84b541_Range16(2784LLU,2785LLU,1LLU),_1ea84b541_Range16(2809LLU,2821LLU,12LLU),_1ea84b541_Range16(2822LLU,2828LLU,1LLU),_1ea84b541_Range16(2831LLU,2832LLU,1LLU),_1ea84b541_Range16(2835LLU,2856LLU,1LLU),_1ea84b541_Range16(2858LLU,2864LLU,1LLU),_1ea84b541_Range16(2866LLU,2867LLU,1LLU),_1ea84b541_Range16(2869LLU,2873LLU,1LLU),_1ea84b541_Range16(2877LLU,2908LLU,31LLU),_1ea84b541_Range16(2909LLU,2911LLU,2LLU),_1ea84b541_Range16(2912LLU,2913LLU,1LLU),_1ea84b541_Range16(2929LLU,2947LLU,18LLU),_1ea84b541_Range16(2949LLU,2954LLU,1LLU),_1ea84b541_Range16(2958LLU,2960LLU,1LLU),_1ea84b541_Range16(2962LLU,2965LLU,1LLU),_1ea84b541_Range16(2969LLU,2970LLU,1LLU),_1ea84b541_Range16(2972LLU,2974LLU,2LLU),_1ea84b541_Range16(2975LLU,2979LLU,4LLU),_1ea84b541_Range16(2980LLU,2984LLU,4LLU),_1ea84b541_Range16(2985LLU,2986LLU,1LLU),_1ea84b541_Range16(2990LLU,3001LLU,1LLU),_1ea84b541_Range16(3024LLU,3077LLU,53LLU),_1ea84b541_Range16(3078LLU,3084LLU,1LLU),_1ea84b541_Range16(3086LLU,3088LLU,1LLU),_1ea84b541_Range16(3090LLU,3112LLU,1LLU),_1ea84b541_Range16(3114LLU,3129LLU,1LLU),_1ea84b541_Range16(3133LLU,3160LLU,27LLU),_1ea84b541_Range16(3161LLU,3162LLU,1LLU),_1ea84b541_Range16(3165LLU,3168LLU,3LLU),_1ea84b541_Range16(3169LLU,3200LLU,31LLU),_1ea84b541_Range16(3205LLU,3212LLU,1LLU),_1ea84b541_Range16(3214LLU,3216LLU,1LLU),_1ea84b541_Range16(3218LLU,3240LLU,1LLU),_1ea84b541_Range16(3242LLU,3251LLU,1LLU),_1ea84b541_Range16(3253LLU,3257LLU,1LLU),_1ea84b541_Range16(3261LLU,3293LLU,32LLU),_1ea84b541_Range16(3294LLU,3296LLU,2LLU),_1ea84b541_Range16(3297LLU,3313LLU,16LLU),_1ea84b541_Range16(3314LLU,3332LLU,18LLU),_1ea84b541_Range16(3333LLU,3340LLU,1LLU),_1ea84b541_Range16(3342LLU,3344LLU,1LLU),_1ea84b541_Range16(3346LLU,3386LLU,1LLU),_1ea84b541_Range16(3389LLU,3406LLU,17LLU),_1ea84b541_Range16(3412LLU,3414LLU,1LLU),_1ea84b541_Range16(3423LLU,3425LLU,1LLU),_1ea84b541_Range16(3450LLU,3455LLU,1LLU),_1ea84b541_Range16(3461LLU,3478LLU,1LLU),_1ea84b541_Range16(3482LLU,3505LLU,1LLU),_1ea84b541_Range16(3507LLU,3515LLU,1LLU),_1ea84b541_Range16(3517LLU,3520LLU,3LLU),_1ea84b541_Range16(3521LLU,3526LLU,1LLU),_1ea84b541_Range16(3585LLU,3632LLU,1LLU),_1ea84b541_Range16(3634LLU,3635LLU,1LLU),_1ea84b541_Range16(3648LLU,3654LLU,1LLU),_1ea84b541_Range16(3713LLU,3714LLU,1LLU),_1ea84b541_Range16(3716LLU,3718LLU,2LLU),_1ea84b541_Range16(3719LLU,3722LLU,1LLU),_1ea84b541_Range16(3724LLU,3747LLU,1LLU),_1ea84b541_Range16(3749LLU,3751LLU,2LLU),_1ea84b541_Range16(3752LLU,3760LLU,1LLU),_1ea84b541_Range16(3762LLU,3763LLU,1LLU),_1ea84b541_Range16(3773LLU,3776LLU,3LLU),_1ea84b541_Range16(3777LLU,3780LLU,1LLU),_1ea84b541_Range16(3782LLU,3804LLU,22LLU),_1ea84b541_Range16(3805LLU,3807LLU,1LLU),_1ea84b541_Range16(3840LLU,3904LLU,64LLU),_1ea84b541_Range16(3905LLU,3911LLU,1LLU),_1ea84b541_Range16(3913LLU,3948LLU,1LLU),_1ea84b541_Range16(3976LLU,3980LLU,1LLU),_1ea84b541_Range16(4096LLU,4138LLU,1LLU),_1ea84b541_Range16(4159LLU,4176LLU,17LLU),_1ea84b541_Range16(4177LLU,4181LLU,1LLU),_1ea84b541_Range16(4186LLU,4189LLU,1LLU),_1ea84b541_Range16(4193LLU,4197LLU,4LLU),_1ea84b541_Range16(4198LLU,4206LLU,8LLU),_1ea84b541_Range16(4207LLU,4208LLU,1LLU),_1ea84b541_Range16(4213LLU,4225LLU,1LLU),_1ea84b541_Range16(4238LLU,4256LLU,18LLU),_1ea84b541_Range16(4257LLU,4293LLU,1LLU),_1ea84b541_Range16(4295LLU,4301LLU,6LLU),_1ea84b541_Range16(4304LLU,4346LLU,1LLU),_1ea84b541_Range16(4348LLU,4680LLU,1LLU),_1ea84b541_Range16(4682LLU,4685LLU,1LLU),_1ea84b541_Range16(4688LLU,4694LLU,1LLU),_1ea84b541_Range16(4696LLU,4698LLU,2LLU),_1ea84b541_Range16(4699LLU,4701LLU,1LLU),_1ea84b541_Range16(4704LLU,4744LLU,1LLU),_1ea84b541_Range16(4746LLU,4749LLU,1LLU),_1ea84b541_Range16(4752LLU,4784LLU,1LLU),_1ea84b541_Range16(4786LLU,4789LLU,1LLU),_1ea84b541_Range16(4792LLU,4798LLU,1LLU),_1ea84b541_Range16(4800LLU,4802LLU,2LLU),_1ea84b541_Range16(4803LLU,4805LLU,1LLU),_1ea84b541_Range16(4808LLU,4822LLU,1LLU),_1ea84b541_Range16(4824LLU,4880LLU,1LLU),_1ea84b541_Range16(4882LLU,4885LLU,1LLU),_1ea84b541_Range16(4888LLU,4954LLU,1LLU),_1ea84b541_Range16(4992LLU,5007LLU,1LLU),_1ea84b541_Range16(5024LLU,5109LLU,1LLU),_1ea84b541_Range16(5112LLU,5117LLU,1LLU),_1ea84b541_Range16(5121LLU,5740LLU,1LLU),_1ea84b541_Range16(5743LLU,5759LLU,1LLU),_1ea84b541_Range16(5761LLU,5786LLU,1LLU),_1ea84b541_Range16(5792LLU,5866LLU,1LLU),_1ea84b541_Range16(5873LLU,5880LLU,1LLU),_1ea84b541_Range16(5888LLU,5905LLU,1LLU),_1ea84b541_Range16(5919LLU,5937LLU,1LLU),_1ea84b541_Range16(5952LLU,5969LLU,1LLU),_1ea84b541_Range16(5984LLU,5996LLU,1LLU),_1ea84b541_Range16(5998LLU,6000LLU,1LLU),_1ea84b541_Range16(6016LLU,6067LLU,1LLU),_1ea84b541_Range16(6103LLU,6108LLU,5LLU),_1ea84b541_Range16(6176LLU,6264LLU,1LLU),_1ea84b541_Range16(6272LLU,6276LLU,1LLU),_1ea84b541_Range16(6279LLU,6312LLU,1LLU),_1ea84b541_Range16(6314LLU,6320LLU,6LLU),_1ea84b541_Range16(6321LLU,6389LLU,1LLU),_1ea84b541_Range16(6400LLU,6430LLU,1LLU),_1ea84b541_Range16(6480LLU,6509LLU,1LLU),_1ea84b541_Range16(6512LLU,6516LLU,1LLU),_1ea84b541_Range16(6528LLU,6571LLU,1LLU),_1ea84b541_Range16(6576LLU,6601LLU,1LLU),_1ea84b541_Range16(6656LLU,6678LLU,1LLU),_1ea84b541_Range16(6688LLU,6740LLU,1LLU),_1ea84b541_Range16(6823LLU,6917LLU,94LLU),_1ea84b541_Range16(6918LLU,6963LLU,1LLU),_1ea84b541_Range16(6981LLU,6988LLU,1LLU),_1ea84b541_Range16(7043LLU,7072LLU,1LLU),_1ea84b541_Range16(7086LLU,7087LLU,1LLU),_1ea84b541_Range16(7098LLU,7141LLU,1LLU),_1ea84b541_Range16(7168LLU,7203LLU,1LLU),_1ea84b541_Range16(7245LLU,7247LLU,1LLU),_1ea84b541_Range16(7258LLU,7293LLU,1LLU),_1ea84b541_Range16(7296LLU,7304LLU,1LLU),_1ea84b541_Range16(7312LLU,7354LLU,1LLU),_1ea84b541_Range16(7357LLU,7359LLU,1LLU),_1ea84b541_Range16(7401LLU,7404LLU,1LLU),_1ea84b541_Range16(7406LLU,7411LLU,1LLU),_1ea84b541_Range16(7413LLU,7414LLU,1LLU),_1ea84b541_Range16(7418LLU,7424LLU,6LLU),_1ea84b541_Range16(7425LLU,7615LLU,1LLU),_1ea84b541_Range16(7680LLU,7957LLU,1LLU),_1ea84b541_Range16(7960LLU,7965LLU,1LLU),_1ea84b541_Range16(7968LLU,8005LLU,1LLU),_1ea84b541_Range16(8008LLU,8013LLU,1LLU),_1ea84b541_Range16(8016LLU,8023LLU,1LLU),_1ea84b541_Range16(8025LLU,8031LLU,2LLU),_1ea84b541_Range16(8032LLU,8061LLU,1LLU),_1ea84b541_Range16(8064LLU,8116LLU,1LLU),_1ea84b541_Range16(8118LLU,8124LLU,1LLU),_1ea84b541_Range16(8126LLU,8130LLU,4LLU),_1ea84b541_Range16(8131LLU,8132LLU,1LLU),_1ea84b541_Range16(8134LLU,8140LLU,1LLU),_1ea84b541_Range16(8144LLU,8147LLU,1LLU),_1ea84b541_Range16(8150LLU,8155LLU,1LLU),_1ea84b541_Range16(8160LLU,8172LLU,1LLU),_1ea84b541_Range16(8178LLU,8180LLU,1LLU),_1ea84b541_Range16(8182LLU,8188LLU,1LLU),_1ea84b541_Range16(8305LLU,8319LLU,14LLU),_1ea84b541_Range16(8336LLU,8348LLU,1LLU),_1ea84b541_Range16(8450LLU,8455LLU,5LLU),_1ea84b541_Range16(8458LLU,8467LLU,1LLU),_1ea84b541_Range16(8469LLU,8473LLU,4LLU),_1ea84b541_Range16(8474LLU,8477LLU,1LLU),_1ea84b541_Range16(8484LLU,8490LLU,2LLU),_1ea84b541_Range16(8491LLU,8493LLU,1LLU),_1ea84b541_Range16(8495LLU,8505LLU,1LLU),_1ea84b541_Range16(8508LLU,8511LLU,1LLU),_1ea84b541_Range16(8517LLU,8521LLU,1LLU),_1ea84b541_Range16(8526LLU,8579LLU,53LLU),_1ea84b541_Range16(8580LLU,11264LLU,2684LLU),_1ea84b541_Range16(11265LLU,11492LLU,1LLU),_1ea84b541_Range16(11499LLU,11502LLU,1LLU),_1ea84b541_Range16(11506LLU,11507LLU,1LLU),_1ea84b541_Range16(11520LLU,11557LLU,1LLU),_1ea84b541_Range16(11559LLU,11565LLU,6LLU),_1ea84b541_Range16(11568LLU,11623LLU,1LLU),_1ea84b541_Range16(11631LLU,11648LLU,17LLU),_1ea84b541_Range16(11649LLU,11670LLU,1LLU),_1ea84b541_Range16(11680LLU,11686LLU,1LLU),_1ea84b541_Range16(11688LLU,11694LLU,1LLU),_1ea84b541_Range16(11696LLU,11702LLU,1LLU),_1ea84b541_Range16(11704LLU,11710LLU,1LLU),_1ea84b541_Range16(11712LLU,11718LLU,1LLU),_1ea84b541_Range16(11720LLU,11726LLU,1LLU),_1ea84b541_Range16(11728LLU,11734LLU,1LLU),_1ea84b541_Range16(11736LLU,11742LLU,1LLU),_1ea84b541_Range16(11823LLU,12293LLU,470LLU),_1ea84b541_Range16(12294LLU,12337LLU,43LLU),_1ea84b541_Range16(12338LLU,12341LLU,1LLU),_1ea84b541_Range16(12347LLU,12348LLU,1LLU),_1ea84b541_Range16(12353LLU,12438LLU,1LLU),_1ea84b541_Range16(12445LLU,12447LLU,1LLU),_1ea84b541_Range16(12449LLU,12538LLU,1LLU),_1ea84b541_Range16(12540LLU,12543LLU,1LLU),_1ea84b541_Range16(12549LLU,12591LLU,1LLU),_1ea84b541_Range16(12593LLU,12686LLU,1LLU),_1ea84b541_Range16(12704LLU,12735LLU,1LLU),_1ea84b541_Range16(12784LLU,12799LLU,1LLU),_1ea84b541_Range16(13312LLU,19903LLU,1LLU),_1ea84b541_Range16(19968LLU,42124LLU,1LLU),_1ea84b541_Range16(42192LLU,42237LLU,1LLU),_1ea84b541_Range16(42240LLU,42508LLU,1LLU),_1ea84b541_Range16(42512LLU,42527LLU,1LLU),_1ea84b541_Range16(42538LLU,42539LLU,1LLU),_1ea84b541_Range16(42560LLU,42606LLU,1LLU),_1ea84b541_Range16(42623LLU,42653LLU,1LLU),_1ea84b541_Range16(42656LLU,42725LLU,1LLU),_1ea84b541_Range16(42775LLU,42783LLU,1LLU),_1ea84b541_Range16(42786LLU,42888LLU,1LLU),_1ea84b541_Range16(42891LLU,42954LLU,1LLU),_1ea84b541_Range16(42960LLU,42961LLU,1LLU),_1ea84b541_Range16(42963LLU,42965LLU,2LLU),_1ea84b541_Range16(42966LLU,42969LLU,1LLU),_1ea84b541_Range16(42994LLU,43009LLU,1LLU),_1ea84b541_Range16(43011LLU,43013LLU,1LLU),_1ea84b541_Range16(43015LLU,43018LLU,1LLU),_1ea84b541_Range16(43020LLU,43042LLU,1LLU),_1ea84b541_Range16(43072LLU,43123LLU,1LLU),_1ea84b541_Range16(43138LLU,43187LLU,1LLU),_1ea84b541_Range16(43250LLU,43255LLU,1LLU),_1ea84b541_Range16(43259LLU,43261LLU,2LLU),_1ea84b541_Range16(43262LLU,43274LLU,12LLU),_1ea84b541_Range16(43275LLU,43301LLU,1LLU),_1ea84b541_Range16(43312LLU,43334LLU,1LLU),_1ea84b541_Range16(43360LLU,43388LLU,1LLU),_1ea84b541_Range16(43396LLU,43442LLU,1LLU),_1ea84b541_Range16(43471LLU,43488LLU,17LLU),_1ea84b541_Range16(43489LLU,43492LLU,1LLU),_1ea84b541_Range16(43494LLU,43503LLU,1LLU),_1ea84b541_Range16(43514LLU,43518LLU,1LLU),_1ea84b541_Range16(43520LLU,43560LLU,1LLU),_1ea84b541_Range16(43584LLU,43586LLU,1LLU),_1ea84b541_Range16(43588LLU,43595LLU,1LLU),_1ea84b541_Range16(43616LLU,43638LLU,1LLU),_1ea84b541_Range16(43642LLU,43646LLU,4LLU),_1ea84b541_Range16(43647LLU,43695LLU,1LLU),_1ea84b541_Range16(43697LLU,43701LLU,4LLU),_1ea84b541_Range16(43702LLU,43705LLU,3LLU),_1ea84b541_Range16(43706LLU,43709LLU,1LLU),_1ea84b541_Range16(43712LLU,43714LLU,2LLU),_1ea84b541_Range16(43739LLU,43741LLU,1LLU),_1ea84b541_Range16(43744LLU,43754LLU,1LLU),_1ea84b541_Range16(43762LLU,43764LLU,1LLU),_1ea84b541_Range16(43777LLU,43782LLU,1LLU),_1ea84b541_Range16(43785LLU,43790LLU,1LLU),_1ea84b541_Range16(43793LLU,43798LLU,1LLU),_1ea84b541_Range16(43808LLU,43814LLU,1LLU),_1ea84b541_Range16(43816LLU,43822LLU,1LLU),_1ea84b541_Range16(43824LLU,43866LLU,1LLU),_1ea84b541_Range16(43868LLU,43881LLU,1LLU),_1ea84b541_Range16(43888LLU,44002LLU,1LLU),_1ea84b541_Range16(44032LLU,55203LLU,1LLU),_1ea84b541_Range16(55216LLU,55238LLU,1LLU),_1ea84b541_Range16(55243LLU,55291LLU,1LLU),_1ea84b541_Range16(63744LLU,64109LLU,1LLU),_1ea84b541_Range16(64112LLU,64217LLU,1LLU),_1ea84b541_Range16(64256LLU,64262LLU,1LLU),_1ea84b541_Range16(64275LLU,64279LLU,1LLU),_1ea84b541_Range16(64285LLU,64287LLU,2LLU),_1ea84b541_Range16(64288LLU,64296LLU,1LLU),_1ea84b541_Range16(64298LLU,64310LLU,1LLU),_1ea84b541_Range16(64312LLU,64316LLU,1LLU),_1ea84b541_Range16(64318LLU,64320LLU,2LLU),_1ea84b541_Range16(64321LLU,64323LLU,2LLU),_1ea84b541_Range16(64324LLU,64326LLU,2LLU),_1ea84b541_Range16(64327LLU,64433LLU,1LLU),_1ea84b541_Range16(64467LLU,64829LLU,1LLU),_1ea84b541_Range16(64848LLU,64911LLU,1LLU),_1ea84b541_Range16(64914LLU,64967LLU,1LLU),_1ea84b541_Range16(65008LLU,65019LLU,1LLU),_1ea84b541_Range16(65136LLU,65140LLU,1LLU),_1ea84b541_Range16(65142LLU,65276LLU,1LLU),_1ea84b541_Range16(65313LLU,65338LLU,1LLU),_1ea84b541_Range16(65345LLU,65370LLU,1LLU),_1ea84b541_Range16(65382LLU,65470LLU,1LLU),_1ea84b541_Range16(65474LLU,65479LLU,1LLU),_1ea84b541_Range16(65482LLU,65487LLU,1LLU),_1ea84b541_Range16(65490LLU,65495LLU,1LLU),_1ea84b541_Range16(65498LLU,65500LLU,1LLU)}),jule::Slice<_1ea84b541_Range32>({_1ea84b541_Range32(65536LLU,65547LLU,1LLU),_1ea84b541_Range32(65549LLU,65574LLU,1LLU),_1ea84b541_Range32(65576LLU,65594LLU,1LLU),_1ea84b541_Range32(65596LLU,65597LLU,1LLU),_1ea84b541_Range32(65599LLU,65613LLU,1LLU),_1ea84b541_Range32(65616LLU,65629LLU,1LLU),_1ea84b541_Range32(65664LLU,65786LLU,1LLU),_1ea84b541_Range32(66176LLU,66204LLU,1LLU),_1ea84b541_Range32(66208LLU,66256LLU,1LLU),_1ea84b541_Range32(66304LLU,66335LLU,1LLU),_1ea84b541_Range32(66349LLU,66368LLU,1LLU),_1ea84b541_Range32(66370LLU,66377LLU,1LLU),_1ea84b541_Range32(66384LLU,66421LLU,1LLU),_1ea84b541_Range32(66432LLU,66461LLU,1LLU),_1ea84b541_Range32(66464LLU,66499LLU,1LLU),_1ea84b541_Range32(66504LLU,66511LLU,1LLU),_1ea84b541_Range32(66560LLU,66717LLU,1LLU),_1ea84b541_Range32(66736LLU,66771LLU,1LLU),_1ea84b541_Range32(66776LLU,66811LLU,1LLU),_1ea84b541_Range32(66816LLU,66855LLU,1LLU),_1ea84b541_Range32(66864LLU,66915LLU,1LLU),_1ea84b541_Range32(66928LLU,66938LLU,1LLU),_1ea84b541_Range32(66940LLU,66954LLU,1LLU),_1ea84b541_Range32(66956LLU,66962LLU,1LLU),_1ea84b541_Range32(66964LLU,66965LLU,1LLU),_1ea84b541_Range32(66967LLU,66977LLU,1LLU),_1ea84b541_Range32(66979LLU,66993LLU,1LLU),_1ea84b541_Range32(66995LLU,67001LLU,1LLU),_1ea84b541_Range32(67003LLU,67004LLU,1LLU),_1ea84b541_Range32(67072LLU,67382LLU,1LLU),_1ea84b541_Range32(67392LLU,67413LLU,1LLU),_1ea84b541_Range32(67424LLU,67431LLU,1LLU),_1ea84b541_Range32(67456LLU,67461LLU,1LLU),_1ea84b541_Range32(67463LLU,67504LLU,1LLU),_1ea84b541_Range32(67506LLU,67514LLU,1LLU),_1ea84b541_Range32(67584LLU,67589LLU,1LLU),_1ea84b541_Range32(67592LLU,67594LLU,2LLU),_1ea84b541_Range32(67595LLU,67637LLU,1LLU),_1ea84b541_Range32(67639LLU,67640LLU,1LLU),_1ea84b541_Range32(67644LLU,67647LLU,3LLU),_1ea84b541_Range32(67648LLU,67669LLU,1LLU),_1ea84b541_Range32(67680LLU,67702LLU,1LLU),_1ea84b541_Range32(67712LLU,67742LLU,1LLU),_1ea84b541_Range32(67808LLU,67826LLU,1LLU),_1ea84b541_Range32(67828LLU,67829LLU,1LLU),_1ea84b541_Range32(67840LLU,67861LLU,1LLU),_1ea84b541_Range32(67872LLU,67897LLU,1LLU),_1ea84b541_Range32(67968LLU,68023LLU,1LLU),_1ea84b541_Range32(68030LLU,68031LLU,1LLU),_1ea84b541_Range32(68096LLU,68112LLU,16LLU),_1ea84b541_Range32(68113LLU,68115LLU,1LLU),_1ea84b541_Range32(68117LLU,68119LLU,1LLU),_1ea84b541_Range32(68121LLU,68149LLU,1LLU),_1ea84b541_Range32(68192LLU,68220LLU,1LLU),_1ea84b541_Range32(68224LLU,68252LLU,1LLU),_1ea84b541_Range32(68288LLU,68295LLU,1LLU),_1ea84b541_Range32(68297LLU,68324LLU,1LLU),_1ea84b541_Range32(68352LLU,68405LLU,1LLU),_1ea84b541_Range32(68416LLU,68437LLU,1LLU),_1ea84b541_Range32(68448LLU,68466LLU,1LLU),_1ea84b541_Range32(68480LLU,68497LLU,1LLU),_1ea84b541_Range32(68608LLU,68680LLU,1LLU),_1ea84b541_Range32(68736LLU,68786LLU,1LLU),_1ea84b541_Range32(68800LLU,68850LLU,1LLU),_1ea84b541_Range32(68864LLU,68899LLU,1LLU),_1ea84b541_Range32(69248LLU,69289LLU,1LLU),_1ea84b541_Range32(69296LLU,69297LLU,1LLU),_1ea84b541_Range32(69376LLU,69404LLU,1LLU),_1ea84b541_Range32(69415LLU,69424LLU,9LLU),_1ea84b541_Range32(69425LLU,69445LLU,1LLU),_1ea84b541_Range32(69488LLU,69505LLU,1LLU),_1ea84b541_Range32(69552LLU,69572LLU,1LLU),_1ea84b541_Range32(69600LLU,69622LLU,1LLU),_1ea84b541_Range32(69635LLU,69687LLU,1LLU),_1ea84b541_Range32(69745LLU,69746LLU,1LLU),_1ea84b541_Range32(69749LLU,69763LLU,14LLU),_1ea84b541_Range32(69764LLU,69807LLU,1LLU),_1ea84b541_Range32(69840LLU,69864LLU,1LLU),_1ea84b541_Range32(69891LLU,69926LLU,1LLU),_1ea84b541_Range32(69956LLU,69959LLU,3LLU),_1ea84b541_Range32(69968LLU,70002LLU,1LLU),_1ea84b541_Range32(70006LLU,70019LLU,13LLU),_1ea84b541_Range32(70020LLU,70066LLU,1LLU),_1ea84b541_Range32(70081LLU,70084LLU,1LLU),_1ea84b541_Range32(70106LLU,70108LLU,2LLU),_1ea84b541_Range32(70144LLU,70161LLU,1LLU),_1ea84b541_Range32(70163LLU,70187LLU,1LLU),_1ea84b541_Range32(70207LLU,70208LLU,1LLU),_1ea84b541_Range32(70272LLU,70278LLU,1LLU),_1ea84b541_Range32(70280LLU,70282LLU,2LLU),_1ea84b541_Range32(70283LLU,70285LLU,1LLU),_1ea84b541_Range32(70287LLU,70301LLU,1LLU),_1ea84b541_Range32(70303LLU,70312LLU,1LLU),_1ea84b541_Range32(70320LLU,70366LLU,1LLU),_1ea84b541_Range32(70405LLU,70412LLU,1LLU),_1ea84b541_Range32(70415LLU,70416LLU,1LLU),_1ea84b541_Range32(70419LLU,70440LLU,1LLU),_1ea84b541_Range32(70442LLU,70448LLU,1LLU),_1ea84b541_Range32(70450LLU,70451LLU,1LLU),_1ea84b541_Range32(70453LLU,70457LLU,1LLU),_1ea84b541_Range32(70461LLU,70480LLU,19LLU),_1ea84b541_Range32(70493LLU,70497LLU,1LLU),_1ea84b541_Range32(70656LLU,70708LLU,1LLU),_1ea84b541_Range32(70727LLU,70730LLU,1LLU),_1ea84b541_Range32(70751LLU,70753LLU,1LLU),_1ea84b541_Range32(70784LLU,70831LLU,1LLU),_1ea84b541_Range32(70852LLU,70853LLU,1LLU),_1ea84b541_Range32(70855LLU,71040LLU,185LLU),_1ea84b541_Range32(71041LLU,71086LLU,1LLU),_1ea84b541_Range32(71128LLU,71131LLU,1LLU),_1ea84b541_Range32(71168LLU,71215LLU,1LLU),_1ea84b541_Range32(71236LLU,71296LLU,60LLU),_1ea84b541_Range32(71297LLU,71338LLU,1LLU),_1ea84b541_Range32(71352LLU,71424LLU,72LLU),_1ea84b541_Range32(71425LLU,71450LLU,1LLU),_1ea84b541_Range32(71488LLU,71494LLU,1LLU),_1ea84b541_Range32(71680LLU,71723LLU,1LLU),_1ea84b541_Range32(71840LLU,71903LLU,1LLU),_1ea84b541_Range32(71935LLU,71942LLU,1LLU),_1ea84b541_Range32(71945LLU,71948LLU,3LLU),_1ea84b541_Range32(71949LLU,71955LLU,1LLU),_1ea84b541_Range32(71957LLU,71958LLU,1LLU),_1ea84b541_Range32(71960LLU,71983LLU,1LLU),_1ea84b541_Range32(71999LLU,72001LLU,2LLU),_1ea84b541_Range32(72096LLU,72103LLU,1LLU),_1ea84b541_Range32(72106LLU,72144LLU,1LLU),_1ea84b541_Range32(72161LLU,72163LLU,2LLU),_1ea84b541_Range32(72192LLU,72203LLU,11LLU),_1ea84b541_Range32(72204LLU,72242LLU,1LLU),_1ea84b541_Range32(72250LLU,72272LLU,22LLU),_1ea84b541_Range32(72284LLU,72329LLU,1LLU),_1ea84b541_Range32(72349LLU,72368LLU,19LLU),_1ea84b541_Range32(72369LLU,72440LLU,1LLU),_1ea84b541_Range32(72704LLU,72712LLU,1LLU),_1ea84b541_Range32(72714LLU,72750LLU,1LLU),_1ea84b541_Range32(72768LLU,72818LLU,50LLU),_1ea84b541_Range32(72819LLU,72847LLU,1LLU),_1ea84b541_Range32(72960LLU,72966LLU,1LLU),_1ea84b541_Range32(72968LLU,72969LLU,1LLU),_1ea84b541_Range32(72971LLU,73008LLU,1LLU),_1ea84b541_Range32(73030LLU,73056LLU,26LLU),_1ea84b541_Range32(73057LLU,73061LLU,1LLU),_1ea84b541_Range32(73063LLU,73064LLU,1LLU),_1ea84b541_Range32(73066LLU,73097LLU,1LLU),_1ea84b541_Range32(73112LLU,73440LLU,328LLU),_1ea84b541_Range32(73441LLU,73458LLU,1LLU),_1ea84b541_Range32(73474LLU,73476LLU,2LLU),_1ea84b541_Range32(73477LLU,73488LLU,1LLU),_1ea84b541_Range32(73490LLU,73523LLU,1LLU),_1ea84b541_Range32(73648LLU,73728LLU,80LLU),_1ea84b541_Range32(73729LLU,74649LLU,1LLU),_1ea84b541_Range32(74880LLU,75075LLU,1LLU),_1ea84b541_Range32(77712LLU,77808LLU,1LLU),_1ea84b541_Range32(77824LLU,78895LLU,1LLU),_1ea84b541_Range32(78913LLU,78918LLU,1LLU),_1ea84b541_Range32(82944LLU,83526LLU,1LLU),_1ea84b541_Range32(92160LLU,92728LLU,1LLU),_1ea84b541_Range32(92736LLU,92766LLU,1LLU),_1ea84b541_Range32(92784LLU,92862LLU,1LLU),_1ea84b541_Range32(92880LLU,92909LLU,1LLU),_1ea84b541_Range32(92928LLU,92975LLU,1LLU),_1ea84b541_Range32(92992LLU,92995LLU,1LLU),_1ea84b541_Range32(93027LLU,93047LLU,1LLU),_1ea84b541_Range32(93053LLU,93071LLU,1LLU),_1ea84b541_Range32(93760LLU,93823LLU,1LLU),_1ea84b541_Range32(93952LLU,94026LLU,1LLU),_1ea84b541_Range32(94032LLU,94099LLU,67LLU),_1ea84b541_Range32(94100LLU,94111LLU,1LLU),_1ea84b541_Range32(94176LLU,94177LLU,1LLU),_1ea84b541_Range32(94179LLU,94208LLU,29LLU),_1ea84b541_Range32(94209LLU,100343LLU,1LLU),_1ea84b541_Range32(100352LLU,101589LLU,1LLU),_1ea84b541_Range32(101632LLU,101640LLU,1LLU),_1ea84b541_Range32(110576LLU,110579LLU,1LLU),_1ea84b541_Range32(110581LLU,110587LLU,1LLU),_1ea84b541_Range32(110589LLU,110590LLU,1LLU),_1ea84b541_Range32(110592LLU,110882LLU,1LLU),_1ea84b541_Range32(110898LLU,110928LLU,30LLU),_1ea84b541_Range32(110929LLU,110930LLU,1LLU),_1ea84b541_Range32(110933LLU,110948LLU,15LLU),_1ea84b541_Range32(110949LLU,110951LLU,1LLU),_1ea84b541_Range32(110960LLU,111355LLU,1LLU),_1ea84b541_Range32(113664LLU,113770LLU,1LLU),_1ea84b541_Range32(113776LLU,113788LLU,1LLU),_1ea84b541_Range32(113792LLU,113800LLU,1LLU),_1ea84b541_Range32(113808LLU,113817LLU,1LLU),_1ea84b541_Range32(119808LLU,119892LLU,1LLU),_1ea84b541_Range32(119894LLU,119964LLU,1LLU),_1ea84b541_Range32(119966LLU,119967LLU,1LLU),_1ea84b541_Range32(119970LLU,119973LLU,3LLU),_1ea84b541_Range32(119974LLU,119977LLU,3LLU),_1ea84b541_Range32(119978LLU,119980LLU,1LLU),_1ea84b541_Range32(119982LLU,119993LLU,1LLU),_1ea84b541_Range32(119995LLU,119997LLU,2LLU),_1ea84b541_Range32(119998LLU,120003LLU,1LLU),_1ea84b541_Range32(120005LLU,120069LLU,1LLU),_1ea84b541_Range32(120071LLU,120074LLU,1LLU),_1ea84b541_Range32(120077LLU,120084LLU,1LLU),_1ea84b541_Range32(120086LLU,120092LLU,1LLU),_1ea84b541_Range32(120094LLU,120121LLU,1LLU),_1ea84b541_Range32(120123LLU,120126LLU,1LLU),_1ea84b541_Range32(120128LLU,120132LLU,1LLU),_1ea84b541_Range32(120134LLU,120138LLU,4LLU),_1ea84b541_Range32(120139LLU,120144LLU,1LLU),_1ea84b541_Range32(120146LLU,120485LLU,1LLU),_1ea84b541_Range32(120488LLU,120512LLU,1LLU),_1ea84b541_Range32(120514LLU,120538LLU,1LLU),_1ea84b541_Range32(120540LLU,120570LLU,1LLU),_1ea84b541_Range32(120572LLU,120596LLU,1LLU),_1ea84b541_Range32(120598LLU,120628LLU,1LLU),_1ea84b541_Range32(120630LLU,120654LLU,1LLU),_1ea84b541_Range32(120656LLU,120686LLU,1LLU),_1ea84b541_Range32(120688LLU,120712LLU,1LLU),_1ea84b541_Range32(120714LLU,120744LLU,1LLU),_1ea84b541_Range32(120746LLU,120770LLU,1LLU),_1ea84b541_Range32(120772LLU,120779LLU,1LLU),_1ea84b541_Range32(122624LLU,122654LLU,1LLU),_1ea84b541_Range32(122661LLU,122666LLU,1LLU),_1ea84b541_Range32(122928LLU,122989LLU,1LLU),_1ea84b541_Range32(123136LLU,123180LLU,1LLU),_1ea84b541_Range32(123191LLU,123197LLU,1LLU),_1ea84b541_Range32(123214LLU,123536LLU,322LLU),_1ea84b541_Range32(123537LLU,123565LLU,1LLU),_1ea84b541_Range32(123584LLU,123627LLU,1LLU),_1ea84b541_Range32(124112LLU,124139LLU,1LLU),_1ea84b541_Range32(124896LLU,124902LLU,1LLU),_1ea84b541_Range32(124904LLU,124907LLU,1LLU),_1ea84b541_Range32(124909LLU,124910LLU,1LLU),_1ea84b541_Range32(124912LLU,124926LLU,1LLU),_1ea84b541_Range32(124928LLU,125124LLU,1LLU),_1ea84b541_Range32(125184LLU,125251LLU,1LLU),_1ea84b541_Range32(125259LLU,126464LLU,1205LLU),_1ea84b541_Range32(126465LLU,126467LLU,1LLU),_1ea84b541_Range32(126469LLU,126495LLU,1LLU),_1ea84b541_Range32(126497LLU,126498LLU,1LLU),_1ea84b541_Range32(126500LLU,126503LLU,3LLU),_1ea84b541_Range32(126505LLU,126514LLU,1LLU),_1ea84b541_Range32(126516LLU,126519LLU,1LLU),_1ea84b541_Range32(126521LLU,126523LLU,2LLU),_1ea84b541_Range32(126530LLU,126535LLU,5LLU),_1ea84b541_Range32(126537LLU,126541LLU,2LLU),_1ea84b541_Range32(126542LLU,126543LLU,1LLU),_1ea84b541_Range32(126545LLU,126546LLU,1LLU),_1ea84b541_Range32(126548LLU,126551LLU,3LLU),_1ea84b541_Range32(126553LLU,126561LLU,2LLU),_1ea84b541_Range32(126562LLU,126564LLU,2LLU),_1ea84b541_Range32(126567LLU,126570LLU,1LLU),_1ea84b541_Range32(126572LLU,126578LLU,1LLU),_1ea84b541_Range32(126580LLU,126583LLU,1LLU),_1ea84b541_Range32(126585LLU,126588LLU,1LLU),_1ea84b541_Range32(126590LLU,126592LLU,2LLU),_1ea84b541_Range32(126593LLU,126601LLU,1LLU),_1ea84b541_Range32(126603LLU,126619LLU,1LLU),_1ea84b541_Range32(126625LLU,126627LLU,1LLU),_1ea84b541_Range32(126629LLU,126633LLU,1LLU),_1ea84b541_Range32(126635LLU,126651LLU,1LLU),_1ea84b541_Range32(131072LLU,173791LLU,1LLU),_1ea84b541_Range32(173824LLU,177977LLU,1LLU),_1ea84b541_Range32(177984LLU,178205LLU,1LLU),_1ea84b541_Range32(178208LLU,183969LLU,1LLU),_1ea84b541_Range32(183984LLU,191456LLU,1LLU),_1ea84b541_Range32(194560LLU,195101LLU,1LLU),_1ea84b541_Range32(196608LLU,201546LLU,1LLU),_1ea84b541_Range32(201552LLU,205743LLU,1LLU)}),6LL));
static jule::Array<jule::I32,5> _1ea7465e5_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
static jule::Array<jule::Str,6> _1ea7465e5_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
static jule::Array<jule::Str,12> _1ea7465e5_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
static jule::Array<jule::Str,2> _1ea7465e5_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
static jule::Array<jule::Str,11> _1ea7465e5_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
static jule::Array<_1ea703492_KindPair,47> _1ea703492_KEYWORDS = jule::Array<_1ea703492_KindPair,47>({_1ea703492_KindPair(jule::Str("i8", 2),1LLU),_1ea703492_KindPair(jule::Str("i16", 3),1LLU),_1ea703492_KindPair(jule::Str("i32", 3),1LLU),_1ea703492_KindPair(jule::Str("i64", 3),1LLU),_1ea703492_KindPair(jule::Str("u8", 2),1LLU),_1ea703492_KindPair(jule::Str("u16", 3),1LLU),_1ea703492_KindPair(jule::Str("u32", 3),1LLU),_1ea703492_KindPair(jule::Str("u64", 3),1LLU),_1ea703492_KindPair(jule::Str("f32", 3),1LLU),_1ea703492_KindPair(jule::Str("f64", 3),1LLU),_1ea703492_KindPair(jule::Str("uint", 4),1LLU),_1ea703492_KindPair(jule::Str("int", 3),1LLU),_1ea703492_KindPair(jule::Str("uintptr", 7),1LLU),_1ea703492_KindPair(jule::Str("bool", 4),1LLU),_1ea703492_KindPair(jule::Str("str", 3),1LLU),_1ea703492_KindPair(jule::Str("any", 3),1LLU),_1ea703492_KindPair(jule::Str("true", 4),6LLU),_1ea703492_KindPair(jule::Str("false", 5),6LLU),_1ea703492_KindPair(jule::Str("nil", 3),6LLU),_1ea703492_KindPair(jule::Str("const", 5),9LLU),_1ea703492_KindPair(jule::Str("ret", 3),4LLU),_1ea703492_KindPair(jule::Str("type", 4),10LLU),_1ea703492_KindPair(jule::Str("for", 3),12LLU),_1ea703492_KindPair(jule::Str("break", 5),13LLU),_1ea703492_KindPair(jule::Str("continue", 8),14LLU),_1ea703492_KindPair(jule::Str("in", 2),15LLU),_1ea703492_KindPair(jule::Str("if", 2),16LLU),_1ea703492_KindPair(jule::Str("else", 4),17LLU),_1ea703492_KindPair(jule::Str("use", 3),19LLU),_1ea703492_KindPair(jule::Str("pub", 3),21LLU),_1ea703492_KindPair(jule::Str("goto", 4),22LLU),_1ea703492_KindPair(jule::Str("enum", 4),24LLU),_1ea703492_KindPair(jule::Str("struct", 6),25LLU),_1ea703492_KindPair(jule::Str("co", 2),26LLU),_1ea703492_KindPair(jule::Str("match", 5),27LLU),_1ea703492_KindPair(jule::Str("self", 4),28LLU),_1ea703492_KindPair(jule::Str("trait", 5),29LLU),_1ea703492_KindPair(jule::Str("impl", 4),30LLU),_1ea703492_KindPair(jule::Str("cpp", 3),31LLU),_1ea703492_KindPair(jule::Str("fall", 4),32LLU),_1ea703492_KindPair(jule::Str("fn", 2),33LLU),_1ea703492_KindPair(jule::Str("let", 3),34LLU),_1ea703492_KindPair(jule::Str("unsafe", 6),35LLU),_1ea703492_KindPair(jule::Str("mut", 3),36LLU),_1ea703492_KindPair(jule::Str("defer", 5),37LLU),_1ea703492_KindPair(jule::Str("static", 6),38LLU),_1ea703492_KindPair(jule::Str("error", 5),40LLU)});
static jule::Array<_1ea703492_KindPair,39> _1ea703492_BASIC_OPS = jule::Array<_1ea703492_KindPair,39>({_1ea703492_KindPair(jule::Str("::", 2),23LLU),_1ea703492_KindPair(jule::Str(":", 1),11LLU),_1ea703492_KindPair(jule::Str(";", 1),5LLU),_1ea703492_KindPair(jule::Str(",", 1),8LLU),_1ea703492_KindPair(jule::Str("...", 3),7LLU),_1ea703492_KindPair(jule::Str(".", 1),20LLU),_1ea703492_KindPair(jule::Str("+=", 2),7LLU),_1ea703492_KindPair(jule::Str("-=", 2),7LLU),_1ea703492_KindPair(jule::Str("*=", 2),7LLU),_1ea703492_KindPair(jule::Str("/=", 2),7LLU),_1ea703492_KindPair(jule::Str("%=", 2),7LLU),_1ea703492_KindPair(jule::Str("<<=", 3),7LLU),_1ea703492_KindPair(jule::Str(">>=", 3),7LLU),_1ea703492_KindPair(jule::Str("^=", 2),7LLU),_1ea703492_KindPair(jule::Str("&=", 2),7LLU),_1ea703492_KindPair(jule::Str("|=", 2),7LLU),_1ea703492_KindPair(jule::Str("==", 2),7LLU),_1ea703492_KindPair(jule::Str("!=", 2),7LLU),_1ea703492_KindPair(jule::Str(">=", 2),7LLU),_1ea703492_KindPair(jule::Str("<=", 2),7LLU),_1ea703492_KindPair(jule::Str("&&", 2),7LLU),_1ea703492_KindPair(jule::Str("||", 2),7LLU),_1ea703492_KindPair(jule::Str("<<", 2),7LLU),_1ea703492_KindPair(jule::Str(">>", 2),7LLU),_1ea703492_KindPair(jule::Str("++", 2),7LLU),_1ea703492_KindPair(jule::Str("--", 2),7LLU),_1ea703492_KindPair(jule::Str("+", 1),7LLU),_1ea703492_KindPair(jule::Str("-", 1),7LLU),_1ea703492_KindPair(jule::Str("*", 1),7LLU),_1ea703492_KindPair(jule::Str("/", 1),7LLU),_1ea703492_KindPair(jule::Str("%", 1),7LLU),_1ea703492_KindPair(jule::Str("&", 1),7LLU),_1ea703492_KindPair(jule::Str("|", 1),7LLU),_1ea703492_KindPair(jule::Str("^", 1),7LLU),_1ea703492_KindPair(jule::Str("!", 1),7LLU),_1ea703492_KindPair(jule::Str("<", 1),7LLU),_1ea703492_KindPair(jule::Str(">", 1),7LLU),_1ea703492_KindPair(jule::Str("=", 1),7LLU),_1ea703492_KindPair(jule::Str("#", 1),39LLU)});
static jule::Ptr<_1ec1c55b1_TypeAlias> _1ec2ee113_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(jule::Ptr<_1ea6ee955_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_1ea7465e5_Token(),jule::Str(),jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Ptr<_1ec1c55b1_TypeAlias> _1ec2ee113_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(jule::Ptr<_1ea6ee955_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_1ea7465e5_Token(),jule::Str(),jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
static jule::Slice<jule::Str> _1ea6bb812_FLAGS = nullptr;
static jule::Slice<jule::Any> _1e9c6e03b_deads = nullptr;
static jule::Slice<jule::Any> _1e9c6e03b_checking = nullptr;
static jule::Any _1e9c6e03b_current = jule::Any(nullptr);
static jule::Any _1e9c6e03b_main_current = jule::Any(nullptr);
static jule::Array<jule::U8,12> _1d059016d_MDAYS = jule::Array<jule::U8,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
static jule::Slice<jule::U8> _1ec821b85_INDENT = nullptr;
static jule::Uintptr _1e8e5d46d_STDIN = _1e8e5d46d_get_std_handle(static_cast<jule::Uintptr>(18446744073709551606LLU));
static jule::Uintptr _1e8e5d46d_STDOUT = _1e8e5d46d_get_std_handle(static_cast<jule::Uintptr>(18446744073709551605LLU));
static jule::Ptr<_1ea84b541_RangeTable> _1ea858a26_LETTER = _1ea858a26__L;
static jule::Ptr<_1eb7c68e9_Trait> _1ec2ee113_BUILTIN_TRAIT_DISPOSE = jule::new_struct_ptr<_1eb7c68e9_Trait>(new( std::nothrow ) _1eb7c68e9_Trait(_1ea7465e5_Token(),jule::Str("Dispose", 7),true,jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_1eb627195_Fn>>({jule::new_struct_ptr<_1eb627195_Fn>(new( std::nothrow ) _1eb627195_Fn(jule::Ptr<_1eb9ed0d7_Sema>(),_1ea7465e5_Token(),jule::Bool(),jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Str("dispose", 7),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Str(),jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),jule::Ptr<_1eb627195_RetType>(),jule::Slice<jule::Ptr<_1eb627195_Param>>({jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("self", 4)))}),jule::Ptr<_1eb29bdd6_Struct>(),jule::Slice<jule::Ptr<_1eb627195_FnIns>>({jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool()))})))}),jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>()));
static jule::Uintptr _1e8e5d46d_STDERR = _1e8e5d46d_get_std_handle(static_cast<jule::Uintptr>(18446744073709551604LLU));
static jule::Array<_1e8e90769_accept_range,16> _1e8e90769_ACCEPT_RANGES = jule::Array<_1e8e90769_accept_range,16>({_1e8e90769_accept_range(128LLU,191LLU),_1e8e90769_accept_range(160LLU,191LLU),_1e8e90769_accept_range(128LLU,159LLU),_1e8e90769_accept_range(144LLU,191LLU),_1e8e90769_accept_range(128LLU,143LLU)});
static jule::Array<jule::Array<jule::Str,2>,4> _1e8d6c657_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,4>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)})});
static jule::Str _1e9c5b347_OS = jule::Str("windows", 7);
static jule::Str _1e9c5b347_ARCH = jule::Str("arm64", 5);
static jule::Array<jule::U8,256> _1e8e90769_FIRST = jule::Array<jule::U8,256>({});
static jule::Array<jule::U8,256> _1ea858a26__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});

inline void _1e8d8d535_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _1e8d8d535_AnsiEscape::_static_method_print(jule::Str _2021_escape,jule::Str _2034_text) {
	jule::out(_2021_escape);
	jule::out(_2034_text);
	_1e8d8d535_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8d8d535_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _1e8d8d535_Logger::_static_method_log_flat(_1e8ea7cc0_Log& _3125_l) {
	jule::outln(_3125_l._field_text);
}



inline void _1e8d8d535_Logger::_static_method_log_error(_1e8ea7cc0_Log& _3426_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_3426_l._field_text);
	_1e8d8d535_AnsiEscape::_static_method_reset();
	if (_3426_l._field_path.len() != 0LL) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_3426_l._field_path);
	}
	if ((_3426_l._field_row != 0LL) && (_3426_l._field_column != 0LL)) {
		jule::out(jule::Str(":", 1));
		jule::out(_1e9e077ac_itoa(_3426_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_1e9e077ac_itoa(_3426_l._field_column));
	}
	if (_3426_l._field_line.len() != 0LL) {
		jule::Str _5121_line = _3426_l._field_line.ltrim(jule::Str("\r\n\v\b ", 5));
		jule::I64 _5221_offset = (_3426_l._field_line.len() - _5121_line.len()) + 1LL;
		jule::I64 _5321_old_len = _5121_line.len();
		_5121_line=_5121_line.ltrim(jule::Str("\t", 1));
		if (_5321_old_len != _5121_line.len()) {
			_5221_offset+=static_cast<jule::I64>((_5321_old_len - _5121_line.len()) * 8LL);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _5917_row = _1e9e077ac_itoa(_3426_l._field_row);
		jule::out(_5917_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_5121_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_1e8d6c657_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5917_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_1e8d6c657_str_repeat(jule::Str(" ", 1),static_cast<jule::Int>(_3426_l._field_column - _5221_offset)));
		jule::out(jule::Str("^", 1));
		if (_3426_l._field_suggestion.len() != 0LL) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_1e8d6c657_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5917_row.len())));
			jule::out(jule::Str(" | ", 3));
			_1e8d8d535_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_3426_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _1e8d8d535_Logger::_static_method_log(_1e8ea7cc0_Log& _8020_l) {
	{
		auto &_match_expr{ _8020_l._field_kind };
		if (_match_expr == 0LLU) {
			_case_begin_4811076464:;
			{
				_1e8d8d535_Logger::_static_method_log_flat(_8020_l);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_4811076560:;
			{
				_1e8d8d535_Logger::_static_method_log_error(_8020_l);
			}
		}
		_match_end_4811076368:;
	}
}



inline void _1e8d8d535_Logger::_static_method_print_logs(jule::Slice<_1e8ea7cc0_Log>& _8827_logs) {
	{
		auto &expr = _8827_logs;
		auto it = expr.begin();
		_iter_begin_4811080464:;
		if (it != expr.end()) {
			_1e8ea7cc0_Log &_1e8d8d535_l = *it;
			{
				_1e8d8d535_Logger::_static_method_log(_1e8d8d535_l);
			}
			_iter_next_4811080464:;
			++it;
			goto _iter_begin_4811080464;
		}
		_iter_end_4811080464:;
	}
	jule::out(jule::Str("=== ", 4));
	jule::out(_1e9e077ac_itoa(static_cast<jule::I64>(_8827_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8d8d535_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8e90769_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _1e904e87d_LazyBuff::_method_index(jule::Int _5324_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[_5324_i];
	}
	return (*this)._field_path[_5324_i];
}



inline void _1e904e87d_LazyBuff::_method_append(jule::U8 _6025_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[(*this)._field_w] == _6025_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*this)._field_path.len()));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,(*this)._field_w)));
	}
	(*this)._field_buff[(*this)._field_w]=_6025_c;
	((*this)._field_w)++;
}



inline jule::Str _1e904e87d_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len + (*this)._field_w);
	}
	return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,(*this)._field_w));
}







std::ostream &operator<<(std::ostream &_Stream, const _1e904e87d_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8e1506d_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>> _1e8e1506d_Directory::_static_method_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>();
	jule::Slice<jule::U16> _1613_utf16_path = _1e8ed85a3_utf16_from_str(_1524_path);
	_WDIR* _1717_dir = _1e8e5d46d__wopendir((&(_1613_utf16_path[0LL])));
	if (_1717_dir == nullptr) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>>(_1e8da4bde_get_last_fs_error());
	}
	for (;;) {
		{
			struct _wdirent* _2217_dirent = _1e8e5d46d__wreaddir(_1717_dir);
			if (_2217_dirent == nullptr) {
				goto _iter_end_4789267856;
			}
			jule::Str _2617_name = _1e8ed85a3_u16_ptr_to_str(((jule::U16*)(_2217_dirent->d_name)));
			jule::Ptr<_1e8e2d5d6_Status> _2721_stat = ({
				auto except = _1e8e2d5d6_Status::_static_method_of(_1e904e87d_join(jule::Slice<jule::Str>({_1524_path,_2617_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>>(except.error);
					return jule::Exceptional<jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>>(except.error);
				} jule::Ptr<_1e8e2d5d6_Status>();});
			});
			_1538_dirents.push(jule::new_struct<_1e8e1506d_DirEntry>(new( std::nothrow ) _1e8e1506d_DirEntry(_2617_name,_2721_stat)));
		}
	_iter_next_4789267856:;
	}
	_iter_end_4789267856:;
	_1e8e5d46d__wclosedir(_1717_dir);
	return jule::Exceptional(jule::Any(),_1538_dirents);
}



inline jule::VoidExceptional _1e8e1506d_Directory::_static_method_create(jule::Str _4026_path) {
	jule::Slice<jule::U16> _4513_utf16_path = _1e8ed85a3_utf16_from_str(_4026_path);
	if ((!(_1e8e5d46d_create_directory((&(_4513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_1e8da4bde_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1e8e1506d_Directory::_static_method_remove(jule::Str _5426_path) {
	jule::Slice<jule::U16> _5513_utf16_path = _1e8ed85a3_utf16_from_str(_5426_path);
	if ((!(_1e8e5d46d_remove_directory((&(_5513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_1e8da4bde_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _1e8e1506d_Directory &_Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e8e1b6a1_File> _1e8e1b6a1_File::_static_method_new(jule::Uintptr _4523_handle) {
	return jule::new_struct<_1e8e1b6a1_File>(new( std::nothrow ) _1e8e1b6a1_File(_4523_handle));
}



inline jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>> _1e8e1b6a1_File::_static_method_create(jule::Str _5526_path) {
	return jule::Exceptional(jule::Any(),({
		auto except = _1e8e1b6a1_File::_static_method_open(_5526_path,770LL,438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>>(except.error);
			return jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>>(except.error);
		} jule::Ptr<_1e8e1b6a1_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> _1e8e1b6a1_File::_static_method_read(jule::Str _6724_path) {
	jule::Ptr<_1e8e2d5d6_Status> _6813_s = ({
		auto except = _1e8e2d5d6_Status::_static_method_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_1e8e2d5d6_Status>();});
	});
	if ((!(_6813_s->_method_is_reg()))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(14LLU);
	}
	if (_6813_s->_field_size == 0LL) {
		return jule::Exceptional(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	}
	jule::Ptr<_1e8e1b6a1_File> _7817_f = ({
		auto except = _1e8e1b6a1_File::_static_method_open(_6724_path,0LL,0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_1e8e1b6a1_File>();});
	});
	__JULE_DEFER({
		({
			auto except = _7817_f->_method_close();
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/fs/file.jule:79:17"));
		});
	});
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>(_6813_s->_field_size));
	jule::Int _8213_n = ({
		auto except = _7817_f->_method_read(_8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Int();});
	});
	return jule::Exceptional(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional _1e8e1b6a1_File::_static_method_write(jule::Str _9125_path,jule::Slice<jule::U8> _9136_data,jule::Int _9150_perm) {
	jule::Ptr<_1e8e1b6a1_File> _9217_f = ({
		auto except = _1e8e1b6a1_File::_static_method_open(_9125_path,769LL,_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_1e8e1b6a1_File>();});
	});
	({
		auto except = _9217_f->_method_write(_9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = _9217_f->_method_close();
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I64> _1e8e1b6a1_File::_method_seek(jule::I64 _10527_offset,jule::Int _10540_origin) {
	jule::I64 _10613_pos = _1e8e79de6_seek(static_cast<jule::Int>((*this)._field_handle),_10527_offset,static_cast<jule::Int>(_10540_origin));
	if (_10613_pos == -1LL) {
		return jule::Exceptional<jule::I64>(_1e8da4bde_get_last_fs_error());
	}
	return jule::Exceptional(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _1e8e1b6a1_File::_method_close(void) {
	if (_1e8e79de6_close(static_cast<jule::Int>((*this)._field_handle)) == -1LL) {
		return jule::VoidExceptional(_1e8da4bde_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>> _1e8e1b6a1_File::_static_method_open(jule::Str _2124_path,jule::Int _2135_flag,jule::Int _2148_mode) {
	jule::Slice<jule::U16> _2213_utf16_path = _1e8ed85a3_utf16_from_str(_2124_path);
	jule::Int _2313_handle = _1e8e5d46d__wopen((&(_2213_utf16_path[0LL])),static_cast<jule::Int>(_2135_flag),_2148_mode);
	if (_2313_handle == -1LL) {
		return jule::Exceptional<jule::Ptr<_1e8e1b6a1_File>>(_1e8da4bde_get_last_fs_error());
	}
	return jule::Exceptional(jule::Any(),_1e8e1b6a1_File::_static_method_new(static_cast<jule::Uintptr>(_2313_handle)));
}



inline jule::VoidExceptional _1e8e1b6a1_File::_static_method_remove(jule::Str _3426_path) {
	jule::Slice<jule::U16> _3513_utf16_path = _1e8ed85a3_utf16_from_str(_3426_path);
	if ((!(_1e8e5d46d_delete_file((&(_3513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_1e8da4bde_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _1e8e1b6a1_File::_method_write(jule::Slice<jule::U8> _4928_buff) {
	jule::Int _4945_n = jule::Int();
	if (_4928_buff.len() == 0LL) {
		_4945_n = 0LL;
		return jule::Exceptional(jule::Any(),_4945_n);
	}
	if (_1e8e3030d_is_console_handle((*this)._field_handle)) {
		jule::Slice<jule::U16> _5517_utf16_buff = _1e8ed85a3_utf16_from_str(static_cast<jule::Str>(_4928_buff));
		jule::Bool _5617_ok = _1e8e5d46d_write_console((*this)._field_handle,(&(_5517_utf16_buff[0LL])),static_cast<jule::I64>(_5517_utf16_buff.len()),_4945_n,nullptr);
		if ((!(_5617_ok))) {
			return jule::Exceptional<jule::Int>(_1e8da4bde_get_last_fs_error());
		}
		return jule::Exceptional(jule::Any(),_4945_n);
	}
	_4945_n=static_cast<jule::Int>(static_cast<jule::Int>(_1e8e79de6_write(static_cast<jule::Int>((*this)._field_handle),(&(_4928_buff[0LL])),static_cast<jule::Uint>(_4928_buff.len()))));
	if (_4945_n == -1LL) {
		return jule::Exceptional<jule::Int>(_1e8da4bde_get_last_fs_error());
	}
	return jule::Exceptional(jule::Any(),_4945_n);
}



inline jule::Exceptional<jule::Int> _1e8e1b6a1_File::_method_read(jule::Slice<jule::U8> _8231_buff) {
	jule::Int _8248_n = jule::Int();
	if (_8231_buff.len() == 0LL) {
		_8248_n = 0LL;
		return jule::Exceptional(jule::Any(),_8248_n);
	}
	if (_1e8e3030d_is_console_handle((*this)._field_handle)) {
		jule::Slice<jule::U16> _8821_codepage = jule::Slice<jule::U16>::alloc(static_cast<jule::I64>(_8231_buff.len()));
		jule::Bool _8917_ok = _1e8e5d46d_read_console((*this)._field_handle,(&(_8821_codepage[0LL])),static_cast<jule::I64>(_8231_buff.len()),_8248_n,nullptr);
		if ((!(_8917_ok))) {
			return jule::Exceptional<jule::Int>(_1e8da4bde_get_last_fs_error());
		}
		jule::Slice<jule::I32> _9617_runes = _1e8eee29a_decode(_8821_codepage.slice(0LL,_8248_n));
		_8248_n=0LL;
		{
			auto &expr = _9617_runes;
			auto it = expr.begin();
			_iter_begin_4789365184:;
			if (it != expr.end()) {
				jule::I32 &_1e8e3030d_r = *it;
				{
					jule::Int _9921_size = _1e8e90769_rune_len(_1e8e3030d_r);
					if ((_8248_n + _9921_size) > _8231_buff.len()) {
						goto _iter_end_4789365184;
					}
					_1e8e90769_encode_rune(_8231_buff.slice(_8248_n),_1e8e3030d_r);
					_8248_n+=_9921_size;
				}
				_iter_next_4789365184:;
				++it;
				goto _iter_begin_4789365184;
			}
			_iter_end_4789365184:;
		}
		return jule::Exceptional(jule::Any(),_8248_n);
	}
	_8248_n=static_cast<jule::Int>(static_cast<jule::Int>(_1e8e79de6_read(static_cast<jule::Int>((*this)._field_handle),(&(_8231_buff[0LL])),static_cast<jule::Uint>(_8231_buff.len()))));
	if (_8248_n == -1LL) {
		return jule::Exceptional<jule::Int>(_1e8da4bde_get_last_fs_error());
	}
	return jule::Exceptional(jule::Any(),_8248_n);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8e1b6a1_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e8e2d5d6_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _1e8e2d5d6_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}



inline jule::Exceptional<jule::Ptr<_1e8e2d5d6_Status>> _1e8e2d5d6_Status::_static_method_of(jule::Str _1222_path) {
	jule::Slice<jule::U16> _1313_utf16_path = _1e8ed85a3_utf16_from_str(_1222_path);
	struct stat _1417_handle = (struct stat){};
	jule::Int _1513_code = _1e8e5d46d_wstat((&(_1313_utf16_path[0LL])),(&(_1417_handle)));
	if (_1513_code != -1LL) {
		return jule::Exceptional(jule::Any(),jule::new_struct<_1e8e2d5d6_Status>(new( std::nothrow ) _1e8e2d5d6_Status(static_cast<jule::Uint>(_1417_handle.st_mode),static_cast<jule::Uint>(_1417_handle.st_size))));
	}
	return jule::Exceptional<jule::Ptr<_1e8e2d5d6_Status>>(_1e8da4bde_get_last_fs_error());
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8e2d5d6_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e9c9a7a4_Cmd> _1e9c9a7a4_Cmd::_static_method_new(jule::Str _2923_file) {
	return jule::new_struct<_1e9c9a7a4_Cmd>(new( std::nothrow ) _1e9c9a7a4_Cmd(_2923_file,-1LL,jule::Slice<jule::Str>(),jule::Slice<jule::Str>()));
}



inline jule::Int _1e9c9a7a4_Cmd::_method_pid(void) {
	return (*this)._field__pid;
}



inline jule::Str _1e9c9a7a4_Cmd::_method_file(void) {
	return (*this)._field__fle;
}



inline jule::VoidExceptional _1e9c9a7a4_Cmd::_method_spawn(void) {
	if ((*this)._field__pid != -1LL) {
		return jule::VoidExceptional(jule::Str("command already spawned", 23));
	}
	(*this)._field__pid=static_cast<jule::Int>(((((*this)._field_env == nullptr)) ? (static_cast<jule::Int>(__jule_execvp((*this)._field__fle,(*this)._field_args))) : (static_cast<jule::Int>(__jule_execve((*this)._field__fle,(*this)._field_args,(*this)._field_env)))));
	if ((*this)._field__pid == -1LL) {
		return jule::VoidExceptional(_1e9c9a60b_get_last_process_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1e9c9a7a4_Cmd::_method_kill(void) {
	if (TerminateProcess(((HANDLE)((*this)._field__pid)),0LL)) {
		(*this)._field__pid=-1LL;
		return jule::VoidExceptional();
	}
	return jule::VoidExceptional(jule::Str("kill failed", 11)); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _1e9c9a7a4_Cmd::_method_wait(void) {
	if ((*this)._field__pid == -1LL) {
		return jule::Exceptional<jule::Int>(jule::Str("command is not spawned", 22));
	}
	jule::Int _5117_status = 0LL;
	if (_cwait(((signed*)((&(_5117_status)))),(*this)._field__pid,0LL) == -1LL) {
		return jule::Exceptional<jule::Int>(_1e9c9a60b_get_last_process_error());
	}
	(*this)._field__pid=-1LL;
	return jule::Exceptional(jule::Any(),_5117_status);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e9c9a7a4_Cmd &_Src) {
	_Stream << "Cmd{";
	_Stream << "_fle:" << _Src._field__fle << ", ";
	_Stream << "_pid:" << _Src._field__pid << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8ea7cc0_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e9c59675_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e9c59675_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea033a09_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea033a09_Decimal::_method_set(jule::Str _22922_s) {
	jule::Bool _22932_ok = jule::Bool();
	jule::Int _23017_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23017_i >= _22922_s.len()) {
		return _22932_ok;
	}
	{
		if (_22922_s[_23017_i] == '+') {
			_case_begin_4792776272:;
			{
				(_23017_i)++;
			}
		}
		else if (_22922_s[_23017_i] == '-') {
			_case_begin_4792776368:;
			{
				(*this)._field_neg=true;
				(_23017_i)++;
			}
		}
		_match_end_4792775504:;
	}
	jule::Bool _24717_sawdot = false;
	jule::Bool _24817_sawdigits = false;
	for (; _23017_i < _22922_s.len(); (_23017_i)++) {
		{
			{
				if (_22922_s[_23017_i] == '.') {
					_case_begin_4792782464:;
					{
						if (_24717_sawdot) {
							return _22932_ok;
						}
						_24717_sawdot=true;
						(*this)._field_dp=(*this)._field_nd;
						goto _iter_next_4792780608;
					}
				}
				else if (('0' <= _22922_s[_23017_i]) && (_22922_s[_23017_i] <= '9')) {
					_case_begin_4792782576:;
					{
						_24817_sawdigits=true;
						if ((_22922_s[_23017_i] == '0') && ((*this)._field_nd == 0LL)) {
							((*this)._field_dp)--;
							goto _iter_next_4792780608;
						}
						if ((*this)._field_nd < 800LL) {
							(*this)._field_d[(*this)._field_nd]=_22922_s[_23017_i];
							((*this)._field_nd)++;
						} else if (_22922_s[_23017_i] != '0') {
							(*this)._field_trunc=true;
						}
						goto _iter_next_4792780608;
					}
				}
				_match_end_4792782240:;
			}
			goto _iter_end_4792780608;
		}
	_iter_next_4792780608:;
	}
	_iter_end_4792780608:;
	if ((!(_24817_sawdigits))) {
		return _22932_ok;
	}
	if ((!(_24717_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23017_i < _22922_s.len()) && (_1e9c683ba_lower(_22922_s[_23017_i]) == 'e')) {
		(_23017_i)++;
		if (_23017_i >= _22922_s.len()) {
			return _22932_ok;
		}
		jule::Int _29121_esign = 1LL;
		if (_22922_s[_23017_i] == '+') {
			(_23017_i)++;
		} else if (_22922_s[_23017_i] == '-') {
			(_23017_i)++;
			_29121_esign=-1LL;
		}
		if (((_23017_i >= _22922_s.len()) || (_22922_s[_23017_i] < '0')) || (_22922_s[_23017_i] > '9')) {
			return _22932_ok;
		}
		jule::Int _30121_e = 0LL;
		for (; (_23017_i < _22922_s.len()) && (('0' <= _22922_s[_23017_i]) && (_22922_s[_23017_i] <= '9')); (_23017_i)++) {
			{
				if (_30121_e < 10000LL) {
					_30121_e=static_cast<jule::Int>(((_30121_e * 10LL) + static_cast<jule::Int>(_22922_s[_23017_i])) - '0');
				}
			}
		_iter_next_4792797296:;
		}
		_iter_end_4792797296:;
		(*this)._field_dp+=static_cast<jule::Int>(_30121_e * _29121_esign);
	}
	if (_23017_i != _22922_s.len()) {
		return _22932_ok;
	}
	_22932_ok=true;
	return _22932_ok;
}



inline std::tuple<jule::U64,jule::Bool> _1ea033a09_Decimal::_method_float_bits(_1e9c59675_FloatInfo& _31830_flt) {
	jule::U64 _31848_b = jule::U64();
	jule::Bool _31856_overflow = jule::Bool();
	jule::Int _31917_exp = 0LL;
	jule::U64 _32017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_32017_mant=0LLU;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_32017_mant=0LLU;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	_31917_exp=0LL;
	while ((*this)._field_dp > 0LL) {
		{
			jule::Int _34521_n = 0LL;
			if ((*this)._field_dp >= _1e9c4b6bc_POWTAB.len()) {
				_34521_n=27LL;
			} else {
				_34521_n=_1e9c4b6bc_POWTAB[(*this)._field_dp];
			}
			(*this)._method_shift(static_cast<jule::Int>((-(_34521_n))));
			_31917_exp+=_34521_n;
		}
	_iter_next_4792813664:;
	}
	_iter_end_4792813664:;
	while (((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d.__at(0LL) < '5'))) {
		{
			jule::Int _35521_n = 0LL;
			if ((-((*this)._field_dp)) >= _1e9c4b6bc_POWTAB.len()) {
				_35521_n=27LL;
			} else {
				_35521_n=_1e9c4b6bc_POWTAB[(-((*this)._field_dp))];
			}
			(*this)._method_shift(_35521_n);
			_31917_exp-=_35521_n;
		}
	_iter_next_4792816576:;
	}
	_iter_end_4792816576:;
	(_31917_exp)--;
	if (_31917_exp < (_31830_flt._field_bias + 1LL)) {
		jule::Int _37217_n = (_31830_flt._field_bias + 1LL) - _31917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_37217_n))));
		_31917_exp+=_37217_n;
	}
	if ((_31917_exp - _31830_flt._field_bias) >= static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(1LL + _31830_flt._field_mantbits));
	_32017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_32017_mant == (2LL << _31830_flt._field_mantbits)) {
		_32017_mant>>=1LLU;
		(_31917_exp)++;
		if ((_31917_exp - _31830_flt._field_bias) >= static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_32017_mant & (1LL << _31830_flt._field_mantbits)) == 0LL) {
		_31917_exp=_31830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_32017_mant=0LLU;
	_31917_exp=static_cast<jule::Int>(((1LL << _31830_flt._field_expbits) - 1LL) + static_cast<jule::Uint>(_31830_flt._field_bias));
	_31856_overflow=true;
	_julec_label_out:;
	jule::U64 _40817_bits = _32017_mant & ((static_cast<jule::U64>(1LLU) << _31830_flt._field_mantbits) - 1LL);
	_40817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_31917_exp - _31830_flt._field_bias) & static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) << _31830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_40817_bits|=static_cast<jule::Uint>((1LL << _31830_flt._field_mantbits) << _31830_flt._field_expbits);
	}
	_31848_b = _40817_bits;
	return std::make_tuple(_31848_b,_31856_overflow);
}



inline void _1ea033a09_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>();
	jule::Int _15617_n = 0LL;
	while (_15229_v > 0LL) {
		{
			jule::U64 _15817_v1 = jule::unsafe_div(_15229_v,10LL);
			_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
			_15317_buf[_15617_n]=static_cast<jule::U8>(_15229_v + '0');
			(_15617_n)++;
			_15229_v=_15817_v1;
		}
	_iter_next_4792846640:;
	}
	_iter_end_4792846640:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	for (; _15617_n >= 0LL; (_15617_n)--) {
		{
			(*this)._field_d[(*this)._field_nd]=_15317_buf[_15617_n];
			((*this)._field_nd)++;
		}
	_iter_next_4792850000:;
	}
	_iter_end_4792850000:;
	(*this)._field_dp=(*this)._field_nd;
	_1ea033a09_trim((*this));
}



inline void _1ea033a09_Decimal::_method_shift(jule::Int _17728_k) {
	{
		if ((*this)._field_nd == 0LL) {
			_case_begin_4792854240:;
		}
		else if (_17728_k > 0LL) {
			_case_begin_4792854352:;
			{
				while (_17728_k > 60LLU) {
					{
						_1ea033a09_left_shift((*this),60LLU);
						_17728_k-=60LL;
					}
				_iter_next_4792855184:;
				}
				_iter_end_4792855184:;
				_1ea033a09_left_shift((*this),static_cast<jule::Uint>(_17728_k));
			}
		}
		else if (_17728_k < 0LL) {
			_case_begin_4792854464:;
			{
				while (_17728_k < -60LL) {
					{
						_1ea033a09_right_shift((*this),60LLU);
						_17728_k+=60LL;
					}
				_iter_next_4792858624:;
				}
				_iter_end_4792858624:;
				_1ea033a09_right_shift((*this),static_cast<jule::Uint>((-(_17728_k))));
			}
		}
		_match_end_4792854000:;
	}
}



inline void _1ea033a09_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_1ea033a09_trim((*this));
}



inline void _1ea033a09_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	for (; _21217_i >= 0LL; (_21217_i)--) {
		{
			jule::U8 _21417_c = (*this)._field_d[_21217_i];
			if (_21417_c < '9') {
				((*this)._field_d[_21217_i])++;
				(*this)._field_nd=static_cast<jule::Int>(_21217_i + 1LL);
				return;
			}
		}
	_iter_next_4792866560:;
	}
	_iter_end_4792866560:;
	(*this)._field_d.__at(0LL)='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _1ea033a09_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_1ea033a09_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _1ea033a09_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	for (; (_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd); (_25017_i)++) {
		{
			_25117_n=static_cast<jule::U64>((_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[_25017_i] - '0'));
		}
	_iter_next_4792872384:;
	}
	_iter_end_4792872384:;
	for (; _25017_i < (*this)._field_dp; (_25017_i)++) {
		{
			_25117_n*=10LLU;
		}
	_iter_next_4792881776:;
	}
	_iter_end_4792881776:;
	if (_1ea033a09_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea033a09_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea84b541_FoldPair &_Src) {
	_Stream << "FoldPair{";
	_Stream << "from:" << _Src._field_from << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea84b541_CaseRange &_Src) {
	_Stream << "CaseRange{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "delta:" << _Src._field_delta;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea84b541_Range16 &_Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea84b541_Range32 &_Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea84b541_RangeTable &_Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _1ea7465e5_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return 0LLU;
	}
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_4797381104:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_4797381344:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_4797381440:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_4797381536:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_4797380640:;
			{
				return 1LLU;
			}
		}
		else {
			_case_begin_4797379936:;
			{
				return 0LLU;
			}
		}
		_match_end_4797379632:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea7465e5_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea701c98_File::_method_is_ok(void) {
	({
		auto except = _1e8e2d5d6_Status::_static_method_of((*this)._field__path);
		if (!except.ok()) {
			return false;
		}
	});
	return true;
}



inline void _1ea701c98_File::_method_fill(jule::Slice<jule::U8> _2431_data) {
	(*this)._field_data=_2431_data;
}



inline jule::Str _1ea701c98_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _1ea701c98_File::_method_dir(void) {
	return _1e904e87d_dir((*this)._field__path);
}



inline jule::Str _1ea701c98_File::_method_name(void) {
	return _1e904e87d_base((*this)._field__path);
}



inline jule::Uintptr _1ea701c98_File::_method_addr(void) {
	return ((jule::Uintptr)((&((*this)))));
}



inline jule::Slice<_1ea7465e5_Token> _1ea701c98_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _1ea701c98_File::_method_get_row(jule::Int _4426_row) {
	jule::Int _4517_n = 0LL;
	jule::Int _4617_line_start = 0LL;
	jule::Int _4717_i = 0LL;
	for (; _4717_i < (*this)._field_data.len(); (_4717_i)++) {
		{
			if ((*this)._field_data[_4717_i] != '\n') {
				goto _iter_next_4797404032;
			}
			(_4517_n)++;
			if (_4517_n == _4426_row) {
				return static_cast<jule::Str>((*this)._field_data.slice(_4617_line_start,_4717_i));
			}
			_4617_line_start=static_cast<jule::Int>(_4717_i + 1LL);
		}
	_iter_next_4797404032:;
	}
	_iter_end_4797404032:;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea701c98_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea703492_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _1ea703492_Lex::_method_push_err(jule::Str _40427_fmt,jule::Slice<jule::Any> _40440_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1ea703492_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_40427_fmt,_40440_args));
}



inline void _1ea703492_Lex::_method_push_err_tok(_1ea7465e5_Token& _40932_token,jule::Str _40946_fmt) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1ea703492_make_err(_40932_token._field_row,_40932_token._field_column,(*this)._field_file,_40946_fmt,jule::Slice<jule::Any>()));
}



inline void _1ea703492_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	while ((*this)._field_pos < (*this)._field_file->_field_data.len()) {
		{
			_1ea7465e5_Token _41921_token = (*this)._method_token();
			if (_41921_token._field_id != 0LLU) {
				(*this)._field_tokens = jule::alloc_for_append((*this)._field_tokens,1);(*this)._field_tokens.push(_41921_token);
			}
		}
	_iter_next_4797416992:;
	}
	_iter_end_4797416992:;
}



inline jule::Str _1ea703492_Lex::_method_id(jule::Slice<jule::U8>& _42822_ln) {
	if (_42822_ln.len() == 0LL) {
		return jule::Str();
	}
	jule::I32 _43214_r;
	jule::Int _43221_i;
	std::tie(_43214_r,_43221_i) = _1e8e90769_decode_rune(_42822_ln);
	if ((_43214_r != '_') && (!(_1ea7465e5_is_letter(_43214_r)))) {
		return jule::Str();
	}
	while (_43221_i < _42822_ln.len()) {
		{
			jule::I32 _43818_r;
			jule::Int _43821_n;
			std::tie(_43818_r,_43821_n) = _1e8e90769_decode_rune(_42822_ln.slice(_43221_i));
			if (((_43818_r != '_') && (!(_1ea7465e5_is_decimal(static_cast<jule::U8>(_43818_r))))) && (!(_1ea7465e5_is_letter(_43818_r)))) {
				(*this)._field_pos+=_43221_i;
				return static_cast<jule::Str>(_42822_ln.slice(0LL,_43221_i));
			}
			_43221_i+=_43821_n;
		}
	_iter_next_4797428976:;
	}
	_iter_end_4797428976:;
	(*this)._field_pos+=static_cast<jule::I64>(_42822_ln.len());
	return static_cast<jule::Str>(_42822_ln);
}



inline jule::Slice<jule::U8> _1ea703492_Lex::_method_resume(void) {
	jule::Int _45317_i = (*this)._field_pos;
	for (; _45317_i < (*this)._field_file->_field_data.len(); (_45317_i)++) {
		{
			jule::I32 _45517_r = static_cast<jule::I32>((*this)._field_file->_field_data[_45317_i]);
			if (_1ea7465e5_is_space(_45517_r)) {
				((*this)._field_pos)++;
				{
					auto &_match_expr{ _45517_r };
					if (_match_expr == '\n') {
						_case_begin_4797441296:;
						{
							(*this)._method_new_line();
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_4797441392:;
						{
							(*this)._field_column+=8LL;
						}
					}
					else {
						_case_begin_4797439568:;
						{
							((*this)._field_column)++;
						}
					}
					_match_end_4797439904:;
				}
				goto _iter_next_4797435968;
			}
			jule::Int _46621_j = _45317_i;
			for (; _46621_j < (*this)._field_file->_field_data.len(); (_46621_j)++) {
				{
					if ((*this)._field_file->_field_data[_46621_j] == '\n') {
						goto _iter_end_4797438336;
					}
				}
			_iter_next_4797438336:;
			}
			_iter_end_4797438336:;
			return (*this)._field_file->_field_data.slice(_45317_i,_46621_j);
		}
	_iter_next_4797435968:;
	}
	_iter_end_4797435968:;
	return nullptr;
}



inline void _1ea703492_Lex::_method_lex_line_comment(_1ea7465e5_Token& _47840_token) {
	jule::Int _47913_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*this)._field_file->_field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _48317_r = (*this)._field_file->_field_data[(*this)._field_pos];
			if ((_48317_r == '\n') || (_48317_r == '\r')) {
				if ((*this)._method_is_first_token_of_line()) {
					_47840_token._field_id=18LLU;
					_47840_token._field_kind=static_cast<jule::Str>((*this)._field_file->_field_data.slice(_47913_start,(*this)._field_pos));
				}
				return;
			}
		}
	_iter_next_4797447856:;
	}
	_iter_end_4797447856:;
	if ((*this)._method_is_first_token_of_line()) {
		_47840_token._field_id=18LLU;
		_47840_token._field_kind=static_cast<jule::Str>((*this)._field_file->_field_data.slice(_47913_start));
	}
}



inline void _1ea703492_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*this)._field_file->_field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _50217_r = (*this)._field_file->_field_data[(*this)._field_pos];
			if (_50217_r == '\r') {
				goto _iter_next_4797457232;
			}
			if (_50217_r == '\n') {
				(*this)._method_new_line();
				goto _iter_next_4797457232;
			}
			(*this)._field_column+=1LL;
			if (((((*this)._field_pos + 1LL) < (*this)._field_file->_field_data.len()) && (_50217_r == '*')) && ((*this)._field_file->_field_data[(*this)._field_pos + 1LL] == '/')) {
				(*this)._field_column+=2LL;
				(*this)._field_pos+=2LL;
				return;
			}
		}
	_iter_next_4797457232:;
	}
	_iter_end_4797457232:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _1ea703492_Lex::_method_num(jule::Slice<jule::U8>& _52323_txt) {
	jule::Str _52338_lit = jule::Str();
	_52338_lit=_1ea703492_hex_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_1ea703492_octal_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_1ea703492_binary_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_1ea703492_common_num(_52323_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_52338_lit.len());
	return _52338_lit;
}



inline jule::Str _1ea703492_Lex::_method_escape_seq(jule::Slice<jule::U8>& _54230_txt) {
	jule::Str _54317_seq = jule::Str();
	if (_54230_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto &_match_expr{ _54230_txt[1LL] };
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_4797482592:;
			{
				(*this)._field_pos+=2LL;
				return static_cast<jule::Str>(_54230_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_4797483440:;
			{
				_54317_seq=_1ea703492_big_unicode_point_escape(_54230_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_4797483536:;
			{
				_54317_seq=_1ea703492_little_unicode_point_escape(_54230_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_4797482032:;
			{
				_54317_seq=_1ea703492_hex_byte_escape(_54230_txt);
			}
		}
		else {
			_case_begin_4797480528:;
			{
				_54317_seq=_1ea703492_byte_escape(_54230_txt);
			}
		}
		_match_end_4797481360:;
	}
	_julec_label_end:;
	if (_54317_seq == jule::Str()) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	}
	(*this)._field_pos+=static_cast<jule::I64>(_54317_seq.len());
	return _54317_seq;
}



inline jule::Str _1ea703492_Lex::_method_get_rune(jule::Slice<jule::U8>& _57628_txt,jule::Bool _57641_raw) {
	if ((!(_57641_raw)) && (_57628_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_57628_txt);
	}
	jule::I32 _58114_r;
	jule::Int _58117_n;
	std::tie(_58114_r,_58117_n) = _1e8e90769_decode_rune(_57628_txt);
	(*this)._field_pos+=_58117_n;
	return static_cast<jule::Str>(_58114_r);
}



inline jule::Str _1ea703492_Lex::_method_lex_rune(jule::Slice<jule::U8>& _58628_txt) {
	jule::Str _58717_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _58917_n = 0LL;
	jule::Int _59017_i = 1LL;
	for (; _59017_i < _58628_txt.len(); (_59017_i)++) {
		{
			if (_58628_txt[_59017_i] == '\r') {
				goto _iter_next_4797506528;
			}
			if (_58628_txt[_59017_i] == '\n') {
				(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*this)._field_pos)++;
				(*this)._method_new_line();
				return jule::Str();
			}
			jule::Slice<jule::U8> _60217_part = _58628_txt.slice(_59017_i);
			jule::Str _60317_r = (*this)._method_get_rune(_60217_part,false);
			_58717_run+=_60317_r;
			jule::I64 _60517_length = _60317_r.len();
			(*this)._field_column+=_60517_length;
			if (_60317_r == jule::Str("'", 1)) {
				((*this)._field_pos)++;
				goto _iter_end_4797506528;
			}
			if (_60517_length > 1LL) {
				_59017_i+=static_cast<jule::I64>(_60517_length - 1LL);
			}
			(_58917_n)++;
		}
	_iter_next_4797506528:;
	}
	_iter_end_4797506528:;
	if (_58917_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if (_58917_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	}
	return _58717_run;
}



inline jule::Str _1ea703492_Lex::_method_lex_str(void) {
	jule::Str _62717_s = jule::Str();
	jule::U8 _62813_mark = (*this)._field_file->_field_data[(*this)._field_pos];
	((*this)._field_pos)++;
	jule::Bool _63013_raw = _62813_mark == '`';
	_62717_s+=static_cast<jule::Str>(_62813_mark);
	((*this)._field_column)++;
	while ((*this)._field_pos < (*this)._field_file->_field_data.len()) {
		{
			jule::U8 _63517_ch = (*this)._field_file->_field_data[(*this)._field_pos];
			if (_63517_ch == '\r') {
				goto _iter_next_4797524240;
			}
			if (_63517_ch == '\n') {
				(*this)._method_new_line();
				if ((!(_63013_raw))) {
					(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*this)._field_pos)++;
					return jule::Str();
				}
			}
			jule::Slice<jule::U8> _64721_part = (*this)._field_file->_field_data.slice((*this)._field_pos);
			jule::Str _64817_r = (*this)._method_get_rune(_64721_part,_63013_raw);
			_62717_s+=_64817_r;
			(*this)._field_column+=static_cast<jule::I64>(_64817_r.len());
			if (_63517_ch == _62813_mark) {
				goto _iter_end_4797524240;
			}
		}
	_iter_next_4797524240:;
	}
	_iter_end_4797524240:;
	return _62717_s;
}



inline jule::Bool _1ea703492_Lex::_method_is_first_token_of_line(void) {
	return (*this)._field_column == 1LL;
}



inline void _1ea703492_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _1ea703492_Lex::_method_is_op(jule::Slice<jule::U8>& _66825_txt,jule::Str _66838_kind,jule::Uint _66849_id,_1ea7465e5_Token& _66867_t) {
	if ((!(_1ea703492_bytes_has_prefix(_66825_txt,_66838_kind)))) {
		return false;
	}
	_66867_t._field_kind=_66838_kind;
	_66867_t._field_id=_66849_id;
	(*this)._field_pos+=static_cast<jule::I64>(_66838_kind.len());
	return true;
}



inline jule::Bool _1ea703492_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _67932_txt,_1ea7465e5_Token& _67950_tok) {
	{
		auto &expr = _1ea703492_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_4797544944:;
		if (it != expr.end()) {
			_1ea703492_KindPair &_1ea703492_pair = *it;
			{
				if ((*this)._method_is_op(_67932_txt,_1ea703492_pair._field_kind,_1ea703492_pair._field_id,_67950_tok)) {
					return true;
				}
			}
			_iter_next_4797544944:;
			++it;
			goto _iter_begin_4797544944;
		}
		_iter_end_4797544944:;
	}
	return false;
}



inline jule::Bool _1ea703492_Lex::_method_lex_id(jule::Slice<jule::U8>& _68926_txt,_1ea7465e5_Token& _68944_t) {
	jule::Str _69013_lex = (*this)._method_id(_68926_txt);
	if (_69013_lex == jule::Str()) {
		return false;
	}
	_68944_t._field_kind=_69013_lex;
	_68944_t._field_id=2LLU;
	return true;
}



inline jule::Bool _1ea703492_Lex::_method_lex_num(jule::Slice<jule::U8>& _70027_txt,_1ea7465e5_Token& _70045_t) {
	jule::Str _70113_lex = (*this)._method_num(_70027_txt);
	if (_70113_lex == jule::Str()) {
		return false;
	}
	_70045_t._field_kind=_70113_lex;
	_70045_t._field_id=6LLU;
	return true;
}



inline _1ea7465e5_Token _1ea703492_Lex::_method_token(void) {
	_1ea7465e5_Token _71317_t = _1ea7465e5_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _71513_txt = (*this)._method_resume();
	if (_71513_txt == nullptr) {
		return _71317_t;
	}
	_71317_t._field_column=(*this)._field_column;
	_71317_t._field_row=(*this)._field_row;
	{
		if ((*this)._method_lex_num(_71513_txt,_71317_t)) {
			_case_begin_4797567072:;
		}
		else if (_71513_txt[0LL] == '\'') {
			_case_begin_4797563456:;
			{
				_71317_t._field_kind=(*this)._method_lex_rune(_71513_txt);
				_71317_t._field_id=6LLU;
				return _71317_t;
			}
		}
		else if ((_71513_txt[0LL] == '\"') || (_71513_txt[0LL] == '`')) {
			_case_begin_4797563552:;
			{
				_71317_t._field_kind=(*this)._method_lex_str();
				_71317_t._field_id=6LLU;
				return _71317_t;
			}
		}
		else if (_1ea703492_bytes_has_prefix(_71513_txt,jule::Str("//", 2))) {
			_case_begin_4797563648:;
			{
				(*this)._method_lex_line_comment(_71317_t);
				return _71317_t;
			}
		}
		else if (_1ea703492_bytes_has_prefix(_71513_txt,jule::Str("/*", 2))) {
			_case_begin_4797563744:;
			{
				(*this)._method_lex_range_comment();
				return _71317_t;
			}
		}
		else if ((*this)._method_is_op(_71513_txt,jule::Str("(", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str(")", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("{", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("}", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("[", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("]", 1),3LLU,_71317_t) || (*this)._method_lex_basic_ops(_71513_txt,_71317_t)) {
			_case_begin_4797567568:;
		}
		else if ((*this)._method_lex_id(_71513_txt,_71317_t)) {
			_case_begin_4797567664:;
			{
				{
					auto &expr = _1ea703492_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_4797582080:;
					if (it != expr.end()) {
						_1ea703492_KindPair &_1ea703492_pair = *it;
						{
							if (_1ea703492_pair._field_kind == _71317_t._field_kind) {
								_71317_t._field_id=_1ea703492_pair._field_id;
								goto _iter_end_4797582080;
							}
						}
						_iter_next_4797582080:;
						++it;
						goto _iter_begin_4797582080;
					}
					_iter_end_4797582080:;
				}
			}
		}
		else {
			_case_begin_4797561664:;
			{
				jule::I32 _76518_r;
				jule::Int _76521_sz;
				std::tie(_76518_r,_76521_sz) = _1e8e90769_decode_rune(_71513_txt);
				(*this)._method_push_err(jule::Str("undefined token: @", 18),jule::Slice<jule::Any>({jule::Any(_76518_r)}));
				((*this)._field_column)++;
				(*this)._field_pos+=_76521_sz;
				return _71317_t;
			}
		}
		_match_end_4797561584:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_71317_t._field_kind.len());
	return _71317_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea703492_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ecac9_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_SptrTypeDecl &_Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_PtrTypeDecl::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_ArrTypeDecl::_method_auto_sized(void) {
	return (*this)._field_size == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea713260_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea713260_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea722e73_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _1ea722e73_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _1ea722e73_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _1ea722e73_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stmts.len();
}



inline jule::Bool _1ea722e73_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stmts.len();
}



inline void _1ea722e73_ScopeParser::_method_push_err(_1ea7465e5_Token _17827_token,jule::Str _17841_fmt) {
	(*this)._field_p->_method_push_err(_17827_token,_17841_fmt,jule::Slice<jule::Any>());
}



inline void _1ea722e73_ScopeParser::_method_push_suggestion(jule::Str _18134_fmt,jule::Slice<jule::Any> _18147_args) {
	(*this)._field_p->_method_push_suggestion(_18134_fmt,_18147_args);
}



inline void _1ea722e73_ScopeParser::_method_insert_as_next(jule::Slice<_1ea7465e5_Token>& _18538_tokens) {
	(*this)._field_stmts=jule::append((*this)._field_stmts.slice(0LL,(*this)._field_pos + 1LL),(*this)._field_stmts.slice((*this)._field_pos));
	(*this)._field_stmts[(*this)._field_pos + 1LL]=jule::new_struct<_1ea722e73_Stmt>(new( std::nothrow ) _1ea722e73_Stmt(_18538_tokens,jule::Bool()));
}



inline jule::Ptr<_1ea722e73_Stmt> _1ea722e73_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stmts[(*this)._field_pos];
}



inline jule::Ptr<_1ea6ee955_ScopeTree> _1ea722e73_ScopeParser::_method_build_scope(jule::Slice<_1ea7465e5_Token>& _19535_tokens) {
	jule::Ptr<_1ea6ee955_ScopeTree> _19617_s = _1ea722e73_new_scope();
	_19617_s->_field_parent=(*this)._field_s;
	_1ea722e73_ScopeParser _19817_ssp = _1ea722e73_ScopeParser((*this)._field_p,jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Slice<jule::Ptr<_1ea722e73_Stmt>>(),jule::Int());
	_19817_ssp._method_build(_19535_tokens,_19617_s);
	return _19617_s;
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_var_st(jule::Slice<_1ea7465e5_Token>& _20536_tokens) {
	jule::Ptr<_1ea6ee955_VarDecl> _20617_v = (*this)._field_p->_method_build_var(_20536_tokens);
	_20617_v->_field_scope=(*this)._field_s;
	return jule::Any(_20617_v);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_ret_st(jule::Slice<_1ea7465e5_Token> _21135_tokens) {
	jule::Ptr<_1ea6ee955_RetSt> _21217_st = jule::new_struct<_1ea6ee955_RetSt>(new( std::nothrow ) _1ea6ee955_RetSt(_21135_tokens[0LL],jule::Ptr<_1ea6ee955_Expr>()));
	if (_21135_tokens.len() > 1LL) {
		_21135_tokens=_21135_tokens.slice(1LL);
		_21217_st->_field_expr=(*this)._field_p->_method_build_expr(_21135_tokens);
	}
	return jule::Any(_21217_st);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_while_next_iter(jule::Ptr<_1ea722e73_Stmt>& _22245_s) {
	jule::Ptr<_1ea6ee955_Iter> _22317_it = jule::new_struct<_1ea6ee955_Iter>(new( std::nothrow ) _1ea6ee955_Iter(_22245_s->_field_tokens[0LL],jule::Any(),jule::Ptr<_1ea6ee955_ScopeTree>()));
	jule::Slice<_1ea7465e5_Token> _22617_tokens = _22245_s->_field_tokens.slice(1LL);
	jule::Ptr<_1ea6ee955_WhileKind> _22717_kind = jule::new_struct<_1ea6ee955_WhileKind>(new( std::nothrow ) _1ea6ee955_WhileKind());
	if (_22617_tokens.len() > 0LL) {
		_22717_kind->_field_expr=(*this)._field_p->_method_build_expr(_22617_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err(_22317_it->_field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_22617_tokens=(*this)._method_next()->_field_tokens;
	jule::Slice<_1ea7465e5_Token> _23917_st_tokens = _1ea715b69_get_block_expr(_22617_tokens);
	if (_23917_st_tokens.len() > 0LL) {
		jule::Ptr<_1ea722e73_Stmt> _24121_stmt = jule::new_struct<_1ea722e73_Stmt>(new( std::nothrow ) _1ea722e73_Stmt(_23917_st_tokens,_22245_s->_field_terminated));
		_22717_kind->_field_next_token=_23917_st_tokens[0LL];
		_22717_kind->_field_next=(*this)._method_build_st(_24121_stmt);
	}
	jule::I64 _24917_i = _23917_st_tokens.len();
	jule::Slice<_1ea7465e5_Token> _25017_block_tokens = _1eb381c13_range(_24917_i,jule::Str("{", 1),jule::Str("}", 1),_22617_tokens);
	if (_25017_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_22317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_24917_i < _22617_tokens.len()) {
		(*this)._method_push_err(_22617_tokens[_24917_i],jule::Str("invalid syntax", 14));
	}
	_22317_it->_field_scope=(*this)._method_build_scope(_25017_block_tokens);
	_22317_it->_field_kind=jule::Any(_22717_kind);
	return jule::Any(_22317_it);
}



inline jule::Ptr<_1ea6ee955_WhileKind> _1ea722e73_ScopeParser::_method_build_while_iter_kind(jule::Slice<_1ea7465e5_Token>& _26745_tokens) {
	return jule::new_struct<_1ea6ee955_WhileKind>(new( std::nothrow ) _1ea6ee955_WhileKind((*this)._field_p->_method_build_expr(_26745_tokens),jule::Any(),_1ea7465e5_Token()));
}



inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _1ea722e73_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_1ea7465e5_Token>& _27350_toks) {
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _27418_vars;
	jule::Slice<_1e8ea7cc0_Log> _27424_errs;
	std::tie(_27418_vars,_27424_errs) = _1eb381c13_parts(_27350_toks,8LLU,true);
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_27424_errs);
	return _27418_vars;
}



inline jule::Ptr<_1ea6ee955_VarDecl> _1ea722e73_ScopeParser::_method_build_range_kind_key(jule::Slice<_1ea7465e5_Token>& _27944_tokens) {
	if (_27944_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_VarDecl> _28317_key = jule::new_struct<_1ea6ee955_VarDecl>(new( std::nothrow ) _1ea6ee955_VarDecl(jule::Ptr<_1ea6ee955_ScopeTree>(),_27944_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1ea6ee955_CommentGroup>(),jule::Ptr<_1ea6ee955_TypeDecl>(),jule::Ptr<_1ea6ee955_Expr>()));
	if (_28317_key->_field_token._field_id == 36LLU) {
		_28317_key->_field_mutable=true;
		if (_27944_tokens.len() == 1LL) {
			(*this)._method_push_err(_28317_key->_field_token,jule::Str("invalid syntax", 14));
		}
		_28317_key->_field_token=_27944_tokens[1LL];
	} else if (_27944_tokens.len() > 1LL) {
		(*this)._method_push_err(_27944_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if (_28317_key->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_28317_key->_field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	_28317_key->_field_ident=_28317_key->_field_token._field_kind;
	return _28317_key;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> _1ea722e73_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_1ea7465e5_Token>>& _30445_parts) {
	jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> _30517_keys = nullptr;
	{
		auto &expr = _30445_parts;
		auto it = expr.begin();
		_iter_begin_4798321568:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea722e73_tokens = *it;
			{
				_30517_keys.push((*this)._method_build_range_kind_key(_1ea722e73_tokens));
			}
			_iter_next_4798321568:;
			++it;
			goto _iter_begin_4798321568;
		}
		_iter_end_4798321568:;
	}
	return _30517_keys;
}



inline void _1ea722e73_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ptr<_1ea6ee955_RangeKind>& _31251_rng,jule::Slice<_1ea7465e5_Token>& _31273_tokens) {
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _31317_key_tokens = (*this)._method_get_range_kind_keys_tokens(_31273_tokens);
	if (_31317_key_tokens.len() == 0LL) {
		return;
	}
	if (_31317_key_tokens.len() > 2LL) {
		(*this)._method_push_err(_31251_rng->_field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> _32017_keys = (*this)._method_build_range_kind_keys(_31317_key_tokens);
	_31251_rng->_field_key_a=_32017_keys[0LL];
	if (_32017_keys.len() > 1LL) {
		_31251_rng->_field_key_b=_32017_keys[1LL];
	}
}



inline void _1ea722e73_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ptr<_1ea6ee955_RangeKind>& _32754_rng,jule::Slice<_1ea7465e5_Token>& _32776_tokens) {
	jule::Int _32817_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _32917_rang = _1eb381c13_range(_32817_i,jule::Str("(", 1),jule::Str(")", 1),_32776_tokens);
	if (_32817_i < _32776_tokens.len()) {
		(*this)._method_push_err(_32754_rng->_field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_32754_rng,_32917_rang);
}



inline void _1ea722e73_ScopeParser::_method_setup_range_kind_keys(jule::Ptr<_1ea6ee955_RangeKind>& _33645_rng,jule::Slice<_1ea7465e5_Token>& _33667_tokens) {
	if (_33667_tokens[0LL]._field_id == 3LLU) {
		if (_33667_tokens[0LL]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_33667_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_33645_rng,_33667_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_33645_rng,_33667_tokens);
}



inline jule::Ptr<_1ea6ee955_RangeKind> _1ea722e73_ScopeParser::_method_build_range_iter_kind(jule::Slice<_1ea7465e5_Token>& _34845_var_tokens,jule::Slice<_1ea7465e5_Token>& _34914_expr_tokens,_1ea7465e5_Token& _34941_in_token) {
	jule::Ptr<_1ea6ee955_RangeKind> _35017_rng = jule::new_struct<_1ea6ee955_RangeKind>(new( std::nothrow ) _1ea6ee955_RangeKind(_34941_in_token,jule::Ptr<_1ea6ee955_Expr>(),jule::Ptr<_1ea6ee955_VarDecl>(),jule::Ptr<_1ea6ee955_VarDecl>()));
	if (_34914_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_35017_rng->_field_in_token,jule::Str("expression missing", 18));
		return _35017_rng;
	}
	_35017_rng->_field_expr=(*this)._field_p->_method_build_expr(_34914_expr_tokens);
	if (_34845_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_35017_rng,_34845_var_tokens);
	}
	return _35017_rng;
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_common_iter_kind(jule::Slice<_1ea7465e5_Token>& _36446_tokens,_1ea7465e5_Token& _36464_err_tok) {
	jule::Int _36517_brace_n = 0LL;
	{
		auto &expr = _36446_tokens;
		auto it = expr.begin();
		_iter_begin_4798360944:;
		if (it != expr.end()) {
			jule::Int _1ea722e73_i = it - expr.begin();
			_1ea7465e5_Token _1ea722e73_tok = *it;
			{
				if (_1ea722e73_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _1ea722e73_tok._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4798365376:;
							{
								(_36517_brace_n)++;
								goto _iter_next_4798360944;
							}
						}
						else {
							_case_begin_4798363600:;
							{
								(_36517_brace_n)--;
							}
						}
						_match_end_4798363696:;
					}
				}
				if (_36517_brace_n != 0LL) {
					goto _iter_next_4798360944;
				}
				{
					auto &_match_expr{ _1ea722e73_tok._field_id };
					if (_match_expr == 15LLU) {
						_case_begin_4798366736:;
						{
							jule::Slice<_1ea7465e5_Token> _38425_decl_tokens = _36446_tokens.slice(0LL,_1ea722e73_i);
							jule::Slice<_1ea7465e5_Token> _38525_expr_tokens = _36446_tokens.slice(_1ea722e73_i + 1LL);
							return jule::Any((*this)._method_build_range_iter_kind(_38425_decl_tokens,_38525_expr_tokens,_1ea722e73_tok));
						}
					}
					_match_end_4798363328:;
				}
			}
			_iter_next_4798360944:;
			++it;
			_1ea722e73_i++;
			goto _iter_begin_4798360944;
		}
		_iter_end_4798360944:;
	}
	return jule::Any((*this)._method_build_while_iter_kind(_36446_tokens));
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_common_iter(jule::Slice<_1ea7465e5_Token> _39240_tokens) {
	jule::Ptr<_1ea6ee955_Iter> _39317_it = jule::new_struct<_1ea6ee955_Iter>(new( std::nothrow ) _1ea6ee955_Iter(_39240_tokens[0LL],jule::Any(),jule::Ptr<_1ea6ee955_ScopeTree>()));
	_39240_tokens=_39240_tokens.slice(1LL);
	if (_39240_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err(_39317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	jule::Slice<_1ea7465e5_Token> _40317_expr_tokens = _1ea715b69_get_block_expr(_39240_tokens);
	if (_40317_expr_tokens.len() > 0LL) {
		_39317_it->_field_kind=(*this)._method_build_common_iter_kind(_40317_expr_tokens,_39317_it->_field_token);
	}
	jule::I64 _40717_i = _40317_expr_tokens.len();
	jule::Slice<_1ea7465e5_Token> _40817_scope_tokens = _1eb381c13_range(_40717_i,jule::Str("{", 1),jule::Str("}", 1),_39240_tokens);
	if (_40817_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_39317_it->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_40717_i < _39240_tokens.len()) {
		(*this)._method_push_err(_39240_tokens[_40717_i],jule::Str("invalid syntax", 14));
	}
	_39317_it->_field_scope=(*this)._method_build_scope(_40817_scope_tokens);
	return jule::Any(_39317_it);
}



inline jule::Any _1ea722e73_ScopeParser::_method_buid_iter_st(jule::Ptr<_1ea722e73_Stmt>& _42236_st) {
	if (_42236_st->_field_terminated) {
		return (*this)._method_build_while_next_iter(_42236_st);
	}
	return (*this)._method_build_common_iter(_42236_st->_field_tokens);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_break_st(jule::Slice<_1ea7465e5_Token>& _42938_tokens) {
	jule::Ptr<_1ea6ee955_BreakSt> _43017_brk = jule::new_struct<_1ea6ee955_BreakSt>(new( std::nothrow ) _1ea6ee955_BreakSt(_42938_tokens[0LL],_1ea7465e5_Token()));
	if (_42938_tokens.len() > 1LL) {
		if (_42938_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			_43017_brk->_field_label=_42938_tokens[1LL];
			if (_42938_tokens.len() > 2LL) {
				(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_43017_brk);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_cont_st(jule::Slice<_1ea7465e5_Token>& _44737_tokens) {
	jule::Ptr<_1ea6ee955_ContSt> _44817_cont = jule::new_struct<_1ea6ee955_ContSt>(new( std::nothrow ) _1ea6ee955_ContSt(_44737_tokens[0LL],_1ea7465e5_Token()));
	if (_44737_tokens.len() > 1LL) {
		if (_44737_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			_44817_cont->_field_label=_44737_tokens[1LL];
			if (_44737_tokens.len() > 2LL) {
				(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_44817_cont);
}



inline jule::Ptr<_1ea6ee955_If> _1ea722e73_ScopeParser::_method_build_if(jule::Slice<_1ea7465e5_Token>& _46532_tokens) {
	jule::Ptr<_1ea6ee955_If> _46617_model = jule::new_struct<_1ea6ee955_If>(new( std::nothrow ) _1ea6ee955_If(_46532_tokens[0LL],jule::Ptr<_1ea6ee955_Expr>(),jule::Ptr<_1ea6ee955_ScopeTree>()));
	_46532_tokens=_46532_tokens.slice(1LL);
	jule::Slice<_1ea7465e5_Token> _47017_expr_tokens = _1ea715b69_get_block_expr(_46532_tokens);
	jule::Int _47117_i = 0LL;
	if (_47017_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_46617_model->_field_token,jule::Str("expression missing", 18));
	} else {
		_47117_i=static_cast<jule::I64>(_47017_expr_tokens.len());
	}
	jule::Slice<_1ea7465e5_Token> _47717_scope_tokens = _1eb381c13_range(_47117_i,jule::Str("{", 1),jule::Str("}", 1),_46532_tokens);
	if (_47717_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_46617_model->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_47117_i < _46532_tokens.len()) {
		if (_46532_tokens[_47117_i]._field_id == 17LLU) {
			_46532_tokens=_46532_tokens.slice(_47117_i);
		} else {
			(*this)._method_push_err(_46532_tokens[_47117_i],jule::Str("invalid syntax", 14));
			_46532_tokens=nullptr;
		}
	}
	_46617_model->_field_expr=(*this)._field_p->_method_build_expr(_47017_expr_tokens);
	_46617_model->_field_scope=(*this)._method_build_scope(_47717_scope_tokens);
	return _46617_model;
}



inline jule::Ptr<_1ea6ee955_Else> _1ea722e73_ScopeParser::_method_build_else(jule::Slice<_1ea7465e5_Token>& _49734_tokens) {
	jule::Ptr<_1ea6ee955_Else> _49817_els = jule::new_struct<_1ea6ee955_Else>(new( std::nothrow ) _1ea6ee955_Else(_49734_tokens[0LL],jule::Ptr<_1ea6ee955_ScopeTree>()));
	_49734_tokens=_49734_tokens.slice(1LL);
	jule::Int _50217_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _50317_scope_tokens = _1eb381c13_range(_50217_i,jule::Str("{", 1),jule::Str("}", 1),_49734_tokens);
	if (_50317_scope_tokens == nullptr) {
		if (_50217_i < _49734_tokens.len()) {
			(*this)._method_push_err(_49817_els->_field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err(_49817_els->_field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	if (_50217_i < _49734_tokens.len()) {
		(*this)._method_push_err(_49734_tokens[_50217_i],jule::Str("invalid syntax", 14));
	}
	_49817_els->_field_scope=(*this)._method_build_scope(_50317_scope_tokens);
	return _49817_els;
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_if_else_chain(jule::Slice<_1ea7465e5_Token> _52142_tokens) {
	jule::Ptr<_1ea6ee955_Conditional> _52217_chain = jule::new_struct<_1ea6ee955_Conditional>(new( std::nothrow ) _1ea6ee955_Conditional((*this)._method_build_if(_52142_tokens),jule::Slice<jule::Ptr<_1ea6ee955_If>>(),jule::Ptr<_1ea6ee955_Else>()));
	if (_52217_chain->_field_head == nullptr) {
		return jule::Any(nullptr);
	}
	while (_52142_tokens.len() != 0LL) {
		{
			if (_52142_tokens[0LL]._field_id != 17LLU) {
				goto _iter_end_4798449520;
			}
			if ((_52142_tokens.len() > 1LL) && (_52142_tokens[1LL]._field_id == 16LLU)) {
				_52142_tokens=_52142_tokens.slice(1LL);
				jule::Ptr<_1ea6ee955_If> _53425_elif = (*this)._method_build_if(_52142_tokens);
				_52217_chain->_field_tail = jule::alloc_for_append(_52217_chain->_field_tail,1);_52217_chain->_field_tail.push(_53425_elif);
				goto _iter_next_4798449520;
			}
			_52217_chain->_field_default=(*this)._method_build_else(_52142_tokens);
			goto _iter_end_4798449520;
		}
	_iter_next_4798449520:;
	}
	_iter_end_4798449520:;
	return jule::Any(_52217_chain);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_comment_st(_1ea7465e5_Token& _54436_token) {
	return jule::Any(_1eb381c13_build_comment(_54436_token));
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_co_call_st(jule::Slice<_1ea7465e5_Token> _54839_tokens) {
	jule::Ptr<_1ea6ee955_CoExpr> _54917_c = jule::new_struct<_1ea6ee955_CoExpr>(new( std::nothrow ) _1ea6ee955_CoExpr(_54839_tokens[0LL],jule::Ptr<_1ea6ee955_Expr>()));
	_54839_tokens=_54839_tokens.slice(1LL);
	_54917_c->_field_expr=(*this)._field_p->_method_build_expr(_54839_tokens);
	return jule::Any(_54917_c);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_goto_st(jule::Slice<_1ea7465e5_Token>& _55737_tokens) {
	jule::Ptr<_1ea6ee955_GotoSt> _55817_gt = jule::new_struct<_1ea6ee955_GotoSt>(new( std::nothrow ) _1ea6ee955_GotoSt(_55737_tokens[0LL],_1ea7465e5_Token()));
	if (_55737_tokens.len() == 1LL) {
		(*this)._method_push_err(_55817_gt->_field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if (_55737_tokens.len() > 2LL) {
		(*this)._method_push_err(_55737_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_1ea7465e5_Token _56717_ident_token = _55737_tokens[1LL];
	if (_56717_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_56717_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return jule::Any(_55817_gt);
	}
	_55817_gt->_field_label=_56717_ident_token;
	return jule::Any(_55817_gt);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_fall_st(jule::Slice<_1ea7465e5_Token>& _57737_tokens) {
	jule::Ptr<_1ea6ee955_FallSt> _57817_fll = jule::new_struct<_1ea6ee955_FallSt>(new( std::nothrow ) _1ea6ee955_FallSt(_57737_tokens[0LL]));
	if (_57737_tokens.len() > 1LL) {
		(*this)._method_push_err(_57737_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_57817_fll);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_type_alias_st(jule::Slice<_1ea7465e5_Token>& _58743_tokens) {
	jule::Ptr<_1ea6ee955_TypeAliasDecl> _58817_tad = (*this)._field_p->_method_build_type_alias_decl(_58743_tokens);
	_58817_tad->_field_scope=(*this)._field_s;
	return jule::Any(_58817_tad);
}



inline void _1ea722e73_ScopeParser::_method_push_case_expr(jule::Slice<_1ea7465e5_Token> _59337_tokens,_1ea7465e5_Token _59358_token,jule::Bool _5949_type_match,jule::Slice<jule::Ptr<_1ea6ee955_Expr>>& _59432_exprs) {
	if (_59337_tokens.len() == 0LL) {
		return;
	}
	if (_5949_type_match) {
		jule::Int _60021_i = 0LL;
		jule::Ptr<_1ea6ee955_TypeDecl> _60122_t;
		jule::Bool _60125_ok;
		std::tie(_60122_t,_60125_ok) = (*this)._field_p->_method_build_type(_59337_tokens,(&(_60021_i)),true);
		if (_60125_ok) {
			_59432_exprs.push(jule::new_struct<_1ea6ee955_Expr>(new( std::nothrow ) _1ea6ee955_Expr(_59358_token,jule::Any(_60122_t))));
		}
		if (_60021_i < _59337_tokens.len()) {
			(*this)._method_push_err(_59337_tokens[_60021_i],jule::Str("invalid syntax", 14));
		}
		return;
	}
	_59432_exprs.push((*this)._field_p->_method_build_expr(_59337_tokens));
}



inline jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _1ea722e73_ScopeParser::_method_build_case_exprs(jule::Slice<_1ea7465e5_Token>& _61640_tokens,jule::Bool _61657_type_match) {
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _61717_exprs = jule::Slice<jule::Ptr<_1ea6ee955_Expr>>::alloc(0LL,1LL);
	jule::Int _61917_brace_n = 0LL;
	jule::Int _62017_j = 0LL;
	{
		auto &expr = _61640_tokens;
		auto it = expr.begin();
		_iter_begin_4798505872:;
		if (it != expr.end()) {
			jule::Int _1ea722e73_i = it - expr.begin();
			_1ea7465e5_Token _1ea722e73_tok = *it;
			{
				if (_1ea722e73_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _1ea722e73_tok._field_kind };
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_4798510336:;
							{
								(_61917_brace_n)++;
							}
						}
						else {
							_case_begin_4798508560:;
							{
								(_61917_brace_n)--;
							}
						}
						_match_end_4798508656:;
					}
					goto _iter_next_4798505872;
				} else if (_61917_brace_n != 0LL) {
					goto _iter_next_4798505872;
				}
				{
					if ((_1ea722e73_tok._field_id == 7LLU) && (_1ea722e73_tok._field_kind == jule::Str("|", 1))) {
						_case_begin_4798511264:;
						{
							jule::Slice<_1ea7465e5_Token> _63821_expr_tokens = _61640_tokens.slice(_62017_j,_1ea722e73_i);
							if (_63821_expr_tokens.len() == 0LL) {
								(*this)._method_push_err(_1ea722e73_tok,jule::Str("expression missing", 18));
							} else {
								(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_1ea722e73_i),_1ea722e73_tok,_61657_type_match,_61717_exprs);
							}
							_62017_j=static_cast<jule::Int>(_1ea722e73_i + 1LL);
						}
					}
					else if (_1ea722e73_tok._field_id == 11LLU) {
						_case_begin_4798508112:;
						{
							(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_1ea722e73_i),_1ea722e73_tok,_61657_type_match,_61717_exprs);
							_61640_tokens=_61640_tokens.slice(_1ea722e73_i + 1LL);
							return _61717_exprs;
						}
					}
					_match_end_4798510848:;
				}
			}
			_iter_next_4798505872:;
			++it;
			_1ea722e73_i++;
			goto _iter_begin_4798505872;
		}
		_iter_end_4798505872:;
	}
	(*this)._method_push_err(_61640_tokens[0LL],jule::Str("invalid syntax", 14));
	_61640_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_1ea6ee955_ScopeTree> _1ea722e73_ScopeParser::_method_build_case_scope(jule::Slice<_1ea7465e5_Token>& _65740_tokens) {
	jule::Int _65817_n = 0LL;
	for (;;) {
		{
			jule::Int _66021_i = 0LL;
			jule::Slice<_1ea7465e5_Token> _66122_next;
			std::tie(_66122_next,std::ignore) = _1ea722e73_skip_st(_66021_i,_65740_tokens.slice(_65817_n));
			if (_66122_next.len() == 0LL) {
				goto _iter_end_4798523008;
			}
			_1ea7465e5_Token _66517_tok = _66122_next[0LL];
			if ((_66517_tok._field_id != 7LLU) || (_66517_tok._field_kind != jule::Str("|", 1))) {
				_65817_n+=_66021_i;
				goto _iter_next_4798523008;
			}
			jule::Slice<_1ea7465e5_Token> _67021_scope_tokens = _65740_tokens.slice(0LL,_65817_n);
			jule::Ptr<_1ea6ee955_ScopeTree> _67121_scope = (*this)._method_build_scope(_67021_scope_tokens);
			_65740_tokens=_65740_tokens.slice(_65817_n);
			return _67121_scope;
		}
	_iter_next_4798523008:;
	}
	_iter_end_4798523008:;
	jule::Ptr<_1ea6ee955_ScopeTree> _67517_scope = (*this)._method_build_scope(_65740_tokens);
	_65740_tokens=nullptr;
	return _67517_scope;
}



inline std::tuple<jule::Ptr<_1ea6ee955_Case>,jule::Bool> _1ea722e73_ScopeParser::_method_build_case(jule::Slice<_1ea7465e5_Token>& _68034_tokens,jule::Bool _68051_type_match) {
	jule::Ptr<_1ea6ee955_Case> _68117_c = jule::new_struct<_1ea6ee955_Case>(new( std::nothrow ) _1ea6ee955_Case(_68034_tokens[0LL],jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Slice<jule::Ptr<_1ea6ee955_Expr>>()));
	_68034_tokens=_68034_tokens.slice(1LL);
	_68117_c->_field_exprs=(*this)._method_build_case_exprs(_68034_tokens,_68051_type_match);
	_68117_c->_field_scope=(*this)._method_build_case_scope(_68034_tokens);
	jule::Bool _68713_is_default = _68117_c->_field_exprs.len() == 0LL;
	return std::make_tuple(_68117_c,_68713_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_1ea6ee955_Case>>,jule::Ptr<_1ea6ee955_Else>> _1ea722e73_ScopeParser::_method_build_cases(jule::Slice<_1ea7465e5_Token> _69134_tokens,jule::Bool _69151_type_match) {
	jule::Slice<jule::Ptr<_1ea6ee955_Case>> _69217_cases = nullptr;
	jule::Ptr<_1ea6ee955_Else> _69317_def = nullptr;
	jule::Bool _69417_def_not_last = false;
	while (_69134_tokens.len() > 0LL) {
		{
			_1ea7465e5_Token _69621_tok = _69134_tokens[0LL];
			if (_69621_tok._field_id == 18LLU) {
				_69134_tokens=_69134_tokens.slice(1LL);
				goto _iter_next_4798545824;
			}
			if ((_69621_tok._field_id != 7LLU) || (_69621_tok._field_kind != jule::Str("|", 1))) {
				(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_4798545824;
			}
			jule::Ptr<_1ea6ee955_Case> _70722_c;
			jule::Bool _70725_is_default;
			std::tie(_70722_c,_70725_is_default) = (*this)._method_build_case(_69134_tokens,_69151_type_match);
			if (_70725_is_default) {
				_70722_c->_field_token=_69621_tok;
				if (_69317_def == nullptr) {
					_69317_def=jule::new_struct<_1ea6ee955_Else>(new( std::nothrow ) _1ea6ee955_Else(_70722_c->_field_token,_70722_c->_field_scope));
				} else {
					(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				}
			} else {
				_69417_def_not_last=_69417_def_not_last || (_69317_def != nullptr);
				_69217_cases.push(_70722_c);
			}
		}
	_iter_next_4798545824:;
	}
	_iter_end_4798545824:;
	if (_69417_def_not_last) {
		(*this)._method_push_err(_69317_def->_field_token,jule::Str("default case should be last case", 32));
	}
	return std::make_tuple(_69217_cases,_69317_def);
}



inline jule::Ptr<_1ea6ee955_MatchCase> _1ea722e73_ScopeParser::_method_build_match_case(jule::Slice<_1ea7465e5_Token> _73139_tokens) {
	jule::Ptr<_1ea6ee955_MatchCase> _73217_m = jule::new_struct<_1ea6ee955_MatchCase>(new( std::nothrow ) _1ea6ee955_MatchCase(_73139_tokens[0LL],jule::Bool(),jule::Ptr<_1ea6ee955_Expr>(),jule::Slice<jule::Ptr<_1ea6ee955_Case>>(),jule::Ptr<_1ea6ee955_Else>()));
	_73139_tokens=_73139_tokens.slice(1LL);
	if ((_73139_tokens.len() > 0LL) && (_73139_tokens[0LL]._field_id == 10LLU)) {
		_73217_m->_field_type_match=true;
		_73139_tokens=_73139_tokens.slice(1LL);
	}
	jule::Slice<_1ea7465e5_Token> _74217_expr_tokens = _1ea715b69_get_block_expr(_73139_tokens);
	if (_74217_expr_tokens.len() > 0LL) {
		_73217_m->_field_expr=(*this)._field_p->_method_build_expr(_74217_expr_tokens);
	} else if (_73217_m->_field_type_match) {
		(*this)._method_push_err(_73217_m->_field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _74917_i = _74217_expr_tokens.len();
	jule::Slice<_1ea7465e5_Token> _75017_block_toks = _1eb381c13_range(_74917_i,jule::Str("{", 1),jule::Str("}", 1),_73139_tokens);
	if (_75017_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err(_73217_m->_field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie(_73217_m->_field_cases,_73217_m->_field_default) = (*this)._method_build_cases(_75017_block_toks,_73217_m->_field_type_match);
	return _73217_m;
}



inline jule::Ptr<_1ea6ee955_ScopeTree> _1ea722e73_ScopeParser::_method_build_scope_st(jule::Slice<_1ea7465e5_Token> _76237_tokens) {
	jule::Bool _76317_is_unsafe = false;
	jule::Bool _76417_is_deferred = false;
	_1ea7465e5_Token _76517_token = _76237_tokens[0LL];
	if (_76517_token._field_id == 35LLU) {
		_76317_is_unsafe=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
		_76517_token=_76237_tokens[0LL];
		if (_76517_token._field_id == 37LLU) {
			_76417_is_deferred=true;
			_76237_tokens=_76237_tokens.slice(1LL);
			if (_76237_tokens.len() == 0LL) {
				(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
	} else if (_76517_token._field_id == 37LLU) {
		_76417_is_deferred=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
	}
	jule::Int _79117_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _79217_scope_tokens = _1eb381c13_range(_79117_i,jule::Str("{", 1),jule::Str("}", 1),_76237_tokens);
	if (_79217_scope_tokens == nullptr) {
		(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if (_79117_i < _76237_tokens.len()) {
		(*this)._method_push_err(_76237_tokens[_79117_i],jule::Str("invalid syntax", 14));
	}
	jule::Ptr<_1ea6ee955_ScopeTree> _79917_scope = (*this)._method_build_scope(_79217_scope_tokens);
	_79917_scope->_field_unsafety=_76317_is_unsafe;
	_79917_scope->_field_deferred=_76417_is_deferred;
	return _79917_scope;
}



inline jule::Ptr<_1ea6ee955_LabelSt> _1ea722e73_ScopeParser::_method_build_label_st(jule::Slice<_1ea7465e5_Token>& _80538_tokens) {
	jule::Ptr<_1ea6ee955_LabelSt> _80617_lbl = jule::new_struct<_1ea6ee955_LabelSt>(new( std::nothrow ) _1ea6ee955_LabelSt(_80538_tokens[0LL],_80538_tokens[0LL]._field_kind));
	if (_80538_tokens.len() > 2LL) {
		_80538_tokens=_80538_tokens.slice(2LL);
		(*this)._method_insert_as_next(_80538_tokens);
	}
	return _80617_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _1ea722e73_ScopeParser::_method_build_id_st(jule::Slice<_1ea7465e5_Token>& _82035_tokens) {
	jule::Bool _82064_ok = jule::Bool();
	if (_82035_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_82064_ok);
	}
	_1ea7465e5_Token _82517_token = _82035_tokens[1LL];
	{
		auto &_match_expr{ _82517_token._field_id };
		if (_match_expr == 11LLU) {
			_case_begin_4798606976:;
			{
				_82064_ok = true;
				return std::make_tuple(jule::Any((*this)._method_build_label_st(_82035_tokens)),_82064_ok);
			}
		}
		_match_end_4798608576:;
	}
	return std::make_tuple(jule::Any(),_82064_ok);
}



inline jule::Ptr<_1eb382692_AssignInfo> _1ea722e73_ScopeParser::_method_build_assign_info(jule::Slice<_1ea7465e5_Token>& _83441_tokens) {
	jule::Ptr<_1eb382692_AssignInfo> _83517_info = jule::new_struct<_1eb382692_AssignInfo>(new( std::nothrow ) _1eb382692_AssignInfo(jule::Slice<_1ea7465e5_Token>(),jule::Slice<_1ea7465e5_Token>(),_1ea7465e5_Token(),true));
	jule::Int _83817_brace_n = 0LL;
	{
		auto &expr = _83441_tokens;
		auto it = expr.begin();
		_iter_begin_4798615824:;
		if (it != expr.end()) {
			jule::Int _1ea722e73_i = it - expr.begin();
			_1ea7465e5_Token _1ea722e73_token = *it;
			{
				if (_1ea722e73_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1ea722e73_token._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4798620384:;
							{
								(_83817_brace_n)++;
							}
						}
						else {
							_case_begin_4798618608:;
							{
								(_83817_brace_n)--;
							}
						}
						_match_end_4798618704:;
					}
				}
				{
					if (_83817_brace_n > 0LL) {
						_case_begin_4798621856:;
						{
							goto _iter_next_4798615824;
						}
					}
					else if (_1ea722e73_token._field_id != 7LLU) {
						_case_begin_4798620896:;
						{
							goto _iter_next_4798615824;
						}
					}
					else if ((!(_1ea7465e5_is_assign_op(_1ea722e73_token._field_kind)))) {
						_case_begin_4798620992:;
						{
							goto _iter_next_4798615824;
						}
					}
					_match_end_4798621408:;
				}
				_83517_info->_field_l=_83441_tokens.slice(0LL,_1ea722e73_i);
				if (_83517_info->_field_l.len() == 0LL) {
					_83517_info->_field_ok=false;
				}
				_83517_info->_field_setter=_1ea722e73_token;
				if ((_1ea722e73_i + 1LL) >= _83441_tokens.len()) {
					_83517_info->_field_r=nullptr;
					_83517_info->_field_ok=_1ea7465e5_is_postfix_op(_83517_info->_field_setter._field_kind);
					goto _iter_end_4798615824;
				}
				_83517_info->_field_r=_83441_tokens.slice(_1ea722e73_i + 1LL);
				if (_1ea7465e5_is_postfix_op(_83517_info->_field_setter._field_kind)) {
					if (_83517_info->_field_r.len() > 0LL) {
						(*this)._method_push_err(_83517_info->_field_r[0LL],jule::Str("invalid syntax", 14));
						_83517_info->_field_r=nullptr;
					}
				}
				goto _iter_end_4798615824;
			}
			_iter_next_4798615824:;
			++it;
			_1ea722e73_i++;
			goto _iter_begin_4798615824;
		}
		_iter_end_4798615824:;
	}
	return _83517_info;
}



inline jule::Ptr<_1ea6ee955_AssignLeft> _1ea722e73_ScopeParser::_method_build_assign_l(jule::Slice<_1ea7465e5_Token>& _88138_tokens) {
	jule::Ptr<_1ea6ee955_AssignLeft> _88217_l = jule::new_struct<_1ea6ee955_AssignLeft>(new( std::nothrow ) _1ea6ee955_AssignLeft(_88138_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ptr<_1ea6ee955_Expr>()));
	if (_88138_tokens[0LL]._field_id == 2LLU) {
		_88217_l->_field_ident=_88217_l->_field_token._field_kind;
	}
	_88217_l->_field_expr=(*this)._field_p->_method_build_expr(_88138_tokens);
	return _88217_l;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>> _1ea722e73_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_1ea7465e5_Token>>& _89439_parts) {
	jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>> _89517_lefts = nullptr;
	{
		auto &expr = _89439_parts;
		auto it = expr.begin();
		_iter_begin_4798640816:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea722e73_part = *it;
			{
				jule::Ptr<_1ea6ee955_AssignLeft> _89721_l = (*this)._method_build_assign_l(_1ea722e73_part);
				_89517_lefts.push(_89721_l);
			}
			_iter_next_4798640816:;
			++it;
			goto _iter_begin_4798640816;
		}
		_iter_end_4798640816:;
	}
	return _89517_lefts;
}



inline std::tuple<jule::Ptr<_1ea6ee955_AssignSt>,jule::Bool> _1ea722e73_ScopeParser::_method_build_plain_assign(jule::Slice<_1ea7465e5_Token>& _90442_tokens) {
	jule::Ptr<_1eb382692_AssignInfo> _90517_info = (*this)._method_build_assign_info(_90442_tokens);
	if ((!(_90517_info->_field_ok))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_1ea6ee955_AssignSt> _91017_assign = jule::new_struct<_1ea6ee955_AssignSt>(new( std::nothrow ) _1ea6ee955_AssignSt(jule::Bool(),_90517_info->_field_setter,jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>>(),jule::Ptr<_1ea6ee955_Expr>()));
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _91418_parts;
	jule::Slice<_1e8ea7cc0_Log> _91425_errs;
	std::tie(_91418_parts,_91425_errs) = _1eb381c13_parts(_90517_info->_field_l,8LLU,true);
	if (_91425_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_91425_errs);
		return std::make_tuple(nullptr,false);
	}
	_91017_assign->_field_left=(*this)._method_build_assign_ls(_91418_parts);
	if (_90517_info->_field_r != nullptr) {
		_91017_assign->_field_right=(*this)._field_p->_method_build_expr(_90517_info->_field_r);
	}
	return std::make_tuple(_91017_assign,true);
}



inline std::tuple<jule::Ptr<_1ea6ee955_AssignSt>,jule::Bool> _1ea722e73_ScopeParser::_method_build_decl_assign(jule::Slice<_1ea7465e5_Token> _92840_tokens) {
	if (_92840_tokens.len() < 1LL) {
		return std::make_tuple(nullptr,false);
	}
	_92840_tokens=_92840_tokens.slice(1LL);
	_1ea7465e5_Token _93417_token = _92840_tokens[0LL];
	if ((_93417_token._field_id != 3LLU) || (_93417_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_1ea6ee955_AssignSt> _93917_assign = jule::new_struct<_1ea6ee955_AssignSt>(new( std::nothrow ) _1ea6ee955_AssignSt(true,_1ea7465e5_Token(),jule::Slice<jule::Ptr<_1ea6ee955_AssignLeft>>(),jule::Ptr<_1ea6ee955_Expr>()));
	jule::Int _94317_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _94417_rang = _1eb381c13_range(_94317_i,jule::Str("(", 1),jule::Str(")", 1),_92840_tokens);
	if (_94417_rang == nullptr) {
		(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if ((_94317_i + 1LL) < _92840_tokens.len()) {
		_93917_assign->_field_setter=_92840_tokens[_94317_i];
		(_94317_i)++;
		jule::Slice<_1ea7465e5_Token> _95121_expr_tokens = _92840_tokens.slice(_94317_i);
		_93917_assign->_field_right=(*this)._field_p->_method_build_expr(_95121_expr_tokens);
	}
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _95618_parts;
	jule::Slice<_1e8ea7cc0_Log> _95625_errs;
	std::tie(_95618_parts,_95625_errs) = _1eb381c13_parts(_94417_rang,8LLU,true);
	if (_95625_errs.len() > 0LL) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_95625_errs);
		return std::make_tuple(nullptr,false);
	}
	{
		auto &expr = _95618_parts;
		auto it = expr.begin();
		_iter_begin_4798675552:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea722e73_part = *it;
			{
				jule::Bool _96321_is_mut = false;
				jule::Bool _96421_is_ref = false;
				_93417_token=_1ea722e73_part[0LL];
				if (_93417_token._field_id == 36LLU) {
					_96321_is_mut=true;
					_1ea722e73_part=_1ea722e73_part.slice(1LL);
					if (_1ea722e73_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4798675552;
					}
				}
				if ((_1ea722e73_part[0LL]._field_id == 7LLU) && (_1ea722e73_part[0LL]._field_kind == jule::Str("&", 1))) {
					_96421_is_ref=true;
					_1ea722e73_part=_1ea722e73_part.slice(1LL);
					if (_1ea722e73_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4798675552;
					}
				}
				if (((_1ea722e73_part[0LL]._field_id != 2LLU) && (_1ea722e73_part[0LL]._field_id != 3LLU)) && (_1ea722e73_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
					goto _iter_next_4798675552;
				}
				jule::Ptr<_1ea6ee955_AssignLeft> _99221_l = (*this)._method_build_assign_l(_1ea722e73_part);
				_99221_l->_field_mutable=_96321_is_mut;
				_99221_l->_field_reference=_96421_is_ref;
				_93917_assign->_field_left = jule::alloc_for_append(_93917_assign->_field_left,1);_93917_assign->_field_left.push(_99221_l);
			}
			_iter_next_4798675552:;
			++it;
			goto _iter_begin_4798675552;
		}
		_iter_end_4798675552:;
	}
	return std::make_tuple(_93917_assign,true);
}



inline std::tuple<jule::Ptr<_1ea6ee955_AssignSt>,jule::Bool> _1ea722e73_ScopeParser::_method_build_assign_st(jule::Slice<_1ea7465e5_Token>& _100139_tokens) {
	jule::Ptr<_1ea6ee955_AssignSt> _100158_st = jule::Ptr<_1ea6ee955_AssignSt>();
	jule::Bool _100173_ok = jule::Bool();
	if ((!(_1eb382692_check_assign_tokens(_100139_tokens)))) {
		_100158_st = nullptr;
		_100173_ok = false;
		return std::make_tuple(_100158_st,_100173_ok);
	}
	{
		auto &_match_expr{ _100139_tokens[0LL]._field_id };
		if (_match_expr == 34LLU) {
			_case_begin_4798699904:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_decl_assign(_100139_tokens);
			}
		}
		else {
			_case_begin_4798697408:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_plain_assign(_100139_tokens);
			}
		}
		_match_end_4798698544:;
	}
	return std::make_tuple(_100158_st,_100173_ok);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_use_expr(jule::Slice<_1ea7465e5_Token>& _101438_tokens) {
	if (_101438_tokens.len() == 1LL) {
		(*this)._method_push_err(_101438_tokens[0LL],jule::Str("expression missing", 18));
		return jule::Any(nullptr);
	}
	jule::Ptr<_1ea6ee955_UseExpr> _102017_ue = jule::new_struct<_1ea6ee955_UseExpr>(new( std::nothrow ) _1ea6ee955_UseExpr(_101438_tokens[0LL],jule::Ptr<_1ea6ee955_Expr>()));
	_101438_tokens=_101438_tokens.slice(1LL);
	_102017_ue->_field_expr=(*this)._field_p->_method_build_expr(_101438_tokens);
	return jule::Any(_102017_ue);
}



inline jule::Any _1ea722e73_ScopeParser::_method_build_st(jule::Ptr<_1ea722e73_Stmt>& _102932_st) {
	_1ea7465e5_Token _103017_token = _102932_st->_field_tokens[0LL];
	if (_103017_token._field_id == 2LLU) {
		jule::Any _103222_s;
		jule::Bool _103225_ok;
		std::tie(_103222_s,_103225_ok) = (*this)._method_build_id_st(_102932_st->_field_tokens);
		if (_103225_ok) {
			return _103222_s;
		}
	}
	jule::Ptr<_1ea6ee955_AssignSt> _103818_s;
	jule::Bool _103821_ok;
	std::tie(_103818_s,_103821_ok) = (*this)._method_build_assign_st(_102932_st->_field_tokens);
	if (_103821_ok) {
		return jule::Any(_103818_s);
	}
	{
		auto &_match_expr{ _103017_token._field_id };
		if (_match_expr == 19LLU) {
			_case_begin_4798718960:;
			{
				return (*this)._method_build_use_expr(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 38LLU || _match_expr == 9LLU || _match_expr == 34LLU || _match_expr == 36LLU) {
			_case_begin_4798720704:;
			{
				return (*this)._method_build_var_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_4798720224:;
			{
				return (*this)._method_build_ret_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_4798719200:;
			{
				return (*this)._method_buid_iter_st(_102932_st);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_4798719296:;
			{
				return (*this)._method_build_break_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_4798719392:;
			{
				return (*this)._method_build_cont_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_4798719488:;
			{
				return (*this)._method_build_if_else_chain(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_4798716288:;
			{
				return (*this)._method_build_comment_st(_103017_token);
			}
		}
		else if (_match_expr == 26LLU) {
			_case_begin_4798716384:;
			{
				return (*this)._method_build_co_call_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 22LLU) {
			_case_begin_4798716480:;
			{
				return (*this)._method_build_goto_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 32LLU) {
			_case_begin_4798716576:;
			{
				return (*this)._method_build_fall_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4798720928:;
			{
				return (*this)._method_build_type_alias_st(_102932_st->_field_tokens);
			}
		}
		else if (_match_expr == 27LLU) {
			_case_begin_4798721024:;
			{
				return jule::Any((*this)._method_build_match_case(_102932_st->_field_tokens));
			}
		}
		else if (_match_expr == 35LLU || _match_expr == 37LLU) {
			_case_begin_4798721120:;
			{
				return jule::Any((*this)._method_build_scope_st(_102932_st->_field_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4798721216:;
			{
				if (_103017_token._field_kind == jule::Str("{", 1)) {
					return jule::Any((*this)._method_build_scope_st(_102932_st->_field_tokens));
				}
			}
		}
		else {
			_case_begin_4798717072:;
			{
				jule::Ptr<_1ea6ee955_Expr> _109921_expr = (*this)._field_p->_method_build_expr(_102932_st->_field_tokens);
				if (_109921_expr != nullptr) {
					return jule::Any(_109921_expr);
				}
			}
		}
		_match_end_4798716912:;
	}
	(*this)._method_push_err(_103017_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _1ea722e73_ScopeParser::_method_build(jule::Slice<_1ea7465e5_Token>& _110929_tokens,jule::Ptr<_1ea6ee955_ScopeTree>& _110951_s) {
	if (_110951_s == nullptr) {
		return;
	}
	(*this)._field_stmts=_1ea722e73_split_stmts(_110929_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_110951_s;
	while ((!((*this)._method_is_last_st())) && (!((*this)._method_finished()))) {
		{
			jule::Ptr<_1ea722e73_Stmt> _111821_st = (*this)._method_next();
			jule::Any _111921_data = (*this)._method_build_st(_111821_st);
			if (_111921_data != nullptr) {
				(*this)._field_s->_field_stmts = jule::alloc_for_append((*this)._field_s->_field_stmts,1);(*this)._field_s->_field_stmts.push(_111921_data);
			}
			if ((*this)._method_stopped()) {
				goto _iter_end_4798744480;
			}
		}
	_iter_next_4798744480:;
	}
	_iter_end_4798744480:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea722e73_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea715b69_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _1ea715b69_ExprBuilder::_method_push_err(_1ea7465e5_Token _24227_token,jule::Str _24241_fmt,jule::Slice<jule::Any> _24254_args) {
	(*this)._field_p->_method_push_err(_24227_token,_24241_fmt,_24254_args);
}



inline void _1ea715b69_ExprBuilder::_method_push_suggestion(jule::Str _24734_fmt,jule::Slice<jule::Any> _24747_args) {
	(*this)._field_p->_method_push_suggestion(_24734_fmt,_24747_args);
}



inline jule::Ptr<_1ea6ee955_TupleExpr> _1ea715b69_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_1ea7465e5_Token>>& _25135_parts) {
	jule::Ptr<_1ea6ee955_TupleExpr> _25217_tuple = jule::new_struct<_1ea6ee955_TupleExpr>(new( std::nothrow ) _1ea6ee955_TupleExpr(jule::Slice<jule::Ptr<_1ea6ee955_Expr>>::alloc(0LL,static_cast<jule::I64>(_25135_parts.len()))));
	{
		auto &expr = _25135_parts;
		auto it = expr.begin();
		_iter_begin_4798780656:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea715b69_part = *it;
			{
				_25217_tuple->_field_expr = jule::alloc_for_append(_25217_tuple->_field_expr,1);_25217_tuple->_field_expr.push((*this)._method_build_from_tokens(_1ea715b69_part));
			}
			_iter_next_4798780656:;
			++it;
			goto _iter_begin_4798780656;
		}
		_iter_end_4798780656:;
	}
	return _25217_tuple;
}



inline jule::Ptr<_1ea6ee955_LitExpr> _1ea715b69_ExprBuilder::_method_build_lit(_1ea7465e5_Token _26128_token) {
	return jule::new_struct<_1ea6ee955_LitExpr>(new( std::nothrow ) _1ea6ee955_LitExpr(_26128_token,_26128_token._field_kind));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1ea715b69_ExprBuilder::_method_build_primitive_type(_1ea7465e5_Token& _26840_token) {
	return _1eb6540c3_build_prim_type(_26840_token);
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_single(_1ea7465e5_Token _27235_token) {
	{
		auto &_match_expr{ _27235_token._field_id };
		if (_match_expr == 6LLU) {
			_case_begin_4798790432:;
			{
				return jule::Any((*this)._method_build_lit(_27235_token));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4798790528:;
			{
				if (_27235_token._field_kind == jule::Str("...", 3)) {
					return jule::Any(jule::new_struct<_1ea6ee955_VariadicExpr>(new( std::nothrow ) _1ea6ee955_VariadicExpr(_27235_token,jule::Any())));
				}
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 28LLU || _match_expr == 40LLU) {
			_case_begin_4798790672:;
			{
				return jule::Any(_1ea715b69_build_ident_expr(_27235_token));
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_4798790768:;
			{
				return jule::Any((*this)._method_build_primitive_type(_27235_token));
			}
		}
		_match_end_4798790208:;
	}
	(*this)._method_push_err(_27235_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1ea6ee955_IdentExpr> _1ea715b69_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_1ea7465e5_Token>& _29646_tokens) {
	if (_29646_tokens[0LL]._field_id != 31LLU) {
		return nullptr;
	} else if (_29646_tokens[1LL]._field_id != 20LLU) {
		(*this)._method_push_err(_29646_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1ea7465e5_Token _30417_token = _29646_tokens[2LL];
	if (_30417_token._field_id != 2LLU) {
		(*this)._method_push_err(_29646_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_IdentExpr> _31017_expr = _1ea715b69_build_ident_expr(_30417_token);
	_31017_expr->_field_cpp_linked=true;
	return _31017_expr;
}



inline jule::Ptr<_1ea6ee955_UnaryExpr> _1ea715b69_ExprBuilder::_method_build_unary(jule::Slice<_1ea7465e5_Token> _31534_tokens) {
	_1ea7465e5_Token _31617_op = _31534_tokens[0LL];
	if (_31534_tokens.len() == 1LL) {
		(*this)._method_push_err(_31617_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_1ea7465e5_is_unary_op(_31617_op._field_kind)))) {
		(*this)._method_push_err(_31617_op,jule::Str("operator @ is not unary", 23),jule::Slice<jule::Any>({jule::Any(_31617_op._field_kind)}));
		return nullptr;
	}
	_31534_tokens=_31534_tokens.slice(1LL);
	return jule::new_struct<_1ea6ee955_UnaryExpr>(new( std::nothrow ) _1ea6ee955_UnaryExpr(_31617_op,(*this)._method_build(_31534_tokens)));
}



inline jule::Ptr<_1ea6ee955_SubIdentExpr> _1ea715b69_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_1ea7465e5_Token> _33642_tokens) {
	jule::I64 _33717_i = _33642_tokens.len() - 1LL;
	_1ea7465e5_Token _33817_ident_token = _33642_tokens[_33717_i];
	(_33717_i)--;
	_33642_tokens=_33642_tokens.slice(0LL,_33717_i);
	if (_33642_tokens.len() == 0LL) {
		(*this)._method_push_err(_33817_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_SubIdentExpr>(new( std::nothrow ) _1ea6ee955_SubIdentExpr(jule::Bool(),(*this)._method_build(_33642_tokens),_33817_ident_token));
}



inline jule::Ptr<_1ea6ee955_NsSelectionExpr> _1ea715b69_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_1ea7465e5_Token>& _35142_tokens) {
	jule::Ptr<_1ea6ee955_NsSelectionExpr> _35217_ns = jule::new_struct<_1ea6ee955_NsSelectionExpr>(new( std::nothrow ) _1ea6ee955_NsSelectionExpr());
	{
		auto &expr = _35142_tokens;
		auto it = expr.begin();
		_iter_begin_4798831344:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token _1ea715b69_token = *it;
			{
				if (jule::unsafe_mod(_1ea715b69_i,2LL) == 0LL) {
					if (_1ea715b69_token._field_id != 2LLU) {
						(*this)._method_push_err(_1ea715b69_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					}
					_35217_ns->_field_ns = jule::alloc_for_append(_35217_ns->_field_ns,1);_35217_ns->_field_ns.push(_1ea715b69_token);
				} else if (_1ea715b69_token._field_id != 23LLU) {
					(*this)._method_push_err(_1ea715b69_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				}
			}
			_iter_next_4798831344:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4798831344;
		}
		_iter_end_4798831344:;
	}
	_35217_ns->_field_ident=_35217_ns->_field_ns[_35217_ns->_field_ns.len() - 1LL];
	_35217_ns->_field_ns=_35217_ns->_field_ns.slice(0LL,_35217_ns->_field_ns.len() - 1LL);
	return _35217_ns;
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1ea715b69_ExprBuilder::_method_build_type(jule::Slice<_1ea7465e5_Token>& _37034_tokens) {
	jule::Int _37117_i = 0LL;
	jule::Ptr<_1ea6ee955_TypeDecl> _37218_t;
	jule::Bool _37221_ok;
	std::tie(_37218_t,_37221_ok) = (*this)._field_p->_method_build_type(_37034_tokens,(&(_37117_i)),false);
	if ((!(_37221_ok))) {
		(*this)._method_push_err(_37034_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_37117_i < _37034_tokens.len()) {
		(*this)._method_push_err(_37034_tokens[_37117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _37218_t;
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_sub_ident(jule::Slice<_1ea7465e5_Token>& _38439_tokens) {
	jule::I64 _38513_i = _38439_tokens.len() - 2LL;
	_1ea7465e5_Token _38613_token = _38439_tokens[_38513_i];
	{
		auto &_match_expr{ _38613_token._field_id };
		if (_match_expr == 20LLU) {
			_case_begin_4798854832:;
			{
				return jule::Any((*this)._method_build_obj_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 23LLU) {
			_case_begin_4798854928:;
			{
				return jule::Any((*this)._method_build_ns_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4798855024:;
			{
				if (_38613_token._field_kind == jule::Str("]", 1)) {
					return jule::Any((*this)._method_build_type(_38439_tokens));
				}
			}
		}
		_match_end_4798854624:;
	}
	(*this)._method_push_err(_38613_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1ea6ee955_VariadicExpr> _1ea715b69_ExprBuilder::_method_build_variadic(jule::Slice<_1ea7465e5_Token> _40537_tokens) {
	_1ea7465e5_Token _40617_token = _40537_tokens[_40537_tokens.len() - 1LL];
	_40537_tokens=_40537_tokens.slice(0LL,_40537_tokens.len() - 1LL);
	return jule::new_struct<_1ea6ee955_VariadicExpr>(new( std::nothrow ) _1ea6ee955_VariadicExpr(_40617_token,(*this)._method_build(_40537_tokens)));
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_op_right(jule::Slice<_1ea7465e5_Token>& _41438_tokens) {
	_1ea7465e5_Token _41517_token = _41438_tokens[_41438_tokens.len() - 1LL];
	{
		auto &_match_expr{ _41517_token._field_kind };
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_4798869568:;
			{
				_41438_tokens=_41438_tokens.slice(0LL,_41438_tokens.len() - 1LL);
				jule::Any _41921_d = (*this)._method_build(_41438_tokens);
				if (_41921_d == nullptr) {
					return jule::Any(nullptr);
				}
				{
					auto &_match_expr{ _41921_d };
					if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnCallExpr>>()) {
						_case_begin_4798872832:;
						{
							_41921_d.operator jule::Ptr<_1ea6ee955_FnCallExpr>()->_field_exception=jule::new_struct<_1ea6ee955_ScopeTree>(new( std::nothrow ) _1ea6ee955_ScopeTree(jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Bool(),true,jule::Slice<jule::Any>()));
							return _41921_d;
						}
					}
					_match_end_4798873616:;
				}
			}
		}
		else if (_match_expr == jule::Str("...", 3)) {
			_case_begin_4798869664:;
			{
				return jule::Any((*this)._method_build_variadic(_41438_tokens));
			}
		}
		_match_end_4798869488:;
	}
	(*this)._method_push_err(_41517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_between_parentheses(jule::Slice<_1ea7465e5_Token> _43948_tokens) {
	_1ea7465e5_Token _44013_token = _43948_tokens[0LL];
	_43948_tokens=_43948_tokens.slice(1LL,_43948_tokens.len() - 1LL);
	if (_43948_tokens.len() == 0LL) {
		(*this)._method_push_err(_44013_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_43948_tokens);
}



inline jule::Ptr<_1ea6ee955_CastExpr> _1ea715b69_ExprBuilder::_method_try_build_cast(jule::Slice<_1ea7465e5_Token>& _45038_tokens) {
	jule::Int _45117_range_n = 0LL;
	{
		auto &expr = _45038_tokens;
		auto it = expr.begin();
		_iter_begin_4798887824:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token &_1ea715b69_token = *it;
			{
				if (_1ea715b69_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1ea715b69_token._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4798892256:;
							{
								(_45117_range_n)++;
								goto _iter_next_4798887824;
							}
						}
						else {
							_case_begin_4798890480:;
							{
								(_45117_range_n)--;
							}
						}
						_match_end_4798890576:;
					}
				}
				if (_45117_range_n > 0LL) {
					goto _iter_next_4798887824;
				} else if ((_1ea715b69_i + 1LL) == _45038_tokens.len()) {
					return nullptr;
				}
				jule::Slice<_1ea7465e5_Token> _47221_type_tokens = _45038_tokens.slice(0LL,_1ea715b69_i + 1LL);
				jule::Slice<_1ea7465e5_Token> _47321_expr_tokens = _45038_tokens.slice(_1ea715b69_i + 1LL);
				if (_47321_expr_tokens.len() == 0LL) {
					return nullptr;
				}
				_1ea7465e5_Token _48017_tok = _47321_expr_tokens[0LL];
				if ((_48017_tok._field_id != 3LLU) || (_48017_tok._field_kind != jule::Str("(", 1))) {
					return nullptr;
				}
				jule::Ptr<_1ea6ee955_CastExpr> _48521_cast = jule::new_struct<_1ea6ee955_CastExpr>(new( std::nothrow ) _1ea6ee955_CastExpr());
				if (_47321_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_47321_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				}
				if (_47221_type_tokens.len() == 2LL) {
					(*this)._method_push_err(_47221_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_47221_type_tokens=_47221_type_tokens.slice(1LL,_47221_type_tokens.len() - 1LL);
					jule::Int _49925_type_index = 0LL;
					jule::Ptr<_1ea6ee955_TypeDecl> _50026_t;
					jule::Bool _50029_ok;
					std::tie(_50026_t,_50029_ok) = (*this)._field_p->_method_build_type(_47221_type_tokens,(&(_49925_type_index)),true);
					if (_50029_ok && (_49925_type_index < _47221_type_tokens.len())) {
						(*this)._method_push_err(_47221_type_tokens[_49925_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_50029_ok))) {
						return _48521_cast;
					}
					_48521_cast->_field_kind=_50026_t;
					if (_47321_expr_tokens.len() > 2LL) {
						jule::Int _51029_j = 0LL;
						_1eb381c13_range(_51029_j,jule::Str("(", 1),jule::Str(")", 1),_47321_expr_tokens);
						if (_51029_j < _47321_expr_tokens.len()) {
							return nullptr;
						}
						_47321_expr_tokens=_47321_expr_tokens.slice(0LL,_51029_j);
						_48521_cast->_field_expr=(*this)._method_build(_47321_expr_tokens);
					}
				}
				return _48521_cast;
			}
			_iter_next_4798887824:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4798887824;
		}
		_iter_end_4798887824:;
	}
	return nullptr;
}



inline void _1ea715b69_ExprBuilder::_method_push_arg(jule::Slice<jule::Ptr<_1ea6ee955_Expr>>& _52532_args,jule::Slice<_1ea7465e5_Token> _52551_tokens,_1ea7465e5_Token _52568_err_token) {
	if (_52551_tokens.len() == 0LL) {
		(*this)._method_push_err(_52568_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_52532_args.push((*this)._method_build_from_tokens(_52551_tokens));
}



inline jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _1ea715b69_ExprBuilder::_method_build_args(jule::Slice<_1ea7465e5_Token> _53433_tokens) {
	if (_53433_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ea6ee955_Expr>> _54017_args = nullptr;
	jule::Int _54117_last = 0LL;
	jule::Int _54217_range_n = 0LL;
	_53433_tokens=_53433_tokens.slice(1LL,_53433_tokens.len() - 1LL);
	{
		auto &expr = _53433_tokens;
		auto it = expr.begin();
		_iter_begin_4798928912:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token &_1ea715b69_token = *it;
			{
				if (_1ea715b69_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1ea715b69_token._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4798934048:;
							{
								(_54217_range_n)++;
							}
						}
						else {
							_case_begin_4798932272:;
							{
								(_54217_range_n)--;
							}
						}
						_match_end_4798932368:;
					}
				}
				if ((_54217_range_n > 0LL) || (_1ea715b69_token._field_id != 8LLU)) {
					goto _iter_next_4798928912;
				}
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last,_1ea715b69_i),_1ea715b69_token);
				_54117_last=static_cast<jule::Int>(_1ea715b69_i + 1LL);
			}
			_iter_next_4798928912:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4798928912;
		}
		_iter_end_4798928912:;
	}
	if (_54117_last < _53433_tokens.len()) {
		if (_54117_last == 0LL) {
			if (_53433_tokens.len() > 0LL) {
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last]);
			}
		} else {
			(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last - 1LL]);
		}
	}
	return _54017_args;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _1ea715b69_ExprBuilder::_method_build_call_generics(jule::Slice<_1ea7465e5_Token> _57742_tokens) {
	if (_57742_tokens.len() == 0LL) {
		return nullptr;
	}
	_57742_tokens=_57742_tokens.slice(1LL,_57742_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _58318_parts;
	jule::Slice<_1e8ea7cc0_Log> _58325_errs;
	std::tie(_58318_parts,_58325_errs) = _1eb381c13_parts(_57742_tokens,8LLU,true);
	jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _58417_generics = jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_58318_parts.len()));
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_58325_errs);
	{
		auto &expr = _58318_parts;
		auto it = expr.begin();
		_iter_begin_4798946928:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea715b69_part = *it;
			{
				if (_1ea715b69_part.len() == 0LL) {
					goto _iter_next_4798946928;
				}
				jule::Int _59021_j = 0LL;
				jule::Ptr<_1ea6ee955_TypeDecl> _59122_generic;
				std::tie(_59122_generic,std::ignore) = (*this)._field_p->_method_build_type(_1ea715b69_part,(&(_59021_j)),true);
				if (_59021_j < _1ea715b69_part.len()) {
					(*this)._method_push_err(_1ea715b69_part[_59021_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_58417_generics.push(_59122_generic);
			}
			_iter_next_4798946928:;
			++it;
			goto _iter_begin_4798946928;
		}
		_iter_end_4798946928:;
	}
	return _58417_generics;
}



inline jule::Ptr<_1ea6ee955_FnCallExpr> _1ea715b69_ExprBuilder::_method_build_fn_call(_1ea7465e5_Token& _60137_token,jule::Ptr<_1ea715b69_CallData>& _60156_data) {
	return jule::new_struct<_1ea6ee955_FnCallExpr>(new( std::nothrow ) _1ea6ee955_FnCallExpr(_60137_token,(*this)._method_build_from_tokens(_60156_data->_field_expr_tokens),(*this)._method_build_call_generics(_60156_data->_field_generics_tokens),(*this)._method_build_args(_60156_data->_field_args_tokens),jule::Ptr<_1ea6ee955_ScopeTree>()));
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_parentheses_range(jule::Slice<_1ea7465e5_Token>& _61047_tokens) {
	_1ea7465e5_Token _61117_token = _61047_tokens[0LL];
	{
		auto &_match_expr{ _61117_token._field_id };
		if (_match_expr == 3LLU) {
			_case_begin_4798963504:;
			{
				{
					auto &_match_expr{ _61117_token._field_kind };
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_4798965072:;
						{
							jule::Ptr<_1ea6ee955_CastExpr> _61625_expr = (*this)._method_try_build_cast(_61047_tokens);
							if (_61625_expr != nullptr) {
								return jule::Any(_61625_expr);
							}
						}
					}
					_match_end_4798963856:;
				}
			}
		}
		_match_end_4798963104:;
	}
	jule::Ptr<_1ea715b69_CallData> _62317_data = _1ea715b69_get_call_data(_61047_tokens);
	if (_62317_data->_field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses(_62317_data->_field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_61117_token,_62317_data));
}



inline jule::Ptr<_1ea6ee955_UnsafeExpr> _1ea715b69_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_1ea7465e5_Token> _63440_tokens) {
	_1ea7465e5_Token _63517_token = _63440_tokens[0LL];
	_63440_tokens=_63440_tokens.slice(1LL);
	jule::Int _63717_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _63817_range_tokens = _1eb381c13_range(_63717_i,jule::Str("{", 1),jule::Str("}", 1),_63440_tokens);
	if (_63817_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_63440_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_UnsafeExpr>(new( std::nothrow ) _1ea6ee955_UnsafeExpr(_63517_token,(*this)._method_build_from_tokens(_63817_range_tokens)->_field_kind));
}



inline jule::Ptr<_1ea6ee955_FnDecl> _1ea715b69_ExprBuilder::_method_build_anon_fn(jule::Slice<_1ea7465e5_Token>& _64937_tokens) {
	jule::Ptr<_1ea6ee955_FnDecl> _65017_f = (*this)._field_p->_method_build_fn(_64937_tokens,false,false);
	if ((!(_65017_f->_method_is_anon()))) {
		(*this)._method_push_err(_65017_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	}
	return _65017_f;
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_unsafe(jule::Slice<_1ea7465e5_Token>& _65836_tokens) {
	{
		auto &_match_expr{ _65836_tokens[1LL]._field_id };
		if (_match_expr == 33LLU) {
			_case_begin_4798992320:;
			{
				return jule::Any((*this)._method_build_anon_fn(_65836_tokens));
			}
		}
		else {
			_case_begin_4798989504:;
			{
				return jule::Any((*this)._method_build_unsafe_expr(_65836_tokens));
			}
		}
		_match_end_4798990288:;
	}
}



inline void _1ea715b69_ExprBuilder::_method_push_range_lit_part(jule::Slice<_1ea7465e5_Token> _66942_part,_1ea7465e5_Token _6709_error_token,jule::Slice<jule::Slice<_1ea7465e5_Token>>& _67034_parts) {
	if (_66942_part.len() == 0LL) {
		(*this)._method_push_err(_6709_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_67034_parts.push(_66942_part);
}



inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _1ea715b69_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_1ea7465e5_Token> _68053_tokens) {
	if (_68053_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _68617_parts = nullptr;
	jule::Int _68817_last = 0LL;
	jule::Int _68917_range_n = 0LL;
	_68053_tokens=_68053_tokens.slice(1LL,_68053_tokens.len() - 1LL);
	{
		auto &expr = _68053_tokens;
		auto it = expr.begin();
		_iter_begin_4799005776:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token &_1ea715b69_token = *it;
			{
				if (_1ea715b69_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1ea715b69_token._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4799010912:;
							{
								(_68917_range_n)++;
							}
						}
						else {
							_case_begin_4799009136:;
							{
								(_68917_range_n)--;
							}
						}
						_match_end_4799009232:;
					}
				}
				if ((_68917_range_n > 0LL) || (_1ea715b69_token._field_id != 8LLU)) {
					goto _iter_next_4799005776;
				}
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last,_1ea715b69_i),_1ea715b69_token,_68617_parts);
				_68817_last=static_cast<jule::Int>(_1ea715b69_i + 1LL);
			}
			_iter_next_4799005776:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4799005776;
		}
		_iter_end_4799005776:;
	}
	if (_68817_last < _68053_tokens.len()) {
		if (_68817_last == 0LL) {
			if (_68053_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last],_68617_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last - 1LL],_68617_parts);
		}
	}
	return _68617_parts;
}



inline jule::Ptr<_1ea6ee955_FieldExprPair> _1ea715b69_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_1ea7465e5_Token> _72344_tokens) {
	if ((_72344_tokens.len() - 2LL) == 0LL) {
		(*this)._method_push_err(_72344_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_FieldExprPair> _72817_pair = jule::new_struct<_1ea6ee955_FieldExprPair>(new( std::nothrow ) _1ea6ee955_FieldExprPair(_72344_tokens[0LL],jule::Any()));
	_72344_tokens=_72344_tokens.slice(2LL);
	_72817_pair->_field_expr=(*this)._method_build_from_tokens(_72344_tokens)->_field_kind;
	return _72817_pair;
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_1ea7465e5_Token>& _73645_tokens) {
	_1ea7465e5_Token _73717_token = _73645_tokens[0LL];
	if (_73717_token._field_id == 2LLU) {
		if (_73645_tokens.len() > 1LL) {
			_73717_token=_73645_tokens[1LL];
			if (_73717_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_73645_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_73645_tokens));
}



inline jule::Slice<jule::Any> _1ea715b69_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_1ea7465e5_Token>& _74946_tokens) {
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _75017_parts = (*this)._method_get_brace_range_lit_expr_parts(_74946_tokens);
	if (_75017_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _75517_pairs = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_75017_parts.len()));
	{
		auto &expr = _75017_parts;
		auto it = expr.begin();
		_iter_begin_4799038096:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea715b69_part = *it;
			{
				_75517_pairs.push((*this)._method_build_struct_lit_expr(_1ea715b69_part));
			}
			_iter_next_4799038096:;
			++it;
			goto _iter_begin_4799038096;
		}
		_iter_end_4799038096:;
	}
	return _75517_pairs;
}



inline jule::Ptr<_1ea6ee955_StructLit> _1ea715b69_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_1ea7465e5_Token> _76249_tokens) {
	jule::Int _76317_i = 0LL;
	jule::Ptr<_1ea6ee955_TypeDecl> _76418_t;
	jule::Bool _76421_ok;
	std::tie(_76418_t,_76421_ok) = (*this)._field_p->_method_build_type(_76249_tokens,(&(_76317_i)),true);
	if ((!(_76421_ok))) {
		return nullptr;
	} else if (_76317_i >= _76249_tokens.len()) {
		(*this)._method_push_err(_76249_tokens[_76317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_76249_tokens=_76249_tokens.slice(_76317_i);
	_1ea7465e5_Token _77313_token = _76249_tokens[0LL];
	if ((_77313_token._field_id != 3LLU) || (_77313_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_77313_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_StructLit>(new( std::nothrow ) _1ea6ee955_StructLit(_76418_t,(*this)._method_build_struct_lit_exprs(_76249_tokens)));
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_1ea7465e5_Token>& _78544_tokens) {
	jule::Slice<_1ea7465e5_Token> _78618_l;
	jule::Slice<_1ea7465e5_Token> _78625_r;
	std::tie(_78618_l,_78625_r) = _1ea715b69_split_colon(_78544_tokens);
	if (_78618_l != nullptr) {
		return jule::Any(jule::new_struct<_1ea6ee955_KeyValPair>(new( std::nothrow ) _1ea6ee955_KeyValPair((*this)._method_build_from_tokens(_78618_l)->_field_kind,(*this)._method_build_from_tokens(_78625_r)->_field_kind,_78544_tokens[_78618_l.len()])));
	}
	return jule::Any((*this)._method_build_from_tokens(_78544_tokens));
}



inline jule::Ptr<_1ea6ee955_BraceLit> _1ea715b69_ExprBuilder::_method_build_brace_lit(jule::Slice<_1ea7465e5_Token>& _79839_tokens) {
	jule::Ptr<_1ea6ee955_BraceLit> _79917_lit = jule::new_struct<_1ea6ee955_BraceLit>(new( std::nothrow ) _1ea6ee955_BraceLit(_79839_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _80317_parts = (*this)._method_get_brace_range_lit_expr_parts(_79839_tokens);
	if (_80317_parts == nullptr) {
		return _79917_lit;
	}
	_79917_lit->_field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_80317_parts.len()));
	{
		auto &expr = _80317_parts;
		auto it = expr.begin();
		_iter_begin_4799066624:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea715b69_part = *it;
			{
				_79917_lit->_field_exprs = jule::alloc_for_append(_79917_lit->_field_exprs,1);_79917_lit->_field_exprs.push((*this)._method_build_brace_lit_part(_1ea715b69_part));
			}
			_iter_next_4799066624:;
			++it;
			goto _iter_begin_4799066624;
		}
		_iter_end_4799066624:;
	}
	return _79917_lit;
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_brace_range(jule::Slice<_1ea7465e5_Token>& _81641_tokens) {
	jule::Slice<_1ea7465e5_Token> _81718_expr_tokens;
	jule::Int _81731_range_n;
	std::tie(_81718_expr_tokens,_81731_range_n) = _1ea715b69_get_range_expr_tokens(_81641_tokens);
	{
		if (_81718_expr_tokens.len() == 0LL) {
			_case_begin_4799072208:;
			{
				return jule::Any((*this)._method_build_brace_lit(_81641_tokens));
			}
		}
		else if (_81731_range_n > 0LL) {
			_case_begin_4799072304:;
			{
				(*this)._method_push_err(_81641_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4799072080:;
	}
	_1ea7465e5_Token _82913_else_token = _81718_expr_tokens[_81718_expr_tokens.len() - 1LL];
	if (_81718_expr_tokens[_81718_expr_tokens.len() - 1LL]._field_id == 17LLU) {
		_81718_expr_tokens=_81718_expr_tokens.slice(0LL,_81718_expr_tokens.len() - 1LL);
		jule::Any _83221_d = (*this)._method_build(_81718_expr_tokens);
		if (_83221_d == nullptr) {
			return jule::Any(nullptr);
		}
		{
			auto &_match_expr{ _83221_d };
			if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnCallExpr>>()) {
				_case_begin_4799080736:;
				{
					_81641_tokens=_81641_tokens.slice(_81718_expr_tokens.len() + 1LL);
					jule::Int _83925_i = 0LL;
					jule::Slice<_1ea7465e5_Token> _84025_range_tokens = _1eb381c13_range(_83925_i,jule::Str("{", 1),jule::Str("}", 1),_81641_tokens);
					jule::Ptr<_1ea6ee955_FnCallExpr> _84125_model = _83221_d.operator jule::Ptr<_1ea6ee955_FnCallExpr>();
					if (_84125_model->_method_ignored()) {
						(*this)._method_push_err(_82913_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					}
					_84125_model->_field_exception=(*this)._field_p->_method_build_scope(_84025_range_tokens);
					return _83221_d;
				}
			}
			else {
				_case_begin_4799081712:;
				{
					(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return jule::Any(nullptr);
				}
			}
			_match_end_4799078880:;
		}
	}
	{
		auto &_match_expr{ _81718_expr_tokens[0LL]._field_id };
		if (_match_expr == 35LLU) {
			_case_begin_4799095056:;
			{
				return (*this)._method_build_unsafe(_81641_tokens);
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_4799096672:;
			{
				return jule::Any((*this)._method_build_anon_fn(_81641_tokens));
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 31LLU) {
			_case_begin_4799096400:;
			{
				return jule::Any((*this)._method_build_typed_struct_literal(_81641_tokens));
			}
		}
		else {
			_case_begin_4799093520:;
			{
				(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4799093856:;
	}
}



inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _1ea715b69_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_1ea7465e5_Token> _87343_tokens) {
	_87343_tokens=_87343_tokens.slice(1LL,_87343_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _87518_parts;
	jule::Slice<_1e8ea7cc0_Log> _87525_errors;
	std::tie(_87518_parts,_87525_errors) = _1eb381c13_parts(_87343_tokens,8LLU,true);
	(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_87525_errors);
	return _87518_parts;
}



inline jule::Ptr<_1ea6ee955_SliceExpr> _1ea715b69_ExprBuilder::_method_build_slice(jule::Slice<_1ea7465e5_Token> _88034_tokens) {
	jule::Ptr<_1ea6ee955_SliceExpr> _88117_slc = jule::new_struct<_1ea6ee955_SliceExpr>(new( std::nothrow ) _1ea6ee955_SliceExpr(_88034_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _88517_parts = (*this)._method_get_enumerable_parts(_88034_tokens);
	if (_88517_parts.len() == 0LL) {
		return _88117_slc;
	}
	_88117_slc->_field_elems=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_88517_parts.len()));
	{
		auto &expr = _88517_parts;
		auto it = expr.begin();
		_iter_begin_4799112944:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea715b69_p = *it;
			{
				_88117_slc->_field_elems = jule::alloc_for_append(_88117_slc->_field_elems,1);_88117_slc->_field_elems.push((*this)._method_build_from_tokens(_1ea715b69_p)->_field_kind);
			}
			_iter_next_4799112944:;
			++it;
			goto _iter_begin_4799112944;
		}
		_iter_end_4799112944:;
	}
	return _88117_slc;
}



inline jule::Ptr<_1ea6ee955_IndexingExpr> _1ea715b69_ExprBuilder::_method_build_indexing(jule::Slice<_1ea7465e5_Token> _89837_expr_tokens,jule::Slice<_1ea7465e5_Token> _89913_tokens,_1ea7465e5_Token _89934_error_token) {
	_89913_tokens=_89913_tokens.slice(1LL,_89913_tokens.len() - 1LL);
	return jule::new_struct<_1ea6ee955_IndexingExpr>(new( std::nothrow ) _1ea6ee955_IndexingExpr(_89934_error_token,(*this)._method_build_from_tokens(_89837_expr_tokens)->_field_kind,(*this)._method_build_from_tokens(_89913_tokens)->_field_kind));
}



inline jule::Ptr<_1ea6ee955_SlicingExpr> _1ea715b69_ExprBuilder::_method_build_slicing(jule::Slice<_1ea7465e5_Token>& _90837_expr_tokens,jule::Slice<_1ea7465e5_Token>& _90864_slicing_tokens,jule::Int& _90910_colon,_1ea7465e5_Token& _90927_error_token) {
	jule::Ptr<_1ea6ee955_SlicingExpr> _91017_slc = jule::new_struct<_1ea6ee955_SlicingExpr>(new( std::nothrow ) _1ea6ee955_SlicingExpr(_90927_error_token,(*this)._method_build_from_tokens(_90837_expr_tokens)->_field_kind,jule::Any(),jule::Any()));
	jule::Slice<_1ea7465e5_Token> _91517_start_expr_tokens = _90864_slicing_tokens.slice(0LL,_90910_colon);
	if (_91517_start_expr_tokens.len() > 0LL) {
		_91017_slc->_field_start=(*this)._method_build_from_tokens(_91517_start_expr_tokens)->_field_kind;
	}
	jule::Slice<_1ea7465e5_Token> _92017_to_expr_tokens = _90864_slicing_tokens.slice(_90910_colon + 1LL);
	if (_92017_to_expr_tokens.len() > 0LL) {
		_91017_slc->_field_to=(*this)._method_build_from_tokens(_92017_to_expr_tokens)->_field_kind;
	}
	return _91017_slc;
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_bracket_range(jule::Slice<_1ea7465e5_Token> _92842_tokens) {
	_1ea7465e5_Token _92917_error_token = _92842_tokens[0LL];
	jule::Slice<_1ea7465e5_Token> _93018_expr_tokens;
	jule::Int _93031_range_n;
	std::tie(_93018_expr_tokens,_93031_range_n) = _1ea715b69_get_range_expr_tokens(_92842_tokens);
	{
		if (_93018_expr_tokens.len() == 0LL) {
			_case_begin_4799136320:;
			{
				return jule::Any((*this)._method_build_slice(_92842_tokens));
			}
		}
		else if ((_93018_expr_tokens.len() == 0LL) || (_93031_range_n > 0LL)) {
			_case_begin_4799136432:;
			{
				(*this)._method_push_err(_92917_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4799136160:;
	}
	_92842_tokens=_92842_tokens.slice(_93018_expr_tokens.len());
	jule::Int _94917_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _95018_slicing_tokens;
	jule::Int _95034_colon;
	std::tie(_95018_slicing_tokens,_95034_colon) = _1eb6540c3_split_map_range(_92842_tokens,_94917_i);
	if (_95034_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_93018_expr_tokens,_95018_slicing_tokens,_95034_colon,_92917_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_93018_expr_tokens,_92842_tokens,_92917_error_token));
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_ternary(jule::Slice<_1ea7465e5_Token> _95736_tokens) {
	jule::Ptr<_1ea6ee955_TernaryExpr> _95817_ter = jule::new_struct<_1ea6ee955_TernaryExpr>(new( std::nothrow ) _1ea6ee955_TernaryExpr());
	_95817_ter->_field_token=_95736_tokens[0LL];
	_95736_tokens=_95736_tokens.slice(1LL);
	jule::Slice<_1ea7465e5_Token> _96217_expr_tokens = _1ea715b69_get_block_expr(_95736_tokens);
	if (_96217_expr_tokens.len() == 0LL) {
		(*this)._method_push_err(_95817_ter->_field_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	_95817_ter->_field_condition=(*this)._method_build_kind(_96217_expr_tokens);
	jule::I64 _96917_i = _96217_expr_tokens.len();
	jule::Slice<_1ea7465e5_Token> _97017_true_expr = _1eb381c13_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_97017_true_expr == nullptr) {
		(*this)._method_push_err(_95817_ter->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_97017_true_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_96217_expr_tokens.len()],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i >= _95736_tokens.len()) {
		(*this)._method_push_err(_95817_ter->_field_token,jule::Str("else block missed for ternary operator", 38),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	_1ea7465e5_Token _98413_else_token = _95736_tokens[_96917_i];
	if (_98413_else_token._field_id != 17LLU) {
		(*this)._method_push_err(_98413_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("else keyword expected for else block of ternary operator", 56),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	(_96917_i)++;
	jule::I64 _99213_j = _96917_i;
	jule::Slice<_1ea7465e5_Token> _99317_false_expr = _1eb381c13_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_99317_false_expr == nullptr) {
		(*this)._method_push_err(_98413_else_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_99317_false_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_99213_j],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i < _95736_tokens.len()) {
		(*this)._method_push_err(_95736_tokens[_96917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_95817_ter->_field_true_expr=(*this)._method_build_kind(_97017_true_expr);
	_95817_ter->_field_false_expr=(*this)._method_build_kind(_99317_false_expr);
	return jule::Any(_95817_ter);
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_data(jule::Slice<_1ea7465e5_Token>& _101234_tokens) {
	{
		auto _match_expr{ _101234_tokens.len() };
		if (_match_expr == 0LL) {
			_case_begin_4799178752:;
			{
				return jule::Any(nullptr);
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_4799178848:;
			{
				return (*this)._method_build_single(_101234_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_4799178944:;
			{
				if (_101234_tokens[0LL]._field_id == 31LLU) {
					return jule::Any((*this)._method_build_cpp_linked_ident(_101234_tokens));
				}
			}
		}
		_match_end_4799178368:;
	}
	_1ea7465e5_Token _102617_token = _101234_tokens[0LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		if (_match_expr == 16LLU) {
			_case_begin_4799185520:;
			{
				return (*this)._method_build_ternary(_101234_tokens);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4799185616:;
			{
				if ((_101234_tokens.len() > 1LL) && (_102617_token._field_kind == jule::Str("*", 1))) {
					_102617_token=_101234_tokens[1LL];
					if ((_102617_token._field_id == 1LLU) || (_102617_token._field_id == 35LLU)) {
						return jule::Any((*this)._method_build_type(_101234_tokens));
					}
				}
				return jule::Any((*this)._method_build_unary(_101234_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4799185712:;
			{
				if (_101234_tokens.len() < 3LL) {
					goto _match_end_4799185280;
				}
				if (_101234_tokens.len() > 3LL) {
					_1ea7465e5_Token _104921_t = _101234_tokens[_101234_tokens.len() - 1LL];
					if ((_104921_t._field_id == 3LLU) && (_104921_t._field_kind == jule::Str(")", 1))) {
						goto _match_end_4799185280;
					}
				}
				_1ea7465e5_Token _105517_next = _101234_tokens[1LL];
				if ((_105517_next._field_id != 3LLU) || (_105517_next._field_kind != jule::Str("]", 1))) {
					goto _match_end_4799185280;
				}
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		_match_end_4799185280:;
	}
	_102617_token=_101234_tokens[_101234_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		if (_match_expr == 2LLU) {
			_case_begin_4799186416:;
			{
				return (*this)._method_build_sub_ident(_101234_tokens);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_4799186512:;
			{
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4799186608:;
			{
				return (*this)._method_build_op_right(_101234_tokens);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4799199696:;
			{
				{
					auto &_match_expr{ _102617_token._field_kind };
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_4799203360:;
						{
							return (*this)._method_build_parentheses_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_4799203456:;
						{
							return (*this)._method_build_brace_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_4799204688:;
						{
							return (*this)._method_build_bracket_range(_101234_tokens);
						}
					}
					_match_end_4799203248:;
				}
			}
		}
		_match_end_4799186336:;
	}
	(*this)._method_push_err(_102617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1ea6ee955_BinopExpr> _1ea715b69_ExprBuilder::_method_build_binop(jule::Slice<_1ea7465e5_Token>& _109235_tokens,jule::Int _109252_i) {
	jule::Slice<_1ea7465e5_Token> _109317_left_tokens = _109235_tokens.slice(0LL,_109252_i);
	jule::Slice<_1ea7465e5_Token> _109417_right_tokens = _109235_tokens.slice(_109252_i + 1LL);
	if (_109317_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_109417_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_BinopExpr>(new( std::nothrow ) _1ea6ee955_BinopExpr((*this)._method_build(_109317_left_tokens),(*this)._method_build(_109417_right_tokens),_109235_tokens[_109252_i]));
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build(jule::Slice<_1ea7465e5_Token>& _111529_tokens) {
	jule::Int _111613_i = _1ea715b69_find_lowest_prec_op(_111529_tokens);
	if (_111613_i == -1LL) {
		return (*this)._method_build_data(_111529_tokens);
	}
	return jule::Any((*this)._method_build_binop(_111529_tokens,_111613_i));
}



inline jule::Any _1ea715b69_ExprBuilder::_method_build_kind(jule::Slice<_1ea7465e5_Token>& _112334_tokens) {
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _112418_parts;
	jule::Slice<_1e8ea7cc0_Log> _112425_errors;
	std::tie(_112418_parts,_112425_errors) = _1eb381c13_parts(_112334_tokens,8LLU,true);
	if (_112425_errors != nullptr) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_112425_errors);
		return jule::Any(nullptr);
	} else if (_112418_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_112418_parts));
	}
	return (*this)._method_build(_112334_tokens);
}



inline jule::Ptr<_1ea6ee955_Expr> _1ea715b69_ExprBuilder::_method_build_from_tokens(jule::Slice<_1ea7465e5_Token> _113440_tokens) {
	_113440_tokens=_1ea715b69_eliminate_comments(_113440_tokens);
	if (_113440_tokens.len() == 0LL) {
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_Expr>(new( std::nothrow ) _1ea6ee955_Expr(_113440_tokens[0LL],(*this)._method_build_kind(_113440_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea715b69_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _1eb381c13_Parser::_method_stop(void) {
	(*this)._field_ast=nullptr;
}



inline jule::Bool _1eb381c13_Parser::_method_stopped(void) {
	return (*this)._field_ast == nullptr;
}



inline void _1eb381c13_Parser::_method_push_err(_1ea7465e5_Token _23927_token,jule::Str _23941_fmt,jule::Slice<jule::Any> _23954_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1eb381c13_compiler_err(_23927_token,_23941_fmt,_23954_args));
}



inline void _1eb381c13_Parser::_method_push_suggestion(jule::Str _24434_fmt,jule::Slice<jule::Any> _24447_args) {
	{
		_1eb381c13_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_24434_fmt,_24447_args);
	}
}



inline jule::Ptr<_1ea6ee955_Expr> _1eb381c13_Parser::_method_build_expr(jule::Slice<_1ea7465e5_Token>& _24835_tokens) {
	jule::Ptr<_1ea715b69_ExprBuilder> _24917_ep = jule::new_struct<_1ea715b69_ExprBuilder>(new( std::nothrow ) _1ea715b69_ExprBuilder(this->self));
	jule::Ptr<_1ea6ee955_Expr> _25017_expr = _24917_ep->_method_build_from_tokens(_24835_tokens);
	return _25017_expr;
}



inline jule::Ptr<_1ea6ee955_Directive> _1eb381c13_Parser::_method_build_directive(jule::Slice<_1ea7465e5_Token> _25438_tokens) {
	if (_25438_tokens.len() == 1LL) {
		(*this)._method_push_err(_25438_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_25438_tokens[1LL]._field_column != (_25438_tokens[0LL]._field_column + 1LL)) {
		(*this)._method_push_err(_25438_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_Directive>(new( std::nothrow ) _1ea6ee955_Directive(_25438_tokens[1LL],_25438_tokens.slice(2LL)));
}



inline void _1eb381c13_Parser::_method_push_directive(jule::Ptr<_1ea6ee955_Directive> _27137_d) {
	if (_27137_d == nullptr) {
		return;
	}
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_4799260672:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> &_1eb381c13_pd = *it;
			{
				if (_27137_d->_field_tag._field_kind == _1eb381c13_pd->_field_tag._field_kind) {
					return;
				}
			}
			_iter_next_4799260672:;
			++it;
			goto _iter_begin_4799260672;
		}
		_iter_end_4799260672:;
	}
	(*this)._field_directives = jule::alloc_for_append((*this)._field_directives,1);(*this)._field_directives.push(_27137_d);
}



inline jule::Ptr<_1ea6ee955_ScopeTree> _1eb381c13_Parser::_method_build_scope(jule::Slice<_1ea7465e5_Token>& _28536_tokens) {
	jule::Ptr<_1ea6ee955_ScopeTree> _28617_s = _1ea722e73_new_scope();
	_1ea722e73_ScopeParser _28717_sp = _1ea722e73_ScopeParser(this->self,jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Slice<jule::Ptr<_1ea722e73_Stmt>>(),jule::Int());
	_28717_sp._method_build(_28536_tokens,_28617_s);
	return _28617_s;
}



inline std::tuple<jule::Ptr<_1ea6ee955_TypeDecl>,jule::Bool> _1eb381c13_Parser::_method___build_type(jule::Slice<_1ea7465e5_Token>& _29444_tokens,jule::Int* _29513_i,jule::Bool _29522_err) {
	_1eb6540c3_TypeBuilder _29617_tb = _1eb6540c3_TypeBuilder(this->self,_29444_tokens,_29513_i,_29522_err);
	jule::Ptr<_1ea6ee955_TypeDecl> _30218_decl;
	jule::Bool _30224_ok;
	std::tie(_30218_decl,_30224_ok) = _29617_tb._method_build();
	return std::make_tuple(_30218_decl,_30224_ok);
}



inline std::tuple<jule::Ptr<_1ea6ee955_TypeDecl>,jule::Bool> _1eb381c13_Parser::_method_build_type(jule::Slice<_1ea7465e5_Token>& _30742_tokens,jule::Int* _30813_i,jule::Bool _30822_err) {
	_1ea7465e5_Token _30913_token = _30742_tokens[(*(_30813_i))];
	jule::Ptr<_1ea6ee955_TypeDecl> _31018_t;
	jule::Bool _31021_ok;
	std::tie(_31018_t,_31021_ok) = this->self->_method___build_type(_30742_tokens,_30813_i,_30822_err);
	if (_30822_err && (!(_31021_ok))) {
		this->self->_method_push_err(_30913_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	}
	return std::make_tuple(_31018_t,_31021_ok);
}



inline jule::Ptr<_1ea6ee955_TypeAliasDecl> _1eb381c13_Parser::_method_build_type_alias_decl(jule::Slice<_1ea7465e5_Token>& _31746_tokens) {
	jule::Int _31817_i = 1LL;
	if (_31817_i >= _31746_tokens.len()) {
		this->self->_method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_TypeAliasDecl> _32317_tad = jule::new_struct<_1ea6ee955_TypeAliasDecl>(new( std::nothrow ) _1ea6ee955_TypeAliasDecl(jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Bool(),jule::Bool(),_31746_tokens[1LL],_31746_tokens[1LL]._field_kind,jule::Ptr<_1ea6ee955_TypeDecl>(),jule::Ptr<_1ea6ee955_CommentGroup>()));
	_1ea7465e5_Token _32717_token = _31746_tokens[_31817_i];
	if (_32717_token._field_id != 2LLU) {
		this->self->_method_push_err(_32717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_31817_i)++;
	if (_31817_i >= _31746_tokens.len()) {
		this->self->_method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _32317_tad;
	}
	_32717_token=_31746_tokens[_31817_i];
	if (_32717_token._field_id != 11LLU) {
		this->self->_method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _32317_tad;
	}
	(_31817_i)++;
	if (_31817_i >= _31746_tokens.len()) {
		this->self->_method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _32317_tad;
	}
	jule::Ptr<_1ea6ee955_TypeDecl> _34818_t;
	jule::Bool _34821_ok;
	std::tie(_34818_t,_34821_ok) = this->self->_method_build_type(_31746_tokens,(&(_31817_i)),true);
	_32317_tad->_field_kind=_34818_t;
	if (_34821_ok && (_31817_i < _31746_tokens.len())) {
		this->self->_method_push_err(_31746_tokens[_31817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _32317_tad;
}



inline void _1eb381c13_Parser::_method_build_var_type_and_expr(jule::Ptr<_1ea6ee955_VarDecl>& _35648_v,jule::Slice<_1ea7465e5_Token>& _35666_tokens) {
	jule::Int _35717_i = 0LL;
	_1ea7465e5_Token _35817_tok = _35666_tokens[_35717_i];
	if (_35817_tok._field_id == 11LLU) {
		(_35717_i)++;
		if ((_35717_i >= _35666_tokens.len()) || ((_35666_tokens[_35717_i]._field_id == 7LLU) && (_35666_tokens[_35717_i]._field_kind == jule::Str("=", 1)))) {
			this->self->_method_push_err(_35817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;
		}
		jule::Ptr<_1ea6ee955_TypeDecl> _36622_t;
		jule::Bool _36625_ok;
		std::tie(_36622_t,_36625_ok) = this->self->_method_build_type(_35666_tokens,(&(_35717_i)),true);
		if (_36625_ok) {
			_35648_v->_field_kind=_36622_t;
			if (_35717_i >= _35666_tokens.len()) {
				return;
			}
			_35817_tok=_35666_tokens[_35717_i];
		}
	}
	if (_35817_tok._field_id == 7LLU) {
		if (_35817_tok._field_kind != jule::Str("=", 1)) {
			this->self->_method_push_err(_35817_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;
		}
		jule::Slice<_1ea7465e5_Token> _38121_expr_tokens = _35666_tokens.slice(_35717_i + 1LL);
		if (_38121_expr_tokens.len() == 0LL) {
			this->self->_method_push_err(_35817_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;
		}
		_35648_v->_field_expr=this->self->_method_build_expr(_38121_expr_tokens);
	} else {
		this->self->_method_push_err(_35817_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eb381c13_Parser::_method_build_var_common(jule::Ptr<_1ea6ee955_VarDecl>& _39241_v,jule::Slice<_1ea7465e5_Token> _39258_tokens) {
	_39241_v->_field_token=_39258_tokens[0LL];
	if (_39241_v->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_39241_v->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	_39241_v->_field_ident=_39241_v->_field_token._field_kind;
	_39241_v->_field_kind=nullptr;
	if (_39258_tokens.len() > 1LL) {
		_39258_tokens=_39258_tokens.slice(1LL);
		this->self->_method_build_var_type_and_expr(_39241_v,_39258_tokens);
	}
}



inline void _1eb381c13_Parser::_method_build_var_begin(jule::Ptr<_1ea6ee955_VarDecl>& _40739_v,jule::Ptr<jule::Int> _40756_i,jule::Slice<_1ea7465e5_Token>& _40766_tokens) {
	_1ea7465e5_Token _40813_tok = _40766_tokens[(*(_40756_i))];
	{
		auto &_match_expr{ _40813_tok._field_id };
		if (_match_expr == 38LLU) {
			_case_begin_4799366704:;
			{
				_40739_v->_field_statically=true;
				goto _case_begin_4799366800;
			}
		}
		else if (_match_expr == 34LLU) {
			_case_begin_4799366800:;
			{
				((*(_40756_i)))++;
				if ((*(_40756_i)) >= _40766_tokens.len()) {
					(*this)._method_push_err(_40813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				if (_40766_tokens[(*(_40756_i))]._field_id == 36LLU) {
					_40739_v->_field_mutable=true;
					((*(_40756_i)))++;
				}
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_4799365152:;
			{
				((*(_40756_i)))++;
				_40739_v->_field_constant=true;
			}
		}
		else {
			_case_begin_4799363744:;
			{
				(*this)._method_push_err(_40813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4799364368:;
	}
	if ((*(_40756_i)) >= _40766_tokens.len()) {
		(*this)._method_push_err(_40813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1ea6ee955_VarDecl> _1eb381c13_Parser::_method_build_var(jule::Slice<_1ea7465e5_Token> _44133_tokens) {
	jule::Ptr<jule::Int> _44217_i = jule::new_ptr<jule::Int>(0LL);
	jule::Ptr<_1ea6ee955_VarDecl> _44317_v = jule::new_struct<_1ea6ee955_VarDecl>(new( std::nothrow ) _1ea6ee955_VarDecl(jule::Ptr<_1ea6ee955_ScopeTree>(),_44133_tokens[(*(_44217_i))],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1ea6ee955_CommentGroup>(),jule::Ptr<_1ea6ee955_TypeDecl>(),jule::Ptr<_1ea6ee955_Expr>()));
	this->self->_method_build_var_begin(_44317_v,_44217_i,_44133_tokens);
	if ((*(_44217_i)) >= _44133_tokens.len()) {
		return nullptr;
	}
	_44133_tokens=_44133_tokens.slice((*(_44217_i)));
	if ((_44133_tokens[0LL]._field_id == 7LLU) && (_44133_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		_44317_v->_field_reference=true;
		if (_44133_tokens.len() == 1LL) {
			return nullptr;
		}
		_44133_tokens=_44133_tokens.slice(1LL);
	}
	this->self->_method_build_var_common(_44317_v,_44133_tokens);
	return _44317_v;
}



inline jule::Ptr<_1ea6ee955_GenericDecl> _1eb381c13_Parser::_method_build_generic(jule::Slice<_1ea7465e5_Token>& _46337_tokens) {
	if (_46337_tokens.len() > 1LL) {
		(*this)._method_push_err(_46337_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ea6ee955_GenericDecl> _46717_g = jule::new_struct<_1ea6ee955_GenericDecl>(new( std::nothrow ) _1ea6ee955_GenericDecl(_46337_tokens[0LL],jule::Str()));
	if (_46717_g->_field_token._field_id != 2LLU) {
		(*this)._method_push_err(_46717_g->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	_46717_g->_field_ident=_46717_g->_field_token._field_kind;
	return _46717_g;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _1eb381c13_Parser::_method_build_generics(jule::Slice<_1ea7465e5_Token>& _47838_tokens,_1ea7465e5_Token& _47856_error_token) {
	if (_47838_tokens.len() == 0LL) {
		(*this)._method_push_err(_47856_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _48418_parts;
	jule::Slice<_1e8ea7cc0_Log> _48425_errors;
	std::tie(_48418_parts,_48425_errors) = _1eb381c13_parts(_47838_tokens,8LLU,true);
	if (_48425_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_48425_errors);
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _49017_generics = jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>::alloc(0LL,static_cast<jule::I64>(_48418_parts.len()));
	{
		auto &expr = _48418_parts;
		auto it = expr.begin();
		_iter_begin_4799401920:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1eb381c13_part = *it;
			{
				_49017_generics.push((*this)._method_build_generic(_1eb381c13_part));
			}
			_iter_next_4799401920:;
			++it;
			goto _iter_begin_4799401920;
		}
		_iter_end_4799401920:;
	}
	return _49017_generics;
}



inline jule::Ptr<_1ea6ee955_ParamDecl> _1eb381c13_Parser::_method_build_self_param(jule::Slice<_1ea7465e5_Token> _49839_tokens) {
	if (_49839_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_ParamDecl> _50317_param = jule::new_struct<_1ea6ee955_ParamDecl>(new( std::nothrow ) _1ea6ee955_ParamDecl());
	jule::Int _50617_i = 0LL;
	if (_49839_tokens[_50617_i]._field_id == 36LLU) {
		_50317_param->_field_mutable=true;
		(_50617_i)++;
		if (_50617_i >= _49839_tokens.len()) {
			(*this)._method_push_err(_49839_tokens[_50617_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49839_tokens[_50617_i]._field_kind == jule::Str("&", 1)) {
		_50317_param->_field_ident=jule::Str("&", 1);
		(_50617_i)++;
		if (_50617_i >= _49839_tokens.len()) {
			(*this)._method_push_err(_49839_tokens[_50617_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49839_tokens[_50617_i]._field_id == 28LLU) {
		_50317_param->_field_ident+=jule::Str("self", 4);
		_50317_param->_field_token=_49839_tokens[_50617_i];
		(_50617_i)++;
		if (_50617_i < _49839_tokens.len()) {
			(*this)._method_push_err(_49839_tokens[_50617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	}
	return _50317_param;
}



inline void _1eb381c13_Parser::_method_param_type_begin(jule::Ptr<_1ea6ee955_ParamDecl>& _53740_param,jule::Int& _53764_i,jule::Slice<_1ea7465e5_Token>& _53773_tokens) {
	for (; _53764_i < _53773_tokens.len(); (_53764_i)++) {
		{
			_1ea7465e5_Token _53917_token = _53773_tokens[_53764_i];
			if (_53917_token._field_id != 7LLU) {
				return;
			} else if (_53917_token._field_kind != jule::Str("...", 3)) {
				return;
			}
			if (_53740_param->_field_variadic) {
				(*this)._method_push_err(_53917_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_4799423728;
			}
			_53740_param->_field_variadic=true;
		}
	_iter_next_4799423728:;
	}
	_iter_end_4799423728:;
}



inline void _1eb381c13_Parser::_method_build_param_type(jule::Ptr<_1ea6ee955_ParamDecl>& _55441_param,jule::Slice<_1ea7465e5_Token>& _55465_tokens) {
	jule::Int _55517_i = 0LL;
	this->self->_method_param_type_begin(_55441_param,_55517_i,_55465_tokens);
	if (_55517_i >= _55465_tokens.len()) {
		return;
	}
	std::tie(_55441_param->_field_kind,std::ignore) = this->self->_method_build_type(_55465_tokens,(&(_55517_i)),true);
	if (_55517_i < _55465_tokens.len()) {
		this->self->_method_push_err(_55465_tokens[_55517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eb381c13_Parser::_method_param_body_id(jule::Ptr<_1ea6ee955_ParamDecl> _56732_param,_1ea7465e5_Token _56751_token) {
	if (_1ea7465e5_is_ignore_ident(_56751_token._field_kind)) {
		_56732_param->_field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	_56732_param->_field_ident=_56751_token._field_kind;
}



inline void _1eb381c13_Parser::_method_build_param_body(jule::Ptr<_1ea6ee955_ParamDecl>& _57541_param,jule::Ptr<jule::Int> _57564_i,jule::Slice<_1ea7465e5_Token> _57577_tokens) {
	this->self->_method_param_body_id(_57541_param,_57577_tokens[(*(_57564_i))]);
	_1ea7465e5_Token _57717_tok = _57577_tokens[(*(_57564_i))];
	if (((*(_57564_i)) + 1LL) >= _57577_tokens.len()) {
		return;
	} else if (((_57577_tokens.len() - (*(_57564_i))) - 1LL) < 2LL) {
		this->self->_method_push_err(_57717_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;
	}
	_57717_tok=_57577_tokens[(*(_57564_i)) + 1LL];
	if (_57717_tok._field_id != 11LLU) {
		this->self->_method_build_param_type(_57541_param,_57577_tokens);
		return;
	}
	_57577_tokens=_57577_tokens.slice((*(_57564_i)) + 2LL);
	this->self->_method_build_param_type(_57541_param,_57577_tokens);
}



inline jule::Ptr<_1ea6ee955_ParamDecl> _1eb381c13_Parser::_method_build_param(jule::Slice<_1ea7465e5_Token> _59635_tokens) {
	jule::Ptr<_1ea6ee955_ParamDecl> _59717_param = jule::new_struct<_1ea6ee955_ParamDecl>(new( std::nothrow ) _1ea6ee955_ParamDecl(_59635_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ea6ee955_TypeDecl>(),jule::Str()));
	if (_59717_param->_field_token._field_id == 36LLU) {
		_59717_param->_field_mutable=true;
		if (_59635_tokens.len() == 1LL) {
			this->self->_method_push_err(_59635_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_59635_tokens=_59635_tokens.slice(1LL);
		_59717_param->_field_token=_59635_tokens[0LL];
	}
	if (_59635_tokens.len() >= 3LL) {
		if ((_59717_param->_field_token._field_id == 7LLU) && (_59717_param->_field_token._field_kind == jule::Str("&", 1))) {
			if (_59635_tokens.len() == 1LL) {
				this->self->_method_push_err(_59635_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
			if ((_59635_tokens[1LL]._field_id == 2LLU) && (_59635_tokens[2LL]._field_id == 11LLU)) {
				_59717_param->_field_reference=true;
				_59635_tokens=_59635_tokens.slice(1LL);
				_59717_param->_field_token=_59635_tokens[0LL];
			}
		}
	}
	if (_59717_param->_field_token._field_id != 2LLU) {
		_59717_param->_field_ident=jule::Str("<anonymous>", 11);
		this->self->_method_build_param_type(_59717_param,_59635_tokens);
	} else {
		jule::Ptr<jule::Int> _63321_i = jule::new_ptr<jule::Int>(0LL);
		this->self->_method_build_param_body(_59717_param,_63321_i,_59635_tokens);
	}
	return _59717_param;
}



inline void _1eb381c13_Parser::_method_check_params(jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>>& _64036_params) {
	{
		auto &expr = _64036_params;
		auto it = expr.begin();
		_iter_begin_4799474480:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_ParamDecl> _1eb381c13_param = *it;
			{
				if (_1eb381c13_param->_method_is_self() || (_1eb381c13_param->_field_kind != nullptr)) {
					goto _iter_next_4799474480;
				}
				if (_1eb381c13_param->_field_token._field_id == 0LLU) {
					(*this)._method_push_err(_1eb381c13_param->_field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					_1eb381c13_param->_field_kind=jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_1eb381c13_param->_field_token,jule::Any(jule::new_struct<_1ea6ee955_IdentTypeDecl>(new( std::nothrow ) _1ea6ee955_IdentTypeDecl(_1eb381c13_param->_field_token,_1eb381c13_param->_field_token._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>())))));
					_1eb381c13_param->_field_ident=jule::Str("<anonymous>", 11);
					_1eb381c13_param->_field_token=_1ea7465e5_Token();
				}
			}
			_iter_next_4799474480:;
			++it;
			goto _iter_begin_4799474480;
		}
		_iter_end_4799474480:;
	}
}



inline jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>> _1eb381c13_Parser::_method_build_params(jule::Slice<_1ea7465e5_Token>& _66137_tokens,jule::Bool _66154_method) {
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _66218_parts;
	jule::Slice<_1e8ea7cc0_Log> _66225_errs;
	std::tie(_66218_parts,_66225_errs) = _1eb381c13_parts(_66137_tokens,8LLU,true);
	this->self->_field_errors=jule::append(this->self->_field_errors,_66225_errs);
	if (_66218_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>> _66817_params = nullptr;
	if (_66154_method && (_66218_parts.len() > 0LL)) {
		jule::Ptr<_1ea6ee955_ParamDecl> _67021_param = this->self->_method_build_self_param(_66218_parts[0LL]);
		if ((_67021_param != nullptr) && _67021_param->_method_is_self()) {
			_66817_params.push(_67021_param);
			_66218_parts=_66218_parts.slice(1LL);
		}
	}
	{
		auto &expr = _66218_parts;
		auto it = expr.begin();
		_iter_begin_4799492256:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1eb381c13_part = *it;
			{
				jule::Ptr<_1ea6ee955_ParamDecl> _67821_param = this->self->_method_build_param(_1eb381c13_part);
				if (_67821_param != nullptr) {
					_66817_params.push(_67821_param);
				}
			}
			_iter_next_4799492256:;
			++it;
			goto _iter_begin_4799492256;
		}
		_iter_end_4799492256:;
	}
	this->self->_method_check_params(_66817_params);
	return _66817_params;
}



inline std::tuple<jule::Ptr<_1ea6ee955_RetTypeDecl>,jule::Bool> _1eb381c13_Parser::_method_build_multi_ret_type(jule::Slice<_1ea7465e5_Token>& _68845_tokens,jule::Int& _68867_i) {
	jule::Ptr<_1ea6ee955_RetTypeDecl> _68877_t = jule::Ptr<_1ea6ee955_RetTypeDecl>();
	jule::Bool _68894_ok = jule::Bool();
	_68877_t=jule::new_struct<_1ea6ee955_RetTypeDecl>(new( std::nothrow ) _1ea6ee955_RetTypeDecl());
	(_68867_i)++;
	if (_68867_i >= _68845_tokens.len()) {
		(_68867_i)--;
		std::tie(_68877_t->_field_kind,_68894_ok) = this->self->_method_build_type(_68845_tokens,(&(_68867_i)),false);
		return std::make_tuple(_68877_t,_68894_ok);
	}
	(_68867_i)--;
	jule::Slice<_1ea7465e5_Token> _69817_range_tokens = _1eb381c13_range(_68867_i,jule::Str("(", 1),jule::Str(")", 1),_68845_tokens);
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _70018_parts;
	jule::Slice<_1e8ea7cc0_Log> _70025_errs;
	std::tie(_70018_parts,_70025_errs) = _1eb381c13_parts(_69817_range_tokens,8LLU,true);
	this->self->_field_errors=jule::append(this->self->_field_errors,_70025_errs);
	if (_70018_parts.len() == 0LL) {
		return std::make_tuple(_68877_t,_68894_ok);
	}
	jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _70617_types = jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_70018_parts.len()));
	_68877_t->_field_idents=jule::Slice<_1ea7465e5_Token>::alloc(0LL,static_cast<jule::I64>(_70018_parts.len()));
	{
		auto &expr = _70018_parts;
		auto it = expr.begin();
		_iter_begin_4799509456:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1eb381c13_part = *it;
			{
				_1ea7465e5_Token _70921_token = _1eb381c13_part[0LL];
				jule::Int _71021_offset = 0LL;
				if (_1eb381c13_part.len() > 1LL) {
					_70921_token=_1eb381c13_part[1LL];
					if (_70921_token._field_id == 11LLU) {
						_71021_offset=2LL;
						if (_1eb381c13_part.len() < 3LL) {
							this->self->_method_push_err(_70921_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_4799509456;
						}
					}
				}
				_70921_token=_1eb381c13_part[0LL];
				if (_71021_offset == 2LL) {
					if (_70921_token._field_id != 2LLU) {
					}
					_68877_t->_field_idents = jule::alloc_for_append(_68877_t->_field_idents,1);_68877_t->_field_idents.push(_70921_token);
				} else {
					_70921_token._field_kind=jule::Str("_", 1);
					_68877_t->_field_idents = jule::alloc_for_append(_68877_t->_field_idents,1);_68877_t->_field_idents.push(_70921_token);
				}
				jule::Ptr<_1ea6ee955_TypeDecl> _73522_t;
				std::tie(_73522_t,std::ignore) = this->self->_method_build_type(_1eb381c13_part,(&(_71021_offset)),true);
				if (_71021_offset < _1eb381c13_part.len()) {
					this->self->_method_push_err(_1eb381c13_part[_71021_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_70617_types.push(_73522_t);
			}
			_iter_next_4799509456:;
			++it;
			goto _iter_begin_4799509456;
		}
		_iter_end_4799509456:;
	}
	if (_70617_types.len() > 1LL) {
		_68877_t->_field_kind=jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_68845_tokens[0LL],jule::Any(jule::new_struct<_1ea6ee955_TupleTypeDecl>(new( std::nothrow ) _1ea6ee955_TupleTypeDecl(_70617_types)))));
	} else {
		_68877_t->_field_kind=_70617_types[0LL];
	}
	_68894_ok=true;
	return std::make_tuple(_68877_t,_68894_ok);
}



inline std::tuple<jule::Ptr<_1ea6ee955_RetTypeDecl>,jule::Bool> _1eb381c13_Parser::_method_build_ret_type(jule::Slice<_1ea7465e5_Token>& _75839_tokens,jule::Int& _75861_i) {
	jule::Ptr<_1ea6ee955_RetTypeDecl> _75871_t = jule::Ptr<_1ea6ee955_RetTypeDecl>();
	jule::Bool _75888_ok = jule::Bool();
	_75871_t=jule::new_struct<_1ea6ee955_RetTypeDecl>(new( std::nothrow ) _1ea6ee955_RetTypeDecl());
	if (_75861_i >= _75839_tokens.len()) {
		return std::make_tuple(_75871_t,_75888_ok);
	}
	_1ea7465e5_Token _76417_token = _75839_tokens[_75861_i];
	{
		auto &_match_expr{ _76417_token._field_id };
		if (_match_expr == 3LLU) {
			_case_begin_4799533840:;
			{
				if (_76417_token._field_kind == jule::Str("{", 1)) {
					return std::make_tuple(_75871_t,_75888_ok);
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4799533936:;
			{
				if (_76417_token._field_kind == jule::Str("=", 1)) {
					return std::make_tuple(_75871_t,_75888_ok);
				}
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_4799534080:;
			{
				if ((_75861_i + 1LL) >= _75839_tokens.len()) {
					this->self->_method_push_err(_76417_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_75871_t,_75888_ok);
				}
				(_75861_i)++;
				_76417_token=_75839_tokens[_75861_i];
				if (_76417_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _76417_token._field_kind };
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_4799541456:;
							{
								jule::Ptr<_1ea6ee955_RetTypeDecl> _78730_decl;
								jule::Bool _78736_ok;
								std::tie(_78730_decl,_78736_ok) = this->self->_method_build_multi_ret_type(_75839_tokens,_75861_i);
								_75871_t = _78730_decl;
								_75888_ok = _78736_ok;
								return std::make_tuple(_75871_t,_75888_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_4799541552:;
							{
								this->self->_method_push_err(_76417_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_75871_t,_75888_ok);
							}
						}
						_match_end_4799540304:;
					}
				}
				std::tie(_75871_t->_field_kind,_75888_ok) = this->self->_method_build_type(_75839_tokens,(&(_75861_i)),true);
				return std::make_tuple(_75871_t,_75888_ok);
			}
		}
		_match_end_4799533760:;
	}
	(_75861_i)++;
	this->self->_method_push_err(_76417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_75871_t,_75888_ok);
}



inline jule::Ptr<_1ea6ee955_FnDecl> _1eb381c13_Parser::_method_build_fn_prototype(jule::Slice<_1ea7465e5_Token>& _80643_tokens,jule::Int& _80665_i,jule::Bool _80673_method) {
	jule::Ptr<_1ea6ee955_FnDecl> _80717_f = jule::new_struct<_1ea6ee955_FnDecl>(new( std::nothrow ) _1ea6ee955_FnDecl(_80643_tokens[_80665_i],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1ea6ee955_CommentGroup>(),jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),jule::Ptr<_1ea6ee955_RetTypeDecl>(),jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>>()));
	if (_80717_f->_field_token._field_id == 38LLU) {
		_80717_f->_field_statically=true;
		(_80665_i)++;
		if (_80665_i >= _80643_tokens.len()) {
			this->self->_method_push_err(_80717_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_80717_f->_field_token=_80643_tokens[_80665_i];
	}
	if (_80717_f->_field_token._field_id == 35LLU) {
		_80717_f->_field_unsafety=true;
		(_80665_i)++;
		if (_80665_i >= _80643_tokens.len()) {
			this->self->_method_push_err(_80717_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_80717_f->_field_token=_80643_tokens[_80665_i];
	}
	(_80665_i)++;
	if (_80665_i >= _80643_tokens.len()) {
		this->self->_method_push_err(_80717_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1ea7465e5_Token _84013_tok = _80643_tokens[_80665_i];
	if (_84013_tok._field_id == 2LLU) {
		(_80665_i)++;
		if (_80665_i >= _80643_tokens.len()) {
			this->self->_method_push_err(_80717_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_80717_f->_field_ident=_84013_tok._field_kind;
	} else {
		_80717_f->_field_ident=jule::Str("<anonymous>", 11);
	}
	_1ea7465e5_Token _85213_error_token = _80643_tokens[_80665_i];
	jule::Slice<_1ea7465e5_Token> _85317_generics_tokens = _1eb381c13_range(_80665_i,jule::Str("[", 1),jule::Str("]", 1),_80643_tokens);
	if (_85317_generics_tokens != nullptr) {
		_80717_f->_field_generics=this->self->_method_build_generics(_85317_generics_tokens,_85213_error_token);
	}
	if (_80643_tokens[_80665_i]._field_kind != jule::Str("(", 1)) {
		this->self->_method_push_err(_80643_tokens[_80665_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_1ea7465e5_Token> _86317_params_toks = _1eb381c13_range(_80665_i,jule::Str("(", 1),jule::Str(")", 1),_80643_tokens);
	if (_86317_params_toks.len() > 0LL) {
		_80717_f->_field_params=this->self->_method_build_params(_86317_params_toks,_80673_method);
	}
	if (_80665_i < _80643_tokens.len()) {
		_1ea7465e5_Token _86917_token = _80643_tokens[_80665_i];
		if ((_86917_token._field_id == 7LLU) && (_86917_token._field_kind == jule::Str("!", 1))) {
			_80717_f->_field_exceptional=true;
			(_80665_i)++;
		}
	}
	std::tie(_80717_f->_field_result,std::ignore) = this->self->_method_build_ret_type(_80643_tokens,_80665_i);
	return _80717_f;
}



inline jule::Ptr<_1ea6ee955_FnDecl> _1eb381c13_Parser::_method_build_fn(jule::Slice<_1ea7465e5_Token>& _88233_tokens,jule::Bool _88250_method,jule::Bool _88264_prototype) {
	jule::Int _88317_i = 0LL;
	jule::Ptr<_1ea6ee955_FnDecl> _88417_f = this->self->_method_build_fn_prototype(_88233_tokens,_88317_i,_88250_method);
	if (_88264_prototype) {
		if (_88317_i < _88233_tokens.len()) {
			this->self->_method_push_err(_88233_tokens[_88317_i + 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		return _88417_f;
	} else if (_88417_f == nullptr) {
		return _88417_f;
	}
	if (_88317_i >= _88233_tokens.len()) {
		this->self->_method_stop();
		this->self->_method_push_err(_88417_f->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_1ea7465e5_Token> _90017_block_tokens = _1eb381c13_range(_88317_i,jule::Str("{", 1),jule::Str("}", 1),_88233_tokens);
	if (_90017_block_tokens != nullptr) {
		_88417_f->_field_scope=this->self->_method_build_scope(_90017_block_tokens);
		_88417_f->_field_scope->_field_unsafety=_88417_f->_field_unsafety;
		if (_88317_i < _88233_tokens.len()) {
			this->self->_method_push_err(_88233_tokens[_88317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	} else {
		this->self->_method_stop();
		this->self->_method_push_err(_88417_f->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _88417_f;
}



inline jule::Slice<_1ea7465e5_Token> _1eb381c13_Parser::_method_get_use_decl_selectors(jule::Slice<_1ea7465e5_Token> _91645_tokens) {
	jule::Int _91717_i = 0LL;
	_91645_tokens=_1eb381c13_range(_91717_i,jule::Str("{", 1),jule::Str("}", 1),_91645_tokens);
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _91918_parts;
	jule::Slice<_1e8ea7cc0_Log> _91925_errs;
	std::tie(_91918_parts,_91925_errs) = _1eb381c13_parts(_91645_tokens,8LLU,true);
	if (_91925_errs.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_91925_errs);
		return nullptr;
	}
	jule::Slice<_1ea7465e5_Token> _92517_selectors = jule::Slice<_1ea7465e5_Token>::alloc(0LL,static_cast<jule::I64>(_91918_parts.len()));
	{
		auto &expr = _91918_parts;
		auto it = expr.begin();
		_iter_begin_4799604592:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1eb381c13_part = *it;
			{
				if (_1eb381c13_part.len() > 1LL) {
					(*this)._method_push_err(_1eb381c13_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_1ea7465e5_Token _93021_tok = _1eb381c13_part[0LL];
				if ((_93021_tok._field_id != 2LLU) && (_93021_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_93021_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_4799604592;
				}
				_92517_selectors.push(_93021_tok);
			}
			_iter_next_4799604592:;
			++it;
			goto _iter_begin_4799604592;
		}
		_iter_end_4799604592:;
	}
	return _92517_selectors;
}



inline void _1eb381c13_Parser::_method_build_cpp_use_decl(jule::Ptr<_1ea6ee955_UseDecl>& _94142_decl,jule::Slice<_1ea7465e5_Token>& _94159_tokens) {
	if (_94159_tokens.len() > 1LL) {
		(*this)._method_push_err(_94159_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_1ea7465e5_Token _94513_token = _94159_tokens[0LL];
	if ((_94513_token._field_id != 6LLU) || ((_94513_token._field_kind[0LL] != '`') && (_94513_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_94513_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	_94142_decl->_field_cpp_linked=true;
	_94142_decl->_field_link_path=_94513_token._field_kind.slice(1LL,_94513_token._field_kind.len() - 1LL);
	if ((!(_1e8e27beb_is_std_header_path(_94142_decl->_field_link_path)))) {
		_94142_decl->_field_link_path=_1e904e87d_join(jule::Slice<jule::Str>({_94513_token._field_file->_method_dir(),_94142_decl->_field_link_path}));
	}
}



inline void _1eb381c13_Parser::_method_build_std_use_decl(jule::Ptr<_1ea6ee955_UseDecl>& _95742_decl,jule::Slice<_1ea7465e5_Token> _95762_tokens) {
	_95742_decl->_field_std=true;
	_1ea7465e5_Token _96017_token = _95762_tokens[0LL];
	if (_95762_tokens.len() < 3LL) {
		(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_95762_tokens=_95762_tokens.slice(2LL);
	_96017_token=_95762_tokens[_95762_tokens.len() - 1LL];
	{
		auto &_match_expr{ _96017_token._field_id };
		if (_match_expr == 23LLU) {
			_case_begin_4799632992:;
			{
				(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4799633088:;
			{
				if (_96017_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_1ea7465e5_Token> _97821_selectors = nullptr;
				std::tie(_95762_tokens,_97821_selectors) = _1eb381c13_range_last(_95762_tokens);
				_95742_decl->_field_selected=(*this)._method_get_use_decl_selectors(_97821_selectors);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96017_token=_95762_tokens[_95762_tokens.len() - 1LL];
				if (_96017_token._field_id != 23LLU) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95762_tokens=_95762_tokens.slice(0LL,_95762_tokens.len() - 1LL);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4799633184:;
			{
				if (_96017_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95762_tokens=_95762_tokens.slice(0LL,_95762_tokens.len() - 1LL);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96017_token=_95762_tokens[_95762_tokens.len() - 1LL];
				if (_96017_token._field_id != 23LLU) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95762_tokens=_95762_tokens.slice(0LL,_95762_tokens.len() - 1LL);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95742_decl->_field_full=true;
			}
		}
		_match_end_4799632912:;
	}
	_95742_decl->_field_link_path=jule::Str("std::", 5) + _1eb381c13_tokstoa(_95762_tokens);
}



inline void _1eb381c13_Parser::_method_build_ident_use_decl(jule::Ptr<_1ea6ee955_UseDecl>& _102144_decl,jule::Slice<_1ea7465e5_Token> _102164_tokens) {
	_102144_decl->_field_std=false;
	_1ea7465e5_Token _102417_token = _102164_tokens[_102164_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102417_token._field_id };
		if (_match_expr == 23LLU) {
			_case_begin_4799658640:;
			{
				(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4799660912:;
			{
				if (_102417_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_1ea7465e5_Token> _103621_selectors = nullptr;
				std::tie(_102164_tokens,_103621_selectors) = _1eb381c13_range_last(_102164_tokens);
				_102144_decl->_field_selected=(*this)._method_get_use_decl_selectors(_103621_selectors);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102417_token=_102164_tokens[_102164_tokens.len() - 1LL];
				if (_102417_token._field_id != 23LLU) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102164_tokens=_102164_tokens.slice(0LL,_102164_tokens.len() - 1LL);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4799661008:;
			{
				if (_102417_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102164_tokens=_102164_tokens.slice(0LL,_102164_tokens.len() - 1LL);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102417_token=_102164_tokens[_102164_tokens.len() - 1LL];
				if (_102417_token._field_id != 23LLU) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102164_tokens=_102164_tokens.slice(0LL,_102164_tokens.len() - 1LL);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102144_decl->_field_full=true;
			}
		}
		_match_end_4799660640:;
	}
	_102144_decl->_field_link_path=_1eb381c13_tokstoa(_102164_tokens);
}



inline void _1eb381c13_Parser::_method_parse_use_decl(jule::Ptr<_1ea6ee955_UseDecl>& _108638_decl,jule::Slice<_1ea7465e5_Token> _108658_tokens) {
	if (_108638_decl->_field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_108638_decl,_108658_tokens);
		return;
	}
	_1ea7465e5_Token _109217_token = _108658_tokens[0LL];
	if (_109217_token._field_id != 2LLU) {
		(*this)._method_push_err(_109217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	if ((_108658_tokens.len() > 2LL) && (_108658_tokens[1LL]._field_id == 12LLU)) {
		_108638_decl->_field_alias=_109217_token._field_kind;
		if (_108658_tokens[2LL]._field_id != 2LLU) {
			(*this)._method_push_err(_109217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;
		}
		_108658_tokens=_108658_tokens.slice(2LL);
		_109217_token=_108658_tokens[0LL];
	}
	
	{
		if (_109217_token._field_kind == jule::Str("std", 3)) {
			_case_begin_4799699104:;
			{
				(*this)._method_build_std_use_decl(_108638_decl,_108658_tokens);
			}
		}
		else {
			_case_begin_4799698304:;
			{
				(*this)._method_build_ident_use_decl(_108638_decl,_108658_tokens);
			}
		}
		_match_end_4799698192:;
	}
}



inline jule::Ptr<_1ea6ee955_UseDecl> _1eb381c13_Parser::_method_build_use_decl(jule::Slice<_1ea7465e5_Token> _112137_tokens,jule::Bool _112154_cpp_linked) {
	jule::Ptr<_1ea6ee955_UseDecl> _112217_decl = jule::new_struct<_1ea6ee955_UseDecl>(new( std::nothrow ) _1ea6ee955_UseDecl(_112137_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_1ea7465e5_Token>(),_112154_cpp_linked,jule::Bool()));
	if (_112137_tokens.len() < 2LL) {
		(*this)._method_push_err(_112217_decl->_field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	}
	_112137_tokens=_112137_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_112217_decl,_112137_tokens);
	return _112217_decl;
}



inline jule::Ptr<_1ea6ee955_Expr> _1eb381c13_Parser::_method_build_enum_item_expr(jule::Ptr<jule::Int> _113544_i,jule::Slice<_1ea7465e5_Token>& _113558_tokens) {
	jule::Int _113617_brace_n = 0LL;
	jule::Int _113713_expr_start = (*(_113544_i));
	for (; (*(_113544_i)) < _113558_tokens.len(); ((*(_113544_i)))++) {
		{
			_1ea7465e5_Token _113917_t = _113558_tokens[(*(_113544_i))];
			if (_113917_t._field_id == 3LLU) {
				{
					auto &_match_expr{ _113917_t._field_kind };
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_4799718368:;
						{
							(_113617_brace_n)++;
							goto _iter_next_4799713280;
						}
					}
					else {
						_case_begin_4799716608:;
						{
							(_113617_brace_n)--;
						}
					}
					_match_end_4799716704:;
				}
			}
			if (_113617_brace_n > 0LL) {
				goto _iter_next_4799713280;
			}
			if ((_113917_t._field_id == 8LLU) || (((*(_113544_i)) + 1LL) >= _113558_tokens.len())) {
				jule::Slice<_1ea7465e5_Token> _115825_expr_tokens = nullptr;
				if (_113917_t._field_id == 8LLU) {
					_115825_expr_tokens=_113558_tokens.slice(_113713_expr_start,(*(_113544_i)));
				} else {
					_115825_expr_tokens=_113558_tokens.slice(_113713_expr_start);
				}
				return this->self->_method_build_expr(_115825_expr_tokens);
			}
		}
	_iter_next_4799713280:;
	}
	_iter_end_4799713280:;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>> _1eb381c13_Parser::_method_build_enum_items(jule::Slice<_1ea7465e5_Token>& _117041_tokens) {
	jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>> _117117_items = jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>>::alloc(0LL,1LL);
	jule::Ptr<jule::Int> _117217_i = jule::new_ptr<jule::Int>(0LL);
	for (; (*(_117217_i)) < _117041_tokens.len(); ((*(_117217_i)))++) {
		{
			_1ea7465e5_Token _117421_t = _117041_tokens[(*(_117217_i))];
			if (_117421_t._field_id == 18LLU) {
				goto _iter_next_4799727648;
			}
			jule::Ptr<_1ea6ee955_EnumItemDecl> _117921_item = jule::new_struct<_1ea6ee955_EnumItemDecl>(new( std::nothrow ) _1ea6ee955_EnumItemDecl());
			_117921_item->_field_token=_117421_t;
			if (_117921_item->_field_token._field_id != 2LLU) {
				this->self->_method_push_err(_117921_item->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			}
			_117921_item->_field_ident=_117921_item->_field_token._field_kind;
			if ((((*(_117217_i)) + 1LL) >= _117041_tokens.len()) || (_117041_tokens[(*(_117217_i)) + 1LL]._field_id == 8LLU)) {
				if (((*(_117217_i)) + 1LL) < _117041_tokens.len()) {
					((*(_117217_i)))++;
				}
				_117117_items.push(_117921_item);
				goto _iter_next_4799727648;
			}
			((*(_117217_i)))++;
			_117421_t=_117041_tokens[(*(_117217_i))];
			((*(_117217_i)))++;
			if ((_117421_t._field_id != 7LLU) || (_117421_t._field_kind != jule::Str("=", 1))) {
				this->self->_method_push_err(_117421_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				this->self->_method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>());
				goto _iter_next_4799727648;
			}
			if (((*(_117217_i)) >= _117041_tokens.len()) || (_117041_tokens[(*(_117217_i))]._field_id == 8LLU)) {
				this->self->_method_push_err(_117421_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_4799727648;
			}
			_117921_item->_field_expr=this->self->_method_build_enum_item_expr(_117217_i,_117041_tokens);
			_117117_items.push(_117921_item);
		}
	_iter_next_4799727648:;
	}
	_iter_end_4799727648:;
	return _117117_items;
}



inline jule::Ptr<_1ea6ee955_EnumDecl> _1eb381c13_Parser::_method_build_enum_decl(jule::Slice<_1ea7465e5_Token>& _121140_tokens) {
	if ((_121140_tokens.len() < 2LL) || (_121140_tokens.len() < 3LL)) {
		this->self->_method_push_err(_121140_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_EnumDecl> _121617_e = jule::new_struct<_1ea6ee955_EnumDecl>(new( std::nothrow ) _1ea6ee955_EnumDecl(_121140_tokens[1LL],jule::Bool(),jule::Str(),jule::Ptr<_1ea6ee955_TypeDecl>(),jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>>(),jule::Ptr<_1ea6ee955_CommentGroup>()));
	if (_121617_e->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_121617_e->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	_121617_e->_field_ident=_121617_e->_field_token._field_kind;
	jule::Int _122417_i = 2LL;
	if (_121140_tokens[_122417_i]._field_id == 11LLU) {
		(_122417_i)++;
		if (_122417_i >= _121140_tokens.len()) {
			this->self->_method_push_err(_121140_tokens[_122417_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _121617_e;
		}
		std::tie(_121617_e->_field_kind,std::ignore) = this->self->_method_build_type(_121140_tokens,(&(_122417_i)),true);
		if (_122417_i >= _121140_tokens.len()) {
			this->self->_method_stop();
			this->self->_method_push_err(_121617_e->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _121617_e;
		}
	} else {
		_121617_e->_field_kind=nullptr;
	}
	jule::Slice<_1ea7465e5_Token> _124117_item_tokens = _1eb381c13_range(_122417_i,jule::Str("{", 1),jule::Str("}", 1),_121140_tokens);
	if (_124117_item_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_121617_e->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _121617_e;
	} else if (_122417_i < _121140_tokens.len()) {
		this->self->_method_push_err(_121140_tokens[_122417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_121617_e->_field_items=this->self->_method_build_enum_items(_124117_item_tokens);
	return _121617_e;
}



inline jule::Ptr<_1ea6ee955_FieldDecl> _1eb381c13_Parser::_method_build_field(jule::Slice<_1ea7465e5_Token> _125435_tokens) {
	jule::Ptr<_1ea6ee955_FieldDecl> _125517_f = jule::new_struct<_1ea6ee955_FieldDecl>(new( std::nothrow ) _1ea6ee955_FieldDecl());
	_125517_f->_field_public=_125435_tokens[0LL]._field_id == 21LLU;
	if (_125517_f->_field_public) {
		if (_125435_tokens.len() == 1LL) {
			this->self->_method_push_err(_125435_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125435_tokens=_125435_tokens.slice(1LL);
	}
	_125517_f->_field_mutable=_125435_tokens[0LL]._field_id == 36LLU;
	if (_125517_f->_field_mutable) {
		if (_125435_tokens.len() == 1LL) {
			this->self->_method_push_err(_125435_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125435_tokens=_125435_tokens.slice(1LL);
	}
	_125517_f->_field_token=_125435_tokens[0LL];
	if (_125517_f->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_125517_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	_125517_f->_field_ident=_125517_f->_field_token._field_kind;
	if (_125435_tokens.len() == 1LL) {
		this->self->_method_push_err(_125435_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_125435_tokens[1LL]._field_id != 11LLU) {
		this->self->_method_push_err(_125435_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_125435_tokens=_125435_tokens.slice(2LL);
	jule::Int _129217_i = 0LL;
	std::tie(_125517_f->_field_kind,std::ignore) = this->self->_method_build_type(_125435_tokens,(&(_129217_i)),true);
	if (_129217_i < _125435_tokens.len()) {
		this->self->_method_push_err(_125435_tokens[_129217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _125517_f;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>> _1eb381c13_Parser::_method_build_struct_decl_fields(jule::Slice<_1ea7465e5_Token> _130248_tokens) {
	jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>> _130317_fields = nullptr;
	jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _130417_stmts = _1ea722e73_split_stmts(_130248_tokens);
	{
		auto &expr = _130417_stmts;
		auto it = expr.begin();
		_iter_begin_4799799968:;
		if (it != expr.end()) {
			jule::Ptr<_1ea722e73_Stmt> _1eb381c13_stmt = *it;
			{
				_130248_tokens=_1eb381c13_stmt->_field_tokens;
				if (_130248_tokens[0LL]._field_id == 18LLU) {
					goto _iter_next_4799799968;
				}
				jule::Ptr<_1ea6ee955_FieldDecl> _131021_f = this->self->_method_build_field(_130248_tokens);
				_130317_fields.push(_131021_f);
			}
			_iter_next_4799799968:;
			++it;
			goto _iter_begin_4799799968;
		}
		_iter_end_4799799968:;
	}
	return _130317_fields;
}



inline jule::Ptr<_1ea6ee955_StructDecl> _1eb381c13_Parser::_method_build_struct_decl(jule::Slice<_1ea7465e5_Token>& _131642_tokens) {
	if (_131642_tokens.len() < 3LL) {
		this->self->_method_push_err(_131642_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _132217_i = 1LL;
	jule::Ptr<_1ea6ee955_StructDecl> _132317_s = jule::new_struct<_1ea6ee955_StructDecl>(new( std::nothrow ) _1ea6ee955_StructDecl(_131642_tokens[_132217_i],jule::Str(),jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1ea6ee955_CommentGroup>(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>()));
	if (_132317_s->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_132317_s->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_132217_i)++;
	if (_132217_i >= _131642_tokens.len()) {
		this->self->_method_push_err(_131642_tokens[_132217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _132317_s;
	}
	_132317_s->_field_ident=_132317_s->_field_token._field_kind;
	_1ea7465e5_Token _133713_error_token = _131642_tokens[_132217_i];
	jule::Slice<_1ea7465e5_Token> _133817_generics_tokens = _1eb381c13_range(_132217_i,jule::Str("[", 1),jule::Str("]", 1),_131642_tokens);
	if (_133817_generics_tokens != nullptr) {
		_132317_s->_field_generics=this->self->_method_build_generics(_133817_generics_tokens,_133713_error_token);
	}
	if (_132217_i >= _131642_tokens.len()) {
		this->self->_method_push_err(_131642_tokens[_132217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _132317_s;
	}
	jule::Slice<_1ea7465e5_Token> _134717_body_tokens = _1eb381c13_range(_132217_i,jule::Str("{", 1),jule::Str("}", 1),_131642_tokens);
	if (_134717_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_132317_s->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _132317_s;
	}
	if (_132217_i < _131642_tokens.len()) {
		this->self->_method_push_err(_131642_tokens[_132217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_132317_s->_field_fields=this->self->_method_build_struct_decl_fields(_134717_body_tokens);
	return _132317_s;
}



inline void _1eb381c13_Parser::_method_check_method_receiver(jule::Ptr<_1ea6ee955_FnDecl>& _136141_f) {
	if (_136141_f->_field_statically) {
		if ((_136141_f->_field_params.len() > 0LL) && _136141_f->_field_params[0LL]->_method_is_self()) {
			(*this)._method_push_err(_136141_f->_field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		}
		return;
	}
	if (_136141_f->_field_params.len() == 0LL) {
		(*this)._method_push_err(_136141_f->_field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ea6ee955_ParamDecl> _137413_param = _136141_f->_field_params[0LL];
	if ((!(_137413_param->_method_is_self()))) {
		(*this)._method_push_err(_136141_f->_field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
}



inline jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> _1eb381c13_Parser::_method_build_trait_methods(jule::Slice<_1ea7465e5_Token> _138143_tokens) {
	jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>> _138217_methods = nullptr;
	jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _138317_stmts = _1ea722e73_split_stmts(_138143_tokens);
	{
		auto &expr = _138317_stmts;
		auto it = expr.begin();
		_iter_begin_4799845120:;
		if (it != expr.end()) {
			jule::Ptr<_1ea722e73_Stmt> _1eb381c13_stmt = *it;
			{
				_138143_tokens=_1ea715b69_eliminate_comments(_1eb381c13_stmt->_field_tokens);
				if (_138143_tokens.len() == 0LL) {
					goto _iter_next_4799845120;
				}
				jule::Bool _139021_is_pub = false;
				if (_138143_tokens[0LL]._field_id == 21LLU) {
					_139021_is_pub=true;
					if (_138143_tokens.len() == 1LL) {
						this->self->_method_push_err(_138143_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_4799845120;
					}
					_138143_tokens=_138143_tokens.slice(1LL);
				}
				jule::Ptr<_1ea6ee955_FnDecl> _140021_f = this->self->_method_build_fn(_138143_tokens,true,true);
				if (_140021_f != nullptr) {
					if (_140021_f->_method_is_anon()) {
						this->self->_method_push_err(_140021_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
					this->self->_method_check_method_receiver(_140021_f);
					if (_140021_f->_field_generics.len() > 0LL) {
						this->self->_method_push_err(_140021_f->_field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					}
					_140021_f->_field_public=_139021_is_pub;
					_138217_methods.push(_140021_f);
				}
			}
			_iter_next_4799845120:;
			++it;
			goto _iter_begin_4799845120;
		}
		_iter_end_4799845120:;
	}
	return _138217_methods;
}



inline jule::Ptr<_1ea6ee955_TraitDecl> _1eb381c13_Parser::_method_build_trait_decl(jule::Slice<_1ea7465e5_Token>& _141641_tokens) {
	if (_141641_tokens.len() < 3LL) {
		this->self->_method_push_err(_141641_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_TraitDecl> _142117_t = jule::new_struct<_1ea6ee955_TraitDecl>(new( std::nothrow ) _1ea6ee955_TraitDecl(_141641_tokens[1LL],jule::Str(),jule::Bool(),jule::Ptr<_1ea6ee955_CommentGroup>(),jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>>()));
	if (_142117_t->_field_token._field_id != 2LLU) {
		this->self->_method_push_err(_142117_t->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	_142117_t->_field_ident=_142117_t->_field_token._field_kind;
	jule::Int _142917_i = 2LL;
	jule::Slice<_1ea7465e5_Token> _143017_body_tokens = _1eb381c13_range(_142917_i,jule::Str("{", 1),jule::Str("}", 1),_141641_tokens);
	if (_143017_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_142117_t->_field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_142917_i < _141641_tokens.len()) {
		this->self->_method_push_err(_141641_tokens[_142917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_142117_t->_field_methods=this->self->_method_build_trait_methods(_143017_body_tokens);
	return _142117_t;
}



inline jule::Ptr<_1ea6ee955_FnDecl> _1eb381c13_Parser::_method_build_cpp_link_fn(jule::Slice<_1ea7465e5_Token> _144441_tokens) {
	_144441_tokens=_144441_tokens.slice(1LL);
	jule::Ptr<_1ea6ee955_FnDecl> _144617_f = this->self->_method_build_fn(_144441_tokens,false,true);
	if (_144617_f != nullptr) {
		if (_144617_f->_method_is_anon()) {
			this->self->_method_push_err(_144617_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		_144617_f->_field_cpp_linked=true;
	}
	return _144617_f;
}



inline jule::Ptr<_1ea6ee955_VarDecl> _1eb381c13_Parser::_method_build_cpp_link_var(jule::Slice<_1ea7465e5_Token> _145642_tokens) {
	_145642_tokens=_145642_tokens.slice(1LL);
	jule::Ptr<_1ea6ee955_VarDecl> _145817_v = this->self->_method_build_var(_145642_tokens);
	if (_145817_v != nullptr) {
		_145817_v->_field_cpp_linked=true;
		if (_145817_v->_field_expr != nullptr) {
			this->self->_method_push_err(_145817_v->_field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		}
	}
	return _145817_v;
}



inline jule::Ptr<_1ea6ee955_StructDecl> _1eb381c13_Parser::_method_build_cpp_link_struct(jule::Slice<_1ea7465e5_Token> _146845_tokens) {
	_146845_tokens=_146845_tokens.slice(1LL);
	jule::Ptr<_1ea6ee955_StructDecl> _147017_s = this->self->_method_build_struct_decl(_146845_tokens);
	if (_147017_s != nullptr) {
		_147017_s->_field_cpp_linked=true;
	}
	return _147017_s;
}



inline jule::Ptr<_1ea6ee955_TypeAliasDecl> _1eb381c13_Parser::_method_build_cpp_link_type_alias(jule::Slice<_1ea7465e5_Token> _147749_tokens) {
	_147749_tokens=_147749_tokens.slice(1LL);
	jule::Ptr<_1ea6ee955_TypeAliasDecl> _147917_t = this->self->_method_build_type_alias_decl(_147749_tokens);
	if (_147917_t != nullptr) {
		_147917_t->_field_cpp_linked=true;
	}
	return _147917_t;
}



inline jule::Ptr<_1ea6ee955_UseDecl> _1eb381c13_Parser::_method_build_cpp_link_use(jule::Slice<_1ea7465e5_Token> _148642_tokens) {
	if (_148642_tokens.len() == 1LL) {
		this->self->_method_push_err(_148642_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_148642_tokens=_148642_tokens.slice(1LL);
	
	return this->self->_method_build_use_decl(_148642_tokens,true);
}



inline jule::Any _1eb381c13_Parser::_method_build_cpp_link(jule::Slice<_1ea7465e5_Token>& _149739_tokens) {
	_1ea7465e5_Token _149817_token = _149739_tokens[0LL];
	if (_149739_tokens.len() == 1LL) {
		this->self->_method_push_err(_149817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	_149817_token=_149739_tokens[1LL];
	{
		auto &_match_expr{ _149817_token._field_id };
		if (_match_expr == 19LLU) {
			_case_begin_4799912576:;
			{
				return jule::Any(this->self->_method_build_cpp_link_use(_149739_tokens));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_4799911840:;
			{
				return jule::Any(this->self->_method_build_cpp_link_fn(_149739_tokens));
			}
		}
		else if (_match_expr == 9LLU || _match_expr == 34LLU) {
			_case_begin_4799911936:;
			{
				return jule::Any(this->self->_method_build_cpp_link_var(_149739_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_4799912032:;
			{
				return jule::Any(this->self->_method_build_cpp_link_struct(_149739_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4799912144:;
			{
				return jule::Any(this->self->_method_build_cpp_link_type_alias(_149739_tokens));
			}
		}
		else {
			_case_begin_4799909152:;
			{
				this->self->_method_push_err(_149817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4799911536:;
	}
	return jule::Any(nullptr);
}



inline jule::Ptr<_1ea6ee955_FnDecl> _1eb381c13_Parser::_method_get_method(jule::Slice<_1ea7465e5_Token>& _152835_tokens) {
	jule::Int _152917_i = 0LL;
	_1ea7465e5_Token _153017_token = _152835_tokens[_152917_i];
	if (_153017_token._field_id == 38LLU) {
		if ((_152917_i + 1LL) >= _152835_tokens.len()) {
			this->self->_method_push_err(_153017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_152917_i)++;
		_153017_token=_152835_tokens[_152917_i];
	}
	if (_153017_token._field_id == 35LLU) {
		if ((_152917_i + 1LL) >= _152835_tokens.len()) {
			this->self->_method_push_err(_153017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_152917_i)++;
		_153017_token=_152835_tokens[_152917_i];
	}
	if (_153017_token._field_id != 33LLU) {
		this->self->_method_push_err(_153017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_FnDecl> _155417_f = this->self->_method_build_fn(_152835_tokens,true,false);
	if ((_155417_f != nullptr) && _155417_f->_method_is_anon()) {
		this->self->_method_push_err(_155417_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _155417_f;
}



inline void _1eb381c13_Parser::_method_parse_impl_body(jule::Ptr<_1ea6ee955_Impl>& _156140_ipl,jule::Slice<_1ea7465e5_Token>& _156157_tokens) {
	jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _156217_stmts = _1ea722e73_split_stmts(_156157_tokens);
	{
		auto &expr = _156217_stmts;
		auto it = expr.begin();
		_iter_begin_4799939616:;
		if (it != expr.end()) {
			jule::Ptr<_1ea722e73_Stmt> _1eb381c13_stmt = *it;
			{
				_156157_tokens=_1eb381c13_stmt->_field_tokens;
				_1ea7465e5_Token _156521_token = _156157_tokens[0LL];
				jule::Bool _156621_is_pub = false;
				{
					auto &_match_expr{ _156521_token._field_id };
					if (_match_expr == 18LLU) {
						_case_begin_4799943600:;
						{
							goto _iter_next_4799939616;
						}
					}
					else if (_match_expr == 39LLU) {
						_case_begin_4799943696:;
						{
							this->self->_method_push_directive(this->self->_method_build_directive(_156157_tokens));
							goto _iter_next_4799939616;
						}
					}
					else if (_match_expr == 21LLU) {
						_case_begin_4799943824:;
						{
							_156621_is_pub=true;
							if (_156157_tokens.len() == 1LL) {
								this->self->_method_push_err(_156157_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_4799939616;
							}
							_156157_tokens=_156157_tokens.slice(1LL);
							if (_156157_tokens.len() > 0LL) {
								_156521_token=_156157_tokens[0LL];
							}
						}
					}
					_match_end_4799943520:;
				}
				{
					auto &_match_expr{ _156521_token._field_id };
					if (_match_expr == 9LLU) {
						_case_begin_4799952016:;
						{
							jule::Ptr<_1ea6ee955_VarDecl> _159025_v = this->self->_method_build_var(_156157_tokens);
							if (_159025_v != nullptr) {
								_159025_v->_field_public=_156621_is_pub;
								_156140_ipl->_field_statics = jule::alloc_for_append(_156140_ipl->_field_statics,1);_156140_ipl->_field_statics.push(_159025_v);
							}
						}
					}
					else if (_match_expr == 38LLU || _match_expr == 33LLU || _match_expr == 35LLU) {
						_case_begin_4799947120:;
						{
							jule::Ptr<_1ea6ee955_FnDecl> _159925_f = this->self->_method_get_method(_156157_tokens);
							if (_159925_f != nullptr) {
								this->self->_method_check_method_receiver(_159925_f);
								this->self->_method_apply_fn_meta(_159925_f,_156621_is_pub);
								_156140_ipl->_field_methods = jule::alloc_for_append(_156140_ipl->_field_methods,1);_156140_ipl->_field_methods.push(_159925_f);
							}
						}
					}
					else {
						_case_begin_4799947696:;
						{
							this->self->_method_push_err(_156521_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_4799939616;
						}
					}
					_match_end_4799948688:;
				}
			}
			_iter_next_4799939616:;
			++it;
			goto _iter_begin_4799939616;
		}
		_iter_end_4799939616:;
	}
}



inline jule::Ptr<_1ea6ee955_Impl> _1eb381c13_Parser::_method_build_impl(jule::Slice<_1ea7465e5_Token> _161334_tokens) {
	_1ea7465e5_Token _161417_token = _161334_tokens[0LL];
	if (_161334_tokens.len() < 2LL) {
		this->self->_method_push_err(_161417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_161417_token=_161334_tokens[1LL];
	if (_161417_token._field_id != 2LLU) {
		this->self->_method_push_err(_161417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_161334_tokens.len() < 3LL) {
		this->self->_method_push_err(_161417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_Impl> _162917_ipl = jule::new_struct<_1ea6ee955_Impl>(new( std::nothrow ) _1ea6ee955_Impl(_161417_token,_1ea7465e5_Token(),jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>>(),jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>>()));
	_161417_token=_161334_tokens[2LL];
	if (_161417_token._field_id != 12LLU) {
		if ((_161417_token._field_id == 3LLU) && (_161417_token._field_kind == jule::Str("{", 1))) {
			std::tie(_162917_ipl->_field_base,_162917_ipl->_field_dest) = std::make_tuple(_162917_ipl->_field_dest,_162917_ipl->_field_base);
			_161334_tokens=_161334_tokens.slice(2LL);
			goto _julec_label_body;
		}
		this->self->_method_push_err(_161417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_161334_tokens.len() < 4LL) {
		this->self->_method_push_err(_161417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_161417_token=_161334_tokens[3LL];
	if (_161417_token._field_id != 2LLU) {
		this->self->_method_push_err(_161417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	_162917_ipl->_field_dest=_161417_token;
	_161334_tokens=_161334_tokens.slice(4LL);
	_julec_label_body:;
	jule::Int _165917_i = 0LL;
	jule::Slice<_1ea7465e5_Token> _166017_body_tokens = _1eb381c13_range(_165917_i,jule::Str("{", 1),jule::Str("}", 1),_161334_tokens);
	if (_166017_body_tokens == nullptr) {
		this->self->_method_stop();
		this->self->_method_push_err(_162917_ipl->_field_base,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_165917_i < _161334_tokens.len()) {
		this->self->_method_push_err(_161334_tokens[_165917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	this->self->_method_parse_impl_body(_162917_ipl,_166017_body_tokens);
	return _162917_ipl;
}



inline jule::Any _1eb381c13_Parser::_method_build_node_data(jule::Slice<_1ea7465e5_Token>& _167440_tokens) {
	_1ea7465e5_Token _167517_token = _167440_tokens[0LL];
	{
		auto &_match_expr{ _167517_token._field_id };
		if (_match_expr == 19LLU) {
			_case_begin_4799997744:;
			{
				
				return jule::Any(this->self->_method_build_use_decl(_167440_tokens,false));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_4799998912:;
			{
				jule::Ptr<_1ea6ee955_FnDecl> _168321_f = this->self->_method_build_fn(_167440_tokens,false,false);
				if (_168321_f != nullptr) {
					_168321_f->_field_global=true;
					if (_168321_f->_method_is_anon()) {
						this->self->_method_push_err(_168321_f->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
				}
				return jule::Any(_168321_f);
			}
		}
		else if (_match_expr == 34LLU || _match_expr == 9LLU || _match_expr == 36LLU || _match_expr == 38LLU) {
			_case_begin_4799997088:;
			{
				return jule::Any(this->self->_method_build_var(_167440_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4799997184:;
			{
				return jule::Any(this->self->_method_build_type_alias_decl(_167440_tokens));
			}
		}
		else if (_match_expr == 24LLU) {
			_case_begin_4799997280:;
			{
				return jule::Any(this->self->_method_build_enum_decl(_167440_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_4799997376:;
			{
				return jule::Any(this->self->_method_build_struct_decl(_167440_tokens));
			}
		}
		else if (_match_expr == 29LLU) {
			_case_begin_4799999424:;
			{
				return jule::Any(this->self->_method_build_trait_decl(_167440_tokens));
			}
		}
		else if (_match_expr == 30LLU) {
			_case_begin_4799999520:;
			{
				return jule::Any(this->self->_method_build_impl(_167440_tokens));
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_4799999616:;
			{
				return this->self->_method_build_cpp_link(_167440_tokens);
			}
		}
		else if (_match_expr == 39LLU) {
			_case_begin_4799999712:;
			{
				return jule::Any(this->self->_method_build_directive(_167440_tokens));
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_4799999808:;
			{
				return jule::Any(_1eb381c13_build_comment(_167517_token));
			}
		}
		else {
			_case_begin_4799995472:;
			{
				this->self->_method_push_err(_167517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4799996304:;
	}
}



inline void _1eb381c13_Parser::_method_check_comment_group(_1ea6ee955_Node& _172839_node) {
	if ((*this)._field_comment_group == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _172839_node._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Comment>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_Directive>>()) {
			_case_begin_4800020992:;
		}
		else {
			_case_begin_4800019760:;
			{
				(*this)._field_comment_group=nullptr;
			}
		}
		_match_end_4800019024:;
	}
}



inline void _1eb381c13_Parser::_method_check_directive(_1ea6ee955_Node& _174235_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _174235_node._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Directive>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_Comment>>()) {
			_case_begin_4800026224:;
		}
		else {
			_case_begin_4800024192:;
			{
				if ((*this)._field_directives.len() != 0LL) {
					(*this)._method_push_err((*this)._field_directives[0LL]->_field_tag,jule::Str("this directive is out of scope, cant assign to any define", 57),jule::Slice<jule::Any>());
				}
				(*this)._field_directives=nullptr;
			}
		}
		_match_end_4800023456:;
	}
}



inline void _1eb381c13_Parser::_method_apply_fn_meta(jule::Ptr<_1ea6ee955_FnDecl>& _176037_f,jule::Bool _176049_is_pub) {
	_176037_f->_field_public=_176049_is_pub;
	_176037_f->_field_directives=(*this)._field_directives;
	(*this)._field_directives=nullptr;
	_176037_f->_field_doc_comments=(*this)._field_comment_group;
	(*this)._field_comment_group=nullptr;
}



inline void _1eb381c13_Parser::_method_apply_meta(_1ea6ee955_Node& _176834_node,jule::Bool _176846_is_pub) {
	{
		auto &_match_expr{ _176834_node._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_VarDecl>>()) {
			_case_begin_4800035792:;
			{
				jule::Ptr<_1ea6ee955_VarDecl> _177121_v = _176834_node._field_data.operator jule::Ptr<_1ea6ee955_VarDecl>();
				if (_177121_v == nullptr) {
					return;
				}
				_177121_v->_field_public=_176846_is_pub;
				_177121_v->_field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				_177121_v->_field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnDecl>>()) {
			_case_begin_4800036096:;
			{
				jule::Ptr<_1ea6ee955_FnDecl> _178421_f = _176834_node._field_data.operator jule::Ptr<_1ea6ee955_FnDecl>();
				if (_178421_f == nullptr) {
					return;
				}
				(*this)._method_apply_fn_meta(_178421_f,_176846_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TypeAliasDecl>>()) {
			_case_begin_4800034512:;
			{
				jule::Ptr<_1ea6ee955_TypeAliasDecl> _179221_tad = _176834_node._field_data.operator jule::Ptr<_1ea6ee955_TypeAliasDecl>();
				if (_179221_tad == nullptr) {
					return;
				}
				_179221_tad->_field_public=_176846_is_pub;
				_179221_tad->_field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_EnumDecl>>()) {
			_case_begin_4800034624:;
			{
				jule::Ptr<_1ea6ee955_EnumDecl> _180121_ed = _176834_node._field_data.operator jule::Ptr<_1ea6ee955_EnumDecl>();
				if (_180121_ed == nullptr) {
					return;
				}
				_180121_ed->_field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				_180121_ed->_field_public=_176846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_StructDecl>>()) {
			_case_begin_4800035072:;
			{
				jule::Ptr<_1ea6ee955_StructDecl> _181021_sd = _176834_node._field_data.operator jule::Ptr<_1ea6ee955_StructDecl>();
				if (_181021_sd == nullptr) {
					return;
				}
				_181021_sd->_field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
				_181021_sd->_field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				_181021_sd->_field_public=_176846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TraitDecl>>()) {
			_case_begin_4800035168:;
			{
				jule::Ptr<_1ea6ee955_TraitDecl> _182121_td = _176834_node._field_data.operator jule::Ptr<_1ea6ee955_TraitDecl>();
				if (_182121_td == nullptr) {
					return;
				}
				_182121_td->_field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				_182121_td->_field_public=_176846_is_pub;
			}
		}
		else {
			_case_begin_4800033776:;
			{
				if (_176846_is_pub) {
					(*this)._method_push_err(_176834_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_4800034096:;
	}
}



inline void _1eb381c13_Parser::_method_check_use_decl(_1ea6ee955_Node& _183634_node) {
	{
		auto &_match_expr{ _183634_node._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UseDecl>>()) {
			_case_begin_4800059824:;
		}
		else {
			_case_begin_4800058512:;
			{
				return;
			}
		}
		_match_end_4800058736:;
	}
	if ((*this)._field_ast->_field_decls.len() > 0LL) {
		(*this)._method_push_err(_183634_node._field_token,jule::Str("use declarations must declared before other declarations", 56),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	}
}



inline std::tuple<jule::Bool,jule::Any> _1eb381c13_Parser::_method_build_general_scope_node_data(jule::Slice<_1ea7465e5_Token> _185153_st) {
	jule::Bool _185168_is_pub = jule::Bool();
	jule::Any _185182_data = jule::Any();
	if (_185153_st[0LL]._field_id == 21LLU) {
		_185168_is_pub=true;
		_185153_st=_185153_st.slice(1LL);
		if (_185153_st.len() == 0LL) {
			this->self->_method_push_err(_185153_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_185168_is_pub,_185182_data);
		}
	}
	_185182_data=this->self->_method_build_node_data(_185153_st);
	return std::make_tuple(_185168_is_pub,_185182_data);
}



inline _1ea6ee955_Node _1eb381c13_Parser::_method_parse_node(jule::Slice<_1ea7465e5_Token>& _186635_st) {
	_1ea6ee955_Node _186717_node = _1ea6ee955_Node(_186635_st[0LL],jule::Any());
	jule::Bool _187114_is_pub;
	jule::Any _187126_data;
	std::tie(_187114_is_pub,_187126_data) = this->self->_method_build_general_scope_node_data(_186635_st);
	if (_187126_data == nullptr) {
		return _186717_node;
	}
	_186717_node._field_data=_187126_data;
	this->self->_method_apply_meta(_186717_node,_187114_is_pub);
	this->self->_method_check_comment_group(_186717_node);
	this->self->_method_check_directive(_186717_node);
	this->self->_method_check_use_decl(_186717_node);
	return _186717_node;
}



inline void _1eb381c13_Parser::_method_append_node(jule::Slice<_1ea7465e5_Token>& _188536_st) {
	if (_188536_st.len() == 0LL) {
		return;
	}
	_1ea6ee955_Node _189017_node = this->self->_method_parse_node(_188536_st);
	if ((_189017_node._field_data == nullptr) || this->self->_method_stopped()) {
		return;
	}
	{
		if (_189017_node._method_is_directive()) {
			_case_begin_4800088080:;
			{
				this->self->_method_push_directive(_189017_node._field_data.operator jule::Ptr<_1ea6ee955_Directive>());
			}
		}
		else if (_189017_node._method_is_use_decl()) {
			_case_begin_4800087632:;
			{
				this->self->_field_ast->_field_use_decls = jule::alloc_for_append(this->self->_field_ast->_field_use_decls,1);this->self->_field_ast->_field_use_decls.push(_189017_node._field_data.operator jule::Ptr<_1ea6ee955_UseDecl>());
			}
		}
		else if (_189017_node._method_is_decl()) {
			_case_begin_4800087728:;
			{
				this->self->_field_ast->_field_decls = jule::alloc_for_append(this->self->_field_ast->_field_decls,1);this->self->_field_ast->_field_decls.push(_189017_node);
			}
		}
		else if (_189017_node._method_is_comment()) {
			_case_begin_4800087824:;
			{
				if (this->self->_field_comment_group == nullptr) {
					this->self->_field_comment_group=jule::new_struct<_1ea6ee955_CommentGroup>(new( std::nothrow ) _1ea6ee955_CommentGroup());
				}
				this->self->_field_comment_group->_field_comments = jule::alloc_for_append(this->self->_field_comment_group->_field_comments,1);this->self->_field_comment_group->_field_comments.push(_189017_node._field_data.operator jule::Ptr<_1ea6ee955_Comment>());
			}
		}
		else if (_189017_node._method_is_impl()) {
			_case_begin_4800087920:;
			{
				this->self->_field_ast->_field_impls = jule::alloc_for_append(this->self->_field_ast->_field_impls,1);this->self->_field_ast->_field_impls.push(_189017_node._field_data.operator jule::Ptr<_1ea6ee955_Impl>());
			}
		}
		else {
			_case_begin_4800087328:;
			{
				this->self->_method_push_err(_189017_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4800086384:;
	}
}



inline void _1eb381c13_Parser::_method_remove_range(jule::Int _192031_i,jule::Str _192039_kind,jule::Slice<_1ea7465e5_Token>& _192051_tokens,jule::Slice<jule::Int>& _192073_ranges) {
	jule::Str _192113_close = _1eb381c13_get_close_kind_of_brace(_192039_kind);
	for (; _192031_i >= 0LL; (_192031_i)--) {
		{
			_1ea7465e5_Token _192317_tok = _192051_tokens[_192073_ranges[_192031_i]];
			if (_192317_tok._field_kind != _192113_close) {
				goto _iter_next_4800104496;
			}
			_192073_ranges=jule::append(_192073_ranges.slice(0LL,_192031_i),_192073_ranges.slice(_192031_i + 1LL));
			goto _iter_end_4800104496;
		}
	_iter_next_4800104496:;
	}
	_iter_end_4800104496:;
}



inline void _1eb381c13_Parser::_method_push_wrong_order_close_err(_1ea7465e5_Token& _193346_t,jule::Slice<_1ea7465e5_Token>& _193357_tokens,jule::Slice<jule::Int>& _193375_ranges) {
	{
		auto &_match_expr{ _193357_tokens[_193375_ranges[_193375_ranges.len() - 1LL]]._field_kind };
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_4800112240:;
			{
				(*this)._method_push_err(_193346_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_4800112336:;
			{
				(*this)._method_push_err(_193346_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_4800112432:;
			{
				(*this)._method_push_err(_193346_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_4800112144:;
	}
}



inline void _1eb381c13_Parser::_method_push_range_close(_1ea7465e5_Token _194135_t,jule::Str _194145_left,jule::Slice<_1ea7465e5_Token>& _194157_tokens,jule::Slice<jule::Int>& _194179_ranges) {
	jule::I64 _194213_n = _194179_ranges.len();
	if (_194213_n == 0LL) {
		{
			auto &_match_expr{ _194135_t._field_kind };
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_4800123376:;
				{
					(*this)._method_push_err(_194135_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_4800123552:;
				{
					(*this)._method_push_err(_194135_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_4800123648:;
				{
					(*this)._method_push_err(_194135_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_4800123248:;
		}
		return;
	} else if (_194157_tokens[_194179_ranges[_194213_n - 1LL]]._field_kind != _194145_left) {
		(*this)._method_push_wrong_order_close_err(_194135_t,_194157_tokens,_194179_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>(_194213_n - 1LL),_194135_t._field_kind,_194157_tokens,_194179_ranges);
}



inline void _1eb381c13_Parser::_method_check_ranges(jule::Slice<_1ea7465e5_Token>& _195632_tokens) {
	jule::Slice<jule::Int> _195717_ranges = nullptr;
	{
		auto &expr = _195632_tokens;
		auto it = expr.begin();
		_iter_begin_4800134128:;
		if (it != expr.end()) {
			jule::Int _1eb381c13_i = it - expr.begin();
			_1ea7465e5_Token &_1eb381c13_token = *it;
			{
				if (_1eb381c13_token._field_id != 3LLU) {
					goto _iter_next_4800134128;
				}
				{
					auto &_match_expr{ _1eb381c13_token._field_kind };
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_4800136992:;
						{
							_195717_ranges.push(_1eb381c13_i);
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_4800137088:;
						{
							(*this)._method_push_range_close(_1eb381c13_token,jule::Str("(", 1),_195632_tokens,_195717_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_4800137536:;
						{
							(*this)._method_push_range_close(_1eb381c13_token,jule::Str("{", 1),_195632_tokens,_195717_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_4800137632:;
						{
							(*this)._method_push_range_close(_1eb381c13_token,jule::Str("[", 1),_195632_tokens,_195717_ranges);
						}
					}
					_match_end_4800136176:;
				}
			}
			_iter_next_4800134128:;
			++it;
			_1eb381c13_i++;
			goto _iter_begin_4800134128;
		}
		_iter_end_4800134128:;
	}
	{
		auto &expr = _195717_ranges;
		auto it = expr.begin();
		_iter_begin_4800142000:;
		if (it != expr.end()) {
			jule::Int &_1eb381c13_i = *it;
			{
				_1ea7465e5_Token _198217_token = _195632_tokens[_1eb381c13_i];
				{
					auto &_match_expr{ _198217_token._field_kind };
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_4800145472:;
						{
							(*this)._method_push_err(_198217_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_4800145568:;
						{
							(*this)._method_push_err(_198217_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_4800145664:;
						{
							(*this)._method_push_err(_198217_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_4800145072:;
				}
			}
			_iter_next_4800142000:;
			++it;
			goto _iter_begin_4800142000;
		}
		_iter_end_4800142000:;
	}
}



inline void _1eb381c13_Parser::_method_parse(jule::Ptr<_1ea701c98_File>& _199130_f) {
	this->self->_field_ast=jule::new_struct<_1ea6ecac9_Ast>(new( std::nothrow ) _1ea6ecac9_Ast(_199130_f,jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Slice<jule::Ptr<_1ea6ee955_UseDecl>>(),jule::Slice<jule::Ptr<_1ea6ee955_Impl>>(),jule::Slice<_1ea6ee955_Node>()));
	jule::Slice<_1ea7465e5_Token> _199617_tokens = _199130_f->_method_tokens();
	this->self->_method_check_ranges(_199617_tokens);
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _200217_stmts = _1ea722e73_split_stmts(_199617_tokens);
	jule::Int _200517_i = 0LL;
	_julec_label_iter:;
	for (; _200517_i < _200217_stmts.len(); (_200517_i)++) {
		{
			jule::Ptr<_1ea722e73_Stmt> _200821_stmt = _200217_stmts[_200517_i];
			if (_200821_stmt->_field_tokens.len() == 0LL) {
				return;
			}
			jule::Any _201325_data;
			std::tie(std::ignore,_201325_data) = this->self->_method_build_general_scope_node_data(_200821_stmt->_field_tokens);
			if (_201325_data == nullptr) {
				goto _iter_end_4800155280;
			}
			if (this->self->_method_stopped()) {
				return;
			}
			{
				auto &_match_expr{ _201325_data };
				if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Directive>>()) {
					_case_begin_4800162320:;
					{
						jule::Ptr<_1ea6ee955_Directive> _202425_d = _201325_data.operator jule::Ptr<_1ea6ee955_Directive>();
						if ((_202425_d != nullptr) && _1e902b9c0_is_top_directive(_202425_d->_field_tag._field_kind)) {
							this->self->_field_ast->_field_top_directives = jule::alloc_for_append(this->self->_field_ast->_field_top_directives,1);this->self->_field_ast->_field_top_directives.push(_202425_d);
						} else {
							goto _iter_end_4800155280;
						}
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Comment>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_CommentGroup>>()) {
					_case_begin_4800162416:;
				}
				else {
					_case_begin_4800161456:;
					{
						goto _iter_end_4800155280;
					}
				}
				_match_end_4800161824:;
			}
		}
	_iter_next_4800155280:;
	}
	_iter_end_4800155280:;
	this->self->_field_errors=nullptr;
	for (; _200517_i < _200217_stmts.len(); (_200517_i)++) {
		{
			jule::Ptr<_1ea722e73_Stmt> _204421_stmt = _200217_stmts[_200517_i];
			this->self->_method_append_node(_204421_stmt->_field_tokens);
			if (this->self->_method_stopped()) {
				goto _iter_end_4800165376;
			}
		}
	_iter_next_4800165376:;
	}
	_iter_end_4800165376:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb381c13_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _1eb6540c3_TypeBuilder::_method_push_err(_1ea7465e5_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>());
	}
}



inline void _1eb6540c3_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*this)._field_p->_method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_prim(void) {
	jule::Ptr<_1ea6ee955_TypeDecl> _9217_t = _1eb6540c3_build_prim_type((*this)._field_tokens[(*((*this)._field_i))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_namespace(void) {
	jule::Ptr<_1ea6ee955_TypeDecl> _9817_t = jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl((*this)._field_tokens[(*((*this)._field_i))],jule::Any()));
	jule::Ptr<_1ea6ee955_NamespaceTypeDecl> _10217_nst = jule::new_struct<_1ea6ee955_NamespaceTypeDecl>(new( std::nothrow ) _1ea6ee955_NamespaceTypeDecl());
	jule::Int _10317_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_1ea7465e5_Token _10521_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (jule::unsafe_mod(_10317_n,2LL) == 0LL) {
				if (_10521_token._field_id != 2LLU) {
					(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				}
				_10217_nst->_field_idents = jule::alloc_for_append(_10217_nst->_field_idents,1);_10217_nst->_field_idents.push(_10521_token);
			} else if (_10521_token._field_id != 23LLU) {
				goto _iter_end_4800185344;
			}
			(_10317_n)++;
		}
	_iter_next_4800185344:;
	}
	_iter_end_4800185344:;
	_10217_nst->_field_idents=_10217_nst->_field_idents.slice(0LL,_10217_nst->_field_idents.len() - 1LL);
	((*((*this)._field_i)))--;
	_10217_nst->_field_kind=(*this)._method_build_ident()->_field_kind.operator jule::Ptr<_1ea6ee955_IdentTypeDecl>();
	_9817_t->_field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _1eb6540c3_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_1ea7465e5_Token _13113_token = (*this)._field_tokens[(*((*this)._field_i))];
	if ((_13113_token._field_id != 3LLU) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _13617_parts = (*this)._method_ident_generics();
	if (_13617_parts.len() == 0LL) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>> _14217_types = jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_13617_parts.len()));
	{
		auto &expr = _13617_parts;
		auto it = expr.begin();
		_iter_begin_4800208272:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1eb6540c3_part = *it;
			{
				jule::Int _14421_j = 0LL;
				jule::Ptr<_1ea6ee955_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*this)._field_p->_method_build_type(_1eb6540c3_part,(&(_14421_j)),true);
				if (_14421_j < _1eb6540c3_part.len()) {
					(*this)._method_push_err(_1eb6540c3_part[_14421_j],jule::Str("invalid syntax", 14));
				}
				_14217_types.push(_14522_t);
			}
			_iter_next_4800208272:;
			++it;
			goto _iter_begin_4800208272;
		}
		_iter_end_4800208272:;
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _1eb6540c3_TypeBuilder::_method_ident_generics(void) {
	jule::Int _15513_first = (*((*this)._field_i));
	jule::Int _15617_range_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_1ea7465e5_Token _15817_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (_15817_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _15817_token._field_kind };
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_4800219264:;
						{
							(_15617_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_4800219376:;
						{
							(_15617_range_n)--;
						}
					}
					_match_end_4800218784:;
				}
			}
			if (_15617_range_n == 0LL) {
				((*((*this)._field_i)))++;
				goto _iter_end_4800198624;
			}
		}
	_iter_next_4800198624:;
	}
	_iter_end_4800198624:;
	jule::Slice<_1ea7465e5_Token> _17017_tokens = (*this)._field_tokens.slice(_15513_first + 1LL,(*((*this)._field_i)) - 1LL);
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _17118_parts;
	jule::Slice<_1e8ea7cc0_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _1eb381c13_parts(_17017_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*this)._field_p->_field_errors=jule::append((*this)._field_p->_field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_1ea7465e5_Token _18217_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_1ea6ee955_IdentTypeDecl> _18317_it = jule::new_struct<_1ea6ee955_IdentTypeDecl>(new( std::nothrow ) _1ea6ee955_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>()));
	((*((*this)._field_i)))++;
	_18317_it->_field_generics=(*this)._method_build_generics();
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	}
	(*((*this)._field_i))+=2LL;
	jule::Ptr<_1ea6ee955_TypeDecl> _20217_t = (*this)._method_build_ident();
	_20217_t->_field_kind.operator jule::Ptr<_1ea6ee955_IdentTypeDecl>()->_field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_fn(void) {
	_1ea7465e5_Token _20817_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_1ea6ee955_FnDecl> _20917_f = (*this)._field_p->_method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if (_20917_f == nullptr) {
		return nullptr;
	}
	if ((!(_20917_f->_method_is_anon()))) {
		(*this)._method_push_err(_20917_f->_field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_ptr(void) {
	_1ea7465e5_Token _22317_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[(*((*this)._field_i))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_22317_token,jule::Any(jule::new_struct<_1ea6ee955_PtrTypeDecl>(new( std::nothrow ) _1ea6ee955_PtrTypeDecl(nullptr)))));
	}
	jule::Ptr<_1ea6ee955_TypeDecl> _24017_elem = (*this)._method_step();
	if (_24017_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_22317_token,jule::Any(jule::new_struct<_1ea6ee955_PtrTypeDecl>(new( std::nothrow ) _1ea6ee955_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_sptr(void) {
	_1ea7465e5_Token _25417_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	jule::Ptr<_1ea6ee955_TypeDecl> _26117_elem = (*this)._method_step();
	if (_26117_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_25417_token,jule::Any(jule::new_struct<_1ea6ee955_SptrTypeDecl>(new( std::nothrow ) _1ea6ee955_SptrTypeDecl(_26117_elem)))));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_op(void) {
	_1ea7465e5_Token _27517_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _27517_token._field_kind };
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4800272192:;
			{
				return (*this)._method_build_ptr();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4800272288:;
			{
				return (*this)._method_build_sptr();
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_4800271936:;
			{
				return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_1ea7465e5_Token(),jule::Any(jule::new_struct<_1ea6ee955_SptrTypeDecl>(new( std::nothrow ) _1ea6ee955_SptrTypeDecl((*this)._method_build_sptr())))));
			}
		}
		else {
			_case_begin_4800268528:;
			{
				(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_4800269424:;
	}
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_slc(void) {
	_1ea7465e5_Token _29717_token = (*this)._field_tokens[(*((*this)._field_i))];
	((*((*this)._field_i)))++;
	jule::Ptr<_1ea6ee955_TypeDecl> _29917_elem = (*this)._method_step();
	if (_29917_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_29717_token,jule::Any(jule::new_struct<_1ea6ee955_SlcTypeDecl>(new( std::nothrow ) _1ea6ee955_SlcTypeDecl(_29917_elem)))));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i)) - 1LL],jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Int _32013_expr_delta = (*((*this)._field_i));
	jule::Ptr<_1ea6ee955_TypeDecl> _32217_elem = (*this)._method_step();
	if (_32217_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ea6ee955_ArrTypeDecl> _32717_arrt = jule::new_struct<_1ea6ee955_ArrTypeDecl>(new( std::nothrow ) _1ea6ee955_ArrTypeDecl(_32217_elem,jule::Ptr<_1ea6ee955_Expr>()));
	jule::Slice<_1ea7465e5_Token> _33117_expr_tokens = (*this)._field_tokens.slice(0LL,_32013_expr_delta);
	std::tie(std::ignore,_33117_expr_tokens) = _1eb381c13_range_last(_33117_expr_tokens);
	_33117_expr_tokens=_33117_expr_tokens.slice(1LL,_33117_expr_tokens.len() - 1LL);
	_1ea7465e5_Token _33417_token = _33117_expr_tokens[0LL];
	if (((_33117_expr_tokens.len() == 1LL) && (_33417_token._field_id == 7LLU)) && (_33417_token._field_kind == jule::Str("...", 3))) {
	} else {
		_32717_arrt->_field_size=(*this)._field_p->_method_build_expr(_33117_expr_tokens);
	}
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_33417_token,jule::Any(_32717_arrt)));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_map(jule::Int _34728_colon,jule::Slice<_1ea7465e5_Token>& _34745_tokens) {
	_1ea7465e5_Token _34817_colon_token = (*this)._field_tokens[_34728_colon];
	if ((_34728_colon == 0LL) || ((_34728_colon + 1LL) >= _34745_tokens.len())) {
		(*this)._method_push_err(_34817_colon_token,jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Slice<_1ea7465e5_Token> _35317_key_tokens = _34745_tokens.slice(0LL,_34728_colon);
	jule::Slice<_1ea7465e5_Token> _35417_val_tokens = _34745_tokens.slice(_34728_colon + 1LL);
	jule::Ptr<_1ea6ee955_MapTypeDecl> _35517_mapt = jule::new_struct<_1ea6ee955_MapTypeDecl>(new( std::nothrow ) _1ea6ee955_MapTypeDecl());
	jule::Int _35717_j = 0LL;
	jule::Ptr<_1ea6ee955_TypeDecl> _35818_keyt;
	jule::Bool _35828_ok;
	std::tie(_35818_keyt,_35828_ok) = (*this)._field_p->_method_build_type(_35317_key_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35317_key_tokens.len()) {
		(*this)._method_push_err(_35317_key_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	_35517_mapt->_field_key=_35818_keyt;
	_35717_j=0LL;
	jule::Ptr<_1ea6ee955_TypeDecl> _36718_valt;
	std::tie(_36718_valt,_35828_ok) = (*this)._field_p->_method_build_type(_35417_val_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35417_val_tokens.len()) {
		(*this)._method_push_err(_35417_val_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	_35517_mapt->_field_val=_36718_valt;
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_34817_colon_token,jule::Any(_35517_mapt)));
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_build_enumerable(void) {
	_1ea7465e5_Token _38217_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_38217_token._field_id != 3LLU)) || (_38217_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_38217_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	_38217_token=(*this)._field_tokens[(*((*this)._field_i))];
	if ((_38217_token._field_id == 3LLU) && (_38217_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_1ea7465e5_Token> _39618_map_tokens;
	jule::Int _39630_colon;
	std::tie(_39618_map_tokens,_39630_colon) = _1eb6540c3_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_39630_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39630_colon,_39618_map_tokens);
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_TypeBuilder::_method_step(void) {
	_1ea7465e5_Token _40513_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _40513_token._field_id };
		if (_match_expr == 1LLU) {
			_case_begin_4800328592:;
			{
				return (*this)._method_build_prim();
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_4800328688:;
			{
				return (*this)._method_build_ident();
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_4800330320:;
			{
				return (*this)._method_build_cpp_link();
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_4800330416:;
			{
				return (*this)._method_build_fn();
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4800330512:;
			{
				return (*this)._method_build_op();
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4800330608:;
			{
				return (*this)._method_build_enumerable();
			}
		}
		else {
			_case_begin_4800323392:;
			{
				((*((*this)._field_i)))++;
				(*this)._method_push_err(_40513_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_4800328016:;
	}
}



inline std::tuple<jule::Ptr<_1ea6ee955_TypeDecl>,jule::Bool> _1eb6540c3_TypeBuilder::_method_build(void) {
	jule::Bool _43444_ok = jule::Bool();
	jule::Ptr<_1ea6ee955_TypeDecl> _43517_root = (*this)._method_step();
	if (_43517_root == nullptr) {
		_43444_ok = false;
		return std::make_tuple(_1eb6540c3_build_void_type(),_43444_ok);
	}
	_43444_ok = true;
	return std::make_tuple(_43517_root,_43444_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb6540c3_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ec3e4b65_Const> _1ec3e4b65_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_1ec3e4b65_Const>(new( std::nothrow ) _1ec3e4b65_Const(jule::Any(_1327_x)));
}



inline jule::Ptr<_1ec3e4b65_Const> _1ec3e4b65_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_1ec3e4b65_Const>(new( std::nothrow ) _1ec3e4b65_Const(jule::Any(_1527_x)));
}



inline jule::Ptr<_1ec3e4b65_Const> _1ec3e4b65_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_1ec3e4b65_Const>(new( std::nothrow ) _1ec3e4b65_Const(jule::Any(_1728_x)));
}



inline jule::Ptr<_1ec3e4b65_Const> _1ec3e4b65_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_1ec3e4b65_Const>(new( std::nothrow ) _1ec3e4b65_Const(jule::Any(_1927_x)));
}



inline jule::Ptr<_1ec3e4b65_Const> _1ec3e4b65_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_1ec3e4b65_Const>(new( std::nothrow ) _1ec3e4b65_Const(jule::Any(_2127_x)));
}



inline jule::Ptr<_1ec3e4b65_Const> _1ec3e4b65_Const::_static_method_new_nil(void) {
	return jule::new_struct<_1ec3e4b65_Const>(new( std::nothrow ) _1ec3e4b65_Const(jule::Any(nullptr)));
}



inline jule::I64 _1ec3e4b65_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::I64();
}



inline jule::U64 _1ec3e4b65_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LLU;
	}
	return (*this)._field_data.operator jule::U64();
}



inline jule::Bool _1ec3e4b65_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _1ec3e4b65_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str();
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _1ec3e4b65_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return (*this)._field_data.operator jule::F64();
}



inline jule::I64 _1ec3e4b65_Const::_method_as_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4800430192:;
			{
				return (*this)._field_data.operator jule::I64();
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4800430288:;
			{
				return static_cast<jule::I64>((*this)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4800430464:;
			{
				return static_cast<jule::I64>((*this)._field_data.operator jule::F64());
			}
		}
		else {
			_case_begin_4800428464:;
			{
				return 0LL;
			}
		}
		_match_end_4800428656:;
	}
}



inline jule::U64 _1ec3e4b65_Const::_method_as_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4800435280:;
			{
				return (*this)._field_data.operator jule::U64();
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4800435376:;
			{
				return static_cast<jule::U64>((*this)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4800435552:;
			{
				return static_cast<jule::U64>((*this)._field_data.operator jule::F64());
			}
		}
		else {
			_case_begin_4800414016:;
			{
				return 0LLU;
			}
		}
		_match_end_4800432160:;
	}
}



inline jule::F64 _1ec3e4b65_Const::_method_as_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4800441408:;
			{
				return (*this)._field_data.operator jule::F64();
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4800441504:;
			{
				return static_cast<jule::F64>((*this)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4800440032:;
			{
				return static_cast<jule::F64>((*this)._field_data.operator jule::U64());
			}
		}
		else {
			_case_begin_4800439440:;
			{
				return 0LL;
			}
		}
		_match_end_4800439744:;
	}
}



inline void _1ec3e4b65_Const::_method_set_i64(jule::I64 _13930_x) {
	(*this)._field_data=jule::Any(_13930_x);
}



inline void _1ec3e4b65_Const::_method_set_u64(jule::U64 _14130_x) {
	(*this)._field_data=jule::Any(_14130_x);
}



inline void _1ec3e4b65_Const::_method_set_bool(jule::Bool _14331_x) {
	(*this)._field_data=jule::Any(_14331_x);
}



inline void _1ec3e4b65_Const::_method_set_str(jule::Str _14530_x) {
	(*this)._field_data=jule::Any(_14530_x);
}



inline void _1ec3e4b65_Const::_method_set_f64(jule::F64 _14730_x) {
	(*this)._field_data=jule::Any(_14730_x);
}



inline void _1ec3e4b65_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline jule::Bool _1ec3e4b65_Const::_method_is_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4800458336:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800456496:;
			{
				return false;
			}
		}
		_match_end_4800456608:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_is_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4800460512:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800459104:;
			{
				return false;
			}
		}
		_match_end_4800459328:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_is_bool(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_4800462720:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800461312:;
			{
				return false;
			}
		}
		_match_end_4800461536:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_is_str(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_4800464928:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800463520:;
			{
				return false;
			}
		}
		_match_end_4800463744:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_is_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4800467136:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800465728:;
			{
				return false;
			}
		}
		_match_end_4800465952:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _1ec3e4b65_Const::_method_are_same_types(_1ec3e4b65_Const _19933_x) {
	{
		if ((*this)._method_is_i64() == _19933_x._method_is_i64()) {
			_case_begin_4800472768:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_u64() == _19933_x._method_is_u64()) {
			_case_begin_4800471360:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_f64() == _19933_x._method_is_f64()) {
			_case_begin_4800471456:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_bool() == _19933_x._method_is_bool()) {
			_case_begin_4800471552:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_str() == _19933_x._method_is_str()) {
			_case_begin_4800471648:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_nil() == _19933_x._method_is_nil()) {
			_case_begin_4800472064:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800471056:;
			{
				return false;
			}
		}
		_match_end_4800470880:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_and(_1ec3e4b65_Const _21722_x) {
	{
		if ((*this)._method_is_bool() && _21722_x._method_is_bool()) {
			_case_begin_4800483760:;
			{
				return (*this)._method_read_bool() && _21722_x._method_read_bool();
			}
		}
		else {
			_case_begin_4800482128:;
			{
				return false;
			}
		}
		_match_end_4800481952:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_or(_1ec3e4b65_Const _22921_x) {
	{
		if ((*this)._method_is_bool() && _22921_x._method_is_bool()) {
			_case_begin_4800488864:;
			{
				return (*this)._method_read_bool() || _22921_x._method_read_bool();
			}
		}
		else {
			_case_begin_4800487232:;
			{
				return false;
			}
		}
		_match_end_4800487056:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_eqs(_1ec3e4b65_Const _24122_x) {
	{
		if ((*this)._method_is_nil()) {
			_case_begin_4800493888:;
			{
				return _24122_x._method_is_nil();
			}
		}
		else if ((*this)._method_is_bool()) {
			_case_begin_4800492480:;
			{
				return _24122_x._method_is_bool() && ((*this)._method_read_bool() == _24122_x._method_read_bool());
			}
		}
		else if ((*this)._method_is_str()) {
			_case_begin_4800492576:;
			{
				return _24122_x._method_is_str() && ((*this)._method_read_str() == _24122_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4800492672:;
			{
				return (*this)._method_read_i64() == _24122_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800492768:;
			{
				return (*this)._method_read_u64() == _24122_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4800493184:;
			{
				return (*this)._method_read_f64() == _24122_x._method_as_f64();
			}
		}
		else {
			_case_begin_4800492176:;
			{
				return false;
			}
		}
		_match_end_4800492000:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_lt(_1ec3e4b65_Const _27321_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800507856:;
			{
				return (*this)._method_read_i64() < _27321_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800507952:;
			{
				return (*this)._method_read_u64() < _27321_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4800506496:;
			{
				return (*this)._method_read_f64() < _27321_x._method_as_f64();
			}
		}
		else {
			_case_begin_4800506192:;
			{
				return false;
			}
		}
		_match_end_4800506016:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_gt(_1ec3e4b65_Const _29621_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800515664:;
			{
				return (*this)._method_read_i64() > _29621_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800515760:;
			{
				return (*this)._method_read_u64() > _29621_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4800514304:;
			{
				return (*this)._method_read_f64() > _29621_x._method_as_f64();
			}
		}
		else {
			_case_begin_4800514000:;
			{
				return false;
			}
		}
		_match_end_4800513824:;
	}
}



inline jule::Bool _1ec3e4b65_Const::_method_add(_1ec3e4b65_Const _31826_x) {
	{
		if ((*this)._method_is_str()) {
			_case_begin_4800523808:;
			{
				if ((!(_31826_x._method_is_str()))) {
					return false;
				}
				(*this)._method_set_str((*this)._method_read_str() + _31826_x._method_read_str());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4800523904:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() + _31826_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4800522448:;
			{
				if (_31826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _31826_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() + _31826_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800522560:;
			{
				if (_31826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _31826_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() + _31826_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_4800522128:;
			{
				return false;
			}
		}
		_match_end_4800521952:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_sub(_1ec3e4b65_Const _35126_x) {
	{
		if ((*this)._method_is_f64()) {
			_case_begin_4800541744:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() - _35126_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4800541840:;
			{
				if (_35126_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35126_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() - _35126_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800540384:;
			{
				if (_35126_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35126_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() - _35126_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_4800540080:;
			{
				return false;
			}
		}
		_match_end_4800539904:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_mul(_1ec3e4b65_Const _37826_x) {
	{
		if ((*this)._method_is_f64()) {
			_case_begin_4800556768:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() * _37826_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4800556864:;
			{
				if (_37826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _37826_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() * _37826_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800555408:;
			{
				if (_37826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _37826_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() * _37826_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_4800555104:;
			{
				return false;
			}
		}
		_match_end_4800554928:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_div(_1ec3e4b65_Const _40926_x) {
	{
		if ((*this)._method_is_f64()) {
			_case_begin_4800571408:;
			{
				jule::F64 _41217_l = _40926_x._method_as_f64();
				if (_41217_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_41217_l)));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4800571504:;
			{
				jule::F64 _41917_l = _40926_x._method_as_f64();
				if (_41917_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_41917_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800570048:;
			{
				jule::F64 _42617_l = _40926_x._method_as_f64();
				if (_42617_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_42617_l)));
			}
		}
		else {
			_case_begin_4800569744:;
			{
				return false;
			}
		}
		_match_end_4800569568:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_mod(_1ec3e4b65_Const _44126_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800585728:;
			{
				jule::I64 _44417_l = _44126_x._method_as_i64();
				if (_44417_l == 0LL) {
					return false;
				}
				(*this)._method_set_i64(static_cast<jule::I64>(jule::mod((*this)._method_read_i64(),_44417_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800585824:;
			{
				jule::U64 _45117_l = _44126_x._method_as_u64();
				if (_45117_l == 0LL) {
					return false;
				}
				(*this)._method_set_u64(static_cast<jule::U64>(jule::mod((*this)._method_read_u64(),_45117_l)));
			}
		}
		else {
			_case_begin_4800584080:;
			{
				return false;
			}
		}
		_match_end_4800583904:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_bitwise_and(_1ec3e4b65_Const _46534_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800596592:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _46534_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800596688:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _46534_x._method_as_u64()));
			}
		}
		else {
			_case_begin_4800594944:;
			{
				return false;
			}
		}
		_match_end_4800594768:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_bitwise_or(_1ec3e4b65_Const _48133_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800604352:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _48133_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800604448:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _48133_x._method_as_u64()));
			}
		}
		else {
			_case_begin_4800602704:;
			{
				return false;
			}
		}
		_match_end_4800602528:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_xor(_1ec3e4b65_Const _49726_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800611984:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _49726_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800612080:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _49726_x._method_as_u64()));
			}
		}
		else {
			_case_begin_4800610336:;
			{
				return false;
			}
		}
		_match_end_4800610160:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_lshift(_1ec3e4b65_Const _51329_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800619744:;
			{
				jule::I64 _51617_l = (*this)._method_as_i64();
				if (_51617_l < 0LL) {
					jule::U64 _51821_r = _51329_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_51617_l << _51821_r));
				} else {
					_1ec3e4b65_lshift_unsig((*this),_51329_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800619840:;
			{
				_1ec3e4b65_lshift_unsig((*this),_51329_x);
			}
		}
		else {
			_case_begin_4800618096:;
			{
				return false;
			}
		}
		_match_end_4800617920:;
	}
	return true;
}



inline jule::Bool _1ec3e4b65_Const::_method_rshift(_1ec3e4b65_Const _53629_x) {
	{
		if ((*this)._method_is_i64()) {
			_case_begin_4800629184:;
			{
				jule::I64 _53917_l = (*this)._method_as_i64();
				if (_53917_l < 0LL) {
					jule::U64 _54121_r = _53629_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_53917_l >> _54121_r));
				} else {
					_1ec3e4b65_rshift_unsig((*this),_53629_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4800629280:;
			{
				_1ec3e4b65_rshift_unsig((*this),_53629_x);
			}
		}
		else {
			_case_begin_4800627536:;
			{
				return false;
			}
		}
		_match_end_4800627360:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec3e4b65_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb29bdd6_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eb29bdd6_StructIns::_method_to_str(void) {
	jule::Str _22217_kind = jule::Str();
	_22217_kind+=(*this)._field_decl->_field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_22217_kind+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_4802801824:;
			if (it != expr.end()) {
				jule::Ptr<_1ec1c55b1_TypeKind> &_1eb29bdd6_g = *it;
				{
					_22217_kind+=_1eb29bdd6_g->_method_to_str();
					_22217_kind+=jule::Str(",", 1);
				}
				_iter_next_4802801824:;
				++it;
				goto _iter_begin_4802801824;
			}
			_iter_end_4802801824:;
		}
		_22217_kind=_22217_kind.slice(0LL,_22217_kind.len() - 1LL);
		_22217_kind+=jule::Str("]", 1);
	}
	return _22217_kind;
}



inline jule::Bool _1eb29bdd6_StructIns::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _23722_other) {
	jule::Ptr<_1eb29bdd6_StructIns> _23813_s = _23722_other->_method_strct();
	if (_23813_s == nullptr) {
		return false;
	}
	if (this->self->_field_decl != _23813_s->_field_decl) {
		return false;
	}
	if (this->self->_field_generics.len() != _23813_s->_field_generics.len()) {
		return false;
	}
	jule::Int _25117_i = 0LL;
	for (; _25117_i < this->self->_field_generics.len(); (_25117_i)++) {
		{
			if ((!(this->self->_field_generics[_25117_i]->_method_equals(_23813_s->_field_generics[_25117_i])))) {
				return false;
			}
		}
	_iter_next_4802810496:;
	}
	_iter_end_4802810496:;
	return true;
}



inline jule::Bool _1eb29bdd6_StructIns::_method_same(jule::Ptr<_1eb29bdd6_StructIns> _26523_s) {
	if (((*this)._field_decl != _26523_s->_field_decl) || (_26523_s->_field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_4802818288:;
		if (it != expr.end()) {
			jule::Int _1eb29bdd6_i = it - expr.begin();
			jule::Ptr<_1ec1c55b1_TypeKind> &_1eb29bdd6_g = *it;
			{
				if ((!(_1eb29bdd6_g->_method_equals(_26523_s->_field_generics[_1eb29bdd6_i])))) {
					return false;
				}
			}
			_iter_next_4802818288:;
			++it;
			_1eb29bdd6_i++;
			goto _iter_begin_4802818288;
		}
		_iter_end_4802818288:;
	}
	return true;
}



inline jule::Ptr<_1eb627195_Fn> _1eb29bdd6_StructIns::_method_find_method(jule::Str _28034_ident,jule::Bool _28046_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4802823968:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb29bdd6_f = *it;
			{
				if ((_1eb29bdd6_f->_field_statically == _28046_statically) && (_1eb29bdd6_f->_field_ident == _28034_ident)) {
					return _1eb29bdd6_f;
				}
			}
			_iter_next_4802823968:;
			++it;
			goto _iter_begin_4802823968;
		}
		_iter_end_4802823968:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb29bdd6_FieldIns> _1eb29bdd6_StructIns::_method_find_field(jule::Str _29133_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_4802828112:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_FieldIns> _1eb29bdd6_f = *it;
			{
				if (_1eb29bdd6_f->_field_decl->_field_ident == _29133_ident) {
					return _1eb29bdd6_f;
				}
			}
			_iter_next_4802828112:;
			++it;
			goto _iter_begin_4802828112;
		}
		_iter_end_4802828112:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb29bdd6_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb627195_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eb627195_ParamIns::_method_to_str(void) {
	jule::Str _18017_s = jule::Str();
	if ((*this)._field_decl->_field_mutable) {
		_18017_s+=jule::Str("mut ", 4);
	}
	if ((*this)._field_decl->_field_reference) {
		_18017_s+=jule::Str("&_:", 3);
	}
	if ((*this)._field_decl->_method_is_self()) {
		if ((*this)._field_decl->_method_is_ref()) {
			_18017_s+=jule::Str("&", 1);
		}
		_18017_s+=jule::Str("self", 4);
		return _18017_s;
	}
	if ((*this)._field_decl->_field_variadic) {
		_18017_s+=jule::Str("...", 3);
	}
	if ((*this)._field_kind != nullptr) {
		_18017_s+=(*this)._field_kind->_method_to_str();
	}
	return _18017_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb627195_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eb627195_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _1eb627195_FnIns::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _23522_other) {
	jule::Ptr<_1eb627195_FnIns> _23613_f = _23522_other->_method_fnc();
	if (_23613_f == nullptr) {
		return false;
	}
	if (this->self->_field_decl->_field_statically != _23613_f->_field_decl->_field_statically) {
		return false;
	}
	if (this->self->_field_decl->_field_exceptional != _23613_f->_field_decl->_field_exceptional) {
		return false;
	}
	if (this->self->_field_decl->_field_unsafety != _23613_f->_field_decl->_field_unsafety) {
		return false;
	}
	if (this->self->_field_generics.len() != _23613_f->_field_generics.len()) {
		return false;
	}
	if (this->self->_field_decl->_method_is_void() != _23613_f->_field_decl->_method_is_void()) {
		return false;
	}
	jule::Int _26117_i = 0LL;
	for (; _26117_i < this->self->_field_generics.len(); (_26117_i)++) {
		{
			if ((!(this->self->_field_generics[_26117_i]->_method_equals(_23613_f->_field_generics[_26117_i])))) {
				return false;
			}
		}
	_iter_next_4802904832:;
	}
	_iter_end_4802904832:;
	jule::Fn<jule::Bool(jule::Ptr<_1eb627195_ParamIns>,jule::Ptr<_1eb627195_ParamIns>)> _26813_check_params = jule::Fn<jule::Bool(jule::Ptr<_1eb627195_ParamIns>,jule::Ptr<_1eb627195_ParamIns>)>([=](jule::Ptr<_1eb627195_ParamIns> _26831_p1,jule::Ptr<_1eb627195_ParamIns> _26846_p2) mutable -> jule::Bool {
		if (_26831_p1->_field_decl->_field_mutable != _26846_p2->_field_decl->_field_mutable) {
			return false;
		}
		if (_26831_p1->_field_decl->_method_is_self()) {
			if ((!(_26846_p2->_field_decl->_method_is_self()))) {
				return false;
			}
			if (_26831_p1->_field_decl->_method_is_ref() != _26846_p2->_field_decl->_method_is_ref()) {
				return false;
			}
			return true;
		}
		if (_26831_p1->_field_decl->_field_reference != _26846_p2->_field_decl->_field_reference) {
			return false;
		}
		if (_26831_p1->_field_decl->_field_variadic != _26846_p2->_field_decl->_field_variadic) {
			return false;
		}
		return _26831_p1->_field_kind->_method_equals(_26846_p2->_field_kind);
	});
	_26117_i=0LL;
	for (; _26117_i < this->self->_field_params.len(); (_26117_i)++) {
		{
			if ((!(_26813_check_params(this->self->_field_params[_26117_i],_23613_f->_field_params[_26117_i])))) {
				return false;
			}
		}
	_iter_next_4802920272:;
	}
	_iter_end_4802920272:;
	if ((!(this->self->_field_decl->_method_is_void()))) {
		if ((!(this->self->_field_result->_method_equals(_23613_f->_field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _1eb627195_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != 0LL;
}



inline jule::Bool _1eb627195_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (((*this)._field_decl != nullptr) && (*this)._field_decl->_method_is_anon());
}



inline jule::Bool _1eb627195_FnIns::_method_same(jule::Ptr<_1eb627195_FnIns> _32523_f) {
	if (((*this)._field_decl != _32523_f->_field_decl) || (_32523_f->_field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_4802930080:;
		if (it != expr.end()) {
			jule::Int _1eb627195_i = it - expr.begin();
			jule::Ptr<_1ec1c55b1_TypeKind> &_1eb627195_g = *it;
			{
				if ((!(_1eb627195_g->_method_equals(_32523_f->_field_generics[_1eb627195_i])))) {
					return false;
				}
			}
			_iter_next_4802930080:;
			++it;
			_1eb627195_i++;
			goto _iter_begin_4802930080;
		}
		_iter_end_4802930080:;
	}
	return true;
}



inline jule::Str _1eb627195_FnIns::_method_get_kind_str(jule::Bool _34131_ident) {
	jule::Str _34217_s = jule::Str();
	if ((*this)._field_decl->_field_statically) {
		_34217_s+=jule::Str("static ", 7);
	}
	if ((*this)._field_decl->_field_unsafety) {
		_34217_s+=jule::Str("unsafe ", 7);
	}
	_34217_s+=jule::Str("fn", 2);
	if (_34131_ident && ((*this)._field_decl != nullptr)) {
		_34217_s+=jule::Str(" ", 1) + (*this)._field_decl->_field_ident;
	}
	if ((*this)._field_generics.len() > 0LL) {
		_34217_s+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_4802940416:;
			if (it != expr.end()) {
				jule::Int _1eb627195_i = it - expr.begin();
				jule::Ptr<_1ec1c55b1_TypeKind> &_1eb627195_t = *it;
				{
					_34217_s+=_1eb627195_t->_method_to_str();
					if ((_1eb627195_i + 1LL) < (*this)._field_generics.len()) {
						_34217_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4802940416:;
				++it;
				_1eb627195_i++;
				goto _iter_begin_4802940416;
			}
			_iter_end_4802940416:;
		}
		_34217_s+=jule::Str("]", 1);
	} else if ((*this)._field_decl->_field_generics.len() > 0LL) {
		_34217_s+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_decl->_field_generics;
			auto it = expr.begin();
			_iter_begin_4802941808:;
			if (it != expr.end()) {
				jule::Int _1eb627195_i = it - expr.begin();
				jule::Ptr<_1ea6ee955_GenericDecl> &_1eb627195_g = *it;
				{
					_34217_s+=_1eb627195_g->_field_ident;
					if ((_1eb627195_i + 1LL) < (*this)._field_decl->_field_generics.len()) {
						_34217_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4802941808:;
				++it;
				_1eb627195_i++;
				goto _iter_begin_4802941808;
			}
			_iter_end_4802941808:;
		}
		_34217_s+=jule::Str("]", 1);
	}
	_34217_s+=jule::Str("(", 1);
	jule::I64 _37913_n = (*this)._field_params.len();
	if (_37913_n > 0LL) {
		{
			auto &expr = (*this)._field_params;
			auto it = expr.begin();
			_iter_begin_4802949520:;
			if (it != expr.end()) {
				jule::Ptr<_1eb627195_ParamIns> &_1eb627195_p = *it;
				{
					_34217_s+=_1eb627195_p->_method_to_str();
					_34217_s+=jule::Str(",", 1);
				}
				_iter_next_4802949520:;
				++it;
				goto _iter_begin_4802949520;
			}
			_iter_end_4802949520:;
		}
		_34217_s=_34217_s.slice(0LL,_34217_s.len() - 1LL);
	}
	_34217_s+=jule::Str(")", 1);
	if ((*this)._field_decl->_field_exceptional) {
		_34217_s+=jule::Str("!", 1);
	}
	if ((!((*this)._field_decl->_method_is_void()))) {
		_34217_s+=jule::Str(":", 1);
		_34217_s+=(*this)._field_result->_method_to_str();
	}
	return _34217_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb627195_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "anon:" << _Src._field_anon << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb736eec_ReferenceStack> _1eb736eec_ReferenceStack::_static_method_new(void) {
	return jule::new_struct<_1eb736eec_ReferenceStack>(new( std::nothrow ) _1eb736eec_ReferenceStack());
}



inline jule::Int _1eb736eec_ReferenceStack::_method_len(void) {
	return static_cast<jule::I64>((*this)._field_buffer.len());
}



inline jule::Any _1eb736eec_ReferenceStack::_method_at(jule::Int _5825_i) {
	return (*this)._field_buffer[_5825_i];
}



inline void _1eb736eec_ReferenceStack::_method_push(jule::Any _6331_ref) {
	(*this)._field_buffer = jule::alloc_for_append((*this)._field_buffer,1);(*this)._field_buffer.push(_6331_ref);
}



inline jule::Bool _1eb736eec_ReferenceStack::_method_exist_0(jule::Ptr<_1eba533d4_Var> _6827_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_4805980816:;
		if (it != expr.end()) {
			jule::Any &_1eb736eec_ref = *it;
			{
				if (_1eb736eec_ref == _6827_t) {
					return true;
				}
			}
			_iter_next_4805980816:;
			++it;
			goto _iter_begin_4805980816;
		}
		_iter_end_4805980816:;
	}
	return false;
}

inline jule::Bool _1eb736eec_ReferenceStack::_method_exist_1(jule::Ptr<_1eb627195_FnIns> _6827_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_4805988720:;
		if (it != expr.end()) {
			jule::Any &_1eb736eec_ref = *it;
			{
				if (_1eb736eec_ref == _6827_t) {
					return true;
				}
			}
			_iter_next_4805988720:;
			++it;
			goto _iter_begin_4805988720;
		}
		_iter_end_4805988720:;
	}
	return false;
}

inline jule::Bool _1eb736eec_ReferenceStack::_method_exist_2(jule::Ptr<_1eb29bdd6_StructIns> _6827_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_4806019280:;
		if (it != expr.end()) {
			jule::Any &_1eb736eec_ref = *it;
			{
				if (_1eb736eec_ref == _6827_t) {
					return true;
				}
			}
			_iter_next_4806019280:;
			++it;
			goto _iter_begin_4806019280;
		}
		_iter_end_4806019280:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb736eec_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb736eec_SymbolBuilder> _1eb736eec_SymbolBuilder::_method_get_root(void) {
	jule::Ptr<_1eb736eec_SymbolBuilder> _31217_root = this->self;
	while (_31217_root->_field_owner != nullptr) {
		{
			_31217_root=_31217_root->_field_owner;
		}
	_iter_next_4802963040:;
	}
	_iter_end_4802963040:;
	return _31217_root;
}



inline void _1eb736eec_SymbolBuilder::_method_push_err(_1ea7465e5_Token& _31928_token,jule::Str _31942_fmt,jule::Slice<jule::Any> _31955_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1eb9ed0d7_compiler_err(_31928_token,true,_31942_fmt,_31955_args));
}



inline void _1eb736eec_SymbolBuilder::_method_push_err_text(_1ea7465e5_Token& _32333_token,jule::Str _32347_fmt,jule::Slice<jule::Any> _32360_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1eb9ed0d7_compiler_err(_32333_token,false,_32347_fmt,_32360_args));
}



inline void _1eb736eec_SymbolBuilder::_method_push_suggestion(jule::Str _32834_fmt,jule::Slice<jule::Any> _32847_args) {
	{
		_1eb9ed0d7_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_32834_fmt,_32847_args);
	}
}



inline jule::Bool _1eb736eec_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ptr<_1ea6ee955_UseDecl>& _33243_decl) {
	jule::Bool _33261_ok = jule::Bool();
	if (_1e8e27beb_is_std_header_path(_33243_decl->_field_link_path)) {
		_33261_ok = true;
		return _33261_ok;
	}
	jule::Str _33713_ext = _1e904e87d_ext(_33243_decl->_field_link_path);
	if ((!(_1e8e27beb_is_valid_header_ext(_33713_ext))) && (!(_1e8e27beb_is_valid_cpp_ext(_33713_ext)))) {
		(*this)._method_push_err(_33243_decl->_field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_33713_ext)}));
		_33261_ok = false;
		return _33261_ok;
	}
	jule::Ptr<_1e8e2d5d6_Status> _34413_info = ({
		auto except = _1e8e2d5d6_Status::_static_method_of(_33243_decl->_field_link_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err(_33243_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_33243_decl->_field_link_path)}));
			_33261_ok = false;
			return _33261_ok;
			_33261_ok = false;
			return _33261_ok;
		} jule::Ptr<_1e8e2d5d6_Status>();});
	});
	if (_34413_info->_method_is_dir()) {
		(*this)._method_push_err(_33243_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_33243_decl->_field_link_path)}));
		_33261_ok = false;
		return _33261_ok;
	}
	_33261_ok = true;
	return _33261_ok;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb736eec_SymbolBuilder::_method_build_cpp_header_import(jule::Ptr<_1ea6ee955_UseDecl>& _35647_decl) {
	jule::Str _35717_path = _35647_decl->_field_link_path;
	if ((!(_1e8e27beb_is_std_header_path(_35647_decl->_field_link_path)))) {
		jule::Bool _36021_ok = (*this)._method_check_cpp_use_decl_path(_35647_decl);
		if ((!(_36021_ok))) {
			return nullptr;
		}
		std::tie(_35717_path,_36021_ok) = _1e904e87d_abs(_35647_decl->_field_link_path);
		if ((!(_36021_ok))) {
			(*this)._method_push_err(_35647_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_35647_decl->_field_link_path)}));
		}
	}
	return jule::new_struct<_1eb7d8048_ImportInfo>(new( std::nothrow ) _1eb7d8048_ImportInfo(_35647_decl->_field_token,_35717_path,_35647_decl->_field_link_path,jule::Str(),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_1ea7465e5_Token>(),nullptr));
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb736eec_SymbolBuilder::_method_build_std_import(jule::Ptr<_1ea6ee955_UseDecl>& _38340_decl) {
	jule::Str _38417_path = _38340_decl->_field_link_path.slice(jule::Str("std::", 5).len());
	_38417_path=_38417_path.replace(jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_38417_path=_1e904e87d_join(jule::Slice<jule::Str>({_1e9c5edd9_PATH_STDLIB,_38417_path}));
	jule::Bool _38720_ok;
	std::tie(_38417_path,_38720_ok) = _1e904e87d_abs(_38417_path);
	if ((!(_38720_ok))) {
		(*this)._method_push_err(_38340_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_38340_decl->_field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_1e8e2d5d6_Status> _39413_info = ({
		auto except = _1e8e2d5d6_Status::_static_method_of(_38417_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err(_38340_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_38340_decl->_field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_1e8e2d5d6_Status>();});
	});
	if ((!(_39413_info->_method_is_dir()))) {
		(*this)._method_push_err(_38340_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_38340_decl->_field_link_path)}));
		return nullptr;
	}
	jule::Str _40413_ident = _38340_decl->_field_link_path.slice(_38340_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL);
	return jule::new_struct<_1eb7d8048_ImportInfo>(new( std::nothrow ) _1eb7d8048_ImportInfo(_38340_decl->_field_token,_38417_path,_38340_decl->_field_link_path,_40413_ident,_38340_decl->_field_alias,jule::Bool(),false,true,_38340_decl->_field_full,jule::Slice<_1ea7465e5_Token>(),jule::new_struct<_1eb7d8048_Package>(new( std::nothrow ) _1eb7d8048_Package(nullptr))));
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb736eec_SymbolBuilder::_method_build_ident_import(jule::Ptr<_1ea6ee955_UseDecl>& _42143_decl) {
	jule::Str _42213_mod_path = this->self->_field_importer.get()._method_get_mod_path();
	if (_42213_mod_path.len() == 0LL) {
		this->self->_method_push_err(_42143_decl->_field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Str _42917_path = _42143_decl->_field_link_path;
	_42917_path=_42917_path.replace(jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_42917_path=_1e904e87d_join(jule::Slice<jule::Str>({_42213_mod_path,_42917_path}));
	jule::Bool _43320_ok;
	std::tie(_42917_path,_43320_ok) = _1e904e87d_abs(_42917_path);
	if ((!(_43320_ok))) {
		this->self->_method_push_err(_42143_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_42143_decl->_field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_1e8e2d5d6_Status> _44013_info = ({
		auto except = _1e8e2d5d6_Status::_static_method_of(_42917_path);
		(except.ok()) ? (except.result) : ({{
			this->self->_method_push_err(_42143_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_42143_decl->_field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_1e8e2d5d6_Status>();});
	});
	if ((!(_44013_info->_method_is_dir()))) {
		this->self->_method_push_err(_42143_decl->_field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_42143_decl->_field_link_path)}));
		return nullptr;
	}
	jule::Str _45013_ident = _42143_decl->_field_link_path.slice(_42143_decl->_field_link_path.rfind(jule::Str("::", 2)) + 1LL);
	return jule::new_struct<_1eb7d8048_ImportInfo>(new( std::nothrow ) _1eb7d8048_ImportInfo(_42143_decl->_field_token,_42917_path,_42143_decl->_field_link_path,_45013_ident,_42143_decl->_field_alias,jule::Bool(),false,false,_42143_decl->_field_full,jule::Slice<_1ea7465e5_Token>(),jule::new_struct<_1eb7d8048_Package>(new( std::nothrow ) _1eb7d8048_Package(nullptr))));
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb736eec_SymbolBuilder::_method_build_import(jule::Ptr<_1ea6ee955_UseDecl>& _46737_decl) {
	{
		if (_46737_decl->_field_cpp_linked) {
			_case_begin_4803048976:;
			{
				return this->self->_method_build_cpp_header_import(_46737_decl);
			}
		}
		else if (_46737_decl->_field_std) {
			_case_begin_4803048368:;
			{
				return this->self->_method_build_std_import(_46737_decl);
			}
		}
		else {
			_case_begin_4803046992:;
			{
				return this->self->_method_build_ident_import(_46737_decl);
			}
		}
		_match_end_4803046816:;
	}
}



inline jule::Bool _1eb736eec_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ptr<_1eb7d8048_ImportInfo>& _47544_pkg) {
	jule::Bool _47564_ok = jule::Bool();
	jule::Ptr<_1eb7d8048_ImportInfo> _47713_lpkg = (*this)._field_table->_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>([=](jule::Ptr<_1eb7d8048_ImportInfo> _47749_spkg) mutable -> jule::Bool {
		return _47544_pkg->_field_path == _47749_spkg->_field_path;
	}));
	if (_47713_lpkg == nullptr) {
		_47564_ok = true;
		return _47564_ok;
	}
	(*this)._method_push_err(_47544_pkg->_field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>({jule::Any(_47544_pkg->_field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_47564_ok = false;
	return _47564_ok;
}



inline void _1eb736eec_SymbolBuilder::_method_impl_import_selections(jule::Ptr<_1eb7d8048_ImportInfo>& _48946_imp,jule::Ptr<_1ea6ee955_UseDecl>& _48969_decl) {
	{
		auto &expr = _48969_decl->_field_selected;
		auto it = expr.begin();
		_iter_begin_4803065888:;
		if (it != expr.end()) {
			_1ea7465e5_Token _1eb736eec_ident = *it;
			{
				if (_48946_imp->_method_exist_ident(_1eb736eec_ident._field_kind)) {
					(*this)._method_push_err(_1eb736eec_ident,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>({jule::Any(_1eb736eec_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
					goto _iter_next_4803065888;
				}
				_48946_imp->_field_selected = jule::alloc_for_append(_48946_imp->_field_selected,1);_48946_imp->_field_selected.push(_1eb736eec_ident);
			}
			_iter_next_4803065888:;
			++it;
			goto _iter_begin_4803065888;
		}
		_iter_end_4803065888:;
	}
}



inline jule::Str _1eb736eec_SymbolBuilder::_method_get_as_link_path(jule::Str _50140_path) {
	if (_50140_path.has_prefix(_1e9c5edd9_PATH_STDLIB)) {
		_50140_path=_50140_path.slice(_1e9c5edd9_PATH_STDLIB.len());
		return jule::Str("std", 3) + _50140_path.replace(static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _50714_root;
	std::tie(_50714_root,std::ignore) = _1e904e87d_abs(this->self->_field_importer.get()._method_get_mod_path());
	_50140_path=_50140_path.slice(_50714_root.len());
	if (_50140_path[0LL] == 92LL) {
		_50140_path=_50140_path.slice(1LL);
	}
	return _50140_path.replace(static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
}



inline void _1eb736eec_SymbolBuilder::_method_push_cycle_error(jule::Ptr<_1eb736eec_SymbolBuilder>& _51537_sb,jule::Str _51557_path,jule::Str& _51573_message) {
	
	jule::Str _51813_refers_to = _1e8ea7cc0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_51537_sb->_field_table->_field_file->_method_dir())),jule::Any(this->self->_method_get_as_link_path(_51557_path))}));
	_51573_message=((_1eb736eec_str_repeat(jule::Str(" ", 1),4LL) + _51813_refers_to) + jule::Str("\n", 1)) + _51573_message;
}



inline void _1eb736eec_SymbolBuilder::_method_push_cross_cycle_error(jule::Ptr<_1eb736eec_SymbolBuilder>& _52543_target,jule::Ptr<_1eb7d8048_ImportInfo>& _52568_imp,_1ea7465e5_Token& _52587_error_token) {
	jule::Str _52617_message = jule::Str();
	this->self->_method_push_cycle_error(this->self,_52568_imp->_field_path,_52617_message);
	jule::Ptr<_1eb736eec_SymbolBuilder> _53017_owner = this->self->_field_owner;
	jule::Ptr<_1eb736eec_SymbolBuilder> _53117_old = this->self;
	while (_53017_owner->_field_owner != nullptr) {
		{
			this->self->_method_push_cycle_error(_53117_old->_field_owner,_53117_old->_field_table->_field_file->_method_dir(),_52617_message);
			if (_53017_owner->_field_owner == _52543_target) {
				this->self->_method_push_cycle_error(_52543_target,_53017_owner->_field_table->_field_file->_method_dir(),_52617_message);
				goto _iter_end_4803097552;
			}
			_53117_old=_53017_owner;
			_53017_owner=_53017_owner->_field_owner;
		}
	_iter_next_4803097552:;
	}
	_iter_end_4803097552:;
	this->self->_method_push_err(_52587_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_52617_message)}));
}



inline jule::Bool _1eb736eec_SymbolBuilder::_method_check_import_cycles(jule::Ptr<_1eb7d8048_ImportInfo> _54839_imp,jule::Ptr<_1ea6ee955_UseDecl>& _54858_decl) {
	if (_54839_imp->_field_path == this->self->_field_table->_field_file->_method_dir()) {
		this->self->_method_push_err(_54858_decl->_field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any(this->self->_method_get_as_link_path(_54839_imp->_field_path))}));
		return false;
	}
	if (this->self->_field_owner == nullptr) {
		return true;
	}
	if (this->self->_field_owner->_field_table->_field_file->_method_dir() == _54839_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(this->self->_field_owner,_54839_imp,_54858_decl->_field_token);
		return false;
	}
	jule::Ptr<_1eb736eec_SymbolBuilder> _56317_owner = this->self->_field_owner;
	_julec_label_iter:;
	if (_56317_owner->_field_table->_field_file->_method_dir() == _54839_imp->_field_path) {
		this->self->_method_push_cross_cycle_error(_56317_owner,_54839_imp,_54858_decl->_field_token);
		return false;
	}
	if (_56317_owner->_field_owner != nullptr) {
		_56317_owner=_56317_owner->_field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline jule::Bool _1eb736eec_SymbolBuilder::_method_import_package(jule::Ptr<_1eb7d8048_ImportInfo>& _57839_imp,jule::Ptr<_1ea6ee955_UseDecl>& _57862_decl) {
	jule::Bool _57880_ok = jule::Bool();
	if (_57839_imp->_field_cpp_linked) {
		_57880_ok = true;
		return _57880_ok;
	}
	jule::Ptr<_1eb7d8048_ImportInfo> _58317_port = this->self->_field_importer.get()._method_get_import(_57839_imp->_field_path);
	if (_58317_port != nullptr) {
		_57839_imp->_field_package=_58317_port->_field_package;
		_57839_imp->_field_duplicate=true;
	} else {
		if ((!(this->self->_method_check_import_cycles(_57839_imp,_57862_decl)))) {
			_57880_ok = false;
			return _57880_ok;
		}
		jule::Str _59217_old_mod = this->self->_field_importer.get()._method_get_mod_path();
		__JULE_DEFER({
			this->self->_field_importer.get()._method_set_mod_path(_59217_old_mod);
		});
		jule::Slice<jule::Ptr<_1ea6ecac9_Ast>> _59422_asts;
		jule::Slice<_1e8ea7cc0_Log> _59428_errors;
		std::tie(_59422_asts,_59428_errors) = this->self->_field_importer.get()._method_import_package(_57839_imp->_field_path,(!(_57839_imp->_field_std)));
		if (_59428_errors.len() > 0LL) {
			this->self->_field_errors=jule::append(this->self->_field_errors,_59428_errors);
			_57880_ok = false;
			return _57880_ok;
		}
		{
			auto &expr = _59422_asts;
			auto it = expr.begin();
			_iter_begin_4803136752:;
			if (it != expr.end()) {
				jule::Ptr<_1ea6ecac9_Ast> _1eb736eec_ast = *it;
				{
					jule::Ptr<_1ebcb6081_SymbolTable> _60126_table;
					jule::Slice<_1e8ea7cc0_Log> _60133_errors;
					std::tie(_60126_table,_60133_errors) = _1ebd050c0_build_symbols(_1eb736eec_ast,this->self->_field_importer,this->self);
					if (_60133_errors.len() > 0LL) {
						this->self->_field_errors=jule::append(this->self->_field_errors,_60133_errors);
						this->self->_method_push_err_text(_57839_imp->_field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_57839_imp->_field_link_path)}));
						_57880_ok = false;
						return _57880_ok;
					}
					_57839_imp->_field_package->_field_files = jule::alloc_for_append(_57839_imp->_field_package->_field_files,1);_57839_imp->_field_package->_field_files.push(_60126_table);
				}
				_iter_next_4803136752:;
				++it;
				goto _iter_begin_4803136752;
			}
			_iter_end_4803136752:;
		}
	}
	this->self->_method_impl_import_selections(_57839_imp,_57862_decl);
	_57880_ok = true;
	return _57880_ok;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb736eec_SymbolBuilder::_method_import_use_decl(jule::Ptr<_1ea6ee955_UseDecl>& _61940_decl) {
	jule::Ptr<_1eb7d8048_ImportInfo> _62017_imp = this->self->_method_build_import(_61940_decl);
	if (_62017_imp == nullptr) {
		return nullptr;
	}
	jule::Bool _62617_ok = this->self->_method_check_duplicate_use_decl(_62017_imp);
	if ((!(_62617_ok))) {
		return nullptr;
	}
	_62617_ok=this->self->_method_import_package(_62017_imp,_61940_decl);
	this->self->_field_table->_field_imports = jule::alloc_for_append(this->self->_field_table->_field_imports,1);this->self->_field_table->_field_imports.push(_62017_imp);
	if (_62617_ok) {
		this->self->_field_importer.get()._method_imported(_62017_imp);
		return _62017_imp;
	}
	return nullptr;
}



inline void _1eb736eec_SymbolBuilder::_method_import_use_decls(void) {
	{
		auto &expr = this->self->_field_ast->_field_use_decls;
		auto it = expr.begin();
		_iter_begin_4803154416:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_UseDecl> _1eb736eec_decl = *it;
			{
				this->self->_method_import_use_decl(_1eb736eec_decl);
				if (this->self->_field_errors.len() > 0LL) {
					goto _iter_end_4803154416;
				}
			}
			_iter_next_4803154416:;
			++it;
			goto _iter_begin_4803154416;
		}
		_iter_end_4803154416:;
	}
}



inline void _1eb736eec_SymbolBuilder::_method_append_decl(_1ea6ee955_Node& _65135_decl) {
	{
		auto &_match_expr{ _65135_decl._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TypeAliasDecl>>()) {
			_case_begin_4803159680:;
			{
				jule::Ptr<_1ec1c55b1_TypeAlias> _65421_ta = _1eb736eec_build_type_alias(_65135_decl._field_data.operator jule::Ptr<_1ea6ee955_TypeAliasDecl>());
				(*this)._field_table->_field_type_aliases = jule::alloc_for_append((*this)._field_table->_field_type_aliases,1);(*this)._field_table->_field_type_aliases.push(_65421_ta);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_StructDecl>>()) {
			_case_begin_4803159072:;
			{
				jule::Ptr<_1eb29bdd6_Struct> _65821_srct = _1eb736eec_build_struct(_65135_decl._field_data.operator jule::Ptr<_1ea6ee955_StructDecl>());
				(*this)._field_table->_field_structs = jule::alloc_for_append((*this)._field_table->_field_structs,1);(*this)._field_table->_field_structs.push(_65821_srct);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnDecl>>()) {
			_case_begin_4803159168:;
			{
				jule::Ptr<_1eb627195_Fn> _66221_f = _1eb736eec_build_fn(_65135_decl._field_data.operator jule::Ptr<_1ea6ee955_FnDecl>());
				(*this)._field_table->_field_funcs = jule::alloc_for_append((*this)._field_table->_field_funcs,1);(*this)._field_table->_field_funcs.push(_66221_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TraitDecl>>()) {
			_case_begin_4803159280:;
			{
				jule::Ptr<_1eb7c68e9_Trait> _66621_t = _1eb736eec_build_trait(_65135_decl._field_data.operator jule::Ptr<_1ea6ee955_TraitDecl>());
				(*this)._field_table->_field_traits = jule::alloc_for_append((*this)._field_table->_field_traits,1);(*this)._field_table->_field_traits.push(_66621_t);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_VarDecl>>()) {
			_case_begin_4803160672:;
			{
				jule::Ptr<_1eba533d4_Var> _67021_v = _1eb736eec_build_var(_65135_decl._field_data.operator jule::Ptr<_1ea6ee955_VarDecl>());
				(*this)._field_table->_field_vars = jule::alloc_for_append((*this)._field_table->_field_vars,1);(*this)._field_table->_field_vars.push(_67021_v);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_EnumDecl>>()) {
			_case_begin_4803160768:;
			{
				jule::Ptr<_1eb7c7e7d_Enum> _67421_e = _1eb736eec_build_enum(_65135_decl._field_data.operator jule::Ptr<_1ea6ee955_EnumDecl>());
				(*this)._field_table->_field_enums = jule::alloc_for_append((*this)._field_table->_field_enums,1);(*this)._field_table->_field_enums.push(_67421_e);
			}
		}
		else {
			_case_begin_4803158272:;
			{
				(*this)._method_push_err(_65135_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4803158496:;
	}
}



inline void _1eb736eec_SymbolBuilder::_method_append_decls(void) {
	{
		auto &expr = (*this)._field_ast->_field_decls;
		auto it = expr.begin();
		_iter_begin_4803166560:;
		if (it != expr.end()) {
			_1ea6ee955_Node _1eb736eec_decl = *it;
			{
				(*this)._method_append_decl(_1eb736eec_decl);
			}
			_iter_next_4803166560:;
			++it;
			goto _iter_begin_4803166560;
		}
		_iter_end_4803166560:;
	}
}



inline void _1eb736eec_SymbolBuilder::_method_append_impls(void) {
	(*this)._field_table->_field_impls=jule::Slice<jule::Ptr<_1eb7d363c_Impl>>::alloc(0LL,static_cast<jule::I64>((*this)._field_ast->_field_impls.len()));
	{
		auto &expr = (*this)._field_ast->_field_impls;
		auto it = expr.begin();
		_iter_begin_4803181600:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Impl> _1eb736eec_decl = *it;
			{
				(*this)._field_table->_field_impls = jule::alloc_for_append((*this)._field_table->_field_impls,1);(*this)._field_table->_field_impls.push(_1eb736eec_build_impl(_1eb736eec_decl));
			}
			_iter_next_4803181600:;
			++it;
			goto _iter_begin_4803181600;
		}
		_iter_end_4803181600:;
	}
}



inline void _1eb736eec_SymbolBuilder::_method_push_directive_pass(jule::Ptr<_1ea6ee955_Directive>& _69543_d) {
	if (_69543_d->_field_args.len() == 0LL) {
		(*this)._method_push_err(_69543_d->_field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if (_69543_d->_field_args.len() > 1LL) {
		_1ea7465e5_Token _70017_arg = _69543_d->_field_args[1LL];
		(*this)._method_push_err(_70017_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1ea7465e5_Token _70413_arg = _69543_d->_field_args[0LL];
	if (_70413_arg._field_id != 6LLU) {
		(*this)._method_push_err(_70413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_70413_arg._field_kind[0LL] != '\"') {
		(*this)._method_push_err(_70413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*this)._field_table->_field_passes = jule::alloc_for_append((*this)._field_table->_field_passes,1);(*this)._field_table->_field_passes.push(_1eb736eec_Pass(_69543_d->_field_tag,_70413_arg._field_kind.slice(1LL,_70413_arg._field_kind.len() - 1LL)));
}



inline void _1eb736eec_SymbolBuilder::_method_append_top_directives(void) {
	{
		auto &expr = (*this)._field_ast->_field_top_directives;
		auto it = expr.begin();
		_iter_begin_4803198016:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> _1eb736eec_d = *it;
			{
				{
					auto &_match_expr{ _1eb736eec_d->_field_tag._field_kind };
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_4803201568:;
						{
							(*this)._method_push_directive_pass(_1eb736eec_d);
						}
					}
					_match_end_4803202048:;
				}
			}
			_iter_next_4803198016:;
			++it;
			goto _iter_begin_4803198016;
		}
		_iter_end_4803198016:;
	}
}



inline void _1eb736eec_SymbolBuilder::_method_build(void) {
	this->self->_field_table=jule::new_struct<_1ebcb6081_SymbolTable>(new( std::nothrow ) _1ebcb6081_SymbolTable(this->self->_field_ast->_field_file,jule::Slice<_1eb736eec_Pass>(),jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>(),jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>(),jule::Slice<jule::Ptr<_1eb627195_Fn>>(),jule::Slice<jule::Ptr<_1eb7c68e9_Trait>>(),jule::Slice<jule::Ptr<_1eb7c7e7d_Enum>>(),jule::Slice<jule::Ptr<_1eb7d363c_Impl>>()));
	this->self->_method_append_top_directives();
	this->self->_method_import_use_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb736eec_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eb7d5892_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eb7d5892_Match::_method_is_generic_type_match(void) {
	return ((*this)._field_type_match && ((*this)._field_expr != nullptr)) && (*this)._field_expr->_field_kind->_field_generic;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eb7d5892_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb7d5892_ScopeChecker::_method_find_package(jule::Str _41835_ident) {
	return (*this)._field_s->_method_find_package(_41835_ident);
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb7d5892_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)> _42837_selector) {
	return (*this)._field_s->_method_select_package(_42837_selector);
}



inline jule::Ptr<_1eba533d4_Var> _1eb7d5892_ScopeChecker::_method_find_var(jule::Str _43931_ident,jule::Bool _43943_cpp_linked) {
	
	jule::Ptr<_1eba533d4_Var> _44217_v = (*this)._field_table->_method___find_var(_43931_ident,_43943_cpp_linked,true);
	if (_44217_v != nullptr) {
		return _44217_v;
	}
	jule::Ptr<_1eb7d5892_ScopeChecker> _44717_parent = (*this)._field_parent;
	while (_44717_parent != nullptr) {
		{
			_44217_v=_44717_parent->_field_table->_method___find_var(_43931_ident,_43943_cpp_linked,true);
			if (_44217_v != nullptr) {
				return _44217_v;
			}
			_44717_parent=_44717_parent->_field_parent;
		}
	_iter_next_4803261088:;
	}
	_iter_end_4803261088:;
	return (*this)._field_s->_method_find_var(_43931_ident,_43943_cpp_linked);
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb7d5892_ScopeChecker::_method_find_type_alias(jule::Str _46638_ident,jule::Bool _46650_cpp_linked) {
	
	jule::Ptr<_1ec1c55b1_TypeAlias> _46917_ta = (*this)._field_table->_method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
	if (_46917_ta != nullptr) {
		return _46917_ta;
	}
	jule::Ptr<_1eb7d5892_ScopeChecker> _47417_parent = (*this)._field_parent;
	while (_47417_parent != nullptr) {
		{
			_46917_ta=_47417_parent->_field_table->_method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
			if (_46917_ta != nullptr) {
				return _46917_ta;
			}
			_47417_parent=_47417_parent->_field_parent;
		}
	_iter_next_4803273232:;
	}
	_iter_end_4803273232:;
	return (*this)._field_s->_method_find_type_alias(_46638_ident,_46650_cpp_linked);
}



inline jule::Ptr<_1eb29bdd6_Struct> _1eb7d5892_ScopeChecker::_method_find_struct(jule::Str _49134_ident,jule::Bool _49146_cpp_linked) {
	return (*this)._field_s->_method_find_struct(_49134_ident,_49146_cpp_linked);
}



inline jule::Ptr<_1eb627195_Fn> _1eb7d5892_ScopeChecker::_method_find_fn(jule::Str _50030_ident,jule::Bool _50042_cpp_linked) {
	return (*this)._field_s->_method_find_fn(_50030_ident,_50042_cpp_linked);
}



inline jule::Ptr<_1eb7c68e9_Trait> _1eb7d5892_ScopeChecker::_method_find_trait(jule::Str _50933_ident) {
	return (*this)._field_s->_method_find_trait(_50933_ident);
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1eb7d5892_ScopeChecker::_method_find_enum(jule::Str _51832_ident) {
	return (*this)._field_s->_method_find_enum(_51832_ident);
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_is_unsafe(void) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _52617_scope = this->self;
	_julec_label_iter:;
	if (_52617_scope->_field_scope->_field_unsafety) {
		return true;
	}
	if (_52617_scope->_field_parent != nullptr) {
		_52617_scope=_52617_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_is_root(void) {
	return ((*this)._field_parent == nullptr) || ((*this)._field_owner != nullptr);
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_is_deferred(void) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _54717_scope = this->self;
	_julec_label_iter:;
	if (_54717_scope->_field_scope->_field_deferred) {
		return true;
	}
	if (_54717_scope->_field_parent != nullptr) {
		_54717_scope=_54717_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1eb7d5892_ScopeChecker> _1eb7d5892_ScopeChecker::_method_get_root(void) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _56517_root = this->self;
	while ((_56517_root->_field_parent != nullptr) && (_56517_root->_field_owner == nullptr)) {
		{
			_56517_root=_56517_root->_field_parent;
		}
	_iter_next_4803310560:;
	}
	_iter_end_4803310560:;
	return _56517_root;
}



inline jule::Ptr<_1eb7d5892_Label> _1eb7d5892_ScopeChecker::_method_find_label(jule::Str _57529_ident) {
	{
		auto &expr = (*this)._field_scope->_field_stmts;
		auto it = expr.begin();
		_iter_begin_4803314528:;
		if (it != expr.end()) {
			jule::Any _1eb7d5892_st = *it;
			{
				{
					auto &_match_expr{ _1eb7d5892_st };
					if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Label>>()) {
						_case_begin_4803315952:;
						{
							jule::Ptr<_1eb7d5892_Label> _57925_label = _1eb7d5892_st.operator jule::Ptr<_1eb7d5892_Label>();
							if (_57925_label->_field_ident == _57529_ident) {
								return _57925_label;
							}
						}
					}
					_match_end_4803316336:;
				}
			}
			_iter_next_4803314528:;
			++it;
			goto _iter_begin_4803314528;
		}
		_iter_end_4803314528:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7d5892_ScopeLabel> _1eb7d5892_ScopeChecker::_method_find_label_scope(jule::Str _59136_ident) {
	jule::Ptr<_1eb7d5892_ScopeLabel> _59217_label = this->self->_method_find_label_all(_59136_ident);
	if ((_59217_label != nullptr) && (_59217_label->_field_scope == this->self)) {
		return _59217_label;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7d5892_ScopeLabel> _1eb7d5892_ScopeChecker::_method_find_label_all(jule::Str _60333_ident) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_4803324176:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_ScopeLabel> _1eb7d5892_lbl = *it;
			{
				if (_1eb7d5892_lbl->_field_label->_field_ident == _60333_ident) {
					return _1eb7d5892_lbl;
				}
			}
			_iter_next_4803324176:;
			++it;
			goto _iter_begin_4803324176;
		}
		_iter_end_4803324176:;
	}
	return nullptr;
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _61538_itself,jule::Str _61555_ident) {
	jule::Ptr<_1eba533d4_Var> _61613_v = (*this)._method_find_var(_61555_ident,false);
	if ((_61613_v != nullptr) && (static_cast<jule::Uintptr>(_61613_v) != _61538_itself)) {
		if (_61613_v->_field_scope == nullptr) {
			return false;
		}
		return (_61613_v->_field_scope == (*this)._field_scope) || (!((*this)._field_s->_method_is_flag(1LL)));
	}
	jule::Ptr<_1ec1c55b1_TypeAlias> _62413_ta = (*this)._method_find_type_alias(_61555_ident,false);
	if ((_62413_ta != nullptr) && (static_cast<jule::Uintptr>(_62413_ta) != _61538_itself)) {
		if (_62413_ta->_field_scope == nullptr) {
			return false;
		}
		return (_62413_ta->_field_scope == (*this)._field_tree) || (!((*this)._field_s->_method_is_flag(1LL)));
	}
	return false;
}



inline void _1eb7d5892_ScopeChecker::_method_check_var_decl(jule::Ptr<_1ea6ee955_VarDecl> _63538_decl) {
	jule::Ptr<_1eba533d4_Var> _63617_v = _1eb736eec_build_var(_63538_decl);
	_63617_v->_field_scope=this->self->_field_scope;
	__JULE_DEFER({
		this->self->_field_table->_field_vars = jule::alloc_for_append(this->self->_field_table->_field_vars,1);this->self->_field_table->_field_vars.push(_63617_v);
		this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_63617_v));
	});
	if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_63617_v),_63617_v->_field_ident)) {
		this->self->_field_s->_method_push_err(_63617_v->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_63617_v->_field_ident)}));
		this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	this->self->_field_s->_method_check_var_decl(_63617_v,this->self);
	if ((!(_63617_v->_method_is_type_inferred())) && ((_63617_v->_field_kind == nullptr) || (_63617_v->_field_kind->_field_kind == nullptr))) {
		return;
	}
	this->self->_field_s->_method_check_type_var(_63617_v,this->self);
}



inline void _1eb7d5892_ScopeChecker::_method_check_type_alias_decl(jule::Ptr<_1ea6ee955_TypeAliasDecl> _65745_decl) {
	jule::Ptr<_1ec1c55b1_TypeAlias> _65817_ta = _1eb736eec_build_type_alias(_65745_decl);
	if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_65817_ta),_65817_ta->_field_ident)) {
		this->self->_field_s->_method_push_err(_65817_ta->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_65817_ta->_field_ident)}));
		this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	this->self->_field_s->_method_check_type_alias_decl(_65817_ta,this->self);
	this->self->_field_table->_field_type_aliases = jule::alloc_for_append(this->self->_field_table->_field_type_aliases,1);this->self->_field_table->_field_type_aliases.push(_65817_ta);
}



inline jule::Ptr<_1eb7d5892_Scope> _1eb7d5892_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_1eb7d5892_Scope>(new( std::nothrow ) _1eb7d5892_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _1eb7d5892_ScopeChecker::_method_check_child_ssc(jule::Ptr<_1ea6ee955_ScopeTree>& _67440_tree,jule::Ptr<_1eb7d5892_Scope>& _67463_s,jule::Ptr<_1eb7d5892_ScopeChecker>& _67479_ssc) {
	_67479_ssc->_field_parent=this->self;
	_67479_ssc->_method_check(_67440_tree,_67463_s);
}



inline jule::Ptr<_1eb7d5892_Scope> _1eb7d5892_ScopeChecker::_method_check_child_sc(jule::Ptr<_1ea6ee955_ScopeTree>& _67939_tree,jule::Ptr<_1eb7d5892_ScopeChecker>& _67962_ssc) {
	jule::Ptr<_1eb7d5892_Scope> _68017_s = this->self->_method_get_child();
	this->self->_method_check_child_ssc(_67939_tree,_68017_s,_67962_ssc);
	return _68017_s;
}



inline jule::Ptr<_1eb7d5892_Scope> _1eb7d5892_ScopeChecker::_method_check_child(jule::Ptr<_1ea6ee955_ScopeTree>& _68536_tree) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _68617_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_child_sc(_68536_tree,_68617_ssc);
}



inline void _1eb7d5892_ScopeChecker::_method_check_anon_scope(jule::Ptr<_1ea6ee955_ScopeTree> _69040_tree) {
	jule::Ptr<_1eb7d5892_Scope> _69117_s = this->self->_method_check_child(_69040_tree);
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_69117_s));
}



inline void _1eb7d5892_ScopeChecker::_method_process_error_call(jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>& _69543_m,_1ea7465e5_Token _69574_err) {
	if (this->self->_method_is_deferred()) {
		this->self->_field_s->_method_push_err(_69574_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eb7d5892_ScopeChecker> _70017_root = this->self->_method_get_root();
	if ((!(_70017_root->_field_owner->_field_decl->_field_exceptional))) {
		this->self->_field_s->_method_push_err(_69574_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		this->self->_field_s->_method_push_suggestion(jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	}
	_69543_m->_field_func=_70017_root->_field_owner;
}



inline void _1eb7d5892_ScopeChecker::_method_check_expr(jule::Ptr<_1ea6ee955_Expr> _70834_expr) {
	jule::Ptr<_1ebcce31e_Eval> _70917_eval = this->self->_field_s->_method_eval(this->self);
	_70917_eval->_field_ignored=true;
	jule::Ptr<_1ebcce31e_Data> _71117_d = _70917_eval->_method_eval_expr(_70834_expr);
	if (_71117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _71117_d->_field_model };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>>()) {
			_case_begin_4803401808:;
			{
				jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel> _71821_m = _71117_d->_field_model.operator jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>();
				this->self->_method_process_error_call(_71821_m,_70834_expr->_field_token);
				this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_71117_d));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_FnCallExprModel>>()) {
			_case_begin_4803401904:;
			{
				this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_71117_d));
			}
		}
		else {
			_case_begin_4803401424:;
			{
				this->self->_field_s->_method_push_err(_70834_expr->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4803400816:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_co_expr(jule::Ptr<_1ea6ee955_CoExpr> _73737_expr) {
	jule::Ptr<_1ebcce31e_Eval> _73817_eval = this->self->_field_s->_method_eval(this->self);
	_73817_eval->_field_ignored=true;
	jule::Ptr<_1ebcce31e_Data> _74017_d = _73817_eval->_method_eval_expr(_73737_expr->_field_expr);
	if (_74017_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _74017_d->_field_model };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_FnCallExprModel>>()) {
			_case_begin_4803418784:;
			{
				jule::Ptr<_1eb7ccdea_FnCallExprModel> _74721_model = _74017_d->_field_model.operator jule::Ptr<_1eb7ccdea_FnCallExprModel>();
				if (_74721_model->_field_func->_field_decl->_field_exceptional) {
					this->self->_field_s->_method_push_err(_73737_expr->_field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					this->self->_field_s->_method_push_suggestion(jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				}
				_74721_model->_field_is_co=true;
				_73817_eval->_method_check_fn_of_concurrent_call(_74721_model->_field_func,_73737_expr->_field_expr->_field_token);
				this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_74017_d));
			}
		}
		else {
			_case_begin_4803416400:;
			{
				this->self->_field_s->_method_push_err(_73737_expr->_field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4803415792:;
	}
}



inline jule::Ptr<_1eb7d5892_If> _1eb7d5892_ScopeChecker::_method_check_if(jule::Ptr<_1ea6ee955_If> _76332_i) {
	jule::Ptr<_1eb7d5892_Scope> _76417_s = this->self->_method_check_child(_76332_i->_field_scope);
	jule::Ptr<_1ebcce31e_Data> _76617_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_76332_i->_field_expr);
	if (_76617_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_Prim> _77117_prim = _76617_d->_field_kind->_method_prim();
	if ((_77117_prim == nullptr) || (!(_77117_prim->_method_is_bool()))) {
		this->self->_field_s->_method_push_err(_76332_i->_field_expr->_field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1eb7d5892_If>(new( std::nothrow ) _1eb7d5892_If(_76617_d->_field_model,_76417_s));
}



inline jule::Ptr<_1eb7d5892_Else> _1eb7d5892_ScopeChecker::_method_check_else(jule::Ptr<_1ea6ee955_Else> _78334_e) {
	return jule::new_struct<_1eb7d5892_Else>(new( std::nothrow ) _1eb7d5892_Else(this->self->_method_check_child(_78334_e->_field_scope)));
}



inline void _1eb7d5892_ScopeChecker::_method_check_conditional(jule::Ptr<_1ea6ee955_Conditional> _78941_conditional) {
	jule::Ptr<_1eb7d5892_Conditional> _79017_c = jule::new_struct<_1eb7d5892_Conditional>(new( std::nothrow ) _1eb7d5892_Conditional());
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_79017_c));
	_79017_c->_field_elifs=jule::Slice<jule::Ptr<_1eb7d5892_If>>::alloc(0LL,static_cast<jule::I64>(_78941_conditional->_field_tail.len() + 1LL));
	_79017_c->_field_elifs = jule::alloc_for_append(_79017_c->_field_elifs,1);_79017_c->_field_elifs.push(this->self->_method_check_if(_78941_conditional->_field_head));
	{
		auto &expr = _78941_conditional->_field_tail;
		auto it = expr.begin();
		_iter_begin_4803446032:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_If> _1eb7d5892_elif = *it;
			{
				_79017_c->_field_elifs = jule::alloc_for_append(_79017_c->_field_elifs,1);_79017_c->_field_elifs.push(this->self->_method_check_if(_1eb7d5892_elif));
			}
			_iter_next_4803446032:;
			++it;
			goto _iter_begin_4803446032;
		}
		_iter_end_4803446032:;
	}
	if (_78941_conditional->_field_default != nullptr) {
		_79017_c->_field_default=this->self->_method_check_else(_78941_conditional->_field_default);
	}
}



inline jule::Ptr<_1eb7d5892_Scope> _1eb7d5892_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _80539_it,jule::Ptr<_1ea6ee955_ScopeTree> _80556_tree,jule::Ptr<_1eb7d5892_ScopeChecker> _80578_ssc) {
	_80578_ssc->_field_it=_80539_it;
	return this->self->_method_check_child_sc(_80556_tree,_80578_ssc);
}



inline jule::Ptr<_1eb7d5892_Scope> _1eb7d5892_ScopeChecker::_method_check_iter_scope(jule::Uintptr _81036_it,jule::Ptr<_1ea6ee955_ScopeTree>& _81054_tree) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _81117_ssc = this->self->_method_new_child_checker();
	return this->self->_method_check_iter_scope_sc(_81036_it,_81054_tree,_81117_ssc);
}



inline void _1eb7d5892_ScopeChecker::_method_check_inf_iter(jule::Ptr<_1ea6ee955_Iter>& _81539_it) {
	jule::Ptr<_1eb7d5892_InfIter> _81617_kind = jule::new_struct<_1eb7d5892_InfIter>(new( std::nothrow ) _1eb7d5892_InfIter());
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_81617_kind));
	_81617_kind->_field_scope=this->self->_method_check_iter_scope(static_cast<jule::Uintptr>(_81617_kind),_81539_it->_field_scope);
}



inline void _1eb7d5892_ScopeChecker::_method_check_while_iter(jule::Ptr<_1ea6ee955_Iter>& _82341_it) {
	jule::Ptr<_1ea6ee955_WhileKind> _82417_wh = _82341_it->_field_kind.operator jule::Ptr<_1ea6ee955_WhileKind>();
	if ((_82417_wh->_field_expr == nullptr) && (_82417_wh->_field_next == nullptr)) {
		this->self->_method_check_inf_iter(_82341_it);
		return;
	}
	jule::Ptr<_1eb7d5892_WhileIter> _83017_kind = jule::new_struct<_1eb7d5892_WhileIter>(new( std::nothrow ) _1eb7d5892_WhileIter());
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_83017_kind));
	_83017_kind->_field_scope=this->self->_method_check_iter_scope(static_cast<jule::Uintptr>(_83017_kind),_82341_it->_field_scope);
	if (_82417_wh->_field_expr != nullptr) {
		jule::Ptr<_1ebcce31e_Data> _83721_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_82417_wh->_field_expr);
		if (_83721_d == nullptr) {
			return;
		}
		jule::Ptr<_1ec1c55b1_Prim> _84217_prim = _83721_d->_field_kind->_method_prim();
		if (_84217_prim == nullptr) {
			this->self->_field_s->_method_push_err(_82341_it->_field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		if ((!(_84217_prim->_method_is_bool()))) {
			this->self->_field_s->_method_push_err(_82341_it->_field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		_83017_kind->_field_expr=_83721_d->_field_model;
	}
	if (_82417_wh->_method_is_while_next()) {
		if ((!(_1eb7d5892_is_valid_ast_st_for_next_st(_82417_wh->_field_next)))) {
			this->self->_field_s->_method_push_err(_82417_wh->_field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;
		}
		jule::I64 _86217_n = this->self->_field_scope->_field_stmts.len();
		this->self->_method_check_node(_82417_wh->_field_next);
		if (_86217_n < this->self->_field_scope->_field_stmts.len()) {
			jule::Any _86525_st = this->self->_field_scope->_field_stmts[_86217_n];
			this->self->_field_scope->_field_stmts=this->self->_field_scope->_field_stmts.slice(0LL,_86217_n);
			if ((!(_1eb7d5892_is_valid_st_for_next_st(_86525_st)))) {
				this->self->_field_s->_method_push_err(_82417_wh->_field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			}
			_83017_kind->_field_next=_86525_st;
		}
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_range_iter(jule::Ptr<_1ea6ee955_Iter>& _87641_it) {
	jule::Ptr<_1ea6ee955_RangeKind> _87717_rang = _87641_it->_field_kind.operator jule::Ptr<_1ea6ee955_RangeKind>();
	jule::Ptr<_1ebcce31e_Data> _87917_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_87717_rang->_field_expr);
	if (_87917_d == nullptr) {
		return;
	}
	jule::Ptr<_1eb7d5892_RangeIter> _88417_kind = jule::new_struct<_1eb7d5892_RangeIter>(new( std::nothrow ) _1eb7d5892_RangeIter(_87917_d,jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eba533d4_Var>(),jule::Ptr<_1eba533d4_Var>()));
	_1eba534e4_RangeChecker _88817_rc = _1eba534e4_RangeChecker(this->self,_87717_rang,_88417_kind,_87917_d);
	jule::Bool _89413_ok = _88817_rc._method_check();
	if ((!(_89413_ok))) {
		return;
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_88417_kind));
	jule::Ptr<_1eb7d5892_ScopeChecker> _90117_ssc = this->self->_method_new_child_checker();
	if (_88417_kind->_field_key_a != nullptr) {
		if ((!(this->self->_field_s->_method_is_flag(1LL))) && this->self->_method_is_duplicated_ident(0LLU,_88417_kind->_field_key_a->_field_ident)) {
			this->self->_field_s->_method_push_err(_88417_kind->_field_key_a->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_88417_kind->_field_key_a->_field_ident)}));
			this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		_90117_ssc->_field_table->_field_vars = jule::alloc_for_append(_90117_ssc->_field_table->_field_vars,1);_90117_ssc->_field_table->_field_vars.push(_88417_kind->_field_key_a);
	}
	if (_88417_kind->_field_key_b != nullptr) {
		if ((!(this->self->_field_s->_method_is_flag(1LL))) && this->self->_method_is_duplicated_ident(0LLU,_88417_kind->_field_key_b->_field_ident)) {
			this->self->_field_s->_method_push_err(_88417_kind->_field_key_b->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_88417_kind->_field_key_b->_field_ident)}));
			this->self->_field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		_90117_ssc->_field_table->_field_vars = jule::alloc_for_append(_90117_ssc->_field_table->_field_vars,1);_90117_ssc->_field_table->_field_vars.push(_88417_kind->_field_key_b);
	}
	_88417_kind->_field_scope=this->self->_method_check_iter_scope_sc(static_cast<jule::Uintptr>(_88417_kind),_87641_it->_field_scope,_90117_ssc);
}



inline void _1eb7d5892_ScopeChecker::_method_check_iter(jule::Ptr<_1ea6ee955_Iter> _92234_it) {
	if (_92234_it->_method_is_inf()) {
		this->self->_method_check_inf_iter(_92234_it);
		return;
	}
	{
		auto &_match_expr{ _92234_it->_field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_WhileKind>>()) {
			_case_begin_4803544896:;
			{
				this->self->_method_check_while_iter(_92234_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_RangeKind>>()) {
			_case_begin_4803544160:;
			{
				this->self->_method_check_range_iter(_92234_it);
			}
		}
		else {
			_case_begin_4803525632:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_4803525232:;
	}
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _93542_it) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _93617_scope = this->self;
	_julec_label_iter:;
	if (_93617_scope->_field_it == _93542_it) {
		return true;
	}
	if (_93617_scope->_field_parent != nullptr) {
		_93617_scope=_93617_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _95143_ptr) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _95217_scope = this->self;
	_julec_label_iter:;
	if (_95217_scope->_field_it == _95143_ptr) {
		return true;
	}
	if (_95217_scope->_field_cse != 0LL) {
		jule::Uintptr _96017_mtch = static_cast<jule::Uintptr>(((_1eb7d5892_Case*)(_95217_scope->_field_cse))->_field_owner);
		if (_96017_mtch == _95143_ptr) {
			return true;
		}
	}
	if (_95217_scope->_field_parent != nullptr) {
		_95217_scope=_95217_scope->_field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1eb7d5892_ContSt> _1eb7d5892_ScopeChecker::_method_check_cont_valid_scope(jule::Ptr<_1ea6ee955_ContSt> _97442_c) {
	if (this->self->_method_is_deferred()) {
		this->self->_field_s->_method_push_err(_97442_c->_field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_97442_c->_field_label._field_id != 0LLU) {
		return jule::new_struct<_1eb7d5892_ContSt>(new( std::nothrow ) _1eb7d5892_ContSt());
	}
	jule::Ptr<_1eb7d5892_ScopeChecker> _98417_scope = this->self;
	_julec_label_iter:;
	{
		if (((_98417_scope->_field_it == 0LL) && (_98417_scope->_field_parent != nullptr)) && (_98417_scope->_field_owner == nullptr)) {
			_case_begin_4803569696:;
			{
				_98417_scope=_98417_scope->_field_parent;
				goto _julec_label_iter;
			}
		}
		else if (_98417_scope->_field_it != 0LL) {
			_case_begin_4803569808:;
			{
				return jule::new_struct<_1eb7d5892_ContSt>(new( std::nothrow ) _1eb7d5892_ContSt(_98417_scope->_field_it));
			}
		}
		_match_end_4803569536:;
	}
	this->self->_field_s->_method_push_err(_97442_c->_field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1eb7d5892_ScopeChecker::_method_check_cont(jule::Ptr<_1ea6ee955_ContSt> _99930_c) {
	jule::Ptr<_1eb7d5892_ContSt> _100017_cont = this->self->_method_check_cont_valid_scope(_99930_c);
	if (_100017_cont == nullptr) {
		return;
	}
	if (_99930_c->_field_label._field_id != 0LLU) {
		jule::Ptr<_1eb7d5892_ScopeLabel> _100621_label = _1eb7d5892_find_label_parent(_99930_c->_field_label._field_kind,this->self->_field_parent);
		if (_100621_label == nullptr) {
			this->self->_field_s->_method_push_err(_99930_c->_field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_99930_c->_field_label._field_kind)}));
			return;
		}
		_100621_label->_field_used=true;
		if ((_100621_label->_field_pos + 1LL) >= _100621_label->_field_scope->_field_scope->_field_stmts.len()) {
			this->self->_field_s->_method_push_err(_99930_c->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_99930_c->_field_label._field_kind)}));
			return;
		}
		jule::Int _101917_i = _100621_label->_field_pos + 1LL;
		if (_101917_i >= _100621_label->_field_scope->_field_scope->_field_stmts.len()) {
			this->self->_field_s->_method_push_err(_99930_c->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _102325_st = _100621_label->_field_scope->_field_scope->_field_stmts[_101917_i];
			{
				auto &_match_expr{ _102325_st };
				if (_match_expr.type_is<jule::Ptr<_1eb7d5892_InfIter>>()) {
					_case_begin_4803593088:;
					{
						_100017_cont->_field_it=static_cast<jule::Uintptr>(_102325_st.operator jule::Ptr<_1eb7d5892_InfIter>());
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RangeIter>>()) {
					_case_begin_4803593184:;
					{
						_100017_cont->_field_it=static_cast<jule::Uintptr>(_102325_st.operator jule::Ptr<_1eb7d5892_RangeIter>());
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_WhileIter>>()) {
					_case_begin_4803593280:;
					{
						_100017_cont->_field_it=static_cast<jule::Uintptr>(_102325_st.operator jule::Ptr<_1eb7d5892_WhileIter>());
					}
				}
				else {
					_case_begin_4803590832:;
					{
						this->self->_field_s->_method_push_err(_99930_c->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_99930_c->_field_label._field_kind)}));
					}
				}
				_match_end_4803592736:;
			}
		}
	}
	if (_100017_cont->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_cont_label(_100017_cont->_field_it)))) {
			this->self->_field_s->_method_push_err(_99930_c->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_99930_c->_field_label._field_kind)}));
		}
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_100017_cont));
}



inline void _1eb7d5892_ScopeChecker::_method_check_label(jule::Ptr<_1ea6ee955_LabelSt> _104235_l) {
	if (this->self->_method_find_label(_104235_l->_field_ident) != nullptr) {
		this->self->_field_s->_method_push_err(_104235_l->_field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any(_104235_l->_field_ident)}));
		return;
	}
	jule::Ptr<_1eb7d5892_Label> _104817_label = jule::new_struct<_1eb7d5892_Label>(new( std::nothrow ) _1eb7d5892_Label(_104235_l->_field_ident));
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_104817_label));
	(*(this->self->_field_labels))=jule::append((*(this->self->_field_labels)),jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>({jule::new_struct<_1eb7d5892_ScopeLabel>(new( std::nothrow ) _1eb7d5892_ScopeLabel(_104235_l->_field_token,_104817_label,static_cast<jule::I64>(this->self->_field_scope->_field_stmts.len() - 1LL),this->self,jule::Bool()))}));
}



inline void _1eb7d5892_ScopeChecker::_method_push_goto(jule::Ptr<_1ea6ee955_GotoSt> _106133_gt) {
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(jule::new_struct<_1eb7d5892_GotoSt>(new( std::nothrow ) _1eb7d5892_GotoSt(_106133_gt->_field_label._field_kind))));
	(*(this->self->_field_gotos))=jule::append((*(this->self->_field_gotos)),jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>({jule::new_struct<_1eb7d5892_ScopeGoto>(new( std::nothrow ) _1eb7d5892_ScopeGoto(_106133_gt,this->self,static_cast<jule::I64>(this->self->_field_scope->_field_stmts.len() - 1LL)))}));
}



inline void _1eb7d5892_ScopeChecker::_method_check_postfix(jule::Ptr<_1ea6ee955_AssignSt> _107337_a) {
	if (_107337_a->_field_left.len() > 1LL) {
		this->self->_field_s->_method_push_err(_107337_a->_field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ea6ee955_Expr> _107917_expr = _107337_a->_field_left[0LL]->_field_expr;
	jule::Ptr<_1ebcce31e_Data> _108017_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_107917_expr);
	if (_108017_d == nullptr) {
		return;
	}
	_1eb7d5892_check_assign(this->self->_field_s,_108017_d,nullptr,_107337_a->_field_setter);
	if (_108017_d->_field_kind->_method_ptr() != nullptr) {
		jule::Ptr<_1ec1c55b1_Ptr> _108821_ptr = _108017_d->_field_kind->_method_ptr();
		if (_108821_ptr->_method_is_unsafe()) {
			this->self->_field_s->_method_push_err(_107337_a->_field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any(_107337_a->_field_setter._field_kind),jule::Any(_108017_d->_field_kind->_method_to_str())}));
			return;
		}
	} else {
		if ((_108017_d->_field_kind->_method_prim() == nullptr) || (!(_1ec4784ce_is_num(_108017_d->_field_kind->_method_prim()->_field_kind)))) {
			this->self->_field_s->_method_push_err(_107337_a->_field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any(_107337_a->_field_setter._field_kind),jule::Any(_108017_d->_field_kind->_method_to_str())}));
			return;
		}
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(jule::new_struct<_1eb7d5892_Postfix>(new( std::nothrow ) _1eb7d5892_Postfix(_108017_d->_field_model,_107337_a->_field_setter._field_kind))));
}



inline jule::Bool _1eb7d5892_ScopeChecker::_method_is_new_assign_ident(jule::Str _110638_ident) {
	if (_1ea7465e5_is_ignore_ident(_110638_ident) || (_110638_ident == jule::Str())) {
		return false;
	}
	return (*this)._field_table->_method_def_by_ident(_110638_ident,false) == nullptr;
}



inline void _1eb7d5892_ScopeChecker::_method_check_single_assign(jule::Ptr<_1ea6ee955_AssignSt>& _111444_a) {
	jule::Ptr<_1ebcce31e_Data> _111517_l = nullptr;
	if ((!(_1ea7465e5_is_ignore_ident(_111444_a->_field_left[0LL]->_field_ident)))) {
		jule::Ptr<_1ea6ee955_Expr> _111821_expr = _111444_a->_field_left[0LL]->_field_expr;
		_111517_l=this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_111821_expr);
		if (_111517_l == nullptr) {
			return;
		}
	}
	jule::Ptr<_1ebcce31e_Eval> _112517_eval = (((_111517_l != nullptr)) ? (this->self->_field_s->_method_evalp(this->self,_111517_l->_field_kind)) : (this->self->_field_s->_method_eval(this->self)));
	jule::Ptr<_1ebcce31e_Data> _113017_r = _112517_eval->_method_eval_expr(_111444_a->_field_right);
	if (_113017_r == nullptr) {
		return;
	}
	if (_111517_l == nullptr) {
		if (_113017_r->_field_kind->_method_void()) {
			this->self->_field_s->_method_push_err(_111444_a->_field_right->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_113017_r));
		return;
	}
	if ((!(_1eb7d5892_check_assign(this->self->_field_s,_111517_l,_113017_r,_111444_a->_field_setter)))) {
		return;
	}
	if (_113017_r->_field_kind->_method_tup() != nullptr) {
		this->self->_field_s->_method_push_err(_111444_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(jule::new_struct<_1eb7d5892_Assign>(new( std::nothrow ) _1eb7d5892_Assign(_111517_l->_field_model,_113017_r->_field_model,_111444_a->_field_setter._field_kind))));
	if (_111444_a->_field_setter._field_kind != jule::Str("=", 1)) {
		_111444_a->_field_setter._field_kind=_111444_a->_field_setter._field_kind.slice(0LL,_111444_a->_field_setter._field_kind.len() - 1LL);
		_1ebcce31e_BinopSolver _116221_solver = _1ebcce31e_BinopSolver(jule::new_struct_ptr<_1ebcce31e_Eval>(new( std::nothrow ) _1ebcce31e_Eval(this->self->_field_s,this->self,jule::Ptr<_1ec1c55b1_TypeKind>(),this->self->_method_is_unsafe(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eba533d4_Var>())),jule::Ptr<_1ebcce31e_Data>(),jule::Ptr<_1ebcce31e_Data>(),_111444_a->_field_setter);
		_113017_r=_116221_solver._method_solve_explicit(_111517_l,_113017_r);
		if (_113017_r == nullptr) {
			return;
		}
		_111444_a->_field_setter._field_kind+=jule::Str("=", 1);
		return;
	}
	_1eba534e4_AssignTypeChecker _117917_checker = _1eba534e4_AssignTypeChecker(this->self->_field_s,_111517_l->_field_kind,_113017_r,_111444_a->_field_setter);
	_117917_checker._method_check();
}



inline void _1eb7d5892_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ptr<_1eb7d5892_MultiAssign> _118857_st,jule::Ptr<_1ea6ee955_AssignSt> _118913_a,jule::Ptr<_1ea6ee955_AssignLeft> _118931_lexpr,jule::Ptr<_1ebcce31e_Data> _118955_l,jule::Ptr<_1ebcce31e_Data> _118969_r) {
	if (_1ea7465e5_is_ignore_ident(_118931_lexpr->_field_ident)) {
		if (_118969_r->_field_kind->_method_void()) {
			(*this)._field_s->_method_push_err(_118913_a->_field_right->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		_118857_st->_field_l = jule::alloc_for_append(_118857_st->_field_l,1);_118857_st->_field_l.push(jule::Any(nullptr));
		return;
	}
	if (_118913_a->_field_declarative && (*this)._method_is_new_assign_ident(_118931_lexpr->_field_ident)) {
		jule::Ptr<_1eba533d4_Var> _120121_v = jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var((*this)._field_scope,_118931_lexpr->_field_token,_118931_lexpr->_field_ident,jule::Bool(),jule::Bool(),_118931_lexpr->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),_118931_lexpr->_field_reference,jule::Str(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(_118913_a->_field_right,_118969_r)),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>()));
		(*this)._field_s->_method_check_var(_120121_v);
		_118857_st->_field_l = jule::alloc_for_append(_118857_st->_field_l,1);_118857_st->_field_l.push(jule::Any(_120121_v));
		(*this)._field_table->_field_vars = jule::alloc_for_append((*this)._field_table->_field_vars,1);(*this)._field_table->_field_vars.push(_120121_v);
		(*this)._field_scope->_field_stmts = jule::alloc_for_append((*this)._field_scope->_field_stmts,1);(*this)._field_scope->_field_stmts.push(jule::Any(_120121_v));
		return;
	}
	if (_118931_lexpr->_field_mutable || _118931_lexpr->_field_reference) {
		(*this)._field_s->_method_push_err(_118931_lexpr->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_118931_lexpr->_field_ident)}));
		(*this)._field_s->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((!(_1eb7d5892_check_assign((*this)._field_s,_118955_l,_118969_r,_118913_a->_field_setter)))) {
		return;
	}
	
	(*this)._field_s->_method_check_validity_for_init_expr(_118955_l->_field_mutable,false,_118955_l->_field_kind,_118969_r,_118913_a->_field_setter);
	_1eba534e4_AssignTypeChecker _123617_checker = _1eba534e4_AssignTypeChecker((*this)._field_s,_118955_l->_field_kind,_118969_r,_118913_a->_field_setter);
	_123617_checker._method_check();
	_118857_st->_field_l = jule::alloc_for_append(_118857_st->_field_l,1);_118857_st->_field_l.push(_118955_l->_field_model);
}



inline void _1eb7d5892_ScopeChecker::_method_check_ret_multi_assign(jule::Ptr<_1ea6ee955_AssignSt>& _124747_a) {
	jule::Ptr<_1ebcce31e_Data> _124817_rd = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_124747_a->_field_right);
	if (_124817_rd == nullptr) {
		return;
	}
	jule::Slice<jule::Ptr<_1ebcce31e_Data>> _125317_r = _1eb7d5892_get_datas_from_tuple_data(_124817_rd);
	{
		if (_124747_a->_field_left.len() > _125317_r.len()) {
			_case_begin_4803722176:;
			{
				this->self->_field_s->_method_push_err(_124747_a->_field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_124747_a->_field_left.len() < _125317_r.len()) {
			_case_begin_4803722288:;
			{
				this->self->_field_s->_method_push_err(_124747_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4803722016:;
	}
	jule::Ptr<_1eb7d5892_MultiAssign> _126517_st = jule::new_struct<_1eb7d5892_MultiAssign>(new( std::nothrow ) _1eb7d5892_MultiAssign(jule::Slice<jule::Any>(),_124817_rd->_field_model));
	if (_124817_rd->_field_kind->_method_tup() == nullptr) {
		_126517_st->_field_r=jule::Any(jule::new_struct<_1eb7ccdea_TupleExprModel>(new( std::nothrow ) _1eb7ccdea_TupleExprModel(_125317_r)));
	}
	{
		auto &expr = _124747_a->_field_left;
		auto it = expr.begin();
		_iter_begin_4803730656:;
		if (it != expr.end()) {
			jule::Int _1eb7d5892_i = it - expr.begin();
			{
				jule::Ptr<_1ea6ee955_AssignLeft> _127421_lexpr = _124747_a->_field_left[_1eb7d5892_i];
				jule::Ptr<_1ebcce31e_Data> _127521_l = nullptr;
				if ((!(_1ea7465e5_is_ignore_ident(_127421_lexpr->_field_ident))) && ((!(_124747_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_127421_lexpr->_field_ident))))) {
					_127521_l=this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_127421_lexpr->_field_expr);
					if (_127521_l == nullptr) {
						goto _iter_next_4803730656;
					}
				}
				this->self->_method___process_end_part_of_multi_assign(_126517_st,_124747_a,_127421_lexpr,_127521_l,_125317_r[_1eb7d5892_i]);
			}
			_iter_next_4803730656:;
			++it;
			_1eb7d5892_i++;
			goto _iter_begin_4803730656;
		}
		_iter_end_4803730656:;
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_126517_st));
}



inline void _1eb7d5892_ScopeChecker::_method_check_multi_assign(jule::Ptr<_1ea6ee955_AssignSt>& _129143_a) {
	{
		auto &_match_expr{ _129143_a->_field_right->_field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnCallExpr>>()) {
			_case_begin_4803740896:;
			{
				this->self->_method_check_ret_multi_assign(_129143_a);
				return;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UnsafeExpr>>()) {
			_case_begin_4803741424:;
			{
				{
					auto &_match_expr{ _129143_a->_field_right->_field_kind.operator jule::Ptr<_1ea6ee955_UnsafeExpr>()->_field_expr };
					if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnCallExpr>>()) {
						_case_begin_4803741584:;
						{
							this->self->_method_check_ret_multi_assign(_129143_a);
							return;
						}
					}
					_match_end_4803745040:;
				}
			}
		}
		_match_end_4803741296:;
	}
	jule::Slice<jule::Any> _130517_right = _1eb7d5892_get_expr_models(_129143_a->_field_right->_field_kind);
	{
		if (_129143_a->_field_left.len() > _130517_right.len()) {
			_case_begin_4803747744:;
			{
				this->self->_field_s->_method_push_err(_129143_a->_field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_129143_a->_field_left.len() < _130517_right.len()) {
			_case_begin_4803747840:;
			{
				this->self->_field_s->_method_push_err(_129143_a->_field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4803747520:;
	}
	jule::Ptr<_1eb7ccdea_TupleExprModel> _131717_right_tuple = jule::new_struct<_1eb7ccdea_TupleExprModel>(new( std::nothrow ) _1eb7ccdea_TupleExprModel());
	jule::Ptr<_1eb7d5892_MultiAssign> _131917_st = jule::new_struct<_1eb7d5892_MultiAssign>(new( std::nothrow ) _1eb7d5892_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_131717_right_tuple)));
	{
		auto &expr = _129143_a->_field_left;
		auto it = expr.begin();
		_iter_begin_4803755056:;
		if (it != expr.end()) {
			jule::Int _1eb7d5892_i = it - expr.begin();
			{
				jule::Ptr<_1ea6ee955_AssignLeft> _132421_lexpr = _129143_a->_field_left[_1eb7d5892_i];
				jule::Ptr<_1ebcce31e_Data> _132521_l = nullptr;
				if ((!(_1ea7465e5_is_ignore_ident(_132421_lexpr->_field_ident))) && ((!(_129143_a->_field_declarative)) || (!(this->self->_method_is_new_assign_ident(_132421_lexpr->_field_ident))))) {
					_132521_l=this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_132421_lexpr->_field_expr);
					if (_132521_l == nullptr) {
						goto _iter_next_4803755056;
					}
				}
				jule::Ptr<_1ea6ee955_Expr> _133521_expr = jule::new_struct<_1ea6ee955_Expr>(new( std::nothrow ) _1ea6ee955_Expr(_129143_a->_field_right->_field_token,_130517_right[_1eb7d5892_i]));
				jule::Ptr<_1ebcce31e_Eval> _133621_eval = (((_132521_l != nullptr)) ? (this->self->_field_s->_method_evalp(this->self,_132521_l->_field_kind)) : (this->self->_field_s->_method_eval(this->self)));
				jule::Ptr<_1ebcce31e_Data> _134121_r = _133621_eval->_method_eval_expr(_133521_expr);
				if (_134121_r == nullptr) {
					goto _iter_next_4803755056;
				}
				_131717_right_tuple->_field_datas = jule::alloc_for_append(_131717_right_tuple->_field_datas,1);_131717_right_tuple->_field_datas.push(_134121_r);
				this->self->_method___process_end_part_of_multi_assign(_131917_st,_129143_a,_132421_lexpr,_132521_l,_134121_r);
			}
			_iter_next_4803755056:;
			++it;
			_1eb7d5892_i++;
			goto _iter_begin_4803755056;
		}
		_iter_end_4803755056:;
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_131917_st));
}



inline void _1eb7d5892_ScopeChecker::_method_check_assign_st(jule::Ptr<_1ea6ee955_AssignSt> _135439_a) {
	if (_1ea7465e5_is_postfix_op(_135439_a->_field_setter._field_kind)) {
		this->self->_method_check_postfix(_135439_a);
		return;
	}
	if ((_135439_a->_field_left.len() == 1LL) && (!(_135439_a->_field_declarative))) {
		this->self->_method_check_single_assign(_135439_a);
		return;
	}
	this->self->_method_check_multi_assign(_135439_a);
}



inline jule::Ptr<_1eb7d5892_Scope> _1eb7d5892_ScopeChecker::_method_check_case_scope(jule::Ptr<_1eb7d5892_Case>& _136837_c,jule::Ptr<_1ea6ee955_ScopeTree>& _136852_tree) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _136917_ssc = this->self->_method_new_child_checker();
	_136917_ssc->_field_cse=static_cast<jule::Uintptr>(_136837_c);
	return this->self->_method_check_child_sc(_136852_tree,_136917_ssc);
}



inline jule::Ptr<_1eb7d5892_Case> _1eb7d5892_ScopeChecker::_method_check_case(jule::Ptr<_1eb7d5892_Match> _137434_m,jule::Int _137445_i,jule::Ptr<_1ea6ee955_Case> _137457_c,jule::Ptr<_1ebcce31e_Data> _137487_expr) {
	jule::Ptr<_1eb7d5892_Case> _137517__case = _137434_m->_field_cases[_137445_i];
	_137517__case->_field_exprs=jule::Slice<jule::Ptr<_1ebcce31e_Data>>::alloc(0LL,static_cast<jule::I64>(_137457_c->_field_exprs.len()));
	jule::Bool _137717_generic_matched = false;
	{
		auto &expr = _137457_c->_field_exprs;
		auto it = expr.begin();
		_iter_begin_4803789952:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Expr> _1eb7d5892_e = *it;
			{
				if (_137434_m->_field_type_match) {
					jule::Ptr<_1ebcce31e_Eval> _138125_eval = jule::new_struct_ptr<_1ebcce31e_Eval>(new( std::nothrow ) _1ebcce31e_Eval(this->self->_field_s,this->self,jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eba533d4_Var>()));
					jule::Ptr<_1ebcce31e_Data> _138625_d = _138125_eval->_method_eval(_1eb7d5892_e);
					if (_138625_d != nullptr) {
						_137517__case->_field_exprs = jule::alloc_for_append(_137517__case->_field_exprs,1);_137517__case->_field_exprs.push(_138625_d);
						if (_1eb7d5892_count_match_type(_137434_m,_138625_d->_field_kind) > 1LL) {
							this->self->_field_s->_method_push_err(_1eb7d5892_e->_field_token,jule::Str("duplicated case: type @ is already checked", 42),jule::Slice<jule::Any>({jule::Any(_138625_d->_field_kind->_method_to_str())}));
						}
					}
					if (_137487_expr->_field_kind->_field_generic) {
						_137717_generic_matched=_137717_generic_matched || _137487_expr->_field_kind->_method_equals(_138625_d->_field_kind);
					} else {
						jule::Ptr<_1eb7c68e9_Trait> _139725_trt = _137487_expr->_field_kind->_method_trt();
						if (_139725_trt != nullptr) {
							this->self->_field_s->_method_check_type_compatibility(_137487_expr->_field_kind,_138625_d->_field_kind,_1eb7d5892_e->_field_token);
						}
					}
					goto _iter_next_4803789952;
				}
				jule::Ptr<_1ebcce31e_Data> _140621_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_1eb7d5892_e);
				if (_140621_d == nullptr) {
					goto _iter_next_4803789952;
				}
				_137517__case->_field_exprs = jule::alloc_for_append(_137517__case->_field_exprs,1);_137517__case->_field_exprs.push(_140621_d);
				_1eba534e4_AssignTypeChecker _141321_checker = _1eba534e4_AssignTypeChecker(this->self->_field_s,_137487_expr->_field_kind,_140621_d,_1eb7d5892_e->_field_token);
				_141321_checker._method_check();
			}
			_iter_next_4803789952:;
			++it;
			goto _iter_begin_4803789952;
		}
		_iter_end_4803789952:;
	}
	if (((!(_137434_m->_field_type_match)) || (!(_137487_expr->_field_kind->_field_generic))) || _137717_generic_matched) {
		_137517__case->_field_scope=this->self->_method_check_case_scope(_137517__case,_137457_c->_field_scope);
	}
	return _137517__case;
}



inline void _1eb7d5892_ScopeChecker::_method_check_cases(jule::Ptr<_1ea6ee955_MatchCase>& _142836_m,jule::Ptr<_1eb7d5892_Match> _142855_rm,jule::Ptr<_1ebcce31e_Data> _142871_expr) {
	_142855_rm->_field_cases=jule::Slice<jule::Ptr<_1eb7d5892_Case>>::alloc(static_cast<jule::I64>(_142836_m->_field_cases.len()));
	{
		auto &expr = _142836_m->_field_cases;
		auto it = expr.begin();
		_iter_begin_4803815520:;
		if (it != expr.end()) {
			jule::Int _1eb7d5892_i = it - expr.begin();
			{
				jule::Ptr<_1eb7d5892_Case> _143121__case = jule::new_struct<_1eb7d5892_Case>(new( std::nothrow ) _1eb7d5892_Case(_142855_rm,jule::Ptr<_1eb7d5892_Scope>(),jule::Slice<jule::Ptr<_1ebcce31e_Data>>(),jule::Ptr<_1eb7d5892_Case>()));
				if (_1eb7d5892_i > 0LL) {
					_142855_rm->_field_cases[_1eb7d5892_i - 1LL]->_field_next=_143121__case;
				}
				_142855_rm->_field_cases[_1eb7d5892_i]=_143121__case;
			}
			_iter_next_4803815520:;
			++it;
			_1eb7d5892_i++;
			goto _iter_begin_4803815520;
		}
		_iter_end_4803815520:;
	}
	if ((_142855_rm->_field_default != nullptr) && (_142836_m->_field_cases.len() > 0LL)) {
		_142855_rm->_field_cases[_142855_rm->_field_cases.len() - 1LL]->_field_next=_142855_rm->_field_default;
	}
	{
		auto &expr = _142836_m->_field_cases;
		auto it = expr.begin();
		_iter_begin_4803822864:;
		if (it != expr.end()) {
			jule::Int _1eb7d5892_i = it - expr.begin();
			jule::Ptr<_1ea6ee955_Case> _1eb7d5892_c = *it;
			{
				this->self->_method_check_case(_142855_rm,_1eb7d5892_i,_1eb7d5892_c,_142871_expr);
			}
			_iter_next_4803822864:;
			++it;
			_1eb7d5892_i++;
			goto _iter_begin_4803822864;
		}
		_iter_end_4803822864:;
	}
}



inline jule::Ptr<_1eb7d5892_Case> _1eb7d5892_ScopeChecker::_method_check_default(jule::Ptr<_1eb7d5892_Match> _145137_m,jule::Ptr<_1ea6ee955_Else> _145152_d) {
	jule::Ptr<_1eb7d5892_Case> _145217_def = jule::new_struct<_1eb7d5892_Case>(new( std::nothrow ) _1eb7d5892_Case(_145137_m,jule::Ptr<_1eb7d5892_Scope>(),jule::Slice<jule::Ptr<_1ebcce31e_Data>>(),jule::Ptr<_1eb7d5892_Case>()));
	_145217_def->_field_scope=this->self->_method_check_case_scope(_145217_def,_145152_d->_field_scope);
	return _145217_def;
}



inline void _1eb7d5892_ScopeChecker::_method_check_comptime_panic(jule::Ptr<_1eb7d5892_Scope>& _145940_s,_1ea7465e5_Token _145951_error_token) {
	if (_145940_s->_field_stmts.len() != 1LL) {
		return;
	}
	jule::Any _146413_stmt = _145940_s->_field_stmts[0LL];
	{
		auto &_match_expr{ _146413_stmt };
		if (_match_expr.type_is<jule::Ptr<_1ebcce31e_Data>>()) {
			_case_begin_4803833216:;
			{
				jule::Ptr<_1ebcce31e_Data> _146717_d = _146413_stmt.operator jule::Ptr<_1ebcce31e_Data>();
				{
					auto &_match_expr{ _146717_d->_field_model };
					if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>>()) {
						_case_begin_4803835424:;
						{
							jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel> _147021_m = _146717_d->_field_model.operator jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>();
							{
								auto &_match_expr{ _147021_m->_field_expr };
								if (_match_expr.type_is<jule::Ptr<_1ec3e4b65_Const>>()) {
									_case_begin_4803838160:;
									{
										jule::Ptr<_1ec3e4b65_Const> _147325_c = _147021_m->_field_expr.operator jule::Ptr<_1ec3e4b65_Const>();
										if (_147325_c->_method_is_str()) {
											(*this)._field_s->_method_push_err(_145951_error_token,jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>({jule::Any(_147325_c->_method_read_str())}));
										}
									}
								}
								_match_end_4803840512:;
							}
						}
					}
					_match_end_4803837680:;
				}
			}
		}
		_match_end_4803835296:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_push_type_match(jule::Ptr<_1eb7d5892_Match> _148239_tm,jule::Ptr<_1ea6ee955_MatchCase>& _148252_m) {
	if (_148239_tm->_field_expr->_field_kind->_field_generic) {
		{
			auto &expr = _148239_tm->_field_cases;
			auto it = expr.begin();
			_iter_begin_4803847728:;
			if (it != expr.end()) {
				jule::Int _1eb7d5892_i = it - expr.begin();
				jule::Ptr<_1eb7d5892_Case> _1eb7d5892_c = *it;
				{
					if (_1eb7d5892_c->_field_scope != nullptr) {
						_148239_tm->_field_cases=nullptr;
						_148239_tm->_field_default=_1eb7d5892_c;
						this->self->_method_check_comptime_panic(_1eb7d5892_c->_field_scope,_148252_m->_field_cases[_1eb7d5892_i]->_field_token);
						goto _julec_label_push;
					}
				}
				_iter_next_4803847728:;
				++it;
				_1eb7d5892_i++;
				goto _iter_begin_4803847728;
			}
			_iter_end_4803847728:;
		}
		if (_148239_tm->_field_default != nullptr) {
			this->self->_method_check_comptime_panic(_148239_tm->_field_default->_field_scope,_148252_m->_field_default->_field_token);
		}
		_148239_tm->_field_cases=nullptr;
	}
	_julec_label_push:;
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_148239_tm));
}



inline void _1eb7d5892_ScopeChecker::_method_check_type_match(jule::Ptr<_1ea6ee955_MatchCase>& _150441_m) {
	jule::Ptr<_1ebcce31e_Data> _150517_d = this->self->_field_s->_method_eval(this->self)->_method_eval(_150441_m->_field_expr);
	if (_150517_d == nullptr) {
		return;
	}
	if ((!(_150517_d->_field_kind->_field_generic)) && (!(((_150517_d->_field_kind->_method_prim() != nullptr) && _150517_d->_field_kind->_method_prim()->_method_is_any()) || (_150517_d->_field_kind->_method_trt() != nullptr)))) {
		this->self->_field_s->_method_push_err(_150441_m->_field_expr->_field_token,jule::Str("type-match must be have <any>, <trait> or <generic> typed expression", 68),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1eb7d5892_Match> _151617_tm = jule::new_struct<_1eb7d5892_Match>(new( std::nothrow ) _1eb7d5892_Match(_150517_d,true,jule::Slice<jule::Ptr<_1eb7d5892_Case>>(),jule::Ptr<_1eb7d5892_Case>()));
	if (_150441_m->_field_default != nullptr) {
		_151617_tm->_field_default=this->self->_method_check_default(_151617_tm,_150441_m->_field_default);
	}
	this->self->_method_check_cases(_150441_m,_151617_tm,_150517_d);
	this->self->_method_push_type_match(_151617_tm,_150441_m);
}



inline void _1eb7d5892_ScopeChecker::_method_check_common_match(jule::Ptr<_1ea6ee955_MatchCase>& _152943_m) {
	jule::Ptr<_1ebcce31e_Data> _153017_d = nullptr;
	if (_152943_m->_field_expr == nullptr) {
		_153017_d=jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ec3e4b65_Const::_static_method_new_bool(true)));
		_153017_d->_field_model=jule::Any(_153017_d->_field_constant);
	} else {
		_153017_d=this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_152943_m->_field_expr);
		if (_153017_d == nullptr) {
			return;
		}
	}
	jule::Ptr<_1eb7d5892_Match> _154417_mc = jule::new_struct<_1eb7d5892_Match>(new( std::nothrow ) _1eb7d5892_Match(_153017_d,jule::Bool(),jule::Slice<jule::Ptr<_1eb7d5892_Case>>(),jule::Ptr<_1eb7d5892_Case>()));
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_154417_mc));
	if (_152943_m->_field_default != nullptr) {
		_154417_mc->_field_default=this->self->_method_check_default(_154417_mc,_152943_m->_field_default);
	}
	this->self->_method_check_cases(_152943_m,_154417_mc,_153017_d);
}



inline void _1eb7d5892_ScopeChecker::_method_check_match(jule::Ptr<_1ea6ee955_MatchCase> _155635_m) {
	if (_155635_m->_field_type_match) {
		this->self->_method_check_type_match(_155635_m);
		return;
	}
	this->self->_method_check_common_match(_155635_m);
}



inline void _1eb7d5892_ScopeChecker::_method_check_fall(jule::Ptr<_1ea6ee955_FallSt> _156430_f) {
	if (((this->self->_field_cse == 0LL) || ((this->self->_field_scope->_field_stmts.len() + 1LL) < this->self->_field_scope->_field_stmts.len())) || this->self->_method_is_deferred()) {
		this->self->_field_s->_method_push_err(_156430_f->_field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;
	}
	_1eb7d5892_Case* _157217__case = ((_1eb7d5892_Case*)(this->self->_field_cse));
	if (_157217__case->_field_next == nullptr) {
		this->self->_field_s->_method_push_err(_156430_f->_field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		this->self->_field_s->_method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;
	}
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(jule::new_struct<_1eb7d5892_FallSt>(new( std::nothrow ) _1eb7d5892_FallSt(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_157217__case->_field_next))))));
}



inline jule::Ptr<_1eb7d5892_BreakSt> _1eb7d5892_ScopeChecker::_method_check_break_with_label(jule::Ptr<_1ea6ee955_BreakSt> _158442_b) {
	jule::Ptr<_1eb7d5892_BreakSt> _158517_brk = this->self->_method_check_plain_break(_158442_b);
	if (_158517_brk == nullptr) {
		return nullptr;
	}
	_158517_brk->_field_it=0LLU;
	_158517_brk->_field_mtch=0LLU;
	jule::Ptr<_1eb7d5892_ScopeLabel> _159517_label = _1eb7d5892_find_label_parent(_158442_b->_field_label._field_kind,this->self->_field_parent);
	if (_159517_label == nullptr) {
		this->self->_field_s->_method_push_err(_158442_b->_field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_158442_b->_field_label._field_kind)}));
		return nullptr;
	}
	_159517_label->_field_used=true;
	if ((_159517_label->_field_pos + 1LL) >= _159517_label->_field_scope->_field_scope->_field_stmts.len()) {
		this->self->_field_s->_method_push_err(_158442_b->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_158442_b->_field_label._field_kind)}));
		return nullptr;
	}
	jule::Int _160813_i = _159517_label->_field_pos + 1LL;
	if (_160813_i >= _159517_label->_field_scope->_field_scope->_field_stmts.len()) {
		this->self->_field_s->_method_push_err(_158442_b->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_158442_b->_field_label._field_kind)}));
	} else {
		jule::Any _161221_st = _159517_label->_field_scope->_field_scope->_field_stmts[_160813_i];
		{
			auto &_match_expr{ _161221_st };
			if (_match_expr.type_is<jule::Ptr<_1eb7d5892_InfIter>>()) {
				_case_begin_4803918064:;
				{
					_158517_brk->_field_it=static_cast<jule::Uintptr>(_161221_st.operator jule::Ptr<_1eb7d5892_InfIter>());
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RangeIter>>()) {
				_case_begin_4803918160:;
				{
					_158517_brk->_field_it=static_cast<jule::Uintptr>(_161221_st.operator jule::Ptr<_1eb7d5892_RangeIter>());
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_WhileIter>>()) {
				_case_begin_4803918256:;
				{
					_158517_brk->_field_it=static_cast<jule::Uintptr>(_161221_st.operator jule::Ptr<_1eb7d5892_WhileIter>());
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Match>>()) {
				_case_begin_4803918352:;
				{
					_158517_brk->_field_mtch=static_cast<jule::Uintptr>(_161221_st.operator jule::Ptr<_1eb7d5892_Match>());
				}
			}
			else {
				_case_begin_4803913824:;
				{
					this->self->_field_s->_method_push_err(_158442_b->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_158442_b->_field_label._field_kind)}));
				}
			}
			_match_end_4803917712:;
		}
	}
	if (_158517_brk->_field_it != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_158517_brk->_field_it)))) {
			this->self->_field_s->_method_push_err(_158442_b->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_158442_b->_field_label._field_kind)}));
		}
	}
	if (_158517_brk->_field_mtch != 0LL) {
		if ((!(this->self->_method_check_valid_break_label(_158517_brk->_field_mtch)))) {
			this->self->_field_s->_method_push_err(_158442_b->_field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_158442_b->_field_label._field_kind)}));
		}
	}
	return _158517_brk;
}



inline jule::Ptr<_1eb7d5892_BreakSt> _1eb7d5892_ScopeChecker::_method_check_plain_break(jule::Ptr<_1ea6ee955_BreakSt> _163737_b) {
	if (this->self->_method_is_deferred()) {
		this->self->_field_s->_method_push_err(_163737_b->_field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eb7d5892_ScopeChecker> _164317_scope = this->self;
	_julec_label_iter:;
	{
		if ((((_164317_scope->_field_it == 0LL) && (_164317_scope->_field_cse == 0LL)) && (_164317_scope->_field_parent != nullptr)) && (_164317_scope->_field_owner == nullptr)) {
			_case_begin_4803935520:;
			{
				_164317_scope=_164317_scope->_field_parent;
				goto _julec_label_iter;
			}
		}
		else if (_164317_scope->_field_it != 0LL) {
			_case_begin_4803935632:;
			{
				return jule::new_struct<_1eb7d5892_BreakSt>(new( std::nothrow ) _1eb7d5892_BreakSt(_164317_scope->_field_it,jule::Uintptr()));
			}
		}
		else if (_164317_scope->_field_cse != 0LL) {
			_case_begin_4803935744:;
			{
				return jule::new_struct<_1eb7d5892_BreakSt>(new( std::nothrow ) _1eb7d5892_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(((_1eb7d5892_Case*)(_164317_scope->_field_cse))->_field_owner))));
			}
		}
		_match_end_4803935344:;
	}
	this->self->_field_s->_method_push_err(_163737_b->_field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1eb7d5892_ScopeChecker::_method_check_break(jule::Ptr<_1ea6ee955_BreakSt> _166131_b) {
	if (_166131_b->_field_label._field_id != 0LLU) {
		jule::Ptr<_1eb7d5892_BreakSt> _166321_brk = this->self->_method_check_break_with_label(_166131_b);
		this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_166321_brk));
		return;
	}
	jule::Ptr<_1eb7d5892_BreakSt> _166817_brk = this->self->_method_check_plain_break(_166131_b);
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_166817_brk));
}



inline void _1eb7d5892_ScopeChecker::_method_check_ret(jule::Ptr<_1ea6ee955_RetSt> _167233_r) {
	if (this->self->_method_is_deferred()) {
		this->self->_field_s->_method_push_err(_167233_r->_field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eb7d5892_RetSt> _167717_rt = jule::new_struct<_1eb7d5892_RetSt>(new( std::nothrow ) _1eb7d5892_RetSt(this->self->_method_get_root()->_field_owner,jule::Slice<jule::Ptr<_1eba533d4_Var>>(),jule::Any()));
	this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_167717_rt));
	jule::Ptr<_1eba534e4_RetTypeChecker> _168217_rtc = jule::new_struct<_1eba534e4_RetTypeChecker>(new( std::nothrow ) _1eba534e4_RetTypeChecker(this->self,_167717_rt->_field_func,jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1ea6ee955_Expr>>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>(),_167233_r->_field_token,jule::Any()));
	jule::Bool _168713_ok = _168217_rtc->_method_check(_167233_r->_field_expr);
	if ((!(_168713_ok))) {
		return;
	}
	if ((_167233_r->_field_expr == nullptr) && (_168217_rtc->_field_vars.len() == 0LL)) {
		return;
	}
	_167717_rt->_field_vars=_168217_rtc->_field_vars;
	if (_167233_r->_field_expr != nullptr) {
		_167717_rt->_field_expr=_168217_rtc->_field_model;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_use_expr(jule::Ptr<_1ea6ee955_UseExpr> _170334_ue) {
	if (this->self->_field_result == nullptr) {
		this->self->_field_s->_method_push_err(_170334_ue->_field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;
	}
	if (this->self->_method_is_deferred()) {
		this->self->_field_s->_method_push_err(_170334_ue->_field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	}
	if ((this->self->_field_i + 1LL) < this->self->_field_tree->_field_stmts.len()) {
		this->self->_field_s->_method_push_err(_170334_ue->_field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_node(jule::Any& _172035_node) {
	{
		auto &_match_expr{ _172035_node };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Comment>>()) {
			_case_begin_4803980928:;
			{
				goto _match_end_4803979184;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_ScopeTree>>()) {
			_case_begin_4803980448:;
			{
				this->self->_method_check_anon_scope(_172035_node.operator jule::Ptr<_1ea6ee955_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_VarDecl>>()) {
			_case_begin_4803980544:;
			{
				this->self->_method_check_var_decl(_172035_node.operator jule::Ptr<_1ea6ee955_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TypeAliasDecl>>()) {
			_case_begin_4803980000:;
			{
				this->self->_method_check_type_alias_decl(_172035_node.operator jule::Ptr<_1ea6ee955_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Expr>>()) {
			_case_begin_4803980096:;
			{
				this->self->_method_check_expr(_172035_node.operator jule::Ptr<_1ea6ee955_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_CoExpr>>()) {
			_case_begin_4803980192:;
			{
				this->self->_method_check_co_expr(_172035_node.operator jule::Ptr<_1ea6ee955_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Conditional>>()) {
			_case_begin_4803980288:;
			{
				this->self->_method_check_conditional(_172035_node.operator jule::Ptr<_1ea6ee955_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Iter>>()) {
			_case_begin_4803981360:;
			{
				this->self->_method_check_iter(_172035_node.operator jule::Ptr<_1ea6ee955_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_ContSt>>()) {
			_case_begin_4803981456:;
			{
				this->self->_method_check_cont(_172035_node.operator jule::Ptr<_1ea6ee955_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_LabelSt>>()) {
			_case_begin_4803981552:;
			{
				this->self->_method_check_label(_172035_node.operator jule::Ptr<_1ea6ee955_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_GotoSt>>()) {
			_case_begin_4803981648:;
			{
				this->self->_method_push_goto(_172035_node.operator jule::Ptr<_1ea6ee955_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_AssignSt>>()) {
			_case_begin_4803981744:;
			{
				this->self->_method_check_assign_st(_172035_node.operator jule::Ptr<_1ea6ee955_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_MatchCase>>()) {
			_case_begin_4803981840:;
			{
				this->self->_method_check_match(_172035_node.operator jule::Ptr<_1ea6ee955_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FallSt>>()) {
			_case_begin_4803981936:;
			{
				this->self->_method_check_fall(_172035_node.operator jule::Ptr<_1ea6ee955_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_BreakSt>>()) {
			_case_begin_4803982032:;
			{
				this->self->_method_check_break(_172035_node.operator jule::Ptr<_1ea6ee955_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_RetSt>>()) {
			_case_begin_4803982128:;
			{
				this->self->_method_check_ret(_172035_node.operator jule::Ptr<_1ea6ee955_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UseExpr>>()) {
			_case_begin_4803982224:;
			{
				this->self->_method_check_use_expr(_172035_node.operator jule::Ptr<_1ea6ee955_UseExpr>());
			}
		}
		else {
			_case_begin_4803979088:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_4803979184:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_result(void) {
	jule::Any _174417_stmt = this->self->_field_tree->_field_stmts[this->self->_field_tree->_field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _174417_stmt };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UseExpr>>()) {
			_case_begin_4804014816:;
			{
				jule::Ptr<_1ea6ee955_UseExpr> _174721_ue = _174417_stmt.operator jule::Ptr<_1ea6ee955_UseExpr>();
				jule::Ptr<_1ebcce31e_Data> _174821_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_174721_ue->_field_expr);
				if (_174821_d == nullptr) {
					return;
				}
				this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_174821_d));
				jule::Ptr<_1eba534e4_RetTypeChecker> _175521_rtc = jule::new_struct<_1eba534e4_RetTypeChecker>(new( std::nothrow ) _1eba534e4_RetTypeChecker(this->self,jule::Ptr<_1eb627195_FnIns>(),_1eba534e4_get_result_types(this->self->_field_result),jule::Slice<jule::Ptr<_1ea6ee955_Expr>>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>(),_174721_ue->_field_expr->_field_token,jule::Any()));
				_175521_rtc->_method_check(_174721_ue->_field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Expr>>()) {
			_case_begin_4804014912:;
			{
				jule::Ptr<_1ea6ee955_Expr> _176321_expr = _174417_stmt.operator jule::Ptr<_1ea6ee955_Expr>();
				jule::Ptr<_1ebcce31e_Data> _176421_d = this->self->_field_s->_method_eval(this->self)->_method_eval_expr(_176321_expr);
				if (_176421_d == nullptr) {
					return;
				}
				this->self->_field_scope->_field_stmts = jule::alloc_for_append(this->self->_field_scope->_field_stmts,1);this->self->_field_scope->_field_stmts.push(jule::Any(_176421_d));
				{
					auto &_match_expr{ _176421_d->_field_model };
					if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>>()) {
						_case_begin_4804027232:;
						{
							jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel> _177325_m = _176421_d->_field_model.operator jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>();
							this->self->_method_process_error_call(_177325_m,_176321_expr->_field_token);
						}
					}
					else {
						_case_begin_4804025952:;
						{
							return;
						}
					}
					_match_end_4804026928:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_GotoSt>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_BreakSt>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_ContSt>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_RetSt>>()) {
			_case_begin_4804013376:;
			{
				this->self->_method_check_node(_174417_stmt);
			}
		}
		else {
			_case_begin_4804011376:;
			{
				this->self->_method_check_node(_174417_stmt);
				return;
			}
		}
		_match_end_4804013088:;
	}
	this->self->_field_result=nullptr;
}



inline void _1eb7d5892_ScopeChecker::_method_check_tree(void) {
	this->self->_field_i=0LL;
	for (; this->self->_field_i < this->self->_field_tree->_field_stmts.len(); (this->self->_field_i)++) {
		{
			jule::Any _179821_stmt = this->self->_field_tree->_field_stmts[this->self->_field_i];
			this->self->_method_check_node(_179821_stmt);
		}
	_iter_next_4804033744:;
	}
	_iter_end_4804033744:;
	if ((this->self->_field_result != nullptr) && (this->self->_field_tree->_field_stmts.len() != 0LL)) {
		this->self->_method_check_result();
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_goto(jule::Ptr<_1eb7d5892_ScopeGoto>& _180734_gt,jule::Ptr<_1eb7d5892_ScopeLabel>& _180755_label) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _180817_gtsc = _180734_gt->_field_scope;
	while ((_180817_gtsc->_field_child_index - 1LL) > _180755_label->_field_scope->_field_child_index) {
		{
			_180817_gtsc=_180817_gtsc->_field_parent;
		}
	_iter_next_4804042192:;
	}
	_iter_end_4804042192:;
	jule::Int _181317_n = 0LL;
	if (_180817_gtsc->_field_scope == _180755_label->_field_scope->_field_scope) {
		if (_180734_gt->_field_pos > _180755_label->_field_pos) {
			return;
		}
		_181317_n=_180734_gt->_field_pos;
	}
	jule::Int _182617_i = _180755_label->_field_pos - 1LL;
	if (_181317_n == 0LL) {
		{
			auto &expr = _180755_label->_field_scope->_field_scope->_field_stmts;
			auto it = expr.begin();
			_iter_begin_4804048512:;
			if (it != expr.end()) {
				jule::Int _1eb7d5892_j = it - expr.begin();
				jule::Any &_1eb7d5892_stmt = *it;
				{
					if (_1eb7d5892_stmt_is_goto_scope(_1eb7d5892_stmt,_180817_gtsc->_field_scope)) {
						_181317_n=_1eb7d5892_j;
						goto _iter_end_4804048512;
					}
				}
				_iter_next_4804048512:;
				++it;
				_1eb7d5892_j++;
				goto _iter_begin_4804048512;
			}
			_iter_end_4804048512:;
		}
	}
	for (; _182617_i >= _181317_n; (_182617_i)--) {
		{
			jule::Any _183921_stmt = _180755_label->_field_scope->_field_scope->_field_stmts[_182617_i];
			if (_1eb7d5892_st_is_def(_183921_stmt)) {
				(*this)._field_s->_method_push_err(_180734_gt->_field_gt->_field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_180734_gt->_field_gt->_field_label._field_kind)}));
				return;
			}
		}
	_iter_next_4804049536:;
	}
	_iter_end_4804049536:;
}



inline void _1eb7d5892_ScopeChecker::_method_check_gotos(void) {
	{
		auto &expr = (*((*this)._field_gotos));
		auto it = expr.begin();
		_iter_begin_4804056288:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_ScopeGoto> _1eb7d5892_gt = *it;
			{
				jule::Ptr<_1eb7d5892_ScopeLabel> _184921_label = (*this)._method_find_label_all(_1eb7d5892_gt->_field_gt->_field_label._field_kind);
				if (_184921_label == nullptr) {
					(*this)._field_s->_method_push_err(_1eb7d5892_gt->_field_gt->_field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_1eb7d5892_gt->_field_gt->_field_label._field_kind)}));
					goto _iter_next_4804056288;
				}
				_184921_label->_field_used=true;
				(*this)._method_check_goto(_1eb7d5892_gt,_184921_label);
			}
			_iter_next_4804056288:;
			++it;
			goto _iter_begin_4804056288;
		}
		_iter_end_4804056288:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_labels(void) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_4804057584:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_ScopeLabel> &_1eb7d5892_l = *it;
			{
				if ((!(_1eb7d5892_l->_field_used))) {
					(*this)._field_s->_method_push_err(_1eb7d5892_l->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_1eb7d5892_l->_field_label->_field_ident)}));
				}
			}
			_iter_next_4804057584:;
			++it;
			goto _iter_begin_4804057584;
		}
		_iter_end_4804057584:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_vars(void) {
	{
		auto &expr = (*this)._field_table->_field_vars;
		auto it = expr.begin();
		_iter_begin_4804067728:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> &_1eb7d5892_v = *it;
			{
				if ((((!(_1eb7d5892_v->_field_used)) && (!(_1ea7465e5_is_ignore_ident(_1eb7d5892_v->_field_ident)))) && (!(_1ea7465e5_is_anon_ident(_1eb7d5892_v->_field_ident)))) && (_1eb7d5892_v->_field_ident != jule::Str("self", 4))) {
					(*this)._field_s->_method_push_err(_1eb7d5892_v->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_1eb7d5892_v->_field_ident)}));
				}
			}
			_iter_next_4804067728:;
			++it;
			goto _iter_begin_4804067728;
		}
		_iter_end_4804067728:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check_aliases(void) {
	{
		auto &expr = (*this)._field_table->_field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4804073504:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeAlias> &_1eb7d5892_a = *it;
			{
				if (((!(_1eb7d5892_a->_field_used)) && (!(_1ea7465e5_is_ignore_ident(_1eb7d5892_a->_field_ident)))) && (!(_1ea7465e5_is_anon_ident(_1eb7d5892_a->_field_ident)))) {
					(*this)._field_s->_method_push_err(_1eb7d5892_a->_field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_1eb7d5892_a->_field_ident)}));
				}
			}
			_iter_next_4804073504:;
			++it;
			goto _iter_begin_4804073504;
		}
		_iter_end_4804073504:;
	}
}



inline void _1eb7d5892_ScopeChecker::_method_check(jule::Ptr<_1ea6ee955_ScopeTree>& _188530_tree,jule::Ptr<_1eb7d5892_Scope>& _188553_s) {
	_188553_s->_field_deferred=_188530_tree->_field_deferred;
	_188553_s->_field_unsafety=_188530_tree->_field_unsafety;
	jule::I64 _188913_errors = this->self->_field_s->_field_errors.len();
	this->self->_field_tree=_188530_tree;
	this->self->_field_scope=_188553_s;
	this->self->_method_check_tree();
	if (_188913_errors == this->self->_field_s->_field_errors.len()) {
		this->self->_method_check_vars();
		this->self->_method_check_aliases();
		if (this->self->_method_is_root()) {
			this->self->_method_check_gotos();
			this->self->_method_check_labels();
		}
	}
}



inline jule::Ptr<_1eb7d5892_ScopeChecker> _1eb7d5892_ScopeChecker::_method_new_child_checker(void) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _190917_base = _1eb7d5892_new_scope_checker_base(this->self->_field_s,nullptr);
	_190917_base->_field_parent=this->self;
	_190917_base->_field_labels=this->self->_field_labels;
	_190917_base->_field_gotos=this->self->_field_gotos;
	_190917_base->_field_child_index=static_cast<jule::Int>(this->self->_field_child_index + 1LL);
	return _190917_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_IndexigExprModel &_Src) {
	_Stream << "IndexigExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinErrorCallExprModel &_Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_IntegratedToStrExprModel &_Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_TernaryExprModel &_Src) {
	_Stream << "TernaryExprModel{";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BackendEmitExprModel &_Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}



inline void _1eb98e61c_DirectiveChecker::_method_check_cdef(jule::Ptr<_1ea6ee955_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		if (_match_expr.type_is<jule::Ptr<_1eb627195_Fn>>()) {
			_case_begin_4804103344:;
			{
				if ((*this)._field_o.operator jule::Ptr<_1eb627195_Fn>()->_field_cpp_linked) {
					goto _match_end_4804103264;
				}
				goto _case_begin_4804103168;
			}
		}
		else {
			_case_begin_4804103168:;
			{
				(*this)._field_s->_method_push_err(_1630_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_1630_d->_field_tag._field_kind)}));
			}
		}
		_match_end_4804103264:;
	}
	if (_1630_d->_field_args.len() > 0LL) {
		(*this)._field_s->_method_push_err(_1630_d->_field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eb98e61c_DirectiveChecker::_method_check_typedef(jule::Ptr<_1ea6ee955_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4804111440:;
			{
				if ((*this)._field_o.operator jule::Ptr<_1eb29bdd6_Struct>()->_field_cpp_linked) {
					goto _match_end_4804111360;
				}
				goto _case_begin_4804111264;
			}
		}
		else {
			_case_begin_4804111264:;
			{
				(*this)._field_s->_method_push_err(_3233_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_3233_d->_field_tag._field_kind)}));
			}
		}
		_match_end_4804111360:;
	}
	if (_3233_d->_field_args.len() > 0LL) {
		(*this)._field_s->_method_push_err(_3233_d->_field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eb98e61c_DirectiveChecker::_method_check_derive(jule::Ptr<_1ea6ee955_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4804119536:;
			{
				if ((!((*this)._field_o.operator jule::Ptr<_1eb29bdd6_Struct>()->_field_cpp_linked))) {
					goto _match_end_4804119456;
				}
				goto _case_begin_4804119360;
			}
		}
		else {
			_case_begin_4804119360:;
			{
				(*this)._field_s->_method_push_err(_4832_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_4804119456:;
	}
	if (_4832_d->_field_args.len() == 0LL) {
		(*this)._field_s->_method_push_err(_4832_d->_field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*this)._field_s->_method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	} else if (_4832_d->_field_args.len() > 1LL) {
		(*this)._field_s->_method_push_err(_4832_d->_field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	{
		auto &_match_expr{ _4832_d->_field_args[0LL]._field_kind };
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_4804129888:;
		}
		else {
			_case_begin_4804123808:;
			{
				(*this)._field_s->_method_push_err(_4832_d->_field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_4832_d->_field_args[0LL]._field_kind)}));
			}
		}
		_match_end_4804129024:;
	}
}



inline void _1eb98e61c_DirectiveChecker::_method_check_namespace(jule::Ptr<_1ea6ee955_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4804134512:;
			{
				if ((!((*this)._field_o.operator jule::Ptr<_1eb29bdd6_Struct>()->_field_cpp_linked))) {
					(*this)._field_s->_method_push_err(_7439_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d->_field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb627195_Fn>>()) {
			_case_begin_4804135152:;
			{
				if ((!((*this)._field_o.operator jule::Ptr<_1eb627195_Fn>()->_field_cpp_linked))) {
					(*this)._field_s->_method_push_err(_7439_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d->_field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4804135248:;
			{
				if ((!((*this)._field_o.operator jule::Ptr<_1eba533d4_Var>()->_field_cpp_linked))) {
					(*this)._field_s->_method_push_err(_7439_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d->_field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_4804134336:;
			{
				(*this)._field_s->_method_push_err(_7439_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d->_field_tag._field_kind)}));
			}
		}
		_match_end_4804134432:;
	}
	if (_7439_d->_field_args.len() == 0LL) {
		(*this)._field_s->_method_push_err(_7439_d->_field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if (_7439_d->_field_args.len() > 1LL) {
		(*this)._field_s->_method_push_err(_7439_d->_field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1ea7465e5_Token _10213_arg = _7439_d->_field_args[0LL];
	if (_10213_arg._field_id != 6LLU) {
		(*this)._field_s->_method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_10213_arg._field_kind[0LL] != '\"') {
		(*this)._field_s->_method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_7439_d->_field_args[0LL]._field_kind=_10213_arg._field_kind.slice(1LL,_10213_arg._field_kind.len() - 1LL);
}



inline void _1eb98e61c_DirectiveChecker::_method_check_deprecated(jule::Ptr<_1ea6ee955_Directive>& _11640_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4804158896:;
			{
				if ((*this)._field_o.operator jule::Ptr<_1eb29bdd6_Struct>()->_field_cpp_linked) {
					(*this)._field_s->_method_push_err(_11640_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_11640_d->_field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb627195_Fn>>()) {
			_case_begin_4804159536:;
			{
				if ((*this)._field_o.operator jule::Ptr<_1eb627195_Fn>()->_field_cpp_linked) {
					(*this)._field_s->_method_push_err(_11640_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_11640_d->_field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4804159632:;
			{
				if ((*this)._field_o.operator jule::Ptr<_1eba533d4_Var>()->_field_cpp_linked) {
					(*this)._field_s->_method_push_err(_11640_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_11640_d->_field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_4804158720:;
			{
				(*this)._field_s->_method_push_err(_11640_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_11640_d->_field_tag._field_kind)}));
			}
		}
		_match_end_4804158816:;
	}
	if (_11640_d->_field_args.len() == 0LL) {
		return;
	}
	if (_11640_d->_field_args.len() > 1LL) {
		(*this)._field_s->_method_push_err(_11640_d->_field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1ea7465e5_Token _14413_arg = _11640_d->_field_args[0LL];
	if (_14413_arg._field_id != 6LLU) {
		(*this)._field_s->_method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_14413_arg._field_kind[0LL] != '\"') {
		(*this)._field_s->_method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_11640_d->_field_args[0LL]._field_kind=_14413_arg._field_kind.slice(1LL,_14413_arg._field_kind.len() - 1LL);
}



inline void _1eb98e61c_DirectiveChecker::_method_check_test(jule::Ptr<_1ea6ee955_Directive>& _15831_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		if (_match_expr.type_is<jule::Ptr<_1eb627195_Fn>>()) {
			_case_begin_4804182192:;
			{
				jule::Ptr<_1eb627195_Fn> _16117_f = (*this)._field_o.operator jule::Ptr<_1eb627195_Fn>();
				if (((!(_16117_f->_field_cpp_linked)) && (!(_16117_f->_method_is_init()))) && (!(_16117_f->_method_is_entry_point()))) {
					goto _match_end_4804182112;
				}
				if (_16117_f->_method_is_method()) {
					(*this)._field_s->_method_push_err(_16117_f->_field_token,jule::Str("you cannot declarate test methods", 33),jule::Slice<jule::Any>());
					goto _match_end_4804182112;
				}
				goto _case_begin_4804182016;
			}
		}
		else {
			_case_begin_4804182016:;
			{
				(*this)._field_s->_method_push_err(_15831_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_15831_d->_field_tag._field_kind)}));
			}
		}
		_match_end_4804182112:;
	}
	if (_15831_d->_field_args.len() > 0LL) {
		(*this)._field_s->_method_push_err(_15831_d->_field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eb98e61c_DirectiveChecker::_method_check_directive(jule::Ptr<_1ea6ee955_Directive>& _17939_d) {
	{
		auto &_match_expr{ _17939_d->_field_tag._field_kind };
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_4804195056:;
			{
				(*this)._method_check_cdef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_4804195152:;
			{
				(*this)._method_check_typedef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_4804195248:;
			{
				(*this)._method_check_derive(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_4804197040:;
			{
				(*this)._method_check_namespace(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_4804197136:;
			{
				(*this)._method_check_deprecated(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_4804197232:;
			{
				(*this)._method_check_test(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_4804197328:;
			{
				(*this)._field_s->_method_push_err(_17939_d->_field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_17939_d->_field_tag._field_kind)}));
			}
		}
		else {
			_case_begin_4804194016:;
			{
				(*this)._field_s->_method_push_err(_17939_d->_field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_17939_d->_field_tag._field_kind)}));
			}
		}
		_match_end_4804194416:;
	}
}



inline void _1eb98e61c_DirectiveChecker::_method_check(void) {
	{
		auto &expr = (*this)._field_d;
		auto it = expr.begin();
		_iter_begin_4804208176:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> _1eb98e61c_d = *it;
			{
				(*this)._method_check_directive(_1eb98e61c_d);
			}
			_iter_next_4804208176:;
			++it;
			goto _iter_begin_4804208176;
		}
		_iter_end_4804208176:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb98e61c_DirectiveChecker &_Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb7d8048_Package::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb7d8048_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1eba533d4_Var> _1eb7d8048_Package::_method_find_var(jule::Str _28031_ident,jule::Bool _28043_cpp_linked) {
	return _1eb7d8048_find_var_in_package((*this)._field_files,_28031_ident,_28043_cpp_linked);
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb7d8048_Package::_method_find_type_alias(jule::Str _28638_ident,jule::Bool _28650_cpp_linked) {
	return _1eb7d8048_find_type_alias_in_package((*this)._field_files,_28638_ident,_28650_cpp_linked);
}



inline jule::Ptr<_1eb29bdd6_Struct> _1eb7d8048_Package::_method_find_struct(jule::Str _29234_ident,jule::Bool _29246_cpp_linked) {
	return _1eb7d8048_find_struct_in_package((*this)._field_files,_29234_ident,_29246_cpp_linked);
}



inline jule::Ptr<_1eb627195_Fn> _1eb7d8048_Package::_method_find_fn(jule::Str _29830_ident,jule::Bool _29842_cpp_linked) {
	return _1eb7d8048_find_fn_in_package((*this)._field_files,_29830_ident,_29842_cpp_linked);
}



inline jule::Ptr<_1eb7c68e9_Trait> _1eb7d8048_Package::_method_find_trait(jule::Str _30433_ident) {
	return _1eb7d8048_find_trait_in_package((*this)._field_files,_30433_ident);
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1eb7d8048_Package::_method_find_enum(jule::Str _31032_ident) {
	return _1eb7d8048_find_enum_in_package((*this)._field_files,_31032_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d8048_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_Sema::_method_find_package(jule::Str _33235_ident) {
	return (*this)._field_file->_method_find_package(_33235_ident);
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)> _34237_selector) {
	return (*this)._field_file->_method_select_package(_34237_selector);
}



inline jule::Ptr<_1eba533d4_Var> _1eb9ed0d7_Sema::_method_find_var(jule::Str _35231_ident,jule::Bool _35243_cpp_linked) {
	jule::Ptr<_1eba533d4_Var> _35417_v = _1eb7d8048_find_var_in_package((*this)._field_files,_35231_ident,_35243_cpp_linked);
	if (_35417_v != nullptr) {
		return _35417_v;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804283328:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
			{
				if ((!(_1eb9ed0d7_imp_is_lookupable(_1eb9ed0d7_imp,_35231_ident)))) {
					goto _iter_next_4804283328;
				}
				_35417_v=_1eb9ed0d7_imp->_method_find_var(_35231_ident,_35243_cpp_linked);
				if ((_35417_v != nullptr) && (*this)._method_is_accessible_define(_35417_v->_field_public,_35417_v->_field_token)) {
					return _35417_v;
				}
			}
			_iter_next_4804283328:;
			++it;
			goto _iter_begin_4804283328;
		}
		_iter_end_4804283328:;
	}
	return nullptr;
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb9ed0d7_Sema::_method_find_type_alias(jule::Str _37938_ident,jule::Bool _37950_cpp_linked) {
	jule::Ptr<_1ec1c55b1_TypeAlias> _38117_ta = _1eb7d8048_find_type_alias_in_package((*this)._field_files,_37938_ident,_37950_cpp_linked);
	if (_38117_ta != nullptr) {
		return _38117_ta;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804292256:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
			{
				if ((!(_1eb9ed0d7_imp_is_lookupable(_1eb9ed0d7_imp,_37938_ident)))) {
					goto _iter_next_4804292256;
				}
				_38117_ta=_1eb9ed0d7_imp->_method_find_type_alias(_37938_ident,_37950_cpp_linked);
				if ((_38117_ta != nullptr) && (*this)._method_is_accessible_define(_38117_ta->_field_public,_38117_ta->_field_token)) {
					return _38117_ta;
				}
			}
			_iter_next_4804292256:;
			++it;
			goto _iter_begin_4804292256;
		}
		_iter_end_4804292256:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb29bdd6_Struct> _1eb9ed0d7_Sema::_method_find_struct(jule::Str _40634_ident,jule::Bool _40646_cpp_linked) {
	jule::Ptr<_1eb29bdd6_Struct> _40817_s = _1eb7d8048_find_struct_in_package((*this)._field_files,_40634_ident,_40646_cpp_linked);
	if (_40817_s != nullptr) {
		return _40817_s;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804299872:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
			{
				if ((!(_1eb9ed0d7_imp_is_lookupable(_1eb9ed0d7_imp,_40634_ident)))) {
					goto _iter_next_4804299872;
				}
				_40817_s=_1eb9ed0d7_imp->_method_find_struct(_40634_ident,_40646_cpp_linked);
				if ((_40817_s != nullptr) && (*this)._method_is_accessible_define(_40817_s->_field_public,_40817_s->_field_token)) {
					return _40817_s;
				}
			}
			_iter_next_4804299872:;
			++it;
			goto _iter_begin_4804299872;
		}
		_iter_end_4804299872:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_Sema::_method_find_fn(jule::Str _43330_ident,jule::Bool _43342_cpp_linked) {
	jule::Ptr<_1eb627195_Fn> _43517_f = _1eb7d8048_find_fn_in_package((*this)._field_files,_43330_ident,_43342_cpp_linked);
	if (_43517_f != nullptr) {
		return _43517_f;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804307616:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
			{
				if ((!(_1eb9ed0d7_imp_is_lookupable(_1eb9ed0d7_imp,_43330_ident)))) {
					goto _iter_next_4804307616;
				}
				_43517_f=_1eb9ed0d7_imp->_method_find_fn(_43330_ident,_43342_cpp_linked);
				if ((_43517_f != nullptr) && (*this)._method_is_accessible_define(_43517_f->_field_public,_43517_f->_field_token)) {
					return _43517_f;
				}
			}
			_iter_next_4804307616:;
			++it;
			goto _iter_begin_4804307616;
		}
		_iter_end_4804307616:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7c68e9_Trait> _1eb9ed0d7_Sema::_method_find_trait(jule::Str _46033_ident) {
	jule::Ptr<_1eb7c68e9_Trait> _46217_t = _1eb7d8048_find_trait_in_package((*this)._field_files,_46033_ident);
	if (_46217_t != nullptr) {
		return _46217_t;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804313856:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
			{
				if ((!(_1eb9ed0d7_imp_is_lookupable(_1eb9ed0d7_imp,_46033_ident)))) {
					goto _iter_next_4804313856;
				}
				_46217_t=_1eb9ed0d7_imp->_method_find_trait(_46033_ident);
				if ((_46217_t != nullptr) && (*this)._method_is_accessible_define(_46217_t->_field_public,_46217_t->_field_token)) {
					return _46217_t;
				}
			}
			_iter_next_4804313856:;
			++it;
			goto _iter_begin_4804313856;
		}
		_iter_end_4804313856:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1eb9ed0d7_Sema::_method_find_enum(jule::Str _48732_ident) {
	jule::Ptr<_1eb7c7e7d_Enum> _48917_e = _1eb7d8048_find_enum_in_package((*this)._field_files,_48732_ident);
	if (_48917_e != nullptr) {
		return _48917_e;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804322016:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
			{
				if ((!(_1eb9ed0d7_imp_is_lookupable(_1eb9ed0d7_imp,_48732_ident)))) {
					goto _iter_next_4804322016;
				}
				_48917_e=_1eb9ed0d7_imp->_method_find_enum(_48732_ident);
				if ((_48917_e != nullptr) && (*this)._method_is_accessible_define(_48917_e->_field_public,_48917_e->_field_token)) {
					return _48917_e;
				}
			}
			_iter_next_4804322016:;
			++it;
			goto _iter_begin_4804322016;
		}
		_iter_end_4804322016:;
	}
	return nullptr;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_is_flag(jule::Int _51122_flags) {
	return ((*this)._field_flags & _51122_flags) == _51122_flags;
}



inline void _1eb9ed0d7_Sema::_method_set_current_file(jule::Ptr<_1ebcb6081_SymbolTable> _51339_f) {
	(*this)._field_file=_51339_f;
}



inline void _1eb9ed0d7_Sema::_method_push_err(_1ea7465e5_Token _51527_token,jule::Str _51541_fmt,jule::Slice<jule::Any> _51554_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1eb9ed0d7_compiler_err(_51527_token,true,_51541_fmt,_51554_args));
}



inline void _1eb9ed0d7_Sema::_method_push_suggestion(jule::Str _52034_fmt,jule::Slice<jule::Any> _52047_args) {
	{
		_1eb9ed0d7_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_52034_fmt,_52047_args);
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_is_accessible_define(jule::Bool _52535_public,_1ea7465e5_Token _52549_token) {
	return (_52535_public || (_52549_token._field_file == nullptr)) || ((*this)._field_file->_field_file->_method_dir() == _52549_token._field_file->_method_dir());
}



inline jule::Bool _1eb9ed0d7_Sema::_method_is_duplicated_ident(jule::Uintptr _53234_itself,jule::Str _53251_ident,jule::Bool _53263_cpp_linked) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_4804343520:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> &_1eb9ed0d7_f = *it;
			{
				if (_1eb9ed0d7_f->_method_is_duplicated_ident(_53234_itself,_53251_ident,_53263_cpp_linked)) {
					return true;
				}
				{
					auto &expr = _1eb9ed0d7_f->_field_imports;
					auto it = expr.begin();
					_iter_begin_4804347808:;
					if (it != expr.end()) {
						jule::Ptr<_1eb7d8048_ImportInfo> &_1eb9ed0d7_imp = *it;
						{
							{
								auto &expr = _1eb9ed0d7_imp->_field_selected;
								auto it = expr.begin();
								_iter_begin_4804349040:;
								if (it != expr.end()) {
									_1ea7465e5_Token &_1eb9ed0d7_selected = *it;
									{
										if (_1eb9ed0d7_selected._field_kind == _53251_ident) {
											return true;
										}
									}
									_iter_next_4804349040:;
									++it;
									goto _iter_begin_4804349040;
								}
								_iter_end_4804349040:;
							}
						}
						_iter_next_4804347808:;
						++it;
						goto _iter_begin_4804347808;
					}
					_iter_end_4804347808:;
				}
			}
			_iter_next_4804343520:;
			++it;
			goto _iter_begin_4804343520;
		}
		_iter_end_4804343520:;
	}
	return false;
}



inline void _1eb9ed0d7_Sema::_method_check_directives(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>& _54941_d,jule::Any _54967_o) {
	_1eb98e61c_DirectiveChecker _55017_dc = _1eb98e61c_DirectiveChecker(this->self,_54941_d,_54967_o);
	_55017_dc._method_check();
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_generic_quantity(jule::Int _55841_required,jule::Int _55856_given,_1ea7465e5_Token _55868_error_token) {
	jule::Bool _55890_ok = jule::Bool();
	{
		if ((_55841_required == 0LL) && (_55856_given > 0LL)) {
			_case_begin_4804359232:;
			{
				(*this)._method_push_err(_55868_error_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_55890_ok = false;
				return _55890_ok;
			}
		}
		else if ((_55841_required > 0LL) && (_55856_given == 0LL)) {
			_case_begin_4804359392:;
			{
				(*this)._method_push_err(_55868_error_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_55890_ok = false;
				return _55890_ok;
			}
		}
		else if (_55841_required < _55856_given) {
			_case_begin_4804359504:;
			{
				(*this)._method_push_err(_55868_error_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_55890_ok = false;
				return _55890_ok;
			}
		}
		else if (_55841_required > _55856_given) {
			_case_begin_4804358752:;
			{
				(*this)._method_push_err(_55868_error_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_55890_ok = false;
				return _55890_ok;
			}
		}
		else {
			_case_begin_4804357744:;
			{
				_55890_ok = true;
				return _55890_ok;
			}
		}
		_match_end_4804357568:;
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_is_duplicated_import_selection(jule::Uintptr _58145_itself,jule::Str _58162_ident) {
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804369392:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> &_1eb9ed0d7_imp = *it;
			{
				if (static_cast<jule::Uintptr>(_1eb9ed0d7_imp) == _58145_itself) {
					goto _iter_end_4804369392;
				}
				if (_1eb9ed0d7_imp->_method_exist_ident(_58162_ident)) {
					return true;
				}
			}
			_iter_next_4804369392:;
			++it;
			goto _iter_begin_4804369392;
		}
		_iter_end_4804369392:;
	}
	return false;
}



inline jule::Any _1eb9ed0d7_Sema::_method_get_import_def(jule::Str _59629_ident,jule::Ptr<_1eb7d8048_ImportInfo>& _59646_imp) {
	if (_1ec2ee113_find_package_builtin_def(_59646_imp->_field_link_path,_59629_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto &expr = _59646_imp->_field_package->_field_files;
		auto it = expr.begin();
		_iter_begin_4804376896:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				
				jule::Any _60321_def = _1eb9ed0d7_f->_method_def_by_ident(_59629_ident,false);
				if (_60321_def != nullptr) {
					return _60321_def;
				}
			}
			_iter_next_4804376896:;
			++it;
			goto _iter_begin_4804376896;
		}
		_iter_end_4804376896:;
	}
	return jule::Any(nullptr);
}



inline void _1eb9ed0d7_Sema::_method_check_import_selections(jule::Ptr<_1eb7d8048_ImportInfo>& _61247_imp) {
	{
		auto &expr = _61247_imp->_field_selected;
		auto it = expr.begin();
		_iter_begin_4804381152:;
		if (it != expr.end()) {
			_1ea7465e5_Token &_1eb9ed0d7_ident = *it;
			{
				if (_1eb9ed0d7_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_4804381152;
				}
				if ((*this)._method_is_duplicated_import_selection(static_cast<jule::Uintptr>(_61247_imp),_1eb9ed0d7_ident._field_kind)) {
					(*this)._method_push_err(_1eb9ed0d7_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					goto _iter_next_4804381152;
				}
				jule::Any _62421_def = (*this)._method_get_import_def(_1eb9ed0d7_ident._field_kind,_61247_imp);
				{
					auto &_match_expr{ _62421_def };
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_4804390176:;
						{
							goto _iter_next_4804381152;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
						_case_begin_4804389616:;
						{
							jule::Ptr<_1eba533d4_Var> _63125_v = _62421_def.operator jule::Ptr<_1eba533d4_Var>();
							if ((*this)._method_is_accessible_define(_63125_v->_field_public,_63125_v->_field_token)) {
								goto _iter_next_4804381152;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeAlias>>()) {
						_case_begin_4804389712:;
						{
							jule::Ptr<_1ec1c55b1_TypeAlias> _63725_ta = _62421_def.operator jule::Ptr<_1ec1c55b1_TypeAlias>();
							if ((*this)._method_is_accessible_define(_63725_ta->_field_public,_63725_ta->_field_token)) {
								goto _iter_next_4804381152;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
						_case_begin_4804391360:;
						{
							jule::Ptr<_1eb29bdd6_Struct> _64325_strct = _62421_def.operator jule::Ptr<_1eb29bdd6_Struct>();
							if ((*this)._method_is_accessible_define(_64325_strct->_field_public,_64325_strct->_field_token)) {
								goto _iter_next_4804381152;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7c68e9_Trait>>()) {
						_case_begin_4804391456:;
						{
							jule::Ptr<_1eb7c68e9_Trait> _64925_t = _62421_def.operator jule::Ptr<_1eb7c68e9_Trait>();
							if ((*this)._method_is_accessible_define(_64925_t->_field_public,_64925_t->_field_token)) {
								goto _iter_next_4804381152;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7c7e7d_Enum>>()) {
						_case_begin_4804391552:;
						{
							jule::Ptr<_1eb7c7e7d_Enum> _65525_e = _62421_def.operator jule::Ptr<_1eb7c7e7d_Enum>();
							if ((*this)._method_is_accessible_define(_65525_e->_field_public,_65525_e->_field_token)) {
								goto _iter_next_4804381152;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb627195_Fn>>()) {
						_case_begin_4804391648:;
						{
							jule::Ptr<_1eb627195_Fn> _66125_f = _62421_def.operator jule::Ptr<_1eb627195_Fn>();
							if ((*this)._method_is_accessible_define(_66125_f->_field_public,_66125_f->_field_token)) {
								goto _iter_next_4804381152;
							}
						}
					}
					else {
						_case_begin_4804384672:;
						{
							(*this)._method_push_err(_1eb9ed0d7_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_ident._field_kind)}));
							goto _iter_next_4804381152;
						}
					}
					_match_end_4804389104:;
				}
				(*this)._method_push_err(_1eb9ed0d7_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
			}
			_iter_next_4804381152:;
			++it;
			goto _iter_begin_4804381152;
		}
		_iter_end_4804381152:;
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_is_use_alias_duplication(jule::Ptr<_1eb7d8048_ImportInfo>& _67644_imp) {
	if (_67644_imp->_field_alias.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*this)._field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4804411264:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp2 = *it;
			{
				if (_1eb9ed0d7_imp2 == _67644_imp) {
					goto _iter_end_4804411264;
				}
				if (_1eb9ed0d7_imp2->_field_alias == _67644_imp->_field_alias) {
					return true;
				}
				if ((_1eb9ed0d7_imp2->_field_ident == _1eb9ed0d7_imp2->_field_link_path) && (_1eb9ed0d7_imp2->_field_ident == _67644_imp->_field_alias)) {
					return true;
				}
			}
			_iter_next_4804411264:;
			++it;
			goto _iter_begin_4804411264;
		}
		_iter_end_4804411264:;
	}
	return false;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_import(jule::Ptr<_1eb7d8048_ImportInfo>& _69736_imp) {
	if (_69736_imp->_field_cpp_linked || (_69736_imp->_field_package->_field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_69736_imp)) {
		(*this)._method_push_err(_69736_imp->_field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>({jule::Any(_69736_imp->_field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	}
	if (_69736_imp->_field_duplicate) {
		return true;
	}
	jule::Ptr<_1eb9ed0d7_Sema> _71117_sema = jule::new_struct_ptr<_1eb9ed0d7_Sema>(new( std::nothrow ) _1eb9ed0d7_Sema(jule::Slice<_1e8ea7cc0_Log>(),jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>(),jule::Ptr<_1ebcb6081_SymbolTable>(),(*this)._field_flags));
	_71117_sema->_method_check(_69736_imp->_field_package->_field_files);
	if (_71117_sema->_field_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_71117_sema->_field_errors);
		_71117_sema->_field_errors=nullptr;
		return false;
	}
	(*this)._method_check_import_selections(_69736_imp);
	return true;
}



inline void _1eb9ed0d7_Sema::_method_check_imports(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_4804429328:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_file = *it;
			{
				(*this)._method_set_current_file(_1eb9ed0d7_file);
				{
					auto &expr = _1eb9ed0d7_file->_field_imports;
					auto it = expr.begin();
					_iter_begin_4804431888:;
					if (it != expr.end()) {
						jule::Ptr<_1eb7d8048_ImportInfo> _1eb9ed0d7_imp = *it;
						{
							jule::Bool _73021_ok = (*this)._method_check_import(_1eb9ed0d7_imp);
							if ((!(_73021_ok))) {
								(*this)._method_push_err(_1eb9ed0d7_imp->_field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_imp->_field_link_path)}));
								return;
							}
						}
						_iter_next_4804431888:;
						++it;
						goto _iter_begin_4804431888;
					}
					_iter_end_4804431888:;
				}
			}
			_iter_next_4804429328:;
			++it;
			goto _iter_begin_4804429328;
		}
		_iter_end_4804429328:;
	}
}



inline void _1eb9ed0d7_Sema::_method_impl_file_impls(void) {
	{
		auto &expr = this->self->_field_file->_field_impls;
		auto it = expr.begin();
		_iter_begin_4804434880:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d363c_Impl> _1eb9ed0d7_imp = *it;
			{
				this->self->_method_impl_impl(_1eb9ed0d7_imp);
			}
			_iter_next_4804434880:;
			++it;
			goto _iter_begin_4804434880;
		}
		_iter_end_4804434880:;
	}
}



inline void _1eb9ed0d7_Sema::_method_impl_impls(void) {
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4804440448:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_file = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_file);
				this->self->_method_impl_file_impls();
			}
			_iter_next_4804440448:;
			++it;
			goto _iter_begin_4804440448;
		}
		_iter_end_4804440448:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_enums(void) {
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4804444144:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_file = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_file);
				this->self->_method_check_enum_decls();
			}
			_iter_next_4804444144:;
			++it;
			goto _iter_begin_4804444144;
		}
		_iter_end_4804444144:;
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_type_with_refers(jule::Ptr<_1ec1c55b1_TypeSymbol>& _76347_t,jule::Trait<_1ec2d8be1_Lookup> _76413_l,jule::Ptr<_1ec1c55b1_Referencer> _76428_referencer) {
	jule::Bool _76455_ok = jule::Bool();
	if (_76347_t->_method_checked()) {
		_76455_ok = true;
		return _76455_ok;
	}
	_1ec1c55b1_TypeChecker _76817_tc = _1ec1c55b1_TypeChecker(this->self,_76413_l,_76428_referencer,_1ea7465e5_Token(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>(),jule::Bool(),jule::Bool());
	_76817_tc._method_check(_76347_t);
	_76455_ok = _76347_t->_method_checked();
	return _76455_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_type(jule::Ptr<_1ec1c55b1_TypeSymbol>& _77935_t,jule::Trait<_1ec2d8be1_Lookup> _77955_l) {
	return this->self->_method_check_type_with_refers(_77935_t,_77955_l,nullptr);
}



inline jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_Sema::_method_build_type_with_generics(jule::Ptr<_1ea6ee955_TypeDecl>& _78549_t,jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _78613_generics) {
	jule::Ptr<_1ec1c55b1_TypeChecker> _78717_tc = jule::new_struct<_1ec1c55b1_TypeChecker>(new( std::nothrow ) _1ec1c55b1_TypeChecker(this->self,this->self,jule::Ptr<_1ec1c55b1_Referencer>(),_1ea7465e5_Token(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),_78613_generics,jule::Bool(),jule::Bool()));
	return _78717_tc->_method_check_decl(_78549_t);
}



inline jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_Sema::_method_build_type(jule::Ptr<_1ea6ee955_TypeDecl>& _79635_t) {
	return this->self->_method_build_type_with_generics(_79635_t,nullptr);
}



inline jule::Ptr<_1ebcce31e_Eval> _1eb9ed0d7_Sema::_method_evalpd(jule::Trait<_1ec2d8be1_Lookup> _80230_l,jule::Ptr<_1ec1c55b1_TypeKind> _80245_p,jule::Ptr<_1eba533d4_Var> _80263_owner) {
	jule::Ptr<_1ebcce31e_Eval> _80317_e = jule::new_struct_ptr<_1ebcce31e_Eval>(new( std::nothrow ) _1ebcce31e_Eval(this->self,_80230_l,jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_80263_owner));
	{
		auto &_match_expr{ _80230_l };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4804487024:;
			{
				_80317_e->_field_unsafety=_80230_l.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_method_is_unsafe();
			}
		}
		_match_end_4804488240:;
	}
	_80317_e->_field_prefix=_80245_p;
	return _80317_e;
}



inline jule::Ptr<_1ebcce31e_Eval> _1eb9ed0d7_Sema::_method_evalp(jule::Trait<_1ec2d8be1_Lookup> _82029_l,jule::Ptr<_1ec1c55b1_TypeKind> _82044_p) {
	return this->self->_method_evalpd(_82029_l,_82044_p,nullptr);
}



inline jule::Ptr<_1ebcce31e_Eval> _1eb9ed0d7_Sema::_method_eval(jule::Trait<_1ec2d8be1_Lookup> _82528_l) {
	return this->self->_method_evalp(_82528_l,nullptr);
}



inline void _1eb9ed0d7_Sema::_method_check_assign_type(jule::Bool _82937_dest_is_ref,jule::Ptr<_1ec1c55b1_TypeKind>& _82961_dest,jule::Ptr<_1ebcce31e_Data>& _83014_d,_1ea7465e5_Token _83028_error_token) {
	if (_83014_d->_field_kind->_field_variadic) {
		this->self->_method_push_err(_83028_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	if (_82937_dest_is_ref) {
		if ((!(_82961_dest->_method_equals(_83014_d->_field_kind)))) {
			this->self->_method_push_err(_83028_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_82961_dest->_method_to_str()),jule::Any(_83014_d->_field_kind->_method_to_str())}));
		}
	} else {
		jule::Ptr<_1eba534e4_AssignTypeChecker> _84021_atc = jule::new_struct<_1eba534e4_AssignTypeChecker>(new( std::nothrow ) _1eba534e4_AssignTypeChecker(this->self,_82961_dest,_83014_d,_83028_error_token));
		jule::Bool _84617_ok = _84021_atc->_method_check();
		if ((!(_84617_ok))) {
			return;
		}
	}
	if ((!(_83014_d->_method_is_const())) || (_82961_dest->_method_prim() == nullptr)) {
		return;
	}
	jule::Str _85617_kind = _82961_dest->_method_prim()->_field_kind;
	{
		if (_1ec4784ce_is_sig_int(_85617_kind)) {
			_case_begin_4804508768:;
			{
				_83014_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_83014_d->_field_constant->_method_as_i64()));
			}
		}
		else if (_1ec4784ce_is_unsig_int(_85617_kind)) {
			_case_begin_4804508864:;
			{
				_83014_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_83014_d->_field_constant->_method_as_u64()));
			}
		}
		else if (_1ec4784ce_is_float(_85617_kind)) {
			_case_begin_4804508960:;
			{
				_83014_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_83014_d->_field_constant->_method_as_f64()));
			}
		}
		_match_end_4804508544:;
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_type_compatibility(jule::Ptr<_1ec1c55b1_TypeKind>& _86549_dest,jule::Ptr<_1ec1c55b1_TypeKind>& _86614_src,_1ea7465e5_Token& _86635_error_token) {
	if (_86614_src == nullptr) {
		this->self->_method_push_err(_86635_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_86549_dest->_method_to_str()),jule::Any(_86614_src->_method_to_str())}));
		return false;
	}
	if (_86614_src->_method_tup() != nullptr) {
		this->self->_method_push_err(_86635_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_86549_dest->_method_to_str()),jule::Any(_86614_src->_method_to_str())}));
		return false;
	}
	_1eba534e4_TypeCompatibilityChecker _88017_tcc = _1eba534e4_TypeCompatibilityChecker(this->self,_86549_dest,_86614_src,_86635_error_token);
	if (_88017_tcc._method_check()) {
		return true;
	}
	this->self->_method_push_err(_86635_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_86549_dest->_method_to_str()),jule::Any(_86614_src->_method_to_str())}));
	return false;
}



inline jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_Sema::_method_build_non_generic_type_kind(jule::Ptr<_1ea6ee955_TypeDecl>& _90152_ast,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>& _90214_generics) {
	jule::Ptr<_1ec1c55b1_TypeChecker> _90317_tc = jule::new_struct<_1ec1c55b1_TypeChecker>(new( std::nothrow ) _1ec1c55b1_TypeChecker(this->self,this->self,jule::Ptr<_1ec1c55b1_Referencer>(),_1ea7465e5_Token(),_90214_generics,jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>(),jule::Bool(),jule::Bool()));
	return _90317_tc->_method_check_decl(_90152_ast);
}



inline void _1eb9ed0d7_Sema::_method_build_fn_non_generic_type_kinds(jule::Ptr<_1eb627195_FnIns>& _91156_f) {
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _91217_generics = nullptr;
	if (_91156_f->_field_decl->_method_is_method()) {
		_91217_generics=jule::append(_91156_f->_field_decl->_field_generics,_91156_f->_field_decl->_field_owner->_field_generics);
	} else {
		_91217_generics=_91156_f->_field_decl->_field_generics;
	}
	{
		auto &expr = _91156_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4804536944:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> _1eb9ed0d7_p = *it;
			{
				if ((!(_1eb9ed0d7_p->_field_decl->_method_is_self()))) {
					_1eb9ed0d7_p->_field_kind=this->self->_method_build_non_generic_type_kind(_1eb9ed0d7_p->_field_decl->_field_kind->_field_decl,_91217_generics);
				}
			}
			_iter_next_4804536944:;
			++it;
			goto _iter_begin_4804536944;
		}
		_iter_end_4804536944:;
	}
	if ((!(_91156_f->_field_decl->_method_is_void()))) {
		_91156_f->_field_result=this->self->_method_build_non_generic_type_kind(_91156_f->_field_decl->_field_result->_field_kind->_field_decl,_91217_generics);
	}
}



inline jule::Ptr<_1eb627195_FnIns> _1eb9ed0d7_Sema::_method_get_trait_check_fn_kind(jule::Ptr<_1eb627195_Fn>& _92948_f) {
	jule::Ptr<_1eb627195_FnIns> _93017_ins = _92948_f->_method_instance_force();
	this->self->_method_build_fn_non_generic_type_kinds(_93017_ins);
	return _93017_ins;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_reload_fn_ins_types(jule::Ptr<_1eb627195_FnIns>& _93544_f) {
	jule::Bool _93557_ok = jule::Bool();
	if (_93544_f->_method_is_builtin() || _93544_f->_method_is_anon()) {
		_93557_ok = true;
		return _93557_ok;
	}
	jule::Ptr<_1eb9ed0d7_Sema> _94017_sema = _93544_f->_field_decl->_field_sema;
	jule::Ptr<_1ebcb6081_SymbolTable> _94217_old = _93544_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_93544_f->_field_decl->_field_sema->_method_set_current_file(_94217_old);
	});
	jule::Ptr<_1ebcb6081_SymbolTable> _94417_file = _1eb9ed0d7_find_file(_93544_f->_field_decl->_field_sema->_field_files,_93544_f->_field_decl->_field_token._field_file);
	if (_94417_file != nullptr) {
		_93544_f->_field_decl->_field_sema->_method_set_current_file(_94417_file);
	}
	jule::I64 _94917_size = _93544_f->_field_generics.len();
	if ((_93544_f->_field_decl != nullptr) && (_93544_f->_field_decl->_field_owner != nullptr)) {
		_94917_size+=static_cast<jule::I64>(_93544_f->_field_decl->_field_owner->_field_generics.len());
	}
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _95417_generics = jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>::alloc(0LL,_94917_size);
	{
		auto &expr = _93544_f->_field_generics;
		auto it = expr.begin();
		_iter_begin_4804562112:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_g = *it;
			{
				_95417_generics.push(jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1ea7465e5_Token(),_93544_f->_field_decl->_field_generics[_1eb9ed0d7_i]->_field_ident,jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_1eb9ed0d7_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_4804562112:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4804562112;
		}
		_iter_end_4804562112:;
	}
	if ((_93544_f->_field_decl != nullptr) && (_93544_f->_field_decl->_field_owner != nullptr)) {
		jule::Ptr<_1eb29bdd6_StructIns> _96621_owner = _93544_f->_field_owner;
		{
			auto &expr = _96621_owner->_field_generics;
			auto it = expr.begin();
			_iter_begin_4804564256:;
			if (it != expr.end()) {
				jule::Int _1eb9ed0d7_i = it - expr.begin();
				jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_g = *it;
				{
					_95417_generics.push(jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1ea7465e5_Token(),_96621_owner->_field_decl->_field_generics[_1eb9ed0d7_i]->_field_ident,jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_1eb9ed0d7_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_4804564256:;
				++it;
				_1eb9ed0d7_i++;
				goto _iter_begin_4804564256;
			}
			_iter_end_4804564256:;
		}
	}
	_93557_ok=true;
	{
		auto &expr = _93544_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4804559248:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> _1eb9ed0d7_p = *it;
			{
				if ((!(_1eb9ed0d7_p->_field_decl->_method_is_self()))) {
					_1eb9ed0d7_p->_field_kind=_94017_sema->_method_build_type_with_generics(_1eb9ed0d7_p->_field_decl->_field_kind->_field_decl,_95417_generics);
					if (_1eb9ed0d7_p->_field_kind != nullptr) {
						_1eb9ed0d7_p->_field_kind->_field_variadic=_1eb9ed0d7_p->_field_decl->_field_variadic;
						if (_1eb9ed0d7_p->_field_decl->_field_reference && (!(_1ec1c55b1_is_valid_for_ref(_1eb9ed0d7_p->_field_kind)))) {
							this->self->_method_push_err(_1eb9ed0d7_p->_field_decl->_field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_p->_field_kind->_method_to_str())}));
						}
					} else {
						_93557_ok=false;
					}
				}
			}
			_iter_next_4804559248:;
			++it;
			goto _iter_begin_4804559248;
		}
		_iter_end_4804559248:;
	}
	if ((!(_93544_f->_field_decl->_method_is_void()))) {
		_93544_f->_field_result=_94017_sema->_method_build_type_with_generics(_93544_f->_field_decl->_field_result->_field_kind->_field_decl,_95417_generics);
		_93557_ok=(_93544_f->_field_result != nullptr) && _93557_ok;
	}
	if (_94017_sema != this->self) {
		this->self->_field_errors=jule::append(this->self->_field_errors,_94017_sema->_field_errors);
		_94017_sema->_field_errors=nullptr;
	}
	return _93557_ok;
}



inline void _1eb9ed0d7_Sema::_method_check_ref_validity_for_init_expr(jule::Bool _100552_left_mut,jule::Ptr<_1ebcce31e_Data>& _100569_d,_1ea7465e5_Token& _100584_error_token) {
	{
		auto &_match_expr{ _100569_d->_field_model };
		if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4804601984:;
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>>()) {
			_case_begin_4804601200:;
			{
				jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel> _101117_model = _100569_d->_field_model.operator jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>();
				if ((!(_1eb9ed0d7_is_valid_model_for_ref(_101117_model->_field_expr)))) {
					this->self->_method_push_err(_100584_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(_101117_model->_field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>>()) {
			_case_begin_4804601296:;
			{
				jule::Ptr<_1eb7ccdea_StructSubIdentExprModel> _101717_model = _100569_d->_field_model.operator jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>();
				if ((!(_1eb9ed0d7_is_valid_model_for_ref(_101717_model->_field_expr)))) {
					this->self->_method_push_err(_100584_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(_101717_model->_field_field->_field_decl->_field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_CommonSubIdentExprModel>>()) {
			_case_begin_4804601408:;
			{
				this->self->_method_push_err(_100584_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_UnaryExprModel>>()) {
			_case_begin_4804601520:;
			{
				jule::Ptr<_1eb7ccdea_UnaryExprModel> _102717_unary = _100569_d->_field_model.operator jule::Ptr<_1eb7ccdea_UnaryExprModel>();
				if (_102717_unary->_field_op == jule::Str("*", 1)) {
					goto _match_end_4804600896;
				}
				goto _case_begin_4804600608;
			}
		}
		else {
			_case_begin_4804600608:;
			{
				this->self->_method_push_err(_100584_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
			}
		}
		_match_end_4804600896:;
	}
	if (_100552_left_mut && (!(_100569_d->_field_mutable))) {
		this->self->_method_push_err(_100584_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
	}
}



inline void _1eb9ed0d7_Sema::_method_check_validity_for_init_expr(jule::Bool _104348_left_mut,jule::Bool _104364_left_ref,jule::Ptr<_1ec1c55b1_TypeKind>& _104410_left_kind,jule::Ptr<_1ebcce31e_Data>& _104437_d,_1ea7465e5_Token& _104452_error_token) {
	if ((_104348_left_mut && (!(_104437_d->_field_mutable))) && _104437_d->_field_kind->_method_mutable()) {
		this->self->_method_push_err(_104452_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
	}
	if (_104364_left_ref) {
		this->self->_method_check_ref_validity_for_init_expr(_104348_left_mut,_104437_d,_104452_error_token);
	}
	jule::Ptr<_1eba534e4_AssignTypeChecker> _105217_atc = jule::new_struct<_1eba534e4_AssignTypeChecker>(new( std::nothrow ) _1eba534e4_AssignTypeChecker(this->self,jule::Ptr<_1ec1c55b1_TypeKind>(),_104437_d,_104452_error_token));
	_105217_atc->_method_check_validity();
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_type_alias_decl_kind(jule::Ptr<_1ec1c55b1_TypeAlias>& _106051_ta,jule::Trait<_1ec2d8be1_Lookup> _106071_l) {
	jule::Bool _106084_ok = jule::Bool();
	jule::Ptr<_1ebcb6081_SymbolTable> _106117_old = this->self->_field_file;
	__JULE_DEFER({
		this->self->_method_set_current_file(_106117_old);
	});
	jule::Ptr<_1ebcb6081_SymbolTable> _106317_file = _1eb9ed0d7_find_file(this->self->_field_files,_106051_ta->_field_token._field_file);
	if (_106317_file != nullptr) {
		this->self->_method_set_current_file(_106317_file);
	}
	_106084_ok=this->self->_method_check_type_with_refers(_106051_ta->_field_kind,_106071_l,jule::new_struct<_1ec1c55b1_Referencer>(new( std::nothrow ) _1ec1c55b1_Referencer(_106051_ta->_field_ident,jule::Any(_106051_ta),(&(_106051_ta->_field_refers)))));
	if ((_106084_ok && (_106051_ta->_field_kind->_field_kind->_method_arr() != nullptr)) && _106051_ta->_field_kind->_field_kind->_method_arr()->_field_auto) {
		this->self->_method_push_err(_106051_ta->_field_kind->_field_decl->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_106084_ok=false;
	}
	return _106084_ok;
}



inline void _1eb9ed0d7_Sema::_method_check_type_alias_decl(jule::Ptr<_1ec1c55b1_TypeAlias>& _108046_ta,jule::Trait<_1ec2d8be1_Lookup> _108066_l) {
	if (_1ea7465e5_is_ignore_ident(_108046_ta->_field_ident)) {
		this->self->_method_push_err(_108046_ta->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	this->self->_method_check_type_alias_decl_kind(_108046_ta,_108066_l);
}



inline void _1eb9ed0d7_Sema::_method_check_type_alias_decl_dup(jule::Ptr<_1ec1c55b1_TypeAlias>& _108850_ta) {
	if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_108850_ta),_108850_ta->_field_ident,_108850_ta->_field_cpp_linked)) {
		this->self->_method_push_err(_108850_ta->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_108850_ta->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	this->self->_method_check_type_alias_decl_kind(_108850_ta,this->self);
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _109744_ok = jule::Bool();
	{
		auto &expr = this->self->_field_file->_field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4804651760:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeAlias> _1eb9ed0d7_ta = *it;
			{
				this->self->_method_check_type_alias_decl_dup(_1eb9ed0d7_ta);
				if (this->self->_field_errors.len() > 0LL) {
					_109744_ok = false;
					return _109744_ok;
				}
			}
			_iter_next_4804651760:;
			++it;
			goto _iter_begin_4804651760;
		}
		_iter_end_4804651760:;
	}
	_109744_ok = true;
	return _109744_ok;
}



inline void _1eb9ed0d7_Sema::_method_check_enum_items_dup(jule::Ptr<_1eb7c7e7d_Enum> _110939_e) {
	{
		auto &expr = _110939_e->_field_items;
		auto it = expr.begin();
		_iter_begin_4804656528:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_EnumItem> &_1eb9ed0d7_item = *it;
			{
				if (_1ea7465e5_is_ignore_ident(_1eb9ed0d7_item->_field_ident)) {
					(*this)._method_push_err(_1eb9ed0d7_item->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = _110939_e->_field_items;
						auto it = expr.begin();
						_iter_begin_4804660928:;
						if (it != expr.end()) {
							jule::Ptr<_1eb7c7e7d_EnumItem> &_1eb9ed0d7_citem = *it;
							{
								if (_1eb9ed0d7_item == _1eb9ed0d7_citem) {
									goto _iter_end_4804660928;
								} else if (_1eb9ed0d7_item->_field_ident == _1eb9ed0d7_citem->_field_ident) {
									(*this)._method_push_err(_1eb9ed0d7_item->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_item->_field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_4804660928;
								}
							}
							_iter_next_4804660928:;
							++it;
							goto _iter_begin_4804660928;
						}
						_iter_end_4804660928:;
					}
				}
			}
			_iter_next_4804656528:;
			++it;
			goto _iter_begin_4804656528;
		}
		_iter_end_4804656528:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_enum_items_str(jule::Ptr<_1eb7c7e7d_Enum>& _112745_e) {
	{
		auto &expr = _112745_e->_field_items;
		auto it = expr.begin();
		_iter_begin_4804661744:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_EnumItem> _1eb9ed0d7_item = *it;
			{
				if (_1eb9ed0d7_item->_method_auto_expr()) {
					_1eb9ed0d7_item->_field_value=jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(jule::Ptr<_1ea6ee955_Expr>(),jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ec3e4b65_Const::_static_method_new_str(_1eb9ed0d7_item->_field_ident)))));
					_1eb9ed0d7_item->_field_value->_field_data->_field_model=jule::Any(_1eb9ed0d7_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ptr<_1ebcce31e_Data> _113725_d = this->self->_method_eval(this->self)->_method_eval_expr(_1eb9ed0d7_item->_field_value->_field_expr);
					if (_113725_d == nullptr) {
						goto _iter_next_4804661744;
					}
					if ((!(_113725_d->_method_is_const()))) {
						this->self->_method_push_err(_1eb9ed0d7_item->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					this->self->_method_check_assign_type(false,_112745_e->_field_kind->_field_kind,_113725_d,_1eb9ed0d7_item->_field_token);
					_1eb9ed0d7_item->_field_value->_field_data=_113725_d;
				}
			}
			_iter_next_4804661744:;
			++it;
			goto _iter_begin_4804661744;
		}
		_iter_end_4804661744:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_enum_items_int(jule::Ptr<_1eb7c7e7d_Enum>& _115245_e) {
	jule::U64 _115317_max = static_cast<jule::U64>(_1ec3e8d67_max(_115245_e->_field_kind->_field_kind->_method_prim()->_method_to_str()));
	{
		auto &expr = _115245_e->_field_items;
		auto it = expr.begin();
		_iter_begin_4804680192:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			jule::Ptr<_1eb7c7e7d_EnumItem> _1eb9ed0d7_item = *it;
			{
				if (_115317_max == 0LL) {
					this->self->_method_push_err(_1eb9ed0d7_item->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_115317_max)--;
				}
				if (_1eb9ed0d7_item->_method_auto_expr()) {
					_1eb9ed0d7_item->_field_value=jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(jule::Ptr<_1ea6ee955_Expr>(),jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ec3e4b65_Const::_static_method_new_u64(static_cast<jule::U64>(_115317_max - (_115317_max - static_cast<jule::U64>(_1eb9ed0d7_i))))))));
					_1eb9ed0d7_item->_field_value->_field_data->_field_model=jule::Any(_1eb9ed0d7_item->_field_value->_field_data->_field_constant);
				} else {
					jule::Ptr<_1ebcce31e_Data> _116925_d = this->self->_method_eval(this->self)->_method_eval_expr(_1eb9ed0d7_item->_field_value->_field_expr);
					if (_116925_d == nullptr) {
						goto _iter_next_4804680192;
					}
					if ((!(_116925_d->_method_is_const()))) {
						this->self->_method_push_err(_1eb9ed0d7_item->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					this->self->_method_check_assign_type(false,_115245_e->_field_kind->_field_kind,_116925_d,_1eb9ed0d7_item->_field_token);
					_1eb9ed0d7_item->_field_value->_field_data=_116925_d;
				}
			}
			_iter_next_4804680192:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4804680192;
		}
		_iter_end_4804680192:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_enum_decl(jule::Ptr<_1eb7c7e7d_Enum>& _118440_e) {
	if (_1ea7465e5_is_ignore_ident(_118440_e->_field_ident)) {
		this->self->_method_push_err(_118440_e->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_118440_e),_118440_e->_field_ident,false)) {
		this->self->_method_push_err(_118440_e->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_118440_e->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if (_118440_e->_field_items.len() == 0LL) {
		this->self->_method_push_err(_118440_e->_field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>({jule::Any(_118440_e->_field_ident)}));
	}
	this->self->_method_check_enum_items_dup(_118440_e);
	if (_118440_e->_field_kind != nullptr) {
		if ((!(this->self->_method_check_type(_118440_e->_field_kind,this->self)))) {
			return;
		}
	} else {
		_118440_e->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ptr<_1ec1c55b1_Prim> _121117_t = _118440_e->_field_kind->_field_kind->_method_prim();
	if (_121117_t == nullptr) {
		this->self->_method_push_err(_118440_e->_field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;
	}
	{
		if (_121117_t->_method_is_str()) {
			_case_begin_4804710480:;
			{
				this->self->_method_check_enum_items_str(_118440_e);
			}
		}
		else if (_1ec4784ce_is_int(_121117_t->_method_to_str())) {
			_case_begin_4804709744:;
			{
				this->self->_method_check_enum_items_int(_118440_e);
			}
		}
		else {
			_case_begin_4804703312:;
			{
				this->self->_method_push_err(_118440_e->_field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_4804707488:;
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_enum_decls(void) {
	jule::Bool _123138_ok = jule::Bool();
	{
		auto &expr = this->self->_field_file->_field_enums;
		auto it = expr.begin();
		_iter_begin_4804715776:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_Enum> _1eb9ed0d7_e = *it;
			{
				this->self->_method_check_enum_decl(_1eb9ed0d7_e);
				if (this->self->_field_errors.len() > 0LL) {
					_123138_ok = false;
					return _123138_ok;
				}
			}
			_iter_next_4804715776:;
			++it;
			goto _iter_begin_4804715776;
		}
		_iter_end_4804715776:;
	}
	_123138_ok = true;
	return _123138_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_decl_generics(jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>& _124339_generics) {
	jule::Bool _124372_ok = jule::Bool();
	_124372_ok=true;
	{
		auto &expr = _124339_generics;
		auto it = expr.begin();
		_iter_begin_4804722048:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			jule::Ptr<_1ea6ee955_GenericDecl> &_1eb9ed0d7_g = *it;
			{
				if (_1ea7465e5_is_ignore_ident(_1eb9ed0d7_g->_field_ident)) {
					(*this)._method_push_err(_1eb9ed0d7_g->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_124372_ok=false;
					goto _iter_next_4804722048;
				}
				_julec_label_duplication_lookup:;
				{
					auto &expr = _124339_generics;
					auto it = expr.begin();
					_iter_begin_4804724064:;
					if (it != expr.end()) {
						jule::Int _1eb9ed0d7_j = it - expr.begin();
						jule::Ptr<_1ea6ee955_GenericDecl> &_1eb9ed0d7_ct = *it;
						{
							{
								if (_1eb9ed0d7_j >= _1eb9ed0d7_i) {
									_case_begin_4804728608:;
									{
										goto _iter_end_4804724064;
									}
								}
								else if (_1eb9ed0d7_g->_field_ident == _1eb9ed0d7_ct->_field_ident) {
									_case_begin_4804728720:;
									{
										(*this)._method_push_err(_1eb9ed0d7_g->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_g->_field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_124372_ok=false;
										goto _iter_end_4804724064;
									}
								}
								_match_end_4804728384:;
							}
						}
						_iter_next_4804724064:;
						++it;
						_1eb9ed0d7_j++;
						goto _iter_begin_4804724064;
					}
					_iter_end_4804724064:;
				}
			}
			_iter_next_4804722048:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4804722048;
		}
		_iter_end_4804722048:;
	}
	return _124372_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_fn_decl_params_dup(jule::Ptr<_1eb627195_Fn>& _127144_f) {
	jule::Bool _127154_ok = jule::Bool();
	_127154_ok=true;
	_julec_label_check:;
	{
		auto &expr = _127144_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4804737088:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			jule::Ptr<_1eb627195_Param> &_1eb9ed0d7_p = *it;
			{
				{
					auto &expr = _127144_f->_field_generics;
					auto it = expr.begin();
					_iter_begin_4804739248:;
					if (it != expr.end()) {
						jule::Ptr<_1ea6ee955_GenericDecl> &_1eb9ed0d7_g = *it;
						{
							if (_1eb9ed0d7_p->_field_ident == _1eb9ed0d7_g->_field_ident) {
								_127154_ok=false;
								(*this)._method_push_err(_1eb9ed0d7_p->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_p->_field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_4804737088;
							}
						}
						_iter_next_4804739248:;
						++it;
						goto _iter_begin_4804739248;
					}
					_iter_end_4804739248:;
				}
				_julec_label_params_lookup:;
				{
					auto &expr = _127144_f->_field_params;
					auto it = expr.begin();
					_iter_begin_4804741120:;
					if (it != expr.end()) {
						jule::Int _1eb9ed0d7_j = it - expr.begin();
						jule::Ptr<_1eb627195_Param> &_1eb9ed0d7_jp = *it;
						{
							{
								if (_1eb9ed0d7_j >= _1eb9ed0d7_i) {
									_case_begin_4804746064:;
									{
										goto _iter_end_4804741120;
									}
								}
								else if (_1ea7465e5_is_anon_ident(_1eb9ed0d7_p->_field_ident) || _1ea7465e5_is_anon_ident(_1eb9ed0d7_jp->_field_ident)) {
									_case_begin_4804746176:;
									{
										goto _iter_end_4804741120;
									}
								}
								else if (_1eb9ed0d7_p->_field_ident == _1eb9ed0d7_jp->_field_ident) {
									_case_begin_4804746288:;
									{
										_127154_ok=false;
										(*this)._method_push_err(_1eb9ed0d7_p->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_p->_field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_4804737088;
									}
								}
								_match_end_4804745824:;
							}
						}
						_iter_next_4804741120:;
						++it;
						_1eb9ed0d7_j++;
						goto _iter_begin_4804741120;
					}
					_iter_end_4804741120:;
				}
			}
			_iter_next_4804737088:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4804737088;
		}
		_iter_end_4804737088:;
	}
	return _127154_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_fn_decl_result_dup(jule::Ptr<_1eb627195_Fn>& _130744_f) {
	jule::Bool _130754_ok = jule::Bool();
	_130754_ok=true;
	if (_130744_f->_method_is_void()) {
		return _130754_ok;
	}
	{
		auto &expr = _130744_f->_field_result->_field_idents;
		auto it = expr.begin();
		_iter_begin_4804756416:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			_1ea7465e5_Token &_1eb9ed0d7_v = *it;
			{
				if (_1ea7465e5_is_ignore_ident(_1eb9ed0d7_v._field_kind)) {
					goto _iter_next_4804756416;
				}
				{
					auto &expr = _130744_f->_field_generics;
					auto it = expr.begin();
					_iter_begin_4804758464:;
					if (it != expr.end()) {
						jule::Ptr<_1ea6ee955_GenericDecl> &_1eb9ed0d7_g = *it;
						{
							if (_1eb9ed0d7_v._field_kind == _1eb9ed0d7_g->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4804758464:;
						++it;
						goto _iter_begin_4804758464;
					}
					_iter_end_4804758464:;
				}
				{
					auto &expr = _130744_f->_field_params;
					auto it = expr.begin();
					_iter_begin_4804762240:;
					if (it != expr.end()) {
						jule::Ptr<_1eb627195_Param> &_1eb9ed0d7_p = *it;
						{
							if (_1eb9ed0d7_v._field_kind == _1eb9ed0d7_p->_field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4804762240:;
						++it;
						goto _iter_begin_4804762240;
					}
					_iter_end_4804762240:;
				}
				_julec_label_itself_lookup:;
				{
					auto &expr = _130744_f->_field_result->_field_idents;
					auto it = expr.begin();
					_iter_begin_4804766016:;
					if (it != expr.end()) {
						jule::Int _1eb9ed0d7_j = it - expr.begin();
						_1ea7465e5_Token &_1eb9ed0d7_jv = *it;
						{
							{
								if (_1eb9ed0d7_j >= _1eb9ed0d7_i) {
									_case_begin_4804768304:;
									{
										goto _iter_end_4804766016;
									}
								}
								else if (_1eb9ed0d7_jv._field_kind == _1eb9ed0d7_v._field_kind) {
									_case_begin_4804768416:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_4804768080:;
							}
						}
						_iter_next_4804766016:;
						++it;
						_1eb9ed0d7_j++;
						goto _iter_begin_4804766016;
					}
					_iter_end_4804766016:;
				}
				goto _iter_next_4804756416;
				_julec_label_exist:;
				(*this)._method_push_err(_1eb9ed0d7_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_130754_ok=false;
			}
			_iter_next_4804756416:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4804756416;
		}
		_iter_end_4804756416:;
	}
	return _130754_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_fn_decl_types(jule::Ptr<_1eb627195_Fn>& _135644_f) {
	jule::Bool _135654_ok = jule::Bool();
	_135654_ok=true;
	jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>> _135917_generics = _135644_f->_field_generics;
	if (_135644_f->_field_owner != nullptr) {
		_135917_generics=jule::append(_135917_generics,_135644_f->_field_owner->_field_generics);
	}
	{
		auto &expr = _135644_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4804778832:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Param> _1eb9ed0d7_p = *it;
			{
				if ((!(_1eb9ed0d7_p->_method_is_self()))) {
					jule::Ptr<_1ec1c55b1_TypeKind> _136625_kind = this->self->_method_build_non_generic_type_kind(_1eb9ed0d7_p->_field_kind->_field_decl,_135917_generics);
					_135654_ok=(_136625_kind != nullptr) && _135654_ok;
					_1eb9ed0d7_p->_field_kind->_field_kind=_136625_kind;
				}
			}
			_iter_next_4804778832:;
			++it;
			goto _iter_begin_4804778832;
		}
		_iter_end_4804778832:;
	}
	if ((!(_135644_f->_method_is_void()))) {
		jule::Ptr<_1ec1c55b1_TypeKind> _137321_kind = this->self->_method_build_non_generic_type_kind(_135644_f->_field_result->_field_kind->_field_decl,_135917_generics);
		_135654_ok=(_137321_kind != nullptr) && _135654_ok;
		_135644_f->_field_result->_field_kind->_field_kind=_137321_kind;
	}
	return _135654_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_fn_decl_prototype(jule::Ptr<_1eb627195_Fn>& _138348_f) {
	jule::Bool _138358_ok = jule::Bool();
	if (_138348_f->_field_exceptional && _138348_f->_field_cpp_linked) {
		this->self->_method_push_err(_138348_f->_field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		_138358_ok = false;
		return _138358_ok;
	}
	if (_138348_f->_field_exceptional) {
		if (_138348_f->_method_is_entry_point()) {
			this->self->_method_push_err(_138348_f->_field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if (_138348_f->_method_is_init()) {
			this->self->_method_push_err(_138348_f->_field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		}
	}
	{
		if ((!(this->self->_method_check_decl_generics(_138348_f->_field_generics)))) {
			_case_begin_4804797072:;
			{
				_138358_ok = false;
				return _138358_ok;
			}
		}
		else if ((!(this->self->_method_check_fn_decl_params_dup(_138348_f)))) {
			_case_begin_4804797232:;
			{
				_138358_ok = false;
				return _138358_ok;
			}
		}
		else if ((!(this->self->_method_check_fn_decl_result_dup(_138348_f)))) {
			_case_begin_4804797328:;
			{
				_138358_ok = false;
				return _138358_ok;
			}
		}
		else if ((!(this->self->_method_check_fn_decl_types(_138348_f)))) {
			_case_begin_4804796592:;
			{
				_138358_ok = false;
				return _138358_ok;
			}
		}
		else {
			_case_begin_4804789696:;
			{
				_138358_ok = true;
				return _138358_ok;
			}
		}
		_match_end_4804789456:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_trait_decl_method(jule::Ptr<_1eb627195_Fn>& _140648_f) {
	if (_1ea7465e5_is_ignore_ident(_140648_f->_field_ident)) {
		this->self->_method_push_err(_140648_f->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	this->self->_method_check_fn_decl_prototype(_140648_f);
	_140648_f->_field_sema=this->self;
}



inline void _1eb9ed0d7_Sema::_method_check_trait_decl_methods(jule::Ptr<_1eb7c68e9_Trait>& _141549_t) {
	{
		auto &expr = _141549_t->_field_methods;
		auto it = expr.begin();
		_iter_begin_4804808560:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_f = *it;
			{
				this->self->_method_check_trait_decl_method(_1eb9ed0d7_f);
				_141549_t->_field_mutable=_141549_t->_field_mutable || _1eb9ed0d7_f->_field_params[0LL]->_field_mutable;
				if (this->self->_field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto &expr = _141549_t->_field_methods;
					auto it = expr.begin();
					_iter_begin_4804813584:;
					if (it != expr.end()) {
						jule::Int _1eb9ed0d7_j = it - expr.begin();
						jule::Ptr<_1eb627195_Fn> &_1eb9ed0d7_jf = *it;
						{
							{
								if (_1eb9ed0d7_j >= _1eb9ed0d7_i) {
									_case_begin_4804816240:;
									{
										goto _iter_end_4804813584;
									}
								}
								else if (_1eb9ed0d7_f->_field_ident == _1eb9ed0d7_jf->_field_ident) {
									_case_begin_4804816352:;
									{
										this->self->_method_push_err(_1eb9ed0d7_f->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_f->_field_ident)}));
										this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_4804813584;
									}
								}
								_match_end_4804816016:;
							}
						}
						_iter_next_4804813584:;
						++it;
						_1eb9ed0d7_j++;
						goto _iter_begin_4804813584;
					}
					_iter_end_4804813584:;
				}
			}
			_iter_next_4804808560:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4804808560;
		}
		_iter_end_4804808560:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_trait_decl(jule::Ptr<_1eb7c68e9_Trait>& _144741_t) {
	if (_1ea7465e5_is_ignore_ident(_144741_t->_field_ident)) {
		this->self->_method_push_err(_144741_t->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_144741_t),_144741_t->_field_ident,false)) {
		this->self->_method_push_err(_144741_t->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_144741_t->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	this->self->_method_check_trait_decl_methods(_144741_t);
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_trait_decls(void) {
	jule::Bool _145939_ok = jule::Bool();
	{
		auto &expr = this->self->_field_file->_field_traits;
		auto it = expr.begin();
		_iter_begin_4804831280:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> _1eb9ed0d7_t = *it;
			{
				this->self->_method_check_trait_decl(_1eb9ed0d7_t);
				if (this->self->_field_errors.len() > 0LL) {
					_145939_ok = false;
					return _145939_ok;
				}
			}
			_iter_next_4804831280:;
			++it;
			goto _iter_begin_4804831280;
		}
		_iter_end_4804831280:;
	}
	_145939_ok = true;
	return _145939_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_trait_impl_methods(jule::Ptr<_1eb7c68e9_Trait>& _147148_base,jule::Ptr<_1eb7d363c_Impl>& _147163_ipl) {
	jule::Bool _147177_ok = jule::Bool();
	_147177_ok=true;
	{
		auto &expr = _147163_ipl->_field_methods;
		auto it = expr.begin();
		_iter_begin_4804837632:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> &_1eb9ed0d7_f = *it;
			{
				if (_147148_base->_method_find_method(_1eb9ed0d7_f->_field_ident) == nullptr) {
					(*this)._method_push_err(_1eb9ed0d7_f->_field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>({jule::Any(_147148_base->_field_ident),jule::Any(_1eb9ed0d7_f->_field_ident)}));
					_147177_ok=false;
				}
			}
			_iter_next_4804837632:;
			++it;
			goto _iter_begin_4804837632;
		}
		_iter_end_4804837632:;
	}
	return _147177_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_impl_to_struct(jule::Ptr<_1eb29bdd6_Struct>& _148239_dest,jule::Ptr<_1eb7d363c_Impl>& _148259_ipl) {
	jule::Bool _148273_ok = jule::Bool();
	_148273_ok=true;
	{
		auto &expr = _148259_ipl->_field_methods;
		auto it = expr.begin();
		_iter_begin_4804845392:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_f = *it;
			{
				if ((_148239_dest->_method_find_method(_1eb9ed0d7_f->_field_ident,_1eb9ed0d7_f->_field_statically) != nullptr) || (_148239_dest->_method_find_field(_1eb9ed0d7_f->_field_ident) != nullptr)) {
					this->self->_method_push_err(_1eb9ed0d7_f->_field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any(_148239_dest->_field_ident),jule::Any(_1eb9ed0d7_f->_field_ident)}));
					_148273_ok=false;
					goto _iter_next_4804845392;
				}
				if ((_148239_dest->_field_generics.len() > 0LL) && (_1eb9ed0d7_f->_field_generics.len() > 0LL)) {
					{
						auto &expr = _1eb9ed0d7_f->_field_generics;
						auto it = expr.begin();
						_iter_begin_4804851152:;
						if (it != expr.end()) {
							jule::Ptr<_1ea6ee955_GenericDecl> &_1eb9ed0d7_fg = *it;
							{
								{
									auto &expr = _148239_dest->_field_generics;
									auto it = expr.begin();
									_iter_begin_4804852704:;
									if (it != expr.end()) {
										jule::Ptr<_1ea6ee955_GenericDecl> &_1eb9ed0d7_dg = *it;
										{
											if (_1eb9ed0d7_fg->_field_ident == _1eb9ed0d7_dg->_field_ident) {
												this->self->_method_push_err(_1eb9ed0d7_fg->_field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_148273_ok=false;
											}
										}
										_iter_next_4804852704:;
										++it;
										goto _iter_begin_4804852704;
									}
									_iter_end_4804852704:;
								}
							}
							_iter_next_4804851152:;
							++it;
							goto _iter_begin_4804851152;
						}
						_iter_end_4804851152:;
					}
				}
				this->self->_method_check_directives(_1eb9ed0d7_f->_field_directives,jule::Any(_1eb9ed0d7_f));
				_1eb9ed0d7_f->_field_sema=this->self;
				_1eb9ed0d7_f->_field_owner=_148239_dest;
				_148239_dest->_field_methods = jule::alloc_for_append(_148239_dest->_field_methods,1);_148239_dest->_field_methods.push(_1eb9ed0d7_f);
			}
			_iter_next_4804845392:;
			++it;
			goto _iter_begin_4804845392;
		}
		_iter_end_4804845392:;
	}
	{
		auto &expr = _148259_ipl->_field_statics;
		auto it = expr.begin();
		_iter_begin_4804850336:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1eb9ed0d7_v = *it;
			{
				
				if ((_148239_dest->_method_find_method(_1eb9ed0d7_v->_field_ident,true) != nullptr) || (_148239_dest->_method_find_static(_1eb9ed0d7_v->_field_ident) != nullptr)) {
					this->self->_method_push_err(_1eb9ed0d7_v->_field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any(_148239_dest->_field_ident),jule::Any(_1eb9ed0d7_v->_field_ident)}));
					_148273_ok=false;
					goto _iter_next_4804850336;
				}
				this->self->_method_check_var_decl(_1eb9ed0d7_v,this->self);
				this->self->_method_check_type_var(_1eb9ed0d7_v,this->self);
				_148239_dest->_field_statics = jule::alloc_for_append(_148239_dest->_field_statics,1);_148239_dest->_field_statics.push(_1eb9ed0d7_v);
			}
			_iter_next_4804850336:;
			++it;
			goto _iter_begin_4804850336;
		}
		_iter_end_4804850336:;
	}
	return _148273_ok;
}



inline void _1eb9ed0d7_Sema::_method_impl_trait(jule::Ptr<_1eb7d363c_Impl>& _152735_decl) {
	jule::Ptr<_1eb7c68e9_Trait> _152817_base = this->self->_method_find_trait(_152735_decl->_field_base._field_kind);
	if (_152817_base == nullptr) {
		_152817_base=_1ec2ee113_find_builtin_trait(_152735_decl->_field_base._field_kind);
	}
	if (_152817_base == nullptr) {
		this->self->_method_push_err(_152735_decl->_field_base,jule::Str("any valid base definition is not exist in this identifier: @", 60),jule::Slice<jule::Any>({jule::Any(_152735_decl->_field_base._field_kind)}));
		return;
	}
	
	jule::Ptr<_1eb29bdd6_Struct> _154117_dest = this->self->_method_find_struct(_152735_decl->_field_dest._field_kind,false);
	if (_154117_dest == nullptr) {
		this->self->_method_push_err(_152735_decl->_field_dest,jule::Str("any valid destination definition is not exist in this identifier: @", 67),jule::Slice<jule::Any>({jule::Any(_152735_decl->_field_dest._field_kind)}));
		return;
	}
	if (_154117_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_152735_decl->_field_dest,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	_152817_base->_field_implemented = jule::alloc_for_append(_152817_base->_field_implemented,1);_152817_base->_field_implemented.push(_154117_dest);
	_154117_dest->_field_implements = jule::alloc_for_append(_154117_dest->_field_implements,1);_154117_dest->_field_implements.push(_152817_base);
	if (_152735_decl->_field_statics.len() > 0LL) {
		this->self->_method_push_err(_152735_decl->_field_statics[0LL]->_field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	}
	{
		if ((!(this->self->_method_check_trait_impl_methods(_152817_base,_152735_decl)))) {
			_case_begin_4804880400:;
			{
				return;
			}
		}
		else if ((!(this->self->_method_impl_to_struct(_154117_dest,_152735_decl)))) {
			_case_begin_4804881584:;
			{
				return;
			}
		}
		_match_end_4804878368:;
	}
}



inline void _1eb9ed0d7_Sema::_method_impl_struct(jule::Ptr<_1eb7d363c_Impl>& _156536_decl) {
	
	jule::Ptr<_1eb29bdd6_Struct> _157017_dest = this->self->_method_find_struct(_156536_decl->_field_dest._field_kind,false);
	if (_157017_dest == nullptr) {
		this->self->_method_push_err(_156536_decl->_field_dest,jule::Str("any valid destination definition is not exist in this identifier: @", 67),jule::Slice<jule::Any>({jule::Any(_156536_decl->_field_dest._field_kind)}));
		return;
	}
	if (_157017_dest->_field_token._field_file->_method_dir() != this->self->_field_file->_field_file->_method_dir()) {
		this->self->_method_push_err(_156536_decl->_field_dest,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	{
		if ((!(this->self->_method_impl_to_struct(_157017_dest,_156536_decl)))) {
			_case_begin_4804888752:;
			{
				return;
			}
		}
		_match_end_4804893504:;
	}
}



inline void _1eb9ed0d7_Sema::_method_impl_impl(jule::Ptr<_1eb7d363c_Impl>& _158834_decl) {
	{
		if (_158834_decl->_method_is_trait_impl()) {
			_case_begin_4804896448:;
			{
				this->self->_method_impl_trait(_158834_decl);
			}
		}
		else if (_158834_decl->_method_is_struct_impl()) {
			_case_begin_4804896560:;
			{
				this->self->_method_impl_struct(_158834_decl);
			}
		}
		_match_end_4804896224:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_var_decl(jule::Ptr<_1eba533d4_Var>& _159739_decl,jule::Trait<_1ec2d8be1_Lookup> _159755_l) {
	if (_1ea7465e5_is_ignore_ident(_159739_decl->_field_ident)) {
		this->self->_method_push_err(_159739_decl->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	if (_159739_decl->_method_is_type_inferred()) {
		if ((!(_159739_decl->_method_is_initialized()))) {
			this->self->_method_push_err(_159739_decl->_field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		}
	} else {
		this->self->_method_check_type(_159739_decl->_field_kind,_159755_l);
	}
	if (_159739_decl->_field_constant && _159739_decl->_field_reference) {
		this->self->_method_push_err(_159739_decl->_field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	}
	if ((!(_159739_decl->_method_is_initialized()))) {
		if (_159739_decl->_field_constant) {
			this->self->_method_push_err(_159739_decl->_field_token,jule::Str("constant variable must have initialize expression", 49),jule::Slice<jule::Any>());
		}
		if (_159739_decl->_field_statically) {
			this->self->_method_push_err(_159739_decl->_field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		}
		if (_159739_decl->_field_reference) {
			this->self->_method_push_err(_159739_decl->_field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		}
	}
}



inline void _1eb9ed0d7_Sema::_method_check_global_var_decl(jule::Ptr<_1eba533d4_Var>& _163146_decl) {
	if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_163146_decl),_163146_decl->_field_ident,_163146_decl->_field_cpp_linked)) {
		this->self->_method_push_err(_163146_decl->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_163146_decl->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if (_163146_decl->_field_cpp_linked && _163146_decl->_field_constant) {
		this->self->_method_push_err(_163146_decl->_field_token,jule::Str("cpp linked variables cannot constant", 36),jule::Slice<jule::Any>());
	}
	if (((!(_163146_decl->_field_cpp_linked)) && (!(_163146_decl->_field_constant))) && (!(_163146_decl->_field_statically))) {
		this->self->_method_push_err(_163146_decl->_field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		this->self->_method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	}
	this->self->_method_check_directives(_163146_decl->_field_directives,jule::Any(_163146_decl));
	this->self->_method_check_var_decl(_163146_decl,this->self);
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_global_decls(void) {
	jule::Bool _165040_ok = jule::Bool();
	{
		auto &expr = this->self->_field_file->_field_vars;
		auto it = expr.begin();
		_iter_begin_4804929296:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1eb9ed0d7_decl = *it;
			{
				this->self->_method_check_global_var_decl(_1eb9ed0d7_decl);
				if (this->self->_field_errors.len() > 0LL) {
					_165040_ok = false;
					return _165040_ok;
				}
			}
			_iter_next_4804929296:;
			++it;
			goto _iter_begin_4804929296;
		}
		_iter_end_4804929296:;
	}
	_165040_ok = true;
	return _165040_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_trait_impl(jule::Ptr<_1eb29bdd6_Struct>& _166248_strct,jule::Ptr<_1eb7c68e9_Trait>& _166269_trt) {
	jule::Bool _166284_ok = jule::Bool();
	{
		auto &expr = _166269_trt->_field_methods;
		auto it = expr.begin();
		_iter_begin_4804933696:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_tf = *it;
			{
				jule::Bool _166421_exist = false;
				jule::Ptr<_1eb627195_Fn> _166521_sf = _166248_strct->_method_find_method(_1eb9ed0d7_tf->_field_ident,_1eb9ed0d7_tf->_field_statically);
				jule::Ptr<_1eb627195_FnIns> _166617_tf_k = this->self->_method_get_trait_check_fn_kind(_1eb9ed0d7_tf);
				if (_166521_sf != nullptr) {
					jule::Ptr<_1eb627195_FnIns> _166825_sf_k = this->self->_method_get_trait_check_fn_kind(_166521_sf);
					_166421_exist=((_166617_tf_k->_field_decl->_field_public == _166825_sf_k->_field_decl->_field_public) && (_166617_tf_k->_field_decl->_field_ident == _166825_sf_k->_field_decl->_field_ident)) && _166617_tf_k->_method_equals(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_166825_sf_k)));
				}
				if (_166421_exist) {
					jule::Ptr<_1ea6ee955_Directive> _167621_d = _1ebcce31e_find_directive(_166521_sf->_field_directives,jule::Str("deprecated", 10));
					if (_167621_d != nullptr) {
						this->self->_method_push_err(_167621_d->_field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					}
					_166284_ok=false;
				} else {
					
					jule::Str _168325_s = _166617_tf_k->_method_get_kind_str(true);
					if (_1eb9ed0d7_tf->_field_public) {
						_168325_s=jule::Str("pub ", 4) + _168325_s;
					}
					this->self->_method_push_err(_166248_strct->_field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>({jule::Any(_166269_trt->_field_ident),jule::Any(_168325_s)}));
					_166284_ok=false;
				}
			}
			_iter_next_4804933696:;
			++it;
			goto _iter_begin_4804933696;
		}
		_iter_end_4804933696:;
	}
	return _166284_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_impls(jule::Ptr<_1eb29bdd6_Struct>& _169443_s) {
	jule::Bool _169457_ok = jule::Bool();
	_169457_ok=true;
	{
		auto &expr = _169443_s->_field_implements;
		auto it = expr.begin();
		_iter_begin_4804954784:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> _1eb9ed0d7_trt = *it;
			{
				_169457_ok=this->self->_method_check_struct_trait_impl(_169443_s,_1eb9ed0d7_trt) && _169457_ok;
			}
			_iter_next_4804954784:;
			++it;
			goto _iter_begin_4804954784;
		}
		_iter_end_4804954784:;
	}
	return _169457_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_fields(jule::Ptr<_1eb29bdd6_Struct>& _170244_st) {
	jule::Bool _170259_ok = jule::Bool();
	_170259_ok=true;
	jule::Ptr<_1ec1c55b1_TypeChecker> _170517_tc = jule::new_struct<_1ec1c55b1_TypeChecker>(new( std::nothrow ) _1ec1c55b1_TypeChecker(this->self,this->self,jule::new_struct<_1ec1c55b1_Referencer>(new( std::nothrow ) _1ec1c55b1_Referencer(_170244_st->_field_ident,jule::Any(_170244_st),nullptr)),_1ea7465e5_Token(),_170244_st->_field_generics,jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>(),jule::Bool(),jule::Bool()));
	jule::I64 _171513_n = _170244_st->_field_instances.len();
	{
		auto &expr = _170244_st->_field_fields;
		auto it = expr.begin();
		_iter_begin_4804963024:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Field> _1eb9ed0d7_f = *it;
			{
				_1eb9ed0d7_f->_field_owner=_170244_st;
				_1eb9ed0d7_f->_field_kind->_field_kind=_170517_tc->_method_check_decl(_1eb9ed0d7_f->_field_kind->_field_decl);
				_170259_ok=(_1eb9ed0d7_f->_field_kind->_field_kind != nullptr) && _170259_ok;
				{
					auto &expr = _170244_st->_field_fields;
					auto it = expr.begin();
					_iter_begin_4804964496:;
					if (it != expr.end()) {
						jule::Ptr<_1eb29bdd6_Field> &_1eb9ed0d7_cf = *it;
						{
							if (_1eb9ed0d7_f == _1eb9ed0d7_cf) {
								goto _iter_end_4804964496;
							} else if (_1eb9ed0d7_f->_field_ident == _1eb9ed0d7_cf->_field_ident) {
								this->self->_method_push_err(_1eb9ed0d7_f->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_f->_field_ident)}));
								this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_170259_ok=false;
							}
						}
						_iter_next_4804964496:;
						++it;
						goto _iter_begin_4804964496;
					}
					_iter_end_4804964496:;
				}
			}
			_iter_next_4804963024:;
			++it;
			goto _iter_begin_4804963024;
		}
		_iter_end_4804963024:;
	}
	if (_170259_ok && (_171513_n != _170244_st->_field_instances.len())) {
		_170517_tc->_field_referencer=nullptr;
		_170244_st->_field_instances=_170244_st->_field_instances.slice(0LL,_171513_n);
		{
			auto &expr = _170244_st->_field_fields;
			auto it = expr.begin();
			_iter_begin_4804963648:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_Field> _1eb9ed0d7_f = *it;
				{
					_1eb9ed0d7_f->_field_kind->_field_kind=_170517_tc->_method_check_decl(_1eb9ed0d7_f->_field_kind->_field_decl);
				}
				_iter_next_4804963648:;
				++it;
				goto _iter_begin_4804963648;
			}
			_iter_end_4804963648:;
		}
	}
	return _170259_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_decl_methods(jule::Ptr<_1eb29bdd6_Struct>& _174450_s) {
	jule::Bool _174464_ok = jule::Bool();
	{
		auto &expr = _174450_s->_field_methods;
		auto it = expr.begin();
		_iter_begin_4804976736:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_m = *it;
			{
				if ((!(this->self->_method_check_fn_decl_types(_1eb9ed0d7_m)))) {
					_174464_ok = false;
					return _174464_ok;
				}
			}
			_iter_next_4804976736:;
			++it;
			goto _iter_begin_4804976736;
		}
		_iter_end_4804976736:;
	}
	_174464_ok = true;
	return _174464_ok;
}



inline void _1eb9ed0d7_Sema::_method_check_struct_decl(jule::Ptr<_1eb29bdd6_Struct>& _175342_s) {
	if (_1ea7465e5_is_ignore_ident(_175342_s->_field_ident)) {
		this->self->_method_push_err(_175342_s->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_175342_s),_175342_s->_field_ident,_175342_s->_field_cpp_linked)) {
		this->self->_method_push_err(_175342_s->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_175342_s->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	this->self->_method_check_directives(_175342_s->_field_directives,jule::Any(_175342_s));
	_175342_s->_field_sema=this->self;
	{
		if ((!(this->self->_method_check_decl_generics(_175342_s->_field_generics)))) {
			_case_begin_4804987856:;
			{
				return;
			}
		}
		else if ((!(this->self->_method_check_struct_fields(_175342_s)))) {
			_case_begin_4804987968:;
			{
				return;
			}
		}
		else if ((!(this->self->_method_check_struct_decl_methods(_175342_s)))) {
			_case_begin_4804988080:;
			{
				return;
			}
		}
		else if ((!(this->self->_method_check_struct_impls(_175342_s)))) {
			_case_begin_4804988192:;
			{
				return;
			}
		}
		_match_end_4804985184:;
	}
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_decls(void) {
	jule::Bool _177340_ok = jule::Bool();
	{
		auto &expr = this->self->_field_file->_field_structs;
		auto it = expr.begin();
		_iter_begin_4804994752:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1eb9ed0d7_s = *it;
			{
				this->self->_method_check_struct_decl(_1eb9ed0d7_s);
				if (this->self->_field_errors.len() > 0LL) {
					_177340_ok = false;
					return _177340_ok;
				}
			}
			_iter_next_4804994752:;
			++it;
			goto _iter_begin_4804994752;
		}
		_iter_end_4804994752:;
	}
	_177340_ok = true;
	return _177340_ok;
}



inline void _1eb9ed0d7_Sema::_method_check_fn_decl(jule::Ptr<_1eb627195_Fn>& _178638_f) {
	if (_1ea7465e5_is_ignore_ident(_178638_f->_field_ident)) {
		this->self->_method_push_err(_178638_f->_field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (this->self->_method_is_duplicated_ident(static_cast<jule::Uintptr>(_178638_f),_178638_f->_field_ident,_178638_f->_field_cpp_linked)) {
		this->self->_method_push_err(_178638_f->_field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_178638_f->_field_ident)}));
		this->self->_method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	this->self->_method_check_directives(_178638_f->_field_directives,jule::Any(_178638_f));
	_178638_f->_field_sema=this->self;
	this->self->_method_check_fn_decl_prototype(_178638_f);
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_fn_decls(void) {
	jule::Bool _180136_ok = jule::Bool();
	{
		auto &expr = this->self->_field_file->_field_funcs;
		auto it = expr.begin();
		_iter_begin_4805008880:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_f = *it;
			{
				this->self->_method_check_fn_decl(_1eb9ed0d7_f);
				if (this->self->_field_errors.len() > 0LL) {
					_180136_ok = false;
					return _180136_ok;
				}
			}
			_iter_next_4805008880:;
			++it;
			goto _iter_begin_4805008880;
		}
		_iter_end_4805008880:;
	}
	_180136_ok = true;
	return _180136_ok;
}



inline void _1eb9ed0d7_Sema::_method_push_cycle_error(jule::Ptr<_1eb29bdd6_Struct>& _181332_st1,jule::Ptr<_1eb29bdd6_Struct>& _181347_st2,jule::Str& _181366_message) {
	
	jule::Str _181613_refers_to = _1e8ea7cc0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_181332_st1->_field_ident),jule::Any(_181347_st2->_field_ident)}));
	_181366_message=((_1eb736eec_str_repeat(jule::Str(" ", 1),4LL) + _181613_refers_to) + jule::Str("\n", 1)) + _181366_message;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_cross_cycle(jule::Ptr<_1eb29bdd6_Struct>& _182033_st1,jule::Ptr<_1eb29bdd6_Struct>& _182048_st2,jule::Str& _182067_message) {
	{
		auto &expr = _182048_st2->_field_uses;
		auto it = expr.begin();
		_iter_begin_4805021952:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> &_1eb9ed0d7_u = *it;
			{
				if (_1eb9ed0d7_u == _182033_st1) {
					(*this)._method_push_cycle_error(_182048_st2,_1eb9ed0d7_u,_182067_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_182033_st1,_1eb9ed0d7_u,_182067_message)))) {
					(*this)._method_push_cycle_error(_182048_st2,_1eb9ed0d7_u,_182067_message);
					return false;
				}
			}
			_iter_next_4805021952:;
			++it;
			goto _iter_begin_4805021952;
		}
		_iter_end_4805021952:;
	}
	return true;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _183653_derive,jule::Ptr<_1eb29bdd6_Struct>& _183667_st1,jule::Ptr<_1ec1c55b1_TypeKind>& _183686_k) {
	jule::Bool _1836102_ok = jule::Bool();
	jule::Ptr<_1eb29bdd6_Struct> _183717_st2 = _1ec1c55b1_get_struct_from_kind(_183686_k);
	if (_183717_st2 == nullptr) {
		_1836102_ok = true;
		return _1836102_ok;
	}
	if (_183667_st1 == _183717_st2) {
		(*this)._method_push_err(_183667_st1->_field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>({jule::Any(_183653_derive),jule::Any(_183667_st1->_field_ident)}));
		_1836102_ok = false;
		return _1836102_ok;
	}
	jule::Str _184917_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_183667_st1,_183717_st2,_184917_message)))) {
		jule::Str _185221_err_msg = _184917_message;
		_184917_message=jule::Str();
		(*this)._method_push_cycle_error(_183667_st1,_183717_st2,_184917_message);
		_185221_err_msg=_185221_err_msg + _184917_message;
		(*this)._method_push_err(_183667_st1->_field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>({jule::Any(_183653_derive),jule::Any(_185221_err_msg)}));
		_1836102_ok = false;
		return _1836102_ok;
	}
	_1836102_ok = true;
	return _1836102_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_ins_derive_clone(jule::Ptr<_1eb29bdd6_StructIns> _186352_st) {
	jule::Bool _186370_ok = jule::Bool();
	if ((!(_186352_st->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
		_186370_ok = true;
		return _186370_ok;
	}
	{
		auto &expr = _186352_st->_field_fields;
		auto it = expr.begin();
		_iter_begin_4805043952:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_FieldIns> _1eb9ed0d7_f = *it;
			{
				if ((_1eb9ed0d7_f->_field_kind == nullptr) || (!(_1eb9ed0d7_f->_field_kind->_method_mutable()))) {
					goto _iter_next_4805043952;
				}
				if ((!(_1eb9ed0d7_f->_field_kind->_method_supports_cloning()))) {
					(*this)._method_push_err(_186352_st->_field_decl->_field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>({jule::Any(_1eb9ed0d7_f->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_186370_ok = false;
					return _186370_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),_186352_st->_field_decl,_1eb9ed0d7_f->_field_kind)))) {
					_186370_ok = false;
					return _186370_ok;
				}
			}
			_iter_next_4805043952:;
			++it;
			goto _iter_begin_4805043952;
		}
		_iter_end_4805043952:;
	}
	_186370_ok = true;
	return _186370_ok;
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_struct_derive_clone(jule::Ptr<_1eb29bdd6_Struct>& _188649_st) {
	return (*this)._method_check_struct_ins_derive_clone(_188649_st->_method_instance());
}



inline jule::Bool _1eb9ed0d7_Sema::_method_check_file_derives(void) {
	jule::Bool _189039_ok = jule::Bool();
	{
		auto &expr = (*this)._field_file->_field_structs;
		auto it = expr.begin();
		_iter_begin_4805056448:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1eb9ed0d7_st = *it;
			{
				_189039_ok=(*this)._method_check_struct_derive_clone(_1eb9ed0d7_st);
				if ((!(_189039_ok))) {
					goto _iter_end_4805056448;
				}
			}
			_iter_next_4805056448:;
			++it;
			goto _iter_begin_4805056448;
		}
		_iter_end_4805056448:;
	}
	return _189039_ok;
}



inline void _1eb9ed0d7_Sema::_method_check_package_derives(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_4805059664:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				(*this)._method_set_current_file(_1eb9ed0d7_f);
				jule::Bool _190517_ok = (*this)._method_check_file_derives();
				if ((!(_190517_ok))) {
					return;
				}
			}
			_iter_next_4805059664:;
			++it;
			goto _iter_begin_4805059664;
		}
		_iter_end_4805059664:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_package_decls(void) {
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805064352:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				if ((!(this->self->_method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_4805064352:;
			++it;
			goto _iter_begin_4805064352;
		}
		_iter_end_4805064352:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805067408:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				if ((!(this->self->_method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_4805067408:;
			++it;
			goto _iter_begin_4805067408;
		}
		_iter_end_4805067408:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805070096:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				if ((!(this->self->_method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_4805070096:;
			++it;
			goto _iter_begin_4805070096;
		}
		_iter_end_4805070096:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805072736:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				if ((!(this->self->_method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_4805072736:;
			++it;
			goto _iter_begin_4805072736;
		}
		_iter_end_4805072736:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805075312:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				if ((!(this->self->_method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_4805075312:;
			++it;
			goto _iter_begin_4805075312;
		}
		_iter_end_4805075312:;
	}
	this->self->_method_check_package_derives();
}



inline void _1eb9ed0d7_Sema::_method_check_data_for_type_inference(jule::Ptr<_1ebcce31e_Data>& _195349_d,_1ea7465e5_Token& _195360_err_token) {
	{
		if (_195349_d->_method_is_nil()) {
			_case_begin_4805081232:;
			{
				(*this)._method_push_err(_195360_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if (_195349_d->_method_is_void()) {
			_case_begin_4805081344:;
			{
				(*this)._method_push_err(_195360_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if (_195349_d->_field_kind->_field_variadic) {
			_case_begin_4805081456:;
			{
				(*this)._method_push_err(_195360_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_4805081024:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_var(jule::Ptr<_1eba533d4_Var>& _196634_v) {
	if (_196634_v->_field_cpp_linked) {
		return;
	}
	if (_196634_v->_method_is_type_inferred()) {
		_196634_v->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_196634_v->_field_value->_field_data->_field_kind));
		this->self->_method_check_data_for_type_inference(_196634_v->_field_value->_field_data,_196634_v->_field_value->_field_expr->_field_token);
	} else {
		jule::Ptr<_1ec1c55b1_Arr> _197821_arr = _196634_v->_field_kind->_field_kind->_method_arr();
		if (_197821_arr != nullptr) {
			if (_197821_arr->_field_auto) {
				jule::Ptr<_1ec1c55b1_Arr> _198125_data_arr = _196634_v->_field_value->_field_data->_field_kind->_method_arr();
				if (_198125_data_arr != nullptr) {
					_197821_arr->_field_n=_198125_data_arr->_field_n;
				}
			}
		}
		this->self->_method_check_assign_type(_196634_v->_field_reference,_196634_v->_field_kind->_field_kind,_196634_v->_field_value->_field_data,_196634_v->_field_value->_field_expr->_field_token);
	}
	if (_196634_v->_field_reference && (!(_1ec1c55b1_is_valid_for_ref(_196634_v->_field_kind->_field_kind)))) {
		this->self->_method_push_err(_196634_v->_field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any(_196634_v->_field_kind->_field_kind->_method_to_str())}));
	}
	this->self->_method_check_validity_for_init_expr(_196634_v->_field_mutable,_196634_v->_field_reference,_196634_v->_field_kind->_field_kind,_196634_v->_field_value->_field_data,_196634_v->_field_value->_field_expr->_field_token);
	if (_196634_v->_field_constant) {
		if ((!(_196634_v->_field_value->_field_data->_method_is_const()))) {
			this->self->_method_push_err(_196634_v->_field_value->_field_expr->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		}
	} else {
		_196634_v->_field_value->_field_data->_field_constant=nullptr;
	}
	if (_196634_v->_field_kind->_field_kind->_method_tup() != nullptr) {
		_196634_v->_field_kind->_field_kind=nullptr;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_type_var(jule::Ptr<_1eba533d4_Var>& _201639_decl,jule::Trait<_1ec2d8be1_Lookup> _201655_l) {
	if (_201639_decl->_field_cpp_linked || (!(_201639_decl->_method_is_initialized()))) {
		return;
	}
	jule::Ptr<_1ebcce31e_Eval> _202117_eval = (((_201639_decl->_field_kind != nullptr)) ? (this->self->_method_evalpd(_201655_l,_201639_decl->_field_kind->_field_kind,_201639_decl)) : (this->self->_method_evalpd(_201655_l,nullptr,_201639_decl)));
	_202117_eval->_field_immutable=(!(_201639_decl->_field_mutable));
	_201639_decl->_field_value->_field_data=_202117_eval->_method_eval_expr(_201639_decl->_field_value->_field_expr);
	if (_201639_decl->_field_value->_field_data == nullptr) {
		return;
	}
	this->self->_method_check_var(_201639_decl);
}



inline void _1eb9ed0d7_Sema::_method_check_global_types(void) {
	{
		auto &expr = this->self->_field_file->_field_vars;
		auto it = expr.begin();
		_iter_begin_4805117104:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1eb9ed0d7_decl = *it;
			{
				if ((_1eb9ed0d7_decl->_method_is_initialized() && (_1eb9ed0d7_decl->_field_value->_field_data == nullptr)) || (_1eb9ed0d7_decl->_method_is_type_inferred() && (_1eb9ed0d7_decl->_field_kind->_field_kind == nullptr))) {
					this->self->_method_check_type_var(_1eb9ed0d7_decl,this->self);
				}
			}
			_iter_next_4805117104:;
			++it;
			goto _iter_begin_4805117104;
		}
		_iter_end_4805117104:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_type_method(jule::Ptr<_1eb29bdd6_StructIns>& _204542_strct,jule::Ptr<_1eb627195_Fn>& _204566_f) {
	if (_204566_f->_field_cpp_linked) {
		return;
	}
	if (_204566_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_204566_f->_field_instances.len() == 0LL) {
		jule::Ptr<_1eb627195_FnIns> _205621_ins = _204566_f->_method_instance();
		_205621_ins->_field_owner=_204542_strct;
		_204566_f->_method_append_instance(_205621_ins);
		this->self->_method_reload_fn_ins_types(_205621_ins);
		_205621_ins->_field_reloaded=true;
	}
	{
		auto &expr = _204566_f->_field_instances;
		auto it = expr.begin();
		_iter_begin_4805125968:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_FnIns> _1eb9ed0d7_ins = *it;
			{
				if (_1eb9ed0d7_ins->_field_scope->_field_stmts.len() > 0LL) {
					goto _iter_next_4805125968;
				}
				this->self->_method_check_fn_ins(_1eb9ed0d7_ins);
			}
			_iter_next_4805125968:;
			++it;
			goto _iter_begin_4805125968;
		}
		_iter_end_4805125968:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_type_struct(jule::Ptr<_1eb29bdd6_Struct>& _207242_strct) {
	if (_207242_strct->_field_cpp_linked) {
		return;
	}
	if (_207242_strct->_field_generics.len() > 0LL) {
		return;
	}
	if (_207242_strct->_field_instances.len() == 0LL) {
		jule::Ptr<_1eb29bdd6_StructIns> _208321_ins = _207242_strct->_method_instance();
		_208321_ins->_field_checked=true;
		_207242_strct->_method_append_instance(_208321_ins);
	}
	{
		auto &expr = _207242_strct->_field_instances;
		auto it = expr.begin();
		_iter_begin_4805138944:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_StructIns> _1eb9ed0d7_ins = *it;
			{
				{
					auto &expr = _1eb9ed0d7_ins->_field_methods;
					auto it = expr.begin();
					_iter_begin_4805139952:;
					if (it != expr.end()) {
						jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_f = *it;
						{
							this->self->_method_check_type_method(_1eb9ed0d7_ins,_1eb9ed0d7_f);
						}
						_iter_next_4805139952:;
						++it;
						goto _iter_begin_4805139952;
					}
					_iter_end_4805139952:;
				}
			}
			_iter_next_4805138944:;
			++it;
			goto _iter_begin_4805138944;
		}
		_iter_end_4805138944:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_struct_types(void) {
	{
		auto &expr = this->self->_field_file->_field_structs;
		auto it = expr.begin();
		_iter_begin_4805141312:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1eb9ed0d7_s = *it;
			{
				this->self->_method_check_type_struct(_1eb9ed0d7_s);
			}
			_iter_next_4805141312:;
			++it;
			goto _iter_begin_4805141312;
		}
		_iter_end_4805141312:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_rets(jule::Ptr<_1eb627195_FnIns>& _210134_f) {
	if (_210134_f->_field_decl->_method_is_void()) {
		return;
	}
	jule::Bool _210613_ok = _1eb9ed0d7_has_ret(_210134_f->_field_scope);
	if ((!(_210613_ok))) {
		(*this)._method_push_err(_210134_f->_field_decl->_field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	}
}



inline void _1eb9ed0d7_Sema::_method_check_fn_ins_sc(jule::Ptr<_1eb627195_FnIns>& _211239_f,jule::Ptr<_1eb7d5892_ScopeChecker>& _211255_sc) {
	if (_211239_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _211717_vars = _1eb9ed0d7_build_ret_vars(_211239_f);
	_211255_sc->_field_table->_field_vars=jule::append(_211255_sc->_field_table->_field_vars,_211717_vars);
	_211255_sc->_field_table->_field_vars=jule::append(_211255_sc->_field_table->_field_vars,_1eb9ed0d7_build_param_vars(_211239_f));
	_211255_sc->_field_table->_field_type_aliases=jule::append(_211255_sc->_field_table->_field_type_aliases,_1eb9ed0d7_build_generic_type_aliases(_211239_f));
	_211255_sc->_method_check(_211239_f->_field_decl->_field_scope,_211239_f->_field_scope);
	if (_211717_vars.len() > 0LL) {
		jule::Slice<jule::Any> _212721_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_211239_f->_field_scope->_field_stmts.len() + _211717_vars.len()));
		{
			auto &expr = _211717_vars;
			auto it = expr.begin();
			_iter_begin_4805160912:;
			if (it != expr.end()) {
				jule::Ptr<_1eba533d4_Var> _1eb9ed0d7_v = *it;
				{
					_212721_stmts.push(jule::Any(_1eb9ed0d7_v));
				}
				_iter_next_4805160912:;
				++it;
				goto _iter_begin_4805160912;
			}
			_iter_end_4805160912:;
		}
		_212721_stmts=jule::append(_212721_stmts,_211239_f->_field_scope->_field_stmts);
		_211239_f->_field_scope->_field_stmts=_212721_stmts;
	}
	(*this)._method_check_rets(_211239_f);
}



inline void _1eb9ed0d7_Sema::_method_check_fn_ins(jule::Ptr<_1eb627195_FnIns>& _213937_f) {
	if (_213937_f->_field_decl->_field_cpp_linked) {
		return;
	}
	jule::Ptr<_1ebcb6081_SymbolTable> _214417_old = _213937_f->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_213937_f->_field_decl->_field_sema->_method_set_current_file(_214417_old);
	});
	jule::Ptr<_1ebcb6081_SymbolTable> _214617_file = _1eb9ed0d7_find_file(_213937_f->_field_decl->_field_sema->_field_files,_213937_f->_field_decl->_field_token._field_file);
	if (_214617_file != nullptr) {
		_213937_f->_field_decl->_field_sema->_method_set_current_file(_214617_file);
	}
	jule::Ptr<_1eb7d5892_ScopeChecker> _215117_sc = _1eb7d5892_new_scope_checker(_213937_f->_field_decl->_field_sema,_213937_f);
	this->self->_method_check_fn_ins_sc(_213937_f,_215117_sc);
	if (_213937_f->_field_decl->_field_sema != this->self) {
		this->self->_field_errors=jule::append(this->self->_field_errors,_213937_f->_field_decl->_field_sema->_field_errors);
		_213937_f->_field_decl->_field_sema->_field_errors=nullptr;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_type_fn(jule::Ptr<_1eb627195_Fn>& _216038_f) {
	if (_216038_f->_field_cpp_linked) {
		return;
	}
	if (_216038_f->_field_generics.len() > 0LL) {
		return;
	}
	{
		auto &expr = _216038_f->_field_instances;
		auto it = expr.begin();
		_iter_begin_4805177120:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_FnIns> _1eb9ed0d7_ins = *it;
			{
				this->self->_method_check_fn_ins(_1eb9ed0d7_ins);
			}
			_iter_next_4805177120:;
			++it;
			goto _iter_begin_4805177120;
		}
		_iter_end_4805177120:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_test_fn(jule::Ptr<_1eb627195_FnIns>& _217537_f) {
	if ((_217537_f->_field_params.len() != 1LL) || (_217537_f->_field_result != nullptr)) {
		(*this)._method_push_err(_217537_f->_field_decl->_field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ec1c55b1_Sptr> _218217_sptr = _217537_f->_field_params[0LL]->_field_kind->_method_sptr();
	if (_218217_sptr == nullptr) {
		(*this)._method_push_err(_217537_f->_field_decl->_field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1eb29bdd6_StructIns> _218913_s = _218217_sptr->_field_elem->_method_strct();
	if ((_218913_s == nullptr) || (!(_1eb7d8048_is_std_package(_218913_s->_field_decl->_field_token._field_file->_method_path(),jule::Str("testing", 7))))) {
		(*this)._method_push_err(_217537_f->_field_decl->_field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
}



inline void _1eb9ed0d7_Sema::_method_precheck_type_fn(jule::Ptr<_1eb627195_Fn>& _219741_f) {
	if (_219741_f->_field_cpp_linked) {
		return;
	}
	if (_219741_f->_field_generics.len() > 0LL) {
		return;
	}
	if (_219741_f->_field_instances.len() == 0LL) {
		jule::Ptr<_1eb627195_FnIns> _220821_ins = _219741_f->_method_instance();
		_219741_f->_field_instances = jule::alloc_for_append(_219741_f->_field_instances,1);_219741_f->_field_instances.push(_220821_ins);
		this->self->_method_reload_fn_ins_types(_220821_ins);
		_220821_ins->_field_reloaded=true;
		if (_1ec1c55b1_has_directive(_219741_f->_field_directives,jule::Str("test", 4))) {
			this->self->_method_check_test_fn(_220821_ins);
		}
	}
}



inline void _1eb9ed0d7_Sema::_method_precheck_fn_types(void) {
	{
		auto &expr = this->self->_field_file->_field_funcs;
		auto it = expr.begin();
		_iter_begin_4805204928:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_decl = *it;
			{
				this->self->_method_precheck_type_fn(_1eb9ed0d7_decl);
			}
			_iter_next_4805204928:;
			++it;
			goto _iter_begin_4805204928;
		}
		_iter_end_4805204928:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_fn_types(void) {
	{
		auto &expr = this->self->_field_file->_field_funcs;
		auto it = expr.begin();
		_iter_begin_4805208112:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_decl = *it;
			{
				this->self->_method_check_type_fn(_1eb9ed0d7_decl);
			}
			_iter_next_4805208112:;
			++it;
			goto _iter_begin_4805208112;
		}
		_iter_end_4805208112:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check_package_types(void) {
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805211024:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				this->self->_method_check_global_types();
			}
			_iter_next_4805211024:;
			++it;
			goto _iter_begin_4805211024;
		}
		_iter_end_4805211024:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805211600:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				this->self->_method_precheck_fn_types();
			}
			_iter_next_4805211600:;
			++it;
			goto _iter_begin_4805211600;
		}
		_iter_end_4805211600:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805216016:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				this->self->_method_check_fn_types();
			}
			_iter_next_4805216016:;
			++it;
			goto _iter_begin_4805216016;
		}
		_iter_end_4805216016:;
	}
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805218400:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_f = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_f);
				this->self->_method_check_struct_types();
			}
			_iter_next_4805218400:;
			++it;
			goto _iter_begin_4805218400;
		}
		_iter_end_4805218400:;
	}
}



inline void _1eb9ed0d7_Sema::_method_set_file_sema_fields(void) {
	{
		auto &expr = this->self->_field_file->_field_funcs;
		auto it = expr.begin();
		_iter_begin_4805222016:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb9ed0d7_f = *it;
			{
				_1eb9ed0d7_f->_field_sema=this->self;
			}
			_iter_next_4805222016:;
			++it;
			goto _iter_begin_4805222016;
		}
		_iter_end_4805222016:;
	}
	{
		auto &expr = this->self->_field_file->_field_structs;
		auto it = expr.begin();
		_iter_begin_4805223168:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1eb9ed0d7_st = *it;
			{
				_1eb9ed0d7_st->_field_sema=this->self;
			}
			_iter_next_4805223168:;
			++it;
			goto _iter_begin_4805223168;
		}
		_iter_end_4805223168:;
	}
}



inline void _1eb9ed0d7_Sema::_method_set_sema_fields(void) {
	{
		auto &expr = this->self->_field_files;
		auto it = expr.begin();
		_iter_begin_4805225632:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_file = *it;
			{
				this->self->_method_set_current_file(_1eb9ed0d7_file);
				this->self->_method_set_file_sema_fields();
			}
			_iter_next_4805225632:;
			++it;
			goto _iter_begin_4805225632;
		}
		_iter_end_4805225632:;
	}
}



inline void _1eb9ed0d7_Sema::_method_check(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _227430_files) {
	this->self->_field_files=_227430_files;
	this->self->_method_check_imports();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_enums();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_set_sema_fields();
	this->self->_method_impl_impls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_decls();
	if (this->self->_field_errors.len() > 0LL) {
		return;
	}
	this->self->_method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb9ed0d7_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba533d4_IterRelation &_Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eba533d4_Var> _1eba534e4_RangeChecker::_method_build_var(jule::Ptr<_1ea6ee955_VarDecl>& _90129_decl) {
	jule::Ptr<_1eba533d4_Var> _90217_v = _1eb736eec_build_var(_90129_decl);
	return _90217_v;
}



inline void _1eba534e4_RangeChecker::_method_set_size_key(void) {
	if (((*this)._field_rang->_field_key_a == nullptr) || _1ea7465e5_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3))))));
	{
		auto &_match_expr{ (*this)._field_d->_field_model };
		if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4805646640:;
			{
				(*this)._field_kind->_field_key_a->_field_iter_relation=jule::new_struct<_1eba533d4_IterRelation>(new( std::nothrow ) _1eba533d4_IterRelation((*this)._field_d->_field_model.operator jule::Ptr<_1eba533d4_Var>()));
			}
		}
		_match_end_4805650224:;
	}
}



inline void _1eba534e4_RangeChecker::_method_check_range_expr_validity(jule::Ptr<_1ebcce31e_Data>& _93249_d,jule::Ptr<_1eba533d4_Var>& _93260_key,jule::Ptr<_1ec1c55b1_TypeKind>& _93276_k) {
	jule::Bool _93317__mut = _93260_key->_field_mutable;
	if (_93317__mut && (!(_93276_k->_method_mutable()))) {
		_93317__mut=false;
	}
	(*this)._field_sc->_field_s->_method_check_validity_for_init_expr(_93317__mut,_93260_key->_field_reference,_93260_key->_field_kind->_field_kind,_93249_d,(*this)._field_rang->_field_in_token);
}



inline void _1eba534e4_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if (((*this)._field_rang->_field_key_b == nullptr) || _1ea7465e5_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ptr<_1ec1c55b1_Slc> _95117_slc = (*this)._field_d->_field_kind->_method_slc();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_95117_slc->_field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*this)._field_kind->_field_key_b,_95117_slc->_field_elem);
}



inline void _1eba534e4_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if (((*this)._field_rang->_field_key_b == nullptr) || _1ea7465e5_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ptr<_1ec1c55b1_Arr> _96417_arr = (*this)._field_d->_field_kind->_method_arr();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_96417_arr->_field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*this)._field_kind->_field_key_b,_96417_arr->_field_elem);
}



inline void _1eba534e4_RangeChecker::_method_check_map_key_a(void) {
	if (((*this)._field_rang->_field_key_a == nullptr) || _1ea7465e5_is_ignore_ident((*this)._field_rang->_field_key_a->_field_ident)) {
		return;
	}
	jule::Ptr<_1ec1c55b1_Map> _97617_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_a=(*this)._method_build_var((*this)._field_rang->_field_key_a);
	(*this)._field_kind->_field_key_a->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_97617_m->_field_key));
	jule::Ptr<_1ebcce31e_Data> _98017_d = jule::new_ptr<_1ebcce31e_Data>((*((*this)._field_d)));
	_98017_d->_field_kind=_97617_m->_field_key;
	(*this)._method_check_range_expr_validity(_98017_d,(*this)._field_kind->_field_key_a,_97617_m->_field_key);
}



inline void _1eba534e4_RangeChecker::_method_check_map_key_b(void) {
	if (((*this)._field_rang->_field_key_b == nullptr) || _1ea7465e5_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	jule::Ptr<_1ec1c55b1_Map> _99117_m = (*this)._field_d->_field_kind->_method_map();
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_99117_m->_field_val));
	jule::Ptr<_1ebcce31e_Data> _99517_d = jule::new_ptr<_1ebcce31e_Data>((*((*this)._field_d)));
	_99517_d->_field_kind=_99117_m->_field_val;
	(*this)._method_check_range_expr_validity(_99517_d,(*this)._field_kind->_field_key_b,_99117_m->_field_val);
}



inline void _1eba534e4_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _1eba534e4_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if (((*this)._field_rang->_field_key_b == nullptr) || _1ea7465e5_is_ignore_ident((*this)._field_rang->_field_key_b->_field_ident)) {
		return;
	}
	(*this)._field_kind->_field_key_b=(*this)._method_build_var((*this)._field_rang->_field_key_b);
	(*this)._field_kind->_field_key_b->_field_kind=jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _1eba534e4_RangeChecker::_method_check(void) {
	{
		if ((*this)._field_d->_field_kind->_field_variadic) {
			_case_begin_4805703440:;
		}
		else if ((*this)._field_d->_field_kind->_method_slc() != nullptr) {
			_case_begin_4805704592:;
			{
				(*this)._method_check_slice();
				return true;
			}
		}
		else if ((*this)._field_d->_field_kind->_method_arr() != nullptr) {
			_case_begin_4805704688:;
			{
				(*this)._method_check_array();
				return true;
			}
		}
		else if ((*this)._field_d->_field_kind->_method_map() != nullptr) {
			_case_begin_4805703072:;
			{
				(*this)._method_check_map();
				return true;
			}
		}
		else {
			_case_begin_4805700512:;
			{
				jule::Ptr<_1ec1c55b1_Prim> _103817_prim = (*this)._field_d->_field_kind->_method_prim();
				if ((_103817_prim != nullptr) && _103817_prim->_method_is_str()) {
					(*this)._method_check_str();
					return true;
				}
			}
		}
		_match_end_4805700368:;
	}
	(*this)._field_sc->_field_s->_method_push_err((*this)._field_rang->_field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1ebcb6081_SymbolTable::_method_find_package(jule::Str _2535_ident) {
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_4805766976:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ebcb6081_pkg = *it;
			{
				if (_1ebcb6081_pkg->_field_ident == _2535_ident) {
					return _1ebcb6081_pkg;
				}
			}
			_iter_next_4805766976:;
			++it;
			goto _iter_begin_4805766976;
		}
		_iter_end_4805766976:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1ebcb6081_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)> _3737_selector) {
	if (_3737_selector == nullptr) {
		return nullptr;
	}
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_4805770768:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ebcb6081_pkg = *it;
			{
				if (_3737_selector(_1ebcb6081_pkg)) {
					return _1ebcb6081_pkg;
				}
			}
			_iter_next_4805770768:;
			++it;
			goto _iter_begin_4805770768;
		}
		_iter_end_4805770768:;
	}
	return nullptr;
}



inline jule::Ptr<_1eba533d4_Var> _1ebcb6081_SymbolTable::_method_find_var(jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return (*this)._method___find_var(_5231_ident,_5243_cpp_linked,false);
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1ebcb6081_SymbolTable::_method_find_type_alias(jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return (*this)._method___find_type_alias(_5838_ident,_5850_cpp_linked,false);
}



inline jule::Ptr<_1eb29bdd6_Struct> _1ebcb6081_SymbolTable::_method_find_struct(jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_4805779040:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1ebcb6081_s = *it;
			{
				if ((_1ebcb6081_s->_field_ident == _6434_ident) && (_1ebcb6081_s->_field_cpp_linked == _6446_cpp_linked)) {
					return _1ebcb6081_s;
				}
			}
			_iter_next_4805779040:;
			++it;
			goto _iter_begin_4805779040;
		}
		_iter_end_4805779040:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb627195_Fn> _1ebcb6081_SymbolTable::_method_find_fn(jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_4805782800:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1ebcb6081_f = *it;
			{
				if ((_1ebcb6081_f->_field_ident == _7530_ident) && (_1ebcb6081_f->_field_cpp_linked == _7542_cpp_linked)) {
					return _1ebcb6081_f;
				}
			}
			_iter_next_4805782800:;
			++it;
			goto _iter_begin_4805782800;
		}
		_iter_end_4805782800:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7c68e9_Trait> _1ebcb6081_SymbolTable::_method_find_trait(jule::Str _8633_ident) {
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_4805784736:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> _1ebcb6081_t = *it;
			{
				if (_1ebcb6081_t->_field_ident == _8633_ident) {
					return _1ebcb6081_t;
				}
			}
			_iter_next_4805784736:;
			++it;
			goto _iter_begin_4805784736;
		}
		_iter_end_4805784736:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1ebcb6081_SymbolTable::_method_find_enum(jule::Str _9732_ident) {
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_4805787504:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_Enum> _1ebcb6081_e = *it;
			{
				if (_1ebcb6081_e->_field_ident == _9732_ident) {
					return _1ebcb6081_e;
				}
			}
			_iter_next_4805787504:;
			++it;
			goto _iter_begin_4805787504;
		}
		_iter_end_4805787504:;
	}
	return nullptr;
}



inline jule::Ptr<_1eba533d4_Var> _1ebcb6081_SymbolTable::_method___find_var(jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I64 _11021_i = (*this)._field_vars.len() - 1LL;
		for (; _11021_i >= 0LL; (_11021_i)--) {
			{
				jule::Ptr<_1eba533d4_Var> _11225_v = (*this)._field_vars[_11021_i];
				if ((_11225_v->_field_ident == _10829_ident) && (_11225_v->_field_cpp_linked == _10841_cpp_linked)) {
					return _11225_v;
				}
			}
		_iter_next_4805794816:;
		}
		_iter_end_4805794816:;
	} else {
		{
			auto &expr = (*this)._field_vars;
			auto it = expr.begin();
			_iter_begin_4805793344:;
			if (it != expr.end()) {
				jule::Ptr<_1eba533d4_Var> _1ebcb6081_v = *it;
				{
					if ((_1ebcb6081_v->_field_ident == _10829_ident) && (_1ebcb6081_v->_field_cpp_linked == _10841_cpp_linked)) {
						return _1ebcb6081_v;
					}
				}
				_iter_next_4805793344:;
				++it;
				goto _iter_begin_4805793344;
			}
			_iter_end_4805793344:;
		}
	}
	return nullptr;
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1ebcb6081_SymbolTable::_method___find_type_alias(jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I64 _12921_i = (*this)._field_type_aliases.len() - 1LL;
		for (; _12921_i >= 0LL; (_12921_i)--) {
			{
				jule::Ptr<_1ec1c55b1_TypeAlias> _13125_ta = (*this)._field_type_aliases[_12921_i];
				if ((_13125_ta->_field_ident == _12736_ident) && (_13125_ta->_field_cpp_linked == _12748_cpp_linked)) {
					return _13125_ta;
				}
			}
		_iter_next_4805803408:;
		}
		_iter_end_4805803408:;
	} else {
		{
			auto &expr = (*this)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_4805802096:;
			if (it != expr.end()) {
				jule::Ptr<_1ec1c55b1_TypeAlias> _1ebcb6081_ta = *it;
				{
					if ((_1ebcb6081_ta->_field_ident == _12736_ident) && (_1ebcb6081_ta->_field_cpp_linked == _12748_cpp_linked)) {
						return _1ebcb6081_ta;
					}
				}
				_iter_next_4805802096:;
				++it;
				goto _iter_begin_4805802096;
			}
			_iter_end_4805802096:;
		}
	}
	return nullptr;
}



inline jule::Any _1ebcb6081_SymbolTable::_method_def_by_ident(jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_4805803808:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1ebcb6081_v = *it;
			{
				if ((_1ebcb6081_v->_field_ident == _14831_ident) && (_1ebcb6081_v->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1ebcb6081_v);
				}
			}
			_iter_next_4805803808:;
			++it;
			goto _iter_begin_4805803808;
		}
		_iter_end_4805803808:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4805811984:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeAlias> _1ebcb6081_ta = *it;
			{
				if ((_1ebcb6081_ta->_field_ident == _14831_ident) && (_1ebcb6081_ta->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1ebcb6081_ta);
				}
			}
			_iter_next_4805811984:;
			++it;
			goto _iter_begin_4805811984;
		}
		_iter_end_4805811984:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_4805814016:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1ebcb6081_s = *it;
			{
				if ((_1ebcb6081_s->_field_ident == _14831_ident) && (_1ebcb6081_s->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1ebcb6081_s);
				}
			}
			_iter_next_4805814016:;
			++it;
			goto _iter_begin_4805814016;
		}
		_iter_end_4805814016:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_4805816112:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1ebcb6081_f = *it;
			{
				if ((_1ebcb6081_f->_field_ident == _14831_ident) && (_1ebcb6081_f->_field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1ebcb6081_f);
				}
			}
			_iter_next_4805816112:;
			++it;
			goto _iter_begin_4805816112;
		}
		_iter_end_4805816112:;
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_4805817440:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> _1ebcb6081_t = *it;
			{
				if (_1ebcb6081_t->_field_ident == _14831_ident) {
					return jule::Any(_1ebcb6081_t);
				}
			}
			_iter_next_4805817440:;
			++it;
			goto _iter_begin_4805817440;
		}
		_iter_end_4805817440:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_4805821184:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_Enum> _1ebcb6081_e = *it;
			{
				if (_1ebcb6081_e->_field_ident == _14831_ident) {
					return jule::Any(_1ebcb6081_e);
				}
			}
			_iter_next_4805821184:;
			++it;
			goto _iter_begin_4805821184;
		}
		_iter_end_4805821184:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1ebcb6081_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_4805824560:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> &_1ebcb6081_v = *it;
			{
				if (((static_cast<jule::Uintptr>(_1ebcb6081_v) != _19534_itself) && (_1ebcb6081_v->_field_ident == _19551_ident)) && (_1ebcb6081_v->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4805824560:;
			++it;
			goto _iter_begin_4805824560;
		}
		_iter_end_4805824560:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4805827472:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeAlias> &_1ebcb6081_ta = *it;
			{
				if (((static_cast<jule::Uintptr>(_1ebcb6081_ta) != _19534_itself) && (_1ebcb6081_ta->_field_ident == _19551_ident)) && (_1ebcb6081_ta->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4805827472:;
			++it;
			goto _iter_begin_4805827472;
		}
		_iter_end_4805827472:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_4805827104:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> &_1ebcb6081_s = *it;
			{
				if (((static_cast<jule::Uintptr>(_1ebcb6081_s) != _19534_itself) && (_1ebcb6081_s->_field_ident == _19551_ident)) && (_1ebcb6081_s->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4805827104:;
			++it;
			goto _iter_begin_4805827104;
		}
		_iter_end_4805827104:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_4805824816:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> &_1ebcb6081_f = *it;
			{
				if (((static_cast<jule::Uintptr>(_1ebcb6081_f) != _19534_itself) && (_1ebcb6081_f->_field_ident == _19551_ident)) && (_1ebcb6081_f->_field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4805824816:;
			++it;
			goto _iter_begin_4805824816;
		}
		_iter_end_4805824816:;
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_4805835824:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> &_1ebcb6081_t = *it;
			{
				if ((static_cast<jule::Uintptr>(_1ebcb6081_t) != _19534_itself) && (_1ebcb6081_t->_field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_4805835824:;
			++it;
			goto _iter_begin_4805835824;
		}
		_iter_end_4805835824:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_4805836960:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_Enum> &_1ebcb6081_e = *it;
			{
				if ((static_cast<jule::Uintptr>(_1ebcb6081_e) != _19534_itself) && (_1ebcb6081_e->_field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_4805836960:;
			++it;
			goto _iter_begin_4805836960;
		}
		_iter_end_4805836960:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ebcb6081_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ebcce31e_Data::_method_is_nil(void) {
	return (*this)._field_kind->_method_is_nil();
}



inline jule::Bool _1ebcce31e_Data::_method_is_void(void) {
	return (*this)._field_kind->_method_void();
}



inline jule::Bool _1ebcce31e_Data::_method_is_const(void) {
	return (*this)._field_constant != nullptr;
}



inline jule::Bool _1ebcce31e_Data::_method_good_operand(jule::Ptr<_1ebcce31e_Data>& _28336_other) {
	return (((_28336_other->_field_kind->_method_prim() == nullptr) || (!(_28336_other->_field_kind->_method_prim()->_method_is_any()))) && (_28336_other->_field_kind->_method_trt() == nullptr)) && (!((*this)._field_kind->_method_is_nil()));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ebcce31e_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ebcce31e_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1ebcce31e_Eval::_method_push_err(_1ea7465e5_Token _30927_token,jule::Str _30941_fmt,jule::Slice<jule::Any> _30954_args) {
	(*this)._field_s->_method_push_err(_30927_token,_30941_fmt,_30954_args);
}



inline void _1ebcce31e_Eval::_method_push_suggestion(jule::Str _31434_fmt,jule::Slice<jule::Any> _31447_args) {
	(*this)._field_s->_method_push_suggestion(_31434_fmt,_31447_args);
}



inline void _1ebcce31e_Eval::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _1ebcce31e_Eval::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Bool _1ebcce31e_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _1ebcce31e_Eval::_method_is_global(void) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb9ed0d7_Sema>>()) {
			_case_begin_4805860704:;
			{
				return true;
			}
		}
		else {
			_case_begin_4805858816:;
			{
				return false;
			}
		}
		_match_end_4805859008:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_nil(void) {
	jule::Ptr<_1ec3e4b65_Const> _33617_constant = _1ec3e4b65_Const::_static_method_new_nil();
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),nullptr)),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_33617_constant),false,_33617_constant));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_str(jule::Ptr<_1ea6ee955_LitExpr>& _34723_l) {
	jule::Str _34817_s = _34723_l->_field_value.slice(1LL,_34723_l->_field_value.len() - 1LL);
	if (_1ea7465e5_is_raw_str(_34723_l->_field_value)) {
		_34817_s=_1ec52e1de_to_raw_str(static_cast<jule::Slice<jule::U8>>(_34817_s));
	} else {
		_34817_s=_1ec52e1de_to_str(static_cast<jule::Slice<jule::U8>>(_34817_s));
	}
	jule::Ptr<_1ec3e4b65_Const> _35417_constant = _1ec3e4b65_Const::_static_method_new_str(_34817_s);
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_35417_constant),false,_35417_constant));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_bool(jule::Ptr<_1ea6ee955_LitExpr>& _36824_l) {
	jule::Ptr<_1ec3e4b65_Const> _36917_constant = _1ec3e4b65_Const::_static_method_new_bool(_36824_l->_field_value == jule::Str("true", 4));
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_36917_constant),false,_36917_constant));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_rune(jule::Ptr<_1ea6ee955_LitExpr>& _38224_l) {
	
	
	jule::Str _38613_lt = _38224_l->_field_value.slice(1LL,_38224_l->_field_value.len() - 1LL);
	jule::I32 _38713_r = _1ec52e1de_to_rune(static_cast<jule::Slice<jule::U8>>(_38613_lt));
	jule::Ptr<_1ebcce31e_Data> _38817_data = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,_1ec3e4b65_Const::_static_method_new_i64(static_cast<jule::I64>(_38713_r))));
	jule::Bool _39513_is_ascii = _1ec52e1de_is_ascii(_38713_r);
	if (_39513_is_ascii) {
		_38817_data->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u8", 2))));
	} else {
		_38817_data->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i32", 3))));
	}
	_38817_data->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_RuneExprModel>(new( std::nothrow ) _1eb7ccdea_RuneExprModel(_38713_r)));
	_38817_data->_field_is_rune=true;
	return _38817_data;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_float(jule::Ptr<_1ea6ee955_LitExpr>& _41125_l) {
	
	jule::F64 _41414_f;
	std::tie(_41414_f,std::ignore) = _1e9c4b6bc_parse_float(_41125_l->_field_value,64LL);
	jule::Ptr<_1ec3e4b65_Const> _41517_constant = _1ec3e4b65_Const::_static_method_new_f64(_41414_f);
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_41517_constant),false,_41517_constant));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_int(jule::Ptr<_1ea6ee955_LitExpr>& _42927_l) {
	
	jule::Str _43217_lit = _42927_l->_field_value;
	jule::Int _43317_base = 0LL;
	{
		if (_43217_lit.has_prefix(jule::Str("0x", 2))) {
			_case_begin_4805902864:;
			{
				_43217_lit=_43217_lit.slice(2LL);
				_43317_base=16LL;
			}
		}
		else if (_43217_lit.has_prefix(jule::Str("0b", 2))) {
			_case_begin_4805903200:;
			{
				_43217_lit=_43217_lit.slice(2LL);
				_43317_base=2LL;
			}
		}
		else if (_43217_lit.has_prefix(jule::Str("0o", 2))) {
			_case_begin_4805902368:;
			{
				_43217_lit=_43217_lit.slice(2LL);
				_43317_base=8LL;
			}
		}
		else if ((_43217_lit[0LL] == '0') && (_43217_lit.len() > 1LL)) {
			_case_begin_4805902464:;
			{
				_43217_lit=_43217_lit.slice(1LL);
				_43317_base=8LL;
			}
		}
		else {
			_case_begin_4805902064:;
			{
				_43317_base=10LL;
			}
		}
		_match_end_4805901968:;
	}
	jule::Ptr<_1ebcce31e_Data> _45617_d = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ec3e4b65_Const>()));
	jule::Any _46217_value = jule::Any(nullptr);
	jule::I64 _46314_sig;
	jule::Int _46319_err;
	std::tie(_46314_sig,_46319_err) = _1e9c683ba_parse_int(_43217_lit,_43317_base,64LL);
	if (_46319_err == 0LLU) {
		_46217_value=jule::Any(_46314_sig);
		_45617_d->_field_constant=_1ec3e4b65_Const::_static_method_new_i64(_46314_sig);
	} else {
		jule::U64 _46818_unsig;
		jule::Int _46825_err;
		std::tie(_46818_unsig,_46825_err) = _1e9c683ba_parse_uint(_43217_lit,_43317_base,64LL);
		if (_46825_err != 0LLU) {
			(*this)._method_push_err(_42927_l->_field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
		}
		_45617_d->_field_constant=_1ec3e4b65_Const::_static_method_new_u64(_46818_unsig);
		_46217_value=jule::Any(_46818_unsig);
	}
	_45617_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(_1ebcce31e_kind_by_bitsize(_46217_value))));
	_1ebcce31e_normalize_bitsize(_45617_d);
	_45617_d->_field_model=jule::Any(_45617_d->_field_constant);
	return _45617_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_lit_num(jule::Ptr<_1ea6ee955_LitExpr>& _48727_l) {
	{
		if (_1ea7465e5_is_float(_48727_l->_field_value)) {
			_case_begin_4805929056:;
			{
				return (*this)._method_lit_float(_48727_l);
			}
		}
		else {
			_case_begin_4805927072:;
			{
				return (*this)._method_lit_int(_48727_l);
			}
		}
		_match_end_4805926896:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_lit(jule::Ptr<_1ea6ee955_LitExpr> _49427_lit) {
	{
		if (_49427_lit->_method_is_nil()) {
			_case_begin_4805933808:;
			{
				return (*this)._method_lit_nil();
			}
		}
		else if (_1ea7465e5_is_str(_49427_lit->_field_value)) {
			_case_begin_4805933904:;
			{
				return (*this)._method_lit_str(_49427_lit);
			}
		}
		else if (_1ea7465e5_is_bool(_49427_lit->_field_value)) {
			_case_begin_4805933248:;
			{
				return (*this)._method_lit_bool(_49427_lit);
			}
		}
		else if (_1ea7465e5_is_rune(_49427_lit->_field_value)) {
			_case_begin_4805933344:;
			{
				return (*this)._method_lit_rune(_49427_lit);
			}
		}
		else if (_1ea7465e5_is_num(_49427_lit->_field_value)) {
			_case_begin_4805933440:;
			{
				return (*this)._method_lit_num(_49427_lit);
			}
		}
		else {
			_case_begin_4805932240:;
			{
				return nullptr;
			}
		}
		_match_end_4805932064:;
	}
}



inline jule::Any _1ebcce31e_Eval::_method_find_builtins(jule::Str _50532_ident) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb7d8048_ImportInfo>>()) {
			_case_begin_4805941952:;
			{
				jule::Any _50821_def = _1ebcce31e_find_builtins_import(_50532_ident,(*this)._field_lookup.operator jule::Ptr<_1eb7d8048_ImportInfo>());
				if (_50821_def != nullptr) {
					return _50821_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb9ed0d7_Sema>>()) {
			_case_begin_4805942464:;
			{
				jule::Any _51421_def = _1ebcce31e_find_builtins_sema(_50532_ident,(*this)._field_lookup.operator jule::Ptr<_1eb9ed0d7_Sema>());
				if (_51421_def != nullptr) {
					return _51421_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4805942560:;
			{
				jule::Any _52021_def = _1ebcce31e_find_builtins_sema(_50532_ident,(*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_field_s);
				if (_52021_def != nullptr) {
					return _52021_def;
				}
			}
		}
		_match_end_4805942048:;
	}
	return ((jule::Any((*this)._field_dis_builtin)) ? (jule::Any(nullptr)) : (_1ec2ee113_find_builtin_def(_50532_ident)));
}



inline jule::Any _1ebcce31e_Eval::_method_get_def(jule::Str _52926_ident,jule::Bool _52938_cpp_linked) {
	if ((!(_52938_cpp_linked))) {
		jule::Ptr<_1eb7c7e7d_Enum> _53121_enm = (*this)._field_lookup.get()._method_find_enum(_52926_ident);
		if (_53121_enm != nullptr) {
			return jule::Any(_53121_enm);
		}
	}
	jule::Ptr<_1eba533d4_Var> _53717_v = (*this)._field_lookup.get()._method_find_var(_52926_ident,_52938_cpp_linked);
	if (_53717_v != nullptr) {
		return jule::Any(_53717_v);
	}
	jule::Ptr<_1eb627195_Fn> _54217_f = (*this)._field_lookup.get()._method_find_fn(_52926_ident,_52938_cpp_linked);
	if (_54217_f != nullptr) {
		return jule::Any(_54217_f);
	}
	jule::Ptr<_1eb29bdd6_Struct> _54717_s = (*this)._field_lookup.get()._method_find_struct(_52926_ident,_52938_cpp_linked);
	if (_54717_s != nullptr) {
		return jule::Any(_54717_s);
	}
	jule::Ptr<_1ec1c55b1_TypeAlias> _55217_ta = (*this)._field_lookup.get()._method_find_type_alias(_52926_ident,_52938_cpp_linked);
	if (_55217_ta != nullptr) {
		return jule::Any(_55217_ta);
	}
	return (*this)._method_find_builtins(_52926_ident);
}



inline void _1ebcce31e_Eval::_method_push_reference(jule::Ptr<_1eb736eec_ReferenceStack>& _56038_references) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4805975392:;
			{
				jule::Ptr<_1eb7d5892_ScopeChecker> _56321_sc = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_method_get_root();
				if ((!(_56038_references->_method_exist_1(_56321_sc->_field_owner)))) {
					_56038_references->_method_push(jule::Any(_56321_sc->_field_owner));
				}
			}
		}
		else {
			_case_begin_4805973392:;
			{
				if (((*this)._field_owner != nullptr) && (!(_56038_references->_method_exist_0((*this)._field_owner)))) {
					_56038_references->_method_push(jule::Any((*this)._field_owner));
				}
			}
		}
		_match_end_4805973488:;
	}
}



inline void _1ebcce31e_Eval::_method_push_reference_to_fn(jule::Ptr<_1eb627195_FnIns>& _57544_f) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4805986624:;
			{
				jule::Ptr<_1eb7d5892_ScopeChecker> _57821_sc = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_method_get_root();
				if (_57821_sc->_field_owner->_field_decl->_method_is_init() && (!(_57821_sc->_field_owner->_field_references->_method_exist_1(_57544_f)))) {
					_57821_sc->_field_owner->_field_refers->_method_push(jule::Any(_57544_f));
				}
			}
		}
		_match_end_4805986720:;
	}
	(*this)._method_push_reference(_57544_f->_field_references);
}



inline void _1ebcce31e_Eval::_method_push_reference_to_var(jule::Ptr<_1eba533d4_Var>& _58645_v) {
	if (_58645_v->_field_references == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4806000608:;
			{
				jule::Ptr<_1eb7d5892_ScopeChecker> _59321_sc = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_method_get_root();
				if (_59321_sc->_field_owner->_field_decl->_method_is_init() && (!(_59321_sc->_field_owner->_field_references->_method_exist_0(_58645_v)))) {
					_59321_sc->_field_owner->_field_refers->_method_push(jule::Any(_58645_v));
				}
			}
		}
		_match_end_4805999808:;
	}
	(*this)._method_push_reference(_58645_v->_field_references);
}



inline void _1ebcce31e_Eval::_method_push_reference_to_struct(jule::Ptr<_1eb29bdd6_StructIns>& _60248_s) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4806009424:;
			{
				jule::Ptr<_1eb7d5892_ScopeChecker> _60521_sc = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_method_get_root();
				if (_60521_sc->_field_owner->_field_decl->_method_is_init() && (!(_60521_sc->_field_owner->_field_references->_method_exist_2(_60248_s)))) {
					_60521_sc->_field_owner->_field_refers->_method_push(jule::Any(_60248_s));
				}
			}
		}
		_match_end_4806009520:;
	}
	(*this)._method_push_reference(_60248_s->_field_references);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method___eval_enum(jule::Ptr<_1eb7c7e7d_Enum> _61330_enm) {
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_61330_enm)),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),true,nullptr));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_enum(jule::Ptr<_1eb7c7e7d_Enum> _62532_enm,_1ea7465e5_Token _62544_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_62532_enm->_field_public,_62532_enm->_field_token)))) {
		(*this)._method_push_err(_62544_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_62532_enm->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	return (*this)._method___eval_enum(_62532_enm);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method___eval_struct(jule::Ptr<_1eb29bdd6_StructIns> _63532_s) {
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_63532_s)),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_63532_s),true,nullptr));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_struct(jule::Ptr<_1eb29bdd6_StructIns> _64834_s,_1ea7465e5_Token _64849_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_64834_s->_field_decl->_field_public,_64834_s->_field_decl->_field_token)))) {
		(*this)._method_push_err(_64849_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_64834_s->_field_decl->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated(_64834_s->_field_decl->_field_directives,_64849_error_token);
	return (*this)._method___eval_struct(_64834_s);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_fn_ins(jule::Ptr<_1eb627195_FnIns> _66030_f) {
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_66030_f)),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_66030_f),false,nullptr));
}



inline void _1ebcce31e_Eval::_method_check_deprecated(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>& _67340_directives,_1ea7465e5_Token _67382_tok) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	jule::Ptr<_1ea6ee955_Directive> _67813_d = _1ebcce31e_find_directive(_67340_directives,jule::Str("deprecated", 10));
	if (_67813_d != nullptr) {
		if (_67813_d->_field_args.len() == 0LL) {
			(*this)._method_push_err(_67382_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			(*this)._method_push_err(_67382_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(_67813_d->_field_args[0LL]._field_kind)}));
		}
		(*this)._method_push_suggestion(jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_fn(jule::Ptr<_1eb627195_Fn> _68930_f,_1ea7465e5_Token _68938_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_68930_f->_field_public,_68930_f->_field_token)))) {
		(*this)._method_push_err(_68938_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_68930_f->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated(_68930_f->_field_directives,_68938_error_token);
	jule::Ptr<_1eb627195_FnIns> _69817_ins = _68930_f->_method_instance();
	(*this)._method_push_reference_to_fn(_69817_ins);
	return (*this)._method_eval_fn_ins(_69817_ins);
}



inline void _1ebcce31e_Eval::_method_push_illegal_cycle_error(jule::Ptr<_1eba533d4_Var>& _70344_v1,jule::Ptr<_1eba533d4_Var>& _70355_v2,jule::Str& _70370_message) {
	
	jule::Str _70613_refers_to = _1e8ea7cc0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_70344_v1->_field_ident),jule::Any(_70355_v2->_field_ident)}));
	_70370_message=((_1eb736eec_str_repeat(jule::Str(" ", 1),4LL) + _70613_refers_to) + jule::Str("\n", 1)) + _70370_message;
}



inline jule::Bool _1ebcce31e_Eval::_method_check_cross_cycle(jule::Ptr<_1eba533d4_Var>& _71037_v,jule::Str& _71051_message) {
	{
		auto &expr = _71037_v->_field_depends;
		auto it = expr.begin();
		_iter_begin_4806073632:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> &_1ebcce31e_d = *it;
			{
				if (_1ebcce31e_d == (*this)._field_owner) {
					(*this)._method_push_illegal_cycle_error(_71037_v,_1ebcce31e_d,_71051_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_1ebcce31e_d,_71051_message)))) {
					(*this)._method_push_illegal_cycle_error(_71037_v,_1ebcce31e_d,_71051_message);
					return false;
				}
			}
			_iter_next_4806073632:;
			++it;
			goto _iter_begin_4806073632;
		}
		_iter_end_4806073632:;
	}
	return true;
}



inline jule::Bool _1ebcce31e_Eval::_method_check_illegal_cycles(jule::Ptr<_1eba533d4_Var>& _72944_v,_1ea7465e5_Token _72953_decl_token) {
	jule::Bool _72974_ok = jule::Bool();
	if ((*this)._field_owner == nullptr) {
		_72974_ok = true;
		return _72974_ok;
	}
	if ((*this)._field_owner == _72944_v) {
		(*this)._method_push_err((*this)._field_owner->_field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*this)._field_owner->_field_ident)}));
		_72974_ok = false;
		return _72974_ok;
	}
	jule::Str _74117_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_72944_v,_74117_message)))) {
		jule::Str _74421_err_msg = _74117_message;
		_74117_message=jule::Str();
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_72944_v,_74117_message);
		_74421_err_msg=_74421_err_msg + _74117_message;
		(*this)._method_push_err(_72953_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_74421_err_msg)}));
		_72974_ok = false;
		return _72974_ok;
	}
	(*this)._field_owner->_field_depends = jule::alloc_for_append((*this)._field_owner->_field_depends,1);(*this)._field_owner->_field_depends.push(_72944_v);
	_72974_ok = true;
	return _72974_ok;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_var(jule::Ptr<_1eba533d4_Var> _75631_v,_1ea7465e5_Token _75640_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_75631_v->_field_public,_75631_v->_field_token)))) {
		(*this)._method_push_err(_75640_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_75631_v->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated(_75631_v->_field_directives,_75640_error_token);
	_75631_v->_field_used=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb9ed0d7_Sema>>()) {
			_case_begin_4806097472:;
			{
				jule::Bool _77017_ok = (*this)._method_check_illegal_cycles(_75631_v,_75640_error_token);
				if ((!(_77017_ok))) {
					return nullptr;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4806098944:;
			{
				if ((!(_75631_v->_field_reference)) || (*this)._method_is_unsafe()) {
					goto _match_end_4806098544;
				}
				jule::Ptr<_1eb7d5892_ScopeChecker> _78021_s = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>();
				while ((_78021_s->_field_owner == nullptr) && (_78021_s->_field_parent != nullptr)) {
					{
						_78021_s=_78021_s->_field_parent;
					}
				_iter_next_4806103152:;
				}
				_iter_end_4806103152:;
				if (((_78021_s->_field_owner != nullptr) && _78021_s->_field_owner->_field_anon) && (_75631_v->_field_scope != _78021_s->_field_owner->_field_scope)) {
					(*this)._method_push_err(_75640_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>({jule::Any(_75631_v->_field_ident)}));
				}
			}
		}
		_match_end_4806098544:;
	}
	(*this)._method_push_reference_to_var(_75631_v);
	if ((!(_75631_v->_field_cpp_linked)) && ((_75631_v->_field_value == nullptr) || (_75631_v->_field_value->_field_data == nullptr))) {
		if (_75631_v->_field_constant) {
			(*this)._field_s->_method_check_type_var(_75631_v,(*this)._field_s);
			if (_75631_v->_field_value->_field_data == nullptr) {
				return nullptr;
			}
		}
	}
	if ((_75631_v->_field_kind == nullptr) || (_75631_v->_field_kind->_field_kind == nullptr)) {
		if (_75631_v->_field_scope != nullptr) {
			return nullptr;
		}
		(*this)._field_s->_method_check_type_var(_75631_v,(*this)._field_lookup);
		if ((_75631_v->_field_kind == nullptr) || (_75631_v->_field_kind->_field_kind == nullptr)) {
			return nullptr;
		}
	}
	jule::Ptr<_1ebcce31e_Data> _82017_d = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(_75631_v->_field_kind->_field_kind,jule::Ptr<_1ec1c55b1_TypeKind>(),_75631_v->_field_mutable,_75631_v->_field_reference,(!(_75631_v->_field_constant)),jule::Bool(),jule::Any(_75631_v),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
	if (((!(_75631_v->_field_cpp_linked)) && _75631_v->_method_is_initialized()) && (_75631_v->_field_value->_field_data != nullptr)) {
		_82017_d->_field_is_rune=_75631_v->_field_value->_field_data->_field_is_rune;
	}
	if (_75631_v->_field_constant && (_75631_v->_field_value->_field_data->_field_constant != nullptr)) {
		_82017_d->_field_constant=jule::new_ptr<_1ec3e4b65_Const>((*(_75631_v->_field_value->_field_data->_field_constant)));
		_82017_d->_field_model=jule::Any(_82017_d->_field_constant);
	}
	if (_82017_d->_field_kind->_method_fnc() != nullptr) {
		jule::Ptr<_1eb627195_FnIns> _83821_f = _82017_d->_field_kind->_method_fnc();
		if (_83821_f->_field_decl != nullptr) {
			_83821_f->_field_decl->_field_ident=_75631_v->_field_ident;
		}
	}
	return _82017_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_type_alias(jule::Ptr<_1ec1c55b1_TypeAlias> _84938_ta,_1ea7465e5_Token _84954_error_token) {
	if ((!((*this)._field_s->_method_is_accessible_define(_84938_ta->_field_public,_84938_ta->_field_token)))) {
		(*this)._method_push_err(_84954_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_84938_ta->_field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_84938_ta->_field_used=true;
	jule::Trait<_1ec1c55b1_Kind> _85817_kind = _84938_ta->_field_kind->_field_kind->_field_kind;
	{
		auto &_match_expr{ _85817_kind };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_StructIns>>()) {
			_case_begin_4806134688:;
			{
				return (*this)._method___eval_struct(_85817_kind.operator jule::Ptr<_1eb29bdd6_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7c7e7d_Enum>>()) {
			_case_begin_4806133872:;
			{
				return (*this)._method___eval_enum(_85817_kind.operator jule::Ptr<_1eb7c7e7d_Enum>());
			}
		}
		else {
			_case_begin_4806132256:;
			{
				jule::Ptr<_1ebcce31e_Data> _86721_d = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(((_84938_ta->_field_cpp_linked) ? (_84938_ta->_field_ident) : (_84938_ta->_field_kind->_field_kind->_field_cpp_ident)),_84938_ta->_field_generic,jule::Bool(),_84938_ta->_field_kind->_field_kind->_field_kind)),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ptr<_1ec3e4b65_Const>()));
				_86721_d->_field_model=jule::Any(_86721_d->_field_kind);
				return _86721_d;
			}
		}
		_match_end_4806133520:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_def(jule::Any _88131_def,_1ea7465e5_Token _88141_ident) {
	{
		auto &_match_expr{ _88131_def };
		if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4806144320:;
			{
				return (*this)._method_eval_var(_88131_def.operator jule::Ptr<_1eba533d4_Var>(),_88141_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7c7e7d_Enum>>()) {
			_case_begin_4806145984:;
			{
				return (*this)._method_eval_enum(_88131_def.operator jule::Ptr<_1eb7c7e7d_Enum>(),_88141_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4806146080:;
			{
				return (*this)._method_eval_struct(_88131_def.operator jule::Ptr<_1eb29bdd6_Struct>()->_method_instance(),_88141_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb627195_Fn>>()) {
			_case_begin_4806145520:;
			{
				return (*this)._method_eval_fn(_88131_def.operator jule::Ptr<_1eb627195_Fn>(),_88141_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb627195_FnIns>>()) {
			_case_begin_4806145616:;
			{
				return (*this)._method_eval_fn_ins(_88131_def.operator jule::Ptr<_1eb627195_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeAlias>>()) {
			_case_begin_4806143600:;
			{
				return (*this)._method_eval_type_alias(_88131_def.operator jule::Ptr<_1ec1c55b1_TypeAlias>(),_88141_ident);
			}
		}
		else {
			_case_begin_4806143024:;
			{
				(*this)._method_push_err(_88141_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_88141_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4806143120:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_ident(jule::Ptr<_1ea6ee955_IdentExpr> _90729_ident) {
	jule::Any _90817_def = (*this)._method_get_def(_90729_ident->_field_ident,_90729_ident->_field_cpp_linked);
	return (*this)._method_eval_def(_90817_def,_90729_ident->_field_token);
}



inline void _1ebcce31e_Eval::_method_eval_unary_minus(jule::Ptr<_1ebcce31e_Data>& _91236_d) {
	jule::Ptr<_1ec1c55b1_Prim> _91313_t = _91236_d->_field_kind->_method_prim();
	if ((_91313_t == nullptr) || (!(_1ec4784ce_is_num(_91313_t->_method_to_str())))) {
		_91236_d=nullptr;
		return;
	}
	if (_91236_d->_method_is_const()) {
		{
			if (_91236_d->_field_constant->_method_is_f64()) {
				_case_begin_4806165792:;
				{
					_91236_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_91236_d->_field_constant->_method_read_f64()))));
				}
			}
			else if (_91236_d->_field_constant->_method_is_i64()) {
				_case_begin_4806165904:;
				{
					_91236_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_91236_d->_field_constant->_method_as_f64()))));
				}
			}
			else if (_91236_d->_field_constant->_method_is_u64()) {
				_case_begin_4806166016:;
				{
					_91236_d->_field_constant->_method_set_f64(static_cast<jule::F64>((-(_91236_d->_field_constant->_method_as_f64()))));
				}
			}
			_match_end_4806165552:;
		}
		_1ebcce31e_normalize_type(_91236_d);
	}
	_91236_d->_field_lvalue=false;
	_91236_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_UnaryExprModel>(new( std::nothrow ) _1eb7ccdea_UnaryExprModel(_91236_d->_field_model,jule::Str("-", 1))));
}



inline void _1ebcce31e_Eval::_method_eval_unary_plus(jule::Ptr<_1ebcce31e_Data>& _93535_d) {
	jule::Ptr<_1ec1c55b1_Prim> _93613_t = _93535_d->_field_kind->_method_prim();
	if ((_93613_t == nullptr) || (!(_1ec4784ce_is_num(_93613_t->_method_to_str())))) {
		_93535_d=nullptr;
		return;
	}
	if (_93535_d->_method_is_const()) {
		{
			if (_93535_d->_field_constant->_method_is_f64()) {
				_case_begin_4806179728:;
				{
					_93535_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_93535_d->_field_constant->_method_read_f64()))));
				}
			}
			else if (_93535_d->_field_constant->_method_is_i64()) {
				_case_begin_4806179840:;
				{
					_93535_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_93535_d->_field_constant->_method_as_f64()))));
				}
			}
			else if (_93535_d->_field_constant->_method_is_u64()) {
				_case_begin_4806179952:;
				{
					_93535_d->_field_constant->_method_set_f64(static_cast<jule::F64>((+(_93535_d->_field_constant->_method_as_f64()))));
				}
			}
			_match_end_4806179520:;
		}
		_1ebcce31e_normalize_type(_93535_d);
	}
	_93535_d->_field_lvalue=false;
	_93535_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_UnaryExprModel>(new( std::nothrow ) _1eb7ccdea_UnaryExprModel(_93535_d->_field_model,jule::Str("+", 1))));
}



inline void _1ebcce31e_Eval::_method_eval_unary_caret(jule::Ptr<_1ebcce31e_Data>& _95836_d) {
	jule::Ptr<_1ec1c55b1_Prim> _95913_t = _95836_d->_field_kind->_method_prim();
	if ((_95913_t == nullptr) || (!(_1ec4784ce_is_int(_95913_t->_method_to_str())))) {
		_95836_d=nullptr;
		return;
	}
	if (_95836_d->_method_is_const()) {
		{
			if (_95836_d->_field_constant->_method_is_i64()) {
				_case_begin_4806194000:;
				{
					_95836_d->_field_constant->_method_set_i64(static_cast<jule::I64>((~(_95836_d->_field_constant->_method_read_i64()))));
				}
			}
			else if (_95836_d->_field_constant->_method_is_u64()) {
				_case_begin_4806194112:;
				{
					_95836_d->_field_constant->_method_set_u64(static_cast<jule::U64>((~(_95836_d->_field_constant->_method_read_u64()))));
				}
			}
			_match_end_4806193776:;
		}
	}
	_95836_d->_field_lvalue=false;
	_95836_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_UnaryExprModel>(new( std::nothrow ) _1eb7ccdea_UnaryExprModel(_95836_d->_field_model,jule::Str("^", 1))));
}



inline void _1ebcce31e_Eval::_method_eval_unary_excl(jule::Ptr<_1ebcce31e_Data>& _98235_d) {
	jule::Ptr<_1ec1c55b1_Prim> _98313_t = _98235_d->_field_kind->_method_prim();
	if ((_98313_t == nullptr) || (!(_98313_t->_method_is_bool()))) {
		_98235_d=nullptr;
		return;
	}
	if (_98235_d->_method_is_const()) {
		{
			if (_98235_d->_field_constant->_method_is_bool()) {
				_case_begin_4806205024:;
				{
					_98235_d->_field_constant->_method_set_bool((!(_98235_d->_field_constant->_method_read_bool())));
				}
			}
			_match_end_4806204816:;
		}
	}
	_98235_d->_field_lvalue=false;
	_98235_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_UnaryExprModel>(new( std::nothrow ) _1eb7ccdea_UnaryExprModel(_98235_d->_field_model,jule::Str("!", 1))));
}



inline void _1ebcce31e_Eval::_method_eval_unary_star(jule::Ptr<_1ebcce31e_Data>& _100339_d,_1ea7465e5_Token& _100350_op) {
	{
		if (_100339_d->_field_kind->_method_ptr() != nullptr) {
			_case_begin_4806211872:;
			{
				if ((!((*this)._method_is_unsafe()))) {
					(*this)._method_push_err(_100350_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				jule::Ptr<_1ec1c55b1_Ptr> _101021_t = _100339_d->_field_kind->_method_ptr();
				if (_101021_t->_method_is_unsafe()) {
					_100339_d=nullptr;
					return;
				}
				_100339_d->_field_kind=_101021_t->_field_elem;
			}
		}
		else if (_100339_d->_field_kind->_method_sptr() != nullptr) {
			_case_begin_4806211968:;
			{
				_100339_d->_field_kind=_100339_d->_field_kind->_method_sptr()->_field_elem;
			}
		}
		else {
			_case_begin_4806210848:;
			{
				_100339_d=nullptr;
				return;
			}
		}
		_match_end_4806210704:;
	}
	_100339_d->_field_constant=nullptr;
	_100339_d->_field_lvalue=true;
	_100339_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_UnaryExprModel>(new( std::nothrow ) _1eb7ccdea_UnaryExprModel(_100339_d->_field_model,jule::Str("*", 1))));
}



inline void _1ebcce31e_Eval::_method_eval_unary_amper(jule::Ptr<_1ebcce31e_Data>& _103336_d) {
	{
		auto &_match_expr{ _103336_d->_field_model };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructLitExprModel>>()) {
			_case_begin_4806225104:;
			{
				jule::Ptr<_1eb7ccdea_StructLitExprModel> _103621_lit = _103336_d->_field_model.operator jule::Ptr<_1eb7ccdea_StructLitExprModel>();
				_1ebcce31e_make_struct_lit_alloc(_103336_d,_103621_lit);
			}
		}
		else {
			_case_begin_4806222480:;
			{
				{
					if (_1ec1c55b1_can_get_ptr(_103336_d)) {
						_case_begin_4806224912:;
						{
							_103336_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Ptr>(new( std::nothrow ) _1ec1c55b1_Ptr(_103336_d->_field_kind))));
							_103336_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_UnaryExprModel>(new( std::nothrow ) _1eb7ccdea_UnaryExprModel(_103336_d->_field_model,jule::Str("&", 1))));
						}
					}
					else {
						_case_begin_4806224080:;
						{
							_103336_d=nullptr;
						}
					}
					_match_end_4806223904:;
				}
			}
		}
		_match_end_4806222704:;
	}
	if (_103336_d != nullptr) {
		_103336_d->_field_constant=nullptr;
		_103336_d->_field_lvalue=false;
		_103336_d->_field_mutable=true;
	}
}



inline void _1ebcce31e_Eval::_method_eval_unary_type_decl(jule::Ptr<_1ebcce31e_Data>& _106244_d,jule::Ptr<_1ea6ee955_UnaryExpr>& _106259_u) {
	_1ec1c55b1_TypeChecker _106317_tc = _1ec1c55b1_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_1ec1c55b1_Referencer>(),_106259_u->_field_op,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>(),jule::Bool(),jule::Bool());
	{
		auto &_match_expr{ _106259_u->_field_op._field_kind };
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4806238272:;
			{
				_106244_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_106317_tc._method_build_ptr_from_type(_106244_d->_field_kind)));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4806238368:;
			{
				_106244_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_106317_tc._method_build_sptr_from_type(_106244_d->_field_kind)));
			}
		}
		else {
			_case_begin_4806233808:;
			{
				(*this)._method_push_err(_106259_u->_field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any(_106259_u->_field_op._field_kind),jule::Any(_106244_d->_field_kind->_method_to_str())}));
				_106244_d=nullptr;
				return;
			}
		}
		_match_end_4806235232:;
	}
	_106244_d->_field_decl=true;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_unary(jule::Ptr<_1ea6ee955_UnaryExpr> _108534_u) {
	jule::Ptr<_1ec1c55b1_TypeKind> _108617_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_108617_prefix;
	});
	jule::Ptr<_1ebcce31e_Data> _109017_d = this->self->_method_eval_expr_kind(_108534_u->_field_expr);
	if (_109017_d == nullptr) {
		return nullptr;
	}
	if (_109017_d->_field_decl) {
		this->self->_method_eval_unary_type_decl(_109017_d,_108534_u);
		return _109017_d;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _110017_cast_kind = _109017_d->_field_cast_kind;
	jule::Ptr<_1ec1c55b1_TypeKind> _110113_kind = _109017_d->_field_kind;
	{
		auto &_match_expr{ _108534_u->_field_op._field_kind };
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_4806253440:;
			{
				this->self->_method_eval_unary_minus(_109017_d);
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_4806253536:;
			{
				this->self->_method_eval_unary_plus(_109017_d);
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_4806253632:;
			{
				this->self->_method_eval_unary_caret(_109017_d);
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_4806253728:;
			{
				this->self->_method_eval_unary_excl(_109017_d);
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4806253824:;
			{
				this->self->_method_eval_unary_star(_109017_d,_108534_u->_field_op);
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4806253920:;
			{
				this->self->_method_eval_unary_amper(_109017_d);
			}
		}
		else {
			_case_begin_4806248544:;
			{
				_109017_d=nullptr;
			}
		}
		_match_end_4806252864:;
	}
	if (_109017_d == nullptr) {
		this->self->_method_push_err(_108534_u->_field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any(_108534_u->_field_op._field_kind),jule::Any(_110113_kind->_method_to_str())}));
	} else if (_109017_d->_method_is_const()) {
		_109017_d->_field_model=jule::Any(_109017_d->_field_constant);
	} else if (_110017_cast_kind != nullptr) {
		_109017_d->_field_cast_kind=_110017_cast_kind;
		_1ebcce31e_apply_cast_kind(_109017_d);
	}
	return _109017_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_variadic(jule::Ptr<_1ea6ee955_VariadicExpr> _112437_v) {
	if (_112437_v->_field_expr == nullptr) {
		this->self->_method_push_err(_112437_v->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _113017_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_113017_prefix;
	});
	jule::Ptr<_1ebcce31e_Data> _113417_d = this->self->_method_eval_expr_kind(_112437_v->_field_expr);
	if (_113417_d == nullptr) {
		return nullptr;
	}
	if ((!(_113417_d->_field_kind->_method_variadicable()))) {
		this->self->_method_push_err(_112437_v->_field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>({jule::Any(_113417_d->_field_kind->_method_to_str())}));
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_Slc> _114413_slc = _113417_d->_field_kind->_method_slc();
	_113417_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(_114413_slc->_field_elem->_field_cpp_ident,_114413_slc->_field_elem->_field_generic,true,_114413_slc->_field_elem->_field_kind));
	return _113417_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_unsafe(jule::Ptr<_1ea6ee955_UnsafeExpr> _115435_u) {
	jule::Bool _115513_unsafety = this->self->_field_unsafety;
	this->self->_field_unsafety=true;
	jule::Ptr<_1ebcce31e_Data> _115817_d = this->self->_method_eval_expr_kind(_115435_u->_field_expr);
	this->self->_field_unsafety=_115513_unsafety;
	return _115817_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_arr(jule::Ptr<_1ea6ee955_SliceExpr> _116532_s) {
	jule::Ptr<_1ec1c55b1_Arr> _116717_pt = this->self->_field_prefix->_method_arr();
	jule::Ptr<_1ec1c55b1_Arr> _116917_arr = jule::new_struct_ptr<_1ec1c55b1_Arr>(new( std::nothrow ) _1ec1c55b1_Arr(false,0LL,_116717_pt->_field_elem));
	jule::Bool _117517_filled = false;
	if (_116532_s->_field_elems.len() == 2LL) {
		{
			auto &_match_expr{ _116532_s->_field_elems[1LL] };
			if (_match_expr.type_is<jule::Ptr<_1ea6ee955_VariadicExpr>>()) {
				_case_begin_4806292016:;
				{
					if (_116532_s->_field_elems[1LL].operator jule::Ptr<_1ea6ee955_VariadicExpr>()->_field_expr != nullptr) {
						goto _match_end_4806292864;
					}
					if (_116717_pt->_field_auto) {
						this->self->_method_push_err(_116532_s->_field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					}
					_117517_filled=true;
					_116532_s->_field_elems=_116532_s->_field_elems.slice(0LL,1LL);
				}
			}
			_match_end_4806292864:;
		}
	}
	_116917_arr->_field_n=static_cast<jule::I64>(_116532_s->_field_elems.len());
	if ((!(_116717_pt->_field_auto))) {
		if (_116917_arr->_field_n > _116717_pt->_field_n) {
			this->self->_method_push_err(_116532_s->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if (_116917_arr->_field_n < _116717_pt->_field_n) {
			_116917_arr->_field_n=_116717_pt->_field_n;
		}
	}
	jule::Ptr<_1eb7ccdea_ArrayExprModel> _120417_model = jule::new_struct<_1eb7ccdea_ArrayExprModel>(new( std::nothrow ) _1eb7ccdea_ArrayExprModel(_116917_arr,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(((_117517_filled) ? (2LL) : (static_cast<jule::I64>(_116532_s->_field_elems.len())))))));
	jule::Ptr<_1ec1c55b1_TypeKind> _120917_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_116917_arr->_field_elem;
	{
		auto &expr = _116532_s->_field_elems;
		auto it = expr.begin();
		_iter_begin_4806305648:;
		if (it != expr.end()) {
			jule::Any _1ebcce31e_elem = *it;
			{
				jule::Ptr<_1ebcce31e_Data> _121221_d = this->self->_method_eval_expr_kind(_1ebcce31e_elem);
				if (_121221_d == nullptr) {
					goto _iter_next_4806305648;
				}
				this->self->_field_s->_method_check_assign_type(false,_116917_arr->_field_elem,_121221_d,_116532_s->_field_token);
				_120417_model->_field_elems = jule::alloc_for_append(_120417_model->_field_elems,1);_120417_model->_field_elems.push(_121221_d->_field_model);
			}
			_iter_next_4806305648:;
			++it;
			goto _iter_begin_4806305648;
		}
		_iter_end_4806305648:;
	}
	this->self->_field_prefix=_120917_prefix;
	if (_117517_filled) {
		_120417_model->_field_elems = jule::alloc_for_append(_120417_model->_field_elems,1);_120417_model->_field_elems.push(jule::Any(nullptr));
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_116917_arr)),jule::Ptr<_1ec1c55b1_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_120417_model),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_exp_slc(jule::Ptr<_1ea6ee955_SliceExpr> _123436_s,jule::Ptr<_1ec1c55b1_TypeKind> _123455_elem_type) {
	jule::Ptr<_1ec1c55b1_Slc> _123517_slc = jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_123455_elem_type));
	jule::Ptr<_1eb7ccdea_SliceExprModel> _123917_model = jule::new_struct<_1eb7ccdea_SliceExprModel>(new( std::nothrow ) _1eb7ccdea_SliceExprModel(_123455_elem_type,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_123436_s->_field_elems.len()))));
	jule::Ptr<_1ec1c55b1_TypeKind> _124417_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_123517_slc->_field_elem;
	{
		auto &expr = _123436_s->_field_elems;
		auto it = expr.begin();
		_iter_begin_4806320192:;
		if (it != expr.end()) {
			jule::Any _1ebcce31e_elem = *it;
			{
				jule::Ptr<_1ebcce31e_Data> _124721_d = this->self->_method_eval_expr_kind(_1ebcce31e_elem);
				if (_124721_d == nullptr) {
					goto _iter_next_4806320192;
				}
				this->self->_field_s->_method_check_assign_type(false,_123517_slc->_field_elem,_124721_d,_123436_s->_field_token);
				_123917_model->_field_elems = jule::alloc_for_append(_123917_model->_field_elems,1);_123917_model->_field_elems.push(_124721_d->_field_model);
			}
			_iter_next_4806320192:;
			++it;
			goto _iter_begin_4806320192;
		}
		_iter_end_4806320192:;
	}
	this->self->_field_prefix=_124417_prefix;
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_123517_slc)),jule::Ptr<_1ec1c55b1_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_123917_model),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_slice_expr(jule::Ptr<_1ea6ee955_SliceExpr> _126439_s) {
	if (this->self->_field_prefix != nullptr) {
		{
			if (this->self->_field_prefix->_method_arr() != nullptr) {
				_case_begin_4806329488:;
				{
					return this->self->_method_eval_arr(_126439_s);
				}
			}
			else if (this->self->_field_prefix->_method_slc() != nullptr) {
				_case_begin_4806329600:;
				{
					jule::Ptr<_1ec1c55b1_Slc> _127125_pt = this->self->_field_prefix->_method_slc();
					return this->self->_method_eval_exp_slc(_126439_s,_127125_pt->_field_elem);
				}
			}
			_match_end_4806329264:;
		}
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _127617_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	if (_126439_s->_field_elems.len() == 0LL) {
		this->self->_method_push_err(_126439_s->_field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _128417_first_elem = this->self->_method_eval_expr_kind(_126439_s->_field_elems[0LL]);
	if (_128417_first_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _128917_d = this->self->_method_eval_exp_slc(_126439_s,_128417_first_elem->_field_kind);
	this->self->_field_prefix=_127617_prefix;
	return _128917_d;
}



inline void _1ebcce31e_Eval::_method_check_integer_indexing_by_data(jule::Ptr<_1ebcce31e_Data>& _129554_d,_1ea7465e5_Token _129564_token) {
	jule::Str _129613_err_key = _1ebcce31e_check_data_for_integer_indexing(_129554_d);
	{
		auto &_match_expr{ _129613_err_key };
		if (_match_expr == jule::Str()) {
			_case_begin_4806345248:;
			{
				return;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_4806344480:;
			{
				(*this)._method_push_err(_129564_token,_129613_err_key,jule::Slice<jule::Any>({jule::Any(_129554_d->_field_kind->_method_to_str())}));
			}
		}
		else {
			_case_begin_4806343184:;
			{
				(*this)._method_push_err(_129564_token,_129613_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_4806344192:;
	}
}



inline void _1ebcce31e_Eval::_method_indexing_ptr(jule::Ptr<_1ebcce31e_Data>& _130936_d,jule::Ptr<_1ebcce31e_Data>& _130951_index,jule::Ptr<_1ea6ee955_IndexingExpr>& _130966_i) {
	(*this)._method_check_integer_indexing_by_data(_130951_index,_130966_i->_field_token);
	jule::Ptr<_1ec1c55b1_Ptr> _131217_ptr = _130936_d->_field_kind->_method_ptr();
	{
		if (_131217_ptr->_method_is_unsafe()) {
			_case_begin_4806354080:;
			{
				(*this)._method_push_err(_130966_i->_field_token,jule::Str("unsafe pointers not supports indexing", 37),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((!((*this)._method_is_unsafe()))) {
			_case_begin_4806354176:;
			{
				(*this)._method_push_err(_130966_i->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_4806353840:;
	}
	_130936_d->_field_kind=_131217_ptr->_field_elem;
}



inline void _1ebcce31e_Eval::_method_indexing_arr(jule::Ptr<_1ebcce31e_Data>& _132536_d,jule::Ptr<_1ebcce31e_Data>& _132551_index,jule::Ptr<_1ea6ee955_IndexingExpr>& _132566_i) {
	jule::Ptr<_1ec1c55b1_Arr> _132617_arr = _132536_d->_field_kind->_method_arr();
	_132536_d->_field_kind=_132617_arr->_field_elem;
	(*this)._method_check_integer_indexing_by_data(_132551_index,_132566_i->_field_token);
	if (_132551_index->_method_is_const() && (_132551_index->_field_constant->_method_as_f64() >= static_cast<jule::F64>(_132617_arr->_field_n))) {
		(*this)._method_push_err(_132566_i->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	}
}



inline void _1ebcce31e_Eval::_method_indexing_slc(jule::Ptr<_1ebcce31e_Data>& _133436_d,jule::Ptr<_1ebcce31e_Data>& _133451_index,jule::Ptr<_1ea6ee955_IndexingExpr>& _133466_i) {
	jule::Ptr<_1ec1c55b1_Slc> _133517_slc = _133436_d->_field_kind->_method_slc();
	_133436_d->_field_kind=_133517_slc->_field_elem;
	(*this)._method_check_integer_indexing_by_data(_133451_index,_133466_i->_field_token);
	if ((!(_133451_index->_method_is_const()))) {
		return;
	}
	{
		auto &_match_expr{ _133436_d->_field_model };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_SliceExprModel>>()) {
			_case_begin_4806373952:;
			{
				jule::Ptr<_1eb7ccdea_SliceExprModel> _134521_m = _133436_d->_field_model.operator jule::Ptr<_1eb7ccdea_SliceExprModel>();
				jule::F64 _134617_indx = _133451_index->_field_constant->_method_as_f64();
				if (_134617_indx >= static_cast<jule::F64>(_134521_m->_field_elems.len())) {
					(*this)._method_push_err(_133466_i->_field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					_133436_d->_field_model=_134521_m->_field_elems[static_cast<jule::Int>(static_cast<jule::U64>(_134617_indx))];
					_133436_d->_field_decl=true;
				}
			}
		}
		_match_end_4806374192:;
	}
}



inline void _1ebcce31e_Eval::_method_indexing_map(jule::Ptr<_1ebcce31e_Data>& _135636_d,jule::Ptr<_1ebcce31e_Data>& _135651_index,jule::Ptr<_1ea6ee955_IndexingExpr>& _135670_i) {
	if (_135651_index == nullptr) {
		return;
	}
	jule::Ptr<_1ec1c55b1_Map> _136117_m = _135636_d->_field_kind->_method_map();
	_1eba534e4_AssignTypeChecker _136217_atc = _1eba534e4_AssignTypeChecker((*this)._field_s,_136117_m->_field_key,_135651_index,_135670_i->_field_token);
	_136217_atc._method_check();
	_135636_d->_field_kind=_136117_m->_field_val;
}



inline void _1ebcce31e_Eval::_method_indexing_str(jule::Ptr<_1ebcce31e_Data>& _137336_d,jule::Ptr<_1ebcce31e_Data>& _137351_index,jule::Ptr<_1ea6ee955_IndexingExpr>& _137366_i) {
	
	_137336_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u8", 2))));
	if (_137351_index == nullptr) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_137351_index,_137366_i->_field_token);
	if ((!(_137351_index->_method_is_const()))) {
		_137336_d->_field_constant=nullptr;
		return;
	}
	if (_137336_d->_method_is_const()) {
		_1ea7465e5_Token _138917_error_token = _137366_i->_field_token;
		jule::I64 _139017_j = _137351_index->_field_constant->_method_as_i64();
		jule::Str _139117_s = _137336_d->_field_constant->_method_read_str();
		if (static_cast<jule::Int>(_139017_j) >= _139117_s.len()) {
			(*this)._method_push_err(_138917_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			_137336_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_139117_s[_139017_j]));
		}
	}
}



inline void _1ebcce31e_Eval::_method_to_indexing(jule::Ptr<_1ebcce31e_Data>& _140035_d,jule::Ptr<_1ebcce31e_Data>& _140050_index,jule::Ptr<_1ea6ee955_IndexingExpr>& _140069_i) {
	{
		if (_140035_d->_field_kind->_method_ptr() != nullptr) {
			_case_begin_4806408272:;
			{
				(*this)._method_indexing_ptr(_140035_d,_140050_index,_140069_i);
				return;
			}
		}
		else if (_140035_d->_field_kind->_method_arr() != nullptr) {
			_case_begin_4806408384:;
			{
				(*this)._method_indexing_arr(_140035_d,_140050_index,_140069_i);
				return;
			}
		}
		else if (_140035_d->_field_kind->_method_slc() != nullptr) {
			_case_begin_4806408496:;
			{
				(*this)._method_indexing_slc(_140035_d,_140050_index,_140069_i);
				return;
			}
		}
		else if (_140035_d->_field_kind->_method_map() != nullptr) {
			_case_begin_4806408608:;
			{
				(*this)._method_indexing_map(_140035_d,_140050_index,_140069_i);
				return;
			}
		}
		else if (_140035_d->_field_kind->_method_prim() != nullptr) {
			_case_begin_4806408720:;
			{
				jule::Ptr<_1ec1c55b1_Prim> _141917_prim = _140035_d->_field_kind->_method_prim();
				{
					if (_141917_prim->_method_is_str()) {
						_case_begin_4806420096:;
						{
							(*this)._method_indexing_str(_140035_d,_140050_index,_140069_i);
							return;
						}
					}
					_match_end_4806419952:;
				}
			}
		}
		_match_end_4806408000:;
	}
	(*this)._method_push_err(_140069_i->_field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>({jule::Any(_140035_d->_field_kind->_method_to_str())}));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_ident_decl_from_indexing(jule::Ptr<_1ea6ee955_IndexingExpr>& _143054_i) {
	{
		auto &_match_expr{ _143054_i->_field_expr };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentExpr>>()) {
			_case_begin_4806427872:;
		}
		else {
			_case_begin_4806425200:;
			{
				this->self->_method_push_err(_143054_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4806425424:;
	}
	jule::Ptr<_1ea6ee955_IdentTypeDecl> _143817_decl = jule::new_struct<_1ea6ee955_IdentTypeDecl>(new( std::nothrow ) _1ea6ee955_IdentTypeDecl(_1ea7465e5_Token(),_143054_i->_field_expr.operator jule::Ptr<_1ea6ee955_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>()));
	{
		auto &_match_expr{ _143054_i->_field_index };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UnaryExpr>>()) {
			_case_begin_4806431968:;
			{
				jule::Ptr<_1ebcce31e_Data> _144621_d = this->self->_method_eval_unary(_143054_i->_field_index.operator jule::Ptr<_1ea6ee955_UnaryExpr>());
				if ((!(_144621_d->_field_decl))) {
					this->self->_method_push_err(_143054_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return nullptr;
				}
				_143817_decl->_field_generics = jule::alloc_for_append(_143817_decl->_field_generics,1);_143817_decl->_field_generics.push(jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_1ea7465e5_Token(),jule::Any(_144621_d->_field_kind))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TypeDecl>>()) {
			_case_begin_4806432160:;
			{
				_143817_decl->_field_generics = jule::alloc_for_append(_143817_decl->_field_generics,1);_143817_decl->_field_generics.push(_143054_i->_field_index.operator jule::Ptr<_1ea6ee955_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentExpr>>()) {
			_case_begin_4806432256:;
			{
				_143817_decl->_field_generics = jule::alloc_for_append(_143817_decl->_field_generics,1);_143817_decl->_field_generics.push(jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_1ea7465e5_Token(),jule::Any(jule::new_struct<_1ea6ee955_IdentTypeDecl>(new( std::nothrow ) _1ea6ee955_IdentTypeDecl(_1ea7465e5_Token(),_143054_i->_field_index.operator jule::Ptr<_1ea6ee955_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>()))))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TupleExpr>>()) {
			_case_begin_4806431696:;
			{
				{
					auto &expr = _143054_i->_field_index.operator jule::Ptr<_1ea6ee955_TupleExpr>()->_field_expr;
					auto it = expr.begin();
					_iter_begin_4806440768:;
					if (it != expr.end()) {
						jule::Ptr<_1ea6ee955_Expr> _1ebcce31e_expr = *it;
						{
							{
								auto &_match_expr{ _1ebcce31e_expr->_field_kind };
								if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TypeDecl>>()) {
									_case_begin_4806443712:;
									{
										_143817_decl->_field_generics = jule::alloc_for_append(_143817_decl->_field_generics,1);_143817_decl->_field_generics.push(_1ebcce31e_expr->_field_kind.operator jule::Ptr<_1ea6ee955_TypeDecl>());
									}
								}
								else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentExpr>>()) {
									_case_begin_4806444240:;
									{
										_143817_decl->_field_generics = jule::alloc_for_append(_143817_decl->_field_generics,1);_143817_decl->_field_generics.push(jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_1ea7465e5_Token(),jule::Any(jule::new_struct<_1ea6ee955_IdentTypeDecl>(new( std::nothrow ) _1ea6ee955_IdentTypeDecl(_1ea7465e5_Token(),_1ebcce31e_expr->_field_kind.operator jule::Ptr<_1ea6ee955_IdentExpr>()->_field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1ea6ee955_TypeDecl>>()))))));
									}
								}
								_match_end_4806444160:;
							}
						}
						_iter_next_4806440768:;
						++it;
						goto _iter_begin_4806440768;
					}
					_iter_end_4806440768:;
				}
			}
		}
		else {
			_case_begin_4806426192:;
			{
				this->self->_method_push_err(_143054_i->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4806429632:;
	}
	return this->self->_method_eval_type(jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_1ea7465e5_Token(),jule::Any(_143817_decl))));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_indexing(jule::Ptr<_1ea6ee955_IndexingExpr> _148237_i) {
	jule::Ptr<_1ec1c55b1_TypeKind> _148317_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_148317_prefix;
	});
	jule::Ptr<_1ebcce31e_Data> _148717_d = this->self->_method_eval_expr_kind(_148237_i->_field_expr);
	if (_148717_d == nullptr) {
		return nullptr;
	}
	if (_148717_d->_field_decl) {
		return this->self->_method_eval_ident_decl_from_indexing(_148237_i);
	}
	_1ebcce31e_Data _149717_old_d = (*(_148717_d));
	jule::Ptr<_1ebcce31e_Data> _149917_index = this->self->_method_eval_expr_kind(_148237_i->_field_index);
	if (_149917_index == nullptr) {
		return nullptr;
	}
	_148717_d->_field_decl=false;
	this->self->_method_to_indexing(_148717_d,_149917_index,_148237_i);
	if (_148717_d->_method_is_const()) {
		_148717_d->_field_decl=false;
		_148717_d->_field_model=jule::Any(_148717_d->_field_constant);
	} else if (_148717_d->_field_decl) {
		_148717_d->_field_decl=false;
	} else {
		_148717_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_IndexigExprModel>(new( std::nothrow ) _1eb7ccdea_IndexigExprModel(jule::new_ptr<_1ebcce31e_Data>(_149717_old_d),_149917_index)));
	}
	return _148717_d;
}



inline std::tuple<jule::Ptr<_1ebcce31e_Data>,jule::Ptr<_1ebcce31e_Data>> _1ebcce31e_Eval::_method_eval_slicing_exprs(jule::Ptr<_1ea6ee955_SlicingExpr>& _152943_s) {
	jule::Ptr<_1ec1c55b1_TypeKind> _153017_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_153017_prefix;
	});
	jule::Ptr<_1ebcce31e_Data> _153417_l = nullptr;
	jule::Ptr<_1ebcce31e_Data> _153517_r = nullptr;
	if (_152943_s->_field_start != nullptr) {
		_153417_l=this->self->_method_eval_expr_kind(_152943_s->_field_start);
		if (_153417_l != nullptr) {
			this->self->_method_check_integer_indexing_by_data(_153417_l,_152943_s->_field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	} else {
		_153417_l=jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ec3e4b65_Const::_static_method_new_i64(0LL)));
		_153417_l->_field_model=jule::Any(_153417_l->_field_constant);
	}
	if (_152943_s->_field_to != nullptr) {
		_153517_r=this->self->_method_eval_expr_kind(_152943_s->_field_to);
		if (_153517_r != nullptr) {
			this->self->_method_check_integer_indexing_by_data(_153517_r,_152943_s->_field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	}
	return std::make_tuple(_153417_l,_153517_r);
}



inline void _1ebcce31e_Eval::_method_slicing_arr(jule::Ptr<_1ebcce31e_Data>& _156431_d) {
	jule::Ptr<_1ec1c55b1_TypeKind> _156517_elem_type = _156431_d->_field_kind->_method_arr()->_field_elem;
	_156431_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_156517_elem_type))));
	_156431_d->_field_lvalue=false;
	_156431_d->_field_mutable=_156431_d->_field_mutable || (!(_156517_elem_type->_method_mutable()));
}



inline void _1ebcce31e_Eval::_method_slicing_slc(jule::Ptr<_1ebcce31e_Data>& _157531_d) {
	_157531_d->_field_lvalue=false;
}



inline void _1ebcce31e_Eval::_method_slicing_str(jule::Ptr<_1ebcce31e_Data>& _157931_d,jule::Ptr<_1ebcce31e_Data>& _157942_l,jule::Ptr<_1ebcce31e_Data>& _157953_r) {
	_157931_d->_field_lvalue=false;
	_157931_d->_field_mutable=true;
	if ((!(_157931_d->_method_is_const()))) {
		return;
	}
	if ((_157942_l == nullptr) || (_157953_r == nullptr)) {
		_157931_d->_field_constant=nullptr;
		return;
	}
	if (_157942_l->_method_is_const() && _157953_r->_method_is_const()) {
		jule::I64 _159217_left = _157942_l->_field_constant->_method_as_i64();
		if (_159217_left < 0LL) {
			return;
		}
		jule::Str _159717_s = _157931_d->_field_constant->_method_read_str();
		jule::I64 _159821_right = 0LL;
		if (_157953_r == nullptr) {
			_159821_right=static_cast<jule::I64>(_159717_s.len());
		} else {
			_159821_right=static_cast<jule::I64>(_157953_r->_field_constant->_method_as_i64());
		}
		if (_159217_left > _159821_right) {
			return;
		}
		_157931_d->_field_constant->_method_set_str(_159717_s.slice(_159217_left,_159821_right));
		_157931_d->_field_decl=true;
	} else {
		_157931_d->_field_constant=nullptr;
	}
}



inline void _1ebcce31e_Eval::_method_check_slicing(jule::Ptr<_1ebcce31e_Data>& _161537_d,jule::Ptr<_1ebcce31e_Data>& _161548_l,jule::Ptr<_1ebcce31e_Data>& _161559_r,jule::Ptr<_1ea6ee955_SlicingExpr>& _161570_s) {
	{
		if (_161537_d->_field_kind->_method_arr() != nullptr) {
			_case_begin_4806505904:;
			{
				(*this)._method_slicing_arr(_161537_d);
				return;
			}
		}
		else if (_161537_d->_field_kind->_method_slc() != nullptr) {
			_case_begin_4806506016:;
			{
				(*this)._method_slicing_slc(_161537_d);
				return;
			}
		}
		else if (_161537_d->_field_kind->_method_prim() != nullptr) {
			_case_begin_4806506128:;
			{
				jule::Ptr<_1ec1c55b1_Prim> _162617_prim = _161537_d->_field_kind->_method_prim();
				{
					if (_162617_prim->_method_is_str()) {
						_case_begin_4806513280:;
						{
							(*this)._method_slicing_str(_161537_d,_161548_l,_161559_r);
							return;
						}
					}
					_match_end_4806513136:;
				}
			}
		}
		_match_end_4806505728:;
	}
	(*this)._method_push_err(_161570_s->_field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>({jule::Any(_161537_d->_field_kind->_method_to_str())}));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_slicing(jule::Ptr<_1ea6ee955_SlicingExpr> _163736_s) {
	jule::Ptr<_1ebcce31e_Data> _163817_d = this->self->_method_eval_expr_kind(_163736_s->_field_expr);
	if (_163817_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _164318_l;
	jule::Ptr<_1ebcce31e_Data> _164325_r;
	std::tie(_164318_l,_164325_r) = this->self->_method_eval_slicing_exprs(_163736_s);
	if (_164318_l == nullptr) {
		return _163817_d;
	}
	_163817_d->_field_decl=false;
	this->self->_method_check_slicing(_163817_d,_164318_l,_164325_r,_163736_s);
	_163817_d->_field_cast_kind=nullptr;
	if (_163817_d->_method_is_const()) {
		_163817_d->_field_decl=false;
		_163817_d->_field_model=jule::Any(_163817_d->_field_constant);
	} else if (_163817_d->_field_decl) {
		_163817_d->_field_decl=false;
	} else {
		jule::Ptr<_1eb7ccdea_SlicingExprModel> _166221_model = jule::new_struct<_1eb7ccdea_SlicingExprModel>(new( std::nothrow ) _1eb7ccdea_SlicingExprModel(_163817_d->_field_model,_164318_l->_field_model,jule::Any()));
		if (_164325_r != nullptr) {
			_166221_model->_field_right=_164325_r->_field_model;
		}
		_163817_d->_field_model=jule::Any(_166221_model);
	}
	return _163817_d;
}



inline void _1ebcce31e_Eval::_method_cast_ptr(jule::Ptr<_1ec1c55b1_TypeKind> _167731_t,jule::Ptr<_1ebcce31e_Data> _167749_d,_1ea7465e5_Token _167759_error_token) {
	jule::Ptr<_1ec1c55b1_Sptr> _167813_sptr = _167749_d->_field_kind->_method_sptr();
	if (_167813_sptr != nullptr) {
		if ((!(_167731_t->_method_ptr()->_field_elem->_method_equals(_167813_sptr->_field_elem)))) {
			(*this)._method_push_err(_167759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_167749_d->_field_kind->_method_to_str()),jule::Any(_167731_t->_method_to_str())}));
		}
		return;
	}
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_167759_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ec1c55b1_Prim> _169113_prim = _167749_d->_field_kind->_method_prim();
	if ((_167749_d->_field_kind->_method_ptr() == nullptr) && ((_169113_prim == nullptr) || (!(_1ec4784ce_is_int(_169113_prim->_method_to_str()))))) {
		(*this)._method_push_err(_167759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_167749_d->_field_kind->_method_to_str()),jule::Any(_167731_t->_method_to_str())}));
	}
	_167749_d->_field_constant=nullptr;
}



inline void _1ebcce31e_Eval::_method_cast_struct(jule::Ptr<_1ec1c55b1_TypeKind> _169934_t,jule::Ptr<_1ebcce31e_Data> _169952_d,_1ea7465e5_Token _169962_error_token) {
	jule::Ptr<_1eb7c68e9_Trait> _170017_tr = _169952_d->_field_kind->_method_trt();
	if (_170017_tr == nullptr) {
		(*this)._method_push_err(_169962_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_169952_d->_field_kind->_method_to_str()),jule::Any(_169934_t->_method_to_str())}));
		return;
	}
	jule::Ptr<_1eb29bdd6_StructIns> _170617_s = _169934_t->_method_strct();
	(*this)._method_push_reference_to_struct(_170617_s);
	if ((!(_170617_s->_field_decl->_method_is_implements(_170017_tr)))) {
		(*this)._method_push_err(_169962_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_169952_d->_field_kind->_method_to_str()),jule::Any(_169934_t->_method_to_str())}));
	}
}



inline void _1ebcce31e_Eval::_method_cast_ref(jule::Ptr<_1ec1c55b1_TypeKind> _171431_t,jule::Ptr<_1ebcce31e_Data> _171449_d,_1ea7465e5_Token _171459_error_token) {
	jule::Ptr<_1ec1c55b1_Sptr> _171517_sptr = _171431_t->_method_sptr();
	jule::Ptr<_1ec1c55b1_Ptr> _171717_ptr = _171449_d->_field_kind->_method_ptr();
	if ((_171717_ptr != nullptr) && _171517_sptr->_field_elem->_method_equals(_171717_ptr->_field_elem)) {
		if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_171459_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		}
		return;
	}
	if (_171517_sptr->_field_elem->_method_strct() != nullptr) {
		(*this)._method_cast_struct(_171517_sptr->_field_elem,_171449_d,_171459_error_token);
		return;
	}
	(*this)._method_push_err(_171459_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_171449_d->_field_kind->_method_to_str()),jule::Any(_171431_t->_method_to_str())}));
}



inline void _1ebcce31e_Eval::_method_cast_slc(jule::Ptr<_1ec1c55b1_TypeKind> _173631_t,jule::Ptr<_1ebcce31e_Data> _173649_d,_1ea7465e5_Token _173659_error_token) {
	if (_173649_d->_field_kind->_method_enm() != nullptr) {
		if ((_173649_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim() == nullptr) || (!(_173649_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()->_method_is_str()))) {
			(*this)._method_push_err(_173659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_173649_d->_field_kind->_method_to_str()),jule::Any(_173631_t->_method_to_str())}));
			return;
		}
	} else if ((_173649_d->_field_kind->_method_prim() == nullptr) || (!(_173649_d->_field_kind->_method_prim()->_method_is_str()))) {
		(*this)._method_push_err(_173659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_173649_d->_field_kind->_method_to_str()),jule::Any(_173631_t->_method_to_str())}));
		return;
	}
	_173631_t=_173631_t->_method_slc()->_field_elem;
	jule::Ptr<_1ec1c55b1_Prim> _174813_prim = _173631_t->_method_prim();
	if ((_174813_prim == nullptr) || ((!(_174813_prim->_method_is_u8())) && (!(_174813_prim->_method_is_i32())))) {
		(*this)._method_push_err(_173659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_173649_d->_field_kind->_method_to_str()),jule::Any(_173631_t->_method_to_str())}));
	}
}



inline void _1ebcce31e_Eval::_method_cast_str(jule::Ptr<_1ebcce31e_Data> _175431_d,_1ea7465e5_Token _175441_error_token) {
	if (_175431_d->_field_kind->_method_enm() != nullptr) {
		jule::Ptr<_1eb7c7e7d_Enum> _175621_e = _175431_d->_field_kind->_method_enm();
		if ((_175621_e->_field_kind->_field_kind->_method_prim() != nullptr) && _175621_e->_field_kind->_field_kind->_method_prim()->_method_is_str()) {
			return;
		}
	}
	if (_175431_d->_field_kind->_method_prim() != nullptr) {
		jule::Ptr<_1ec1c55b1_Prim> _176317_prim = _175431_d->_field_kind->_method_prim();
		if ((!(_176317_prim->_method_is_u8())) && (!(_176317_prim->_method_is_i32()))) {
			(*this)._method_push_err(_175441_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_175431_d->_field_kind->_method_to_str())}));
		}
		return;
	}
	if (_175431_d->_field_kind->_method_slc() == nullptr) {
		(*this)._method_push_err(_175441_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_175431_d->_field_kind->_method_to_str())}));
		return;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _177517_t = _175431_d->_field_kind->_method_slc()->_field_elem;
	jule::Ptr<_1ec1c55b1_Prim> _177613_prim = _177517_t->_method_prim();
	if ((_177613_prim == nullptr) || ((!(_177613_prim->_method_is_u8())) && (!(_177613_prim->_method_is_i32())))) {
		(*this)._method_push_err(_175441_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_175431_d->_field_kind->_method_to_str())}));
	}
}



inline void _1ebcce31e_Eval::_method_cast_int(jule::Ptr<_1ec1c55b1_TypeKind> _178231_t,jule::Ptr<_1ebcce31e_Data> _178249_d,_1ea7465e5_Token _178259_error_token) {
	if (_178249_d->_method_is_const()) {
		jule::Ptr<_1ec1c55b1_Prim> _178417_prim = _178231_t->_method_prim();
		{
			if (_1ec4784ce_is_sig_int(_178417_prim->_field_kind)) {
				_case_begin_4806615696:;
				{
					_178249_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_178249_d->_field_constant->_method_as_i64()));
				}
			}
			else if (_1ec4784ce_is_unsig_int(_178417_prim->_field_kind)) {
				_case_begin_4806615808:;
				{
					_178249_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_178249_d->_field_constant->_method_as_u64()));
				}
			}
			_match_end_4806615536:;
		}
	}
	if (_178249_d->_field_kind->_method_enm() != nullptr) {
		jule::Ptr<_1eb7c7e7d_Enum> _179517_e = _178249_d->_field_kind->_method_enm();
		if (_1ec4784ce_is_num(_179517_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	if (_178249_d->_field_kind->_method_sptr() != nullptr) {
		jule::Ptr<_1ec1c55b1_Prim> _180217_prim = _178231_t->_method_prim();
		if ((!(_180217_prim->_method_is_uintptr()))) {
			(*this)._method_push_err(_178259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_178249_d->_field_kind->_method_to_str()),jule::Any(_178231_t->_method_to_str())}));
		}
		return;
	}
	if (_178249_d->_field_kind->_method_ptr() != nullptr) {
		jule::Ptr<_1ec1c55b1_Prim> _180917_prim = _178231_t->_method_prim();
		if (_180917_prim->_method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_178259_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if (((((!(_180917_prim->_method_is_i32())) && (!(_180917_prim->_method_is_i64()))) && (!(_180917_prim->_method_is_u16()))) && (!(_180917_prim->_method_is_u32()))) && (!(_180917_prim->_method_is_u64()))) {
			(*this)._method_push_err(_178259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_178249_d->_field_kind->_method_to_str()),jule::Any(_178231_t->_method_to_str())}));
		}
		return;
	}
	jule::Ptr<_1ec1c55b1_Prim> _182013_prim = _178249_d->_field_kind->_method_prim();
	if ((_182013_prim != nullptr) && _1ec4784ce_is_num(_182013_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_178259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_178249_d->_field_kind->_method_to_str()),jule::Any(_178231_t->_method_to_str())}));
}



inline void _1ebcce31e_Eval::_method_cast_num(jule::Ptr<_1ec1c55b1_TypeKind> _182831_t,jule::Ptr<_1ebcce31e_Data> _182849_d,_1ea7465e5_Token _182859_error_token) {
	if (_182849_d->_method_is_const()) {
		jule::Ptr<_1ec1c55b1_Prim> _183017_prim = _182831_t->_method_prim();
		{
			if (_1ec4784ce_is_float(_183017_prim->_field_kind)) {
				_case_begin_4806651760:;
				{
					_182849_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_182849_d->_field_constant->_method_as_f64()));
				}
			}
			else if (_1ec4784ce_is_sig_int(_183017_prim->_field_kind)) {
				_case_begin_4806651856:;
				{
					_182849_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_182849_d->_field_constant->_method_as_i64()));
				}
			}
			else if (_1ec4784ce_is_unsig_int(_183017_prim->_field_kind)) {
				_case_begin_4806651952:;
				{
					_182849_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_182849_d->_field_constant->_method_as_u64()));
				}
			}
			_match_end_4805304736:;
		}
	}
	if (_182849_d->_field_kind->_method_enm() != nullptr) {
		jule::Ptr<_1eb7c7e7d_Enum> _184417_e = _182849_d->_field_kind->_method_enm();
		if (_1ec4784ce_is_num(_184417_e->_field_kind->_field_kind->_method_to_str())) {
			return;
		}
	}
	jule::Ptr<_1ec1c55b1_Prim> _185013_prim = _182849_d->_field_kind->_method_prim();
	if ((_185013_prim != nullptr) && _1ec4784ce_is_num(_185013_prim->_method_to_str())) {
		return;
	}
	(*this)._method_push_err(_182859_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_182849_d->_field_kind->_method_to_str()),jule::Any(_182831_t->_method_to_str())}));
}



inline void _1ebcce31e_Eval::_method_cast_prim(jule::Ptr<_1ec1c55b1_TypeKind> _185832_t,jule::Ptr<_1ebcce31e_Data> _185850_d,_1ea7465e5_Token _185860_error_token) {
	jule::Ptr<_1ec1c55b1_Prim> _185913_prim = _185832_t->_method_prim();
	{
		if (_185913_prim->_method_is_any()) {
			_case_begin_4805100464:;
		}
		else if (_185913_prim->_method_is_str()) {
			_case_begin_4806671584:;
			{
				(*this)._method_cast_str(_185850_d,_185860_error_token);
			}
		}
		else if (_1ec4784ce_is_int(_185913_prim->_method_to_str())) {
			_case_begin_4806670752:;
			{
				(*this)._method_cast_int(_185832_t,_185850_d,_185860_error_token);
			}
		}
		else if (_1ec4784ce_is_num(_185913_prim->_method_to_str())) {
			_case_begin_4806670848:;
			{
				(*this)._method_cast_num(_185832_t,_185850_d,_185860_error_token);
			}
		}
		else {
			_case_begin_4806670448:;
			{
				(*this)._method_push_err(_185860_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any(_185832_t->_method_to_str())}));
			}
		}
		_match_end_4806670336:;
	}
}



inline void _1ebcce31e_Eval::_method_cast_constant(jule::Ptr<_1ec1c55b1_TypeKind>& _187837_t,jule::Ptr<_1ebcce31e_Data>& _187856_d) {
	jule::Ptr<_1ec1c55b1_Prim> _187913_prim = _187837_t->_method_prim();
	if ((_187913_prim == nullptr) || (!(_187856_d->_method_is_const()))) {
		return;
	}
	{
		if (_1ec4784ce_is_sig_int(_187913_prim->_field_kind)) {
			_case_begin_4806701088:;
			{
				_187856_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_187856_d->_field_constant->_method_as_i64()));
			}
		}
		else if (_1ec4784ce_is_unsig_int(_187913_prim->_field_kind)) {
			_case_begin_4806701184:;
			{
				_187856_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_187856_d->_field_constant->_method_as_u64()));
			}
		}
		else if (_1ec4784ce_is_float(_187913_prim->_field_kind)) {
			_case_begin_4806701280:;
			{
				_187856_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_187856_d->_field_constant->_method_as_f64()));
			}
		}
		_match_end_4806699856:;
	}
	_187856_d->_field_model=jule::Any(_187856_d->_field_constant);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_cast_by_type_n_data(jule::Ptr<_1ec1c55b1_TypeKind> _189847_t,jule::Ptr<_1ebcce31e_Data> _189865_d,_1ea7465e5_Token _189875_error_token) {
	if ((_189865_d != nullptr) && _189865_d->_field_decl) {
		(*this)._method_push_err(_189875_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	{
		if ((_189865_d->_field_kind->_method_prim() != nullptr) && _189865_d->_field_kind->_method_prim()->_method_is_any()) {
			_case_begin_4806716096:;
			{
				if (_189847_t->_method_enm() != nullptr) {
					(*this)._method_push_err(_189875_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				}
			}
		}
		else if (_189847_t->_method_ptr() != nullptr) {
			_case_begin_4806716192:;
			{
				(*this)._method_cast_ptr(_189847_t,_189865_d,_189875_error_token);
			}
		}
		else if (_189847_t->_method_sptr() != nullptr) {
			_case_begin_4806714016:;
			{
				(*this)._method_cast_ref(_189847_t,_189865_d,_189875_error_token);
			}
		}
		else if (_189847_t->_method_slc() != nullptr) {
			_case_begin_4806714112:;
			{
				(*this)._method_cast_slc(_189847_t,_189865_d,_189875_error_token);
			}
		}
		else if (_189847_t->_method_strct() != nullptr) {
			_case_begin_4806714208:;
			{
				(*this)._method_cast_struct(_189847_t,_189865_d,_189875_error_token);
			}
		}
		else if (_189847_t->_method_prim() != nullptr) {
			_case_begin_4806714304:;
			{
				(*this)._method_cast_prim(_189847_t,_189865_d,_189875_error_token);
			}
		}
		else {
			_case_begin_4806711536:;
			{
				(*this)._method_push_err(_189875_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any(_189847_t->_method_to_str())}));
				_189865_d=nullptr;
			}
		}
		_match_end_4806713392:;
	}
	if (_189865_d == nullptr) {
		return nullptr;
	}
	_189865_d->_field_mutable=_189865_d->_field_mutable || ((!(_189865_d->_field_kind->_method_mutable())) && _189847_t->_method_mutable());
	_189865_d->_field_lvalue=false;
	_189865_d->_field_decl=false;
	(*this)._method_cast_constant(_189847_t,_189865_d);
	if ((_189865_d->_field_kind->_method_enm() == nullptr) || (!(_189865_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_equals(_189847_t)))) {
		_189865_d->_field_cast_kind=_189847_t;
	} else {
		_189865_d->_field_kind=_189847_t;
	}
	return _189865_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_cast(jule::Ptr<_1ea6ee955_CastExpr> _195333_c) {
	jule::Ptr<_1ec1c55b1_TypeSymbol> _195417_t = _1eb736eec_build_type(_195333_c->_field_kind);
	jule::Bool _195513_ok = this->self->_field_s->_method_check_type(_195417_t,this->self->_field_lookup);
	if ((!(_195513_ok))) {
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _196017_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_196017_prefix;
	});
	jule::Ptr<_1ebcce31e_Data> _196417_d = this->self->_method_eval_expr_kind(_195333_c->_field_expr);
	if (_196417_d == nullptr) {
		return nullptr;
	}
	return this->self->_method_eval_cast_by_type_n_data(_195417_t->_field_kind,_196417_d,_195333_c->_field_kind->_field_token);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_ns_selection(jule::Ptr<_1ea6ee955_NsSelectionExpr> _197236_s) {
	jule::Str _197313_path = _1ec1c55b1_build_link_path_by_tokens(_197236_s->_field_ns);
	jule::Ptr<_1eb7d8048_ImportInfo> _197417_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>([=](jule::Ptr<_1eb7d8048_ImportInfo> _197453_imp) mutable -> jule::Bool {
		if ((_197236_s->_field_ns.len() == 1LL) && (_197453_imp->_field_alias == _197313_path)) {
			return true;
		}
		return (_197453_imp->_field_link_path == _197313_path) && _197453_imp->_method_is_accessible_via_selection();
	}));
	if (_197417_imp == nullptr) {
		(*this)._method_push_err(_197236_s->_field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_197313_path)}));
		return nullptr;
	}
	jule::Trait<_1ec2d8be1_Lookup> _198617_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_197417_imp;
	
	(*this)._method_disallow_builtin();
	jule::Any _199117_def = (*this)._method_get_def(_197236_s->_field_ident._field_kind,false);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_198617_lookup;
	jule::Ptr<_1ebcce31e_Data> _199517_d = (*this)._method_eval_def(_199117_def,_197236_s->_field_ident);
	return _199517_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_struct_lit_explicit(jule::Ptr<_1eb29bdd6_StructIns> _200048_s,jule::Slice<jule::Any> _200113_exprs,_1ea7465e5_Token _200136_error_token) {
	jule::Bool _200213_ok = this->self->_field_s->_method_check_generic_quantity(static_cast<jule::I64>(_200048_s->_field_decl->_field_generics.len()),static_cast<jule::I64>(_200048_s->_field_generics.len()),_200136_error_token);
	if ((!(_200213_ok))) {
		return nullptr;
	}
	this->self->_method_push_reference_to_struct(_200048_s);
	this->self->_method_check_deprecated(_200048_s->_field_decl->_field_directives,_200136_error_token);
	_1eba534e4_StructLitChecker _201117_slc = _1eba534e4_StructLitChecker(this->self,_200136_error_token,_200048_s,jule::Slice<jule::Ptr<_1eb7ccdea_StructArgExprModel>>());
	_201117_slc._method_check(_200113_exprs);
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_200048_s)),jule::Ptr<_1ec1c55b1_TypeKind>(),(!(this->self->_field_immutable)),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_StructLitExprModel>(new( std::nothrow ) _1eb7ccdea_StructLitExprModel(_200048_s,_201117_slc._field_args))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_struct_lit(jule::Ptr<_1ea6ee955_StructLit> _202839_lit) {
	jule::Ptr<_1ec1c55b1_TypeSymbol> _202917_t = _1eb736eec_build_type(_202839_lit->_field_kind);
	jule::Bool _203013_ok = this->self->_field_s->_method_check_type(_202917_t,this->self->_field_lookup);
	if ((!(_203013_ok))) {
		return nullptr;
	}
	jule::Ptr<_1eb29bdd6_StructIns> _203517_s = _202917_t->_field_kind->_method_strct();
	if (_203517_s == nullptr) {
		if (_202917_t->_field_kind->_method_sptr() != nullptr) {
			_203517_s=_202917_t->_field_kind->_method_sptr()->_field_elem->_method_strct();
			if (_203517_s != nullptr) {
				goto _julec_label_eval;
			}
		}
		this->self->_method_push_err(_202839_lit->_field_kind->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_eval:;
	jule::Ptr<_1ebcce31e_Data> _204817_d = this->self->_method_eval_struct_lit_explicit(_203517_s,_202839_lit->_field_exprs,_202839_lit->_field_kind->_field_token);
	if (_202917_t->_field_kind->_method_sptr() != nullptr) {
		jule::Ptr<_1eb7ccdea_StructLitExprModel> _205021_model = _204817_d->_field_model.operator jule::Ptr<_1eb7ccdea_StructLitExprModel>();
		_1ebcce31e_make_struct_lit_alloc(_204817_d,_205021_model);
	}
	return _204817_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_type(jule::Ptr<_1ea6ee955_TypeDecl> _205632_t) {
	jule::Ptr<_1ec1c55b1_TypeSymbol> _205717_tk = _1eb736eec_build_type(_205632_t);
	jule::Bool _205813_ok = (*this)._field_s->_method_check_type(_205717_tk,(*this)._field_lookup);
	if ((!(_205813_ok))) {
		return nullptr;
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(_205717_tk->_field_kind,jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_205717_tk->_field_kind),true,jule::Ptr<_1ec3e4b65_Const>()));
}



inline void _1ebcce31e_Eval::_method_call_type_fn(jule::Ptr<_1ea6ee955_FnCallExpr>& _207037_fc,jule::Ptr<_1ebcce31e_Data>& _207059_d) {
	if (_207037_fc->_field_generics.len() > 0LL) {
		this->self->_method_push_err(_207037_fc->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_207059_d->_field_kind->_method_to_str())}));
	} else if (_207037_fc->_field_args.len() < 1LL) {
		this->self->_method_push_err(_207037_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if (_207037_fc->_field_args.len() > 1LL) {
		this->self->_method_push_err(_207037_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	if (_207037_fc->_field_args.len() > 0LL) {
		jule::Ptr<_1ebcce31e_Data> _208021_arg = this->self->_method_eval_expr_kind(_207037_fc->_field_args[0LL]->_field_kind);
		if (_208021_arg != nullptr) {
			_207059_d=this->self->_method_eval_cast_by_type_n_data(_207059_d->_field_kind,_208021_arg,_207037_fc->_field_args[0LL]->_field_token);
		}
	}
	if (_207059_d != nullptr) {
		_207059_d->_field_decl=false;
	}
}



inline std::tuple<jule::Bool,jule::Bool> _1ebcce31e_Eval::_method_check_fn_call_generics(jule::Ptr<_1eb627195_FnIns> _209245_f,jule::Ptr<_1ea6ee955_FnCallExpr> _209313_fc) {
	jule::Bool _209332_ok = jule::Bool();
	jule::Bool _209342_dynamic_annotation = jule::Bool();
	{
		if (((_209245_f->_field_decl->_field_generics.len() > 0LL) && (_209313_fc->_field_generics.len() == 0LL)) && (_209245_f->_field_params.len() > 0LL)) {
			_case_begin_4806830608:;
			{
				_209342_dynamic_annotation=true;
				_209245_f->_field_generics=jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>::alloc(static_cast<jule::I64>(_209245_f->_field_decl->_field_generics.len()));
				_209332_ok = true;
				_209342_dynamic_annotation = true;
				return std::make_tuple(_209332_ok,_209342_dynamic_annotation);
			}
		}
		else if ((!((*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_209245_f->_field_decl->_field_generics.len()),static_cast<jule::I64>(_209313_fc->_field_generics.len()),_209313_fc->_field_token)))) {
			_case_begin_4806830704:;
			{
				_209332_ok = false;
				_209342_dynamic_annotation = false;
				return std::make_tuple(_209332_ok,_209342_dynamic_annotation);
			}
		}
		else {
			_case_begin_4806821184:;
			{
				_209245_f->_field_generics=jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>::alloc(0LL,static_cast<jule::I64>(_209245_f->_field_decl->_field_generics.len()));
				{
					auto &expr = _209313_fc->_field_generics;
					auto it = expr.begin();
					_iter_begin_4806822736:;
					if (it != expr.end()) {
						jule::Ptr<_1ea6ee955_TypeDecl> _1ebcce31e_g = *it;
						{
							jule::Ptr<_1ec1c55b1_TypeSymbol> _210825_k = _1eb736eec_build_type(_1ebcce31e_g);
							_209332_ok=(*this)._field_s->_method_check_type(_210825_k,(*this)._field_lookup);
							if ((!(_209332_ok))) {
								_209332_ok = false;
								_209342_dynamic_annotation = false;
								return std::make_tuple(_209332_ok,_209342_dynamic_annotation);
							}
							_209245_f->_field_generics = jule::alloc_for_append(_209245_f->_field_generics,1);_209245_f->_field_generics.push(_210825_k->_field_kind);
						}
						_iter_next_4806822736:;
						++it;
						goto _iter_begin_4806822736;
					}
					_iter_end_4806822736:;
				}
				_209332_ok = true;
				_209342_dynamic_annotation = false;
				return std::make_tuple(_209332_ok,_209342_dynamic_annotation);
			}
		}
		_match_end_4806821040:;
	}
}



inline void _1ebcce31e_Eval::_method_call_builtin_fn(jule::Ptr<_1ea6ee955_FnCallExpr>& _212040_fc,jule::Ptr<_1ebcce31e_Data>& _212062_d) {
	_212062_d=_1ec2ee113_find_builtin_caller(_212062_d->_field_kind->_method_fnc()->_field_caller)(this->self,_212040_fc,_212062_d);
	if (_212062_d == nullptr) {
		return;
	}
	_212062_d->_field_mutable=true;
}



inline void _1ebcce31e_Eval::_method_check_fn_of_concurrent_call(jule::Ptr<_1eb627195_FnIns>& _212947_f,_1ea7465e5_Token _212958_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto &expr = _212947_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4806844016:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> &_1ebcce31e_p = *it;
			{
				if (_1ebcce31e_p->_field_decl->_field_reference) {
					(*this)._method_push_err(_212958_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;
				}
			}
			_iter_next_4806844016:;
			++it;
			goto _iter_begin_4806844016;
		}
		_iter_end_4806844016:;
	}
}



inline void _1ebcce31e_Eval::_method_process_exceptional_handler(jule::Ptr<_1eb627195_FnIns>& _214251_f,jule::Ptr<_1ea6ee955_FnCallExpr>& _214267_fc,jule::Ptr<_1ebcce31e_Data>& _214289_d) {
	jule::Bool _214313_result_needed = (!(_214251_f->_field_decl->_method_is_void())) && (!((*this)._field_ignored));
	jule::Ptr<_1eb7d5892_ScopeChecker> _214417_csc = nullptr;
	jule::Ptr<_1eb7d5892_Scope> _214517_ch = nullptr;
	jule::Ptr<_1eb7ccdea_FnCallExprModel> _214717_model = _214289_d->_field_model.operator jule::Ptr<_1eb7ccdea_FnCallExprModel>();
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb9ed0d7_Sema>>()) {
			_case_begin_4806854240:;
			{
				jule::Ptr<_1eb9ed0d7_Sema> _215121_s = (*this)._field_lookup.operator jule::Ptr<_1eb9ed0d7_Sema>();
				_214417_csc=_1eb7d5892_new_scope_checker(_215121_s,nullptr);
				if (_214313_result_needed) {
					_214417_csc->_field_result=_214251_f->_field_result;
				}
				_214517_ch=jule::new_struct<_1eb7d5892_Scope>(new( std::nothrow ) _1eb7d5892_Scope());
				_214417_csc->_field_table->_field_vars = jule::alloc_for_append(_214417_csc->_field_table->_field_vars,1);_214417_csc->_field_table->_field_vars.push(_1ebcce31e_build_error_var(_214517_ch,_214267_fc));
				_214417_csc->_method_check(_214267_fc->_field_exception,_214517_ch);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4806855296:;
			{
				jule::Ptr<_1eb7d5892_ScopeChecker> _216121_sc = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>();
				_214417_csc=_216121_sc->_method_new_child_checker();
				if (_214313_result_needed) {
					_214417_csc->_field_result=_214251_f->_field_result;
				}
				_214517_ch=_216121_sc->_method_get_child();
				_214417_csc->_field_table->_field_vars = jule::alloc_for_append(_214417_csc->_field_table->_field_vars,1);_214417_csc->_field_table->_field_vars.push(_1ebcce31e_build_error_var(_214517_ch,_214267_fc));
				_216121_sc->_method_check_child_ssc(_214267_fc->_field_exception,_214517_ch,_214417_csc);
			}
		}
		_match_end_4806855024:;
	}
	_214717_model->_field_assigned=_214313_result_needed;
	_214717_model->_field_except=_214517_ch;
	if (_214313_result_needed && (_214417_csc->_field_result != nullptr)) {
		(*this)._method_push_err(_214267_fc->_field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	}
}



inline void _1ebcce31e_Eval::_method_call_fn(jule::Ptr<_1ea6ee955_FnCallExpr>& _217932_fc,jule::Ptr<_1ebcce31e_Data>& _217954_d) {
	jule::Ptr<_1eb627195_FnIns> _218017_f = _217954_d->_field_kind->_method_fnc();
	if (_218017_f->_method_is_builtin()) {
		this->self->_method_call_builtin_fn(_217932_fc,_217954_d);
		return;
	}
	if ((!(_218017_f->_field_decl->_method_is_method())) && _1ec1c55b1_has_directive(_218017_f->_field_decl->_field_directives,jule::Str("test", 4))) {
		this->self->_method_push_err(_217932_fc->_field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_217954_d=nullptr;
		return;
	}
	if ((((!(_217954_d->_field_mutable)) && _218017_f->_field_decl->_method_is_method()) && (!(_218017_f->_field_decl->_field_statically))) && _218017_f->_field_decl->_field_params[0LL]->_field_mutable) {
		this->self->_method_push_err(_217932_fc->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	} else if ((!(this->self->_method_is_unsafe())) && _218017_f->_field_decl->_field_unsafety) {
		this->self->_method_push_err(_217932_fc->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	jule::Bool _219818_ok;
	jule::Bool _219822_dynamic_annotation;
	std::tie(_219818_ok,_219822_dynamic_annotation) = this->self->_method_check_fn_call_generics(_218017_f,_217932_fc);
	if ((!(_219818_ok))) {
		_217954_d=nullptr;
		return;
	}
	jule::Ptr<_1eb9ed0d7_Sema> _220417_old = this->self->_field_s;
	if (_218017_f->_field_decl->_field_owner != nullptr) {
		this->self->_field_s=_218017_f->_field_decl->_field_owner->_field_sema;
	}
	__JULE_DEFER({
		if (_220417_old != this->self->_field_s) {
			_220417_old->_field_errors=jule::append(_220417_old->_field_errors,this->self->_field_s->_field_errors);
			this->self->_field_s->_field_errors=nullptr;
		}
		this->self->_field_s=_220417_old;
	});
	if ((!(_219822_dynamic_annotation))) {
		if ((!(_218017_f->_field_reloaded))) {
			_219818_ok=this->self->_field_s->_method_reload_fn_ins_types(_218017_f);
			if ((!(_219818_ok))) {
				_217954_d=nullptr;
				return;
			}
			_218017_f->_field_reloaded=true;
		}
	} else {
		this->self->_field_s->_method_build_fn_non_generic_type_kinds(_218017_f);
	}
	_1eba534e4_FnCallArgChecker _223017_fcac = _1eba534e4_FnCallArgChecker(this->self,_217932_fc->_field_args,_217932_fc->_field_token,_218017_f,_219822_dynamic_annotation,jule::Slice<jule::Any>());
	if (_218017_f->_field_decl->_field_owner != nullptr) {
		std::tie(_220417_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_220417_old);
		_219818_ok=_223017_fcac._method_check();
		std::tie(_220417_old,this->self->_field_s) = std::make_tuple(this->self->_field_s,_220417_old);
	} else {
		_219818_ok=_223017_fcac._method_check();
	}
	if ((!(_219818_ok)) && _219822_dynamic_annotation) {
		_217954_d=nullptr;
		return;
	}
	jule::Bool _225014_is_unique_ins;
	jule::Int _225029_pos;
	std::tie(_225014_is_unique_ins,_225029_pos) = _218017_f->_field_decl->_method_append_instance(_218017_f);
	if ((!(_225014_is_unique_ins))) {
		_218017_f=_218017_f->_field_decl->_field_instances[_225029_pos];
	}
	jule::Any _225517_call_model = _217954_d->_field_model;
	if (_218017_f->_field_decl->_method_is_void()) {
		_217954_d=_1ebcce31e_build_void_data();
	} else {
		if (_219822_dynamic_annotation) {
			_219818_ok=this->self->_field_s->_method_reload_fn_ins_types(_218017_f);
			if ((!(_219818_ok))) {
				_217954_d=nullptr;
				return;
			}
			_218017_f->_field_reloaded=true;
		}
		_217954_d->_field_kind=_218017_f->_field_result;
		_217954_d->_field_lvalue=false;
	}
	_217954_d->_field_mutable=true;
	_217954_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_FnCallExprModel>(new( std::nothrow ) _1eb7ccdea_FnCallExprModel(_217932_fc->_field_token,_218017_f,jule::Bool(),_225517_call_model,_223017_fcac._field_arg_models,jule::Ptr<_1eb7d5892_Scope>(),jule::Bool())));
	if (_218017_f->_field_decl->_field_exceptional) {
		{
			if (_217932_fc->_method_unhandled()) {
				_case_begin_4806910080:;
				{
					this->self->_method_push_err(_217932_fc->_field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					this->self->_method_push_suggestion(jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if (_217932_fc->_method_ignored()) {
				_case_begin_4806909584:;
			}
			else {
				_case_begin_4806909280:;
				{
					this->self->_method_process_exceptional_handler(_218017_f,_217932_fc,_217954_d);
				}
			}
			_match_end_4806909104:;
		}
	} else if ((!(_217932_fc->_method_unhandled()))) {
		this->self->_method_push_err(_217932_fc->_field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	}
	if ((_218017_f->_field_generics.len() > 0LL) && _225014_is_unique_ins) {
		this->self->_field_s->_method_check_fn_ins(_218017_f);
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_fn_call(jule::Ptr<_1ea6ee955_FnCallExpr> _230336_fc) {
	jule::Ptr<_1ec1c55b1_TypeKind> _230417_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_230417_prefix;
	});
	{
		auto &_match_expr{ _230336_fc->_field_expr->_field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentExpr>>()) {
			_case_begin_4806921120:;
			{
				if (_230336_fc->_field_expr->_field_token._field_kind == jule::Str("error", 5)) {
					return _1ec2ee113_builtin_caller_error(this->self,_230336_fc);
				}
			}
		}
		_match_end_4806920000:;
	}
	jule::Ptr<_1ebcce31e_Data> _231717_d = this->self->_method_eval_expr_kind(_230336_fc->_field_expr->_field_kind);
	if (_231717_d == nullptr) {
		return nullptr;
	}
	if (_231717_d->_field_decl) {
		this->self->_method_call_type_fn(_230336_fc,_231717_d);
		return _231717_d;
	}
	if (_231717_d->_field_kind->_method_fnc() == nullptr) {
		this->self->_method_push_err(_230336_fc->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	this->self->_method_call_fn(_230336_fc,_231717_d);
	return _231717_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_enum_static(jule::Ptr<_1eb7c7e7d_Enum> _233639_enm,_1ea7465e5_Token _233651_ident) {
	jule::Ptr<_1ebcce31e_Data> _233717_d = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_233639_enm)),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ec3e4b65_Const>()));
	jule::Ptr<_1eb7c7e7d_EnumItem> _234417_item = _233639_enm->_method_find_item(_233651_ident._field_kind);
	if (_234417_item == nullptr) {
		(*this)._method_push_err(_233651_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_233639_enm->_field_ident),jule::Any(_233651_ident._field_kind)}));
	} else {
		_233717_d->_field_constant=jule::new_ptr<_1ec3e4b65_Const>((*(_234417_item->_field_value->_field_data->_field_constant)));
		_233717_d->_field_model=jule::Any(_233717_d->_field_constant);
	}
	return _233717_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_struct_static(jule::Ptr<_1eb29bdd6_StructIns> _235541_s,_1ea7465e5_Token _235556_ident) {
	jule::Ptr<_1ebcce31e_Data> _235617_d = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ec3e4b65_Const>()));
	
	jule::Ptr<_1eb627195_Fn> _236417_method = _235541_s->_method_find_method(_235556_ident._field_kind,true);
	if (_236417_method != nullptr) {
		if ((!((*this)._field_s->_method_is_accessible_define(_236417_method->_field_public,_236417_method->_field_token)))) {
			(*this)._method_push_err(_235556_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_235556_ident._field_kind)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1eb627195_FnIns> _237121_ins = _236417_method->_method_instance();
		_237121_ins->_field_owner=_235541_s;
		(*this)._method_push_reference_to_fn(_237121_ins);
		_235617_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_StructStaticIdentExprModel>(new( std::nothrow ) _1eb7ccdea_StructStaticIdentExprModel(_235541_s,_235617_d->_field_model,_237121_ins)));
		_235617_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_237121_ins));
		return _235617_d;
	}
	jule::Ptr<_1eba533d4_Var> _238317_sttc = _235541_s->_field_decl->_method_find_static(_235556_ident._field_kind);
	if (_238317_sttc != nullptr) {
		return (*this)._method_eval_var(_238317_sttc,_235556_ident);
	}
	(*this)._method_push_err(_235556_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_235541_s->_field_decl->_field_ident),jule::Any(_235556_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_trait_sub_ident(jule::Ptr<_1ebcce31e_Data> _239243_d,jule::Ptr<_1eb7c68e9_Trait> _239257_trt,_1ea7465e5_Token _239270_ident) {
	jule::Ptr<_1eb627195_Fn> _239317_f = _239257_trt->_method_find_method(_239270_ident._field_kind);
	if (_239317_f == nullptr) {
		(*this)._method_push_err(_239270_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_239257_trt->_field_ident),jule::Any(_239270_ident._field_kind)}));
		return nullptr;
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_239317_f->_method_instance())),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_TraitSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_TraitSubIdentExprModel(_239243_d->_field_model,_239270_ident._field_kind))),false,jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_struct_sub_ident(jule::Ptr<_1ebcce31e_Data> _241144_d,jule::Ptr<_1eb29bdd6_StructIns> _241158_s,jule::Ptr<_1ea6ee955_SubIdentExpr> _241173_si,jule::Bool _241192_ref) {
	jule::Ptr<_1eb29bdd6_FieldIns> _241217_f = _241158_s->_method_find_field(_241173_si->_field_ident._field_kind);
	if (_241217_f != nullptr) {
		if ((!((*this)._field_s->_method_is_accessible_define(_241217_f->_field_decl->_field_public,_241217_f->_field_decl->_field_token)))) {
			(*this)._method_push_err(_241173_si->_field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_241217_f->_field_decl->_field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1eb7ccdea_StructSubIdentExprModel> _241921_model = jule::new_struct<_1eb7ccdea_StructSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_StructSubIdentExprModel(_241144_d->_field_model,_241144_d->_field_kind,jule::Ptr<_1eb627195_FnIns>(),_241217_f));
		_241144_d->_field_model=jule::Any(_241921_model);
		_241144_d->_field_kind=_241217_f->_field_kind;
		_241144_d->_field_lvalue=true;
		if (_241217_f->_field_decl->_field_mutable && (!(_241144_d->_field_mutable))) {
			{
				auto &_match_expr{ (*this)._field_lookup };
				if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
					_case_begin_4806981856:;
					{
						jule::Ptr<_1eb7d5892_ScopeChecker> _243225_scope = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>()->_method_get_root();
						_241144_d->_field_mutable=(_243225_scope->_field_owner != nullptr) && (_243225_scope->_field_owner->_field_owner == _241158_s);
						if (_241144_d->_field_mutable) {
							jule::Ptr<_1eba533d4_Var> _243533_field = _241921_model->_field_expr.operator jule::Ptr<_1eba533d4_Var>();
							jule::Ptr<_1eba533d4_Var> _243633_v = jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var(_243533_field->_field_scope,_243533_field->_field_token,_243533_field->_field_ident,_243533_field->_field_cpp_linked,_243533_field->_field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),_243533_field->_field_kind,_243533_field->_field_value,jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>()));
							_243633_v->_field_mutable=true;
							_241921_model->_field_expr=jule::Any(_243633_v);
						}
					}
				}
				_match_end_4806982016:;
			}
		}
		return _241144_d;
	}
	
	jule::Ptr<_1eb627195_Fn> _245517_m = _241158_s->_method_find_method(_241173_si->_field_ident._field_kind,false);
	if (_245517_m == nullptr) {
		(*this)._method_push_err(_241173_si->_field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_241158_s->_field_decl->_field_ident),jule::Any(_241173_si->_field_ident._field_kind)}));
		return nullptr;
	}
	if (_245517_m->_field_params[0LL]->_method_is_ref() && (!(_241192_ref))) {
		(*this)._method_push_err(_241173_si->_field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	}
	(*this)._method_check_deprecated(_245517_m->_field_directives,_241173_si->_field_ident);
	jule::Ptr<_1eb627195_FnIns> _246717_ins = _245517_m->_method_instance();
	_246717_ins->_field_owner=_241158_s;
	(*this)._method_push_reference_to_fn(_246717_ins);
	_241144_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_StructSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_StructSubIdentExprModel(_241144_d->_field_model,_241144_d->_field_kind,_246717_ins,jule::Ptr<_1eb29bdd6_FieldIns>())));
	_241144_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_246717_ins));
	return _241144_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_slice_sub_ident(jule::Ptr<_1ebcce31e_Data> _247943_d,_1ea7465e5_Token _247953_ident) {
	{
		auto &_match_expr{ _247953_ident._field_kind };
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4807005968:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_247943_d->_field_kind,_247943_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_4807008160:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_247943_d->_field_kind,_247943_d->_field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_4807008256:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))))),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3))))))}),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_247943_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_247943_d->_field_kind,_247943_d->_field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807004496:;
			{
				(*this)._method_push_err(_247953_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_247943_d->_field_kind->_method_to_str()),jule::Any(_247953_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807004816:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_array_sub_ident(jule::Ptr<_1ebcce31e_Data> _253843_d,_1ea7465e5_Token _253853_ident) {
	{
		auto &_match_expr{ _253853_ident._field_kind };
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4807022960:;
			{
				jule::Ptr<_1ec3e4b65_Const> _254121_c = _1ec3e4b65_Const::_static_method_new_i64(static_cast<jule::I64>(_253843_d->_field_kind->_method_arr()->_field_n));
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_254121_c),jule::Bool(),_254121_c));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_4807025152:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))))),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3))))))}),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_253843_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_253843_d->_field_kind,_253843_d->_field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807021488:;
			{
				(*this)._method_push_err(_253853_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_253843_d->_field_kind->_method_to_str()),jule::Any(_253853_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807021808:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_map_sub_ident(jule::Ptr<_1ebcce31e_Data> _258441_d,_1ea7465e5_Token _258451_ident) {
	jule::Ptr<_1ec1c55b1_Map> _258517_map_kind = _258441_d->_field_kind->_method_map();
	{
		auto &_match_expr{ _258451_ident._field_kind };
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4807040704:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_258441_d->_field_kind,_258441_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_4807040896:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_258441_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_258441_d->_field_kind,_258441_d->_field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_4807040992:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_258517_map_kind->_field_key)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_258441_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_258441_d->_field_kind,_258441_d->_field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_4807040432:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_258517_map_kind->_field_val)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_258441_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_258441_d->_field_kind,_258441_d->_field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_4807040528:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("key", 3))),_258517_map_kind->_field_key))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_258441_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_258441_d->_field_kind,_258441_d->_field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_4807038128:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("key", 3))),_258517_map_kind->_field_key))}),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),_258441_d->_field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_258441_d->_field_kind,_258441_d->_field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807036864:;
			{
				(*this)._method_push_err(_258451_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_258517_map_kind->_method_to_str()),jule::Any(_258451_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807037840:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_str_sub_ident(jule::Ptr<_1ebcce31e_Data> _270741_d,_1ea7465e5_Token _270751_ident) {
	jule::Ptr<_1ec1c55b1_TypeKind> _270817_str_kind = jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("str", 3))));
	{
		auto &_match_expr{ _270751_ident._field_kind };
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4807066752:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has_prefix", 10)) {
			_case_begin_4807068896:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("sub", 3))),_270817_str_kind))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("has_prefix", 10)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has_suffix", 10)) {
			_case_begin_4807068992:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("sub", 3))),_270817_str_kind))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("has_suffix", 10)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("find", 4)) {
			_case_begin_4807069088:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("sub", 3))),_270817_str_kind))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("find", 4)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("rfind", 5)) {
			_case_begin_4807066352:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("sub", 3))),_270817_str_kind))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("rfind", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("trim", 4)) {
			_case_begin_4807066448:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("bytes", 5))),_270817_str_kind))}),_270817_str_kind,jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("trim", 4)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("ltrim", 5)) {
			_case_begin_4807066544:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("bytes", 5))),_270817_str_kind))}),_270817_str_kind,jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("ltrim", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("rtrim", 5)) {
			_case_begin_4807066640:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("bytes", 5))),_270817_str_kind))}),_270817_str_kind,jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("rtrim", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("split", 5)) {
			_case_begin_4807069488:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("sub", 3))),_270817_str_kind)),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3))))))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_270817_str_kind)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("split", 5)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("replace", 7)) {
			_case_begin_4807069584:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("sub", 3))),_270817_str_kind)),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("new", 3))),_270817_str_kind)),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3))))))}),_270817_str_kind,jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_CommonSubIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonSubIdentExprModel(_270741_d->_field_kind,_270741_d->_field_model,jule::Str("replace", 7)))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807064560:;
			{
				(*this)._method_push_err(_270751_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_270817_str_kind->_method_to_str()),jule::Any(_270751_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807065984:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_int_type_static(_1ea7465e5_Token _295639_ident) {
	
	{
		auto &_match_expr{ _295639_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807115856:;
			{
				jule::Ptr<_1ec3e4b65_Const> _296121_c = _1ec3e4b65_Const::_static_method_new_i64(static_cast<jule::I64>(_1ec3e8d67_max(jule::Str("int", 3))));
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_296121_c),jule::Bool(),_296121_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807115952:;
			{
				jule::Ptr<_1ec3e4b65_Const> _296921_c = _1ec3e4b65_Const::_static_method_new_i64(static_cast<jule::I64>(_1ec3e8d67_min(jule::Str("int", 3))));
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_296921_c),jule::Bool(),_296921_c));
			}
		}
		else {
			_case_begin_4807112112:;
			{
				(*this)._method_push_err(_295639_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_295639_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807112848:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_uint_type_static(_1ea7465e5_Token _298240_ident) {
	
	{
		auto &_match_expr{ _298240_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807128240:;
			{
				jule::Ptr<_1ec3e4b65_Const> _298721_c = _1ec3e4b65_Const::_static_method_new_u64(static_cast<jule::U64>(_1ec3e8d67_max(jule::Str("uint", 4))));
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_298721_c),jule::Bool(),_298721_c));
			}
		}
		else {
			_case_begin_4807124496:;
			{
				(*this)._method_push_err(_298240_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_298240_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807125232:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_i8_type_static(_1ea7465e5_Token _300038_ident) {
	
	
	
	{
		auto &_match_expr{ _300038_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807139088:;
			{
				jule::Ptr<_1ec3e4b65_Const> _300721_c = _1ec3e4b65_Const::_static_method_new_i64(127LL);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_300721_c),jule::Bool(),_300721_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807139184:;
			{
				jule::Ptr<_1ec3e4b65_Const> _301521_c = _1ec3e4b65_Const::_static_method_new_i64(-128LL);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_301521_c),jule::Bool(),_301521_c));
			}
		}
		else {
			_case_begin_4807134784:;
			{
				(*this)._method_push_err(_300038_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_300038_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807136064:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_i16_type_static(_1ea7465e5_Token _302839_ident) {
	
	
	
	{
		auto &_match_expr{ _302839_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807152336:;
			{
				jule::Ptr<_1ec3e4b65_Const> _303521_c = _1ec3e4b65_Const::_static_method_new_i64(32767LL);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_303521_c),jule::Bool(),_303521_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807152432:;
			{
				jule::Ptr<_1ec3e4b65_Const> _304321_c = _1ec3e4b65_Const::_static_method_new_i64(-32768LL);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_304321_c),jule::Bool(),_304321_c));
			}
		}
		else {
			_case_begin_4807148032:;
			{
				(*this)._method_push_err(_302839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_302839_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807149312:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_i32_type_static(_1ea7465e5_Token _305639_ident) {
	
	
	
	{
		auto &_match_expr{ _305639_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807166224:;
			{
				jule::Ptr<_1ec3e4b65_Const> _306321_c = _1ec3e4b65_Const::_static_method_new_i64(2147483647LL);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_306321_c),jule::Bool(),_306321_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807166320:;
			{
				jule::Ptr<_1ec3e4b65_Const> _307121_c = _1ec3e4b65_Const::_static_method_new_i64(-2147483648LL);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_307121_c),jule::Bool(),_307121_c));
			}
		}
		else {
			_case_begin_4807163072:;
			{
				(*this)._method_push_err(_305639_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_305639_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807163216:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_i64_type_static(_1ea7465e5_Token _308439_ident) {
	
	
	
	{
		auto &_match_expr{ _308439_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807179344:;
			{
				jule::Ptr<_1ec3e4b65_Const> _309121_c = _1ec3e4b65_Const::_static_method_new_i64(jule::MAX_I64);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_309121_c),jule::Bool(),_309121_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807179440:;
			{
				jule::Ptr<_1ec3e4b65_Const> _309921_c = _1ec3e4b65_Const::_static_method_new_i64(jule::MIN_I64);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_309921_c),jule::Bool(),_309921_c));
			}
		}
		else {
			_case_begin_4807176192:;
			{
				(*this)._method_push_err(_308439_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_308439_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807176336:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_u8_type_static(_1ea7465e5_Token _311238_ident) {
	
	
	{
		auto &_match_expr{ _311238_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807191616:;
			{
				jule::Ptr<_1ec3e4b65_Const> _311821_c = _1ec3e4b65_Const::_static_method_new_u64(255LLU);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u8", 2)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_311821_c),jule::Bool(),_311821_c));
			}
		}
		else {
			_case_begin_4807187232:;
			{
				(*this)._method_push_err(_311238_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_311238_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807188528:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_u16_type_static(_1ea7465e5_Token _313139_ident) {
	
	
	{
		auto &_match_expr{ _313139_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807200944:;
			{
				jule::Ptr<_1ec3e4b65_Const> _313721_c = _1ec3e4b65_Const::_static_method_new_u64(65535LLU);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u16", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_313721_c),jule::Bool(),_313721_c));
			}
		}
		else {
			_case_begin_4807196560:;
			{
				(*this)._method_push_err(_313139_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_313139_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807197856:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_u32_type_static(_1ea7465e5_Token _315039_ident) {
	
	
	{
		auto &_match_expr{ _315039_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807210272:;
			{
				jule::Ptr<_1ec3e4b65_Const> _315621_c = _1ec3e4b65_Const::_static_method_new_u64(4294967295LLU);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u32", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_315621_c),jule::Bool(),_315621_c));
			}
		}
		else {
			_case_begin_4807205888:;
			{
				(*this)._method_push_err(_315039_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_315039_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807207184:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_u64_type_static(_1ea7465e5_Token _316939_ident) {
	
	
	{
		auto &_match_expr{ _316939_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807219536:;
			{
				jule::Ptr<_1ec3e4b65_Const> _317521_c = _1ec3e4b65_Const::_static_method_new_u64(jule::MAX_U64);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("u64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_317521_c),jule::Bool(),_317521_c));
			}
		}
		else {
			_case_begin_4807215216:;
			{
				(*this)._method_push_err(_316939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_316939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807216448:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_f32_type_tatic(_1ea7465e5_Token _318838_ident) {
	
	
	
	{
		auto &_match_expr{ _318838_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807229648:;
			{
				jule::Ptr<_1ec3e4b65_Const> _319521_c = _1ec3e4b65_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_319521_c),jule::Bool(),_319521_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807229744:;
			{
				jule::Ptr<_1ec3e4b65_Const> _320321_c = _1ec3e4b65_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_320321_c),jule::Bool(),_320321_c));
			}
		}
		else {
			_case_begin_4807225520:;
			{
				(*this)._method_push_err(_318838_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_318838_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807226624:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_f64_type_static(_1ea7465e5_Token _321639_ident) {
	
	
	
	{
		auto &_match_expr{ _321639_ident._field_kind };
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4807242448:;
			{
				jule::Ptr<_1ec3e4b65_Const> _322321_c = _1ec3e4b65_Const::_static_method_new_f64(jule::MAX_F64);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_322321_c),jule::Bool(),_322321_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4807242544:;
			{
				jule::Ptr<_1ec3e4b65_Const> _323121_c = _1ec3e4b65_Const::_static_method_new_f64(jule::MIN_F64);
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_323121_c),jule::Bool(),_323121_c));
			}
		}
		else {
			_case_begin_4807239296:;
			{
				(*this)._method_push_err(_321639_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_321639_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807239440:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_prim_static(jule::Str _324435_kind,_1ea7465e5_Token _324446_ident) {
	{
		auto &_match_expr{ _324435_kind };
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_4807253440:;
			{
				return (*this)._method_eval_int_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_4807253536:;
			{
				return (*this)._method_eval_uint_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4807253056:;
			{
				return (*this)._method_eval_i8_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4807253152:;
			{
				return (*this)._method_eval_i16_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4807253248:;
			{
				return (*this)._method_eval_i32_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4807250880:;
			{
				return (*this)._method_eval_i64_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_4807250976:;
			{
				return (*this)._method_eval_u8_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4807251072:;
			{
				return (*this)._method_eval_u16_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4807251168:;
			{
				return (*this)._method_eval_u32_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4807253664:;
			{
				return (*this)._method_eval_u64_type_static(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4807253760:;
			{
				return (*this)._method_eval_f32_type_tatic(_324446_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4807253856:;
			{
				return (*this)._method_eval_f64_type_static(_324446_ident);
			}
		}
		else {
			_case_begin_4807250288:;
			{
				(*this)._method_push_err(_324446_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_324435_kind),jule::Any(_324446_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807250384:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_type_static(jule::Ptr<_1ebcce31e_Data> _326439_d,jule::Ptr<_1ea6ee955_SubIdentExpr> _326453_si) {
	{
		if (_326439_d->_field_kind->_method_prim() != nullptr) {
			_case_begin_4807273456:;
			{
				return (*this)._method_eval_prim_static(_326439_d->_field_kind->_method_prim()->_method_to_str(),_326453_si->_field_ident);
			}
		}
		else if (_326439_d->_field_kind->_method_enm() != nullptr) {
			_case_begin_4807273648:;
			{
				return (*this)._method_eval_enum_static(_326439_d->_field_kind->_method_enm(),_326453_si->_field_ident);
			}
		}
		else if (_326439_d->_field_kind->_method_strct() != nullptr) {
			_case_begin_4807273744:;
			{
				return (*this)._method_eval_struct_static(_326439_d->_field_kind->_method_strct(),_326453_si->_field_ident);
			}
		}
		else {
			_case_begin_4807270432:;
			{
				(*this)._method_push_err(_326453_si->_field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>({jule::Any(_326439_d->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807270288:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_obj_sub_ident(jule::Ptr<_1ebcce31e_Data> _328141_d,jule::Ptr<_1ea6ee955_SubIdentExpr> _328155_si) {
	jule::Ptr<_1ec1c55b1_TypeKind> _328217_kind = _328141_d->_field_kind;
	if (_328141_d->_field_kind->_method_ptr() != nullptr) {
		jule::Ptr<_1ec1c55b1_Ptr> _328417_ptr = _328141_d->_field_kind->_method_ptr();
		if ((!(_328417_ptr->_method_is_unsafe()))) {
			if ((!(_328155_si->_field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err(_328155_si->_field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
			_328217_kind=_328141_d->_field_kind->_method_ptr()->_field_elem;
		}
	} else if (_328141_d->_field_kind->_method_sptr() != nullptr) {
		_328217_kind=_328141_d->_field_kind->_method_sptr()->_field_elem;
	}
	{
		if (_328141_d->_field_kind->_method_trt() != nullptr) {
			_case_begin_4807291152:;
			{
				return (*this)._method_eval_trait_sub_ident(_328141_d,_328141_d->_field_kind->_method_trt(),_328155_si->_field_ident);
			}
		}
		else if (_328217_kind->_method_strct() != nullptr) {
			_case_begin_4807291248:;
			{
				jule::Ptr<_1eb29bdd6_StructIns> _330017_s = _328217_kind->_method_strct();
				if (_1ebcce31e_is_instanced_struct(_330017_s)) {
					jule::Bool _330225_used_reference_elem = _328141_d->_field_kind->_method_sptr() != nullptr;
					return (*this)._method_eval_struct_sub_ident(_328141_d,_328217_kind->_method_strct(),_328155_si,_330225_used_reference_elem);
				}
			}
		}
		else if (_328217_kind->_method_slc() != nullptr) {
			_case_begin_4807291344:;
			{
				return (*this)._method_eval_slice_sub_ident(_328141_d,_328155_si->_field_ident);
			}
		}
		else if (_328217_kind->_method_arr() != nullptr) {
			_case_begin_4807291440:;
			{
				return (*this)._method_eval_array_sub_ident(_328141_d,_328155_si->_field_ident);
			}
		}
		else if (_328217_kind->_method_map() != nullptr) {
			_case_begin_4807291536:;
			{
				return (*this)._method_eval_map_sub_ident(_328141_d,_328155_si->_field_ident);
			}
		}
		else if (_328217_kind->_method_prim() != nullptr) {
			_case_begin_4807291632:;
			{
				jule::Ptr<_1ec1c55b1_Prim> _331617_p = _328217_kind->_method_prim();
				{
					auto &_match_expr{ _331617_p->_field_kind };
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_4807301728:;
						{
							return (*this)._method_eval_str_sub_ident(_328141_d,_328155_si->_field_ident);
						}
					}
					_match_end_4807307120:;
				}
			}
		}
		_match_end_4807290864:;
	}
	(*this)._method_push_err(_328155_si->_field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>({jule::Any(_328141_d->_field_kind->_method_to_str())}));
	return nullptr;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_sub_ident(jule::Ptr<_1ea6ee955_SubIdentExpr> _332738_si) {
	jule::Ptr<_1ec1c55b1_TypeKind> _332817_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_332817_prefix;
	});
	jule::Ptr<_1ebcce31e_Data> _333217_d = this->self->_method_eval_expr_kind(_332738_si->_field_expr);
	if (_333217_d == nullptr) {
		return nullptr;
	}
	if (_333217_d->_field_decl) {
		return this->self->_method_eval_type_static(_333217_d,_332738_si);
	}
	return this->self->_method_eval_obj_sub_ident(_333217_d,_332738_si);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_tuple(jule::Ptr<_1ea6ee955_TupleExpr> _334434_tup) {
	jule::Ptr<_1ec1c55b1_Tuple> _334517_tup_t = jule::new_struct_ptr<_1ec1c55b1_Tuple>(new( std::nothrow ) _1ec1c55b1_Tuple());
	_334517_tup_t->_field_types=jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>::alloc(0LL,static_cast<jule::I64>(_334434_tup->_field_expr.len()));
	jule::Ptr<_1eb7ccdea_TupleExprModel> _334817_model = jule::new_struct<_1eb7ccdea_TupleExprModel>(new( std::nothrow ) _1eb7ccdea_TupleExprModel(jule::Slice<jule::Ptr<_1ebcce31e_Data>>::alloc(0LL,static_cast<jule::I64>(_334434_tup->_field_expr.len()))));
	jule::Bool _335217_ok = true;
	{
		auto &expr = _334434_tup->_field_expr;
		auto it = expr.begin();
		_iter_begin_4807325168:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Expr> _1ebcce31e_expr = *it;
			{
				jule::Ptr<_1ebcce31e_Data> _335421_d = this->self->_method_eval_expr_kind(_1ebcce31e_expr->_field_kind);
				if (_335421_d == nullptr) {
					_335217_ok=false;
					goto _iter_next_4807325168;
				}
				_334517_tup_t->_field_types = jule::alloc_for_append(_334517_tup_t->_field_types,1);_334517_tup_t->_field_types.push(_335421_d->_field_kind);
				_334817_model->_field_datas = jule::alloc_for_append(_334817_model->_field_datas,1);_334817_model->_field_datas.push(_335421_d);
			}
			_iter_next_4807325168:;
			++it;
			goto _iter_begin_4807325168;
		}
		_iter_end_4807325168:;
	}
	if ((!(_335217_ok))) {
		return nullptr;
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_334517_tup_t)),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_334817_model),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_map(jule::Ptr<_1ec1c55b1_Map> _337332_m,jule::Ptr<_1ea6ee955_BraceLit> _337345_lit) {
	jule::Ptr<_1eb7ccdea_MapExprModel> _337417_model = jule::new_struct<_1eb7ccdea_MapExprModel>(new( std::nothrow ) _1eb7ccdea_MapExprModel(_337332_m->_field_key,_337332_m->_field_val,jule::Slice<jule::Ptr<_1eb7ccdea_KeyValPairExprModel>>()));
	{
		auto &expr = _337345_lit->_field_exprs;
		auto it = expr.begin();
		_iter_begin_4807335584:;
		if (it != expr.end()) {
			jule::Any _1ebcce31e_expr = *it;
			{
				{
					auto &_match_expr{ _1ebcce31e_expr };
					if (_match_expr.type_is<jule::Ptr<_1ea6ee955_KeyValPair>>()) {
						_case_begin_4807338160:;
					}
					else {
						_case_begin_4807336800:;
						{
							this->self->_method_push_err(_337345_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_4807337120:;
				}
				jule::Ptr<_1ea6ee955_KeyValPair> _338921_pair = _1ebcce31e_expr.operator jule::Ptr<_1ea6ee955_KeyValPair>();
				jule::Ptr<_1ebcce31e_Data> _339121_key = this->self->_method_eval_expr_kind(_338921_pair->_field_key);
				if (_339121_key == nullptr) {
					return nullptr;
				}
				jule::Ptr<_1ebcce31e_Data> _339621_val = this->self->_method_eval_expr_kind(_338921_pair->_field_val);
				if (_339621_val == nullptr) {
					return nullptr;
				}
				this->self->_field_s->_method_check_assign_type(false,_337332_m->_field_key,_339121_key,_338921_pair->_field_colon);
				this->self->_field_s->_method_check_assign_type(false,_337332_m->_field_val,_339621_val,_338921_pair->_field_colon);
				_337417_model->_field_entries = jule::alloc_for_append(_337417_model->_field_entries,1);_337417_model->_field_entries.push(jule::new_struct<_1eb7ccdea_KeyValPairExprModel>(new( std::nothrow ) _1eb7ccdea_KeyValPairExprModel(_339121_key->_field_model,_339621_val->_field_model)));
			}
			_iter_next_4807335584:;
			++it;
			goto _iter_begin_4807335584;
		}
		_iter_end_4807335584:;
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_337332_m)),jule::Ptr<_1ec1c55b1_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_337417_model),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_brace_lit(jule::Ptr<_1ea6ee955_BraceLit> _341738_lit) {
	{
		if (this->self->_field_prefix == nullptr) {
			_case_begin_4807353056:;
			{
				this->self->_method_push_err(_341738_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if (this->self->_field_prefix->_method_map() != nullptr) {
			_case_begin_4807353248:;
			{
				return this->self->_method_eval_map(this->self->_field_prefix->_method_map(),_341738_lit);
			}
		}
		else if (this->self->_field_prefix->_method_strct() != nullptr) {
			_case_begin_4807353344:;
			{
				return this->self->_method_eval_struct_lit_explicit(this->self->_field_prefix->_method_strct(),_341738_lit->_field_exprs,_341738_lit->_field_token);
			}
		}
		else {
			_case_begin_4807350656:;
			{
				this->self->_method_push_err(_341738_lit->_field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4807350480:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_anon_fn(jule::Ptr<_1ea6ee955_FnDecl> _343535_decl) {
	_1ec1c55b1_TypeChecker _343617_tc = _1ec1c55b1_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_1ec1c55b1_Referencer>(),_1ea7465e5_Token(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>(),jule::Bool(),jule::Bool());
	jule::Ptr<_1eb627195_FnIns> _344017_ins = _343617_tc._method_build_fn(_343535_decl);
	_344017_ins->_field_anon=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ScopeChecker>>()) {
			_case_begin_4807365616:;
			{
				jule::Ptr<_1eb7d5892_ScopeChecker> _344521_sc = (*this)._field_lookup.operator jule::Ptr<_1eb7d5892_ScopeChecker>();
				jule::Ptr<_1eb7d5892_ScopeChecker> _344621_scc = _344521_sc->_method_new_child_checker();
				_344621_scc->_field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>>(nullptr);
				_344621_scc->_field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>>(nullptr);
				_344621_scc->_field_owner=nullptr;
				_344621_scc->_field_child_index=0LL;
				_344621_scc->_field_it=0LLU;
				_344621_scc->_field_cse=0LLU;
				_344621_scc->_field_owner=_344017_ins;
				(*this)._field_s->_method_check_fn_ins_sc(_344017_ins,_344621_scc);
			}
		}
		else {
			_case_begin_4807362304:;
			{
				(*this)._field_s->_method_check_fn_ins(_344017_ins);
			}
		}
		_match_end_4807365008:;
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_344017_ins)),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_AnonFnExprModel>(new( std::nothrow ) _1eb7ccdea_AnonFnExprModel(_344017_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_binop(jule::Ptr<_1ea6ee955_BinopExpr> _346934_op) {
	jule::Ptr<_1ec1c55b1_TypeKind> _347017_prefix = this->self->_field_prefix;
	this->self->_field_prefix=nullptr;
	__JULE_DEFER({
		this->self->_field_prefix=_347017_prefix;
	});
	_1ebcce31e_BinopSolver _347417_bs = _1ebcce31e_BinopSolver(this->self,jule::Ptr<_1ebcce31e_Data>(),jule::Ptr<_1ebcce31e_Data>(),_1ea7465e5_Token());
	return _347417_bs._method_solve(_346934_op);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_ternary(jule::Ptr<_1ea6ee955_TernaryExpr> _348036_ter) {
	jule::Ptr<_1ebcce31e_Data> _348117_d = this->self->_method_eval_expr_kind(_348036_ter->_field_condition);
	if (_348117_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_Prim> _348613_prim = _348117_d->_field_kind->_method_prim();
	if ((_348613_prim == nullptr) || (!(_348613_prim->_method_is_bool()))) {
		this->self->_method_push_err(_348036_ter->_field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _349217_td = this->self->_method_eval_expr_kind(_348036_ter->_field_true_expr);
	if (_349217_td == nullptr) {
		return nullptr;
	}
	if (_349217_td->_field_kind->_method_void()) {
		this->self->_method_push_err(_348036_ter->_field_token,jule::Str("void type cannot used for ternary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _350217_prefix = this->self->_field_prefix;
	this->self->_field_prefix=_349217_td->_field_kind;
	jule::Ptr<_1ebcce31e_Data> _350517_fd = this->self->_method_eval_expr_kind(_348036_ter->_field_false_expr);
	this->self->_field_prefix=_350217_prefix;
	if (_350517_fd == nullptr) {
		return nullptr;
	}
	_1eba534e4_AssignTypeChecker _351217_ac = _1eba534e4_AssignTypeChecker(this->self->_field_s,jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1ebcce31e_Data>(),_348036_ter->_field_token);
	if (_349217_td->_method_is_const() && (!(_350517_fd->_method_is_const()))) {
		_351217_ac._field_dest=_350517_fd->_field_kind;
		_351217_ac._field_d=_349217_td;
	} else {
		_351217_ac._field_dest=_349217_td->_field_kind;
		_351217_ac._field_d=_350517_fd;
	}
	if ((!(_351217_ac._method_check()))) {
		this->self->_method_push_suggestion(jule::Str("use same or compatible values for ternary expressions", 53),jule::Slice<jule::Any>());
	}
	if (_348117_d->_method_is_const()) {
		if (_348117_d->_field_constant->_method_read_bool()) {
			return _349217_td;
		}
		return _350517_fd;
	}
	jule::Ptr<_1ebcce31e_Data> _353417_r = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data());
	_353417_r->_field_kind=_351217_ac._field_dest;
	_353417_r->_field_lvalue=false;
	_353417_r->_field_mutable=_353417_r->_field_kind->_method_mutable();
	_353417_r->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_TernaryExprModel>(new( std::nothrow ) _1eb7ccdea_TernaryExprModel(_348117_d->_field_model,_349217_td->_field_model,_350517_fd->_field_model)));
	return _353417_r;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_expr_kind(jule::Any _354638_kind) {
	jule::Ptr<_1ebcce31e_Data> _354717_d = nullptr;
	{
		auto &_match_expr{ _354638_kind };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_LitExpr>>()) {
			_case_begin_4807409152:;
			{
				_354717_d=this->self->_method_eval_lit(_354638_kind.operator jule::Ptr<_1ea6ee955_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentExpr>>()) {
			_case_begin_4807410160:;
			{
				_354717_d=this->self->_method_eval_ident(_354638_kind.operator jule::Ptr<_1ea6ee955_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UnaryExpr>>()) {
			_case_begin_4807410256:;
			{
				_354717_d=this->self->_method_eval_unary(_354638_kind.operator jule::Ptr<_1ea6ee955_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_VariadicExpr>>()) {
			_case_begin_4807410352:;
			{
				_354717_d=this->self->_method_eval_variadic(_354638_kind.operator jule::Ptr<_1ea6ee955_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UnsafeExpr>>()) {
			_case_begin_4807410464:;
			{
				_354717_d=this->self->_method_eval_unsafe(_354638_kind.operator jule::Ptr<_1ea6ee955_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_SliceExpr>>()) {
			_case_begin_4807410576:;
			{
				_354717_d=this->self->_method_eval_slice_expr(_354638_kind.operator jule::Ptr<_1ea6ee955_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IndexingExpr>>()) {
			_case_begin_4807410688:;
			{
				_354717_d=this->self->_method_eval_indexing(_354638_kind.operator jule::Ptr<_1ea6ee955_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_SlicingExpr>>()) {
			_case_begin_4807410800:;
			{
				_354717_d=this->self->_method_eval_slicing(_354638_kind.operator jule::Ptr<_1ea6ee955_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_CastExpr>>()) {
			_case_begin_4807410912:;
			{
				_354717_d=this->self->_method_eval_cast(_354638_kind.operator jule::Ptr<_1ea6ee955_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_NsSelectionExpr>>()) {
			_case_begin_4807411024:;
			{
				_354717_d=this->self->_method_eval_ns_selection(_354638_kind.operator jule::Ptr<_1ea6ee955_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_StructLit>>()) {
			_case_begin_4807411136:;
			{
				_354717_d=this->self->_method_eval_struct_lit(_354638_kind.operator jule::Ptr<_1ea6ee955_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TypeDecl>>()) {
			_case_begin_4807411248:;
			{
				_354717_d=this->self->_method_eval_type(_354638_kind.operator jule::Ptr<_1ea6ee955_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnCallExpr>>()) {
			_case_begin_4807411360:;
			{
				_354717_d=this->self->_method_eval_fn_call(_354638_kind.operator jule::Ptr<_1ea6ee955_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_SubIdentExpr>>()) {
			_case_begin_4807411472:;
			{
				_354717_d=this->self->_method_eval_sub_ident(_354638_kind.operator jule::Ptr<_1ea6ee955_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TupleExpr>>()) {
			_case_begin_4807411584:;
			{
				_354717_d=this->self->_method_eval_tuple(_354638_kind.operator jule::Ptr<_1ea6ee955_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_BraceLit>>()) {
			_case_begin_4807411696:;
			{
				_354717_d=this->self->_method_eval_brace_lit(_354638_kind.operator jule::Ptr<_1ea6ee955_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnDecl>>()) {
			_case_begin_4807411808:;
			{
				_354717_d=this->self->_method_eval_anon_fn(_354638_kind.operator jule::Ptr<_1ea6ee955_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_BinopExpr>>()) {
			_case_begin_4807411920:;
			{
				_354717_d=this->self->_method_eval_binop(_354638_kind.operator jule::Ptr<_1ea6ee955_BinopExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TernaryExpr>>()) {
			_case_begin_4807412032:;
			{
				_354717_d=this->self->_method_eval_ternary(_354638_kind.operator jule::Ptr<_1ea6ee955_TernaryExpr>());
			}
		}
		_match_end_4807409712:;
	}
	if (_354717_d == nullptr) {
		return nullptr;
	}
	if (_354717_d->_field_kind == nullptr) {
		return _354717_d;
	}
	if (((_354717_d->_field_cast_kind == nullptr) && _354717_d->_method_is_const()) && (_354717_d->_field_kind->_method_prim() != nullptr)) {
		if ((this->self->_field_prefix != nullptr) && (this->self->_field_prefix->_method_prim() != nullptr)) {
			jule::Str _358221_pk = this->self->_field_prefix->_method_prim()->_field_kind;
			{
				if (_1ec4784ce_is_float(_358221_pk)) {
					_case_begin_4807445920:;
					{
						_354717_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),this->self->_field_prefix->_field_kind));
						_354717_d->_field_constant->_method_set_f64(static_cast<jule::F64>(_354717_d->_field_constant->_method_as_f64()));
					}
				}
				else if (_1ec4784ce_is_sig_int(_358221_pk)) {
					_case_begin_4807446032:;
					{
						if ((!(_1eba534e4_int_assignable(_358221_pk,_354717_d)))) {
							goto _match_end_4807445744;
						}
						_354717_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),this->self->_field_prefix->_field_kind));
						_354717_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_354717_d->_field_constant->_method_as_i64()));
					}
				}
				else if (_1ec4784ce_is_unsig_int(_358221_pk)) {
					_case_begin_4807446144:;
					{
						if ((!(_1eba534e4_int_assignable(_358221_pk,_354717_d)))) {
							goto _match_end_4807445744;
						}
						_354717_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),this->self->_field_prefix->_field_kind));
						_354717_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_354717_d->_field_constant->_method_as_u64()));
					}
				}
				_match_end_4807445744:;
			}
		} else if ((!(_354717_d->_field_is_rune))) {
			{
				if (_354717_d->_field_constant->_method_is_i64()) {
					_case_begin_4807456512:;
					{
						if (_1eba534e4_int_assignable(jule::Str("int", 3),_354717_d)) {
							_354717_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3))));
							_354717_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_354717_d->_field_constant->_method_as_i64()));
						}
					}
				}
				else if (_354717_d->_field_constant->_method_is_u64()) {
					_case_begin_4807456608:;
					{
						if (_1eba534e4_int_assignable(jule::Str("uint", 4),_354717_d)) {
							_354717_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("uint", 4))));
							_354717_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_354717_d->_field_constant->_method_as_u64()));
						}
					}
				}
				_match_end_4807454688:;
			}
		}
	}
	if ((!(_354717_d->_field_decl))) {
		if ((((((((!(_354717_d->_field_kind->_method_cpp_linked())) && (this->self->_field_prefix != nullptr)) && (_354717_d->_field_cast_kind == nullptr)) && (!(_354717_d->_field_kind->_field_variadic))) && (!(_354717_d->_field_lvalue))) && (!(_354717_d->_method_is_const()))) && (_354717_d->_field_kind->_method_prim() != nullptr)) && _1ec4784ce_is_num(_354717_d->_field_kind->_method_prim()->_field_kind)) {
			_354717_d->_field_cast_kind=_354717_d->_field_kind;
		}
		_1ebcce31e_apply_cast_kind(_354717_d);
		if ((_354717_d->_field_kind->_method_prim() == nullptr) || (!(_354717_d->_field_kind->_method_prim()->_method_is_any()))) {
			if (((this->self->_field_prefix != nullptr) && (this->self->_field_prefix->_method_prim() != nullptr)) && this->self->_field_prefix->_method_prim()->_method_is_any()) {
				_354717_d->_field_cast_kind=this->self->_field_prefix;
				_1ebcce31e_apply_cast_kind_model(_354717_d);
				_354717_d->_field_cast_kind=nullptr;
			}
		}
	}
	return _354717_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval(jule::Ptr<_1ea6ee955_Expr> _364728_expr) {
	jule::Ptr<_1ebcce31e_Data> _364817_d = this->self->_method_eval_expr_kind(_364728_expr->_field_kind);
	if ((_364817_d == nullptr) || (_364817_d->_field_kind == nullptr)) {
		return nullptr;
	}
	{
		if (_364817_d->_field_kind->_method_fnc() != nullptr) {
			_case_begin_4807478528:;
			{
				jule::Ptr<_1eb627195_FnIns> _365521_f = _364817_d->_field_kind->_method_fnc();
				if (_365521_f->_method_is_builtin()) {
					goto _match_end_4807479056;
				}
				if (_365521_f->_field_generics.len() != _365521_f->_field_decl->_field_generics.len()) {
					this->self->_field_s->_method_push_err(_364728_expr->_field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				}
				if (_365521_f->_field_decl->_method_is_method()) {
					this->self->_field_s->_method_push_err(_364728_expr->_field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_4807479056:;
	}
	return _364817_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_Eval::_method_eval_expr(jule::Ptr<_1ea6ee955_Expr> _367533_expr) {
	jule::Ptr<_1ebcce31e_Data> _367617_d = this->self->_method_eval(_367533_expr);
	{
		if (_367617_d == nullptr) {
			_case_begin_4807490688:;
			{
				return nullptr;
			}
		}
		else if (_367617_d->_field_decl) {
			_case_begin_4807490784:;
			{
				this->self->_method_push_err(_367533_expr->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_4807489328:;
			{
				return _367617_d;
			}
		}
		_match_end_4807489248:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ebcce31e_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _7517_kind = jule::Str();
	if ((*this)._field_variadic) {
		_7517_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_cpp_linked()) {
		_7517_kind+=jule::Str("cpp.", 4);
		_7517_kind+=(*this)._field_cpp_ident;
	} else {
		_7517_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _7517_kind;
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _9122_other) {
	if (this->self->_method_is_nil()) {
		return _9122_other->_method_is_nil();
	}
	if (this->self->_method_cpp_linked()) {
		return _9122_other->_method_cpp_linked() && (this->self->_field_cpp_ident == _9122_other->_field_cpp_ident);
	}
	return this->self->_field_kind.get()._method_equals(_9122_other);
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_cpp_linked(void) {
	return (*this)._field_cpp_ident.len() != 0LL;
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_void(void) {
	jule::Ptr<_1ec1c55b1_Prim> _11413_prim = (*this)._method_prim();
	return (_11413_prim != nullptr) && (_11413_prim->_field_kind == jule::Str("void", 4));
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_mutable(void) {
	{
		_1ec1c55b1_TypeKind* _12121__self = (&((*this)));
		if (_12121__self->_method_strct() != nullptr) {
			return _12121__self->_method_strct()->_field_mutable;
		}
		if (_12121__self->_method_trt() != nullptr) {
			return _12121__self->_method_trt()->_field_mutable;
		}
		if (_12121__self->_method_prim() != nullptr) {
			jule::Ptr<_1ec1c55b1_Prim> _13021_p = _12121__self->_method_prim();
			return _13021_p->_method_is_any();
		}
		if (_12121__self->_method_arr() != nullptr) {
			return _12121__self->_method_arr()->_field_elem->_method_mutable();
		}
		return ((_12121__self->_method_slc() != nullptr) || (_12121__self->_method_ptr() != nullptr)) || (_12121__self->_method_sptr() != nullptr);
	}
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_nil_compatible(void) {
	{
		_1ec1c55b1_TypeKind* _14521__self = (&((*this)));
		jule::Ptr<_1ec1c55b1_Prim> _14717_prim = _14521__self->_method_prim();
		if ((_14717_prim != nullptr) && _14717_prim->_method_is_any()) {
			return true;
		}
		return (((((_14521__self->_method_is_nil() || (_14521__self->_method_fnc() != nullptr)) || (_14521__self->_method_sptr() != nullptr)) || (_14521__self->_method_ptr() != nullptr)) || (_14521__self->_method_trt() != nullptr)) || (_14521__self->_method_slc() != nullptr)) || (_14521__self->_method_map() != nullptr);
	}
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_supports_cloning(void) {
	{
		_1ec1c55b1_TypeKind* _16521__self = (&((*this)));
		{
			if (_16521__self->_method_prim() != nullptr) {
				_case_begin_4807892000:;
				{
					return (!(_16521__self->_method_prim()->_method_is_any()));
				}
			}
			else if (_16521__self->_method_enm() != nullptr) {
				_case_begin_4807890544:;
				{
					return true;
				}
			}
			else if (_16521__self->_method_fnc() != nullptr) {
				_case_begin_4807890640:;
				{
					return true;
				}
			}
			else if (_16521__self->_method_ptr() != nullptr) {
				_case_begin_4807890752:;
				{
					return true;
				}
			}
			else if (_16521__self->_method_slc() != nullptr) {
				_case_begin_4807890864:;
				{
					return _16521__self->_method_slc()->_field_elem->_method_supports_cloning();
				}
			}
			else if (_16521__self->_method_map() != nullptr) {
				_case_begin_4807891264:;
				{
					jule::Ptr<_1ec1c55b1_Map> _17921_m = _16521__self->_method_map();
					return _17921_m->_field_key->_method_supports_cloning() && _17921_m->_field_val->_method_supports_cloning();
				}
			}
			else if (_16521__self->_method_arr() != nullptr) {
				_case_begin_4807891376:;
				{
					return _16521__self->_method_arr()->_field_elem->_method_supports_cloning();
				}
			}
			else if (_16521__self->_method_sptr() != nullptr) {
				_case_begin_4807891488:;
				{
					return _16521__self->_method_sptr()->_field_elem->_method_supports_cloning();
				}
			}
			else if (_16521__self->_method_strct() != nullptr) {
				_case_begin_4807891600:;
				{
					jule::Ptr<_1eb29bdd6_StructIns> _18925_s = _16521__self->_method_strct();
					if ((!(_18925_s->_field_mutable))) {
						return true;
					}
					if (((_18925_s->_field_decl == nullptr) || _18925_s->_field_decl->_field_cpp_linked) || (!(_18925_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
						return false;
					}
					return true;
				}
			}
			else {
				_case_begin_4807890240:;
				{
					return false;
				}
			}
			_match_end_4807890128:;
		}
	}
}



inline jule::Bool _1ec1c55b1_TypeKind::_method_variadicable(void) {
	{
		_1ec1c55b1_TypeKind* _20921__self = (&((*this)));
		return _20921__self->_method_slc() != nullptr;
	}
}



inline jule::Ptr<_1ec1c55b1_Prim> _1ec1c55b1_TypeKind::_method_prim(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Prim>>()) {
			_case_begin_4807913952:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Prim>();
			}
		}
		else {
			_case_begin_4807912192:;
			{
				return nullptr;
			}
		}
		_match_end_4807869744:;
	}
}



inline jule::Ptr<_1ec1c55b1_Sptr> _1ec1c55b1_TypeKind::_method_sptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Sptr>>()) {
			_case_begin_4807916640:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Sptr>();
			}
		}
		else {
			_case_begin_4807913744:;
			{
				return nullptr;
			}
		}
		_match_end_4807914560:;
	}
}



inline jule::Ptr<_1ec1c55b1_Ptr> _1ec1c55b1_TypeKind::_method_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Ptr>>()) {
			_case_begin_4807919328:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Ptr>();
			}
		}
		else {
			_case_begin_4807916432:;
			{
				return nullptr;
			}
		}
		_match_end_4807917248:;
	}
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1ec1c55b1_TypeKind::_method_enm(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1eb7c7e7d_Enum>>()) {
			_case_begin_4807922016:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1eb7c7e7d_Enum>();
			}
		}
		else {
			_case_begin_4807919120:;
			{
				return nullptr;
			}
		}
		_match_end_4807919936:;
	}
}



inline jule::Ptr<_1ec1c55b1_Arr> _1ec1c55b1_TypeKind::_method_arr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Arr>>()) {
			_case_begin_4807924800:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Arr>();
			}
		}
		else {
			_case_begin_4807923792:;
			{
				return nullptr;
			}
		}
		_match_end_4807921760:;
	}
}



inline jule::Ptr<_1ec1c55b1_Slc> _1ec1c55b1_TypeKind::_method_slc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Slc>>()) {
			_case_begin_4807927456:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Slc>();
			}
		}
		else {
			_case_begin_4807924560:;
			{
				return nullptr;
			}
		}
		_match_end_4807925376:;
	}
}



inline jule::Ptr<_1eb627195_FnIns> _1ec1c55b1_TypeKind::_method_fnc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1eb627195_FnIns>>()) {
			_case_begin_4807930272:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1eb627195_FnIns>();
			}
		}
		else {
			_case_begin_4807927200:;
			{
				return nullptr;
			}
		}
		_match_end_4807928400:;
	}
}



inline jule::Ptr<_1eb29bdd6_StructIns> _1ec1c55b1_TypeKind::_method_strct(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_StructIns>>()) {
			_case_begin_4807932960:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1eb29bdd6_StructIns>();
			}
		}
		else {
			_case_begin_4807930064:;
			{
				return nullptr;
			}
		}
		_match_end_4807930880:;
	}
}



inline jule::Ptr<_1eb7c68e9_Trait> _1ec1c55b1_TypeKind::_method_trt(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1eb7c68e9_Trait>>()) {
			_case_begin_4807935744:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1eb7c68e9_Trait>();
			}
		}
		else {
			_case_begin_4807934736:;
			{
				return nullptr;
			}
		}
		_match_end_4807932704:;
	}
}



inline jule::Ptr<_1ec1c55b1_Map> _1ec1c55b1_TypeKind::_method_map(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Map>>()) {
			_case_begin_4807938496:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Map>();
			}
		}
		else {
			_case_begin_4807937488:;
			{
				return nullptr;
			}
		}
		_match_end_4807935456:;
	}
}



inline jule::Ptr<_1ec1c55b1_Tuple> _1ec1c55b1_TypeKind::_method_tup(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_Tuple>>()) {
			_case_begin_4807941248:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ec1c55b1_Tuple>();
			}
		}
		else {
			_case_begin_4807938256:;
			{
				return nullptr;
			}
		}
		_match_end_4807939344:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ec1c55b1_TypeSymbol::_method_checked(void) {
	return (*this)._field_kind != nullptr;
}



inline void _1ec1c55b1_TypeSymbol::_method_remove_kind(void) {
	(*this)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _1ec1c55b1_Prim::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _32822_other) {
	jule::Ptr<_1ec1c55b1_Prim> _32913_prim = _32822_other->_method_prim();
	if (_32913_prim == nullptr) {
		return false;
	}
	return _1ec3e5eda_real_kind_of(this->self->_field_kind) == _1ec3e5eda_real_kind_of(_32913_prim->_field_kind);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _1ec1c55b1_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Sptr::_method_to_str(void) {
	return jule::Str("&", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1ec1c55b1_Sptr::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _39722_other) {
	jule::Ptr<_1ec1c55b1_Sptr> _39813_sptr = _39722_other->_method_sptr();
	if (_39813_sptr == nullptr) {
		return false;
	}
	return this->self->_field_elem->_method_equals(_39813_sptr->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Sptr &_Src) {
	_Stream << "Sptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1ec1c55b1_Slc::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _41622_other) {
	jule::Ptr<_1ec1c55b1_Slc> _41713_slc = _41622_other->_method_slc();
	if (_41713_slc == nullptr) {
		return false;
	}
	return this->self->_field_elem->_method_equals(_41713_slc->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Tuple::_method_to_str(void) {
	jule::Str _43317_s = jule::Str("(", 1);
	_43317_s+=(*this)._field_types[0LL]->_method_to_str();
	{
		auto expr = (*this)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_4807989072:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeKind> &_1ec1c55b1_t = *it;
			{
				_43317_s+=jule::Str(",", 1);
				_43317_s+=_1ec1c55b1_t->_method_to_str();
			}
			_iter_next_4807989072:;
			++it;
			goto _iter_begin_4807989072;
		}
		_iter_end_4807989072:;
	}
	_43317_s+=jule::Str(")", 1);
	return _43317_s;
}



inline jule::Bool _1ec1c55b1_Tuple::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _44422_other) {
	jule::Ptr<_1ec1c55b1_Tuple> _44513_tup = _44422_other->_method_tup();
	if (_44513_tup == nullptr) {
		return false;
	}
	if (this->self->_field_types.len() != _44513_tup->_field_types.len()) {
		return false;
	}
	jule::Int _45417_i = 0LL;
	for (; _45417_i < this->self->_field_types.len(); (_45417_i)++) {
		{
			if ((!(this->self->_field_types[_45417_i]->_method_equals(_44513_tup->_field_types[_45417_i])))) {
				return false;
			}
		}
	_iter_next_4807996416:;
	}
	_iter_end_4807996416:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Map::_method_to_str(void) {
	jule::Str _47417_s = jule::Str("[", 1);
	_47417_s+=(*this)._field_key->_method_to_str();
	_47417_s+=jule::Str(":", 1);
	_47417_s+=(*this)._field_val->_method_to_str();
	_47417_s+=jule::Str("]", 1);
	return _47417_s;
}



inline jule::Bool _1ec1c55b1_Map::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _48322_other) {
	jule::Ptr<_1ec1c55b1_Map> _48413_map = _48322_other->_method_map();
	if (_48413_map == nullptr) {
		return false;
	}
	return this->self->_field_key->_method_equals(_48413_map->_field_key) && this->self->_field_val->_method_equals(_48413_map->_field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Arr::_method_to_str(void) {
	jule::Str _50217_s = jule::Str("[", 1);
	_50217_s+=_1e9e077ac_itoa((*this)._field_n);
	_50217_s+=jule::Str("]", 1);
	_50217_s+=(*this)._field_elem->_method_to_str();
	return _50217_s;
}



inline jule::Bool _1ec1c55b1_Arr::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _51022_other) {
	jule::Ptr<_1ec1c55b1_Arr> _51113_arr = _51022_other->_method_arr();
	if (_51113_arr == nullptr) {
		return false;
	}
	return (this->self->_field_n == _51113_arr->_field_n) && this->self->_field_elem->_method_equals(_51113_arr->_field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec1c55b1_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*this)._field_elem->_method_to_str();
}



inline jule::Bool _1ec1c55b1_Ptr::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _53422_other) {
	jule::Ptr<_1ec1c55b1_Ptr> _53513_ptr = _53422_other->_method_ptr();
	if (_53513_ptr == nullptr) {
		return false;
	}
	return this->self->_field_elem->_method_equals(_53513_ptr->_field_elem);
}



inline jule::Bool _1ec1c55b1_Ptr::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline void _1ea693388_DirectiveEval::_method_push_err(_1ea7465e5_Token _2027_t,jule::Str _2037_fmt,jule::Slice<jule::Any> _2050_args) {
	(*this)._field_logs = jule::alloc_for_append((*this)._field_logs,1);(*this)._field_logs.push(_1e8ea7cc0_Log(1LLU,_2027_t._field_row,_2027_t._field_column,_2027_t._field_file->_method_path(),_1e8ea7cc0_logf(_2037_fmt,_2050_args),jule::Str(),jule::Str()));
}



inline jule::Slice<jule::Slice<_1ea7465e5_Token>> _1ea693388_DirectiveEval::_method_split_operans(jule::Str _3232_op,jule::Slice<_1ea7465e5_Token>& _3252_tokens) {
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _3317_parts = jule::Slice<jule::Slice<_1ea7465e5_Token>>::alloc(0LL,10LL);
	jule::Int _3517_i = 0LL;
	jule::Int _3617_range_n = 0LL;
	jule::Int _3717_last = 0LL;
	for (; _3517_i < (_3252_tokens.len() - 1LL); (_3517_i)++) {
		{
			_1ea7465e5_Token _3917_b = _3252_tokens[_3517_i];
			if (_3917_b._field_id == 3LLU) {
				{
					auto &_match_expr{ _3917_b._field_kind };
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_4808465904:;
						{
							(_3617_range_n)++;
							goto _iter_next_4808462496;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_4808466176:;
						{
							(_3617_range_n)--;
						}
					}
					_match_end_4808465760:;
				}
			}
			if ((_3617_range_n > 0LL) || (_3917_b._field_id != 7LLU)) {
				goto _iter_next_4808462496;
			}
			if (_3917_b._field_kind == _3232_op) {
				_3317_parts.push(_3252_tokens.slice(_3717_last,_3517_i));
				_3717_last=static_cast<jule::Int>(_3517_i + 1LL);
			}
		}
	_iter_next_4808462496:;
	}
	_iter_end_4808462496:;
	if (_3717_last < _3252_tokens.len()) {
		_3317_parts.push(_3252_tokens.slice(_3717_last));
	} else {
		(*this)._method_push_err(_3252_tokens[_3717_last - 1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _3317_parts;
}



inline jule::Bool _1ea693388_DirectiveEval::_method_eval_directive_ident(jule::Str _7335_ident) {
	if (_7335_ident == jule::Str()) {
		return false;
	}
	{
		auto &expr = _1ea6bb812_FLAGS;
		auto it = expr.begin();
		_iter_begin_4808475584:;
		if (it != expr.end()) {
			jule::Str &_1ea693388_flag = *it;
			{
				if (_1ea693388_flag == _7335_ident) {
					return true;
				}
			}
			_iter_next_4808475584:;
			++it;
			goto _iter_begin_4808475584;
		}
		_iter_end_4808475584:;
	}
	return false;
}



inline jule::Bool _1ea693388_DirectiveEval::_method_eval_directive_part(jule::Slice<_1ea7465e5_Token> _8942_part) {
	jule::Bool _9013_logical_not = (_8942_part[0LL]._field_id == 7LLU) && (_8942_part[0LL]._field_kind == jule::Str("!", 1));
	if (_9013_logical_not) {
		_8942_part=_8942_part.slice(1LL);
	}
	if (_8942_part.len() > 1LL) {
		(*this)._method_push_err(_8942_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _10017_result = (*this)._method_eval_directive_ident(_8942_part[0LL]._field_kind);
	if (_9013_logical_not) {
		_10017_result=(!(_10017_result));
	}
	return _10017_result;
}



inline jule::Bool _1ea693388_DirectiveEval::_method_eval(void) {
	if ((*this)._field_d->_field_args.len() == 0LL) {
		(*this)._method_push_err((*this)._field_d->_field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _11317_result = false;
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _11517_logical_or_parts = (*this)._method_split_operans(jule::Str("||", 2),(*this)._field_d->_field_args);
	if (_11517_logical_or_parts == nullptr) {
		return false;
	}
	{
		auto &expr = _11517_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_4808491824:;
		if (it != expr.end()) {
			jule::Slice<_1ea7465e5_Token> _1ea693388_part = *it;
			{
				jule::Bool _12121_and = true;
				jule::Slice<jule::Slice<_1ea7465e5_Token>> _12221_logical_and_parts = (*this)._method_split_operans(jule::Str("&&", 2),_1ea693388_part);
				if (_12221_logical_and_parts == nullptr) {
					return false;
				}
				{
					auto &expr = _12221_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_4808496208:;
					if (it != expr.end()) {
						jule::Slice<_1ea7465e5_Token> _1ea693388_and_part = *it;
						{
							_1ea7465e5_Token _12821_first = _1ea693388_and_part[0LL];
							if ((_12821_first._field_id == 3LLU) && (_12821_first._field_kind == jule::Str("(", 1))) {
								_1ea7465e5_Token _13025_end = _1ea693388_and_part[_1ea693388_and_part.len() - 1LL];
								if ((_13025_end._field_id != 3LLU) || (_13025_end._field_kind != jule::Str(")", 1))) {
									(*this)._method_push_err(_12821_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								}
								_1ea693388_and_part=_1ea693388_and_part.slice(1LL,_1ea693388_and_part.len() - 1LL);
							}
							_12121_and=_12121_and && (*this)._method_eval_directive_part(_1ea693388_and_part);
						}
						_iter_next_4808496208:;
						++it;
						goto _iter_begin_4808496208;
					}
					_iter_end_4808496208:;
				}
				_11317_result=_11317_result || _12121_and;
			}
			_iter_next_4808491824:;
			++it;
			goto _iter_begin_4808491824;
		}
		_iter_end_4808491824:;
	}
	return _11317_result;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea693388_DirectiveEval &_Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline void _1ea6cd59e_PlainImporter::_method_set_mod_path(jule::Str _7635_path) {
	(*this)._field_mod=_7635_path;
}



inline jule::Str _1ea6cd59e_PlainImporter::_method_get_mod_path(void) {
	return (*this)._field_mod;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1ea6cd59e_PlainImporter::_method_get_import(jule::Str _8433_path) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_4808512576:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ea6cd59e_p = *it;
			{
				if (_1ea6cd59e_p->_field_path == _8433_path) {
					return _1ea6cd59e_p;
				}
			}
			_iter_next_4808512576:;
			++it;
			goto _iter_begin_4808512576;
		}
		_iter_end_4808512576:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>,jule::Slice<_1e8ea7cc0_Log>> _1ea6cd59e_PlainImporter::_method_import_package(jule::Str _9437_path,jule::Bool _9448_update_mod) {
	jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>> _9517_dirents = ({
		auto except = _1e8e1506d_Directory::_static_method_read(_9437_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_1e8ea7cc0_Log>({_1ea6cd59e_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _9437_path)}));
			return std::make_tuple(nullptr,jule::Slice<_1e8ea7cc0_Log>({_1ea6cd59e_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _9437_path)}));
		} jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>();});
	});
	if (_9448_update_mod && _1ea70c204_find_module_file(_9517_dirents)) {
		(*this)._field_mod=_9437_path;
		jule::Slice<_1e8ea7cc0_Log> _10121_errs = _1ea70c204_check_module_file(_9437_path);
		if (_10121_errs.len() != 0LL) {
			return std::make_tuple(nullptr,_10121_errs);
		}
	}
	jule::Slice<jule::Ptr<_1ea6ecac9_Ast>> _10717_asts = jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>::alloc(0LL,static_cast<jule::I64>(_9517_dirents.len()));
	{
		auto &expr = _9517_dirents;
		auto it = expr.begin();
		_iter_begin_4808527056:;
		if (it != expr.end()) {
			jule::Ptr<_1e8e1506d_DirEntry> &_1ea6cd59e_dirent = *it;
			{
				if (_1ea6cd59e_dirent->_field_stat->_method_is_dir() || (!(_1ea6cd59e_dirent->_field_name.has_suffix(jule::Str(".jule", 5))))) {
					goto _iter_next_4808527056;
				}
				jule::Str _11417__path = _1e904e87d_join(jule::Slice<jule::Str>({_9437_path,_1ea6cd59e_dirent->_field_name}));
				jule::Ptr<_1ea701c98_File> _11521_file = _1ea701c98_new_file_set(_11417__path);
				_11521_file->_method_fill(_1ea6cd59e_read_buff(_11521_file->_method_path()));
				jule::Slice<_1e8ea7cc0_Log> _11721_errors = _1ea703492_lex(_11521_file);
				if (_11721_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_11721_errors);
				}
				jule::Ptr<_1ea713260_FileInfo> _12221_finfo = _1ea713260_parse_file(_11521_file);
				if (_12221_finfo->_field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_12221_finfo->_field_errors);
				}
				if ((!(_1ea6918d6_is_pass_file_annotation(_1ea6cd59e_dirent->_field_name)))) {
					goto _iter_next_4808527056;
				}
				jule::Bool _13218_r;
				jule::Slice<_1e8ea7cc0_Log> _13225_logs;
				std::tie(_13218_r,_13225_logs) = _1ea6cd59e_is_pass_build_directives(_12221_finfo->_field_ast);
				if (_13225_logs.len() > 0LL) {
					return std::make_tuple(nullptr,_13225_logs);
				}
				if ((!(_13218_r))) {
					goto _iter_next_4808527056;
				}
				_10717_asts.push(_12221_finfo->_field_ast);
			}
			_iter_next_4808527056:;
			++it;
			goto _iter_begin_4808527056;
		}
		_iter_end_4808527056:;
	}
	return std::make_tuple(_10717_asts,nullptr);
}



inline void _1ea6cd59e_PlainImporter::_method_imported(jule::Ptr<_1eb7d8048_ImportInfo> _14835_imp) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_4808546880:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> &_1ea6cd59e_p = *it;
			{
				if ((_1ea6cd59e_p->_field_cpp_linked == _14835_imp->_field_cpp_linked) && (_1ea6cd59e_p->_field_link_path == _14835_imp->_field_link_path)) {
					return;
				}
			}
			_iter_next_4808546880:;
			++it;
			goto _iter_begin_4808546880;
		}
		_iter_end_4808546880:;
	}
	(*this)._field_all_packages = jule::alloc_for_append((*this)._field_all_packages,1);(*this)._field_all_packages.push(_14835_imp);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6cd59e_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea66c175_OrderedDefines &_Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "globals:" << _Src._field_globals;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea66c175_DefineOrderer::_static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_1eba533d4_Var>>& _1837_s,jule::Ptr<_1eba533d4_Var> _1846_t) {
	jule::Ptr<_1eba533d4_Var>* _1917_p = (&(_1846_t->_field_depends[0LL]));
	jule::Ptr<_1eba533d4_Var>* _2013_end = _1917_p + _1846_t->_field_depends.len();
	{
		auto &expr = _1837_s;
		auto it = expr.begin();
		_iter_begin_4808655008:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> &_1ea66c175_tt = *it;
			{
				{
					if (_1ea66c175_tt == _1846_t) {
						goto _iter_end_4808655008;
					}
					if (((*(_1917_p))->_field_cpp_linked || ((*(_1917_p))->_field_depends.len() == 0LL)) || (_1ea66c175_tt == (*(_1917_p)))) {
						(_1917_p)++;
						if (_1917_p == _2013_end) {
							return true;
						}
					}
				}
			}
			_iter_next_4808655008:;
			++it;
			goto _iter_begin_4808655008;
		}
		_iter_end_4808655008:;
	}
	return false;
}

inline jule::Bool _1ea66c175_DefineOrderer::_static_method_is_common_ordered_1(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _1837_s,jule::Ptr<_1eb29bdd6_Struct> _1846_t) {
	jule::Ptr<_1eb29bdd6_Struct>* _1917_p = (&(_1846_t->_field_depends[0LL]));
	jule::Ptr<_1eb29bdd6_Struct>* _2013_end = _1917_p + _1846_t->_field_depends.len();
	{
		auto &expr = _1837_s;
		auto it = expr.begin();
		_iter_begin_4808678720:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> &_1ea66c175_tt = *it;
			{
				{
					if (_1ea66c175_tt == _1846_t) {
						goto _iter_end_4808678720;
					}
					if (((*(_1917_p))->_field_cpp_linked || ((*(_1917_p))->_field_depends.len() == 0LL)) || (_1ea66c175_tt == (*(_1917_p)))) {
						(_1917_p)++;
						if (_1917_p == _2013_end) {
							return true;
						}
					}
				}
			}
			_iter_next_4808678720:;
			++it;
			goto _iter_begin_4808678720;
		}
		_iter_end_4808678720:;
	}
	return false;
}



inline void _1ea66c175_DefineOrderer::_static_method_order_common_0(jule::Slice<jule::Ptr<_1eba533d4_Var>>& _3940_s) {
	jule::Int _4017_i = 0LL;
	{
		auto &expr = _3940_s;
		auto it = expr.begin();
		_iter_begin_4808638384:;
		if (it != expr.end()) {
			jule::Int _1ea66c175_j = it - expr.begin();
			jule::Ptr<_1eba533d4_Var> _1ea66c175_t = *it;
			{
				if (_1ea66c175_t->_field_cpp_linked || (_1ea66c175_t->_field_depends.len() == 0LL)) {
					_3940_s.swap(_4017_i,_1ea66c175_j);
					(_4017_i)++;
				}
			}
			_iter_next_4808638384:;
			++it;
			_1ea66c175_j++;
			goto _iter_begin_4808638384;
		}
		_iter_end_4808638384:;
	}
	jule::Int _4817_j = _4017_i;
	for (; _4817_j < _3940_s.len(); (_4817_j)++) {
		{
			jule::Int _5021_k = _4017_i;
			for (; _5021_k < (_3940_s.len() - 1LL); (_5021_k)++) {
				{
					if ((!(_1ea66c175_DefineOrderer::_static_method_is_common_ordered_0(_3940_s,_3940_s[_5021_k])))) {
						_3940_s.swap(_5021_k,static_cast<jule::Int>(_5021_k + 1LL));
					}
				}
			_iter_next_4808644352:;
			}
			_iter_end_4808644352:;
		}
	_iter_next_4808636880:;
	}
	_iter_end_4808636880:;
}

inline void _1ea66c175_DefineOrderer::_static_method_order_common_1(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _3940_s) {
	jule::Int _4017_i = 0LL;
	{
		auto &expr = _3940_s;
		auto it = expr.begin();
		_iter_begin_4808662160:;
		if (it != expr.end()) {
			jule::Int _1ea66c175_j = it - expr.begin();
			jule::Ptr<_1eb29bdd6_Struct> _1ea66c175_t = *it;
			{
				if (_1ea66c175_t->_field_cpp_linked || (_1ea66c175_t->_field_depends.len() == 0LL)) {
					_3940_s.swap(_4017_i,_1ea66c175_j);
					(_4017_i)++;
				}
			}
			_iter_next_4808662160:;
			++it;
			_1ea66c175_j++;
			goto _iter_begin_4808662160;
		}
		_iter_end_4808662160:;
	}
	jule::Int _4817_j = _4017_i;
	for (; _4817_j < _3940_s.len(); (_4817_j)++) {
		{
			jule::Int _5021_k = _4017_i;
			for (; _5021_k < (_3940_s.len() - 1LL); (_5021_k)++) {
				{
					if ((!(_1ea66c175_DefineOrderer::_static_method_is_common_ordered_1(_3940_s,_3940_s[_5021_k])))) {
						_3940_s.swap(_5021_k,static_cast<jule::Int>(_5021_k + 1LL));
					}
				}
			_iter_next_4808668128:;
			}
			_iter_end_4808668128:;
		}
	_iter_next_4808657088:;
	}
	_iter_end_4808657088:;
}



inline void _1ea66c175_DefineOrderer::_static_method_order_variables(jule::Slice<jule::Ptr<_1eba533d4_Var>>& _6140_vars) {
	_1ea66c175_DefineOrderer::_static_method_order_common_0(_6140_vars);
}



inline void _1ea66c175_DefineOrderer::_static_method_order_structures(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _6741_structs) {
	_1ea66c175_DefineOrderer::_static_method_order_common_1(_6741_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea66c175_DefineOrderer &_Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}



inline void _1ea65d034_ScopeDeadCode::_method_optimize_child(jule::Ptr<_1eb7d5892_Scope>& _2339_s) {
	jule::Ptr<_1ea65d034_ScopeDeadCode> _2417_sdc = jule::new_struct_ptr<_1ea65d034_ScopeDeadCode>(new( std::nothrow ) _1ea65d034_ScopeDeadCode(this->self,_2339_s,(&(_2339_s->_field_stmts)),jule::Int()));
	{
		_2417_sdc->_method_optimize_stmts();
	}
}



inline void _1ea65d034_ScopeDeadCode::_method_eliminate_followed(void) {
	(*((*this)._field_stmts))=(*((*this)._field_stmts)).slice(0LL,(*this)._field_i + 1LL);
	jule::Ptr<_1ea65d034_ScopeDeadCode> _3417_parent = (*this)._field_parent;
	while (_3417_parent != nullptr) {
		{
			(*(_3417_parent->_field_stmts))=(*(_3417_parent->_field_stmts)).slice(0LL,_3417_parent->_field_i + 1LL);
			_3417_parent=_3417_parent->_field_parent;
		}
	_iter_next_4808855152:;
	}
	_iter_end_4808855152:;
}



inline void _1ea65d034_ScopeDeadCode::_method_optimize_stmt(jule::Any _4144_st) {
	{
		auto &_match_expr{ _4144_st };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Scope>>()) {
			_case_begin_4808859824:;
			{
				jule::Ptr<_1eb7d5892_Scope> _4421_scope = _4144_st.operator jule::Ptr<_1eb7d5892_Scope>();
				if (_4421_scope->_field_deferred) {
					_1ea65d034_eliminate_dead_code_of_scope(_4421_scope);
				} else {
					this->self->_method_optimize_child(_4421_scope);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ebcce31e_Data>>()) {
			_case_begin_4808860064:;
			{
				{
					auto &_match_expr{ _4144_st.operator jule::Ptr<_1ebcce31e_Data>()->_field_model };
					if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>>()) {
						_case_begin_4808865424:;
						{
							this->self->_method_eliminate_followed();
						}
					}
					_match_end_4808865712:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RetSt>>()) {
			_case_begin_4808860160:;
			{
				this->self->_method_eliminate_followed();
			}
		}
		_match_end_4808859920:;
	}
}



inline void _1ea65d034_ScopeDeadCode::_method_optimize_stmts(void) {
	this->self->_field_i=0LL;
	for (; this->self->_field_i < this->self->_field_stmts->len(); (this->self->_field_i)++) {
		{
			this->self->_method_optimize_stmt((*(this->self->_field_stmts))[this->self->_field_i]);
		}
	_iter_next_4808869632:;
	}
	_iter_end_4808869632:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea65d034_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _1d059016d_AbsTime::_method_unix(void) {
	jule::Bool _5417_leap = false;
	jule::Uint _5517_y = (*this)._field_year - 1900LL;
	jule::Uint _5617_m = (*this)._field_month - 1LL;
	if ((_5617_m >= 12LL) || (_5617_m < 0LL)) {
		jule::Uint _5821_adj = jule::unsafe_div(_5617_m,12LL);
		_5617_m = jule::unsafe_mod(_5617_m,12LL);
		if (_5617_m < 0LL) {
			(_5821_adj)--;
			_5617_m+=12LLU;
		}
		_5517_y+=_5821_adj;
	}
	jule::U64 _6617_t = _1d059016d_unix_year_to_seconds(_5517_y,_5417_leap);
	_6617_t+=static_cast<jule::U64>(_1d059016d_unix_month_to_seconds(_5617_m,_5417_leap));
	_6617_t+=static_cast<jule::Uint>(86400LL * ((*this)._field_day - 1LL));
	_6617_t+=static_cast<jule::Uint>(3600LL * (*this)._field_hour);
	_6617_t+=static_cast<jule::Uint>(60LL * (*this)._field_minute);
	_6617_t+=(*this)._field_second;
	return _6617_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1d059016d_AbsTime &_Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _1d059016d_Time _1d059016d_Time::_static_method_unix(jule::U64 _8924_sec) {
	return _1d059016d_Time(_8924_sec);
}



inline _1d059016d_Time _1d059016d_Time::_static_method_now(void) {
	return _1d059016d_Time::_static_method_unix(static_cast<jule::U64>(_1d059016d_unix()));
}



inline jule::U64 _1d059016d_Time::_method_unix(void) {
	return (*this)._field_sec;
}



inline jule::Uint _1d059016d_Time::_method_day(void) {
	return (*this)._method_abs()._field_day;
}



inline jule::Uint _1d059016d_Time::_method_month(void) {
	return (*this)._method_abs()._field_month;
}



inline jule::Uint _1d059016d_Time::_method_year(void) {
	return (*this)._method_abs()._field_year;
}



inline jule::Uint _1d059016d_Time::_method_second(void) {
	return (*this)._method_abs()._field_second;
}



inline jule::Uint _1d059016d_Time::_method_minute(void) {
	return (*this)._method_abs()._field_minute;
}



inline jule::Uint _1d059016d_Time::_method_hour(void) {
	return (*this)._method_abs()._field_hour;
}



inline _1d059016d_AbsTime _1d059016d_Time::_method_abs(void) {
	jule::U64 _12513_secs = (*this)._field_sec - 951868800LL;
	jule::U64 _12617_days = jule::unsafe_div(_12513_secs,86400LL);
	jule::U64 _12717_rem_secs = jule::unsafe_mod(_12513_secs,86400LL);
	if (_12717_rem_secs < 0LL) {
		_12717_rem_secs+=86400LLU;
		(_12617_days)--;
	}
	jule::U64 _13317_qc_cycles = jule::unsafe_div(_12617_days,146097LL);
	jule::U64 _13417_rem_days = jule::unsafe_mod(_12617_days,146097LL);
	if (_13417_rem_days < 0LL) {
		_13417_rem_days+=146097LLU;
		(_13317_qc_cycles)--;
	}
	jule::U64 _14017_c_cycles = jule::unsafe_div(_13417_rem_days,36524LL);
	if (_14017_c_cycles == 4LL) {
		(_14017_c_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14017_c_cycles * 36524LL);
	jule::U64 _14617_q_cycles = jule::unsafe_div(_13417_rem_days,1461LL);
	if (_14617_q_cycles == 25LL) {
		(_14617_q_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14617_q_cycles * 1461LL);
	jule::U64 _15217_rem_years = jule::unsafe_div(_13417_rem_days,365LL);
	if (_15217_rem_years == 4LL) {
		(_15217_rem_years)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_15217_rem_years * 365LL);
	jule::U8 _15813_leap = static_cast<jule::U8>(((((_15217_rem_years == 0LL) && ((_14617_q_cycles > 0LL) || (_14017_c_cycles == 0LL)))) ? (1LLU) : (0LLU)));
	jule::U64 _15917_y_day = ((_13417_rem_days + 31LL) + 28LL) + _15813_leap;
	if (_15917_y_day >= (365LL + _15813_leap)) {
		_15917_y_day-=static_cast<jule::U8>(365LL + _15813_leap);
	}
	jule::Int _16417_months = 0LL;
	for (; _1d059016d_MDAYS[_16417_months] <= _13417_rem_days; (_16417_months)++) {
		{
			_13417_rem_days-=_1d059016d_MDAYS[_16417_months];
		}
	_iter_next_4808973056:;
	}
	_iter_end_4808973056:;
	_1d059016d_AbsTime _16917_t = _1d059016d_AbsTime();
	_16917_t._field_year=static_cast<jule::U64>((((_15217_rem_years + (4LL * _14617_q_cycles)) + (100LL * _14017_c_cycles)) + (400LL * _13317_qc_cycles)) + 100LL);
	_16917_t._field_month=static_cast<jule::Uint>(_16417_months + 2LL);
	if (_16917_t._field_month >= 12LL) {
		_16917_t._field_month-=12LLU;
		(_16917_t._field_year)++;
	}
	_16917_t._field_month+=1LLU;
	_16917_t._field_year+=1900LLU;
	_16917_t._field_day=static_cast<jule::U64>(_13417_rem_days + 1LL);
	_16917_t._field_week_day=static_cast<jule::U64>(jule::unsafe_mod(3LL + _12617_days,7LL));
	if (_16917_t._field_week_day < 0LL) {
		_16917_t._field_week_day+=7LLU;
	}
	_16917_t._field_year_day=_15917_y_day;
	_16917_t._field_hour=static_cast<jule::U64>(jule::unsafe_div(_12717_rem_secs,3600LL));
	_16917_t._field_minute=static_cast<jule::U64>(jule::unsafe_mod(jule::unsafe_div(_12717_rem_secs,60LL),60LL));
	_16917_t._field_second=static_cast<jule::U64>(jule::unsafe_mod(_12717_rem_secs,60LL));
	return _16917_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1d059016d_Time &_Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::I64 _1d059016d_Duration::_static_method_nanoseconds(jule::I64 _22231_d) {
	return static_cast<jule::I64>(_22231_d * 1LL);
}



inline jule::I64 _1d059016d_Duration::_static_method_microseconds(jule::I64 _22732_d) {
	return static_cast<jule::I64>(_22732_d * 1000LL);
}



inline jule::I64 _1d059016d_Duration::_static_method_milliseconds(jule::I64 _23232_d) {
	return static_cast<jule::I64>(_23232_d * 1000000LL);
}



inline jule::I64 _1d059016d_Duration::_static_method_seconds(jule::I64 _23727_d) {
	return static_cast<jule::I64>(_23727_d * 1000000000LL);
}



inline jule::I64 _1d059016d_Duration::_static_method_minutes(jule::I64 _24227_d) {
	return static_cast<jule::I64>(_24227_d * 60000000000LL);
}



inline jule::I64 _1d059016d_Duration::_static_method_hours(jule::I64 _24725_d) {
	return static_cast<jule::I64>(_24725_d * 3600000000000LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1d059016d_Duration &_Src) {
	_Stream << "Duration{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ec748ded_Flag_0::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1ec748ded_Flag_0::_method_what(void) {
	return (*this)._field__what;
}



inline void _1ec748ded_Flag_0::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1ec748ded_Flag_0::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_Flag_0 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1ec748ded_Flag_1::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1ec748ded_Flag_1::_method_what(void) {
	return (*this)._field__what;
}



inline void _1ec748ded_Flag_1::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1ec748ded_Flag_1::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_Flag_1 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1ec748ded_Flag_2::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1ec748ded_Flag_2::_method_what(void) {
	return (*this)._field__what;
}



inline void _1ec748ded_Flag_2::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1ec748ded_Flag_2::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_Flag_2 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1ec748ded_Flag_3::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1ec748ded_Flag_3::_method_what(void) {
	return (*this)._field__what;
}



inline void _1ec748ded_Flag_3::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1ec748ded_Flag_3::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_Flag_3 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1ec748ded_Flag_4::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1ec748ded_Flag_4::_method_what(void) {
	return (*this)._field__what;
}



inline void _1ec748ded_Flag_4::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1ec748ded_Flag_4::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_Flag_4 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ec748ded_FlagSet> _1ec748ded_FlagSet::_static_method_new(void) {
	return jule::new_struct<_1ec748ded_FlagSet>(new( std::nothrow ) _1ec748ded_FlagSet(jule::Slice<jule::Trait<_1ec748ded_CommonFlag>>::alloc(0LL,20LL)));
}



inline jule::Trait<_1ec748ded_CommonFlag> _1ec748ded_FlagSet::_method_find_flag(jule::Str _6632_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_4810574272:;
		if (it != expr.end()) {
			jule::Trait<_1ec748ded_CommonFlag> _1ec748ded_flag = *it;
			{
				if (_1ec748ded_flag.get()._method_name() == _6632_name) {
					return _1ec748ded_flag;
				}
			}
			_iter_next_4810574272:;
			++it;
			goto _iter_begin_4810574272;
		}
		_iter_end_4810574272:;
	}
	return nullptr;
}



inline jule::Trait<_1ec748ded_CommonFlag> _1ec748ded_FlagSet::_method_find_flag_short(jule::I32 _7638_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_4810578944:;
		if (it != expr.end()) {
			jule::Trait<_1ec748ded_CommonFlag> _1ec748ded_flag = *it;
			{
				if (_1ec748ded_flag.get()._method_short() == _7638_name) {
					return _1ec748ded_flag;
				}
			}
			_iter_next_4810578944:;
			++it;
			goto _iter_begin_4810578944;
		}
		_iter_end_4810578944:;
	}
	return nullptr;
}



inline jule::Slice<jule::Trait<_1ec748ded_CommonFlag>> _1ec748ded_FlagSet::_method_flags(void) {
	return (*this)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _1ec748ded_FlagSet::_method_parse(jule::Slice<jule::Str> _11028_args) {
	_1ec748ded_ArgParser _11117_ap = _1ec748ded_ArgParser((*this),_11028_args,jule::Slice<jule::Str>(),jule::Int());
	({
		auto except = _11117_ap._method_parse();
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional(jule::Any(),_11117_ap._field_content);
}



inline void _1ec748ded_FlagSet::_method_reset(void) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_4810595184:;
		if (it != expr.end()) {
			jule::Trait<_1ec748ded_CommonFlag> &_1ec748ded_f = *it;
			{
				_1ec748ded_f.get()._method_reset();
			}
			_iter_next_4810595184:;
			++it;
			goto _iter_begin_4810595184;
		}
		_iter_end_4810595184:;
	}
}



inline jule::Ptr<_1ec748ded_Flag_3> _1ec748ded_FlagSet::_method_add_flag_common_0(jule::Str _12641_name,jule::I32 _12652_short,jule::Str _12665_what) {
	
	if ((*this)._method_find_flag(_12641_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12641_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:136:13"));;
	}
	if ((_12652_short != 0LL) && ((*this)._method_find_flag_short(_12652_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12652_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:140:13"));;
	}
	jule::Ptr<_1ec748ded_Flag_3> _14317_flag = jule::new_struct<_1ec748ded_Flag_3>(new( std::nothrow ) _1ec748ded_Flag_3(_12641_name,_12652_short,jule::Bool(),_12665_what,jule::Ptr<jule::Bool>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.push(_14317_flag);
	return _14317_flag;
}

inline jule::Ptr<_1ec748ded_Flag_4> _1ec748ded_FlagSet::_method_add_flag_common_1(jule::Str _12641_name,jule::I32 _12652_short,jule::Str _12665_what) {
	
	if ((*this)._method_find_flag(_12641_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12641_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:136:13"));;
	}
	if ((_12652_short != 0LL) && ((*this)._method_find_flag_short(_12652_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12652_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:140:13"));;
	}
	jule::Ptr<_1ec748ded_Flag_4> _14317_flag = jule::new_struct<_1ec748ded_Flag_4>(new( std::nothrow ) _1ec748ded_Flag_4(_12641_name,_12652_short,jule::Str(),_12665_what,jule::Ptr<jule::Str>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.push(_14317_flag);
	return _14317_flag;
}





inline void _1ec748ded_FlagSet::_method_add_var_0(jule::Ptr<jule::Bool> _17037_var,jule::Str _17046_name,jule::I32 _17057_short,jule::Str _17070_what) {
	jule::Ptr<_1ec748ded_Flag_3> _17117_flag = (*this)._method_add_flag_common_0(_17046_name,_17057_short,_17070_what);
	_17117_flag->_field__default=(*(_17037_var));
	_17117_flag->_field__data=_17037_var;
}

inline void _1ec748ded_FlagSet::_method_add_var_1(jule::Ptr<jule::Str> _17037_var,jule::Str _17046_name,jule::I32 _17057_short,jule::Str _17070_what) {
	jule::Ptr<_1ec748ded_Flag_4> _17117_flag = (*this)._method_add_flag_common_1(_17046_name,_17057_short,_17070_what);
	_17117_flag->_field__default=(*(_17037_var));
	_17117_flag->_field__data=_17037_var;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_FlagSet &_Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_EnumItemDecl::_method_auto_expr(void) {
	return (*this)._field_expr == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_EnumDecl::_method_default_typed(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _1ea6ee955_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_UseExpr &_Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_CoExpr &_Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb382692_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7ccdea_BuiltinAssertCallExprModel &_Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb29bdd6_FieldIns> _1eb29bdd6_Field::_method_instance(void) {
	return jule::new_struct<_1eb29bdd6_FieldIns>(new( std::nothrow ) _1eb29bdd6_FieldIns(this->self,this->self->_field_kind->_field_kind));
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb29bdd6_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb29bdd6_StructIns> _1eb29bdd6_Struct::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[0LL];
	}
	jule::Ptr<_1eb29bdd6_StructIns> _6717_ins = jule::new_struct_ptr<_1eb29bdd6_StructIns>(new( std::nothrow ) _1eb29bdd6_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb29bdd6_FieldIns>>::alloc(0LL,static_cast<jule::I64>(this->self->_field_fields.len())),jule::Slice<jule::Ptr<_1eb627195_Fn>>::alloc(0LL,static_cast<jule::I64>(this->self->_field_methods.len())),jule::Bool(),_1eb736eec_ReferenceStack::_static_method_new()));
	{
		auto &expr = this->self->_field_fields;
		auto it = expr.begin();
		_iter_begin_4802751088:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Field> _1eb29bdd6_f = *it;
			{
				_6717_ins->_field_fields = jule::alloc_for_append(_6717_ins->_field_fields,1);_6717_ins->_field_fields.push(_1eb29bdd6_f->_method_instance());
				if ((_1eb29bdd6_f->_field_kind->_field_kind != nullptr) && _1eb29bdd6_f->_field_kind->_field_kind->_method_mutable()) {
					_6717_ins->_field_mutable=true;
				}
			}
			_iter_next_4802751088:;
			++it;
			goto _iter_begin_4802751088;
		}
		_iter_end_4802751088:;
	}
	{
		auto &expr = this->self->_field_methods;
		auto it = expr.begin();
		_iter_begin_4802753232:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb29bdd6_f = *it;
			{
				jule::Ptr<_1eb627195_Fn> _8221_fins = jule::new_struct_ptr<_1eb627195_Fn>(new( std::nothrow ) _1eb627195_Fn(_1eb29bdd6_f->_field_sema,_1eb29bdd6_f->_field_token,_1eb29bdd6_f->_field_global,_1eb29bdd6_f->_field_unsafety,_1eb29bdd6_f->_field_public,_1eb29bdd6_f->_field_cpp_linked,_1eb29bdd6_f->_field_statically,_1eb29bdd6_f->_field_exceptional,_1eb29bdd6_f->_field_ident,_1eb29bdd6_f->_field_directives,_1eb29bdd6_f->_field_doc,_1eb29bdd6_f->_field_scope,_1eb29bdd6_f->_field_generics,_1eb29bdd6_f->_field_result,_1eb29bdd6_f->_field_params,_1eb29bdd6_f->_field_owner,nullptr));
				_6717_ins->_field_methods = jule::alloc_for_append(_6717_ins->_field_methods,1);_6717_ins->_field_methods.push(_8221_fins);
			}
			_iter_next_4802753232:;
			++it;
			goto _iter_begin_4802753232;
		}
		_iter_end_4802753232:;
	}
	return _6717_ins;
}



inline jule::Ptr<_1eb29bdd6_StructIns> _1eb29bdd6_Struct::_method_append_instance(jule::Ptr<_1eb29bdd6_StructIns>& _10939_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_4802763056:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_StructIns> _1eb29bdd6_ains = *it;
			{
				if (_1eb29bdd6_ains->_method_same(_10939_ins)) {
					return _1eb29bdd6_ains;
				}
			}
			_iter_next_4802763056:;
			++it;
			goto _iter_begin_4802763056;
		}
		_iter_end_4802763056:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_10939_ins);
	return nullptr;
}



inline jule::Ptr<_1eb627195_Fn> _1eb29bdd6_Struct::_method_find_method(jule::Str _12734_ident,jule::Bool _12746_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4802771440:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb29bdd6_f = *it;
			{
				if ((_1eb29bdd6_f->_field_statically == _12746_statically) && (_1eb29bdd6_f->_field_ident == _12734_ident)) {
					return _1eb29bdd6_f;
				}
			}
			_iter_next_4802771440:;
			++it;
			goto _iter_begin_4802771440;
		}
		_iter_end_4802771440:;
	}
	return nullptr;
}



inline jule::Ptr<_1eba533d4_Var> _1eb29bdd6_Struct::_method_find_static(jule::Str _13834_ident) {
	{
		auto &expr = (*this)._field_statics;
		auto it = expr.begin();
		_iter_begin_4802775584:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1eb29bdd6_v = *it;
			{
				if (_1eb29bdd6_v->_field_ident == _13834_ident) {
					return _1eb29bdd6_v;
				}
			}
			_iter_next_4802775584:;
			++it;
			goto _iter_begin_4802775584;
		}
		_iter_end_4802775584:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb29bdd6_Field> _1eb29bdd6_Struct::_method_find_field(jule::Str _14933_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_4802779552:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Field> _1eb29bdd6_f = *it;
			{
				if (_1eb29bdd6_f->_field_ident == _14933_ident) {
					return _1eb29bdd6_f;
				}
			}
			_iter_next_4802779552:;
			++it;
			goto _iter_begin_4802779552;
		}
		_iter_end_4802779552:;
	}
	return nullptr;
}



inline jule::Bool _1eb29bdd6_Struct::_method_is_implements(jule::Ptr<_1eb7c68e9_Trait> _15932_t) {
	{
		auto &expr = (*this)._field_implements;
		auto it = expr.begin();
		_iter_begin_4802783520:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> &_1eb29bdd6_it = *it;
			{
				if (_15932_t == _1eb29bdd6_it) {
					return true;
				}
			}
			_iter_next_4802783520:;
			++it;
			goto _iter_begin_4802783520;
		}
		_iter_end_4802783520:;
	}
	return false;
}



inline jule::Bool _1eb29bdd6_Struct::_method_is_derives(jule::Str _16929_ident) {
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_4802785264:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> &_1eb29bdd6_d = *it;
			{
				if (_1eb29bdd6_d->_field_tag._field_kind == jule::Str("derive", 6)) {
					if ((_1eb29bdd6_d->_field_args.len() == 1LL) && (_1eb29bdd6_d->_field_args[0LL]._field_kind == _16929_ident)) {
						return true;
					}
				}
			}
			_iter_next_4802785264:;
			++it;
			goto _iter_begin_4802785264;
		}
		_iter_end_4802785264:;
	}
	return false;
}



inline jule::Bool _1eb29bdd6_Struct::_method_is_uses(jule::Ptr<_1eb29bdd6_Struct> _18126_s) {
	{
		auto &expr = (*this)._field_uses;
		auto it = expr.begin();
		_iter_begin_4802792224:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> &_1eb29bdd6_u = *it;
			{
				while (_18126_s == _1eb29bdd6_u) {
					{
						return true;
					}
				_iter_next_4802793536:;
				}
				_iter_end_4802793536:;
			}
			_iter_next_4802792224:;
			++it;
			goto _iter_begin_4802792224;
		}
		_iter_end_4802792224:;
	}
	return false;
}



inline jule::Bool _1eb29bdd6_Struct::_method_has_ref_accessible(void) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4802793904:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> &_1eb29bdd6_m = *it;
			{
				if ((_1eb29bdd6_m->_field_params.len() > 0LL) && _1eb29bdd6_m->_field_params[0LL]->_method_is_ref()) {
					return true;
				}
			}
			_iter_next_4802793904:;
			++it;
			goto _iter_begin_4802793904;
		}
		_iter_end_4802793904:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb29bdd6_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb627195_ParamIns> _1eb627195_Param::_method_instance(void) {
	return jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(this->self,jule::Ptr<_1ec1c55b1_TypeKind>()));
}



inline jule::Bool _1eb627195_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _1eb627195_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb627195_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eb627195_Fn::_method_is_void(void) {
	return (*this)._field_result == nullptr;
}



inline jule::Bool _1eb627195_Fn::_method_is_method(void) {
	return (*this)._field_owner != nullptr;
}



inline jule::Bool _1eb627195_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _1eb627195_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _1eb627195_Fn::_method_is_anon(void) {
	return _1ea7465e5_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _1eb627195_Fn::_method_any_var(void) {
	return ((*this)._field_result != nullptr) && ((*this)._field_result->_field_idents.len() > 0LL);
}



inline jule::Bool _1eb627195_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*this)._field_params;
		auto it = expr.begin();
		_iter_begin_4802847936:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Param> &_1eb627195_p = *it;
			{
				if (_1eb627195_parameter_uses_generics(_1eb627195_p,(*this)._field_generics)) {
					return true;
				}
			}
			_iter_next_4802847936:;
			++it;
			goto _iter_begin_4802847936;
		}
		_iter_end_4802847936:;
	}
	return false;
}



inline jule::Bool _1eb627195_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if (((*this)._field_result->_field_kind == nullptr) || ((*this)._field_result->_field_kind->_field_kind == nullptr)) {
		return false;
	}
	return _1eb627195_kind_uses_generics((*this)._field_result->_field_kind->_field_kind,(*this)._field_generics);
}



inline jule::Ptr<_1eb627195_FnIns> _1eb627195_Fn::_method_instance_force(void) {
	jule::Ptr<_1eb627195_FnIns> _11117_ins = jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),this->self,jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::new_struct<_1eb7d5892_Scope>(new( std::nothrow ) _1eb7d5892_Scope()),_1eb736eec_ReferenceStack::_static_method_new(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::U8(),jule::Bool()));
	if (this->self->_method_is_init()) {
		_11117_ins->_field_refers=_1eb736eec_ReferenceStack::_static_method_new();
	}
	_11117_ins->_field_params=jule::Slice<jule::Ptr<_1eb627195_ParamIns>>::alloc(0LL,static_cast<jule::I64>(this->self->_field_params.len()));
	{
		auto &expr = this->self->_field_params;
		auto it = expr.begin();
		_iter_begin_4802861392:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Param> _1eb627195_p = *it;
			{
				_11117_ins->_field_params = jule::alloc_for_append(_11117_ins->_field_params,1);_11117_ins->_field_params.push(_1eb627195_p->_method_instance());
			}
			_iter_next_4802861392:;
			++it;
			goto _iter_begin_4802861392;
		}
		_iter_end_4802861392:;
	}
	if (_11117_ins->_field_decl->_field_result != nullptr) {
		_11117_ins->_field_result=_11117_ins->_field_decl->_field_result->_field_kind->_field_kind;
	}
	return _11117_ins;
}



inline jule::Ptr<_1eb627195_FnIns> _1eb627195_Fn::_method_instance(void) {
	if ((this->self->_field_generics.len() == 0LL) && (this->self->_field_instances.len() == 1LL)) {
		return this->self->_field_instances[0LL];
	}
	return this->self->_method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _1eb627195_Fn::_method_append_instance(jule::Ptr<_1eb627195_FnIns>& _14239_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14239_ins);
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14239_ins);
		return std::make_tuple(true,-1LL);
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_4802877456:;
		if (it != expr.end()) {
			jule::Int _1eb627195_j = it - expr.begin();
			jule::Ptr<_1eb627195_FnIns> &_1eb627195_ains = *it;
			{
				if (_1eb627195_ains->_method_same(_14239_ins)) {
					return std::make_tuple(false,_1eb627195_j);
				}
			}
			_iter_next_4802877456:;
			++it;
			_1eb627195_j++;
			goto _iter_begin_4802877456;
		}
		_iter_end_4802877456:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14239_ins);
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb627195_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb7d8048_ImportInfo::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1eb7d8048_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1eba533d4_Var> _1eb7d8048_ImportInfo::_method_find_var(jule::Str _15731_ident,jule::Bool _15743_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_15731_ident)))) {
		return nullptr;
	}
	return _1eb7d8048_find_var_in_package((*this)._field_package->_field_files,_15731_ident,false);
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb7d8048_ImportInfo::_method_find_type_alias(jule::Str _17038_ident,jule::Bool _17050_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17038_ident)))) {
		return nullptr;
	}
	return _1eb7d8048_find_type_alias_in_package((*this)._field_package->_field_files,_17038_ident,false);
}



inline jule::Ptr<_1eb29bdd6_Struct> _1eb7d8048_ImportInfo::_method_find_struct(jule::Str _18334_ident,jule::Bool _18346_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_18334_ident)))) {
		return nullptr;
	}
	return _1eb7d8048_find_struct_in_package((*this)._field_package->_field_files,_18334_ident,false);
}



inline jule::Ptr<_1eb627195_Fn> _1eb7d8048_ImportInfo::_method_find_fn(jule::Str _19630_ident,jule::Bool _19642_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_19630_ident)))) {
		return nullptr;
	}
	return _1eb7d8048_find_fn_in_package((*this)._field_package->_field_files,_19630_ident,false);
}



inline jule::Ptr<_1eb7c68e9_Trait> _1eb7d8048_ImportInfo::_method_find_trait(jule::Str _20833_ident) {
	if ((!((*this)._method_is_lookupable(_20833_ident)))) {
		return nullptr;
	}
	return _1eb7d8048_find_trait_in_package((*this)._field_package->_field_files,_20833_ident);
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1eb7d8048_ImportInfo::_method_find_enum(jule::Str _22032_ident) {
	if ((!((*this)._method_is_lookupable(_22032_ident)))) {
		return nullptr;
	}
	return _1eb7d8048_find_enum_in_package((*this)._field_package->_field_files,_22032_ident);
}



inline jule::Bool _1eb7d8048_ImportInfo::_method_is_lookupable(jule::Str _23028_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if (((*this)._field_alias.len() != 0LL) || (*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_23028_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _1eb7d8048_ImportInfo::_method_exist_ident(jule::Str _25026_ident) {
	{
		auto &expr = (*this)._field_selected;
		auto it = expr.begin();
		_iter_begin_4804246880:;
		if (it != expr.end()) {
			_1ea7465e5_Token &_1eb7d8048_sident = *it;
			{
				if (_1eb7d8048_sident._field_kind == _25026_ident) {
					return true;
				}
			}
			_iter_next_4804246880:;
			++it;
			goto _iter_begin_4804246880;
		}
		_iter_end_4804246880:;
	}
	return false;
}



inline jule::Bool _1eb7d8048_ImportInfo::_method_is_accessible_via_selection(void) {
	return ((*this)._field_import_all || ((*this)._field_selected.len() == 0LL)) || (*this)._method_exist_ident(jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d8048_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_FnCallExpr::_method_unhandled(void) {
	return (*this)._field_exception == nullptr;
}



inline jule::Bool _1ea6ee955_FnCallExpr::_method_ignored(void) {
	return ((*this)._field_exception != nullptr) && (*this)._field_exception->_field_deferred;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb736eec_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eba533d4_Var::_method_is_initialized(void) {
	return (*this)._field_value != nullptr;
}



inline jule::Bool _1eba533d4_Var::_method_is_type_inferred(void) {
	return ((*this)._field_kind == nullptr) || ((*this)._field_kind->_field_decl == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba533d4_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline void _1eba534e4_TypeCompatibilityChecker::_method_push_err(jule::Str _13527_fmt,jule::Slice<jule::Any> _13540_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_13527_fmt,_13540_args);
}



inline jule::Bool _1eba534e4_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _13932_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_13932_ok = true;
		return _13932_ok;
	}
	jule::Ptr<_1eb7c68e9_Trait> _14413_trt = (*this)._field_dest->_method_trt();
	jule::Bool _14517_ref = false;
	{
		if ((*this)._field_src->_method_sptr() != nullptr) {
			_case_begin_4805250896:;
			{
				_14517_ref=true;
				(*this)._field_src=(*this)._field_src->_method_sptr()->_field_elem;
				if ((*this)._field_src->_method_strct() == nullptr) {
					_13932_ok = false;
					return _13932_ok;
				}
				goto _case_begin_4805251072;
			}
		}
		else if ((*this)._field_src->_method_strct() != nullptr) {
			_case_begin_4805251072:;
			{
				jule::Ptr<_1eb29bdd6_StructIns> _15617_s = (*this)._field_src->_method_strct();
				if ((!(_15617_s->_field_decl->_method_is_implements(_14413_trt)))) {
					_13932_ok = false;
					return _13932_ok;
				}
				if ((!(_14517_ref)) && _1eba534e4_trait_has_reference_receiver(_14413_trt)) {
					(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_13932_ok = false;
					return _13932_ok;
				}
				_13932_ok = true;
				return _13932_ok;
			}
		}
		else if ((*this)._field_src->_method_trt() != nullptr) {
			_case_begin_4805251168:;
			{
				_13932_ok = _14413_trt == (*this)._field_src->_method_trt();
				return _13932_ok;
			}
		}
		else {
			_case_begin_4805249424:;
			{
				_13932_ok = false;
				return _13932_ok;
			}
		}
		_match_end_4805249312:;
	}
}



inline jule::Bool _1eba534e4_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _17630_ok = jule::Bool();
	if ((*this)._field_src->_method_is_nil()) {
		_17630_ok = true;
		return _17630_ok;
	}
	jule::Ptr<_1ec1c55b1_Ptr> _18117_dest = (*this)._field_dest->_method_ptr();
	if (_18117_dest->_method_is_unsafe()) {
		_17630_ok = true;
		return _17630_ok;
	}
	_17630_ok = (*this)._field_dest->_method_equals((*this)._field_src);
	return _17630_ok;
}



inline jule::Bool _1eba534e4_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _19031_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_Prim> _19113_prim = (*this)._field_dest->_method_prim();
	if ((_19113_prim != nullptr) && _19113_prim->_method_is_any()) {
		_19031_ok = true;
		return _19031_ok;
	}
	_19031_ok = (*this)._field_dest->_method_equals((*this)._field_src);
	return _19031_ok;
}



inline jule::Bool _1eba534e4_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _19826_ok = jule::Bool();
	if ((*this)._field_dest->_method_ptr() != nullptr) {
		_19826_ok = (*this)._method_check_ptr();
		return _19826_ok;
	}
	if ((*this)._field_dest->_method_nil_compatible()) {
		if ((*this)._field_src->_method_is_nil()) {
			_19826_ok = true;
			return _19826_ok;
		}
	}
	{
		if ((*this)._field_dest->_method_prim() != nullptr) {
			_case_begin_4805279840:;
			{
				_19826_ok = (*this)._method_check_prim();
				return _19826_ok;
			}
		}
		else if ((*this)._field_dest->_method_trt() != nullptr) {
			_case_begin_4805279088:;
			{
				_19826_ok = (*this)._method_check_trait();
				return _19826_ok;
			}
		}
		else {
			_case_begin_4805277744:;
			{
				_19826_ok = (*this)._field_dest->_method_equals((*this)._field_src);
				return _19826_ok;
			}
		}
		_match_end_4805277504:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1eba534e4_AssignTypeChecker::_method_push_err(jule::Str _22527_fmt,jule::Slice<jule::Any> _22540_args) {
	(*this)._field_s->_method_push_err((*this)._field_error_token,_22527_fmt,_22540_args);
}



inline jule::Bool _1eba534e4_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _23017_valid = true;
	{
		if ((*this)._field_d->_field_kind->_method_fnc() != nullptr) {
			_case_begin_4805287888:;
			{
				jule::Ptr<_1eb627195_FnIns> _23417_f = (*this)._field_d->_field_kind->_method_fnc();
				{
					if (_23417_f->_method_is_builtin()) {
						_case_begin_4805291680:;
						{
							(*this)._method_push_err(jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if (_23417_f->_field_decl->_field_cpp_linked) {
						_case_begin_4805291792:;
						{
							(*this)._method_push_err(jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if (_23417_f->_field_decl->_method_is_method()) {
						_case_begin_4805291904:;
						{
							(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if (_23417_f->_field_decl->_field_generics.len() > 0LL) {
						_case_begin_4805292016:;
						{
							(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					_match_end_4805291488:;
				}
			}
		}
		else if ((*this)._field_d->_field_kind->_method_tup() != nullptr) {
			_case_begin_4805288000:;
			{
				(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23017_valid=false;
			}
		}
		_match_end_4805287728:;
	}
	return _23017_valid;
}



inline jule::Bool _1eba534e4_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*this)._field_d->_method_is_const())) || ((*this)._field_dest->_method_prim() == nullptr)) || ((*this)._field_d->_field_kind->_method_prim() == nullptr)) || (!(_1ec4784ce_is_num((*this)._field_d->_field_kind->_method_prim()->_field_kind)))) {
		return false;
	}
	jule::Str _26913_kind = (*this)._field_dest->_method_prim()->_field_kind;
	{
		if (_1ec4784ce_is_float(_26913_kind)) {
			_case_begin_4805309552:;
			{
				if ((!(_1eba534e4_float_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else if (_1ec4784ce_is_int(_26913_kind)) {
			_case_begin_4805309648:;
			{
				if ((!(_1eba534e4_int_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else {
			_case_begin_4805307968:;
			{
				return false;
			}
		}
		_match_end_4805307728:;
	}
	return true;
}



inline jule::Bool _1eba534e4_AssignTypeChecker::_method_is_prim(void) {
	if ((*this)._field_dest->_field_variadic || (*this)._field_d->_field_kind->_field_variadic) {
		return false;
	}
	if ((*this)._field_dest->_method_cpp_linked() || (*this)._field_d->_field_kind->_method_cpp_linked()) {
		return false;
	}
	return ((*this)._field_dest->_method_prim() != nullptr) && ((*this)._field_d->_field_kind->_method_prim() != nullptr);
}



inline jule::Bool _1eba534e4_AssignTypeChecker::_method_check(void) {
	{
		if ((*this)._field_d == nullptr) {
			_case_begin_4805319504:;
			{
				return false;
			}
		}
		else if ((!((*this)._method_check_validity()))) {
			_case_begin_4805321744:;
			{
				return false;
			}
		}
		else if ((*this)._method_check_const()) {
			_case_begin_4805321840:;
			{
				return true;
			}
		}
		else if ((*this)._field_d->_field_kind->_method_enm() != nullptr) {
			_case_begin_4805321936:;
			{
				jule::Ptr<_1ec1c55b1_TypeKind> _31821_dkind = (*this)._field_dest;
				if ((*this)._field_dest->_method_enm() != nullptr) {
					_31821_dkind=(*this)._field_dest->_method_enm()->_field_kind->_field_kind;
				} else if ((*this)._field_dest->_method_prim() == nullptr) {
					goto _match_end_4805319248;
				}
				if (_1ec3e7717_types_are_compatible((*this)._field_d->_field_kind->_method_enm()->_field_kind->_field_kind->_method_prim()->_field_kind,_31821_dkind->_method_prim()->_field_kind)) {
					return true;
				}
			}
		}
		else if ((*this)._method_is_prim()) {
			_case_begin_4805322048:;
			{
				jule::Ptr<_1ec1c55b1_Prim> _33017_dest = (*this)._field_dest->_method_prim();
				if (_33017_dest->_method_is_any()) {
					return true;
				}
				jule::Ptr<_1ec1c55b1_Prim> _33421_src = (*this)._field_d->_field_kind->_method_prim();
				if (_1ec3e7717_types_are_compatible(_33017_dest->_field_kind,_33421_src->_field_kind)) {
					return true;
				}
			}
		}
		_match_end_4805319248:;
	}
	return (*this)._field_s->_method_check_type_compatibility((*this)._field_dest,(*this)._field_d->_field_kind,(*this)._field_error_token);
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1eba534e4_DynamicTypeAnnotation::_method_push_generic(jule::Ptr<_1ec1c55b1_TypeKind>& _35336_k,jule::Int _35350_i) {
	(*this)._field_f->_field_generics[_35350_i]=_35336_k;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_prim(jule::Ptr<_1ec1c55b1_TypeKind>& _35744_k) {
	jule::Bool _35760_ok = jule::Bool();
	jule::Str _35813_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto &expr = (*this)._field_f->_field_decl->_field_generics;
		auto it = expr.begin();
		_iter_begin_4805350656:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			jule::Ptr<_1ea6ee955_GenericDecl> &_1eba534e4_g = *it;
			{
				if (_35813_kind != _1eba534e4_g->_field_ident) {
					goto _iter_next_4805350656;
				}
				jule::Ptr<_1ec1c55b1_TypeKind> _36417_t = (*this)._field_f->_field_generics[_1eba534e4_i];
				{
					if (_36417_t == nullptr) {
						_case_begin_4805354992:;
						{
							(*this)._method_push_generic(_35744_k,_1eba534e4_i);
						}
					}
					else if ((!(_36417_t->_method_equals(_35744_k)))) {
						_case_begin_4805355088:;
						{
							_35760_ok = false;
							return _35760_ok;
						}
					}
					_match_end_4805354752:;
				}
				(*((*this)._field_k))->_field_kind=_35744_k->_field_kind;
				_35760_ok = true;
				return _35760_ok;
			}
			_iter_next_4805350656:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805350656;
		}
		_iter_end_4805350656:;
	}
	_35760_ok = false;
	return _35760_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_slc(jule::Ptr<_1ec1c55b1_TypeKind>& _38143_k) {
	jule::Bool _38159_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_Slc> _38217_pslc = (*((*this)._field_k))->_method_slc();
	if (_38217_pslc == nullptr) {
		_38159_ok = false;
		return _38159_ok;
	}
	jule::Ptr<_1ec1c55b1_Slc> _38717_slc = _38143_k->_method_slc();
	(*this)._field_k=(&(_38217_pslc->_field_elem));
	_38159_ok = (*this)._method_annotate_kind(_38717_slc->_field_elem);
	return _38159_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_check_map_key(jule::Ptr<_1ec1c55b1_TypeKind>* _39243_k,jule::Ptr<_1ec1c55b1_TypeKind>& _39263_ck) {
	jule::Bool _39280_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_TypeKind>* _39317_old = (*this)._field_k;
	(*this)._field_k=_39243_k;
	_39280_ok=(*this)._method_annotate_kind(_39263_ck);
	(*this)._field_k=_39317_old;
	return _39280_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_map(jule::Ptr<_1ec1c55b1_TypeKind>& _40043_k) {
	jule::Bool _40059_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_Map> _40117_pmap = (*((*this)._field_k))->_method_map();
	if (_40117_pmap == nullptr) {
		_40059_ok = false;
		return _40059_ok;
	}
	jule::Ptr<_1ec1c55b1_Map> _40617_m = _40043_k->_method_map();
	_40059_ok = (*this)._method_check_map_key((&(_40117_pmap->_field_key)),_40617_m->_field_key) && (*this)._method_check_map_key((&(_40117_pmap->_field_val)),_40617_m->_field_val);
	return _40059_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_fn(jule::Ptr<_1ec1c55b1_TypeKind>& _41242_k) {
	jule::Bool _41258_ok = jule::Bool();
	jule::Ptr<_1eb627195_FnIns> _41317_pf = (*((*this)._field_k))->_method_fnc();
	if (_41317_pf == nullptr) {
		_41258_ok = false;
		return _41258_ok;
	}
	jule::Ptr<_1eb627195_FnIns> _41717_f = _41242_k->_method_fnc();
	{
		if (_41317_pf->_field_params.len() != _41717_f->_field_params.len()) {
			_case_begin_4805384736:;
			{
				_41258_ok = false;
				return _41258_ok;
			}
		}
		else if (_41317_pf->_field_decl->_method_is_void() != _41717_f->_field_decl->_method_is_void()) {
			_case_begin_4805384848:;
			{
				_41258_ok = false;
				return _41258_ok;
			}
		}
		_match_end_4805384576:;
	}
	_41258_ok=true;
	jule::Ptr<_1ec1c55b1_TypeKind>* _42717_old = (*this)._field_k;
	{
		auto &expr = _41717_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4805388368:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			jule::Ptr<_1eb627195_ParamIns> _1eba534e4_fp = *it;
			{
				(*this)._field_k=(&(_41317_pf->_field_params[_1eba534e4_i]->_field_kind));
				_41258_ok=(*this)._method_annotate_kind(_1eba534e4_fp->_field_kind) && _41258_ok;
			}
			_iter_next_4805388368:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805388368;
		}
		_iter_end_4805388368:;
	}
	if ((!(_41317_pf->_field_decl->_method_is_void()))) {
		(*this)._field_k=(&(_41317_pf->_field_result));
		_41258_ok=(*this)._method_annotate_kind(_41717_f->_field_result) && _41258_ok;
	}
	(*this)._field_k=_42717_old;
	return _41258_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ptr<_1ec1c55b1_TypeKind>& _44243_k) {
	jule::Bool _44259_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_Ptr> _44317_pptr = (*((*this)._field_k))->_method_ptr();
	if (_44317_pptr == nullptr) {
		_44259_ok = false;
		return _44259_ok;
	}
	jule::Ptr<_1ec1c55b1_Ptr> _44817_ptr = _44243_k->_method_ptr();
	(*this)._field_k=(&(_44317_pptr->_field_elem));
	_44259_ok = (*this)._method_annotate_kind(_44817_ptr->_field_elem);
	return _44259_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_sptr(jule::Ptr<_1ec1c55b1_TypeKind>& _45344_k) {
	jule::Bool _45360_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_Sptr> _45417_ssptr = (*((*this)._field_k))->_method_sptr();
	if (_45417_ssptr == nullptr) {
		_45360_ok = false;
		return _45360_ok;
	}
	jule::Ptr<_1ec1c55b1_Sptr> _45917_sptr = _45344_k->_method_sptr();
	(*this)._field_k=(&(_45417_ssptr->_field_elem));
	_45360_ok = (*this)._method_annotate_kind(_45917_sptr->_field_elem);
	return _45360_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_any(jule::Ptr<_1ec1c55b1_TypeKind>& _46443_k) {
	jule::Bool _46459_ok = jule::Bool();
	jule::Str _46513_kind = (*((*this)._field_k))->_method_to_str();
	{
		auto &expr = (*this)._field_f->_field_decl->_field_generics;
		auto it = expr.begin();
		_iter_begin_4805411920:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			jule::Ptr<_1ea6ee955_GenericDecl> &_1eba534e4_g = *it;
			{
				if (_46513_kind != _1eba534e4_g->_field_ident) {
					goto _iter_next_4805411920;
				}
				jule::Ptr<_1ec1c55b1_TypeKind> _47117_t = (*this)._field_f->_field_generics[_1eba534e4_i];
				{
					if (_47117_t == nullptr) {
						_case_begin_4805416256:;
						{
							(*this)._method_push_generic(_46443_k,_1eba534e4_i);
						}
					}
					else if ((!(_47117_t->_method_equals(_46443_k)))) {
						_case_begin_4805416352:;
						{
							_46459_ok = false;
							return _46459_ok;
						}
					}
					_match_end_4805416016:;
				}
				(*((*this)._field_k))->_field_kind=_46443_k->_field_kind;
				_46459_ok = true;
				return _46459_ok;
			}
			_iter_next_4805411920:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805411920;
		}
		_iter_end_4805411920:;
	}
	_46459_ok = false;
	return _46459_ok;
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate_kind(jule::Ptr<_1ec1c55b1_TypeKind>& _48844_k) {
	jule::Bool _48860_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _48860_ok;
	}
	{
		if ((*this)._method_annotate_any(_48844_k)) {
			_case_begin_4805424016:;
			{
				_48860_ok = true;
				return _48860_ok;
			}
		}
		else if (_48844_k->_method_prim() != nullptr) {
			_case_begin_4805424112:;
			{
				_48860_ok = (*this)._method_annotate_prim(_48844_k);
				return _48860_ok;
			}
		}
		else if (_48844_k->_method_slc() != nullptr) {
			_case_begin_4805423376:;
			{
				_48860_ok = (*this)._method_annotate_slc(_48844_k);
				return _48860_ok;
			}
		}
		else if (_48844_k->_method_map() != nullptr) {
			_case_begin_4805423472:;
			{
				_48860_ok = (*this)._method_annotate_map(_48844_k);
				return _48860_ok;
			}
		}
		else if (_48844_k->_method_fnc() != nullptr) {
			_case_begin_4805423568:;
			{
				_48860_ok = (*this)._method_annotate_fn(_48844_k);
				return _48860_ok;
			}
		}
		else if (_48844_k->_method_ptr() != nullptr) {
			_case_begin_4805422800:;
			{
				_48860_ok = (*this)._method_annotate_ptr(_48844_k);
				return _48860_ok;
			}
		}
		else if (_48844_k->_method_sptr() != nullptr) {
			_case_begin_4805422896:;
			{
				_48860_ok = (*this)._method_annotate_sptr(_48844_k);
				return _48860_ok;
			}
		}
		else {
			_case_begin_4805421024:;
			{
				_48860_ok = false;
				return _48860_ok;
			}
		}
		_match_end_4805422432:;
	}
}



inline jule::Bool _1eba534e4_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _50536_ok = jule::Bool();
	(*this)._field_k=(&((*this)._field_p->_field_kind));
	_50536_ok = (*this)._method_annotate_kind((*this)._field_a->_field_kind);
	return _50536_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1eba534e4_FnCallArgChecker::_method_push_err_token(_1ea7465e5_Token _52133_token,jule::Str _52147_fmt,jule::Slice<jule::Any> _52160_args) {
	(*this)._field_e->_field_s->_method_push_err(_52133_token,_52147_fmt,_52160_args);
}



inline void _1eba534e4_FnCallArgChecker::_method_push_err(jule::Str _52527_fmt,jule::Slice<jule::Any> _52540_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_52527_fmt,_52540_args);
}



inline jule::Slice<jule::Ptr<_1eb627195_ParamIns>> _1eba534e4_FnCallArgChecker::_method_get_params(void) {
	if ((((*this)._field_f->_field_params.len() > 0LL) && ((*this)._field_f->_field_params[0LL]->_field_decl != nullptr)) && (*this)._field_f->_field_params[0LL]->_field_decl->_method_is_self()) {
		return (*this)._field_f->_field_params.slice(1LL);
	}
	return (*this)._field_f->_field_params;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>& _53832_params) {
	jule::Bool _53855_ok = jule::Bool();
	jule::I64 _53917_n = _53832_params.len();
	if ((_53917_n > 0LL) && _53832_params[0LL]->_field_decl->_method_is_self()) {
		(_53917_n)--;
	}
	jule::I64 _54417_diff = _53917_n - (*this)._field_args.len();
	{
		if (_54417_diff == 0LL) {
			_case_begin_4805458320:;
			{
				_53855_ok = true;
				return _53855_ok;
			}
		}
		else if ((_53917_n > 0LL) && _53832_params[_53917_n - 1LL]->_field_decl->_field_variadic) {
			_case_begin_4805458416:;
			{
				_53855_ok = true;
				return _53855_ok;
			}
		}
		else if ((_54417_diff < 0LL) || (_54417_diff > _53832_params.len())) {
			_case_begin_4805458528:;
			{
				(*this)._method_push_err(jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_53855_ok = false;
				return _53855_ok;
			}
		}
		_match_end_4805458160:;
	}
	jule::Str _55717_idents = jule::Str();
	for (; _54417_diff > 0LL; (_54417_diff)--) {
		{
			_55717_idents+=jule::Str(", ", 2) + _53832_params[_53917_n - _54417_diff]->_field_decl->_field_ident;
		}
	_iter_next_4805464272:;
	}
	_iter_end_4805464272:;
	_55717_idents=_55717_idents.slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_55717_idents)}));
	_53855_ok = false;
	return _53855_ok;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_check_arg(jule::Ptr<_1eb627195_ParamIns>& _56733_p,jule::Ptr<_1ebcce31e_Data>& _56752_arg,_1ea7465e5_Token& _56769_error_token) {
	jule::Bool _56791_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation && _1eb627195_parameter_uses_generics(_56733_p->_field_decl,(*this)._field_f->_field_decl->_field_generics)) {
		_1eba534e4_DynamicTypeAnnotation _56921_dta = _1eba534e4_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_56733_p,_56752_arg,_56769_error_token,nullptr);
		_56791_ok=_56921_dta._method_annotate();
		if ((!(_56791_ok))) {
			(*this)._method_push_err_token(_56769_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_56791_ok = false;
			return _56791_ok;
		}
	}
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr(_56733_p->_field_decl->_field_mutable,_56733_p->_field_decl->_field_reference,_56733_p->_field_kind,_56752_arg,_56769_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(_56733_p->_field_decl->_field_reference,_56733_p->_field_kind,_56752_arg,_56769_error_token);
	_56791_ok = true;
	return _56791_ok;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_push(jule::Ptr<_1eb627195_ParamIns>& _58928_p,jule::Ptr<_1ea6ee955_Expr> _58946_arg) {
	jule::Bool _58960_ok = jule::Bool();
	jule::Ptr<_1ec1c55b1_TypeKind> _59017_old = (*this)._field_e->_field_prefix;
	jule::Bool _59113_old_immut = (*this)._field_e->_field_immutable;
	jule::Ptr<_1ebcce31e_Data> _59217_d = nullptr;
	(*this)._field_e->_field_immutable=(!(_58928_p->_field_decl->_field_mutable));
	if ((!((*this)._field_dynamic_annotation)) && (!(_58928_p->_field_decl->_field_variadic))) {
		(*this)._field_e->_field_prefix=_58928_p->_field_kind;
	} else {
		(*this)._field_e->_field_prefix=nullptr;
	}
	_59217_d=(*this)._field_e->_method_eval_expr_kind(_58946_arg->_field_kind);
	(*this)._field_e->_field_prefix=_59017_old;
	(*this)._field_e->_field_immutable=_59113_old_immut;
	if (_59217_d == nullptr) {
		_58960_ok = false;
		return _58960_ok;
	}
	(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push(_59217_d->_field_model);
	_58960_ok = (*this)._method_check_arg(_58928_p,_59217_d,_58946_arg->_field_token);
	return _58960_ok;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_push_variadic(jule::Ptr<_1eb627195_ParamIns>& _61337_p,jule::Int _61355_i) {
	jule::Bool _61365_ok = jule::Bool();
	_61365_ok=true;
	jule::Bool _61517_variadiced = false;
	jule::Bool _61613_more = (_61355_i + 1LL) < (*this)._field_args.len();
	jule::Ptr<_1eb7ccdea_SliceExprModel> _61717_model = jule::new_struct<_1eb7ccdea_SliceExprModel>(new( std::nothrow ) _1eb7ccdea_SliceExprModel(_61337_p->_field_kind,jule::Slice<jule::Any>()));
	jule::Ptr<_1ec1c55b1_TypeKind> _62117_old = (*this)._field_e->_field_prefix;
	for (; _61355_i < (*this)._field_args.len(); (_61355_i)++) {
		{
			jule::Ptr<_1ea6ee955_Expr> _62321_arg = (*this)._field_args[_61355_i];
			{
				auto &_match_expr{ _62321_arg->_field_kind };
				if (_match_expr.type_is<jule::Ptr<_1ea6ee955_VariadicExpr>>()) {
					_case_begin_4805503680:;
					{
						(*this)._field_e->_field_prefix=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_61337_p->_field_kind))));
					}
				}
				else {
					_case_begin_4805501200:;
					{
						(*this)._field_e->_field_prefix=_61337_p->_field_kind;
					}
				}
				_match_end_4805502272:;
			}
			jule::Ptr<_1ebcce31e_Data> _63321_d = (*this)._field_e->_method_eval(_62321_arg);
			if (_63321_d == nullptr) {
				_61365_ok=false;
				goto _iter_next_4805499840;
			}
			if (_63321_d->_field_kind->_field_variadic) {
				_61517_variadiced=true;
				jule::Bool _64221_pold = _61337_p->_field_kind->_field_variadic;
				jule::Bool _64321_dold = _63321_d->_field_kind->_field_variadic;
				_61337_p->_field_kind->_field_variadic=false;
				_63321_d->_field_kind->_field_variadic=false;
				__JULE_DEFER({
					_61337_p->_field_kind->_field_variadic=_64221_pold;
					_63321_d->_field_kind->_field_variadic=_64321_dold;
				});
				{
					auto &_match_expr{ _63321_d->_field_model };
					if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_SliceExprModel>>()) {
						_case_begin_4805512352:;
						{
							_61717_model=_63321_d->_field_model.operator jule::Ptr<_1eb7ccdea_SliceExprModel>();
							_61717_model->_field_elem_kind=_61337_p->_field_kind;
						}
					}
					else {
						_case_begin_4805508720:;
						{
							_61717_model=nullptr;
							(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push(_63321_d->_field_model);
						}
					}
					_match_end_4805509968:;
				}
				_61365_ok=_61365_ok && (*this)._method_check_arg(_61337_p,_63321_d,_62321_arg->_field_token);
				goto _iter_next_4805499840;
			}
			_61717_model->_field_elems = jule::alloc_for_append(_61717_model->_field_elems,1);_61717_model->_field_elems.push(_63321_d->_field_model);
			_61365_ok=_61365_ok && (*this)._method_check_arg(_61337_p,_63321_d,_62321_arg->_field_token);
		}
	_iter_next_4805499840:;
	}
	_iter_end_4805499840:;
	(*this)._field_e->_field_prefix=_62117_old;
	if (_61517_variadiced && _61613_more) {
		(*this)._method_push_err(jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	}
	if (_61717_model != nullptr) {
		(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push(jule::Any(_61717_model));
	}
	return _61365_ok;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>& _68034_params) {
	jule::Bool _68057_ok = jule::Bool();
	_68057_ok=true;
	jule::Int _68217_i = 0LL;
	_julec_label_iter:;
	while (_68217_i < _68034_params.len()) {
		{
			jule::Ptr<_1eb627195_ParamIns> _68521_p = _68034_params[_68217_i];
			{
				if (_68521_p->_field_decl->_method_is_self()) {
					_case_begin_4805526816:;
				}
				else if (_68521_p->_field_decl->_field_variadic) {
					_case_begin_4805526544:;
					{
						_68057_ok=(*this)._method_push_variadic(_68521_p,_68217_i) && _68057_ok;
						goto _iter_end_4805522192;
					}
				}
				else if ((*this)._field_args.len() <= _68217_i) {
					_case_begin_4805528208:;
					{
						_68057_ok=false;
						goto _iter_end_4805522192;
					}
				}
				else {
					_case_begin_4805525744:;
					{
						_68057_ok=(*this)._method_push(_68521_p,(*this)._field_args[_68217_i]) && _68057_ok;
					}
				}
				_match_end_4805525632:;
			}
			(_68217_i)++;
		}
	_iter_next_4805522192:;
	}
	_iter_end_4805522192:;
	return _68057_ok;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _70750_ok = jule::Bool();
	{
		auto &expr = (*this)._field_f->_field_generics;
		auto it = expr.begin();
		_iter_begin_4805533520:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeKind> &_1eba534e4_g = *it;
			{
				if (_1eba534e4_g == nullptr) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_70750_ok = false;
					return _70750_ok;
				}
			}
			_iter_next_4805533520:;
			++it;
			goto _iter_begin_4805533520;
		}
		_iter_end_4805533520:;
	}
	_70750_ok = true;
	return _70750_ok;
}



inline jule::Bool _1eba534e4_FnCallArgChecker::_method_check(void) {
	jule::Bool _71726_ok = jule::Bool();
	jule::Slice<jule::Ptr<_1eb627195_ParamIns>> _71817_params = (*this)._method_get_params();
	_71726_ok=(*this)._method_check_counts(_71817_params);
	if ((!(_71726_ok))) {
		_71726_ok = false;
		return _71726_ok;
	}
	_71726_ok=(*this)._method_check_args(_71817_params);
	if (_71726_ok && (*this)._field_dynamic_annotation) {
		_71726_ok=(*this)._method_check_dynamic_type_annotation();
	}
	return _71726_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1eba534e4_StructLitChecker::_method_push_err(_1ea7465e5_Token _74127_token,jule::Str _74141_fmt,jule::Slice<jule::Any> _74154_args) {
	(*this)._field_e->_method_push_err(_74127_token,_74141_fmt,_74154_args);
}



inline void _1eba534e4_StructLitChecker::_method_push_suggestion(jule::Str _74634_fmt,jule::Slice<jule::Any> _74647_args) {
	(*this)._field_e->_method_push_suggestion(_74634_fmt,_74647_args);
}



inline void _1eba534e4_StructLitChecker::_method_push_match(jule::Ptr<_1eb29bdd6_FieldIns>& _75034_f,jule::Ptr<_1ebcce31e_Data>& _75053_d,_1ea7465e5_Token& _75068_error_token) {
	(*this)._field_args = jule::alloc_for_append((*this)._field_args,1);(*this)._field_args.push(jule::new_struct<_1eb7ccdea_StructArgExprModel>(new( std::nothrow ) _1eb7ccdea_StructArgExprModel(_75034_f,_75053_d->_field_model)));
	
	(*this)._field_e->_field_s->_method_check_validity_for_init_expr((!((*this)._field_e->_field_immutable)),false,_75034_f->_field_kind,_75053_d,_75068_error_token);
	(*this)._field_e->_field_s->_method_check_assign_type(false,_75034_f->_field_kind,_75053_d,_75068_error_token);
}



inline void _1eba534e4_StructLitChecker::_method_check_pair(jule::Ptr<_1ea6ee955_FieldExprPair>& _76134_pair,jule::Slice<jule::Any>& _76161_exprs) {
	jule::Ptr<_1eb29bdd6_FieldIns> _76317_f = (*this)._field_s->_method_find_field(_76134_pair->_field_field._field_kind);
	if (_76317_f == nullptr) {
		(*this)._method_push_err(_76134_pair->_field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_76134_pair->_field_field._field_kind)}));
		return;
	}
	if ((!((*this)._field_e->_field_s->_method_is_accessible_define(_76317_f->_field_decl->_field_public,_76317_f->_field_decl->_field_token)))) {
		(*this)._method_push_err(_76134_pair->_field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_76134_pair->_field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	_julec_label_dup_lookup:;
	{
		auto &expr = _76161_exprs;
		auto it = expr.begin();
		_iter_begin_4805572464:;
		if (it != expr.end()) {
			jule::Any _1eba534e4_expr = *it;
			{
				{
					auto &_match_expr{ _1eba534e4_expr };
					if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FieldExprPair>>()) {
						_case_begin_4805573680:;
						{
							jule::Ptr<_1ea6ee955_FieldExprPair> _77925_dpair = _1eba534e4_expr.operator jule::Ptr<_1ea6ee955_FieldExprPair>();
							{
								if (_76134_pair == _77925_dpair) {
									_case_begin_4805576800:;
									{
										goto _iter_end_4805572464;
									}
								}
								else if (_76134_pair->_field_field._field_kind == _77925_dpair->_field_field._field_kind) {
									_case_begin_4805576912:;
									{
										(*this)._method_push_err(_76134_pair->_field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any(_76134_pair->_field_field._field_kind)}));
										goto _iter_end_4805572464;
									}
								}
								_match_end_4805576656:;
							}
						}
					}
					_match_end_4805574064:;
				}
			}
			_iter_next_4805572464:;
			++it;
			goto _iter_begin_4805572464;
		}
		_iter_end_4805572464:;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _79117_prefix = (*this)._field_e->_field_prefix;
	__JULE_DEFER({
		(*this)._field_e->_field_prefix=_79117_prefix;
	});
	(*this)._field_e->_field_prefix=_76317_f->_field_kind;
	jule::Ptr<_1ebcce31e_Data> _79517_d = (*this)._field_e->_method_eval_expr_kind(_76134_pair->_field_expr);
	if (_79517_d == nullptr) {
		return;
	}
	(*this)._method_push_match(_76317_f,_79517_d,_76134_pair->_field_field);
}



inline jule::Bool _1eba534e4_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any>& _80235_exprs) {
	jule::Bool _80317_ok = true;
	{
		auto &expr = _80235_exprs;
		auto it = expr.begin();
		_iter_begin_4805587488:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			jule::Any _1eba534e4_expr = *it;
			{
				{
					auto &_match_expr{ _1eba534e4_expr };
					if (_match_expr.type_is<jule::Ptr<_1ea6ee955_KeyValPair>>()) {
						_case_begin_4805589408:;
						{
							jule::Ptr<_1ea6ee955_KeyValPair> _80725_pair = _1eba534e4_expr.operator jule::Ptr<_1ea6ee955_KeyValPair>();
							{
								auto &_match_expr{ _80725_pair->_field_key };
								if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentExpr>>()) {
									_case_begin_4805593568:;
								}
								else {
									_case_begin_4805589888:;
									{
										(*this)._method_push_err(_80725_pair->_field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_80317_ok=false;
										goto _iter_next_4805587488;
									}
								}
								_match_end_4805592144:;
							}
							_80235_exprs.__at(_1eba534e4_i)=jule::Any(jule::new_struct<_1ea6ee955_FieldExprPair>(new( std::nothrow ) _1ea6ee955_FieldExprPair(_80725_pair->_field_key.operator jule::Ptr<_1ea6ee955_IdentExpr>()->_field_token,_80725_pair->_field_val)));
						}
					}
					_match_end_4805589792:;
				}
			}
			_iter_next_4805587488:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805587488;
		}
		_iter_end_4805587488:;
	}
	return _80317_ok;
}



inline void _1eba534e4_StructLitChecker::_method_check(jule::Slice<jule::Any>& _82829_exprs) {
	if (_82829_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_82829_exprs)))) {
		return;
	}
	jule::Bool _83717_paired = false;
	{
		auto &expr = _82829_exprs;
		auto it = expr.begin();
		_iter_begin_4805600272:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			jule::Any _1eba534e4_expr = *it;
			{
				{
					auto &_match_expr{ _1eba534e4_expr };
					if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FieldExprPair>>()) {
						_case_begin_4805602096:;
						{
							jule::Ptr<_1ea6ee955_FieldExprPair> _84125_pair = _1eba534e4_expr.operator jule::Ptr<_1ea6ee955_FieldExprPair>();
							if ((_1eba534e4_i > 0LL) && (!(_83717_paired))) {
								(*this)._method_push_err(_84125_pair->_field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							}
							_83717_paired=true;
							(*this)._method_check_pair(_84125_pair,_82829_exprs);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Expr>>()) {
						_case_begin_4805602560:;
						{
							jule::Ptr<_1ea6ee955_Expr> _84925_e = _1eba534e4_expr.operator jule::Ptr<_1ea6ee955_Expr>();
							if (_83717_paired) {
								(*this)._method_push_err(_84925_e->_field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							}
							if (_1eba534e4_i >= (*this)._field_s->_field_fields.len()) {
								(*this)._method_push_err(_84925_e->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_4805600272;
							}
							jule::Ptr<_1eb29bdd6_FieldIns> _85825_field = (*this)._field_s->_field_fields[_1eba534e4_i];
							jule::Ptr<_1ec1c55b1_TypeKind> _86025_prefix = (*this)._field_e->_field_prefix;
							__JULE_DEFER({
								(*this)._field_e->_field_prefix=_86025_prefix;
							});
							(*this)._field_e->_field_prefix=_85825_field->_field_kind;
							jule::Ptr<_1ebcce31e_Data> _86425_d = (*this)._field_e->_method_eval_expr_kind(_84925_e->_field_kind);
							if (_86425_d == nullptr) {
								goto _iter_next_4805600272;
							}
							(*this)._method_push_match(_85825_field,_86425_d,_84925_e->_field_token);
						}
					}
					_match_end_4805602480:;
				}
			}
			_iter_next_4805600272:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805600272;
		}
		_iter_end_4805600272:;
	}
	if ((!(_83717_paired))) {
		jule::I64 _87517_n = (*this)._field_s->_field_fields.len();
		jule::I64 _87621_diff = _87517_n - _82829_exprs.len();
		{
			if (_87621_diff <= 0LL) {
				_case_begin_4805620720:;
				{
					return;
				}
			}
			_match_end_4805620272:;
		}
		jule::Str _88221_idents = jule::Str();
		for (; _87621_diff > 0LL; (_87621_diff)--) {
			{
				_88221_idents+=jule::Str(", ", 2) + (*this)._field_s->_field_fields[_87517_n - _87621_diff]->_field_decl->_field_ident;
			}
		_iter_next_4805619056:;
		}
		_iter_end_4805619056:;
		_88221_idents=_88221_idents.slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_88221_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_Node::_method_is_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_EnumDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_FnDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_StructDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_TraitDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_TypeAliasDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_FieldDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_UseDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_VarDecl>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_TypeDecl>>()) {
			_case_begin_4797681264:;
			{
				return true;
			}
		}
		else {
			_case_begin_4797679376:;
			{
				return false;
			}
		}
		_match_end_4797679712:;
	}
}



inline jule::Bool _1ea6ee955_Node::_method_is_comment(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Comment>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_CommentGroup>>()) {
			_case_begin_4797696992:;
			{
				return true;
			}
		}
		else {
			_case_begin_4797695152:;
			{
				return false;
			}
		}
		_match_end_4797695440:;
	}
}



inline jule::Bool _1ea6ee955_Node::_method_is_directive(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Directive>>()) {
			_case_begin_4797700384:;
			{
				return true;
			}
		}
		else {
			_case_begin_4797698544:;
			{
				return false;
			}
		}
		_match_end_4797698832:;
	}
}



inline jule::Bool _1ea6ee955_Node::_method_is_impl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_Impl>>()) {
			_case_begin_4797703392:;
			{
				return true;
			}
		}
		else {
			_case_begin_4797701552:;
			{
				return false;
			}
		}
		_match_end_4797701840:;
	}
}



inline jule::Bool _1ea6ee955_Node::_method_is_use_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_UseDecl>>()) {
			_case_begin_4797706400:;
			{
				return true;
			}
		}
		else {
			_case_begin_4797704560:;
			{
				return false;
			}
		}
		_match_end_4797704848:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1eba534e4_RetTypeChecker::_method_prepare_types(void) {
	if ((*this)._field_f != nullptr) {
		(*this)._field_types=_1eba534e4_get_result_types((*this)._field_f->_field_result);
	}
}



inline void _1eba534e4_RetTypeChecker::_method_prepare_exprs(jule::Ptr<_1ea6ee955_Expr>& _106837_e) {
	if (_106837_e == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _106837_e->_field_kind };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TupleExpr>>()) {
			_case_begin_4805719088:;
			{
				(*this)._field_exprs=_106837_e->_field_kind.operator jule::Ptr<_1ea6ee955_TupleExpr>()->_field_expr;
			}
		}
		else {
			_case_begin_4805718240:;
			{
				(*this)._field_exprs = jule::alloc_for_append((*this)._field_exprs,1);(*this)._field_exprs.push(_106837_e);
			}
		}
		_match_end_4805717264:;
	}
}



inline void _1eba534e4_RetTypeChecker::_method_ret_vars(void) {
	if (((*this)._field_f == nullptr) || (*this)._field_f->_field_decl->_method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ptr<_1eba533d4_Var>>::alloc(0LL,static_cast<jule::I64>((*this)._field_f->_field_decl->_field_result->_field_idents.len()));
	jule::Ptr<_1eb7d5892_ScopeChecker> _108817_root_scope = (*this)._field_sc->_method_get_root();
	jule::Int _109017_j = 0LL;
	{
		auto &expr = (*this)._field_f->_field_decl->_field_result->_field_idents;
		auto it = expr.begin();
		_iter_begin_4805726912:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			_1ea7465e5_Token &_1eba534e4_ident = *it;
			{
				if ((!(_1ea7465e5_is_ignore_ident(_1eba534e4_ident._field_kind)))) {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.push(_108817_root_scope->_field_table->_field_vars[_109017_j]);
					(_109017_j)++;
				} else {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.push(jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var(jule::Ptr<_1eb7d5892_Scope>(),_1ea7465e5_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),(*this)._field_types[_1eba534e4_i])),jule::Ptr<_1ebcce31e_Value>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>())));
				}
			}
			_iter_next_4805726912:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805726912;
		}
		_iter_end_4805726912:;
	}
	if (_109017_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _1eba534e4_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_1ebcce31e_Data>> _111417_datas = jule::Slice<jule::Ptr<_1ebcce31e_Data>>::alloc(0LL,static_cast<jule::I64>((*this)._field_exprs.len()));
	{
		auto &expr = (*this)._field_exprs;
		auto it = expr.begin();
		_iter_begin_4805736368:;
		if (it != expr.end()) {
			jule::Int _1eba534e4_i = it - expr.begin();
			jule::Ptr<_1ea6ee955_Expr> _1eba534e4_expr = *it;
			{
				if (_1eba534e4_i >= (*this)._field_types.len()) {
					goto _iter_end_4805736368;
				}
				jule::Ptr<_1ec1c55b1_TypeKind> _112121_t = (*this)._field_types[_1eba534e4_i];
				jule::Ptr<_1ebcce31e_Data> _112321_d = (*this)._field_sc->_field_s->_method_evalp((*this)._field_sc,_112121_t)->_method_eval_expr(_1eba534e4_expr);
				if (_112321_d == nullptr) {
					goto _iter_next_4805736368;
				}
				_111417_datas.push(_112321_d);
				if ((!(_112321_d->_field_mutable)) && _112321_d->_field_kind->_method_mutable()) {
					(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;
				}
				_1eba534e4_AssignTypeChecker _113521_ac = _1eba534e4_AssignTypeChecker((*this)._field_sc->_field_s,_112121_t,_112321_d,(*this)._field_error_token);
				_113521_ac._method_check();
			}
			_iter_next_4805736368:;
			++it;
			_1eba534e4_i++;
			goto _iter_begin_4805736368;
		}
		_iter_end_4805736368:;
	}
	if (_111417_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_1eb7ccdea_TupleExprModel>(new( std::nothrow ) _1eb7ccdea_TupleExprModel(_111417_datas)));
	} else if (_111417_datas.len() == 1LL) {
		(*this)._field_model=_111417_datas[0LL]->_field_model;
	}
}



inline jule::Bool _1eba534e4_RetTypeChecker::_method_check(jule::Ptr<_1ea6ee955_Expr>& _115429_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_115429_e);
	(*this)._method_ret_vars();
	jule::I64 _115913_n = (*this)._field_exprs.len();
	if ((_115913_n == 0LL) && ((*this)._field_types.len() > 0LL)) {
		if ((!((*this)._field_f->_field_decl->_method_any_var()))) {
			(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		}
		return true;
	}
	if (((_115913_n > 0LL) && ((*this)._field_f != nullptr)) && (*this)._field_f->_field_decl->_method_is_void()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	}
	if (_115913_n > (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if (_115913_n < (*this)._field_types.len()) {
		(*this)._field_sc->_field_s->_method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eba534e4_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eb7c68e9_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1eb7c68e9_Trait::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _2522_other) {
	jule::Ptr<_1eb7c68e9_Trait> _2613_trt = _2522_other->_method_trt();
	return this->self == _2613_trt;
}



inline jule::Bool _1eb7c68e9_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ptr<_1eb627195_Fn> _1eb7c68e9_Trait::_method_find_method(jule::Str _3734_ident) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4803219344:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1eb7c68e9_f = *it;
			{
				if (_1eb7c68e9_f->_field_ident == _3734_ident) {
					return _1eb7c68e9_f;
				}
			}
			_iter_next_4803219344:;
			++it;
			goto _iter_begin_4803219344;
		}
		_iter_end_4803219344:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7c68e9_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eb7c7e7d_EnumItem::_method_auto_expr(void) {
	return (*this)._field_value == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7c7e7d_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eb7c7e7d_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1eb7c7e7d_Enum::_method_equals(jule::Ptr<_1ec1c55b1_TypeKind> _3522_other) {
	jule::Ptr<_1eb7c7e7d_Enum> _3613_enm = _3522_other->_method_enm();
	return this->self == _3613_enm;
}



inline jule::Ptr<_1eb7c7e7d_EnumItem> _1eb7c7e7d_Enum::_method_find_item(jule::Str _4432_ident) {
	{
		auto &expr = (*this)._field_items;
		auto it = expr.begin();
		_iter_begin_4803230416:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c7e7d_EnumItem> _1eb7c7e7d_item = *it;
			{
				if (_1eb7c7e7d_item->_field_ident == _4432_ident) {
					return _1eb7c7e7d_item;
				}
			}
			_iter_next_4803230416:;
			++it;
			goto _iter_begin_4803230416;
		}
		_iter_end_4803230416:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7c7e7d_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eb7d363c_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base._field_id != 0LLU;
}



inline jule::Bool _1eb7d363c_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base._field_id == 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d363c_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ebcce31e_BinopSolver::_method_check_type_compatibility(void) {
	return (*this)._field_e->_field_s->_method_check_type_compatibility((*this)._field_l->_field_kind,(*this)._field_r->_field_kind,(*this)._field_op);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_nil(void) {
	if ((!((*this)._field_r->_field_kind->_method_nil_compatible()))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807503312:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807497392:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_4807500480:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_enum(void) {
	jule::Ptr<_1eb7c7e7d_Enum> _372717_enm = (*this)._field_l->_field_kind->_method_enm();
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807507344:;
			{
				jule::Ptr<_1ec1c55b1_TypeKind> _373121_rkind = (*this)._field_r->_field_kind;
				if ((*this)._field_r->_field_kind->_method_enm() != nullptr) {
					_373121_rkind=(*this)._field_r->_field_kind->_method_enm()->_field_kind->_field_kind;
				}
				if ((!((*this)._field_e->_field_s->_method_check_type_compatibility(_372717_enm->_field_kind->_field_kind,_373121_rkind,(*this)._field_op)))) {
					return nullptr;
				}
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		_match_end_4807507264:;
	}
	if (((*this)._field_r->_field_kind->_method_enm() == nullptr) || (_372717_enm != (*this)._field_r->_field_kind->_method_enm())) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_372717_enm->_field_ident),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4807519136:;
			{
				if ((!(_1ec4784ce_is_num(_372717_enm->_field_kind->_field_kind->_method_to_str())))) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_372717_enm->_field_ident)}));
					return nullptr;
				}
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1)) {
			_case_begin_4807521200:;
			{
				if ((_372717_enm->_field_kind->_field_kind->_method_prim() == nullptr) || (!(_1ec4784ce_is_int(_372717_enm->_field_kind->_field_kind->_method_prim()->_method_to_str())))) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_372717_enm->_field_ident)}));
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4807513008:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(_372717_enm->_field_ident)}));
				return nullptr;
			}
		}
		_match_end_4807508480:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_sptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807537120:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807533568:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807533456:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_4807543424:;
			{
				if ((!((*this)._method_check_type_compatibility()))) {
					return nullptr;
				}
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_4807543616:;
			{
				if ((*this)._field_l->_field_kind->_method_ptr() == nullptr) {
					std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				}
				if ((*this)._field_l->_field_kind->_method_ptr()->_method_is_unsafe()) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				}
				if ((!(_1ebcce31e_is_ptr_arithmetic_compatible_int((*this)._field_r)))) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4807537840:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807539888:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807559728:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807558912:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807558816:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807569680:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807566528:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807565200:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807576928:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807573776:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807572448:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807584176:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807581024:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807579696:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807588848:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807588272:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807587056:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_any(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807595152:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807588480:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_4807594320:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_4807604784:;
			{
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4807601632:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*this)._field_l->_field_kind->_method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4807600304:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_str(void) {
	jule::Str _397017_rk = (*this)._field_r->_field_kind->_method_to_str();
	if (_397017_rk != jule::Str("str", 3)) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_397017_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_4807614032:;
			{
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4807614224:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		else {
			_case_begin_4807611328:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_4807611072:;
	}
}



inline void _1ebcce31e_BinopSolver::_method_set_type_to_greater(void) {
	if ((*this)._field_l->_method_is_const()) {
		if ((!((*this)._field_r->_method_is_const()))) {
			(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
		}
		return;
	}
	if ((*this)._field_r->_method_is_const()) {
		return;
	}
	if (_1ec3e7717_is_greater((*this)._field_r->_field_kind->_method_prim()->_field_kind,(*this)._field_l->_field_kind->_method_prim()->_field_kind)) {
		(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
	}
}



inline void _1ebcce31e_BinopSolver::_method_check_mod_data(jule::Ptr<_1ebcce31e_Data>& _401038_d) {
	if ((!(_401038_d->_method_is_const()))) {
		if ((_401038_d->_field_kind->_method_prim() == nullptr) || (!(_1ec4784ce_is_int(_401038_d->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		}
		return;
	}
	{
		if (_1eba534e4_sig_assignable(jule::Str("i64", 3),_401038_d)) {
			_case_begin_4807630768:;
			{
				_401038_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_401038_d->_field_constant->_method_as_i64()));
			}
		}
		else if (_1eba534e4_unsig_assignable(jule::Str("u64", 3),_401038_d)) {
			_case_begin_4807631296:;
			{
				_401038_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_401038_d->_field_constant->_method_as_u64()));
			}
		}
		else {
			_case_begin_4806179232:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_4806179152:;
	}
}



inline void _1ebcce31e_BinopSolver::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Bool _1ebcce31e_BinopSolver::_method_numbers_are_compatibile(jule::Str& _403539_lk,jule::Str& _403549_rk) {
	if ((!(_1ec4784ce_is_num(_403549_rk)))) {
		return false;
	}
	if ((*this)._field_l->_method_is_const()) {
		return true;
	}
	if (_403539_lk == jule::Str("f32", 3)) {
		if ((*this)._field_r->_method_is_const()) {
			return true;
		}
		return _403549_rk == jule::Str("f32", 3);
	}
	if (_403539_lk == jule::Str("f64", 3)) {
		if ((*this)._field_r->_method_is_const()) {
			return true;
		}
		return _403549_rk == jule::Str("f64", 3);
	}
	if ((*this)._field_r->_method_is_const()) {
		{
			auto &_match_expr{ (*this)._field_r->_field_model };
			if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_RuneExprModel>>() || _match_expr.type_is<jule::Ptr<_1ec3e4b65_Const>>()) {
				_case_begin_4807643712:;
				{
					if (_1ec4784ce_is_sig_int(_403539_lk)) {
						return _1eba534e4_int_assignable(jule::Str("int", 3),(*this)._field_r);
					}
					return _1eba534e4_int_assignable(jule::Str("uint", 4),(*this)._field_r);
				}
			}
			_match_end_4807647872:;
		}
	}
	return _1ec4784ce_is_sig_int(_403539_lk) == _1ec4784ce_is_sig_int(_403549_rk);
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_float(void) {
	jule::Str _407413_lk = (*this)._field_l->_field_kind->_method_prim()->_field_kind;
	jule::Str _407513_rk = (*this)._field_r->_field_kind->_method_prim()->_field_kind;
	if ((!((*this)._method_numbers_are_compatibile(_407413_lk,_407513_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_407413_lk),jule::Any(_407513_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4807655440:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		_match_end_4807655824:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_4807663648:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4807663840:;
			{
				if ((!(_1ec4784ce_is_int(_407513_rk)))) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_407413_lk),jule::Any(_407513_rk)}));
					return nullptr;
				}
				(*this)._method_mod();
				return (*this)._field_r;
			}
		}
		else {
			_case_begin_4807656016:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807661712:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_int(void) {
	jule::Str _412013_lk = (*this)._field_l->_field_kind->_method_prim()->_field_kind;
	jule::Str _412113_rk = (*this)._field_r->_field_kind->_method_prim()->_field_kind;
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_4807671616:;
			{
				if ((!(_1ec4784ce_is_int(_412013_lk))) || (!(_1ec4784ce_is_int(_412113_rk)))) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_412013_lk),jule::Any(_412113_rk)}));
					return nullptr;
				}
				if ((!(_1ebcce31e_is_ok_for_shifting((*this)._field_r)))) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				if ((*this)._field_l->_method_is_const() && (!((*this)._field_r->_method_is_const()))) {
					(*this)._field_l->_field_kind=(*this)._field_r->_field_kind;
				}
				return (*this)._field_l;
			}
		}
		_match_end_4807673264:;
	}
	if ((!((*this)._method_numbers_are_compatibile(_412013_lk,_412113_rk)))) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_412013_lk),jule::Any(_412113_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4807684512:;
			{
				return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
			}
		}
		_match_end_4807684432:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_4807690832:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4807690976:;
			{
				(*this)._method_mod();
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4807684720:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4807688976:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval_prim(void) {
	jule::Ptr<_1ec1c55b1_Prim> _418613_prim = (*this)._field_l->_field_kind->_method_prim();
	{
		if (_418613_prim->_method_is_bool()) {
			_case_begin_4807698064:;
			{
				return (*this)._method_eval_bool();
			}
		}
		else if (_418613_prim->_method_is_str()) {
			_case_begin_4807698176:;
			{
				return (*this)._method_eval_str();
			}
		}
		_match_end_4807697904:;
	}
	if ((*this)._field_r->_field_kind->_method_prim() == nullptr) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_418613_prim->_method_to_str()),jule::Any((*this)._field_r->_field_kind->_method_to_str())}));
		return nullptr;
	}
	{
		if (_1ec4784ce_is_float(_418613_prim->_field_kind)) {
			_case_begin_4807706048:;
			{
				return (*this)._method_eval_float();
			}
		}
		else if (_1ec4784ce_is_int(_418613_prim->_field_kind)) {
			_case_begin_4807706192:;
			{
				return (*this)._method_eval_int();
			}
		}
		else {
			_case_begin_4807699216:;
			{
				return nullptr;
			}
		}
		_match_end_4807704720:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_eval(void) {
	{
		if ((*this)._field_l->_field_kind->_method_void()) {
			_case_begin_4807711088:;
			{
				(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if (((*this)._field_r->_field_kind->_method_prim() != nullptr) && (*this)._field_r->_field_kind->_method_prim()->_method_is_any()) {
			_case_begin_4807711280:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4807711376;
			}
		}
		else if (((*this)._field_l->_field_kind->_method_prim() != nullptr) && (*this)._field_l->_field_kind->_method_prim()->_method_is_any()) {
			_case_begin_4807711376:;
			{
				return (*this)._method_eval_any();
			}
		}
		else if ((*this)._field_l->_field_kind->_method_is_nil()) {
			_case_begin_4807710016:;
			{
				return (*this)._method_eval_nil();
			}
		}
		else if ((*this)._field_r->_field_kind->_method_enm() != nullptr) {
			_case_begin_4807710112:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4807710208;
			}
		}
		else if ((*this)._field_l->_field_kind->_method_enm() != nullptr) {
			_case_begin_4807710208:;
			{
				return (*this)._method_eval_enum();
			}
		}
		else if ((*this)._field_r->_field_kind->_method_sptr() != nullptr) {
			_case_begin_4807710304:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4807711504;
			}
		}
		else if ((*this)._field_l->_field_kind->_method_sptr() != nullptr) {
			_case_begin_4807711504:;
			{
				return (*this)._method_eval_sptr();
			}
		}
		else if ((*this)._field_r->_field_kind->_method_ptr() != nullptr) {
			_case_begin_4807711600:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4807711696;
			}
		}
		else if ((*this)._field_l->_field_kind->_method_ptr() != nullptr) {
			_case_begin_4807711696:;
			{
				return (*this)._method_eval_ptr();
			}
		}
		else if ((*this)._field_l->_field_kind->_method_arr() != nullptr) {
			_case_begin_4807711792:;
			{
				return (*this)._method_eval_arr();
			}
		}
		else if ((*this)._field_l->_field_kind->_method_slc() != nullptr) {
			_case_begin_4807711888:;
			{
				return (*this)._method_eval_slc();
			}
		}
		else if ((*this)._field_l->_field_kind->_method_fnc() != nullptr) {
			_case_begin_4807711984:;
			{
				return (*this)._method_eval_fn();
			}
		}
		else if ((*this)._field_r->_field_kind->_method_trt() != nullptr) {
			_case_begin_4807712080:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4807712192;
			}
		}
		else if ((*this)._field_l->_field_kind->_method_trt() != nullptr) {
			_case_begin_4807712192:;
			{
				return (*this)._method_eval_trait();
			}
		}
		else if ((*this)._field_l->_field_kind->_method_strct() != nullptr) {
			_case_begin_4807712304:;
			{
				return (*this)._method_eval_struct();
			}
		}
		else if ((*this)._field_l->_field_kind->_method_prim() != nullptr) {
			_case_begin_4807712416:;
			{
				return (*this)._method_eval_prim();
			}
		}
		else {
			_case_begin_4807709712:;
			{
				return nullptr;
			}
		}
		_match_end_4807709536:;
	}
}



inline void _1ebcce31e_BinopSolver::_method_solve_const(jule::Ptr<_1ebcce31e_Data>& _426435_d) {
	{
		if (_426435_d == nullptr) {
			_case_begin_4807765264:;
			{
				return;
			}
		}
		else if ((!((*this)._field_l->_method_is_const())) || (!((*this)._field_r->_method_is_const()))) {
			_case_begin_4807765376:;
			{
				_426435_d->_field_constant=nullptr;
				return;
			}
		}
		_match_end_4807765040:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_4807768496:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_eqs((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_4807768240:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((!((*this)._field_l->_field_constant->_method_eqs((*((*this)._field_r->_field_constant))))));
			}
		}
		else if (_match_expr == jule::Str("::", 2)) {
			_case_begin_4807768992:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_or((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_4807769088:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_and((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_4807769184:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_4807769280:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_4807769392:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_gt((*((*this)._field_r->_field_constant))) || (*this)._field_l->_field_constant->_method_eqs((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_4807769504:;
			{
				_426435_d->_field_constant=_1ec3e4b65_Const::_static_method_new_bool((*this)._field_l->_field_constant->_method_lt((*((*this)._field_r->_field_constant))) || (*this)._field_l->_field_constant->_method_eqs((*((*this)._field_r->_field_constant))));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_4807769616:;
			{
				(*this)._field_l->_field_constant->_method_add((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_4807769728:;
			{
				(*this)._field_l->_field_constant->_method_sub((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4807769840:;
			{
				(*this)._field_l->_field_constant->_method_mul((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_4807769952:;
			{
				jule::Bool _431717_ok = (*this)._field_l->_field_constant->_method_div((*((*this)._field_r->_field_constant)));
				if ((!(_431717_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4807770064:;
			{
				jule::Bool _432417_ok = (*this)._field_l->_field_constant->_method_mod((*((*this)._field_r->_field_constant)));
				if ((!(_432417_ok)) && ((*this)._field_r->_field_constant->_method_as_f64() == 0LL)) {
					(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_4807770176:;
			{
				(*this)._field_l->_field_constant->_method_bitwise_or((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4807770288:;
			{
				(*this)._field_l->_field_constant->_method_bitwise_and((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_4807770400:;
			{
				(*this)._field_l->_field_constant->_method_xor((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_4807770512:;
			{
				(*this)._field_l->_field_constant->_method_lshift((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_4807770624:;
			{
				(*this)._field_l->_field_constant->_method_rshift((*((*this)._field_r->_field_constant)));
				_426435_d->_field_constant=(*this)._field_l->_field_constant;
			}
		}
		_match_end_4807767856:;
	}
	_426435_d->_field_model=jule::Any(_426435_d->_field_constant);
}



inline void _1ebcce31e_BinopSolver::_method_post_const(jule::Ptr<_1ebcce31e_Data>& _435430_d) {
	if (_435430_d == nullptr) {
		return;
	}
	_1ebcce31e_normalize_bitsize(_435430_d);
}



inline void _1ebcce31e_BinopSolver::_method_check_data(jule::Ptr<_1ebcce31e_Data>& _436234_d) {
	jule::Ptr<_1eb627195_FnIns> _436313_f = _436234_d->_field_kind->_method_fnc();
	if (((_436313_f != nullptr) && (_436313_f->_field_decl != nullptr)) && _436313_f->_field_decl->_method_is_method()) {
		(*this)._field_e->_method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	}
}



inline void _1ebcce31e_BinopSolver::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline void _1ebcce31e_BinopSolver::_method_set_model(jule::Ptr<_1ebcce31e_Data>& _437433_d) {
	if (_437433_d->_method_is_const()) {
		return;
	}
	jule::Ptr<_1ebcce31e_Data> _437918_l = (*this)._field_l;
	jule::Ptr<_1ebcce31e_Data> _437925_r = (*this)._field_r;
	std::tie(_437918_l,_437925_r) = std::make_tuple((*this)._field_l,(*this)._field_r);
	if ((!(_437918_l->_method_good_operand(_437925_r)))) {
		std::tie(_437918_l,_437925_r) = std::make_tuple(_437925_r,_437918_l);
	}
	_437433_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BinopExprModel>(new( std::nothrow ) _1eb7ccdea_BinopExprModel(_437918_l->_field_model,_437925_r->_field_model,(*this)._field_op._field_kind)));
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_solve_explicit(jule::Ptr<_1ebcce31e_Data>& _439138_l,jule::Ptr<_1ebcce31e_Data>& _439153_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_439138_l,_439153_r);
	(*this)._method_check_datas();
	jule::Ptr<_1ebcce31e_Data> _439617_d = (*this)._method_eval();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_439138_l,_439153_r);
	(*this)._method_solve_const(_439617_d);
	(*this)._method_post_const(_439617_d);
	if (_439617_d != nullptr) {
		_439617_d->_field_lvalue=false;
		(*this)._method_set_model(_439617_d);
	}
	return _439617_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_BinopSolver::_method_solve(jule::Ptr<_1ea6ee955_BinopExpr>& _441129_op) {
	if (_441129_op->_field_op._field_kind == jule::Str("=", 1)) {
		(*this)._field_e->_method_push_err(_441129_op->_field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		(*this)._field_e->_method_push_suggestion(jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _441817_l = (*this)._field_e->_method_eval_expr_kind(_441129_op->_field_left);
	if ((_441817_l == nullptr) || (_441817_l->_field_kind == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _442317_r = (*this)._field_e->_method_eval_expr_kind(_441129_op->_field_right);
	if ((_442317_r == nullptr) || (_442317_r->_field_kind == nullptr)) {
		return nullptr;
	}
	(*this)._field_op=_441129_op->_field_op;
	jule::Ptr<_1ebcce31e_Data> _443017_d = (*this)._method_solve_explicit(_441817_l,_442317_r);
	if (((_443017_d != nullptr) && _441817_l->_field_is_rune) && _442317_r->_field_is_rune) {
		_443017_d->_field_is_rune=true;
	}
	return _443017_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ebcce31e_BinopSolver &_Src) {
	_Stream << "BinopSolver{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_TernaryExpr &_Src) {
	_Stream << "TernaryExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}



inline void _1ec1c55b1_TypeChecker::_method_push_err(_1ea7465e5_Token _68327_token,jule::Str _68341_fmt,jule::Slice<jule::Any> _68354_args) {
	(*this)._field_s->_method_push_err(_68327_token,_68341_fmt,_68354_args);
}



inline void _1ec1c55b1_TypeChecker::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _1ec1c55b1_TypeChecker::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Ptr<_1ec1c55b1_Prim> _1ec1c55b1_TypeChecker::_method_build_prim(jule::Ptr<_1ea6ee955_IdentTypeDecl>& _69030_decl) {
	if ((!(_1ec1c55b1_is_prim(_69030_decl->_field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_69030_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_69030_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_69030_decl->_field_ident)}));
		return nullptr;
	}
	return _1ec1c55b1_build_prim_type(_69030_decl->_field_ident);
}



inline void _1ec1c55b1_TypeChecker::_method_push_cycle_error(jule::Any _70431_def1,jule::Any _70442_def2,jule::Str& _70458_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _70713_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _70729_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _70729_def };
			if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeAlias>>()) {
				_case_begin_4808050400:;
				{
					return _70729_def.operator jule::Ptr<_1ec1c55b1_TypeAlias>()->_field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
				_case_begin_4808050592:;
				{
					return _70729_def.operator jule::Ptr<_1eb29bdd6_Struct>()->_field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eb7c7e7d_Enum>>()) {
				_case_begin_4808050688:;
				{
					return _70729_def.operator jule::Ptr<_1eb7c7e7d_Enum>()->_field_ident;
				}
			}
			else {
				_case_begin_4808048768:;
				{
					return jule::Str();
				}
			}
			_match_end_4808048944:;
		}
	});
	jule::Str _71613_def1_ident = _70713_get_ident(_70431_def1);
	jule::Str _71713_def2_ident = _70713_get_ident(_70442_def2);
	jule::Str _71813_refers_to = _1e8ea7cc0_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_71613_def1_ident),jule::Any(_71713_def2_ident)}));
	_70458_message=((_1eb736eec_str_repeat(jule::Str(" ", 1),4LL) + _71813_refers_to) + jule::Str("\n", 1)) + _70458_message;
}



inline jule::Bool _1ec1c55b1_TypeChecker::_method_check_cross_cycle(jule::Any _72232_decl,jule::Str& _72248_message) {
	{
		auto &_match_expr{ _72232_decl };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeAlias>>()) {
			_case_begin_4808059376:;
			{
				jule::Ptr<_1ec1c55b1_TypeAlias> _72517_ta = _72232_decl.operator jule::Ptr<_1ec1c55b1_TypeAlias>();
				{
					auto &expr = _72517_ta->_field_refers;
					auto it = expr.begin();
					_iter_begin_4808062112:;
					if (it != expr.end()) {
						jule::Any &_1ec1c55b1_d = *it;
						{
							if (_1ec1c55b1_d == (*this)._field_referencer->_field_owner) {
								(*this)._method_push_cycle_error(jule::Any(_72517_ta),_1ec1c55b1_d,_72248_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(_1ec1c55b1_d,_72248_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_72517_ta),_1ec1c55b1_d,_72248_message);
								return false;
							}
						}
						_iter_next_4808062112:;
						++it;
						goto _iter_begin_4808062112;
					}
					_iter_end_4808062112:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4808059696:;
			{
				jule::Ptr<_1eb29bdd6_Struct> _73917_s = _72232_decl.operator jule::Ptr<_1eb29bdd6_Struct>();
				{
					auto &expr = _73917_s->_field_depends;
					auto it = expr.begin();
					_iter_begin_4808068384:;
					if (it != expr.end()) {
						jule::Ptr<_1eb29bdd6_Struct> &_1ec1c55b1_d = *it;
						{
							if ((*this)._field_referencer->_field_owner == _1ec1c55b1_d) {
								(*this)._method_push_cycle_error(jule::Any(_73917_s),jule::Any(_1ec1c55b1_d),_72248_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(jule::Any(_1ec1c55b1_d),_72248_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_73917_s),jule::Any(_1ec1c55b1_d),_72248_message);
								return false;
							}
						}
						_iter_next_4808068384:;
						++it;
						goto _iter_begin_4808068384;
					}
					_iter_end_4808068384:;
				}
			}
		}
		_match_end_4808059472:;
	}
	return true;
}



inline jule::Bool _1ec1c55b1_TypeChecker::_method_check_illegal_cycles(jule::Ptr<_1ea6ee955_IdentTypeDecl>& _76040_ident,jule::Any _76067_decl) {
	jule::Bool _76080_ok = jule::Bool();
	if ((*this)._field_referencer == nullptr) {
		_76080_ok = true;
		return _76080_ok;
	}
	{
		auto &_match_expr{ _76067_decl };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4808077568:;
			{
				if ((*this)._field_not_plain) {
					_76080_ok = true;
					return _76080_ok;
				}
			}
		}
		_match_end_4808077168:;
	}
	if (_76067_decl == (*this)._field_referencer->_field_owner) {
		(*this)._method_push_err(_76040_ident->_field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*this)._field_referencer->_field_ident)}));
		_76080_ok = false;
		return _76080_ok;
	}
	jule::Str _77917_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_76067_decl,_77917_message)))) {
		jule::Str _78221_err_msg = _77917_message;
		_77917_message=jule::Str();
		(*this)._method_push_cycle_error((*this)._field_referencer->_field_owner,_76067_decl,_77917_message);
		_78221_err_msg=_78221_err_msg + _77917_message;
		(*this)._method_push_err(_76040_ident->_field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_78221_err_msg)}));
		_76080_ok = false;
		return _76080_ok;
	}
	{
		auto &_match_expr{ (*this)._field_referencer->_field_owner };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeAlias>>()) {
			_case_begin_4808083424:;
			{
				{
					(*((*this)._field_referencer->_field_refs))=jule::append((*((*this)._field_referencer->_field_refs)),jule::Slice<jule::Any>({_76067_decl}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4808082240:;
			{
				{
					auto &_match_expr{ _76067_decl };
					if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
						_case_begin_4808089120:;
						{
							jule::Ptr<_1eb29bdd6_Struct> _79725_s = (*this)._field_referencer->_field_owner.operator jule::Ptr<_1eb29bdd6_Struct>();
							_79725_s->_field_depends = jule::alloc_for_append(_79725_s->_field_depends,1);_79725_s->_field_depends.push(_76067_decl.operator jule::Ptr<_1eb29bdd6_Struct>());
						}
					}
					_match_end_4808087984:;
				}
			}
		}
		_match_end_4808086784:;
	}
	_76080_ok = true;
	return _76080_ok;
}



inline jule::Trait<_1ec1c55b1_Kind> _1ec1c55b1_TypeChecker::_method_from_type_alias(jule::Ptr<_1ea6ee955_IdentTypeDecl>& _80535_decl,jule::Ptr<_1ec1c55b1_TypeAlias>& _80562_ta) {
	if ((!((*this)._field_s->_method_is_accessible_define(_80562_ta->_field_public,_80562_ta->_field_token)))) {
		(*this)._method_push_err(_80535_decl->_field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_80535_decl->_field_ident)}));
		return nullptr;
	}
	_80562_ta->_field_used=true;
	if (_80535_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_80535_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_80535_decl->_field_ident)}));
		return nullptr;
	}
	jule::Bool _81817_ok = (*this)._method_check_illegal_cycles(_80535_decl,jule::Any(_80562_ta));
	if ((!(_81817_ok))) {
		return nullptr;
	}
	_81817_ok=(*this)._field_s->_method_check_type_alias_decl_kind(_80562_ta,(*this)._field_lookup);
	if ((!(_81817_ok))) {
		return nullptr;
	}
	return jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(((_80562_ta->_field_cpp_linked) ? (_80562_ta->_field_ident) : (_80562_ta->_field_kind->_field_kind->_field_cpp_ident)),_80562_ta->_field_generic,jule::Bool(),_80562_ta->_field_kind->_field_kind->_field_kind));
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1ec1c55b1_TypeChecker::_method_from_enum(jule::Ptr<_1ea6ee955_IdentTypeDecl>& _83629_decl,jule::Ptr<_1eb7c7e7d_Enum>& _83656_e) {
	if ((!((*this)._field_s->_method_is_accessible_define(_83656_e->_field_public,_83656_e->_field_token)))) {
		(*this)._method_push_err(_83629_decl->_field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_83629_decl->_field_ident)}));
		return nullptr;
	}
	if (_83629_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_83629_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_83629_decl->_field_ident)}));
		return nullptr;
	}
	return _83656_e;
}



inline jule::Bool _1ec1c55b1_TypeChecker::_method_check_struct_ins(jule::Ptr<_1eb29bdd6_StructIns>& _85040_ins,_1ea7465e5_Token& _85058_error_token) {
	jule::Bool _85080_ok = jule::Bool();
	if (_85040_ins->_field_checked) {
		_85080_ok = true;
		return _85080_ok;
	}
	_85040_ins->_field_checked=true;
	if (((*this)._field_referencer != nullptr) && ((*this)._field_referencer->_field_owner == _85040_ins->_field_decl)) {
		_85080_ok = true;
		return _85080_ok;
	}
	jule::Ptr<_1ebcb6081_SymbolTable> _86417_old_file = (*this)._field_s->_field_file;
	__JULE_DEFER({
		(*this)._field_s->_method_set_current_file(_86417_old_file);
	});
	jule::Ptr<_1ebcb6081_SymbolTable> _86717_file = _1eb9ed0d7_find_file((*this)._field_s->_field_files,_85040_ins->_field_decl->_field_token._field_file);
	if (_86717_file != nullptr) {
		(*this)._field_s->_method_set_current_file(_86717_file);
	}
	jule::Ptr<_1ec1c55b1_Referencer> _87217_referencer = jule::new_struct<_1ec1c55b1_Referencer>(new( std::nothrow ) _1ec1c55b1_Referencer(_85040_ins->_field_decl->_field_ident,jule::Any(_85040_ins->_field_decl),nullptr));
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _87717_generics = jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>::alloc(0LL,static_cast<jule::I64>(_85040_ins->_field_generics.len()));
	{
		auto &expr = _85040_ins->_field_generics;
		auto it = expr.begin();
		_iter_begin_4808127136:;
		if (it != expr.end()) {
			jule::Int _1ec1c55b1_i = it - expr.begin();
			jule::Ptr<_1ec1c55b1_TypeKind> _1ec1c55b1_g = *it;
			{
				_87717_generics.push(jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1ea7465e5_Token(),_85040_ins->_field_decl->_field_generics[_1ec1c55b1_i]->_field_ident,jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_1ec1c55b1_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_4808127136:;
			++it;
			_1ec1c55b1_i++;
			goto _iter_begin_4808127136;
		}
		_iter_end_4808127136:;
	}
	jule::Ptr<_1ebcb6081_SymbolTable> _88717_old_sema_file = _85040_ins->_field_decl->_field_sema->_field_file;
	__JULE_DEFER({
		_85040_ins->_field_decl->_field_sema->_method_set_current_file(_88717_old_sema_file);
	});
	_1ec1c55b1_TypeChecker _89017_tc = _1ec1c55b1_TypeChecker(_85040_ins->_field_decl->_field_sema,_85040_ins->_field_decl->_field_sema,_87217_referencer,_1ea7465e5_Token(),jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>(),_87717_generics,jule::Bool(),jule::Bool());
	{
		auto &expr = _85040_ins->_field_fields;
		auto it = expr.begin();
		_iter_begin_4808134496:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_FieldIns> _1ec1c55b1_field = *it;
			{
				jule::Ptr<_1ec1c55b1_TypeKind> _89921_kind = _89017_tc._method_check_decl(_1ec1c55b1_field->_field_decl->_field_kind->_field_decl);
				_85080_ok=_89921_kind != nullptr;
				if (((_85040_ins->_field_decl->_field_sema != nullptr) && ((*this)._field_s != _85040_ins->_field_decl->_field_sema)) && (_85040_ins->_field_decl->_field_sema->_field_errors.len() > 0LL)) {
					(*this)._field_s->_field_errors=jule::append((*this)._field_s->_field_errors,_85040_ins->_field_decl->_field_sema->_field_errors);
					_85040_ins->_field_decl->_field_sema->_field_errors=nullptr;
				}
				if ((!(_85080_ok))) {
					_85080_ok = false;
					return _85080_ok;
				}
				_1ec1c55b1_field->_field_kind=_89921_kind;
				if (_1ec1c55b1_field->_field_kind->_method_mutable()) {
					_85040_ins->_field_mutable=true;
					(*this)._field_s->_method_check_struct_ins_derive_clone(_85040_ins);
				}
			}
			_iter_next_4808134496:;
			++it;
			goto _iter_begin_4808134496;
		}
		_iter_end_4808134496:;
	}
	if (_85040_ins->_field_generics.len() > 0LL) {
		{
			auto &expr = _85040_ins->_field_methods;
			auto it = expr.begin();
			_iter_begin_4808142016:;
			if (it != expr.end()) {
				jule::Ptr<_1eb627195_Fn> _1ec1c55b1_m = *it;
				{
					(*this)._field_s->_method_check_type_method(_85040_ins,_1ec1c55b1_m);
				}
				_iter_next_4808142016:;
				++it;
				goto _iter_begin_4808142016;
			}
			_iter_end_4808142016:;
		}
	}
	_85080_ok = true;
	return _85080_ok;
}



inline void _1ec1c55b1_TypeChecker::_method_append_used_struct_reference(jule::Ptr<_1eb29bdd6_Struct>& _92752_s) {
	if ((*this)._field_referencer == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*this)._field_referencer->_field_owner };
		if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4808147680:;
			{
				jule::Ptr<_1eb29bdd6_Struct> _93421_ref_s = (*this)._field_referencer->_field_owner.operator jule::Ptr<_1eb29bdd6_Struct>();
				if ((!(_93421_ref_s->_method_is_uses(_92752_s)))) {
					_93421_ref_s->_field_uses = jule::alloc_for_append(_93421_ref_s->_field_uses,1);_93421_ref_s->_field_uses.push(_92752_s);
				}
			}
		}
		_match_end_4808148016:;
	}
}



inline jule::Ptr<_1eb29bdd6_StructIns> _1ec1c55b1_TypeChecker::_method_from_struct(jule::Ptr<_1ea6ee955_IdentTypeDecl>& _94135_decl,jule::Ptr<_1eb29bdd6_Struct>& _94162_s) {
	if ((!((*this)._field_s->_method_is_accessible_define(_94162_s->_field_public,_94162_s->_field_token)))) {
		(*this)._method_push_err(_94135_decl->_field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_94135_decl->_field_ident)}));
		return nullptr;
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return nullptr;
	}
	jule::Bool _95217_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_94135_decl,jule::Any(_94162_s));
	if ((!(_95217_ok))) {
		return nullptr;
	}
	(*this)._method_append_used_struct_reference(_94162_s);
	jule::Ptr<_1eb29bdd6_StructIns> _95817_ins = _94162_s->_method_instance();
	_95817_ins->_field_generics=jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>::alloc(0LL,static_cast<jule::I64>(_94135_decl->_field_generics.len()));
	jule::Ptr<_1ec1c55b1_Referencer> _96017_referencer = (*this)._field_referencer;
	(*this)._field_referencer=nullptr;
	{
		auto &expr = _94135_decl->_field_generics;
		auto it = expr.begin();
		_iter_begin_4808161760:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_TypeDecl> _1ec1c55b1_g = *it;
			{
				jule::Ptr<_1ec1c55b1_TypeKind> _96321_kind = (*this)._method_build(_1ec1c55b1_g->_field_kind);
				if (_96321_kind == nullptr) {
					_95217_ok=false;
					goto _iter_next_4808161760;
				}
				_95817_ins->_field_generics = jule::alloc_for_append(_95817_ins->_field_generics,1);_95817_ins->_field_generics.push(_96321_kind);
			}
			_iter_next_4808161760:;
			++it;
			goto _iter_begin_4808161760;
		}
		_iter_end_4808161760:;
	}
	(*this)._field_referencer=_96017_referencer;
	if ((!(_95217_ok))) {
		return nullptr;
	}
	_95217_ok=(*this)._field_s->_method_check_generic_quantity(static_cast<jule::I64>(_95817_ins->_field_decl->_field_generics.len()),static_cast<jule::I64>(_95817_ins->_field_generics.len()),_94135_decl->_field_token);
	if ((!(_95217_ok))) {
		return nullptr;
	}
	jule::Ptr<_1eb29bdd6_StructIns> _98217_exist_instance = _94162_s->_method_append_instance(_95817_ins);
	if (_98217_exist_instance != nullptr) {
		return _98217_exist_instance;
	}
	_95217_ok=(*this)._method_check_struct_ins(_95817_ins,_94135_decl->_field_token);
	if ((!(_95217_ok))) {
		return nullptr;
	}
	return _95817_ins;
}



inline jule::Trait<_1ec1c55b1_Kind> _1ec1c55b1_TypeChecker::_method_get_def(jule::Ptr<_1ea6ee955_IdentTypeDecl>& _99731_decl) {
	{
		auto &expr = (*this)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_4808177200:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_GenericDecl> &_1ec1c55b1_g = *it;
			{
				if (_1ec1c55b1_g->_field_ident == _99731_decl->_field_ident) {
					return _1ec1c55b1_build_prim_type(_1ec1c55b1_g->_field_ident);
				}
			}
			_iter_next_4808177200:;
			++it;
			goto _iter_begin_4808177200;
		}
		_iter_end_4808177200:;
	}
	{
		auto &expr = (*this)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_4808180352:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeAlias> _1ec1c55b1_g = *it;
			{
				if (_1ec1c55b1_g->_field_ident == _99731_decl->_field_ident) {
					jule::Ptr<_1eb29bdd6_StructIns> _100625_st = _1ec1c55b1_g->_field_kind->_field_kind->_method_strct();
					if (_100625_st != nullptr) {
						jule::Bool _100825_ok = (*this)._method_check_illegal_cycles(_99731_decl,jule::Any(_100625_st->_field_decl));
						if ((!(_100825_ok))) {
							return nullptr;
						}
					}
					return _1ec1c55b1_g->_field_kind->_field_kind->_field_kind;
				}
			}
			_iter_next_4808180352:;
			++it;
			goto _iter_begin_4808180352;
		}
		_iter_end_4808180352:;
	}
	if ((!(_99731_decl->_field_cpp_linked))) {
		jule::Ptr<_1eb7c7e7d_Enum> _101821_e = (*this)._field_lookup.get()._method_find_enum(_99731_decl->_field_ident);
		if (_101821_e != nullptr) {
			return (*this)._method_from_enum(_99731_decl,_101821_e);
		}
		jule::Ptr<_1eb7c68e9_Trait> _102321_t = (*this)._field_lookup.get()._method_find_trait(_99731_decl->_field_ident);
		if ((_102321_t == nullptr) && (!((*this)._field_dis_builtin))) {
			_102321_t=_1ec2ee113_find_builtin_trait(_99731_decl->_field_ident);
		}
		if (_102321_t != nullptr) {
			if ((!((*this)._field_s->_method_is_accessible_define(_102321_t->_field_public,_102321_t->_field_token)))) {
				(*this)._method_push_err(_99731_decl->_field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_99731_decl->_field_ident)}));
				return nullptr;
			}
			if (_99731_decl->_field_generics.len() > 0LL) {
				(*this)._method_push_err(_99731_decl->_field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_99731_decl->_field_ident)}));
				return nullptr;
			}
			return _102321_t;
		}
	}
	jule::Ptr<_1eb29bdd6_Struct> _104117_s = (*this)._field_lookup.get()._method_find_struct(_99731_decl->_field_ident,_99731_decl->_field_cpp_linked);
	if (_104117_s != nullptr) {
		return (*this)._method_from_struct(_99731_decl,_104117_s);
	}
	jule::Ptr<_1ec1c55b1_TypeAlias> _104617_ta = (*this)._field_lookup.get()._method_find_type_alias(_99731_decl->_field_ident,_99731_decl->_field_cpp_linked);
	if ((_104617_ta == nullptr) && (!((*this)._field_dis_builtin))) {
		_104617_ta=_1ec2ee113_find_builtin_type_alias(_99731_decl->_field_ident);
	}
	if (_104617_ta != nullptr) {
		return (*this)._method_from_type_alias(_99731_decl,_104617_ta);
	}
	(*this)._method_push_err(_99731_decl->_field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_99731_decl->_field_ident)}));
	return nullptr;
}



inline jule::Trait<_1ec1c55b1_Kind> _1ec1c55b1_TypeChecker::_method_build_ident(jule::Ptr<_1ea6ee955_IdentTypeDecl> _105834_decl) {
	{
		if (_1ec1c55b1_is_prim(_105834_decl->_field_ident)) {
			_case_begin_4808209552:;
			{
				return (*this)._method_build_prim(_105834_decl);
			}
		}
		else {
			_case_begin_4808207568:;
			{
				return (*this)._method_get_def(_105834_decl);
			}
		}
		_match_end_4808207392:;
	}
}



inline jule::Ptr<_1ec1c55b1_Sptr> _1ec1c55b1_TypeChecker::_method_build_sptr_from_type(jule::Ptr<_1ec1c55b1_TypeKind>& _106544_elem) {
	{
		if (_106544_elem == nullptr) {
			_case_begin_4808211616:;
			{
				return nullptr;
			}
		}
		else if (_106544_elem->_method_strct() != nullptr) {
			_case_begin_4808211712:;
			{
				jule::Ptr<_1eb29bdd6_StructIns> _107217_s = _106544_elem->_method_strct();
				if ((_107217_s->_field_decl != nullptr) && _107217_s->_field_decl->_field_cpp_linked) {
					(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
		}
		else if ((_106544_elem->_method_arr() != nullptr) && _106544_elem->_method_arr()->_field_auto) {
			_case_begin_4808211808:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4808210176:;
	}
	return jule::new_struct_ptr<_1ec1c55b1_Sptr>(new( std::nothrow ) _1ec1c55b1_Sptr(_106544_elem));
}



inline jule::Ptr<_1ec1c55b1_Sptr> _1ec1c55b1_TypeChecker::_method_build_sptr(jule::Ptr<_1ea6ee955_SptrTypeDecl> _108833_decl) {
	jule::Bool _108913_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_108913_not_plain;
	});
	jule::Ptr<_1ec1c55b1_TypeKind> _109317_elem = (*this)._method_check_decl(_108833_decl->_field_elem);
	return (*this)._method_build_sptr_from_type(_109317_elem);
}



inline jule::Ptr<_1ec1c55b1_Ptr> _1ec1c55b1_TypeChecker::_method_build_ptr_from_type(jule::Ptr<_1ec1c55b1_TypeKind>& _109743_elem) {
	{
		if (_109743_elem == nullptr) {
			_case_begin_4808227008:;
			{
				return nullptr;
			}
		}
		else if ((_109743_elem->_method_arr() != nullptr) && _109743_elem->_method_arr()->_field_auto) {
			_case_begin_4808227120:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_1ec1c55b1_Ptr>();
			}
		}
		_match_end_4808226784:;
	}
	return jule::new_struct_ptr<_1ec1c55b1_Ptr>(new( std::nothrow ) _1ec1c55b1_Ptr(_109743_elem));
}



inline jule::Ptr<_1ec1c55b1_Ptr> _1ec1c55b1_TypeChecker::_method_build_ptr(jule::Ptr<_1ea6ee955_PtrTypeDecl> _111332_decl) {
	jule::Bool _111413_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_111413_not_plain;
	});
	jule::Ptr<_1ec1c55b1_TypeKind> _111817_elem = nullptr;
	if ((!(_111332_decl->_method_is_unsafe()))) {
		_111817_elem=(*this)._method_check_decl(_111332_decl->_field_elem);
		return (*this)._method_build_ptr_from_type(_111817_elem);
	}
	return jule::new_struct_ptr<_1ec1c55b1_Ptr>(new( std::nothrow ) _1ec1c55b1_Ptr(_111817_elem));
}



inline jule::Ptr<_1ec1c55b1_Slc> _1ec1c55b1_TypeChecker::_method_build_slc(jule::Ptr<_1ea6ee955_SlcTypeDecl> _113032_decl) {
	jule::Bool _113113_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_113113_not_plain;
	});
	jule::Ptr<_1ec1c55b1_TypeKind> _113517_elem = (*this)._method_check_decl(_113032_decl->_field_elem);
	{
		if (_113517_elem == nullptr) {
			_case_begin_4808243920:;
			{
				return nullptr;
			}
		}
		else if ((_113517_elem->_method_arr() != nullptr) && _113517_elem->_method_arr()->_field_auto) {
			_case_begin_4808244016:;
			{
				(*this)._method_push_err(_113032_decl->_field_elem->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4808243200:;
	}
	return jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(_113517_elem));
}



inline jule::Ptr<_1ec1c55b1_Arr> _1ec1c55b1_TypeChecker::_method_build_arr(jule::Ptr<_1ea6ee955_ArrTypeDecl> _115232_decl) {
	jule::Bool _115313_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_115313_not_plain;
	});
	jule::Int _115717_n = 0LL;
	if ((!(_115232_decl->_method_auto_sized()))) {
		jule::Ptr<_1ebcce31e_Data> _116021_size = (*this)._field_s->_method_eval((*this)._field_lookup)->_method_eval_expr(_115232_decl->_field_size);
		if (_116021_size == nullptr) {
			return nullptr;
		}
		if ((!(_116021_size->_method_is_const()))) {
			(*this)._method_push_err(_115232_decl->_field_size->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if ((_116021_size->_field_kind->_method_prim() == nullptr) || (!(_1ec4784ce_is_int(_116021_size->_field_kind->_method_prim()->_field_kind)))) {
			(*this)._method_push_err(_115232_decl->_field_size->_field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		}
		_115717_n=static_cast<jule::Int>(_116021_size->_field_constant->_method_as_i64());
		if (_115717_n < 0LL) {
			(*this)._method_push_err(_115232_decl->_field_elem->_field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _118017_elem = (*this)._method_check_decl(_115232_decl->_field_elem);
	{
		if (_118017_elem == nullptr) {
			_case_begin_4808265824:;
			{
				return nullptr;
			}
		}
		else if ((_118017_elem->_method_arr() != nullptr) && _118017_elem->_method_arr()->_field_auto) {
			_case_begin_4808265920:;
			{
				(*this)._method_push_err(_115232_decl->_field_elem->_field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4808253552:;
	}
	return jule::new_struct_ptr<_1ec1c55b1_Arr>(new( std::nothrow ) _1ec1c55b1_Arr(_115232_decl->_method_auto_sized(),_115717_n,_118017_elem));
}



inline jule::Ptr<_1ec1c55b1_Map> _1ec1c55b1_TypeChecker::_method_build_map(jule::Ptr<_1ea6ee955_MapTypeDecl> _119932_decl) {
	jule::Bool _120013_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_120013_not_plain;
	});
	jule::Ptr<_1ec1c55b1_TypeKind> _120417_key = (*this)._method_check_decl(_119932_decl->_field_key);
	if (_120417_key == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _120917_val = (*this)._method_check_decl(_119932_decl->_field_val);
	if (_120917_val == nullptr) {
		return nullptr;
	}
	if (_120917_val->_method_enm() != nullptr) {
		(*this)._method_push_err(_119932_decl->_field_val->_field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	}
	return jule::new_struct_ptr<_1ec1c55b1_Map>(new( std::nothrow ) _1ec1c55b1_Map(_120417_key,_120917_val));
}



inline jule::Ptr<_1ec1c55b1_Tuple> _1ec1c55b1_TypeChecker::_method_build_tuple(jule::Ptr<_1ea6ee955_TupleTypeDecl> _122334_decl) {
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _122417_types = jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>::alloc(0LL,static_cast<jule::I64>(_122334_decl->_field_types.len()));
	{
		auto &expr = _122334_decl->_field_types;
		auto it = expr.begin();
		_iter_begin_4808283424:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_TypeDecl> _1ec1c55b1_t = *it;
			{
				jule::Ptr<_1ec1c55b1_TypeKind> _122621_kind = (*this)._method_check_decl(_1ec1c55b1_t);
				if (_122621_kind == nullptr) {
					return nullptr;
				}
				_122417_types.push(_122621_kind);
			}
			_iter_next_4808283424:;
			++it;
			goto _iter_begin_4808283424;
		}
		_iter_end_4808283424:;
	}
	return jule::new_struct_ptr<_1ec1c55b1_Tuple>(new( std::nothrow ) _1ec1c55b1_Tuple(_122417_types));
}



inline jule::Bool _1ec1c55b1_TypeChecker::_method_check_fn_types(jule::Ptr<_1eb627195_FnIns>& _123638_f) {
	jule::Bool _123651_ok = jule::Bool();
	{
		auto &expr = _123638_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4808290832:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> _1ec1c55b1_p = *it;
			{
				_1ec1c55b1_p->_field_kind=(*this)._method_build(_1ec1c55b1_p->_field_decl->_field_kind->_field_decl->_field_kind);
				_123651_ok=_1ec1c55b1_p->_field_kind != nullptr;
				if ((!(_123651_ok))) {
					_123651_ok = false;
					return _123651_ok;
				}
			}
			_iter_next_4808290832:;
			++it;
			goto _iter_begin_4808290832;
		}
		_iter_end_4808290832:;
	}
	if ((!(_123638_f->_field_decl->_method_is_void()))) {
		_123638_f->_field_result=(*this)._method_build(_123638_f->_field_decl->_field_result->_field_kind->_field_decl->_field_kind);
		_123651_ok = _123638_f->_field_result != nullptr;
		return _123651_ok;
	}
	_123651_ok = true;
	return _123651_ok;
}



inline jule::Ptr<_1eb627195_FnIns> _1ec1c55b1_TypeChecker::_method_build_fn(jule::Ptr<_1ea6ee955_FnDecl> _125331_decl) {
	if (_125331_decl->_field_generics.len() > 0LL) {
		(*this)._method_push_err(_125331_decl->_field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eb627195_Fn> _125917_f = _1eb736eec_build_fn(_125331_decl);
	jule::Ptr<_1eb627195_FnIns> _126017_ins = _125917_f->_method_instance_force();
	_126017_ins->_field_anon=true;
	jule::Bool _126313_ok = (*this)._method_check_fn_types(_126017_ins);
	if ((!(_126313_ok))) {
		return nullptr;
	}
	return _126017_ins;
}



inline jule::Trait<_1ec1c55b1_Kind> _1ec1c55b1_TypeChecker::_method_build_by_namespace(jule::Ptr<_1ea6ee955_NamespaceTypeDecl> _127141_decl) {
	jule::Str _127213_path = _1ec1c55b1_build_link_path_by_tokens(_127141_decl->_field_idents);
	jule::Ptr<_1eb7d8048_ImportInfo> _127317_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1eb7d8048_ImportInfo>)>([=](jule::Ptr<_1eb7d8048_ImportInfo> _127353_imp) mutable -> jule::Bool {
		if ((_127141_decl->_field_idents.len() == 1LL) && (_127353_imp->_field_alias == _127213_path)) {
			return true;
		}
		return (_127353_imp->_field_link_path == _127213_path) && _127353_imp->_method_is_accessible_via_selection();
	}));
	if ((_127317_imp == nullptr) || (!(_127317_imp->_method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err(_127141_decl->_field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_127213_path)}));
		return nullptr;
	}
	jule::Trait<_1ec2d8be1_Lookup> _128517_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_127317_imp;
	(*this)._method_disallow_builtin();
	jule::Trait<_1ec1c55b1_Kind> _128917_kind = (*this)._method_build_ident(_127141_decl->_field_kind);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_128517_lookup;
	return _128917_kind;
}



inline jule::Ptr<_1ec1c55b1_TypeKind> _1ec1c55b1_TypeChecker::_method_build(jule::Any& _129729_decl_kind) {
	jule::Trait<_1ec1c55b1_Kind> _129817_kind = nullptr;
	{
		auto &_match_expr{ _129729_decl_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeKind>>()) {
			_case_begin_4808324496:;
			{
				_129817_kind=_129729_decl_kind.operator jule::Ptr<_1ec1c55b1_TypeKind>();
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_IdentTypeDecl>>()) {
			_case_begin_4808324240:;
			{
				jule::Trait<_1ec1c55b1_Kind> _130521_t = (*this)._method_build_ident(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_IdentTypeDecl>());
				if (_130521_t != nullptr) {
					_129817_kind=_130521_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_SptrTypeDecl>>()) {
			_case_begin_4808324336:;
			{
				jule::Ptr<_1ec1c55b1_Sptr> _131121_t = (*this)._method_build_sptr(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_SptrTypeDecl>());
				if (_131121_t != nullptr) {
					_129817_kind=_131121_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_PtrTypeDecl>>()) {
			_case_begin_4808322560:;
			{
				jule::Ptr<_1ec1c55b1_Ptr> _131721_t = (*this)._method_build_ptr(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_PtrTypeDecl>());
				if (_131721_t != nullptr) {
					_129817_kind=_131721_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_SlcTypeDecl>>()) {
			_case_begin_4808322656:;
			{
				jule::Ptr<_1ec1c55b1_Slc> _132321_t = (*this)._method_build_slc(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_SlcTypeDecl>());
				if (_132321_t != nullptr) {
					_129817_kind=_132321_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_ArrTypeDecl>>()) {
			_case_begin_4808322752:;
			{
				jule::Ptr<_1ec1c55b1_Arr> _132921_t = (*this)._method_build_arr(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_ArrTypeDecl>());
				if (_132921_t != nullptr) {
					_129817_kind=_132921_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_MapTypeDecl>>()) {
			_case_begin_4808322848:;
			{
				jule::Ptr<_1ec1c55b1_Map> _133521_t = (*this)._method_build_map(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_MapTypeDecl>());
				if (_133521_t != nullptr) {
					_129817_kind=_133521_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TupleTypeDecl>>()) {
			_case_begin_4808322944:;
			{
				jule::Ptr<_1ec1c55b1_Tuple> _134121_t = (*this)._method_build_tuple(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_TupleTypeDecl>());
				if (_134121_t != nullptr) {
					_129817_kind=_134121_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnDecl>>()) {
			_case_begin_4808324912:;
			{
				jule::Ptr<_1eb627195_FnIns> _134721_t = (*this)._method_build_fn(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_FnDecl>());
				if (_134721_t != nullptr) {
					_129817_kind=_134721_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_NamespaceTypeDecl>>()) {
			_case_begin_4808325008:;
			{
				jule::Trait<_1ec1c55b1_Kind> _135321_t = (*this)._method_build_by_namespace(_129729_decl_kind.operator jule::Ptr<_1ea6ee955_NamespaceTypeDecl>());
				if (_135321_t != nullptr) {
					_129817_kind=_135321_t;
				}
			}
		}
		else {
			_case_begin_4808321664:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4808322160:;
	}
	if (_129817_kind == nullptr) {
		return nullptr;
	}
	{
		auto &_match_expr{ _129817_kind };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeKind>>()) {
			_case_begin_4808353024:;
			{
				return _129817_kind.operator jule::Ptr<_1ec1c55b1_TypeKind>();
			}
		}
		else {
			_case_begin_4808350192:;
			{
				return jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_129817_kind));
			}
		}
		_match_end_4808325440:;
	}
}



inline jule::Ptr<_1ec1c55b1_TypeKind> _1ec1c55b1_TypeChecker::_method_check_decl(jule::Ptr<_1ea6ee955_TypeDecl>& _137834_decl) {
	_1ea7465e5_Token _138017_error_token = (*this)._field_error_token;
	(*this)._field_error_token=_137834_decl->_field_token;
	jule::Ptr<_1ec1c55b1_TypeKind> _138317_kind = (*this)._method_build(_137834_decl->_field_kind);
	(*this)._field_error_token=_138017_error_token;
	return _138317_kind;
}



inline void _1ec1c55b1_TypeChecker::_method_check(jule::Ptr<_1ec1c55b1_TypeSymbol>& _138929_t) {
	if (_138929_t->_field_decl == nullptr) {
		return;
	}
	jule::Ptr<_1ec1c55b1_TypeKind> _139417_kind = (*this)._method_check_decl(_138929_t->_field_decl);
	if (_139417_kind == nullptr) {
		_138929_t->_method_remove_kind();
		return;
	}
	_138929_t->_field_kind=_139417_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ec1c55b1_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_1ea66c0ed_IR>,jule::Slice<_1e8ea7cc0_Log>> _1ea66c0ed_IR::_static_method_build(jule::Str _2625_path,jule::Int _2636_flags) {
	jule::Ptr<_1ea6cd59e_PlainImporter> _2717_importer = jule::new_struct<_1ea6cd59e_PlainImporter>(new( std::nothrow ) _1ea6cd59e_PlainImporter(_1ea70c204_find_module_file_deep(_2625_path),jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>>()));
	if (_2717_importer->_field_mod.len() != 0LL) {
		jule::Slice<_1e8ea7cc0_Log> _3221_errs = _1ea70c204_check_module_file(_2717_importer->_field_mod);
		if (_3221_errs.len() != 0LL) {
			return std::make_tuple(nullptr,_3221_errs);
		}
	}
	jule::Slice<jule::Ptr<_1ea6ecac9_Ast>> _3818_files;
	jule::Slice<_1e8ea7cc0_Log> _3829_logs;
	std::tie(_3818_files,_3829_logs) = _2717_importer->_method_import_package(_2625_path,false);
	if (_3829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_3829_logs);
	}
	if (_3818_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1eb7d8048_Package> _4718_pkg;
	std::tie(_4718_pkg,_3829_logs) = _1ebd050c0_analyze_package(_3818_files,_2717_importer,_2636_flags);
	if (_3829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_3829_logs);
	}
	jule::Ptr<_1ea66c0ed_IR> _5217_ir = jule::new_struct<_1ea66c0ed_IR>(new( std::nothrow ) _1ea66c0ed_IR(jule::Slice<jule::Str>(),_4718_pkg,_2717_importer->_field_all_packages,_1ea66c175_OrderedDefines()));
	_5217_ir->_field_passes=_1ea66c0ed_get_all_unique_passes(_5217_ir->_field_main,_5217_ir->_field_used);
	return std::make_tuple(_5217_ir,nullptr);
}



inline void _1ea66c0ed_IR::_method_append_structs(jule::Ptr<_1eb7d8048_Package>& _6334_p,jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _6358_buffer) {
	{
		auto &expr = _6334_p->_field_files;
		auto it = expr.begin();
		_iter_begin_4808600128:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ea66c0ed_f = *it;
			{
				{
					auto &expr = _1ea66c0ed_f->_field_structs;
					auto it = expr.begin();
					_iter_begin_4808601408:;
					if (it != expr.end()) {
						jule::Ptr<_1eb29bdd6_Struct> _1ea66c0ed_s = *it;
						{
							if ((!(_1ea66c0ed_s->_field_cpp_linked))) {
								_6358_buffer.push(_1ea66c0ed_s);
							}
						}
						_iter_next_4808601408:;
						++it;
						goto _iter_begin_4808601408;
					}
					_iter_end_4808601408:;
				}
			}
			_iter_next_4808600128:;
			++it;
			goto _iter_begin_4808600128;
		}
		_iter_end_4808600128:;
	}
}



inline jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _1ea66c0ed_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ptr<_1eb29bdd6_Struct>> _7617_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_7617_buffer);
	{
		auto &expr = (*this)._field_used;
		auto it = expr.begin();
		_iter_begin_4808606304:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ea66c0ed_u = *it;
			{
				if ((!(_1ea66c0ed_u->_field_cpp_linked))) {
					(*this)._method_append_structs(_1ea66c0ed_u->_field_package,_7617_buffer);
				}
			}
			_iter_next_4808606304:;
			++it;
			goto _iter_begin_4808606304;
		}
		_iter_end_4808606304:;
	}
	return _7617_buffer;
}



inline void _1ea66c0ed_IR::_method_append_vars(jule::Ptr<_1eb7d8048_Package>& _8931_p,jule::Slice<jule::Ptr<_1eba533d4_Var>>& _8955_buffer) {
	{
		auto &expr = _8931_p->_field_files;
		auto it = expr.begin();
		_iter_begin_4808611488:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ea66c0ed_f = *it;
			{
				{
					auto &expr = _1ea66c0ed_f->_field_vars;
					auto it = expr.begin();
					_iter_begin_4808612768:;
					if (it != expr.end()) {
						jule::Ptr<_1eba533d4_Var> _1ea66c0ed_v = *it;
						{
							if ((!(_1ea66c0ed_v->_field_cpp_linked)) && (!(_1ea66c0ed_v->_field_constant))) {
								_8955_buffer.push(_1ea66c0ed_v);
							}
						}
						_iter_next_4808612768:;
						++it;
						goto _iter_begin_4808612768;
					}
					_iter_end_4808612768:;
				}
			}
			_iter_next_4808611488:;
			++it;
			goto _iter_begin_4808611488;
		}
		_iter_end_4808611488:;
	}
}



inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1ea66c0ed_IR::_method_get_all_variables(void) {
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _10217_buffer = nullptr;
	(*this)._method_append_vars((*this)._field_main,_10217_buffer);
	{
		auto &expr = (*this)._field_used;
		auto it = expr.begin();
		_iter_begin_4808617696:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ea66c0ed_u = *it;
			{
				if ((!(_1ea66c0ed_u->_field_cpp_linked))) {
					(*this)._method_append_vars(_1ea66c0ed_u->_field_package,_10217_buffer);
				}
			}
			_iter_next_4808617696:;
			++it;
			goto _iter_begin_4808617696;
		}
		_iter_end_4808617696:;
	}
	return _10217_buffer;
}



inline void _1ea66c0ed_IR::_method_order(void) {
	(*this)._field_ordered._field_structs=(*this)._method_get_all_structures();
	(*this)._field_ordered._field_globals=(*this)._method_get_all_variables();
	_1ea66c175_DefineOrderer::_static_method_order_variables((*this)._field_ordered._field_globals);
	_1ea66c175_DefineOrderer::_static_method_order_structures((*this)._field_ordered._field_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea66c0ed_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_ParamDecl::_method_is_self(void) {
	return (*this)._field_ident.has_suffix(jule::Str("self", 4));
}



inline jule::Bool _1ea6ee955_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_FnDecl::_method_is_anon(void) {
	return (*this)._field_ident == jule::Str("<anonymous>", 11);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1eb7d5892_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ea6ee955_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ea6ee955_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Int,jule::Bool> _1ec748ded_ArgParser::_method_parse_integer_0(jule::Str& _18532_s,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)> _18540_parser) {
	jule::Int _18584_x = jule::Int();
	jule::Bool _18590_ok = jule::Bool();
	{
		if (_18532_s == jule::Str()) {
			_case_begin_4810626256:;
			{
				_18584_x = 0LL;
				_18590_ok = false;
				return std::make_tuple(_18584_x,_18590_ok);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0x", 2))) {
			_case_begin_4810627408:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),16LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0b", 2))) {
			_case_begin_4810627504:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),2LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0o", 2))) {
			_case_begin_4810627600:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),8LL);
			}
		}
		else if (_18532_s[0LL] == '0') {
			_case_begin_4810625760:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_4810625456:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s,10LL);
			}
		}
		_match_end_4810625280:;
	}
	return std::make_tuple(_18584_x,_18590_ok);
}

inline std::tuple<jule::Uint,jule::Bool> _1ec748ded_ArgParser::_method_parse_integer_1(jule::Str& _18532_s,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)> _18540_parser) {
	jule::Uint _18584_x = jule::Uint();
	jule::Bool _18590_ok = jule::Bool();
	{
		if (_18532_s == jule::Str()) {
			_case_begin_4810654832:;
			{
				_18584_x = 0LLU;
				_18590_ok = false;
				return std::make_tuple(_18584_x,_18590_ok);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0x", 2))) {
			_case_begin_4810655984:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),16LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0b", 2))) {
			_case_begin_4810656080:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),2LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0o", 2))) {
			_case_begin_4810656176:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),8LL);
			}
		}
		else if (_18532_s[0LL] == '0') {
			_case_begin_4810654336:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_4810654032:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s,10LL);
			}
		}
		_match_end_4810653856:;
	}
	return std::make_tuple(_18584_x,_18590_ok);
}



inline jule::Str _1ec748ded_ArgParser::_method_get_data(void) {
	if (((*this)._field_i + 1LL) >= (*this)._field_args.len()) {
		return jule::Str();
	}
	((*this)._field_i)++;
	return (*this)._field_args[(*this)._field_i];
}



inline jule::VoidExceptional _1ec748ded_ArgParser::_method_process_flag(jule::Trait<_1ec748ded_CommonFlag>& _21636_flag) {
	{
		auto &_match_expr{ _21636_flag };
		if (_match_expr.type_is<jule::Ptr<_1ec748ded_Flag_3>>()) {
			_case_begin_4810602400:;
			{
				jule::Ptr<_1ec748ded_Flag_3> _21921_bf = _21636_flag.operator jule::Ptr<_1ec748ded_Flag_3>();
				(*(_21921_bf->_field__data))=(!(_21921_bf->_field__default));
				return jule::VoidExceptional();
			}
		}
		_match_end_4810602688:;
	}
	jule::Str _22413_data = (*this)._method_get_data();
	if (_22413_data == jule::Str()) {
		return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression missing", 20));
	}
	{
		auto &_match_expr{ _21636_flag };
		if (_match_expr.type_is<jule::Ptr<_1ec748ded_Flag_0>>()) {
			_case_begin_4810606752:;
			{
				jule::Ptr<_1ec748ded_Flag_0> _23121_intf = _21636_flag.operator jule::Ptr<_1ec748ded_Flag_0>();
				jule::Bool _23233_ok;
				std::tie((*(_23121_intf->_field__data)),_23233_ok) = (*this)._method_parse_integer_0(_22413_data,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _23272_s,jule::Int _23280_base) mutable -> std::tuple<jule::Int,jule::Bool> {
					jule::I64 _23322_x;
					jule::Int _23325_err;
					std::tie(_23322_x,_23325_err) = _1e9c683ba_parse_int(_23272_s,_23280_base,64LL);
					return std::make_tuple(_23322_x,_23325_err == 0LLU);
				}));
				if ((!(_23233_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression must be valid signed integer", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ec748ded_Flag_1>>()) {
			_case_begin_4810606352:;
			{
				jule::Ptr<_1ec748ded_Flag_1> _24121_uintf = _21636_flag.operator jule::Ptr<_1ec748ded_Flag_1>();
				jule::Bool _24234_ok;
				std::tie((*(_24121_uintf->_field__data)),_24234_ok) = (*this)._method_parse_integer_1(_22413_data,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _24274_s,jule::Int _24282_base) mutable -> std::tuple<jule::Uint,jule::Bool> {
					jule::U64 _24322_x;
					jule::Int _24325_err;
					std::tie(_24322_x,_24325_err) = _1e9c683ba_parse_uint(_24274_s,_24282_base,64LL);
					return std::make_tuple(_24322_x,_24325_err == 0LLU);
				}));
				if ((!(_24234_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression must be valid unsigned integer", 43));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ec748ded_Flag_2>>()) {
			_case_begin_4810606448:;
			{
				jule::Ptr<_1ec748ded_Flag_2> _25121_ff = _21636_flag.operator jule::Ptr<_1ec748ded_Flag_2>();
				jule::Int _25231_err;
				std::tie((*(_25121_ff->_field__data)),_25231_err) = _1e9c4b6bc_parse_float(_22413_data,64LL);
				if (_25231_err != 0LLU) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression must be valid floating-point", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ec748ded_Flag_4>>()) {
			_case_begin_4810608224:;
			{
				(*(_21636_flag.operator jule::Ptr<_1ec748ded_Flag_4>()->_field__data))=_22413_data;
			}
		}
		_match_end_4810606192:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1ec748ded_ArgParser::_method_single_dash(jule::Str& _26231_arg) {
	jule::Slice<jule::I32> _26313_rarg = static_cast<jule::Slice<jule::I32>>(_26231_arg).slice(1LL);
	{
		auto &expr = _26313_rarg;
		auto it = expr.begin();
		_iter_begin_4810674160:;
		if (it != expr.end()) {
			jule::I32 &_1ec748ded_r = *it;
			{
				jule::Trait<_1ec748ded_CommonFlag> _26521_flag = (*this)._field_set._method_find_flag_short(_1ec748ded_r);
				if (_26521_flag == nullptr) {
					return jule::VoidExceptional((_26231_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_1ec748ded_r));
				}
				({
					auto except = (*this)._method_process_flag(_26521_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_4810674160:;
			++it;
			goto _iter_begin_4810674160;
		}
		_iter_end_4810674160:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1ec748ded_ArgParser::_method_double_dash(jule::Str& _27431_arg) {
	jule::Trait<_1ec748ded_CommonFlag> _27517_flag = (*this)._field_set._method_find_flag(_27431_arg.slice(2LL));
	if (_27517_flag == nullptr) {
		return jule::VoidExceptional(_27431_arg + jule::Str(": flag is not exist", 19));
	}
	({
		auto except = (*this)._method_process_flag(_27517_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::VoidExceptional _1ec748ded_ArgParser::_method_try_arg(void) {
	jule::Str _28413_arg = (*this)._field_args[(*this)._field_i];
	if ((*this)._field_args.len() == 0LL) {
		return jule::VoidExceptional();
	}
	if (_28413_arg[0LL] == '-') {
		if (((*this)._field_args.len() > 1LL) && (_28413_arg[1LL] == '-')) {
			({
				auto except = (*this)._method_double_dash(_28413_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();
		}
		({
			auto except = (*this)._method_single_dash(_28413_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();
	}
	(*this)._field_content = jule::alloc_for_append((*this)._field_content,1);(*this)._field_content.push(_28413_arg); return jule::VoidExceptional(); }



inline jule::VoidExceptional _1ec748ded_ArgParser::_method_parse(void) {
	for (; (*this)._field_i < (*this)._field_args.len(); ((*this)._field_i)++) {
		{
			({
				auto except = (*this)._method_try_arg();
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_4810697792:;
	}
	_iter_end_4810697792:; return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _1ec748ded_ArgParser &_Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::I32 _1e8eee29a_decode_rune(jule::I32 _6720_r1,jule::I32 _6730_r2) {
	if ((((55296LL <= _6720_r1) && (_6720_r1 < 56320LL)) && (56320LL <= _6730_r2)) && (_6730_r2 < 57344LL)) {
		return static_cast<jule::I32>((((_6720_r1 - 55296LL) << 10LL) | (_6730_r2 - 56320LL)) + 65536LL);
	}
	return 65533LL;
}



inline std::tuple<jule::I32,jule::I32> _1e8eee29a_encode_rune(jule::I32 _7724_r) {
	jule::I32 _7735_r1 = jule::I32();
	jule::I32 _7745_r2 = jule::I32();
	if ((_7724_r < 65536LL) || (_7724_r > 1114111LL)) {
		_7735_r1 = 65533LL;
		_7745_r2 = 65533LL;
		return std::make_tuple(_7735_r1,_7745_r2);
	}
	_7724_r-=65536LL;
	_7735_r1 = static_cast<jule::I32>(55296LL + ((_7724_r >> 10LL) & 1023LL));
	_7745_r2 = static_cast<jule::I32>(56320LL + (_7724_r & 1023LL));
	return std::make_tuple(_7735_r1,_7745_r2);
}



inline jule::Slice<jule::I32> _1e8eee29a_decode(jule::Slice<jule::U16> _11815_s) {
	jule::Slice<jule::I32> _11913_a = jule::Slice<jule::I32>::alloc(static_cast<jule::I64>(_11815_s.len()));
	jule::Int _12013_n = 0LL;
	jule::Int _12113_i = 0LL;
	for (; _12113_i < _11815_s.len(); (_12113_i)++) {
		{
			jule::U16 _12313_r = _11815_s[_12113_i];
			{
				if (_12313_r < 55296LL || 57344LL <= _12313_r) {
					_case_begin_4788698592:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(_12313_r);
					}
				}
				else if (((((55296LL <= _12313_r) && (_12313_r < 56320LL)) && ((_12113_i + 1LL) < _11815_s.len())) && (56320LL <= _11815_s[_12113_i + 1LL])) && (_11815_s[_12113_i + 1LL] < 57344LL)) {
					_case_begin_4788698160:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(_1e8eee29a_decode_rune(static_cast<jule::I32>(_12313_r),static_cast<jule::I32>(_11815_s[_12113_i + 1LL])));
						(_12113_i)++;
					}
				}
				else {
					_case_begin_4788696608:;
					{
						_11913_a[_12013_n]=65533LL;
					}
				}
				_match_end_4788696496:;
			}
			(_12013_n)++;
		}
	_iter_next_4788682320:;
	}
	_iter_end_4788682320:;
	return _11913_a.slice(0LL,_12013_n);
}



inline jule::Slice<jule::U16> _1e8eee29a_append_rune(jule::Slice<jule::U16> _14524_a,jule::I32 _14534_r) {
	{
		if ((0LL <= _14534_r) && (_14534_r < 55296LL) || (57344LL <= _14534_r) && (_14534_r < 65536LL)) {
			_case_begin_4788703216:;
			{
				return jule::append(_14524_a,jule::Slice<jule::U16>({static_cast<jule::U16>(_14534_r)}));
			}
		}
		else if ((65536LL <= _14534_r) && (_14534_r <= 1114111LL)) {
			_case_begin_4788705888:;
			{
				jule::I32 _15214_r1;
				jule::I32 _15218_r2;
				std::tie(_15214_r1,_15218_r2) = _1e8eee29a_encode_rune(_14534_r);
				return jule::append(_14524_a,jule::Slice<jule::U16>({static_cast<jule::U16>(_15214_r1),static_cast<jule::U16>(_15218_r2)}));
			}
		}
		_match_end_4788705488:;
	}
	return jule::append(_14524_a,jule::Slice<jule::U16>({65533LLU}));
}



inline jule::Slice<jule::U16> _1e8ed85a3_utf16_from_str(jule::Str _1923_s) {
	
	jule::Slice<jule::I32> _259_runes = static_cast<jule::Slice<jule::I32>>(_1923_s);
	jule::Slice<jule::U16> _2613_buff = jule::Slice<jule::U16>::alloc(0LL,static_cast<jule::I64>(_259_runes.len()));
	{
		auto &expr = _259_runes;
		auto it = expr.begin();
		_iter_begin_4788754464:;
		if (it != expr.end()) {
			jule::I32 &_1e8ed85a3_r = *it;
			{
				if (_1e8ed85a3_r == 0LL) {
					goto _iter_end_4788754464;
				}
				_2613_buff=_1e8eee29a_append_rune(_2613_buff,_1e8ed85a3_r);
			}
			_iter_next_4788754464:;
			++it;
			goto _iter_begin_4788754464;
		}
		_iter_end_4788754464:;
	}
	return _1e8eee29a_append_rune(_2613_buff,0LL);
}



inline jule::Str _1e8ed85a3_utf16_to_str(jule::Slice<jule::U16> _3921_s) {
	if (_3921_s == nullptr) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _4313_code_page = _3921_s;
	{
		auto &expr = _3921_s;
		auto it = expr.begin();
		_iter_begin_4788759360:;
		if (it != expr.end()) {
			jule::Int _1e8ed85a3_i = it - expr.begin();
			jule::U16 &_1e8ed85a3_v = *it;
			{
				if (_1e8ed85a3_v == 0LL) {
					_4313_code_page=_4313_code_page.slice(0LL,_1e8ed85a3_i);
					goto _iter_end_4788759360;
				}
			}
			_iter_next_4788759360:;
			++it;
			_1e8ed85a3_i++;
			goto _iter_begin_4788759360;
		}
		_iter_end_4788759360:;
	}
	return static_cast<jule::Str>(_1e8eee29a_decode(_4313_code_page));
}



inline jule::Str _1e8ed85a3_u16_ptr_to_str(jule::U16* _5530_s) {
	if (_5530_s == nullptr) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _6013_code_page = nullptr;
	jule::Int _6113_i = 0LL;
	for (; ; (_6113_i)++) {
		{
			jule::U16 _6313_r = _5530_s[_6113_i];
			if (_6313_r == 0LL) {
				return static_cast<jule::Str>(_1e8eee29a_decode(_6013_code_page));
			}
			_6013_code_page.push(_6313_r);
		}
	_iter_next_4788761536:;
	}
	_iter_end_4788761536:;
	return jule::Str();
}



inline jule::Int _1e8e5b03c_get_last_errno(void) {
	return errno;
}



inline jule::Uintptr _1e8e5d46d_get_std_handle(jule::Uintptr _5523_stdh) {
	return ((jule::Uintptr)(GetStdHandle(_5523_stdh)));
}



inline jule::Int _1e8e5d46d_wstat(jule::U16* _5921_path,struct stat* _5937_stat) {
	return static_cast<jule::Int>(wstat(((wchar_t*)(_5921_path)),_5937_stat));
}



inline jule::Int _1e8e5d46d__wopen(jule::U16* _6422_path,jule::Int _6434_flag,jule::Int _6445_mode) {
	return static_cast<jule::Int>(_wopen(((wchar_t*)((&(_6422_path[0LL])))),_6434_flag,_6445_mode));
}



inline jule::U32 _1e8e5d46d_get_last_error(void) {
	return static_cast<jule::U32>(GetLastError());
}



inline jule::U32 _1e8e5d46d_get_current_directory(jule::U32 _7337_bufflen,jule::U16* _7355_buff) {
	return static_cast<jule::U32>(GetCurrentDirectoryW(_7337_bufflen,((wchar_t*)(_7355_buff))));
}



inline jule::Bool _1e8e5d46d_delete_file(jule::U16* _8427_path) {
	return DeleteFileW(((wchar_t*)(_8427_path)));
}



inline jule::Bool _1e8e5d46d_create_directory(jule::U16* _8932_path) {
	return CreateDirectoryW(((wchar_t*)(_8932_path)),nullptr);
}



inline jule::Bool _1e8e5d46d_remove_directory(jule::U16* _9432_path) {
	return RemoveDirectoryW(((wchar_t*)(_9432_path)));
}



inline _WDIR* _1e8e5d46d__wopendir(jule::U16* _9925_path) {
	return _wopendir(((wchar_t*)(_9925_path)));
}



inline struct _wdirent* _1e8e5d46d__wreaddir(_WDIR* _10229_dir) {
	return _wreaddir(_10229_dir);
}



inline jule::Int _1e8e5d46d__wclosedir(_WDIR* _10530_dir) {
	return static_cast<jule::Int>(_wclosedir(_10530_dir));
}



inline jule::U32 _1e8e5d46d_get_full_path_name(jule::U16* _10834_path,jule::U32 _10846_bufflen,jule::U16* _1095_buff,jule::U16** _10917_fname) {
	return static_cast<jule::U32>(GetFullPathNameW(((wchar_t*)(_10834_path)),_10846_bufflen,((wchar_t*)(_1095_buff)),((wchar_t**)(_10917_fname))));
}



inline jule::Bool _1e8e5d46d_get_console_mode(jule::Uintptr _11425_handle,jule::Int& _11446_mode) {
	return GetConsoleMode(((HANDLE)(_11425_handle)),((DWORD*)((&(_11446_mode)))));
}



inline jule::Bool _1e8e5d46d_set_console_mode(jule::Uintptr _11925_handle,jule::Int _11941_mode) {
	return SetConsoleMode(((HANDLE)(_11925_handle)),static_cast<DWORD>(_11941_mode));
}



inline jule::Bool _1e8e5d46d_write_console(jule::Uintptr _12429_handle,jule::U16* _12445_buffer,jule::Int _12459_to_write,jule::Int& _12510_written,void* _12524_reserved) {
	return WriteConsoleW(((HANDLE)(_12429_handle)),((void*)(_12445_buffer)),static_cast<DWORD>(_12459_to_write),((DWORD*)(_12510_written)),_12524_reserved);
}



inline jule::Bool _1e8e5d46d_read_console(jule::Uintptr _13128_handle,jule::U16* _13148_buffer,jule::Int _13162_to_read,jule::Int& _13210_readed,void* _13223_input_control) {
	return ReadConsoleW(((HANDLE)(_13128_handle)),((void*)(_13148_buffer)),static_cast<DWORD>(_13162_to_read),((DWORD*)((&(_13210_readed)))),_13223_input_control);
}



inline jule::I64 _1e8e79de6_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _1e8e79de6_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _1e8e79de6_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _1e8e79de6_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _1e8e79de6_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline std::tuple<jule::I32,jule::Int> _1e8e90769_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::Int _18242_size = jule::Int();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _1e8e90769_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = static_cast<jule::U8>((_1879_x << 31LL) >> 31LL);
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_1e8e90769_accept_range _1969_accept = _1e8e90769_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline jule::Int _1e8e90769_rune_len(jule::I32 _35217_r) {
	{
		if (_35217_r < 0LL) {
			_case_begin_4788834752:;
			{
				return -1LL;
			}
		}
		else if (_35217_r <= 127LLU) {
			_case_begin_4788834992:;
			{
				return 1LL;
			}
		}
		else if (_35217_r <= 2047LLU) {
			_case_begin_4788835088:;
			{
				return 2LL;
			}
		}
		else if ((55296LL <= _35217_r) && (_35217_r <= 57343LL)) {
			_case_begin_4788835184:;
			{
				return -1LL;
			}
		}
		else if (_35217_r <= 65535LLU) {
			_case_begin_4788834272:;
			{
				return 3LL;
			}
		}
		else if (_35217_r <= 1114111LL) {
			_case_begin_4788834368:;
			{
				return 4LL;
			}
		}
		else {
			_case_begin_4788831168:;
			{
				return -1LL;
			}
		}
		_match_end_4788827168:;
	}
}



inline jule::Int _1e8e90769_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		if (_3699_i <= 127LLU) {
			_case_begin_4788843216:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(_36739_r);
				return 1LL;
			}
		}
		else if (_3699_i <= 2047LLU) {
			_case_begin_4788865872:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(192LL | static_cast<jule::U8>(_36739_r >> 6LL));
				_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
				return 2LL;
			}
		}
		else if (_3699_i > 1114111LL || (55296LL <= _3699_i) && (_3699_i <= 57343LL)) {
			_case_begin_4788865536:;
			{
				_36739_r=65533LL;
				goto _case_begin_4788865632;
			}
		}
		else if (_3699_i <= 65535LLU) {
			_case_begin_4788865632:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(224LL | static_cast<jule::U8>(_36739_r >> 12LL));
				_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
				_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
				return 3LL;
			}
		}
		else {
			_case_begin_4788842464:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(240LL | static_cast<jule::U8>(_36739_r >> 18LL));
				_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 12LL) & 63LL));
				_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
				_36724_p[3LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
				return 4LL;
			}
		}
		_match_end_4788842288:;
	}
}



inline jule::Slice<jule::U8> _1e8e90769_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (_39835_r <= 127LLU) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(_39835_r)}));
	}
	return _1e8e90769_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _1e8e90769_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		if (_4079_i <= 2047LLU) {
			_case_begin_4788888080:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else if (_4079_i > 1114111LL || (55296LL <= _4079_i) && (_4079_i <= 57343LL)) {
			_case_begin_4788887744:;
			{
				_40545_r=65533LL;
				goto _case_begin_4788887840;
			}
		}
		else if (_4079_i <= 65535LLU) {
			_case_begin_4788887840:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else {
			_case_begin_4788881712:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		_match_end_4788881600:;
	}
}



inline jule::Int _1e91124bd_get_last_os_error_windows(void) {
	jule::U32 _169_err = _1e8e5d46d_get_last_error();
	{
		auto &_match_expr{ _169_err };
		if (_match_expr == 5LL) {
			_case_begin_4789005696:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_4789005248:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_4789005344:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 123LL) {
			_case_begin_4789005440:;
			{
				return 4LLU;
			}
		}
		else {
			_case_begin_4789003568:;
			{
				return 0LLU;
			}
		}
		_match_end_4788994608:;
	}
}



inline jule::Slice<jule::Str> _1e911755b_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _1e911755b_working_dir(void) {
	return jule::Exceptional(jule::Any(),({
		auto except = _1e91175d3___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _1e91175d3___getwd(void) {
	jule::Array<jule::U16,261> _1513_buff = jule::Array<jule::U16,261>();
	jule::U32 _169_n = _1e8e5d46d_get_current_directory(261LLU,(&(_1513_buff.__at(0LL))));
	if (_169_n == 0LL) {
		return jule::Exceptional<jule::Str>(_1e91124bd_get_last_os_error_windows());
	}
	return jule::Exceptional(jule::Any(),_1e8ed85a3_u16_ptr_to_str((&(_1513_buff.__at(0LL)))));
}



inline jule::Bool _1e9030991_is_path_sep(jule::U8 _4820_c) {
	return (_4820_c == 92LL) || (_4820_c == '/');
}



inline jule::Bool _1e9030991_is_slash(jule::U8 _5213_c) {
	return (_5213_c == '\\') || (_5213_c == '/');
}



inline jule::U8 _1e9030991_to_upper(jule::U8 _5413_c) {
	if (('a' <= _5413_c) && (_5413_c <= 'z')) {
		return static_cast<jule::U8>(_5413_c - 32LL);
	}
	return _5413_c;
}



inline jule::Int _1e9030991_volume_name_len(jule::Str _8220_path) {
	if (_8220_path.len() < 2LL) {
		return 0LL;
	}
	jule::U8 _879_c = _8220_path[0LL];
	if ((_8220_path[1LL] == ':') && ((('a' <= _879_c) && (_879_c <= 'z')) || (('A' <= _879_c) && (_879_c <= 'Z')))) {
		return 2LL;
	}
	if ((!(_1e9030991_is_slash(_8220_path[0LL]))) || (!(_1e9030991_is_slash(_8220_path[1LL])))) {
		return 0LL;
	}
	jule::Str _9510_p1;
	jule::Str _9518_rest;
	std::tie(_9510_p1,_9518_rest,std::ignore) = _1e9030991_cut_path(_8220_path.slice(2LL));
	jule::Str _9613_p2 = jule::Str();
	jule::Bool _9713_ok = false;
	std::tie(_9613_p2,_9518_rest,_9713_ok) = _1e9030991_cut_path(_9518_rest);
	if ((!(_9713_ok))) {
		return static_cast<jule::I64>(_8220_path.len());
	}
	if ((_9510_p1 != jule::Str(".", 1)) && (_9510_p1 != jule::Str("?", 1))) {
		return static_cast<jule::I64>((_8220_path.len() - _9518_rest.len()) - 1LL);
	}
	if ((((_9613_p2.len() == 3LL) && (_1e9030991_to_upper(_9613_p2[0LL]) == 'U')) && (_1e9030991_to_upper(_9613_p2[1LL]) == 'N')) && (_1e9030991_to_upper(_9613_p2[2LL]) == 'C')) {
		std::tie(std::ignore,_9518_rest,std::ignore) = _1e9030991_cut_path(_9518_rest);
		std::tie(std::ignore,_9518_rest,_9713_ok) = _1e9030991_cut_path(_9518_rest);
		if ((!(_9713_ok))) {
			return static_cast<jule::I64>(_8220_path.len());
		}
	}
	return static_cast<jule::I64>((_8220_path.len() - _9518_rest.len()) - 1LL);
}



inline std::tuple<jule::Str,jule::Str,jule::Bool> _1e9030991_cut_path(jule::Str _11913_path) {
	jule::Str _11926_before = jule::Str();
	jule::Str _11939_after = jule::Str();
	jule::Bool _11951_found = jule::Bool();
	{
		auto &expr = _11913_path;
		auto it = expr.begin();
		_iter_begin_4789085248:;
		if (it != expr.end()) {
			jule::Int _1e9030991_i = it - expr.begin();
			{
				if (_1e9030991_is_slash(_11913_path.__at(_1e9030991_i))) {
					_11926_before = _11913_path.slice(0LL,_1e9030991_i);
					_11939_after = _11913_path.slice(_1e9030991_i + 1LL);
					_11951_found = true;
					return std::make_tuple(_11926_before,_11939_after,_11951_found);
				}
			}
			_iter_next_4789085248:;
			++it;
			_1e9030991_i++;
			goto _iter_begin_4789085248;
		}
		_iter_end_4789085248:;
	}
	_11926_before = _11913_path;
	_11939_after = jule::Str();
	_11951_found = false;
	return std::make_tuple(_11926_before,_11939_after,_11951_found);
}



inline std::tuple<jule::Str,jule::Bool> _1e9030991_full_path(jule::Str _12814_name) {
	jule::Str _12827_path = jule::Str();
	jule::Bool _12838_ok = jule::Bool();
	jule::Slice<jule::U16> _1299_utf16_name = _1e8ed85a3_utf16_from_str(_12814_name);
	jule::U16* _1309_p = (&(_1299_utf16_name[0LL]));
	jule::U32 _13113_n = 100LLU;
	for (;;) {
		{
			jule::Slice<jule::U16> _13317_buff = jule::Slice<jule::U16>::alloc(static_cast<jule::Int>(_13113_n));
			_13113_n=static_cast<jule::U32>(static_cast<jule::U32>(_1e8e5d46d_get_full_path_name(_1309_p,static_cast<jule::U32>(_13317_buff.len()),(&(_13317_buff[0LL])),nullptr)));
			if (_13113_n == 0LL) {
				_12827_path = jule::Str();
				_12838_ok = false;
				return std::make_tuple(_12827_path,_12838_ok);
			}
			if (_13113_n <= static_cast<jule::U32>(_13317_buff.len())) {
				_12827_path = _1e8ed85a3_utf16_to_str(_13317_buff.slice(0LL,static_cast<jule::Int>(_13113_n)));
				_12838_ok = true;
				return std::make_tuple(_12827_path,_12838_ok);
			}
		}
	_iter_next_4789091696:;
	}
	_iter_end_4789091696:;
	_12827_path = jule::Str();
	_12838_ok = false;
	return std::make_tuple(_12827_path,_12838_ok);
}



inline std::tuple<jule::Str,jule::Bool> _1e9030991___abs(jule::Str _14514_path) {
	jule::Bool _14532_ok = jule::Bool();
	if (_14514_path == jule::Str()) {
		_14514_path=jule::Str(".", 1);
	}
	std::tie(_14514_path,_14532_ok) = _1e9030991_full_path(_14514_path);
	if ((!(_14532_ok))) {
		_14532_ok = false;
		return std::make_tuple(jule::Str(),_14532_ok);
	}
	_14532_ok = true;
	return std::make_tuple(_1e904e87d_clean(_14514_path),_14532_ok);
}



inline jule::Str _1e9030991___join(jule::Slice<jule::Str> _15915_elem) {
	jule::Str _16013_s = jule::Str();
	jule::U8 _16113_last_char = 0LLU;
	{
		auto &expr = _15915_elem;
		auto it = expr.begin();
		_iter_begin_4789111776:;
		if (it != expr.end()) {
			jule::Str _1e9030991_e = *it;
			{
				{
					if (_16013_s.len() == 0LL) {
						_case_begin_4789114864:;
					}
					else if (_1e9030991_is_slash(_16113_last_char)) {
						_case_begin_4789113968:;
						{
							while ((_1e9030991_e.len() > 0LL) && _1e9030991_is_slash(_1e9030991_e[0LL])) {
								{
									_1e9030991_e=_1e9030991_e.slice(1LL);
								}
							_iter_next_4789113664:;
							}
							_iter_end_4789113664:;
						}
					}
					else if (_16113_last_char == ':') {
						_case_begin_4789114368:;
					}
					else {
						_case_begin_4789113168:;
						{
							_16013_s+=jule::Str("\\", 1);
							_16113_last_char='\\';
						}
					}
					_match_end_4789112992:;
				}
				if (_1e9030991_e.len() > 0LL) {
					_16013_s+=_1e9030991_e;
					_16113_last_char=_1e9030991_e[_1e9030991_e.len() - 1LL];
				}
			}
			_iter_next_4789111776:;
			++it;
			goto _iter_begin_4789111776;
		}
		_iter_end_4789111776:;
	}
	if (_16013_s.len() == 0LL) {
		return jule::Str();
	}
	return _1e904e87d_clean(_16013_s);
}



inline jule::Str _1e904e87d_clean(jule::Str _10718_path) {
	jule::Str _1089_original_path = _10718_path;
	jule::Int _1099_vol_len = _1e9030991_volume_name_len(_10718_path);
	_10718_path=_10718_path.slice(_1099_vol_len);
	if (_10718_path == jule::Str()) {
		if (((_1099_vol_len > 1LL) && _1e9030991_is_path_sep(_1089_original_path[0LL])) && _1e9030991_is_path_sep(_1089_original_path[1LL])) {
			return _1e904e87d_from_slash(_1089_original_path);
		}
		return _1089_original_path + jule::Str(".", 1);
	}
	jule::Bool _1189_rooted = _1e9030991_is_path_sep(_10718_path[0LL]);
	jule::I64 _1259_n = _10718_path.len();
	_1e904e87d_LazyBuff _12613_out = _1e904e87d_LazyBuff(_10718_path,jule::Slice<jule::U8>(),jule::Int(),_1089_original_path,_1099_vol_len);
	jule::Int _13114_r = 0LL;
	jule::Int _13121_dotdot = 0LL;
	std::tie(_13114_r,_13121_dotdot) = std::make_tuple(0LL,0LL);
	if (_1189_rooted) {
		_12613_out._method_append(92LLU);
		std::tie(_13114_r,_13121_dotdot) = std::make_tuple(1LL,1LL);
	}
	while (_13114_r < _1259_n) {
		{
			{
				if (_1e9030991_is_path_sep(_10718_path[_13114_r])) {
					_case_begin_4789144704:;
					{
						(_13114_r)++;
					}
				}
				else if ((_10718_path[_13114_r] == '.') && (((_13114_r + 1LL) == _1259_n) || _1e9030991_is_path_sep(_10718_path[_13114_r + 1LL]))) {
					_case_begin_4789150048:;
					{
						(_13114_r)++;
					}
				}
				else if (((_10718_path[_13114_r] == '.') && (_10718_path[_13114_r + 1LL] == '.')) && (((_13114_r + 2LL) == _1259_n) || _1e9030991_is_path_sep(_10718_path[_13114_r + 2LL]))) {
					_case_begin_4789148464:;
					{
						_13114_r+=2LL;
						{
							if (_12613_out._field_w > _13121_dotdot) {
								_case_begin_4789156672:;
								{
									(_12613_out._field_w)--;
									while ((_12613_out._field_w > _13121_dotdot) && (!(_1e9030991_is_path_sep(static_cast<jule::U8>(_12613_out._method_index(_12613_out._field_w)))))) {
										{
											(_12613_out._field_w)--;
										}
									_iter_next_4789157200:;
									}
									_iter_end_4789157200:;
								}
							}
							else if ((!(_1189_rooted))) {
								_case_begin_4789156768:;
								{
									if (_12613_out._field_w > 0LL) {
										_12613_out._method_append(92LLU);
									}
									_12613_out._method_append('.');
									_12613_out._method_append('.');
									_13121_dotdot=_12613_out._field_w;
								}
							}
							_match_end_4789156592:;
						}
					}
				}
				else {
					_case_begin_4789138704:;
					{
						if ((_1189_rooted && (_12613_out._field_w != 1LL)) || ((!(_1189_rooted)) && (_12613_out._field_w != 0LL))) {
							_12613_out._method_append(92LLU);
						}
						if (((true && (_12613_out._field_w == 0LL)) && (_12613_out._field_vol_len == 0LL)) && (_13114_r != 0LL)) {
							jule::Int _17425_i = _13114_r;
							for (; (_17425_i < _1259_n) && (!(_1e9030991_is_path_sep(_10718_path[_17425_i]))); (_17425_i)++) {
								{
									if (_10718_path[_17425_i] == ':') {
										_12613_out._method_append('.');
										_12613_out._method_append(92LLU);
										goto _iter_end_4789141824;
									}
								}
							_iter_next_4789141824:;
							}
							_iter_end_4789141824:;
						}
						for (; (_13114_r < _1259_n) && (!(_1e9030991_is_path_sep(_10718_path[_13114_r]))); (_13114_r)++) {
							{
								_12613_out._method_append(_10718_path[_13114_r]);
							}
						_iter_next_4789142384:;
						}
						_iter_end_4789142384:;
					}
				}
				_match_end_4789138528:;
			}
		}
	_iter_next_4789137984:;
	}
	_iter_end_4789137984:;
	if (_12613_out._field_w == 0LL) {
		_12613_out._method_append('.');
	}
	return _1e904e87d_from_slash(_12613_out._method_string());
}



inline jule::Str _1e904e87d_from_slash(jule::Str _21019_path) {
	if (false) {
		return _21019_path;
	}
	return _21019_path.replace(jule::Str("/", 1),static_cast<jule::Str>(92LL),-1LL);
}



inline jule::Str _1e904e87d_join(jule::Slice<jule::Str> _22413_elem) {
	return _1e9030991___join(_22413_elem);
}



inline jule::Str _1e904e87d_ext(jule::Str _22912_path) {
	jule::I64 _23013_i = _22912_path.len() - 1LL;
	for (; (_23013_i >= 0LL) && (!(_1e9030991_is_path_sep(_22912_path[_23013_i]))); (_23013_i)--) {
		{
			if (_22912_path[_23013_i] == '.') {
				return _22912_path.slice(_23013_i);
			}
		}
	_iter_next_4789174848:;
	}
	_iter_end_4789174848:;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _1e904e87d_abs(jule::Str _24412_path) {
	jule::Str _24510_abs_path;
	jule::Bool _24520_ok;
	std::tie(_24510_abs_path,_24520_ok) = _1e9030991___abs(_24412_path);
	return std::make_tuple(_24510_abs_path,_24520_ok);
}



inline jule::Str _1e904e87d_base(jule::Str _25317_path) {
	if (_25317_path == jule::Str()) {
		return jule::Str(".", 1);
	}
	while ((_25317_path.len() > 0LL) && _1e9030991_is_path_sep(_25317_path[_25317_path.len() - 1LL])) {
		{
			_25317_path=_25317_path.slice(0LL,_25317_path.len() - 1LL);
		}
	_iter_next_4789181888:;
	}
	_iter_end_4789181888:;
	_25317_path=_25317_path.slice(_1e904e87d_volume_name(_25317_path).len());
	jule::I64 _26413_i = _25317_path.len() - 1LL;
	while ((_26413_i >= 0LL) && (!(_1e9030991_is_path_sep(_25317_path[_26413_i])))) {
		{
			(_26413_i)--;
		}
	_iter_next_4789185776:;
	}
	_iter_end_4789185776:;
	if (_26413_i >= 0LL) {
		_25317_path=_25317_path.slice(_26413_i + 1LL);
	}
	if (_25317_path == jule::Str()) {
		return static_cast<jule::Str>(92LL);
	}
	return _25317_path;
}



inline jule::Str _1e904e87d_dir(jule::Str _28412_path) {
	jule::Str _2859_vol = _1e904e87d_volume_name(_28412_path);
	jule::I64 _28613_i = _28412_path.len() - 1LL;
	while ((_28613_i >= _2859_vol.len()) && (!(_1e9030991_is_path_sep(_28412_path[_28613_i])))) {
		{
			(_28613_i)--;
		}
	_iter_next_4789187728:;
	}
	_iter_end_4789187728:;
	jule::Str _2909_dir = _1e904e87d_clean(_28412_path.slice(_2859_vol.len(),_28613_i + 1LL));
	if ((_2909_dir == jule::Str(".", 1)) && (_2859_vol.len() > 2LL)) {
		return _2859_vol;
	}
	return _2859_vol + _2909_dir;
}



inline jule::Str _1e904e87d_volume_name(jule::Str _30220_path) {
	return _1e904e87d_from_slash(_30220_path.slice(0LL,_1e9030991_volume_name_len(_30220_path)));
}



inline jule::Int _1e8da4bde_get_last_fs_error(void) {
	jule::Int _729_err = _1e8e5b03c_get_last_errno();
	{
		auto &_match_expr{ _729_err };
		if (_match_expr == 13LL) {
			_case_begin_4789239568:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_4789239664:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_4789239200:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_4789239296:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4789239392:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_4789239776:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 132LL) {
			_case_begin_4789239872:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_4789239968:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_4789238688:;
			{
				return 8LLU;
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_4789238784:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_4789238880:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_4789238976:;
			{
				return 11LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_4789240656:;
			{
				return 12LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_4789240752:;
			{
				return 13LLU;
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_4789240864:;
			{
				return 14LLU;
			}
		}
		else if (_match_expr == 124LL) {
			_case_begin_4789240976:;
			{
				return 15LLU;
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_4789241088:;
			{
				return 16LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_4789241200:;
			{
				return 17LLU;
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_4789241312:;
			{
				return 18LLU;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_4789241424:;
			{
				return 19LLU;
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_4789241536:;
			{
				return 20LLU;
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_4789241648:;
			{
				return 21LLU;
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_4789241760:;
			{
				return 22LLU;
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_4789241872:;
			{
				return 23LLU;
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_4789241984:;
			{
				return 24LLU;
			}
		}
		else if (_match_expr == 119LL) {
			_case_begin_4789242096:;
			{
				return 25LLU;
			}
		}
		else if (_match_expr == 104LL) {
			_case_begin_4789242208:;
			{
				return 26LLU;
			}
		}
		else if (_match_expr == 41LL) {
			_case_begin_4789242320:;
			{
				return 27LLU;
			}
		}
		else {
			_case_begin_4789237344:;
			{
				return 1LLU;
			}
		}
		_match_end_4789238112:;
	}
}



inline jule::Bool _1e8e3030d_is_console_handle(jule::Uintptr _11822_handle) {
	return ((_11822_handle == _1e8e5d46d_STDIN) || (_11822_handle == _1e8e5d46d_STDOUT)) || (_11822_handle == _1e8e5d46d_STDERR);
}



inline jule::Int _1e9c9a60b_get_last_process_error(void) {
	jule::Int _419_err = _1e8e5b03c_get_last_errno();
	{
		auto &_match_expr{ _419_err };
		if (_match_expr == 13LL) {
			_case_begin_4789399856:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_4789399568:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_4789399664:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4789398992:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_4789399088:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_4789399184:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_4789398480:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_4789398576:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_4789398672:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 121LL) {
			_case_begin_4789398768:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_4789400000:;
			{
				return 11LLU;
			}
		}
		else {
			_case_begin_4789397072:;
			{
				return 0LLU;
			}
		}
		_match_end_4789397904:;
	}
}



inline void _1e9cbbc04_exit(jule::Int _1213_code) {
	_1e8e79de6_exit(_1213_code);
}



inline jule::Str _1e9cbbc04_executable(void) {
	return jule::executable();
}



inline jule::Bool _1e8e27beb_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[_2627_p.len() - 1LL] == '>');
}



inline jule::Bool _1e8e27beb_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _1e8e27beb_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_4789580752:;
		if (it != expr.end()) {
			jule::Str &_1e8e27beb_valid_ext = *it;
			{
				if (_3128_ext == _1e8e27beb_valid_ext) {
					return true;
				}
			}
			_iter_next_4789580752:;
			++it;
			goto _iter_begin_4789580752;
		}
		_iter_end_4789580752:;
	}
	return false;
}



inline jule::Bool _1e8e27beb_is_valid_cpp_ext(jule::Str _4225_ext) {
	if (_4225_ext == jule::Str(".c", 2)) {
		return true;
	}
	{
		auto &expr = _1e8e27beb_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_4789581584:;
		if (it != expr.end()) {
			jule::Str &_1e8e27beb_e = *it;
			{
				if (_4225_ext == _1e8e27beb_e) {
					return true;
				}
			}
			_iter_next_4789581584:;
			++it;
			goto _iter_begin_4789581584;
		}
		_iter_end_4789581584:;
	}
	{
		auto &expr = _1e8e27beb_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_4789579536:;
		if (it != expr.end()) {
			jule::Str &_1e8e27beb_e = *it;
			{
				if (_4225_ext == _1e8e27beb_e) {
					return true;
				}
			}
			_iter_next_4789579536:;
			++it;
			goto _iter_begin_4789579536;
		}
		_iter_end_4789579536:;
	}
	return false;
}



inline jule::Str _1e8ea7cc0_logf(jule::Str _28213_fmt,jule::Slice<jule::Any> _28226_args) {
	return _1e8ea7cc0_apply_fmt(_28213_fmt,_28226_args);
}



inline jule::Str _1e8ea7cc0_arg_to_str(jule::Any _28615_arg) {
	{
		auto &_match_expr{ _28615_arg };
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_4789590272:;
			{
				return _28615_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_4789590528:;
			{
				return static_cast<jule::Str>(_28615_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_4789590624:;
			{
				return static_cast<jule::Str>(_28615_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_4789588208:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_4789588576:;
	}
}



inline jule::Int _1e8ea7cc0_find_next_fmt(jule::Str _29518_fmt) {
	{
		auto &expr = _29518_fmt;
		auto it = expr.begin();
		_iter_begin_4789593520:;
		if (it != expr.end()) {
			jule::Int _1e8ea7cc0_i = it - expr.begin();
			jule::U8 &_1e8ea7cc0_b = *it;
			{
				if (_1e8ea7cc0_b == '@') {
					return _1e8ea7cc0_i;
				}
			}
			_iter_next_4789593520:;
			++it;
			_1e8ea7cc0_i++;
			goto _iter_begin_4789593520;
		}
		_iter_end_4789593520:;
	}
	return -1LL;
}



inline jule::Str _1e8ea7cc0_apply_fmt(jule::Str _30418_fmt,jule::Slice<jule::Any> _30428_args) {
	jule::Str _30513_s = jule::Str();
	{
		auto &expr = _30428_args;
		auto it = expr.begin();
		_iter_begin_4789597872:;
		if (it != expr.end()) {
			jule::Any &_1e8ea7cc0_arg = *it;
			{
				jule::Int _30813_i = _1e8ea7cc0_find_next_fmt(_30418_fmt);
				if (_30813_i == -1LL) {
					goto _iter_end_4789597872;
				}
				_30513_s+=_30418_fmt.slice(0LL,_30813_i);
				_30513_s+=_1e8ea7cc0_arg_to_str(_1e8ea7cc0_arg);
				_30418_fmt=_30418_fmt.slice(_30813_i + 1LL);
			}
			_iter_next_4789597872:;
			++it;
			goto _iter_begin_4789597872;
		}
		_iter_end_4789597872:;
	}
	_30513_s+=_30418_fmt;
	return _30513_s;
}



inline jule::Bool _1e902b9c0_is_top_directive(jule::Str _2825_directive) {
	return (_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5));
}



inline jule::Bool _1e9c67d6a_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _1e9c67d6a_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _1e9c67d6a_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _1e9c67d6a_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _1e9c67d6a_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _1e9c67d6a_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _1e9c67d6a_is_unix(jule::Str _6316_os) {
	return _1e9c67d6a_is_darwin(_6316_os) || _1e9c67d6a_is_linux(_6316_os);
}



inline jule::Bool _1e9c67d6a_is_32bit(jule::Str _6517_arch) {
	return _1e9c67d6a_is_i386(_6517_arch);
}



inline jule::Bool _1e9c67d6a_is_64bit(jule::Str _6717_arch) {
	return _1e9c67d6a_is_amd64(_6717_arch) || _1e9c67d6a_is_arm64(_6717_arch);
}



inline void _1e9c5edd9_exit_err(jule::Str _1613_msg) {
	
	jule::outln(_1613_msg);
	_1e9cbbc04_exit(1LL);
}



inline void _1e9c5edd9_init(void) {
	jule::Str _2413_path = _1e9cbbc04_executable();
	if (_2413_path == jule::Str()) {
		_1e9c5edd9_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _299_pwd = ({
		auto except = _1e911755b_working_dir();
		(except.ok()) ? (except.result) : ({{
			_1e9c5edd9_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
			return;
			return;
		} jule::Str();});
	});
	jule::Str _349_path_exec = _1e904e87d_dir(_2413_path);
	_2413_path=_1e904e87d_join(jule::Slice<jule::Str>({_349_path_exec,jule::Str("..", 2)}));
	{
		_1e9c5edd9_PATH_WD=_299_pwd;
		_1e9c5edd9_PATH_EXEC=_349_path_exec;
		_1e9c5edd9_PATH_STDLIB=_1e904e87d_join(jule::Slice<jule::Str>({_2413_path,jule::Str("std", 3)}));
		_1e9c5edd9_PATH_API=_1e904e87d_join(jule::Slice<jule::Str>({_1e9c5edd9_PATH_EXEC,jule::Str("..", 2)}));
		_1e9c5edd9_PATH_API=_1e904e87d_join(jule::Slice<jule::Str>({_1e9c5edd9_PATH_API,jule::Str("api", 3)}));
		_1e9c5edd9_PATH_API=_1e904e87d_join(jule::Slice<jule::Str>({_1e9c5edd9_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Int _1ea57e83a_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _1ea57e83a_len64(_6124_x));
}



inline jule::Int _1ea57e83a_trailing_zeros(jule::Uint _8323_x) {
	if (false) {
		return static_cast<jule::Int>(_1ea57e83a_trailing_zeros32(static_cast<jule::U32>(_8323_x)));
	}
	return static_cast<jule::Int>(_1ea57e83a_trailing_zeros64(static_cast<jule::U64>(_8323_x)));
}



inline jule::Int _1ea57e83a_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(_1ea57e83a_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]);
}



inline jule::Int _1ea57e83a_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(_1ea57e83a_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]);
}



inline jule::Int _1ea57e83a_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LLU) {
		_35218_x>>=16LLU;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LLU) {
		_35218_x>>=8LLU;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::Int>(_35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]));
	return _35228_n;
}



inline jule::Int _1ea57e83a_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LLU) {
		_36618_x>>=32LLU;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LLU) {
		_36618_x>>=16LLU;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LLU) {
		_36618_x>>=8LLU;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::Int>(_36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _1ea57e83a_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>((_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>(((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL);
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _1ea57e83a_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LLU;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LLU;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LLU;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _1ea0a58b1_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _1ea0a58b1_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _1ea0a58b1_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _1ea0a58b1_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline jule::F64 _1ea153376_nan(void) {
	return static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _1ea153376_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _1ea153376_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _1ea153376_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline jule::F64 _1ea20777c_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(static_cast<jule::U64>(_1ea0a58b1_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline std::tuple<jule::F64,jule::F64> _1ea253c6d_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	
	jule::F64 _469_abs_f = _1ea20777c_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if (_469_abs_f > 4503599627370496LL) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>(_469_abs_f + 4503599627370496LL);
		_4713_i-=4503599627370496LL;
		while (_4713_i > _469_abs_f) {
			{
				(_4713_i)--;
			}
		_iter_next_4790491216:;
		}
		_iter_end_4790491216:;
		if (_4413_f < 0LL) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::Str _1e9c59675_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_1e9c59675_generic_ftoa(nullptr,_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _1e9c59675_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	_1e9c59675_FloatInfo* _8413_flt = nullptr;
	{
		auto &_match_expr{ _8270_bit_size };
		if (_match_expr == 32LL) {
			_case_begin_4791842080:;
			{
				_8313_bits=static_cast<jule::U64>(_1ea0a58b1_f32_bits(static_cast<jule::F32>(_8234_val)));
				_8413_flt=(&(_1e9c59675_F32_INFO));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4791841584:;
			{
				_8313_bits=static_cast<jule::U64>(_1ea0a58b1_f64_bits(_8234_val));
				_8413_flt=(&(_1e9c59675_F64_INFO));
			}
		}
		else {
			_case_begin_4791839792:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_4791840240:;
	}
	jule::Bool _969_neg = (_8313_bits >> (_8413_flt->_field_expbits + _8413_flt->_field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> _8413_flt->_field_mantbits) & static_cast<jule::Int>((1LL << _8413_flt->_field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits) - 1LL);
	{
		auto &_match_expr{ _9713_exp };
		if (_match_expr == static_cast<jule::Int>((1LL << _8413_flt->_field_expbits) - 1LL)) {
			_case_begin_4791840320:;
			{
				jule::Str _10317_s = jule::Str();
				{
					if (_9813_mant != 0LL) {
						_case_begin_4791855040:;
						{
							_10317_s=jule::Str("nan", 3);
						}
					}
					else if (_969_neg) {
						_case_begin_4791855648:;
						{
							_10317_s=jule::Str("-inf", 4);
						}
					}
					else {
						_case_begin_4791854240:;
						{
							_10317_s=jule::Str("+inf", 4);
						}
					}
					_match_end_4791854128:;
				}
				return jule::append(_8221_dst,static_cast<jule::Slice<jule::U8>>(_10317_s));
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_4791851888:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_4791847040:;
			{
				_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << _8413_flt->_field_mantbits);
			}
		}
		_match_end_4791849632:;
	}
	_9713_exp+=_8413_flt->_field_bias;
	if (_8244_fmt == 'b') {
		return _1e9c59675_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _1e9c59675_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if (false) {
		return _1e9c59675_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	_1e9c59675_DecimalSlice _13413_digs = _1e9c59675_DecimalSlice();
	jule::Bool _13513_ok = false;
	jule::Bool _1379_shortest = _8259_prec < 0LL;
	if (_1379_shortest) {
		_13413_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_1e9e9b664_ryu_ftoa_shortest(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),(*(_8413_flt)));
		_13513_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4791868464:;
				{
					_8259_prec=static_cast<jule::Int>(_1e9c59675_max(static_cast<jule::Int>(_13413_digs._field_nd - 1LL),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_4791868016:;
				{
					_8259_prec=static_cast<jule::Int>(_1e9c59675_max(static_cast<jule::Int>(_13413_digs._field_nd - _13413_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4791868560:;
				{
					_8259_prec=_13413_digs._field_nd;
				}
			}
			_match_end_4791867760:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15417_digits = _8259_prec;
		{
			auto &_match_expr{ _8244_fmt };
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4791875040:;
				{
					(_15417_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4791875184:;
				{
					if (_8259_prec == 0LL) {
						_8259_prec=1LL;
					}
					_15417_digits=_8259_prec;
				}
			}
			else {
				_case_begin_4791873264:;
				{
					_15417_digits=1LL;
				}
			}
			_match_end_4791874288:;
		}
		if ((_8270_bit_size == 32LL) && (_15417_digits <= 9LL)) {
			_13413_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_1e9e9b664_ryu_ftoa_fixed32(_13413_digs,static_cast<jule::U32>(_9813_mant),static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),_15417_digits);
			_13513_ok=true;
		} else if (_15417_digits <= 18LL) {
			_13413_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_1e9e9b664_ryu_ftoa_fixed64(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>(_8413_flt->_field_mantbits))),_15417_digits);
			_13513_ok=true;
		}
	}
	if ((!(_13513_ok))) {
		return _1e9c59675_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _1e9c59675_fmt_digits(_8221_dst,_1379_shortest,_969_neg,_13413_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _1e9c59675_big_ftoa(jule::Slice<jule::U8> _18417_dst,jule::Int _18434_prec,jule::U8 _18445_fmt,jule::Bool _18456_neg,jule::U64 _18513_mant,jule::Int _18524_exp,_1e9c59675_FloatInfo& _18535_flt) {
	_1ea033a09_Decimal _18613_d = _1ea033a09_Decimal();
	_18613_d._method_assign(_18513_mant);
	_18613_d._method_shift(static_cast<jule::Int>(_18524_exp - static_cast<jule::Int>(_18535_flt._field_mantbits)));
	_1e9c59675_DecimalSlice _18913_digs = _1e9c59675_DecimalSlice();
	jule::Bool _1909_shortest = _18434_prec < 0LL;
	if (_1909_shortest) {
		_1e9c59675_round_shortest(_18613_d,_18513_mant,_18524_exp,_18535_flt);
		_18913_digs=_1e9c59675_DecimalSlice(_18613_d._field_d.slice(0LL),_18613_d._field_nd,_18613_d._field_dp,jule::Bool());
		{
			auto &_match_expr{ _18445_fmt };
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4791897120:;
				{
					_18434_prec=static_cast<jule::Int>(_18913_digs._field_nd - 1LL);
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_4791898016:;
				{
					_18434_prec=static_cast<jule::Int>(_1e9c59675_max(static_cast<jule::Int>(_18913_digs._field_nd - _18913_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4791898304:;
				{
					_18434_prec=_18913_digs._field_nd;
				}
			}
			_match_end_4791898208:;
		}
	} else {
		{
			auto &_match_expr{ _18445_fmt };
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4791902448:;
				{
					_18613_d._method_round(static_cast<jule::Int>(_18434_prec + 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_4791902544:;
				{
					_18613_d._method_round(static_cast<jule::Int>(_18613_d._field_dp + _18434_prec));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4791902640:;
				{
					if (_18434_prec == 0LL) {
						_18434_prec=1LL;
					}
					_18613_d._method_round(_18434_prec);
				}
			}
			_match_end_4791902320:;
		}
		_18913_digs=_1e9c59675_DecimalSlice(_18613_d._field_d.slice(0LL),_18613_d._field_nd,_18613_d._field_dp,jule::Bool());
	}
	return _1e9c59675_fmt_digits(_18417_dst,_1909_shortest,_18456_neg,_18913_digs,_18434_prec,_18445_fmt);
}



inline jule::Slice<jule::U8> _1e9c59675_fmt_digits(jule::Slice<jule::U8> _22119_dst,jule::Bool _22132_shortest,jule::Bool _22148_neg,_1e9c59675_DecimalSlice _22213_digs,jule::Int _22237_prec,jule::U8 _22248_fmt) {
	{
		auto &_match_expr{ _22248_fmt };
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_4791914160:;
			{
				return _1e9c59675_fmt_e(_22119_dst,_22148_neg,_22213_digs,_22237_prec,_22248_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_4791914256:;
			{
				return _1e9c59675_fmt_f(_22119_dst,_22148_neg,_22213_digs,_22237_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_4791914368:;
			{
				jule::Int _23017_eprec = _22237_prec;
				if ((_23017_eprec > _22213_digs._field_nd) && (_22213_digs._field_nd >= _22213_digs._field_dp)) {
					_23017_eprec=_22213_digs._field_nd;
				}
				if (_22132_shortest) {
					_23017_eprec=6LL;
				}
				jule::Int _24013_exp = _22213_digs._field_dp - 1LL;
				if ((_24013_exp < -4LL) || (_24013_exp >= _23017_eprec)) {
					if (_22237_prec > _22213_digs._field_nd) {
						_22237_prec=_22213_digs._field_nd;
					}
					return _1e9c59675_fmt_e(_22119_dst,_22148_neg,_22213_digs,static_cast<jule::Int>(_22237_prec - 1LL),static_cast<jule::U8>((_22248_fmt + 'e') - 'g'));
				}
				if (_22237_prec > _22213_digs._field_dp) {
					_22237_prec=_22213_digs._field_nd;
				}
				return _1e9c59675_fmt_f(_22119_dst,_22148_neg,_22213_digs,static_cast<jule::Int>(_1e9c59675_max(static_cast<jule::Int>(_22237_prec - _22213_digs._field_dp),0LL)));
			}
		}
		_match_end_4791914048:;
	}
	return jule::append(_22119_dst,jule::Slice<jule::U8>({'%',_22248_fmt}));
}



inline void _1e9c59675_round_shortest(_1ea033a09_Decimal& _25924_d,jule::U64 _25936_mant,jule::Int _25947_exp,_1e9c59675_FloatInfo& _25958_flt) {
	if (_25936_mant == 0LL) {
		_25924_d._field_nd=0LL;
		return;
	}
	jule::Int _2809_minexp = _25958_flt._field_bias + 1LL;
	if ((_25947_exp > _2809_minexp) && ((332LL * (_25924_d._field_dp - _25924_d._field_nd)) >= (100LL * (_25947_exp - static_cast<jule::Int>(_25958_flt._field_mantbits))))) {
		return;
	}
	_1ea033a09_Decimal _28913_upper = _1ea033a09_Decimal();
	_28913_upper._method_assign(static_cast<jule::U64>((_25936_mant * 2LL) + 1LL));
	_28913_upper._method_shift(static_cast<jule::Int>((_25947_exp - static_cast<jule::Int>(_25958_flt._field_mantbits)) - 1LL));
	jule::U64 _29913_mantlo = 0LLU;
	jule::Int _30013_explo = 0LL;
	if ((_25936_mant > (1LL << _25958_flt._field_mantbits)) || (_25947_exp == _2809_minexp)) {
		_29913_mantlo=static_cast<jule::U64>(_25936_mant - 1LL);
		_30013_explo=_25947_exp;
	} else {
		_29913_mantlo=static_cast<jule::U64>((_25936_mant * 2LL) - 1LL);
		_30013_explo=static_cast<jule::Int>(_25947_exp - 1LL);
	}
	_1ea033a09_Decimal _30813_lower = _1ea033a09_Decimal();
	_30813_lower._method_assign(static_cast<jule::U64>((_29913_mantlo * 2LL) + 1LL));
	_30813_lower._method_shift(static_cast<jule::Int>((_30013_explo - static_cast<jule::Int>(_25958_flt._field_mantbits)) - 1LL));
	jule::Bool _3159_inclusive = jule::unsafe_mod(_25936_mant,2LL) == 0LL;
	jule::U8 _32813_upperdelta = 0LLU;
	jule::Int _33213_ui = 0LL;
	for (; ; (_33213_ui)++) {
		{
			jule::Int _33713_mi = (_33213_ui - _28913_upper._field_dp) + _25924_d._field_dp;
			if (_33713_mi >= _25924_d._field_nd) {
				goto _iter_end_4791936848;
			}
			jule::Int _34113_li = (_33213_ui - _28913_upper._field_dp) + _30813_lower._field_dp;
			jule::U8 _34217_l = static_cast<jule::U8>(48LLU);
			if ((_34113_li >= 0LL) && (_34113_li < _30813_lower._field_nd)) {
				_34217_l=_30813_lower._field_d[_34113_li];
			}
			jule::U8 _34617_m = static_cast<jule::U8>(48LLU);
			if (_33713_mi >= 0LL) {
				_34617_m=_25924_d._field_d[_33713_mi];
			}
			jule::U8 _35017_u = static_cast<jule::U8>(48LLU);
			if (_33213_ui < _28913_upper._field_nd) {
				_35017_u=_28913_upper._field_d[_33213_ui];
			}
			jule::Bool _35813_okdown = (_34217_l != _34617_m) || (_3159_inclusive && ((_34113_li + 1LL) == _30813_lower._field_nd));
			{
				if ((_32813_upperdelta == 0LL) && ((_34617_m + 1LL) < _35017_u)) {
					_case_begin_4791959664:;
					{
						_32813_upperdelta=2LLU;
					}
				}
				else if ((_32813_upperdelta == 0LL) && (_34617_m != _35017_u)) {
					_case_begin_4791959760:;
					{
						_32813_upperdelta=1LLU;
					}
				}
				else if ((_32813_upperdelta == 1LL) && ((_34617_m != '9') || (_35017_u != '0'))) {
					_case_begin_4791959856:;
					{
						_32813_upperdelta=2LLU;
					}
				}
				_match_end_4791959296:;
			}
			jule::Bool _37913_okup = (_32813_upperdelta > 0LL) && ((_3159_inclusive || (_32813_upperdelta > 1LL)) || ((_33213_ui + 1LL) < _28913_upper._field_nd));
			{
				if (_35813_okdown && _37913_okup) {
					_case_begin_4791966128:;
					{
						_25924_d._method_round(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				else if (_35813_okdown) {
					_case_begin_4791966224:;
					{
						_25924_d._method_round_down(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				else if (_37913_okup) {
					_case_begin_4791966320:;
					{
						_25924_d._method_round_up(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				_match_end_4791951888:;
			}
		}
	_iter_next_4791936848:;
	}
	_iter_end_4791936848:;
}



inline jule::Slice<jule::U8> _1e9c59675_fmt_e(jule::Slice<jule::U8> _39814_dst,jule::Bool _39827_neg,_1e9c59675_DecimalSlice _39838_d,jule::Int _39855_prec,jule::U8 _39866_fmt) {
	if (_39827_neg) {
		_39814_dst.push('-');
	}
	jule::U8 _40513_ch = '0';
	if (_39838_d._field_nd != 0LL) {
		_40513_ch=_39838_d._field_d[0LL];
	}
	_39814_dst.push(_40513_ch);
	if (_39855_prec > 0LL) {
		_39814_dst.push('.');
		jule::Int _41417_i = 1LL;
		jule::Int _41513_m = _1e9c59675_min(_39838_d._field_nd,static_cast<jule::Int>(_39855_prec + 1LL));
		if (_41417_i < _41513_m) {
			_39814_dst=jule::append(_39814_dst,_39838_d._field_d.slice(_41417_i,_41513_m));
			_41417_i=_41513_m;
		}
		for (; _41417_i <= _39855_prec; (_41417_i)++) {
			{
				_39814_dst.push('0');
			}
		_iter_next_4791982384:;
		}
		_iter_end_4791982384:;
	}
	_39814_dst.push(_39866_fmt);
	jule::Int _42713_exp = _39838_d._field_dp - 1LL;
	if (_39838_d._field_nd == 0LL) {
		_42713_exp=0LL;
	}
	if (_42713_exp < 0LL) {
		_40513_ch='-';
		_42713_exp=static_cast<jule::Int>((-(_42713_exp)));
	} else {
		_40513_ch='+';
	}
	_39814_dst.push(_40513_ch);
	{
		if (_42713_exp < 10LL) {
			_case_begin_4791987184:;
			{
				_39814_dst.push('0');_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(_42713_exp) + '0'));
			}
		}
		else if (_42713_exp < 100LL) {
			_case_begin_4791990880:;
			{
				_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,10LL)) + '0'));_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_42713_exp,10LL)) + '0'));
			}
		}
		else {
			_case_begin_4791985616:;
			{
				_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,100LL)) + '0'));_39814_dst.push(static_cast<jule::U8>(jule::unsafe_mod(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,10LL)),10LL) + '0'));_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_42713_exp,10LL)) + '0'));
			}
		}
		_match_end_4791985536:;
	}
	return _39814_dst;
}



inline jule::Slice<jule::U8> _1e9c59675_fmt_f(jule::Slice<jule::U8> _45314_dst,jule::Bool _45327_neg,_1e9c59675_DecimalSlice _45338_d,jule::Int _45355_prec) {
	if (_45327_neg) {
		_45314_dst.push('-');
	}
	if (_45338_d._field_dp > 0LL) {
		jule::Int _46117_m = _1e9c59675_min(_45338_d._field_nd,_45338_d._field_dp);
		_45314_dst=jule::append(_45314_dst,_45338_d._field_d.slice(0LL,_46117_m));
		for (; _46117_m < _45338_d._field_dp; (_46117_m)++) {
			{
				_45314_dst.push('0');
			}
		_iter_next_4792013216:;
		}
		_iter_end_4792013216:;
	} else {
		_45314_dst.push('0');
	}
	if (_45355_prec > 0LL) {
		_45314_dst.push('.');
		jule::Int _47217_i = 0LL;
		for (; _47217_i < _45355_prec; (_47217_i)++) {
			{
				jule::U8 _47421_ch = static_cast<jule::U8>(48LLU);
				jule::Int _47517_j = _45338_d._field_dp + _47217_i;
				if ((0LL <= _47517_j) && (_47517_j < _45338_d._field_nd)) {
					_47421_ch=_45338_d._field_d[_47517_j];
				}
				_45314_dst.push(_47421_ch);
			}
		_iter_next_4792019008:;
		}
		_iter_end_4792019008:;
	}
	return _45314_dst;
}



inline jule::Slice<jule::U8> _1e9c59675_fmt_b(jule::Slice<jule::U8> _48614_dst,jule::Bool _48627_neg,jule::U64 _48638_mant,jule::Int _48653_exp,_1e9c59675_FloatInfo& _48664_flt) {
	if (_48627_neg) {
		_48614_dst.push('-');
	}
	std::tie(_48614_dst,std::ignore) = _1e9e077ac_fmt_bits(_48614_dst,_48638_mant,10LL,false,true);
	_48614_dst.push('p');
	_48653_exp-=static_cast<jule::Int>(_48664_flt._field_mantbits);
	if (_48653_exp >= 0LL) {
		_48614_dst.push('+');
	}
	std::tie(_48614_dst,std::ignore) = _1e9e077ac_fmt_bits(_48614_dst,static_cast<jule::U64>(_48653_exp),10LL,_48653_exp < 0LL,true);
	return _48614_dst;
}



inline jule::Slice<jule::U8> _1e9c59675_fmt_x(jule::Slice<jule::U8> _50814_dst,jule::Int _50827_prec,jule::U8 _50838_fmt,jule::Bool _50849_neg,jule::U64 _50913_mant,jule::Int _50928_exp,_1e9c59675_FloatInfo& _50939_flt) {
	if (_50913_mant == 0LL) {
		_50928_exp=0LL;
	}
	_50913_mant<<=static_cast<jule::Uint>(60LL - _50939_flt._field_mantbits);
	while ((_50913_mant != 0LL) && ((_50913_mant & 1152921504606846976LLU) == 0LL)) {
		{
			_50913_mant<<=1LLU;
			(_50928_exp)--;
		}
	_iter_next_4792034720:;
	}
	_iter_end_4792034720:;
	if ((_50827_prec >= 0LL) && (_50827_prec < 15LL)) {
		jule::Uint _52313_shift = static_cast<jule::Uint>(_50827_prec * 4LL);
		jule::U64 _52413_extra = (_50913_mant << _52313_shift) & 1152921504606846975LLU;
		_50913_mant>>=static_cast<jule::Uint>(60LL - _52313_shift);
		if ((_52413_extra | (_50913_mant & 1LL)) > 576460752303423488LLU) {
			(_50913_mant)++;
		}
		_50913_mant<<=static_cast<jule::Uint>(60LL - _52313_shift);
		if ((_50913_mant & 2305843009213693952LLU) != 0LL) {
			_50913_mant>>=1LLU;
			(_50928_exp)++;
		}
	}
	jule::Str _53713_hex = jule::Str("0123456789abcdef", 16);
	if (_50838_fmt == 'X') {
		_53713_hex=jule::Str("0123456789ABCDEF", 16);
	}
	if (_50849_neg) {
		_50814_dst.push('-');
	}
	_50814_dst.push('0');_50814_dst.push(_50838_fmt);_50814_dst.push(static_cast<jule::U8>('0' + static_cast<jule::U8>((_50913_mant >> 60LL) & 1LL)));
	_50913_mant<<=4LLU;
	if ((_50827_prec < 0LL) && (_50913_mant != 0LL)) {
		_50814_dst.push('.');
		while (_50913_mant != 0LL) {
			{
				_50814_dst.push(_53713_hex[static_cast<jule::Int>((_50913_mant >> 60LL) & 15LL)]);
				_50913_mant<<=4LLU;
			}
		_iter_next_4792043856:;
		}
		_iter_end_4792043856:;
	} else if (_50827_prec > 0LL) {
		_50814_dst.push('.');
		jule::Int _55817_i = 0LL;
		for (; _55817_i < _50827_prec; (_55817_i)++) {
			{
				_50814_dst.push(_53713_hex[static_cast<jule::Int>((_50913_mant >> 60LL) & 15LL)]);
				_50913_mant<<=4LLU;
			}
		_iter_next_4792047648:;
		}
		_iter_end_4792047648:;
	}
	jule::U8 _56613_ch = static_cast<jule::U8>(80LLU);
	if (_50838_fmt == _1e9c683ba_lower(_50838_fmt)) {
		_56613_ch='p';
	}
	_50814_dst.push(_56613_ch);
	if (_50928_exp < 0LL) {
		_56613_ch='-';
		_50928_exp=static_cast<jule::Int>((-(_50928_exp)));
	} else {
		_56613_ch='+';
	}
	_50814_dst.push(_56613_ch);
	{
		if (_50928_exp < 100LL) {
			_case_begin_4792057824:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		else if (_50928_exp < 1000LL) {
			_case_begin_4792057920:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,100LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(jule::unsafe_div(_50928_exp,10LL),10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		else {
			_case_begin_4792042944:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,1000LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(jule::unsafe_mod(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,100LL)),10LL) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(jule::unsafe_div(_50928_exp,10LL),10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		_match_end_4792042864:;
	}
	return _50814_dst;
}



inline jule::Int _1e9c59675_min(jule::Int _5918_a,jule::Int _59116_b) {
	if (_5918_a < _59116_b) {
		return _5918_a;
	}
	return _59116_b;
}



inline jule::Int _1e9c59675_max(jule::Int _5988_a,jule::Int _59816_b) {
	if (_5988_a > _59816_b) {
		return _5988_a;
	}
	return _59816_b;
}



inline jule::U8 _1e9c683ba_lower(jule::U8 _4910_c) {
	return static_cast<jule::U8>(_4910_c | 32LL);
}



inline std::tuple<jule::U64,jule::Int> _1e9c683ba_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str()) {
		return std::make_tuple(0LLU,2LLU);
	}
	{
		if ((2LL <= _5435_base) && (_5435_base <= 36LL)) {
			_case_begin_4792074720:;
		}
		else if (_5435_base == 0LL) {
			_case_begin_4792074064:;
			{
				_5435_base=10LL;
				if (_5423_s[0LL] == '0') {
					{
						if ((_5423_s.len() >= 3LL) && (_1e9c683ba_lower(_5423_s[1LL]) == 'b')) {
							_case_begin_4792078800:;
							{
								_5435_base=2LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_1e9c683ba_lower(_5423_s[1LL]) == 'o')) {
							_case_begin_4792079632:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_1e9c683ba_lower(_5423_s[1LL]) == 'x')) {
							_case_begin_4792078304:;
							{
								_5435_base=16LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else {
							_case_begin_4792078000:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(1LL);
							}
						}
						_match_end_4792077824:;
					}
				}
			}
		}
		else {
			_case_begin_4792071568:;
			{
				return std::make_tuple(0LLU,3LLU);
			}
		}
		_match_end_4792071952:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LL;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LLU,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto &_match_expr{ _5435_base };
		if (_match_expr == 10LL) {
			_case_begin_4792088656:;
			{
				_9313_cutoff=1844674407370955264LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_4792089904:;
			{
				_9313_cutoff=1152921504606846976LLU;
			}
		}
		else {
			_case_begin_4792083120:;
			{
				_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
			}
		}
		_match_end_4792076416:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto &_match_expr{ _5450_bit_size };
		if (_match_expr == 32LL) {
			_case_begin_4792085856:;
			{
				_10013_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4792092880:;
			{
				_10013_max_val=jule::MAX_U64;
			}
		}
		_match_end_4792090976:;
	}
	jule::U64 _11213_n = 0LLU;
	{
		auto &expr = _5423_s;
		auto it = expr.begin();
		_iter_begin_4792095648:;
		if (it != expr.end()) {
			jule::U8 &_1e9c683ba_c = *it;
			{
				jule::U8 _11417_d = 0LLU;
				{
					if (('0' <= _1e9c683ba_c) && (_1e9c683ba_c <= '9')) {
						_case_begin_4792099792:;
						{
							_11417_d=static_cast<jule::U8>(_1e9c683ba_c - '0');
						}
					}
					else if (('a' <= _1e9c683ba_lower(_1e9c683ba_c)) && (_1e9c683ba_lower(_1e9c683ba_c) <= 'z')) {
						_case_begin_4792099136:;
						{
							_11417_d=static_cast<jule::U8>((_1e9c683ba_lower(_1e9c683ba_c) - 'a') + 10LL);
						}
					}
					else {
						_case_begin_4792098128:;
						{
							return std::make_tuple(0LLU,2LLU);
						}
					}
					_match_end_4792098016:;
				}
				if (_11417_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LLU,2LLU);
				}
				if (_11213_n >= _9313_cutoff) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n*=static_cast<jule::U64>(_5435_base);
				jule::U64 _13413_n1 = _11213_n + static_cast<jule::U64>(_11417_d);
				if ((_13413_n1 < _11213_n) || (_13413_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n=_13413_n1;
			}
			_iter_next_4792095648:;
			++it;
			goto _iter_begin_4792095648;
		}
		_iter_end_4792095648:;
	}
	return std::make_tuple(_11213_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _1e9c683ba_parse_int(jule::Str _16522_s,jule::Int _16530_base,jule::Int _16545_bit_size) {
	jule::I64 _16562_i = jule::I64();
	jule::Int _16570_err = 0LLU;
	if (_16522_s == jule::Str()) {
		_16562_i = 0LL;
		_16570_err = 2LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::Bool _17113_neg = false;
	if (_16522_s[0LL] == '+') {
		_16522_s=_16522_s.slice(1LL);
	} else if (_16522_s[0LL] == '-') {
		_17113_neg=true;
		_16522_s=_16522_s.slice(1LL);
	}
	jule::Uint _18013_un = 0LLU;
	std::tie(_18013_un,_16570_err) = _1e9c683ba_parse_uint(_16522_s,_16530_base,_16545_bit_size);
	if ((_16570_err != 0LLU) && (_16570_err != 1LLU)) {
		_16562_i = 0LL;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_16545_bit_size == 0LL) {
		_16545_bit_size=64LL;
	}
	jule::U64 _1909_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_16545_bit_size - 1LL));
	if ((!(_17113_neg)) && (_18013_un >= _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>(_1909_cutoff - 1LL);
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_17113_neg && (_18013_un > _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1909_cutoff))));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::I64 _19713_n = static_cast<jule::I64>(_18013_un);
	if (_17113_neg) {
		_19713_n=static_cast<jule::I64>((-(_19713_n)));
	}
	_16562_i = _19713_n;
	_16570_err = 0LLU;
	return std::make_tuple(_16562_i,_16570_err);
}



inline std::tuple<jule::F64,jule::Bool> _1e9c5e768_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(9223372036854775808LLU));
		}
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _1ea57e83a_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(_579_clz);
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _1ea57e83a_mul64(_4123_man,_1e9c5e768_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(1LL));
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _1ea57e83a_mul64(_4123_man,_1e9c5e768_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(0LL));
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>(_8013_ret_mantissa & 1LL);
	_8013_ret_mantissa>>=1LLU;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LLU;
		_6013_ret_exp2+=1LLU;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1e9c5e768_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_1ea0a58b1_f32_from_bits(2147483648LLU));
		}
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _1ea57e83a_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(_1329_clz);
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _1ea57e83a_mul64(_11023_man,_1e9c5e768_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(1LL));
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _1ea57e83a_mul64(_11023_man,_1e9c5e768_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(0LL));
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>(_15513_ret_mantissa & 1LL);
	_15513_ret_mantissa>>=1LLU;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LLU;
		_13513_ret_exp2+=1LLU;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LLU;
	}
	_11058_f = static_cast<jule::F32>(_1ea0a58b1_f32_from_bits(static_cast<jule::U32>(_17813_ret_bits)));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _1e9c4b6bc_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	for (; _5013_i < _4613_n; (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];
			if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
				_5217_c+=32LLU;
			}
			if (_5217_c != _4542_prefix[_5013_i]) {
				return _5013_i;
			}
		}
	_iter_next_4792194624:;
	}
	_iter_end_4792194624:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _1e9c4b6bc_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::Int _6834_n = jule::Int();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s == jule::Str()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto &_match_expr{ _6816_s[0LL] };
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_4792206208:;
			{
				if (_6816_s[0LL] == '-') {
					_7213_sign=-1LL;
				}
				_7313_nsign=1LL;
				_6816_s=_6816_s.slice(1LL);
				goto _case_begin_4792206304;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_4792206304:;
			{
				jule::Int _8317_case_n = _1e9c4b6bc_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
				if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
					_8317_case_n=3LL;
				}
				if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
					_6826_f = static_cast<jule::F64>(_1ea153376_inf(_7213_sign));
					_6834_n = static_cast<jule::Int>(_7313_nsign + _6834_n);
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_4792206400:;
			{
				if (_1e9c4b6bc_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
					_6826_f = static_cast<jule::F64>(_1ea153376_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		_match_end_4792206128:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _1e9c4b6bc_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::Int _10340_exp = jule::Int();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10438_hex = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10457_ok = jule::Bool();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		if (_10315_s[_10449_i] == '+') {
			_case_begin_4792223744:;
			{
				(_10449_i)++;
			}
		}
		else if (_10315_s[_10449_i] == '-') {
			_case_begin_4792223856:;
			{
				_10350_neg=true;
				(_10449_i)++;
			}
		}
		_match_end_4792223600:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[_10449_i] == '0')) && (_1e9c683ba_lower(_10315_s[_10449_i + 1LL]) == 'x')) {
		_11813_base=16LLU;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	for (; _10449_i < _10315_s.len(); (_10449_i)++) {
		{
			jule::U8 _13413_c = _10315_s[_10449_i];
			{
				if (_13413_c == '.') {
					_case_begin_4792239936:;
					{
						if (_12813_sawdot) {
							goto _julec_label_loop_end;
						}
						_12813_sawdot=true;
						_13213_dp=_13013_nd;
						goto _iter_next_4792222816;
					}
				}
				else if (('0' <= _13413_c) && (_13413_c <= '9')) {
					_case_begin_4792240032:;
					{
						_12913_sawdigits=true;
						if ((_13413_c == '0') && (_13013_nd == 0LL)) {
							(_13213_dp)--;
							goto _iter_next_4792222816;
						}
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=_11813_base;
							_10325_mantissa+=static_cast<jule::U64>(_13413_c - '0');
							(_13113_nd_mant)++;
						} else if (_13413_c != '0') {
							_10425_trunc=true;
						}
						goto _iter_next_4792222816;
					}
				}
				else if (((_11813_base == 16LL) && ('a' <= _1e9c683ba_lower(_13413_c))) && (_1e9c683ba_lower(_13413_c) <= 'f')) {
					_case_begin_4792240128:;
					{
						_12913_sawdigits=true;
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=16LLU;
							_10325_mantissa+=static_cast<jule::U64>((_1e9c683ba_lower(_13413_c) - 'a') + 10LL);
							(_13113_nd_mant)++;
						} else {
							_10425_trunc=true;
						}
						goto _iter_next_4792222816;
					}
				}
				_match_end_4792239856:;
			}
			goto _iter_end_4792222816;
		}
	_iter_next_4792222816:;
	}
	_iter_end_4792222816:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_1e9c683ba_lower(_10315_s[_10449_i]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19517_esign = 1LL;
		if (_10315_s[_10449_i] == '+') {
			(_10449_i)++;
		} else if (_10315_s[_10449_i] == '-') {
			(_10449_i)++;
			_19517_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[_10449_i] < '0')) || (_10315_s[_10449_i] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20517_e = 0LL;
		for (; (_10449_i < _10315_s.len()) && (('0' <= _10315_s[_10449_i]) && (_10315_s[_10449_i] <= '9')); (_10449_i)++) {
			{
				if (_20517_e < 10000LL) {
					_20517_e=static_cast<jule::Int>(((_20517_e * 10LL) + static_cast<jule::Int>(_10315_s[_10449_i])) - '0');
				}
			}
		_iter_next_4792259808:;
		}
		_iter_end_4792259808:;
		_13213_dp+=static_cast<jule::Int>(_20517_e * _19517_esign);
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=static_cast<jule::Int>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1e9c4b6bc_atof64exact(jule::U64 _47216_mantissa,jule::Int _47235_exp,jule::Bool _47245_neg) {
	jule::F64 _47258_f = jule::F64();
	jule::Bool _47266_ok = jule::Bool();
	if ((_47216_mantissa >> _1e9c59675_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_47258_f,_47266_ok);
	}
	_47258_f=static_cast<jule::F64>(_47216_mantissa);
	if (_47245_neg) {
		_47258_f=static_cast<jule::F64>((-(_47258_f)));
	}
	{
		if (_47235_exp == 0LL) {
			_case_begin_4792287232:;
			{
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		else if ((_47235_exp > 0LL) && (_47235_exp <= 37LL)) {
			_case_begin_4792287328:;
			{
				if (_47235_exp > 22LL) {
					_47258_f*=_1e9c4b6bc_F64_POW10[_47235_exp - 22LL];
					_47235_exp=22LL;
				}
				if ((_47258_f > 1000000000000000LL) || (_47258_f < -1000000000000000LL)) {
					return std::make_tuple(_47258_f,_47266_ok);
				}
				_47258_f = static_cast<jule::F64>(_47258_f * _1e9c4b6bc_F64_POW10[_47235_exp]);
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		else if ((_47235_exp < 0LL) && (_47235_exp >= -22LL)) {
			_case_begin_4792287424:;
			{
				_47258_f = static_cast<jule::F64>(jule::div(_47258_f,_1e9c4b6bc_F64_POW10[(-(_47235_exp))]));
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		_match_end_4792285792:;
	}
	return std::make_tuple(_47258_f,_47266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1e9c4b6bc_atof32exact(jule::U64 _50616_mantissa,jule::Int _50635_exp,jule::Bool _50649_neg) {
	jule::F32 _50662_f = jule::F32();
	jule::Bool _50670_ok = jule::Bool();
	if ((_50616_mantissa >> _1e9c59675_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_50662_f,_50670_ok);
	}
	_50662_f=static_cast<jule::F32>(_50616_mantissa);
	if (_50649_neg) {
		_50662_f=static_cast<jule::F32>((-(_50662_f)));
	}
	{
		if (_50635_exp == 0LL) {
			_case_begin_4792300800:;
			{
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		else if ((_50635_exp > 0LL) && (_50635_exp <= 17LL)) {
			_case_begin_4792300896:;
			{
				if (_50635_exp > 10LL) {
					_50662_f*=_1e9c4b6bc_F32_POW10[_50635_exp - 10LL];
					_50635_exp=10LL;
				}
				if ((_50662_f > 10000000LL) || (_50662_f < -10000000LL)) {
					return std::make_tuple(_50662_f,_50670_ok);
				}
				_50662_f = static_cast<jule::F32>(_50662_f * _1e9c4b6bc_F32_POW10[_50635_exp]);
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		else if ((_50635_exp < 0LL) && (_50635_exp >= -10LL)) {
			_case_begin_4792300992:;
			{
				_50662_f = static_cast<jule::F32>(jule::div(_50662_f,_1e9c4b6bc_F32_POW10[(-(_50635_exp))]));
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		_match_end_4792299392:;
	}
	return std::make_tuple(_50662_f,_50670_ok);
}



inline std::tuple<jule::F64,jule::Int> _1e9c4b6bc_atof_hex(jule::Str _54213_s,_1e9c59675_FloatInfo& _54222_flt,jule::U64 _54242_mantissa,jule::Int _54261_exp,jule::Bool _54271_neg,jule::Bool _54282_trunc) {
	jule::Int _5439_max_exp = (static_cast<jule::Int>(1LL << _54222_flt._field_expbits) + _54222_flt._field_bias) - 2LL;
	jule::Int _5449_min_exp = _54222_flt._field_bias + 1LL;
	_54261_exp+=static_cast<jule::Int>(_54222_flt._field_mantbits);
	while ((_54242_mantissa != 0LL) && ((_54242_mantissa >> (_54222_flt._field_mantbits + 2LL)) == 0LL)) {
		{
			_54242_mantissa<<=1LLU;
			(_54261_exp)--;
		}
	_iter_next_4792315248:;
	}
	_iter_end_4792315248:;
	if (_54282_trunc) {
		_54242_mantissa|=1LLU;
	}
	while ((_54242_mantissa >> ((1LL + _54222_flt._field_mantbits) + 2LL)) != 0LL) {
		{
			_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
			(_54261_exp)++;
		}
	_iter_next_4792316032:;
	}
	_iter_end_4792316032:;
	while ((_54242_mantissa > 1LL) && (_54261_exp < (_5449_min_exp - 2LL))) {
		{
			_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
			(_54261_exp)++;
		}
	_iter_next_4792318736:;
	}
	_iter_end_4792318736:;
	jule::U64 _57413_round = _54242_mantissa & 3LL;
	_54242_mantissa>>=2LLU;
	_57413_round|=static_cast<jule::U64>(_54242_mantissa & 1LL);
	_54261_exp+=2LL;
	if (_57413_round == 3LL) {
		(_54242_mantissa)++;
		if (_54242_mantissa == (1LL << (1LL + _54222_flt._field_mantbits))) {
			_54242_mantissa>>=1LLU;
			(_54261_exp)++;
		}
	}
	if ((_54242_mantissa >> _54222_flt._field_mantbits) == 0LL) {
		_54261_exp=_54222_flt._field_bias;
	}
	jule::Int _58913_err = 0LLU;
	if (_54261_exp > _5439_max_exp) {
		_54242_mantissa=static_cast<jule::U64>(1LL << _54222_flt._field_mantbits);
		_54261_exp=static_cast<jule::Int>(_5439_max_exp + 1LL);
		_58913_err=1LLU;
	}
	jule::U64 _59613_bits = _54242_mantissa & ((1LL << _54222_flt._field_mantbits) - 1LL);
	_59613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_54261_exp - _54222_flt._field_bias) & static_cast<jule::Int>((1LL << _54222_flt._field_expbits) - 1LL)) << _54222_flt._field_mantbits);
	if (_54271_neg) {
		_59613_bits|=static_cast<jule::Uint>((1LL << _54222_flt._field_mantbits) << _54222_flt._field_expbits);
	}
	if (_54222_flt == _1e9c59675_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(_1ea0a58b1_f32_from_bits(static_cast<jule::U32>(_59613_bits))),_58913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(_59613_bits)),_58913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _1e9c4b6bc_atof32(jule::Str _60711_s) {
	jule::F32 _60721_f = jule::F32();
	jule::Int _60729_n = jule::Int();
	jule::Int _60737_err = 0LLU;
	{
		jule::F64 _60914_val;
		jule::Int _60919__n;
		jule::Bool _60923_ok;
		std::tie(_60914_val,_60919__n,_60923_ok) = _1e9c4b6bc_special(_60711_s);
		if (_60923_ok) {
			_60721_f = static_cast<jule::F32>(_60914_val);
			_60729_n = _60919__n;
			_60737_err = 0LLU;
			return std::make_tuple(_60721_f,_60729_n,_60737_err);
		}
	}
	jule::U64 _61510_mantissa;
	jule::Int _61520_exp;
	jule::Bool _61525_neg;
	jule::Bool _61530_trunc;
	jule::Bool _61537_hex;
	jule::Int _61542__n;
	jule::Bool _61550_ok;
	std::tie(_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc,_61537_hex,_61542__n,_61550_ok) = _1e9c4b6bc_read_float(_60711_s);
	_60729_n=_61542__n;
	if ((!(_61550_ok))) {
		_60721_f = 0LL;
		_60737_err = 2LLU;
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	if (_61537_hex) {
		jule::F64 _62217_ff = 0LL;
		std::tie(_62217_ff,_60737_err) = _1e9c4b6bc_atof_hex(_60711_s.slice(0LL,_60729_n),_1e9c59675_F32_INFO,_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc);
		_60721_f = static_cast<jule::F32>(_62217_ff);
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	if (true) {
		if ((!(_61530_trunc))) {
			std::tie(_60721_f,_61550_ok) = _1e9c4b6bc_atof32exact(_61510_mantissa,_61520_exp,_61525_neg);
			if (_61550_ok) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
		}
		std::tie(_60721_f,_61550_ok) = _1e9c5e768_eisel_lemire32(_61510_mantissa,_61520_exp,_61525_neg);
		if (_61550_ok) {
			if ((!(_61530_trunc))) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
			jule::F32 _64421_f_up = 0LL;
			std::tie(_64421_f_up,_61550_ok) = _1e9c5e768_eisel_lemire32(static_cast<jule::U64>(_61510_mantissa + 1LL),_61520_exp,_61525_neg);
			if (_61550_ok && (_60721_f == _64421_f_up)) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
		}
	}
	_1ea033a09_Decimal _65313_d = _1ea033a09_Decimal();
	if ((!(_65313_d._method_set(_60711_s.slice(0LL,_60729_n))))) {
		_60721_f = 0LL;
		_60737_err = 2LLU;
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	jule::U64 _65710_b;
	jule::Bool _65713_ovf;
	std::tie(_65710_b,_65713_ovf) = _65313_d._method_float_bits(_1e9c59675_F32_INFO);
	_60721_f=static_cast<jule::F32>(_1ea0a58b1_f32_from_bits(static_cast<jule::U32>(_65710_b)));
	if (_65713_ovf) {
		_60737_err=1LLU;
	}
	return std::make_tuple(_60721_f,_60729_n,_60737_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _1e9c4b6bc_atof64(jule::Str _66511_s) {
	jule::F64 _66521_f = jule::F64();
	jule::Int _66529_n = jule::Int();
	jule::Int _66537_err = 0LLU;
	{
		jule::F64 _66714_val;
		jule::Int _66719__n;
		jule::Bool _66723_ok;
		std::tie(_66714_val,_66719__n,_66723_ok) = _1e9c4b6bc_special(_66511_s);
		if (_66723_ok) {
			_66521_f = _66714_val;
			_66529_n = _66719__n;
			_66537_err = 0LLU;
			return std::make_tuple(_66521_f,_66529_n,_66537_err);
		}
	}
	jule::U64 _67310_mantissa;
	jule::Int _67320_exp;
	jule::Bool _67325_neg;
	jule::Bool _67330_trunc;
	jule::Bool _67337_hex;
	jule::Int _67342__n;
	jule::Bool _67350_ok;
	std::tie(_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc,_67337_hex,_67342__n,_67350_ok) = _1e9c4b6bc_read_float(_66511_s);
	_66529_n=_67342__n;
	if ((!(_67350_ok))) {
		_66521_f = 0LL;
		_66537_err = 2LLU;
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	if (_67337_hex) {
		std::tie(_66521_f,_66537_err) = _1e9c4b6bc_atof_hex(_66511_s.slice(0LL,_66529_n),_1e9c59675_F64_INFO,_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc);
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	if (true) {
		if ((!(_67330_trunc))) {
			std::tie(_66521_f,_67350_ok) = _1e9c4b6bc_atof64exact(_67310_mantissa,_67320_exp,_67325_neg);
			if (_67350_ok) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
		}
		std::tie(_66521_f,_67350_ok) = _1e9c5e768_eisel_lemire64(_67310_mantissa,_67320_exp,_67325_neg);
		if (_67350_ok) {
			if ((!(_67330_trunc))) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
			jule::F64 _70121_f_up = 0LL;
			std::tie(_70121_f_up,_67350_ok) = _1e9c5e768_eisel_lemire64(static_cast<jule::U64>(_67310_mantissa + 1LL),_67320_exp,_67325_neg);
			if (_67350_ok && (_66521_f == _70121_f_up)) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
		}
	}
	_1ea033a09_Decimal _71013_d = _1ea033a09_Decimal();
	if ((!(_71013_d._method_set(_66511_s.slice(0LL,_66529_n))))) {
		_66521_f = 0LL;
		_66537_err = 2LLU;
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	jule::U64 _71410_b;
	jule::Bool _71413_ovf;
	std::tie(_71410_b,_71413_ovf) = _71013_d._method_float_bits(_1e9c59675_F64_INFO);
	_66521_f=static_cast<jule::F64>(_1ea0a58b1_f64_from_bits(_71410_b));
	if (_71413_ovf) {
		_66537_err=1LLU;
	}
	return std::make_tuple(_66521_f,_66529_n,_66537_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _1e9c4b6bc_parse_float_prefix(jule::Str _72223_s,jule::Int _72231_bit_size) {
	if (_72231_bit_size == 32LL) {
		jule::F32 _72414_f;
		jule::Int _72417_n;
		jule::Int _72420_err;
		std::tie(_72414_f,_72417_n,_72420_err) = _1e9c4b6bc_atof32(_72223_s);
		return std::make_tuple(static_cast<jule::F64>(_72414_f),_72417_n,_72420_err);
	}
	jule::F64 _72810_f;
	jule::Int _72813_n;
	jule::Int _72816_err;
	std::tie(_72810_f,_72813_n,_72816_err) = _1e9c4b6bc_atof64(_72223_s);
	return std::make_tuple(_72810_f,_72813_n,_72816_err);
}



inline std::tuple<jule::F64,jule::Int> _1e9c4b6bc_parse_float(jule::Str _75620_s,jule::Int _75628_bit_size) {
	jule::F64 _75710_f;
	jule::Int _75713_n;
	jule::Int _75716_err;
	std::tie(_75710_f,_75713_n,_75716_err) = _1e9c4b6bc_parse_float_prefix(_75620_s,_75628_bit_size);
	if ((_75713_n != _75620_s.len()) && ((_75716_err == 0LLU) || (_75716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_75710_f,_75716_err);
}



inline void _1e9e9b664_ryu_ftoa_fixed32(_1e9c59675_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:51:9"));;
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:54:9"));;
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _1ea57e83a_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(25LL - _639_b);
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_1e9e9b664_mul_by_log2_log10(static_cast<jule::Int>(_6213_e2 + 24LL)))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _1e9e9b664_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:83:9"));;
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _1e9e9b664_divisible_by_pow5(static_cast<jule::U64>(_4947_mant),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_1e9e9b664_format_decimal(_4926_d,static_cast<jule::U64>(_8114_di),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _1e9e9b664_ryu_ftoa_fixed64(_1e9c59675_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:125:9"));;
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _1ea57e83a_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::Uint>(55LL - _1349_b));
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_1e9e9b664_mul_by_log2_log10(static_cast<jule::Int>(_13313_e2 + 54LL)))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _1e9e9b664_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:157:9"));;
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _1e9e9b664_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_1e9e9b664_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _1e9e9b664_format_decimal(_1e9c59675_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _1e9e9b664_U64_POW10[_20490_prec];
	jule::Int _20613_trimmed = 0LL;
	while (_20445_m >= _2059_max) {
		{
			jule::U64 _20814_a = jule::unsafe_div(_20445_m,10LL);
			jule::U64 _20817_b = jule::unsafe_mod(_20445_m,10LL);
			std::tie(_20814_a,_20817_b) = std::make_tuple(jule::unsafe_div(_20445_m,10LL),jule::unsafe_mod(_20445_m,10LL));
			_20445_m=_20814_a;
			(_20613_trimmed)++;
			if (_20817_b > 5LL) {
				_20474_round_up=true;
			} else if (_20817_b < 5LL) {
				_20474_round_up=false;
			} else {
				_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
			}
			if (_20817_b != 0LL) {
				_20457_trunc=true;
			}
		}
	_iter_next_4792468400:;
	}
	_iter_end_4792468400:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m = jule::unsafe_div(_20445_m,10LLU);
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(_20490_prec);
	jule::U64 _23513_v = _20445_m;
	while (_23513_v >= 100LL) {
		{
			jule::U64 _23717_v1 = 0LLU;
			jule::U64 _23817_v2 = 0LLU;
			if ((_23513_v >> 32LL) == 0LL) {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::unsafe_div(static_cast<jule::U32>(_23513_v),100LL)),static_cast<jule::U64>(jule::unsafe_mod(static_cast<jule::U32>(_23513_v),100LL)));
			} else {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::unsafe_div(_23513_v,100LL)),static_cast<jule::U64>(jule::unsafe_mod(_23513_v,100LL)));
			}
			_23313_n-=2LLU;
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
			_23513_v=_23717_v1;
		}
	_iter_next_4792475744:;
	}
	_iter_end_4792475744:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	while (_20424_d._field_d[_20424_d._field_nd - 1LL] == '0') {
		{
			(_20424_d._field_nd)--;
			(_20613_trimmed)++;
		}
	_iter_next_4792492160:;
	}
	_iter_end_4792492160:;
	_20424_d._field_dp=static_cast<jule::Int>(_20424_d._field_nd + _20613_trimmed);
}



inline void _1e9e9b664_ryu_ftoa_shortest(_1e9c59675_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_1e9c59675_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_1ea57e83a_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>((-(_26559_exp)));
		_1e9e9b664_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _1e9e9b664_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_1e9e9b664_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _1e9e9b664_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _1e9c59675_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _1e9e9b664_mult64bit_pow10(static_cast<jule::U32>(_27710_ml),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _1e9e9b664_mult64bit_pow10(static_cast<jule::U32>(_27714_mc),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _1e9e9b664_mult64bit_pow10(static_cast<jule::U32>(_27718_mu),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(_29417_dl32),static_cast<jule::U64>(_29517_dc32),static_cast<jule::U64>(_29617_du32));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _1e9e9b664_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _1e9e9b664_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _1e9e9b664_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:307:9"));;
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_1e9e9b664_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_1e9e9b664_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_1e9e9b664_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_1e9e9b664_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _1e9e9b664_mul_by_log2_log10(jule::Int _38322_x) {
	return static_cast<jule::Int>((_38322_x * 78913LL) >> 18LL);
}



inline jule::Int _1e9e9b664_mul_by_log10_log2(jule::Int _39322_x) {
	return static_cast<jule::Int>((_39322_x * 108853LL) >> 15LL);
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _1e9e9b664_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_1e9c59675_FloatInfo& _40218_flt) {
	jule::U64 _40236_lower = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40262_upper = jule::U64();
	jule::Int _40274_e2 = jule::Int();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 1LL);
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 2LL);
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _1e9e9b664_ryu_digits(_1e9c59675_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _1e9e9b664_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _1e9e9b664_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _1e9e9b664_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_1e9e9b664_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_1e9e9b664_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		while (_43517_v > 0LL) {
			{
				jule::U32 _43718_v1 = jule::unsafe_div(_43517_v,10LL);
				jule::U32 _43722_v2 = jule::unsafe_mod(_43517_v,10LL);
				std::tie(_43718_v1,_43722_v2) = std::make_tuple(jule::unsafe_div(_43517_v,10LL),jule::unsafe_mod(_43517_v,10LL));
				_43517_v=_43718_v1;
				(_43417_n)--;
				_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(_43722_v2 + '0');
			}
		_iter_next_4792575136:;
		}
		_iter_end_4792575136:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(9LL - _43417_n);
		_1e9e9b664_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::Int>(_41520_d._field_nd + 8LL));
	}
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[_41520_d._field_nd - 1LL] == '0')) {
		{
			(_41520_d._field_nd)--;
		}
	_iter_next_4792575728:;
	}
	_iter_end_4792575728:;
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0')) {
		{
			(_41520_d._field_nd)--;
			(_41520_d._field_dp)--;
			_41520_d._field_d=_41520_d._field_d.slice(1LL);
		}
	_iter_next_4792571408:;
	}
	_iter_end_4792571408:;
}



inline void _1e9e9b664_ryu_digits32(_1e9c59675_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=static_cast<jule::Int>(_46166_endindex + 1LL);
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	while (_46121_upper > 0LL) {
		{
			jule::U32 _47613_l = jule::unsafe_div(_46043_lower + 9LL,10LL);
			jule::U32 _47718_c = jule::unsafe_div(_46059_central,10LL);
			jule::U32 _47725_cdigit = jule::unsafe_mod(_46059_central,10LL);
			std::tie(_47718_c,_47725_cdigit) = std::make_tuple(jule::unsafe_div(_46059_central,10LL),jule::unsafe_mod(_46059_central,10LL));
			jule::U32 _47813_u = jule::unsafe_div(_46121_upper,10LL);
			if (_47613_l > _47813_u) {
				goto _iter_end_4792589776;
			}
			if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
				(_47718_c)++;
				_47725_cdigit=0LLU;
				_46151_cup=false;
			}
			(_46613_trimmed)++;
			_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
			_46913_c_next_digit=static_cast<jule::Int>(_47725_cdigit);
			std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
		}
	_iter_next_4792589776:;
	}
	_iter_end_4792589776:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	while (_51813_n > _46022_d._field_nd) {
		{
			jule::U32 _52014_v1 = jule::unsafe_div(_51713_v,100LL);
			jule::U32 _52018_v2 = jule::unsafe_mod(_51713_v,100LL);
			std::tie(_52014_v1,_52018_v2) = std::make_tuple(jule::unsafe_div(_51713_v,100LL),jule::unsafe_mod(_51713_v,100LL));
			_46022_d._field_d[_51813_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
			_46022_d._field_d[_51813_n - 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
			_51813_n-=2LL;
			_51713_v=_52014_v1;
		}
	_iter_next_4792592544:;
	}
	_iter_end_4792592544:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[_51813_n]=static_cast<jule::U8>(_51713_v + '0');
	}
	_46022_d._field_nd=static_cast<jule::Int>(_46166_endindex + 1LL);
	_46022_d._field_dp=static_cast<jule::Int>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _1e9e9b664_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::U32 _54251_resM = jule::U32();
	jule::Int _54262_resE = jule::Int();
	jule::Bool _54273_exact = jule::Bool();
	if (_54241_q == 0LL) {
		_54251_resM = static_cast<jule::U32>(_54220_m << 6LL);
		_54262_resE = static_cast<jule::Int>(_54232_e2 - 6LL);
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:549:9"));;
	}
	jule::U64 _55113_pow = _1e9c5e768_DETAILED_POWS_OF_TEN[_54241_q - -348LL].__at(1LL);
	if (_54241_q < 0LL) {
		_55113_pow+=1LLU;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _1ea57e83a_mul64(static_cast<jule::U64>(_54220_m),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_1e9e9b664_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _1e9e9b664_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::U64 _57052_resM = jule::U64();
	jule::Int _57063_resE = jule::Int();
	jule::Bool _57074_exact = jule::Bool();
	if (_57042_q == 0LL) {
		_57052_resM = static_cast<jule::U64>(_57021_m << 8LL);
		_57063_resE = static_cast<jule::Int>(_57033_e2 - 8LL);
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:577:9"));;
	}
	jule::Array<jule::U64,2> _57913_pow = _1e9c5e768_DETAILED_POWS_OF_TEN[_57042_q - -348LL];
	if (_57042_q < 0LL) {
		_57913_pow.__at(0LL)+=1LLU;
	}
	_57033_e2+=static_cast<jule::Int>((_1e9e9b664_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _1ea57e83a_mul64(_57021_m,_57913_pow.__at(0LL));
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _1ea57e83a_mul64(_57021_m,_57913_pow.__at(1LL));
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _1ea57e83a_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>((_58814_h1 << 9LL) | (_58910_mid >> 55LL));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _1e9e9b664_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	for (; _59813_i < _59434_k; (_59813_i)++) {
		{
			if (jule::unsafe_mod(_59426_m,5LL) != 0LL) {
				return false;
			}
			_59426_m = jule::unsafe_div(_59426_m,5LLU);
		}
	_iter_next_4792647136:;
	}
	_iter_end_4792647136:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _1e9e9b664_divmod1e9(jule::U64 _61014_x) {
	if (true) {
		return std::make_tuple(static_cast<jule::U32>(jule::unsafe_div(_61014_x,1000000000LL)),static_cast<jule::U32>(jule::unsafe_mod(_61014_x,1000000000LL)));
	}
	jule::U64 _61510_hi;
	std::tie(_61510_hi,std::ignore) = _1ea57e83a_mul64(static_cast<jule::U64>(_61014_x >> 1LL),9903520314283042200LLU);
	jule::U64 _6169_q = _61510_hi >> 28LL;
	return std::make_tuple(static_cast<jule::U32>(_6169_q),static_cast<jule::U32>(_61014_x - (_6169_q * 1000000000LL)));
}



inline void _1ea033a09_trim(_1ea033a09_Decimal& _27514_a) {
	while ((_27514_a._field_nd > 0LL) && (_27514_a._field_d[_27514_a._field_nd - 1LL] == '0')) {
		{
			(_27514_a._field_nd)--;
		}
	_iter_next_4792657568:;
	}
	_iter_end_4792657568:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _1ea033a09_right_shift(_1ea033a09_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	for (; (_29013_n >> _28533_k) == 0LL; (_28613_r)++) {
		{
			if (_28613_r >= _28521_a._field_nd) {
				if (_29013_n == 0LL) {
					_28521_a._field_nd=0LL;
					return;
				}
				while ((_29013_n >> _28533_k) == 0LL) {
					{
						_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
						(_28613_r)++;
					}
				_iter_next_4792666672:;
				}
				_iter_end_4792666672:;
				goto _iter_end_4792661728;
			}
			jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _30413_c) - '0');
		}
	_iter_next_4792661728:;
	}
	_iter_end_4792661728:;
	_28521_a._field_dp-=static_cast<jule::Int>(_28613_r - 1LL);
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	for (; _28613_r < _28521_a._field_nd; (_28613_r)++) {
		{
			jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			jule::Uint _31413_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			_28521_a._field_d[_28713_w]=static_cast<jule::U8>(_31413_dig + '0');
			(_28713_w)++;
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _31313_c) - '0');
		}
	_iter_next_4792670464:;
	}
	_iter_end_4792670464:;
	while (_29013_n > 0LL) {
		{
			jule::Uint _32313_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			if (_28713_w < 800LL) {
				_28521_a._field_d[_28713_w]=static_cast<jule::U8>(_32313_dig + '0');
				(_28713_w)++;
			} else if (_32313_dig > 0LL) {
				_28521_a._field_trunc=true;
			}
			_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
		}
	_iter_next_4792675856:;
	}
	_iter_end_4792675856:;
	_28521_a._field_nd=_28713_w;
	_1ea033a09_trim(_28521_a);
}



inline jule::Bool _1ea033a09_prefix_is_less_than(jule::Array<jule::U8,800> _33924_b,jule::Int _33938_end,jule::Str _33948_s) {
	jule::Int _34013_i = 0LL;
	for (; _34013_i < _33948_s.len(); (_34013_i)++) {
		{
			if (_34013_i >= _33938_end) {
				return true;
			}
			if (_33924_b[_34013_i] != _33948_s[_34013_i]) {
				return _33924_b[_34013_i] < _33948_s[_34013_i];
			}
		}
	_iter_next_4792682128:;
	}
	_iter_end_4792682128:;
	return false;
}



inline void _1ea033a09_left_shift(_1ea033a09_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _1ea033a09_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_1ea033a09_prefix_is_less_than(_35320_a._field_d,_35320_a._field_nd,_1ea033a09_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	for (; _35913_r >= 0LL; (_35913_r)--) {
		{
			_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[_35913_r]) - '0') << _35332_k);
			jule::Uint _36713_quo = jule::unsafe_div(_36313_n,10LL);
			jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(_36813_rem + '0');
			} else if (_36813_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_36713_quo;
		}
	_iter_next_4792692208:;
	}
	_iter_end_4792692208:;
	while (_36313_n > 0LL) {
		{
			jule::Uint _38013_quo = jule::unsafe_div(_36313_n,10LL);
			jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(_38113_rem + '0');
			} else if (_38113_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_38013_quo;
		}
	_iter_next_4792698560:;
	}
	_iter_end_4792698560:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_1ea033a09_trim(_35320_a);
}



inline jule::Bool _1ea033a09_should_round_up(_1ea033a09_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[_40033_nd] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (jule::unsafe_mod(_40021_a._field_d[_40033_nd - 1LL] - '0',2LL) != 0LL);
	}
	return _40021_a._field_d[_40033_nd] >= '5';
}



inline jule::Str _1e9e077ac_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _1e9e077ac_small(static_cast<jule::Int>(_6217_i));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _1e9e077ac_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _1e9e077ac_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _1e9e077ac_small(static_cast<jule::Int>(_7316_i));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _1e9e077ac_fmt_bits(nullptr,static_cast<jule::U64>(_7316_i),_7324_base,_7316_i < 0LL,false);
	return _7713_s;
}



inline jule::Str _1e9e077ac_itoa(jule::Int _8213_i) {
	return _1e9e077ac_fmt_int(static_cast<jule::I64>(_8213_i),10LL);
}



inline jule::Str _1e9e077ac_small(jule::Int _8510_i) {
	if (_8510_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8510_i,_8510_i + 1LL);
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(_8510_i * 2LL,(_8510_i * 2LL) + 2LL);
}



inline jule::Bool _1e9e077ac_is_power_of_two(jule::Int _9220_x) {
	return (_9220_x & (_9220_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1e9e077ac_fmt_bits(jule::Slice<jule::U8> _9917_dst,jule::U64 _9934_u,jule::Int _9942_base,jule::Bool _9953_neg,jule::Bool _9964_append_) {
	jule::Slice<jule::U8> _9981_d = jule::Slice<jule::U8>();
	jule::Str _9992_s = jule::Str();
	if ((_9942_base < 2LL) || (_9942_base > jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).len())) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/itoa.jule:101:9"));;
	}
	jule::Slice<jule::U8> _10513_a = jule::Slice<jule::U8>::alloc(65LL);
	jule::I64 _10613_i = _10513_a.len();
	if (_9953_neg) {
		_9934_u=static_cast<jule::U64>((-(_9934_u)));
	}
	if (_9942_base == 10LL) {
		if (false) {
			while (_9934_u >= 1000000000LL) {
				{
					jule::U64 _12521_q = jule::unsafe_div(_9934_u,1000000000LL);
					jule::Uint _12625_us = static_cast<jule::Uint>(_9934_u - (_12521_q * 1000000000LL));
					jule::Int _12725_j = 4LL;
					for (; _12725_j > 0LL; (_12725_j)--) {
						{
							jule::Uint _12925_is = jule::unsafe_mod(_12625_us,100LL) * 2LL;
							_12625_us = jule::unsafe_div(_12625_us,100LLU);
							_10613_i-=2LL;
							_10513_a[_10613_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 1LL)]);
							_10513_a[_10613_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 0LL)]);
						}
					_iter_next_4792738752:;
					}
					_iter_end_4792738752:;
					(_10613_i)--;
					_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_12625_us * 2LL) + 1LL)]);
					_9934_u=_12521_q;
				}
			_iter_next_4792735088:;
			}
			_iter_end_4792735088:;
		}
		jule::Uint _14717_us = static_cast<jule::Uint>(_9934_u);
		while (_14717_us >= 100LL) {
			{
				jule::Uint _14917_is = jule::unsafe_mod(_14717_us,100LL) * 2LL;
				_14717_us = jule::unsafe_div(_14717_us,100LLU);
				_10613_i-=2LL;
				_10513_a[_10613_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 1LL)]);
				_10513_a[_10613_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 0LL)]);
			}
		_iter_next_4792739088:;
		}
		_iter_end_4792739088:;
		jule::Uint _15713_is = _14717_us * 2LL;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is + 1LL)]);
		if (_14717_us >= 10LL) {
			(_10613_i)--;
			_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is)]);
		}
	} else if (_1e9e077ac_is_power_of_two(_9942_base)) {
		jule::Uint _17213_shift = static_cast<jule::Uint>(_1ea57e83a_trailing_zeros(static_cast<jule::Uint>(_9942_base))) & 7LL;
		jule::U64 _17313_b = static_cast<jule::U64>(_9942_base);
		jule::Uint _17413_m = static_cast<jule::Uint>(_9942_base) - 1LL;
		while (_9934_u >= _17313_b) {
			{
				(_10613_i)--;
				_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u) & _17413_m)]);
				_9934_u>>=_17213_shift;
			}
		_iter_next_4792758800:;
		}
		_iter_end_4792758800:;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	} else {
		jule::U64 _18513_b = static_cast<jule::U64>(_9942_base);
		while (_9934_u >= _18513_b) {
			{
				(_10613_i)--;
				jule::U64 _19117_q = jule::div(_9934_u,_18513_b);
				_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u - (_19117_q * _18513_b)))]);
				_9934_u=_19117_q;
			}
		_iter_next_4792760752:;
		}
		_iter_end_4792760752:;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	}
	if (_9953_neg) {
		(_10613_i)--;
		_10513_a[_10613_i]='-';
	}
	if (_9964_append_) {
		_9981_d=jule::append(_9917_dst,_10513_a.slice(_10613_i));
		return std::make_tuple(_9981_d,_9992_s);
	}
	_9992_s=static_cast<jule::Str>(_10513_a.slice(_10613_i));
	return std::make_tuple(_9981_d,_9992_s);
}



inline void _1e9c5e35b_push_opt_level(jule::Int _3123_level) {
	_1e9c5e35b_OPT_COPY=_3123_level >= 1LLU;
	_1e9c5e35b_OPT_DEADCODE=_3123_level >= 1LLU;
	_1e9c5e35b_OPT_APPEND=_3123_level >= 1LLU;
	_1e9c5e35b_OPT_MATH=_3123_level >= 1LLU;
	_1e9c5e35b_OPT_ACCESS=_3123_level >= 1LLU;
	_1e9c5e35b_OPT_INLINE=_3123_level >= 1LLU;
	_1e9c5e35b_OPT_PTR=_3123_level >= 1LLU;
}



inline jule::Bool _1ea78a21b_is_letter(jule::I32 _7618_r) {
	if (static_cast<jule::U32>(_7618_r) <= 255LL) {
		return (_1ea858a26__PROPERTIES[static_cast<jule::Int>(static_cast<jule::U8>(_7618_r))] & 96LL) != 0LL;
	}
	return _1ea84b541_is_excluding_latin(_1ea858a26_LETTER,_7618_r);
}



inline jule::Bool _1ea84b541_is16(jule::Slice<_1ea84b541_Range16> _1919_ranges,jule::U16 _19128_r) {
	if ((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LL)) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_4796934384:;
			if (it != expr.end()) {
				jule::Int _1ea84b541_i = it - expr.begin();
				{
					_1ea84b541_Range16* _19417_range = (&(_1919_ranges.__at(_1ea84b541_i)));
					{
						if (_19128_r < _19417_range->_field_lo) {
							return false;
						}
						if (_19128_r <= _19417_range->_field_hi) {
							return (_19417_range->_field_stride == 1LL) || (jule::mod(_19128_r - _19417_range->_field_lo,_19417_range->_field_stride) == 0LL);
						}
					}
				}
				_iter_next_4796934384:;
				++it;
				_1ea84b541_i++;
				goto _iter_begin_4796934384;
			}
			_iter_end_4796934384:;
		}
		return false;
	}
	jule::Int _20813_lo = 0LL;
	jule::I64 _20913_hi = _1919_ranges.len();
	while (_20813_lo < _20913_hi) {
		{
			jule::Int _21113_m = _20813_lo + jule::unsafe_div(_20913_hi - _20813_lo,2LL);
			_1ea84b541_Range16* _21213_range = (&(_1919_ranges[_21113_m]));
			{
				if ((_21213_range->_field_lo <= _19128_r) && (_19128_r <= _21213_range->_field_hi)) {
					return (_21213_range->_field_stride == 1LL) || (jule::mod(_19128_r - _21213_range->_field_lo,_21213_range->_field_stride) == 0LL);
				}
				if (_19128_r < _21213_range->_field_lo) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::Int>(_21113_m + 1LL);
				}
			}
		}
	_iter_next_4796929728:;
	}
	_iter_end_4796929728:;
	return false;
}



inline jule::Bool _1ea84b541_is32(jule::Slice<_1ea84b541_Range32> _2289_ranges,jule::U32 _22828_r) {
	if (_2289_ranges.len() <= 18LL) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_4796945168:;
			if (it != expr.end()) {
				jule::Int _1ea84b541_i = it - expr.begin();
				{
					_1ea84b541_Range32* _23117_range = (&(_2289_ranges.__at(_1ea84b541_i)));
					{
						if (_22828_r < _23117_range->_field_lo) {
							return false;
						}
						if (_22828_r <= _23117_range->_field_hi) {
							return (_23117_range->_field_stride == 1LL) || (jule::mod(_22828_r - _23117_range->_field_lo,_23117_range->_field_stride) == 0LL);
						}
					}
				}
				_iter_next_4796945168:;
				++it;
				_1ea84b541_i++;
				goto _iter_begin_4796945168;
			}
			_iter_end_4796945168:;
		}
		return false;
	}
	jule::Int _24513_lo = 0LL;
	jule::I64 _24613_hi = _2289_ranges.len();
	while (_24513_lo < _24613_hi) {
		{
			jule::Int _24813_m = _24513_lo + jule::unsafe_div(_24613_hi - _24513_lo,2LL);
			_1ea84b541_Range32* _24913_range = (&(_2289_ranges[_24813_m]));
			{
				if ((_24913_range->_field_lo <= _22828_r) && (_22828_r <= _24913_range->_field_hi)) {
					return (_24913_range->_field_stride == 1LL) || (jule::mod(_22828_r - _24913_range->_field_lo,_24913_range->_field_stride) == 0LL);
				}
				if (_22828_r < _24913_range->_field_lo) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::Int>(_24813_m + 1LL);
				}
			}
		}
	_iter_next_4796942736:;
	}
	_iter_end_4796942736:;
	return false;
}



inline jule::Bool _1ea84b541_is_excluding_latin(jule::Ptr<_1ea84b541_RangeTable> _27823_range_tab,jule::I32 _27847_r) {
	{
		jule::Slice<_1ea84b541_Range16> &_28014_r16 = _27823_range_tab->_field_r16;
		jule::Int _28213_off = _27823_range_tab->_field_latin_offset;
		if ((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(_28014_r16[_28014_r16.len() - 1LL]._field_hi))) {
			return _1ea84b541_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(_27847_r));
		}
	}
	jule::Slice<_1ea84b541_Range32> &_28710_r32 = _27823_range_tab->_field_r32;
	if ((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(_28710_r32[0LL]._field_lo))) {
		return _1ea84b541_is32(_28710_r32,static_cast<jule::U32>(_27847_r));
	}
	return false;
}



inline jule::Bool _1ea7465e5_is_unary_op(jule::Str _31720_kind) {
	{
		auto &expr = _1ea7465e5_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_4797161872:;
		if (it != expr.end()) {
			jule::Str &_1ea7465e5_op = *it;
			{
				if (_31720_kind == _1ea7465e5_op) {
					return true;
				}
			}
			_iter_next_4797161872:;
			++it;
			goto _iter_begin_4797161872;
		}
		_iter_end_4797161872:;
	}
	return false;
}



inline jule::Bool _1ea7465e5_is_bin_op(jule::Str _32818_kind) {
	{
		auto &expr = _1ea7465e5_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_4797165008:;
		if (it != expr.end()) {
			jule::Str &_1ea7465e5_op = *it;
			{
				if (_32818_kind == _1ea7465e5_op) {
					return true;
				}
			}
			_iter_next_4797165008:;
			++it;
			goto _iter_begin_4797165008;
		}
		_iter_end_4797165008:;
	}
	return false;
}



inline jule::Bool _1ea7465e5_is_str(jule::Str _35015_k) {
	return (_35015_k != jule::Str()) && ((_35015_k[0LL] == '\"') || _1ea7465e5_is_raw_str(_35015_k));
}



inline jule::Bool _1ea7465e5_is_raw_str(jule::Str _35219_k) {
	return (_35219_k != jule::Str()) && (_35219_k[0LL] == '`');
}



inline jule::Bool _1ea7465e5_is_rune(jule::Str _35516_k) {
	return (_35516_k != jule::Str()) && (_35516_k[0LL] == '\'');
}



inline jule::Bool _1ea7465e5_is_bool(jule::Str _35916_k) {
	return (_35916_k == jule::Str("true", 4)) || (_35916_k == jule::Str("false", 5));
}



inline jule::Bool _1ea7465e5_contains_any(jule::Str _36117_s,jule::Str _36125_bytes) {
	{
		auto &expr = _36125_bytes;
		auto it = expr.begin();
		_iter_begin_4797176352:;
		if (it != expr.end()) {
			jule::U8 &_1ea7465e5_b = *it;
			{
				jule::Int _36313_i = _36117_s.find(static_cast<jule::Str>(_1ea7465e5_b));
				if (_36313_i >= 0LL) {
					return true;
				}
			}
			_iter_next_4797176352:;
			++it;
			goto _iter_begin_4797176352;
		}
		_iter_end_4797176352:;
	}
	return false;
}



inline jule::Bool _1ea7465e5_is_float(jule::Str _37317_k) {
	if (_37317_k.has_prefix(jule::Str("0x", 2))) {
		return _1ea7465e5_contains_any(_37317_k,jule::Str(".pP", 3));
	}
	return _1ea7465e5_contains_any(_37317_k,jule::Str(".eE", 3));
}



inline jule::Bool _1ea7465e5_is_num(jule::Str _38215_k) {
	if (_38215_k == jule::Str()) {
		return false;
	}
	jule::U8 _3879_b = _38215_k[0LL];
	return (_3879_b == '.') || (('0' <= _3879_b) && (_3879_b <= '9'));
}



inline jule::Bool _1ea7465e5_is_ignore_ident(jule::Str _39724_ident) {
	return _39724_ident == jule::Str("_", 1);
}



inline jule::Bool _1ea7465e5_is_anon_ident(jule::Str _39922_ident) {
	return _39922_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _1ea7465e5_is_space(jule::I32 _41317_r) {
	{
		auto &expr = _1ea7465e5_SPACES;
		auto it = expr.begin();
		_iter_begin_4797195824:;
		if (it != expr.end()) {
			jule::I32 &_1ea7465e5_cr = *it;
			{
				if (_41317_r == _1ea7465e5_cr) {
					return true;
				}
			}
			_iter_next_4797195824:;
			++it;
			goto _iter_begin_4797195824;
		}
		_iter_end_4797195824:;
	}
	return false;
}



inline jule::Bool _1ea7465e5_is_letter(jule::I32 _42418_r) {
	return _1ea78a21b_is_letter(_42418_r);
}



inline jule::Bool _1ea7465e5_is_decimal(jule::U8 _44619_b) {
	return ('0' <= _44619_b) && (_44619_b <= '9');
}



inline jule::Bool _1ea7465e5_is_binary(jule::U8 _44818_b) {
	return (_44818_b == '0') || (_44818_b == '1');
}



inline jule::Bool _1ea7465e5_is_octal(jule::U8 _45017_b) {
	return ('0' <= _45017_b) && (_45017_b <= '7');
}



inline jule::Bool _1ea7465e5_is_hex(jule::U8 _45315_b) {
	{
		if (('0' <= _45315_b) && (_45315_b <= '9')) {
			_case_begin_4797208288:;
			{
				return true;
			}
		}
		else if (('a' <= _45315_b) && (_45315_b <= 'f')) {
			_case_begin_4797208384:;
			{
				return true;
			}
		}
		else if (('A' <= _45315_b) && (_45315_b <= 'F')) {
			_case_begin_4797207072:;
			{
				return true;
			}
		}
		else {
			_case_begin_4797201728:;
			{
				return false;
			}
		}
		_match_end_4797205008:;
	}
}



inline jule::Bool _1ea7465e5_is_assign(jule::Uint _46518_id) {
	return ((((((_46518_id == 2LLU) || (_46518_id == 31LLU)) || (_46518_id == 34LLU)) || (_46518_id == 20LLU)) || (_46518_id == 28LLU)) || (_46518_id == 3LLU)) || (_46518_id == 7LLU);
}



inline jule::Bool _1ea7465e5_is_postfix_op(jule::Str _47822_kind) {
	{
		auto &expr = _1ea7465e5_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_4797213680:;
		if (it != expr.end()) {
			jule::Str &_1ea7465e5_op = *it;
			{
				if (_47822_kind == _1ea7465e5_op) {
					return true;
				}
			}
			_iter_next_4797213680:;
			++it;
			goto _iter_begin_4797213680;
		}
		_iter_end_4797213680:;
	}
	return false;
}



inline jule::Bool _1ea7465e5_is_assign_op(jule::Str _48921_kind) {
	if (_1ea7465e5_is_postfix_op(_48921_kind)) {
		return true;
	}
	{
		auto &expr = _1ea7465e5_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_4797215440:;
		if (it != expr.end()) {
			jule::Str &_1ea7465e5_op = *it;
			{
				if (_48921_kind == _1ea7465e5_op) {
					return true;
				}
			}
			_iter_next_4797215440:;
			++it;
			goto _iter_begin_4797215440;
		}
		_iter_end_4797215440:;
	}
	return false;
}



inline jule::Ptr<_1ea701c98_File> _1ea701c98_new_file_set(jule::Str _6421_path) {
	return jule::new_struct<_1ea701c98_File>(new( std::nothrow ) _1ea701c98_File(jule::Slice<jule::U8>(),_6421_path,jule::Slice<_1ea7465e5_Token>()));
}



inline _1e8ea7cc0_Log _1ea703492_make_err(jule::Int _10513_row,jule::Int _10523_col,jule::Ptr<_1ea701c98_File>& _10534_f,jule::Str _10544_fmt,jule::Slice<jule::Any> _10557_args) {
	return _1e8ea7cc0_Log(1LLU,_10513_row,_10523_col,_10534_f->_method_path(),_1e8ea7cc0_logf(_10544_fmt,_10557_args),jule::Str(),jule::Str());
}



inline jule::Bool _1ea703492_bytes_has_prefix(jule::Slice<jule::U8>& _11522_bytes,jule::Str _11537_prefix) {
	if (_11522_bytes.len() < _11537_prefix.len()) {
		return false;
	}
	{
		auto &expr = _11537_prefix;
		auto it = expr.begin();
		_iter_begin_4797223088:;
		if (it != expr.end()) {
			jule::Int _1ea703492_i = it - expr.begin();
			{
				if (_11522_bytes[_1ea703492_i] != _11537_prefix.__at(_1ea703492_i)) {
					return false;
				}
			}
			_iter_next_4797223088:;
			++it;
			_1ea703492_i++;
			goto _iter_begin_4797223088;
		}
		_iter_end_4797223088:;
	}
	return true;
}



inline jule::Str _1ea703492_float_fmt_e(jule::Slice<jule::U8>& _12717_txt,jule::Int _12734_i) {
	jule::Str _12744_lit = jule::Str();
	(_12734_i)++;
	if (_12734_i >= _12717_txt.len()) {
		return _12744_lit;
	}
	jule::U8 _13313_b = _12717_txt[_12734_i];
	if ((_13313_b == '+') || (_13313_b == '-')) {
		(_12734_i)++;
		if (_12734_i >= _12717_txt.len()) {
			return _12744_lit;
		}
	}
	jule::Int _1419_first = _12734_i;
	for (; _12734_i < _12717_txt.len(); (_12734_i)++) {
		{
			_13313_b=_12717_txt[_12734_i];
			if ((!(_1ea7465e5_is_decimal(_13313_b)))) {
				goto _iter_end_4797234368;
			}
		}
	_iter_next_4797234368:;
	}
	_iter_end_4797234368:;
	if (_12734_i == _1419_first) {
		_12744_lit = jule::Str();
		return _12744_lit;
	}
	_12744_lit = static_cast<jule::Str>(_12717_txt.slice(0LL,_12734_i));
	return _12744_lit;
}



inline jule::Str _1ea703492_float_fmt_p(jule::Slice<jule::U8>& _15517_txt,jule::Int _15530_i) {
	return _1ea703492_float_fmt_e(_15517_txt,_15530_i);
}



inline jule::Str _1ea703492_float_fmt_dotnp(jule::Slice<jule::U8>& _15721_txt,jule::Int _15738_i) {
	if (_15721_txt[_15738_i] != '.') {
		return jule::Str();
	}
	(_15738_i)++;
	_julec_label_loop:;
	for (; _15738_i < _15721_txt.len(); (_15738_i)++) {
		{
			jule::U8 _16513_b = _15721_txt[_15738_i];
			{
				if (_1ea7465e5_is_decimal(_16513_b)) {
					_case_begin_4797261088:;
					{
						goto _iter_next_4797258928;
					}
				}
				else if (_1ea703492_is_float_fmt_p(_16513_b,_15738_i)) {
					_case_begin_4797261184:;
					{
						return _1ea703492_float_fmt_p(_15721_txt,_15738_i);
					}
				}
				else {
					_case_begin_4797260736:;
					{
						goto _iter_end_4797258928;
					}
				}
				_match_end_4797260624:;
			}
		}
	_iter_next_4797258928:;
	}
	_iter_end_4797258928:;
	return jule::Str();
}



inline jule::Str _1ea703492_float_fmt_dotfp(jule::Slice<jule::U8>& _17521_txt,jule::Int _17538_i) {
	_17538_i+=2LL;
	return _1ea703492_float_fmt_e(_17521_txt,_17538_i);
}



inline jule::Str _1ea703492_float_fmt_dotp(jule::Slice<jule::U8>& _18220_txt,jule::Int _18237_i) {
	(_18237_i)++;
	return _1ea703492_float_fmt_e(_18220_txt,_18237_i);
}



inline jule::Str _1ea703492_float_num(jule::Slice<jule::U8>& _18915_txt,jule::Int _18932_i) {
	jule::Str _18942_lit = jule::Str();
	(_18932_i)++;
	for (; _18932_i < _18915_txt.len(); (_18932_i)++) {
		{
			jule::U8 _19213_b = _18915_txt[_18932_i];
			if ((_18932_i > 1LL) && ((_19213_b == 'e') || (_19213_b == 'E'))) {
				_18942_lit = _1ea703492_float_fmt_e(_18915_txt,_18932_i);
				return _18942_lit;
			}
			if ((!(_1ea7465e5_is_decimal(_19213_b)))) {
				goto _iter_end_4797269008;
			}
		}
	_iter_next_4797269008:;
	}
	_iter_end_4797269008:;
	if (_18932_i == 1LL) {
		return _18942_lit;
	}
	_18942_lit = static_cast<jule::Str>(_18915_txt.slice(0LL,_18932_i));
	return _18942_lit;
}



inline jule::Str _1ea703492_common_num(jule::Slice<jule::U8>& _20716_txt) {
	jule::Str _20731_lit = jule::Str();
	jule::Int _20813_i = 0LL;
	_julec_label_loop:;
	for (; _20813_i < _20716_txt.len(); (_20813_i)++) {
		{
			jule::U8 _21113_b = _20716_txt[_20813_i];
			{
				if (_21113_b == '.') {
					_case_begin_4797278848:;
					{
						_20731_lit = _1ea703492_float_num(_20716_txt,_20813_i);
						return _20731_lit;
					}
				}
				else if (_1ea703492_is_float_fmt_e(_21113_b,_20813_i)) {
					_case_begin_4797278960:;
					{
						_20731_lit = _1ea703492_float_fmt_e(_20716_txt,_20813_i);
						return _20731_lit;
					}
				}
				else if ((!(_1ea7465e5_is_decimal(_21113_b)))) {
					_case_begin_4797279072:;
					{
						goto _iter_end_4797276464;
					}
				}
				_match_end_4797278672:;
			}
		}
	_iter_next_4797276464:;
	}
	_iter_end_4797276464:;
	if (_20813_i == 0LL) {
		return _20731_lit;
	}
	_20731_lit = static_cast<jule::Str>(_20716_txt.slice(0LL,_20813_i));
	return _20731_lit;
}



inline jule::Str _1ea703492_binary_num(jule::Slice<jule::U8>& _22516_txt) {
	jule::Str _22531_lit = jule::Str();
	if ((!(_1ea703492_bytes_has_prefix(_22516_txt,jule::Str("0b", 2))))) {
		_22531_lit = jule::Str();
		return _22531_lit;
	}
	if (_22516_txt.len() < 2LL) {
		return _22531_lit;
	}
	
	jule::Int _23413_i = 2LL;
	for (; _23413_i < _22516_txt.len(); (_23413_i)++) {
		{
			if ((!(_1ea7465e5_is_binary(_22516_txt[_23413_i])))) {
				goto _iter_end_4797285296;
			}
		}
	_iter_next_4797285296:;
	}
	_iter_end_4797285296:;
	if (_23413_i == 2LL) {
		return _22531_lit;
	}
	_22531_lit = static_cast<jule::Str>(_22516_txt.slice(0LL,_23413_i));
	return _22531_lit;
}



inline jule::Bool _1ea703492_is_float_fmt_e(jule::U8 _24719_b,jule::Int _24728_i) {
	return (_24728_i > 0LL) && ((_24719_b == 'e') || (_24719_b == 'E'));
}



inline jule::Bool _1ea703492_is_float_fmt_p(jule::U8 _24819_b,jule::Int _24828_i) {
	return (_24828_i > 0LL) && ((_24819_b == 'p') || (_24819_b == 'P'));
}



inline jule::Bool _1ea703492_is_float_fmt_dotnp(jule::Slice<jule::U8>& _25024_txt,jule::Int _25041_i) {
	if (_25024_txt[_25041_i] != '.') {
		return false;
	}
	(_25041_i)++;
	_julec_label_loop:;
	for (; _25041_i < _25024_txt.len(); (_25041_i)++) {
		{
			jule::U8 _25813_b = _25024_txt[_25041_i];
			{
				if (_1ea7465e5_is_decimal(_25813_b)) {
					_case_begin_4797300592:;
					{
						goto _iter_next_4797294544;
					}
				}
				else if (_1ea703492_is_float_fmt_p(_25813_b,_25041_i)) {
					_case_begin_4797300688:;
					{
						return true;
					}
				}
				else {
					_case_begin_4797300240:;
					{
						goto _iter_end_4797294544;
					}
				}
				_match_end_4797300128:;
			}
		}
	_iter_next_4797294544:;
	}
	_iter_end_4797294544:;
	return false;
}



inline jule::Bool _1ea703492_is_float_fmt_dotp(jule::Slice<jule::U8>& _26923_txt,jule::Int _26936_i) {
	{
		if (_26923_txt.len() < 3LL) {
			_case_begin_4797306160:;
			{
				goto _case_begin_4797306256;
			}
		}
		else if (_26923_txt[_26936_i] != '.') {
			_case_begin_4797306256:;
			{
				goto _case_begin_4797304800;
			}
		}
		else if ((_26923_txt[_26936_i + 1LL] != 'p') && (_26923_txt[_26936_i + 1LL] != 'P')) {
			_case_begin_4797304800:;
			{
				return false;
			}
		}
		else {
			_case_begin_4797304496:;
			{
				return true;
			}
		}
		_match_end_4797304320:;
	}
}



inline jule::Bool _1ea703492_is_float_fmt_dotfp(jule::Slice<jule::U8>& _27824_txt,jule::Int _27837_i) {
	{
		if (_27824_txt.len() < 4LL) {
			_case_begin_4797312112:;
			{
				goto _case_begin_4797312208;
			}
		}
		else if (_27824_txt[_27837_i] != '.') {
			_case_begin_4797312208:;
			{
				goto _case_begin_4797310752;
			}
		}
		else if ((_27824_txt[_27837_i + 1LL] != 'f') && (_27824_txt[_27837_i + 1LL] != 'F')) {
			_case_begin_4797310752:;
			{
				goto _case_begin_4797310864;
			}
		}
		else if ((_27824_txt[_27837_i + 2LL] != 'p') && (_27824_txt[_27837_i + 1LL] != 'P')) {
			_case_begin_4797310864:;
			{
				return false;
			}
		}
		else {
			_case_begin_4797310432:;
			{
				return true;
			}
		}
		_match_end_4797310256:;
	}
}



inline jule::Str _1ea703492_octal_num(jule::Slice<jule::U8>& _28815_txt) {
	jule::Str _28830_lit = jule::Str();
	if (_28815_txt[0LL] != '0') {
		_28830_lit = jule::Str();
		return _28830_lit;
	}
	if (_28815_txt.len() < 2LL) {
		return _28830_lit;
	}
	jule::Int _29613_octal_start = 1LL;
	if (_28815_txt[1LL] == 'o') {
		if (_28815_txt.len() < 3LL) {
			return _28830_lit;
		}
		(_29613_octal_start)++;
	}
	jule::Int _30513_i = _29613_octal_start;
	for (; _30513_i < _28815_txt.len(); (_30513_i)++) {
		{
			jule::U8 _30713_b = _28815_txt[_30513_i];
			if (_1ea703492_is_float_fmt_e(_30713_b,_30513_i)) {
				_28830_lit = _1ea703492_float_fmt_e(_28815_txt,_30513_i);
				return _28830_lit;
			}
			if ((!(_1ea7465e5_is_octal(_30713_b)))) {
				goto _iter_end_4797321360;
			}
		}
	_iter_next_4797321360:;
	}
	_iter_end_4797321360:;
	if (_30513_i == _29613_octal_start) {
		return _28830_lit;
	}
	_28830_lit = static_cast<jule::Str>(_28815_txt.slice(0LL,_30513_i));
	return _28830_lit;
}



inline jule::Str _1ea703492_hex_num(jule::Slice<jule::U8>& _32213_txt) {
	jule::Str _32228_lit = jule::Str();
	if (_32213_txt.len() < 3LL) {
		return _32228_lit;
	}
	if ((_32213_txt[0LL] != '0') || ((_32213_txt[1LL] != 'x') && (_32213_txt[1LL] != 'X'))) {
		return _32228_lit;
	}
	
	jule::Int _33113_i = 2LL;
	_julec_label_loop:;
	for (; _33113_i < _32213_txt.len(); (_33113_i)++) {
		{
			jule::U8 _33413_b = _32213_txt[_33113_i];
			{
				if (_1ea703492_is_float_fmt_dotp(_32213_txt,_33113_i)) {
					_case_begin_4797337072:;
					{
						_32228_lit = _1ea703492_float_fmt_dotp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_1ea703492_is_float_fmt_dotfp(_32213_txt,_33113_i)) {
					_case_begin_4797337184:;
					{
						_32228_lit = _1ea703492_float_fmt_dotfp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_1ea703492_is_float_fmt_p(_33413_b,_33113_i)) {
					_case_begin_4797337296:;
					{
						_32228_lit = _1ea703492_float_fmt_p(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_1ea703492_is_float_fmt_dotnp(_32213_txt,_33113_i)) {
					_case_begin_4797337408:;
					{
						_32228_lit = _1ea703492_float_fmt_dotnp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if ((!(_1ea7465e5_is_hex(_33413_b)))) {
					_case_begin_4797337520:;
					{
						goto _iter_end_4797334704;
					}
				}
				_match_end_4797336864:;
			}
		}
	_iter_next_4797334704:;
	}
	_iter_end_4797334704:;
	if (_33113_i == 2LL) {
		return _32228_lit;
	}
	_32228_lit = static_cast<jule::Str>(_32213_txt.slice(0LL,_33113_i));
	return _32228_lit;
}



inline jule::Str _1ea703492_hex_escape(jule::Slice<jule::U8>& _35916_txt,jule::Int _35929_n) {
	jule::Str _35939_seq = jule::Str();
	if (_35916_txt.len() < _35929_n) {
		return _35939_seq;
	}
	
	jule::Int _36513_i = 2LL;
	for (; _36513_i < _35929_n; (_36513_i)++) {
		{
			if ((!(_1ea7465e5_is_hex(_35916_txt[_36513_i])))) {
				return _35939_seq;
			}
		}
	_iter_next_4797345600:;
	}
	_iter_end_4797345600:;
	_35939_seq=static_cast<jule::Str>(_35916_txt.slice(0LL,_35929_n));
	return _35939_seq;
}



inline jule::Str _1ea703492_big_unicode_point_escape(jule::Slice<jule::U8>& _37730_txt) {
	return _1ea703492_hex_escape(_37730_txt,10LL);
}



inline jule::Str _1ea703492_little_unicode_point_escape(jule::Slice<jule::U8>& _37933_txt) {
	return _1ea703492_hex_escape(_37933_txt,6LL);
}



inline jule::Str _1ea703492_hex_byte_escape(jule::Slice<jule::U8>& _38121_txt) {
	return _1ea703492_hex_escape(_38121_txt,4LL);
}



inline jule::Str _1ea703492_byte_escape(jule::Slice<jule::U8>& _38417_txt) {
	jule::Str _38432_seq = jule::Str();
	if (_38417_txt.len() < 4LL) {
		return _38432_seq;
	}
	if (((!(_1ea7465e5_is_octal(_38417_txt[1LL]))) || (!(_1ea7465e5_is_octal(_38417_txt[2LL])))) || (!(_1ea7465e5_is_octal(_38417_txt[3LL])))) {
		return _38432_seq;
	}
	_38432_seq = static_cast<jule::Str>(_38417_txt.slice(0LL,4LL));
	return _38432_seq;
}



inline jule::Slice<_1e8ea7cc0_Log> _1ea703492_lex(jule::Ptr<_1ea701c98_File> _78016_f) {
	if (_78016_f == nullptr) {
		return nullptr;
	}
	_1ea703492_Lex _78513_lex = _1ea703492_Lex(jule::Slice<_1ea7465e5_Token>(),_78016_f,0LL,jule::Int(),-1LL,jule::Slice<_1e8ea7cc0_Log>());
	_78513_lex._method_new_line();
	_78513_lex._method_lex();
	if (_78513_lex._field_errors.len() > 0LL) {
		return _78513_lex._field_errors;
	}
	_78016_f->_field__tokens=_78513_lex._field_tokens;
	return nullptr;
}



inline jule::Bool _1ea70c204_find_module_file(jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>& _1126_dirents) {
	{
		auto &expr = _1126_dirents;
		auto it = expr.begin();
		_iter_begin_4797773664:;
		if (it != expr.end()) {
			jule::Ptr<_1e8e1506d_DirEntry> &_1ea70c204_d = *it;
			{
				if ((!(_1ea70c204_d->_field_stat->_method_is_dir())) && (_1ea70c204_d->_field_name == jule::Str("jule.mod", 8))) {
					return true;
				}
			}
			_iter_next_4797773664:;
			++it;
			goto _iter_begin_4797773664;
		}
		_iter_end_4797773664:;
	}
	return false;
}



inline jule::Str _1ea70c204_find_module_file_deep(jule::Str _2334_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>> _2517_dirents = ({
				auto except = _1e8e1506d_Directory::_static_method_read(_2334_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_4797774288;
					goto _iter_end_4797774288;
				} jule::Slice<jule::Ptr<_1e8e1506d_DirEntry>>();});
			});
			jule::Bool _2913_exist = _1ea70c204_find_module_file(_2517_dirents);
			if (_2913_exist) {
				return _2334_path;
			}
			jule::I64 _3413_n = _2334_path.len();
			_2334_path=_1e904e87d_dir(_2334_path);
			if (_2334_path.len() == _3413_n) {
				goto _iter_end_4797774288;
			}
		}
	_iter_next_4797774288:;
	}
	_iter_end_4797774288:;
	return jule::Str();
}



inline jule::Slice<_1e8ea7cc0_Log> _1ea70c204_check_module_file(jule::Str _4526_path) {
	jule::Slice<jule::U8> _469_bytes = ({
		auto except = _1e8e1b6a1_File::_static_method_read(_1e904e87d_join(jule::Slice<jule::Str>({_4526_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_1e8ea7cc0_Log>({_1e8ea7cc0_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
			return jule::Slice<_1e8ea7cc0_Log>({_1e8ea7cc0_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
		} jule::Slice<jule::U8>();});
	});
	jule::Str _539_s = static_cast<jule::Str>(_469_bytes).trim(jule::Str(" \t\v\n", 4));
	if (_539_s.len() != 0LL) {
		return jule::Slice<_1e8ea7cc0_Log>({_1e8ea7cc0_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file has syntax error(s)", 31),jule::Str(),jule::Str())});
	}
	return nullptr;
}



inline jule::Ptr<_1ea713260_FileInfo> _1ea713260_parse_file(jule::Ptr<_1ea701c98_File> _2223_f) {
	if (_2223_f == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1ea713260_FileInfo> _2713_finf = jule::new_struct<_1ea713260_FileInfo>(new( std::nothrow ) _1ea713260_FileInfo());
	std::tie(_2713_finf->_field_ast,_2713_finf->_field_errors) = _1ea713260_parse_fileset(_2223_f);
	if (_2713_finf->_field_errors.len() > 0LL) {
		_2713_finf->_field_ast=nullptr;
	}
	return _2713_finf;
}



inline std::tuple<jule::Ptr<_1ea6ecac9_Ast>,jule::Slice<_1e8ea7cc0_Log>> _1ea713260_parse_fileset(jule::Ptr<_1ea701c98_File> _5822_f) {
	jule::Ptr<_1eb381c13_Parser> _5913_p = jule::new_struct_ptr<_1eb381c13_Parser>(new( std::nothrow ) _1eb381c13_Parser());
	_5913_p->_method_parse(_5822_f);
	return std::make_tuple(_5913_p->_field_ast,_5913_p->_field_errors);
}



inline jule::Ptr<_1ea6ee955_ScopeTree> _1ea722e73_new_scope(void) {
	return jule::new_struct<_1ea6ee955_ScopeTree>(new( std::nothrow ) _1ea6ee955_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _1ea722e73_is_st(_1ea7465e5_Token _4610_current,_1ea7465e5_Token _4626_prev) {
	jule::Bool _4641_ok = jule::Bool();
	jule::Bool _4651_terminated = jule::Bool();
	_4641_ok=(_4610_current._field_id == 5LLU) || (_4626_prev._field_row < _4610_current._field_row);
	_4651_terminated=_4610_current._field_id == 5LLU;
	return std::make_tuple(_4641_ok,_4651_terminated);
}



inline jule::Bool _1ea722e73_prev_is_incomplete_expr(jule::Slice<_1ea7465e5_Token>& _5229_tokens,jule::Int& _5247_i) {
	if ((_5247_i > 1LL) && (_5229_tokens[_5247_i - 2LL]._field_id == 23LLU)) {
		return false;
	}
	{
		_1ea7465e5_Token* _5913_prev = (&(_5229_tokens[_5247_i - 1LL]));
		return (_5913_prev->_field_id == 20LLU) || (((_5913_prev->_field_id == 7LLU) && _1ea7465e5_is_bin_op(_5913_prev->_field_kind)) && (_5913_prev->_field_row < _5229_tokens[_5247_i]._field_row));
	}
}



inline std::tuple<jule::Int,jule::Bool> _1ea722e73_next_st_pos(jule::Slice<_1ea7465e5_Token>& _6817_tokens,jule::Int _6834_start) {
	jule::Int _6913_brace_n = 0LL;
	jule::Int _7013_i = _6834_start;
	for (; _7013_i < _6817_tokens.len(); (_7013_i)++) {
		{
			jule::Bool _7217_ok = false;
			jule::Bool _7317_terminated = false;
			_1ea7465e5_Token _7413_tok = _6817_tokens[_7013_i];
			{
				auto &_match_expr{ _7413_tok._field_id };
				if (_match_expr == 3LLU) {
					_case_begin_4798009872:;
					{
						{
							auto &_match_expr{ _7413_tok._field_kind };
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_4798015808:;
								{
									if ((_6913_brace_n == 0LL) && (_7013_i > _6834_start)) {
										if ((!(_1ea722e73_prev_is_incomplete_expr(_6817_tokens,_7013_i)))) {
											std::tie(_7217_ok,_7317_terminated) = _1ea722e73_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
											if (_7217_ok) {
												goto _julec_label_return;
											}
										}
									}
									(_6913_brace_n)++;
								}
							}
							else {
								_case_begin_4798009968:;
								{
									(_6913_brace_n)--;
									if ((_6913_brace_n == 0LL) && ((_7013_i + 1LL) < _6817_tokens.len())) {
										std::tie(_7217_ok,_7317_terminated) = _1ea722e73_is_st(_6817_tokens[_7013_i + 1LL],_7413_tok);
										if (_7217_ok) {
											(_7013_i)++;
											goto _julec_label_return;
										}
									}
								}
							}
							_match_end_4798010208:;
						}
						goto _iter_next_4798005440;
					}
				}
				_match_end_4798009792:;
			}
			if (_6913_brace_n != 0LL) {
				goto _iter_next_4798005440;
			}
			if (_7013_i > _6834_start) {
				if (_1ea722e73_prev_is_incomplete_expr(_6817_tokens,_7013_i)) {
					goto _iter_next_4798005440;
				}
				std::tie(_7217_ok,_7317_terminated) = _1ea722e73_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
			} else {
				std::tie(_7217_ok,_7317_terminated) = _1ea722e73_is_st(_7413_tok,_7413_tok);
			}
			if ((!(_7217_ok))) {
				goto _iter_next_4798005440;
			}
			_julec_label_return:;
			if (_7317_terminated) {
				(_7013_i)++;
			}
			return std::make_tuple(_7013_i,_7317_terminated);
		}
	_iter_next_4798005440:;
	}
	_iter_end_4798005440:;
	return std::make_tuple(_7013_i,false);
}



inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Bool> _1ea722e73_skip_st(jule::Int& _13117_i,jule::Slice<_1ea7465e5_Token> _13129_tokens) {
	jule::Int _1329_start = _13117_i;
	jule::Bool _13313_terminated = false;
	std::tie(_13117_i,_13313_terminated) = _1ea722e73_next_st_pos(_13129_tokens,_1329_start);
	jule::Slice<_1ea7465e5_Token> _13513_st_tokens = _13129_tokens.slice(_1329_start,_13117_i);
	if (_13313_terminated) {
		if (_13513_st_tokens.len() == 1LL) {
			std::tie(_13513_st_tokens,_13313_terminated) = _1ea722e73_skip_st(_13117_i,_13129_tokens);
			return std::make_tuple(_13513_st_tokens,_13313_terminated);
		}
		_13513_st_tokens=_13513_st_tokens.slice(0LL,_13513_st_tokens.len() - 1LL);
	}
	return std::make_tuple(_13513_st_tokens,_13313_terminated);
}



inline jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _1ea722e73_split_stmts(jule::Slice<_1ea7465e5_Token>& _15321_tokens) {
	jule::Slice<jule::Ptr<_1ea722e73_Stmt>> _15413_stms = nullptr;
	jule::Int _15513_pos = 0LL;
	while (_15513_pos < _15321_tokens.len()) {
		{
			jule::Slice<_1ea7465e5_Token> _15718_tokens;
			jule::Bool _15726_terminated;
			std::tie(_15718_tokens,_15726_terminated) = _1ea722e73_skip_st(_15513_pos,_15321_tokens);
			_15413_stms.push(jule::new_struct<_1ea722e73_Stmt>(new( std::nothrow ) _1ea722e73_Stmt(_15718_tokens,_15726_terminated)));
		}
	_iter_next_4798035888:;
	}
	_iter_end_4798035888:;
	return _15413_stms;
}



inline jule::Ptr<_1ea715b69_CallData> _1ea715b69_get_call_data(jule::Slice<_1ea7465e5_Token>& _4523_tokens) {
	jule::Ptr<_1ea715b69_CallData> _4613_data = jule::new_struct<_1ea715b69_CallData>(new( std::nothrow ) _1ea715b69_CallData());
	std::tie(_4613_data->_field_expr_tokens,_4613_data->_field_args_tokens) = _1eb381c13_range_last(_4523_tokens);
	if (_4613_data->_field_expr_tokens.len() == 0LL) {
		return _4613_data;
	}
	_1ea7465e5_Token _539_token = _4613_data->_field_expr_tokens[_4613_data->_field_expr_tokens.len() - 1LL];
	if ((_539_token._field_id == 3LLU) && (_539_token._field_kind == jule::Str("]", 1))) {
		std::tie(_4613_data->_field_expr_tokens,_4613_data->_field_generics_tokens) = _1eb381c13_range_last(_4613_data->_field_expr_tokens);
	}
	return _4613_data;
}



inline jule::Slice<_1ea7465e5_Token> _1ea715b69_get_block_expr(jule::Slice<_1ea7465e5_Token>& _6124_tokens) {
	jule::Int _6213_brace_n = 0LL;
	jule::Int _6313_skip_to_next_brace_close = 0LL;
	{
		auto &expr = _6124_tokens;
		auto it = expr.begin();
		_iter_begin_4798052544:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token &_1ea715b69_tok = *it;
			{
				{
					auto &_match_expr{ _1ea715b69_tok._field_id };
					if (_match_expr == 16LLU || _match_expr == 17LLU || _match_expr == 35LLU) {
						_case_begin_4798054928:;
						{
							(_6313_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == 3LLU) {
						_case_begin_4798055040:;
						{
							{
								auto &_match_expr{ _1ea715b69_tok._field_kind };
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_4798058512:;
									{
										if ((_6213_brace_n > 0LL) || (_6313_skip_to_next_brace_close > 0LL)) {
											if (_6313_skip_to_next_brace_close > 0LL) {
												(_6313_skip_to_next_brace_close)--;
											}
											(_6213_brace_n)++;
											goto _match_end_4798057216;
										}
										return _6124_tokens.slice(0LL,_1ea715b69_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_4798058992:;
									{
										(_6213_brace_n)++;
									}
								}
								else {
									_case_begin_4798055200:;
									{
										(_6213_brace_n)--;
									}
								}
								_match_end_4798057216:;
							}
						}
					}
					_match_end_4798054464:;
				}
			}
			_iter_next_4798052544:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4798052544;
		}
		_iter_end_4798052544:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Slice<_1ea7465e5_Token>> _1ea715b69_split_colon(jule::Slice<_1ea7465e5_Token>& _9521_tokens) {
	jule::Int _9613_range_n = 0LL;
	{
		auto &expr = _9521_tokens;
		auto it = expr.begin();
		_iter_begin_4798054000:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token &_1ea715b69_token = *it;
			{
				{
					auto &_match_expr{ _1ea715b69_token._field_id };
					if (_match_expr == 3LLU) {
						_case_begin_4798064384:;
						{
							{
								auto &_match_expr{ _1ea715b69_token._field_kind };
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_4798066784:;
									{
										(_9613_range_n)++;
										goto _iter_next_4798054000;
									}
								}
								else {
									_case_begin_4798064608:;
									{
										(_9613_range_n)--;
									}
								}
								_match_end_4798064864:;
							}
						}
					}
					else if (_match_expr == 11LLU) {
						_case_begin_4798064496:;
						{
							if (_9613_range_n < 1LL) {
								jule::Slice<_1ea7465e5_Token> _11325_l = _9521_tokens.slice(0LL,_1ea715b69_i);
								jule::Slice<_1ea7465e5_Token> _11425_r = _9521_tokens.slice(_1ea715b69_i + 1LL);
								return std::make_tuple(_11325_l,_11425_r);
							}
						}
					}
					_match_end_4798063920:;
				}
			}
			_iter_next_4798054000:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4798054000;
		}
		_iter_end_4798054000:;
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_1ea7465e5_Token> _1ea715b69_eliminate_comments(jule::Slice<_1ea7465e5_Token>& _12228_tokens) {
	jule::Slice<_1ea7465e5_Token> _12313_cutted = nullptr;
	{
		auto &expr = _12228_tokens;
		auto it = expr.begin();
		_iter_begin_4798063712:;
		if (it != expr.end()) {
			_1ea7465e5_Token _1ea715b69_token = *it;
			{
				if (_1ea715b69_token._field_id != 18LLU) {
					_12313_cutted.push(_1ea715b69_token);
				}
			}
			_iter_next_4798063712:;
			++it;
			goto _iter_begin_4798063712;
		}
		_iter_end_4798063712:;
	}
	return _12313_cutted;
}



inline jule::Int _1ea715b69_find_lowest_prec_op(jule::Slice<_1ea7465e5_Token>& _13425_tokens) {
	jule::U8 _13913_prec = 255LLU;
	jule::Int _14013_prec_pos = -1LL;
	jule::Int _14213_brace_n = 0LL;
	jule::Bool _14313_skip_to_next_brace_open = false;
	{
		auto &expr = _13425_tokens;
		auto it = expr.begin();
		_iter_begin_4798078272:;
		if (it != expr.end()) {
			jule::Int _1ea715b69_i = it - expr.begin();
			_1ea7465e5_Token &_1ea715b69_token = *it;
			{
				{
					if (_1ea715b69_token._field_id == 3LLU) {
						_case_begin_4798080800:;
						{
							{
								auto &_match_expr{ _1ea715b69_token._field_kind };
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_4798084544:;
									{
										_14313_skip_to_next_brace_open=false;
										goto _case_begin_4798084640;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_4798084640:;
									{
										(_14213_brace_n)++;
									}
								}
								else {
									_case_begin_4798081520:;
									{
										(_14213_brace_n)--;
									}
								}
								_match_end_4798082288:;
							}
							goto _iter_next_4798078272;
						}
					}
					else if (_14313_skip_to_next_brace_open) {
						_case_begin_4798080912:;
						{
							goto _iter_next_4798078272;
						}
					}
					else if (_1ea715b69_token._field_id == 16LLU) {
						_case_begin_4798081024:;
						{
							_14313_skip_to_next_brace_open=true;
							goto _iter_next_4798078272;
						}
					}
					else if (_1ea715b69_i == 0LL) {
						_case_begin_4798081136:;
						{
							goto _iter_next_4798078272;
						}
					}
					else if (_1ea715b69_token._field_id != 7LLU) {
						_case_begin_4798081248:;
						{
							goto _iter_next_4798078272;
						}
					}
					else if (_14213_brace_n > 0LL) {
						_case_begin_4798081360:;
						{
							goto _iter_next_4798078272;
						}
					}
					_match_end_4798080512:;
				}
				_1ea7465e5_Token _17813_left = _13425_tokens[_1ea715b69_i - 1LL];
				if ((_17813_left._field_id == 7LLU) || (_17813_left._field_id == 11LLU)) {
					goto _iter_next_4798078272;
				}
				if (((_1ea715b69_i > 1LL) && (_17813_left._field_id == 3LLU)) && (_17813_left._field_kind == jule::Str("]", 1))) {
					_1ea7465e5_Token _18617_lleft = _13425_tokens[_1ea715b69_i - 2LL];
					if ((_18617_lleft._field_id == 3LLU) && (_18617_lleft._field_kind == jule::Str("[", 1))) {
						if ((_1ea715b69_token._field_kind == jule::Str("&", 1)) || (_1ea715b69_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_4798078272;
						}
					}
				}
				jule::U8 _19513_p = _1ea715b69_token._method_prec();
				if ((_19513_p != 0LL) && (_19513_p <= _13913_prec)) {
					_13913_prec=_19513_p;
					_14013_prec_pos=_1ea715b69_i;
				}
			}
			_iter_next_4798078272:;
			++it;
			_1ea715b69_i++;
			goto _iter_begin_4798078272;
		}
		_iter_end_4798078272:;
	}
	return _14013_prec_pos;
}



inline jule::Ptr<_1ea6ee955_IdentExpr> _1ea715b69_build_ident_expr(_1ea7465e5_Token& _20526_token) {
	return jule::new_struct<_1ea6ee955_IdentExpr>(new( std::nothrow ) _1ea6ee955_IdentExpr(_20526_token,_20526_token._field_kind,false));
}



inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Int> _1ea715b69_get_range_expr_tokens(jule::Slice<_1ea7465e5_Token>& _21331_tokens) {
	jule::Int _21413_range_n = 0LL;
	jule::I64 _21513_i = _21331_tokens.len() - 1LL;
	for (; _21513_i >= 0LL; (_21513_i)--) {
		{
			_1ea7465e5_Token _21713_tok = _21331_tokens[_21513_i];
			if (_21713_tok._field_id == 3LLU) {
				{
					auto &_match_expr{ _21713_tok._field_kind };
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_4798105024:;
						{
							(_21413_range_n)++;
						}
					}
					else {
						_case_begin_4798103264:;
						{
							(_21413_range_n)--;
						}
					}
					_match_end_4798103360:;
				}
			}
			if (_21413_range_n == 0LL) {
				return std::make_tuple(_21331_tokens.slice(0LL,_21513_i),_21413_range_n);
			}
		}
	_iter_next_4798098496:;
	}
	_iter_end_4798098496:;
	return std::make_tuple(nullptr,_21413_range_n);
}



inline jule::Bool _1eb382692_check_assign_tokens(jule::Slice<_1ea7465e5_Token>& _1625_tokens) {
	if ((_1625_tokens.len() == 0LL) || (!(_1ea7465e5_is_assign(_1625_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_4798109984:;
		if (it != expr.end()) {
			_1ea7465e5_Token &_1eb382692_t = *it;
			{
				if (_1eb382692_t._field_id == 3LLU) {
					{
						auto &_match_expr{ _1eb382692_t._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4798113936:;
							{
								(_2113_brace_n)++;
							}
						}
						else {
							_case_begin_4798112160:;
							{
								(_2113_brace_n)--;
							}
						}
						_match_end_4798112256:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_4798109984;
				} else if ((_1eb382692_t._field_id == 7LLU) && _1ea7465e5_is_assign_op(_1eb382692_t._field_kind)) {
					return true;
				}
			}
			_iter_next_4798109984:;
			++it;
			goto _iter_begin_4798109984;
		}
		_iter_end_4798109984:;
	}
	return false;
}



inline _1e8ea7cc0_Log _1eb381c13_make_err(jule::Int _5013_row,jule::Int _5023_col,jule::Ptr<_1ea701c98_File>& _5034_f,jule::Str _5044_fmt,jule::Slice<jule::Any> _5057_args) {
	return _1e8ea7cc0_Log(1LLU,_5013_row,_5023_col,_5034_f->_method_path(),_1e8ea7cc0_logf(_5044_fmt,_5057_args),jule::Str(),jule::Str());
}



inline jule::Slice<_1ea7465e5_Token> _1eb381c13_range(jule::Int& _6915_i,jule::Str _6923_open,jule::Str _6940_close,jule::Slice<_1ea7465e5_Token>& _6963_tokens) {
	if (_6915_i >= _6963_tokens.len()) {
		return nullptr;
	}
	_1ea7465e5_Token _749_tok = _6963_tokens[_6915_i];
	if ((_749_tok._field_id != 3LLU) || (_749_tok._field_kind != _6923_open)) {
		return nullptr;
	}
	(_6915_i)++;
	jule::Int _8013_range_n = 1LL;
	jule::Int _819_start = _6915_i;
	for (; (_8013_range_n != 0LL) && (_6915_i < _6963_tokens.len()); (_6915_i)++) {
		{
			_1ea7465e5_Token _8313_token = _6963_tokens[_6915_i];
			if (_8313_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _8313_token._field_kind };
					if (_match_expr == _6923_open) {
						_case_begin_4798129920:;
						{
							(_8013_range_n)++;
						}
					}
					else if (_match_expr == _6940_close) {
						_case_begin_4798130032:;
						{
							(_8013_range_n)--;
						}
					}
					_match_end_4798129824:;
				}
			}
		}
	_iter_next_4798126640:;
	}
	_iter_end_4798126640:;
	return _6963_tokens.slice(_819_start,_6915_i - 1LL);
}



inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Slice<_1ea7465e5_Token>> _1eb381c13_range_last(jule::Slice<_1ea7465e5_Token>& _10220_tokens) {
	jule::Slice<_1ea7465e5_Token> _10239_cutted = jule::Slice<_1ea7465e5_Token>();
	jule::Slice<_1ea7465e5_Token> _10256_cut = jule::Slice<_1ea7465e5_Token>();
	if (_10220_tokens.len() == 0LL) {
		_10239_cutted = _10220_tokens;
		_10256_cut = nullptr;
		return std::make_tuple(_10239_cutted,_10256_cut);
	} else if (_10220_tokens[_10220_tokens.len() - 1LL]._field_id != 3LLU) {
		_10239_cutted = _10220_tokens;
		_10256_cut = nullptr;
		return std::make_tuple(_10239_cutted,_10256_cut);
	}
	jule::Int _10913_brace_n = 0LL;
	jule::I64 _11013_i = _10220_tokens.len() - 1LL;
	for (; _11013_i >= 0LL; (_11013_i)--) {
		{
			_1ea7465e5_Token _11213_token = _10220_tokens[_11013_i];
			if (_11213_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _11213_token._field_kind };
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_4798142176:;
						{
							(_10913_brace_n)++;
							goto _iter_next_4798119104;
						}
					}
					else {
						_case_begin_4798140416:;
						{
							(_10913_brace_n)--;
						}
					}
					_match_end_4798140512:;
				}
			}
			if (_10913_brace_n == 0LL) {
				_10239_cutted = _10220_tokens.slice(0LL,_11013_i);
				_10256_cut = _10220_tokens.slice(_11013_i);
				return std::make_tuple(_10239_cutted,_10256_cut);
			}
		}
	_iter_next_4798119104:;
	}
	_iter_end_4798119104:;
	_10239_cutted = _10220_tokens;
	_10256_cut = nullptr;
	return std::make_tuple(_10239_cutted,_10256_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_1ea7465e5_Token>>,jule::Slice<_1e8ea7cc0_Log>> _1eb381c13_parts(jule::Slice<_1ea7465e5_Token>& _14015_tokens,jule::Uint _14032_id,jule::Bool _14045_expr_must) {
	if (_14015_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_1ea7465e5_Token>> _14513_parts = nullptr;
	jule::Slice<_1e8ea7cc0_Log> _14613_errors = nullptr;
	jule::Int _14813_range_n = 0LL;
	jule::Int _14913_last = 0LL;
	{
		auto &expr = _14015_tokens;
		auto it = expr.begin();
		_iter_begin_4798150752:;
		if (it != expr.end()) {
			jule::Int _1eb381c13_i = it - expr.begin();
			_1ea7465e5_Token &_1eb381c13_token = *it;
			{
				if (_1eb381c13_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1eb381c13_token._field_kind };
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4798155376:;
							{
								(_14813_range_n)++;
								goto _iter_next_4798150752;
							}
						}
						else {
							_case_begin_4798153600:;
							{
								(_14813_range_n)--;
							}
						}
						_match_end_4798153696:;
					}
				}
				if (_14813_range_n > 0LL) {
					goto _iter_next_4798150752;
				}
				if (_1eb381c13_token._field_id == _14032_id) {
					if (_14045_expr_must && ((_1eb381c13_i - _14913_last) <= 0LL)) {
						_1e8ea7cc0_Log _16921_err = _1eb381c13_make_err(_1eb381c13_token._field_row,_1eb381c13_token._field_column,_1eb381c13_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
						_14613_errors.push(_16921_err);
					}
					_14513_parts.push(_14015_tokens.slice(_14913_last,_1eb381c13_i));
					_14913_last=static_cast<jule::Int>(_1eb381c13_i + 1LL);
				}
			}
			_iter_next_4798150752:;
			++it;
			_1eb381c13_i++;
			goto _iter_begin_4798150752;
		}
		_iter_end_4798150752:;
	}
	if (_14913_last < _14015_tokens.len()) {
		_14513_parts.push(_14015_tokens.slice(_14913_last));
	} else if ((!(_14045_expr_must))) {
		_14513_parts.push(jule::Slice<_1ea7465e5_Token>());
	}
	return std::make_tuple(_14513_parts,_14613_errors);
}



inline jule::Str _1eb381c13_get_close_kind_of_brace(jule::Str _18628_left) {
	{
		auto &_match_expr{ _18628_left };
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_4798164432:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_4798164624:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_4798164720:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_4798152176:;
			{
				return jule::Str();
			}
		}
		_match_end_4798152272:;
	}
}



inline _1e8ea7cc0_Log _1eb381c13_compiler_err(_1ea7465e5_Token& _19518_token,jule::Str& _19533_fmt,jule::Slice<jule::Any> _19546_args) {
	return _1e8ea7cc0_Log(1LLU,_19518_token._field_row,_19518_token._field_column,_19518_token._field_file->_method_path(),_1e8ea7cc0_logf(_19533_fmt,_19546_args),_19518_token._field_file->_method_get_row(_19518_token._field_row),jule::Str());
}



inline void _1eb381c13_push_suggestion(_1e8ea7cc0_Log* _20631_log,jule::Str _20642_fmt,jule::Slice<jule::Any> _20655_args) {
	_20631_log->_field_suggestion=_1e8ea7cc0_logf(_20642_fmt,_20655_args);
}



inline jule::Ptr<_1ea6ee955_Comment> _1eb381c13_build_comment(_1ea7465e5_Token& _21023_token) {
	_21023_token._field_kind=_21023_token._field_kind.slice(2LL).trim(jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_1ea6ee955_Comment>(new( std::nothrow ) _1ea6ee955_Comment(_21023_token,_21023_token._field_kind));
}



inline jule::Str _1eb381c13_tokstoa(jule::Slice<_1ea7465e5_Token>& _21913_tokens) {
	jule::Str _22013_s = jule::Str();
	{
		auto &expr = _21913_tokens;
		auto it = expr.begin();
		_iter_begin_4798176848:;
		if (it != expr.end()) {
			_1ea7465e5_Token &_1eb381c13_token = *it;
			{
				_22013_s+=_1eb381c13_token._field_kind;
			}
			_iter_next_4798176848:;
			++it;
			goto _iter_begin_4798176848;
		}
		_iter_end_4798176848:;
	}
	return _22013_s;
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_build_void_type(void) {
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl());
}



inline jule::Ptr<_1ea6ee955_TypeDecl> _1eb6540c3_build_prim_type(_1ea7465e5_Token _2024_token) {
	return jule::new_struct<_1ea6ee955_TypeDecl>(new( std::nothrow ) _1ea6ee955_TypeDecl(_2024_token,jule::Any(jule::new_struct<_1ea6ee955_IdentTypeDecl>(new( std::nothrow ) _1ea6ee955_IdentTypeDecl(_2024_token,_2024_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_1ea7465e5_Token>,jule::Int> _1eb6540c3_split_map_range(jule::Slice<_1ea7465e5_Token>& _3525_tokens,jule::Int& _3547_i) {
	jule::Slice<_1ea7465e5_Token> _3557_range_tokens = jule::Slice<_1ea7465e5_Token>();
	jule::Int _3580_colon = jule::Int();
	_3580_colon=-1LL;
	jule::Int _3713_range_n = 0LL;
	jule::Int _389_start = _3547_i;
	for (; _3547_i < _3525_tokens.len(); (_3547_i)++) {
		{
			_1ea7465e5_Token _4013_token = _3525_tokens[_3547_i];
			if (_4013_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _4013_token._field_kind };
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_4798188720:;
						{
							(_3713_range_n)++;
							goto _iter_next_4798183008;
						}
					}
					else {
						_case_begin_4798186976:;
						{
							(_3713_range_n)--;
						}
					}
					_match_end_4798187424:;
				}
			}
			if (_3713_range_n == 0LL) {
				if ((_389_start + 1LL) > _3547_i) {
					return std::make_tuple(_3557_range_tokens,_3580_colon);
				}
				_3557_range_tokens=_3525_tokens.slice(_389_start + 1LL,_3547_i);
				goto _iter_end_4798183008;
			} else if (_3713_range_n != 1LL) {
				goto _iter_next_4798183008;
			}
			if ((_3580_colon == -1LL) && (_4013_token._field_id == 11LLU)) {
				_3580_colon=static_cast<jule::Int>((_3547_i - _389_start) - 1LL);
			}
		}
	_iter_next_4798183008:;
	}
	_iter_end_4798183008:;
	return std::make_tuple(_3557_range_tokens,_3580_colon);
}



inline void _1ec3e4b65_lshift_unsig(_1ec3e4b65_Const& _55822_c,_1ec3e4b65_Const& _55833_x) {
	jule::U64 _5599_l = _55822_c._method_as_u64();
	jule::U64 _5609_r = _55833_x._method_as_u64();
	_55822_c._method_set_u64(static_cast<jule::U64>(_5599_l << _5609_r));
}



inline void _1ec3e4b65_rshift_unsig(_1ec3e4b65_Const& _56422_c,_1ec3e4b65_Const& _56433_x) {
	jule::U64 _5659_l = _56422_c._method_as_u64();
	jule::U64 _5669_r = _56433_x._method_as_u64();
	_56422_c._method_set_u64(static_cast<jule::U64>(_5659_l >> _5669_r));
}



inline jule::Str _1ec3e5eda_real_kind_of(jule::Str _2421_kind) {
	{
		auto &_match_expr{ _2421_kind };
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_4800714448:;
			{
				return jule::Str("i64", 3);
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_4800714544:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_4800699936:;
			{
				return _2421_kind;
			}
		}
		_match_end_4800701616:;
	}
}



inline jule::Int _1ec3e5eda_bitsize_of(jule::Str _4019_k) {
	{
		auto &_match_expr{ _4019_k };
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_4800719584:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_4800719840:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_4800719936:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_4800720032:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_4800719120:;
			{
				return 64LL;
			}
		}
		else {
			_case_begin_4800716960:;
			{
				return -1LL;
			}
		}
		_match_end_4800717904:;
	}
}



inline jule::Str _1ec3e5eda_int_from_bits(jule::U64 _7222_bits) {
	{
		auto &_match_expr{ _7222_bits };
		if (_match_expr == 8LL) {
			_case_begin_4800726928:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_4800727024:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_4800727120:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4800726304:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_4800725376:;
			{
				return jule::Str();
			}
		}
		_match_end_4800725104:;
	}
}



inline jule::Str _1ec3e5eda_uint_from_bits(jule::U64 _8523_bits) {
	{
		auto &_match_expr{ _8523_bits };
		if (_match_expr == 8LL) {
			_case_begin_4800731520:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_4800731616:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_4800731712:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4800730896:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_4800729392:;
			{
				return jule::Str();
			}
		}
		_match_end_4800729536:;
	}
}



inline jule::Str _1ec3e5eda_float_from_bits(jule::U64 _9824_bits) {
	{
		auto &_match_expr{ _9824_bits };
		if (_match_expr == 32LL) {
			_case_begin_4800735904:;
			{
				return jule::Str("f32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4800736112:;
			{
				return jule::Str("f64", 3);
			}
		}
		else {
			_case_begin_4800733984:;
			{
				return jule::Str();
			}
		}
		_match_end_4800734128:;
	}
}



inline jule::Bool _1ec3e5eda_check_bit_float(jule::Str _12324_val,jule::Int _12334_bit) {
	jule::Int _12413_err;
	std::tie(std::ignore,_12413_err) = _1e9c4b6bc_parse_float(_12324_val,_12334_bit);
	return _12413_err == 0LLU;
}



inline jule::U64 _1ec3e5eda_bitsize_of_float(jule::F64 _13325_x) {
	{
		if ((-340282346638528860000000000000000000000.0 <= _13325_x) && (_13325_x <= 340282346638528860000000000000000000000.0)) {
			_case_begin_4800755824:;
			{
				return 32LLU;
			}
		}
		else {
			_case_begin_4800754160:;
			{
				return 64LLU;
			}
		}
		_match_end_4800753984:;
	}
}



inline jule::U64 _1ec3e5eda_bitsize_of_int(jule::I64 _14723_x) {
	{
		if ((-128LL <= _14723_x) && (_14723_x <= 127LL)) {
			_case_begin_4800758704:;
			{
				return 8LLU;
			}
		}
		else if ((-32768LL <= _14723_x) && (_14723_x <= 32767LL)) {
			_case_begin_4800758800:;
			{
				return 16LLU;
			}
		}
		else if ((-2147483648LL <= _14723_x) && (_14723_x <= 2147483647LL)) {
			_case_begin_4800758976:;
			{
				return 32LLU;
			}
		}
		else {
			_case_begin_4800756800:;
			{
				return 64LLU;
			}
		}
		_match_end_4800756624:;
	}
}



inline jule::U64 _1ec3e5eda_bitsize_of_uint(jule::U64 _16324_x) {
	{
		if (_16324_x <= 255LL) {
			_case_begin_4800764240:;
			{
				return 8LLU;
			}
		}
		else if (_16324_x <= 65535LL) {
			_case_begin_4800764336:;
			{
				return 16LLU;
			}
		}
		else if (_16324_x <= 4294967295LL) {
			_case_begin_4800764512:;
			{
				return 32LLU;
			}
		}
		else {
			_case_begin_4800762416:;
			{
				return 64LLU;
			}
		}
		_match_end_4800762240:;
	}
}



inline jule::F64 _1ec3e8d67_min(jule::Str _4316_k) {
	_4316_k=_1ec3e5eda_real_kind_of(_4316_k);
	{
		auto &_match_expr{ _4316_k };
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4800769312:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4800769408:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4800769504:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4800768336:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4800768432:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4800768528:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_4800766128:;
			{
				return 0LL;
			}
		}
		_match_end_4800766432:;
	}
}



inline jule::F64 _1ec3e8d67_max(jule::Str _5816_k) {
	_5816_k=_1ec3e5eda_real_kind_of(_5816_k);
	{
		auto &_match_expr{ _5816_k };
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4800776000:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4800774736:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4800774832:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4800774928:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_4800775024:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4800775120:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4800775216:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4800775328:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4800775440:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4800775552:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_4800772672:;
			{
				return 0LL;
			}
		}
		_match_end_4800771984:;
	}
}



inline jule::Bool _1ec3e7717_is_i8_compatible(jule::Str _629_k) {
	_629_k=_1ec3e5eda_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _1ec3e7717_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_1ec3e5eda_real_kind_of(_1230_k);
	return (_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3));
}



inline jule::Bool _1ec3e7717_is_i32_compatible(jule::Str _1930_k) {
	_1930_k=_1ec3e5eda_real_kind_of(_1930_k);
	return (((_1930_k == jule::Str("i8", 2)) || (_1930_k == jule::Str("i16", 3))) || (_1930_k == jule::Str("i32", 3))) || (_1930_k == jule::Str("u8", 2));
}



inline jule::Bool _1ec3e7717_is_i64_compatible(jule::Str _2830_k) {
	_2830_k=_1ec3e5eda_real_kind_of(_2830_k);
	return (((_2830_k == jule::Str("i8", 2)) || (_2830_k == jule::Str("i16", 3))) || (_2830_k == jule::Str("i32", 3))) || (_2830_k == jule::Str("i64", 3));
}



inline jule::Bool _1ec3e7717_is_u8_compatible(jule::Str _3729_k) {
	_3729_k=_1ec3e5eda_real_kind_of(_3729_k);
	return _3729_k == jule::Str("u8", 2);
}



inline jule::Bool _1ec3e7717_is_u16_compatible(jule::Str _4330_k) {
	_4330_k=_1ec3e5eda_real_kind_of(_4330_k);
	return (_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3));
}



inline jule::Bool _1ec3e7717_is_u32_compatible(jule::Str _4930_k) {
	_4930_k=_1ec3e5eda_real_kind_of(_4930_k);
	return ((_4930_k == jule::Str("u8", 2)) || (_4930_k == jule::Str("u16", 3))) || (_4930_k == jule::Str("u32", 3));
}



inline jule::Bool _1ec3e7717_is_u64_compatible(jule::Str _5730_k) {
	_5730_k=_1ec3e5eda_real_kind_of(_5730_k);
	return (((_5730_k == jule::Str("u8", 2)) || (_5730_k == jule::Str("u16", 3))) || (_5730_k == jule::Str("u32", 3))) || (_5730_k == jule::Str("u64", 3));
}



inline jule::Bool _1ec3e7717_is_f32_compatible(jule::Str _6630_k) {
	_6630_k=_1ec3e5eda_real_kind_of(_6630_k);
	return _6630_k == jule::Str("f32", 3);
}



inline jule::Bool _1ec3e7717_is_f64_compatible(jule::Str _7230_k) {
	_7230_k=_1ec3e5eda_real_kind_of(_7230_k);
	return _7230_k == jule::Str("f64", 3);
}



inline jule::Bool _1ec3e7717_types_are_compatible(jule::Str _8033_k1,jule::Str _8042_k2) {
	_8033_k1=_1ec3e5eda_real_kind_of(_8033_k1);
	{
		auto &_match_expr{ _8033_k1 };
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_4800801776:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4800801872:;
			{
				return _1ec3e7717_is_i8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4800801968:;
			{
				return _1ec3e7717_is_i16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4800802064:;
			{
				return _1ec3e7717_is_i32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4800802256:;
			{
				return _1ec3e7717_is_i64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_4800802352:;
			{
				return _1ec3e7717_is_u8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4800802448:;
			{
				return _1ec3e7717_is_u16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4800802560:;
			{
				return _1ec3e7717_is_u32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4800802672:;
			{
				return _1ec3e7717_is_u64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4800803120:;
			{
				return _1ec3e7717_is_f32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4800803232:;
			{
				return _1ec3e7717_is_f64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_4800803344:;
			{
				return _8042_k2 == jule::Str("bool", 4);
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_4800803456:;
			{
				return _8042_k2 == jule::Str("str", 3);
			}
		}
		else {
			_case_begin_4800800848:;
			{
				return false;
			}
		}
		_match_end_4800800736:;
	}
}



inline jule::Bool _1ec3e7717_is_i16_greater(jule::Str _10127_k) {
	_10127_k=_1ec3e5eda_real_kind_of(_10127_k);
	return _10127_k == jule::Str("i8", 2);
}



inline jule::Bool _1ec3e7717_is_i32_greater(jule::Str _10727_k) {
	_10727_k=_1ec3e5eda_real_kind_of(_10727_k);
	return (_10727_k == jule::Str("i8", 2)) || (_10727_k == jule::Str("i16", 3));
}



inline jule::Bool _1ec3e7717_is_i64_greater(jule::Str _11327_k) {
	_11327_k=_1ec3e5eda_real_kind_of(_11327_k);
	return ((_11327_k == jule::Str("i8", 2)) || (_11327_k == jule::Str("i16", 3))) || (_11327_k == jule::Str("i32", 3));
}



inline jule::Bool _1ec3e7717_is_u16_greater(jule::Str _12127_k) {
	_12127_k=_1ec3e5eda_real_kind_of(_12127_k);
	return _12127_k == jule::Str("u8", 2);
}



inline jule::Bool _1ec3e7717_is_u32_greater(jule::Str _12727_k) {
	_12727_k=_1ec3e5eda_real_kind_of(_12727_k);
	return (_12727_k == jule::Str("u8", 2)) || (_12727_k == jule::Str("u16", 3));
}



inline jule::Bool _1ec3e7717_is_u64_greater(jule::Str _13427_k) {
	_13427_k=_1ec3e5eda_real_kind_of(_13427_k);
	return ((_13427_k == jule::Str("u8", 2)) || (_13427_k == jule::Str("u16", 3))) || (_13427_k == jule::Str("u32", 3));
}



inline jule::Bool _1ec3e7717_is_f32_greater(jule::Str _14223_k) {
	return _14223_k != jule::Str("f64", 3);
}



inline jule::Bool _1ec3e7717_is_f64_greater(jule::Str _14423_k) {
	return true;
}



inline jule::Bool _1ec3e7717_is_greater(jule::Str _14723_k1,jule::Str _14732_k2) {
	_14723_k1=_1ec3e5eda_real_kind_of(_14723_k1);
	{
		auto &_match_expr{ _14723_k1 };
		if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4800829808:;
			{
				return _1ec3e7717_is_i16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4800828592:;
			{
				return _1ec3e7717_is_i32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4800828688:;
			{
				return _1ec3e7717_is_i64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4800828784:;
			{
				return _1ec3e7717_is_u16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4800828880:;
			{
				return _1ec3e7717_is_u32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4800829072:;
			{
				return _1ec3e7717_is_u64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4800829184:;
			{
				return _1ec3e7717_is_f32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4800829296:;
			{
				return _1ec3e7717_is_f64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_4800829408:;
			{
				return true;
			}
		}
		else {
			_case_begin_4800825872:;
			{
				return false;
			}
		}
		_match_end_4800825056:;
	}
}



inline jule::Bool _1ec4784ce_is_sig_int(jule::Str _2723_k) {
	_2723_k=_1ec3e5eda_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _1ec4784ce_is_unsig_int(jule::Str _3625_k) {
	_3625_k=_1ec3e5eda_real_kind_of(_3625_k);
	return (((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3));
}



inline jule::Bool _1ec4784ce_is_int(jule::Str _4515_k) {
	return _1ec4784ce_is_sig_int(_4515_k) || _1ec4784ce_is_unsig_int(_4515_k);
}



inline jule::Bool _1ec4784ce_is_float(jule::Str _5017_k) {
	return (_5017_k == jule::Str("f32", 3)) || (_5017_k == jule::Str("f64", 3));
}



inline jule::Bool _1ec4784ce_is_num(jule::Str _5515_k) {
	return _1ec4784ce_is_int(_5515_k) || _1ec4784ce_is_float(_5515_k);
}



inline jule::Bool _1ec52e1de_is_ascii(jule::I32 _1017_r) {
	
	return _1017_r <= 127LLU;
}



inline jule::I32 _1ec52e1de_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if (_1816_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _2313_r = 0LL;
	if ((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL)) {
		jule::Int _2517_i = 0LL;
		_2313_r=static_cast<jule::I32>(_1ec52e1de_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _1e8e90769_decode_rune(_1816_bytes);
	}
	return _2313_r;
}



inline jule::Str _1ec52e1de_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _1ec52e1de_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if (_4215_bytes.len() == 0LL) {
		return jule::Str();
	}
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_4215_bytes.len()));
	jule::Int _4813_i = 0LL;
	while (_4813_i < _4215_bytes.len()) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];
			if (_5013_b == '\\') {
				_4713_s=jule::append(_4713_s,_1ec52e1de_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;
				jule::Int _5421_size;
				std::tie(_5418_r,_5421_size) = _1e8e90769_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_1e8e90769_append_rune(_4713_s,_5418_r);
			}
		}
	_iter_next_4800866720:;
	}
	_iter_end_4800866720:;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _1ec52e1de_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if ((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\')) {
		return std::make_tuple(_6241_seq,_6252_ok);
	}
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		if (_match_expr == '\\') {
			_case_begin_4800879984:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_4800880704:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_4800881200:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_4800881296:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_4800881392:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_4800881488:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_4800881600:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_4800881712:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_4800881824:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_4800881936:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_4800880624:;
	}
	_6252_ok=_6241_seq != 0LL;
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _1ec52e1de_rune_from_esq_seq(jule::Slice<jule::U8> _8422_bytes,jule::Int& _8442_i) {
	jule::U8 _8510_b;
	jule::Bool _8513_ok;
	std::tie(_8510_b,_8513_ok) = _1ec52e1de_try_btoa_common_esq(_8422_bytes.slice(_8442_i));
	(_8442_i)++;
	if (_8513_ok) {
		(_8442_i)++;
		return static_cast<jule::I32>(_8510_b);
	}
	{
		auto &_match_expr{ _8422_bytes[_8442_i] };
		if (_match_expr == 'u') {
			_case_begin_4800894480:;
			{
				
				jule::U64 _9514_rc;
				std::tie(_9514_rc,std::ignore) = _1e9c683ba_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 5LL)),16LL,64LL);
				_8442_i+=5LL;
				jule::I32 _9713_r = static_cast<jule::I32>(_9514_rc);
				return _9713_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_4800894576:;
			{
				
				jule::U64 _10214_rc;
				std::tie(_10214_rc,std::ignore) = _1e9c683ba_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 9LL)),16LL,64LL);
				_8442_i+=9LL;
				jule::I32 _10413_r = static_cast<jule::I32>(_10214_rc);
				return _10413_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_4800894672:;
			{
				
				jule::Slice<jule::U8> _10913_seq = _8422_bytes.slice(_8442_i + 1LL,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11114_b;
				std::tie(_11114_b,std::ignore) = _1e9c683ba_parse_uint(static_cast<jule::Str>(_10913_seq),16LL,64LL);
				return static_cast<jule::I32>(_11114_b);
			}
		}
		else {
			_case_begin_4800894240:;
			{
				
				jule::Slice<jule::U8> _11613_seq = _8422_bytes.slice(_8442_i,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11814_b;
				std::tie(_11814_b,std::ignore) = _1e9c683ba_parse_uint(static_cast<jule::Str>(_11613_seq.slice(1LL)),8LL,64LL);
				return static_cast<jule::I32>(_11814_b);
			}
		}
		_match_end_4800893776:;
	}
}



inline jule::Slice<jule::U8> _1ec52e1de_str_esq_seq(jule::Slice<jule::U8> _12316_bytes,jule::Int& _12336_i) {
	jule::I32 _1249_r = _1ec52e1de_rune_from_esq_seq(_12316_bytes,_12336_i);
	if (_1249_r <= 255LL) {
		return jule::Slice<jule::U8>({static_cast<jule::U8>(_1249_r)});
	}
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1249_r));
}



inline jule::Bool _1eb627195_kind_uses_generics(jule::Ptr<_1ec1c55b1_TypeKind> _39923_k,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>& _39938_generics) {
	jule::Str _4009_pk = _39923_k->_method_to_str();
	{
		auto &expr = _39938_generics;
		auto it = expr.begin();
		_iter_begin_4801783760:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_GenericDecl> &_1eb627195_g = *it;
			{
				if (_4009_pk.find(_1eb627195_g->_field_ident) != -1LL) {
					return true;
				}
			}
			_iter_next_4801783760:;
			++it;
			goto _iter_begin_4801783760;
		}
		_iter_end_4801783760:;
	}
	return false;
}



inline jule::Bool _1eb627195_parameter_uses_generics(jule::Ptr<_1eb627195_Param>& _40929_p,jule::Slice<jule::Ptr<_1ea6ee955_GenericDecl>>& _40941_generics) {
	if (_40929_p->_method_is_self()) {
		return false;
	}
	return _1eb627195_kind_uses_generics(_40929_p->_field_kind->_field_kind,_40941_generics);
}



inline jule::Str _1eb736eec_str_repeat(jule::Str _8415_sub,jule::Int _8429_n) {
	if (_8429_n == 0LL) {
		return jule::Str();
	}
	jule::Str _8913_s = jule::Str();
	for (; _8429_n > 0LL; (_8429_n)--) {
		{
			_8913_s+=_8415_sub;
		}
	_iter_next_4801792528:;
	}
	_iter_end_4801792528:;
	return _8913_s;
}



inline jule::Str _1eb736eec_build_doc(jule::Ptr<_1ea6ee955_CommentGroup> _9618_cg) {
	if (_9618_cg == nullptr) {
		return jule::Str();
	}
	jule::Str _10113_doc = jule::Str();
	{
		auto &expr = _9618_cg->_field_comments;
		auto it = expr.begin();
		_iter_begin_4801795008:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Comment> &_1eb736eec_c = *it;
			{
				_10113_doc+=_1eb736eec_c->_field_text;
				_10113_doc+=jule::Str(" ", 1);
			}
			_iter_next_4801795008:;
			++it;
			goto _iter_begin_4801795008;
		}
		_iter_end_4801795008:;
	}
	return _10113_doc;
}



inline jule::Ptr<_1ec1c55b1_TypeSymbol> _1eb736eec_build_type(jule::Ptr<_1ea6ee955_TypeDecl> _10919_t) {
	if (_10919_t == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(_10919_t,jule::Ptr<_1ec1c55b1_TypeKind>()));
}



inline jule::Ptr<_1ebcce31e_Value> _1eb736eec_build_expr(jule::Ptr<_1ea6ee955_Expr> _11819_expr) {
	if (_11819_expr == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(_11819_expr,jule::Ptr<_1ebcce31e_Data>()));
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb736eec_build_type_alias(jule::Ptr<_1ea6ee955_TypeAliasDecl> _12825_decl) {
	return jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(_12825_decl->_field_scope,_12825_decl->_field_public,_12825_decl->_field_cpp_linked,jule::Bool(),jule::Bool(),_12825_decl->_field_token,_12825_decl->_field_ident,_1eb736eec_build_type(_12825_decl->_field_kind),_1eb736eec_build_doc(_12825_decl->_field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ptr<_1eb29bdd6_Field> _1eb736eec_build_field(jule::Ptr<_1ea6ee955_FieldDecl> _14020_decl) {
	return jule::new_struct_ptr<_1eb29bdd6_Field>(new( std::nothrow ) _1eb29bdd6_Field(jule::Ptr<_1eb29bdd6_Struct>(),_14020_decl->_field_token,_14020_decl->_field_public,_14020_decl->_field_mutable,_14020_decl->_field_ident,_1eb736eec_build_type(_14020_decl->_field_kind)));
}



inline jule::Slice<jule::Ptr<_1eb29bdd6_Field>> _1eb736eec_build_fields(jule::Slice<jule::Ptr<_1ea6ee955_FieldDecl>>& _15022_decls) {
	jule::Slice<jule::Ptr<_1eb29bdd6_Field>> _15113_fields = jule::Slice<jule::Ptr<_1eb29bdd6_Field>>::alloc(0LL,static_cast<jule::I64>(_15022_decls.len()));
	{
		auto &expr = _15022_decls;
		auto it = expr.begin();
		_iter_begin_4801807744:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_FieldDecl> _1eb736eec_decl = *it;
			{
				_15113_fields.push(_1eb736eec_build_field(_1eb736eec_decl));
			}
			_iter_next_4801807744:;
			++it;
			goto _iter_begin_4801807744;
		}
		_iter_end_4801807744:;
	}
	return _15113_fields;
}



inline jule::Ptr<_1eb29bdd6_Struct> _1eb736eec_build_struct(jule::Ptr<_1ea6ee955_StructDecl> _15821_decl) {
	return jule::new_struct_ptr<_1eb29bdd6_Struct>(new( std::nothrow ) _1eb29bdd6_Struct(jule::Ptr<_1eb9ed0d7_Sema>(),jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>(),jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>(),_15821_decl->_field_token,_15821_decl->_field_ident,_1eb736eec_build_fields(_15821_decl->_field_fields),jule::Slice<jule::Ptr<_1eb627195_Fn>>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>(),_15821_decl->_field_public,_15821_decl->_field_cpp_linked,_15821_decl->_field_directives,_1eb736eec_build_doc(_15821_decl->_field_doc_comments),_15821_decl->_field_generics,jule::Slice<jule::Ptr<_1eb7c68e9_Trait>>(),jule::Slice<jule::Ptr<_1eb29bdd6_StructIns>>()));
}



inline jule::Ptr<_1eb627195_Param> _1eb736eec_build_param(jule::Ptr<_1ea6ee955_ParamDecl> _17120_decl) {
	return jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_17120_decl->_field_token,_17120_decl->_field_mutable,_17120_decl->_field_variadic,_17120_decl->_field_reference,_1eb736eec_build_type(_17120_decl->_field_kind),_17120_decl->_field_ident));
}



inline jule::Slice<jule::Ptr<_1eb627195_Param>> _1eb736eec_build_params(jule::Slice<jule::Ptr<_1ea6ee955_ParamDecl>>& _18222_decls) {
	jule::Slice<jule::Ptr<_1eb627195_Param>> _18313_params = jule::Slice<jule::Ptr<_1eb627195_Param>>::alloc(0LL,static_cast<jule::I64>(_18222_decls.len()));
	{
		auto &expr = _18222_decls;
		auto it = expr.begin();
		_iter_begin_4801817296:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_ParamDecl> _1eb736eec_decl = *it;
			{
				_18313_params.push(_1eb736eec_build_param(_1eb736eec_decl));
			}
			_iter_next_4801817296:;
			++it;
			goto _iter_begin_4801817296;
		}
		_iter_end_4801817296:;
	}
	return _18313_params;
}



inline jule::Ptr<_1eb627195_RetType> _1eb736eec_build_ret_type(jule::Ptr<_1ea6ee955_RetTypeDecl> _19023_decl) {
	if ((_19023_decl->_field_idents == nullptr) && (_19023_decl->_field_kind == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_1eb627195_RetType>(new( std::nothrow ) _1eb627195_RetType(_1eb736eec_build_type(_19023_decl->_field_kind),_19023_decl->_field_idents));
}



inline jule::Ptr<_1eb627195_Fn> _1eb736eec_build_fn(jule::Ptr<_1ea6ee955_FnDecl> _20017_decl) {
	return jule::new_struct_ptr<_1eb627195_Fn>(new( std::nothrow ) _1eb627195_Fn(jule::Ptr<_1eb9ed0d7_Sema>(),_20017_decl->_field_token,_20017_decl->_field_global,_20017_decl->_field_unsafety,_20017_decl->_field_public,_20017_decl->_field_cpp_linked,_20017_decl->_field_statically,_20017_decl->_field_exceptional,_20017_decl->_field_ident,_20017_decl->_field_directives,_1eb736eec_build_doc(_20017_decl->_field_doc_comments),_20017_decl->_field_scope,_20017_decl->_field_generics,_1eb736eec_build_ret_type(_20017_decl->_field_result),_1eb736eec_build_params(_20017_decl->_field_params),jule::Ptr<_1eb29bdd6_Struct>(),jule::Slice<jule::Ptr<_1eb627195_FnIns>>()));
}



inline jule::Slice<jule::Ptr<_1eb627195_Fn>> _1eb736eec_build_methods(jule::Slice<jule::Ptr<_1ea6ee955_FnDecl>>& _21923_decls) {
	jule::Slice<jule::Ptr<_1eb627195_Fn>> _22013_methods = jule::Slice<jule::Ptr<_1eb627195_Fn>>::alloc(0LL,static_cast<jule::I64>(_21923_decls.len()));
	{
		auto &expr = _21923_decls;
		auto it = expr.begin();
		_iter_begin_4801828704:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_FnDecl> _1eb736eec_decl = *it;
			{
				_22013_methods.push(_1eb736eec_build_fn(_1eb736eec_decl));
			}
			_iter_next_4801828704:;
			++it;
			goto _iter_begin_4801828704;
		}
		_iter_end_4801828704:;
	}
	return _22013_methods;
}



inline jule::Ptr<_1eb7c68e9_Trait> _1eb736eec_build_trait(jule::Ptr<_1ea6ee955_TraitDecl> _22720_decl) {
	return jule::new_struct_ptr<_1eb7c68e9_Trait>(new( std::nothrow ) _1eb7c68e9_Trait(_22720_decl->_field_token,_22720_decl->_field_ident,_22720_decl->_field_public,jule::Bool(),_1eb736eec_build_doc(_22720_decl->_field_doc_comments),_1eb736eec_build_methods(_22720_decl->_field_methods),jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>()));
}



inline jule::Ptr<_1eb7c7e7d_EnumItem> _1eb736eec_build_enum_item(jule::Ptr<_1ea6ee955_EnumItemDecl> _23724_decl) {
	return jule::new_struct<_1eb7c7e7d_EnumItem>(new( std::nothrow ) _1eb7c7e7d_EnumItem(_23724_decl->_field_token,_23724_decl->_field_ident,_1eb736eec_build_expr(_23724_decl->_field_expr)));
}



inline jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>> _1eb736eec_build_enum_items(jule::Slice<jule::Ptr<_1ea6ee955_EnumItemDecl>>& _24526_decls) {
	jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>> _24613_items = jule::Slice<jule::Ptr<_1eb7c7e7d_EnumItem>>::alloc(0LL,static_cast<jule::I64>(_24526_decls.len()));
	{
		auto &expr = _24526_decls;
		auto it = expr.begin();
		_iter_begin_4801836656:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_EnumItemDecl> _1eb736eec_decl = *it;
			{
				_24613_items.push(_1eb736eec_build_enum_item(_1eb736eec_decl));
			}
			_iter_next_4801836656:;
			++it;
			goto _iter_begin_4801836656;
		}
		_iter_end_4801836656:;
	}
	return _24613_items;
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1eb736eec_build_enum(jule::Ptr<_1ea6ee955_EnumDecl> _25319_decl) {
	return jule::new_struct_ptr<_1eb7c7e7d_Enum>(new( std::nothrow ) _1eb7c7e7d_Enum(_25319_decl->_field_token,_25319_decl->_field_public,_25319_decl->_field_ident,_1eb736eec_build_type(_25319_decl->_field_kind),_1eb736eec_build_enum_items(_25319_decl->_field_items),_1eb736eec_build_doc(_25319_decl->_field_doc_comments)));
}



inline jule::Ptr<_1eba533d4_Var> _1eb736eec_build_var(jule::Ptr<_1ea6ee955_VarDecl> _26418_decl) {
	return jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var(jule::Ptr<_1eb7d5892_Scope>(),_26418_decl->_field_token,_26418_decl->_field_ident,_26418_decl->_field_cpp_linked,_26418_decl->_field_constant,_26418_decl->_field_mutable,_26418_decl->_field_public,jule::Bool(),_26418_decl->_field_statically,_26418_decl->_field_reference,_1eb736eec_build_doc(_26418_decl->_field_doc_comments),_1eb736eec_build_type(_26418_decl->_field_kind),_1eb736eec_build_expr(_26418_decl->_field_expr),_1eb736eec_ReferenceStack::_static_method_new(),_26418_decl->_field_directives,jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>()));
}



inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1eb736eec_build_vars(jule::Slice<jule::Ptr<_1ea6ee955_VarDecl>> _28219_decls) {
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _28313_vars = jule::Slice<jule::Ptr<_1eba533d4_Var>>::alloc(0LL,static_cast<jule::I64>(_28219_decls.len()));
	{
		auto &expr = _28219_decls;
		auto it = expr.begin();
		_iter_begin_4801848720:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_VarDecl> _1eb736eec_decl = *it;
			{
				_28313_vars.push(_1eb736eec_build_var(_1eb736eec_decl));
			}
			_iter_next_4801848720:;
			++it;
			goto _iter_begin_4801848720;
		}
		_iter_end_4801848720:;
	}
	return _28313_vars;
}



inline jule::Ptr<_1eb7d363c_Impl> _1eb736eec_build_impl(jule::Ptr<_1ea6ee955_Impl> _29019_decl) {
	return jule::new_struct<_1eb7d363c_Impl>(new( std::nothrow ) _1eb7d363c_Impl(_29019_decl->_field_base,_29019_decl->_field_dest,_1eb736eec_build_methods(_29019_decl->_field_methods),_1eb736eec_build_vars(_29019_decl->_field_statics)));
}



inline jule::Ptr<_1eb7d5892_ScopeChecker> _1eb7d5892_new_scope_checker_base(jule::Ptr<_1eb9ed0d7_Sema>& _4132_s,jule::Ptr<_1eb627195_FnIns> _4146_owner) {
	return jule::new_struct_ptr<_1eb7d5892_ScopeChecker>(new( std::nothrow ) _1eb7d5892_ScopeChecker(_4132_s,_4146_owner,jule::Ptr<_1eb7d5892_ScopeChecker>(),jule::Int(),jule::new_struct<_1ebcb6081_SymbolTable>(new( std::nothrow ) _1ebcb6081_SymbolTable()),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1ea6ee955_ScopeTree>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Uintptr(),jule::Uintptr(),jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>>(),jule::Ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ptr<_1eb7d5892_ScopeChecker> _1eb7d5892_new_scope_checker(jule::Ptr<_1eb9ed0d7_Sema>& _4927_s,jule::Ptr<_1eb627195_FnIns> _4941_owner) {
	jule::Ptr<_1eb7d5892_ScopeChecker> _5013_base = _1eb7d5892_new_scope_checker_base(_4927_s,_4941_owner);
	_5013_base->_field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeLabel>>>(nullptr);
	_5013_base->_field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1eb7d5892_ScopeGoto>>>(nullptr);
	return _5013_base;
}



inline jule::Ptr<_1eb7d5892_ScopeLabel> _1eb7d5892_find_label_parent(jule::Str _5922_ident,jule::Ptr<_1eb7d5892_ScopeChecker> _5938_scope) {
	jule::Ptr<_1eb7d5892_ScopeLabel> _6013_label = _5938_scope->_method_find_label_scope(_5922_ident);
	while (_6013_label == nullptr) {
		{
			if ((_5938_scope->_field_parent == nullptr) || (_5938_scope->_field_owner != nullptr)) {
				return nullptr;
			}
			_5938_scope=_5938_scope->_field_parent;
			_6013_label=_5938_scope->_method_find_label_scope(_5922_ident);
		}
	_iter_next_4801857360:;
	}
	_iter_end_4801857360:;
	return _6013_label;
}



inline jule::Bool _1eb7d5892_stmt_is_goto_scope(jule::Any& _7324_stmt,jule::Ptr<_1eb7d5892_Scope>& _7336_sc) {
	{
		auto &_match_expr{ _7324_stmt };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Scope>>()) {
			_case_begin_4801867104:;
			{
				return _7324_stmt.operator jule::Ptr<_1eb7d5892_Scope>() == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_InfIter>>()) {
			_case_begin_4801865888:;
			{
				return _7324_stmt.operator jule::Ptr<_1eb7d5892_InfIter>()->_field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RangeIter>>()) {
			_case_begin_4801865984:;
			{
				return _7324_stmt.operator jule::Ptr<_1eb7d5892_RangeIter>()->_field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_WhileIter>>()) {
			_case_begin_4801866080:;
			{
				return _7324_stmt.operator jule::Ptr<_1eb7d5892_WhileIter>()->_field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Match>>()) {
			_case_begin_4801866176:;
			{
				jule::Ptr<_1eb7d5892_Match> _8813_m = _7324_stmt.operator jule::Ptr<_1eb7d5892_Match>();
				{
					auto &expr = _8813_m->_field_cases;
					auto it = expr.begin();
					_iter_begin_4801875968:;
					if (it != expr.end()) {
						jule::Ptr<_1eb7d5892_Case> &_1eb7d5892_c = *it;
						{
							if (_1eb7d5892_c->_field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_4801875968:;
						++it;
						goto _iter_begin_4801875968;
					}
					_iter_end_4801875968:;
				}
				return (_8813_m->_field_default != nullptr) && (_8813_m->_field_default->_field_scope == _7336_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Conditional>>()) {
			_case_begin_4801866400:;
			{
				jule::Ptr<_1eb7d5892_Conditional> _9713_c = _7324_stmt.operator jule::Ptr<_1eb7d5892_Conditional>();
				{
					auto &expr = _9713_c->_field_elifs;
					auto it = expr.begin();
					_iter_begin_4801880064:;
					if (it != expr.end()) {
						jule::Ptr<_1eb7d5892_If> &_1eb7d5892_elif = *it;
						{
							if (_1eb7d5892_elif->_field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_4801880064:;
						++it;
						goto _iter_begin_4801880064;
					}
					_iter_end_4801880064:;
				}
				return (_9713_c->_field_default != nullptr) && (_9713_c->_field_default->_field_scope == _7336_sc);
			}
		}
		else {
			_case_begin_4801862016:;
			{
				return false;
			}
		}
		_match_end_4801865360:;
	}
}



inline jule::Int _1eb7d5892_count_match_type(jule::Ptr<_1eb7d5892_Match>& _11022_m,jule::Ptr<_1ec1c55b1_TypeKind>& _11034_t) {
	jule::Int _11113_n = 0LL;
	jule::Str _1129_kind = _11034_t->_method_to_str();
	_julec_label_loop:;
	{
		auto &expr = _11022_m->_field_cases;
		auto it = expr.begin();
		_iter_begin_4801885408:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_Case> &_1eb7d5892_c = *it;
			{
				if (_1eb7d5892_c == nullptr) {
					goto _iter_next_4801885408;
				}
				{
					auto &expr = _1eb7d5892_c->_field_exprs;
					auto it = expr.begin();
					_iter_begin_4801886736:;
					if (it != expr.end()) {
						jule::Ptr<_1ebcce31e_Data> &_1eb7d5892_expr = *it;
						{
							if (_1eb7d5892_expr == nullptr) {
								goto _iter_end_4801885408;
							}
							if (_1129_kind == _1eb7d5892_expr->_field_model.operator jule::Ptr<_1ec1c55b1_TypeKind>()->_method_to_str()) {
								(_11113_n)++;
							}
						}
						_iter_next_4801886736:;
						++it;
						goto _iter_begin_4801886736;
					}
					_iter_end_4801886736:;
				}
			}
			_iter_next_4801885408:;
			++it;
			goto _iter_begin_4801885408;
		}
		_iter_end_4801885408:;
	}
	return _11113_n;
}



inline jule::Slice<jule::Ptr<_1ebcce31e_Data>> _1eb7d5892_get_datas_from_tuple_data(jule::Ptr<_1ebcce31e_Data>& _13435_d) {
	if (_13435_d->_field_kind->_method_tup() != nullptr) {
		{
			auto &_match_expr{ _13435_d->_field_model };
			if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_TupleExprModel>>()) {
				_case_begin_4801895536:;
				{
					return _13435_d->_field_model.operator jule::Ptr<_1eb7ccdea_TupleExprModel>()->_field_datas;
				}
			}
			else {
				_case_begin_4801891856:;
				{
					jule::Ptr<_1ec1c55b1_Tuple> _14121_t = _13435_d->_field_kind->_method_tup();
					jule::Slice<jule::Ptr<_1ebcce31e_Data>> _14221_r = jule::Slice<jule::Ptr<_1ebcce31e_Data>>::alloc(0LL,static_cast<jule::I64>(_14121_t->_field_types.len()));
					{
						auto &expr = _14121_t->_field_types;
						auto it = expr.begin();
						_iter_begin_4801896928:;
						if (it != expr.end()) {
							jule::Ptr<_1ec1c55b1_TypeKind> _1eb7d5892_kind = *it;
							{
								_14221_r.push(jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(_1eb7d5892_kind,jule::Ptr<_1ec1c55b1_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>())));
							}
							_iter_next_4801896928:;
							++it;
							goto _iter_begin_4801896928;
						}
						_iter_end_4801896928:;
					}
					return _14221_r;
				}
			}
			_match_end_4801892208:;
		}
	} else {
		return jule::Slice<jule::Ptr<_1ebcce31e_Data>>({_13435_d});
	}
}



inline jule::Slice<jule::Any> _1eb7d5892_get_expr_models(jule::Any& _15625_m) {
	{
		auto &_match_expr{ _15625_m };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_TupleExpr>>()) {
			_case_begin_4801902048:;
			{
				jule::Ptr<_1ea6ee955_TupleExpr> _15917_tup = _15625_m.operator jule::Ptr<_1ea6ee955_TupleExpr>();
				jule::Slice<jule::Any> _16017_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_15917_tup->_field_expr.len()));
				{
					auto &expr = _15917_tup->_field_expr;
					auto it = expr.begin();
					_iter_begin_4801904464:;
					if (it != expr.end()) {
						jule::Ptr<_1ea6ee955_Expr> _1eb7d5892_expr = *it;
						{
							_16017_models.push(_1eb7d5892_expr->_field_kind);
						}
						_iter_next_4801904464:;
						++it;
						goto _iter_begin_4801904464;
					}
					_iter_end_4801904464:;
				}
				return _16017_models;
			}
		}
		else {
			_case_begin_4801895632:;
			{
				return jule::Slice<jule::Any>({_15625_m});
			}
		}
		_match_end_4801891728:;
	}
}



inline jule::Bool _1eb7d5892_check_mut(jule::Ptr<_1eb9ed0d7_Sema>& _17119_s,jule::Ptr<_1ebcce31e_Data>& _17130_left,jule::Ptr<_1ebcce31e_Data> _17147_right,_1ea7465e5_Token _17161_error_token) {
	jule::Bool _17183_ok = jule::Bool();
	{
		if ((!(_17130_left->_field_mutable))) {
			_case_begin_4801911536:;
			{
				_17119_s->_method_push_err(_17161_error_token,jule::Str("cannot assign to immutable define", 33),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else if (((_17147_right != nullptr) && (!(_17147_right->_field_mutable))) && _17147_right->_field_kind->_method_mutable()) {
			_case_begin_4801911728:;
			{
				_17119_s->_method_push_err(_17161_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else {
			_case_begin_4801910080:;
			{
				_17183_ok = true;
				return _17183_ok;
			}
		}
		_match_end_4801909904:;
	}
}



inline jule::Bool _1eb7d5892_check_assign(jule::Ptr<_1eb9ed0d7_Sema>& _18622_s,jule::Ptr<_1ebcce31e_Data>& _18637_left,jule::Ptr<_1ebcce31e_Data> _18654_right,_1ea7465e5_Token _18668_error_token) {
	jule::Bool _18690_ok = jule::Bool();
	jule::Ptr<_1eb627195_FnIns> _1879_f = _18637_left->_field_kind->_method_fnc();
	if (((_1879_f != nullptr) && (_1879_f->_field_decl != nullptr)) && _1879_f->_field_decl->_field_global) {
		_18622_s->_method_push_err(_18668_error_token,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_18690_ok = false;
		return _18690_ok;
	}
	{
		if (_18637_left->_method_is_const()) {
			_case_begin_4801926016:;
			{
				_18622_s->_method_push_err(_18668_error_token,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				_18622_s->_method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!(_18637_left->_field_lvalue))) {
			_case_begin_4801926192:;
			{
				_18622_s->_method_push_err(_18668_error_token,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!(_1eb7d5892_check_mut(_18622_s,_18637_left,_18654_right,_18668_error_token)))) {
			_case_begin_4801926288:;
			{
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else {
			_case_begin_4801922208:;
			{
				_18690_ok = true;
				return _18690_ok;
			}
		}
		_match_end_4801924400:;
	}
}



inline jule::Bool _1eb7d5892_is_valid_ast_st_for_next_st(jule::Any& _21137_n) {
	{
		auto &_match_expr{ _21137_n };
		if (_match_expr.type_is<jule::Ptr<_1ea6ee955_AssignSt>>()) {
			_case_begin_4801934976:;
			{
				return (!(_21137_n.operator jule::Ptr<_1ea6ee955_AssignSt>()->_field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ea6ee955_FnCallExpr>>() || _match_expr.type_is<jule::Ptr<_1ea6ee955_Expr>>()) {
			_case_begin_4801935072:;
			{
				return true;
			}
		}
		else {
			_case_begin_4801919632:;
			{
				return false;
			}
		}
		_match_end_4801927104:;
	}
}



inline jule::Bool _1eb7d5892_is_valid_st_for_next_st(jule::Any& _22529_st) {
	{
		auto &_match_expr{ _22529_st };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_FnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7d5892_Postfix>>() || _match_expr.type_is<jule::Ptr<_1eb7d5892_Assign>>() || _match_expr.type_is<jule::Ptr<_1eb7d5892_MultiAssign>>()) {
			_case_begin_4801938800:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ebcce31e_Data>>()) {
			_case_begin_4801938896:;
			{
				{
					auto &_match_expr{ _22529_st.operator jule::Ptr<_1ebcce31e_Data>()->_field_model };
					if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_FnCallExprModel>>()) {
						_case_begin_4801947120:;
						{
							return true;
						}
					}
					else {
						_case_begin_4801944880:;
						{
							return false;
						}
					}
					_match_end_4801945536:;
				}
			}
		}
		else {
			_case_begin_4801935440:;
			{
				return false;
			}
		}
		_match_end_4801937536:;
	}
}



inline jule::Bool _1eb7d5892_st_is_def(jule::Any& _24415_st) {
	{
		auto &_match_expr{ _24415_st };
		if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4801947712:;
			{
				return true;
			}
		}
		else {
			_case_begin_4801944560:;
			{
				return false;
			}
		}
		_match_end_4801946816:;
	}
}



inline jule::Ptr<_1eba533d4_Var> _1eb7d8048_find_var_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _3729_files,jule::Str _3752_ident,jule::Bool _3764_cpp_linked) {
	{
		auto &expr = _3729_files;
		auto it = expr.begin();
		_iter_begin_4801950192:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb7d8048_f = *it;
			{
				jule::Ptr<_1eba533d4_Var> _3917_v = _1eb7d8048_f->_method_find_var(_3752_ident,_3764_cpp_linked);
				if (_3917_v != nullptr) {
					return _3917_v;
				}
			}
			_iter_next_4801950192:;
			++it;
			goto _iter_begin_4801950192;
		}
		_iter_end_4801950192:;
	}
	return nullptr;
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1eb7d8048_find_type_alias_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _4936_files,jule::Str _4959_ident,jule::Bool _4971_cpp_linked) {
	{
		auto &expr = _4936_files;
		auto it = expr.begin();
		_iter_begin_4801954656:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb7d8048_f = *it;
			{
				jule::Ptr<_1ec1c55b1_TypeAlias> _5117_ta = _1eb7d8048_f->_method_find_type_alias(_4959_ident,_4971_cpp_linked);
				if (_5117_ta != nullptr) {
					return _5117_ta;
				}
			}
			_iter_next_4801954656:;
			++it;
			goto _iter_begin_4801954656;
		}
		_iter_end_4801954656:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb29bdd6_Struct> _1eb7d8048_find_struct_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _6132_files,jule::Str _6155_ident,jule::Bool _6167_cpp_linked) {
	{
		auto &expr = _6132_files;
		auto it = expr.begin();
		_iter_begin_4801960272:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb7d8048_f = *it;
			{
				jule::Ptr<_1eb29bdd6_Struct> _6317_s = _1eb7d8048_f->_method_find_struct(_6155_ident,_6167_cpp_linked);
				if (_6317_s != nullptr) {
					return _6317_s;
				}
			}
			_iter_next_4801960272:;
			++it;
			goto _iter_begin_4801960272;
		}
		_iter_end_4801960272:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb627195_Fn> _1eb7d8048_find_fn_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _7328_files,jule::Str _7351_ident,jule::Bool _7363_cpp_linked) {
	{
		auto &expr = _7328_files;
		auto it = expr.begin();
		_iter_begin_4801965888:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb7d8048_file = *it;
			{
				jule::Ptr<_1eb627195_Fn> _7517_f = _1eb7d8048_file->_method_find_fn(_7351_ident,_7363_cpp_linked);
				if (_7517_f != nullptr) {
					return _7517_f;
				}
			}
			_iter_next_4801965888:;
			++it;
			goto _iter_begin_4801965888;
		}
		_iter_end_4801965888:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7c68e9_Trait> _1eb7d8048_find_trait_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _8531_files,jule::Str _8554_ident) {
	{
		auto &expr = _8531_files;
		auto it = expr.begin();
		_iter_begin_4801972576:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb7d8048_f = *it;
			{
				jule::Ptr<_1eb7c68e9_Trait> _8717_t = _1eb7d8048_f->_method_find_trait(_8554_ident);
				if (_8717_t != nullptr) {
					return _8717_t;
				}
			}
			_iter_next_4801972576:;
			++it;
			goto _iter_begin_4801972576;
		}
		_iter_end_4801972576:;
	}
	return nullptr;
}



inline jule::Ptr<_1eb7c7e7d_Enum> _1eb7d8048_find_enum_in_package(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _9730_files,jule::Str _9753_ident) {
	{
		auto &expr = _9730_files;
		auto it = expr.begin();
		_iter_begin_4801973232:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb7d8048_f = *it;
			{
				jule::Ptr<_1eb7c7e7d_Enum> _9917_e = _1eb7d8048_f->_method_find_enum(_9753_ident);
				if (_9917_e != nullptr) {
					return _9917_e;
				}
			}
			_iter_next_4801973232:;
			++it;
			goto _iter_begin_4801973232;
		}
		_iter_end_4801973232:;
	}
	return nullptr;
}



inline jule::Bool _1eb7d8048_is_std_package(jule::Str _31519_f,jule::Str _31527_p) {
	return _31519_f.has_prefix(_1e904e87d_join(jule::Slice<jule::Str>({_1e9c5edd9_PATH_STDLIB,_31527_p})));
}



inline jule::Bool _1eb9ed0d7_is_valid_model_for_ref(jule::Any _1127_m) {
	{
		auto &_match_expr{ _1127_m };
		if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4801985904:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>>()) {
			_case_begin_4801986000:;
			{
				jule::Ptr<_1eb7ccdea_StructSubIdentExprModel> _1713_model = _1127_m.operator jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>();
				return _1eb9ed0d7_is_valid_model_for_ref(_1713_model->_field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>>()) {
			_case_begin_4801984800:;
			{
				jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel> _2113_model = _1127_m.operator jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>();
				return _1eb9ed0d7_is_valid_model_for_ref(_2113_model->_field_expr);
			}
		}
		else {
			_case_begin_4801984416:;
			{
				return false;
			}
		}
		_match_end_4801976464:;
	}
}



inline _1e8ea7cc0_Log _1eb9ed0d7_compiler_err(_1ea7465e5_Token& _2918_token,jule::Bool _2932_line,jule::Str _2944_fmt,jule::Slice<jule::Any> _2957_args) {
	_1e8ea7cc0_Log _3013_log = _1e8ea7cc0_Log(1LLU,_2918_token._field_row,_2918_token._field_column,_2918_token._field_file->_method_path(),_1e8ea7cc0_logf(_2944_fmt,_2957_args),jule::Str(),jule::Str());
	if (_2932_line) {
		_3013_log._field_line=_2918_token._field_file->_method_get_row(_2918_token._field_row);
	}
	return _3013_log;
}



inline jule::Bool _1eb9ed0d7_imp_is_lookupable(jule::Ptr<_1eb7d8048_ImportInfo>& _4323_i,jule::Str _4339_ident) {
	if (_4323_i->_field_cpp_linked) {
		return false;
	}
	if ((!(_4323_i->_field_import_all))) {
		if (_4323_i->_field_selected.len() > 0LL) {
			return _4323_i->_method_exist_ident(_4339_ident);
		}
	}
	return _4323_i->_field_import_all;
}



inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1eb9ed0d7_build_ret_vars(jule::Ptr<_1eb627195_FnIns>& _5624_f) {
	if (_5624_f->_field_decl->_method_is_void() || (_5624_f->_field_result == nullptr)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _6113_vars = nullptr;
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _6213_types = _1eba534e4_get_result_types(_5624_f->_field_result);
	{
		auto &expr = _5624_f->_field_decl->_field_result->_field_idents;
		auto it = expr.begin();
		_iter_begin_4802008768:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			_1ea7465e5_Token _1eb9ed0d7_ident = *it;
			{
				if (_1ea7465e5_is_ignore_ident(_1eb9ed0d7_ident._field_kind)) {
					goto _iter_next_4802008768;
				}
				jule::Ptr<_1eba533d4_Var> _6817_v = jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var(_5624_f->_field_scope,_1eb9ed0d7_ident,_1eb9ed0d7_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_6213_types[_1eb9ed0d7_i])),jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(jule::Ptr<_1ea6ee955_Expr>(),jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data()))),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>()));
				_6113_vars.push(_6817_v);
			}
			_iter_next_4802008768:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4802008768;
		}
		_iter_end_4802008768:;
	}
	return _6113_vars;
}



inline jule::Slice<jule::Ptr<_1eba533d4_Var>> _1eb9ed0d7_build_param_vars(jule::Ptr<_1eb627195_FnIns>& _8526_f) {
	if (_8526_f->_field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1eba533d4_Var>> _9013_vars = jule::Slice<jule::Ptr<_1eba533d4_Var>>::alloc(0LL,static_cast<jule::I64>(_8526_f->_field_params.len()));
	{
		auto &expr = _8526_f->_field_params;
		auto it = expr.begin();
		_iter_begin_4802017648:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> _1eb9ed0d7_p = *it;
			{
				jule::Ptr<_1eba533d4_Var> _9217_v = jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var(_8526_f->_field_scope,_1eb9ed0d7_p->_field_decl->_field_token,_1eb9ed0d7_p->_field_decl->_field_ident,jule::Bool(),jule::Bool(),_1eb9ed0d7_p->_field_decl->_field_mutable,jule::Bool(),true,jule::Bool(),_1eb9ed0d7_p->_field_decl->_field_reference,jule::Str(),jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol()),jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(jule::Ptr<_1ea6ee955_Expr>(),jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data()))),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>()));
				{
					if (_1eb9ed0d7_p->_field_decl->_method_is_self()) {
						_case_begin_4802023760:;
						{
							_9217_v->_field_kind->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_8526_f->_field_owner));
							_9217_v->_field_reference=true;
							if (_1eb9ed0d7_p->_field_decl->_method_is_ref()) {
								_9217_v->_field_ident=_9217_v->_field_ident.slice(1LL);
								_9217_v->_field_kind->_field_kind->_field_kind=jule::new_struct_ptr<_1ec1c55b1_Sptr>(new( std::nothrow ) _1ec1c55b1_Sptr(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(_9217_v->_field_kind->_field_kind->_field_cpp_ident,jule::Bool(),jule::Bool(),_9217_v->_field_kind->_field_kind->_field_kind))));
							}
						}
					}
					else if (_1eb9ed0d7_p->_field_decl->_field_variadic) {
						_case_begin_4802024720:;
						{
							_9217_v->_field_kind->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Slc>(new( std::nothrow ) _1ec1c55b1_Slc(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(_1eb9ed0d7_p->_field_kind->_field_cpp_ident,jule::Bool(),jule::Bool(),_1eb9ed0d7_p->_field_kind->_field_kind))))));
						}
					}
					else {
						_case_begin_4802022960:;
						{
							_9217_v->_field_kind->_field_kind=_1eb9ed0d7_p->_field_kind;
						}
					}
					_match_end_4802022848:;
				}
				_9013_vars.push(_9217_v);
			}
			_iter_next_4802017648:;
			++it;
			goto _iter_begin_4802017648;
		}
		_iter_end_4802017648:;
	}
	return _9013_vars;
}



inline jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _1eb9ed0d7_build_generic_type_aliases(jule::Ptr<_1eb627195_FnIns>& _14036_f) {
	jule::I64 _14113_size = _14036_f->_field_generics.len();
	if (_14036_f->_field_decl->_field_owner != nullptr) {
		_14113_size+=static_cast<jule::I64>(_14036_f->_field_decl->_field_owner->_field_generics.len());
	}
	if (_14113_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>> _15013_aliases = jule::Slice<jule::Ptr<_1ec1c55b1_TypeAlias>>::alloc(0LL,_14113_size);
	{
		auto &expr = _14036_f->_field_generics;
		auto it = expr.begin();
		_iter_begin_4802036352:;
		if (it != expr.end()) {
			jule::Int _1eb9ed0d7_i = it - expr.begin();
			jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_g = *it;
			{
				jule::Ptr<_1ea6ee955_GenericDecl> _15317_decl = _14036_f->_field_decl->_field_generics[_1eb9ed0d7_i];
				_15013_aliases.push(jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(_14036_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,true,_15317_decl->_field_token,_15317_decl->_field_ident,jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_1eb9ed0d7_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_4802036352:;
			++it;
			_1eb9ed0d7_i++;
			goto _iter_begin_4802036352;
		}
		_iter_end_4802036352:;
	}
	if (_14036_f->_field_decl->_field_owner != nullptr) {
		jule::Ptr<_1eb29bdd6_StructIns> _16517_owner = _14036_f->_field_owner;
		{
			auto &expr = _16517_owner->_field_generics;
			auto it = expr.begin();
			_iter_begin_4802040528:;
			if (it != expr.end()) {
				jule::Int _1eb9ed0d7_i = it - expr.begin();
				jule::Ptr<_1ec1c55b1_TypeKind> _1eb9ed0d7_g = *it;
				{
					jule::Ptr<_1ea6ee955_GenericDecl> _16721_decl = _16517_owner->_field_decl->_field_generics[_1eb9ed0d7_i];
					_15013_aliases.push(jule::new_struct<_1ec1c55b1_TypeAlias>(new( std::nothrow ) _1ec1c55b1_TypeAlias(_14036_f->_field_decl->_field_scope,jule::Bool(),jule::Bool(),true,true,_16721_decl->_field_token,_16721_decl->_field_ident,jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),_1eb9ed0d7_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_4802040528:;
				++it;
				_1eb9ed0d7_i++;
				goto _iter_begin_4802040528;
			}
			_iter_end_4802040528:;
		}
	}
	return _15013_aliases;
}



inline jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_find_file(jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>& _18219_files,jule::Ptr<_1ea701c98_File>& _18243_handler) {
	{
		auto &expr = _18219_files;
		auto it = expr.begin();
		_iter_begin_4802046656:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1eb9ed0d7_fl = *it;
			{
				if (_1eb9ed0d7_fl->_field_file == _18243_handler) {
					return _1eb9ed0d7_fl;
				}
			}
			_iter_next_4802046656:;
			++it;
			goto _iter_begin_4802046656;
		}
		_iter_end_4802046656:;
	}
	return nullptr;
}



inline std::tuple<jule::Bool,jule::Bool> _1eb9ed0d7_conditional_has_ret(jule::Ptr<_1eb7d5892_Conditional> _19128_c) {
	jule::Bool _19147_ok = jule::Bool();
	jule::Bool _19157_breaking = jule::Bool();
	jule::Bool _19213_breaked = false;
	{
		auto &expr = _19128_c->_field_elifs;
		auto it = expr.begin();
		_iter_begin_4802052640:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_If> _1eb9ed0d7_elif = *it;
			{
				if (_1eb9ed0d7_elif == nullptr) {
					_19147_ok = false;
					_19157_breaking = false;
					return std::make_tuple(_19147_ok,_19157_breaking);
				}
				std::tie(_19147_ok,std::ignore,_19157_breaking) = _1eb9ed0d7___has_ret(_1eb9ed0d7_elif->_field_scope);
				_19213_breaked=_19213_breaked || _19157_breaking;
				if ((!(_19147_ok))) {
					_19147_ok = false;
					_19157_breaking = _19213_breaked;
					return std::make_tuple(_19147_ok,_19157_breaking);
				}
			}
			_iter_next_4802052640:;
			++it;
			goto _iter_begin_4802052640;
		}
		_iter_end_4802052640:;
	}
	if (_19128_c->_field_default == nullptr) {
		_19147_ok = false;
		_19157_breaking = _19213_breaked;
		return std::make_tuple(_19147_ok,_19157_breaking);
	}
	std::tie(_19147_ok,std::ignore,_19157_breaking) = _1eb9ed0d7___has_ret(_19128_c->_field_default->_field_scope);
	_19213_breaked=_19213_breaked || _19157_breaking;
	_19157_breaking = _19213_breaked;
	return std::make_tuple(_19147_ok,_19157_breaking);
}



inline jule::Bool _1eb9ed0d7_match_has_ret(jule::Ptr<_1eb7d5892_Match> _21322_m) {
	if (_21322_m->_field_default == nullptr) {
		return false;
	}
	jule::Bool _21813_ok = true;
	jule::Bool _21913_falled = false;
	jule::Bool _22013_breaked = false;
	{
		auto &expr = _21322_m->_field_cases;
		auto it = expr.begin();
		_iter_begin_4802064128:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_Case> _1eb9ed0d7_c = *it;
			{
				if (_1eb9ed0d7_c == nullptr) {
					return false;
				}
				std::tie(_21813_ok,_21913_falled,_22013_breaked) = _1eb9ed0d7___has_ret(_1eb9ed0d7_c->_field_scope);
				if (((!(_21813_ok)) && (!(_21913_falled))) || _22013_breaked) {
					return false;
				}
				{
					if ((!(_21813_ok))) {
						_case_begin_4802068208:;
						{
							if ((!(_21913_falled))) {
								return false;
							}
							goto _case_begin_4802068304;
						}
					}
					else if (_21913_falled) {
						_case_begin_4802068304:;
						{
							if (_1eb9ed0d7_c->_field_next == nullptr) {
								return false;
							}
							goto _iter_next_4802064128;
						}
					}
					_match_end_4802068080:;
				}
				_21913_falled=false;
			}
			_iter_next_4802064128:;
			++it;
			goto _iter_begin_4802064128;
		}
		_iter_end_4802064128:;
	}
	return _1eb9ed0d7_has_ret(_21322_m->_field_default->_field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _1eb9ed0d7___has_ret(jule::Ptr<_1eb7d5892_Scope> _24918_s) {
	jule::Bool _24931_ok = jule::Bool();
	jule::Bool _24941_falled = jule::Bool();
	jule::Bool _24955_breaked = jule::Bool();
	if (_24918_s == nullptr) {
		_24931_ok = false;
		_24941_falled = false;
		_24955_breaked = false;
		return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
	}
	{
		auto &expr = _24918_s->_field_stmts;
		auto it = expr.begin();
		_iter_begin_4802074368:;
		if (it != expr.end()) {
			jule::Any _1eb9ed0d7_st = *it;
			{
				{
					auto &_match_expr{ _1eb9ed0d7_st };
					if (_match_expr.type_is<jule::Ptr<_1eb7d5892_FallSt>>()) {
						_case_begin_4802076576:;
						{
							_24941_falled=true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_BreakSt>>()) {
						_case_begin_4802077216:;
						{
							_24931_ok = false;
							_24941_falled = false;
							_24955_breaked = true;
							return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ContSt>>()) {
						_case_begin_4802077312:;
						{
							_24931_ok = false;
							_24941_falled = false;
							_24955_breaked = true;
							return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_InfIter>>()) {
						_case_begin_4802077408:;
						{
							_24931_ok=_1eb9ed0d7_has_ret(_1eb9ed0d7_st.operator jule::Ptr<_1eb7d5892_InfIter>()->_field_scope);
							if (_24931_ok) {
								_24931_ok = true;
								_24941_falled = false;
								_24955_breaked = false;
								return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RetSt>>()) {
						_case_begin_4802077504:;
						{
							_24931_ok = true;
							return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Scope>>()) {
						_case_begin_4802077600:;
						{
							_24931_ok=_1eb9ed0d7_has_ret(_1eb9ed0d7_st.operator jule::Ptr<_1eb7d5892_Scope>());
							if (_24931_ok) {
								_24931_ok = true;
								_24941_falled = false;
								_24955_breaked = false;
								return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ebcce31e_Data>>()) {
						_case_begin_4802077696:;
						{
							{
								auto &_match_expr{ _1eb9ed0d7_st.operator jule::Ptr<_1ebcce31e_Data>()->_field_model };
								if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>>()) {
									_case_begin_4802088288:;
									{
										_24931_ok = true;
										return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
									}
								}
								_match_end_4802093904:;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Conditional>>()) {
						_case_begin_4802077792:;
						{
							std::tie(_24931_ok,_24955_breaked) = _1eb9ed0d7_conditional_has_ret(_1eb9ed0d7_st.operator jule::Ptr<_1eb7d5892_Conditional>());
							if (_24931_ok) {
								_24931_ok = true;
								_24941_falled = false;
								_24955_breaked = false;
								return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
							}
							if (_24955_breaked) {
								_24931_ok = false;
								_24941_falled = false;
								return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Match>>()) {
						_case_begin_4802077904:;
						{
							_24931_ok=_1eb9ed0d7_match_has_ret(_1eb9ed0d7_st.operator jule::Ptr<_1eb7d5892_Match>());
							if (_24931_ok) {
								_24931_ok = true;
								_24941_falled = false;
								_24955_breaked = false;
								return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
							}
						}
					}
					_match_end_4802076944:;
				}
			}
			_iter_next_4802074368:;
			++it;
			goto _iter_begin_4802074368;
		}
		_iter_end_4802074368:;
	}
	_24931_ok = false;
	return std::make_tuple(_24931_ok,_24941_falled,_24955_breaked);
}



inline jule::Bool _1eb9ed0d7_has_ret(jule::Ptr<_1eb7d5892_Scope> _30816_s) {
	jule::Bool _30910_ok;
	std::tie(_30910_ok,std::ignore,std::ignore) = _1eb9ed0d7___has_ret(_30816_s);
	return _30910_ok;
}



inline void _1eb9ed0d7_push_suggestion(_1e8ea7cc0_Log* _31331_log,jule::Str _31342_fmt,jule::Slice<jule::Any> _31355_args) {
	_31331_log->_field_suggestion=_1e8ea7cc0_logf(_31342_fmt,_31355_args);
}



inline jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>> _1eba534e4_get_result_types(jule::Ptr<_1ec1c55b1_TypeKind>& _2626_result) {
	{
		if (_2626_result == nullptr) {
			_case_begin_4802110624:;
			{
				return nullptr;
			}
		}
		else if (_2626_result->_method_tup() == nullptr) {
			_case_begin_4802110256:;
			{
				return jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>({_2626_result});
			}
		}
		else {
			_case_begin_4802109248:;
			{
				return _2626_result->_method_tup()->_field_types;
			}
		}
		_match_end_4802107776:;
	}
}



inline jule::Bool _1eba534e4_trait_has_reference_receiver(jule::Ptr<_1eb7c68e9_Trait>& _3934_t) {
	{
		auto &expr = _3934_t->_field_methods;
		auto it = expr.begin();
		_iter_begin_4802112480:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> &_1eba534e4_f = *it;
			{
				if (_1eba534e4_f->_field_statically) {
					goto _iter_next_4802112480;
				}
				jule::Ptr<_1eb627195_Param> _4613_p = _1eba534e4_f->_field_params[0LL];
				if (_4613_p->_method_is_ref() && _4613_p->_method_is_self()) {
					return true;
				}
			}
			_iter_next_4802112480:;
			++it;
			goto _iter_begin_4802112480;
		}
		_iter_end_4802112480:;
	}
	return false;
}



inline jule::Bool _1eba534e4_float_assignable(jule::Str _5421_kind,jule::Ptr<_1ebcce31e_Data>& _5433_d) {
	jule::Str _559_value = _1e9c59675_fmt_float(static_cast<jule::F64>(_5433_d->_field_constant->_method_as_f64()),'g',-1LL,64LL);
	return _1ec3e5eda_check_bit_float(_559_value,static_cast<jule::Int>(_1ec3e5eda_bitsize_of(_5421_kind)));
}



inline jule::Bool _1eba534e4_sig_assignable(jule::Str _5919_kind,jule::Ptr<_1ebcce31e_Data>& _5931_d) {
	jule::F64 _609_min = _1ec3e8d67_min(_5919_kind);
	jule::F64 _619_max = _1ec3e8d67_max(_5919_kind);
	{
		if (_5931_d->_field_constant->_method_is_f64()) {
			_case_begin_4802124704:;
			{
				jule::F64 _6513_x = static_cast<jule::F64>(_5931_d->_field_constant->_method_read_f64());
				jule::F64 _6614_i;
				jule::F64 _6617_frac;
				std::tie(_6614_i,_6617_frac) = _1ea253c6d_modf(_6513_x);
				if (_6617_frac != 0LL) {
					return false;
				}
				return (_6614_i >= _609_min) && (_6614_i <= _619_max);
			}
		}
		else if (_5931_d->_field_constant->_method_is_u64()) {
			_case_begin_4802124800:;
			{
				jule::F64 _7313_x = static_cast<jule::F64>(_5931_d->_field_constant->_method_read_u64());
				if (_7313_x <= _619_max) {
					return true;
				}
			}
		}
		else if (_5931_d->_field_constant->_method_is_i64()) {
			_case_begin_4802124896:;
			{
				jule::F64 _7913_x = static_cast<jule::F64>(_5931_d->_field_constant->_method_read_i64());
				return (_609_min <= _7913_x) && (_7913_x <= _619_max);
			}
		}
		_match_end_4802124400:;
	}
	return false;
}



inline jule::Bool _1eba534e4_unsig_assignable(jule::Str _8621_kind,jule::Ptr<_1ebcce31e_Data>& _8633_d) {
	jule::F64 _879_max = _1ec3e8d67_max(_8621_kind);
	if (_8633_d->_field_is_rune && (_8621_kind == jule::Str("u8", 2))) {
		return _1ec52e1de_is_ascii(static_cast<jule::I32>(_8633_d->_field_constant->_method_read_i64()));
	}
	{
		if (_8633_d->_field_constant->_method_is_f64()) {
			_case_begin_4802138144:;
			{
				jule::F64 _9413_x = _8633_d->_field_constant->_method_read_f64();
				if (_9413_x < 0LL) {
					return false;
				}
				jule::F64 _9914_i;
				jule::F64 _9917_frac;
				std::tie(_9914_i,_9917_frac) = _1ea253c6d_modf(_9413_x);
				if (_9917_frac != 0LL) {
					return false;
				}
				return _9914_i <= _879_max;
			}
		}
		else if (_8633_d->_field_constant->_method_is_u64()) {
			_case_begin_4802138240:;
			{
				jule::F64 _10613_x = static_cast<jule::F64>(_8633_d->_field_constant->_method_read_u64());
				if (_10613_x <= _879_max) {
					return true;
				}
			}
		}
		else if (_8633_d->_field_constant->_method_is_i64()) {
			_case_begin_4802138336:;
			{
				jule::F64 _11213_x = static_cast<jule::F64>(_8633_d->_field_constant->_method_read_i64());
				return (0LL <= _11213_x) && (_11213_x <= _879_max);
			}
		}
		_match_end_4802139120:;
	}
	return false;
}



inline jule::Bool _1eba534e4_int_assignable(jule::Str _11919_kind,jule::Ptr<_1ebcce31e_Data>& _11931_d) {
	{
		if (_1ec4784ce_is_sig_int(_11919_kind)) {
			_case_begin_4802153952:;
			{
				return _1eba534e4_sig_assignable(_11919_kind,_11931_d);
			}
		}
		else if (_1ec4784ce_is_unsig_int(_11919_kind)) {
			_case_begin_4802154048:;
			{
				return _1eba534e4_unsig_assignable(_11919_kind,_11931_d);
			}
		}
		else {
			_case_begin_4802151824:;
			{
				return false;
			}
		}
		_match_end_4802151680:;
	}
}



inline jule::Ptr<_1ea6ee955_Directive> _1ebcce31e_find_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>& _4824_directives,jule::Str _4866_d) {
	{
		auto &expr = _4824_directives;
		auto it = expr.begin();
		_iter_begin_4802156432:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> _1ebcce31e_dr = *it;
			{
				if (_1ebcce31e_dr->_field_tag._field_kind == _4866_d) {
					return _1ebcce31e_dr;
				}
			}
			_iter_next_4802156432:;
			++it;
			goto _iter_begin_4802156432;
		}
		_iter_end_4802156432:;
	}
	return nullptr;
}



inline jule::Any _1ebcce31e_find_builtins_import(jule::Str _5725_ident,jule::Ptr<_1eb7d8048_ImportInfo> _5737_imp) {
	return _1ec2ee113_find_package_builtin_def(_5737_imp->_field_link_path,_5725_ident);
}



inline void _1ebcce31e_make_struct_lit_alloc(jule::Ptr<_1ebcce31e_Data>& _6131_d,jule::Ptr<_1eb7ccdea_StructLitExprModel>& _6146_lit) {
	_6131_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Sptr>(new( std::nothrow ) _1ec1c55b1_Sptr(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_6146_lit->_field_strct))))));
	_6131_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_AllocStructLitExprModel>(new( std::nothrow ) _1eb7ccdea_AllocStructLitExprModel(_6146_lit)));
}



inline jule::Ptr<_1eba533d4_Var> _1ebcce31e_build_error_var(jule::Ptr<_1eb7d5892_Scope>& _7325_s,jule::Ptr<_1ea6ee955_FnCallExpr>& _7341_fc) {
	return jule::new_struct<_1eba533d4_Var>(new( std::nothrow ) _1eba533d4_Var(_7325_s,_7341_fc->_field_token,jule::Str("error", 5),jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),false,jule::Str(),jule::new_struct<_1ec1c55b1_TypeSymbol>(new( std::nothrow ) _1ec1c55b1_TypeSymbol(jule::Ptr<_1ea6ee955_TypeDecl>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("any", 3)))))),jule::new_struct<_1ebcce31e_Value>(new( std::nothrow ) _1ebcce31e_Value(jule::Ptr<_1ea6ee955_Expr>(),jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data()))),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Slice<jule::Ptr<_1ea6ee955_Directive>>(),jule::Ptr<_1eba533d4_IterRelation>(),jule::Slice<jule::Ptr<_1eba533d4_Var>>()));
}



inline jule::Any _1ebcce31e_find_builtins_sema(jule::Str _9223_ident,jule::Ptr<_1eb9ed0d7_Sema> _9239_s) {
	{
		auto &expr = _9239_s->_field_file->_field_imports;
		auto it = expr.begin();
		_iter_begin_4802168784:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ebcce31e_imp = *it;
			{
				if (_1ebcce31e_imp->_field_import_all || _1ebcce31e_imp->_method_exist_ident(_9223_ident)) {
					jule::Any _9521_def = _1ebcce31e_find_builtins_import(_9223_ident,_1ebcce31e_imp);
					if (_9521_def != nullptr) {
						return _9521_def;
					}
				}
			}
			_iter_next_4802168784:;
			++it;
			goto _iter_begin_4802168784;
		}
		_iter_end_4802168784:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1ebcce31e_is_ok_for_shifting(jule::Ptr<_1ebcce31e_Data>& _10428_d) {
	jule::Ptr<_1ec1c55b1_Prim> _1059_prim = _10428_d->_field_kind->_method_prim();
	if ((_1059_prim == nullptr) || (!(_1ec4784ce_is_int(_1059_prim->_method_to_str())))) {
		return false;
	}
	if ((!(_10428_d->_method_is_const()))) {
		return true;
	}
	{
		if (_10428_d->_field_constant->_method_is_i64()) {
			_case_begin_4802180544:;
			{
				return _10428_d->_field_constant->_method_read_i64() >= 0LL;
			}
		}
		else if (_10428_d->_field_constant->_method_is_u64()) {
			_case_begin_4802180640:;
			{
				return true;
			}
		}
		else {
			_case_begin_4802178576:;
			{
				return false;
			}
		}
		_match_end_4802178352:;
	}
}



inline jule::Bool _1ebcce31e_is_instanced_struct(jule::Ptr<_1eb29bdd6_StructIns> _12124_s) {
	return _12124_s->_field_decl->_field_generics.len() == _12124_s->_field_generics.len();
}



inline jule::Bool _1ebcce31e_is_ptr_arithmetic_compatible_int(jule::Ptr<_1ebcce31e_Data>& _12542_d) {
	if (_12542_d->_method_is_const()) {
		return _1eba534e4_int_assignable(jule::Str("int", 3),_12542_d);
	}
	_1eba534e4_TypeCompatibilityChecker _12913_tcc = _1eba534e4_TypeCompatibilityChecker(jule::Ptr<_1eb9ed0d7_Sema>(),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3)))),_12542_d->_field_kind,_1ea7465e5_Token());
	return _12913_tcc._method_check();
}



inline void _1ebcce31e_normalize_bitsize(jule::Ptr<_1ebcce31e_Data>& _13627_d) {
	if ((!(_13627_d->_method_is_const()))) {
		return;
	}
	jule::Str _14113_kind = jule::Str();
	{
		if (_13627_d->_field_constant->_method_is_i64()) {
			_case_begin_4802195616:;
			{
				jule::I64 _14413_x = _13627_d->_field_constant->_method_read_i64();
				_14113_kind=_1ec3e5eda_int_from_bits(static_cast<jule::U64>(_1ec3e5eda_bitsize_of_int(_14413_x)));
			}
		}
		else if (_13627_d->_field_constant->_method_is_u64()) {
			_case_begin_4802195712:;
			{
				jule::U64 _14813_x = _13627_d->_field_constant->_method_read_u64();
				_14113_kind=_1ec3e5eda_uint_from_bits(static_cast<jule::U64>(_1ec3e5eda_bitsize_of_uint(_14813_x)));
			}
		}
		else {
			_case_begin_4802194624:;
			{
				return;
			}
		}
		_match_end_4802194384:;
	}
	if (_13627_d->_field_kind->_method_enm() != nullptr) {
		return;
	}
	_13627_d->_field_kind->_field_kind=_1ec1c55b1_build_prim_type(_14113_kind);
}



inline void _1ebcce31e_normalize_type(jule::Ptr<_1ebcce31e_Data>& _16324_d) {
	{
		if (_1eba534e4_int_assignable(jule::Str("int", 3),_16324_d)) {
			_case_begin_4802204512:;
			{
				_16324_d->_field_kind->_field_kind=_1ec1c55b1_build_prim_type(jule::Str("int", 3));
				_16324_d->_field_constant->_method_set_i64(static_cast<jule::I64>(_16324_d->_field_constant->_method_as_f64()));
			}
		}
		else if (_1eba534e4_int_assignable(jule::Str("uint", 4),_16324_d)) {
			_case_begin_4802204624:;
			{
				_16324_d->_field_kind->_field_kind=_1ec1c55b1_build_prim_type(jule::Str("uint", 4));
				_16324_d->_field_constant->_method_set_u64(static_cast<jule::U64>(_16324_d->_field_constant->_method_as_f64()));
			}
		}
		_match_end_4802204000:;
	}
}



inline void _1ebcce31e_apply_cast_kind_model(jule::Ptr<_1ebcce31e_Data>& _17531_d) {
	_17531_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_CastingExprModel>(new( std::nothrow ) _1eb7ccdea_CastingExprModel(_17531_d->_field_model,_17531_d->_field_cast_kind,_17531_d->_field_kind)));
}



inline void _1ebcce31e_apply_cast_kind(jule::Ptr<_1ebcce31e_Data>& _18325_d) {
	if (_18325_d->_field_cast_kind == nullptr) {
		return;
	}
	_1ebcce31e_apply_cast_kind_model(_18325_d);
	_18325_d->_field_kind=_18325_d->_field_cast_kind;
	_18325_d->_field_cast_kind=nullptr;
}



inline jule::Ptr<_1ebcce31e_Data> _1ebcce31e_build_void_data(void) {
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("void", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Str _1ebcce31e_kind_by_bitsize(jule::Any _20420_expr) {
	{
		auto &_match_expr{ _20420_expr };
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4802219952:;
			{
				jule::F64 _20713_x = _20420_expr.operator jule::F64();
				return _1ec3e5eda_float_from_bits(static_cast<jule::U64>(_1ec3e5eda_bitsize_of_float(_20713_x)));
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4802220144:;
			{
				jule::I64 _21113_x = _20420_expr.operator jule::I64();
				return _1ec3e5eda_int_from_bits(static_cast<jule::U64>(_1ec3e5eda_bitsize_of_int(_21113_x)));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4802220240:;
			{
				jule::U64 _21513_x = _20420_expr.operator jule::U64();
				return _1ec3e5eda_uint_from_bits(static_cast<jule::U64>(_1ec3e5eda_bitsize_of_uint(_21513_x)));
			}
		}
		else {
			_case_begin_4802215088:;
			{
				return jule::Str();
			}
		}
		_match_end_4802216992:;
	}
}



inline jule::Str _1ebcce31e_check_data_for_integer_indexing(jule::Ptr<_1ebcce31e_Data>& _22341_d) {
	jule::Str _22353_err_fmt = jule::Str();
	if (_22341_d == nullptr) {
		_22353_err_fmt = jule::Str();
		return _22353_err_fmt;
	}
	{
		if (_22341_d->_field_kind->_method_prim() == nullptr) {
			_case_begin_4802228480:;
			{
				_22353_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _22353_err_fmt;
			}
		}
		else if ((!(_1ec4784ce_is_int(_22341_d->_field_kind->_method_prim()->_method_to_str())))) {
			_case_begin_4802229040:;
			{
				_22353_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _22353_err_fmt;
			}
		}
		else if (_22341_d->_method_is_const()) {
			_case_begin_4802229136:;
			{
				if (_22341_d->_field_constant->_method_as_f64() < 0LL) {
					_22353_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _22353_err_fmt;
				}
			}
		}
		else if (_22341_d->_field_kind->_method_prim() == nullptr || _22341_d->_method_is_const() || _1ec3e5eda_real_kind_of(_22341_d->_field_kind->_method_prim()->_method_to_str()) != _1ec3e5eda_real_kind_of(jule::Str("int", 3))) {
			_case_begin_4802229232:;
			{
				_22341_d->_field_cast_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3))));
				_1ebcce31e_apply_cast_kind(_22341_d);
			}
		}
		_match_end_4802228896:;
	}
	_22353_err_fmt = jule::Str();
	return _22353_err_fmt;
}



inline jule::Bool _1ec1c55b1_has_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>& _3223_directives,jule::Str _3254_tag) {
	{
		auto &expr = _3223_directives;
		auto it = expr.begin();
		_iter_begin_4802237808:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> _1ec1c55b1_dr = *it;
			{
				if (_1ec1c55b1_dr->_field_tag._field_kind == _3254_tag) {
					return true;
				}
			}
			_iter_next_4802237808:;
			++it;
			goto _iter_begin_4802237808;
		}
		_iter_end_4802237808:;
	}
	return false;
}



inline jule::Bool _1ec1c55b1_can_get_ptr(jule::Ptr<_1ebcce31e_Data>& _54821_d) {
	if ((!(_54821_d->_field_lvalue)) || _54821_d->_method_is_const()) {
		return false;
	}
	{
		if ((_54821_d->_field_kind->_method_fnc() != nullptr) || (_54821_d->_field_kind->_method_enm() != nullptr)) {
			_case_begin_4802245568:;
			{
				return false;
			}
		}
		else {
			_case_begin_4802243632:;
			{
				return true;
			}
		}
		_match_end_4802241072:;
	}
}



inline jule::Bool _1ec1c55b1_is_valid_for_sptr_type(jule::Ptr<_1ec1c55b1_TypeKind>& _56332_t) {
	jule::Ptr<_1eb29bdd6_StructIns> _56413_s = _56332_t->_method_strct();
	if (((_56413_s != nullptr) && (_56413_s->_field_decl != nullptr)) && _56413_s->_field_decl->_field_cpp_linked) {
		return false;
	}
	return true;
}



inline jule::Bool _1ec1c55b1_is_valid_for_ref(jule::Ptr<_1ec1c55b1_TypeKind>& _57226_t) {
	return _57226_t->_method_fnc() == nullptr;
}



inline jule::Bool _1ec1c55b1_is_builtin_str_convertable(jule::Ptr<_1ec1c55b1_TypeKind>& _57536_t) {
	return ((!(_57536_t->_method_void())) && (_57536_t->_method_fnc() == nullptr)) && (_57536_t->_method_tup() == nullptr);
}



inline jule::Str _1ec1c55b1_build_link_path_by_tokens(jule::Slice<_1ea7465e5_Token>& _57931_tokens) {
	jule::Str _58013_s = _57931_tokens[0LL]._field_kind;
	{
		auto expr = _57931_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_4802256704:;
		if (it != expr.end()) {
			_1ea7465e5_Token &_1ec1c55b1_token = *it;
			{
				_58013_s+=jule::Str("::", 2);
				_58013_s+=_1ec1c55b1_token._field_kind;
			}
			_iter_next_4802256704:;
			++it;
			goto _iter_begin_4802256704;
		}
		_iter_end_4802256704:;
	}
	return _58013_s;
}



inline jule::Ptr<_1ec1c55b1_Prim> _1ec1c55b1_build_prim_type(jule::Str _58820_kind) {
	return jule::new_struct_ptr<_1ec1c55b1_Prim>(new( std::nothrow ) _1ec1c55b1_Prim(_58820_kind));
}



inline jule::Ptr<_1eb29bdd6_Struct> _1ec1c55b1_get_struct_from_kind(jule::Ptr<_1ec1c55b1_TypeKind> _59429_k) {
	{
		if (_59429_k == nullptr) {
			_case_begin_4802261744:;
			{
				return nullptr;
			}
		}
		else if (_59429_k->_method_strct() != nullptr) {
			_case_begin_4802261840:;
			{
				return _59429_k->_method_strct()->_field_decl;
			}
		}
		else if (_59429_k->_method_sptr() != nullptr) {
			_case_begin_4802261184:;
			{
				return _1ec1c55b1_get_struct_from_kind(_59429_k->_method_sptr()->_field_elem);
			}
		}
		else if (_59429_k->_method_slc() != nullptr) {
			_case_begin_4802261280:;
			{
				return _1ec1c55b1_get_struct_from_kind(_59429_k->_method_slc()->_field_elem);
			}
		}
		else if (_59429_k->_method_arr() != nullptr) {
			_case_begin_4802261376:;
			{
				return _1ec1c55b1_get_struct_from_kind(_59429_k->_method_arr()->_field_elem);
			}
		}
		else if (_59429_k->_method_ptr() != nullptr) {
			_case_begin_4802260512:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_4802260208:;
			{
				return nullptr;
			}
		}
		_match_end_4802259232:;
	}
}



inline jule::Bool _1ec1c55b1_is_prim(jule::Str _62312_kind) {
	return (((((((((((((((_62312_kind == jule::Str("i8", 2)) || (_62312_kind == jule::Str("i16", 3))) || (_62312_kind == jule::Str("i32", 3))) || (_62312_kind == jule::Str("i64", 3))) || (_62312_kind == jule::Str("u8", 2))) || (_62312_kind == jule::Str("u16", 3))) || (_62312_kind == jule::Str("u32", 3))) || (_62312_kind == jule::Str("u64", 3))) || (_62312_kind == jule::Str("f32", 3))) || (_62312_kind == jule::Str("f64", 3))) || (_62312_kind == jule::Str("int", 3))) || (_62312_kind == jule::Str("uint", 4))) || (_62312_kind == jule::Str("uintptr", 7))) || (_62312_kind == jule::Str("bool", 4))) || (_62312_kind == jule::Str("str", 3))) || (_62312_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ptr<_1ebcb6081_SymbolTable>,jule::Slice<_1e8ea7cc0_Log>> _1ebd050c0_build_symbols(jule::Ptr<_1ea6ecac9_Ast>& _1523_ast,jule::Trait<_1eb7d8048_Importer>& _1539_importer,jule::Ptr<_1eb736eec_SymbolBuilder> _1563_owner) {
	jule::Ptr<_1eb736eec_SymbolBuilder> _1613_sb = jule::new_struct_ptr<_1eb736eec_SymbolBuilder>(new( std::nothrow ) _1eb736eec_SymbolBuilder(_1563_owner,_1539_importer,jule::Slice<_1e8ea7cc0_Log>(),_1523_ast,jule::Ptr<_1ebcb6081_SymbolTable>()));
	_1613_sb->_method_build();
	if (_1613_sb->_field_errors.len() == 0LL) {
		return std::make_tuple(_1613_sb->_field_table,nullptr);
	}
	return std::make_tuple(nullptr,_1613_sb->_field_errors);
}



inline std::tuple<jule::Ptr<_1eb7d8048_Package>,jule::Slice<_1e8ea7cc0_Log>> _1ebd050c0___analyze_package(jule::Slice<jule::Ptr<_1ea6ecac9_Ast>>& _2927_files,jule::Trait<_1eb7d8048_Importer>& _2947_importer,jule::Int& _2968_flags) {
	jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>::alloc(0LL,static_cast<jule::I64>(_2927_files.len()));
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_4802288336:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ecac9_Ast> _1ebd050c0_f = *it;
			{
				jule::Ptr<_1ebcb6081_SymbolTable> _3318_table;
				jule::Slice<_1e8ea7cc0_Log> _3329_errors;
				std::tie(_3318_table,_3329_errors) = _1ebd050c0_build_symbols(_1ebd050c0_f,_2947_importer,nullptr);
				if (_3329_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_3329_errors);
				}
				_3113_tables.push(_3318_table);
			}
			_iter_next_4802288336:;
			++it;
			goto _iter_begin_4802288336;
		}
		_iter_end_4802288336:;
	}
	jule::Ptr<_1eb9ed0d7_Sema> _4013_sema = jule::new_struct_ptr<_1eb9ed0d7_Sema>(new( std::nothrow ) _1eb9ed0d7_Sema(jule::Slice<_1e8ea7cc0_Log>(),jule::Slice<jule::Ptr<_1ebcb6081_SymbolTable>>(),jule::Ptr<_1ebcb6081_SymbolTable>(),_2968_flags));
	_4013_sema->_method_check(_3113_tables);
	if (_4013_sema->_field_errors.len() > 0LL) {
		return std::make_tuple(nullptr,_4013_sema->_field_errors);
	}
	jule::Ptr<_1eb7d8048_Package> _4813_pkg = jule::new_struct<_1eb7d8048_Package>(new( std::nothrow ) _1eb7d8048_Package(_4013_sema->_field_files));
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_1eb7d8048_Package>,jule::Slice<_1e8ea7cc0_Log>> _1ebd050c0_analyze_package(jule::Slice<jule::Ptr<_1ea6ecac9_Ast>> _7228_files,jule::Trait<_1eb7d8048_Importer> _7247_importer,jule::Int _7267_flags) {
	if (_7228_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1eb7d8048_Package> _7714_package;
	jule::Slice<_1e8ea7cc0_Log> _7727_logs;
	std::tie(_7714_package,_7727_logs) = _1ebd050c0___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)> _1ec2ee113_find_builtin_caller(jule::U8 _7824_c) {
	{
		auto &_match_expr{ _7824_c };
		if (_match_expr == 1LLU) {
			_case_begin_4802313776:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_common);
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_4802313904:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_common_mut);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4802314784:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_common_plain);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_4802314336:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_out);
			}
		}
		else if (_match_expr == 5LLU) {
			_case_begin_4802314432:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_outln);
			}
		}
		else if (_match_expr == 6LLU) {
			_case_begin_4802314080:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_new);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4802314176:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_panic);
			}
		}
		else if (_match_expr == 8LLU) {
			_case_begin_4802315296:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_copy);
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_4802315392:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_make);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4802315488:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_append);
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_4802315584:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_clone);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_4802315680:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_assert);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_4802315776:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_std_mem_size_of);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_4802315872:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_std_mem_align_of);
			}
		}
		else if (_match_expr == 15LLU) {
			_case_begin_4802315968:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_std_jule_integrated_to_str);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_4802316064:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_std_jule_integrated_inline);
			}
		}
		else if (_match_expr == 17LLU) {
			_case_begin_4802316176:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_std_debug_out);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_4802316288:;
			{
				return jule::Fn<jule::Ptr<_1ebcce31e_Data>(jule::Ptr<_1ebcce31e_Eval>&,jule::Ptr<_1ea6ee955_FnCallExpr>&,jule::Ptr<_1ebcce31e_Data>&)>(_1ec2ee113_builtin_caller_std_debug_outln);
			}
		}
		else {
			_case_begin_4802312016:;
			{
				jule::panic(jule::Str("builtin caller not exist", 24) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/jule/sema/builtin.jule:135:9"));;
			}
		}
		_match_end_4802312368:;
	}
}



inline jule::Ptr<_1eb627195_FnIns> _1ec2ee113_find_builtin_fn(jule::Str _13920_ident) {
	{
		auto &_match_expr{ _13920_ident };
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_4802332896:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),4LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_4802332992:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),5LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_4802332336:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),6LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_4802332432:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),7LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_4802332528:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),9LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_4802328048:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),10LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_4802328144:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),8LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_4802328240:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),11LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_4802328336:;
			{
				return jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),12LLU,jule::Bool()));
			}
		}
		else {
			_case_begin_4802331840:;
			{
				return nullptr;
			}
		}
		_match_end_4802332144:;
	}
}



inline jule::Ptr<_1ec1c55b1_TypeAlias> _1ec2ee113_find_builtin_type_alias(jule::Str _15428_ident) {
	{
		auto &_match_expr{ _15428_ident };
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_4802334336:;
			{
				return _1ec2ee113_BUILTIN_TYPE_ALIAS_BYTE;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_4802343216:;
			{
				return _1ec2ee113_BUILTIN_TYPE_ALIAS_RUNE;
			}
		}
		else {
			_case_begin_4802333760:;
			{
				return nullptr;
			}
		}
		_match_end_4802335424:;
	}
}



inline jule::Ptr<_1eb7c68e9_Trait> _1ec2ee113_find_builtin_trait(jule::Str _16223_ident) {
	{
		auto &_match_expr{ _16223_ident };
		if (_match_expr == jule::Str("Dispose", 7)) {
			_case_begin_4802346736:;
			{
				return _1ec2ee113_BUILTIN_TRAIT_DISPOSE;
			}
		}
		else {
			_case_begin_4802345584:;
			{
				return nullptr;
			}
		}
		_match_end_4802344944:;
	}
}



inline jule::Any _1ec2ee113_find_builtin_def(jule::Str _16921_ident) {
	jule::Ptr<_1eb627195_FnIns> _17013_f = _1ec2ee113_find_builtin_fn(_16921_ident);
	if (_17013_f != nullptr) {
		return jule::Any(_17013_f);
	}
	jule::Ptr<_1ec1c55b1_TypeAlias> _17513_ta = _1ec2ee113_find_builtin_type_alias(_16921_ident);
	if (_17513_ta != nullptr) {
		return jule::Any(_17513_ta);
	}
	jule::Ptr<_1eb7c68e9_Trait> _18013_t = _1ec2ee113_find_builtin_trait(_16921_ident);
	if (_18013_t != nullptr) {
		return jule::Any(_18013_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1ec2ee113_find_builtin_def_std_debug(jule::Str _18831_ident) {
	{
		auto &_match_expr{ _18831_ident };
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_4802355248:;
			{
				return jule::Any(jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),17LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_4802354880:;
			{
				return jule::Any(jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),18LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_4802348736:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4802353264:;
	}
}



inline jule::Any _1ec2ee113_find_builtin_def_std_mem(jule::Str _19629_ident) {
	{
		auto &_match_expr{ _19629_ident };
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_4802359584:;
			{
				return jule::Any(jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),13LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_4802359216:;
			{
				return jule::Any(jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),14LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_4802354976:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4802357504:;
	}
}



inline jule::Any _1ec2ee113_find_builtin_def_std_jule_integrated(jule::Str _20441_ident) {
	{
		auto &_match_expr{ _20441_ident };
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_4802363856:;
			{
				return jule::Any(jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),15LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("inline", 6)) {
			_case_begin_4802363488:;
			{
				return jule::Any(jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>(),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),16LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_4802360384:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4802362048:;
	}
}



inline jule::Any _1ec2ee113_find_package_builtin_def(jule::Str _21229_link_path,jule::Str _21245_ident) {
	{
		auto &_match_expr{ _21229_link_path };
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_4802368656:;
			{
				return _1ec2ee113_find_builtin_def_std_debug(_21245_ident);
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_4802368288:;
			{
				return _1ec2ee113_find_builtin_def_std_mem(_21245_ident);
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_4802368384:;
			{
				return _1ec2ee113_find_builtin_def_std_jule_integrated(_21245_ident);
			}
		}
		else {
			_case_begin_4802366832:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4802363088:;
	}
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_common_plain(jule::Ptr<_1ebcce31e_Eval>& _22137_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _22152_fc,jule::Ptr<_1ebcce31e_Data>& _22174_d) {
	jule::Ptr<_1eb627195_FnIns> _22213_f = _22174_d->_field_kind->_method_fnc();
	_1eba534e4_FnCallArgChecker _22413_fcac = _1eba534e4_FnCallArgChecker(_22137_e,_22152_fc->_field_args,_22152_fc->_field_token,_22213_f,false,jule::Slice<jule::Any>());
	_22413_fcac._method_check();
	jule::Ptr<_1eb7ccdea_FnCallExprModel> _23313_model = jule::new_struct<_1eb7ccdea_FnCallExprModel>(new( std::nothrow ) _1eb7ccdea_FnCallExprModel(_1ea7465e5_Token(),_22213_f,jule::Bool(),_22174_d->_field_model,_22413_fcac._field_arg_models,jule::Ptr<_1eb7d5892_Scope>(),jule::Bool()));
	if (_22213_f->_field_result == nullptr) {
		_22174_d=_1ebcce31e_build_void_data();
	} else {
		_22174_d=jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(_22213_f->_field_result,jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
	}
	_22174_d->_field_model=jule::Any(_23313_model);
	return _22174_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_common(jule::Ptr<_1ebcce31e_Eval>& _25131_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _25146_fc,jule::Ptr<_1ebcce31e_Data>& _25168_d) {
	if (_25146_fc->_field_generics.len() > 0LL) {
		_25131_e->_method_push_err(_25146_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	return _1ec2ee113_builtin_caller_common_plain(_25131_e,_25146_fc,_25168_d);
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_common_mut(jule::Ptr<_1ebcce31e_Eval>& _25935_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _25950_fc,jule::Ptr<_1ebcce31e_Data>& _25972_d) {
	if ((!(_25972_d->_field_mutable))) {
		_25935_e->_method_push_err(_25950_fc->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	return _1ec2ee113_builtin_caller_common(_25935_e,_25950_fc,_25972_d);
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_error(jule::Ptr<_1ebcce31e_Eval>& _26630_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _26645_fc) {
	if (_26645_fc->_field_generics.len() > 0LL) {
		_26630_e->_method_push_err(_26645_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_26645_fc->_field_args.len() < 1LL) {
		_26630_e->_method_push_err(_26645_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	}
	if (_26645_fc->_field_args.len() > 1LL) {
		_26630_e->_method_push_err(_26645_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _27713_expr = _26630_e->_method_eval_expr(_26645_fc->_field_args[0LL]);
	if (_27713_expr == nullptr) {
		return nullptr;
	}
	if (_27713_expr->_method_is_nil()) {
		_26630_e->_method_push_err(_26645_fc->_field_args[0LL]->_field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _28613_d = _1ebcce31e_build_void_data();
	_28613_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinErrorCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinErrorCallExprModel(jule::Ptr<_1eb627195_FnIns>(),_27713_expr->_field_model)));
	return _28613_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_out(jule::Ptr<_1ebcce31e_Eval>& _29428_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _29443_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_29443_fc->_field_generics.len() > 0LL) {
		_29428_e->_method_push_err(_29443_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_29443_fc->_field_args.len() < 1LL) {
		_29428_e->_method_push_err(_29443_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	}
	if (_29443_fc->_field_args.len() > 1LL) {
		_29428_e->_method_push_err(_29443_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _30613_expr = _29428_e->_method_eval_expr(_29443_fc->_field_args[0LL]);
	if (_30613_expr == nullptr) {
		return nullptr;
	}
	if ((!(_1ec1c55b1_is_builtin_str_convertable(_30613_expr->_field_kind)))) {
		_29428_e->_method_push_err(_29443_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _31613_d = _1ebcce31e_build_void_data();
	_31613_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinOutCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinOutCallExprModel(_30613_expr->_field_model,jule::Bool())));
	return _31613_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_outln(jule::Ptr<_1ebcce31e_Eval>& _32130_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _32145_fc,jule::Ptr<_1ebcce31e_Data>& _32167_d) {
	_32167_d=_1ec2ee113_builtin_caller_out(_32130_e,_32145_fc,_32167_d);
	if (_32167_d == nullptr) {
		return nullptr;
	}
	_32167_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinOutlnCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinOutlnCallExprModel(_32167_d->_field_model.operator jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel>()->_field_expr,jule::Bool())));
	return _32167_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_new(jule::Ptr<_1ebcce31e_Eval>& _33328_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _33343_fc,jule::Ptr<_1ebcce31e_Data>& _33365_d) {
	if (_33343_fc->_field_generics.len() > 0LL) {
		_33328_e->_method_push_err(_33343_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_33343_fc->_field_args.len() < 1LL) {
		_33328_e->_method_push_err(_33343_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	}
	if (_33343_fc->_field_args.len() > 2LL) {
		_33328_e->_method_push_err(_33343_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _34513_t = _33328_e->_method_eval_expr_kind(_33343_fc->_field_args[0LL]->_field_kind);
	if (_34513_t == nullptr) {
		return nullptr;
	}
	if ((!(_34513_t->_field_decl))) {
		_33328_e->_method_push_err(_33343_fc->_field_args[0LL]->_field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_1ec1c55b1_is_valid_for_sptr_type(_34513_t->_field_kind)))) {
		jule::Ptr<_1eb29bdd6_StructIns> _35617_s = _34513_t->_field_kind->_method_strct();
		if (((_35617_s != nullptr) && (_35617_s->_field_decl != nullptr)) && _35617_s->_field_decl->_field_cpp_linked) {
			_33328_e->_method_push_err(_33343_fc->_field_args[0LL]->_field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	_33365_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ec1c55b1_Sptr>(new( std::nothrow ) _1ec1c55b1_Sptr(_34513_t->_field_kind))));
	if (_33343_fc->_field_args.len() == 2LL) {
		jule::Ptr<_1ec1c55b1_TypeKind> _36617_old = _33328_e->_field_prefix;
		_33328_e->_field_prefix=_34513_t->_field_kind;
		jule::Ptr<_1ebcce31e_Data> _36917_init = _33328_e->_method_eval_expr(_33343_fc->_field_args[1LL]);
		_33328_e->_field_prefix=_36617_old;
		if (_36917_init != nullptr) {
			_1ea7465e5_Token _37421_token = _33343_fc->_field_args[1LL]->_field_token;
			
			_33328_e->_field_s->_method_check_validity_for_init_expr((!(_33328_e->_field_immutable)),false,_34513_t->_field_kind,_36917_init,_37421_token);
			_33328_e->_field_s->_method_check_assign_type(false,_34513_t->_field_kind,_36917_init,_37421_token);
			_33365_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinNewCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinNewCallExprModel(_34513_t->_field_kind,_36917_init->_field_model)));
		}
	} else {
		_33365_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinNewCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinNewCallExprModel(_34513_t->_field_kind,jule::Any())));
	}
	return _33365_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_panic(jule::Ptr<_1ebcce31e_Eval>& _39230_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _39245_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_39245_fc->_field_generics.len() > 0LL) {
		_39230_e->_method_push_err(_39245_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_39245_fc->_field_args.len() < 1LL) {
		_39230_e->_method_push_err(_39245_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	}
	if (_39245_fc->_field_args.len() > 1LL) {
		_39230_e->_method_push_err(_39245_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _40413_expr = _39230_e->_method_eval_expr(_39245_fc->_field_args[0LL]);
	if (_40413_expr == nullptr) {
		return nullptr;
	}
	if ((_40413_expr->_field_kind->_method_prim() == nullptr) || (!(_40413_expr->_field_kind->_method_prim()->_method_is_str()))) {
		_39230_e->_method_push_err(_39245_fc->_field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _41313_d = _1ebcce31e_build_void_data();
	_41313_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinPanicCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinPanicCallExprModel(_39245_fc->_field_token,_40413_expr->_field_model)));
	return _41313_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_make(jule::Ptr<_1ebcce31e_Eval>& _42129_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _42144_fc,jule::Ptr<_1ebcce31e_Data>& _42166_d) {
	if (_42144_fc->_field_generics.len() > 0LL) {
		_42129_e->_method_push_err(_42144_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_42144_fc->_field_args.len() < 2LL) {
		if (_42144_fc->_field_args.len() == 1LL) {
			_42129_e->_method_push_err(_42144_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		}
		_42129_e->_method_push_err(_42144_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	}
	if (_42144_fc->_field_args.len() > 3LL) {
		_42129_e->_method_push_err(_42144_fc->_field_args[3LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _43713_t = _42129_e->_method_eval_expr_kind(_42144_fc->_field_args[0LL]->_field_kind);
	if (_43713_t == nullptr) {
		return nullptr;
	}
	if ((!(_43713_t->_field_decl)) || (_43713_t->_field_kind->_method_slc() == nullptr)) {
		_42129_e->_method_push_err(_42144_fc->_field_args[0LL]->_field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_42166_d->_field_kind=_43713_t->_field_kind;
	jule::Ptr<_1ebcce31e_Data> _44913_len = _42129_e->_field_s->_method_evalp(_42129_e->_field_lookup,_43713_t->_field_kind)->_method_eval_expr(_42144_fc->_field_args[1LL]);
	if (_44913_len == nullptr) {
		return _42166_d;
	}
	_42129_e->_method_check_integer_indexing_by_data(_44913_len,_42144_fc->_field_args[1LL]->_field_token);
	if (_42144_fc->_field_args.len() == 3LL) {
		jule::Ptr<_1ebcce31e_Data> _45717_cap = _42129_e->_field_s->_method_evalp(_42129_e->_field_lookup,_43713_t->_field_kind)->_method_eval_expr(_42144_fc->_field_args[2LL]);
		if (_45717_cap == nullptr) {
			return _42166_d;
		}
		_42129_e->_method_check_integer_indexing_by_data(_45717_cap,_42144_fc->_field_args[2LL]->_field_token);
		_42166_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinMakeCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinMakeCallExprModel(_43713_t->_field_kind,_44913_len->_field_model,_45717_cap->_field_model)));
	} else {
		_42166_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinMakeCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinMakeCallExprModel(_43713_t->_field_kind,_44913_len->_field_model,jule::Any())));
	}
	return _42166_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_append(jule::Ptr<_1ebcce31e_Eval>& _47831_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _47846_fc,jule::Ptr<_1ebcce31e_Data>& _47868_d) {
	if (_47846_fc->_field_generics.len() > 0LL) {
		_47831_e->_method_push_err(_47846_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_47846_fc->_field_args.len() < 2LL) {
		if (_47846_fc->_field_args.len() == 1LL) {
			_47831_e->_method_push_err(_47846_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		_47831_e->_method_push_err(_47846_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _49113_t = _47831_e->_method_eval_expr(_47846_fc->_field_args[0LL]);
	if (_49113_t == nullptr) {
		return nullptr;
	}
	if (_49113_t->_field_kind->_method_slc() == nullptr) {
		_47831_e->_method_push_err(_47846_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eb627195_FnIns> _50113_f = jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str())),_49113_t->_field_kind)),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),true,true,jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str())),_49113_t->_field_kind->_method_slc()->_field_elem))}),_49113_t->_field_kind,jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),3LLU,jule::Bool()));
	_47868_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_50113_f));
	_47868_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_CommonIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonIdentExprModel(jule::Str("append", 6))));
	_47868_d=_1ec2ee113_builtin_caller_common_plain(_47831_e,_47846_fc,_47868_d);
	if (_47868_d != nullptr) {
		jule::Ptr<_1eb7ccdea_FnCallExprModel> _52517_model = _47868_d->_field_model.operator jule::Ptr<_1eb7ccdea_FnCallExprModel>();
		_47868_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinAppendCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinAppendCallExprModel(_52517_model->_field_args[0LL],_52517_model->_field_args[1LL])));
	}
	return _47868_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_copy(jule::Ptr<_1ebcce31e_Eval>& _53429_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _53444_fc,jule::Ptr<_1ebcce31e_Data>& _53466_d) {
	if (_53444_fc->_field_generics.len() > 0LL) {
		_53429_e->_method_push_err(_53444_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_53444_fc->_field_args.len() < 2LL) {
		if (_53444_fc->_field_args.len() == 1LL) {
			_53429_e->_method_push_err(_53444_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		_53429_e->_method_push_err(_53444_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	if (_53444_fc->_field_args.len() > 2LL) {
		_53429_e->_method_push_err(_53444_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _55013_t = _53429_e->_method_eval_expr(_53444_fc->_field_args[0LL]);
	if (_55013_t == nullptr) {
		return nullptr;
	}
	if (_55013_t->_field_kind->_method_slc() == nullptr) {
		_53429_e->_method_push_err(_53444_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_55013_t->_field_mutable))) {
		_53429_e->_method_push_err(_53444_fc->_field_args[0LL]->_field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eb627195_FnIns> _56413_f = jule::new_struct_ptr<_1eb627195_FnIns>(new( std::nothrow ) _1eb627195_FnIns(jule::Ptr<_1eb29bdd6_StructIns>(),jule::Ptr<_1eb627195_Fn>(),jule::Slice<jule::Ptr<_1ec1c55b1_TypeKind>>(),jule::Slice<jule::Ptr<_1eb627195_ParamIns>>({jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param()),_55013_t->_field_kind)),jule::new_struct<_1eb627195_ParamIns>(new( std::nothrow ) _1eb627195_ParamIns(jule::new_struct_ptr<_1eb627195_Param>(new( std::nothrow ) _1eb627195_Param(_1ea7465e5_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_1ec1c55b1_TypeSymbol>(),jule::Str())),_55013_t->_field_kind))}),jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1eb7d5892_Scope>(),jule::Ptr<_1eb736eec_ReferenceStack>(),jule::Bool(),jule::Ptr<_1eb736eec_ReferenceStack>(),3LLU,jule::Bool()));
	_53466_d->_field_kind=jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_56413_f));
	_53466_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_CommonIdentExprModel>(new( std::nothrow ) _1eb7ccdea_CommonIdentExprModel(jule::Str("copy", 4))));
	_53466_d=_1ec2ee113_builtin_caller_common_plain(_53429_e,_53444_fc,_53466_d);
	return _53466_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_clone(jule::Ptr<_1ebcce31e_Eval>& _58830_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _58845_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_58845_fc->_field_generics.len() > 0LL) {
		_58830_e->_method_push_err(_58845_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_58845_fc->_field_args.len() < 1LL) {
		_58830_e->_method_push_err(_58845_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if (_58845_fc->_field_args.len() > 1LL) {
		_58830_e->_method_push_err(_58845_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _60113_d = _58830_e->_method_eval_expr_kind(_58845_fc->_field_args[0LL]->_field_kind);
	if (_60113_d == nullptr) {
		return nullptr;
	}
	jule::Fn<void(jule::Ptr<_1ec1c55b1_TypeKind>)> _6069_check_kind = jule::Fn<void(jule::Ptr<_1ec1c55b1_TypeKind>)>([=](jule::Ptr<_1ec1c55b1_TypeKind> _60629_k) mutable -> void {
		{
			if (_60629_k->_method_slc() != nullptr) {
				_case_begin_4802595600:;
				{
					if ((!(_60629_k->_method_slc()->_field_elem->_method_supports_cloning()))) {
						{
							_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any(_60629_k->_method_to_str())}));
						}
					}
				}
			}
			else if (_60629_k->_method_map() != nullptr) {
				_case_begin_4802595696:;
				{
					jule::Ptr<_1ec1c55b1_Map> _61717_m = _60629_k->_method_map();
					if ((!(_61717_m->_field_key->_method_supports_cloning())) || (!(_61717_m->_field_val->_method_supports_cloning()))) {
						{
							_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any(_60629_k->_method_to_str())}));
						}
					}
				}
			}
			else if (_60629_k->_method_arr() != nullptr) {
				_case_begin_4802595792:;
				{
					if ((!(_60629_k->_method_arr()->_field_elem->_method_supports_cloning()))) {
						{
							_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any(_60629_k->_method_to_str())}));
						}
					}
				}
			}
			else if (_60629_k->_method_sptr() != nullptr) {
				_case_begin_4802595888:;
				{
					if ((!(_60629_k->_method_sptr()->_field_elem->_method_supports_cloning()))) {
						{
							_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any(_60629_k->_method_to_str())}));
						}
					}
				}
			}
			else if (_60629_k->_method_strct() != nullptr) {
				_case_begin_4802596096:;
				{
					jule::Ptr<_1eb29bdd6_StructIns> _64217_s = _60113_d->_field_kind->_method_strct();
					if ((!(_64217_s->_field_mutable))) {
						{
							_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any(_60113_d->_field_kind->_method_to_str())}));
						}
					}
					if (((_64217_s->_field_decl == nullptr) || _64217_s->_field_decl->_field_cpp_linked) || (!(_64217_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))))) {
						{
							_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any(_60113_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
						}
					}
				}
			}
			else {
				_case_begin_4802595296:;
				{
					{
						_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any(_60113_d->_field_kind->_method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			_match_end_4802595120:;
		}
	});
	{
		if ((!(_60113_d->_field_lvalue))) {
			_case_begin_4802622912:;
			{
				_58830_e->_method_push_err(_58845_fc->_field_args[0LL]->_field_token,jule::Str("non-lvalue expressions cannot be clone", 38),jule::Slice<jule::Any>());
			}
		}
		else if ((!(_60113_d->_field_kind->_method_supports_cloning()))) {
			_case_begin_4802620768:;
			{
				_6069_check_kind(_60113_d->_field_kind);
			}
		}
		_match_end_4802622832:;
	}
	_60113_d->_field_mutable=true;
	_60113_d->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BuiltinCloneCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinCloneCallExprModel(_60113_d->_field_model)));
	return _60113_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_assert(jule::Ptr<_1ebcce31e_Eval>& _67931_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _67946_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_67946_fc->_field_generics.len() > 0LL) {
		_67931_e->_method_push_err(_67946_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_67946_fc->_field_args.len() < 1LL) {
		_67931_e->_method_push_err(_67946_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if (_67946_fc->_field_args.len() > 2LL) {
		_67931_e->_method_push_err(_67946_fc->_field_args[2LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _69113_expr = _67931_e->_method_eval_expr(_67946_fc->_field_args[0LL]);
	if (_69113_expr == nullptr) {
		return nullptr;
	}
	if ((_69113_expr->_field_kind->_method_prim() == nullptr) || (!(_69113_expr->_field_kind->_method_prim()->_method_is_bool()))) {
		_67931_e->_method_push_err(_67946_fc->_field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eb7ccdea_BuiltinAssertCallExprModel> _70013_model = jule::new_struct<_1eb7ccdea_BuiltinAssertCallExprModel>(new( std::nothrow ) _1eb7ccdea_BuiltinAssertCallExprModel(_67946_fc->_field_token,_69113_expr->_field_model,jule::Str("assertion failed", 16)));
	if (_67946_fc->_field_args.len() == 2LL) {
		jule::Ptr<_1ebcce31e_Data> _70817_log = _67931_e->_method_eval_expr(_67946_fc->_field_args[1LL]);
		if (_70817_log == nullptr) {
			return nullptr;
		}
		if (((!(_70817_log->_method_is_const())) || (_70817_log->_field_kind->_method_prim() == nullptr)) || (!(_70817_log->_field_kind->_method_prim()->_method_is_str()))) {
			_67931_e->_method_push_err(_67946_fc->_field_args[1LL]->_field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("const str", 9)),jule::Any(_70817_log->_field_kind->_method_to_str())}));
			return nullptr;
		}
		_70013_model->_field_log=_70817_log->_field_constant->_method_read_str();
	}
	jule::Ptr<_1ebcce31e_Data> _72113_d = _1ebcce31e_build_void_data();
	_72113_d->_field_model=jule::Any(_70013_model);
	return _72113_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_mem_size_of(jule::Ptr<_1ebcce31e_Eval>& _72640_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _72655_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_72655_fc->_field_generics.len() > 0LL) {
		_72640_e->_method_push_err(_72655_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _73013_result = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
	if (_72655_fc->_field_args.len() < 1LL) {
		_72640_e->_method_push_err(_72655_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _73013_result;
	}
	if (_72655_fc->_field_args.len() > 1LL) {
		_72640_e->_method_push_err(_72655_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _74213_d = _72640_e->_method_eval_expr_kind(_72655_fc->_field_args[0LL]->_field_kind);
	if (_74213_d == nullptr) {
		return _73013_result;
	}
	_73013_result->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_SizeofExprModel>(new( std::nothrow ) _1eb7ccdea_SizeofExprModel(_74213_d->_field_model)));
	return _73013_result;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_mem_align_of(jule::Ptr<_1ebcce31e_Eval>& _75141_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _75156_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_75156_fc->_field_generics.len() > 0LL) {
		_75141_e->_method_push_err(_75156_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _75513_result = jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
	if (_75156_fc->_field_args.len() < 1LL) {
		_75141_e->_method_push_err(_75156_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _75513_result;
	}
	if (_75156_fc->_field_args.len() > 1LL) {
		_75141_e->_method_push_err(_75156_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _76713_d = _75141_e->_method_eval_expr_kind(_75156_fc->_field_args[0LL]->_field_kind);
	if (_76713_d == nullptr) {
		return _75513_result;
	}
	_75513_result->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_AlignofExprModel>(new( std::nothrow ) _1eb7ccdea_AlignofExprModel(_76713_d->_field_model)));
	return _75513_result;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1ebcce31e_Eval>& _77651_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _77666_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if (_77666_fc->_field_generics.len() > 0LL) {
		_77651_e->_method_push_err(_77666_fc->_field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (_77666_fc->_field_args.len() < 1LL) {
		_77651_e->_method_push_err(_77666_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if (_77666_fc->_field_args.len() > 1LL) {
		_77651_e->_method_push_err(_77666_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _78913_d = _77651_e->_method_eval_expr_kind(_77666_fc->_field_args[0LL]->_field_kind);
	if (_78913_d == nullptr) {
		return nullptr;
	}
	if ((!(_1ec1c55b1_is_builtin_str_convertable(_78913_d->_field_kind)))) {
		_77651_e->_method_push_err(_77666_fc->_field_args[0LL]->_field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ebcce31e_Data>(new( std::nothrow ) _1ebcce31e_Data(jule::new_struct_ptr<_1ec1c55b1_TypeKind>(new( std::nothrow ) _1ec1c55b1_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ec1c55b1_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_1ec1c55b1_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1eb7ccdea_IntegratedToStrExprModel>(new( std::nothrow ) _1eb7ccdea_IntegratedToStrExprModel(_78913_d->_field_model))),jule::Bool(),jule::Ptr<_1ec3e4b65_Const>()));
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_jule_integrated_inline(jule::Ptr<_1ebcce31e_Eval>& _80751_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _80766_fc,jule::Ptr<_1ebcce31e_Data>& ) {
	if ((!(_80751_e->_method_is_unsafe()))) {
		_80751_e->_method_push_err(_80766_fc->_field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	if (_80766_fc->_field_args.len() < 1LL) {
		_80751_e->_method_push_err(_80766_fc->_field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	}
	if (_80766_fc->_field_args.len() > 1LL) {
		_80751_e->_method_push_err(_80766_fc->_field_args[1LL]->_field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ebcce31e_Data> _82013_d = _80751_e->_method_eval_expr(_80766_fc->_field_args[0LL]);
	if (_82013_d == nullptr) {
		return nullptr;
	}
	if ((_82013_d->_field_kind->_method_prim() == nullptr) || (!(_82013_d->_field_kind->_method_prim()->_method_is_str()))) {
		_80751_e->_method_push_err(_80766_fc->_field_args[0LL]->_field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_82013_d->_field_kind->_method_to_str())}));
		return nullptr;
	}
	if ((!(_82013_d->_method_is_const())) || (!(_82013_d->_field_constant->_method_is_str()))) {
		_80751_e->_method_push_err(_80766_fc->_field_args[0LL]->_field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ebcce31e_Data> _83513_r = _1ebcce31e_build_void_data();
	if (_80766_fc->_field_generics.len() != 0LL) {
		if ((!(_80751_e->_field_s->_method_check_generic_quantity(1LL,static_cast<jule::I64>(_80766_fc->_field_generics.len()),_80766_fc->_field_token)))) {
			return nullptr;
		}
		jule::Ptr<_1ec1c55b1_TypeSymbol> _84117_k = _1eb736eec_build_type(_80766_fc->_field_generics[0LL]);
		if ((!(_80751_e->_field_s->_method_check_type(_84117_k,_80751_e->_field_lookup)))) {
			return nullptr;
		}
		_83513_r->_field_kind=_84117_k->_field_kind;
	}
	_83513_r->_field_model=jule::Any(jule::new_struct<_1eb7ccdea_BackendEmitExprModel>(new( std::nothrow ) _1eb7ccdea_BackendEmitExprModel(_82013_d->_field_constant->_method_read_str())));
	return _83513_r;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_debug_out(jule::Ptr<_1ebcce31e_Eval>& _85438_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _85453_fc,jule::Ptr<_1ebcce31e_Data>& _85475_d) {
	_85475_d=_1ec2ee113_builtin_caller_out(_85438_e,_85453_fc,_85475_d);
	if (_85475_d == nullptr) {
		return nullptr;
	}
	_85475_d->_field_model.operator jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel>()->_field_debug=true;
	return _85475_d;
}



inline jule::Ptr<_1ebcce31e_Data> _1ec2ee113_builtin_caller_std_debug_outln(jule::Ptr<_1ebcce31e_Eval>& _86440_e,jule::Ptr<_1ea6ee955_FnCallExpr>& _86455_fc,jule::Ptr<_1ebcce31e_Data>& _86477_d) {
	_86477_d=_1ec2ee113_builtin_caller_outln(_86440_e,_86455_fc,_86477_d);
	if (_86477_d == nullptr) {
		return nullptr;
	}
	_86477_d->_field_model.operator jule::Ptr<_1eb7ccdea_BuiltinOutlnCallExprModel>()->_field_debug=true;
	return _86477_d;
}



inline std::tuple<jule::Bool,jule::Bool> _1ea6918d6_check_os(jule::Str _1013_arg) {
	jule::Bool _1025_ok = jule::Bool();
	jule::Bool _1035_exist = jule::Bool();
	_1025_ok=false;
	_1035_exist=true;
	{
		auto &_match_expr{ _1013_arg };
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_4808383760:;
			{
				_1025_ok=_1e9c67d6a_is_windows(_1e9c5b347_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_4808383856:;
			{
				_1025_ok=_1e9c67d6a_is_darwin(_1e9c5b347_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_4808382656:;
			{
				_1025_ok=_1e9c67d6a_is_linux(_1e9c5b347_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_4808382752:;
			{
				_1025_ok=_1e9c67d6a_is_unix(_1e9c5b347_OS);
			}
		}
		else {
			_case_begin_4808382064:;
			{
				_1025_ok=true;
				_1035_exist=false;
			}
		}
		_match_end_4808381616:;
	}
	return std::make_tuple(_1025_ok,_1035_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _1ea6918d6_check_arch(jule::Str _2715_arg) {
	jule::Bool _2727_ok = jule::Bool();
	jule::Bool _2737_exist = jule::Bool();
	_2727_ok=false;
	_2737_exist=true;
	{
		auto &_match_expr{ _2715_arg };
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_4808391232:;
			{
				_2727_ok=_1e9c67d6a_is_i386(_1e9c5b347_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_4808391328:;
			{
				_2727_ok=_1e9c67d6a_is_amd64(_1e9c5b347_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_4808390128:;
			{
				_2727_ok=_1e9c67d6a_is_arm64(_1e9c5b347_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_4808390224:;
			{
				_2727_ok=_1e9c67d6a_is_64bit(_1e9c5b347_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_4808390320:;
			{
				_2727_ok=_1e9c67d6a_is_32bit(_1e9c5b347_ARCH);
			}
		}
		else {
			_case_begin_4808389536:;
			{
				_2727_ok=true;
				_2737_exist=false;
			}
		}
		_match_end_4808389088:;
	}
	return std::make_tuple(_2727_ok,_2737_exist);
}



inline jule::Bool _1ea6918d6_is_pass_file_annotation(jule::Str _4632_p) {
	_4632_p=_1e904e87d_base(_4632_p);
	jule::I64 _489_n = _4632_p.len();
	_4632_p=_4632_p.slice(0LL,_489_n - _1e904e87d_ext(_4632_p).len());
	jule::Str _5413_a1 = jule::Str();
	jule::Str _5713_a2 = jule::Str();
	jule::Int _6013_i = _4632_p.rfind(jule::Str("_", 1));
	if (_6013_i == -1LL) {
		jule::Bool _6318_ok;
		jule::Bool _6326_exist;
		std::tie(_6318_ok,_6326_exist) = _1ea6918d6_check_os(_4632_p);
		if (_6326_exist) {
			return _6318_ok;
		}
		std::tie(_6318_ok,_6326_exist) = _1ea6918d6_check_arch(_4632_p);
		return (!(_6326_exist)) || _6318_ok;
	}
	if ((_6013_i + 1LL) >= _489_n) {
		return true;
	}
	_5413_a1=_4632_p.slice(_6013_i + 1LL);
	_4632_p=_4632_p.slice(0LL,_6013_i);
	_6013_i=static_cast<jule::Int>(_4632_p.rfind(jule::Str("_", 1)));
	if (_6013_i != -1LL) {
		_5713_a2=_4632_p.slice(_6013_i + 1LL);
	}
	if (_5713_a2 == jule::Str()) {
		jule::Bool _8418_ok;
		jule::Bool _8426_exist;
		std::tie(_8418_ok,_8426_exist) = _1ea6918d6_check_os(_5413_a1);
		if (_8426_exist) {
			return _8418_ok;
		}
		std::tie(_8418_ok,_8426_exist) = _1ea6918d6_check_arch(_5413_a1);
		return (!(_8426_exist)) || _8418_ok;
	}
	jule::Bool _9214_ok;
	jule::Bool _9222_exist;
	std::tie(_9214_ok,_9222_exist) = _1ea6918d6_check_arch(_5413_a1);
	if (_9222_exist) {
		if ((!(_9214_ok))) {
			return false;
		}
		jule::Bool _9714_ok;
		jule::Bool _9718_exist;
		std::tie(_9714_ok,_9718_exist) = _1ea6918d6_check_os(_5713_a2);
		return (!(_9718_exist)) || _9714_ok;
	}
	std::tie(_9214_ok,_9222_exist) = _1ea6918d6_check_os(_5413_a1);
	return (!(_9222_exist)) || _9214_ok;
}



inline void _1ea6bb812_set_os_flags(void) {
	{
		auto &_match_expr{ _1e9c5b347_OS };
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_4808419168:;
			{
				_1ea6bb812_FLAGS.push(jule::Str("windows", 7));
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_4808416176:;
			{
				_1ea6bb812_FLAGS.push(jule::Str("linux", 5));
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_4808416272:;
			{
				_1ea6bb812_FLAGS.push(jule::Str("darwin", 6));
			}
		}
		_match_end_4808415504:;
	}
	if (_1e9c67d6a_is_unix(_1e9c5b347_OS)) {
		_1ea6bb812_FLAGS.push(jule::Str("unix", 4));
	}
}



inline void _1ea6bb812_set_arch_flags(void) {
	{
		auto &_match_expr{ _1e9c5b347_ARCH };
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_4808425104:;
			{
				_1ea6bb812_FLAGS.push(jule::Str("i386", 4));
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_4808423888:;
			{
				_1ea6bb812_FLAGS.push(jule::Str("amd64", 5));
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_4808423984:;
			{
				_1ea6bb812_FLAGS.push(jule::Str("arm64", 5));
			}
		}
		_match_end_4808425024:;
	}
	if (_1e9c67d6a_is_64bit(_1e9c5b347_ARCH)) {
		_1ea6bb812_FLAGS.push(jule::Str("x64", 3));
	}
	if (_1e9c67d6a_is_32bit(_1e9c5b347_ARCH)) {
		_1ea6bb812_FLAGS.push(jule::Str("x32", 3));
	}
}



inline void _1ea6bb812_init_flags(void) {
	_1ea6bb812_set_os_flags();
	_1ea6bb812_set_arch_flags();
	if (_1e9c5e35b_PRODUCTION) {
		_1ea6bb812_FLAGS.push(jule::Str("production", 10));
	}
	if (_1e9ca741a_TEST) {
		_1ea6bb812_FLAGS.push(jule::Str("test", 4));
	}
}



inline void _1ea6cd59e_exit_err(jule::Str _2413_msg) {
	
	jule::outln(_2413_msg);
	_1e9cbbc04_exit(1LL);
}



inline jule::Slice<jule::U8> _1ea6cd59e_read_buff(jule::Str _3214_path) {
	return ({
		auto except = _1e8e1b6a1_File::_static_method_read(_3214_path);
		(except.ok()) ? (except.result) : ({{
			_1ea6cd59e_exit_err(jule::Str("error: file cannot read", 23));
			return nullptr;
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _1e8ea7cc0_Log _1ea6cd59e_flat_compiler_err(jule::Str _4122_text) {
	return _1e8ea7cc0_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4122_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Bool,jule::Slice<_1e8ea7cc0_Log>> _1ea6cd59e_is_pass_build_directives(jule::Ptr<_1ea6ecac9_Ast>& _4934_file) {
	{
		auto &expr = _4934_file->_field_top_directives;
		auto it = expr.begin();
		_iter_begin_4808439728:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> _1ea6cd59e_td = *it;
			{
				if (_1ea6cd59e_td->_field_tag._field_kind != jule::Str("build", 5)) {
					goto _iter_next_4808439728;
				}
				_1ea693388_DirectiveEval _5517_de = _1ea693388_DirectiveEval(jule::Slice<_1e8ea7cc0_Log>(),_1ea6cd59e_td);
				jule::Bool _5813_result = _5517_de._method_eval();
				if (_5517_de._field_logs.len() > 0LL) {
					return std::make_tuple(false,_5517_de._field_logs);
				}
				if ((!(_5813_result))) {
					return std::make_tuple(false,nullptr);
				}
			}
			_iter_next_4808439728:;
			++it;
			goto _iter_begin_4808439728;
		}
		_iter_end_4808439728:;
	}
	return std::make_tuple(true,nullptr);
}



inline void _1ea66c0ed_push_passes(jule::Ptr<_1eb7d8048_Package>& _12421_p,jule::Slice<jule::Str>& _12445_passes) {
	{
		auto &expr = _12421_p->_field_files;
		auto it = expr.begin();
		_iter_begin_4808568448:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ea66c0ed_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = _1ea66c0ed_f->_field_passes;
					auto it = expr.begin();
					_iter_begin_4808570544:;
					if (it != expr.end()) {
						_1eb736eec_Pass &_1ea66c0ed_pass = *it;
						{
							if (_1ea66c0ed_pass._field_text == jule::Str()) {
								goto _iter_next_4808570544;
							}
							{
								auto &expr = _12445_passes;
								auto it = expr.begin();
								_iter_begin_4808572864:;
								if (it != expr.end()) {
									jule::Str &_1ea66c0ed_cpass = *it;
									{
										if (_1ea66c0ed_cpass == _1ea66c0ed_pass._field_text) {
											goto _iter_next_4808570544;
										}
									}
									_iter_next_4808572864:;
									++it;
									goto _iter_begin_4808572864;
								}
								_iter_end_4808572864:;
							}
							_12445_passes.push(_1ea66c0ed_pass._field_text);
						}
						_iter_next_4808570544:;
						++it;
						goto _iter_begin_4808570544;
					}
					_iter_end_4808570544:;
				}
			}
			_iter_next_4808568448:;
			++it;
			goto _iter_begin_4808568448;
		}
		_iter_end_4808568448:;
	}
}



inline jule::Slice<jule::Str> _1ea66c0ed_get_all_unique_passes(jule::Ptr<_1eb7d8048_Package>& _14131_pkg,jule::Slice<jule::Ptr<_1eb7d8048_ImportInfo>> _14156_uses) {
	jule::Slice<jule::Str> _14213_passes = nullptr;
	_1ea66c0ed_push_passes(_14131_pkg,_14213_passes);
	{
		auto &expr = _14156_uses;
		auto it = expr.begin();
		_iter_begin_4808577744:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ea66c0ed_u = *it;
			{
				if ((!(_1ea66c0ed_u->_field_cpp_linked))) {
					_1ea66c0ed_push_passes(_1ea66c0ed_u->_field_package,_14213_passes);
				}
			}
			_iter_next_4808577744:;
			++it;
			goto _iter_begin_4808577744;
		}
		_iter_end_4808577744:;
	}
	return _14213_passes;
}



inline jule::Bool _1e9c6e03b_is_exist(jule::Slice<jule::Any> _3013_arr,jule::Any _3025_t) {
	{
		auto &expr = _3013_arr;
		auto it = expr.begin();
		_iter_begin_4808712400:;
		if (it != expr.end()) {
			jule::Any &_1e9c6e03b_ref = *it;
			{
				if (_3025_t == _1e9c6e03b_ref) {
					return true;
				}
			}
			_iter_next_4808712400:;
			++it;
			goto _iter_begin_4808712400;
		}
		_iter_end_4808712400:;
	}
	return false;
}



inline jule::Bool _1e9c6e03b_is_dead(jule::Any _4016_ref) {
	jule::Bool _4028_dead = jule::Bool();
	if (_1e9c6e03b_is_exist(_1e9c6e03b_deads,_4016_ref)) {
		_4028_dead = true;
		return _4028_dead;
	}
	{
		auto &_match_expr{ _4016_ref };
		if (_match_expr.type_is<jule::Ptr<_1eb627195_FnIns>>()) {
			_case_begin_4808720016:;
			{
				if (_4016_ref.operator jule::Ptr<_1eb627195_FnIns>()->_field_decl->_method_is_init()) {
					goto _match_end_4808714096;
				}
				goto _case_begin_4808716528;
			}
		}
		else {
			_case_begin_4808716528:;
			{
				if ((_1e9c6e03b_current == _4016_ref) || (_1e9c6e03b_main_current == _4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
				if (_1e9c6e03b_is_exist(_1e9c6e03b_checking,_4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
			}
		}
		_match_end_4808714096:;
	}
	jule::Any _6113_old = _1e9c6e03b_current;
	_1e9c6e03b_current=_4016_ref;
	jule::I64 _639_len = _1e9c6e03b_checking.len();
	_1e9c6e03b_checking.push(_4016_ref);
	__JULE_DEFER({
		_1e9c6e03b_current=_6113_old;
		_1e9c6e03b_drop_ref(_1e9c6e03b_checking,_639_len);
	});
	{
		auto &_match_expr{ _4016_ref };
		if (_match_expr.type_is<jule::Ptr<_1eb627195_FnIns>>()) {
			_case_begin_4808725760:;
			{
				_4028_dead = _1e9c6e03b_is_fn_dead(_4016_ref.operator jule::Ptr<_1eb627195_FnIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4808725920:;
			{
				_4028_dead = _1e9c6e03b_is_var_dead(_4016_ref.operator jule::Ptr<_1eba533d4_Var>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_StructIns>>()) {
			_case_begin_4808726016:;
			{
				_4028_dead = _1e9c6e03b_is_struct_dead(_4016_ref.operator jule::Ptr<_1eb29bdd6_StructIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7c68e9_Trait>>()) {
			_case_begin_4808724976:;
			{
				_4028_dead = _1e9c6e03b_is_trait_dead(_4016_ref.operator jule::Ptr<_1eb7c68e9_Trait>());
				return _4028_dead;
			}
		}
		else {
			_case_begin_4808721648:;
			{
				_4028_dead = false;
				return _4028_dead;
			}
		}
		_match_end_4808723856:;
	}
}



inline void _1e9c6e03b_drop_ref(jule::Slice<jule::Any>& _9218_refs,jule::Int _9231_pos) {
	_9218_refs=_9218_refs.slice(0LL,_9231_pos);
}



inline jule::Bool _1e9c6e03b_is_all_references_are_dead(jule::Ptr<_1eb736eec_ReferenceStack> _10035_references) {
	jule::Int _10113_i = 0LL;
	for (; _10113_i < _10035_references->_method_len(); (_10113_i)++) {
		{
			jule::Any _10317_ref = _10035_references->_method_at(_10113_i);
			if (_10317_ref == _1e9c6e03b_current) {
				goto _iter_next_4808729952;
			}
			if (_10317_ref == _1e9c6e03b_main_current) {
				goto _iter_next_4808729952;
			}
			if ((!(_1e9c6e03b_is_dead(_10317_ref)))) {
				return false;
			}
		}
	_iter_next_4808729952:;
	}
	_iter_end_4808729952:;
	return true;
}



inline jule::Bool _1e9c6e03b_is_fn_dead(jule::Ptr<_1eb627195_FnIns> _11719_f) {
	if (_11719_f->_field_decl->_field_cpp_linked || _11719_f->_field_anon) {
		return false;
	}
	if (_11719_f->_field_decl->_method_is_entry_point() || _11719_f->_field_decl->_method_is_init()) {
		return (!(_11719_f->_field_decl->_field_statically));
	}
	if (_11719_f->_field_owner != nullptr) {
		if (_1e9c6e03b_is_exist(_1e9c6e03b_checking,jule::Any(_11719_f->_field_owner))) {
			return true;
		}
		return _1e9c6e03b_is_dead(jule::Any(_11719_f->_field_owner));
	}
	return _1e9c6e03b_is_all_references_are_dead(_11719_f->_field_references);
}



inline jule::Bool _1e9c6e03b_is_var_dead(jule::Ptr<_1eba533d4_Var> _14320_v) {
	if (_14320_v->_field_constant) {
		return true;
	}
	if (_14320_v->_field_cpp_linked) {
		return false;
	}
	return _1e9c6e03b_is_all_references_are_dead(_14320_v->_field_references);
}



inline jule::Bool _1e9c6e03b_is_struct_dead(jule::Ptr<_1eb29bdd6_StructIns> _19323_s) {
	return false;
}



inline jule::Bool _1e9c6e03b_is_trait_dead(jule::Ptr<_1eb7c68e9_Trait> _21022_t) {
	return false;
}



inline void _1e9c6e03b_eliminate_dead_functions(jule::Slice<jule::Ptr<_1eb627195_Fn>>& _22834_funcs) {
	jule::Int _22913_i = 0LL;
	while (_22913_i < _22834_funcs.len()) {
		{
			jule::Ptr<_1eb627195_Fn> _23117_f = _22834_funcs[_22913_i];
			jule::Int _23217_j = 0LL;
			while (_23217_j < _23117_f->_field_instances.len()) {
				{
					jule::Ptr<_1eb627195_FnIns> _23421_ins = _23117_f->_field_instances[_23217_j];
					_1e9c6e03b_main_current=jule::Any(_23421_ins);
					if (_1e9c6e03b_is_fn_dead(_23421_ins)) {
						_1e9c6e03b_deads.push(jule::Any(_23421_ins));
						_23117_f->_field_instances=jule::append(_23117_f->_field_instances.slice(0LL,_23217_j),_23117_f->_field_instances.slice(_23217_j + 1LL));
						goto _iter_next_4808792048;
					}
					_1ea65d034_eliminate_dead_code_of_scope(_23421_ins->_field_scope);
					(_23217_j)++;
				}
			_iter_next_4808792048:;
			}
			_iter_end_4808792048:;
			if (_23117_f->_field_instances.len() == 0LL) {
				_22834_funcs=jule::append(_22834_funcs.slice(0LL,_22913_i),_22834_funcs.slice(_22913_i + 1LL));
				goto _iter_next_4808768288;
			}
			(_22913_i)++;
		}
	_iter_next_4808768288:;
	}
	_iter_end_4808768288:;
}



inline void _1e9c6e03b_eliminate_dead_globals(jule::Ptr<_1eb7d8048_Package>& _25432_pkg) {
	{
		auto &expr = _25432_pkg->_field_files;
		auto it = expr.begin();
		_iter_begin_4808792944:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1e9c6e03b_f = *it;
			{
				jule::Int _25617_i = 0LL;
				while (_25617_i < _1e9c6e03b_f->_field_vars.len()) {
					{
						jule::Ptr<_1eba533d4_Var> _25821_v = _1e9c6e03b_f->_field_vars[_25617_i];
						_1e9c6e03b_main_current=jule::Any(_25821_v);
						if (_1e9c6e03b_is_var_dead(_25821_v)) {
							_1e9c6e03b_deads.push(jule::Any(_25821_v));
							_1e9c6e03b_f->_field_vars=jule::append(_1e9c6e03b_f->_field_vars.slice(0LL,_25617_i),_1e9c6e03b_f->_field_vars.slice(_25617_i + 1LL));
						} else {
							(_25617_i)++;
						}
					}
				_iter_next_4808796736:;
				}
				_iter_end_4808796736:;
			}
			_iter_next_4808792944:;
			++it;
			goto _iter_begin_4808792944;
		}
		_iter_end_4808792944:;
	}
}



inline void _1e9c6e03b_eliminate_dead_functions_package(jule::Ptr<_1eb7d8048_Package>& _27042_pkg) {
	{
		auto &expr = _27042_pkg->_field_files;
		auto it = expr.begin();
		_iter_begin_4808807552:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1e9c6e03b_f = *it;
			{
				_1e9c6e03b_eliminate_dead_functions(_1e9c6e03b_f->_field_funcs);
			}
			_iter_next_4808807552:;
			++it;
			goto _iter_begin_4808807552;
		}
		_iter_end_4808807552:;
	}
}



inline void _1e9c6e03b_catch_alive_init(jule::Ptr<_1eb7d8048_Package>& _31826_pkg) {
	
	
	jule::Ptr<_1eb627195_Fn> _32113_f = _31826_pkg->_method_find_fn(jule::Str("init", 4),false);
	if (_32113_f == nullptr) {
		return;
	}
	jule::I64 _3269_n = _1e9c6e03b_deads.len();
	__JULE_DEFER({
		_1e9c6e03b_deads=_1e9c6e03b_deads.slice(0LL,_3269_n);
		_1e9c6e03b_checking=nullptr;
		_1e9c6e03b_current=jule::Any(nullptr);
	});
	jule::Ptr<_1eb627195_FnIns> _33413_ins = _32113_f->_field_instances[0LL];
	jule::Int _33513_i = 0LL;
	for (; _33513_i < _33413_ins->_field_refers->_method_len(); (_33513_i)++) {
		{
			if ((!(_1e9c6e03b_is_dead(_33413_ins->_field_refers->_method_at(_33513_i))))) {
				_32113_f->_field_statically=true;
				return;
			}
		}
	_iter_next_4808833184:;
	}
	_iter_end_4808833184:;
}



inline void _1e9c6e03b_eliminate_package(jule::Ptr<_1eb7d8048_Package>& _34427_pkg) {
	_1e9c6e03b_deads=jule::Slice<jule::Any>::alloc(0LL,2000LL);
	_1e9c6e03b_catch_alive_init(_34427_pkg);
	_1e9c6e03b_eliminate_dead_globals(_34427_pkg);
	_1e9c6e03b_eliminate_dead_functions_package(_34427_pkg);
}



inline void _1e9c6e03b_eliminate(jule::Ptr<_1ea66c0ed_IR>& _35523_ir) {
	jule::I64 _35613_i = _35523_ir->_field_used.len() - 1LL;
	for (; _35613_i >= 0LL; (_35613_i)--) {
		{
			jule::Ptr<_1eb7d8048_ImportInfo> _35817_u = _35523_ir->_field_used[_35613_i];
			if ((!(_35817_u->_field_cpp_linked))) {
				_1e9c6e03b_eliminate_package(_35817_u->_field_package);
			}
		}
	_iter_next_4808839104:;
	}
	_iter_end_4808839104:;
	_1e9c6e03b_eliminate_package(_35523_ir->_field_main);
	_1e9c6e03b_deads=nullptr;
	_1e9c6e03b_checking=nullptr;
	_1e9c6e03b_current=jule::Any(nullptr);
}



inline void _1ea65d034_eliminate_dead_code_of_scope(jule::Ptr<_1eb7d5892_Scope> _7537_s) {
	jule::Ptr<_1ea65d034_ScopeDeadCode> _7613_sdc = jule::new_struct_ptr<_1ea65d034_ScopeDeadCode>(new( std::nothrow ) _1ea65d034_ScopeDeadCode(jule::Ptr<_1ea65d034_ScopeDeadCode>(),_7537_s,(&(_7537_s->_field_stmts)),jule::Int()));
	{
		_7613_sdc->_method_optimize_stmts();
	}
}



inline jule::U64 _1d059016d_unix(void) {
	return static_cast<jule::U64>(time(nullptr));
}



inline jule::U64 _1d059016d_unix_year_to_seconds(jule::Uint _25725_y,jule::Bool& _25743_leap) {
	if ((_25725_y - 2LL) <= 136LL) {
		jule::Uint _25917_leaps = (_25725_y - 68LL) >> 2LL;
		_25743_leap=((_25725_y - 68LL) & 3LL) == 0LL;
		if (_25743_leap) {
			(_25917_leaps)--;
		}
		return static_cast<jule::Uint>((31536000LL * (_25725_y - 70LL)) + (86400LL * _25917_leaps));
	}
	jule::Uint _26713_leaps = 0LLU;
	jule::Uint _26813_centuries = 0LLU;
	jule::Uint _26913_cycles = jule::unsafe_div(_25725_y - 100LL,400LL);
	jule::Uint _27013_rem = jule::unsafe_mod(_25725_y - 100LL,400LL);
	if (_27013_rem < 0LL) {
		(_26913_cycles)--;
		_27013_rem+=400LLU;
	}
	if (_27013_rem == 0LL) {
		_25743_leap=true;
		_26813_centuries=0LLU;
		_26713_leaps=0LLU;
	} else {
		if (_27013_rem >= 200LL) {
			if (_27013_rem >= 300LL) {
				_26813_centuries=3LLU;
				_27013_rem-=300LLU;
			} else {
				_26813_centuries=2LLU;
				_27013_rem-=200LLU;
			}
		} else {
			if (_27013_rem >= 100LL) {
				_26813_centuries=1LLU;
				_27013_rem-=100LLU;
			} else {
				_26813_centuries=0LLU;
			}
		}
		if (_27013_rem == 0LL) {
			_25743_leap=false;
			_26713_leaps=0LLU;
		} else {
			_26713_leaps=static_cast<jule::Uint>(jule::unsafe_div(_27013_rem,4LL));
			_27013_rem = jule::unsafe_mod(_27013_rem,4LL);
			_25743_leap=_27013_rem == 0LL;
		}
	}
	_26713_leaps+=static_cast<jule::Uint>((97LL * _26913_cycles) + (24LL * _26813_centuries));
	if (_25743_leap) {
		(_26713_leaps)++;
	}
	return static_cast<jule::Uint>(((((_25725_y - 100LL) * 31536000LL) + (_26713_leaps * 86400LL)) + 946684800LL) + 86400LL);
}



inline jule::U64 _1d059016d_unix_month_to_seconds(jule::Uint _31426_m,jule::Bool _31439_leap) {
	jule::U64 _31613_t = 0LLU;
	{
		auto &_match_expr{ _31426_m };
		if (_match_expr == 1LL) {
			_case_begin_4808910096:;
			{
				_31613_t=2678400LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4808918992:;
			{
				_31613_t=5097600LLU;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_4808919344:;
			{
				_31613_t=7776000LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_4808919440:;
			{
				_31613_t=10368000LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_4808919536:;
			{
				_31613_t=13046400LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_4808919632:;
			{
				_31613_t=15638400LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_4808919728:;
			{
				_31613_t=18316800LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_4808919824:;
			{
				_31613_t=20995200LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_4808919920:;
			{
				_31613_t=23587200LLU;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_4808920016:;
			{
				_31613_t=26265600LLU;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_4808920112:;
			{
				_31613_t=28857600LLU;
			}
		}
		_match_end_4808918912:;
	}
	if (_31439_leap && (_31426_m >= 2LL)) {
		_31613_t+=86400LLU;
	}
	return _31613_t;
}



inline jule::Bool _1e9c80d3e_iter_expr_is_copy_optimizable(jule::Ptr<_1ebcce31e_Data>& _3835_expr,jule::Ptr<_1eba533d4_Var>& _3849_v) {
	return ((!(_3835_expr->_field_lvalue)) && (!(_3835_expr->_field_kind->_method_mutable()))) || (!(_3849_v->_field_mutable));
}



inline jule::Str _1e9c80d3e_gen_range_index_iter(jule::Ptr<_1eb7d5892_RangeIter>& _4230_it) {
	jule::Str _439_begin = _1ec7be58e_iter_begin_label_ident(static_cast<jule::Uintptr>(_4230_it));
	jule::Str _449_next = _1ec7be58e_iter_next_label_ident(static_cast<jule::Uintptr>(_4230_it));
	jule::Str _4613_obj = jule::Str("{\n", 2);
	_1ec821b85_add_indent();
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=jule::Str("auto ", 5);
	if (_1e9c5e35b_OPT_COPY && _4230_it->_field_expr->_field_lvalue) {
		_4613_obj+=jule::Str("&", 1);
	}
	_4613_obj+=jule::Str("expr = ", 7);
	_4613_obj+=_1eb8b628b_gen_expr_model(_4230_it->_field_expr->_field_model);
	_4613_obj+=jule::Str(";\n", 2);
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_1ec821b85_add_indent();
	_4613_obj+=_1ec821b85_indent();
	if (_4230_it->_field_key_a != nullptr) {
		_4613_obj+=_1ec821b85_gen_var_init_expr(_4230_it->_field_key_a,jule::Str("it - expr.begin()", 17));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_1ec821b85_indent();
	}
	if (_4230_it->_field_key_b != nullptr) {
		if (_1e9c5e35b_OPT_COPY) {
			_4230_it->_field_key_b->_field_reference=_1e9c80d3e_iter_expr_is_copy_optimizable(_4230_it->_field_expr,_4230_it->_field_key_b);
		}
		_4613_obj+=_1ec821b85_gen_var_init_expr(_4230_it->_field_key_b,jule::Str("*it", 3));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_1ec821b85_indent();
	}
	_4613_obj+=_1e9c80d3e_gen_scope(_4230_it->_field_scope);
	_4613_obj+=jule::Str("\n", 1);
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=_449_next;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=jule::Str("++it;\n", 6);
	_4613_obj+=_1ec821b85_indent();
	if (_4230_it->_field_key_a != nullptr) {
		_4613_obj+=_1ec7be58e_var_out_ident(_4230_it->_field_key_a);
		_4613_obj+=jule::Str("++;\n", 4);
		_4613_obj+=_1ec821b85_indent();
	}
	_4613_obj+=jule::Str("goto ", 5);
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(";\n", 2);
	_1ec821b85_done_indent();
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=jule::Str("}\n", 2);
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=_1ec7be58e_iter_end_label_ident(static_cast<jule::Uintptr>(_4230_it));
	_4613_obj+=jule::Str(":;\n", 3);
	_1ec821b85_done_indent();
	_4613_obj+=_1ec821b85_indent();
	_4613_obj+=jule::Str("}", 1);
	return _4613_obj;
}



inline jule::Str _1e9c80d3e_gen_range_hashmap_iter(jule::Ptr<_1eb7d5892_RangeIter>& _11232_it) {
	jule::Str _1139_begin = _1ec7be58e_iter_begin_label_ident(static_cast<jule::Uintptr>(_11232_it));
	jule::Str _1149_next = _1ec7be58e_iter_next_label_ident(static_cast<jule::Uintptr>(_11232_it));
	jule::Str _11613_obj = jule::Str("{\n", 2);
	_1ec821b85_add_indent();
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("auto ", 5);
	if (_1e9c5e35b_OPT_COPY && _11232_it->_field_expr->_field_lvalue) {
		_11613_obj+=jule::Str("&", 1);
	}
	_11613_obj+=jule::Str("expr = ", 7);
	_11613_obj+=_1eb8b628b_gen_expr_model(_11232_it->_field_expr->_field_model);
	_11613_obj+=jule::Str(";\n", 2);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_1ec821b85_add_indent();
	_11613_obj+=_1ec821b85_indent();
	if (_11232_it->_field_key_a != nullptr) {
		if (_1e9c5e35b_OPT_COPY) {
			_11232_it->_field_key_a->_field_reference=_1e9c80d3e_iter_expr_is_copy_optimizable(_11232_it->_field_expr,_11232_it->_field_key_a);
		}
		_11613_obj+=_1ec821b85_gen_var_init_expr(_11232_it->_field_key_a,jule::Str("it->first", 9));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_1ec821b85_indent();
	}
	if (_11232_it->_field_key_b != nullptr) {
		if (_1e9c5e35b_OPT_COPY) {
			_11232_it->_field_key_b->_field_reference=_1e9c80d3e_iter_expr_is_copy_optimizable(_11232_it->_field_expr,_11232_it->_field_key_b);
		}
		_11613_obj+=_1ec821b85_gen_var_init_expr(_11232_it->_field_key_b,jule::Str("it->second", 10));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_1ec821b85_indent();
	}
	_11613_obj+=_1e9c80d3e_gen_scope(_11232_it->_field_scope);
	_11613_obj+=jule::Str("\n", 1);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=_1149_next;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("++it;\n", 6);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("goto ", 5);
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(";\n", 2);
	_1ec821b85_done_indent();
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("}\n", 2);
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=_1ec7be58e_iter_end_label_ident(static_cast<jule::Uintptr>(_11232_it));
	_11613_obj+=jule::Str(":;\n", 3);
	_1ec821b85_done_indent();
	_11613_obj+=_1ec821b85_indent();
	_11613_obj+=jule::Str("}", 1);
	return _11613_obj;
}



inline jule::Str _1e9c80d3e_gen_if(jule::Ptr<_1eb7d5892_If> _18015_i) {
	jule::Str _18113_obj = jule::Str("if (", 4);
	_18113_obj+=_1eb8b628b_gen_expr(_18015_i->_field_expr);
	_18113_obj+=jule::Str(") ", 2);
	_18113_obj+=_1e9c80d3e_gen_scope(_18015_i->_field_scope);
	return _18113_obj;
}



inline jule::Str _1e9c80d3e_gen_conditional(jule::Ptr<_1eb7d5892_Conditional> _18824_c) {
	jule::Str _18913_obj = _1e9c80d3e_gen_if(_18824_c->_field_elifs[0LL]);
	{
		auto expr = _18824_c->_field_elifs.slice(1LL);
		auto it = expr.begin();
		_iter_begin_4809331888:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d5892_If> _1e9c80d3e_elif = *it;
			{
				_18913_obj+=jule::Str(" else ", 6);
				_18913_obj+=_1e9c80d3e_gen_if(_1e9c80d3e_elif);
			}
			_iter_next_4809331888:;
			++it;
			goto _iter_begin_4809331888;
		}
		_iter_end_4809331888:;
	}
	if (_18824_c->_field_default != nullptr) {
		_18913_obj+=jule::Str(" else ", 6);
		_18913_obj+=_1e9c80d3e_gen_scope(_18824_c->_field_default->_field_scope);
	}
	return _18913_obj;
}



inline jule::Str _1e9c80d3e_gen_inf_iter(jule::Ptr<_1eb7d5892_InfIter> _20421_it) {
	jule::Str _20513_obj = jule::Str("for (;;) {\n", 11);
	_1ec821b85_add_indent();
	_20513_obj+=_1ec821b85_indent();
	_20513_obj+=_1e9c80d3e_gen_scope(_20421_it->_field_scope);
	_1ec821b85_done_indent();
	jule::Str _2129_indent = _1ec821b85_indent();
	_20513_obj+=jule::Str("\n", 1);
	_20513_obj+=_2129_indent;
	_20513_obj+=_1ec7be58e_iter_next_label_ident(static_cast<jule::Uintptr>(_20421_it));
	_20513_obj+=jule::Str(":;\n", 3);
	_20513_obj+=_2129_indent;
	_20513_obj+=jule::Str("}\n", 2);
	_20513_obj+=_2129_indent;
	_20513_obj+=_1ec7be58e_iter_end_label_ident(static_cast<jule::Uintptr>(_20421_it));
	_20513_obj+=jule::Str(":;", 2);
	return _20513_obj;
}



inline jule::Str _1e9c80d3e_gen_while_iter(jule::Ptr<_1eb7d5892_WhileIter> _22723_it) {
	jule::Str _22813_obj = jule::Str();
	if ((_22723_it->_field_expr != nullptr) && (_22723_it->_field_next == nullptr)) {
		_22813_obj+=jule::Str("while (", 7);
		_22813_obj+=_1eb8b628b_gen_expr(_22723_it->_field_expr);
		_22813_obj+=jule::Str(") {\n", 4);
	} else {
		_22813_obj+=jule::Str("for (; ", 7);
		if (_22723_it->_field_expr != nullptr) {
			_22813_obj+=_1eb8b628b_gen_expr(_22723_it->_field_expr);
		}
		_22813_obj+=jule::Str("; ", 2);
		if (_22723_it->_field_next != nullptr) {
			jule::Str _24017_st = _1e9c80d3e_gen_st(_22723_it->_field_next);
			_22813_obj+=_24017_st.slice(0LL,_24017_st.len() - 1LL);
		}
		_22813_obj+=jule::Str(") {\n", 4);
	}
	_1ec821b85_add_indent();
	_22813_obj+=_1ec821b85_indent();
	_22813_obj+=_1e9c80d3e_gen_scope(_22723_it->_field_scope);
	_22813_obj+=jule::Str("\n", 1);
	_1ec821b85_done_indent();
	_22813_obj+=_1ec821b85_indent();
	_22813_obj+=_1ec7be58e_iter_next_label_ident(static_cast<jule::Uintptr>(_22723_it));
	_22813_obj+=jule::Str(":;\n", 3);
	_22813_obj+=_1ec821b85_indent();
	_22813_obj+=jule::Str("}\n", 2);
	_22813_obj+=_1ec821b85_indent();
	_22813_obj+=_1ec7be58e_iter_end_label_ident(static_cast<jule::Uintptr>(_22723_it));
	_22813_obj+=jule::Str(":;", 2);
	return _22813_obj;
}



inline jule::Str _1e9c80d3e_gen_range_iter(jule::Ptr<_1eb7d5892_RangeIter> _26323_it) {
	{
		if (_26323_it->_field_expr->_field_kind->_method_slc() != nullptr) {
			_case_begin_4809358160:;
			{
				return _1e9c80d3e_gen_range_index_iter(_26323_it);
			}
		}
		else if (_26323_it->_field_expr->_field_kind->_method_arr() != nullptr) {
			_case_begin_4809358464:;
			{
				return _1e9c80d3e_gen_range_index_iter(_26323_it);
			}
		}
		else if (_26323_it->_field_expr->_field_kind->_method_map() != nullptr) {
			_case_begin_4809358896:;
			{
				return _1e9c80d3e_gen_range_hashmap_iter(_26323_it);
			}
		}
		else {
			_case_begin_4809352768:;
			{
				return _1e9c80d3e_gen_range_index_iter(_26323_it);
			}
		}
		_match_end_4809352656:;
	}
}



inline jule::Str _1e9c80d3e_gen_cont(jule::Ptr<_1eb7d5892_ContSt> _27213_c) {
	jule::Str _27313_obj = jule::Str("goto ", 5);
	_27313_obj+=_1ec7be58e_iter_next_label_ident(_27213_c->_field_it);
	_27313_obj+=jule::Str(";", 1);
	return _27313_obj;
}



inline jule::Str _1e9c80d3e_gen_label(jule::Ptr<_1eb7d5892_Label> _27914_l) {
	return _1ec7be58e_label_ident(_27914_l->_field_ident) + jule::Str(":;", 2);
}



inline jule::Str _1e9c80d3e_gen_goto(jule::Ptr<_1eb7d5892_GotoSt> _28313_gt) {
	jule::Str _28413_obj = jule::Str("goto ", 5);
	_28413_obj+=_1ec7be58e_label_ident(_28313_gt->_field_ident);
	_28413_obj+=jule::Str(";", 1);
	return _28413_obj;
}



inline jule::Str _1e9c80d3e_gen_postfix(jule::Ptr<_1eb7d5892_Postfix> _29020_p) {
	jule::Str _29113_obj = jule::Str("(", 1);
	_29113_obj+=_1eb8b628b_gen_expr(_29020_p->_field_expr);
	_29113_obj+=jule::Str(")", 1);
	_29113_obj+=_29020_p->_field_op;
	_29113_obj+=jule::Str(";", 1);
	return _29113_obj;
}



inline jule::Str _1e9c80d3e_gen_div_by_zero_assign(jule::Ptr<_1eb7d5892_Assign> _29931_a) {
	jule::Str _30013_obj = _1eb8b628b_gen_expr(_29931_a->_field_l);
	_30013_obj+=jule::Str(" = ", 3);
	_30013_obj+=_1eb8b628b_gen_div_by_zero_binop_expr_model(_29931_a->_field_op.slice(0LL,1LL),_29931_a->_field_l,_29931_a->_field_r);
	_30013_obj+=jule::Str(";", 1);
	return _30013_obj;
}



inline jule::Str _1e9c80d3e_gen_assign(jule::Ptr<_1eb7d5892_Assign> _30719_a) {
	{
		auto &_match_expr{ _30719_a->_field_op };
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_4809376384:;
			{
				return _1e9c80d3e_gen_div_by_zero_assign(_30719_a);
			}
		}
		_match_end_4809376304:;
	}
	jule::Str _31413_obj = _1eb8b628b_gen_expr(_30719_a->_field_l);
	_31413_obj+=_30719_a->_field_op;
	if (_1e9c5e35b_OPT_APPEND) {
		{
			auto &_match_expr{ _30719_a->_field_r };
			if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>>()) {
				_case_begin_4809381104:;
				{
					jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel> _31921_model = _30719_a->_field_r.operator jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>();
					jule::Str _32018_expr;
					jule::Bool _32024_optimized;
					std::tie(_32018_expr,_32024_optimized) = _1eb8b628b_gen_builtin_append_call_expr_model_assign(_30719_a->_field_l,_31921_model);
					if (_32024_optimized) {
						return _32018_expr;
					}
					_31413_obj+=_32018_expr;
				}
			}
			else {
				_case_begin_4809377792:;
				{
					_31413_obj+=_1eb8b628b_gen_expr(_30719_a->_field_r);
				}
			}
			_match_end_4809380320:;
		}
	} else {
		_31413_obj+=_1eb8b628b_gen_expr(_30719_a->_field_r);
	}
	_31413_obj+=jule::Str(";", 1);
	return _31413_obj;
}



inline jule::Str _1e9c80d3e_gen_multi_assign(jule::Ptr<_1eb7d5892_MultiAssign> _33625_a) {
	jule::Str _33713_obj = jule::Str("std::tie(", 9);
	{
		auto &expr = _33625_a->_field_l;
		auto it = expr.begin();
		_iter_begin_4809387600:;
		if (it != expr.end()) {
			jule::Any _1e9c80d3e_l = *it;
			{
				if (_1e9c80d3e_l == nullptr) {
					_33713_obj+=jule::Str("std::ignore", 11);
					_33713_obj+=jule::Str(",", 1);
				} else {
					_33713_obj+=_1eb8b628b_gen_expr(_1e9c80d3e_l);
					_33713_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_4809387600:;
			++it;
			goto _iter_begin_4809387600;
		}
		_iter_end_4809387600:;
	}
	_33713_obj=_33713_obj.slice(0LL,_33713_obj.len() - 1LL);
	_33713_obj+=jule::Str(") = ", 4);
	_33713_obj+=_1eb8b628b_gen_expr(_33625_a->_field_r);
	_33713_obj+=jule::Str(";", 1);
	return _33713_obj;
}



inline jule::Str _1e9c80d3e_get_case_match_expr(jule::Ptr<_1eb7d5892_Match>& _35829_m) {
	if ((!(_35829_m->_field_expr->_method_is_const()))) {
		return jule::Str("_match_expr", 11);
	}
	if ((!(_35829_m->_field_expr->_field_constant->_method_is_bool())) || (!(_35829_m->_field_expr->_field_constant->_method_read_bool()))) {
		return _1eb8b628b_gen_expr_model(_35829_m->_field_expr->_field_model);
	}
	return jule::Str();
}



inline jule::Str _1e9c80d3e_gen_case(jule::Ptr<_1eb7d5892_Match> _36817_m,jule::Ptr<_1eb7d5892_Case> _36832_c) {
	jule::Str _36913_obj = jule::Str();
	if ((_36832_c->_field_exprs.len() != 0LL) && (!(_36817_m->_method_is_generic_type_match()))) {
		if ((_36817_m->_field_cases.len() > 0LL) && (_36817_m->_field_cases[0LL] == _36832_c)) {
			_36913_obj+=jule::Str("if (", 4);
		} else {
			_36913_obj+=jule::Str("else if (", 9);
		}
		{
			auto &expr = _36832_c->_field_exprs;
			auto it = expr.begin();
			_iter_begin_4809402400:;
			if (it != expr.end()) {
				jule::Int _1e9c80d3e_i = it - expr.begin();
				jule::Ptr<_1ebcce31e_Data> _1e9c80d3e_expr = *it;
				{
					{
						if ((!(_36817_m->_field_type_match))) {
							_case_begin_4809404560:;
							{
								jule::Str _38021_case_expr = _1e9c80d3e_get_case_match_expr(_36817_m);
								if (_36817_m->_field_expr->_method_good_operand(_1e9c80d3e_expr)) {
									if (_38021_case_expr.len() != 0LL) {
										_36913_obj+=_38021_case_expr;
										_36913_obj+=jule::Str(" == ", 4);
									}
									_36913_obj+=_1eb8b628b_gen_expr(_1e9c80d3e_expr->_field_model);
								} else {
									_36913_obj+=_1eb8b628b_gen_expr(_1e9c80d3e_expr->_field_model);
									if (_38021_case_expr.len() != 0LL) {
										_36913_obj+=jule::Str(" == ", 4);
										_36913_obj+=_38021_case_expr;
									}
								}
							}
						}
						else {
							_case_begin_4809403760:;
							{
								_36913_obj+=jule::Str("_match_expr", 11);
								_36913_obj+=jule::Str(".type_is<", 9);
								_36913_obj+=_1eb8b628b_gen_expr(_1e9c80d3e_expr->_field_model);
								_36913_obj+=jule::Str(">()", 3);
							}
						}
						_match_end_4809403584:;
					}
					if ((_1e9c80d3e_i + 1LL) < _36832_c->_field_exprs.len()) {
						_36913_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_4809402400:;
				++it;
				_1e9c80d3e_i++;
				goto _iter_begin_4809402400;
			}
			_iter_end_4809402400:;
		}
		_36913_obj+=jule::Str(") ", 2);
	} else if ((_36817_m->_field_default == _36832_c) && (_36817_m->_field_cases.len() != 0LL)) {
		_36913_obj+=_1ec821b85_indent();
		_36913_obj+=jule::Str("else ", 5);
	} else {
		_36913_obj+=_1ec821b85_indent();
	}
	_1ec821b85_add_indent();
	_36913_obj+=jule::Str("{\n", 2);
	_36913_obj+=_1ec821b85_indent();
	_36913_obj+=_1ec7be58e_case_begin_label_ident(static_cast<jule::Uintptr>(_36832_c));
	_36913_obj+=jule::Str(":;\n", 3);
	if (_36832_c->_field_scope->_field_stmts.len() > 0LL) {
		_36913_obj+=_1ec821b85_indent();
		_36913_obj+=_1e9c80d3e_gen_scope(_36832_c->_field_scope);
		_36913_obj+=jule::Str("\n", 1);
	}
	_1ec821b85_done_indent();
	_36913_obj+=_1ec821b85_indent();
	_36913_obj+=jule::Str("}", 1);
	return _36913_obj;
}



inline jule::Str _1e9c80d3e_gen_match(jule::Ptr<_1eb7d5892_Match> _43518_m) {
	if ((_43518_m->_field_cases.len() == 0LL) && (_43518_m->_field_default == nullptr)) {
		return jule::Str();
	}
	jule::Bool _4409_generic_type_match = _43518_m->_method_is_generic_type_match();
	if (_4409_generic_type_match && ((_43518_m->_field_default == nullptr) || (_43518_m->_field_default->_field_scope->_field_stmts.len() == 0LL))) {
		return jule::Str();
	}
	jule::Str _44513_obj = jule::Str("{\n", 2);
	_1ec821b85_add_indent();
	_44513_obj+=_1ec821b85_indent();
	if ((!(_4409_generic_type_match)) && (!(_43518_m->_field_expr->_method_is_const()))) {
		if (_43518_m->_field_expr->_field_lvalue && _1e9c5e35b_OPT_COPY) {
			_44513_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_44513_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_44513_obj+=_1eb8b628b_gen_expr(_43518_m->_field_expr->_field_model);
		_44513_obj+=jule::Str(" };\n", 4);
		_44513_obj+=_1ec821b85_indent();
	}
	if (_43518_m->_field_cases.len() > 0LL) {
		_44513_obj+=_1e9c80d3e_gen_case(_43518_m,_43518_m->_field_cases[0LL]);
		{
			auto expr = _43518_m->_field_cases.slice(1LL);
			auto it = expr.begin();
			_iter_begin_4809431456:;
			if (it != expr.end()) {
				jule::Ptr<_1eb7d5892_Case> _1e9c80d3e_c = *it;
				{
					_44513_obj+=jule::Str("\n", 1);
					_44513_obj+=_1ec821b85_indent();
					_44513_obj+=_1e9c80d3e_gen_case(_43518_m,_1e9c80d3e_c);
				}
				_iter_next_4809431456:;
				++it;
				goto _iter_begin_4809431456;
			}
			_iter_end_4809431456:;
		}
	}
	if (_43518_m->_field_default != nullptr) {
		_44513_obj+=jule::Str("\n", 1);
		_44513_obj+=_1e9c80d3e_gen_case(_43518_m,_43518_m->_field_default);
	}
	_44513_obj+=jule::Str("\n", 1);
	_44513_obj+=_1ec821b85_indent();
	_44513_obj+=_1ec7be58e_match_end_label_ident(static_cast<jule::Uintptr>(_43518_m));
	_44513_obj+=jule::Str(":;", 2);
	_44513_obj+=jule::Str("\n", 1);
	_1ec821b85_done_indent();
	_44513_obj+=_1ec821b85_indent();
	_44513_obj+=jule::Str("}", 1);
	return _44513_obj;
}



inline jule::Str _1e9c80d3e_gen_fall_st(jule::Ptr<_1eb7d5892_FallSt> _49116_f) {
	jule::Str _49213_obj = jule::Str("goto ", 5);
	_49213_obj+=_1ec7be58e_case_begin_label_ident(_49116_f->_field_dest_case);
	_49213_obj+=jule::Str(";", 1);
	return _49213_obj;
}



inline jule::Str _1e9c80d3e_gen_break_st(jule::Ptr<_1eb7d5892_BreakSt> _49817_b) {
	jule::Str _49913_obj = jule::Str("goto ", 5);
	if (_49817_b->_field_it != 0LL) {
		_49913_obj+=_1ec7be58e_iter_end_label_ident(_49817_b->_field_it);
	} else {
		_49913_obj+=_1ec7be58e_match_end_label_ident(_49817_b->_field_mtch);
	}
	_49913_obj+=jule::Str(";", 1);
	return _49913_obj;
}



inline jule::Str _1e9c80d3e_gen_ret_vars(jule::Ptr<_1eb7d5892_RetSt> _51021_r) {
	jule::Str _51113_obj = jule::Str();
	{
		auto &expr = _51021_r->_field_vars;
		auto it = expr.begin();
		_iter_begin_4809445456:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1e9c80d3e_v = *it;
			{
				if (_1ea7465e5_is_ignore_ident(_1e9c80d3e_v->_field_ident)) {
					_51113_obj+=_1eb8b628b_get_init_expr(_1e9c80d3e_v->_field_kind->_field_kind);
				} else {
					_51113_obj+=_1ec7be58e_var_out_ident(_1e9c80d3e_v);
				}
				_51113_obj+=jule::Str(",", 1);
			}
			_iter_next_4809445456:;
			++it;
			goto _iter_begin_4809445456;
		}
		_iter_end_4809445456:;
	}
	_51113_obj=_51113_obj.slice(0LL,_51113_obj.len() - 1LL);
	jule::Str _52313_oobj = jule::Str("return ", 7);
	if (_51021_r->_field_func->_field_decl->_field_exceptional) {
		_52313_oobj+=jule::Str("jule::Exceptional(jule::Any(),", 30);
	}
	if (_51021_r->_field_vars.len() > 1LL) {
		_52313_oobj+=jule::Str("std::make_tuple(", 16);
		_52313_oobj+=_51113_obj;
		_52313_oobj+=jule::Str(")", 1);
	} else {
		_52313_oobj+=_51113_obj;
	}
	if (_51021_r->_field_func->_field_decl->_field_exceptional) {
		_52313_oobj+=jule::Str(")", 1);
	}
	_52313_oobj+=jule::Str(";", 1);
	return _52313_oobj;
}



inline jule::Str _1e9c80d3e_gen_ret_expr_tuple(jule::Ptr<_1eb7d5892_RetSt> _54527_r) {
	jule::Slice<jule::Ptr<_1ebcce31e_Data>> _54613_datas = _54527_r->_field_expr.operator jule::Ptr<_1eb7ccdea_TupleExprModel>()->_field_datas;
	jule::Str _54713_obj = jule::Str();
	{
		auto &expr = _54527_r->_field_vars;
		auto it = expr.begin();
		_iter_begin_4809456576:;
		if (it != expr.end()) {
			jule::Int _1e9c80d3e_i = it - expr.begin();
			jule::Ptr<_1eba533d4_Var> _1e9c80d3e_v = *it;
			{
				if (_1ea7465e5_is_ignore_ident(_1e9c80d3e_v->_field_ident)) {
					goto _iter_next_4809456576;
				}
				jule::Any _55317_model = _54613_datas[_1e9c80d3e_i]->_field_model;
				if (_55317_model == _1e9c80d3e_v) {
					goto _iter_next_4809456576;
				}
				jule::Str _55813_ident = _1ec7be58e_var_out_ident(_1e9c80d3e_v);
				_54713_obj+=_55813_ident;
				_54713_obj+=jule::Str(" = ", 3);
				_54713_obj+=_1eb8b628b_gen_expr(_55317_model);
				_54713_obj+=jule::Str(";\n", 2);
				_54713_obj+=_1ec821b85_indent();
			}
			_iter_next_4809456576:;
			++it;
			_1e9c80d3e_i++;
			goto _iter_begin_4809456576;
		}
		_iter_end_4809456576:;
	}
	jule::Str _56613_oobj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _54613_datas;
		auto it = expr.begin();
		_iter_begin_4809464448:;
		if (it != expr.end()) {
			jule::Int _1e9c80d3e_i = it - expr.begin();
			jule::Ptr<_1ebcce31e_Data> _1e9c80d3e_d = *it;
			{
				jule::Ptr<_1eba533d4_Var> _56817_v = _54527_r->_field_vars[_1e9c80d3e_i];
				if (_1ea7465e5_is_ignore_ident(_56817_v->_field_ident)) {
					_56613_oobj+=_1eb8b628b_gen_expr(_1e9c80d3e_d->_field_model);
				} else {
					_56613_oobj+=_1ec7be58e_var_out_ident(_56817_v);
				}
				_56613_oobj+=jule::Str(",", 1);
			}
			_iter_next_4809464448:;
			++it;
			_1e9c80d3e_i++;
			goto _iter_begin_4809464448;
		}
		_iter_end_4809464448:;
	}
	_56613_oobj=_56613_oobj.slice(0LL,_56613_oobj.len() - 1LL);
	_56613_oobj+=jule::Str(")", 1);
	if (_54527_r->_field_func->_field_decl->_field_exceptional) {
		_54713_obj+=jule::Str("return jule::Exceptional(jule::Any(),", 37);
		_54713_obj+=_56613_oobj;
		_54713_obj+=jule::Str(")", 1);
	} else {
		_54713_obj+=jule::Str("return ", 7);
		_54713_obj+=_56613_oobj;
	}
	_54713_obj+=jule::Str(";", 1);
	return _54713_obj;
}



inline jule::Str _1e9c80d3e_gen_ret_expr(jule::Ptr<_1eb7d5892_RetSt> _59321_r) {
	if (_59321_r->_field_vars.len() > 1LL) {
		return _1e9c80d3e_gen_ret_expr_tuple(_59321_r);
	}
	if (_59321_r->_field_vars.len() > 0LL) {
		jule::Ptr<_1eba533d4_Var> _60017_v = _59321_r->_field_vars[0LL];
		if ((!(_1ea7465e5_is_ignore_ident(_60017_v->_field_ident))) && (_59321_r->_field_expr != _60017_v)) {
			jule::Str _60217_ident = _1ec7be58e_var_out_ident(_60017_v);
			jule::Str _60321_obj = _60217_ident;
			_60321_obj+=jule::Str(" = ", 3);
			_60321_obj+=_1eb8b628b_gen_expr(_59321_r->_field_expr);
			_60321_obj+=jule::Str(";\n", 2);
			_60321_obj+=_1ec821b85_indent();
			if (_59321_r->_field_func->_field_decl->_field_exceptional) {
				_60321_obj+=jule::Str("return jule::Exceptional(jule::Any(),", 37);
				_60321_obj+=_60217_ident;
				_60321_obj+=jule::Str(")", 1);
			} else {
				_60321_obj+=jule::Str("return ", 7);
				_60321_obj+=_60217_ident;
			}
			_60321_obj+=jule::Str(";", 1);
			return _60321_obj;
		}
	}
	if (_59321_r->_field_func->_field_decl->_field_exceptional) {
		jule::Str _62217_obj = jule::Str("return jule::Exceptional(jule::Any(),", 37);
		_62217_obj+=_1eb8b628b_gen_expr(_59321_r->_field_expr);
		_62217_obj+=jule::Str(")", 1);
		_62217_obj+=jule::Str(";", 1);
		return _62217_obj;
	}
	jule::Str _62913_obj = jule::Str("return ", 7);
	_62913_obj+=_1eb8b628b_gen_expr(_59321_r->_field_expr);
	_62913_obj+=jule::Str(";", 1);
	return _62913_obj;
}



inline jule::Str _1e9c80d3e_gen_ret_st(jule::Ptr<_1eb7d5892_RetSt> _63519_r) {
	if ((_63519_r->_field_expr == nullptr) && (_63519_r->_field_vars.len() == 0LL)) {
		if (_63519_r->_field_func->_field_decl->_field_exceptional) {
			return jule::Str("return jule::VoidExceptional();", 31);
		}
		return jule::Str("return;", 7);
	}
	if (_63519_r->_field_expr == nullptr) {
		return _1e9c80d3e_gen_ret_vars(_63519_r);
	}
	return _1e9c80d3e_gen_ret_expr(_63519_r);
}



inline jule::Str _1e9c80d3e_gen_data_expr(jule::Ptr<_1ebcce31e_Data> _66822_d) {
	return _1eb8b628b_gen_expr(_66822_d->_field_model) + jule::Str(";", 1);
}



inline jule::Str _1e9c80d3e_gen_scope_var(jule::Ptr<_1eba533d4_Var> _67222_v) {
	if (_67222_v->_field_constant) {
		return jule::Str();
	}
	return _1ec821b85_gen_var(_67222_v);
}



inline jule::Str _1e9c80d3e_gen_st(jule::Any _68015_st) {
	{
		auto &_match_expr{ _68015_st };
		if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Scope>>()) {
			_case_begin_4809501808:;
			{
				return _1e9c80d3e_gen_scope(_68015_st.operator jule::Ptr<_1eb7d5892_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4809501904:;
			{
				return _1e9c80d3e_gen_scope_var(_68015_st.operator jule::Ptr<_1eba533d4_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ebcce31e_Data>>()) {
			_case_begin_4809501440:;
			{
				return _1e9c80d3e_gen_data_expr(_68015_st.operator jule::Ptr<_1ebcce31e_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Conditional>>()) {
			_case_begin_4809501536:;
			{
				return _1e9c80d3e_gen_conditional(_68015_st.operator jule::Ptr<_1eb7d5892_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_InfIter>>()) {
			_case_begin_4809501648:;
			{
				return _1e9c80d3e_gen_inf_iter(_68015_st.operator jule::Ptr<_1eb7d5892_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_WhileIter>>()) {
			_case_begin_4809500960:;
			{
				return _1e9c80d3e_gen_while_iter(_68015_st.operator jule::Ptr<_1eb7d5892_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RangeIter>>()) {
			_case_begin_4809501056:;
			{
				return _1e9c80d3e_gen_range_iter(_68015_st.operator jule::Ptr<_1eb7d5892_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_ContSt>>()) {
			_case_begin_4809501152:;
			{
				return _1e9c80d3e_gen_cont(_68015_st.operator jule::Ptr<_1eb7d5892_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Label>>()) {
			_case_begin_4809502352:;
			{
				return _1e9c80d3e_gen_label(_68015_st.operator jule::Ptr<_1eb7d5892_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_GotoSt>>()) {
			_case_begin_4809502448:;
			{
				return _1e9c80d3e_gen_goto(_68015_st.operator jule::Ptr<_1eb7d5892_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Postfix>>()) {
			_case_begin_4809502544:;
			{
				return _1e9c80d3e_gen_postfix(_68015_st.operator jule::Ptr<_1eb7d5892_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Assign>>()) {
			_case_begin_4809502640:;
			{
				return _1e9c80d3e_gen_assign(_68015_st.operator jule::Ptr<_1eb7d5892_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_MultiAssign>>()) {
			_case_begin_4809502736:;
			{
				return _1e9c80d3e_gen_multi_assign(_68015_st.operator jule::Ptr<_1eb7d5892_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_Match>>()) {
			_case_begin_4809502832:;
			{
				return _1e9c80d3e_gen_match(_68015_st.operator jule::Ptr<_1eb7d5892_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_FallSt>>()) {
			_case_begin_4809502944:;
			{
				return _1e9c80d3e_gen_fall_st(_68015_st.operator jule::Ptr<_1eb7d5892_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_BreakSt>>()) {
			_case_begin_4809503056:;
			{
				return _1e9c80d3e_gen_break_st(_68015_st.operator jule::Ptr<_1eb7d5892_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7d5892_RetSt>>()) {
			_case_begin_4809503168:;
			{
				return _1e9c80d3e_gen_ret_st(_68015_st.operator jule::Ptr<_1eb7d5892_RetSt>());
			}
		}
		else {
			_case_begin_4809496672:;
			{
				return jule::Str("<unimplemented_stmt>", 20);
			}
		}
		_match_end_4809500512:;
	}
}



inline jule::Str _1e9c80d3e_gen_scope(jule::Ptr<_1eb7d5892_Scope> _70418_s) {
	jule::Str _70513_obj = jule::Str("{\n", 2);
	_1ec821b85_add_indent();
	{
		auto &expr = _70418_s->_field_stmts;
		auto it = expr.begin();
		_iter_begin_4809529696:;
		if (it != expr.end()) {
			jule::Any _1e9c80d3e_st = *it;
			{
				_70513_obj+=_1ec821b85_indent();
				_70513_obj+=_1e9c80d3e_gen_st(_1e9c80d3e_st);
				_70513_obj+=jule::Str("\n", 1);
			}
			_iter_next_4809529696:;
			++it;
			goto _iter_begin_4809529696;
		}
		_iter_end_4809529696:;
	}
	_1ec821b85_done_indent();
	_70513_obj+=_1ec821b85_indent();
	_70513_obj+=jule::Str("}", 1);
	if (_70418_s->_field_deferred) {
		_70513_obj=(jule::Str("__JULE_DEFER(", 13) + _70513_obj) + jule::Str(");", 2);
	}
	return _70513_obj;
}



inline jule::Str _1e9c80d3e_gen_fn_scope(jule::Ptr<_1eb627195_FnIns> _72621_f) {
	jule::Str _72713_obj = (((_72621_f->_field_owner != nullptr)) ? (_1e9c80d3e_gen_method_scope(_72621_f)) : (_1e9c80d3e_gen_scope(_72621_f->_field_scope)));
	if (_72621_f->_field_decl->_field_exceptional && _72621_f->_field_decl->_method_is_void()) {
		_72713_obj=_72713_obj.slice(0LL,_72713_obj.len() - 2LL) + jule::Str(" return jule::VoidExceptional(); }", 34);
	}
	return _72713_obj;
}



inline jule::Str _1e9c80d3e_gen_method_scope(jule::Ptr<_1eb627195_FnIns> _73925_f) {
	return _1e9c80d3e_gen_scope(_73925_f->_field_scope);
}



inline jule::Str _1eb8b628b_concat_all_parts(jule::Slice<_1ea7465e5_Token> _8021_parts) {
	jule::Str _8113_s = jule::Str();
	{
		auto &expr = _8021_parts;
		auto it = expr.begin();
		_iter_begin_4809541008:;
		if (it != expr.end()) {
			_1ea7465e5_Token &_1eb8b628b_part = *it;
			{
				_8113_s+=_1eb8b628b_part._field_kind;
			}
			_iter_next_4809541008:;
			++it;
			goto _iter_begin_4809541008;
		}
		_iter_end_4809541008:;
	}
	return _8113_s;
}



inline jule::Str _1eb8b628b_get_accessor(jule::Ptr<_1ec1c55b1_TypeKind>& _8822_t) {
	if ((_8822_t->_method_sptr() != nullptr) || (_8822_t->_method_ptr() != nullptr)) {
		return jule::Str("->", 2);
	}
	return jule::Str(".", 1);
}



inline jule::Str _1eb8b628b_decompose_common_esq(jule::U8 _9525_b) {
	{
		auto &_match_expr{ _9525_b };
		if (_match_expr == '\\') {
			_case_begin_4809547184:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_4809546752:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_4809546384:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_4809546480:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_4809546576:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_4809545872:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_4809545968:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_4809546064:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_4809546160:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_4809547296:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_4809544928:;
			{
				return jule::Str();
			}
		}
		_match_end_4809545248:;
	}
}



inline jule::Str _1eb8b628b_sbtoa(jule::U8 _11110_b) {
	if (_11110_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_11110_b <= 127LL) {
		jule::Str _11713_seq = _1eb8b628b_decompose_common_esq(_11110_b);
		if (_11713_seq != jule::Str()) {
			return _11713_seq;
		}
		if ((32LL <= _11110_b) && (_11110_b <= 126LL)) {
			return static_cast<jule::Str>(_11110_b);
		}
	}
	jule::Str _1279_seq = _1e9e077ac_fmt_uint(static_cast<jule::U64>(_11110_b),8LL);
	if (_1279_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1279_seq;
	}
	return jule::Str("\\", 1) + _1279_seq;
}



inline jule::Str _1eb8b628b_get_cstr_model(jule::Slice<jule::U8> _13419_bytes) {
	jule::Str _13513_lit = jule::Str();
	{
		auto &expr = _13419_bytes;
		auto it = expr.begin();
		_iter_begin_4809563344:;
		if (it != expr.end()) {
			jule::U8 &_1eb8b628b_b = *it;
			{
				_13513_lit+=_1eb8b628b_sbtoa(_1eb8b628b_b);
			}
			_iter_next_4809563344:;
			++it;
			goto _iter_begin_4809563344;
		}
		_iter_end_4809563344:;
	}
	return (jule::Str("\"", 1) + _13513_lit) + jule::Str("\"", 1);
}



inline jule::Str _1eb8b628b_get_str_model(jule::Ptr<_1ec3e4b65_Const>& _14319_c) {
	jule::Str _1449_content = _14319_c->_method_read_str();
	if (_1449_content.len() == 0LL) {
		return _1ec7be58e_as_jt(jule::Str("str", 3)) + jule::Str("()", 2);
	}
	jule::Slice<jule::U8> _1499_bytes = static_cast<jule::Slice<jule::U8>>(_1449_content);
	jule::Str _1509_len = _1e9e077ac_fmt_int(static_cast<jule::I64>(_1499_bytes.len()),10LL);
	jule::Str _1519_lit = _1eb8b628b_get_cstr_model(_1499_bytes);
	return ((((_1ec7be58e_as_jt(jule::Str("str", 3)) + jule::Str("(", 1)) + _1519_lit) + jule::Str(", ", 2)) + _1509_len) + jule::Str(")", 1);
}



inline jule::Str _1eb8b628b_get_bool_model(jule::Ptr<_1ec3e4b65_Const>& _15520_c) {
	if (_15520_c->_method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _1eb8b628b_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _1eb8b628b_gen_float_special_cases(jule::F64& _16429_x) {
	{
		if (_1ea153376_is_nan(_16429_x)) {
			_case_begin_4809577360:;
			{
				return jule::Str("NAN", 3);
			}
		}
		else if (_1ea153376_is_inf(_16429_x,1LL)) {
			_case_begin_4809577552:;
			{
				return jule::Str("INFINITY", 8);
			}
		}
		else if (_1ea153376_is_inf(_16429_x,-1LL)) {
			_case_begin_4809577648:;
			{
				return jule::Str("-INFINITY", 9);
			}
		}
		else {
			_case_begin_4809575920:;
			{
				return jule::Str();
			}
		}
		_match_end_4809575744:;
	}
}



inline jule::Str _1eb8b628b_ftoa(jule::F64 _1739_f,jule::Int _17317_bitsize) {
	if (_17317_bitsize != 32LL) {
		if (_1739_f == static_cast<jule::F64>(static_cast<jule::I64>(_1739_f))) {
			return _1eb8b628b_i64toa(static_cast<jule::I64>(_1739_f));
		}
		if (_1739_f == static_cast<jule::F64>(static_cast<jule::U64>(_1739_f))) {
			return _1eb8b628b_u64toa(static_cast<jule::U64>(_1739_f));
		}
	}
	jule::Str _18313_m = _1e9c59675_fmt_float(_1739_f,'f',-1LL,_17317_bitsize);
	if (_18313_m.find(jule::Str(".", 1)) == -1LL) {
		_18313_m+=jule::Str(".0", 2);
	}
	return _18313_m;
}



inline jule::Str _1eb8b628b_get_f32_model(jule::Ptr<_1ec3e4b65_Const>& _19019_c) {
	jule::F64 _1919_x = _19019_c->_method_as_f64();
	jule::Str _1949_f = _1eb8b628b_gen_float_special_cases(_1919_x);
	if (_1949_f != jule::Str()) {
		return _1949_f;
	}
	{
		if (_1919_x == 340282346638528860000000000000000000000.0) {
			_case_begin_4809591360:;
			{
				return jule::Str("jule::MAX_F32", 13);
			}
		}
		else if (_1919_x == -340282346638528860000000000000000000000.0) {
			_case_begin_4809591456:;
			{
				return jule::Str("jule::MIN_F32", 13);
			}
		}
		_match_end_4809591712:;
	}
	return _1eb8b628b_ftoa(_1919_x,32LL) + jule::Str("f", 1);
}



inline jule::Str _1eb8b628b_get_f64_model(jule::Ptr<_1ec3e4b65_Const>& _20719_c) {
	jule::F64 _2089_x = _20719_c->_method_as_f64();
	jule::Str _2119_f = _1eb8b628b_gen_float_special_cases(_2089_x);
	if (_2119_f != jule::Str()) {
		return _2119_f;
	}
	{
		if (_2089_x == jule::MAX_F64) {
			_case_begin_4809597856:;
			{
				return jule::Str("jule::MAX_F64", 13);
			}
		}
		else if (_2089_x == jule::MIN_F64) {
			_case_begin_4809597952:;
			{
				return jule::Str("jule::MIN_F64", 13);
			}
		}
		_match_end_4809598560:;
	}
	return _1eb8b628b_ftoa(_2089_x,64LL);
}



inline jule::Str _1eb8b628b_get_float_model(jule::Ptr<_1ebcce31e_Data>& _22425_d) {
	{
		if (_22425_d->_field_kind->_method_prim()->_method_is_f32()) {
			_case_begin_4809603760:;
			{
				return _1eb8b628b_get_f32_model(_22425_d->_field_constant);
			}
		}
		else {
			_case_begin_4809601168:;
			{
				return _1eb8b628b_get_f64_model(_22425_d->_field_constant);
			}
		}
		_match_end_4809599568:;
	}
}



inline jule::Str _1eb8b628b_i64toa(jule::I64 _23111_x) {
	{
		if (_23111_x == jule::MAX_I64) {
			_case_begin_4809602112:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if (_23111_x == jule::MIN_I64) {
			_case_begin_4809602208:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_4809604736:;
	}
	jule::Str _2379_fmt = _1e9e077ac_fmt_int(_23111_x,10LL);
	if (_1e9c67d6a_is_64bit(jule::Str("arm64", 5))) {
		return _2379_fmt + jule::Str("LL", 2);
	}
	return _2379_fmt + jule::Str("L", 1);
}



inline jule::Str _1eb8b628b_get_i64_model(jule::Ptr<_1ec3e4b65_Const>& _24419_c) {
	return _1eb8b628b_i64toa(static_cast<jule::I64>(_24419_c->_method_read_i64()));
}



inline jule::Str _1eb8b628b_u64toa(jule::U64 _24811_x) {
	{
		if (_24811_x == jule::MAX_U64) {
			_case_begin_4809612272:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_4809609088:;
	}
	jule::Str _2549_fmt = _1e9e077ac_fmt_uint(_24811_x,10LL);
	if (_1e9c67d6a_is_64bit(jule::Str("arm64", 5))) {
		return _2549_fmt + jule::Str("LLU", 3);
	}
	return _2549_fmt + jule::Str("LU", 2);
}



inline jule::Str _1eb8b628b_get_u64_model(jule::Ptr<_1ec3e4b65_Const> _26118_c) {
	return _1eb8b628b_u64toa(static_cast<jule::U64>(_26118_c->_method_read_u64()));
}



inline jule::Str _1eb8b628b_gen_const_expr(jule::Ptr<_1ebcce31e_Data> _26523_d) {
	{
		if (_26523_d->_field_constant->_method_is_str()) {
			_case_begin_4809620080:;
			{
				return _1eb8b628b_get_str_model(_26523_d->_field_constant);
			}
		}
		else if (_26523_d->_field_constant->_method_is_bool()) {
			_case_begin_4809620176:;
			{
				return _1eb8b628b_get_bool_model(_26523_d->_field_constant);
			}
		}
		else if (_26523_d->_field_constant->_method_is_f64()) {
			_case_begin_4809620272:;
			{
				return _1eb8b628b_get_float_model(_26523_d);
			}
		}
		else if (_26523_d->_field_constant->_method_is_i64()) {
			_case_begin_4809619456:;
			{
				return _1eb8b628b_get_i64_model(_26523_d->_field_constant);
			}
		}
		else if (_26523_d->_field_constant->_method_is_u64()) {
			_case_begin_4809619552:;
			{
				return _1eb8b628b_get_u64_model(_26523_d->_field_constant);
			}
		}
		else if (_26523_d->_field_constant->_method_is_nil()) {
			_case_begin_4809619648:;
			{
				return _1eb8b628b_get_nil_model();
			}
		}
		else {
			_case_begin_4809615072:;
			{
				return jule::Str();
			}
		}
		_match_end_4809616768:;
	}
}



inline jule::Str _1eb8b628b_gen_const_expr_model(jule::Ptr<_1ec3e4b65_Const> _27725_m) {
	{
		if (_27725_m->_method_is_str()) {
			_case_begin_4809630304:;
			{
				return _1eb8b628b_get_str_model(_27725_m);
			}
		}
		else if (_27725_m->_method_is_bool()) {
			_case_begin_4809630400:;
			{
				return _1eb8b628b_get_bool_model(_27725_m);
			}
		}
		else if (_27725_m->_method_is_f64()) {
			_case_begin_4809630496:;
			{
				return _1eb8b628b_get_f64_model(_27725_m);
			}
		}
		else if (_27725_m->_method_is_i64()) {
			_case_begin_4809629680:;
			{
				return _1eb8b628b_get_i64_model(_27725_m);
			}
		}
		else if (_27725_m->_method_is_u64()) {
			_case_begin_4809629776:;
			{
				return _1eb8b628b_get_u64_model(_27725_m);
			}
		}
		else if (_27725_m->_method_is_nil()) {
			_case_begin_4809629872:;
			{
				return _1eb8b628b_get_nil_model();
			}
		}
		else {
			_case_begin_4809624368:;
			{
				return jule::Str();
			}
		}
		_match_end_4809628784:;
	}
}



inline jule::Str _1eb8b628b_gen_div_by_zero_binop_expr_model(jule::Str _28937_op,jule::Any _28950_l,jule::Any _28968_r) {
	jule::Str _29013_op_func = jule::Str();
	{
		auto &_match_expr{ _28937_op };
		if (_match_expr == jule::Str("/", 1)) {
			_case_begin_4809639216:;
			{
				_29013_op_func=jule::Str("div", 3);
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4809639312:;
			{
				_29013_op_func=jule::Str("mod", 3);
			}
		}
		_match_end_4809639056:;
	}
	if (_1e9c5e35b_OPT_MATH) {
		{
			auto &_match_expr{ _28968_r };
			if (_match_expr.type_is<jule::Ptr<_1ec3e4b65_Const>>()) {
				_case_begin_4809640416:;
				{
					_29013_op_func=jule::Str("unsafe_", 7) + _29013_op_func;
				}
			}
			_match_end_4809642032:;
		}
	}
	jule::Str _30313_obj = jule::Str("jule::", 6);
	_30313_obj+=_29013_op_func;
	_30313_obj+=jule::Str("(", 1);
	_30313_obj+=_1eb8b628b_gen_expr(_28950_l);
	_30313_obj+=jule::Str(",", 1);
	_30313_obj+=_1eb8b628b_gen_expr(_28968_r);
	_30313_obj+=jule::Str(")", 1);
	return _30313_obj;
}



inline jule::Str _1eb8b628b_gen_binop_expr_model(jule::Ptr<_1eb7ccdea_BinopExprModel> _31329_m) {
	{
		auto &_match_expr{ _31329_m->_field_op };
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_4809646064:;
			{
				return _1eb8b628b_gen_div_by_zero_binop_expr_model(_31329_m->_field_op,_31329_m->_field_left,_31329_m->_field_right);
			}
		}
		_match_end_4809645984:;
	}
	jule::Str _32013_obj = jule::Str("(", 1);
	_32013_obj+=_1eb8b628b_gen_expr_model(_31329_m->_field_left);
	_32013_obj+=jule::Str(" ", 1);
	_32013_obj+=_31329_m->_field_op;
	_32013_obj+=jule::Str(" ", 1);
	_32013_obj+=_1eb8b628b_gen_expr_model(_31329_m->_field_right);
	_32013_obj+=jule::Str(")", 1);
	return _32013_obj;
}



inline jule::Str _1eb8b628b_gen_var_expr_model(jule::Ptr<_1eba533d4_Var> _33027_m) {
	if (_33027_m->_field_cpp_linked) {
		jule::Ptr<_1ea6ee955_Directive> _33213_d = _1ec7e92ab_find_directive(_33027_m->_field_directives,jule::Str("namespace", 9));
		if (_33213_d != nullptr) {
			jule::Str _33421_obj = _1eb8b628b_concat_all_parts(_33213_d->_field_args);
			_33421_obj+=jule::Str("::", 2);
			_33421_obj+=_1ec7be58e_var_out_ident(_33027_m);
			return _33421_obj;
		}
	}
	return _1ec7be58e_var_out_ident(_33027_m);
}



inline jule::Str _1eb8b628b_gen_struct_expr_model(jule::Ptr<_1eb29bdd6_Struct> _34326_m) {
	return _1ec7e92ab_gen_struct_kind(_34326_m);
}



inline jule::Str _1eb8b628b_gen_struct_ins_expr_model(jule::Ptr<_1eb29bdd6_StructIns> _34734_m) {
	return _1ec7e92ab_gen_struct_kind_ins(_34734_m);
}



inline jule::Str _1eb8b628b_gen_unary_expr_model(jule::Ptr<_1eb7ccdea_UnaryExprModel> _35129_m) {
	if (_1e9c5e35b_OPT_PTR && (_35129_m->_field_op == jule::Str("*", 1))) {
		{
			auto &_match_expr{ _35129_m->_field_expr };
			if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_UnaryExprModel>>()) {
				_case_begin_4809658896:;
				{
					jule::Ptr<_1eb7ccdea_UnaryExprModel> _35521_um = _35129_m->_field_expr.operator jule::Ptr<_1eb7ccdea_UnaryExprModel>();
					if (_35521_um->_field_op == jule::Str("&", 1)) {
						return _1eb8b628b_gen_expr_model(_35521_um->_field_expr);
					}
				}
			}
			_match_end_4809659904:;
		}
	}
	{
		auto &_match_expr{ _35129_m->_field_op };
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_4809665136:;
			{
				jule::Str _36417_obj = jule::Str("(~(", 3);
				_36417_obj+=_1eb8b628b_gen_expr(_35129_m->_field_expr);
				_36417_obj+=jule::Str("))", 2);
				return _36417_obj;
			}
		}
		else {
			_case_begin_4809663712:;
			{
				jule::Str _37017_obj = jule::Str("(", 1);
				_37017_obj+=_35129_m->_field_op;
				_37017_obj+=jule::Str("(", 1);
				_37017_obj+=_1eb8b628b_gen_expr(_35129_m->_field_expr);
				_37017_obj+=jule::Str("))", 2);
				return _37017_obj;
			}
		}
		_match_end_4809663440:;
	}
}



inline jule::Str _1eb8b628b_gen_cpp_struct_lit_expr_model(jule::Ptr<_1eb7ccdea_StructLitExprModel> _37938_m) {
	jule::Str _38013_obj = jule::Str("(", 1) + _1ec7e92ab_gen_struct_kind_ins(_37938_m->_field_strct);
	_38013_obj+=jule::Str("){", 2);
	if (_37938_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = _37938_m->_field_strct->_field_fields;
			auto it = expr.begin();
			_iter_begin_4809671808:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> _1eb8b628b_f = *it;
				{
					if (_37938_m->_field_strct->_field_decl->_field_cpp_linked) {
						{
							auto &expr = _37938_m->_field_args;
							auto it = expr.begin();
							_iter_begin_4809674256:;
							if (it != expr.end()) {
								jule::Ptr<_1eb7ccdea_StructArgExprModel> _1eb8b628b_arg = *it;
								{
									if (_1eb8b628b_arg->_field_field == _1eb8b628b_f) {
										_38013_obj+=jule::Str(".", 1);
										_38013_obj+=_1ec7be58e_field_out_ident(_1eb8b628b_f->_field_decl);
										_38013_obj+=jule::Str("=", 1);
										_38013_obj+=_1eb8b628b_gen_expr(_1eb8b628b_arg->_field_expr);
										_38013_obj+=jule::Str(",", 1);
										goto _iter_next_4809671808;
									}
								}
								_iter_next_4809674256:;
								++it;
								goto _iter_begin_4809674256;
							}
							_iter_end_4809674256:;
						}
						goto _iter_next_4809671808;
					}
					_38013_obj+=_1ec7be58e_field_out_ident(_1eb8b628b_f->_field_decl);
					_38013_obj+=jule::Str(": ", 2);
					{
						auto &expr = _37938_m->_field_args;
						auto it = expr.begin();
						_iter_begin_4809675024:;
						if (it != expr.end()) {
							jule::Ptr<_1eb7ccdea_StructArgExprModel> _1eb8b628b_arg = *it;
							{
								if (_1eb8b628b_arg->_field_field == _1eb8b628b_f) {
									_38013_obj+=_1eb8b628b_gen_expr(_1eb8b628b_arg->_field_expr);
									_38013_obj+=jule::Str(",", 1);
									goto _iter_next_4809671808;
								}
							}
							_iter_next_4809675024:;
							++it;
							goto _iter_begin_4809675024;
						}
						_iter_end_4809675024:;
					}
					_38013_obj+=_1eb8b628b_get_init_expr(_1eb8b628b_f->_field_kind);
					_38013_obj+=jule::Str(",", 1);
				}
				_iter_next_4809671808:;
				++it;
				goto _iter_begin_4809671808;
			}
			_iter_end_4809671808:;
		}
		_38013_obj=_38013_obj.slice(0LL,_38013_obj.len() - 1LL);
	}
	_38013_obj+=jule::Str("}", 1);
	return _38013_obj;
}



inline jule::Str _1eb8b628b_gen_struct_lit_expr_model(jule::Ptr<_1eb7ccdea_StructLitExprModel> _41734_m) {
	if (_41734_m->_field_strct->_field_decl->_field_cpp_linked) {
		return _1eb8b628b_gen_cpp_struct_lit_expr_model(_41734_m);
	}
	jule::Str _42213_obj = _1ec7be58e_struct_ins_out_ident(_41734_m->_field_strct);
	_42213_obj+=jule::Str("(", 1);
	if (_41734_m->_field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = _41734_m->_field_strct->_field_fields;
			auto it = expr.begin();
			_iter_begin_4809687264:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> _1eb8b628b_f = *it;
				{
					{
						auto &expr = _41734_m->_field_args;
						auto it = expr.begin();
						_iter_begin_4809688784:;
						if (it != expr.end()) {
							jule::Ptr<_1eb7ccdea_StructArgExprModel> _1eb8b628b_arg = *it;
							{
								if (_1eb8b628b_arg->_field_field == _1eb8b628b_f) {
									_42213_obj+=_1eb8b628b_gen_expr(_1eb8b628b_arg->_field_expr);
									_42213_obj+=jule::Str(",", 1);
									goto _iter_next_4809687264;
								}
							}
							_iter_next_4809688784:;
							++it;
							goto _iter_begin_4809688784;
						}
						_iter_end_4809688784:;
					}
					_42213_obj+=_1eb8b628b_get_init_expr(_1eb8b628b_f->_field_kind);
					_42213_obj+=jule::Str(",", 1);
				}
				_iter_next_4809687264:;
				++it;
				goto _iter_begin_4809687264;
			}
			_iter_end_4809687264:;
		}
		_42213_obj=_42213_obj.slice(0LL,_42213_obj.len() - 1LL);
	}
	_42213_obj+=jule::Str(")", 1);
	return _42213_obj;
}



inline jule::Str _1eb8b628b_gen_alloc_struct_lit_expr_model(jule::Ptr<_1eb7ccdea_AllocStructLitExprModel> _44340_m) {
	jule::Str _44413_obj = jule::Str("jule::new_struct", 16);
	if (_44340_m->_field_lit->_field_strct->_field_decl->_method_has_ref_accessible()) {
		_44413_obj+=jule::Str("_ptr", 4);
	}
	_44413_obj+=jule::Str("<", 1);
	_44413_obj+=_1ec7be58e_struct_ins_out_ident(_44340_m->_field_lit->_field_strct);
	_44413_obj+=jule::Str(">(new( std::nothrow ) ", 22);
	_44413_obj+=_1eb8b628b_gen_struct_lit_expr_model(_44340_m->_field_lit);
	_44413_obj+=jule::Str(")", 1);
	return _44413_obj;
}



inline jule::Str _1eb8b628b_gen_casting_expr_model(jule::Ptr<_1eb7ccdea_CastingExprModel> _45631_m) {
	jule::Str _45713_obj = jule::Str();
	{
		if ((_45631_m->_field_kind->_method_prim() != nullptr) && _45631_m->_field_kind->_method_prim()->_method_is_any()) {
			_case_begin_4809700864:;
			{
				_45713_obj+=_1ec7e92ab_gen_type_kind(_45631_m->_field_kind);
				_45713_obj+=jule::Str("(", 1);
				_45713_obj+=_1eb8b628b_gen_expr_model(_45631_m->_field_expr);
				_45713_obj+=jule::Str(")", 1);
			}
		}
		else if (_45631_m->_field_expr_kind->_method_ptr() != nullptr || _45631_m->_field_kind->_method_ptr() != nullptr) {
			_case_begin_4809703056:;
			{
				_45713_obj+=jule::Str("((", 2);
				_45713_obj+=_1ec7e92ab_gen_type_kind(_45631_m->_field_kind);
				_45713_obj+=jule::Str(")(", 2);
				_45713_obj+=_1eb8b628b_gen_expr(_45631_m->_field_expr);
				_45713_obj+=jule::Str("))", 2);
			}
		}
		else if (_45631_m->_field_expr_kind->_method_trt() != nullptr || (_45631_m->_field_expr_kind->_method_prim() != nullptr) && _45631_m->_field_expr_kind->_method_prim()->_method_is_any()) {
			_case_begin_4809703152:;
			{
				_45713_obj+=_1eb8b628b_gen_expr_model(_45631_m->_field_expr);
				_45713_obj+=_1eb8b628b_get_accessor(_45631_m->_field_expr_kind);
				_45713_obj+=jule::Str("operator ", 9);
				_45713_obj+=_1ec7e92ab_gen_type_kind(_45631_m->_field_kind);
				_45713_obj+=jule::Str("()", 2);
			}
		}
		else {
			_case_begin_4809700064:;
			{
				_45713_obj+=jule::Str("static_cast<", 12);
				_45713_obj+=_1ec7e92ab_gen_type_kind(_45631_m->_field_kind);
				_45713_obj+=jule::Str(">(", 2);
				_45713_obj+=_1eb8b628b_gen_expr(_45631_m->_field_expr);
				_45713_obj+=jule::Str(")", 1);
			}
		}
		_match_end_4809699952:;
	}
	return _45713_obj;
}



inline jule::Str _1eb8b628b_gen_arg_expr_models(jule::Slice<jule::Any> _49128_models) {
	if (_49128_models.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _49613_obj = jule::Str();
	{
		auto &expr = _49128_models;
		auto it = expr.begin();
		_iter_begin_4809716720:;
		if (it != expr.end()) {
			jule::Any _1eb8b628b_m = *it;
			{
				_49613_obj+=_1eb8b628b_gen_expr(_1eb8b628b_m);
				_49613_obj+=jule::Str(",", 1);
			}
			_iter_next_4809716720:;
			++it;
			goto _iter_begin_4809716720;
		}
		_iter_end_4809716720:;
	}
	_49613_obj=_49613_obj.slice(0LL,_49613_obj.len() - 1LL);
	return _49613_obj;
}



inline jule::Str _1eb8b628b_gen_expr_model_for_call(jule::Any _50532_expr) {
	{
		auto &_match_expr{ _50532_expr };
		if (_match_expr.type_is<jule::Ptr<_1eb627195_FnIns>>()) {
			_case_begin_4809395216:;
			{
				return _1eb8b628b_gen_fn_ins_expr_model(_50532_expr.operator jule::Ptr<_1eb627195_FnIns>());
			}
		}
		else {
			_case_begin_4809719184:;
			{
				return _1eb8b628b_gen_expr_model(_50532_expr);
			}
		}
		_match_end_4809718032:;
	}
}



inline jule::Str _1eb8b628b_gen_pure_fn_call_expr_model(jule::Ptr<_1eb7ccdea_FnCallExprModel>& _51237_m) {
	jule::Str _51313_obj = _1eb8b628b_gen_expr_model_for_call(_51237_m->_field_expr);
	if ((!(_51237_m->_field_func->_method_is_builtin()))) {
		if (_51237_m->_field_func->_field_decl->_field_cpp_linked && (_51237_m->_field_func->_field_generics.len() > 0LL)) {
			if ((!(_1ec7e92ab_has_directive(_51237_m->_field_func->_field_decl->_field_directives,jule::Str("cdef", 4))))) {
				_51313_obj+=jule::Str("<", 1);
				{
					auto &expr = _51237_m->_field_func->_field_generics;
					auto it = expr.begin();
					_iter_begin_4809726880:;
					if (it != expr.end()) {
						jule::Ptr<_1ec1c55b1_TypeKind> _1eb8b628b_g = *it;
						{
							_51313_obj+=_1ec7e92ab_gen_type_kind(_1eb8b628b_g);
							_51313_obj+=jule::Str(",", 1);
						}
						_iter_next_4809726880:;
						++it;
						goto _iter_begin_4809726880;
					}
					_iter_end_4809726880:;
				}
				_51313_obj=_51313_obj.slice(0LL,_51313_obj.len() - 1LL);
				_51313_obj+=jule::Str(">", 1);
			}
		}
	}
	_51313_obj+=jule::Str("(", 1);
	_51313_obj+=_1eb8b628b_gen_arg_expr_models(_51237_m->_field_args);
	_51313_obj+=jule::Str(")", 1);
	if (_51237_m->_field_is_co) {
		_51313_obj=jule::Str("__JULE_CO(", 10) + _51313_obj;
		_51313_obj+=jule::Str(")", 1);
	}
	return _51313_obj;
}



inline jule::Bool _1eb8b628b_is_forwarded(jule::Ptr<_1eb7d5892_Scope>& _53918_s) {
	jule::Any _5409_last = _53918_s->_field_stmts[_53918_s->_field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _5409_last };
		if (_match_expr.type_is<jule::Ptr<_1ebcce31e_Data>>()) {
			_case_begin_4809735968:;
			{
				{
					auto &_match_expr{ _5409_last.operator jule::Ptr<_1ebcce31e_Data>()->_field_model };
					if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>>()) {
						_case_begin_4809738336:;
						{
							return true;
						}
					}
					else {
						_case_begin_4809736096:;
						{
							return false;
						}
					}
					_match_end_4809736800:;
				}
			}
		}
		else {
			_case_begin_4809733024:;
			{
				return true;
			}
		}
		_match_end_4809734400:;
	}
}



inline jule::Bool _1eb8b628b_is_std_package(jule::Str _55619_f,jule::Str _55627_p) {
	return _55619_f.has_prefix(_1e904e87d_join(jule::Slice<jule::Str>({_1e9c5edd9_PATH_STDLIB,_55627_p})));
}



inline jule::Str _1eb8b628b_gen_fn_call_expr_model(jule::Ptr<_1eb7ccdea_FnCallExprModel> _56031_m) {
	if (_1e9c5e35b_PRODUCTION) {
		if ((!(_56031_m->_field_func->_method_is_builtin())) && _1eb8b628b_is_std_package(_56031_m->_field_func->_field_decl->_field_token._field_file->_method_path(),jule::Str("debug", 5))) {
			return jule::Str();
		}
	}
	if ((_56031_m->_field_func->_method_is_builtin() || (!(_56031_m->_field_func->_field_decl->_field_exceptional))) || ((_56031_m->_field_except != nullptr) && (_56031_m->_field_except->_field_stmts.len() == 0LL))) {
		return _1eb8b628b_gen_pure_fn_call_expr_model(_56031_m);
	}
	jule::Str _57513_obj = jule::Str("({\n", 3);
	_1ec821b85_add_indent();
	_57513_obj+=_1ec821b85_indent();
	_57513_obj+=jule::Str("auto except = ", 14);
	_57513_obj+=_1eb8b628b_gen_pure_fn_call_expr_model(_56031_m);
	_57513_obj+=jule::Str(";\n", 2);
	_57513_obj+=_1ec821b85_indent();
	if (_56031_m->_field_except != nullptr) {
		if ((_56031_m->_field_func->_field_result == nullptr) || (!(_56031_m->_field_assigned))) {
			_57513_obj+=jule::Str("if (!except.ok()) ", 18);
			_57513_obj+=_1e9c80d3e_gen_scope(_56031_m->_field_except);
			_57513_obj+=jule::Str("\n", 1);
		} else {
			jule::Bool _58817_forwarded = _1eb8b628b_is_forwarded(_56031_m->_field_except);
			_57513_obj+=jule::Str("(except.ok()) ? (except.result) : (", 35);
			if (_58817_forwarded) {
				_57513_obj+=jule::Str("{", 1);
			}
			_57513_obj+=_1e9c80d3e_gen_scope(_56031_m->_field_except);
			if (_58817_forwarded) {
				_57513_obj+=jule::Str(" ", 1);
				_57513_obj+=_1eb8b628b_get_init_expr(_56031_m->_field_func->_field_result);
				_57513_obj+=jule::Str(";}", 2);
			}
			_57513_obj+=jule::Str(");\n", 3);
		}
		_1ec821b85_done_indent();
	} else {
		jule::Str _60317_path = _1eb8b628b_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_56031_m->_field_token._field_file->_method_path()));
		_60317_path=_60317_path.slice(1LL,_60317_path.len() - 1LL);
		_57513_obj+=jule::Str("if (!except.ok()) jule::panic(jule::Str(\"", 41);
		_57513_obj+=jule::Str("unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 98);
		_57513_obj+=_60317_path;
		_57513_obj+=jule::Str(":", 1);
		_57513_obj+=_1e9e077ac_itoa(_56031_m->_field_token._field_row);
		_57513_obj+=jule::Str(":", 1);
		_57513_obj+=_1e9e077ac_itoa(_56031_m->_field_token._field_column);
		_57513_obj+=jule::Str("\"));\n", 5);
		if ((!(_56031_m->_field_func->_field_decl->_method_is_void()))) {
			_57513_obj+=_1ec821b85_indent();
			_57513_obj+=jule::Str("(except.result);\n", 17);
		}
		_1ec821b85_done_indent();
	}
	_57513_obj+=_1ec821b85_indent();
	_57513_obj+=jule::Str("})", 2);
	return _57513_obj;
}



inline jule::Str _1eb8b628b_gen_slice_expr_model(jule::Ptr<_1eb7ccdea_SliceExprModel> _62629_m) {
	if (_62629_m->_field_elems.len() == 0LL) {
		return _1ec7e92ab_as_slice_kind(_62629_m->_field_elem_kind) + jule::Str("()", 2);
	}
	jule::Str _63113_obj = _1ec7e92ab_as_slice_kind(_62629_m->_field_elem_kind);
	_63113_obj+=jule::Str("({", 2);
	_63113_obj+=_1eb8b628b_gen_arg_expr_models(_62629_m->_field_elems);
	_63113_obj+=jule::Str("})", 2);
	return _63113_obj;
}



inline jule::Str _1eb8b628b_gen_indexing_expr_model(jule::Ptr<_1eb7ccdea_IndexigExprModel> _63832_m) {
	jule::Str _63913_obj = _1eb8b628b_gen_expr_model(_63832_m->_field_expr->_field_model);
	if (_1e9c5e35b_OPT_ACCESS) {
		jule::Bool _64313_array = _63832_m->_field_expr->_field_kind->_method_arr() != nullptr;
		if (_64313_array && _63832_m->_field_index->_method_is_const()) {
			_63913_obj+=jule::Str(".__at(", 6);
			_63913_obj+=_1eb8b628b_gen_expr(_63832_m->_field_index->_field_model);
			_63913_obj+=jule::Str(")", 1);
			return _63913_obj;
		}
		{
			auto &_match_expr{ _63832_m->_field_index->_field_model };
			if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
				_case_begin_4809773216:;
				{
					jule::Ptr<_1eba533d4_Var> _65517_i = _63832_m->_field_index->_field_model.operator jule::Ptr<_1eba533d4_Var>();
					if (_65517_i->_field_mutable || (_65517_i->_field_iter_relation == nullptr)) {
						goto _match_end_4809775648;
					}
					{
						auto &_match_expr{ _63832_m->_field_expr->_field_model };
						if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
							_case_begin_4809778480:;
							{
								jule::Ptr<_1eba533d4_Var> _66121_r = _63832_m->_field_expr->_field_model.operator jule::Ptr<_1eba533d4_Var>();
								if (_65517_i->_field_iter_relation->_field_range == _66121_r) {
									_63913_obj+=jule::Str(".__at(", 6);
									_63913_obj+=_1eb8b628b_gen_expr(_63832_m->_field_index->_field_model);
									_63913_obj+=jule::Str(")", 1);
									return _63913_obj;
								}
							}
						}
						_match_end_4809779296:;
					}
				}
			}
			_match_end_4809775648:;
		}
	}
	_63913_obj+=jule::Str("[", 1);
	_63913_obj+=_1eb8b628b_gen_expr(_63832_m->_field_index->_field_model);
	_63913_obj+=jule::Str("]", 1);
	return _63913_obj;
}



inline jule::Str _1eb8b628b_gen_anon_fn_expr_model(jule::Ptr<_1eb7ccdea_AnonFnExprModel> _68131_m) {
	jule::Str _68213_obj = _1ec7e92ab_gen_fn_kind(_68131_m->_field_func);
	_68213_obj+=jule::Str("([=]", 4);
	_68213_obj+=_1ec821b85_gen_params_ins(_68131_m->_field_func->_field_params);
	_68213_obj+=jule::Str(" mutable -> ", 12);
	_68213_obj+=_1ec821b85_gen_fn_ins_result(_68131_m->_field_func);
	_68213_obj+=jule::Str(" ", 1);
	_68213_obj+=_1e9c80d3e_gen_fn_scope(_68131_m->_field_func);
	_68213_obj+=jule::Str(")", 1);
	return _68213_obj;
}



inline jule::Str _1eb8b628b_gen_map_expr_model(jule::Ptr<_1eb7ccdea_MapExprModel> _69327_m) {
	jule::Str _69413_obj = _1ec7be58e_as_jt(jule::Str("map", 3));
	_69413_obj+=jule::Str("<", 1);
	_69413_obj+=_1ec7e92ab_gen_type_kind(_69327_m->_field_key_kind);
	_69413_obj+=jule::Str(",", 1);
	_69413_obj+=_1ec7e92ab_gen_type_kind(_69327_m->_field_val_kind);
	_69413_obj+=jule::Str(">({", 3);
	if (_69327_m->_field_entries.len() > 0LL) {
		{
			auto &expr = _69327_m->_field_entries;
			auto it = expr.begin();
			_iter_begin_4809792704:;
			if (it != expr.end()) {
				jule::Ptr<_1eb7ccdea_KeyValPairExprModel> _1eb8b628b_pair = *it;
				{
					jule::Str _70221_pair_obj = jule::Str("{", 1);
					_70221_pair_obj+=_1eb8b628b_gen_expr(_1eb8b628b_pair->_field_key);
					_70221_pair_obj+=jule::Str(",", 1);
					_70221_pair_obj+=_1eb8b628b_gen_expr(_1eb8b628b_pair->_field_val);
					_70221_pair_obj+=jule::Str("}", 1);
					_69413_obj+=_70221_pair_obj;
					_69413_obj+=jule::Str(",", 1);
				}
				_iter_next_4809792704:;
				++it;
				goto _iter_begin_4809792704;
			}
			_iter_end_4809792704:;
		}
		_69413_obj=_69413_obj.slice(0LL,_69413_obj.len() - 1LL);
	}
	_69413_obj+=jule::Str("})", 2);
	return _69413_obj;
}



inline jule::Str _1eb8b628b_gen_slicing_expr_model(jule::Ptr<_1eb7ccdea_SlicingExprModel> _71631_m) {
	jule::Str _71713_obj = _1eb8b628b_gen_expr_model(_71631_m->_field_expr);
	_71713_obj+=jule::Str(".slice(", 7);
	_71713_obj+=_1eb8b628b_gen_expr(_71631_m->_field_left);
	if (_71631_m->_field_right != nullptr) {
		_71713_obj+=jule::Str(",", 1);
		_71713_obj+=_1eb8b628b_gen_expr(_71631_m->_field_right);
	}
	_71713_obj+=jule::Str(")", 1);
	return _71713_obj;
}



inline jule::Str _1eb8b628b_gen_trait_sub_ident_expr_model(jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel> _72839_m) {
	jule::Str _72913_obj = _1eb8b628b_gen_expr_model(_72839_m->_field_expr);
	_72913_obj+=jule::Str(".get()._method_", 15);
	_72913_obj+=_72839_m->_field_ident;
	return _72913_obj;
}



inline jule::Str _1eb8b628b_gen_struct_sub_ident_expr_model(jule::Ptr<_1eb7ccdea_StructSubIdentExprModel> _73540_m) {
	jule::Str _73613_obj = _1eb8b628b_gen_expr_model(_73540_m->_field_expr);
	_73613_obj+=_1eb8b628b_get_accessor(_73540_m->_field_expr_kind);
	if (_73540_m->_field_field != nullptr) {
		_73613_obj+=_1ec7be58e_field_out_ident(_73540_m->_field_field->_field_decl);
	} else {
		_73613_obj+=_1ec7be58e_fn_ins_out_ident(_73540_m->_field_method);
	}
	return _73613_obj;
}



inline jule::Str _1eb8b628b_gen_common_ident_expr_model(jule::Ptr<_1eb7ccdea_CommonIdentExprModel> _74632_m) {
	return _74632_m->_field_ident;
}



inline jule::Str _1eb8b628b_gen_common_sub_ident_expr_model(jule::Ptr<_1eb7ccdea_CommonSubIdentExprModel> _75040_m) {
	jule::Str _75113_obj = _1eb8b628b_gen_expr_model(_75040_m->_field_expr);
	_75113_obj+=_1eb8b628b_get_accessor(_75040_m->_field_expr_kind);
	_75113_obj+=_75040_m->_field_ident;
	return _75113_obj;
}



inline jule::Str _1eb8b628b_gen_array_expr_model(jule::Ptr<_1eb7ccdea_ArrayExprModel> _75729_m) {
	if (_75729_m->_field_elems.len() == 0LL) {
		return _1ec7e92ab_gen_array_kind(_75729_m->_field_kind) + jule::Str("()", 2);
	}
	jule::Str _76213_obj = _1ec7e92ab_gen_array_kind(_75729_m->_field_kind);
	if ((_75729_m->_field_elems.len() == 2LL) && (_75729_m->_field_elems[1LL] == nullptr)) {
		_76213_obj+=jule::Str("(", 1);
		_76213_obj+=_1eb8b628b_gen_expr(_75729_m->_field_elems[0LL]);
		_76213_obj+=jule::Str(")", 1);
		return _76213_obj;
	}
	_76213_obj+=jule::Str("({", 2);
	_76213_obj+=_1eb8b628b_gen_arg_expr_models(_75729_m->_field_elems);
	_76213_obj+=jule::Str("})", 2);
	return _76213_obj;
}



inline jule::Str _1eb8b628b_gen_fn_ins_expr_model_common(jule::Ptr<_1eb627195_FnIns> _78037_m) {
	jule::Str _78113_obj = _1ec7e92ab_gen_fn_kind(_78037_m);
	_78113_obj+=jule::Str("(", 1);
	_78113_obj+=_1eb8b628b_gen_fn_ins_expr_model(_78037_m);
	_78113_obj+=jule::Str(")", 1);
	return _78113_obj;
}



inline jule::Str _1eb8b628b_gen_fn_ins_expr_model(jule::Ptr<_1eb627195_FnIns> _78930_m) {
	if ((_78930_m->_field_decl != nullptr) && _78930_m->_field_decl->_field_cpp_linked) {
		jule::Ptr<_1ea6ee955_Directive> _79113_d = _1ec7e92ab_find_directive(_78930_m->_field_decl->_field_directives,jule::Str("namespace", 9));
		if (_79113_d != nullptr) {
			jule::Str _79321_obj = _1eb8b628b_concat_all_parts(_79113_d->_field_args);
			_79321_obj+=jule::Str("::", 2);
			_79321_obj+=_1ec7be58e_fn_ins_out_ident(_78930_m);
			return _79321_obj;
		}
	}
	return _1ec7be58e_fn_ins_out_ident(_78930_m);
}



inline jule::Str _1eb8b628b_gen_tuple_expr_model(jule::Ptr<_1eb7ccdea_TupleExprModel> _80229_m) {
	jule::Str _80313_obj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _80229_m->_field_datas;
		auto it = expr.begin();
		_iter_begin_4809844720:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcce31e_Data> _1eb8b628b_d = *it;
			{
				_80313_obj+=_1eb8b628b_gen_expr(_1eb8b628b_d->_field_model);
				_80313_obj+=jule::Str(",", 1);
			}
			_iter_next_4809844720:;
			++it;
			goto _iter_begin_4809844720;
		}
		_iter_end_4809844720:;
	}
	_80313_obj=_80313_obj.slice(0LL,_80313_obj.len() - 1LL);
	_80313_obj+=jule::Str(")", 1);
	return _80313_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_new_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinNewCallExprModel> _81340_m) {
	jule::Str _81413_obj = jule::Str("jule::new_ptr<", 14);
	_81413_obj+=_1ec7e92ab_gen_type_kind(_81340_m->_field_kind);
	_81413_obj+=jule::Str(">(", 2);
	if (_81340_m->_field_init != nullptr) {
		_81413_obj+=_1eb8b628b_gen_expr(_81340_m->_field_init);
	}
	_81413_obj+=jule::Str(")", 1);
	return _81413_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_out_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel> _82440_m) {
	if (_82440_m->_field_debug && _1e9c5e35b_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _82813_obj = jule::Str("jule::out(", 10);
	_82813_obj+=_1eb8b628b_gen_expr(_82440_m->_field_expr);
	_82813_obj+=jule::Str(")", 1);
	return _82813_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_outln_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinOutlnCallExprModel> _83442_m) {
	if (_83442_m->_field_debug && _1e9c5e35b_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _83813_obj = jule::Str("jule::outln(", 12);
	_83813_obj+=_1eb8b628b_gen_expr(_83442_m->_field_expr);
	_83813_obj+=jule::Str(")", 1);
	return _83813_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_panic_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel> _84442_m) {
	jule::Str _84513_path = _1eb8b628b_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_84442_m->_field_token._field_file->_method_path()));
	_84513_path=_84513_path.slice(1LL,_84513_path.len() - 1LL);
	jule::Str _84813_obj = jule::Str("jule::panic(", 12);
	_84813_obj+=_1eb8b628b_gen_expr(_84442_m->_field_expr);
	_84813_obj+=jule::Str(" + jule::Str(\"\\nlocation: ", 26);
	_84813_obj+=_84513_path;
	_84813_obj+=jule::Str(":", 1);
	_84813_obj+=_1e9e077ac_itoa(_84442_m->_field_token._field_row);
	_84813_obj+=jule::Str(":", 1);
	_84813_obj+=_1e9e077ac_itoa(_84442_m->_field_token._field_column);
	_84813_obj+=jule::Str("\"));", 4);
	return _84813_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_assert_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinAssertCallExprModel> _86043_m) {
	if (_1e9c5e35b_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _86413_path = _1eb8b628b_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_86043_m->_field_token._field_file->_method_path()));
	_86413_path=_86413_path.slice(1LL,_86413_path.len() - 1LL);
	jule::Str _86713_obj = jule::Str("if (!(", 6);
	_86713_obj+=_1eb8b628b_gen_expr(_86043_m->_field_expr);
	_86713_obj+=jule::Str(")) jule::panic(jule::Str(", 25);
	_86713_obj+=_1eb8b628b_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_86043_m->_field_log));
	_86713_obj+=jule::Str(") + jule::Str(\"\\nlocation: ", 27);
	_86713_obj+=_86413_path;
	_86713_obj+=jule::Str(":", 1);
	_86713_obj+=_1e9e077ac_itoa(_86043_m->_field_token._field_row);
	_86713_obj+=jule::Str(":", 1);
	_86713_obj+=_1e9e077ac_itoa(_86043_m->_field_token._field_column);
	_86713_obj+=jule::Str("\"));", 4);
	return _86713_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_error_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel> _88142_m) {
	jule::Str _88213_obj = jule::Str("return ", 7);
	if (_88142_m->_field_func->_field_decl->_method_is_void()) {
		_88213_obj+=jule::Str("jule::VoidExceptional(", 22);
	} else {
		_88213_obj+=jule::Str("jule::Exceptional<", 18);
		_88213_obj+=_1ec7e92ab_gen_type_kind(_88142_m->_field_func->_field_result);
		_88213_obj+=jule::Str(">(", 2);
	}
	_88213_obj+=_1eb8b628b_gen_expr(_88142_m->_field_err);
	_88213_obj+=jule::Str(")", 1);
	return _88213_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_make_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinMakeCallExprModel> _89541_m) {
	jule::Str _89613_obj = jule::Str();
	if (_89541_m->_field_len != nullptr) {
		_89613_obj+=_1eb8b628b_gen_expr(_89541_m->_field_len);
	} else {
		_89613_obj+=jule::Str("0", 1);
	}
	if (_89541_m->_field_cap != nullptr) {
		_89613_obj+=jule::Str(",", 1) + _1eb8b628b_gen_expr(_89541_m->_field_cap);
	}
	if (_89541_m->_field_kind->_method_slc()->_field_elem->_method_enm() != nullptr) {
		_89613_obj+=jule::Str(",", 1);
		_89613_obj+=_1eb8b628b_get_init_expr(_89541_m->_field_kind->_method_slc()->_field_elem);
		if (_89541_m->_field_cap != nullptr) {
			_89613_obj=(_1ec7e92ab_gen_type_kind(_89541_m->_field_kind) + jule::Str("::alloc(", 8)) + _89613_obj;
		} else {
			_89613_obj=(_1ec7e92ab_gen_type_kind(_89541_m->_field_kind) + jule::Str("::alloc_def(", 12)) + _89613_obj;
		}
	} else {
		_89613_obj=(_1ec7e92ab_gen_type_kind(_89541_m->_field_kind) + jule::Str("::alloc(", 8)) + _89613_obj;
	}
	_89613_obj+=jule::Str(")", 1);
	return _89613_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_append_call_expr_model_assign_opt(jule::Bool _9235_same_dest,jule::Str& _9246_dest_expr,jule::Ptr<_1ec1c55b1_TypeKind>& _92510_dest_kind,jule::Ptr<_1eb7ccdea_SliceExprModel>& _92610_s,jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>& _92710_m) {
	jule::Str _92813_obj = jule::Str();
	if ((!(_9235_same_dest))) {
		_92813_obj+=_9246_dest_expr;
		_92813_obj+=jule::Str(" = jule::alloc_for_append(", 26);
		_92813_obj+=_1eb8b628b_gen_expr_model(_92710_m->_field_dest);
		_92813_obj+=jule::Str(",", 1);
		_92813_obj+=_1e9e077ac_itoa(static_cast<jule::I64>(_92610_s->_field_elems.len()));
		_92813_obj+=jule::Str(");", 2);
	}
	{
		auto &expr = _92610_s->_field_elems;
		auto it = expr.begin();
		_iter_begin_4809895232:;
		if (it != expr.end()) {
			jule::Any _1eb8b628b_e = *it;
			{
				_92813_obj+=_9246_dest_expr;
				_92813_obj+=_1eb8b628b_get_accessor(_92510_dest_kind);
				_92813_obj+=jule::Str("push(", 5);
				_92813_obj+=_1eb8b628b_gen_expr_model(_1eb8b628b_e);
				_92813_obj+=jule::Str(");", 2);
			}
			_iter_next_4809895232:;
			++it;
			goto _iter_begin_4809895232;
		}
		_iter_end_4809895232:;
	}
	return _92813_obj;
}



inline std::tuple<jule::Str,jule::Bool> _1eb8b628b_gen_builtin_append_call_expr_model_assign(jule::Any _94750_dest,jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel> _94771_m) {
	jule::Bool _947110_optimized = jule::Bool();
	{
		auto &_match_expr{ _94771_m->_field_elements };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_SliceExprModel>>()) {
			_case_begin_4809897968:;
			{
				{
					auto &_match_expr{ _94750_dest };
					if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
						_case_begin_4809899200:;
						{
							jule::Ptr<_1eb7ccdea_SliceExprModel> _95221_s = _94771_m->_field_elements.operator jule::Ptr<_1eb7ccdea_SliceExprModel>();
							jule::Str _95317_dest_expr = _1eb8b628b_gen_expr_model(_94750_dest);
							jule::Ptr<_1eba533d4_Var> _95421_dest_var = _94750_dest.operator jule::Ptr<_1eba533d4_Var>();
							jule::Bool _95517_same_dest = _94771_m->_field_dest == _95421_dest_var;
							_947110_optimized = true;
							return std::make_tuple(_1eb8b628b_gen_builtin_append_call_expr_model_assign_opt(_95517_same_dest,_95317_dest_expr,_95421_dest_var->_field_kind->_field_kind,_95221_s,_94771_m),_947110_optimized);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>>()) {
						_case_begin_4809900672:;
						{
							jule::Ptr<_1eb7ccdea_SliceExprModel> _96021_s = _94771_m->_field_elements.operator jule::Ptr<_1eb7ccdea_SliceExprModel>();
							jule::Str _96117_dest_expr = _1eb8b628b_gen_expr_model(_94750_dest);
							jule::Ptr<_1eb29bdd6_FieldIns> _96221_dest_field = _94750_dest.operator jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>()->_field_field;
							jule::Bool _96317_same_dest = _94771_m->_field_dest == _96221_dest_field;
							_947110_optimized = true;
							return std::make_tuple(_1eb8b628b_gen_builtin_append_call_expr_model_assign_opt(_96317_same_dest,_96117_dest_expr,_96221_dest_field->_field_kind,_96021_s,_94771_m),_947110_optimized);
						}
					}
					_match_end_4809900384:;
				}
			}
		}
		_match_end_4809899120:;
	}
	_947110_optimized = false;
	return std::make_tuple(_1eb8b628b_gen_builtin_append_call_expr_model(_94771_m),_947110_optimized);
}



inline jule::Str _1eb8b628b_gen_builtin_append_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel> _97243_m) {
	jule::Str _97313_obj = jule::Str("jule::append(", 13);
	_97313_obj+=_1eb8b628b_gen_expr_model(_97243_m->_field_dest);
	_97313_obj+=jule::Str(",", 1);
	_97313_obj+=_1eb8b628b_gen_expr_model(_97243_m->_field_elements);
	_97313_obj+=jule::Str(")", 1);
	return _97313_obj;
}



inline jule::Str _1eb8b628b_gen_builtin_clone_call_expr_model(jule::Ptr<_1eb7ccdea_BuiltinCloneCallExprModel> _98142_m) {
	jule::Str _98213_obj = jule::Str("jule::clone(", 12);
	_98213_obj+=_1eb8b628b_gen_expr_model(_98142_m->_field_expr);
	_98213_obj+=jule::Str(")", 1);
	return _98213_obj;
}



inline jule::Str _1eb8b628b_gen_sizeof_expr_model(jule::Ptr<_1eb7ccdea_SizeofExprModel> _98830_m) {
	jule::Str _98913_obj = jule::Str("sizeof(", 7);
	_98913_obj+=_1eb8b628b_gen_expr(_98830_m->_field_expr);
	_98913_obj+=jule::Str(")", 1);
	return _98913_obj;
}



inline jule::Str _1eb8b628b_gen_alignof_expr_model(jule::Ptr<_1eb7ccdea_AlignofExprModel> _99531_m) {
	jule::Str _99613_obj = jule::Str("alignof(", 8);
	_99613_obj+=_1eb8b628b_gen_expr(_99531_m->_field_expr);
	_99613_obj+=jule::Str(")", 1);
	return _99613_obj;
}



inline jule::Str _1eb8b628b_gen_rune_expr_model(jule::Ptr<_1eb7ccdea_RuneExprModel> _100224_m) {
	if (_100224_m->_field_code <= 127LL) {
		jule::Str _100417_b = _1eb8b628b_sbtoa(static_cast<jule::U8>(_100224_m->_field_code));
		if (_100417_b == jule::Str("'", 1)) {
			_100417_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _100417_b) + jule::Str("'", 1);
	}
	return _1eb8b628b_i64toa(static_cast<jule::I64>(_100224_m->_field_code));
}



inline jule::Str _1eb8b628b_gen_struct_static_ident_expr_model(jule::Ptr<_1eb7ccdea_StructStaticIdentExprModel> _101343_m) {
	jule::Str _101413_obj = _1ec7be58e_struct_ins_out_ident(_101343_m->_field_structure);
	_101413_obj+=jule::Str("::", 2);
	_101413_obj+=_1ec7be58e_fn_ins_out_ident(_101343_m->_field_method);
	return _101413_obj;
}



inline jule::Str _1eb8b628b_gen_integrated_to_str_expr_model(jule::Ptr<_1eb7ccdea_IntegratedToStrExprModel> _102041_m) {
	jule::Str _102113_obj = jule::Str("jule::to_str(", 13);
	_102113_obj+=_1eb8b628b_gen_expr_model(_102041_m->_field_expr);
	_102113_obj+=jule::Str(")", 1);
	return _102113_obj;
}



inline jule::Str _1eb8b628b_gen_ternary_expr_model(jule::Ptr<_1eb7ccdea_TernaryExprModel> _102731_m) {
	jule::Str _102813_obj = jule::Str("((", 2);
	_102813_obj+=_1eb8b628b_gen_expr_model(_102731_m->_field_condition);
	_102813_obj+=jule::Str(") ? (", 5);
	_102813_obj+=_1eb8b628b_gen_expr_model(_102731_m->_field_true_expr);
	_102813_obj+=jule::Str(") : (", 5);
	_102813_obj+=_1eb8b628b_gen_expr_model(_102731_m->_field_false_expr);
	_102813_obj+=jule::Str("))", 2);
	return _102813_obj;
}



inline jule::Str _1eb8b628b_gen_backend_emit_expr_model(jule::Ptr<_1eb7ccdea_BackendEmitExprModel> _103836_m) {
	return _103836_m->_field_code;
}



inline jule::Str _1eb8b628b_gen_expr_model(jule::Any _104223_m) {
	{
		auto &_match_expr{ _104223_m };
		if (_match_expr.type_is<jule::Ptr<_1ec1c55b1_TypeKind>>()) {
			_case_begin_4809942608:;
			{
				return _1ec7e92ab_gen_type_kind(_104223_m.operator jule::Ptr<_1ec1c55b1_TypeKind>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ec3e4b65_Const>>()) {
			_case_begin_4809942160:;
			{
				return _1eb8b628b_gen_const_expr_model(_104223_m.operator jule::Ptr<_1ec3e4b65_Const>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eba533d4_Var>>()) {
			_case_begin_4809942256:;
			{
				return _1eb8b628b_gen_var_expr_model(_104223_m.operator jule::Ptr<_1eba533d4_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7c68e9_Trait>>()) {
			_case_begin_4809942352:;
			{
				return _1ec7be58e_trait_out_ident(_104223_m.operator jule::Ptr<_1eb7c68e9_Trait>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_Struct>>()) {
			_case_begin_4809941792:;
			{
				return _1eb8b628b_gen_struct_expr_model(_104223_m.operator jule::Ptr<_1eb29bdd6_Struct>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb29bdd6_StructIns>>()) {
			_case_begin_4809941888:;
			{
				return _1eb8b628b_gen_struct_ins_expr_model(_104223_m.operator jule::Ptr<_1eb29bdd6_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb627195_FnIns>>()) {
			_case_begin_4809941984:;
			{
				return _1eb8b628b_gen_fn_ins_expr_model_common(_104223_m.operator jule::Ptr<_1eb627195_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BinopExprModel>>()) {
			_case_begin_4809941296:;
			{
				return _1eb8b628b_gen_binop_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_UnaryExprModel>>()) {
			_case_begin_4809941392:;
			{
				return _1eb8b628b_gen_unary_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructLitExprModel>>()) {
			_case_begin_4809941488:;
			{
				return _1eb8b628b_gen_struct_lit_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_AllocStructLitExprModel>>()) {
			_case_begin_4809941584:;
			{
				return _1eb8b628b_gen_alloc_struct_lit_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_CastingExprModel>>()) {
			_case_begin_4809943424:;
			{
				return _1eb8b628b_gen_casting_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_FnCallExprModel>>()) {
			_case_begin_4809943520:;
			{
				return _1eb8b628b_gen_fn_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_SliceExprModel>>()) {
			_case_begin_4809943616:;
			{
				return _1eb8b628b_gen_slice_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_ArrayExprModel>>()) {
			_case_begin_4809943712:;
			{
				return _1eb8b628b_gen_array_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_IndexigExprModel>>()) {
			_case_begin_4809943824:;
			{
				return _1eb8b628b_gen_indexing_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_IndexigExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_AnonFnExprModel>>()) {
			_case_begin_4809943936:;
			{
				return _1eb8b628b_gen_anon_fn_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_MapExprModel>>()) {
			_case_begin_4809944048:;
			{
				return _1eb8b628b_gen_map_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_SlicingExprModel>>()) {
			_case_begin_4809944160:;
			{
				return _1eb8b628b_gen_slicing_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>>()) {
			_case_begin_4809944272:;
			{
				return _1eb8b628b_gen_trait_sub_ident_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>>()) {
			_case_begin_4809944384:;
			{
				return _1eb8b628b_gen_struct_sub_ident_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_CommonIdentExprModel>>()) {
			_case_begin_4809944496:;
			{
				return _1eb8b628b_gen_common_ident_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_CommonSubIdentExprModel>>()) {
			_case_begin_4809944608:;
			{
				return _1eb8b628b_gen_common_sub_ident_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_TupleExprModel>>()) {
			_case_begin_4809944720:;
			{
				return _1eb8b628b_gen_tuple_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel>>()) {
			_case_begin_4809944832:;
			{
				return _1eb8b628b_gen_builtin_out_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinOutlnCallExprModel>>()) {
			_case_begin_4809944944:;
			{
				return _1eb8b628b_gen_builtin_outln_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinNewCallExprModel>>()) {
			_case_begin_4809945056:;
			{
				return _1eb8b628b_gen_builtin_new_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>>()) {
			_case_begin_4809945168:;
			{
				return _1eb8b628b_gen_builtin_panic_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinAssertCallExprModel>>()) {
			_case_begin_4809945280:;
			{
				return _1eb8b628b_gen_builtin_assert_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>>()) {
			_case_begin_4809945392:;
			{
				return _1eb8b628b_gen_builtin_error_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinMakeCallExprModel>>()) {
			_case_begin_4809945504:;
			{
				return _1eb8b628b_gen_builtin_make_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>>()) {
			_case_begin_4809945616:;
			{
				return _1eb8b628b_gen_builtin_append_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BuiltinCloneCallExprModel>>()) {
			_case_begin_4809945728:;
			{
				return _1eb8b628b_gen_builtin_clone_call_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_SizeofExprModel>>()) {
			_case_begin_4809945840:;
			{
				return _1eb8b628b_gen_sizeof_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_AlignofExprModel>>()) {
			_case_begin_4809945952:;
			{
				return _1eb8b628b_gen_alignof_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_RuneExprModel>>()) {
			_case_begin_4809946064:;
			{
				return _1eb8b628b_gen_rune_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_RuneExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_StructStaticIdentExprModel>>()) {
			_case_begin_4809946176:;
			{
				return _1eb8b628b_gen_struct_static_ident_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_IntegratedToStrExprModel>>()) {
			_case_begin_4809946288:;
			{
				return _1eb8b628b_gen_integrated_to_str_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_TernaryExprModel>>()) {
			_case_begin_4809946400:;
			{
				return _1eb8b628b_gen_ternary_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_TernaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BackendEmitExprModel>>()) {
			_case_begin_4809946512:;
			{
				return _1eb8b628b_gen_backend_emit_expr_model(_104223_m.operator jule::Ptr<_1eb7ccdea_BackendEmitExprModel>());
			}
		}
		else {
			_case_begin_4809940336:;
			{
				return jule::Str("<unimplemented_expression_model>", 32);
			}
		}
		_match_end_4809939184:;
	}
}



inline jule::Str _1eb8b628b_gen_expr(jule::Any _116917_e) {
	jule::Str _117013_obj = _1eb8b628b_gen_expr_model(_116917_e);
	if ((_117013_obj.len() == 0LL) || (_117013_obj[0LL] != '(')) {
		return _117013_obj;
	}
	{
		auto &_match_expr{ _116917_e };
		if (_match_expr.type_is<jule::Ptr<_1eb7ccdea_BinopExprModel>>()) {
			_case_begin_4810007456:;
			{
				_117013_obj=_117013_obj.slice(1LL,_117013_obj.len() - 1LL);
			}
		}
		_match_end_4810007696:;
	}
	return _117013_obj;
}



inline jule::Str _1eb8b628b_gen_val(jule::Ptr<_1ebcce31e_Value> _118216_v) {
	if (_118216_v->_field_data->_method_is_const()) {
		return _1eb8b628b_gen_const_expr(_118216_v->_field_data);
	}
	return _1eb8b628b_gen_expr(_118216_v->_field_data->_field_model);
}



inline jule::Str _1eb8b628b_get_init_expr(jule::Ptr<_1ec1c55b1_TypeKind> _118922_t) {
	if (_118922_t->_method_ptr() != nullptr) {
		return jule::Str("nullptr", 7);
	}
	jule::Ptr<_1eb7c7e7d_Enum> _119413_enm = _118922_t->_method_enm();
	if (_119413_enm != nullptr) {
		return _1eb8b628b_gen_val(_119413_enm->_field_items[0LL]->_field_value);
	}
	return _1ec7e92ab_gen_type_kind(_118922_t) + jule::Str("()", 2);
}



inline jule::Str _1ec7bdeea_get_derive_fn_decl_clone(jule::Ptr<_1eb29bdd6_Struct>& _730_s) {
	jule::Str _813_obj = _1ec7e92ab_gen_struct_kind(_730_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _1ec7bdeea_get_derive_fn_def_clone(jule::Ptr<_1eb29bdd6_Struct>& _1329_s) {
	jule::Str _1413_obj = _1ec7e92ab_gen_struct_kind(_1329_s);
	_1413_obj+=jule::Str(" ", 1) + _1413_obj;
	_1413_obj+=jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _1ec7be58e_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _1ec7be58e_as_jt(jule::Str _2814_id) {
	if ((97LL <= _2814_id[0LL]) && (_2814_id[0LL] <= 122LL)) {
		_2814_id[0LL]-=32LLU;
	}
	return jule::Str("jule::", 6) + _2814_id;
}



inline jule::Str _1ec7be58e_get_addr_as_ident(jule::Uintptr _3622_addr) {
	return jule::Str("_", 1) + _1e9e077ac_fmt_uint(static_cast<jule::U64>(_3622_addr),15LL);
}



inline jule::Str _1ec7be58e_as_out_ident(jule::Str _4517_ident,jule::Uintptr _4529_addr) {
	if (_4529_addr != 0LL) {
		jule::Str _4717_obj = _1ec7be58e_get_addr_as_ident(_4529_addr);
		_4717_obj+=jule::Str("_", 1);
		_4717_obj+=_4517_ident;
		return _4717_obj;
	}
	return _1ec7be58e_as_ident(_4517_ident);
}



inline jule::Str _1ec7be58e_as_local_ident(jule::Int _6119_row,jule::Int _6129_col,jule::Str _6139_ident) {
	jule::Str _6213_obj = _1e9e077ac_itoa(_6119_row);
	_6213_obj+=_1e9e077ac_itoa(_6129_col);
	_6213_obj+=jule::Str("_", 1);
	_6213_obj+=_6139_ident;
	return _1ec7be58e_as_ident(_6213_obj);
}



inline jule::Str _1ec7be58e_fn_out_ident(jule::Ptr<_1eb627195_Fn>& _7018_f) {
	{
		if (_7018_f->_field_cpp_linked) {
			_case_begin_4810037520:;
			{
				return _7018_f->_field_ident;
			}
		}
		else if (_7018_f->_field_ident == jule::Str("main", 4)) {
			_case_begin_4810036000:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if (_7018_f->_method_is_method()) {
			_case_begin_4810036368:;
			{
				if (_7018_f->_field_statically) {
					return jule::Str("_static_method_", 15) + _7018_f->_field_ident;
				}
				return jule::Str("_method_", 8) + _7018_f->_field_ident;
			}
		}
		else {
			_case_begin_4810034624:;
			{
				return _1ec7be58e_as_out_ident(_7018_f->_field_ident,static_cast<jule::Uintptr>(_7018_f->_field_token._field_file->_method_addr()));
			}
		}
		_match_end_4810034448:;
	}
}



inline jule::Str _1ec7be58e_fn_ins_out_ident(jule::Ptr<_1eb627195_FnIns>& _9026_f) {
	if (_9026_f->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _9026_f->_field_decl->_field_ident;
	}
	if (_9026_f->_field_decl->_field_cpp_linked || (_9026_f->_field_generics.len() == 0LL)) {
		return _1ec7be58e_fn_out_ident(_9026_f->_field_decl);
	}
	{
		auto &expr = _9026_f->_field_decl->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810042432:;
		if (it != expr.end()) {
			jule::Int _1ec7be58e_i = it - expr.begin();
			jule::Ptr<_1eb627195_FnIns> _1ec7be58e_ins = *it;
			{
				if (_1ec7be58e_ins->_method_same(_9026_f)) {
					jule::Str _10121_obj = _1ec7be58e_fn_out_ident(_9026_f->_field_decl);
					_10121_obj+=jule::Str("_", 1);
					_10121_obj+=_1e9e077ac_itoa(_1ec7be58e_i);
					return _10121_obj;
				}
			}
			_iter_next_4810042432:;
			++it;
			_1ec7be58e_i++;
			goto _iter_begin_4810042432;
		}
		_iter_end_4810042432:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1ec7be58e_trait_out_ident(jule::Ptr<_1eb7c68e9_Trait> _11220_t) {
	if (_11220_t->_method_is_builtin()) {
		return jule::Str("jule::", 6) + _11220_t->_field_ident;
	}
	return _1ec7be58e_as_out_ident(_11220_t->_field_ident,static_cast<jule::Uintptr>(_11220_t->_field_token._field_file->_method_addr()));
}



inline jule::Str _1ec7be58e_param_out_ident(jule::Ptr<_1eb627195_Param>& _12021_p) {
	if (_1ea7465e5_is_anon_ident(_12021_p->_field_ident) || _1ea7465e5_is_ignore_ident(_12021_p->_field_ident)) {
		return jule::Str();
	}
	return _1ec7be58e_as_local_ident(_12021_p->_field_token._field_row,_12021_p->_field_token._field_column,_12021_p->_field_ident);
}



inline jule::Str _1ec7be58e_struct_out_ident(jule::Ptr<_1eb29bdd6_Struct>& _12822_s) {
	if (_12822_s->_field_cpp_linked) {
		if (_1ec7e92ab_has_directive(_12822_s->_field_directives,jule::Str("typedef", 7))) {
			return _12822_s->_field_ident;
		}
		return jule::Str("struct ", 7) + _12822_s->_field_ident;
	}
	return _1ec7be58e_as_out_ident(_12822_s->_field_ident,static_cast<jule::Uintptr>(_12822_s->_field_token._field_file->_method_addr()));
}



inline jule::Str _1ec7be58e_struct_ins_out_ident(jule::Ptr<_1eb29bdd6_StructIns>& _13930_s) {
	if (_13930_s->_field_decl->_field_cpp_linked || (_13930_s->_field_generics.len() == 0LL)) {
		return _1ec7be58e_struct_out_ident(_13930_s->_field_decl);
	}
	{
		auto &expr = _13930_s->_field_decl->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810060144:;
		if (it != expr.end()) {
			jule::Int _1ec7be58e_i = it - expr.begin();
			jule::Ptr<_1eb29bdd6_StructIns> _1ec7be58e_ins = *it;
			{
				if (_1ec7be58e_ins->_method_same(_13930_s)) {
					jule::Str _14621_obj = _1ec7be58e_struct_out_ident(_13930_s->_field_decl);
					_14621_obj+=jule::Str("_", 1);
					_14621_obj+=_1e9e077ac_itoa(_1ec7be58e_i);
					return _14621_obj;
				}
			}
			_iter_next_4810060144:;
			++it;
			_1ec7be58e_i++;
			goto _iter_begin_4810060144;
		}
		_iter_end_4810060144:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1ec7be58e_field_out_ident(jule::Ptr<_1eb29bdd6_Field>& _15721_f) {
	if (_15721_f->_field_owner->_field_cpp_linked) {
		return _15721_f->_field_ident;
	}
	return jule::Str("_field_", 7) + _15721_f->_field_ident;
}



inline jule::Str _1ec7be58e_var_out_ident(jule::Ptr<_1eba533d4_Var> _16522_v) {
	{
		if (_16522_v->_field_cpp_linked) {
			_case_begin_4810069984:;
			{
				return _16522_v->_field_ident;
			}
		}
		else if (_16522_v->_field_ident == jule::Str("error", 5)) {
			_case_begin_4810068960:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if (_16522_v->_field_ident == jule::Str("self", 4)) {
			_case_begin_4810069200:;
			{
				if (_16522_v->_field_kind->_field_kind->_method_sptr() != nullptr) {
					return jule::Str("this->self", 10);
				}
				return jule::Str("(*this)", 7);
			}
		}
		else if (_16522_v->_field_scope != nullptr) {
			_case_begin_4810068592:;
			{
				return _1ec7be58e_as_local_ident(_16522_v->_field_token._field_row,_16522_v->_field_token._field_column,_16522_v->_field_ident);
			}
		}
		else {
			_case_begin_4810066048:;
			{
				return _1ec7be58e_as_out_ident(_16522_v->_field_ident,static_cast<jule::Uintptr>(_16522_v->_field_token._field_file->_method_addr()));
			}
		}
		_match_end_4810066912:;
	}
}



inline jule::Str _1ec7be58e_iter_begin_label_ident(jule::Uintptr _18827_it) {
	return jule::Str("_iter_begin_", 12) + _1e9e077ac_itoa(static_cast<jule::Int>(_18827_it));
}



inline jule::Str _1ec7be58e_iter_end_label_ident(jule::Uintptr _19325_it) {
	return jule::Str("_iter_end_", 10) + _1e9e077ac_itoa(static_cast<jule::Int>(_19325_it));
}



inline jule::Str _1ec7be58e_iter_next_label_ident(jule::Uintptr _19826_it) {
	return jule::Str("_iter_next_", 11) + _1e9e077ac_itoa(static_cast<jule::Int>(_19826_it));
}



inline jule::Str _1ec7be58e_label_ident(jule::Str _20316_ident) {
	return jule::Str("_julec_label_", 13) + _20316_ident;
}



inline jule::Str _1ec7be58e_match_end_label_ident(jule::Uintptr _20826_m) {
	return jule::Str("_match_end_", 11) + _1e9e077ac_itoa(static_cast<jule::Int>(_20826_m));
}



inline jule::Str _1ec7be58e_case_begin_label_ident(jule::Uintptr _21327_c) {
	return jule::Str("_case_begin_", 12) + _1e9e077ac_itoa(static_cast<jule::Int>(_21327_c));
}



inline jule::Ptr<_1ea6ee955_Directive> _1ec7e92ab_find_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>& _2524_directives,jule::Str _2555_tag) {
	{
		auto &expr = _2524_directives;
		auto it = expr.begin();
		_iter_begin_4810084064:;
		if (it != expr.end()) {
			jule::Ptr<_1ea6ee955_Directive> _1ec7e92ab_dr = *it;
			{
				if (_1ec7e92ab_dr->_field_tag._field_kind == _2555_tag) {
					return _1ec7e92ab_dr;
				}
			}
			_iter_next_4810084064:;
			++it;
			goto _iter_begin_4810084064;
		}
		_iter_end_4810084064:;
	}
	return nullptr;
}



inline jule::Bool _1ec7e92ab_has_directive(jule::Slice<jule::Ptr<_1ea6ee955_Directive>>& _3519_directives,jule::Str _3550_tag) {
	return _1ec7e92ab_find_directive(_3519_directives,_3550_tag) != nullptr;
}



inline jule::Str _1ec7e92ab_gen_prim_kind(jule::Ptr<_1ec1c55b1_Prim> _4018_p) {
	return _1ec7be58e_as_jt(_4018_p->_method_to_str());
}



inline jule::Str _1ec7e92ab_gen_tuple_kind(jule::Ptr<_1ec1c55b1_Tuple> _4523_t) {
	jule::Str _4613_obj = jule::Str("std::tuple<", 11);
	{
		auto &expr = _4523_t->_field_types;
		auto it = expr.begin();
		_iter_begin_4810090912:;
		if (it != expr.end()) {
			jule::Ptr<_1ec1c55b1_TypeKind> _1ec7e92ab_tk = *it;
			{
				_4613_obj+=_1ec7e92ab_gen_type_kind(_1ec7e92ab_tk);
				_4613_obj+=jule::Str(",", 1);
			}
			_iter_next_4810090912:;
			++it;
			goto _iter_begin_4810090912;
		}
		_iter_end_4810090912:;
	}
	_4613_obj=_4613_obj.slice(0LL,_4613_obj.len() - 1LL);
	_4613_obj+=jule::Str(">", 1);
	return _4613_obj;
}



inline jule::Str _1ec7e92ab_as_sptr_kind(jule::Str _5717_elem) {
	jule::Str _5813_obj = _1ec7be58e_as_jt(jule::Str("ptr", 3));
	_5813_obj+=jule::Str("<", 1);
	_5813_obj+=_5717_elem;
	_5813_obj+=jule::Str(">", 1);
	return _5813_obj;
}



inline jule::Str _1ec7e92ab_gen_sptr_kind(jule::Ptr<_1ec1c55b1_Sptr> _6622_sptr) {
	return _1ec7e92ab_as_sptr_kind(_1ec7e92ab_gen_type_kind(_6622_sptr->_field_elem));
}



inline jule::Str _1ec7e92ab_gen_ptr_kind(jule::Ptr<_1ec1c55b1_Ptr> _7121_p) {
	
	if (_7121_p->_method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _7713_elem = _1ec7e92ab_gen_type_kind(_7121_p->_field_elem);
	_7713_elem+=jule::Str("*", 1);
	return _7713_elem;
}



inline jule::Str _1ec7e92ab_gen_enum_kind(jule::Ptr<_1eb7c7e7d_Enum> _8322_e) {
	return _1ec7e92ab_gen_type_kind(_8322_e->_field_kind->_field_kind);
}



inline jule::Str _1ec7e92ab_as_slice_kind(jule::Ptr<_1ec1c55b1_TypeKind> _8722_elem) {
	jule::Str _8813_obj = _1ec7be58e_as_jt(jule::Str("slice", 5));
	_8813_obj+=jule::Str("<", 1);
	_8813_obj+=_1ec7e92ab_gen_type_kind(_8722_elem);
	_8813_obj+=jule::Str(">", 1);
	return _8813_obj;
}



inline jule::Str _1ec7e92ab_gen_slice_kind(jule::Ptr<_1ec1c55b1_Slc> _9623_s) {
	return _1ec7e92ab_as_slice_kind(_9623_s->_field_elem);
}



inline jule::Str _1ec7e92ab_gen_map_kind(jule::Ptr<_1ec1c55b1_Map> _10121_m) {
	jule::Str _10213_obj = _1ec7be58e_as_jt(jule::Str("map", 3));
	_10213_obj+=jule::Str("<", 1);
	_10213_obj+=_1ec7e92ab_gen_type_kind(_10121_m->_field_key);
	_10213_obj+=jule::Str(",", 1);
	_10213_obj+=_1ec7e92ab_gen_type_kind(_10121_m->_field_val);
	_10213_obj+=jule::Str(">", 1);
	return _10213_obj;
}



inline jule::Str _1ec7e92ab_gen_trait_kind_from_ident(jule::Str _11130_ident) {
	jule::Str _11213_obj = _1ec7be58e_as_jt(jule::Str("trait", 5));
	_11213_obj+=jule::Str("<", 1);
	_11213_obj+=_11130_ident;
	_11213_obj+=jule::Str(">", 1);
	return _11213_obj;
}



inline jule::Str _1ec7e92ab_gen_trait_kind(jule::Ptr<_1eb7c68e9_Trait> _12019_t) {
	jule::Str _1219_ident = _1ec7be58e_trait_out_ident(_12019_t);
	return _1ec7e92ab_gen_trait_kind_from_ident(_1219_ident);
}



inline jule::Str _1ec7e92ab_gen_struct_kind(jule::Ptr<_1eb29bdd6_Struct> _12620_s) {
	jule::Str _12713_rep = jule::Str();
	if (_12620_s->_field_cpp_linked && (!(_1ec7e92ab_has_directive(_12620_s->_field_directives,jule::Str("typedef", 7))))) {
		_12713_rep+=jule::Str("struct ", 7);
	}
	_12713_rep+=_1ec7be58e_struct_out_ident(_12620_s);
	return _12713_rep;
}



inline jule::Str _1ec7e92ab_gen_struct_kind_ins(jule::Ptr<_1eb29bdd6_StructIns> _13728_s) {
	if (_13728_s->_field_decl->_field_cpp_linked) {
		jule::Str _13917_ident = _1ec7be58e_struct_ins_out_ident(_13728_s);
		if (_13728_s->_field_generics.len() > 0LL) {
			_13917_ident+=jule::Str("<", 1);
			{
				auto &expr = _13728_s->_field_generics;
				auto it = expr.begin();
				_iter_begin_4810121376:;
				if (it != expr.end()) {
					jule::Ptr<_1ec1c55b1_TypeKind> _1ec7e92ab_g = *it;
					{
						_13917_ident+=_1ec7e92ab_gen_type_kind(_1ec7e92ab_g);
						_13917_ident+=jule::Str(",", 1);
					}
					_iter_next_4810121376:;
					++it;
					goto _iter_begin_4810121376;
				}
				_iter_end_4810121376:;
			}
			_13917_ident=_13917_ident.slice(0LL,_13917_ident.len() - 1LL);
			_13917_ident+=jule::Str(">", 1);
		}
		jule::Ptr<_1ea6ee955_Directive> _14913_d = _1ec7e92ab_find_directive(_13728_s->_field_decl->_field_directives,jule::Str("namespace", 9));
		if (_14913_d != nullptr) {
			_13917_ident=(_1eb8b628b_concat_all_parts(_14913_d->_field_args) + jule::Str("::", 2)) + _13917_ident;
		}
		return _13917_ident;
	}
	return _1ec7be58e_struct_ins_out_ident(_13728_s);
}



inline jule::Str _1ec7e92ab_gen_array_kind(jule::Ptr<_1ec1c55b1_Arr> _15923_a) {
	jule::Str _16013_obj = _1ec7be58e_as_jt(jule::Str("array", 5));
	_16013_obj+=jule::Str("<", 1);
	_16013_obj+=_1ec7e92ab_gen_type_kind(_15923_a->_field_elem);
	_16013_obj+=jule::Str(",", 1);
	_16013_obj+=_1e9e077ac_itoa(_15923_a->_field_n);
	_16013_obj+=jule::Str(">", 1);
	return _16013_obj;
}



inline jule::Str _1ec7e92ab_gen_fn_anon_decl(jule::Ptr<_1eb627195_FnIns> _16925_f) {
	jule::Str _17013_decl = _1ec821b85_gen_fn_ins_result(_16925_f);
	_17013_decl+=jule::Str("(", 1);
	if (_16925_f->_field_params.len() > 0LL) {
		{
			auto &expr = _16925_f->_field_params;
			auto it = expr.begin();
			_iter_begin_4810132400:;
			if (it != expr.end()) {
				jule::Ptr<_1eb627195_ParamIns> _1ec7e92ab_param = *it;
				{
					if (_1ec7e92ab_param->_field_decl->_method_is_self()) {
						goto _iter_next_4810132400;
					}
					_17013_decl+=_1ec821b85_gen_param_ins_prototype(_1ec7e92ab_param);
					_17013_decl+=jule::Str(",", 1);
				}
				_iter_next_4810132400:;
				++it;
				goto _iter_begin_4810132400;
			}
			_iter_end_4810132400:;
		}
		_17013_decl=_17013_decl.slice(0LL,_17013_decl.len() - 1LL);
	} else {
		_17013_decl+=jule::Str("void", 4);
	}
	_17013_decl+=jule::Str(")", 1);
	return _17013_decl;
}



inline jule::Str _1ec7e92ab_gen_fn_kind(jule::Ptr<_1eb627195_FnIns> _19220_f) {
	jule::Str _19313_obj = _1ec7be58e_as_jt(jule::Str("fn", 2));
	_19313_obj+=jule::Str("<", 1);
	_19313_obj+=_1ec7e92ab_gen_fn_anon_decl(_19220_f);
	_19313_obj+=jule::Str(">", 1);
	return _19313_obj;
}



inline jule::Str _1ec7e92ab_gen_type_kind(jule::Ptr<_1ec1c55b1_TypeKind> _20122_k) {
	{
		if (_20122_k->_method_cpp_linked()) {
			_case_begin_4810141264:;
			{
				return _20122_k->_field_cpp_ident;
			}
		}
		else if (_20122_k->_method_prim() != nullptr) {
			_case_begin_4810141360:;
			{
				return _1ec7e92ab_gen_prim_kind(_20122_k->_method_prim());
			}
		}
		else if (_20122_k->_method_tup() != nullptr) {
			_case_begin_4810140848:;
			{
				return _1ec7e92ab_gen_tuple_kind(_20122_k->_method_tup());
			}
		}
		else if (_20122_k->_method_sptr() != nullptr) {
			_case_begin_4810140944:;
			{
				return _1ec7e92ab_gen_sptr_kind(_20122_k->_method_sptr());
			}
		}
		else if (_20122_k->_method_ptr() != nullptr) {
			_case_begin_4810140480:;
			{
				return _1ec7e92ab_gen_ptr_kind(_20122_k->_method_ptr());
			}
		}
		else if (_20122_k->_method_enm() != nullptr) {
			_case_begin_4810140576:;
			{
				return _1ec7e92ab_gen_enum_kind(_20122_k->_method_enm());
			}
		}
		else if (_20122_k->_method_slc() != nullptr) {
			_case_begin_4810140672:;
			{
				return _1ec7e92ab_gen_slice_kind(_20122_k->_method_slc());
			}
		}
		else if (_20122_k->_method_map() != nullptr) {
			_case_begin_4810139808:;
			{
				return _1ec7e92ab_gen_map_kind(_20122_k->_method_map());
			}
		}
		else if (_20122_k->_method_trt() != nullptr) {
			_case_begin_4810139904:;
			{
				return _1ec7e92ab_gen_trait_kind(_20122_k->_method_trt());
			}
		}
		else if (_20122_k->_method_strct() != nullptr) {
			_case_begin_4810140000:;
			{
				return _1ec7e92ab_gen_struct_kind_ins(_20122_k->_method_strct());
			}
		}
		else if (_20122_k->_method_arr() != nullptr) {
			_case_begin_4810140096:;
			{
				return _1ec7e92ab_gen_array_kind(_20122_k->_method_arr());
			}
		}
		else if (_20122_k->_method_fnc() != nullptr) {
			_case_begin_4810141472:;
			{
				return _1ec7e92ab_gen_fn_kind(_20122_k->_method_fnc());
			}
		}
		else {
			_case_begin_4810139472:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_4810139296:;
	}
}



inline void _1ec821b85_add_indent(void) {
	_1ec821b85_INDENT.push(9LLU);
}



inline void _1ec821b85_done_indent(void) {
	_1ec821b85_INDENT=_1ec821b85_INDENT.slice(0LL,_1ec821b85_INDENT.len() - 1LL);
}



inline jule::Str _1ec821b85_indent(void) {
	return static_cast<jule::Str>(_1ec821b85_INDENT);
}



inline jule::Bool _1ec821b85_is_cpp_header_file(jule::Str _6823_path) {
	jule::Int _699_offset = _6823_path.rfind(jule::Str(".", 1));
	if (_699_offset == -1LL) {
		return false;
	}
	return _1e8e27beb_is_valid_header_ext(_6823_path.slice(_699_offset));
}



inline jule::Str _1ec821b85_gen_links(jule::Ptr<_1ea66c0ed_IR>& _7719_ir) {
	jule::Str _7813_obj = jule::Str();
	{
		auto &expr = _7719_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810168864:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_pkg = *it;
			{
				{
					if ((!(_1ec821b85_pkg->_field_cpp_linked))) {
						_case_begin_4810170544:;
						{
							goto _iter_next_4810168864;
						}
					}
					else if (_1e8e27beb_is_std_header_path(_1ec821b85_pkg->_field_path)) {
						_case_begin_4810170656:;
						{
							_7813_obj+=jule::Str("#include ", 9);
							_7813_obj+=_1ec821b85_pkg->_field_path;
							_7813_obj+=jule::Str("\n", 1);
						}
					}
					_match_end_4810170320:;
				}
			}
			_iter_next_4810168864:;
			++it;
			goto _iter_begin_4810168864;
		}
		_iter_end_4810168864:;
	}
	{
		auto &expr = _7719_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810174128:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_pkg = *it;
			{
				{
					if ((!(_1ec821b85_pkg->_field_cpp_linked))) {
						_case_begin_4810174288:;
						{
							goto _iter_next_4810174128;
						}
					}
					else if (_1ec821b85_is_cpp_header_file(_1ec821b85_pkg->_field_path)) {
						_case_begin_4810174384:;
						{
							_7813_obj+=jule::Str("#include \"", 10);
							_7813_obj+=_1ec821b85_pkg->_field_path;
							_7813_obj+=jule::Str("\"\n", 2);
						}
					}
					_match_end_4810169840:;
				}
			}
			_iter_next_4810174128:;
			++it;
			goto _iter_begin_4810174128;
		}
		_iter_end_4810174128:;
	}
	return _7813_obj;
}



inline jule::Str _1ec821b85_gen_fn_result(jule::Ptr<_1eb627195_Fn>& _10623_f) {
	if (_10623_f->_method_is_void()) {
		if (_10623_f->_field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if (_10623_f->_field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _1ec7e92ab_gen_type_kind(_10623_f->_field_result->_field_kind->_field_kind)) + jule::Str(">", 1);
	}
	return _1ec7e92ab_gen_type_kind(_10623_f->_field_result->_field_kind->_field_kind);
}



inline jule::Str _1ec821b85_gen_fn_ins_result(jule::Ptr<_1eb627195_FnIns>& _12027_f) {
	if (_12027_f->_field_decl->_method_is_void()) {
		if (_12027_f->_field_decl->_field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if (_12027_f->_field_decl->_field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _1ec7e92ab_gen_type_kind(_12027_f->_field_result)) + jule::Str(">", 1);
	}
	return _1ec7e92ab_gen_type_kind(_12027_f->_field_result);
}



inline jule::Str _1ec821b85_gen_param_prototype(jule::Ptr<_1eb627195_Param>& _13429_p) {
	jule::Str _13513_obj = jule::Str();
	if (_13429_p->_field_variadic) {
		_13513_obj+=_1ec7be58e_as_jt(jule::Str("slice", 5));
		_13513_obj+=jule::Str("<", 1);
		_13513_obj+=_1ec7e92ab_gen_type_kind(_13429_p->_field_kind->_field_kind);
		_13513_obj+=jule::Str(">", 1);
	} else {
		_13513_obj+=_1ec7e92ab_gen_type_kind(_13429_p->_field_kind->_field_kind);
	}
	return _13513_obj;
}



inline jule::Str _1ec821b85_gen_param_ins(jule::Ptr<_1eb627195_ParamIns>& _14823_p) {
	jule::Str _14913_obj = _1ec821b85_gen_param_ins_prototype(_14823_p);
	_14913_obj+=jule::Str(" ", 1);
	_14913_obj+=_1ec7be58e_param_out_ident(_14823_p->_field_decl);
	return _14913_obj;
}



inline jule::Str _1ec821b85_gen_param_ins_prototype(jule::Ptr<_1eb627195_ParamIns>& _15633_p) {
	jule::Str _15713_obj = jule::Str();
	if (_15633_p->_field_decl->_field_variadic) {
		_15713_obj+=_1ec7be58e_as_jt(jule::Str("slice", 5));
		_15713_obj+=jule::Str("<", 1);
		_15713_obj+=_1ec7e92ab_gen_type_kind(_15633_p->_field_kind);
		_15713_obj+=jule::Str(">", 1);
	} else {
		_15713_obj+=_1ec7e92ab_gen_type_kind(_15633_p->_field_kind);
	}
	if (_15633_p->_field_decl->_field_reference) {
		_15713_obj+=jule::Str("&", 1);
	}
	return _15713_obj;
}



inline jule::Str _1ec821b85_gen_param(jule::Ptr<_1eb627195_Param>& _17519_p) {
	jule::Str _17613_obj = _1ec821b85_gen_param_prototype(_17519_p);
	if (((_17519_p->_field_ident != jule::Str()) && (!(_1ea7465e5_is_ignore_ident(_17519_p->_field_ident)))) && (!(_1ea7465e5_is_anon_ident(_17519_p->_field_ident)))) {
		_17613_obj+=jule::Str(" ", 1);
		_17613_obj+=_1ec7be58e_param_out_ident(_17519_p);
	}
	return _17613_obj;
}



inline jule::Str _1ec821b85_gen_params(jule::Slice<jule::Ptr<_1eb627195_Param>>& _18520_params) {
	{
		if (_18520_params.len() == 0LL) {
			_case_begin_4810202528:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_18520_params.len() == 1LL) && _18520_params[0LL]->_method_is_self()) {
			_case_begin_4810202640:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_4810202304:;
	}
	jule::Str _19413_obj = jule::Str("(", 1);
	{
		auto &expr = _18520_params;
		auto it = expr.begin();
		_iter_begin_4810205504:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Param> _1ec821b85_p = *it;
			{
				if ((!(_1ec821b85_p->_method_is_self()))) {
					_19413_obj+=_1ec821b85_gen_param(_1ec821b85_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4810205504:;
			++it;
			goto _iter_begin_4810205504;
		}
		_iter_end_4810205504:;
	}
	_19413_obj=_19413_obj.slice(0LL,_19413_obj.len() - 1LL);
	return _19413_obj + jule::Str(")", 1);
}



inline jule::Str _1ec821b85_gen_params_ins(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>& _20624_params) {
	{
		if (_20624_params.len() == 0LL) {
			_case_begin_4810210672:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_20624_params.len() == 1LL) && _20624_params[0LL]->_field_decl->_method_is_self()) {
			_case_begin_4810210768:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_4810208160:;
	}
	jule::Str _21513_obj = jule::Str("(", 1);
	{
		auto &expr = _20624_params;
		auto it = expr.begin();
		_iter_begin_4810213680:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> _1ec821b85_p = *it;
			{
				if ((!(_1ec821b85_p->_field_decl->_method_is_self()))) {
					_21513_obj+=_1ec821b85_gen_param_ins(_1ec821b85_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4810213680:;
			++it;
			goto _iter_begin_4810213680;
		}
		_iter_end_4810213680:;
	}
	_21513_obj=_21513_obj.slice(0LL,_21513_obj.len() - 1LL);
	return _21513_obj + jule::Str(")", 1);
}



inline jule::Str _1ec821b85_gen_params_prototypes(jule::Slice<jule::Ptr<_1eb627195_ParamIns>>& _22831_params) {
	{
		if (_22831_params.len() == 0LL) {
			_case_begin_4810218560:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_22831_params.len() == 1LL) && _22831_params[0LL]->_field_decl->_method_is_self()) {
			_case_begin_4810219136:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_4810216544:;
	}
	jule::Str _23713_obj = jule::Str("(", 1);
	{
		auto &expr = _22831_params;
		auto it = expr.begin();
		_iter_begin_4810222288:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_ParamIns> _1ec821b85_p = *it;
			{
				if ((!(_1ec821b85_p->_field_decl->_method_is_self()))) {
					_23713_obj+=_1ec821b85_gen_param_ins_prototype(_1ec821b85_p);
					_23713_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_4810222288:;
			++it;
			goto _iter_begin_4810222288;
		}
		_iter_end_4810222288:;
	}
	_23713_obj=_23713_obj.slice(0LL,_23713_obj.len() - 1LL);
	return _23713_obj + jule::Str(")", 1);
}



inline jule::Str _1ec821b85_gen_trait(jule::Ptr<_1eb7c68e9_Trait>& _25119_t) {
	
	jule::Str _2539_outid = _1ec7be58e_trait_out_ident(_25119_t);
	jule::Str _25513_obj = jule::Str("struct ", 7);
	_25513_obj+=_2539_outid;
	_25513_obj+=jule::Str(" {\n", 3);
	_25513_obj+=jule::Str("\t", 1);
	_25513_obj+=jule::Str("virtual ~", 9);
	_25513_obj+=_2539_outid;
	_25513_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto &expr = _25119_t->_field_methods;
		auto it = expr.begin();
		_iter_begin_4810230928:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1ec821b85_f = *it;
			{
				_25513_obj+=jule::Str("\t", 1);
				_25513_obj+=jule::Str("virtual ", 8);
				_25513_obj+=_1ec821b85_gen_fn_result(_1ec821b85_f);
				_25513_obj+=jule::Str(" _method_", 9);
				_25513_obj+=_1ec821b85_f->_field_ident;
				_25513_obj+=_1ec821b85_gen_params(_1ec821b85_f->_field_params);
				_25513_obj+=jule::Str(" {", 2);
				if ((!(_1ec821b85_f->_method_is_void()))) {
					_25513_obj+=jule::Str(" return {}; ", 12);
				}
				_25513_obj+=jule::Str("}\n", 2);
			}
			_iter_next_4810230928:;
			++it;
			goto _iter_begin_4810230928;
		}
		_iter_end_4810230928:;
	}
	_25513_obj+=jule::Str("};", 2);
	return _25513_obj;
}



inline jule::Str _1ec821b85_gen_traits_tbl(jule::Ptr<_1ebcb6081_SymbolTable>& _28024_tbl) {
	jule::Str _28113_obj = jule::Str();
	{
		auto &expr = _28024_tbl->_field_traits;
		auto it = expr.begin();
		_iter_begin_4810237568:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> _1ec821b85_t = *it;
			{
				_28113_obj+=_1ec821b85_gen_trait(_1ec821b85_t);
				_28113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4810237568:;
			++it;
			goto _iter_begin_4810237568;
		}
		_iter_end_4810237568:;
	}
	return _28113_obj;
}



inline jule::Str _1ec821b85_gen_traits_pkg(jule::Ptr<_1eb7d8048_Package>& _29024_pkg) {
	jule::Str _29113_obj = jule::Str();
	{
		auto &expr = _29024_pkg->_field_files;
		auto it = expr.begin();
		_iter_begin_4810240880:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ec821b85_tbl = *it;
			{
				_29113_obj+=_1ec821b85_gen_traits_tbl(_1ec821b85_tbl);
			}
			_iter_next_4810240880:;
			++it;
			goto _iter_begin_4810240880;
		}
		_iter_end_4810240880:;
	}
	return _29113_obj;
}



inline jule::Str _1ec821b85_gen_traits(jule::Ptr<_1ea66c0ed_IR>& _29920_ir) {
	jule::Str _30013_obj = jule::Str();
	{
		auto &expr = _29920_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810244000:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_u = *it;
			{
				if ((!(_1ec821b85_u->_field_cpp_linked))) {
					_30013_obj+=_1ec821b85_gen_traits_pkg(_1ec821b85_u->_field_package);
				}
			}
			_iter_next_4810244000:;
			++it;
			goto _iter_begin_4810244000;
		}
		_iter_end_4810244000:;
	}
	_30013_obj+=_1ec821b85_gen_traits_pkg(_29920_ir->_field_main);
	return _30013_obj;
}



inline jule::Str _1ec821b85_gen_trait_prototype(jule::Ptr<_1eb7c68e9_Trait>& _31125_t) {
	jule::Str _31213_obj = jule::Str("struct ", 7);
	_31213_obj+=_1ec7be58e_trait_out_ident(_31125_t);
	_31213_obj+=jule::Str(";", 1);
	return _31213_obj;
}



inline jule::Str _1ec821b85_gen_trait_prototypes(jule::Ptr<_1eb7d8048_Package>& _31930_p) {
	jule::Str _32013_obj = jule::Str();
	{
		auto &expr = _31930_p->_field_files;
		auto it = expr.begin();
		_iter_begin_4810250544:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ec821b85_f = *it;
			{
				{
					auto &expr = _1ec821b85_f->_field_traits;
					auto it = expr.begin();
					_iter_begin_4810252144:;
					if (it != expr.end()) {
						jule::Ptr<_1eb7c68e9_Trait> &_1ec821b85_t = *it;
						{
							if (_1ec821b85_t->_field_token._field_id != 0LLU) {
								_32013_obj+=_1ec821b85_gen_trait_prototype(_1ec821b85_t);
								_32013_obj+=jule::Str("\n", 1);
							}
						}
						_iter_next_4810252144:;
						++it;
						goto _iter_begin_4810252144;
					}
					_iter_end_4810252144:;
				}
			}
			_iter_next_4810250544:;
			++it;
			goto _iter_begin_4810250544;
		}
		_iter_end_4810250544:;
	}
	return _32013_obj;
}



inline jule::Str _1ec821b85_gen_struct_plain_prototype(jule::Ptr<_1eb29bdd6_Struct>& _33336_s) {
	jule::Str _33413_obj = jule::Str();
	{
		auto &expr = _33336_s->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810251360:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_StructIns> _1ec821b85_ins = *it;
			{
				_33413_obj+=jule::Str("\nstruct ", 8);
				_33413_obj+=_1ec7be58e_struct_ins_out_ident(_1ec821b85_ins);
				_33413_obj+=jule::Str(";", 1);
				_33413_obj+=jule::Str("\n", 1);
			}
			_iter_next_4810251360:;
			++it;
			goto _iter_begin_4810251360;
		}
		_iter_end_4810251360:;
	}
	return _33413_obj;
}



inline jule::Str _1ec821b85_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _34537_structs) {
	jule::Str _34613_obj = jule::Str();
	{
		auto &expr = _34537_structs;
		auto it = expr.begin();
		_iter_begin_4810258912:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1ec821b85_s = *it;
			{
				if ((!(_1ec821b85_s->_field_cpp_linked)) && (_1ec821b85_s->_field_token._field_id != 0LLU)) {
					_34613_obj+=_1ec821b85_gen_struct_plain_prototype(_1ec821b85_s);
					_34613_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_4810258912:;
			++it;
			goto _iter_begin_4810258912;
		}
		_iter_end_4810258912:;
	}
	return _34613_obj;
}



inline jule::Str _1ec821b85_gen_struct_traits(jule::Ptr<_1eb29bdd6_Struct>& _35723_s) {
	if (_35723_s->_field_implements.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _36213_obj = jule::Str(": ", 2);
	{
		auto &expr = _35723_s->_field_implements;
		auto it = expr.begin();
		_iter_begin_4810264304:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7c68e9_Trait> &_1ec821b85_i = *it;
			{
				_36213_obj+=jule::Str("public ", 7);
				_36213_obj+=_1ec7be58e_trait_out_ident(_1ec821b85_i);
				_36213_obj+=jule::Str(",", 1);
			}
			_iter_next_4810264304:;
			++it;
			goto _iter_begin_4810264304;
		}
		_iter_end_4810264304:;
	}
	_36213_obj=_36213_obj.slice(0LL,_36213_obj.len() - 1LL);
	return _36213_obj;
}



inline jule::Str _1ec821b85_gen_field_decl(jule::Ptr<_1eb29bdd6_FieldIns>& _37324_f) {
	jule::Str _37413_obj = _1ec7e92ab_gen_type_kind(_37324_f->_field_kind);
	_37413_obj+=jule::Str(" ", 1);
	_37413_obj+=_1ec7be58e_field_out_ident(_37324_f->_field_decl);
	_37413_obj+=jule::Str(" = ", 3);
	_37413_obj+=_1eb8b628b_get_init_expr(_37324_f->_field_kind);
	_37413_obj+=jule::Str(";", 1);
	return _37413_obj;
}



inline jule::Str _1ec821b85_gen_struct_self_field_type_kind(jule::Ptr<_1eb29bdd6_StructIns>& _38341_s) {
	return _1ec7e92ab_as_sptr_kind(_1ec7e92ab_gen_struct_kind_ins(_38341_s));
}



inline jule::Str _1ec821b85_gen_struct_self_field(jule::Ptr<_1eb29bdd6_StructIns>& _38831_s) {
	jule::Str _38913_obj = _1ec821b85_gen_struct_self_field_type_kind(_38831_s);
	_38913_obj+=jule::Str(" self;", 6);
	return _38913_obj;
}



inline jule::Str _1ec821b85_gen_struct_self_field_init_st(jule::Ptr<_1eb29bdd6_StructIns>& _39439_s) {
	jule::Str _39513_obj = jule::Str("this->self = ", 13);
	_39513_obj+=_1ec821b85_gen_struct_self_field_type_kind(_39439_s);
	_39513_obj+=jule::Str("::make(this, nullptr);", 22);
	return _39513_obj;
}



inline jule::Str _1ec821b85_gen_struct_constructor(jule::Ptr<_1eb29bdd6_StructIns>& _40132_s) {
	jule::Str _40213_obj = _1ec7be58e_struct_ins_out_ident(_40132_s);
	_40213_obj+=jule::Str("(", 1);
	if (_40132_s->_field_fields.len() > 0LL) {
		{
			auto &expr = _40132_s->_field_fields;
			auto it = expr.begin();
			_iter_begin_4810278960:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> _1ec821b85_f = *it;
				{
					_40213_obj+=_1ec7e92ab_gen_type_kind(_1ec821b85_f->_field_kind);
					_40213_obj+=jule::Str(" __param_", 9);
					_40213_obj+=_1ec821b85_f->_field_decl->_field_ident;
					_40213_obj+=jule::Str(", ", 2);
				}
				_iter_next_4810278960:;
				++it;
				goto _iter_begin_4810278960;
			}
			_iter_end_4810278960:;
		}
		_40213_obj=_40213_obj.slice(0LL,_40213_obj.len() - 2LL);
	} else {
		_40213_obj+=jule::Str("void", 4);
	}
	_40213_obj+=jule::Str(")", 1);
	if (_40132_s->_field_fields.len() > 0LL) {
		_40213_obj+=jule::Str(": ", 2);
		{
			auto &expr = _40132_s->_field_fields;
			auto it = expr.begin();
			_iter_begin_4810283568:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> &_1ec821b85_f = *it;
				{
					_40213_obj+=_1ec7be58e_field_out_ident(_1ec821b85_f->_field_decl);
					_40213_obj+=jule::Str("(", 1);
					_40213_obj+=jule::Str("__param_", 8);
					_40213_obj+=_1ec821b85_f->_field_decl->_field_ident;
					_40213_obj+=jule::Str("), ", 3);
				}
				_iter_next_4810283568:;
				++it;
				goto _iter_begin_4810283568;
			}
			_iter_end_4810283568:;
		}
		_40213_obj=_40213_obj.slice(0LL,_40213_obj.len() - 2LL);
	}
	_40213_obj+=jule::Str(" {", 2);
	if (_40132_s->_field_decl->_method_has_ref_accessible()) {
		_40213_obj+=jule::Str("\n", 1);
		_1ec821b85_add_indent();
		_40213_obj+=_1ec821b85_indent();
		_40213_obj+=_1ec821b85_gen_struct_self_field_init_st(_40132_s);
		_40213_obj+=jule::Str("\n", 1);
		_1ec821b85_done_indent();
		_40213_obj+=jule::Str("\n", 1);
		_40213_obj+=_1ec821b85_indent();
	}
	_40213_obj+=jule::Str("}", 1);
	return _40213_obj;
}



inline jule::Str _1ec821b85_gen_struct_destructor(jule::Ptr<_1eb29bdd6_StructIns>& _44531_s) {
	jule::Bool _4469_disposed = _44531_s->_field_decl->_method_is_implements(_1ec2ee113_BUILTIN_TRAIT_DISPOSE);
	jule::Bool _4479_ref_access = _44531_s->_field_decl->_method_has_ref_accessible();
	if ((!(_4479_ref_access)) && (!(_4469_disposed))) {
		return jule::Str();
	}
	jule::Str _45313_obj = jule::Str("~", 1);
	_45313_obj+=_1ec7be58e_struct_ins_out_ident(_44531_s);
	_45313_obj+=jule::Str("(void) { ", 9);
	if (_4469_disposed) {
		jule::Ptr<_1eb627195_Fn> _45813_dispose_method = _44531_s->_method_find_method(jule::Str("dispose", 7),false);
		_45313_obj+=jule::Str("this->", 6);
		_45313_obj+=_1ec7be58e_fn_out_ident(_45813_dispose_method);
		_45313_obj+=jule::Str("(); ", 4);
	}
	if (_4479_ref_access) {
		_45313_obj+=jule::Str("this->self.ref = nullptr; ", 26);
	}
	_45313_obj+=jule::Str("}", 1);
	return _45313_obj;
}



inline jule::Str _1ec821b85_gen_struct_operators(jule::Ptr<_1eb29bdd6_StructIns>& _47230_s) {
	jule::Str _4739_out_ident = _1ec7be58e_struct_ins_out_ident(_47230_s);
	jule::Str _47413_obj = jule::Str();
	_47413_obj+=_1ec821b85_indent();
	if (_1e9c5e35b_OPT_INLINE) {
		_47413_obj+=jule::Str("inline ", 7);
	}
	_47413_obj+=jule::Str("bool operator==(const ", 22);
	_47413_obj+=_4739_out_ident;
	_47413_obj+=jule::Str(" &_Src) const {", 15);
	if (_47230_s->_field_fields.len() > 0LL) {
		_1ec821b85_add_indent();
		_47413_obj+=jule::Str("\n", 1);
		_47413_obj+=_1ec821b85_indent();
		_47413_obj+=jule::Str("return ", 7);
		_1ec821b85_add_indent();
		jule::Int _48917_n = 0LL;
		{
			auto &expr = _47230_s->_field_fields;
			auto it = expr.begin();
			_iter_begin_4810307328:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> _1ec821b85_f = *it;
				{
					jule::Ptr<_1eb29bdd6_StructIns> _49217_strct = _1ec821b85_f->_field_kind->_method_strct();
					if (((_49217_strct != nullptr) && (_49217_strct->_field_decl != nullptr)) && _49217_strct->_field_decl->_field_cpp_linked) {
						goto _iter_next_4810307328;
					}
					(_48917_n)++;
					_47413_obj+=jule::Str("\n", 1);
					_47413_obj+=_1ec821b85_indent();
					_47413_obj+=jule::Str("this->", 6);
					jule::Str _50117_f_ident = _1ec7be58e_field_out_ident(_1ec821b85_f->_field_decl);
					_47413_obj+=_50117_f_ident;
					_47413_obj+=jule::Str(" == _Src.", 9);
					_47413_obj+=_50117_f_ident;
					_47413_obj+=jule::Str(" &&", 3);
				}
				_iter_next_4810307328:;
				++it;
				goto _iter_begin_4810307328;
			}
			_iter_end_4810307328:;
		}
		_1ec821b85_done_indent();
		if (_48917_n > 0LL) {
			_47413_obj=_47413_obj.slice(0LL,_47413_obj.len() - 3LL);
		} else {
			_47413_obj+=jule::Str("true", 4);
		}
		_47413_obj+=jule::Str(";\n", 2);
		_1ec821b85_done_indent();
		_47413_obj+=_1ec821b85_indent();
		_47413_obj+=jule::Str("}", 1);
	} else {
		_47413_obj+=jule::Str(" return true; }", 15);
	}
	_47413_obj+=jule::Str("\n\n", 2);
	_47413_obj+=_1ec821b85_indent();
	if (_1e9c5e35b_OPT_INLINE) {
		_47413_obj+=jule::Str("inline ", 7);
	}
	_47413_obj+=jule::Str("bool operator!=(const ", 22);
	_47413_obj+=_4739_out_ident;
	_47413_obj+=jule::Str(" &_Src) const { return !this->operator==(_Src); }", 49);
	return _47413_obj;
}



inline jule::Str _1ec821b85_gen_struct_derive_defs_prototypes(jule::Ptr<_1eb29bdd6_StructIns>& _53139_s) {
	jule::Str _53213_obj = jule::Str();
	if (_53139_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_53213_obj+=_1ec821b85_indent();
		_53213_obj+=_1ec7bdeea_get_derive_fn_decl_clone(_53139_s->_field_decl);
		_53213_obj+=jule::Str(";\n\n", 3);
	}
	return _53213_obj;
}



inline jule::Str _1ec821b85_gen_struct_ins_prototype(jule::Ptr<_1eb29bdd6_StructIns>& _54334_s) {
	jule::Str _54413_obj = jule::Str("struct ", 7);
	jule::Str _5459_out_ident = _1ec7be58e_struct_ins_out_ident(_54334_s);
	_54413_obj+=_5459_out_ident;
	_54413_obj+=_1ec821b85_gen_struct_traits(_54334_s->_field_decl);
	_54413_obj+=jule::Str(" {\n", 3);
	jule::Bool _5519_ref_access = _54334_s->_field_decl->_method_has_ref_accessible();
	_1ec821b85_add_indent();
	if (_5519_ref_access) {
		_54413_obj+=_1ec821b85_indent();
		_54413_obj+=_1ec821b85_gen_struct_self_field(_54334_s);
		_54413_obj+=jule::Str("\n\n", 2);
	}
	if (_54334_s->_field_fields.len() > 0LL) {
		{
			auto &expr = _54334_s->_field_fields;
			auto it = expr.begin();
			_iter_begin_4810330080:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> _1ec821b85_f = *it;
				{
					_54413_obj+=_1ec821b85_indent();
					_54413_obj+=_1ec821b85_gen_field_decl(_1ec821b85_f);
					_54413_obj+=jule::Str("\n", 1);
				}
				_iter_next_4810330080:;
				++it;
				goto _iter_begin_4810330080;
			}
			_iter_end_4810330080:;
		}
		_54413_obj+=jule::Str("\n\n", 2);
		_54413_obj+=_1ec821b85_indent();
		_54413_obj+=_1ec821b85_gen_struct_constructor(_54334_s);
		_54413_obj+=jule::Str("\n\n", 2);
	}
	_54413_obj+=_1ec821b85_indent();
	_54413_obj+=_1ec821b85_gen_struct_destructor(_54334_s);
	_54413_obj+=jule::Str("\n\n", 2);
	_54413_obj+=_1ec821b85_indent();
	_54413_obj+=_5459_out_ident;
	if (_5519_ref_access) {
		_54413_obj+=jule::Str("(void) { ", 9);
		_54413_obj+=_1ec821b85_gen_struct_self_field_init_st(_54334_s);
		_54413_obj+=jule::Str(" }\n\n", 4);
	} else {
		_54413_obj+=jule::Str("(void) = default;\n\n", 19);
	}
	{
		auto &expr = _54334_s->_field_methods;
		auto it = expr.begin();
		_iter_begin_4810327616:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1ec821b85_f = *it;
			{
				_54413_obj+=_1ec821b85_gen_fn_prototype(_1ec821b85_f,true);
				_54413_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4810327616:;
			++it;
			goto _iter_begin_4810327616;
		}
		_iter_end_4810327616:;
	}
	_54413_obj+=_1ec821b85_gen_struct_derive_defs_prototypes(_54334_s);
	_54413_obj+=_1ec821b85_gen_struct_operators(_54334_s);
	_54413_obj+=jule::Str("\n", 1);
	_1ec821b85_done_indent();
	_54413_obj+=_1ec821b85_indent() + jule::Str("};", 2);
	return _54413_obj;
}



inline jule::Str _1ec821b85_gen_struct_prototype(jule::Ptr<_1eb29bdd6_Struct>& _60230_s) {
	jule::Str _60313_obj = jule::Str();
	{
		auto &expr = _60230_s->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810342224:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_StructIns> _1ec821b85_ins = *it;
			{
				_60313_obj+=_1ec821b85_gen_struct_ins_prototype(_1ec821b85_ins);
				_60313_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4810342224:;
			++it;
			goto _iter_begin_4810342224;
		}
		_iter_end_4810342224:;
	}
	return _60313_obj;
}



inline jule::Str _1ec821b85_gen_struct_prototypes(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _61231_structs) {
	jule::Str _61313_obj = jule::Str();
	{
		auto &expr = _61231_structs;
		auto it = expr.begin();
		_iter_begin_4810345296:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1ec821b85_s = *it;
			{
				if ((!(_1ec821b85_s->_field_cpp_linked)) && (_1ec821b85_s->_field_token._field_id != 0LLU)) {
					_61313_obj+=_1ec821b85_gen_struct_prototype(_1ec821b85_s);
					_61313_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_4810345296:;
			++it;
			goto _iter_begin_4810345296;
		}
		_iter_end_4810345296:;
	}
	return _61313_obj;
}



inline jule::Str _1ec821b85_gen_fn_decl_head(jule::Ptr<_1eb627195_FnIns>& _62326_f,jule::Bool _62337_method) {
	jule::Str _62413_obj = jule::Str();
	if (_62337_method && _62326_f->_field_decl->_field_statically) {
		_62413_obj+=jule::Str("static ", 7);
	}
	if (_1e9c5e35b_OPT_INLINE && (!(_62326_f->_field_decl->_method_is_entry_point()))) {
		_62413_obj+=jule::Str("inline ", 7);
	}
	_62413_obj+=_1ec821b85_gen_fn_ins_result(_62326_f) + jule::Str(" ", 1);
	if ((!(_62337_method)) && (_62326_f->_field_decl->_field_owner != nullptr)) {
		_62413_obj+=_1ec7be58e_struct_ins_out_ident(_62326_f->_field_owner);
		_62413_obj+=jule::Str("::", 2);
	}
	_62413_obj+=_1ec7be58e_fn_ins_out_ident(_62326_f);
	return _62413_obj;
}



inline jule::Str _1ec821b85_gen_fn_prototype(jule::Ptr<_1eb627195_Fn>& _64526_f,jule::Bool _64534_method) {
	jule::Str _64613_obj = jule::Str();
	{
		auto &expr = _64526_f->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810357360:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_FnIns> _1ec821b85_c = *it;
			{
				_64613_obj+=_1ec821b85_indent();
				_64613_obj+=_1ec821b85_gen_fn_decl_head(_1ec821b85_c,_64534_method);
				_64613_obj+=_1ec821b85_gen_params_prototypes(_1ec821b85_c->_field_params);
				_64613_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4810357360:;
			++it;
			goto _iter_begin_4810357360;
		}
		_iter_end_4810357360:;
	}
	return _64613_obj;
}



inline jule::Str _1ec821b85_gen_fn_prototypes(jule::Ptr<_1eb7d8048_Package>& _65727_pkg) {
	jule::Str _65813_obj = jule::Str();
	{
		auto &expr = _65727_pkg->_field_files;
		auto it = expr.begin();
		_iter_begin_4810361968:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ec821b85_file = *it;
			{
				{
					auto &expr = _1ec821b85_file->_field_funcs;
					auto it = expr.begin();
					_iter_begin_4810363568:;
					if (it != expr.end()) {
						jule::Ptr<_1eb627195_Fn> _1ec821b85_f = *it;
						{
							if ((!(_1ec821b85_f->_field_cpp_linked)) && (_1ec821b85_f->_field_token._field_id != 0LLU)) {
								_65813_obj+=_1ec821b85_gen_fn_prototype(_1ec821b85_f,false);
							}
						}
						_iter_next_4810363568:;
						++it;
						goto _iter_begin_4810363568;
					}
					_iter_end_4810363568:;
				}
			}
			_iter_next_4810361968:;
			++it;
			goto _iter_begin_4810361968;
		}
		_iter_end_4810361968:;
	}
	return _65813_obj;
}



inline jule::Str _1ec821b85_gen_prototypes(jule::Ptr<_1ea66c0ed_IR>& _67024_ir) {
	jule::Str _67113_obj = jule::Str();
	{
		auto &expr = _67024_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810362896:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_u = *it;
			{
				if ((!(_1ec821b85_u->_field_cpp_linked))) {
					_67113_obj+=_1ec821b85_gen_trait_prototypes(_1ec821b85_u->_field_package);
				}
			}
			_iter_next_4810362896:;
			++it;
			goto _iter_begin_4810362896;
		}
		_iter_end_4810362896:;
	}
	_67113_obj+=_1ec821b85_gen_trait_prototypes(_67024_ir->_field_main);
	_67113_obj+=_1ec821b85_gen_struct_plain_prototypes(_67024_ir->_field_ordered._field_structs);
	_67113_obj+=_1ec821b85_gen_traits(_67024_ir);
	_67113_obj+=jule::Str("\n", 1);
	_67113_obj+=_1ec821b85_gen_struct_prototypes(_67024_ir->_field_ordered._field_structs);
	{
		auto &expr = _67024_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810368032:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_u = *it;
			{
				if ((!(_1ec821b85_u->_field_cpp_linked))) {
					_67113_obj+=_1ec821b85_gen_fn_prototypes(_1ec821b85_u->_field_package);
				}
			}
			_iter_next_4810368032:;
			++it;
			goto _iter_begin_4810368032;
		}
		_iter_end_4810368032:;
	}
	_67113_obj+=_1ec821b85_gen_fn_prototypes(_67024_ir->_field_main);
	return _67113_obj;
}



inline jule::Str _1ec821b85_gen_var_init_expr(jule::Ptr<_1eba533d4_Var>& _69927_v,jule::Str _69936_init) {
	jule::Str _70013_obj = jule::Str();
	if (_69927_v->_field_statically) {
		_70013_obj+=jule::Str("static ", 7);
	}
	_70013_obj+=_1ec7e92ab_gen_type_kind(_69927_v->_field_kind->_field_kind);
	_70013_obj+=jule::Str(" ", 1);
	if (_69927_v->_field_reference) {
		_70013_obj+=jule::Str("&", 1);
	}
	_70013_obj+=_1ec7be58e_var_out_ident(_69927_v);
	if (_69936_init != jule::Str()) {
		_70013_obj+=jule::Str(" = ", 3);
		_70013_obj+=_69936_init;
	}
	_70013_obj+=jule::Str(";", 1);
	return _70013_obj;
}



inline jule::Str _1ec821b85_gen_var(jule::Ptr<_1eba533d4_Var> _72016_v) {
	if (_1ea7465e5_is_ignore_ident(_72016_v->_field_ident)) {
		return jule::Str();
	}
	if ((_72016_v->_field_value != nullptr) && (_72016_v->_field_value->_field_expr != nullptr)) {
		if (_72016_v->_field_value->_field_data->_field_model != nullptr) {
			return _1ec821b85_gen_var_init_expr(_72016_v,_1eb8b628b_gen_val(_72016_v->_field_value));
		}
		return _1ec821b85_gen_var_init_expr(_72016_v,jule::Str());
	}
	return _1ec821b85_gen_var_init_expr(_72016_v,_1eb8b628b_get_init_expr(_72016_v->_field_kind->_field_kind));
}



inline jule::Str _1ec821b85_gen_globals(jule::Slice<jule::Ptr<_1eba533d4_Var>>& _73521_globals) {
	jule::Str _73613_obj = jule::Str();
	{
		auto &expr = _73521_globals;
		auto it = expr.begin();
		_iter_begin_4810387584:;
		if (it != expr.end()) {
			jule::Ptr<_1eba533d4_Var> _1ec821b85_v = *it;
			{
				if (_1ec821b85_v->_field_token._field_id != 0LLU) {
					_73613_obj+=_1ec821b85_gen_var(_1ec821b85_v);
					_73613_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_4810387584:;
			++it;
			goto _iter_begin_4810387584;
		}
		_iter_end_4810387584:;
	}
	return _73613_obj;
}



inline jule::Str _1ec821b85_gen_fn(jule::Ptr<_1eb627195_Fn>& _74916_f) {
	jule::Str _75013_obj = jule::Str();
	{
		auto &expr = _74916_f->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810391584:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_FnIns> _1ec821b85_ins = *it;
			{
				_75013_obj+=_1ec821b85_gen_fn_decl_head(_1ec821b85_ins,false);
				_75013_obj+=_1ec821b85_gen_params_ins(_1ec821b85_ins->_field_params);
				_75013_obj+=jule::Str(" ", 1);
				_75013_obj+=_1e9c80d3e_gen_fn_scope(_1ec821b85_ins);
				_75013_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4810391584:;
			++it;
			goto _iter_begin_4810391584;
		}
		_iter_end_4810391584:;
	}
	return _75013_obj;
}



inline jule::Str _1ec821b85_gen_pkg_fns(jule::Ptr<_1eb7d8048_Package>& _76221_p) {
	jule::Str _76313_obj = jule::Str();
	{
		auto &expr = _76221_p->_field_files;
		auto it = expr.begin();
		_iter_begin_4810396080:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ec821b85_f = *it;
			{
				{
					auto &expr = _1ec821b85_f->_field_funcs;
					auto it = expr.begin();
					_iter_begin_4810397680:;
					if (it != expr.end()) {
						jule::Ptr<_1eb627195_Fn> _1ec821b85_f = *it;
						{
							if ((!(_1e9ca741a_TEST)) && _1ec7e92ab_has_directive(_1ec821b85_f->_field_directives,jule::Str("test", 4))) {
								goto _iter_next_4810397680;
							}
							if ((!(_1ec821b85_f->_field_cpp_linked)) && (_1ec821b85_f->_field_token._field_id != 0LLU)) {
								_76313_obj+=_1ec821b85_gen_fn(_1ec821b85_f);
								_76313_obj+=jule::Str("\n\n", 2);
							}
						}
						_iter_next_4810397680:;
						++it;
						goto _iter_begin_4810397680;
					}
					_iter_end_4810397680:;
				}
			}
			_iter_next_4810396080:;
			++it;
			goto _iter_begin_4810396080;
		}
		_iter_end_4810396080:;
	}
	return _76313_obj;
}



inline jule::Str _1ec821b85_gen_struct_method_defs(jule::Ptr<_1eb29bdd6_StructIns>& _77932_s) {
	jule::Str _78013_obj = jule::Str();
	{
		auto &expr = _77932_s->_field_methods;
		auto it = expr.begin();
		_iter_begin_4810397008:;
		if (it != expr.end()) {
			jule::Ptr<_1eb627195_Fn> _1ec821b85_f = *it;
			{
				_78013_obj+=_1ec821b85_indent();
				_78013_obj+=_1ec821b85_gen_fn(_1ec821b85_f);
				_78013_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4810397008:;
			++it;
			goto _iter_begin_4810397008;
		}
		_iter_end_4810397008:;
	}
	return _78013_obj;
}



inline jule::Str _1ec821b85_gen_struct_ostream(jule::Ptr<_1eb29bdd6_StructIns>& _79028_s) {
	jule::Str _79113_obj = jule::Str();
	_79113_obj+=_1ec821b85_indent();
	_79113_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_79113_obj+=_1ec7be58e_struct_ins_out_ident(_79028_s);
	_79113_obj+=jule::Str(" &_Src) {\n", 10);
	_1ec821b85_add_indent();
	_79113_obj+=_1ec821b85_indent();
	_79113_obj+=jule::Str("_Stream << \"", 12);
	_79113_obj+=_79028_s->_field_decl->_field_ident;
	_79113_obj+=jule::Str("{\";\n", 4);
	{
		auto &expr = _79028_s->_field_fields;
		auto it = expr.begin();
		_iter_begin_4810408976:;
		if (it != expr.end()) {
			jule::Int _1ec821b85_i = it - expr.begin();
			jule::Ptr<_1eb29bdd6_FieldIns> _1ec821b85_f = *it;
			{
				_79113_obj+=_1ec821b85_indent();
				_79113_obj+=jule::Str("_Stream << \"", 12);
				_79113_obj+=_1ec821b85_f->_field_decl->_field_ident;
				_79113_obj+=jule::Str(":", 1);
				jule::Ptr<_1eb29bdd6_StructIns> _80913_strct = _1ec821b85_f->_field_kind->_method_strct();
				if (((_80913_strct != nullptr) && (_80913_strct->_field_decl != nullptr)) && _80913_strct->_field_decl->_field_cpp_linked) {
					_79113_obj+=jule::Str(" cpp.", 5);
					_79113_obj+=_1ec7be58e_field_out_ident(_1ec821b85_f->_field_decl);
					_79113_obj+=jule::Str("\"", 1);
				} else {
					_79113_obj+=jule::Str("\" << _Src.", 10);
					_79113_obj+=_1ec7be58e_field_out_ident(_1ec821b85_f->_field_decl);
				}
				if ((_1ec821b85_i + 1LL) < _79028_s->_field_fields.len()) {
					_79113_obj+=jule::Str(" << \", \"", 8);
				}
				_79113_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4810408976:;
			++it;
			_1ec821b85_i++;
			goto _iter_begin_4810408976;
		}
		_iter_end_4810408976:;
	}
	_79113_obj+=_1ec821b85_indent();
	_79113_obj+=jule::Str("_Stream << \"}\";\n", 16);
	_79113_obj+=_1ec821b85_indent();
	_79113_obj+=jule::Str("return _Stream;\n", 16);
	_1ec821b85_done_indent();
	_79113_obj+=_1ec821b85_indent();
	_79113_obj+=jule::Str("}", 1);
	return _79113_obj;
}



inline jule::Str _1ec821b85_gen_struct_derive_defs(jule::Ptr<_1eb29bdd6_StructIns>& _83432_s) {
	jule::Str _83513_obj = jule::Str();
	if (_83432_s->_field_decl->_method_is_derives(jule::Str("Clone", 5))) {
		_83513_obj+=_1ec821b85_indent();
		_83513_obj+=_1ec7bdeea_get_derive_fn_def_clone(_83432_s->_field_decl);
		_83513_obj+=jule::Str("{\n", 2);
		_1ec821b85_add_indent();
		_83513_obj+=_1ec821b85_indent();
		_83513_obj+=_1ec7e92ab_gen_struct_kind_ins(_83432_s);
		_83513_obj+=jule::Str(" clone;\n", 8);
		{
			auto &expr = _83432_s->_field_fields;
			auto it = expr.begin();
			_iter_begin_4810423344:;
			if (it != expr.end()) {
				jule::Ptr<_1eb29bdd6_FieldIns> &_1ec821b85_f = *it;
				{
					jule::Str _84617_ident = _1ec7be58e_field_out_ident(_1ec821b85_f->_field_decl);
					_83513_obj+=_1ec821b85_indent();
					_83513_obj+=jule::Str("clone.", 6);
					_83513_obj+=_84617_ident;
					_83513_obj+=jule::Str(" = jule::clone(this->", 21);
					_83513_obj+=_84617_ident;
					_83513_obj+=jule::Str(");\n", 3);
				}
				_iter_next_4810423344:;
				++it;
				goto _iter_begin_4810423344;
			}
			_iter_end_4810423344:;
		}
		_83513_obj+=_1ec821b85_indent();
		_83513_obj+=jule::Str("return clone;\n", 14);
		_1ec821b85_done_indent();
		_83513_obj+=_1ec821b85_indent();
		_83513_obj+=jule::Str("}", 1);
	}
	return _83513_obj;
}



inline jule::Str _1ec821b85_gen_struct_ins(jule::Ptr<_1eb29bdd6_StructIns>& _86624_s) {
	jule::Str _86713_obj = _1ec821b85_gen_struct_method_defs(_86624_s);
	_86713_obj+=jule::Str("\n\n", 2);
	_86713_obj+=_1ec821b85_gen_struct_derive_defs(_86624_s);
	_86713_obj+=jule::Str("\n\n", 2);
	_86713_obj+=_1ec821b85_gen_struct_ostream(_86624_s);
	return _86713_obj;
}



inline jule::Str _1ec821b85_gen_struct(jule::Ptr<_1eb29bdd6_Struct>& _87620_s) {
	jule::Str _87713_obj = jule::Str();
	{
		auto &expr = _87620_s->_field_instances;
		auto it = expr.begin();
		_iter_begin_4810434848:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_StructIns> _1ec821b85_ins = *it;
			{
				_87713_obj+=_1ec821b85_gen_struct_ins(_1ec821b85_ins);
				_87713_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4810434848:;
			++it;
			goto _iter_begin_4810434848;
		}
		_iter_end_4810434848:;
	}
	return _87713_obj;
}



inline jule::Str _1ec821b85_gen_structs(jule::Slice<jule::Ptr<_1eb29bdd6_Struct>>& _88621_structs) {
	jule::Str _88713_obj = jule::Str();
	{
		auto &expr = _88621_structs;
		auto it = expr.begin();
		_iter_begin_4810437888:;
		if (it != expr.end()) {
			jule::Ptr<_1eb29bdd6_Struct> _1ec821b85_s = *it;
			{
				if ((!(_1ec821b85_s->_field_cpp_linked)) && (_1ec821b85_s->_field_token._field_id != 0LLU)) {
					_88713_obj+=_1ec821b85_gen_struct(_1ec821b85_s);
					_88713_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_4810437888:;
			++it;
			goto _iter_begin_4810437888;
		}
		_iter_end_4810437888:;
	}
	return _88713_obj;
}



inline jule::Str _1ec821b85_gen_fns(jule::Ptr<_1ea66c0ed_IR>& _89817_ir) {
	jule::Str _89913_obj = jule::Str();
	{
		auto &expr = _89817_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810442368:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_u = *it;
			{
				if ((!(_1ec821b85_u->_field_cpp_linked))) {
					_89913_obj+=_1ec821b85_gen_pkg_fns(_1ec821b85_u->_field_package);
				}
			}
			_iter_next_4810442368:;
			++it;
			goto _iter_begin_4810442368;
		}
		_iter_end_4810442368:;
	}
	_89913_obj+=_1ec821b85_gen_pkg_fns(_89817_ir->_field_main);
	return _89913_obj;
}



inline void _1ec821b85_push_init(jule::Ptr<_1eb7d8048_Package>& _91119_pkg,jule::Str& _91139_obj) {
	
	
	jule::Ptr<_1eb627195_Fn> _9159_f = _91119_pkg->_method_find_fn(jule::Str("init", 4),false);
	if (_9159_f == nullptr) {
		return;
	}
	_91139_obj+=jule::Str("\n\t", 2);
	_91139_obj+=_1ec7be58e_fn_out_ident(_9159_f);
	_91139_obj+=jule::Str("();", 3);
}



inline jule::Str _1ec821b85_gen_init_caller(jule::Ptr<_1ea66c0ed_IR>& _92625_ir) {
	jule::Str _92713_obj = jule::Str("void ", 5);
	_92713_obj+=jule::Str("__jule_call_initializers", 24);
	_92713_obj+=jule::Str("(void) {", 8);
	{
		auto &expr = _92625_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810452800:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_u = *it;
			{
				if ((!(_1ec821b85_u->_field_cpp_linked))) {
					_1ec821b85_push_init(_1ec821b85_u->_field_package,_92713_obj);
				}
			}
			_iter_next_4810452800:;
			++it;
			goto _iter_begin_4810452800;
		}
		_iter_end_4810452800:;
	}
	_1ec821b85_push_init(_92625_ir->_field_main,_92713_obj);
	_92713_obj+=jule::Str("\n}", 2);
	return _92713_obj;
}



inline jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_find_testing_package(jule::Ptr<_1ea66c0ed_IR>& _94234_ir) {
	{
		auto &expr = _94234_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810456832:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> _1ec821b85_imp = *it;
			{
				if (_1ec821b85_imp->_field_link_path == jule::Str("std::testing", 12)) {
					return _1ec821b85_imp;
				}
			}
			_iter_next_4810456832:;
			++it;
			goto _iter_begin_4810456832;
		}
		_iter_end_4810456832:;
	}
	return nullptr;
}



inline void _1ec821b85_append_test(jule::Str& _95125_obj,jule::Ptr<_1eb627195_FnIns> _95139_f) {
	_95125_obj+=_1ec821b85_indent();
	_95125_obj+=jule::Str("_t->_method_reset();\n", 21);
	_95125_obj+=_1ec821b85_indent();
	_95125_obj+=jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35);
	_95125_obj+=_1ec821b85_indent();
	_95125_obj+=jule::Str("jule::outln(", 12);
	_95125_obj+=_1eb8b628b_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_95139_f->_field_decl->_field_ident));
	_95125_obj+=jule::Str(");\n", 3);
	_95125_obj+=_1ec821b85_indent();
	_95125_obj+=_1ec7be58e_fn_ins_out_ident(_95139_f);
	_95125_obj+=jule::Str("(_t);\n", 6);
	_95125_obj+=_1ec821b85_indent();
	_95125_obj+=jule::Str("post_test();\n", 13);
}



inline void _1ec821b85_append_package_tests(jule::Str& _96734_obj,jule::Ptr<_1eb7d8048_Package>& _96749_p) {
	{
		auto &expr = _96749_p->_field_files;
		auto it = expr.begin();
		_iter_begin_4810464720:;
		if (it != expr.end()) {
			jule::Ptr<_1ebcb6081_SymbolTable> _1ec821b85_file = *it;
			{
				{
					auto &expr = _1ec821b85_file->_field_funcs;
					auto it = expr.begin();
					_iter_begin_4810466688:;
					if (it != expr.end()) {
						jule::Ptr<_1eb627195_Fn> _1ec821b85_f = *it;
						{
							if (_1ec7e92ab_has_directive(_1ec821b85_f->_field_directives,jule::Str("test", 4))) {
								_1ec821b85_append_test(_96734_obj,_1ec821b85_f->_field_instances[0LL]);
							}
						}
						_iter_next_4810466688:;
						++it;
						goto _iter_begin_4810466688;
					}
					_iter_end_4810466688:;
				}
			}
			_iter_next_4810464720:;
			++it;
			goto _iter_begin_4810464720;
		}
		_iter_end_4810464720:;
	}
}



inline void _1ec821b85_append_test_point(jule::Str& _97731_obj,jule::Ptr<_1ea66c0ed_IR>& _97746_ir) {
	_97731_obj+=jule::Str("\nvoid test_point(void) {\n", 25);
	_1ec821b85_add_indent();
	_97731_obj+=_1ec821b85_indent();
	jule::Ptr<_1eb7d8048_ImportInfo> _98213_p = _1ec821b85_find_testing_package(_97746_ir);
	if (_98213_p == nullptr) {
		_97731_obj+=jule::Str("}", 1);
		_1ec821b85_done_indent();
		return;
	}
	jule::Ptr<_1eb29bdd6_StructIns> _99213_t = _98213_p->_method_find_struct(jule::Str("T", 1),false)->_field_instances[0LL];
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=_1ec7e92ab_as_sptr_kind(_1ec7e92ab_gen_struct_kind_ins(_99213_t));
	_97731_obj+=jule::Str(" _t = jule::new_struct<", 23);
	_97731_obj+=_1ec7e92ab_gen_struct_kind_ins(_99213_t);
	_97731_obj+=jule::Str(">(new(std::nothrow) ", 20);
	_97731_obj+=_1ec7e92ab_gen_struct_kind_ins(_99213_t);
	_97731_obj+=jule::Str(");\n", 3);
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47);
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("auto post_test = [&](void) {\n", 29);
	_1ec821b85_add_indent();
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("++total;\n", 9);
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("if (_t->_method_failed()) { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 84);
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("else if (_t->_method_skipped()) { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 92);
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53);
	_1ec821b85_done_indent();
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("};\n", 3);
	_1ec821b85_append_package_tests(_97731_obj,_97746_ir->_field_main);
	_97731_obj+=jule::Str("\n\n", 2);
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("std::cout << std::endl << std::endl << \"total tests: \" << total << \"  skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 168);
	_1ec821b85_done_indent();
	_97731_obj+=_1ec821b85_indent();
	_97731_obj+=jule::Str("}\n", 2);
}



inline void _1ec821b85_append_standard(jule::Str& _103129_obj_code,jule::Str _103144_compiler,jule::Str _103159_compiler_cmd) {
	_1d059016d_AbsTime _10329_time = _1d059016d_Time::_static_method_now()._method_abs();
	jule::Str _103413_time_str = jule::Str();
	_103413_time_str+=_1e9e077ac_fmt_uint(_10329_time._field_day,10LL);
	_103413_time_str+=jule::Str("/", 1);
	_103413_time_str+=_1e9e077ac_fmt_uint(_10329_time._field_month,10LL);
	_103413_time_str+=jule::Str("/", 1);
	_103413_time_str+=_1e9e077ac_fmt_uint(_10329_time._field_year,10LL);
	_103413_time_str+=jule::Str(" ", 1);
	_103413_time_str+=_1e9e077ac_fmt_uint(_10329_time._field_hour,10LL);
	_103413_time_str+=jule::Str(".", 1);
	_103413_time_str+=_1e9e077ac_fmt_uint(_10329_time._field_minute,10LL);
	_103413_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM) UTC", 25);
	jule::Str _104613_s = jule::Str();
	_104613_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_104613_s+=jule::Str("// JuleC version: ", 18);
	_104613_s+=jule::Str("beta 0.0.6 @master", 18);
	_104613_s+=jule::Str("\n", 1);
	_104613_s+=jule::Str("// Date: ", 9);
	_104613_s+=_103413_time_str;
	_104613_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_104613_s+=_103144_compiler;
	_104613_s+=jule::Str(" ", 1);
	_104613_s+=_103159_compiler_cmd;
	_104613_s+=jule::Str("\n\n#include \"", 12);
	_104613_s+=_1e9c5edd9_PATH_API;
	_104613_s+=jule::Str("\"\n\n", 3);
	_104613_s+=_103129_obj_code;
	_104613_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 149);
	if (_1e9ca741a_TEST) {
		_104613_s+=jule::Str("test_point();", 13);
	} else {
		_104613_s+=jule::Str("entry_point();", 14);
	}
	_104613_s+=jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28);
	_103129_obj_code=_104613_s;
}



inline jule::Str _1ec821b85_gen(jule::Ptr<_1ea66c0ed_IR>& _108517_ir) {
	jule::Str _108613_obj = jule::Str();
	_108613_obj+=_1ec821b85_gen_links(_108517_ir);
	_108613_obj+=jule::Str("\n", 1);
	_108613_obj+=_1ec821b85_gen_prototypes(_108517_ir);
	_108613_obj+=jule::Str("\n\n", 2);
	_108613_obj+=_1ec821b85_gen_globals(_108517_ir->_field_ordered._field_globals);
	_108613_obj+=jule::Str("\n", 1);
	_108613_obj+=_1ec821b85_gen_structs(_108517_ir->_field_ordered._field_structs);
	_108613_obj+=_1ec821b85_gen_fns(_108517_ir);
	_108613_obj+=jule::Str("\n", 1);
	_108613_obj+=_1ec821b85_gen_init_caller(_108517_ir);
	_108613_obj+=jule::Str("\n", 1);
	return _108613_obj;
}



inline jule::Str _1e8d6c657_str_repeat(jule::Str _3115_sub,jule::Int _3129_n) {
	if (_3129_n == 0LL) {
		return jule::Str();
	}
	jule::Str _3613_s = jule::Str();
	for (; _3129_n > 0LL; (_3129_n)--) {
		{
			_3613_s+=_3115_sub;
		}
	_iter_next_4810748240:;
	}
	_iter_end_4810748240:;
	return _3613_s;
}



inline void _1e8d6c657_print_error_message(jule::Str _4324_msg) {
	jule::outln(_4324_msg);
}



inline void _1e8d6c657_help(jule::Slice<jule::Str>& _4610_args) {
	if (_4610_args.len() > 2LL) {
		_1e8d6c657_print_error_message(jule::Str("invalid command: ", 17) + _4610_args[2LL]);
		return;
	}
	jule::I64 _5213_max = _1e8d6c657_HELP_MAP.__at(0LL).__at(0LL).len();
	{
		auto &expr = _1e8d6c657_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_4810754528:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_1e8d6c657_k = *it;
			{
				jule::I64 _5413_n = _1e8d6c657_k.__at(0LL).len();
				if (_5413_n > _5213_max) {
					_5213_max=_5413_n;
				}
			}
			_iter_next_4810754528:;
			++it;
			goto _iter_begin_4810754528;
		}
		_iter_end_4810754528:;
	}
	jule::Str _6013_s = jule::Str();
	
	{
		auto &expr = _1e8d6c657_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_4810759632:;
		if (it != expr.end()) {
			jule::Int _1e8d6c657_i = it - expr.begin();
			jule::Array<jule::Str,2> &_1e8d6c657_part = *it;
			{
				_6013_s+=_1e8d6c657_part.__at(0LL);
				_6013_s+=_1e8d6c657_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>((_5213_max - _1e8d6c657_part.__at(0LL).len()) + 5LL));
				_6013_s+=_1e8d6c657_part.__at(1LL);
				if ((_1e8d6c657_i + 1LL) < 4LL) {
					_6013_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_4810759632:;
			++it;
			_1e8d6c657_i++;
			goto _iter_begin_4810759632;
		}
		_iter_end_4810759632:;
	}
	jule::outln(_6013_s);
}



inline void _1e8d6c657_version(jule::Slice<jule::Str>& _7413_args) {
	if (_7413_args.len() > 2LL) {
		_1e8d6c657_print_error_message(jule::Str("invalid command: ", 17) + _7413_args[2LL]);
		return;
	}
	jule::out(jule::Str("julec version ", 14));
	jule::outln(jule::Str("beta 0.0.6 @master", 18));
}



inline void _1e8d6c657_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _1e9c67d6a_DISTOS;
		auto it = expr.begin();
		_iter_begin_4810769200:;
		if (it != expr.end()) {
			jule::Str &_1e8d6c657_os = *it;
			{
				jule::out(_1e8d6c657_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4810769200:;
			++it;
			goto _iter_begin_4810769200;
		}
		_iter_end_4810769200:;
	}
	jule::outln(jule::Str());
}



inline void _1e8d6c657_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _1e9c67d6a_DISTARCH;
		auto it = expr.begin();
		_iter_begin_4810770560:;
		if (it != expr.end()) {
			jule::Str &_1e8d6c657_arch = *it;
			{
				jule::out(_1e8d6c657_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4810770560:;
			++it;
			goto _iter_begin_4810770560;
		}
		_iter_end_4810770560:;
	}
	jule::outln(jule::Str());
}



inline void _1e8d6c657_tool(jule::Slice<jule::Str>& _10410_args) {
	if (_10410_args.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_10410_args.len() > 3LL) {
		_1e8d6c657_print_error_message(jule::Str("invalid command: ", 17) + _10410_args[3LL]);
		return;
	}
	jule::Str _1159_cmd = _10410_args[2LL];
	{
		auto &_match_expr{ _1159_cmd };
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_4810779936:;
			{
				_1e8d6c657_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_4810779488:;
			{
				_1e8d6c657_tool_distarch();
			}
		}
		else {
			_case_begin_4810775408:;
			{
				_1e8d6c657_print_error_message(jule::Str("undefined command: ", 19) + _1159_cmd);
			}
		}
		_match_end_4810779088:;
	}
}



inline void _1e8d6c657_julenv(jule::Slice<jule::Str>& _12412_args) {
	if (_12412_args.len() > 2LL) {
		_1e8d6c657_print_error_message(jule::Str("invalid command: ", 17) + _12412_args[2LL]);
		return;
	}
	jule::outln(jule::Str("julec version: beta 0.0.6 @master", 33));
	jule::outln(jule::Str("architecture: arm64", 19));
	jule::outln(jule::Str("operating system: windows", 25));
	jule::outln(jule::Str("default compiler: ", 18) + _1e8da9078_COMPILER);
	jule::outln(jule::Str("default C++ standard: ", 22) + _1e8da9078_CPP_STD);
}



inline void _1e8d6c657_mod(jule::Slice<jule::Str>& _1379_args) {
	if (_1379_args.len() == 2LL) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;
	}
	if (_1379_args.len() > 3LL) {
		_1e8d6c657_print_error_message(jule::Str("invalid command: ", 17) + _1379_args[3LL]);
		return;
	}
	{
		auto &_match_expr{ _1379_args[2LL] };
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_4810793024:;
			{
				({
					auto except = _1e8e1b6a1_File::_static_method_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_1e8d6c657_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_4810790384:;
			{
				_1e8d6c657_print_error_message(jule::Str("invalid command: ", 17) + _1379_args[2LL]);
			}
		}
		_match_end_4810790896:;
	}
}



inline jule::Bool _1e8d6c657_process_command(jule::Slice<jule::Str>& _16121_args) {
	{
		auto &_match_expr{ _16121_args[1LL] };
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_4810799584:;
			{
				_1e8d6c657_help(_16121_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_4810799680:;
			{
				_1e8d6c657_version(_16121_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_4810799152:;
			{
				_1e8d6c657_tool(_16121_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_4810799248:;
			{
				_1e8d6c657_julenv(_16121_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_4810799344:;
			{
				_1e8d6c657_mod(_16121_args);
			}
		}
		else {
			_case_begin_4810793120:;
			{
				return false;
			}
		}
		_match_end_4810796928:;
	}
	return true;
}



inline void _1e8d6c657_exit_err(jule::Str _17413_msg) {
	jule::outln(_17413_msg);
	_1e9cbbc04_exit(1LL);
}



void entry_point(void) {
	jule::Slice<jule::Str> _18013_args = _1e911755b_args();
	if (_18013_args.len() < 2LL) {
		return;
	}
	if (_1e8d6c657_process_command(_18013_args)) {
		return;
	}
	_1e8da9078_compile_command(_18013_args);
}



inline void _1e8d6ce1b___init_common(void) {
	_1e8da9078_COMPILER=jule::Str("clang", 5);
	_1e8da9078_COMPILER_PATH=jule::Str("clang++", 7);
}



inline void _1e8da33d5___enable_vtp(void) {
	jule::Uintptr _199_h_out = _1e8e5d46d_get_std_handle(static_cast<jule::Uintptr>(18446744073709551605LLU));
	if (_199_h_out == jule::MAX_U64) {
		return;
	}
	jule::Int _2413_dw_mode = 0LL;
	if ((!(_1e8e5d46d_get_console_mode(_199_h_out,_2413_dw_mode)))) {
		return;
	}
	_2413_dw_mode|=4LL;
	_1e8e5d46d_set_console_mode(_199_h_out,_2413_dw_mode);
}



inline void _1e8da33d5_init(void) {
	_1e8da33d5___enable_vtp();
	_1e8d6ce1b___init_common();
}



inline void _1e8da9078_write_output(jule::Str _4917_path,jule::Str _4928_content) {
	jule::Str _509_dir = _1e904e87d_dir(_4917_path);
	({
		auto except = _1e8e2d5d6_Status::_static_method_of(_509_dir);
		if (!except.ok()) {
			({
				auto except = _1e8e1506d_Directory::_static_method_create(_509_dir);
				if (!except.ok()) {
					_1e8d6c657_exit_err(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	({
		auto except = _1e8e1b6a1_File::_static_method_write(_4917_path,static_cast<jule::Slice<jule::U8>>(_4928_content),432LL);
		if (!except.ok()) {
			_1e8d6c657_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	});
}



inline void _1e8da9078_clear_objects(void) {
	({
		auto except = _1e8e1b6a1_File::_static_method_remove(_1e8da9078_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;
		}
	});
	_1e8e1506d_Directory::_static_method_remove(_1e8da9078_OUT_DIR);
}



inline void _1e8da9078_compile_ir(jule::Str _7715_compiler,jule::Str _7730_compiler_cmd) {
	jule::Ptr<_1e9c9a7a4_Cmd> _7813_cmd = _1e9c9a7a4_Cmd::_static_method_new(_7715_compiler);
	_7813_cmd->_field_args=jule::Slice<jule::Str>({_7715_compiler});
	_7813_cmd->_field_args=jule::append(_7813_cmd->_field_args,_7730_compiler_cmd.split(jule::Str(" ", 1),-1LL));
	({
		auto except = _7813_cmd->_method_spawn();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: src/julec/compile.jule:81:5"));
	});
	jule::Int _829_status = ({
		auto except = _7813_cmd->_method_wait();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: src/julec/compile.jule:82:18"));
		(except.result);
	});
	if (_829_status != 0LL) {
		jule::Str _8413_error_message = (jule::Str("\n>>> your backend compiler (", 28) + _1e8da9078_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149);
		_1e8d8d535_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),_8413_error_message);
		_1e8d6c657_exit_err(jule::Str());
	}
	_1e8da9078_clear_objects();
}



inline void _1e8da9078_do_spell(jule::Str _9513_obj,jule::Str _9523_compiler,jule::Str _9538_compiler_cmd) {
	jule::Str _969_path = _1e8da9078_get_compile_path();
	_1e8da9078_write_output(_969_path,_9513_obj);
	if ((!(_1e8da9078_TRANSPILATION))) {
		_1e8da9078_compile_ir(_9523_compiler,_9538_compiler_cmd);
	}
}



inline jule::Bool _1e8da9078_is_cpp_source_file(jule::Str _10323_path) {
	jule::Int _1049_offset = _10323_path.rfind(jule::Str(".", 1));
	if (_1049_offset == -1LL) {
		return false;
	}
	return _1e8e27beb_is_valid_cpp_ext(_10323_path.slice(_1049_offset));
}



inline void _1e8da9078_push_comp_cmd_clang(jule::Str& _11129_cmd) {
	_11129_cmd+=jule::Str("-Wno-everything ", 16);
	_11129_cmd+=jule::Str("--std=", 6);
	_11129_cmd+=_1e8da9078_CPP_STD;
	_11129_cmd+=jule::Str(" ", 1);
	if (_1e9c5e35b_PRODUCTION) {
		_11129_cmd+=jule::Str("-O3 ", 4);
		_11129_cmd+=jule::Str("-flto ", 6);
		_11129_cmd+=jule::Str("-DNDEBUG ", 9);
		_11129_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_11129_cmd+=jule::Str("-O0 ", 4);
	}
}



inline void _1e8da9078_push_comp_cmd_gcc(jule::Str& _13027_cmd) {
	_13027_cmd+=jule::Str("-w ", 3);
	_13027_cmd+=jule::Str("--std=", 6);
	_13027_cmd+=_1e8da9078_CPP_STD;
	_13027_cmd+=jule::Str(" ", 1);
	if (_1e9c5e35b_PRODUCTION) {
		_13027_cmd+=jule::Str("-O3 ", 4);
		_13027_cmd+=jule::Str("-DNDEBUG ", 9);
		_13027_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_13027_cmd+=jule::Str("-O0 ", 4);
	}
}



inline std::tuple<jule::Str,jule::Str> _1e8da9078_gen_compile_cmd(jule::Str _14920_source_path,jule::Ptr<_1ea66c0ed_IR>& _14939_ir) {
	jule::Str &_15010_compiler = _1e8da9078_COMPILER_PATH;
	jule::Str _15213_cmd = jule::Str();
	{
		auto &_match_expr{ _1e8da9078_COMPILER };
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_4810855056:;
			{
				_1e8da9078_push_comp_cmd_gcc(_15213_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_4810855920:;
			{
				_1e8da9078_push_comp_cmd_clang(_15213_cmd);
			}
		}
		_match_end_4810855728:;
	}
	{
		auto &expr = _14939_ir->_field_passes;
		auto it = expr.begin();
		_iter_begin_4810856928:;
		if (it != expr.end()) {
			jule::Str &_1e8da9078_pass = *it;
			{
				_15213_cmd+=_1e8da9078_pass;
				_15213_cmd+=jule::Str(" ", 1);
			}
			_iter_next_4810856928:;
			++it;
			goto _iter_begin_4810856928;
		}
		_iter_end_4810856928:;
	}
	{
		auto &expr = _14939_ir->_field_used;
		auto it = expr.begin();
		_iter_begin_4810861184:;
		if (it != expr.end()) {
			jule::Ptr<_1eb7d8048_ImportInfo> &_1e8da9078_u = *it;
			{
				if (_1e8da9078_u->_field_cpp_linked && _1e8da9078_is_cpp_source_file(_1e8da9078_u->_field_path)) {
					_15213_cmd+=_1e8da9078_u->_field_path;
					_15213_cmd+=jule::Str(" ", 1);
				}
			}
			_iter_next_4810861184:;
			++it;
			goto _iter_begin_4810861184;
		}
		_iter_end_4810861184:;
	}
	if (_1e8da9078_OUT != jule::Str()) {
		_15213_cmd+=jule::Str("-o ", 3);
		_15213_cmd+=_1e8da9078_OUT;
		_15213_cmd+=jule::Str(" ", 1);
	}
	_15213_cmd+=_14920_source_path;
	return std::make_tuple(_15010_compiler,_15213_cmd);
}



inline jule::Str _1e8da9078_get_compile_path(void) {
	return _1e904e87d_join(jule::Slice<jule::Str>({_1e8da9078_OUT_DIR,_1e8da9078_OUT_NAME}));
}



inline void _1e8da9078_apply_target_independent_optimizations(jule::Ptr<_1ea66c0ed_IR>& _19348_ir) {
	if (_1e9c5e35b_OPT_DEADCODE) {
		_1e9c6e03b_eliminate(_19348_ir);
	}
}



inline void _1e8da9078_check_compiler_flag(void) {
	{
		auto &_match_expr{ _1e8da9078_COMPILER };
		if (_match_expr == jule::Str()) {
			_case_begin_4810866432:;
			{
				_1e8d6c657_exit_err(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_4810883856:;
			{
				_1e8da9078_COMPILER_PATH=jule::Str("clang++", 7);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_4810883952:;
			{
				_1e8da9078_COMPILER_PATH=jule::Str("g++", 3);
			}
		}
		else {
			_case_begin_4810864560:;
			{
				_1e8d6c657_exit_err(jule::Str("invalid option value for --compiler: ", 37) + _1e8da9078_COMPILER);
			}
		}
		_match_end_4810866064:;
	}
}



inline void _1e8da9078_check_target_arch(jule::Str _21522_arch) {
	{
		auto &expr = _1e9c67d6a_DISTARCH;
		auto it = expr.begin();
		_iter_begin_4810887792:;
		if (it != expr.end()) {
			jule::Str &_1e8da9078_distarch = *it;
			{
				if (_21522_arch == _1e8da9078_distarch) {
					return;
				}
			}
			_iter_next_4810887792:;
			++it;
			goto _iter_begin_4810887792;
		}
		_iter_end_4810887792:;
	}
	_1e8d6c657_exit_err(jule::Str("--target: unsupported/undefined architecture: ", 46) + _21522_arch);
}



inline void _1e8da9078_check_target_os(jule::Str _22520_os) {
	{
		auto &expr = _1e9c67d6a_DISTOS;
		auto it = expr.begin();
		_iter_begin_4810891296:;
		if (it != expr.end()) {
			jule::Str &_1e8da9078_distos = *it;
			{
				if (_22520_os == _1e8da9078_distos) {
					return;
				}
			}
			_iter_next_4810891296:;
			++it;
			goto _iter_begin_4810891296;
		}
		_iter_end_4810891296:;
	}
	_1e8d6c657_exit_err(jule::Str("--target: unsupported/undefined operating system: ", 50) + _22520_os);
}



inline void _1e8da9078_check_target_flag(jule::Str& _23523_target) {
	if (_23523_target == jule::Str()) {
		_1e8d6c657_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _2409_parts = _23523_target.split(jule::Str("-", 1),-1LL);
	if (_2409_parts.len() != 2LL) {
		_1e8d6c657_exit_err(jule::Str("--target: undefined platform target format: ", 44) + _23523_target);
	}
	jule::Str _24510_os = _2409_parts[0LL];
	jule::Str _24514_arch = _2409_parts[1LL];
	std::tie(_24510_os,_24514_arch) = std::make_tuple(_2409_parts[0LL],_2409_parts[1LL]);
	if (_24510_os != jule::Str("native", 6)) {
		_1e8da9078_check_target_os(_24510_os);
		_1e9c5b347_OS=_24510_os;
	}
	if (_24514_arch != jule::Str("native", 6)) {
		_1e8da9078_check_target_arch(_24514_arch);
		_1e9c5b347_ARCH=_24514_arch;
	}
}



inline void _1e8da9078_check_opt_flag(jule::Str& _25820_opt) {
	if (_25820_opt == jule::Str()) {
		_1e8d6c657_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto &_match_expr{ _25820_opt };
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_4810907024:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_4810907120:;
			{
				_1e9c5e35b_push_opt_level(1LLU);
			}
		}
		else {
			_case_begin_4810905760:;
			{
				_1e8d6c657_exit_err(jule::Str("--opt: invalid optimization level: ", 35) + _25820_opt);
			}
		}
		_match_end_4810884384:;
	}
}



inline jule::Slice<jule::Str> _1e8da9078_check_flags(jule::Slice<jule::Str>& _27017_args) {
	jule::Str _27113_opt = jule::Str("L0", 2);
	jule::Str _27213_target = jule::Str("native-native", 13);
	jule::Ptr<_1ec748ded_FlagSet> _27413_fs = _1ec748ded_FlagSet::_static_method_new();
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e8da9078_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Let shadowing", 13));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e8da9078_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	_27413_fs->_method_add_var_1(((jule::Ptr<jule::Str>)((&(_1e8da9078_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	_27413_fs->_method_add_var_1(((jule::Ptr<jule::Str>)((&(_27113_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	_27413_fs->_method_add_var_1(((jule::Ptr<jule::Str>)((&(_27213_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	_27413_fs->_method_add_var_1(((jule::Ptr<jule::Str>)((&(_1e8da9078_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	_27413_fs->_method_add_var_0(((jule::Ptr<jule::Bool>)((&(_1e9c5e35b_OPT_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	jule::Slice<jule::Str> _29113_content = ({
		auto except = _27413_fs->_method_parse(_27017_args);
		(except.ok()) ? (except.result) : ({
			_1e8d6c657_exit_err(except.error.operator jule::Str());
			nullptr;
		});
	});
	_1e8da9078_check_compiler_flag();
	_1e8da9078_check_target_flag(_27213_target);
	_1e8da9078_check_opt_flag(_27113_opt);
	return _29113_content;
}



inline void _1e8da9078_setup_sema_flags(jule::Int& _30326_flags) {
	if (_1e8da9078_SHADOWING) {
		_30326_flags|=1LL;
	}
}



inline jule::Ptr<_1ea66c0ed_IR> _1e8da9078_build_ir(jule::Slice<jule::Str>& _30914_args) {
	jule::Slice<jule::Str> _3109_content = _1e8da9078_check_flags(_30914_args);
	jule::Int _31213_sema_flags = 0LL;
	_1e8da9078_setup_sema_flags(_31213_sema_flags);
	if (_3109_content.len() == 0LL) {
		_1e8d6c657_exit_err(_1e8ea7cc0_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if (_3109_content.len() > 1LL) {
		_1e8d6c657_exit_err(jule::Str("undefined content: ", 19) + _3109_content[1LL]);
	}
	jule::Str _3209_path = _3109_content[0LL];
	jule::Ptr<_1e8e2d5d6_Status> _3239_inf = ({
		auto except = _1e8e2d5d6_Status::_static_method_of(_1e9c5edd9_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_1e8d6c657_exit_err(_1e8ea7cc0_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
			return nullptr;
		} jule::Ptr<_1e8e2d5d6_Status>();});
	});
	if ((!(_3239_inf->_method_is_dir()))) {
		_1e8d6c657_exit_err(_1e8ea7cc0_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	}
	_1ea6bb812_init_flags();
	jule::Ptr<_1ea66c0ed_IR> _33414_ir;
	jule::Slice<_1e8ea7cc0_Log> _33418_logs;
	std::tie(_33414_ir,_33418_logs) = _1ea66c0ed_IR::_static_method_build(_3209_path,_31213_sema_flags);
	if ((_33414_ir == nullptr) && (_33418_logs == nullptr)) {
		_1e8d6c657_exit_err(_1e8ea7cc0_logf(jule::Str("there is no Jule source code in this package: @", 47),jule::Slice<jule::Any>({jule::Any(_3209_path)})));
	}
	if (_33418_logs != nullptr) {
		_1e8d8d535_Logger::_static_method_print_logs(_33418_logs);
		_1e8d6c657_exit_err(jule::Str());
	}
	return _33414_ir;
}



inline void _1e8da9078_compile_command(jule::Slice<jule::Str>& _34925_args) {
	_34925_args=_34925_args.slice(1LL);
	if (_34925_args[0LL] == jule::Str("test", 4)) {
		_1e9ca741a_TEST=true;
		_34925_args=_34925_args.slice(1LL);
	}
	jule::Ptr<_1ea66c0ed_IR> _35513_ir = _1e8da9078_build_ir(_34925_args);
	
	if ((!(_1e9ca741a_TEST))) {
		jule::Ptr<_1eb627195_Fn> _36017_f = _35513_ir->_field_main->_method_find_fn(jule::Str("main", 4),false);
		if (_36017_f == nullptr) {
			_1e8d6c657_exit_err(_1e8ea7cc0_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		}
		_36017_f->_field_statically=true;
	}
	jule::Ptr<_1eb627195_Fn> _36613_f = _35513_ir->_field_main->_method_find_fn(jule::Str("init", 4),false);
	if (_36613_f != nullptr) {
		_36613_f->_field_statically=true;
	}
	_1e8da9078_apply_target_independent_optimizations(_35513_ir);
	_35513_ir->_method_order();
	jule::Str _37610_compiler;
	jule::Str _37620_compiler_cmd;
	std::tie(_37610_compiler,_37620_compiler_cmd) = _1e8da9078_gen_compile_cmd(_1e8da9078_get_compile_path(),_35513_ir);
	jule::Str _37813_obj = _1ec821b85_gen(_35513_ir);
	if (_1e9ca741a_TEST) {
		_1ec821b85_append_test_point(_37813_obj,_35513_ir);
	}
	_1ec821b85_append_standard(_37813_obj,_37610_compiler,_37620_compiler_cmd);
	_1e8da9078_do_spell(_37813_obj,_37610_compiler,_37620_compiler_cmd);
}




void __jule_call_initializers(void) {
	_1e9c5edd9_init();
	_1e8da33d5_init();
}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}