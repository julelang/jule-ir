// Auto generated by JuleC.
// JuleC version: jule0.0.10 @master
// Date: 20/3/2024 16.55 (DD/MM/YYYY) (HH.MM) UTC
//
// Recommended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#define __JULE_ENABLE__PRODUCTION


#include "api/jule.hpp"                                   

#include <dirent.h>
#include <cstdio>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>
#include "std/jule/integrated/integrated.hpp"                                   

struct _1b54bac95_Reader;
struct _1b54bb339_Writer;
struct _1b54bb900_Stream;
struct _1ce69b511_Importer;
struct _1ce760828_Kind;
struct _1b545ddc0_Lookup;
struct _1b5959d27_CommonFlag;

struct _211214102_accept_range;


struct _212851364_FoldPair;


struct _212851d7b_CaseRange;


struct _21285283d_Range16;


struct _2128531bd_Range32;


struct _212853b5d_RangeTable;


struct _211dc0494_LazyBuff;


struct _211184319_DirEntry;


struct _211184759_Directory;


struct _211184b99_File;


struct _2111850d9_Status;


struct _2128a6d59_Cmd;


struct _21287ea02_Log;


struct _212ae5c02_Token;


struct _212aed0c2_File;


struct _212b01317_KindPair;


struct _212b08055_Lex;


struct _2129e26e2_Ast;


struct _2129e3072_CommentGroup;


struct _21298e309_NamespaceTypeDecl;


struct _212b14182_SptrTypeDecl;


struct _212b145c2_SlcTypeDecl;


struct _212b14a12_TupleTypeDecl;


struct _212b14e52_PtrTypeDecl;


struct _212b15392_ArrTypeDecl;


struct _212b157d2_MapTypeDecl;


struct _212b15c22_RetTypeDecl;


struct _212b169e2_TupleExpr;


struct _212b189c2_CastExpr;


struct _212b1a562_StructLit;


struct _212b1e555_ScopeTree;


struct _212b22b85_Conditional;


struct _212b26705_Impl;


struct _21313d9a8_FileInfo;


struct _21318843c_PackageInfo;


struct _1e7653d74_Stmt;


struct _1e765489c_ScopeParser;


struct _1e7665407_CallData;


struct _1e766767e_ExprBuilder;


struct _1e767b1ba_Parser;


struct _1e769304a_TypeBuilder;


struct _1ce045d56_FloatInfo;


struct _1cde9edae_DecimalSlice;


struct _1ce0e76ee_LeftCheat;


struct _1cde2b80d_Decimal;


struct _1ce4b898d_Const;


struct _1b54b9d82_FileStream;


struct _1b54bc5e3_ByteStream;


struct _1b54c05c4_Scanner;


struct _1e83ac923_OperatorMap;


struct _1e83ae55c_Operators;


struct _1e83b2cbe_FieldIns;


struct _1e83bdbcb_OperandExprModel;


struct _1e83c044c_StructArgExprModel;


struct _1e83c1393_AllocStructLitExprModel;


struct _1e83c31b9_SliceExprModel;


struct _1e83c4220_AnonFnExprModel;


struct _1e83c4880_KeyValPairExprModel;


struct _1e83c5056_MapExprModel;


struct _1e83c6d16_StructSubIdentExprModel;


struct _1e83c76a7_StructStaticIdentExprModel;


struct _1e83c8004_ArrayExprModel;


struct _1e83c87c9_CommonIdentExprModel;


struct _1e83c8c3b_CommonSubIdentExprModel;


struct _1e83c95aa_TupleExprModel;


struct _1e83c9b1b_BuiltinOutCallExprModel;


struct _1e83ca39c_BuiltinOutlnCallExprModel;


struct _1e83caac8_BuiltinCloneCallExprModel;


struct _1e83cb1e4_BuiltinNewCallExprModel;


struct _1e83cc987_BuiltinMakeCallExprModel;


struct _1e83cd2c3_BuiltinAppendCallExprModel;


struct _1e83cd9ee_BuiltinErrorCallExprModel;


struct _1e83ce22a_SizeofExprModel;


struct _1e83cec97_AlignofExprModel;


struct _1e83d01d7_RuneExprModel;


struct _1e83d0726_IntegratedToStrExprModel;


struct _1e83d0d53_TernaryExprModel;


struct _1e83d15c3_BackendEmitExprModel;


struct _1e83d1cbb_FreeExprModel;


struct _1e83d3284_RetType;


struct _1e83d5bb0_ParamIns;


struct _1e83d630e_FnIns;


struct _1e83de4b0_ReferenceStack;


struct _1e83e45b4_SymbolBuilder;


struct _1e8648e34_Impl;


struct _1ce62e86d_Scope;


struct _1ce632574_If;


struct _1ce6830ec_Else;


struct _1ce68353c_Conditional;


struct _1ce68397c_InfIter;


struct _1ce683dbc_WhileIter;


struct _1ce68430c_RangeIter;


struct _1ce68474c_ContSt;


struct _1ce684b8c_BreakSt;


struct _1ce6850cc_Label;


struct _1ce68551c_GotoSt;


struct _1ce68595c_Postfix;


struct _1ce6862dc_MultiAssign;


struct _1ce68672c_Match;


struct _1ce686b6c_Case;


struct _1ce6870ac_FallSt;


struct _1ce6874ec_RetSt;


struct _1ce687d7c_ScopeGoto;


struct _1ce6882bc_ScopeChecker;


struct _1ce698255_DirectiveChecker;


struct _1ce6a15e3_Package;


struct _1ce6ab345_Sema;


struct _1ce6abd18_MissingRetChecker;


struct _1ce6ce6cb_IterRelation;


struct _1ce6d1e2b_FuncPattern;


struct _1ce70ed5a_RangeChecker;


struct _1ce7204a8_SymbolTable;


struct _1ce727449_Data;


struct _1ce7281d6_Value;


struct _1ce728879_Eval;


struct _1ce729825_UnaryEval;


struct _1ce76121e_TypeKind;


struct _1ce761b37_TypeSymbol;


struct _1ce762330_Prim;


struct _1ce76286e_Sptr;


struct _1ce762e02_Slc;


struct _1ce763485_Tuple;


struct _1ce763b39_Map;


struct _1ce764244_Arr;


struct _1ce7649e7_Ptr;


struct _1ce766eb1_Referencer;


struct _212989117_CompileInfo;


struct _21299b019_DirectiveEval;


struct _1b54c4188_JuleImporter;


struct _1b54c9e91_OrderedDefines;


struct _1b54ca579_DefineOrderer;


struct _1b54d350a_ScopeDeadCode;


struct _1b54ed921_AnsiEscape;


struct _1b54eeb53_Logger;


struct _1b589b63c_UnsafeBinopExprModel;


struct _1b589c71a_UnsafeIndexingExprModel;


struct _1b589cb5a_PushToSliceExprModel;


struct _1b589d595_StrInsertBeginExprModel;


struct _1b58a029a_ScopeOptimizer;


struct _1b58a72a2_ExprOptimizer;


struct _1b58b17d9_Optimizer;


struct _1b591a0a1_AbsTime;


struct _1b591ad71_Time;


struct _1b591baca_Duration;


struct _1b57910c0_TestCoder;


struct _1b57cc35e_ScopeCoder;


struct _1b57d05a4_ExprCoder;


struct _1b58c250e_DeriveCoder;


struct _1b58c4698_IdentCoder;


struct _1b58d98cd_SerializationInfo;


struct _1b592c437_TypeCoder;


struct _1b595ae38_Flag_0;

struct _1b595ae38_Flag_1;

struct _1b595ae38_Flag_2;

struct _1b595ae38_Flag_3;

struct _1b595ae38_Flag_4;


struct _1b595bc5d_FlagSet;


struct _1e8648917_Enum;


struct _2129e3d42_TypeDecl;


struct _212b16e32_LitExpr;


struct _212b17372_UnsafeExpr;


struct _212b177b2_CoExpr;


struct _212b17c02_IdentExpr;


struct _1e76761d7_AssignInfo;


struct _212b18142_UnaryExpr;


struct _212b18582_VariadicExpr;


struct _2129908e3_IdentTypeDecl;


struct _212b18e12_NsSelectionExpr;


struct _212b19352_SubIdentExpr;


struct _212b19792_BinopExpr;


struct _212b19bd2_FnCallExpr;


struct _1ce685d9c_Assign;


struct _212b1a122_FieldExprPair;


struct _2129e2b32_Node;


struct _212b1a9a2_BraceLit;


struct _1e82e47a0_Field;


struct _212b1b365_KeyValPair;


struct _1ce68793c_ScopeLabel;


struct _212b1b7a5_SliceExpr;


struct _1e83b1718_Struct;


struct _212b1bbe5_IndexingExpr;


struct _1ce6a0317_ImportInfo;


struct _1e83b84bc_StructIns;


struct _212b1c135_SlicingExpr;


struct _1e83be3c4_BinopExprModel;


struct _1e83bebdd_UnaryExprModel;


struct _1ce6cecb4_Var;


struct _212b1c575_TernaryExpr;


struct _1ce70c231_TypeCompatibilityChecker;


struct _1ce70c671_AssignTypeChecker;


struct _1ce70cd25_DynamicTypeAnnotation;


struct _1ce70d908_FnCallArgChecker;


struct _1ce70e497_StructLitChecker;


struct _1e83c0bbc_StructLitExprModel;


struct _1ce710773_RetTypeChecker;


struct _212b1c9b5_GenericDecl;


struct _1e83c1aad_CastingExprModel;


struct _1e83c2581_FnCallExprModel;


struct _212b1ce05_LabelSt;


struct _1e83c3928_IndexingExprModel;


struct _1ce72a084_BinaryEval;


struct _1ce75e6a1_TypeAlias;


struct _212b1d345_GotoSt;


struct _212b1d785_FallSt;


struct _212b1dbc5_AssignLeft;


struct _1e83c585e_SlicingExprModel;


struct _1e83c62cc_TraitSubIdentExprModel;


struct _212b1e115_AssignSt;


struct _2129e34b2_Comment;


struct _212b1e995_ParamDecl;


struct _212b1edd5_FnDecl;


struct _212b20325_VarDecl;


struct _1ce767731_TypeChecker;


struct _212b20765_RetSt;


struct _212b20ba5_Iter;


struct _212b210e5_WhileKind;


struct _1b54c72bd_IR;


struct _212b21535_RangeKind;


struct _212b21975_BreakSt;


struct _1e83cb920_BuiltinPanicCallExprModel;


struct _1e83cc14b_BuiltinAssertCallExprModel;


struct _212b21db5_ContSt;


struct _212b22305_If;


struct _212b22745_Else;


struct _2129e3902_Directive;


struct _1b589d09a_MutSlicingExprModel;


struct _212b230c5_TypeAliasDecl;


struct _212b23515_Case;


struct _212b23955_MatchCase;


struct _212b23d95_UseDecl;


struct _212b242d5_EnumItemDecl;


struct _212b24725_EnumDecl;


struct _212b24eea_FieldDecl;


struct _1e83d3839_Param;


struct _1e83d4384_Fn;


struct _212b2587a_StructDecl;


struct _212b1ade2_TraitDecl;


struct _212b16162_Expr;


struct _1e83de900_Pass;


struct _1b592255e_ObjectCoder;


struct _212b165a2_UseExpr;


struct _1e85a7865_Trait;


struct _1e86494b7_EnumItem;


struct _1b595c258_ArgParser;

struct _1b54bac95_Reader {
	virtual ~_1b54bac95_Reader(void) {}

	virtual jule::Exceptional<jule::I64> _method_read(jule::Slice<jule::U8> _1131_buff) { return {}; }
};

struct _1b54bb339_Writer {
	virtual ~_1b54bb339_Writer(void) {}

	virtual jule::Exceptional<jule::I64> _method_write(jule::Slice<jule::U8> _1828_buff) { return {}; }
};

struct _1b54bb900_Stream {
	virtual ~_1b54bb900_Stream(void) {}

	virtual jule::Exceptional<jule::I64> _method_read(jule::Slice<jule::U8> _2431_buff) { return {}; }
	virtual jule::Exceptional<jule::I64> _method_write(jule::Slice<jule::U8> _2628_buff) { return {}; }
};

struct _1ce69b511_Importer {
	virtual ~_1ce69b511_Importer(void) {}

	virtual void _method_set_mod_path(jule::Str _1735_path) {}
	virtual jule::Str _method_get_mod_path(void) { return {}; }
	virtual jule::Str _method_mod_by_id(jule::I64 _2328_id) { return {}; }
	virtual jule::Ptr<_1ce6a0317_ImportInfo> _method_get_import(jule::Str _2833_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ptr<_2129e26e2_Ast>>,jule::Slice<_21287ea02_Log>> _method_import_package(jule::Str _3337_path,jule::Bool _3348_update_mod) { return {}; }
	virtual void _method_imported(jule::Ptr<_1ce6a0317_ImportInfo>) {}
};

struct _1ce760828_Kind {
	virtual ~_1ce760828_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind> _6026_other) { return {}; }
};

struct _1b545ddc0_Lookup {
	virtual ~_1b545ddc0_Lookup(void) {}

	virtual jule::Ptr<_1ce6a0317_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ptr<_1ce6a0317_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ptr<_1ce6cecb4_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ptr<_1ce75e6a1_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ptr<_1e83b1718_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ptr<_1e83d4384_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ptr<_1e85a7865_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ptr<_1e8648917_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _1b5959d27_CommonFlag {
	virtual ~_1b5959d27_CommonFlag(void) {}

	virtual jule::Str _method_name(void) { return {}; }
	virtual jule::I32 _method_short(void) { return {}; }
	virtual jule::Str _method_what(void) { return {}; }
	virtual void _method_reset(void) {}
};


struct _211214102_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();


	_211214102_accept_range(jule::U8 __param_lo, jule::U8 __param_hi): _field_lo(__param_lo), _field_hi(__param_hi) {}

	

	_211214102_accept_range(void) = default;

	inline bool operator==(_211214102_accept_range _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi;
	}

	inline bool operator!=(_211214102_accept_range _other) { return !this->operator==(_other); }


};


struct _212851364_FoldPair {
	jule::U16 _field_from = jule::U16();
	jule::U16 _field_to = jule::U16();


	_212851364_FoldPair(jule::U16 __param_from, jule::U16 __param_to): _field_from(__param_from), _field_to(__param_to) {}

	

	_212851364_FoldPair(void) = default;

	inline bool operator==(_212851364_FoldPair _other) {
		return 
			this->_field_from == _other._field_from &&
			this->_field_to == _other._field_to;
	}

	inline bool operator!=(_212851364_FoldPair _other) { return !this->operator==(_other); }


};


struct _212851d7b_CaseRange {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::Array<jule::I32,3> _field_delta = jule::Array<jule::I32,3>();


	_212851d7b_CaseRange(jule::U32 __param_lo, jule::U32 __param_hi, jule::Array<jule::I32,3> __param_delta): _field_lo(__param_lo), _field_hi(__param_hi), _field_delta(__param_delta) {}

	

	_212851d7b_CaseRange(void) = default;

	inline bool operator==(_212851d7b_CaseRange _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_delta == _other._field_delta;
	}

	inline bool operator!=(_212851d7b_CaseRange _other) { return !this->operator==(_other); }


};


struct _21285283d_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();


	_21285283d_Range16(jule::U16 __param_lo, jule::U16 __param_hi, jule::U16 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_21285283d_Range16(void) = default;

	inline bool operator==(_21285283d_Range16 _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_stride == _other._field_stride;
	}

	inline bool operator!=(_21285283d_Range16 _other) { return !this->operator==(_other); }


};


struct _2128531bd_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();


	_2128531bd_Range32(jule::U32 __param_lo, jule::U32 __param_hi, jule::U32 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_2128531bd_Range32(void) = default;

	inline bool operator==(_2128531bd_Range32 _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_stride == _other._field_stride;
	}

	inline bool operator!=(_2128531bd_Range32 _other) { return !this->operator==(_other); }


};


struct _212853b5d_RangeTable {
	jule::Slice<_21285283d_Range16> _field_r16 = jule::Slice<_21285283d_Range16>();
	jule::Slice<_2128531bd_Range32> _field_r32 = jule::Slice<_2128531bd_Range32>();
	jule::I64 _field_latin_offset = jule::I64();


	_212853b5d_RangeTable(jule::Slice<_21285283d_Range16> __param_r16, jule::Slice<_2128531bd_Range32> __param_r32, jule::I64 __param_latin_offset): _field_r16(__param_r16), _field_r32(__param_r32), _field_latin_offset(__param_latin_offset) {}

	

	_212853b5d_RangeTable(void) = default;

	inline bool operator==(_212853b5d_RangeTable _other) {
		return 
			this->_field_r16 == _other._field_r16 &&
			this->_field_r32 == _other._field_r32 &&
			this->_field_latin_offset == _other._field_latin_offset;
	}

	inline bool operator!=(_212853b5d_RangeTable _other) { return !this->operator==(_other); }


};


struct _211dc0494_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::I64 _field_w = jule::I64();
	jule::Str _field_vol_and_path = jule::Str();
	jule::I64 _field_vol_len = jule::I64();


	_211dc0494_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::I64 __param_w, jule::Str __param_vol_and_path, jule::I64 __param_vol_len): _field_path(__param_path), _field_buff(__param_buff), _field_w(__param_w), _field_vol_and_path(__param_vol_and_path), _field_vol_len(__param_vol_len) {}

	

	_211dc0494_LazyBuff(void) = default;

	inline jule::U8 _method_index(jule::I64);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(_211dc0494_LazyBuff _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_buff == _other._field_buff &&
			this->_field_w == _other._field_w &&
			this->_field_vol_and_path == _other._field_vol_and_path &&
			this->_field_vol_len == _other._field_vol_len;
	}

	inline bool operator!=(_211dc0494_LazyBuff _other) { return !this->operator==(_other); }


};


struct _211184319_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_2111850d9_Status> _field_stat = jule::Ptr<_2111850d9_Status>();


	_211184319_DirEntry(jule::Str __param_name, jule::Ptr<_2111850d9_Status> __param_stat): _field_name(__param_name), _field_stat(__param_stat) {}

	

	_211184319_DirEntry(void) = default;

	inline bool operator==(_211184319_DirEntry _other) {
		return 
			this->_field_name == _other._field_name &&
			this->_field_stat == _other._field_stat;
	}

	inline bool operator!=(_211184319_DirEntry _other) { return !this->operator==(_other); }


};


struct _211184759_Directory {
	

	_211184759_Directory(void) = default;

	static inline jule::Exceptional<jule::Slice<jule::Ptr<_211184319_DirEntry>>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_create(jule::Str);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline bool operator==(_211184759_Directory _other) { return true; }

	inline bool operator!=(_211184759_Directory _other) { return !this->operator==(_other); }


};


struct _211184b99_File {
	jule::U64 _field_handle = jule::U64();


	_211184b99_File(jule::U64 __param_handle): _field_handle(__param_handle) {}

	

	_211184b99_File(void) = default;

	static inline jule::Ptr<_211184b99_File> _static_method_new(jule::U64);


	static inline jule::Exceptional<jule::Ptr<_211184b99_File>> _static_method_create(jule::Str);


	static inline jule::Exceptional<jule::Slice<jule::U8>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_write(jule::Str,jule::Slice<jule::U8>,jule::I64);


	inline jule::Exceptional<jule::I64> _method_seek(jule::I64,jule::I64);


	inline jule::VoidExceptional _method_close(void);


	static inline jule::Exceptional<jule::Ptr<_211184b99_File>> _static_method_open(jule::Str,jule::I64,jule::I64);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline jule::Exceptional<jule::I64> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::I64> _method_read(jule::Slice<jule::U8>);


	inline bool operator==(_211184b99_File _other) {
		return 
			this->_field_handle == _other._field_handle;
	}

	inline bool operator!=(_211184b99_File _other) { return !this->operator==(_other); }


};


struct _2111850d9_Status {
	jule::U64 _field_mode = jule::U64();
	jule::U64 _field_size = jule::U64();


	_2111850d9_Status(jule::U64 __param_mode, jule::U64 __param_size): _field_mode(__param_mode), _field_size(__param_size) {}

	

	_2111850d9_Status(void) = default;

	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	static inline jule::Exceptional<jule::Ptr<_2111850d9_Status>> _static_method_of(jule::Str);


	inline bool operator==(_2111850d9_Status _other) {
		return 
			this->_field_mode == _other._field_mode &&
			this->_field_size == _other._field_size;
	}

	inline bool operator!=(_2111850d9_Status _other) { return !this->operator==(_other); }


};


struct _2128a6d59_Cmd {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();


	_2128a6d59_Cmd(jule::Str __param_path, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_env): _field_path(__param_path), _field_args(__param_args), _field_env(__param_env) {}

	

	_2128a6d59_Cmd(void) = default;

	static inline jule::Ptr<_2128a6d59_Cmd> _static_method_new(jule::Str);


	inline jule::Exceptional<jule::I64> _method_spawn(void);


	inline jule::Exceptional<jule::I64> _method___spawn(void);


	inline bool operator==(_2128a6d59_Cmd _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_args == _other._field_args &&
			this->_field_env == _other._field_env;
	}

	inline bool operator!=(_2128a6d59_Cmd _other) { return !this->operator==(_other); }


};


struct _21287ea02_Log {
	jule::I64 _field_kind = 0LL;
	jule::I64 _field_row = jule::I64();
	jule::I64 _field_column = jule::I64();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();


	_21287ea02_Log(jule::I64 __param_kind, jule::I64 __param_row, jule::I64 __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion): _field_kind(__param_kind), _field_row(__param_row), _field_column(__param_column), _field_path(__param_path), _field_text(__param_text), _field_line(__param_line), _field_suggestion(__param_suggestion) {}

	

	_21287ea02_Log(void) = default;

	inline bool operator==(_21287ea02_Log _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_row == _other._field_row &&
			this->_field_column == _other._field_column &&
			this->_field_path == _other._field_path &&
			this->_field_text == _other._field_text &&
			this->_field_line == _other._field_line &&
			this->_field_suggestion == _other._field_suggestion;
	}

	inline bool operator!=(_21287ea02_Log _other) { return !this->operator==(_other); }


};


struct _212ae5c02_Token {
	jule::Ptr<_212aed0c2_File> _field_file = jule::Ptr<_212aed0c2_File>();
	jule::I64 _field_row = jule::I64();
	jule::I64 _field_column = jule::I64();
	jule::Str _field_kind = jule::Str();
	jule::U64 _field_id = 0LLU;


	_212ae5c02_Token(jule::Ptr<_212aed0c2_File> __param_file, jule::I64 __param_row, jule::I64 __param_column, jule::Str __param_kind, jule::U64 __param_id): _field_file(__param_file), _field_row(__param_row), _field_column(__param_column), _field_kind(__param_kind), _field_id(__param_id) {}

	

	_212ae5c02_Token(void) = default;

	inline jule::U8 _method_prec(void);


	inline bool operator==(_212ae5c02_Token _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_row == _other._field_row &&
			this->_field_column == _other._field_column &&
			this->_field_kind == _other._field_kind &&
			this->_field_id == _other._field_id;
	}

	inline bool operator!=(_212ae5c02_Token _other) { return !this->operator==(_other); }


};


struct _212aed0c2_File {
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Str _field__path = jule::Str();
	jule::Slice<_212ae5c02_Token> _field__tokens = jule::Slice<_212ae5c02_Token>();


	_212aed0c2_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, jule::Slice<_212ae5c02_Token> __param__tokens): _field_data(__param_data), _field__path(__param__path), _field__tokens(__param__tokens) {}

	

	_212aed0c2_File(void) = default;

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::U64 _method_addr(void);


	inline jule::Slice<_212ae5c02_Token> _method_tokens(void);


	inline jule::Str _method_get_row(jule::I64);


	inline bool operator==(_212aed0c2_File _other) {
		return 
			this->_field_data == _other._field_data &&
			this->_field__path == _other._field__path &&
			this->_field__tokens == _other._field__tokens;
	}

	inline bool operator!=(_212aed0c2_File _other) { return !this->operator==(_other); }


};


struct _212b01317_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::U64 _field_id = 0LLU;


	_212b01317_KindPair(jule::Str __param_kind, jule::U64 __param_id): _field_kind(__param_kind), _field_id(__param_id) {}

	

	_212b01317_KindPair(void) = default;

	inline bool operator==(_212b01317_KindPair _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_id == _other._field_id;
	}

	inline bool operator!=(_212b01317_KindPair _other) { return !this->operator==(_other); }


};


struct _212b08055_Lex {
	jule::Slice<_212ae5c02_Token> _field_tokens = jule::Slice<_212ae5c02_Token>();
	jule::Ptr<_212aed0c2_File> _field_file = jule::Ptr<_212aed0c2_File>();
	jule::I64 _field_pos = jule::I64();
	jule::I64 _field_column = jule::I64();
	jule::I64 _field_row = jule::I64();
	jule::Slice<_21287ea02_Log> _field_errors = jule::Slice<_21287ea02_Log>();


	_212b08055_Lex(jule::Slice<_212ae5c02_Token> __param_tokens, jule::Ptr<_212aed0c2_File> __param_file, jule::I64 __param_pos, jule::I64 __param_column, jule::I64 __param_row, jule::Slice<_21287ea02_Log> __param_errors): _field_tokens(__param_tokens), _field_file(__param_file), _field_pos(__param_pos), _field_column(__param_column), _field_row(__param_row), _field_errors(__param_errors) {}

	

	_212b08055_Lex(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_212ae5c02_Token&,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>&);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_212ae5c02_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>&);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>&);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>&,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>&);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>&,jule::Str,jule::U64,_212ae5c02_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_212ae5c02_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>&,_212ae5c02_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>&,_212ae5c02_Token&);


	inline _212ae5c02_Token _method_token(void);


	inline bool operator==(_212b08055_Lex _other) {
		return 
			this->_field_tokens == _other._field_tokens &&
			this->_field_file == _other._field_file &&
			this->_field_pos == _other._field_pos &&
			this->_field_column == _other._field_column &&
			this->_field_row == _other._field_row &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_212b08055_Lex _other) { return !this->operator==(_other); }


};


struct _2129e26e2_Ast {
	jule::Ptr<_212aed0c2_File> _field_file = jule::Ptr<_212aed0c2_File>();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Slice<jule::Ptr<_212b23d95_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_212b23d95_UseDecl>>();
	jule::Slice<jule::Ptr<_212b26705_Impl>> _field_impls = jule::Slice<jule::Ptr<_212b26705_Impl>>();
	jule::Slice<_2129e2b32_Node> _field_decls = jule::Slice<_2129e2b32_Node>();


	_2129e26e2_Ast(jule::Ptr<_212aed0c2_File> __param_file, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_top_directives, jule::Slice<jule::Ptr<_212b23d95_UseDecl>> __param_use_decls, jule::Slice<jule::Ptr<_212b26705_Impl>> __param_impls, jule::Slice<_2129e2b32_Node> __param_decls): _field_file(__param_file), _field_top_directives(__param_top_directives), _field_use_decls(__param_use_decls), _field_impls(__param_impls), _field_decls(__param_decls) {}

	

	_2129e26e2_Ast(void) = default;

	inline bool operator==(_2129e26e2_Ast _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_top_directives == _other._field_top_directives &&
			this->_field_use_decls == _other._field_use_decls &&
			this->_field_impls == _other._field_impls &&
			this->_field_decls == _other._field_decls;
	}

	inline bool operator!=(_2129e26e2_Ast _other) { return !this->operator==(_other); }


};


struct _2129e3072_CommentGroup {
	jule::Slice<jule::Ptr<_2129e34b2_Comment>> _field_comments = jule::Slice<jule::Ptr<_2129e34b2_Comment>>();


	_2129e3072_CommentGroup(jule::Slice<jule::Ptr<_2129e34b2_Comment>> __param_comments): _field_comments(__param_comments) {}

	

	_2129e3072_CommentGroup(void) = default;

	inline bool operator==(_2129e3072_CommentGroup _other) {
		return 
			this->_field_comments == _other._field_comments;
	}

	inline bool operator!=(_2129e3072_CommentGroup _other) { return !this->operator==(_other); }


};


struct _21298e309_NamespaceTypeDecl {
	jule::Slice<_212ae5c02_Token> _field_idents = jule::Slice<_212ae5c02_Token>();
	jule::Ptr<_2129908e3_IdentTypeDecl> _field_kind = jule::Ptr<_2129908e3_IdentTypeDecl>();


	_21298e309_NamespaceTypeDecl(jule::Slice<_212ae5c02_Token> __param_idents, jule::Ptr<_2129908e3_IdentTypeDecl> __param_kind): _field_idents(__param_idents), _field_kind(__param_kind) {}

	

	_21298e309_NamespaceTypeDecl(void) = default;

	inline bool operator==(_21298e309_NamespaceTypeDecl _other) {
		return 
			this->_field_idents == _other._field_idents &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_21298e309_NamespaceTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b14182_SptrTypeDecl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_elem = jule::Ptr<_2129e3d42_TypeDecl>();


	_212b14182_SptrTypeDecl(jule::Ptr<_2129e3d42_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_212b14182_SptrTypeDecl(void) = default;

	inline bool operator==(_212b14182_SptrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_212b14182_SptrTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b145c2_SlcTypeDecl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_elem = jule::Ptr<_2129e3d42_TypeDecl>();


	_212b145c2_SlcTypeDecl(jule::Ptr<_2129e3d42_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_212b145c2_SlcTypeDecl(void) = default;

	inline bool operator==(_212b145c2_SlcTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_212b145c2_SlcTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b14a12_TupleTypeDecl {
	jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>();


	_212b14a12_TupleTypeDecl(jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> __param_types): _field_types(__param_types) {}

	

	_212b14a12_TupleTypeDecl(void) = default;

	inline bool operator==(_212b14a12_TupleTypeDecl _other) {
		return 
			this->_field_types == _other._field_types;
	}

	inline bool operator!=(_212b14a12_TupleTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b14e52_PtrTypeDecl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_elem = jule::Ptr<_2129e3d42_TypeDecl>();


	_212b14e52_PtrTypeDecl(jule::Ptr<_2129e3d42_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_212b14e52_PtrTypeDecl(void) = default;

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(_212b14e52_PtrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_212b14e52_PtrTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b15392_ArrTypeDecl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_elem = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_212b16162_Expr> _field_size = jule::Ptr<_212b16162_Expr>();


	_212b15392_ArrTypeDecl(jule::Ptr<_2129e3d42_TypeDecl> __param_elem, jule::Ptr<_212b16162_Expr> __param_size): _field_elem(__param_elem), _field_size(__param_size) {}

	

	_212b15392_ArrTypeDecl(void) = default;

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(_212b15392_ArrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem &&
			this->_field_size == _other._field_size;
	}

	inline bool operator!=(_212b15392_ArrTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b157d2_MapTypeDecl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_key = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_2129e3d42_TypeDecl> _field_val = jule::Ptr<_2129e3d42_TypeDecl>();


	_212b157d2_MapTypeDecl(jule::Ptr<_2129e3d42_TypeDecl> __param_key, jule::Ptr<_2129e3d42_TypeDecl> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_212b157d2_MapTypeDecl(void) = default;

	inline bool operator==(_212b157d2_MapTypeDecl _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_212b157d2_MapTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b15c22_RetTypeDecl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Slice<_212ae5c02_Token> _field_idents = jule::Slice<_212ae5c02_Token>();


	_212b15c22_RetTypeDecl(jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Slice<_212ae5c02_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_212b15c22_RetTypeDecl(void) = default;

	inline bool operator==(_212b15c22_RetTypeDecl _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_212b15c22_RetTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b169e2_TupleExpr {
	jule::Slice<jule::Ptr<_212b16162_Expr>> _field_expr = jule::Slice<jule::Ptr<_212b16162_Expr>>();


	_212b169e2_TupleExpr(jule::Slice<jule::Ptr<_212b16162_Expr>> __param_expr): _field_expr(__param_expr) {}

	

	_212b169e2_TupleExpr(void) = default;

	inline bool operator==(_212b169e2_TupleExpr _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b169e2_TupleExpr _other) { return !this->operator==(_other); }


};


struct _212b189c2_CastExpr {
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Any _field_expr = jule::Any();


	_212b189c2_CastExpr(jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Any __param_expr): _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_212b189c2_CastExpr(void) = default;

	inline bool operator==(_212b189c2_CastExpr _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b189c2_CastExpr _other) { return !this->operator==(_other); }


};


struct _212b1a562_StructLit {
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_212b1a562_StructLit(jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs): _field_kind(__param_kind), _field_exprs(__param_exprs) {}

	

	_212b1a562_StructLit(void) = default;

	inline bool operator==(_212b1a562_StructLit _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_212b1a562_StructLit _other) { return !this->operator==(_other); }


};


struct _212b1e555_ScopeTree {
	jule::Ptr<_212b1e555_ScopeTree> _field_parent = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_212b1e555_ScopeTree(jule::Ptr<_212b1e555_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_212b1e555_ScopeTree(void) = default;

	inline bool operator==(_212b1e555_ScopeTree _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_deferred == _other._field_deferred &&
			this->_field_stmts == _other._field_stmts;
	}

	inline bool operator!=(_212b1e555_ScopeTree _other) { return !this->operator==(_other); }


};


struct _212b22b85_Conditional {
	jule::Ptr<_212b22305_If> _field_head = jule::Ptr<_212b22305_If>();
	jule::Slice<jule::Ptr<_212b22305_If>> _field_tail = jule::Slice<jule::Ptr<_212b22305_If>>();
	jule::Ptr<_212b22745_Else> _field_default = jule::Ptr<_212b22745_Else>();


	_212b22b85_Conditional(jule::Ptr<_212b22305_If> __param_head, jule::Slice<jule::Ptr<_212b22305_If>> __param_tail, jule::Ptr<_212b22745_Else> __param_default): _field_head(__param_head), _field_tail(__param_tail), _field_default(__param_default) {}

	

	_212b22b85_Conditional(void) = default;

	inline bool operator==(_212b22b85_Conditional _other) {
		return 
			this->_field_head == _other._field_head &&
			this->_field_tail == _other._field_tail &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_212b22b85_Conditional _other) { return !this->operator==(_other); }


};


struct _212b26705_Impl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_base = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_2129e3d42_TypeDecl> _field_dest = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_212b1edd5_FnDecl>>();
	jule::Slice<jule::Ptr<_212b20325_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_212b20325_VarDecl>>();


	_212b26705_Impl(jule::Ptr<_2129e3d42_TypeDecl> __param_base, jule::Ptr<_2129e3d42_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> __param_methods, jule::Slice<jule::Ptr<_212b20325_VarDecl>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_212b26705_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(_212b26705_Impl _other) {
		return 
			this->_field_base == _other._field_base &&
			this->_field_dest == _other._field_dest &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics;
	}

	inline bool operator!=(_212b26705_Impl _other) { return !this->operator==(_other); }


};


struct _21313d9a8_FileInfo {
	jule::Ptr<_2129e26e2_Ast> _field_ast = jule::Ptr<_2129e26e2_Ast>();
	jule::Slice<_21287ea02_Log> _field_errors = jule::Slice<_21287ea02_Log>();


	_21313d9a8_FileInfo(jule::Ptr<_2129e26e2_Ast> __param_ast, jule::Slice<_21287ea02_Log> __param_errors): _field_ast(__param_ast), _field_errors(__param_errors) {}

	

	_21313d9a8_FileInfo(void) = default;

	inline bool operator==(_21313d9a8_FileInfo _other) {
		return 
			this->_field_ast == _other._field_ast &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_21313d9a8_FileInfo _other) { return !this->operator==(_other); }


};


struct _21318843c_PackageInfo {
	jule::Slice<jule::Ptr<_21313d9a8_FileInfo>> _field_files = jule::Slice<jule::Ptr<_21313d9a8_FileInfo>>();


	_21318843c_PackageInfo(jule::Slice<jule::Ptr<_21313d9a8_FileInfo>> __param_files): _field_files(__param_files) {}

	

	_21318843c_PackageInfo(void) = default;

	inline bool operator==(_21318843c_PackageInfo _other) {
		return 
			this->_field_files == _other._field_files;
	}

	inline bool operator!=(_21318843c_PackageInfo _other) { return !this->operator==(_other); }


};


struct _1e7653d74_Stmt {
	jule::Slice<_212ae5c02_Token> _field_tokens = jule::Slice<_212ae5c02_Token>();
	jule::Bool _field_terminated = jule::Bool();


	_1e7653d74_Stmt(jule::Slice<_212ae5c02_Token> __param_tokens, jule::Bool __param_terminated): _field_tokens(__param_tokens), _field_terminated(__param_terminated) {}

	

	_1e7653d74_Stmt(void) = default;

	inline bool operator==(_1e7653d74_Stmt _other) {
		return 
			this->_field_tokens == _other._field_tokens &&
			this->_field_terminated == _other._field_terminated;
	}

	inline bool operator!=(_1e7653d74_Stmt _other) { return !this->operator==(_other); }


};


struct _1e765489c_ScopeParser {
	jule::Ptr<_1e767b1ba_Parser> _field_p = jule::Ptr<_1e767b1ba_Parser>();
	jule::Ptr<_212b1e555_ScopeTree> _field_s = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _field_stmts = jule::Slice<jule::Ptr<_1e7653d74_Stmt>>();
	jule::I64 _field_pos = jule::I64();


	_1e765489c_ScopeParser(jule::Ptr<_1e767b1ba_Parser> __param_p, jule::Ptr<_212b1e555_ScopeTree> __param_s, jule::Slice<jule::Ptr<_1e7653d74_Stmt>> __param_stmts, jule::I64 __param_pos): _field_p(__param_p), _field_s(__param_s), _field_stmts(__param_stmts), _field_pos(__param_pos) {}

	

	_1e765489c_ScopeParser(void) = default;

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_212ae5c02_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_1e7653d74_Stmt> _method_next(void);


	inline jule::Ptr<_212b1e555_ScopeTree> _method_build_scope(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_var_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_ret_st(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ptr<_1e7653d74_Stmt>&);


	inline jule::Ptr<_212b210e5_WhileKind> _method_build_while_iter_kind(jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Slice<_212ae5c02_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b20325_VarDecl> _method_build_range_kind_key(jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Ptr<_212b20325_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_212ae5c02_Token>>&);


	inline void _method_setup_range_kind_keys_plain(jule::Ptr<_212b21535_RangeKind>&,jule::Slice<_212ae5c02_Token>&);


	inline void _method_setup_range_kind_keys_explicit(jule::Ptr<_212b21535_RangeKind>&,jule::Slice<_212ae5c02_Token>&);


	inline void _method_setup_range_kind_keys(jule::Ptr<_212b21535_RangeKind>&,jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b21535_RangeKind> _method_build_range_iter_kind(jule::Slice<_212ae5c02_Token>&,jule::Slice<_212ae5c02_Token>&,_212ae5c02_Token&);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_212ae5c02_Token>&,_212ae5c02_Token&);


	inline jule::Any _method_build_common_iter(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ptr<_1e7653d74_Stmt>&);


	inline jule::Any _method_build_break_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_cont_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b22305_If> _method_build_if(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b22745_Else> _method_build_else(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_comment_st(_212ae5c02_Token&);


	inline jule::Any _method_build_co_call_st(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_fall_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_212ae5c02_Token>&);


	inline void _method_push_case_expr(jule::Slice<_212ae5c02_Token>,_212ae5c02_Token,jule::Bool,jule::Slice<jule::Ptr<_212b16162_Expr>>&);


	inline jule::Slice<jule::Ptr<_212b16162_Expr>> _method_build_case_exprs(jule::Slice<_212ae5c02_Token>&,jule::Bool);


	inline jule::Ptr<_212b1e555_ScopeTree> _method_build_case_scope(jule::Slice<_212ae5c02_Token>&);


	inline std::tuple<jule::Ptr<_212b23515_Case>,jule::Bool> _method_build_case(jule::Slice<_212ae5c02_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ptr<_212b23515_Case>>,jule::Ptr<_212b22745_Else>> _method_build_cases(jule::Slice<_212ae5c02_Token>,jule::Bool);


	inline jule::Ptr<_212b23955_MatchCase> _method_build_match_case(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1e555_ScopeTree> _method_build_scope_st(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1ce05_LabelSt> _method_build_label_st(jule::Slice<_212ae5c02_Token>&);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_1e76761d7_AssignInfo> _method_build_assign_info(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b1dbc5_AssignLeft> _method_build_assign_l(jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_212ae5c02_Token>>&);


	inline std::tuple<jule::Ptr<_212b1e115_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_212ae5c02_Token>&);


	inline std::tuple<jule::Ptr<_212b1e115_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_212ae5c02_Token>);


	inline std::tuple<jule::Ptr<_212b1e115_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_use_expr(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_st(jule::Ptr<_1e7653d74_Stmt>&);


	inline void _method_build(jule::Slice<_212ae5c02_Token>&,jule::Ptr<_212b1e555_ScopeTree>&);


	inline bool operator==(_1e765489c_ScopeParser _other) {
		return 
			this->_field_p == _other._field_p &&
			this->_field_s == _other._field_s &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_pos == _other._field_pos;
	}

	inline bool operator!=(_1e765489c_ScopeParser _other) { return !this->operator==(_other); }


};


struct _1e7665407_CallData {
	jule::Slice<_212ae5c02_Token> _field_expr_tokens = jule::Slice<_212ae5c02_Token>();
	jule::Slice<_212ae5c02_Token> _field_args_tokens = jule::Slice<_212ae5c02_Token>();
	jule::Slice<_212ae5c02_Token> _field_generics_tokens = jule::Slice<_212ae5c02_Token>();


	_1e7665407_CallData(jule::Slice<_212ae5c02_Token> __param_expr_tokens, jule::Slice<_212ae5c02_Token> __param_args_tokens, jule::Slice<_212ae5c02_Token> __param_generics_tokens): _field_expr_tokens(__param_expr_tokens), _field_args_tokens(__param_args_tokens), _field_generics_tokens(__param_generics_tokens) {}

	

	_1e7665407_CallData(void) = default;

	inline bool operator==(_1e7665407_CallData _other) {
		return 
			this->_field_expr_tokens == _other._field_expr_tokens &&
			this->_field_args_tokens == _other._field_args_tokens &&
			this->_field_generics_tokens == _other._field_generics_tokens;
	}

	inline bool operator!=(_1e7665407_CallData _other) { return !this->operator==(_other); }


};


struct _1e766767e_ExprBuilder {
	jule::Ptr<_1e767b1ba_Parser> _field_p = jule::Ptr<_1e767b1ba_Parser>();


	_1e766767e_ExprBuilder(jule::Ptr<_1e767b1ba_Parser> __param_p): _field_p(__param_p) {}

	

	_1e766767e_ExprBuilder(void) = default;

	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_212b169e2_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_212ae5c02_Token>>&);


	inline jule::Ptr<_212b16e32_LitExpr> _method_build_lit(_212ae5c02_Token);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_primitive_type(_212ae5c02_Token&);


	inline jule::Any _method_build_single(_212ae5c02_Token);


	inline jule::Ptr<_212b17c02_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b18142_UnaryExpr> _method_build_unary(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b19352_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b18e12_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_type(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_sub_ident(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b18582_VariadicExpr> _method_build_variadic(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b189c2_CastExpr> _method_try_build_cast(jule::Slice<_212ae5c02_Token>&);


	inline void _method_push_arg(jule::Slice<jule::Ptr<_212b16162_Expr>>&,jule::Slice<_212ae5c02_Token>,_212ae5c02_Token);


	inline jule::Slice<jule::Ptr<_212b16162_Expr>> _method_build_args(jule::Slice<_212ae5c02_Token>);


	inline jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _method_build_call_generics(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b19bd2_FnCallExpr> _method_build_fn_call(_212ae5c02_Token&,jule::Ptr<_1e7665407_CallData>&);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b17372_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1edd5_FnDecl> _method_build_anon_fn(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_unsafe(jule::Slice<_212ae5c02_Token>&);


	inline void _method_push_range_lit_part(jule::Slice<_212ae5c02_Token>,_212ae5c02_Token,jule::Slice<jule::Slice<_212ae5c02_Token>>&);


	inline jule::Slice<jule::Slice<_212ae5c02_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1a122_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b1a562_StructLit> _method_build_typed_struct_literal(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b1a9a2_BraceLit> _method_build_brace_lit(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_brace_range(jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Slice<_212ae5c02_Token>> _method_get_enumerable_parts(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1b7a5_SliceExpr> _method_build_slice(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1bbe5_IndexingExpr> _method_build_indexing(jule::Slice<_212ae5c02_Token>,jule::Slice<_212ae5c02_Token>,_212ae5c02_Token);


	inline jule::Ptr<_212b1c135_SlicingExpr> _method_build_slicing(jule::Slice<_212ae5c02_Token>&,jule::Slice<_212ae5c02_Token>&,jule::I64&,_212ae5c02_Token&);


	inline jule::Any _method_build_bracket_range(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_ternary(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_data(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b19792_BinopExpr> _method_build_binop(jule::Slice<_212ae5c02_Token>&,jule::I64);


	inline jule::Any _method_build(jule::Slice<_212ae5c02_Token>&);


	inline jule::Any _method_build_kind(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b16162_Expr> _method_build_from_tokens(jule::Slice<_212ae5c02_Token>);


	inline bool operator==(_1e766767e_ExprBuilder _other) {
		return 
			this->_field_p == _other._field_p;
	}

	inline bool operator!=(_1e766767e_ExprBuilder _other) { return !this->operator==(_other); }


};


struct _1e767b1ba_Parser {
	jule::Ptr<_1e767b1ba_Parser> self;

	jule::Ptr<_2129e26e2_Ast> _field_ast = jule::Ptr<_2129e26e2_Ast>();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Ptr<_2129e3072_CommentGroup> _field_comment_group = jule::Ptr<_2129e3072_CommentGroup>();
	jule::Slice<_21287ea02_Log> _field_errors = jule::Slice<_21287ea02_Log>();


	_1e767b1ba_Parser(jule::Ptr<_2129e26e2_Ast> __param_ast, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Ptr<_2129e3072_CommentGroup> __param_comment_group, jule::Slice<_21287ea02_Log> __param_errors): _field_ast(__param_ast), _field_directives(__param_directives), _field_comment_group(__param_comment_group), _field_errors(__param_errors) {
		this->self = jule::Ptr<_1e767b1ba_Parser>::make(this, nullptr);

	}

	~_1e767b1ba_Parser(void) { this->self.ref = nullptr; }

	_1e767b1ba_Parser(void) { this->self = jule::Ptr<_1e767b1ba_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_212b16162_Expr> _method_build_expr(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_2129e3902_Directive> _method_build_directive(jule::Slice<_212ae5c02_Token>);


	inline void _method_push_directive(jule::Ptr<_2129e3902_Directive>);


	inline jule::Ptr<_212b1e555_ScopeTree> _method_build_scope(jule::Slice<_212ae5c02_Token>&);


	inline std::tuple<jule::Ptr<_2129e3d42_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_212ae5c02_Token>&,jule::I64*,jule::Bool);


	inline std::tuple<jule::Ptr<_2129e3d42_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_212ae5c02_Token>&,jule::I64*,jule::Bool);


	inline jule::Ptr<_212b230c5_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_212ae5c02_Token>&);


	inline void _method_build_var_type_and_expr(jule::Ptr<_212b20325_VarDecl>&,jule::Slice<_212ae5c02_Token>&);


	inline void _method_build_var_common(jule::Ptr<_212b20325_VarDecl>&,jule::Slice<_212ae5c02_Token>);


	inline void _method_build_var_begin(jule::Ptr<_212b20325_VarDecl>&,jule::Ptr<jule::I64>,jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b20325_VarDecl> _method_build_var(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1c9b5_GenericDecl> _method_build_generic(jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _method_build_generics(jule::Slice<_212ae5c02_Token>&,_212ae5c02_Token&);


	inline jule::Ptr<_212b1e995_ParamDecl> _method_build_self_param(jule::Slice<_212ae5c02_Token>);


	inline void _method_param_type_begin(jule::Ptr<_212b1e995_ParamDecl>&,jule::I64&,jule::Slice<_212ae5c02_Token>&);


	inline void _method_build_param_type(jule::Ptr<_212b1e995_ParamDecl>&,jule::Slice<_212ae5c02_Token>&);


	inline void _method_param_body_id(jule::Ptr<_212b1e995_ParamDecl>,_212ae5c02_Token);


	inline void _method_build_param_body(jule::Ptr<_212b1e995_ParamDecl>&,jule::Ptr<jule::I64>,jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1e995_ParamDecl> _method_build_param(jule::Slice<_212ae5c02_Token>);


	inline void _method_check_params(jule::Slice<jule::Ptr<_212b1e995_ParamDecl>>&);


	inline jule::Slice<jule::Ptr<_212b1e995_ParamDecl>> _method_build_params(jule::Slice<_212ae5c02_Token>&,jule::Bool);


	inline std::tuple<jule::Ptr<_212b15c22_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_212ae5c02_Token>&,jule::I64&);


	inline std::tuple<jule::Ptr<_212b15c22_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_212ae5c02_Token>&,jule::I64&);


	inline jule::Ptr<_212b1edd5_FnDecl> _method_build_fn_prototype(jule::Slice<_212ae5c02_Token>&,jule::I64&,jule::Bool);


	inline jule::Ptr<_212b1edd5_FnDecl> _method_build_fn(jule::Slice<_212ae5c02_Token>&,jule::Bool,jule::Bool);


	inline jule::Slice<_212ae5c02_Token> _method_get_use_decl_selectors(jule::Slice<_212ae5c02_Token>);


	inline void _method_build_cpp_use_decl(jule::Ptr<_212b23d95_UseDecl>&,jule::Slice<_212ae5c02_Token>&);


	inline void _method_build_std_use_decl(jule::Ptr<_212b23d95_UseDecl>&,jule::Slice<_212ae5c02_Token>);


	inline void _method_build_ident_use_decl(jule::Ptr<_212b23d95_UseDecl>&,jule::Slice<_212ae5c02_Token>);


	inline void _method_parse_use_decl(jule::Ptr<_212b23d95_UseDecl>&,jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b23d95_UseDecl> _method_build_use_decl(jule::Slice<_212ae5c02_Token>,jule::Bool);


	inline jule::Ptr<_212b16162_Expr> _method_build_enum_item_expr(jule::Ptr<jule::I64>,jule::Slice<_212ae5c02_Token>&);


	inline jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>> _method_build_enum_items(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b24725_EnumDecl> _method_build_enum_decl(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b24eea_FieldDecl> _method_build_field(jule::Slice<_212ae5c02_Token>);


	inline jule::Slice<jule::Ptr<_212b24eea_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b2587a_StructDecl> _method_build_struct_decl(jule::Slice<_212ae5c02_Token>&);


	inline void _method_check_method_receiver(jule::Ptr<_212b1edd5_FnDecl>&);


	inline jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> _method_build_trait_methods(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b1ade2_TraitDecl> _method_build_trait_decl(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b1edd5_FnDecl> _method_build_cpp_link_fn(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b20325_VarDecl> _method_build_cpp_link_var(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b2587a_StructDecl> _method_build_cpp_link_struct(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b230c5_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_212ae5c02_Token>);


	inline jule::Ptr<_212b23d95_UseDecl> _method_build_cpp_link_use(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b1edd5_FnDecl> _method_get_method(jule::Slice<_212ae5c02_Token>&);


	inline void _method_parse_impl_body(jule::Ptr<_212b26705_Impl>&,jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_212b26705_Impl> _method_build_impl(jule::Slice<_212ae5c02_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_212ae5c02_Token>&);


	inline void _method_check_comment_group(_2129e2b32_Node&);


	inline void _method_check_directive(_2129e2b32_Node&);


	inline void _method_apply_fn_meta(jule::Ptr<_212b1edd5_FnDecl>&,jule::Bool);


	inline void _method_apply_meta(_2129e2b32_Node&,jule::Bool);


	inline void _method_check_use_decl(_2129e2b32_Node&);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_212ae5c02_Token>);


	inline _2129e2b32_Node _method_parse_node(jule::Slice<_212ae5c02_Token>&);


	inline void _method_append_node(jule::Slice<_212ae5c02_Token>&);


	inline void _method_remove_range(jule::I64,jule::Str,jule::Slice<_212ae5c02_Token>&,jule::Slice<jule::I64>&);


	inline void _method_push_wrong_order_close_err(_212ae5c02_Token&,jule::Slice<_212ae5c02_Token>&,jule::Slice<jule::I64>&);


	inline void _method_push_range_close(_212ae5c02_Token,jule::Str,jule::Slice<_212ae5c02_Token>&,jule::Slice<jule::I64>&);


	inline void _method_check_ranges(jule::Slice<_212ae5c02_Token>&);


	inline void _method_parse(jule::Ptr<_212aed0c2_File>&);


	inline bool operator==(_1e767b1ba_Parser _other) {
		return 
			this->_field_ast == _other._field_ast &&
			this->_field_directives == _other._field_directives &&
			this->_field_comment_group == _other._field_comment_group &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_1e767b1ba_Parser _other) { return !this->operator==(_other); }


};


struct _1e769304a_TypeBuilder {
	jule::Ptr<_1e767b1ba_Parser> _field_p = jule::Ptr<_1e767b1ba_Parser>();
	jule::Slice<_212ae5c02_Token> _field_tokens = jule::Slice<_212ae5c02_Token>();
	jule::I64* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();


	_1e769304a_TypeBuilder(jule::Ptr<_1e767b1ba_Parser> __param_p, jule::Slice<_212ae5c02_Token> __param_tokens, jule::I64* __param_i, jule::Bool __param_err): _field_p(__param_p), _field_tokens(__param_tokens), _field_i(__param_i), _field_err(__param_err) {}

	

	_1e769304a_TypeBuilder(void) = default;

	inline void _method_push_err(_212ae5c02_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_prim(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_212ae5c02_Token>> _method_ident_generics(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_ident(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_fn(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_ptr(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_sptr(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_op(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_slc(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_arr(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_map(jule::I64,jule::Slice<_212ae5c02_Token>&);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_build_enumerable(void);


	inline jule::Ptr<_2129e3d42_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ptr<_2129e3d42_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(_1e769304a_TypeBuilder _other) {
		return 
			this->_field_p == _other._field_p &&
			this->_field_tokens == _other._field_tokens &&
			this->_field_i == _other._field_i &&
			this->_field_err == _other._field_err;
	}

	inline bool operator!=(_1e769304a_TypeBuilder _other) { return !this->operator==(_other); }


};


struct _1ce045d56_FloatInfo {
	jule::U64 _field_mantbits = jule::U64();
	jule::U64 _field_expbits = jule::U64();
	jule::I64 _field_bias = jule::I64();


	_1ce045d56_FloatInfo(jule::U64 __param_mantbits, jule::U64 __param_expbits, jule::I64 __param_bias): _field_mantbits(__param_mantbits), _field_expbits(__param_expbits), _field_bias(__param_bias) {}

	

	_1ce045d56_FloatInfo(void) = default;

	inline bool operator==(_1ce045d56_FloatInfo _other) {
		return 
			this->_field_mantbits == _other._field_mantbits &&
			this->_field_expbits == _other._field_expbits &&
			this->_field_bias == _other._field_bias;
	}

	inline bool operator!=(_1ce045d56_FloatInfo _other) { return !this->operator==(_other); }


};


struct _1cde9edae_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::I64 _field_nd = jule::I64();
	jule::I64 _field_dp = jule::I64();
	jule::Bool _field_neg = jule::Bool();


	_1cde9edae_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::I64 __param_nd, jule::I64 __param_dp, jule::Bool __param_neg): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg) {}

	

	_1cde9edae_DecimalSlice(void) = default;

	inline bool operator==(_1cde9edae_DecimalSlice _other) {
		return 
			this->_field_d == _other._field_d &&
			this->_field_nd == _other._field_nd &&
			this->_field_dp == _other._field_dp &&
			this->_field_neg == _other._field_neg;
	}

	inline bool operator!=(_1cde9edae_DecimalSlice _other) { return !this->operator==(_other); }


};


struct _1ce0e76ee_LeftCheat {
	jule::I64 _field_delta = jule::I64();
	jule::Str _field_cutoff = jule::Str();


	_1ce0e76ee_LeftCheat(jule::I64 __param_delta, jule::Str __param_cutoff): _field_delta(__param_delta), _field_cutoff(__param_cutoff) {}

	

	_1ce0e76ee_LeftCheat(void) = default;

	inline bool operator==(_1ce0e76ee_LeftCheat _other) {
		return 
			this->_field_delta == _other._field_delta &&
			this->_field_cutoff == _other._field_cutoff;
	}

	inline bool operator!=(_1ce0e76ee_LeftCheat _other) { return !this->operator==(_other); }


};


struct _1cde2b80d_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::I64 _field_nd = jule::I64();
	jule::I64 _field_dp = jule::I64();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();


	_1cde2b80d_Decimal(jule::Array<jule::U8,800> __param_d, jule::I64 __param_nd, jule::I64 __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg), _field_trunc(__param_trunc) {}

	

	_1cde2b80d_Decimal(void) = default;

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_1ce045d56_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::I64);


	inline void _method_round_down(jule::I64);


	inline void _method_round_up(jule::I64);


	inline void _method_round(jule::I64);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(_1cde2b80d_Decimal _other) {
		return 
			this->_field_d == _other._field_d &&
			this->_field_nd == _other._field_nd &&
			this->_field_dp == _other._field_dp &&
			this->_field_neg == _other._field_neg &&
			this->_field_trunc == _other._field_trunc;
	}

	inline bool operator!=(_1cde2b80d_Decimal _other) { return !this->operator==(_other); }


};


struct _1ce4b898d_Const {
	jule::Any _field_data = jule::Any();


	_1ce4b898d_Const(jule::Any __param_data): _field_data(__param_data) {}

	

	_1ce4b898d_Const(void) = default;

	static inline jule::Ptr<_1ce4b898d_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ptr<_1ce4b898d_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ptr<_1ce4b898d_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ptr<_1ce4b898d_Const> _static_method_new_str(jule::Str);


	static inline jule::Ptr<_1ce4b898d_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ptr<_1ce4b898d_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_1ce4b898d_Const);


	inline jule::Bool _method_and(_1ce4b898d_Const);


	inline jule::Bool _method_or(_1ce4b898d_Const);


	inline jule::Bool _method_eq(_1ce4b898d_Const);


	inline jule::Bool _method_lt(_1ce4b898d_Const);


	inline jule::Bool _method_lt_eq(_1ce4b898d_Const);


	inline jule::Bool _method_gt(_1ce4b898d_Const);


	inline jule::Bool _method_gt_eq(_1ce4b898d_Const);


	inline jule::Bool _method_add(_1ce4b898d_Const);


	inline jule::Bool _method_sub(_1ce4b898d_Const);


	inline jule::Bool _method_mul(_1ce4b898d_Const);


	inline jule::Bool _method_div(_1ce4b898d_Const);


	inline jule::Bool _method_mod(_1ce4b898d_Const);


	inline jule::Bool _method_bitwise_and(_1ce4b898d_Const);


	inline jule::Bool _method_bitwise_or(_1ce4b898d_Const);


	inline jule::Bool _method_xor(_1ce4b898d_Const);


	inline jule::Bool _method_lshift(_1ce4b898d_Const);


	inline jule::Bool _method_rshift(_1ce4b898d_Const);


	inline jule::Bool operator==(_1ce4b898d_Const _other) { return this->_method_eq(_other); }

	inline bool operator!=(_1ce4b898d_Const _other) { return !this->operator==(_other); }

	inline jule::Bool operator>(_1ce4b898d_Const _other) { return this->_method_gt(_other); }

	inline jule::Bool operator>=(_1ce4b898d_Const _other) { return this->_method_gt_eq(_other); }

	inline jule::Bool operator<(_1ce4b898d_Const _other) { return this->_method_lt(_other); }

	inline jule::Bool operator<=(_1ce4b898d_Const _other) { return this->_method_lt_eq(_other); }


};


struct _1b54b9d82_FileStream: public _1b54bac95_Reader,public _1b54bb339_Writer,public _1b54bb900_Stream {
	jule::Ptr<_211184b99_File> _field_buff = jule::Ptr<_211184b99_File>();


	_1b54b9d82_FileStream(jule::Ptr<_211184b99_File> __param_buff): _field_buff(__param_buff) {}

	

	_1b54b9d82_FileStream(void) = default;

	static inline jule::Ptr<_1b54b9d82_FileStream> _static_method_new(jule::Ptr<_211184b99_File>);


	inline jule::Exceptional<jule::I64> _method_read(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::I64> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Slice<jule::U8>> _method_read_line(void);


	inline bool operator==(_1b54b9d82_FileStream _other) {
		return 
			this->_field_buff == _other._field_buff;
	}

	inline bool operator!=(_1b54b9d82_FileStream _other) { return !this->operator==(_other); }


};


struct _1b54bc5e3_ByteStream: public _1b54bac95_Reader,public _1b54bb339_Writer,public _1b54bb900_Stream {
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();


	_1b54bc5e3_ByteStream(jule::Slice<jule::U8> __param_buff): _field_buff(__param_buff) {}

	

	_1b54bc5e3_ByteStream(void) = default;

	inline jule::Exceptional<jule::I64> _method_read(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::I64> _method_write(jule::Slice<jule::U8>);


	static inline jule::Ptr<_1b54bc5e3_ByteStream> _static_method_new(void);


	inline jule::Bool _method_data(void);


	inline void _method_fit(void);


	inline bool operator==(_1b54bc5e3_ByteStream _other) {
		return 
			this->_field_buff == _other._field_buff;
	}

	inline bool operator!=(_1b54bc5e3_ByteStream _other) { return !this->operator==(_other); }


};


struct _1b54c05c4_Scanner {
	jule::Trait<_1b54bac95_Reader> _field_r = jule::Trait<_1b54bac95_Reader>();
	jule::Slice<jule::U8> _field_b = jule::Slice<jule::U8>();


	_1b54c05c4_Scanner(jule::Trait<_1b54bac95_Reader> __param_r, jule::Slice<jule::U8> __param_b): _field_r(__param_r), _field_b(__param_b) {}

	

	_1b54c05c4_Scanner(void) = default;

	static inline jule::Ptr<_1b54c05c4_Scanner> _static_method_new(jule::Trait<_1b54bac95_Reader>);


	static inline jule::Ptr<_1b54c05c4_Scanner> _static_method_newf(jule::Ptr<_211184b99_File>);


	inline void _method_reset(void);


	inline jule::Slice<jule::U8> _method_bytes(void);


	inline jule::Str _method_text(void);


	inline jule::Exceptional<jule::Bool> _method_scan(void);


	inline bool operator==(_1b54c05c4_Scanner _other) {
		return 
			this->_field_r == _other._field_r &&
			this->_field_b == _other._field_b;
	}

	inline bool operator!=(_1b54c05c4_Scanner _other) { return !this->operator==(_other); }


};


struct _1e83ac923_OperatorMap {
	jule::Ptr<_1e83d4384_Fn> _field_eq = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_gt = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_gt_eq = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_lt = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_lt_eq = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_shl = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_shr = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_add = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_sub = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_div = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_mul = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_mod = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_and = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_or = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_xor = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_neg = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_pos = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_not = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_add_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_sub_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_div_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_mul_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_mod_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_shl_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_shr_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_or_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_and_assign = jule::Ptr<_1e83d4384_Fn>();
	jule::Ptr<_1e83d4384_Fn> _field_bit_xor_assign = jule::Ptr<_1e83d4384_Fn>();


	_1e83ac923_OperatorMap(jule::Ptr<_1e83d4384_Fn> __param_eq, jule::Ptr<_1e83d4384_Fn> __param_gt, jule::Ptr<_1e83d4384_Fn> __param_gt_eq, jule::Ptr<_1e83d4384_Fn> __param_lt, jule::Ptr<_1e83d4384_Fn> __param_lt_eq, jule::Ptr<_1e83d4384_Fn> __param_shl, jule::Ptr<_1e83d4384_Fn> __param_shr, jule::Ptr<_1e83d4384_Fn> __param_add, jule::Ptr<_1e83d4384_Fn> __param_sub, jule::Ptr<_1e83d4384_Fn> __param_div, jule::Ptr<_1e83d4384_Fn> __param_mul, jule::Ptr<_1e83d4384_Fn> __param_mod, jule::Ptr<_1e83d4384_Fn> __param_bit_and, jule::Ptr<_1e83d4384_Fn> __param_bit_or, jule::Ptr<_1e83d4384_Fn> __param_bit_xor, jule::Ptr<_1e83d4384_Fn> __param_neg, jule::Ptr<_1e83d4384_Fn> __param_pos, jule::Ptr<_1e83d4384_Fn> __param_bit_not, jule::Ptr<_1e83d4384_Fn> __param_add_assign, jule::Ptr<_1e83d4384_Fn> __param_sub_assign, jule::Ptr<_1e83d4384_Fn> __param_div_assign, jule::Ptr<_1e83d4384_Fn> __param_mul_assign, jule::Ptr<_1e83d4384_Fn> __param_mod_assign, jule::Ptr<_1e83d4384_Fn> __param_shl_assign, jule::Ptr<_1e83d4384_Fn> __param_shr_assign, jule::Ptr<_1e83d4384_Fn> __param_bit_or_assign, jule::Ptr<_1e83d4384_Fn> __param_bit_and_assign, jule::Ptr<_1e83d4384_Fn> __param_bit_xor_assign): _field_eq(__param_eq), _field_gt(__param_gt), _field_gt_eq(__param_gt_eq), _field_lt(__param_lt), _field_lt_eq(__param_lt_eq), _field_shl(__param_shl), _field_shr(__param_shr), _field_add(__param_add), _field_sub(__param_sub), _field_div(__param_div), _field_mul(__param_mul), _field_mod(__param_mod), _field_bit_and(__param_bit_and), _field_bit_or(__param_bit_or), _field_bit_xor(__param_bit_xor), _field_neg(__param_neg), _field_pos(__param_pos), _field_bit_not(__param_bit_not), _field_add_assign(__param_add_assign), _field_sub_assign(__param_sub_assign), _field_div_assign(__param_div_assign), _field_mul_assign(__param_mul_assign), _field_mod_assign(__param_mod_assign), _field_shl_assign(__param_shl_assign), _field_shr_assign(__param_shr_assign), _field_bit_or_assign(__param_bit_or_assign), _field_bit_and_assign(__param_bit_and_assign), _field_bit_xor_assign(__param_bit_xor_assign) {}

	

	_1e83ac923_OperatorMap(void) = default;

	inline bool operator==(_1e83ac923_OperatorMap _other) {
		return 
			this->_field_eq == _other._field_eq &&
			this->_field_gt == _other._field_gt &&
			this->_field_gt_eq == _other._field_gt_eq &&
			this->_field_lt == _other._field_lt &&
			this->_field_lt_eq == _other._field_lt_eq &&
			this->_field_shl == _other._field_shl &&
			this->_field_shr == _other._field_shr &&
			this->_field_add == _other._field_add &&
			this->_field_sub == _other._field_sub &&
			this->_field_div == _other._field_div &&
			this->_field_mul == _other._field_mul &&
			this->_field_mod == _other._field_mod &&
			this->_field_bit_and == _other._field_bit_and &&
			this->_field_bit_or == _other._field_bit_or &&
			this->_field_bit_xor == _other._field_bit_xor &&
			this->_field_neg == _other._field_neg &&
			this->_field_pos == _other._field_pos &&
			this->_field_bit_not == _other._field_bit_not &&
			this->_field_add_assign == _other._field_add_assign &&
			this->_field_sub_assign == _other._field_sub_assign &&
			this->_field_div_assign == _other._field_div_assign &&
			this->_field_mul_assign == _other._field_mul_assign &&
			this->_field_mod_assign == _other._field_mod_assign &&
			this->_field_shl_assign == _other._field_shl_assign &&
			this->_field_shr_assign == _other._field_shr_assign &&
			this->_field_bit_or_assign == _other._field_bit_or_assign &&
			this->_field_bit_and_assign == _other._field_bit_and_assign &&
			this->_field_bit_xor_assign == _other._field_bit_xor_assign;
	}

	inline bool operator!=(_1e83ac923_OperatorMap _other) { return !this->operator==(_other); }


};


struct _1e83ae55c_Operators {
	jule::Ptr<_1e83d630e_FnIns> _field_eq = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_gt = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_gt_eq = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_lt = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_lt_eq = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_shl = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_shr = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_add = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_sub = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_div = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_mul = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_mod = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_and = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_or = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_xor = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_neg = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_pos = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_not = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_add_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_sub_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_div_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_mul_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_mod_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_shl_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_shr_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_or_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_and_assign = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d630e_FnIns> _field_bit_xor_assign = jule::Ptr<_1e83d630e_FnIns>();


	_1e83ae55c_Operators(jule::Ptr<_1e83d630e_FnIns> __param_eq, jule::Ptr<_1e83d630e_FnIns> __param_gt, jule::Ptr<_1e83d630e_FnIns> __param_gt_eq, jule::Ptr<_1e83d630e_FnIns> __param_lt, jule::Ptr<_1e83d630e_FnIns> __param_lt_eq, jule::Ptr<_1e83d630e_FnIns> __param_shl, jule::Ptr<_1e83d630e_FnIns> __param_shr, jule::Ptr<_1e83d630e_FnIns> __param_add, jule::Ptr<_1e83d630e_FnIns> __param_sub, jule::Ptr<_1e83d630e_FnIns> __param_div, jule::Ptr<_1e83d630e_FnIns> __param_mul, jule::Ptr<_1e83d630e_FnIns> __param_mod, jule::Ptr<_1e83d630e_FnIns> __param_bit_and, jule::Ptr<_1e83d630e_FnIns> __param_bit_or, jule::Ptr<_1e83d630e_FnIns> __param_bit_xor, jule::Ptr<_1e83d630e_FnIns> __param_neg, jule::Ptr<_1e83d630e_FnIns> __param_pos, jule::Ptr<_1e83d630e_FnIns> __param_bit_not, jule::Ptr<_1e83d630e_FnIns> __param_add_assign, jule::Ptr<_1e83d630e_FnIns> __param_sub_assign, jule::Ptr<_1e83d630e_FnIns> __param_div_assign, jule::Ptr<_1e83d630e_FnIns> __param_mul_assign, jule::Ptr<_1e83d630e_FnIns> __param_mod_assign, jule::Ptr<_1e83d630e_FnIns> __param_shl_assign, jule::Ptr<_1e83d630e_FnIns> __param_shr_assign, jule::Ptr<_1e83d630e_FnIns> __param_bit_or_assign, jule::Ptr<_1e83d630e_FnIns> __param_bit_and_assign, jule::Ptr<_1e83d630e_FnIns> __param_bit_xor_assign): _field_eq(__param_eq), _field_gt(__param_gt), _field_gt_eq(__param_gt_eq), _field_lt(__param_lt), _field_lt_eq(__param_lt_eq), _field_shl(__param_shl), _field_shr(__param_shr), _field_add(__param_add), _field_sub(__param_sub), _field_div(__param_div), _field_mul(__param_mul), _field_mod(__param_mod), _field_bit_and(__param_bit_and), _field_bit_or(__param_bit_or), _field_bit_xor(__param_bit_xor), _field_neg(__param_neg), _field_pos(__param_pos), _field_bit_not(__param_bit_not), _field_add_assign(__param_add_assign), _field_sub_assign(__param_sub_assign), _field_div_assign(__param_div_assign), _field_mul_assign(__param_mul_assign), _field_mod_assign(__param_mod_assign), _field_shl_assign(__param_shl_assign), _field_shr_assign(__param_shr_assign), _field_bit_or_assign(__param_bit_or_assign), _field_bit_and_assign(__param_bit_and_assign), _field_bit_xor_assign(__param_bit_xor_assign) {}

	

	_1e83ae55c_Operators(void) = default;

	inline bool operator==(_1e83ae55c_Operators _other) {
		return 
			this->_field_eq == _other._field_eq &&
			this->_field_gt == _other._field_gt &&
			this->_field_gt_eq == _other._field_gt_eq &&
			this->_field_lt == _other._field_lt &&
			this->_field_lt_eq == _other._field_lt_eq &&
			this->_field_shl == _other._field_shl &&
			this->_field_shr == _other._field_shr &&
			this->_field_add == _other._field_add &&
			this->_field_sub == _other._field_sub &&
			this->_field_div == _other._field_div &&
			this->_field_mul == _other._field_mul &&
			this->_field_mod == _other._field_mod &&
			this->_field_bit_and == _other._field_bit_and &&
			this->_field_bit_or == _other._field_bit_or &&
			this->_field_bit_xor == _other._field_bit_xor &&
			this->_field_neg == _other._field_neg &&
			this->_field_pos == _other._field_pos &&
			this->_field_bit_not == _other._field_bit_not &&
			this->_field_add_assign == _other._field_add_assign &&
			this->_field_sub_assign == _other._field_sub_assign &&
			this->_field_div_assign == _other._field_div_assign &&
			this->_field_mul_assign == _other._field_mul_assign &&
			this->_field_mod_assign == _other._field_mod_assign &&
			this->_field_shl_assign == _other._field_shl_assign &&
			this->_field_shr_assign == _other._field_shr_assign &&
			this->_field_bit_or_assign == _other._field_bit_or_assign &&
			this->_field_bit_and_assign == _other._field_bit_and_assign &&
			this->_field_bit_xor_assign == _other._field_bit_xor_assign;
	}

	inline bool operator!=(_1e83ae55c_Operators _other) { return !this->operator==(_other); }


};


struct _1e83b2cbe_FieldIns {
	jule::Ptr<_1e82e47a0_Field> _field_decl = jule::Ptr<_1e82e47a0_Field>();
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce727449_Data> _field_default = jule::Ptr<_1ce727449_Data>();


	_1e83b2cbe_FieldIns(jule::Ptr<_1e82e47a0_Field> __param_decl, jule::Ptr<_1ce76121e_TypeKind> __param_kind, jule::Ptr<_1ce727449_Data> __param_default): _field_decl(__param_decl), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_1e83b2cbe_FieldIns(void) = default;

	inline bool operator==(_1e83b2cbe_FieldIns _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1e83b2cbe_FieldIns _other) { return !this->operator==(_other); }


};


struct _1e83bdbcb_OperandExprModel {
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Any _field_model = jule::Any();


	_1e83bdbcb_OperandExprModel(jule::Ptr<_1ce76121e_TypeKind> __param_kind, jule::Any __param_model): _field_kind(__param_kind), _field_model(__param_model) {}

	

	_1e83bdbcb_OperandExprModel(void) = default;

	inline bool operator==(_1e83bdbcb_OperandExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_1e83bdbcb_OperandExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c044c_StructArgExprModel {
	jule::Ptr<_1e83b2cbe_FieldIns> _field_field = jule::Ptr<_1e83b2cbe_FieldIns>();
	jule::Any _field_expr = jule::Any();


	_1e83c044c_StructArgExprModel(jule::Ptr<_1e83b2cbe_FieldIns> __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1e83c044c_StructArgExprModel(void) = default;

	inline bool operator==(_1e83c044c_StructArgExprModel _other) {
		return 
			this->_field_field == _other._field_field &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83c044c_StructArgExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c1393_AllocStructLitExprModel {
	jule::Ptr<_1e83c0bbc_StructLitExprModel> _field_lit = jule::Ptr<_1e83c0bbc_StructLitExprModel>();


	_1e83c1393_AllocStructLitExprModel(jule::Ptr<_1e83c0bbc_StructLitExprModel> __param_lit): _field_lit(__param_lit) {}

	

	_1e83c1393_AllocStructLitExprModel(void) = default;

	inline bool operator==(_1e83c1393_AllocStructLitExprModel _other) {
		return 
			this->_field_lit == _other._field_lit;
	}

	inline bool operator!=(_1e83c1393_AllocStructLitExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c31b9_SliceExprModel {
	jule::Ptr<_1ce76121e_TypeKind> _field_elem_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1e83c31b9_SliceExprModel(jule::Ptr<_1ce76121e_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems): _field_elem_kind(__param_elem_kind), _field_elems(__param_elems) {}

	

	_1e83c31b9_SliceExprModel(void) = default;

	inline bool operator==(_1e83c31b9_SliceExprModel _other) {
		return 
			this->_field_elem_kind == _other._field_elem_kind &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_1e83c31b9_SliceExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c4220_AnonFnExprModel {
	jule::Ptr<_1e83d630e_FnIns> _field_func = jule::Ptr<_1e83d630e_FnIns>();
	jule::Bool _field_global = jule::Bool();


	_1e83c4220_AnonFnExprModel(jule::Ptr<_1e83d630e_FnIns> __param_func, jule::Bool __param_global): _field_func(__param_func), _field_global(__param_global) {}

	

	_1e83c4220_AnonFnExprModel(void) = default;

	inline bool operator==(_1e83c4220_AnonFnExprModel _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_global == _other._field_global;
	}

	inline bool operator!=(_1e83c4220_AnonFnExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c4880_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();


	_1e83c4880_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1e83c4880_KeyValPairExprModel(void) = default;

	inline bool operator==(_1e83c4880_KeyValPairExprModel _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_1e83c4880_KeyValPairExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c5056_MapExprModel {
	jule::Ptr<_1ce76121e_TypeKind> _field_key_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce76121e_TypeKind> _field_val_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Slice<jule::Ptr<_1e83c4880_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_1e83c4880_KeyValPairExprModel>>();


	_1e83c5056_MapExprModel(jule::Ptr<_1ce76121e_TypeKind> __param_key_kind, jule::Ptr<_1ce76121e_TypeKind> __param_val_kind, jule::Slice<jule::Ptr<_1e83c4880_KeyValPairExprModel>> __param_entries): _field_key_kind(__param_key_kind), _field_val_kind(__param_val_kind), _field_entries(__param_entries) {}

	

	_1e83c5056_MapExprModel(void) = default;

	inline bool operator==(_1e83c5056_MapExprModel _other) {
		return 
			this->_field_key_kind == _other._field_key_kind &&
			this->_field_val_kind == _other._field_val_kind &&
			this->_field_entries == _other._field_entries;
	}

	inline bool operator!=(_1e83c5056_MapExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c6d16_StructSubIdentExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ce76121e_TypeKind> _field_expr_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1e83d630e_FnIns> _field_method = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83b2cbe_FieldIns> _field_field = jule::Ptr<_1e83b2cbe_FieldIns>();


	_1e83c6d16_StructSubIdentExprModel(jule::Any __param_expr, jule::Ptr<_1ce76121e_TypeKind> __param_expr_kind, jule::Ptr<_1e83d630e_FnIns> __param_method, jule::Ptr<_1e83b2cbe_FieldIns> __param_field): _field_expr(__param_expr), _field_expr_kind(__param_expr_kind), _field_method(__param_method), _field_field(__param_field) {}

	

	_1e83c6d16_StructSubIdentExprModel(void) = default;

	inline bool operator==(_1e83c6d16_StructSubIdentExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_expr_kind == _other._field_expr_kind &&
			this->_field_method == _other._field_method &&
			this->_field_field == _other._field_field;
	}

	inline bool operator!=(_1e83c6d16_StructSubIdentExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c76a7_StructStaticIdentExprModel {
	jule::Ptr<_1e83b84bc_StructIns> _field_structure = jule::Ptr<_1e83b84bc_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1e83d630e_FnIns> _field_method = jule::Ptr<_1e83d630e_FnIns>();


	_1e83c76a7_StructStaticIdentExprModel(jule::Ptr<_1e83b84bc_StructIns> __param_structure, jule::Any __param_expr, jule::Ptr<_1e83d630e_FnIns> __param_method): _field_structure(__param_structure), _field_expr(__param_expr), _field_method(__param_method) {}

	

	_1e83c76a7_StructStaticIdentExprModel(void) = default;

	inline bool operator==(_1e83c76a7_StructStaticIdentExprModel _other) {
		return 
			this->_field_structure == _other._field_structure &&
			this->_field_expr == _other._field_expr &&
			this->_field_method == _other._field_method;
	}

	inline bool operator!=(_1e83c76a7_StructStaticIdentExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c8004_ArrayExprModel {
	jule::Ptr<_1ce764244_Arr> _field_kind = jule::Ptr<_1ce764244_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1e83c8004_ArrayExprModel(jule::Ptr<_1ce764244_Arr> __param_kind, jule::Slice<jule::Any> __param_elems): _field_kind(__param_kind), _field_elems(__param_elems) {}

	

	_1e83c8004_ArrayExprModel(void) = default;

	inline bool operator==(_1e83c8004_ArrayExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_1e83c8004_ArrayExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c87c9_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();


	_1e83c87c9_CommonIdentExprModel(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1e83c87c9_CommonIdentExprModel(void) = default;

	inline bool operator==(_1e83c87c9_CommonIdentExprModel _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e83c87c9_CommonIdentExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c8c3b_CommonSubIdentExprModel {
	jule::Ptr<_1ce76121e_TypeKind> _field_expr_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1e83c8c3b_CommonSubIdentExprModel(jule::Ptr<_1ce76121e_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident): _field_expr_kind(__param_expr_kind), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1e83c8c3b_CommonSubIdentExprModel(void) = default;

	inline bool operator==(_1e83c8c3b_CommonSubIdentExprModel _other) {
		return 
			this->_field_expr_kind == _other._field_expr_kind &&
			this->_field_expr == _other._field_expr &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e83c8c3b_CommonSubIdentExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c95aa_TupleExprModel {
	jule::Slice<jule::Ptr<_1ce727449_Data>> _field_datas = jule::Slice<jule::Ptr<_1ce727449_Data>>();


	_1e83c95aa_TupleExprModel(jule::Slice<jule::Ptr<_1ce727449_Data>> __param_datas): _field_datas(__param_datas) {}

	

	_1e83c95aa_TupleExprModel(void) = default;

	inline bool operator==(_1e83c95aa_TupleExprModel _other) {
		return 
			this->_field_datas == _other._field_datas;
	}

	inline bool operator!=(_1e83c95aa_TupleExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c9b1b_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1e83c9b1b_BuiltinOutCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1e83c9b1b_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(_1e83c9b1b_BuiltinOutCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_debug == _other._field_debug;
	}

	inline bool operator!=(_1e83c9b1b_BuiltinOutCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83ca39c_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1e83ca39c_BuiltinOutlnCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1e83ca39c_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(_1e83ca39c_BuiltinOutlnCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_debug == _other._field_debug;
	}

	inline bool operator!=(_1e83ca39c_BuiltinOutlnCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83caac8_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();


	_1e83caac8_BuiltinCloneCallExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e83caac8_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(_1e83caac8_BuiltinCloneCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83caac8_BuiltinCloneCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83cb1e4_BuiltinNewCallExprModel {
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Any _field_init = jule::Any();


	_1e83cb1e4_BuiltinNewCallExprModel(jule::Ptr<_1ce76121e_TypeKind> __param_kind, jule::Any __param_init): _field_kind(__param_kind), _field_init(__param_init) {}

	

	_1e83cb1e4_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(_1e83cb1e4_BuiltinNewCallExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_init == _other._field_init;
	}

	inline bool operator!=(_1e83cb1e4_BuiltinNewCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83cc987_BuiltinMakeCallExprModel {
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();


	_1e83cc987_BuiltinMakeCallExprModel(jule::Ptr<_1ce76121e_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap): _field_kind(__param_kind), _field_len(__param_len), _field_cap(__param_cap) {}

	

	_1e83cc987_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(_1e83cc987_BuiltinMakeCallExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_len == _other._field_len &&
			this->_field_cap == _other._field_cap;
	}

	inline bool operator!=(_1e83cc987_BuiltinMakeCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83cd2c3_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();


	_1e83cd2c3_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements): _field_dest(__param_dest), _field_elements(__param_elements) {}

	

	_1e83cd2c3_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(_1e83cd2c3_BuiltinAppendCallExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_elements == _other._field_elements;
	}

	inline bool operator!=(_1e83cd2c3_BuiltinAppendCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83cd9ee_BuiltinErrorCallExprModel {
	jule::Ptr<_1e83d630e_FnIns> _field_func = jule::Ptr<_1e83d630e_FnIns>();
	jule::Any _field_err = jule::Any();


	_1e83cd9ee_BuiltinErrorCallExprModel(jule::Ptr<_1e83d630e_FnIns> __param_func, jule::Any __param_err): _field_func(__param_func), _field_err(__param_err) {}

	

	_1e83cd9ee_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(_1e83cd9ee_BuiltinErrorCallExprModel _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_err == _other._field_err;
	}

	inline bool operator!=(_1e83cd9ee_BuiltinErrorCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83ce22a_SizeofExprModel {
	jule::Any _field_expr = jule::Any();


	_1e83ce22a_SizeofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e83ce22a_SizeofExprModel(void) = default;

	inline bool operator==(_1e83ce22a_SizeofExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83ce22a_SizeofExprModel _other) { return !this->operator==(_other); }


};


struct _1e83cec97_AlignofExprModel {
	jule::Any _field_expr = jule::Any();


	_1e83cec97_AlignofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e83cec97_AlignofExprModel(void) = default;

	inline bool operator==(_1e83cec97_AlignofExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83cec97_AlignofExprModel _other) { return !this->operator==(_other); }


};


struct _1e83d01d7_RuneExprModel {
	jule::I32 _field_code = jule::I32();


	_1e83d01d7_RuneExprModel(jule::I32 __param_code): _field_code(__param_code) {}

	

	_1e83d01d7_RuneExprModel(void) = default;

	inline bool operator==(_1e83d01d7_RuneExprModel _other) {
		return 
			this->_field_code == _other._field_code;
	}

	inline bool operator!=(_1e83d01d7_RuneExprModel _other) { return !this->operator==(_other); }


};


struct _1e83d0726_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();


	_1e83d0726_IntegratedToStrExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e83d0726_IntegratedToStrExprModel(void) = default;

	inline bool operator==(_1e83d0726_IntegratedToStrExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83d0726_IntegratedToStrExprModel _other) { return !this->operator==(_other); }


};


struct _1e83d0d53_TernaryExprModel {
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_1e83d0d53_TernaryExprModel(jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_1e83d0d53_TernaryExprModel(void) = default;

	inline bool operator==(_1e83d0d53_TernaryExprModel _other) {
		return 
			this->_field_condition == _other._field_condition &&
			this->_field_true_expr == _other._field_true_expr &&
			this->_field_false_expr == _other._field_false_expr;
	}

	inline bool operator!=(_1e83d0d53_TernaryExprModel _other) { return !this->operator==(_other); }


};


struct _1e83d15c3_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1e83d15c3_BackendEmitExprModel(jule::Str __param_code, jule::Slice<jule::Any> __param_exprs): _field_code(__param_code), _field_exprs(__param_exprs) {}

	

	_1e83d15c3_BackendEmitExprModel(void) = default;

	inline bool operator==(_1e83d15c3_BackendEmitExprModel _other) {
		return 
			this->_field_code == _other._field_code &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_1e83d15c3_BackendEmitExprModel _other) { return !this->operator==(_other); }


};


struct _1e83d1cbb_FreeExprModel {
	jule::Any _field_expr = jule::Any();


	_1e83d1cbb_FreeExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e83d1cbb_FreeExprModel(void) = default;

	inline bool operator==(_1e83d1cbb_FreeExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83d1cbb_FreeExprModel _other) { return !this->operator==(_other); }


};


struct _1e83d3284_RetType {
	jule::Ptr<_1ce761b37_TypeSymbol> _field_kind = jule::Ptr<_1ce761b37_TypeSymbol>();
	jule::Slice<_212ae5c02_Token> _field_idents = jule::Slice<_212ae5c02_Token>();


	_1e83d3284_RetType(jule::Ptr<_1ce761b37_TypeSymbol> __param_kind, jule::Slice<_212ae5c02_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1e83d3284_RetType(void) = default;

	inline bool operator==(_1e83d3284_RetType _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_1e83d3284_RetType _other) { return !this->operator==(_other); }


};


struct _1e83d5bb0_ParamIns {
	jule::Ptr<_1e83d3839_Param> _field_decl = jule::Ptr<_1e83d3839_Param>();
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();


	_1e83d5bb0_ParamIns(jule::Ptr<_1e83d3839_Param> __param_decl, jule::Ptr<_1ce76121e_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1e83d5bb0_ParamIns(void) = default;

	inline jule::Str _method_to_str(void);


	inline bool operator==(_1e83d5bb0_ParamIns _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1e83d5bb0_ParamIns _other) { return !this->operator==(_other); }


};


struct _1e83d630e_FnIns: public _1ce760828_Kind {
	jule::Ptr<_1e83d630e_FnIns> self;

	jule::Ptr<_1e83b84bc_StructIns> _field_owner = jule::Ptr<_1e83b84bc_StructIns>();
	jule::Ptr<_1e83d4384_Fn> _field_decl = jule::Ptr<_1e83d4384_Fn>();
	jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>();
	jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>> _field_params = jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>();
	jule::Ptr<_1ce76121e_TypeKind> _field_result = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();
	jule::Ptr<_1e83de4b0_ReferenceStack> _field_references = jule::Ptr<_1e83de4b0_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)> _field_caller = jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>();
	jule::Bool _field_reloaded = jule::Bool();


	_1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns> __param_owner, jule::Ptr<_1e83d4384_Fn> __param_decl, jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>> __param_params, jule::Ptr<_1ce76121e_TypeKind> __param_result, jule::Ptr<_1ce62e86d_Scope> __param_scope, jule::Ptr<_1e83de4b0_ReferenceStack> __param_references, jule::Bool __param_anon, jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)> __param_caller, jule::Bool __param_reloaded): _field_owner(__param_owner), _field_decl(__param_decl), _field_generics(__param_generics), _field_params(__param_params), _field_result(__param_result), _field_scope(__param_scope), _field_references(__param_references), _field_anon(__param_anon), _field_caller(__param_caller), _field_reloaded(__param_reloaded) {
		this->self = jule::Ptr<_1e83d630e_FnIns>::make(this, nullptr);

	}

	~_1e83d630e_FnIns(void) { this->self.ref = nullptr; }

	_1e83d630e_FnIns(void) { this->self = jule::Ptr<_1e83d630e_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_same(jule::Ptr<_1e83d630e_FnIns>);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(_1e83d630e_FnIns _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_decl == _other._field_decl &&
			this->_field_generics == _other._field_generics &&
			this->_field_params == _other._field_params &&
			this->_field_result == _other._field_result &&
			this->_field_scope == _other._field_scope &&
			this->_field_references == _other._field_references &&
			this->_field_anon == _other._field_anon &&
			this->_field_caller == _other._field_caller &&
			this->_field_reloaded == _other._field_reloaded;
	}

	inline bool operator!=(_1e83d630e_FnIns _other) { return !this->operator==(_other); }


};


struct _1e83de4b0_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();


	_1e83de4b0_ReferenceStack(jule::Slice<jule::Any> __param_buffer): _field_buffer(__param_buffer) {}

	

	_1e83de4b0_ReferenceStack(void) = default;

	static inline jule::Ptr<_1e83de4b0_ReferenceStack> _static_method_new(void);


	inline jule::I64 _method_len(void);


	inline jule::Any _method_at(jule::I64);


	inline void _method_push(jule::Any);


	inline jule::Bool _method_exist_0(jule::Ptr<_1ce6cecb4_Var>);
	inline jule::Bool _method_exist_1(jule::Ptr<_1e83d630e_FnIns>);


	inline bool operator==(_1e83de4b0_ReferenceStack _other) {
		return 
			this->_field_buffer == _other._field_buffer;
	}

	inline bool operator!=(_1e83de4b0_ReferenceStack _other) { return !this->operator==(_other); }


};


struct _1e83e45b4_SymbolBuilder {
	jule::Ptr<_1e83e45b4_SymbolBuilder> self;

	jule::Ptr<_1e83e45b4_SymbolBuilder> _field_owner = jule::Ptr<_1e83e45b4_SymbolBuilder>();
	jule::Trait<_1ce69b511_Importer> _field_importer = jule::Trait<_1ce69b511_Importer>();
	jule::Slice<_21287ea02_Log> _field_errors = jule::Slice<_21287ea02_Log>();
	jule::Ptr<_2129e26e2_Ast> _field_ast = jule::Ptr<_2129e26e2_Ast>();
	jule::Ptr<_1ce7204a8_SymbolTable> _field_table = jule::Ptr<_1ce7204a8_SymbolTable>();


	_1e83e45b4_SymbolBuilder(jule::Ptr<_1e83e45b4_SymbolBuilder> __param_owner, jule::Trait<_1ce69b511_Importer> __param_importer, jule::Slice<_21287ea02_Log> __param_errors, jule::Ptr<_2129e26e2_Ast> __param_ast, jule::Ptr<_1ce7204a8_SymbolTable> __param_table): _field_owner(__param_owner), _field_importer(__param_importer), _field_errors(__param_errors), _field_ast(__param_ast), _field_table(__param_table) {
		this->self = jule::Ptr<_1e83e45b4_SymbolBuilder>::make(this, nullptr);

	}

	~_1e83e45b4_SymbolBuilder(void) { this->self.ref = nullptr; }

	_1e83e45b4_SymbolBuilder(void) { this->self = jule::Ptr<_1e83e45b4_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ptr<_1e83e45b4_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_212ae5c02_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_212ae5c02_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_build_cpp_header_import(jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_build_std_import(jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_build_ident_import(jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_build_import(jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ptr<_1ce6a0317_ImportInfo>&);


	inline void _method_impl_import_selections(jule::Ptr<_1ce6a0317_ImportInfo>&,jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ptr<_1e83e45b4_SymbolBuilder>&,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ptr<_1e83e45b4_SymbolBuilder>&,jule::Ptr<_1ce6a0317_ImportInfo>&,_212ae5c02_Token&);


	inline jule::Bool _method_check_import_cycles(jule::Ptr<_1ce6a0317_ImportInfo>,jule::Ptr<_212b23d95_UseDecl>&);


	inline void _method_check_package_accessibility(jule::Ptr<_212b23d95_UseDecl>&,jule::Str&,jule::Str&);


	inline jule::Bool _method_import_package(jule::Ptr<_1ce6a0317_ImportInfo>&,jule::Ptr<_212b23d95_UseDecl>&);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_import_use_decl(jule::Ptr<_212b23d95_UseDecl>&);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_2129e2b32_Node&);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(_1e83e45b4_SymbolBuilder _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_importer == _other._field_importer &&
			this->_field_errors == _other._field_errors &&
			this->_field_ast == _other._field_ast &&
			this->_field_table == _other._field_table;
	}

	inline bool operator!=(_1e83e45b4_SymbolBuilder _other) { return !this->operator==(_other); }


};


struct _1e8648e34_Impl {
	jule::Ptr<_2129e3d42_TypeDecl> _field_base = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_2129e3d42_TypeDecl> _field_dest = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Slice<jule::Ptr<_1e83d4384_Fn>> _field_methods = jule::Slice<jule::Ptr<_1e83d4384_Fn>>();
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _field_statics = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>();


	_1e8648e34_Impl(jule::Ptr<_2129e3d42_TypeDecl> __param_base, jule::Ptr<_2129e3d42_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_1e83d4384_Fn>> __param_methods, jule::Slice<jule::Ptr<_1ce6cecb4_Var>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1e8648e34_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(_1e8648e34_Impl _other) {
		return 
			this->_field_base == _other._field_base &&
			this->_field_dest == _other._field_dest &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics;
	}

	inline bool operator!=(_1e8648e34_Impl _other) { return !this->operator==(_other); }


};


struct _1ce62e86d_Scope {
	jule::Ptr<_1ce62e86d_Scope> _field_parent = jule::Ptr<_1ce62e86d_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1ce62e86d_Scope(jule::Ptr<_1ce62e86d_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1ce62e86d_Scope(void) = default;

	inline bool operator==(_1ce62e86d_Scope _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_deferred == _other._field_deferred &&
			this->_field_stmts == _other._field_stmts;
	}

	inline bool operator!=(_1ce62e86d_Scope _other) { return !this->operator==(_other); }


};


struct _1ce632574_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();


	_1ce632574_If(jule::Any __param_expr, jule::Ptr<_1ce62e86d_Scope> __param_scope): _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1ce632574_If(void) = default;

	inline bool operator==(_1ce632574_If _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1ce632574_If _other) { return !this->operator==(_other); }


};


struct _1ce6830ec_Else {
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();


	_1ce6830ec_Else(jule::Ptr<_1ce62e86d_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1ce6830ec_Else(void) = default;

	inline bool operator==(_1ce6830ec_Else _other) {
		return 
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1ce6830ec_Else _other) { return !this->operator==(_other); }


};


struct _1ce68353c_Conditional {
	jule::Slice<jule::Ptr<_1ce632574_If>> _field_elifs = jule::Slice<jule::Ptr<_1ce632574_If>>();
	jule::Ptr<_1ce6830ec_Else> _field_default = jule::Ptr<_1ce6830ec_Else>();


	_1ce68353c_Conditional(jule::Slice<jule::Ptr<_1ce632574_If>> __param_elifs, jule::Ptr<_1ce6830ec_Else> __param_default): _field_elifs(__param_elifs), _field_default(__param_default) {}

	

	_1ce68353c_Conditional(void) = default;

	inline bool operator==(_1ce68353c_Conditional _other) {
		return 
			this->_field_elifs == _other._field_elifs &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1ce68353c_Conditional _other) { return !this->operator==(_other); }


};


struct _1ce68397c_InfIter {
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();


	_1ce68397c_InfIter(jule::Ptr<_1ce62e86d_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1ce68397c_InfIter(void) = default;

	inline bool operator==(_1ce68397c_InfIter _other) {
		return 
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1ce68397c_InfIter _other) { return !this->operator==(_other); }


};


struct _1ce683dbc_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();


	_1ce683dbc_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ptr<_1ce62e86d_Scope> __param_scope): _field_expr(__param_expr), _field_next(__param_next), _field_scope(__param_scope) {}

	

	_1ce683dbc_WhileIter(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(_1ce683dbc_WhileIter _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_next == _other._field_next &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1ce683dbc_WhileIter _other) { return !this->operator==(_other); }


};


struct _1ce68430c_RangeIter {
	jule::Ptr<_1ce727449_Data> _field_expr = jule::Ptr<_1ce727449_Data>();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();
	jule::Ptr<_1ce6cecb4_Var> _field_key_a = jule::Ptr<_1ce6cecb4_Var>();
	jule::Ptr<_1ce6cecb4_Var> _field_key_b = jule::Ptr<_1ce6cecb4_Var>();


	_1ce68430c_RangeIter(jule::Ptr<_1ce727449_Data> __param_expr, jule::Ptr<_1ce62e86d_Scope> __param_scope, jule::Ptr<_1ce6cecb4_Var> __param_key_a, jule::Ptr<_1ce6cecb4_Var> __param_key_b): _field_expr(__param_expr), _field_scope(__param_scope), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1ce68430c_RangeIter(void) = default;

	inline bool operator==(_1ce68430c_RangeIter _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope &&
			this->_field_key_a == _other._field_key_a &&
			this->_field_key_b == _other._field_key_b;
	}

	inline bool operator!=(_1ce68430c_RangeIter _other) { return !this->operator==(_other); }


};


struct _1ce68474c_ContSt {
	jule::U64 _field_it = jule::U64();


	_1ce68474c_ContSt(jule::U64 __param_it): _field_it(__param_it) {}

	

	_1ce68474c_ContSt(void) = default;

	inline bool operator==(_1ce68474c_ContSt _other) {
		return 
			this->_field_it == _other._field_it;
	}

	inline bool operator!=(_1ce68474c_ContSt _other) { return !this->operator==(_other); }


};


struct _1ce684b8c_BreakSt {
	jule::U64 _field_it = jule::U64();
	jule::U64 _field_mtch = jule::U64();


	_1ce684b8c_BreakSt(jule::U64 __param_it, jule::U64 __param_mtch): _field_it(__param_it), _field_mtch(__param_mtch) {}

	

	_1ce684b8c_BreakSt(void) = default;

	inline bool operator==(_1ce684b8c_BreakSt _other) {
		return 
			this->_field_it == _other._field_it &&
			this->_field_mtch == _other._field_mtch;
	}

	inline bool operator!=(_1ce684b8c_BreakSt _other) { return !this->operator==(_other); }


};


struct _1ce6850cc_Label {
	jule::Str _field_ident = jule::Str();


	_1ce6850cc_Label(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1ce6850cc_Label(void) = default;

	inline bool operator==(_1ce6850cc_Label _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1ce6850cc_Label _other) { return !this->operator==(_other); }


};


struct _1ce68551c_GotoSt {
	jule::Str _field_ident = jule::Str();


	_1ce68551c_GotoSt(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1ce68551c_GotoSt(void) = default;

	inline bool operator==(_1ce68551c_GotoSt _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1ce68551c_GotoSt _other) { return !this->operator==(_other); }


};


struct _1ce68595c_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_1ce68595c_Postfix(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1ce68595c_Postfix(void) = default;

	inline bool operator==(_1ce68595c_Postfix _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1ce68595c_Postfix _other) { return !this->operator==(_other); }


};


struct _1ce6862dc_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();


	_1ce6862dc_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r): _field_l(__param_l), _field_r(__param_r) {}

	

	_1ce6862dc_MultiAssign(void) = default;

	inline bool operator==(_1ce6862dc_MultiAssign _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r;
	}

	inline bool operator!=(_1ce6862dc_MultiAssign _other) { return !this->operator==(_other); }


};


struct _1ce68672c_Match {
	jule::Ptr<_1ce727449_Data> _field_expr = jule::Ptr<_1ce727449_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_1ce686b6c_Case>> _field_cases = jule::Slice<jule::Ptr<_1ce686b6c_Case>>();
	jule::Ptr<_1ce686b6c_Case> _field_default = jule::Ptr<_1ce686b6c_Case>();


	_1ce68672c_Match(jule::Ptr<_1ce727449_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ptr<_1ce686b6c_Case>> __param_cases, jule::Ptr<_1ce686b6c_Case> __param_default): _field_expr(__param_expr), _field_type_match(__param_type_match), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1ce68672c_Match(void) = default;

	inline jule::Bool _method_is_generic_type_match(void);


	inline bool operator==(_1ce68672c_Match _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_type_match == _other._field_type_match &&
			this->_field_cases == _other._field_cases &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1ce68672c_Match _other) { return !this->operator==(_other); }


};


struct _1ce686b6c_Case {
	jule::Ptr<_1ce68672c_Match> _field_owner = jule::Ptr<_1ce68672c_Match>();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();
	jule::Slice<jule::Ptr<_1ce727449_Data>> _field_exprs = jule::Slice<jule::Ptr<_1ce727449_Data>>();
	jule::Ptr<_1ce686b6c_Case> _field_next = jule::Ptr<_1ce686b6c_Case>();


	_1ce686b6c_Case(jule::Ptr<_1ce68672c_Match> __param_owner, jule::Ptr<_1ce62e86d_Scope> __param_scope, jule::Slice<jule::Ptr<_1ce727449_Data>> __param_exprs, jule::Ptr<_1ce686b6c_Case> __param_next): _field_owner(__param_owner), _field_scope(__param_scope), _field_exprs(__param_exprs), _field_next(__param_next) {}

	

	_1ce686b6c_Case(void) = default;

	inline jule::Bool _method_is_default(void);


	inline bool operator==(_1ce686b6c_Case _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_scope == _other._field_scope &&
			this->_field_exprs == _other._field_exprs &&
			this->_field_next == _other._field_next;
	}

	inline bool operator!=(_1ce686b6c_Case _other) { return !this->operator==(_other); }


};


struct _1ce6870ac_FallSt {
	jule::U64 _field_dest_case = jule::U64();


	_1ce6870ac_FallSt(jule::U64 __param_dest_case): _field_dest_case(__param_dest_case) {}

	

	_1ce6870ac_FallSt(void) = default;

	inline bool operator==(_1ce6870ac_FallSt _other) {
		return 
			this->_field_dest_case == _other._field_dest_case;
	}

	inline bool operator!=(_1ce6870ac_FallSt _other) { return !this->operator==(_other); }


};


struct _1ce6874ec_RetSt {
	jule::Ptr<_1e83d630e_FnIns> _field_func = jule::Ptr<_1e83d630e_FnIns>();
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _field_vars = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>();
	jule::Any _field_expr = jule::Any();


	_1ce6874ec_RetSt(jule::Ptr<_1e83d630e_FnIns> __param_func, jule::Slice<jule::Ptr<_1ce6cecb4_Var>> __param_vars, jule::Any __param_expr): _field_func(__param_func), _field_vars(__param_vars), _field_expr(__param_expr) {}

	

	_1ce6874ec_RetSt(void) = default;

	inline bool operator==(_1ce6874ec_RetSt _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_vars == _other._field_vars &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ce6874ec_RetSt _other) { return !this->operator==(_other); }


};


struct _1ce687d7c_ScopeGoto {
	jule::Ptr<_212b1d345_GotoSt> _field_gt = jule::Ptr<_212b1d345_GotoSt>();
	jule::Ptr<_1ce6882bc_ScopeChecker> _field_scope = jule::Ptr<_1ce6882bc_ScopeChecker>();
	jule::I64 _field_pos = jule::I64();


	_1ce687d7c_ScopeGoto(jule::Ptr<_212b1d345_GotoSt> __param_gt, jule::Ptr<_1ce6882bc_ScopeChecker> __param_scope, jule::I64 __param_pos): _field_gt(__param_gt), _field_scope(__param_scope), _field_pos(__param_pos) {}

	

	_1ce687d7c_ScopeGoto(void) = default;

	inline bool operator==(_1ce687d7c_ScopeGoto _other) {
		return 
			this->_field_gt == _other._field_gt &&
			this->_field_scope == _other._field_scope &&
			this->_field_pos == _other._field_pos;
	}

	inline bool operator!=(_1ce687d7c_ScopeGoto _other) { return !this->operator==(_other); }


};


struct _1ce6882bc_ScopeChecker: public _1b545ddc0_Lookup {
	jule::Ptr<_1ce6882bc_ScopeChecker> self;

	jule::Ptr<_212ae5c02_Token> _field_called_from = jule::Ptr<_212ae5c02_Token>();
	jule::Ptr<_1ce6ab345_Sema> _field_s = jule::Ptr<_1ce6ab345_Sema>();
	jule::Ptr<_1e83d630e_FnIns> _field_owner = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1ce6882bc_ScopeChecker> _field_parent = jule::Ptr<_1ce6882bc_ScopeChecker>();
	jule::I64 _field_child_index = jule::I64();
	jule::Ptr<_1ce7204a8_SymbolTable> _field_table = jule::Ptr<_1ce7204a8_SymbolTable>();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();
	jule::Ptr<_212b1e555_ScopeTree> _field_tree = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Ptr<_1ce76121e_TypeKind> _field_result = jule::Ptr<_1ce76121e_TypeKind>();
	jule::U64 _field_it = jule::U64();
	jule::U64 _field_cse = jule::U64();
	jule::Ptr<jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>>();
	jule::I64 _field_i = jule::I64();


	_1ce6882bc_ScopeChecker(jule::Ptr<_212ae5c02_Token> __param_called_from, jule::Ptr<_1ce6ab345_Sema> __param_s, jule::Ptr<_1e83d630e_FnIns> __param_owner, jule::Ptr<_1ce6882bc_ScopeChecker> __param_parent, jule::I64 __param_child_index, jule::Ptr<_1ce7204a8_SymbolTable> __param_table, jule::Ptr<_1ce62e86d_Scope> __param_scope, jule::Ptr<_212b1e555_ScopeTree> __param_tree, jule::Ptr<_1ce76121e_TypeKind> __param_result, jule::U64 __param_it, jule::U64 __param_cse, jule::Ptr<jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>> __param_labels, jule::Ptr<jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>> __param_gotos, jule::I64 __param_i): _field_called_from(__param_called_from), _field_s(__param_s), _field_owner(__param_owner), _field_parent(__param_parent), _field_child_index(__param_child_index), _field_table(__param_table), _field_scope(__param_scope), _field_tree(__param_tree), _field_result(__param_result), _field_it(__param_it), _field_cse(__param_cse), _field_labels(__param_labels), _field_gotos(__param_gotos), _field_i(__param_i) {
		this->self = jule::Ptr<_1ce6882bc_ScopeChecker>::make(this, nullptr);

	}

	~_1ce6882bc_ScopeChecker(void) { this->self.ref = nullptr; }

	_1ce6882bc_ScopeChecker(void) { this->self = jule::Ptr<_1ce6882bc_ScopeChecker>::make(this, nullptr); }

	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>);


	inline jule::Ptr<_1ce6cecb4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ce75e6a1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83b1718_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1e85a7865_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e8648917_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_is_deferred(void);


	inline jule::Ptr<_1ce6882bc_ScopeChecker> _method_get_root(void);


	inline jule::Ptr<_1ce6882bc_ScopeChecker> _method_get_hard_root(void);


	inline jule::Ptr<_1ce6850cc_Label> _method_find_label(jule::Str);


	inline jule::Ptr<_1ce68793c_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ptr<_1ce68793c_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::U64,jule::Str);


	inline void _method_check_var_decl(jule::Ptr<_212b20325_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ptr<_212b230c5_TypeAliasDecl>);


	inline jule::Ptr<_1ce62e86d_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ptr<_212b1e555_ScopeTree>&,jule::Ptr<_1ce62e86d_Scope>&,jule::Ptr<_1ce6882bc_ScopeChecker>&);


	inline jule::Ptr<_1ce62e86d_Scope> _method_check_child_sc(jule::Ptr<_212b1e555_ScopeTree>&,jule::Ptr<_1ce6882bc_ScopeChecker>&);


	inline jule::Ptr<_1ce62e86d_Scope> _method_check_child(jule::Ptr<_212b1e555_ScopeTree>&);


	inline void _method_check_anon_scope(jule::Ptr<_212b1e555_ScopeTree>);


	inline void _method_process_error_call(jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>&,_212ae5c02_Token);


	inline void _method_check_expr(jule::Ptr<_212b16162_Expr>);


	inline void _method_check_co_expr(jule::Ptr<_212b177b2_CoExpr>);


	inline jule::Ptr<_1ce632574_If> _method_check_if(jule::Ptr<_212b22305_If>);


	inline jule::Ptr<_1ce6830ec_Else> _method_check_else(jule::Ptr<_212b22745_Else>);


	inline void _method_check_conditional(jule::Ptr<_212b22b85_Conditional>);


	inline jule::Ptr<_1ce62e86d_Scope> _method_check_iter_scope_sc(jule::U64,jule::Ptr<_212b1e555_ScopeTree>,jule::Ptr<_1ce6882bc_ScopeChecker>);


	inline jule::Ptr<_1ce62e86d_Scope> _method_check_iter_scope(jule::U64,jule::Ptr<_212b1e555_ScopeTree>&);


	inline void _method_check_inf_iter(jule::Ptr<_212b20ba5_Iter>&);


	inline void _method_check_while_iter(jule::Ptr<_212b20ba5_Iter>&);


	inline void _method_check_range_iter(jule::Ptr<_212b20ba5_Iter>&);


	inline void _method_check_iter(jule::Ptr<_212b20ba5_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::U64);


	inline jule::Bool _method_check_valid_break_label(jule::U64);


	inline jule::Ptr<_1ce68474c_ContSt> _method_check_cont_valid_scope(jule::Ptr<_212b21db5_ContSt>);


	inline void _method_check_cont(jule::Ptr<_212b21db5_ContSt>);


	inline void _method_check_label(jule::Ptr<_212b1ce05_LabelSt>);


	inline void _method_push_goto(jule::Ptr<_212b1d345_GotoSt>);


	inline void _method_check_postfix(jule::Ptr<_212b1e115_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline jule::Bool _method_check_structure_assign_op(jule::Ptr<_1e83b84bc_StructIns>&,jule::Ptr<_212b1e115_AssignSt>&,jule::Ptr<_1ce727449_Data>&);


	inline void _method_check_single_assign(jule::Ptr<_212b1e115_AssignSt>&);


	inline void _method___process_end_part_of_multi_assign(jule::Ptr<_1ce6862dc_MultiAssign>,jule::Ptr<_212b1e115_AssignSt>,jule::Ptr<_212b1dbc5_AssignLeft>,jule::Ptr<_1ce727449_Data>,jule::Ptr<_1ce727449_Data>);


	inline void _method_check_ret_multi_assign(jule::Ptr<_212b1e115_AssignSt>&);


	inline void _method_check_multi_assign(jule::Ptr<_212b1e115_AssignSt>&);


	inline void _method_check_assign_st(jule::Ptr<_212b1e115_AssignSt>);


	inline jule::Ptr<_1ce62e86d_Scope> _method_check_case_scope(jule::Ptr<_1ce686b6c_Case>&,jule::Ptr<_212b1e555_ScopeTree>&);


	inline jule::Ptr<_1ce686b6c_Case> _method_check_case(jule::Ptr<_1ce68672c_Match>,jule::I64,jule::Ptr<_212b23515_Case>,jule::Ptr<_1ce727449_Data>);


	inline void _method_check_cases(jule::Ptr<_212b23955_MatchCase>&,jule::Ptr<_1ce68672c_Match>,jule::Ptr<_1ce727449_Data>);


	inline jule::Ptr<_1ce686b6c_Case> _method_check_default(jule::Ptr<_1ce68672c_Match>,jule::Ptr<_212b22745_Else>);


	inline void _method_check_comptime_panic(jule::Ptr<_1ce62e86d_Scope>&);


	inline void _method_push_type_match(jule::Ptr<_1ce68672c_Match>,jule::Ptr<_212b23955_MatchCase>&);


	inline void _method_check_type_match(jule::Ptr<_212b23955_MatchCase>&);


	inline void _method_check_common_match(jule::Ptr<_212b23955_MatchCase>&);


	inline void _method_check_match(jule::Ptr<_212b23955_MatchCase>);


	inline void _method_check_fall(jule::Ptr<_212b1d785_FallSt>);


	inline jule::Ptr<_1ce684b8c_BreakSt> _method_check_break_with_label(jule::Ptr<_212b21975_BreakSt>);


	inline jule::Ptr<_1ce684b8c_BreakSt> _method_check_plain_break(jule::Ptr<_212b21975_BreakSt>);


	inline void _method_check_break(jule::Ptr<_212b21975_BreakSt>);


	inline void _method_check_ret(jule::Ptr<_212b20765_RetSt>);


	inline void _method_check_use_expr(jule::Ptr<_212b165a2_UseExpr>);


	inline void _method_check_node(jule::Any&);


	inline void _method_check_result(void);


	inline void _method_check_tree(void);


	inline void _method_check_goto(jule::Ptr<_1ce687d7c_ScopeGoto>&,jule::Ptr<_1ce68793c_ScopeLabel>&);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ptr<_212b1e555_ScopeTree>&,jule::Ptr<_1ce62e86d_Scope>&);


	inline jule::Ptr<_1ce6882bc_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(_1ce6882bc_ScopeChecker _other) {
		return 
			this->_field_called_from == _other._field_called_from &&
			this->_field_s == _other._field_s &&
			this->_field_owner == _other._field_owner &&
			this->_field_parent == _other._field_parent &&
			this->_field_child_index == _other._field_child_index &&
			this->_field_table == _other._field_table &&
			this->_field_scope == _other._field_scope &&
			this->_field_tree == _other._field_tree &&
			this->_field_result == _other._field_result &&
			this->_field_it == _other._field_it &&
			this->_field_cse == _other._field_cse &&
			this->_field_labels == _other._field_labels &&
			this->_field_gotos == _other._field_gotos &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_1ce6882bc_ScopeChecker _other) { return !this->operator==(_other); }


};


struct _1ce698255_DirectiveChecker {
	jule::Ptr<_1ce6ab345_Sema> _field_s = jule::Ptr<_1ce6ab345_Sema>();
	jule::Ptr<jule::Slice<jule::Ptr<_2129e3902_Directive>>> _field_d = jule::Ptr<jule::Slice<jule::Ptr<_2129e3902_Directive>>>();
	jule::Any _field_o = jule::Any();


	_1ce698255_DirectiveChecker(jule::Ptr<_1ce6ab345_Sema> __param_s, jule::Ptr<jule::Slice<jule::Ptr<_2129e3902_Directive>>> __param_d, jule::Any __param_o): _field_s(__param_s), _field_d(__param_d), _field_o(__param_o) {}

	

	_1ce698255_DirectiveChecker(void) = default;

	inline void _method_check_cdef(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check_typedef(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check_derive(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check_namespace(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check_deprecated(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check_test(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check_directive(jule::Ptr<_2129e3902_Directive>&);


	inline void _method_check(void);


	inline bool operator==(_1ce698255_DirectiveChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_d == _other._field_d &&
			this->_field_o == _other._field_o;
	}

	inline bool operator!=(_1ce698255_DirectiveChecker _other) { return !this->operator==(_other); }


};


struct _1ce6a15e3_Package: public _1b545ddc0_Lookup {
	jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>();


	_1ce6a15e3_Package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>> __param_files): _field_files(__param_files) {}

	

	_1ce6a15e3_Package(void) = default;

	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>);


	inline jule::Ptr<_1ce6cecb4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ce75e6a1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83b1718_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1e85a7865_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e8648917_Enum> _method_find_enum(jule::Str);


	inline bool operator==(_1ce6a15e3_Package _other) {
		return 
			this->_field_files == _other._field_files;
	}

	inline bool operator!=(_1ce6a15e3_Package _other) { return !this->operator==(_other); }


};


struct _1ce6ab345_Sema: public _1b545ddc0_Lookup {
	jule::Ptr<_1ce6ab345_Sema> self;

	jule::Slice<_21287ea02_Log> _field_errors = jule::Slice<_21287ea02_Log>();
	jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>();
	jule::Ptr<_1ce7204a8_SymbolTable> _field_file = jule::Ptr<_1ce7204a8_SymbolTable>();
	jule::I64 _field_flags = 0LL;


	_1ce6ab345_Sema(jule::Slice<_21287ea02_Log> __param_errors, jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>> __param_files, jule::Ptr<_1ce7204a8_SymbolTable> __param_file, jule::I64 __param_flags): _field_errors(__param_errors), _field_files(__param_files), _field_file(__param_file), _field_flags(__param_flags) {
		this->self = jule::Ptr<_1ce6ab345_Sema>::make(this, nullptr);

	}

	~_1ce6ab345_Sema(void) { this->self.ref = nullptr; }

	_1ce6ab345_Sema(void) { this->self = jule::Ptr<_1ce6ab345_Sema>::make(this, nullptr); }

	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>);


	inline jule::Ptr<_1ce6cecb4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ce75e6a1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83b1718_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1e85a7865_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e8648917_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_flag(jule::I64);


	inline void _method_set_current_file(jule::Ptr<_1ce7204a8_SymbolTable>);


	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_212ae5c02_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::U64,jule::Str,jule::Bool);


	inline void _method_check_directives(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Any);


	inline jule::Bool _method_check_generic_quantity(jule::I64,jule::I64,_212ae5c02_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::U64,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ptr<_1ce6a0317_ImportInfo>&);


	inline jule::Bool _method_check_import_selections(jule::Ptr<_1ce6a0317_ImportInfo>&);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ptr<_1ce6a0317_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ptr<_1ce6a0317_ImportInfo>&);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ptr<_1ce761b37_TypeSymbol>&,jule::Trait<_1b545ddc0_Lookup>,jule::Ptr<_1ce766eb1_Referencer>);


	inline jule::Bool _method_check_type(jule::Ptr<_1ce761b37_TypeSymbol>&,jule::Trait<_1b545ddc0_Lookup>);


	inline jule::Ptr<_1ce76121e_TypeKind> _method_build_type_with_generics(jule::Ptr<_2129e3d42_TypeDecl>&,jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>);


	inline jule::Ptr<_1ce76121e_TypeKind> _method_build_type(jule::Ptr<_2129e3d42_TypeDecl>&);


	inline jule::Ptr<_1ce76121e_TypeKind> _method_select_type(jule::Ptr<_2129e3d42_TypeDecl>&);


	inline jule::Ptr<_1ce728879_Eval> _method_evalpd(jule::Trait<_1b545ddc0_Lookup>,jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce6cecb4_Var>);


	inline jule::Ptr<_1ce728879_Eval> _method_evalp(jule::Trait<_1b545ddc0_Lookup>,jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Ptr<_1ce728879_Eval> _method_eval(jule::Trait<_1b545ddc0_Lookup>);


	inline jule::Bool _method_check_assign_type(jule::Bool,jule::Ptr<_1ce76121e_TypeKind>&,jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token);


	inline jule::Bool _method_check_type_compatibility(jule::Ptr<_1ce76121e_TypeKind>&,jule::Ptr<_1ce76121e_TypeKind>&,_212ae5c02_Token&);


	inline jule::Ptr<_1ce76121e_TypeKind> _method_build_non_generic_type_kind(jule::Ptr<_2129e3d42_TypeDecl>&,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>&);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ptr<_1e83d630e_FnIns>&);


	inline jule::Ptr<_1e83d630e_FnIns> _method_get_trait_check_fn_kind(jule::Ptr<_1e83d4384_Fn>&);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ptr<_1e83d630e_FnIns>&);


	inline jule::Bool _method_check_ref_validity_for_init_expr(jule::Bool,jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token&);


	inline jule::Bool _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ptr<_1ce76121e_TypeKind>&,jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token&);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ptr<_1ce75e6a1_TypeAlias>&,jule::Trait<_1b545ddc0_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ptr<_1ce75e6a1_TypeAlias>&,jule::Trait<_1b545ddc0_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ptr<_1ce75e6a1_TypeAlias>&);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ptr<_1e8648917_Enum>);


	inline void _method_check_enum_items_str(jule::Ptr<_1e8648917_Enum>&);


	inline void _method_check_enum_items_int(jule::Ptr<_1e8648917_Enum>&);


	inline void _method_check_enum_decl(jule::Ptr<_1e8648917_Enum>&);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>&);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ptr<_1e83d4384_Fn>&);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_fn_decl_types(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_fn_decl_prototype(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_trait_decl_method(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_trait_decl_methods(jule::Ptr<_1e85a7865_Trait>&);


	inline void _method_check_trait_decl(jule::Ptr<_1e85a7865_Trait>&);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ptr<_1e85a7865_Trait>&,jule::Ptr<_1e8648e34_Impl>&);


	inline jule::Bool _method_impl_to_struct(jule::Ptr<_1e83b1718_Struct>&,jule::Ptr<_1e8648e34_Impl>&);


	inline void _method_impl_trait(jule::Ptr<_1e8648e34_Impl>&);


	inline void _method_impl_struct(jule::Ptr<_1e8648e34_Impl>&);


	inline void _method_impl_impl(jule::Ptr<_1e8648e34_Impl>&);


	inline void _method_check_var_decl(jule::Ptr<_1ce6cecb4_Var>&,jule::Trait<_1b545ddc0_Lookup>);


	inline void _method_check_global_var_decl(jule::Ptr<_1ce6cecb4_Var>&);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ptr<_1e83b1718_Struct>&,jule::Ptr<_1e85a7865_Trait>&);


	inline jule::Bool _method_check_struct_impls(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Bool _method_check_struct_fields(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ptr<_1e83b1718_Struct>&);


	inline void _method_check_struct_decl(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ptr<_1e83d4384_Fn>&);


	inline jule::Bool _method_check_fn_decls(void);


	inline void _method_push_cycle_error(jule::Ptr<_1e83b1718_Struct>&,jule::Ptr<_1e83b1718_Struct>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1e83b1718_Struct>&,jule::Ptr<_1e83b1718_Struct>&,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ptr<_1e83b1718_Struct>&,jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ptr<_1e83b84bc_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token&);


	inline void _method_check_var(jule::Ptr<_1ce6cecb4_Var>&);


	inline void _method_check_type_var(jule::Ptr<_1ce6cecb4_Var>&,jule::Trait<_1b545ddc0_Lookup>);


	inline void _method_check_global_types(void);


	inline jule::Ptr<_1e83d630e_FnIns> _method_ready_to_check_fn(jule::Ptr<_1e83b84bc_StructIns>&,jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_type_method(jule::Ptr<_1e83b84bc_StructIns>&,jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_field_defaults(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Ptr<_1e83d630e_FnIns> _method_check_struct_ins_op(jule::Ptr<_1e83b84bc_StructIns>&,jule::Ptr<_1e83d4384_Fn>&,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>);


	inline void _method_check_struct_ins(jule::Ptr<_1e83b84bc_StructIns>&);


	inline void _method_check_type_struct(jule::Ptr<_1e83b1718_Struct>&);


	inline void _method_check_struct_types(void);


	inline void _method_check_struct_ins_operators(jule::Ptr<_1e83b84bc_StructIns>);


	inline void _method_check_type_struct_operators(jule::Ptr<_1e83b1718_Struct>&);


	inline void _method_check_struct_types_operators(void);


	inline void _method_check_rets(jule::Ptr<_1e83d630e_FnIns>&);


	inline void _method_check_fn_ins_sc(jule::Ptr<_1e83d630e_FnIns>&,jule::Ptr<_1ce6882bc_ScopeChecker>&);


	inline void _method_check_fn_ins_caller(jule::Ptr<_1e83d630e_FnIns>&,jule::Ptr<_212ae5c02_Token>);


	inline void _method_check_fn_ins(jule::Ptr<_1e83d630e_FnIns>&);


	inline void _method_check_type_fn(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_check_test_fn(jule::Ptr<_1e83d630e_FnIns>&);


	inline void _method_precheck_type_fn(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_precheck_fn_types(void);


	inline void _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&);


	inline bool operator==(_1ce6ab345_Sema _other) {
		return 
			this->_field_errors == _other._field_errors &&
			this->_field_files == _other._field_files &&
			this->_field_file == _other._field_file &&
			this->_field_flags == _other._field_flags;
	}

	inline bool operator!=(_1ce6ab345_Sema _other) { return !this->operator==(_other); }


};


struct _1ce6abd18_MissingRetChecker {
	jule::Slice<jule::U64> _field_breaked = jule::Slice<jule::U64>();
	jule::Bool _field_falled = jule::Bool();


	_1ce6abd18_MissingRetChecker(jule::Slice<jule::U64> __param_breaked, jule::Bool __param_falled): _field_breaked(__param_breaked), _field_falled(__param_falled) {}

	

	_1ce6abd18_MissingRetChecker(void) = default;

	static inline _1ce6abd18_MissingRetChecker _static_method_new(void);


	inline jule::Bool _method_check_conditional(jule::Ptr<_1ce68353c_Conditional>);


	inline jule::Bool _method_check_match(jule::Ptr<_1ce68672c_Match>);


	inline jule::Bool _method_check_inf_iter(jule::Ptr<_1ce68397c_InfIter>);


	inline jule::Bool _method_check_scope(jule::Ptr<_1ce62e86d_Scope>);


	inline jule::Bool _method_check(jule::Ptr<_1ce62e86d_Scope>);


	inline bool operator==(_1ce6abd18_MissingRetChecker _other) {
		return 
			this->_field_breaked == _other._field_breaked &&
			this->_field_falled == _other._field_falled;
	}

	inline bool operator!=(_1ce6abd18_MissingRetChecker _other) { return !this->operator==(_other); }


};


struct _1ce6ce6cb_IterRelation {
	jule::Ptr<_1ce6cecb4_Var> _field_range = jule::Ptr<_1ce6cecb4_Var>();


	_1ce6ce6cb_IterRelation(jule::Ptr<_1ce6cecb4_Var> __param_range): _field_range(__param_range) {}

	

	_1ce6ce6cb_IterRelation(void) = default;

	inline bool operator==(_1ce6ce6cb_IterRelation _other) {
		return 
			this->_field_range == _other._field_range;
	}

	inline bool operator!=(_1ce6ce6cb_IterRelation _other) { return !this->operator==(_other); }


};


struct _1ce6d1e2b_FuncPattern {
	

	_1ce6d1e2b_FuncPattern(void) = default;

	static inline jule::Bool _static_method_dispose(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_to_str(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_logical(jule::Ptr<_1e83d4384_Fn>&,jule::Str);


	static inline jule::Bool _static_method_eq(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_gt(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_gt_eq(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_lt(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_lt_eq(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_result(jule::Ptr<_1e83d4384_Fn>&,jule::Str);


	static inline jule::Bool _static_method_shl(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_shr(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_add(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_sub(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_div(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_mul(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_mod(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_and(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_or(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_xor(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_unary(jule::Ptr<_1e83d4384_Fn>&,jule::Str);


	static inline jule::Bool _static_method_neg(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_pos(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_not(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_assign(jule::Ptr<_1e83d4384_Fn>&,jule::Str);


	static inline jule::Bool _static_method_add_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_sub_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_div_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_mul_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_mod_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_shl_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_shr_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_or_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_and_assign(jule::Ptr<_1e83d4384_Fn>);


	static inline jule::Bool _static_method_bit_xor_assign(jule::Ptr<_1e83d4384_Fn>);


	inline bool operator==(_1ce6d1e2b_FuncPattern _other) { return true; }

	inline bool operator!=(_1ce6d1e2b_FuncPattern _other) { return !this->operator==(_other); }


};


struct _1ce70ed5a_RangeChecker {
	jule::Ptr<_1ce6882bc_ScopeChecker> _field_sc = jule::Ptr<_1ce6882bc_ScopeChecker>();
	jule::Ptr<_212b21535_RangeKind> _field_rang = jule::Ptr<_212b21535_RangeKind>();
	jule::Ptr<_1ce68430c_RangeIter> _field_kind = jule::Ptr<_1ce68430c_RangeIter>();
	jule::Ptr<_1ce727449_Data> _field_d = jule::Ptr<_1ce727449_Data>();


	_1ce70ed5a_RangeChecker(jule::Ptr<_1ce6882bc_ScopeChecker> __param_sc, jule::Ptr<_212b21535_RangeKind> __param_rang, jule::Ptr<_1ce68430c_RangeIter> __param_kind, jule::Ptr<_1ce727449_Data> __param_d): _field_sc(__param_sc), _field_rang(__param_rang), _field_kind(__param_kind), _field_d(__param_d) {}

	

	_1ce70ed5a_RangeChecker(void) = default;

	inline jule::Ptr<_1ce6cecb4_Var> _method_build_var(jule::Ptr<_212b20325_VarDecl>&);


	inline void _method_set_size_key(void);


	inline void _method_check_range_expr_validity(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce6cecb4_Var>&,jule::Ptr<_1ce76121e_TypeKind>&);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(_1ce70ed5a_RangeChecker _other) {
		return 
			this->_field_sc == _other._field_sc &&
			this->_field_rang == _other._field_rang &&
			this->_field_kind == _other._field_kind &&
			this->_field_d == _other._field_d;
	}

	inline bool operator!=(_1ce70ed5a_RangeChecker _other) { return !this->operator==(_other); }


};


struct _1ce7204a8_SymbolTable: public _1b545ddc0_Lookup {
	jule::Ptr<_212aed0c2_File> _field_file = jule::Ptr<_212aed0c2_File>();
	jule::Slice<_1e83de900_Pass> _field_passes = jule::Slice<_1e83de900_Pass>();
	jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>>();
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _field_vars = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>();
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>();
	jule::Slice<jule::Ptr<_1e83b1718_Struct>> _field_structs = jule::Slice<jule::Ptr<_1e83b1718_Struct>>();
	jule::Slice<jule::Ptr<_1e83d4384_Fn>> _field_funcs = jule::Slice<jule::Ptr<_1e83d4384_Fn>>();
	jule::Slice<jule::Ptr<_1e85a7865_Trait>> _field_traits = jule::Slice<jule::Ptr<_1e85a7865_Trait>>();
	jule::Slice<jule::Ptr<_1e8648917_Enum>> _field_enums = jule::Slice<jule::Ptr<_1e8648917_Enum>>();
	jule::Slice<jule::Ptr<_1e8648e34_Impl>> _field_impls = jule::Slice<jule::Ptr<_1e8648e34_Impl>>();


	_1ce7204a8_SymbolTable(jule::Ptr<_212aed0c2_File> __param_file, jule::Slice<_1e83de900_Pass> __param_passes, jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> __param_imports, jule::Slice<jule::Ptr<_1ce6cecb4_Var>> __param_vars, jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ptr<_1e83b1718_Struct>> __param_structs, jule::Slice<jule::Ptr<_1e83d4384_Fn>> __param_funcs, jule::Slice<jule::Ptr<_1e85a7865_Trait>> __param_traits, jule::Slice<jule::Ptr<_1e8648917_Enum>> __param_enums, jule::Slice<jule::Ptr<_1e8648e34_Impl>> __param_impls): _field_file(__param_file), _field_passes(__param_passes), _field_imports(__param_imports), _field_vars(__param_vars), _field_type_aliases(__param_type_aliases), _field_structs(__param_structs), _field_funcs(__param_funcs), _field_traits(__param_traits), _field_enums(__param_enums), _field_impls(__param_impls) {}

	

	_1ce7204a8_SymbolTable(void) = default;

	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>);


	inline jule::Ptr<_1ce6cecb4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ce75e6a1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83b1718_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1e85a7865_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e8648917_Enum> _method_find_enum(jule::Str);


	inline jule::Ptr<_1ce6cecb4_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ptr<_1ce75e6a1_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::U64,jule::Str,jule::Bool);


	inline bool operator==(_1ce7204a8_SymbolTable _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_passes == _other._field_passes &&
			this->_field_imports == _other._field_imports &&
			this->_field_vars == _other._field_vars &&
			this->_field_type_aliases == _other._field_type_aliases &&
			this->_field_structs == _other._field_structs &&
			this->_field_funcs == _other._field_funcs &&
			this->_field_traits == _other._field_traits &&
			this->_field_enums == _other._field_enums &&
			this->_field_impls == _other._field_impls;
	}

	inline bool operator!=(_1ce7204a8_SymbolTable _other) { return !this->operator==(_other); }


};


struct _1ce727449_Data {
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce76121e_TypeKind> _field_cast_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_1ce4b898d_Const> _field_constant = jule::Ptr<_1ce4b898d_Const>();


	_1ce727449_Data(jule::Ptr<_1ce76121e_TypeKind> __param_kind, jule::Ptr<_1ce76121e_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ptr<_1ce4b898d_Const> __param_constant): _field_kind(__param_kind), _field_cast_kind(__param_cast_kind), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_lvalue(__param_lvalue), _field_is_rune(__param_is_rune), _field_model(__param_model), _field_decl(__param_decl), _field_constant(__param_constant) {}

	

	_1ce727449_Data(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline jule::Bool _method_good_operand(jule::Ptr<_1ce727449_Data>&);


	inline bool operator==(_1ce727449_Data _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_cast_kind == _other._field_cast_kind &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_reference == _other._field_reference &&
			this->_field_lvalue == _other._field_lvalue &&
			this->_field_is_rune == _other._field_is_rune &&
			this->_field_model == _other._field_model &&
			this->_field_decl == _other._field_decl &&
			this->_field_constant == _other._field_constant;
	}

	inline bool operator!=(_1ce727449_Data _other) { return !this->operator==(_other); }


};


struct _1ce7281d6_Value {
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();
	jule::Ptr<_1ce727449_Data> _field_data = jule::Ptr<_1ce727449_Data>();


	_1ce7281d6_Value(jule::Ptr<_212b16162_Expr> __param_expr, jule::Ptr<_1ce727449_Data> __param_data): _field_expr(__param_expr), _field_data(__param_data) {}

	

	_1ce7281d6_Value(void) = default;

	inline bool operator==(_1ce7281d6_Value _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_1ce7281d6_Value _other) { return !this->operator==(_other); }


};


struct _1ce728879_Eval {
	jule::Ptr<_1ce728879_Eval> self;

	jule::Ptr<_1ce6ab345_Sema> _field_s = jule::Ptr<_1ce6ab345_Sema>();
	jule::Trait<_1b545ddc0_Lookup> _field_lookup = jule::Trait<_1b545ddc0_Lookup>();
	jule::Ptr<_1ce76121e_TypeKind> _field_prefix = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_1ce6cecb4_Var> _field_owner = jule::Ptr<_1ce6cecb4_Var>();
	jule::Ptr<_1e83b2cbe_FieldIns> _field_field = jule::Ptr<_1e83b2cbe_FieldIns>();


	_1ce728879_Eval(jule::Ptr<_1ce6ab345_Sema> __param_s, jule::Trait<_1b545ddc0_Lookup> __param_lookup, jule::Ptr<_1ce76121e_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Bool __param_immutable, jule::Bool __param_ignored, jule::Bool __param_dis_builtin, jule::Ptr<_1ce6cecb4_Var> __param_owner, jule::Ptr<_1e83b2cbe_FieldIns> __param_field): _field_s(__param_s), _field_lookup(__param_lookup), _field_prefix(__param_prefix), _field_unsafety(__param_unsafety), _field_immutable(__param_immutable), _field_ignored(__param_ignored), _field_dis_builtin(__param_dis_builtin), _field_owner(__param_owner), _field_field(__param_field) {
		this->self = jule::Ptr<_1ce728879_Eval>::make(this, nullptr);

	}

	~_1ce728879_Eval(void) { this->self.ref = nullptr; }

	_1ce728879_Eval(void) { this->self = jule::Ptr<_1ce728879_Eval>::make(this, nullptr); }

	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline jule::Bool _method_apply_numeric_prefix(jule::Ptr<_1ce727449_Data>&);


	inline jule::Ptr<_1ce727449_Data> _method_lit_nil(void);


	inline jule::Ptr<_1ce727449_Data> _method_lit_str(jule::Ptr<_212b16e32_LitExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_lit_bool(jule::Ptr<_212b16e32_LitExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_lit_rune(jule::Ptr<_212b16e32_LitExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_lit_float(jule::Ptr<_212b16e32_LitExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_lit_int(jule::Ptr<_212b16e32_LitExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_lit_num(jule::Ptr<_212b16e32_LitExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_lit(jule::Ptr<_212b16e32_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ptr<_1e83de4b0_ReferenceStack>&);


	inline void _method_push_reference_to_fn(jule::Ptr<_1e83d630e_FnIns>&);


	inline void _method_push_reference_to_var(jule::Ptr<_1ce6cecb4_Var>&);


	inline void _method_push_reference_to_struct(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Ptr<_1ce727449_Data> _method___eval_enum(jule::Ptr<_1e8648917_Enum>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_enum(jule::Ptr<_1e8648917_Enum>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method___eval_struct(jule::Ptr<_1e83b84bc_StructIns>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_struct(jule::Ptr<_1e83b84bc_StructIns>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_fn_ins(jule::Ptr<_1e83d630e_FnIns>);


	inline void _method_check_deprecated(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_fn(jule::Ptr<_1e83d4384_Fn>,_212ae5c02_Token);


	inline void _method_push_illegal_cycle_error(jule::Ptr<_1ce6cecb4_Var>&,jule::Ptr<_1ce6cecb4_Var>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1ce6cecb4_Var>&,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_1ce6cecb4_Var>&,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_var(jule::Ptr<_1ce6cecb4_Var>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_type_alias(jule::Ptr<_1ce75e6a1_TypeAlias>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_def(jule::Any,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_ident(jule::Ptr<_212b17c02_IdentExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_unary(jule::Ptr<_212b18142_UnaryExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_variadic(jule::Ptr<_212b18582_VariadicExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_unsafe(jule::Ptr<_212b17372_UnsafeExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_arr(jule::Ptr<_212b1b7a5_SliceExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_exp_slc(jule::Ptr<_212b1b7a5_SliceExpr>,jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_slice_expr(jule::Ptr<_212b1b7a5_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token);


	inline void _method_indexing_ptr(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline void _method_indexing_arr(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline void _method_indexing_slc(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline void _method_indexing_map(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline void _method_indexing_str(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline void _method_to_indexing(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline jule::Bool _method_push_generics_from_index_data(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_ident_decl_from_indexing(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1bbe5_IndexingExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_indexing(jule::Ptr<_212b1bbe5_IndexingExpr>);


	inline std::tuple<jule::Ptr<_1ce727449_Data>,jule::Ptr<_1ce727449_Data>> _method_eval_slicing_exprs(jule::Ptr<_212b1c135_SlicingExpr>&);


	inline void _method_slicing_arr(jule::Ptr<_1ce727449_Data>&);


	inline void _method_slicing_str(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&);


	inline void _method_check_slicing(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_212b1c135_SlicingExpr>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_slicing(jule::Ptr<_212b1c135_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_struct(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_ref(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_slc(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_str(jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_int(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_num(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_prim(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline void _method_cast_constant(jule::Ptr<_1ce76121e_TypeKind>&,jule::Ptr<_1ce727449_Data>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_cast_by_type_n_data(jule::Ptr<_1ce76121e_TypeKind>,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_cast(jule::Ptr<_212b189c2_CastExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_ns_selection(jule::Ptr<_212b18e12_NsSelectionExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_struct_lit_explicit(jule::Ptr<_1e83b84bc_StructIns>,jule::Slice<jule::Any>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_struct_lit(jule::Ptr<_212b1a562_StructLit>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_type(jule::Ptr<_2129e3d42_TypeDecl>);


	inline void _method_call_type_fn(jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ptr<_1e83d630e_FnIns>,jule::Ptr<_212b19bd2_FnCallExpr>);


	inline void _method_call_builtin_fn(jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);


	inline void _method_check_fn_of_concurrent_call(jule::Ptr<_1e83d630e_FnIns>&,_212ae5c02_Token);


	inline void _method_process_exceptional_handler(jule::Ptr<_1e83d630e_FnIns>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);


	inline void _method_call_fn(jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_fn_call(jule::Ptr<_212b19bd2_FnCallExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_enum_static(jule::Ptr<_1e8648917_Enum>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_struct_static(jule::Ptr<_1e83b84bc_StructIns>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_trait_sub_ident(jule::Ptr<_1ce727449_Data>,jule::Ptr<_1e85a7865_Trait>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_struct_sub_ident(jule::Ptr<_1ce727449_Data>,jule::Ptr<_1e83b84bc_StructIns>,jule::Ptr<_212b19352_SubIdentExpr>,jule::Bool);


	inline jule::Ptr<_1ce727449_Data> _method_eval_slice_sub_ident(jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_array_sub_ident(jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_map_sub_ident(jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_str_sub_ident(jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_int_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_uint_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_i8_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_i16_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_i32_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_i64_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_u8_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_u16_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_u32_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_u64_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_f32_type_tatic(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_f64_type_static(_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_prim_static(jule::Str,_212ae5c02_Token);


	inline jule::Ptr<_1ce727449_Data> _method_eval_type_static(jule::Ptr<_1ce727449_Data>,jule::Ptr<_212b19352_SubIdentExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_obj_sub_ident(jule::Ptr<_1ce727449_Data>,jule::Ptr<_212b19352_SubIdentExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_sub_ident(jule::Ptr<_212b19352_SubIdentExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_tuple(jule::Ptr<_212b169e2_TupleExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_map(jule::Ptr<_1ce763b39_Map>,jule::Ptr<_212b1a9a2_BraceLit>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_brace_lit(jule::Ptr<_212b1a9a2_BraceLit>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_anon_fn(jule::Ptr<_212b1edd5_FnDecl>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_binop(jule::Ptr<_212b19792_BinopExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_ternary(jule::Ptr<_212b1c575_TernaryExpr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ptr<_1ce727449_Data> _method_eval(jule::Ptr<_212b16162_Expr>);


	inline jule::Ptr<_1ce727449_Data> _method_eval_expr(jule::Ptr<_212b16162_Expr>);


	inline bool operator==(_1ce728879_Eval _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_lookup == _other._field_lookup &&
			this->_field_prefix == _other._field_prefix &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_immutable == _other._field_immutable &&
			this->_field_ignored == _other._field_ignored &&
			this->_field_dis_builtin == _other._field_dis_builtin &&
			this->_field_owner == _other._field_owner &&
			this->_field_field == _other._field_field;
	}

	inline bool operator!=(_1ce728879_Eval _other) { return !this->operator==(_other); }


};


struct _1ce729825_UnaryEval {
	jule::Ptr<_1ce728879_Eval> _field_e = jule::Ptr<_1ce728879_Eval>();
	jule::Ptr<_1ce727449_Data> _field_d = jule::Ptr<_1ce727449_Data>();
	jule::Ptr<_212b18142_UnaryExpr> _field_u = jule::Ptr<_212b18142_UnaryExpr>();


	_1ce729825_UnaryEval(jule::Ptr<_1ce728879_Eval> __param_e, jule::Ptr<_1ce727449_Data> __param_d, jule::Ptr<_212b18142_UnaryExpr> __param_u): _field_e(__param_e), _field_d(__param_d), _field_u(__param_u) {}

	

	_1ce729825_UnaryEval(void) = default;

	static inline _1ce729825_UnaryEval _static_method_new(jule::Ptr<_1ce728879_Eval>);


	inline void _method_minus(void);


	inline void _method_plus(void);


	inline void _method_caret(void);


	inline void _method_excl(void);


	inline void _method_star(void);


	inline void _method_amper(void);


	inline void _method_type_decl(void);


	inline void _method_eval_data(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval(jule::Ptr<_212b18142_UnaryExpr>);


	inline bool operator==(_1ce729825_UnaryEval _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_d == _other._field_d &&
			this->_field_u == _other._field_u;
	}

	inline bool operator!=(_1ce729825_UnaryEval _other) { return !this->operator==(_other); }


};


struct _1ce76121e_TypeKind: public _1ce760828_Kind {
	jule::Ptr<_1ce76121e_TypeKind> self;

	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_1ce760828_Kind> _field_kind = jule::Trait<_1ce760828_Kind>();


	_1ce76121e_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_generic, jule::Bool __param_variadic, jule::Trait<_1ce760828_Kind> __param_kind): _field_cpp_ident(__param_cpp_ident), _field_generic(__param_generic), _field_variadic(__param_variadic), _field_kind(__param_kind) {
		this->self = jule::Ptr<_1ce76121e_TypeKind>::make(this, nullptr);

	}

	~_1ce76121e_TypeKind(void) { this->self.ref = nullptr; }

	_1ce76121e_TypeKind(void) { this->self = jule::Ptr<_1ce76121e_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Bool _method_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_void(void);


	inline jule::Bool _method_mutable(void);


	inline jule::Bool _method_nil_compatible(void);


	inline jule::Bool _method_performs_rc(void);


	inline jule::Bool _method_supports_cloning(void);


	inline jule::Bool _method_variadicable(void);


	inline jule::Ptr<_1ce762330_Prim> _method_prim(void);


	inline jule::Ptr<_1ce76286e_Sptr> _method_sptr(void);


	inline jule::Ptr<_1ce7649e7_Ptr> _method_ptr(void);


	inline jule::Ptr<_1e8648917_Enum> _method_enm(void);


	inline jule::Ptr<_1ce764244_Arr> _method_arr(void);


	inline jule::Ptr<_1ce762e02_Slc> _method_slc(void);


	inline jule::Ptr<_1e83d630e_FnIns> _method_fnc(void);


	inline jule::Ptr<_1e83b84bc_StructIns> _method_strct(void);


	inline jule::Ptr<_1e85a7865_Trait> _method_trt(void);


	inline jule::Ptr<_1ce763b39_Map> _method_map(void);


	inline jule::Ptr<_1ce763485_Tuple> _method_tup(void);


	inline bool operator==(_1ce76121e_TypeKind _other) {
		return 
			this->_field_cpp_ident == _other._field_cpp_ident &&
			this->_field_generic == _other._field_generic &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1ce76121e_TypeKind _other) { return !this->operator==(_other); }


};


struct _1ce761b37_TypeSymbol {
	jule::Ptr<_2129e3d42_TypeDecl> _field_decl = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();


	_1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl> __param_decl, jule::Ptr<_1ce76121e_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1ce761b37_TypeSymbol(void) = default;

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(_1ce761b37_TypeSymbol _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1ce761b37_TypeSymbol _other) { return !this->operator==(_other); }


};


struct _1ce762330_Prim: public _1ce760828_Kind {
	jule::Ptr<_1ce762330_Prim> self;

	jule::Str _field_kind = jule::Str();


	_1ce762330_Prim(jule::Str __param_kind): _field_kind(__param_kind) {
		this->self = jule::Ptr<_1ce762330_Prim>::make(this, nullptr);

	}

	~_1ce762330_Prim(void) { this->self.ref = nullptr; }

	_1ce762330_Prim(void) { this->self = jule::Ptr<_1ce762330_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(_1ce762330_Prim _other) {
		return 
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1ce762330_Prim _other) { return !this->operator==(_other); }


};


struct _1ce76286e_Sptr: public _1ce760828_Kind {
	jule::Ptr<_1ce76286e_Sptr> self;

	jule::Ptr<_1ce76121e_TypeKind> _field_elem = jule::Ptr<_1ce76121e_TypeKind>();


	_1ce76286e_Sptr(jule::Ptr<_1ce76121e_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ce76286e_Sptr>::make(this, nullptr);

	}

	~_1ce76286e_Sptr(void) { this->self.ref = nullptr; }

	_1ce76286e_Sptr(void) { this->self = jule::Ptr<_1ce76286e_Sptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1ce76286e_Sptr _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1ce76286e_Sptr _other) { return !this->operator==(_other); }


};


struct _1ce762e02_Slc: public _1ce760828_Kind {
	jule::Ptr<_1ce762e02_Slc> self;

	jule::Ptr<_1ce76121e_TypeKind> _field_elem = jule::Ptr<_1ce76121e_TypeKind>();


	_1ce762e02_Slc(jule::Ptr<_1ce76121e_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ce762e02_Slc>::make(this, nullptr);

	}

	~_1ce762e02_Slc(void) { this->self.ref = nullptr; }

	_1ce762e02_Slc(void) { this->self = jule::Ptr<_1ce762e02_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1ce762e02_Slc _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1ce762e02_Slc _other) { return !this->operator==(_other); }


};


struct _1ce763485_Tuple: public _1ce760828_Kind {
	jule::Ptr<_1ce763485_Tuple> self;

	jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>();


	_1ce763485_Tuple(jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> __param_types): _field_types(__param_types) {
		this->self = jule::Ptr<_1ce763485_Tuple>::make(this, nullptr);

	}

	~_1ce763485_Tuple(void) { this->self.ref = nullptr; }

	_1ce763485_Tuple(void) { this->self = jule::Ptr<_1ce763485_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1ce763485_Tuple _other) {
		return 
			this->_field_types == _other._field_types;
	}

	inline bool operator!=(_1ce763485_Tuple _other) { return !this->operator==(_other); }


};


struct _1ce763b39_Map: public _1ce760828_Kind {
	jule::Ptr<_1ce763b39_Map> self;

	jule::Ptr<_1ce76121e_TypeKind> _field_key = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce76121e_TypeKind> _field_val = jule::Ptr<_1ce76121e_TypeKind>();


	_1ce763b39_Map(jule::Ptr<_1ce76121e_TypeKind> __param_key, jule::Ptr<_1ce76121e_TypeKind> __param_val): _field_key(__param_key), _field_val(__param_val) {
		this->self = jule::Ptr<_1ce763b39_Map>::make(this, nullptr);

	}

	~_1ce763b39_Map(void) { this->self.ref = nullptr; }

	_1ce763b39_Map(void) { this->self = jule::Ptr<_1ce763b39_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1ce763b39_Map _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_1ce763b39_Map _other) { return !this->operator==(_other); }


};


struct _1ce764244_Arr: public _1ce760828_Kind {
	jule::Ptr<_1ce764244_Arr> self;

	jule::Bool _field_auto = jule::Bool();
	jule::I64 _field_n = jule::I64();
	jule::Ptr<_1ce76121e_TypeKind> _field_elem = jule::Ptr<_1ce76121e_TypeKind>();


	_1ce764244_Arr(jule::Bool __param_auto, jule::I64 __param_n, jule::Ptr<_1ce76121e_TypeKind> __param_elem): _field_auto(__param_auto), _field_n(__param_n), _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ce764244_Arr>::make(this, nullptr);

	}

	~_1ce764244_Arr(void) { this->self.ref = nullptr; }

	_1ce764244_Arr(void) { this->self = jule::Ptr<_1ce764244_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1ce764244_Arr _other) {
		return 
			this->_field_auto == _other._field_auto &&
			this->_field_n == _other._field_n &&
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1ce764244_Arr _other) { return !this->operator==(_other); }


};


struct _1ce7649e7_Ptr: public _1ce760828_Kind {
	jule::Ptr<_1ce7649e7_Ptr> self;

	jule::Ptr<_1ce76121e_TypeKind> _field_elem = jule::Ptr<_1ce76121e_TypeKind>();


	_1ce7649e7_Ptr(jule::Ptr<_1ce76121e_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1ce7649e7_Ptr>::make(this, nullptr);

	}

	~_1ce7649e7_Ptr(void) { this->self.ref = nullptr; }

	_1ce7649e7_Ptr(void) { this->self = jule::Ptr<_1ce7649e7_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(_1ce7649e7_Ptr _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1ce7649e7_Ptr _other) { return !this->operator==(_other); }


};


struct _1ce766eb1_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;


	_1ce766eb1_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs): _field_ident(__param_ident), _field_owner(__param_owner), _field_refs(__param_refs) {}

	

	_1ce766eb1_Referencer(void) = default;

	inline bool operator==(_1ce766eb1_Referencer _other) {
		return 
			this->_field_ident == _other._field_ident &&
			this->_field_owner == _other._field_owner &&
			this->_field_refs == _other._field_refs;
	}

	inline bool operator!=(_1ce766eb1_Referencer _other) { return !this->operator==(_other); }


};


struct _212989117_CompileInfo {
	jule::Bool _field_prod = jule::Bool();
	jule::Bool _field_test = jule::Bool();
	jule::Str _field_compiler = jule::Str("clang", 5);
	jule::Str _field_cpp_std = jule::Str("cpp14", 5);


	_212989117_CompileInfo(jule::Bool __param_prod, jule::Bool __param_test, jule::Str __param_compiler, jule::Str __param_cpp_std): _field_prod(__param_prod), _field_test(__param_test), _field_compiler(__param_compiler), _field_cpp_std(__param_cpp_std) {}

	

	_212989117_CompileInfo(void) = default;

	inline bool operator==(_212989117_CompileInfo _other) {
		return 
			this->_field_prod == _other._field_prod &&
			this->_field_test == _other._field_test &&
			this->_field_compiler == _other._field_compiler &&
			this->_field_cpp_std == _other._field_cpp_std;
	}

	inline bool operator!=(_212989117_CompileInfo _other) { return !this->operator==(_other); }


};


struct _21299b019_DirectiveEval {
	jule::Slice<_21287ea02_Log> _field_logs = jule::Slice<_21287ea02_Log>();
	jule::Ptr<_2129e3902_Directive> _field_d = jule::Ptr<_2129e3902_Directive>();
	jule::Slice<jule::Str> _field_vars = jule::Slice<jule::Str>();


	_21299b019_DirectiveEval(jule::Slice<_21287ea02_Log> __param_logs, jule::Ptr<_2129e3902_Directive> __param_d, jule::Slice<jule::Str> __param_vars): _field_logs(__param_logs), _field_d(__param_d), _field_vars(__param_vars) {}

	

	_21299b019_DirectiveEval(void) = default;

	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Slice<_212ae5c02_Token>> _method_split_operans(jule::Str,jule::Slice<_212ae5c02_Token>&);


	inline jule::Bool _method_eval_directive_ident(jule::Str);


	inline jule::Bool _method_eval_directive_part(jule::Slice<_212ae5c02_Token>);


	inline jule::Bool _method_eval(void);


	inline bool operator==(_21299b019_DirectiveEval _other) {
		return 
			this->_field_logs == _other._field_logs &&
			this->_field_d == _other._field_d &&
			this->_field_vars == _other._field_vars;
	}

	inline bool operator!=(_21299b019_DirectiveEval _other) { return !this->operator==(_other); }


};


struct _1b54c4188_JuleImporter: public _1ce69b511_Importer {
	jule::Slice<jule::Str> _field_mods = jule::Slice<jule::Str>();
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> _field_pkgs = jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>>();
	jule::Slice<jule::Str> _field_vars = jule::Slice<jule::Str>();


	_1b54c4188_JuleImporter(jule::Slice<jule::Str> __param_mods, jule::Str __param_mod, jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> __param_pkgs, jule::Slice<jule::Str> __param_vars): _field_mods(__param_mods), _field_mod(__param_mod), _field_pkgs(__param_pkgs), _field_vars(__param_vars) {}

	

	_1b54c4188_JuleImporter(void) = default;

	static inline jule::Ptr<_1b54c4188_JuleImporter> _static_method_new(_212989117_CompileInfo);


	inline jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> _method_all_packages(void);


	inline void _method_set_mod_path(jule::Str);


	inline jule::Str _method_get_mod_path(void);


	inline jule::Str _method_mod_by_id(jule::I64);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ptr<_2129e26e2_Ast>>,jule::Slice<_21287ea02_Log>> _method_import_package(jule::Str,jule::Bool);


	inline void _method_imported(jule::Ptr<_1ce6a0317_ImportInfo>);


	inline bool operator==(_1b54c4188_JuleImporter _other) {
		return 
			this->_field_mods == _other._field_mods &&
			this->_field_mod == _other._field_mod &&
			this->_field_pkgs == _other._field_pkgs &&
			this->_field_vars == _other._field_vars;
	}

	inline bool operator!=(_1b54c4188_JuleImporter _other) { return !this->operator==(_other); }


};


struct _1b54c9e91_OrderedDefines {
	jule::Slice<jule::Ptr<_1e83b1718_Struct>> _field_structs = jule::Slice<jule::Ptr<_1e83b1718_Struct>>();


	_1b54c9e91_OrderedDefines(jule::Slice<jule::Ptr<_1e83b1718_Struct>> __param_structs): _field_structs(__param_structs) {}

	

	_1b54c9e91_OrderedDefines(void) = default;

	inline bool operator==(_1b54c9e91_OrderedDefines _other) {
		return 
			this->_field_structs == _other._field_structs;
	}

	inline bool operator!=(_1b54c9e91_OrderedDefines _other) { return !this->operator==(_other); }


};


struct _1b54ca579_DefineOrderer {
	

	_1b54ca579_DefineOrderer(void) = default;

	static inline jule::Bool _static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_1e83b1718_Struct>>&,jule::Ptr<_1e83b1718_Struct>);


	static inline void _static_method_order_common_0(jule::Slice<jule::Ptr<_1e83b1718_Struct>>&);


	static inline void _static_method_order_structures(jule::Slice<jule::Ptr<_1e83b1718_Struct>>&);


	inline bool operator==(_1b54ca579_DefineOrderer _other) { return true; }

	inline bool operator!=(_1b54ca579_DefineOrderer _other) { return !this->operator==(_other); }


};


struct _1b54d350a_ScopeDeadCode {
	jule::Ptr<_1b54d350a_ScopeDeadCode> self;

	jule::Ptr<_1b54d350a_ScopeDeadCode> _field_parent = jule::Ptr<_1b54d350a_ScopeDeadCode>();
	jule::Ptr<_1ce62e86d_Scope> _field_s = jule::Ptr<_1ce62e86d_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::I64 _field_i = jule::I64();


	_1b54d350a_ScopeDeadCode(jule::Ptr<_1b54d350a_ScopeDeadCode> __param_parent, jule::Ptr<_1ce62e86d_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::I64 __param_i): _field_parent(__param_parent), _field_s(__param_s), _field_stmts(__param_stmts), _field_i(__param_i) {
		this->self = jule::Ptr<_1b54d350a_ScopeDeadCode>::make(this, nullptr);

	}

	~_1b54d350a_ScopeDeadCode(void) { this->self.ref = nullptr; }

	_1b54d350a_ScopeDeadCode(void) { this->self = jule::Ptr<_1b54d350a_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ptr<_1ce62e86d_Scope>&);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(_1b54d350a_ScopeDeadCode _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_s == _other._field_s &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_1b54d350a_ScopeDeadCode _other) { return !this->operator==(_other); }


};


struct _1b54ed921_AnsiEscape {
	

	_1b54ed921_AnsiEscape(void) = default;

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(_1b54ed921_AnsiEscape _other) { return true; }

	inline bool operator!=(_1b54ed921_AnsiEscape _other) { return !this->operator==(_other); }


};


struct _1b54eeb53_Logger {
	

	_1b54eeb53_Logger(void) = default;

	static inline void _static_method_log_flat(_21287ea02_Log&);


	static inline void _static_method_log_error(_21287ea02_Log&);


	static inline void _static_method_log(_21287ea02_Log&);


	static inline void _static_method_print_logs(jule::Slice<_21287ea02_Log>&);


	inline bool operator==(_1b54eeb53_Logger _other) { return true; }

	inline bool operator!=(_1b54eeb53_Logger _other) { return !this->operator==(_other); }


};


struct _1b589b63c_UnsafeBinopExprModel {
	jule::Ptr<_1e83be3c4_BinopExprModel> _field_node = jule::Ptr<_1e83be3c4_BinopExprModel>();


	_1b589b63c_UnsafeBinopExprModel(jule::Ptr<_1e83be3c4_BinopExprModel> __param_node): _field_node(__param_node) {}

	

	_1b589b63c_UnsafeBinopExprModel(void) = default;

	inline bool operator==(_1b589b63c_UnsafeBinopExprModel _other) {
		return 
			this->_field_node == _other._field_node;
	}

	inline bool operator!=(_1b589b63c_UnsafeBinopExprModel _other) { return !this->operator==(_other); }


};


struct _1b589c71a_UnsafeIndexingExprModel {
	jule::Ptr<_1e83c3928_IndexingExprModel> _field_node = jule::Ptr<_1e83c3928_IndexingExprModel>();


	_1b589c71a_UnsafeIndexingExprModel(jule::Ptr<_1e83c3928_IndexingExprModel> __param_node): _field_node(__param_node) {}

	

	_1b589c71a_UnsafeIndexingExprModel(void) = default;

	inline bool operator==(_1b589c71a_UnsafeIndexingExprModel _other) {
		return 
			this->_field_node == _other._field_node;
	}

	inline bool operator!=(_1b589c71a_UnsafeIndexingExprModel _other) { return !this->operator==(_other); }


};


struct _1b589cb5a_PushToSliceExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Ptr<_1e83c31b9_SliceExprModel> _field_elems = jule::Ptr<_1e83c31b9_SliceExprModel>();


	_1b589cb5a_PushToSliceExprModel(jule::Any __param_dest, jule::Ptr<_1e83c31b9_SliceExprModel> __param_elems): _field_dest(__param_dest), _field_elems(__param_elems) {}

	

	_1b589cb5a_PushToSliceExprModel(void) = default;

	inline bool operator==(_1b589cb5a_PushToSliceExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_1b589cb5a_PushToSliceExprModel _other) { return !this->operator==(_other); }


};


struct _1b589d595_StrInsertBeginExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_expr = jule::Any();


	_1b589d595_StrInsertBeginExprModel(jule::Any __param_dest, jule::Any __param_expr): _field_dest(__param_dest), _field_expr(__param_expr) {}

	

	_1b589d595_StrInsertBeginExprModel(void) = default;

	inline bool operator==(_1b589d595_StrInsertBeginExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1b589d595_StrInsertBeginExprModel _other) { return !this->operator==(_other); }


};


struct _1b58a029a_ScopeOptimizer {
	jule::I64 _field_i = jule::I64();
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();


	_1b58a029a_ScopeOptimizer(jule::I64 __param_i, jule::Ptr<_1ce62e86d_Scope> __param_scope): _field_i(__param_i), _field_scope(__param_scope) {}

	

	_1b58a029a_ScopeOptimizer(void) = default;

	static inline jule::Ptr<_1b58a029a_ScopeOptimizer> _static_method_new(jule::Ptr<_1ce62e86d_Scope>);


	inline void _method_set_current_stmt(jule::Any);


	inline void _method_optimize_data(jule::Ptr<_1ce727449_Data>);


	inline void _method_optimize_var(jule::Ptr<_1ce6cecb4_Var>);


	inline void _method_optimize_conditional(jule::Ptr<_1ce68353c_Conditional>);


	inline void _method_optimize_match(jule::Ptr<_1ce68672c_Match>);


	inline void _method_optimize_range_iter(jule::Ptr<_1ce68430c_RangeIter>);


	inline void _method_optimize_while_iter(jule::Ptr<_1ce683dbc_WhileIter>);


	inline jule::Bool _method_substr(jule::Ptr<_1ce685d9c_Assign>);


	inline jule::Bool _method_str_insert(jule::Ptr<_1ce685d9c_Assign>);


	inline jule::Bool _method_str_assign(jule::Ptr<_1ce685d9c_Assign>);


	inline void _method_optimize_assign(jule::Ptr<_1ce685d9c_Assign>);


	inline void _method_optimize_multi_assign(jule::Ptr<_1ce6862dc_MultiAssign>);


	inline void _method_optimize_ret(jule::Ptr<_1ce6874ec_RetSt>);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_child(jule::Ptr<_1ce62e86d_Scope>);


	inline void _method_optimize(void);


	inline bool operator==(_1b58a029a_ScopeOptimizer _other) {
		return 
			this->_field_i == _other._field_i &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1b58a029a_ScopeOptimizer _other) { return !this->operator==(_other); }


};


struct _1b58a72a2_ExprOptimizer {
	jule::Ptr<jule::Any> _field_model = jule::Ptr<jule::Any>();


	_1b58a72a2_ExprOptimizer(jule::Ptr<jule::Any> __param_model): _field_model(__param_model) {}

	

	_1b58a72a2_ExprOptimizer(void) = default;

	static inline void _static_method_optimize(jule::Any&);


	inline jule::Bool _method_str_cond(jule::Ptr<_1e83be3c4_BinopExprModel>);


	inline void _method_binary(jule::Ptr<_1e83be3c4_BinopExprModel>);


	inline void _method_unary(jule::Ptr<_1e83bebdd_UnaryExprModel>);


	inline void _method_structure_lit(jule::Ptr<_1e83c0bbc_StructLitExprModel>);


	inline void _method_alloc_structure(jule::Ptr<_1e83c1393_AllocStructLitExprModel>);


	inline void _method_casting(jule::Ptr<_1e83c1aad_CastingExprModel>);


	inline void _method_args(jule::Slice<jule::Any>);


	inline void _method_scope(jule::Ptr<_1ce62e86d_Scope>&);


	inline void _method_func_call(jule::Ptr<_1e83c2581_FnCallExprModel>);


	inline void _method_slice(jule::Ptr<_1e83c31b9_SliceExprModel>);


	inline void _method_array(jule::Ptr<_1e83c8004_ArrayExprModel>);


	inline void _method_indexing(jule::Ptr<_1e83c3928_IndexingExprModel>);


	inline void _method_anon_func(jule::Ptr<_1e83c4220_AnonFnExprModel>);


	inline void _method_map(jule::Ptr<_1e83c5056_MapExprModel>);


	inline void _method_slicing(jule::Ptr<_1e83c585e_SlicingExprModel>);


	inline void _method_trait_sub(jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>);


	inline void _method_structure_sub(jule::Ptr<_1e83c6d16_StructSubIdentExprModel>);


	inline void _method_common_sub(jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>);


	inline void _method_tuple(jule::Ptr<_1e83c95aa_TupleExprModel>);


	inline void _method_new_call(jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel>);


	inline void _method_out_call(jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>);


	inline void _method_outln_call(jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>);


	inline void _method_panic_call(jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>);


	inline void _method_assert_call(jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>);


	inline void _method_error_call(jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>);


	inline void _method_make_call(jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel>);


	inline void _method_append_call(jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>);


	inline void _method_clone_call(jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>);


	inline void _method_sizeof(jule::Ptr<_1e83ce22a_SizeofExprModel>);


	inline void _method_alignof(jule::Ptr<_1e83cec97_AlignofExprModel>);


	inline void _method_integrated_to_str(jule::Ptr<_1e83d0726_IntegratedToStrExprModel>);


	inline void _method_ternary(jule::Ptr<_1e83d0d53_TernaryExprModel>);


	inline void _method_do(void);


	inline bool operator==(_1b58a72a2_ExprOptimizer _other) {
		return 
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_1b58a72a2_ExprOptimizer _other) { return !this->operator==(_other); }


};


struct _1b58b17d9_Optimizer {
	jule::Ptr<_1b54c72bd_IR> _field_ir = jule::Ptr<_1b54c72bd_IR>();


	_1b58b17d9_Optimizer(jule::Ptr<_1b54c72bd_IR> __param_ir): _field_ir(__param_ir) {}

	

	_1b58b17d9_Optimizer(void) = default;

	static inline jule::Ptr<_1b58b17d9_Optimizer> _static_method_new(jule::Ptr<_1b54c72bd_IR>&);


	inline void _method_optimize_global(jule::Ptr<_1ce6cecb4_Var>&);


	inline void _method_optimize_function(jule::Ptr<_1e83d4384_Fn>&);


	inline void _method_optimize_struct(jule::Ptr<_1e83b1718_Struct>&);


	inline void _method_optimize_globals(jule::Ptr<_1ce6a15e3_Package>&);


	inline void _method_optimize_functions(jule::Ptr<_1ce6a15e3_Package>&);


	inline void _method_optimize_structs(jule::Ptr<_1ce6a15e3_Package>&);


	inline void _method_optimize_package(jule::Ptr<_1ce6a15e3_Package>&);


	inline void _method_optimize(void);


	inline bool operator==(_1b58b17d9_Optimizer _other) {
		return 
			this->_field_ir == _other._field_ir;
	}

	inline bool operator!=(_1b58b17d9_Optimizer _other) { return !this->operator==(_other); }


};


struct _1b591a0a1_AbsTime {
	jule::U64 _field_day = jule::U64();
	jule::U64 _field_week_day = jule::U64();
	jule::U64 _field_year_day = jule::U64();
	jule::U64 _field_month = jule::U64();
	jule::U64 _field_year = jule::U64();
	jule::U64 _field_second = jule::U64();
	jule::U64 _field_minute = jule::U64();
	jule::U64 _field_hour = jule::U64();


	_1b591a0a1_AbsTime(jule::U64 __param_day, jule::U64 __param_week_day, jule::U64 __param_year_day, jule::U64 __param_month, jule::U64 __param_year, jule::U64 __param_second, jule::U64 __param_minute, jule::U64 __param_hour): _field_day(__param_day), _field_week_day(__param_week_day), _field_year_day(__param_year_day), _field_month(__param_month), _field_year(__param_year), _field_second(__param_second), _field_minute(__param_minute), _field_hour(__param_hour) {}

	

	_1b591a0a1_AbsTime(void) = default;

	inline jule::U64 _method_unix(void);


	inline bool operator==(_1b591a0a1_AbsTime _other) {
		return 
			this->_field_day == _other._field_day &&
			this->_field_week_day == _other._field_week_day &&
			this->_field_year_day == _other._field_year_day &&
			this->_field_month == _other._field_month &&
			this->_field_year == _other._field_year &&
			this->_field_second == _other._field_second &&
			this->_field_minute == _other._field_minute &&
			this->_field_hour == _other._field_hour;
	}

	inline bool operator!=(_1b591a0a1_AbsTime _other) { return !this->operator==(_other); }


};


struct _1b591ad71_Time {
	jule::U64 _field_sec = jule::U64();


	_1b591ad71_Time(jule::U64 __param_sec): _field_sec(__param_sec) {}

	

	_1b591ad71_Time(void) = default;

	static inline _1b591ad71_Time _static_method_unix(jule::U64);


	static inline _1b591ad71_Time _static_method_now(void);


	inline jule::U64 _method_unix(void);


	inline jule::U64 _method_day(void);


	inline jule::U64 _method_month(void);


	inline jule::U64 _method_year(void);


	inline jule::U64 _method_second(void);


	inline jule::U64 _method_minute(void);


	inline jule::U64 _method_hour(void);


	inline _1b591a0a1_AbsTime _method_abs(void);


	inline bool operator==(_1b591ad71_Time _other) {
		return 
			this->_field_sec == _other._field_sec;
	}

	inline bool operator!=(_1b591ad71_Time _other) { return !this->operator==(_other); }


};


struct _1b591baca_Duration {
	

	_1b591baca_Duration(void) = default;

	static inline jule::I64 _static_method_nanoseconds(jule::I64);


	static inline jule::I64 _static_method_microseconds(jule::I64);


	static inline jule::I64 _static_method_milliseconds(jule::I64);


	static inline jule::I64 _static_method_seconds(jule::I64);


	static inline jule::I64 _static_method_minutes(jule::I64);


	static inline jule::I64 _static_method_hours(jule::I64);


	inline bool operator==(_1b591baca_Duration _other) { return true; }

	inline bool operator!=(_1b591baca_Duration _other) { return !this->operator==(_other); }


};


struct _1b57910c0_TestCoder {
	jule::Ptr<_1b592255e_ObjectCoder> _field_oc = jule::Ptr<_1b592255e_ObjectCoder>();


	_1b57910c0_TestCoder(jule::Ptr<_1b592255e_ObjectCoder> __param_oc): _field_oc(__param_oc) {}

	

	_1b57910c0_TestCoder(void) = default;

	static inline jule::Ptr<_1b57910c0_TestCoder> _static_method_new(jule::Ptr<_1b592255e_ObjectCoder>&);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_find_testing_package(void);


	inline void _method_append_test(jule::Str&,jule::Ptr<_1e83d630e_FnIns>);


	inline void _method_append_package_tests(jule::Str&,jule::Ptr<_1ce6a15e3_Package>&);


	inline void _method_serialize(jule::Str&);


	inline bool operator==(_1b57910c0_TestCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_1b57910c0_TestCoder _other) { return !this->operator==(_other); }


};


struct _1b57cc35e_ScopeCoder {
	jule::Ptr<_1b592255e_ObjectCoder> _field_oc = jule::Ptr<_1b592255e_ObjectCoder>();


	_1b57cc35e_ScopeCoder(jule::Ptr<_1b592255e_ObjectCoder> __param_oc): _field_oc(__param_oc) {}

	

	_1b57cc35e_ScopeCoder(void) = default;

	static inline jule::Ptr<_1b57cc35e_ScopeCoder> _static_method_new(jule::Ptr<_1b592255e_ObjectCoder>&);


	inline jule::Str _method_range_index_iter(jule::Ptr<_1ce68430c_RangeIter>&);


	inline jule::Str _method_range_hashmap_iter(jule::Ptr<_1ce68430c_RangeIter>&);


	inline jule::Str _method_if_case(jule::Ptr<_1ce632574_If>);


	inline jule::Str _method_conditional(jule::Ptr<_1ce68353c_Conditional>);


	inline jule::Str _method_inf_iter(jule::Ptr<_1ce68397c_InfIter>);


	inline jule::Str _method_while_iter(jule::Ptr<_1ce683dbc_WhileIter>);


	inline jule::Str _method_range_iter(jule::Ptr<_1ce68430c_RangeIter>);


	inline jule::Str _method_cont(jule::Ptr<_1ce68474c_ContSt>);


	inline jule::Str _method_label(jule::Ptr<_1ce6850cc_Label>);


	inline jule::Str _method_goto_st(jule::Ptr<_1ce68551c_GotoSt>);


	inline jule::Str _method_postfix(jule::Ptr<_1ce68595c_Postfix>);


	inline jule::Str _method_assign(jule::Ptr<_1ce685d9c_Assign>);


	inline jule::Str _method_multi_assign(jule::Ptr<_1ce6862dc_MultiAssign>);


	inline jule::Str _method_match_expr(jule::Ptr<_1ce68672c_Match>&);


	inline jule::Str _method_case(jule::Ptr<_1ce68672c_Match>,jule::Ptr<_1ce686b6c_Case>);


	inline jule::Str _method_match_st(jule::Ptr<_1ce68672c_Match>);


	inline jule::Str _method_fall_st(jule::Ptr<_1ce6870ac_FallSt>);


	inline jule::Str _method_break_st(jule::Ptr<_1ce684b8c_BreakSt>);


	inline jule::Str _method_ret_with_vars(jule::Ptr<_1ce6874ec_RetSt>);


	inline jule::Str _method_ret_tuple(jule::Ptr<_1ce6874ec_RetSt>);


	inline jule::Str _method_ret_with_exprs(jule::Ptr<_1ce6874ec_RetSt>);


	inline jule::Str _method_ret_st(jule::Ptr<_1ce6874ec_RetSt>);


	inline jule::Str _method_ret_with_defaults(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Str _method_var(jule::Ptr<_1ce6cecb4_Var>);


	inline jule::Str _method_st(jule::Any);


	inline jule::Str _method_scope(jule::Ptr<_1ce62e86d_Scope>);


	inline jule::Str _method_func_scope(jule::Ptr<_1e83d630e_FnIns>);


	inline bool operator==(_1b57cc35e_ScopeCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_1b57cc35e_ScopeCoder _other) { return !this->operator==(_other); }


};


struct _1b57d05a4_ExprCoder {
	jule::Ptr<_1b592255e_ObjectCoder> _field_oc = jule::Ptr<_1b592255e_ObjectCoder>();


	_1b57d05a4_ExprCoder(jule::Ptr<_1b592255e_ObjectCoder> __param_oc): _field_oc(__param_oc) {}

	

	_1b57d05a4_ExprCoder(void) = default;

	static inline jule::Ptr<_1b57d05a4_ExprCoder> _static_method_new(jule::Ptr<_1b592255e_ObjectCoder>&);


	inline jule::Str _method_string(jule::Ptr<_1ce4b898d_Const>&);


	inline jule::Str _method_boolean(jule::Ptr<_1ce4b898d_Const>&);


	inline jule::Str _method_nil_lit(void);


	inline jule::Str _method_ftoa_special_cases(jule::F64&);


	inline jule::Str _method_float32(jule::Ptr<_1ce4b898d_Const>&);


	inline jule::Str _method_float64(jule::Ptr<_1ce4b898d_Const>&);


	inline jule::Str _method_constant(jule::Ptr<_1ce4b898d_Const>,jule::Bool);


	inline jule::Str _method_div_by_zero_binary(_212ae5c02_Token&,jule::Ptr<_1e83bdbcb_OperandExprModel>&,jule::Ptr<_1e83bdbcb_OperandExprModel>&);


	inline jule::Str _method_unsafe_binary(jule::Ptr<_1e83be3c4_BinopExprModel>);


	inline jule::Str _method_binary(jule::Ptr<_1e83be3c4_BinopExprModel>);


	inline jule::Str _method_var(jule::Ptr<_1ce6cecb4_Var>);


	inline jule::Str _method_structure(jule::Ptr<_1e83b1718_Struct>);


	inline jule::Str _method_structure_ins(jule::Ptr<_1e83b84bc_StructIns>);


	inline jule::Str _method_unary(jule::Ptr<_1e83bebdd_UnaryExprModel>);


	inline jule::Str _method_cpp_structure_lit(jule::Ptr<_1e83c0bbc_StructLitExprModel>);


	inline jule::Str _method_structure_lit(jule::Ptr<_1e83c0bbc_StructLitExprModel>);


	inline jule::Str _method_alloc_structure(jule::Ptr<_1e83c1393_AllocStructLitExprModel>);


	inline jule::Str _method_casting(jule::Ptr<_1e83c1aad_CastingExprModel>);


	inline jule::Str _method_args(jule::Slice<jule::Any>);


	inline jule::Str _method_model_for_call(jule::Any);


	inline void _method_push_call_inf(jule::Str&,jule::Ptr<_1e83c2581_FnCallExprModel>&);


	inline jule::Str _method_pure_func_call(jule::Ptr<_1e83c2581_FnCallExprModel>&);


	inline jule::Str _method_func_call(jule::Ptr<_1e83c2581_FnCallExprModel>);


	inline jule::Str _method_slice(jule::Ptr<_1e83c31b9_SliceExprModel>);


	inline jule::Str _method_indexing(jule::Ptr<_1e83c3928_IndexingExprModel>);


	inline jule::Str _method_unsafe_indexing(jule::Ptr<_1b589c71a_UnsafeIndexingExprModel>);


	inline jule::Str _method_anon_func(jule::Ptr<_1e83c4220_AnonFnExprModel>);


	inline jule::Str _method_map(jule::Ptr<_1e83c5056_MapExprModel>);


	inline jule::Str _method_slicing(jule::Ptr<_1e83c585e_SlicingExprModel>);


	inline jule::Str _method_trait_sub(jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>);


	inline jule::Str _method_structure_sub(jule::Ptr<_1e83c6d16_StructSubIdentExprModel>);


	inline jule::Str _method_common_ident(jule::Ptr<_1e83c87c9_CommonIdentExprModel>);


	inline jule::Str _method_common_sub(jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>);


	inline jule::Str _method_array(jule::Ptr<_1e83c8004_ArrayExprModel>);


	inline jule::Str _method_func_ins_common(jule::Ptr<_1e83d630e_FnIns>);


	inline jule::Str _method_func_ins(jule::Ptr<_1e83d630e_FnIns>);


	inline jule::Str _method_tuple(jule::Ptr<_1e83c95aa_TupleExprModel>);


	inline jule::Str _method_new_call(jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel>);


	inline jule::Str _method_out_call(jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>);


	inline jule::Str _method_outln_call(jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>);


	inline jule::Str _method_panic_call(jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>);


	inline jule::Str _method_assert_call(jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>);


	inline jule::Str _method_error_call(jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>);


	inline jule::Str _method_make_call(jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel>);


	inline jule::Str _method_push_to_slice(jule::Ptr<_1b589cb5a_PushToSliceExprModel>);


	inline jule::Str _method_append_call(jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>);


	inline jule::Str _method_clone_call(jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>);


	inline jule::Str _method_sizeof(jule::Ptr<_1e83ce22a_SizeofExprModel>);


	inline jule::Str _method_alignof(jule::Ptr<_1e83cec97_AlignofExprModel>);


	inline jule::Str _method_rune_lit(jule::Ptr<_1e83d01d7_RuneExprModel>);


	inline jule::Str _method_structure_static(jule::Ptr<_1e83c76a7_StructStaticIdentExprModel>);


	inline jule::Str _method_integrated_to_str(jule::Ptr<_1e83d0726_IntegratedToStrExprModel>);


	inline jule::Str _method_ternary(jule::Ptr<_1e83d0d53_TernaryExprModel>);


	inline jule::Str _method_backend_emit(jule::Ptr<_1e83d15c3_BackendEmitExprModel>);


	inline jule::Str _method_free(jule::Ptr<_1e83d1cbb_FreeExprModel>);


	inline jule::Str _method_mut_slicing(jule::Ptr<_1b589d09a_MutSlicingExprModel>);


	inline jule::Str _method_str_insert_begin(jule::Ptr<_1b589d595_StrInsertBeginExprModel>);


	inline jule::Str _method_model(jule::Any);


	inline jule::Str _method_expr(jule::Any);


	inline jule::Str _method_val(jule::Ptr<_1ce7281d6_Value>);


	inline jule::Str _method_init_expr(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1b57d05a4_ExprCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_1b57d05a4_ExprCoder _other) { return !this->operator==(_other); }


};


struct _1b58c250e_DeriveCoder {
	

	_1b58c250e_DeriveCoder(void) = default;

	static inline jule::Str _static_method_clone_func_decl(jule::Ptr<_1e83b1718_Struct>&);


	static inline jule::Str _static_method_clone_func_def(jule::Ptr<_1e83b1718_Struct>&);


	inline bool operator==(_1b58c250e_DeriveCoder _other) { return true; }

	inline bool operator!=(_1b58c250e_DeriveCoder _other) { return !this->operator==(_other); }


};


struct _1b58c4698_IdentCoder {
	

	_1b58c4698_IdentCoder(void) = default;

	static inline jule::Str _static_method_to_ident(jule::Str);


	static inline jule::Str _static_method_addr(jule::U64);


	static inline jule::Str _static_method_to_out(jule::Str,jule::U64);


	static inline jule::Str _static_method_to_local(jule::I64,jule::I64,jule::Str);


	static inline jule::Str _static_method_func(jule::Ptr<_1e83d4384_Fn>&);


	static inline jule::Str _static_method_func_ins(jule::Ptr<_1e83d630e_FnIns>&);


	static inline jule::Str _static_method_trait_decl(jule::Ptr<_1e85a7865_Trait>);


	static inline jule::Str _static_method_param(jule::Ptr<_1e83d3839_Param>&);


	static inline jule::Str _static_method_structure(jule::Ptr<_1e83b1718_Struct>&);


	static inline jule::Str _static_method_structure_ins(jule::Ptr<_1e83b84bc_StructIns>&);


	static inline jule::Str _static_method_field(jule::Ptr<_1e82e47a0_Field>&);


	static inline jule::Str _static_method_var(jule::Ptr<_1ce6cecb4_Var>);


	static inline jule::Str _static_method_iter_begin(jule::U64);


	static inline jule::Str _static_method_iter_end(jule::U64);


	static inline jule::Str _static_method_iter_next(jule::U64);


	static inline jule::Str _static_method_label(jule::Str);


	static inline jule::Str _static_method_match_end(jule::U64);


	static inline jule::Str _static_method_case_begin(jule::U64);


	inline bool operator==(_1b58c4698_IdentCoder _other) { return true; }

	inline bool operator!=(_1b58c4698_IdentCoder _other) { return !this->operator==(_other); }


};


struct _1b58d98cd_SerializationInfo {
	jule::Str _field_compiler = jule::Str();
	jule::Str _field_compiler_command = jule::Str();


	_1b58d98cd_SerializationInfo(jule::Str __param_compiler, jule::Str __param_compiler_command): _field_compiler(__param_compiler), _field_compiler_command(__param_compiler_command) {}

	

	_1b58d98cd_SerializationInfo(void) = default;

	inline bool operator==(_1b58d98cd_SerializationInfo _other) {
		return 
			this->_field_compiler == _other._field_compiler &&
			this->_field_compiler_command == _other._field_compiler_command;
	}

	inline bool operator!=(_1b58d98cd_SerializationInfo _other) { return !this->operator==(_other); }


};


struct _1b592c437_TypeCoder {
	

	_1b592c437_TypeCoder(void) = default;

	static inline jule::Str _static_method_to_type(jule::Str);


	static inline jule::Str _static_method_prim(jule::Ptr<_1ce762330_Prim>);


	static inline jule::Str _static_method_tuple(jule::Ptr<_1ce763485_Tuple>);


	static inline jule::Str _static_method_as_sptr(jule::Str);


	static inline jule::Str _static_method_sptr(jule::Ptr<_1ce76286e_Sptr>);


	static inline jule::Str _static_method_ptr(jule::Ptr<_1ce7649e7_Ptr>);


	static inline jule::Str _static_method_enum_decl(jule::Ptr<_1e8648917_Enum>);


	static inline jule::Str _static_method_as_slice(jule::Ptr<_1ce76121e_TypeKind>);


	static inline jule::Str _static_method_slice(jule::Ptr<_1ce762e02_Slc>);


	static inline jule::Str _static_method_map(jule::Ptr<_1ce763b39_Map>);


	static inline jule::Str _static_method_trait_ident(jule::Str);


	static inline jule::Str _static_method_trait_decl(jule::Ptr<_1e85a7865_Trait>);


	static inline jule::Str _static_method_structure(jule::Ptr<_1e83b1718_Struct>);


	static inline jule::Str _static_method_structure_ins(jule::Ptr<_1e83b84bc_StructIns>);


	static inline jule::Str _static_method_array(jule::Ptr<_1ce764244_Arr>);


	static inline jule::Str _static_method_param(jule::Ptr<_1e83d3839_Param>&);


	static inline jule::Str _static_method_param_ins(jule::Ptr<_1e83d5bb0_ParamIns>&);


	static inline jule::Str _static_method_func_result(jule::Ptr<_1e83d4384_Fn>&);


	static inline jule::Str _static_method_func_ins_result(jule::Ptr<_1e83d630e_FnIns>&);


	static inline jule::Str _static_method_anon_func(jule::Ptr<_1e83d630e_FnIns>);


	static inline jule::Str _static_method_func(jule::Ptr<_1e83d630e_FnIns>);


	static inline jule::Str _static_method_kind(jule::Ptr<_1ce76121e_TypeKind>);


	inline bool operator==(_1b592c437_TypeCoder _other) { return true; }

	inline bool operator!=(_1b592c437_TypeCoder _other) { return !this->operator==(_other); }


};


struct _1b595ae38_Flag_0: public _1b5959d27_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::I64 _field__default = jule::I64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::I64> _field__data = jule::Ptr<jule::I64>();


	_1b595ae38_Flag_0(jule::Str __param__name, jule::I32 __param__short, jule::I64 __param__default, jule::Str __param__what, jule::Ptr<jule::I64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1b595ae38_Flag_0(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(_1b595ae38_Flag_0 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_1b595ae38_Flag_0 _other) { return !this->operator==(_other); }


};

struct _1b595ae38_Flag_1: public _1b5959d27_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::U64 _field__default = jule::U64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::U64> _field__data = jule::Ptr<jule::U64>();


	_1b595ae38_Flag_1(jule::Str __param__name, jule::I32 __param__short, jule::U64 __param__default, jule::Str __param__what, jule::Ptr<jule::U64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1b595ae38_Flag_1(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(_1b595ae38_Flag_1 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_1b595ae38_Flag_1 _other) { return !this->operator==(_other); }


};

struct _1b595ae38_Flag_2: public _1b5959d27_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();


	_1b595ae38_Flag_2(jule::Str __param__name, jule::I32 __param__short, jule::F64 __param__default, jule::Str __param__what, jule::Ptr<jule::F64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1b595ae38_Flag_2(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(_1b595ae38_Flag_2 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_1b595ae38_Flag_2 _other) { return !this->operator==(_other); }


};

struct _1b595ae38_Flag_3: public _1b5959d27_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();


	_1b595ae38_Flag_3(jule::Str __param__name, jule::I32 __param__short, jule::Bool __param__default, jule::Str __param__what, jule::Ptr<jule::Bool> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1b595ae38_Flag_3(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(_1b595ae38_Flag_3 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_1b595ae38_Flag_3 _other) { return !this->operator==(_other); }


};

struct _1b595ae38_Flag_4: public _1b5959d27_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();


	_1b595ae38_Flag_4(jule::Str __param__name, jule::I32 __param__short, jule::Str __param__default, jule::Str __param__what, jule::Ptr<jule::Str> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1b595ae38_Flag_4(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(_1b595ae38_Flag_4 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_1b595ae38_Flag_4 _other) { return !this->operator==(_other); }


};


struct _1b595bc5d_FlagSet {
	jule::Slice<jule::Trait<_1b5959d27_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_1b5959d27_CommonFlag>>();


	_1b595bc5d_FlagSet(jule::Slice<jule::Trait<_1b5959d27_CommonFlag>> __param__flags): _field__flags(__param__flags) {}

	

	_1b595bc5d_FlagSet(void) = default;

	static inline jule::Ptr<_1b595bc5d_FlagSet> _static_method_new(void);


	inline jule::Trait<_1b5959d27_CommonFlag> _method_find_flag(jule::Str);


	inline jule::Trait<_1b5959d27_CommonFlag> _method_find_flag_short(jule::I32);


	inline jule::Slice<jule::Trait<_1b5959d27_CommonFlag>> _method_flags(void);


	inline jule::Exceptional<jule::Slice<jule::Str>> _method_parse(jule::Slice<jule::Str>);


	inline void _method_reset(void);


	inline jule::Ptr<_1b595ae38_Flag_4> _method_add_flag_common_0(jule::Str,jule::I32,jule::Str);
	inline jule::Ptr<_1b595ae38_Flag_3> _method_add_flag_common_1(jule::Str,jule::I32,jule::Str);




	inline void _method_add_var_0(jule::Ptr<jule::Str>,jule::Str,jule::I32,jule::Str);
	inline void _method_add_var_1(jule::Ptr<jule::Bool>,jule::Str,jule::I32,jule::Str);


	inline bool operator==(_1b595bc5d_FlagSet _other) {
		return 
			this->_field__flags == _other._field__flags;
	}

	inline bool operator!=(_1b595bc5d_FlagSet _other) { return !this->operator==(_other); }


};


struct _1e8648917_Enum: public _1ce760828_Kind {
	jule::Ptr<_1e8648917_Enum> self;

	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ce761b37_TypeSymbol> _field_kind = jule::Ptr<_1ce761b37_TypeSymbol>();
	jule::Slice<jule::Ptr<_1e86494b7_EnumItem>> _field_items = jule::Slice<jule::Ptr<_1e86494b7_EnumItem>>();
	jule::Str _field_doc = jule::Str();


	_1e8648917_Enum(_212ae5c02_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1ce761b37_TypeSymbol> __param_kind, jule::Slice<jule::Ptr<_1e86494b7_EnumItem>> __param_items, jule::Str __param_doc): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc(__param_doc) {
		this->self = jule::Ptr<_1e8648917_Enum>::make(this, nullptr);

	}

	~_1e8648917_Enum(void) { this->self.ref = nullptr; }

	_1e8648917_Enum(void) { this->self = jule::Ptr<_1e8648917_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Ptr<_1e86494b7_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(_1e8648917_Enum _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_items == _other._field_items &&
			this->_field_doc == _other._field_doc;
	}

	inline bool operator!=(_1e8648917_Enum _other) { return !this->operator==(_other); }


};


struct _2129e3d42_TypeDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_kind = jule::Any();


	_2129e3d42_TypeDecl(_212ae5c02_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_2129e3d42_TypeDecl(void) = default;

	inline bool operator==(_2129e3d42_TypeDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2129e3d42_TypeDecl _other) { return !this->operator==(_other); }


};


struct _212b16e32_LitExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_value = jule::Str();


	_212b16e32_LitExpr(_212ae5c02_Token __param_token, jule::Str __param_value): _field_token(__param_token), _field_value(__param_value) {}

	

	_212b16e32_LitExpr(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(_212b16e32_LitExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_value == _other._field_value;
	}

	inline bool operator!=(_212b16e32_LitExpr _other) { return !this->operator==(_other); }


};


struct _212b17372_UnsafeExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();


	_212b17372_UnsafeExpr(_212ae5c02_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_212b17372_UnsafeExpr(void) = default;

	inline bool operator==(_212b17372_UnsafeExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b17372_UnsafeExpr _other) { return !this->operator==(_other); }


};


struct _212b177b2_CoExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();


	_212b177b2_CoExpr(_212ae5c02_Token __param_token, jule::Ptr<_212b16162_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_212b177b2_CoExpr(void) = default;

	inline bool operator==(_212b177b2_CoExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b177b2_CoExpr _other) { return !this->operator==(_other); }


};


struct _212b17c02_IdentExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();


	_212b17c02_IdentExpr(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked) {}

	

	_212b17c02_IdentExpr(void) = default;

	inline jule::Bool _method_is_self(void);


	inline bool operator==(_212b17c02_IdentExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked;
	}

	inline bool operator!=(_212b17c02_IdentExpr _other) { return !this->operator==(_other); }


};


struct _1e76761d7_AssignInfo {
	jule::Slice<_212ae5c02_Token> _field_l = jule::Slice<_212ae5c02_Token>();
	jule::Slice<_212ae5c02_Token> _field_r = jule::Slice<_212ae5c02_Token>();
	_212ae5c02_Token _field_setter = _212ae5c02_Token();
	jule::Bool _field_ok = jule::Bool();


	_1e76761d7_AssignInfo(jule::Slice<_212ae5c02_Token> __param_l, jule::Slice<_212ae5c02_Token> __param_r, _212ae5c02_Token __param_setter, jule::Bool __param_ok): _field_l(__param_l), _field_r(__param_r), _field_setter(__param_setter), _field_ok(__param_ok) {}

	

	_1e76761d7_AssignInfo(void) = default;

	inline bool operator==(_1e76761d7_AssignInfo _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_setter == _other._field_setter &&
			this->_field_ok == _other._field_ok;
	}

	inline bool operator!=(_1e76761d7_AssignInfo _other) { return !this->operator==(_other); }


};


struct _212b18142_UnaryExpr {
	_212ae5c02_Token _field_op = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();


	_212b18142_UnaryExpr(_212ae5c02_Token __param_op, jule::Any __param_expr): _field_op(__param_op), _field_expr(__param_expr) {}

	

	_212b18142_UnaryExpr(void) = default;

	inline bool operator==(_212b18142_UnaryExpr _other) {
		return 
			this->_field_op == _other._field_op &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b18142_UnaryExpr _other) { return !this->operator==(_other); }


};


struct _212b18582_VariadicExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();


	_212b18582_VariadicExpr(_212ae5c02_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_212b18582_VariadicExpr(void) = default;

	inline bool operator==(_212b18582_VariadicExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b18582_VariadicExpr _other) { return !this->operator==(_other); }


};


struct _2129908e3_IdentTypeDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>();


	_2129908e3_IdentTypeDecl(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_generics(__param_generics) {}

	

	_2129908e3_IdentTypeDecl(void) = default;

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(_2129908e3_IdentTypeDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_2129908e3_IdentTypeDecl _other) { return !this->operator==(_other); }


};


struct _212b18e12_NsSelectionExpr {
	jule::Slice<_212ae5c02_Token> _field_ns = jule::Slice<_212ae5c02_Token>();
	_212ae5c02_Token _field_ident = _212ae5c02_Token();


	_212b18e12_NsSelectionExpr(jule::Slice<_212ae5c02_Token> __param_ns, _212ae5c02_Token __param_ident): _field_ns(__param_ns), _field_ident(__param_ident) {}

	

	_212b18e12_NsSelectionExpr(void) = default;

	inline bool operator==(_212b18e12_NsSelectionExpr _other) {
		return 
			this->_field_ns == _other._field_ns &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_212b18e12_NsSelectionExpr _other) { return !this->operator==(_other); }


};


struct _212b19352_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Any _field_expr = jule::Any();
	_212ae5c02_Token _field_ident = _212ae5c02_Token();


	_212b19352_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _212ae5c02_Token __param_ident): _field_is_self(__param_is_self), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_212b19352_SubIdentExpr(void) = default;

	inline bool operator==(_212b19352_SubIdentExpr _other) {
		return 
			this->_field_is_self == _other._field_is_self &&
			this->_field_expr == _other._field_expr &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_212b19352_SubIdentExpr _other) { return !this->operator==(_other); }


};


struct _212b19792_BinopExpr {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_212ae5c02_Token _field_op = _212ae5c02_Token();


	_212b19792_BinopExpr(jule::Any __param_left, jule::Any __param_right, _212ae5c02_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_212b19792_BinopExpr(void) = default;

	inline bool operator==(_212b19792_BinopExpr _other) {
		return 
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_212b19792_BinopExpr _other) { return !this->operator==(_other); }


};


struct _212b19bd2_FnCallExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();
	jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>();
	jule::Slice<jule::Ptr<_212b16162_Expr>> _field_args = jule::Slice<jule::Ptr<_212b16162_Expr>>();
	jule::Ptr<_212b1e555_ScopeTree> _field_exception = jule::Ptr<_212b1e555_ScopeTree>();


	_212b19bd2_FnCallExpr(_212ae5c02_Token __param_token, jule::Ptr<_212b16162_Expr> __param_expr, jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> __param_generics, jule::Slice<jule::Ptr<_212b16162_Expr>> __param_args, jule::Ptr<_212b1e555_ScopeTree> __param_exception): _field_token(__param_token), _field_expr(__param_expr), _field_generics(__param_generics), _field_args(__param_args), _field_exception(__param_exception) {}

	

	_212b19bd2_FnCallExpr(void) = default;

	inline jule::Bool _method_unhandled(void);


	inline jule::Bool _method_ignored(void);


	inline bool operator==(_212b19bd2_FnCallExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_generics == _other._field_generics &&
			this->_field_args == _other._field_args &&
			this->_field_exception == _other._field_exception;
	}

	inline bool operator!=(_212b19bd2_FnCallExpr _other) { return !this->operator==(_other); }


};


struct _1ce685d9c_Assign {
	jule::Ptr<_1e83bdbcb_OperandExprModel> _field_l = jule::Ptr<_1e83bdbcb_OperandExprModel>();
	jule::Ptr<_1e83bdbcb_OperandExprModel> _field_r = jule::Ptr<_1e83bdbcb_OperandExprModel>();
	_212ae5c02_Token _field_op = _212ae5c02_Token();


	_1ce685d9c_Assign(jule::Ptr<_1e83bdbcb_OperandExprModel> __param_l, jule::Ptr<_1e83bdbcb_OperandExprModel> __param_r, _212ae5c02_Token __param_op): _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1ce685d9c_Assign(void) = default;

	inline bool operator==(_1ce685d9c_Assign _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1ce685d9c_Assign _other) { return !this->operator==(_other); }


};


struct _212b1a122_FieldExprPair {
	_212ae5c02_Token _field_field = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();


	_212b1a122_FieldExprPair(_212ae5c02_Token __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_212b1a122_FieldExprPair(void) = default;

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(_212b1a122_FieldExprPair _other) {
		return 
			this->_field_field == _other._field_field &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b1a122_FieldExprPair _other) { return !this->operator==(_other); }


};


struct _2129e2b32_Node {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_data = jule::Any();


	_2129e2b32_Node(_212ae5c02_Token __param_token, jule::Any __param_data): _field_token(__param_token), _field_data(__param_data) {}

	

	_2129e2b32_Node(void) = default;

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_directive(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(_2129e2b32_Node _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_2129e2b32_Node _other) { return !this->operator==(_other); }


};


struct _212b1a9a2_BraceLit {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_212b1a9a2_BraceLit(_212ae5c02_Token __param_token, jule::Slice<jule::Any> __param_exprs): _field_token(__param_token), _field_exprs(__param_exprs) {}

	

	_212b1a9a2_BraceLit(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(_212b1a9a2_BraceLit _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_212b1a9a2_BraceLit _other) { return !this->operator==(_other); }


};


struct _1e82e47a0_Field {
	jule::Ptr<_1e82e47a0_Field> self;

	jule::Ptr<_1e83b1718_Struct> _field_owner = jule::Ptr<_1e83b1718_Struct>();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ce761b37_TypeSymbol> _field_kind = jule::Ptr<_1ce761b37_TypeSymbol>();
	jule::Ptr<_212b16162_Expr> _field_default = jule::Ptr<_212b16162_Expr>();


	_1e82e47a0_Field(jule::Ptr<_1e83b1718_Struct> __param_owner, _212ae5c02_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1ce761b37_TypeSymbol> __param_kind, jule::Ptr<_212b16162_Expr> __param_default): _field_owner(__param_owner), _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {
		this->self = jule::Ptr<_1e82e47a0_Field>::make(this, nullptr);

	}

	~_1e82e47a0_Field(void) { this->self.ref = nullptr; }

	_1e82e47a0_Field(void) { this->self = jule::Ptr<_1e82e47a0_Field>::make(this, nullptr); }

	inline jule::Ptr<_1e83b2cbe_FieldIns> _method_instance(void);


	inline bool operator==(_1e82e47a0_Field _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1e82e47a0_Field _other) { return !this->operator==(_other); }


};


struct _212b1b365_KeyValPair {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();
	_212ae5c02_Token _field_colon = _212ae5c02_Token();


	_212b1b365_KeyValPair(jule::Any __param_key, jule::Any __param_val, _212ae5c02_Token __param_colon): _field_key(__param_key), _field_val(__param_val), _field_colon(__param_colon) {}

	

	_212b1b365_KeyValPair(void) = default;

	inline bool operator==(_212b1b365_KeyValPair _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val &&
			this->_field_colon == _other._field_colon;
	}

	inline bool operator!=(_212b1b365_KeyValPair _other) { return !this->operator==(_other); }


};


struct _1ce68793c_ScopeLabel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_1ce6850cc_Label> _field_label = jule::Ptr<_1ce6850cc_Label>();
	jule::I64 _field_pos = jule::I64();
	jule::Ptr<_1ce6882bc_ScopeChecker> _field_scope = jule::Ptr<_1ce6882bc_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();


	_1ce68793c_ScopeLabel(_212ae5c02_Token __param_token, jule::Ptr<_1ce6850cc_Label> __param_label, jule::I64 __param_pos, jule::Ptr<_1ce6882bc_ScopeChecker> __param_scope, jule::Bool __param_used): _field_token(__param_token), _field_label(__param_label), _field_pos(__param_pos), _field_scope(__param_scope), _field_used(__param_used) {}

	

	_1ce68793c_ScopeLabel(void) = default;

	inline bool operator==(_1ce68793c_ScopeLabel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label &&
			this->_field_pos == _other._field_pos &&
			this->_field_scope == _other._field_scope &&
			this->_field_used == _other._field_used;
	}

	inline bool operator!=(_1ce68793c_ScopeLabel _other) { return !this->operator==(_other); }


};


struct _212b1b7a5_SliceExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_212b1b7a5_SliceExpr(_212ae5c02_Token __param_token, jule::Slice<jule::Any> __param_elems): _field_token(__param_token), _field_elems(__param_elems) {}

	

	_212b1b7a5_SliceExpr(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(_212b1b7a5_SliceExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_212b1b7a5_SliceExpr _other) { return !this->operator==(_other); }


};


struct _1e83b1718_Struct {
	jule::Ptr<_1e83b1718_Struct> self;

	jule::Ptr<_1ce6ab345_Sema> _field_sema = jule::Ptr<_1ce6ab345_Sema>();
	jule::Slice<jule::Ptr<_1e83b1718_Struct>> _field_depends = jule::Slice<jule::Ptr<_1e83b1718_Struct>>();
	jule::Slice<jule::Ptr<_1e83b1718_Struct>> _field_uses = jule::Slice<jule::Ptr<_1e83b1718_Struct>>();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1e82e47a0_Field>> _field_fields = jule::Slice<jule::Ptr<_1e82e47a0_Field>>();
	jule::Slice<jule::Ptr<_1e83d4384_Fn>> _field_methods = jule::Slice<jule::Ptr<_1e83d4384_Fn>>();
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _field_statics = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>();
	jule::Slice<jule::Ptr<_1e85a7865_Trait>> _field_implements = jule::Slice<jule::Ptr<_1e85a7865_Trait>>();
	_1e83ac923_OperatorMap _field_operators = _1e83ac923_OperatorMap();
	jule::Slice<jule::Ptr<_1e83b84bc_StructIns>> _field_instances = jule::Slice<jule::Ptr<_1e83b84bc_StructIns>>();


	_1e83b1718_Struct(jule::Ptr<_1ce6ab345_Sema> __param_sema, jule::Slice<jule::Ptr<_1e83b1718_Struct>> __param_depends, jule::Slice<jule::Ptr<_1e83b1718_Struct>> __param_uses, _212ae5c02_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_1e82e47a0_Field>> __param_fields, jule::Slice<jule::Ptr<_1e83d4384_Fn>> __param_methods, jule::Slice<jule::Ptr<_1ce6cecb4_Var>> __param_statics, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> __param_generics, jule::Slice<jule::Ptr<_1e85a7865_Trait>> __param_implements, _1e83ac923_OperatorMap __param_operators, jule::Slice<jule::Ptr<_1e83b84bc_StructIns>> __param_instances): _field_sema(__param_sema), _field_depends(__param_depends), _field_uses(__param_uses), _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_methods(__param_methods), _field_statics(__param_statics), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc(__param_doc), _field_generics(__param_generics), _field_implements(__param_implements), _field_operators(__param_operators), _field_instances(__param_instances) {
		this->self = jule::Ptr<_1e83b1718_Struct>::make(this, nullptr);

	}

	~_1e83b1718_Struct(void) { this->self.ref = nullptr; }

	_1e83b1718_Struct(void) { this->self = jule::Ptr<_1e83b1718_Struct>::make(this, nullptr); }

	inline jule::Ptr<_1e83b84bc_StructIns> _method_instance(void);


	inline jule::Ptr<_1e83b84bc_StructIns> _method_append_instance(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1ce6cecb4_Var> _method_find_static(jule::Str);


	inline jule::Ptr<_1e82e47a0_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ptr<_1e85a7865_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ptr<_1e83b1718_Struct>);


	inline jule::Bool _method_has_ref_accessible(void);


	inline bool operator==(_1e83b1718_Struct _other) {
		return 
			this->_field_sema == _other._field_sema &&
			this->_field_depends == _other._field_depends &&
			this->_field_uses == _other._field_uses &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_fields == _other._field_fields &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_directives == _other._field_directives &&
			this->_field_doc == _other._field_doc &&
			this->_field_generics == _other._field_generics &&
			this->_field_implements == _other._field_implements &&
			this->_field_operators == _other._field_operators &&
			this->_field_instances == _other._field_instances;
	}

	inline bool operator!=(_1e83b1718_Struct _other) { return !this->operator==(_other); }


};


struct _212b1bbe5_IndexingExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_index = jule::Any();


	_212b1bbe5_IndexingExpr(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Any __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_212b1bbe5_IndexingExpr(void) = default;

	inline bool operator==(_212b1bbe5_IndexingExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_index == _other._field_index;
	}

	inline bool operator!=(_212b1bbe5_IndexingExpr _other) { return !this->operator==(_other); }


};


struct _1ce6a0317_ImportInfo: public _1b545ddc0_Lookup {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<_212ae5c02_Token> _field_selected = jule::Slice<_212ae5c02_Token>();
	jule::Ptr<_1ce6a15e3_Package> _field_package = jule::Ptr<_1ce6a15e3_Package>();
	jule::I64 _field_mod_id = jule::I64();


	_1ce6a0317_ImportInfo(_212ae5c02_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_212ae5c02_Token> __param_selected, jule::Ptr<_1ce6a15e3_Package> __param_package, jule::I64 __param_mod_id): _field_token(__param_token), _field_path(__param_path), _field_link_path(__param_link_path), _field_ident(__param_ident), _field_alias(__param_alias), _field_duplicate(__param_duplicate), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std), _field_import_all(__param_import_all), _field_selected(__param_selected), _field_package(__param_package), _field_mod_id(__param_mod_id) {}

	

	_1ce6a0317_ImportInfo(void) = default;

	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1ce6a0317_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>);


	inline jule::Ptr<_1ce6cecb4_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1ce75e6a1_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83b1718_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1e85a7865_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e8648917_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline jule::Bool _method_is_accessible_via_selection(void);


	inline bool operator==(_1ce6a0317_ImportInfo _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_path == _other._field_path &&
			this->_field_link_path == _other._field_link_path &&
			this->_field_ident == _other._field_ident &&
			this->_field_alias == _other._field_alias &&
			this->_field_duplicate == _other._field_duplicate &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_std == _other._field_std &&
			this->_field_import_all == _other._field_import_all &&
			this->_field_selected == _other._field_selected &&
			this->_field_package == _other._field_package &&
			this->_field_mod_id == _other._field_mod_id;
	}

	inline bool operator!=(_1ce6a0317_ImportInfo _other) { return !this->operator==(_other); }


};


struct _1e83b84bc_StructIns: public _1ce760828_Kind {
	jule::Ptr<_1e83b84bc_StructIns> self;

	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_1e83b1718_Struct> _field_decl = jule::Ptr<_1e83b1718_Struct>();
	jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>();
	jule::Slice<jule::Ptr<_1e83b2cbe_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_1e83b2cbe_FieldIns>>();
	jule::Slice<jule::Ptr<_1e83d4384_Fn>> _field_methods = jule::Slice<jule::Ptr<_1e83d4384_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_1e83de4b0_ReferenceStack> _field_references = jule::Ptr<_1e83de4b0_ReferenceStack>();
	_1e83ae55c_Operators _field_operators = _1e83ae55c_Operators();


	_1e83b84bc_StructIns(jule::Bool __param_checked, jule::Ptr<_1e83b1718_Struct> __param_decl, jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1e83b2cbe_FieldIns>> __param_fields, jule::Slice<jule::Ptr<_1e83d4384_Fn>> __param_methods, jule::Bool __param_mutable, jule::Ptr<_1e83de4b0_ReferenceStack> __param_references, _1e83ae55c_Operators __param_operators): _field_checked(__param_checked), _field_decl(__param_decl), _field_generics(__param_generics), _field_fields(__param_fields), _field_methods(__param_methods), _field_mutable(__param_mutable), _field_references(__param_references), _field_operators(__param_operators) {
		this->self = jule::Ptr<_1e83b84bc_StructIns>::make(this, nullptr);

	}

	~_1e83b84bc_StructIns(void) { this->self.ref = nullptr; }

	_1e83b84bc_StructIns(void) { this->self = jule::Ptr<_1e83b84bc_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Bool _method_same(jule::Ptr<_1e83b84bc_StructIns>);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1e83b2cbe_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(_1e83b84bc_StructIns _other) {
		return 
			this->_field_checked == _other._field_checked &&
			this->_field_decl == _other._field_decl &&
			this->_field_generics == _other._field_generics &&
			this->_field_fields == _other._field_fields &&
			this->_field_methods == _other._field_methods &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_references == _other._field_references &&
			this->_field_operators == _other._field_operators;
	}

	inline bool operator!=(_1e83b84bc_StructIns _other) { return !this->operator==(_other); }


};


struct _212b1c135_SlicingExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_start = jule::Any();
	jule::Any _field_to = jule::Any();


	_212b1c135_SlicingExpr(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to): _field_token(__param_token), _field_expr(__param_expr), _field_start(__param_start), _field_to(__param_to) {}

	

	_212b1c135_SlicingExpr(void) = default;

	inline bool operator==(_212b1c135_SlicingExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_start == _other._field_start &&
			this->_field_to == _other._field_to;
	}

	inline bool operator!=(_212b1c135_SlicingExpr _other) { return !this->operator==(_other); }


};


struct _1e83be3c4_BinopExprModel {
	jule::Ptr<_1e83bdbcb_OperandExprModel> _field_left = jule::Ptr<_1e83bdbcb_OperandExprModel>();
	jule::Ptr<_1e83bdbcb_OperandExprModel> _field_right = jule::Ptr<_1e83bdbcb_OperandExprModel>();
	_212ae5c02_Token _field_op = _212ae5c02_Token();


	_1e83be3c4_BinopExprModel(jule::Ptr<_1e83bdbcb_OperandExprModel> __param_left, jule::Ptr<_1e83bdbcb_OperandExprModel> __param_right, _212ae5c02_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1e83be3c4_BinopExprModel(void) = default;

	inline bool operator==(_1e83be3c4_BinopExprModel _other) {
		return 
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1e83be3c4_BinopExprModel _other) { return !this->operator==(_other); }


};


struct _1e83bebdd_UnaryExprModel {
	jule::Ptr<_1ce727449_Data> _field_expr = jule::Ptr<_1ce727449_Data>();
	_212ae5c02_Token _field_op = _212ae5c02_Token();


	_1e83bebdd_UnaryExprModel(jule::Ptr<_1ce727449_Data> __param_expr, _212ae5c02_Token __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1e83bebdd_UnaryExprModel(void) = default;

	inline bool operator==(_1e83bebdd_UnaryExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1e83bebdd_UnaryExprModel _other) { return !this->operator==(_other); }


};


struct _1ce6cecb4_Var {
	jule::Ptr<_1ce62e86d_Scope> _field_scope = jule::Ptr<_1ce62e86d_Scope>();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_1ce761b37_TypeSymbol> _field_kind = jule::Ptr<_1ce761b37_TypeSymbol>();
	jule::Ptr<_1ce7281d6_Value> _field_value = jule::Ptr<_1ce7281d6_Value>();
	jule::Ptr<_1e83de4b0_ReferenceStack> _field_references = jule::Ptr<_1e83de4b0_ReferenceStack>();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Ptr<_1ce6ce6cb_IterRelation> _field_iter_relation = jule::Ptr<_1ce6ce6cb_IterRelation>();
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _field_depends = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>();


	_1ce6cecb4_Var(jule::Ptr<_1ce62e86d_Scope> __param_scope, _212ae5c02_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ptr<_1ce761b37_TypeSymbol> __param_kind, jule::Ptr<_1ce7281d6_Value> __param_value, jule::Ptr<_1e83de4b0_ReferenceStack> __param_references, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Ptr<_1ce6ce6cb_IterRelation> __param_iter_relation, jule::Slice<jule::Ptr<_1ce6cecb4_Var>> __param_depends): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_constant(__param_constant), _field_mutable(__param_mutable), _field_public(__param_public), _field_used(__param_used), _field_statically(__param_statically), _field_reference(__param_reference), _field_doc(__param_doc), _field_kind(__param_kind), _field_value(__param_value), _field_references(__param_references), _field_directives(__param_directives), _field_iter_relation(__param_iter_relation), _field_depends(__param_depends) {}

	

	_1ce6cecb4_Var(void) = default;

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(_1ce6cecb4_Var _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_constant == _other._field_constant &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_public == _other._field_public &&
			this->_field_used == _other._field_used &&
			this->_field_statically == _other._field_statically &&
			this->_field_reference == _other._field_reference &&
			this->_field_doc == _other._field_doc &&
			this->_field_kind == _other._field_kind &&
			this->_field_value == _other._field_value &&
			this->_field_references == _other._field_references &&
			this->_field_directives == _other._field_directives &&
			this->_field_iter_relation == _other._field_iter_relation &&
			this->_field_depends == _other._field_depends;
	}

	inline bool operator!=(_1ce6cecb4_Var _other) { return !this->operator==(_other); }


};


struct _212b1c575_TernaryExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_212b1c575_TernaryExpr(_212ae5c02_Token __param_token, jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_token(__param_token), _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_212b1c575_TernaryExpr(void) = default;

	inline bool operator==(_212b1c575_TernaryExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_condition == _other._field_condition &&
			this->_field_true_expr == _other._field_true_expr &&
			this->_field_false_expr == _other._field_false_expr;
	}

	inline bool operator!=(_212b1c575_TernaryExpr _other) { return !this->operator==(_other); }


};


struct _1ce70c231_TypeCompatibilityChecker {
	jule::Ptr<_1ce6ab345_Sema> _field_s = jule::Ptr<_1ce6ab345_Sema>();
	jule::Ptr<_1ce76121e_TypeKind> _field_dest = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce76121e_TypeKind> _field_src = jule::Ptr<_1ce76121e_TypeKind>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();


	_1ce70c231_TypeCompatibilityChecker(jule::Ptr<_1ce6ab345_Sema> __param_s, jule::Ptr<_1ce76121e_TypeKind> __param_dest, jule::Ptr<_1ce76121e_TypeKind> __param_src, _212ae5c02_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_src(__param_src), _field_error_token(__param_error_token) {}

	

	_1ce70c231_TypeCompatibilityChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(_1ce70c231_TypeCompatibilityChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_dest == _other._field_dest &&
			this->_field_src == _other._field_src &&
			this->_field_error_token == _other._field_error_token;
	}

	inline bool operator!=(_1ce70c231_TypeCompatibilityChecker _other) { return !this->operator==(_other); }


};


struct _1ce70c671_AssignTypeChecker {
	jule::Ptr<_1ce6ab345_Sema> _field_s = jule::Ptr<_1ce6ab345_Sema>();
	jule::Ptr<_1ce76121e_TypeKind> _field_dest = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce727449_Data> _field_d = jule::Ptr<_1ce727449_Data>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();


	_1ce70c671_AssignTypeChecker(jule::Ptr<_1ce6ab345_Sema> __param_s, jule::Ptr<_1ce76121e_TypeKind> __param_dest, jule::Ptr<_1ce727449_Data> __param_d, _212ae5c02_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_d(__param_d), _field_error_token(__param_error_token) {}

	

	_1ce70c671_AssignTypeChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_is_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(_1ce70c671_AssignTypeChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_dest == _other._field_dest &&
			this->_field_d == _other._field_d &&
			this->_field_error_token == _other._field_error_token;
	}

	inline bool operator!=(_1ce70c671_AssignTypeChecker _other) { return !this->operator==(_other); }


};


struct _1ce70cd25_DynamicTypeAnnotation {
	jule::Ptr<_1ce728879_Eval> _field_e = jule::Ptr<_1ce728879_Eval>();
	jule::Ptr<_1e83d630e_FnIns> _field_f = jule::Ptr<_1e83d630e_FnIns>();
	jule::Ptr<_1e83d5bb0_ParamIns> _field_p = jule::Ptr<_1e83d5bb0_ParamIns>();
	jule::Ptr<_1ce727449_Data> _field_a = jule::Ptr<_1ce727449_Data>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();
	jule::Ptr<_1ce76121e_TypeKind>* _field_k = nullptr;


	_1ce70cd25_DynamicTypeAnnotation(jule::Ptr<_1ce728879_Eval> __param_e, jule::Ptr<_1e83d630e_FnIns> __param_f, jule::Ptr<_1e83d5bb0_ParamIns> __param_p, jule::Ptr<_1ce727449_Data> __param_a, _212ae5c02_Token __param_error_token, jule::Ptr<_1ce76121e_TypeKind>* __param_k): _field_e(__param_e), _field_f(__param_f), _field_p(__param_p), _field_a(__param_a), _field_error_token(__param_error_token), _field_k(__param_k) {}

	

	_1ce70cd25_DynamicTypeAnnotation(void) = default;

	inline void _method_push_generic(jule::Ptr<_1ce76121e_TypeKind>&,jule::I64);


	inline jule::Bool _method_annotate_prim(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_slc(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_check_map_key(jule::Ptr<_1ce76121e_TypeKind>*,jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_map(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_fn(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_ptr(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_sptr(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_any(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate_kind(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(_1ce70cd25_DynamicTypeAnnotation _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_f == _other._field_f &&
			this->_field_p == _other._field_p &&
			this->_field_a == _other._field_a &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_k == _other._field_k;
	}

	inline bool operator!=(_1ce70cd25_DynamicTypeAnnotation _other) { return !this->operator==(_other); }


};


struct _1ce70d908_FnCallArgChecker {
	jule::Ptr<_1ce728879_Eval> _field_e = jule::Ptr<_1ce728879_Eval>();
	jule::Slice<jule::Ptr<_212b16162_Expr>> _field_args = jule::Slice<jule::Ptr<_212b16162_Expr>>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();
	jule::Ptr<_1e83d630e_FnIns> _field_f = jule::Ptr<_1e83d630e_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();


	_1ce70d908_FnCallArgChecker(jule::Ptr<_1ce728879_Eval> __param_e, jule::Slice<jule::Ptr<_212b16162_Expr>> __param_args, _212ae5c02_Token __param_error_token, jule::Ptr<_1e83d630e_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models): _field_e(__param_e), _field_args(__param_args), _field_error_token(__param_error_token), _field_f(__param_f), _field_dynamic_annotation(__param_dynamic_annotation), _field_arg_models(__param_arg_models) {}

	

	_1ce70d908_FnCallArgChecker(void) = default;

	inline void _method_push_err_token(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>&);


	inline jule::Bool _method_check_arg(jule::Ptr<_1e83d5bb0_ParamIns>&,jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token&);


	inline jule::Bool _method_push(jule::Ptr<_1e83d5bb0_ParamIns>&,jule::Ptr<_212b16162_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ptr<_1e83d5bb0_ParamIns>&,jule::I64);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>&);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(_1ce70d908_FnCallArgChecker _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_args == _other._field_args &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_f == _other._field_f &&
			this->_field_dynamic_annotation == _other._field_dynamic_annotation &&
			this->_field_arg_models == _other._field_arg_models;
	}

	inline bool operator!=(_1ce70d908_FnCallArgChecker _other) { return !this->operator==(_other); }


};


struct _1ce70e497_StructLitChecker {
	jule::Ptr<_1ce728879_Eval> _field_e = jule::Ptr<_1ce728879_Eval>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();
	jule::Ptr<_1e83b84bc_StructIns> _field_s = jule::Ptr<_1e83b84bc_StructIns>();
	jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>>();


	_1ce70e497_StructLitChecker(jule::Ptr<_1ce728879_Eval> __param_e, _212ae5c02_Token __param_error_token, jule::Ptr<_1e83b84bc_StructIns> __param_s, jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>> __param_args): _field_e(__param_e), _field_error_token(__param_error_token), _field_s(__param_s), _field_args(__param_args) {}

	

	_1ce70e497_StructLitChecker(void) = default;

	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ptr<_1e83b2cbe_FieldIns>&,jule::Ptr<_1ce727449_Data>&,_212ae5c02_Token&);


	inline void _method_check_pair(jule::Ptr<_212b1a122_FieldExprPair>&,jule::Slice<jule::Any>&);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>&);


	inline void _method_check(jule::Slice<jule::Any>&);


	inline bool operator==(_1ce70e497_StructLitChecker _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_s == _other._field_s &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_1ce70e497_StructLitChecker _other) { return !this->operator==(_other); }


};


struct _1e83c0bbc_StructLitExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_1e83b84bc_StructIns> _field_strct = jule::Ptr<_1e83b84bc_StructIns>();
	jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>>();


	_1e83c0bbc_StructLitExprModel(_212ae5c02_Token __param_token, jule::Ptr<_1e83b84bc_StructIns> __param_strct, jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>> __param_args): _field_token(__param_token), _field_strct(__param_strct), _field_args(__param_args) {}

	

	_1e83c0bbc_StructLitExprModel(void) = default;

	inline bool operator==(_1e83c0bbc_StructLitExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_strct == _other._field_strct &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_1e83c0bbc_StructLitExprModel _other) { return !this->operator==(_other); }


};


struct _1ce710773_RetTypeChecker {
	jule::Ptr<_1ce6882bc_ScopeChecker> _field_sc = jule::Ptr<_1ce6882bc_ScopeChecker>();
	jule::Ptr<_1e83d630e_FnIns> _field_f = jule::Ptr<_1e83d630e_FnIns>();
	jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>();
	jule::Slice<jule::Ptr<_212b16162_Expr>> _field_exprs = jule::Slice<jule::Ptr<_212b16162_Expr>>();
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _field_vars = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();
	jule::Any _field_model = jule::Any();


	_1ce710773_RetTypeChecker(jule::Ptr<_1ce6882bc_ScopeChecker> __param_sc, jule::Ptr<_1e83d630e_FnIns> __param_f, jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> __param_types, jule::Slice<jule::Ptr<_212b16162_Expr>> __param_exprs, jule::Slice<jule::Ptr<_1ce6cecb4_Var>> __param_vars, _212ae5c02_Token __param_error_token, jule::Any __param_model): _field_sc(__param_sc), _field_f(__param_f), _field_types(__param_types), _field_exprs(__param_exprs), _field_vars(__param_vars), _field_error_token(__param_error_token), _field_model(__param_model) {}

	

	_1ce710773_RetTypeChecker(void) = default;

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ptr<_212b16162_Expr>&);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ptr<_212b16162_Expr>&);


	inline bool operator==(_1ce710773_RetTypeChecker _other) {
		return 
			this->_field_sc == _other._field_sc &&
			this->_field_f == _other._field_f &&
			this->_field_types == _other._field_types &&
			this->_field_exprs == _other._field_exprs &&
			this->_field_vars == _other._field_vars &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_1ce710773_RetTypeChecker _other) { return !this->operator==(_other); }


};


struct _212b1c9b5_GenericDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();


	_212b1c9b5_GenericDecl(_212ae5c02_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_212b1c9b5_GenericDecl(void) = default;

	inline bool operator==(_212b1c9b5_GenericDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_212b1c9b5_GenericDecl _other) { return !this->operator==(_other); }


};


struct _1e83c1aad_CastingExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ce76121e_TypeKind> _field_kind = jule::Ptr<_1ce76121e_TypeKind>();
	jule::Ptr<_1ce76121e_TypeKind> _field_expr_kind = jule::Ptr<_1ce76121e_TypeKind>();


	_1e83c1aad_CastingExprModel(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Ptr<_1ce76121e_TypeKind> __param_kind, jule::Ptr<_1ce76121e_TypeKind> __param_expr_kind): _field_token(__param_token), _field_expr(__param_expr), _field_kind(__param_kind), _field_expr_kind(__param_expr_kind) {}

	

	_1e83c1aad_CastingExprModel(void) = default;

	inline bool operator==(_1e83c1aad_CastingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_kind == _other._field_kind &&
			this->_field_expr_kind == _other._field_expr_kind;
	}

	inline bool operator!=(_1e83c1aad_CastingExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c2581_FnCallExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_1e83d630e_FnIns> _field_func = jule::Ptr<_1e83d630e_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_1ce62e86d_Scope> _field_except = jule::Ptr<_1ce62e86d_Scope>();
	jule::Bool _field_assigned = jule::Bool();


	_1e83c2581_FnCallExprModel(_212ae5c02_Token __param_token, jule::Ptr<_1e83d630e_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args, jule::Ptr<_1ce62e86d_Scope> __param_except, jule::Bool __param_assigned): _field_token(__param_token), _field_func(__param_func), _field_is_co(__param_is_co), _field_expr(__param_expr), _field_args(__param_args), _field_except(__param_except), _field_assigned(__param_assigned) {}

	

	_1e83c2581_FnCallExprModel(void) = default;

	inline bool operator==(_1e83c2581_FnCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_func == _other._field_func &&
			this->_field_is_co == _other._field_is_co &&
			this->_field_expr == _other._field_expr &&
			this->_field_args == _other._field_args &&
			this->_field_except == _other._field_except &&
			this->_field_assigned == _other._field_assigned;
	}

	inline bool operator!=(_1e83c2581_FnCallExprModel _other) { return !this->operator==(_other); }


};


struct _212b1ce05_LabelSt {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();


	_212b1ce05_LabelSt(_212ae5c02_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_212b1ce05_LabelSt(void) = default;

	inline bool operator==(_212b1ce05_LabelSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_212b1ce05_LabelSt _other) { return !this->operator==(_other); }


};


struct _1e83c3928_IndexingExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_1ce727449_Data> _field_expr = jule::Ptr<_1ce727449_Data>();
	jule::Ptr<_1ce727449_Data> _field_index = jule::Ptr<_1ce727449_Data>();


	_1e83c3928_IndexingExprModel(_212ae5c02_Token __param_token, jule::Ptr<_1ce727449_Data> __param_expr, jule::Ptr<_1ce727449_Data> __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1e83c3928_IndexingExprModel(void) = default;

	inline bool operator==(_1e83c3928_IndexingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_index == _other._field_index;
	}

	inline bool operator!=(_1e83c3928_IndexingExprModel _other) { return !this->operator==(_other); }


};


struct _1ce72a084_BinaryEval {
	jule::Ptr<_1ce728879_Eval> _field_e = jule::Ptr<_1ce728879_Eval>();
	jule::Ptr<_1ce727449_Data> _field_l = jule::Ptr<_1ce727449_Data>();
	jule::Ptr<_1ce727449_Data> _field_r = jule::Ptr<_1ce727449_Data>();
	_212ae5c02_Token _field_op = _212ae5c02_Token();


	_1ce72a084_BinaryEval(jule::Ptr<_1ce728879_Eval> __param_e, jule::Ptr<_1ce727449_Data> __param_l, jule::Ptr<_1ce727449_Data> __param_r, _212ae5c02_Token __param_op): _field_e(__param_e), _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1ce72a084_BinaryEval(void) = default;

	static inline _1ce72a084_BinaryEval _static_method_new_plain(jule::Ptr<_1ce728879_Eval>);


	static inline _1ce72a084_BinaryEval _static_method_new(jule::Ptr<_1ce728879_Eval>,_212ae5c02_Token);


	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Bool _method_check_struct_common_operator_compatibility(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_nil(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_enum(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_sptr(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_ptr(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_arr(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_slc(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_fn(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_struct(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_trait(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_any(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_bool(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ptr<_1ce727449_Data>&);


	inline void _method_mod(void);


	inline jule::Bool _method_numbers_are_compatibile(jule::Str&,jule::Str&);


	inline jule::Ptr<_1ce727449_Data> _method_eval_float(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_int(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_prim(void);


	inline jule::Ptr<_1ce727449_Data> _method_eval_op(void);


	inline void _method_eval_const(jule::Ptr<_1ce727449_Data>&);


	inline void _method_check_data(jule::Ptr<_1ce727449_Data>&);


	inline void _method_check_datas(void);


	inline void _method_set_model(jule::Ptr<_1ce727449_Data>&);


	inline void _method_post_eval(jule::Ptr<_1ce727449_Data>&);


	inline jule::Ptr<_1ce727449_Data> _method_solve_explicit(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>&);


	inline jule::Ptr<_1ce727449_Data> _method_eval(jule::Ptr<_212b19792_BinopExpr>&);


	inline bool operator==(_1ce72a084_BinaryEval _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1ce72a084_BinaryEval _other) { return !this->operator==(_other); }


};


struct _1ce75e6a1_TypeAlias {
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ce761b37_TypeSymbol> _field_kind = jule::Ptr<_1ce761b37_TypeSymbol>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _field_generics = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>();


	_1ce75e6a1_TypeAlias(jule::Ptr<_212b1e555_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, jule::Bool __param_generic, _212ae5c02_Token __param_token, jule::Str __param_ident, jule::Ptr<_1ce761b37_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers, jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> __param_generics): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_used(__param_used), _field_generic(__param_generic), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc(__param_doc), _field_refers(__param_refers), _field_generics(__param_generics) {}

	

	_1ce75e6a1_TypeAlias(void) = default;

	inline bool operator==(_1ce75e6a1_TypeAlias _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_used == _other._field_used &&
			this->_field_generic == _other._field_generic &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_doc == _other._field_doc &&
			this->_field_refers == _other._field_refers &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_1ce75e6a1_TypeAlias _other) { return !this->operator==(_other); }


};


struct _212b1d345_GotoSt {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	_212ae5c02_Token _field_label = _212ae5c02_Token();


	_212b1d345_GotoSt(_212ae5c02_Token __param_token, _212ae5c02_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_212b1d345_GotoSt(void) = default;

	inline bool operator==(_212b1d345_GotoSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_212b1d345_GotoSt _other) { return !this->operator==(_other); }


};


struct _212b1d785_FallSt {
	_212ae5c02_Token _field_token = _212ae5c02_Token();


	_212b1d785_FallSt(_212ae5c02_Token __param_token): _field_token(__param_token) {}

	

	_212b1d785_FallSt(void) = default;

	inline bool operator==(_212b1d785_FallSt _other) {
		return 
			this->_field_token == _other._field_token;
	}

	inline bool operator!=(_212b1d785_FallSt _other) { return !this->operator==(_other); }


};


struct _212b1dbc5_AssignLeft {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();


	_212b1dbc5_AssignLeft(_212ae5c02_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ptr<_212b16162_Expr> __param_expr): _field_token(__param_token), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_212b1dbc5_AssignLeft(void) = default;

	inline bool operator==(_212b1dbc5_AssignLeft _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_reference == _other._field_reference &&
			this->_field_ident == _other._field_ident &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b1dbc5_AssignLeft _other) { return !this->operator==(_other); }


};


struct _1e83c585e_SlicingExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_1e83c585e_SlicingExprModel(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_1e83c585e_SlicingExprModel(void) = default;

	inline bool operator==(_1e83c585e_SlicingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_1e83c585e_SlicingExprModel _other) { return !this->operator==(_other); }


};


struct _1e83c62cc_TraitSubIdentExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1e83c62cc_TraitSubIdentExprModel(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Str __param_ident): _field_token(__param_token), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1e83c62cc_TraitSubIdentExprModel(void) = default;

	inline bool operator==(_1e83c62cc_TraitSubIdentExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e83c62cc_TraitSubIdentExprModel _other) { return !this->operator==(_other); }


};


struct _212b1e115_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	_212ae5c02_Token _field_setter = _212ae5c02_Token();
	jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>>();
	jule::Ptr<_212b16162_Expr> _field_right = jule::Ptr<_212b16162_Expr>();


	_212b1e115_AssignSt(jule::Bool __param_declarative, _212ae5c02_Token __param_setter, jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>> __param_left, jule::Ptr<_212b16162_Expr> __param_right): _field_declarative(__param_declarative), _field_setter(__param_setter), _field_left(__param_left), _field_right(__param_right) {}

	

	_212b1e115_AssignSt(void) = default;

	inline bool operator==(_212b1e115_AssignSt _other) {
		return 
			this->_field_declarative == _other._field_declarative &&
			this->_field_setter == _other._field_setter &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_212b1e115_AssignSt _other) { return !this->operator==(_other); }


};


struct _2129e34b2_Comment {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_text = jule::Str();


	_2129e34b2_Comment(_212ae5c02_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_2129e34b2_Comment(void) = default;

	inline bool operator==(_2129e34b2_Comment _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_text == _other._field_text;
	}

	inline bool operator!=(_2129e34b2_Comment _other) { return !this->operator==(_other); }


};


struct _212b1e995_ParamDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Str _field_ident = jule::Str();


	_212b1e995_ParamDecl(_212ae5c02_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_212b1e995_ParamDecl(void) = default;

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(_212b1e995_ParamDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_212b1e995_ParamDecl _other) { return !this->operator==(_other); }


};


struct _212b1edd5_FnDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Ptr<_2129e3072_CommentGroup> _field_doc_comments = jule::Ptr<_2129e3072_CommentGroup>();
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>();
	jule::Ptr<_212b15c22_RetTypeDecl> _field_result = jule::Ptr<_212b15c22_RetTypeDecl>();
	jule::Slice<jule::Ptr<_212b1e995_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_212b1e995_ParamDecl>>();


	_212b1edd5_FnDecl(_212ae5c02_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Ptr<_2129e3072_CommentGroup> __param_doc_comments, jule::Ptr<_212b1e555_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> __param_generics, jule::Ptr<_212b15c22_RetTypeDecl> __param_result, jule::Slice<jule::Ptr<_212b1e995_ParamDecl>> __param_params): _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params) {}

	

	_212b1edd5_FnDecl(void) = default;

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(_212b1edd5_FnDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_global == _other._field_global &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_statically == _other._field_statically &&
			this->_field_exceptional == _other._field_exceptional &&
			this->_field_ident == _other._field_ident &&
			this->_field_directives == _other._field_directives &&
			this->_field_doc_comments == _other._field_doc_comments &&
			this->_field_scope == _other._field_scope &&
			this->_field_generics == _other._field_generics &&
			this->_field_result == _other._field_result &&
			this->_field_params == _other._field_params;
	}

	inline bool operator!=(_212b1edd5_FnDecl _other) { return !this->operator==(_other); }


};


struct _212b20325_VarDecl {
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Ptr<_2129e3072_CommentGroup> _field_doc_comments = jule::Ptr<_2129e3072_CommentGroup>();
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();


	_212b20325_VarDecl(jule::Ptr<_212b1e555_ScopeTree> __param_scope, _212ae5c02_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Ptr<_2129e3072_CommentGroup> __param_doc_comments, jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Ptr<_212b16162_Expr> __param_expr): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_public(__param_public), _field_mutable(__param_mutable), _field_constant(__param_constant), _field_statically(__param_statically), _field_reference(__param_reference), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_212b20325_VarDecl(void) = default;

	inline bool operator==(_212b20325_VarDecl _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_constant == _other._field_constant &&
			this->_field_statically == _other._field_statically &&
			this->_field_reference == _other._field_reference &&
			this->_field_directives == _other._field_directives &&
			this->_field_doc_comments == _other._field_doc_comments &&
			this->_field_kind == _other._field_kind &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b20325_VarDecl _other) { return !this->operator==(_other); }


};


struct _1ce767731_TypeChecker {
	jule::Ptr<_1ce6ab345_Sema> _field_s = jule::Ptr<_1ce6ab345_Sema>();
	jule::Trait<_1b545ddc0_Lookup> _field_lookup = jule::Trait<_1b545ddc0_Lookup>();
	jule::Ptr<_1ce766eb1_Referencer> _field_referencer = jule::Ptr<_1ce766eb1_Referencer>();
	_212ae5c02_Token _field_error_token = _212ae5c02_Token();
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>();
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Bool _field_selection = jule::Bool();
	jule::Ptr<_1ce75e6a1_TypeAlias> _field_owner_alias = jule::Ptr<_1ce75e6a1_TypeAlias>();
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _field_banned_generics = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>();
	jule::Bool _field_inscatch = jule::Bool();


	_1ce767731_TypeChecker(jule::Ptr<_1ce6ab345_Sema> __param_s, jule::Trait<_1b545ddc0_Lookup> __param_lookup, jule::Ptr<_1ce766eb1_Referencer> __param_referencer, _212ae5c02_Token __param_error_token, jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain, jule::Bool __param_dis_builtin, jule::Bool __param_selection, jule::Ptr<_1ce75e6a1_TypeAlias> __param_owner_alias, jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> __param_banned_generics, jule::Bool __param_inscatch): _field_s(__param_s), _field_lookup(__param_lookup), _field_referencer(__param_referencer), _field_error_token(__param_error_token), _field_ignore_generics(__param_ignore_generics), _field_use_generics(__param_use_generics), _field_not_plain(__param_not_plain), _field_dis_builtin(__param_dis_builtin), _field_selection(__param_selection), _field_owner_alias(__param_owner_alias), _field_banned_generics(__param_banned_generics), _field_inscatch(__param_inscatch) {}

	

	_1ce767731_TypeChecker(void) = default;

	inline void _method_push_err(_212ae5c02_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Ptr<_1ce762330_Prim> _method_build_prim(jule::Ptr<_2129908e3_IdentTypeDecl>&);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Any);


	inline jule::Trait<_1ce760828_Kind> _method_from_type_alias(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Ptr<_1ce75e6a1_TypeAlias>&);


	inline jule::Ptr<_1e8648917_Enum> _method_from_enum(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Ptr<_1e8648917_Enum>&);


	inline jule::Ptr<_1e85a7865_Trait> _method_from_trait(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Ptr<_1e85a7865_Trait>&);


	inline jule::Bool _method_check_struct_ins(jule::Ptr<_1e83b84bc_StructIns>&,_212ae5c02_Token&);


	inline void _method_append_used_struct_reference(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Ptr<_1e83b84bc_StructIns> _method_build_struct_instance(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Ptr<_1e83b84bc_StructIns> _method_from_struct(jule::Ptr<_2129908e3_IdentTypeDecl>&,jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Trait<_1ce760828_Kind> _method_get_def(jule::Trait<_1b545ddc0_Lookup>,jule::Ptr<_2129908e3_IdentTypeDecl>&);


	inline jule::Trait<_1ce760828_Kind> _method_build_ident(jule::Ptr<_2129908e3_IdentTypeDecl>);


	inline jule::Ptr<_1ce76286e_Sptr> _method_build_sptr_from_type(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Ptr<_1ce76286e_Sptr> _method_build_sptr(jule::Ptr<_212b14182_SptrTypeDecl>);


	inline jule::Ptr<_1ce7649e7_Ptr> _method_build_ptr_from_type(jule::Ptr<_1ce76121e_TypeKind>&);


	inline jule::Ptr<_1ce7649e7_Ptr> _method_build_ptr(jule::Ptr<_212b14e52_PtrTypeDecl>);


	inline jule::Ptr<_1ce762e02_Slc> _method_build_slc(jule::Ptr<_212b145c2_SlcTypeDecl>);


	inline jule::Ptr<_1ce764244_Arr> _method_build_arr(jule::Ptr<_212b15392_ArrTypeDecl>);


	inline jule::Ptr<_1ce763b39_Map> _method_build_map(jule::Ptr<_212b157d2_MapTypeDecl>);


	inline jule::Ptr<_1ce763485_Tuple> _method_build_tuple(jule::Ptr<_212b14a12_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ptr<_1e83d630e_FnIns>&);


	inline jule::Ptr<_1e83d630e_FnIns> _method_build_fn(jule::Ptr<_212b1edd5_FnDecl>);


	inline jule::Trait<_1ce760828_Kind> _method_build_by_namespace(jule::Ptr<_21298e309_NamespaceTypeDecl>);


	inline jule::Ptr<_1ce76121e_TypeKind> _method_build(jule::Any&);


	inline jule::Ptr<_1ce76121e_TypeKind> _method_check_decl(jule::Ptr<_2129e3d42_TypeDecl>&);


	inline void _method_check(jule::Ptr<_1ce761b37_TypeSymbol>&);


	inline bool operator==(_1ce767731_TypeChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_lookup == _other._field_lookup &&
			this->_field_referencer == _other._field_referencer &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_ignore_generics == _other._field_ignore_generics &&
			this->_field_use_generics == _other._field_use_generics &&
			this->_field_not_plain == _other._field_not_plain &&
			this->_field_dis_builtin == _other._field_dis_builtin &&
			this->_field_selection == _other._field_selection &&
			this->_field_owner_alias == _other._field_owner_alias &&
			this->_field_banned_generics == _other._field_banned_generics &&
			this->_field_inscatch == _other._field_inscatch;
	}

	inline bool operator!=(_1ce767731_TypeChecker _other) { return !this->operator==(_other); }


};


struct _212b20765_RetSt {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();


	_212b20765_RetSt(_212ae5c02_Token __param_token, jule::Ptr<_212b16162_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_212b20765_RetSt(void) = default;

	inline bool operator==(_212b20765_RetSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b20765_RetSt _other) { return !this->operator==(_other); }


};


struct _212b20ba5_Iter {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();


	_212b20ba5_Iter(_212ae5c02_Token __param_token, jule::Any __param_kind, jule::Ptr<_212b1e555_ScopeTree> __param_scope): _field_token(__param_token), _field_kind(__param_kind), _field_scope(__param_scope) {}

	

	_212b20ba5_Iter(void) = default;

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(_212b20ba5_Iter _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_212b20ba5_Iter _other) { return !this->operator==(_other); }


};


struct _212b210e5_WhileKind {
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();
	jule::Any _field_next = jule::Any();
	_212ae5c02_Token _field_next_token = _212ae5c02_Token();


	_212b210e5_WhileKind(jule::Ptr<_212b16162_Expr> __param_expr, jule::Any __param_next, _212ae5c02_Token __param_next_token): _field_expr(__param_expr), _field_next(__param_next), _field_next_token(__param_next_token) {}

	

	_212b210e5_WhileKind(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(_212b210e5_WhileKind _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_next == _other._field_next &&
			this->_field_next_token == _other._field_next_token;
	}

	inline bool operator!=(_212b210e5_WhileKind _other) { return !this->operator==(_other); }


};


struct _1b54c72bd_IR {
	jule::Str _field_root = jule::Str();
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_1ce6a15e3_Package> _field_main = jule::Ptr<_1ce6a15e3_Package>();
	jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>>();
	_1b54c9e91_OrderedDefines _field_ordered = _1b54c9e91_OrderedDefines();


	_1b54c72bd_IR(jule::Str __param_root, jule::Slice<jule::Str> __param_passes, jule::Ptr<_1ce6a15e3_Package> __param_main, jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> __param_used, _1b54c9e91_OrderedDefines __param_ordered): _field_root(__param_root), _field_passes(__param_passes), _field_main(__param_main), _field_used(__param_used), _field_ordered(__param_ordered) {}

	

	_1b54c72bd_IR(void) = default;

	static inline std::tuple<jule::Ptr<_1b54c72bd_IR>,jule::Slice<_21287ea02_Log>> _static_method_build(jule::Str,jule::I64);


	inline void _method_append_structs(jule::Ptr<_1ce6a15e3_Package>&,jule::Slice<jule::Ptr<_1e83b1718_Struct>>&);


	inline jule::Slice<jule::Ptr<_1e83b1718_Struct>> _method_get_all_structures(void);


	inline void _method_order(void);


	inline bool operator==(_1b54c72bd_IR _other) {
		return 
			this->_field_root == _other._field_root &&
			this->_field_passes == _other._field_passes &&
			this->_field_main == _other._field_main &&
			this->_field_used == _other._field_used &&
			this->_field_ordered == _other._field_ordered;
	}

	inline bool operator!=(_1b54c72bd_IR _other) { return !this->operator==(_other); }


};


struct _212b21535_RangeKind {
	_212ae5c02_Token _field_in_token = _212ae5c02_Token();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();
	jule::Ptr<_212b20325_VarDecl> _field_key_a = jule::Ptr<_212b20325_VarDecl>();
	jule::Ptr<_212b20325_VarDecl> _field_key_b = jule::Ptr<_212b20325_VarDecl>();


	_212b21535_RangeKind(_212ae5c02_Token __param_in_token, jule::Ptr<_212b16162_Expr> __param_expr, jule::Ptr<_212b20325_VarDecl> __param_key_a, jule::Ptr<_212b20325_VarDecl> __param_key_b): _field_in_token(__param_in_token), _field_expr(__param_expr), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_212b21535_RangeKind(void) = default;

	inline bool operator==(_212b21535_RangeKind _other) {
		return 
			this->_field_in_token == _other._field_in_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_key_a == _other._field_key_a &&
			this->_field_key_b == _other._field_key_b;
	}

	inline bool operator!=(_212b21535_RangeKind _other) { return !this->operator==(_other); }


};


struct _212b21975_BreakSt {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	_212ae5c02_Token _field_label = _212ae5c02_Token();


	_212b21975_BreakSt(_212ae5c02_Token __param_token, _212ae5c02_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_212b21975_BreakSt(void) = default;

	inline bool operator==(_212b21975_BreakSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_212b21975_BreakSt _other) { return !this->operator==(_other); }


};


struct _1e83cb920_BuiltinPanicCallExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();


	_1e83cb920_BuiltinPanicCallExprModel(_212ae5c02_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e83cb920_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(_1e83cb920_BuiltinPanicCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e83cb920_BuiltinPanicCallExprModel _other) { return !this->operator==(_other); }


};


struct _1e83cc14b_BuiltinAssertCallExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();


	_1e83cc14b_BuiltinAssertCallExprModel(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Str __param_log): _field_token(__param_token), _field_expr(__param_expr), _field_log(__param_log) {}

	

	_1e83cc14b_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(_1e83cc14b_BuiltinAssertCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_log == _other._field_log;
	}

	inline bool operator!=(_1e83cc14b_BuiltinAssertCallExprModel _other) { return !this->operator==(_other); }


};


struct _212b21db5_ContSt {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	_212ae5c02_Token _field_label = _212ae5c02_Token();


	_212b21db5_ContSt(_212ae5c02_Token __param_token, _212ae5c02_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_212b21db5_ContSt(void) = default;

	inline bool operator==(_212b21db5_ContSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_212b21db5_ContSt _other) { return !this->operator==(_other); }


};


struct _212b22305_If {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();


	_212b22305_If(_212ae5c02_Token __param_token, jule::Ptr<_212b16162_Expr> __param_expr, jule::Ptr<_212b1e555_ScopeTree> __param_scope): _field_token(__param_token), _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_212b22305_If(void) = default;

	inline bool operator==(_212b22305_If _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_212b22305_If _other) { return !this->operator==(_other); }


};


struct _212b22745_Else {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();


	_212b22745_Else(_212ae5c02_Token __param_token, jule::Ptr<_212b1e555_ScopeTree> __param_scope): _field_token(__param_token), _field_scope(__param_scope) {}

	

	_212b22745_Else(void) = default;

	inline bool operator==(_212b22745_Else _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_212b22745_Else _other) { return !this->operator==(_other); }


};


struct _2129e3902_Directive {
	_212ae5c02_Token _field_tag = _212ae5c02_Token();
	jule::Slice<_212ae5c02_Token> _field_args = jule::Slice<_212ae5c02_Token>();


	_2129e3902_Directive(_212ae5c02_Token __param_tag, jule::Slice<_212ae5c02_Token> __param_args): _field_tag(__param_tag), _field_args(__param_args) {}

	

	_2129e3902_Directive(void) = default;

	inline bool operator==(_2129e3902_Directive _other) {
		return 
			this->_field_tag == _other._field_tag &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_2129e3902_Directive _other) { return !this->operator==(_other); }


};


struct _1b589d09a_MutSlicingExprModel {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_1b589d09a_MutSlicingExprModel(_212ae5c02_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_1b589d09a_MutSlicingExprModel(void) = default;

	inline bool operator==(_1b589d09a_MutSlicingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_1b589d09a_MutSlicingExprModel _other) { return !this->operator==(_other); }


};


struct _212b230c5_TypeAliasDecl {
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_2129e3072_CommentGroup> _field_doc_comments = jule::Ptr<_2129e3072_CommentGroup>();


	_212b230c5_TypeAliasDecl(jule::Ptr<_212b1e555_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _212ae5c02_Token __param_token, jule::Str __param_ident, jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Ptr<_2129e3072_CommentGroup> __param_doc_comments): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc_comments(__param_doc_comments) {}

	

	_212b230c5_TypeAliasDecl(void) = default;

	inline bool operator==(_212b230c5_TypeAliasDecl _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_doc_comments == _other._field_doc_comments;
	}

	inline bool operator!=(_212b230c5_TypeAliasDecl _other) { return !this->operator==(_other); }


};


struct _212b23515_Case {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Slice<jule::Ptr<_212b16162_Expr>> _field_exprs = jule::Slice<jule::Ptr<_212b16162_Expr>>();


	_212b23515_Case(_212ae5c02_Token __param_token, jule::Ptr<_212b1e555_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_212b16162_Expr>> __param_exprs): _field_token(__param_token), _field_scope(__param_scope), _field_exprs(__param_exprs) {}

	

	_212b23515_Case(void) = default;

	inline bool operator==(_212b23515_Case _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_scope == _other._field_scope &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_212b23515_Case _other) { return !this->operator==(_other); }


};


struct _212b23955_MatchCase {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();
	jule::Slice<jule::Ptr<_212b23515_Case>> _field_cases = jule::Slice<jule::Ptr<_212b23515_Case>>();
	jule::Ptr<_212b22745_Else> _field_default = jule::Ptr<_212b22745_Else>();


	_212b23955_MatchCase(_212ae5c02_Token __param_token, jule::Bool __param_type_match, jule::Ptr<_212b16162_Expr> __param_expr, jule::Slice<jule::Ptr<_212b23515_Case>> __param_cases, jule::Ptr<_212b22745_Else> __param_default): _field_token(__param_token), _field_type_match(__param_type_match), _field_expr(__param_expr), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_212b23955_MatchCase(void) = default;

	inline bool operator==(_212b23955_MatchCase _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_type_match == _other._field_type_match &&
			this->_field_expr == _other._field_expr &&
			this->_field_cases == _other._field_cases &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_212b23955_MatchCase _other) { return !this->operator==(_other); }


};


struct _212b23d95_UseDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<_212ae5c02_Token> _field_selected = jule::Slice<_212ae5c02_Token>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();


	_212b23d95_UseDecl(_212ae5c02_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_212ae5c02_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std): _field_token(__param_token), _field_link_path(__param_link_path), _field_alias(__param_alias), _field_full(__param_full), _field_selected(__param_selected), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std) {}

	

	_212b23d95_UseDecl(void) = default;

	inline bool operator==(_212b23d95_UseDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_link_path == _other._field_link_path &&
			this->_field_alias == _other._field_alias &&
			this->_field_full == _other._field_full &&
			this->_field_selected == _other._field_selected &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_std == _other._field_std;
	}

	inline bool operator!=(_212b23d95_UseDecl _other) { return !this->operator==(_other); }


};


struct _212b242d5_EnumItemDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();


	_212b242d5_EnumItemDecl(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Ptr<_212b16162_Expr> __param_expr): _field_token(__param_token), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_212b242d5_EnumItemDecl(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(_212b242d5_EnumItemDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b242d5_EnumItemDecl _other) { return !this->operator==(_other); }


};


struct _212b24725_EnumDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>>();
	jule::Ptr<_2129e3072_CommentGroup> _field_doc_comments = jule::Ptr<_2129e3072_CommentGroup>();


	_212b24725_EnumDecl(_212ae5c02_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>> __param_items, jule::Ptr<_2129e3072_CommentGroup> __param_doc_comments): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc_comments(__param_doc_comments) {}

	

	_212b24725_EnumDecl(void) = default;

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(_212b24725_EnumDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_items == _other._field_items &&
			this->_field_doc_comments == _other._field_doc_comments;
	}

	inline bool operator!=(_212b24725_EnumDecl _other) { return !this->operator==(_other); }


};


struct _212b24eea_FieldDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2129e3d42_TypeDecl> _field_kind = jule::Ptr<_2129e3d42_TypeDecl>();
	jule::Ptr<_212b16162_Expr> _field_default = jule::Ptr<_212b16162_Expr>();


	_212b24eea_FieldDecl(_212ae5c02_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_2129e3d42_TypeDecl> __param_kind, jule::Ptr<_212b16162_Expr> __param_default): _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_212b24eea_FieldDecl(void) = default;

	inline bool operator==(_212b24eea_FieldDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_212b24eea_FieldDecl _other) { return !this->operator==(_other); }


};


struct _1e83d3839_Param {
	jule::Ptr<_1e83d3839_Param> self;

	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1ce761b37_TypeSymbol> _field_kind = jule::Ptr<_1ce761b37_TypeSymbol>();
	jule::Str _field_ident = jule::Str();


	_1e83d3839_Param(_212ae5c02_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1ce761b37_TypeSymbol> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {
		this->self = jule::Ptr<_1e83d3839_Param>::make(this, nullptr);

	}

	~_1e83d3839_Param(void) { this->self.ref = nullptr; }

	_1e83d3839_Param(void) { this->self = jule::Ptr<_1e83d3839_Param>::make(this, nullptr); }

	inline jule::Ptr<_1e83d5bb0_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(_1e83d3839_Param _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e83d3839_Param _other) { return !this->operator==(_other); }


};


struct _1e83d4384_Fn {
	jule::Ptr<_1e83d4384_Fn> self;

	jule::Ptr<_1ce6ab345_Sema> _field_sema = jule::Ptr<_1ce6ab345_Sema>();
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_212b1e555_ScopeTree> _field_scope = jule::Ptr<_212b1e555_ScopeTree>();
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>();
	jule::Ptr<_1e83d3284_RetType> _field_result = jule::Ptr<_1e83d3284_RetType>();
	jule::Slice<jule::Ptr<_1e83d3839_Param>> _field_params = jule::Slice<jule::Ptr<_1e83d3839_Param>>();
	jule::Ptr<_1e83b1718_Struct> _field_owner = jule::Ptr<_1e83b1718_Struct>();
	jule::Slice<jule::Ptr<_1e83d630e_FnIns>> _field_instances = jule::Slice<jule::Ptr<_1e83d630e_FnIns>>();


	_1e83d4384_Fn(jule::Ptr<_1ce6ab345_Sema> __param_sema, _212ae5c02_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Str __param_doc, jule::Ptr<_212b1e555_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> __param_generics, jule::Ptr<_1e83d3284_RetType> __param_result, jule::Slice<jule::Ptr<_1e83d3839_Param>> __param_params, jule::Ptr<_1e83b1718_Struct> __param_owner, jule::Slice<jule::Ptr<_1e83d630e_FnIns>> __param_instances): _field_sema(__param_sema), _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc(__param_doc), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params), _field_owner(__param_owner), _field_instances(__param_instances) {
		this->self = jule::Ptr<_1e83d4384_Fn>::make(this, nullptr);

	}

	~_1e83d4384_Fn(void) { this->self.ref = nullptr; }

	_1e83d4384_Fn(void) { this->self = jule::Ptr<_1e83d4384_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ptr<_1e83d630e_FnIns> _method_instance_force(void);


	inline jule::Ptr<_1e83d630e_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::I64> _method_append_instance(jule::Ptr<_1e83d630e_FnIns>&);


	inline bool operator==(_1e83d4384_Fn _other) {
		return 
			this->_field_sema == _other._field_sema &&
			this->_field_token == _other._field_token &&
			this->_field_global == _other._field_global &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_statically == _other._field_statically &&
			this->_field_exceptional == _other._field_exceptional &&
			this->_field_ident == _other._field_ident &&
			this->_field_directives == _other._field_directives &&
			this->_field_doc == _other._field_doc &&
			this->_field_scope == _other._field_scope &&
			this->_field_generics == _other._field_generics &&
			this->_field_result == _other._field_result &&
			this->_field_params == _other._field_params &&
			this->_field_owner == _other._field_owner &&
			this->_field_instances == _other._field_instances;
	}

	inline bool operator!=(_1e83d4384_Fn _other) { return !this->operator==(_other); }


};


struct _212b2587a_StructDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_212b24eea_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_212b24eea_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_2129e3902_Directive>> _field_directives = jule::Slice<jule::Ptr<_2129e3902_Directive>>();
	jule::Ptr<_2129e3072_CommentGroup> _field_doc_comments = jule::Ptr<_2129e3072_CommentGroup>();
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>();


	_212b2587a_StructDecl(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_212b24eea_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_2129e3902_Directive>> __param_directives, jule::Ptr<_2129e3072_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_generics(__param_generics) {}

	

	_212b2587a_StructDecl(void) = default;

	inline bool operator==(_212b2587a_StructDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_fields == _other._field_fields &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_directives == _other._field_directives &&
			this->_field_doc_comments == _other._field_doc_comments &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_212b2587a_StructDecl _other) { return !this->operator==(_other); }


};


struct _212b1ade2_TraitDecl {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Ptr<_2129e3072_CommentGroup> _field_doc_comments = jule::Ptr<_2129e3072_CommentGroup>();
	jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_212b1edd5_FnDecl>>();


	_212b1ade2_TraitDecl(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ptr<_2129e3072_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> __param_methods): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_doc_comments(__param_doc_comments), _field_methods(__param_methods) {}

	

	_212b1ade2_TraitDecl(void) = default;

	inline bool operator==(_212b1ade2_TraitDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_public == _other._field_public &&
			this->_field_doc_comments == _other._field_doc_comments &&
			this->_field_methods == _other._field_methods;
	}

	inline bool operator!=(_212b1ade2_TraitDecl _other) { return !this->operator==(_other); }


};


struct _212b16162_Expr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Any _field_kind = jule::Any();


	_212b16162_Expr(_212ae5c02_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_212b16162_Expr(void) = default;

	inline bool operator==(_212b16162_Expr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_212b16162_Expr _other) { return !this->operator==(_other); }


};


struct _1e83de900_Pass {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_text = jule::Str();


	_1e83de900_Pass(_212ae5c02_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_1e83de900_Pass(void) = default;

	inline bool operator==(_1e83de900_Pass _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_text == _other._field_text;
	}

	inline bool operator!=(_1e83de900_Pass _other) { return !this->operator==(_other); }


};


struct _1b592255e_ObjectCoder {
	jule::Ptr<_1b54c72bd_IR> _field_ir = jule::Ptr<_1b54c72bd_IR>();
	_1b58d98cd_SerializationInfo _field_info = _1b58d98cd_SerializationInfo();
	jule::Str _field_indent_buffer = jule::Str();
	jule::Ptr<_1b57d05a4_ExprCoder> _field_ec = jule::Ptr<_1b57d05a4_ExprCoder>();
	jule::Ptr<_1b57cc35e_ScopeCoder> _field_sc = jule::Ptr<_1b57cc35e_ScopeCoder>();


	_1b592255e_ObjectCoder(jule::Ptr<_1b54c72bd_IR> __param_ir, _1b58d98cd_SerializationInfo __param_info, jule::Str __param_indent_buffer, jule::Ptr<_1b57d05a4_ExprCoder> __param_ec, jule::Ptr<_1b57cc35e_ScopeCoder> __param_sc): _field_ir(__param_ir), _field_info(__param_info), _field_indent_buffer(__param_indent_buffer), _field_ec(__param_ec), _field_sc(__param_sc) {}

	

	_1b592255e_ObjectCoder(void) = default;

	static inline jule::Ptr<_1b592255e_ObjectCoder> _static_method_new(jule::Ptr<_1b54c72bd_IR>&,_1b58d98cd_SerializationInfo);


	inline void _method_add_indent(void);


	inline void _method_done_indent(void);


	inline jule::Str _method_indent(void);


	inline jule::Str _method_loc_info(_212ae5c02_Token&);


	inline jule::Str _method_links(void);


	inline jule::Str _method_param_ins(jule::Ptr<_1e83d5bb0_ParamIns>&);


	inline jule::Str _method_param(jule::Ptr<_1e83d3839_Param>&);


	inline jule::Str _method_params(jule::Slice<jule::Ptr<_1e83d3839_Param>>&);


	inline jule::Str _method_params_ins(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>&);


	inline jule::Str _method_params_decls(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>&);


	inline jule::Str _method_trait_def(jule::Ptr<_1e85a7865_Trait>&);


	inline jule::Str _method_traits_tbl(jule::Ptr<_1ce7204a8_SymbolTable>&);


	inline jule::Str _method_traits_pkg(jule::Ptr<_1ce6a15e3_Package>&);


	inline jule::Str _method_traits(void);


	inline jule::Str _method_trait_decl(jule::Ptr<_1e85a7865_Trait>&);


	inline jule::Str _method_trait_decls(jule::Ptr<_1ce6a15e3_Package>&);


	inline jule::Str _method_structure_plain_decl(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Str _method_structure_plain_decls(void);


	inline jule::Str _method_structure_traits(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Str _method_var_init_expr(jule::Ptr<_1ce6cecb4_Var>&,jule::Str);


	inline jule::Str _method_var(jule::Ptr<_1ce6cecb4_Var>);


	inline jule::Str _method_field_decl(jule::Ptr<_1e83b2cbe_FieldIns>&);


	inline jule::Str _method_build_structure_self_field_kind(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_self_field(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_self_field_init_st(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_constructor(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_destructor(jule::Ptr<_1e83b84bc_StructIns>&);


	inline void _method_structure_operator_eq(jule::Str&,jule::Str&,jule::Ptr<_1e83b84bc_StructIns>&);


	inline void _method_structure_operator_not_eq(jule::Str&,jule::Str&,jule::Ptr<_1e83b84bc_StructIns>&);


	inline void _method_structure_operator(jule::Str&,jule::Str&,jule::Ptr<_1e83d630e_FnIns>&,jule::Str);


	inline jule::Str _method_structure_operators(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_derive_defs_decls(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_ins_decl(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_decl(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Str _method_structure_decls(void);


	inline jule::Str _method_func_head(jule::Ptr<_1e83d630e_FnIns>&,jule::Bool);


	inline jule::Str _method_func_decl(jule::Ptr<_1e83d4384_Fn>&,jule::Bool);


	inline jule::Str _method_func_decls(jule::Ptr<_1ce6a15e3_Package>&);


	inline jule::Str _method_decls(void);


	inline jule::Str _method_pkg_globals(jule::Ptr<_1ce6a15e3_Package>&,jule::Str&);


	inline jule::Str _method_globals(jule::Str&);


	inline jule::Str _method_func(jule::Ptr<_1e83d4384_Fn>&);


	inline jule::Str _method_pkg_funcs(jule::Ptr<_1ce6a15e3_Package>&);


	inline jule::Str _method_structure_methods(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_ostream(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_derive_defs(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure_ins(jule::Ptr<_1e83b84bc_StructIns>&);


	inline jule::Str _method_structure(jule::Ptr<_1e83b1718_Struct>&);


	inline jule::Str _method_structures(void);


	inline jule::Str _method_funcs(void);


	inline void _method_push_init(jule::Ptr<_1ce6a15e3_Package>&,jule::Str&);


	inline jule::Str _method_init_caller(jule::Str&);


	inline void _method_append_standard(jule::Str&);


	inline jule::Str _method_serialize(void);


	inline bool operator==(_1b592255e_ObjectCoder _other) {
		return 
			this->_field_ir == _other._field_ir &&
			this->_field_info == _other._field_info &&
			this->_field_indent_buffer == _other._field_indent_buffer &&
			this->_field_ec == _other._field_ec &&
			this->_field_sc == _other._field_sc;
	}

	inline bool operator!=(_1b592255e_ObjectCoder _other) { return !this->operator==(_other); }


};


struct _212b165a2_UseExpr {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Ptr<_212b16162_Expr> _field_expr = jule::Ptr<_212b16162_Expr>();


	_212b165a2_UseExpr(_212ae5c02_Token __param_token, jule::Ptr<_212b16162_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_212b165a2_UseExpr(void) = default;

	inline bool operator==(_212b165a2_UseExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_212b165a2_UseExpr _other) { return !this->operator==(_other); }


};


struct _1e85a7865_Trait: public _1ce760828_Kind {
	jule::Ptr<_1e85a7865_Trait> self;

	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_1e83d4384_Fn>> _field_methods = jule::Slice<jule::Ptr<_1e83d4384_Fn>>();
	jule::Slice<jule::Ptr<_1e83b1718_Struct>> _field_implemented = jule::Slice<jule::Ptr<_1e83b1718_Struct>>();


	_1e85a7865_Trait(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_doc, jule::Slice<jule::Ptr<_1e83d4384_Fn>> __param_methods, jule::Slice<jule::Ptr<_1e83b1718_Struct>> __param_implemented): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_mutable(__param_mutable), _field_doc(__param_doc), _field_methods(__param_methods), _field_implemented(__param_implemented) {
		this->self = jule::Ptr<_1e85a7865_Trait>::make(this, nullptr);

	}

	~_1e85a7865_Trait(void) { this->self.ref = nullptr; }

	_1e85a7865_Trait(void) { this->self = jule::Ptr<_1e85a7865_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1ce76121e_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ptr<_1e83d4384_Fn> _method_find_method(jule::Str);


	inline bool operator==(_1e85a7865_Trait _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_doc == _other._field_doc &&
			this->_field_methods == _other._field_methods &&
			this->_field_implemented == _other._field_implemented;
	}

	inline bool operator!=(_1e85a7865_Trait _other) { return !this->operator==(_other); }


};


struct _1e86494b7_EnumItem {
	_212ae5c02_Token _field_token = _212ae5c02_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1ce7281d6_Value> _field_value = jule::Ptr<_1ce7281d6_Value>();


	_1e86494b7_EnumItem(_212ae5c02_Token __param_token, jule::Str __param_ident, jule::Ptr<_1ce7281d6_Value> __param_value): _field_token(__param_token), _field_ident(__param_ident), _field_value(__param_value) {}

	

	_1e86494b7_EnumItem(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(_1e86494b7_EnumItem _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_value == _other._field_value;
	}

	inline bool operator!=(_1e86494b7_EnumItem _other) { return !this->operator==(_other); }


};


struct _1b595c258_ArgParser {
	_1b595bc5d_FlagSet _field_set = _1b595bc5d_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::I64 _field_i = jule::I64();


	_1b595c258_ArgParser(_1b595bc5d_FlagSet __param_set, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_content, jule::I64 __param_i): _field_set(__param_set), _field_args(__param_args), _field_content(__param_content), _field_i(__param_i) {}

	

	_1b595c258_ArgParser(void) = default;

	inline std::tuple<jule::I64,jule::Bool> _method_parse_integer_0(jule::Str&,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I64)>);
	inline std::tuple<jule::U64,jule::Bool> _method_parse_integer_1(jule::Str&,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I64)>);


	inline jule::Str _method_get_data(void);


	inline jule::VoidExceptional _method_process_flag(jule::Trait<_1b5959d27_CommonFlag>&);


	inline jule::VoidExceptional _method_single_dash(jule::Str&);


	inline jule::VoidExceptional _method_double_dash(jule::Str&);


	inline jule::VoidExceptional _method_try_arg(void);


	inline jule::VoidExceptional _method_parse(void);


	inline bool operator==(_1b595c258_ArgParser _other) {
		return 
			this->_field_set == _other._field_set &&
			this->_field_args == _other._field_args &&
			this->_field_content == _other._field_content &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_1b595c258_ArgParser _other) { return !this->operator==(_other); }


};


inline void _211062505_push_opt_level(jule::I64);
inline jule::I32 _21115e2a0_decode_rune(jule::I32,jule::I32);
inline std::tuple<jule::I32,jule::I32> _21115e448_encode_rune(jule::I32);
inline jule::Slice<jule::I32> _211179254_decode(jule::Slice<jule::U16>);
inline jule::Slice<jule::U16> _211179650_append_rune(jule::Slice<jule::U16>,jule::I32);
inline jule::Slice<jule::U16> _21116da95_utf16_from_str(jule::Str);
inline jule::Str _2111664d8_utf16_to_str(jule::Slice<jule::U16>);
inline jule::Str _211160c96_u16_ptr_to_str(jule::U16*);
inline jule::I64 _2111163ab_get_last_errno(void);
inline jule::U64 _21112a8cb_get_std_handle(jule::U64);
inline jule::I64 _21113a688_wstat(jule::U16*,struct stat*);
inline jule::I64 _211135276__wopen(jule::U16*,jule::I64,jule::I64);
inline jule::U32 _211145e8a_get_last_error(void);
inline jule::U32 _21113d878_get_current_directory(jule::U32,jule::U16*);
inline jule::Bool _211163a46_delete_file(jule::U16*);
inline jule::Bool _21114221c_create_directory(jule::U16*);
inline jule::Bool _2111423b5_remove_directory(jule::U16*);
inline _WDIR* _211134385__wopendir(jule::U16*);
inline struct _wdirent* _21113452d__wreaddir(_WDIR*);
inline jule::I64 _21115eca6__wclosedir(_WDIR*);
inline jule::U32 _2111519ac_get_full_path_name(jule::U16*,jule::U32,jule::U16*,jule::U16**);
inline jule::Bool _21117a310_write_console(jule::U64,jule::U16*,jule::I64,jule::I64&,void*);
inline jule::Bool _21117a4a8_read_console(jule::U64,jule::U16*,jule::I64,jule::I64&,void*);
inline jule::I64 _21117b575_seek(jule::I64,jule::I64,jule::I64);
inline jule::I64 _21117b71d_read(jule::I64,void*,jule::U64);
inline jule::I64 _21117b8b6_close(jule::I64);
inline jule::I64 _21117ba5e_write(jule::I64,void*,jule::U64);
inline void _21117bc07_exit(jule::I64);
inline std::tuple<jule::I32,jule::I64> _211214883_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::I64> _211215103_decode_last_rune(jule::Slice<jule::U8>);
inline jule::I64 _21121581d_rune_len(jule::I32);
inline jule::I64 _211215b3c_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _211215cd5_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _211215e7d_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::I64 _2112162be_rune_count_str(jule::Str);
inline jule::Bool _211216467_rune_start(jule::U8);
inline jule::I64 _211283094_get_last_os_error_windows(void);
inline jule::Slice<jule::Str> _21128893a_args(void);
inline jule::Exceptional<jule::Str> _211288c7b_working_dir(void);
inline jule::Exceptional<jule::Str> _211d9a859___getwd(void);
inline jule::Slice<jule::U8> _211e09e4b_stobs(jule::Str&);
inline jule::Bool _211e22903_is_letter(jule::I32);
inline jule::Bool _212855632_is16(jule::Slice<_21285283d_Range16>,jule::U16);
inline jule::Bool _212855ac7_is32(jule::Slice<_2128531bd_Range32>,jule::U32);
inline jule::Bool _212856611_is_excluding_latin(jule::Ptr<_212853b5d_RangeTable>,jule::I32);
inline jule::Str _211e22edb_repeat(jule::Str,jule::I64);
inline jule::Bool _212778ec3__has_prefix(jule::Str&,jule::Str&,jule::I64);
inline jule::Bool _2127d7dbc_has_prefix(jule::Str,jule::Str);
inline jule::Bool _212802e70__has_suffix(jule::Str&,jule::Str&,jule::I64);
inline jule::Bool _21280457b_has_suffix(jule::Str,jule::Str);
inline jule::I64 _211e138e4_find_at(jule::Str,jule::Str,jule::I64);
inline jule::I64 _2127d6b02_find_last_at(jule::Str,jule::Str,jule::I64);
inline jule::I64 _2127dbb4b_find_last(jule::Str,jule::Str);
inline jule::I64 _2127c8286__find_rune(jule::Slice<jule::U8>&,jule::I32);
inline jule::I64 _211e1696e_find_last_byte(jule::Str,jule::U8);
inline jule::I64 _211e241b8_find_any(jule::Str,jule::Str);
inline jule::Slice<jule::Str> _211e0ee2e_split(jule::Str,jule::Str,jule::I64);
inline jule::Bool _2127cc2e0_contains(jule::Str,jule::Str);
inline jule::Bool _211e19741_contains_any(jule::Str,jule::Str);
inline jule::Str _211e264a6_replace(jule::Str,jule::Str,jule::Str,jule::I64);
inline void _2127cec82__trim_left(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _211e24806_trim_left(jule::Str,jule::Str);
inline void _211e2499e__trim_right(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _211e25a9e_trim(jule::Str,jule::Str);
inline jule::Bool _211267452_is_path_sep(jule::U8);
inline jule::Bool _21126e49d_is_slash(jule::U8);
inline jule::U8 _211265780_to_upper(jule::U8);
inline jule::I64 _211267e36_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Str,jule::Bool> _2112699d7_cut_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _211269b80_full_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _21126de2b___abs(jule::Str);
inline jule::Str _21126e0c4___join(jule::Slice<jule::Str>);
inline jule::Str _211da8bb9_clean(jule::Str);
inline jule::Str _211dc0d24_from_slash(jule::Str);
inline jule::Str _211dc6ce7_join(jule::Slice<jule::Str>);
inline jule::Str _211e04440_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _211da0dd1_abs(jule::Str);
inline jule::Str _211dcb2b3_base(jule::Str);
inline jule::Str _211dd6565_dir(jule::Str);
inline jule::Str _211dd904b_volume_name(jule::Str);
inline jule::I64 _2110b426b_get_last_fs_error(void);
inline jule::Bool _21118b299_is_console_handle(jule::U64);
inline jule::I64 _2128a68e7_get_last_process_error(void);
inline jule::Slice<wchar_t*> _2128b9113_ustr_slice_to_wcstr_slice(jule::Slice<jule::Slice<jule::U16>>);
inline jule::Slice<jule::Slice<jule::U16>> _2128b9465_str_slice_to_ustr_slice(jule::Slice<jule::Str>);
inline jule::I64 _2128b97d9_execvp(jule::Str,jule::Slice<jule::Str>);
inline jule::I64 _2128b9c07_execve(jule::Str,jule::Slice<jule::Str>,jule::Slice<jule::Str>);
inline void _2128bad6d_exit(jule::I64);
inline jule::Str _2128bb29c_executable(void);
inline jule::Bool _21286e382_is_std_header_path(jule::Str);
inline jule::Bool _21286ec9a_is_valid_header_ext(jule::Str);
inline jule::Bool _21286ee43_is_valid_cpp_ext(jule::Str);
inline jule::Str _212880739_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _212880c56_arg_to_str(jule::Any);
inline jule::I64 _212881064_find_next_fmt(jule::Str);
inline jule::Str _21288144e_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _21288285c_is_top_directive(jule::Str);
inline jule::Bool _2128848b4_is_windows(jule::Str);
inline jule::Bool _212884c49_is_darwin(jule::Str);
inline jule::Bool _212885101_is_linux(jule::Str);
inline jule::Bool _21288550d_is_i386(jule::Str);
inline jule::Bool _21288584e_is_amd64(jule::Str);
inline jule::Bool _212885bd4_is_arm64(jule::Str);
inline jule::Bool _212886069_is_unix(jule::Str);
inline jule::Bool _21288650e_is_32bit(jule::Str);
inline jule::Bool _21288680b_is_64bit(jule::Str);
inline void _212895809_init(void);
inline jule::Bool _212ae66c5_is_unary_op(jule::Str);
inline jule::Bool _212ae6a9e_is_bin_op(jule::Str);
inline jule::Bool _212ae7385_is_str(jule::Str);
inline jule::Bool _212ae76c6_is_raw_str(jule::Str);
inline jule::Bool _212ae7a5b_is_rune(jule::Str);
inline jule::Bool _212ae83b9_is_bool(jule::Str);
inline jule::Bool _212ae86b6_is_float(jule::Str);
inline jule::Bool _212ae8a3a_is_num(jule::Str);
inline jule::Bool _212ae9255_is_ignore_ident(jule::Str);
inline jule::Bool _212ae95da_is_anon_ident(jule::Str);
inline jule::Bool _212ae9d05_is_space(jule::I32);
inline jule::Bool _212aea3cc_is_letter(jule::I32);
inline jule::Bool _212aeaa5e_is_decimal(jule::U8);
inline jule::Bool _212aead7d_is_binary(jule::U8);
inline jule::Bool _212aeb213_is_octal(jule::U8);
inline jule::Bool _212aeb598_is_hex(jule::U8);
inline jule::Bool _212aeb92d_is_assign(jule::U64);
inline jule::Bool _212aebd4b_is_postfix_op(jule::Str);
inline jule::Bool _212aec18c_is_assign_op(jule::Str);
inline jule::Ptr<_212aed0c2_File> _212aed7dc_new_file_set(jule::Str);
inline _21287ea02_Log _212b01cb8_make_err(jule::I64,jule::I64,jule::Ptr<_212aed0c2_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _212b02516_bytes_has_prefix(jule::Slice<jule::U8>&,jule::Str);
inline jule::Str _212b02956_float_fmt_e(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b02e2e_float_fmt_p(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b0332a_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b0376a_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b03baa_float_fmt_dotp(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b0421b_float_num(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b045c3_common_num(jule::Slice<jule::U8>&);
inline jule::Str _212b04925_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _212b04c77_is_float_fmt_e(jule::U8,jule::I64);
inline jule::Bool _212b051b7_is_float_fmt_p(jule::U8,jule::I64);
inline jule::Bool _212b05607_is_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::I64);
inline jule::Bool _212b05a47_is_float_fmt_dotp(jule::Slice<jule::U8>&,jule::I64);
inline jule::Bool _212b05e87_is_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b06619_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _212b0684a_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _212b06b9c_hex_escape(jule::Slice<jule::U8>&,jule::I64);
inline jule::Str _212b070dc_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _212b074d8_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _212b0787e_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _212b07bd1_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_21287ea02_Log> _212b08b05_lex(jule::Ptr<_212aed0c2_File>);
inline jule::Bool _2129d7396_find_module_file(jule::Slice<jule::Ptr<_211184319_DirEntry>>&);
inline jule::Str _2129ab17d_find_module_file_deep(jule::Str);
inline jule::Slice<_21287ea02_Log> _2129acb52_check_module_file(jule::Str);
inline jule::Ptr<_21313d9a8_FileInfo> _213188937_parse_file(jule::Ptr<_212aed0c2_File>);
inline std::tuple<jule::Ptr<_2129e26e2_Ast>,jule::Slice<_21287ea02_Log>> _213189042_parse_fileset(jule::Ptr<_212aed0c2_File>);
inline jule::Ptr<_212b1e555_ScopeTree> _1e76528ab_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _1e7652a54_is_st(_212ae5c02_Token,_212ae5c02_Token);
inline jule::Bool _1e7652e72_prev_is_incomplete_expr(jule::Slice<_212ae5c02_Token>&,jule::I64&);
inline std::tuple<jule::I64,jule::Bool> _1e765344a_next_st_pos(jule::Slice<_212ae5c02_Token>&,jule::I64);
inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::Bool> _1e76538ce_skip_st(jule::I64&,jule::Slice<_212ae5c02_Token>);
inline jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _1e76544e5_split_stmts(jule::Slice<_212ae5c02_Token>&);
inline jule::Ptr<_1e7665407_CallData> _1e7665a67_get_call_data(jule::Slice<_212ae5c02_Token>&);
inline jule::Slice<_212ae5c02_Token> _1e7665dca_get_block_expr(jule::Slice<_212ae5c02_Token>&);
inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::Slice<_212ae5c02_Token>> _1e76662d7_split_colon(jule::Slice<_212ae5c02_Token>&);
inline jule::Slice<_212ae5c02_Token> _1e766676b_eliminate_comments(jule::Slice<_212ae5c02_Token>&);
inline jule::I64 _1e76669e1_find_lowest_prec_op(jule::Slice<_212ae5c02_Token>&);
inline jule::Ptr<_212b17c02_IdentExpr> _1e7666e42_build_ident_expr(_212ae5c02_Token&);
inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::I64> _1e766720b_get_range_expr_tokens(jule::Slice<_212ae5c02_Token>&);
inline jule::Bool _1e7676a89_check_assign_tokens(jule::Slice<_212ae5c02_Token>&);
inline _21287ea02_Log _1e7677c11_make_err(jule::I64,jule::I64,jule::Ptr<_212aed0c2_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_212ae5c02_Token> _1e767874a_range(jule::I64&,jule::Str,jule::Str,jule::Slice<_212ae5c02_Token>&);
inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::Slice<_212ae5c02_Token>> _1e767898c_range_last(jule::Slice<_212ae5c02_Token>&);
inline std::tuple<jule::Slice<jule::Slice<_212ae5c02_Token>>,jule::Slice<_21287ea02_Log>> _1e76797b2_parts(jule::Slice<_212ae5c02_Token>&,jule::U64,jule::Bool);
inline jule::Str _1e7679c57_get_close_kind_of_brace(jule::Str);
inline _21287ea02_Log _1e7679ecc_compiler_err(_212ae5c02_Token&,jule::Str&,jule::Slice<jule::Any>);
inline void _1e767a4d8_push_suggestion(_21287ea02_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_2129e34b2_Comment> _1e767aa9e_build_comment(_212ae5c02_Token&);
inline jule::Str _1e767ad68_tokstoa(jule::Slice<_212ae5c02_Token>&);
inline jule::Ptr<_2129e3d42_TypeDecl> _1e7692456_build_void_type(void);
inline jule::Ptr<_2129e3d42_TypeDecl> _1e76925ee_build_prim_type(_212ae5c02_Token);
inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::I64> _1e76928b8_split_map_range(jule::Slice<_212ae5c02_Token>&,jule::I64&);
inline jule::I64 _1ce3852c7_leading_zeros64(jule::U64);
inline jule::I64 _1ce4284e1_trailing_zeros(jule::U64);
inline jule::I64 _1ce429206_trailing_zeros32(jule::U32);
inline jule::I64 _1ce4295ad_trailing_zeros64(jule::U64);
inline jule::I64 _1ce4316a3_len32(jule::U32);
inline jule::I64 _1ce431a6b_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _1ce4327a3_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::U64,jule::U64> _1ce435388_mul64(jule::U64,jule::U64);
inline jule::U32 _1cdda1761_f32_bits(jule::F32);
inline jule::F32 _1cdda1909_f32_from_bits(jule::U32);
inline jule::U64 _1ce36862e_f64_bits(jule::F64);
inline jule::F64 _1ce3687c7_f64_from_bits(jule::U64);
inline std::tuple<jule::F64,jule::I64> _1ce37a94e_frexp(jule::F64);
inline jule::F64 _1ce3bc4a7_nan(void);
inline jule::Bool _1ce401e8c_is_nan(jule::F64);
inline jule::F64 _1ce406821_inf(jule::I64);
inline jule::Bool _1ce40bd98_is_inf(jule::F64,jule::I64);
inline std::tuple<jule::F64,jule::I64> _1ce39b8e8_normalize(jule::F64);
inline jule::F64 _1ce41ccbb_log(jule::F64);
inline jule::F64 _1ce3896a5_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _1ce439634_modf(jule::F64);
inline jule::F64 _1ce439b2e_log2(jule::F64);
inline jule::Str _1cdda3961_fmt_float(jule::F64,jule::U8,jule::I64,jule::I64);
inline jule::Slice<jule::U8> _1cde2c2e2_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::I64,jule::I64);
inline jule::Slice<jule::U8> _1ce05cc6e_big_ftoa(jule::Slice<jule::U8>,jule::I64,jule::U8,jule::Bool,jule::U64,jule::I64,_1ce045d56_FloatInfo&);
inline jule::Slice<jule::U8> _1ce05a453_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_1cde9edae_DecimalSlice,jule::I64,jule::U8);
inline void _1ce2969be_round_shortest(_1cde2b80d_Decimal&,jule::U64,jule::I64,_1ce045d56_FloatInfo&);
inline jule::Slice<jule::U8> _1ce3672ed_fmt_e(jule::Slice<jule::U8>,jule::Bool,_1cde9edae_DecimalSlice,jule::I64,jule::U8);
inline jule::Slice<jule::U8> _1cddc2067_fmt_f(jule::Slice<jule::U8>,jule::Bool,_1cde9edae_DecimalSlice,jule::I64);
inline jule::Slice<jule::U8> _1cde27551_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::I64,_1ce045d56_FloatInfo&);
inline jule::Slice<jule::U8> _1cde71a84_fmt_x(jule::Slice<jule::U8>,jule::I64,jule::U8,jule::Bool,jule::U64,jule::I64,_1ce045d56_FloatInfo&);
inline jule::I64 _1ce06435d_min(jule::I64,jule::I64);
inline jule::I64 _1ce0950e7_max(jule::I64,jule::I64);
inline jule::U8 _1ce0de394_lower(jule::U8);
inline std::tuple<jule::U64,jule::I64> _1ce12880c___parse_uint(jule::Str,jule::I64,jule::I64);
inline jule::Exceptional<jule::U64> _1ce1c8a11_parse_uint(jule::Str,jule::I64,jule::I64);
inline jule::Exceptional<jule::I64> _1ce1e6b72_parse_int(jule::Str,jule::I64,jule::I64);
inline std::tuple<jule::F64,jule::Bool> _1ce0391bd_eisel_lemire64(jule::U64,jule::I64,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1ce06ad15_eisel_lemire32(jule::U64,jule::I64,jule::Bool);
inline jule::I64 _1ce17854e_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::I64,jule::Bool> _1ce25dc83_special(jule::Str);
inline std::tuple<jule::U64,jule::I64,jule::Bool,jule::Bool,jule::Bool,jule::I64,jule::Bool> _1ce2806cd_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _1cdda5a40_atof64exact(jule::U64,jule::I64,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1ce0c849e_atof32exact(jule::U64,jule::I64,jule::Bool);
inline std::tuple<jule::F64,jule::I64> _1ce274c11_atof_hex(jule::Str,_1ce045d56_FloatInfo&,jule::U64,jule::I64,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::I64,jule::I64> _1ce273b44_atof32(jule::Str);
inline std::tuple<jule::F64,jule::I64,jule::I64> _1ce2d4a1d_atof64(jule::Str);
inline std::tuple<jule::F64,jule::I64,jule::I64> _1ce3072e3_parse_float_prefix(jule::Str,jule::I64);
inline jule::Exceptional<jule::F64> _1cde2c028_parse_float(jule::Str,jule::I64);
inline void _1cdddea13_ryu_ftoa_fixed32(_1cde9edae_DecimalSlice&,jule::U32,jule::I64,jule::I64);
inline void _1ce35d47b_ryu_ftoa_fixed64(_1cde9edae_DecimalSlice&,jule::U64,jule::I64,jule::I64);
inline void _1cddbb209_format_decimal(_1cde9edae_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::I64);
inline void _1cdde09c0_ryu_ftoa_shortest(_1cde9edae_DecimalSlice&,jule::U64,jule::I64,_1ce045d56_FloatInfo&);
inline jule::I64 _1cde4388b_mul_by_log2_log10(jule::I64);
inline jule::I64 _1cdea4116_mul_by_log10_log2(jule::I64);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::I64> _1ce005e04_compute_bounds(jule::U64,jule::I64,_1ce045d56_FloatInfo&);
inline void _1ce0959ee_ryu_digits(_1cde9edae_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _1ce1320eb_ryu_digits32(_1cde9edae_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::I64);
inline std::tuple<jule::U32,jule::I64,jule::Bool> _1ce180dc5_mult64bit_pow10(jule::U32,jule::I64,jule::I64);
inline std::tuple<jule::U64,jule::I64,jule::Bool> _1ce1e0e02_mult128bit_pow10(jule::U64,jule::I64,jule::I64);
inline jule::Bool _1ce2d6b41_divisible_by_pow5(jule::U64,jule::I64);
inline std::tuple<jule::U32,jule::U32> _1ce13582a_divmod1e9(jule::U64);
inline void _1cde7327d_trim(_1cde2b80d_Decimal&);
inline void _1ce349005_right_shift(_1cde2b80d_Decimal&,jule::U64);
inline jule::Bool _1ce35ab1b_prefix_is_less_than(jule::Array<jule::U8,800>,jule::I64,jule::Str);
inline void _1ce317996_left_shift(_1cde2b80d_Decimal&,jule::U64);
inline jule::Bool _1cde60ad9_should_round_up(_1cde2b80d_Decimal&,jule::I64);
inline jule::Str _1ce276eee_fmt_uint(jule::U64,jule::I64);
inline jule::Str _1ce27c510_fmt_int(jule::I64,jule::I64);
inline jule::Str _1cde2b4ab_itoa(jule::I64);
inline jule::Str _1cde2cd1a_small(jule::I64);
inline jule::Bool _1cddb9bca_is_power_of_two(jule::I64);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1cddb9d73_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::I64,jule::Bool,jule::Bool);
inline void _1ce4b8020_lshift_unsig(_1ce4b898d_Const&,_1ce4b898d_Const&);
inline void _1ce4b81b8_rshift_unsig(_1ce4b898d_Const&,_1ce4b898d_Const&);
inline jule::Str _1ce673780_real_kind_of(jule::Str);
inline jule::I64 _1ce673c9c_bitsize_of(jule::Str);
inline jule::Str _1ce674154_int_from_bits(jule::I64);
inline jule::Str _1ce6745a5_uint_from_bits(jule::I64);
inline jule::Str _1ce674990_float_from_bits(jule::I64);
inline jule::Bool _1ce675760_check_bit_float(jule::Str,jule::I64);
inline jule::I64 _1ce675bd3_bitsize_of_float(jule::F64);
inline jule::I64 _1ce676101_bitsize_of_int(jule::I64);
inline jule::I64 _1ce676585_bitsize_of_uint(jule::U64);
inline void _1ce676981_update_target(void);
inline void _1ce676d27_init(void);
inline jule::F64 _1ce679ab6_min(jule::Str);
inline jule::F64 _1ce67a06c_max(jule::Str);
inline jule::Bool _1ce67a644_is_i8_compatible(jule::Str);
inline jule::Bool _1ce67a90d_is_i16_compatible(jule::Str);
inline jule::Bool _1ce67acc6_is_i32_compatible(jule::Str);
inline jule::Bool _1ce67b1e4_is_i64_compatible(jule::Str);
inline jule::Bool _1ce67b535_is_u8_compatible(jule::Str);
inline jule::Bool _1ce67b8ba_is_u16_compatible(jule::Str);
inline jule::Bool _1ce67bc50_is_u32_compatible(jule::Str);
inline jule::Bool _1ce67c206_is_u64_compatible(jule::Str);
inline jule::Bool _1ce67c503_is_f32_compatible(jule::Str);
inline jule::Bool _1ce67c888_is_f64_compatible(jule::Str);
inline jule::Bool _1ce67cc1d_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _1ce67d306_is_i16_greater(jule::Str);
inline jule::Bool _1ce67d603_is_i32_greater(jule::Str);
inline jule::Bool _1ce67d999_is_i64_greater(jule::Str);
inline jule::Bool _1ce67dd40_is_u16_greater(jule::Str);
inline jule::Bool _1ce67e417_is_u32_greater(jule::Str);
inline jule::Bool _1ce67e69d_is_u64_greater(jule::Str);
inline jule::Bool _1ce67ea44_is_f32_greater(jule::Str);
inline jule::Bool _1ce67edda_is_f64_greater(jule::Str);
inline jule::Bool _1ce680281_is_greater(jule::Str,jule::Str);
inline jule::Bool _1ce6818d1_is_sig_int(jule::Str);
inline jule::Bool _1ce681caa_is_unsig_int(jule::Str);
inline jule::Bool _1ce682173_is_int(jule::Str);
inline jule::Bool _1ce6825b3_is_float(jule::Str);
inline jule::Bool _1ce6828d2_is_num(jule::Str);
inline jule::Bool _1ce70a43d_is_ascii(jule::I32);
inline jule::I32 _1ce6e2a63_to_rune(jule::Slice<jule::U8>);
inline jule::Str _1ce6dc497_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _1ce70abe1_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _1ce70b076_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _1ce70b2a7_rune_from_esq_seq(jule::Slice<jule::U8>,jule::I64&);
inline jule::Slice<jule::U8> _1ce70bbc0_str_esq_seq(jule::Slice<jule::U8>,jule::I64&);
inline jule::I64 _1b54a36a6_find_format_prefix(jule::Slice<jule::U8>&,jule::I64&);
inline jule::Slice<jule::U8> _1b54a1330_get_format_range(jule::I64&,jule::Slice<jule::U8>&);
inline jule::Slice<jule::U8> _1b54a4a1a_fmt_by_default(jule::Any&);
inline jule::Slice<jule::U8> _1b54a4bb3_apply_fmt_by_default(jule::I64&,jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _1b5499c74_apply_fmt(jule::Slice<jule::U8>&,jule::I64&,jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _1b5499e1c_format_bytes(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1b54b00ec_format(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1e83d7332_kind_uses_generics(jule::Ptr<_1ce76121e_TypeKind>,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>&);
inline jule::Bool _1e83d77b6_parameter_uses_generics(jule::Ptr<_1e83d3839_Param>&,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>&);
inline jule::Str _1e83deee9_build_doc(jule::Ptr<_2129e3072_CommentGroup>);
inline jule::Ptr<_1ce761b37_TypeSymbol> _1e83e0390_build_type(jule::Ptr<_2129e3d42_TypeDecl>);
inline jule::Ptr<_1ce7281d6_Value> _1e83e06e2_build_expr(jule::Ptr<_212b16162_Expr>);
inline jule::Ptr<_1ce75e6a1_TypeAlias> _1e83e0acc_build_type_alias(jule::Ptr<_212b230c5_TypeAliasDecl>);
inline jule::Ptr<_1e82e47a0_Field> _1e83e0dda_build_field(jule::Ptr<_212b24eea_FieldDecl>);
inline jule::Slice<jule::Ptr<_1e82e47a0_Field>> _1e83e123c_build_fields(jule::Slice<jule::Ptr<_212b24eea_FieldDecl>>&);
inline jule::Ptr<_1e83b1718_Struct> _1e83e158e_build_struct(jule::Ptr<_212b2587a_StructDecl>);
inline jule::Ptr<_1e83d3839_Param> _1e83e1a12_build_param(jule::Ptr<_212b1e995_ParamDecl>);
inline jule::Slice<jule::Ptr<_1e83d3839_Param>> _1e83e1ccb_build_params(jule::Slice<jule::Ptr<_212b1e995_ParamDecl>>&);
inline jule::Ptr<_1e83d3284_RetType> _1e83e212d_build_ret_type(jule::Ptr<_212b15c22_RetTypeDecl>);
inline jule::Ptr<_1e83d4384_Fn> _1e83e2480_build_fn(jule::Ptr<_212b1edd5_FnDecl>);
inline jule::Slice<jule::Ptr<_1e83d4384_Fn>> _1e83e27d2_build_methods(jule::Slice<jule::Ptr<_212b1edd5_FnDecl>>&);
inline jule::Ptr<_1e85a7865_Trait> _1e83e2b34_build_trait(jule::Ptr<_212b1ade2_TraitDecl>);
inline jule::Ptr<_1e86494b7_EnumItem> _1e83e2e86_build_enum_item(jule::Ptr<_212b242d5_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_1e86494b7_EnumItem>> _1e83e32d8_build_enum_items(jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>>&);
inline jule::Ptr<_1e8648917_Enum> _1e83e387c_build_enum(jule::Ptr<_212b24725_EnumDecl>);
inline jule::Ptr<_1ce6cecb4_Var> _1e83e3aad_build_var(jule::Ptr<_212b20325_VarDecl>);
inline jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _1e83e3e10_build_vars(jule::Slice<jule::Ptr<_212b20325_VarDecl>>);
inline jule::Ptr<_1e8648e34_Impl> _1e83e4262_build_impl(jule::Ptr<_212b26705_Impl>);
inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce63b292_new_scope_checker_base(jule::Ptr<_1ce6ab345_Sema>&,jule::Ptr<_1e83d630e_FnIns>);
inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce6503e9_new_scope_checker(jule::Ptr<_1ce6ab345_Sema>&,jule::Ptr<_1e83d630e_FnIns>);
inline jule::Ptr<_1ce68793c_ScopeLabel> _1ce63c3d6_find_label_parent(jule::Str,jule::Ptr<_1ce6882bc_ScopeChecker>);
inline jule::Bool _1ce63d0eb_stmt_is_goto_scope(jule::Any&,jule::Ptr<_1ce62e86d_Scope>&);
inline jule::I64 _1ce63d4a3_count_match_type(jule::Ptr<_1ce68672c_Match>&,jule::Ptr<_1ce76121e_TypeKind>&);
inline jule::Slice<jule::Ptr<_1ce727449_Data>> _1ce63d8d2_get_datas_from_tuple_data(jule::Ptr<_1ce727449_Data>&);
inline jule::Slice<jule::Any> _1ce63e1b8_get_expr_models(jule::Any&);
inline jule::Bool _1ce634631_check_mut(jule::Ptr<_1ce6ab345_Sema>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);
inline jule::Bool _1ce64010e_check_assign(jule::Ptr<_1ce6ab345_Sema>&,jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce727449_Data>,_212ae5c02_Token);
inline jule::Bool _1ce64938d_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _1ce648d60_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _1ce6601b7_st_is_def(jule::Any&);
inline jule::Ptr<_1ce6cecb4_Var> _1ce69d018_find_var_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce69d645_find_type_alias_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1e83b1718_Struct> _1ce69dc50_find_struct_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1e83d4384_Fn> _1ce69e36b_find_fn_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1e85a7865_Trait> _1ce69e8cc_find_trait_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Str);
inline jule::Ptr<_1e8648917_Enum> _1ce69ed61_find_enum_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Str);
inline jule::Bool _1ce6a1b21_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1ce6a9101_is_valid_model_for_ref(jule::Any&);
inline _21287ea02_Log _1ce6a9299_compiler_err(_212ae5c02_Token&,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1ce6a98a4_imp_is_lookupable(jule::Ptr<_1ce6a0317_ImportInfo>&,jule::Str);
inline jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _1ce6a9d7c_build_ret_vars(jule::Ptr<_1e83d630e_FnIns>&);
inline jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _1ce6aa18a_build_param_vars(jule::Ptr<_1e83d630e_FnIns>&);
inline jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _1ce6aa4dc_build_generic_type_aliases(jule::Ptr<_1e83d630e_FnIns>&);
inline jule::Ptr<_1ce7204a8_SymbolTable> _1ce6aa993_find_file(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>&,jule::Ptr<_212aed0c2_File>&);
inline void _1ce6aae38_push_suggestion(_21287ea02_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _1ce6e8382_get_result_types(jule::Ptr<_1ce76121e_TypeKind>&);
inline jule::Bool _1ce6e1d1a_trait_has_reference_receiver(jule::Ptr<_1e85a7865_Trait>&);
inline jule::Bool _1ce6de07b_float_assignable(jule::Str,jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1ce6dcd5a_sig_assignable(jule::Str,jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1ce6e348c_unsig_assignable(jule::Str,jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1ce6e3635_int_assignable(jule::Str,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_2129e3902_Directive> _1ce72a947_find_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Str);
inline jule::Any _1ce72aded_find_builtins_import(jule::Str,jule::Ptr<_1ce6a0317_ImportInfo>);
inline void _1ce72b33d_fit_bitsize(jule::Ptr<_1ce727449_Data>&);
inline void _1ce72b915_make_struct_lit_alloc(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1e83c0bbc_StructLitExprModel>&);
inline jule::Ptr<_1ce6cecb4_Var> _1ce72bae1_build_error_var(jule::Ptr<_1ce62e86d_Scope>&,jule::Ptr<_212b19bd2_FnCallExpr>&);
inline jule::Any _1ce72c031_find_builtins_sema(jule::Str,jule::Ptr<_1ce6ab345_Sema>);
inline jule::Bool _1ce72c471_is_ok_for_shifting(jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1ce72c8e4_is_instanced_struct(jule::Ptr<_1e83b84bc_StructIns>);
inline jule::Bool _1ce72cbad_is_ptr_arithmetic_compatible_int(jule::Ptr<_1ce727449_Data>&);
inline void _1ce72d076_apply_cast_kind_model(jule::Ptr<_1ce727449_Data>&);
inline void _1ce72d30c_apply_cast_kind(jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1ce72d5c6_build_void_data(void);
inline jule::Str _1ce72d83a_check_data_for_integer_indexing(jule::Ptr<_1ce727449_Data>&);
inline void _1ce72dbd1_apply_cast_model_by_enum(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1e8648917_Enum>);
inline void _1ce72e2db_cast_const_by_type(jule::Str&,jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1ce75e34e_has_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Str);
inline jule::Bool _1ce76507a_can_get_ptr(jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1ce7653cc_is_valid_for_sptr_type(jule::Ptr<_1ce76121e_TypeKind>&);
inline jule::Bool _1ce765850_is_valid_for_ref(jule::Ptr<_1ce76121e_TypeKind>&);
inline jule::Bool _1ce765bc4_is_builtin_str_convertable(jule::Ptr<_1ce76121e_TypeKind>&);
inline jule::Str _1ce76609d_build_link_path_by_tokens(jule::Slice<_212ae5c02_Token>&);
inline jule::Ptr<_1ce762330_Prim> _1ce7663cd_build_prim_type(jule::Str);
inline jule::Ptr<_1e83b1718_Struct> _1ce76682e_get_struct_from_kind(jule::Ptr<_1ce76121e_TypeKind>);
inline jule::Bool _1ce766ae8_is_prim(jule::Str);
inline std::tuple<jule::Ptr<_1ce7204a8_SymbolTable>,jule::Slice<_21287ea02_Log>> _1b546219d_build_symbols(jule::Ptr<_2129e26e2_Ast>&,jule::Trait<_1ce69b511_Importer>&,jule::Ptr<_1e83e45b4_SymbolBuilder>);
inline std::tuple<jule::Ptr<_1ce6a15e3_Package>,jule::Slice<_21287ea02_Log>> _1b5462742___analyze_package(jule::Slice<jule::Ptr<_2129e26e2_Ast>>&,jule::Trait<_1ce69b511_Importer>&,jule::I64&);
inline std::tuple<jule::Ptr<_1ce6a15e3_Package>,jule::Slice<_21287ea02_Log>> _1b5462c70_analyze_package(jule::Slice<jule::Ptr<_2129e26e2_Ast>>,jule::Trait<_1ce69b511_Importer>,jule::I64);
inline jule::Ptr<_1e83d630e_FnIns> _1b5469bcd_find_builtin_fn(jule::Str);
inline jule::Ptr<_1ce75e6a1_TypeAlias> _1b546cebc_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_1e85a7865_Trait> _1b546de13_find_builtin_trait(jule::Str);
inline jule::Any _1b547526b_find_builtin_def(jule::Str);
inline jule::Any _1b548cd22_find_builtin_def_std_debug(jule::Str);
inline jule::Any _1b54899cd_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1b5495b93_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _1b546854a_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ptr<_1ce727449_Data> _1b54b0295_builtin_caller_common_plain(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5474996_builtin_caller_common(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5465701_builtin_caller_common_mut(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5465c1d_builtin_caller_error(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&);
inline jule::Ptr<_1ce727449_Data> _1b54c2384_builtin_caller_out(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5496c60_builtin_caller_outln(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54745ab_builtin_caller_new(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b547190a_builtin_caller_panic(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5471aa3_builtin_caller_make(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5496204_builtin_caller_append(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b549639c_builtin_caller_copy(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5496545_builtin_caller_clone(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54966dd_builtin_caller_assert(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b5496886_builtin_caller_std_mem_size_of(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54c2ab0_builtin_caller_std_mem_align_of(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54c2c58_builtin_caller_std_mem_free(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54c2e01_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54c3099_builtin_caller_std_jule_integrated_emit(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54c3242_builtin_caller_std_debug_out(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline jule::Ptr<_1ce727449_Data> _1b54c33da_builtin_caller_std_debug_outln(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _212988512_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _2129886aa_check_arch(jule::Str);
inline jule::Bool _212988bb6_is_pass_file_annotation(jule::Str);
inline void _2129898ed_set_os_vars(jule::Slice<jule::Str>&);
inline void _212989c83_set_arch_vars(jule::Slice<jule::Str>&);
inline void _21298a091_init_vars(jule::Slice<jule::Str>&,_212989117_CompileInfo&);
inline jule::Slice<jule::U8> _1b54c3693_read_buff(jule::Str);
inline _21287ea02_Log _1b54c383b_flat_compiler_err(jule::Str);
inline std::tuple<jule::Bool,jule::Slice<_21287ea02_Log>> _1b54c3c9d_is_pass_build_directives(jule::Ptr<_2129e26e2_Ast>&);
inline void _1b54c7c08_push_passes(jule::Ptr<_1ce6a15e3_Package>&,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _1b54c80b0_get_all_unique_passes(jule::Ptr<_1ce6a15e3_Package>&,jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>>);
inline _212989117_CompileInfo _1b54c8500_build_compile_info(void);
inline jule::Ptr<_2129e3902_Directive> _1b54ccb75_find_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Str);
inline jule::Bool _1b54cd12b_has_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Str);
inline jule::Bool _1b54cd5d2_is_exist(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _1b54cdb10_is_dead(jule::Any);
inline void _1b54cde40_drop_ref(jule::Slice<jule::Any>&,jule::I64);
inline jule::Bool _1b54ce32a_is_all_references_are_dead(jule::Ptr<_1e83de4b0_ReferenceStack>);
inline jule::Bool _1b54ce68d_is_fn_dead(jule::Ptr<_1e83d630e_FnIns>);
inline jule::Bool _1b54ceade_is_var_dead(jule::Ptr<_1ce6cecb4_Var>);
inline jule::Bool _1b54d055c_is_struct_dead(jule::Ptr<_1e83b84bc_StructIns>);
inline jule::Bool _1b54d08ae_is_trait_dead(jule::Ptr<_1e85a7865_Trait>);
inline void _1b54d0c11_eliminate_dead_functions(jule::Slice<jule::Ptr<_1e83d4384_Fn>>&);
inline void _1b54d1074_eliminate_dead_globals(jule::Ptr<_1ce6a15e3_Package>&);
inline void _1b54d12d8_eliminate_dead_functions_package(jule::Ptr<_1ce6a15e3_Package>&);
inline void _1b54d1c89_keep_alive_init(jule::Ptr<_1ce6a15e3_Package>&);
inline void _1b54d2053_eliminate_package(jule::Ptr<_1ce6a15e3_Package>&);
inline void _1b54d231c_eliminate_defines(jule::Ptr<_1b54c72bd_IR>&);
inline void _1b54d3b7b_eliminate_dead_code_of_scope(jule::Ptr<_1ce62e86d_Scope>);
inline void _1b54d3ecd_eliminate_scope_functions(jule::Slice<jule::Ptr<_1e83d4384_Fn>>&);
inline void _1b54d431e_eliminate_functions_scope_package(jule::Ptr<_1ce6a15e3_Package>&);
inline void _1b54d4682_eliminate_scope_package(jule::Ptr<_1ce6a15e3_Package>&);
inline void _1b54d4918_eliminate_scopes(jule::Ptr<_1b54c72bd_IR>&);
inline void _1b5501308_throw(jule::Str);
inline jule::Bool _1b58a06da_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1b58a094e_is_constant_valid_conditional_case(jule::Ptr<_1ce632574_If>&);
inline jule::Bool _1b58a0d17_is_unreachable_expr(jule::Any&);
inline jule::Bool _1b58a11be_is_constant_valid_match_case(jule::Ptr<_1ce686b6c_Case>&);
inline jule::Bool _1b58a1521_is_unreachable_conditional_case(jule::Ptr<_1ce632574_If>&);
inline jule::Bool _1b58a1895_is_unreachable_match_case(jule::Ptr<_1ce686b6c_Case>&);
inline std::tuple<jule::Bool,jule::U64> _1b58a76e2_check_for_bit_shift_opt(jule::Ptr<_1e83bdbcb_OperandExprModel>&,jule::Ptr<_1e83bdbcb_OperandExprModel>&);
inline jule::U64 _1b591b6ac_unix(void);
inline jule::U64 _1b591c01a_unix_year_to_seconds(jule::U64,jule::Bool&);
inline jule::U64 _1b591c46b_unix_month_to_seconds(jule::U64,jule::Bool);
inline jule::Bool _1b57ce2d9_is_copy_optimizable(jule::Ptr<_1ce727449_Data>&);
inline jule::Bool _1b582d79a_is_iter_copy_optimizable(jule::Ptr<_1ce727449_Data>&,jule::Ptr<_1ce6cecb4_Var>&);
inline jule::Str _1b57d0bc0_concat_all_parts(jule::Slice<_212ae5c02_Token>);
inline jule::Str _1b5845d23_decompose_common_esq(jule::U8);
inline jule::Str _1b5846917_sbtoa(jule::U8);
inline jule::Str _1b58541b6_cstr_bytes(jule::Slice<jule::U8>);
inline jule::Str _1b5859540_cstr_lit(jule::Slice<jule::U8>);
inline jule::Str _1b585a112_ftoa(jule::F64,jule::I64);
inline jule::Str _1b5864c32_itoa(jule::I64);
inline jule::Str _1b5829774_utoa(jule::U64);
inline jule::Bool _1b5886946_is_forwarded(jule::Ptr<_1ce62e86d_Scope>&);
inline jule::Bool _1b582a797_is_builtin_call_has_debuginf(jule::Ptr<_1e83c2581_FnCallExprModel>&);
inline jule::Bool _1b58d3db1_is_cpp_header_file(jule::Str);
inline jule::Ptr<_2129e3902_Directive> _1b592bac9_find_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Str);
inline jule::Bool _1b592c0d5_has_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>&,jule::Str);
inline void _2128593b1_print_error_message(jule::Str);
inline void _21123cd2e_help(jule::Slice<jule::Str>&);
inline void _21285b638_version(jule::Slice<jule::Str>&);
inline void _21285bc10_tool_distos(void);
inline void _212863046_tool_distarch(void);
inline void _212865587_tool(jule::Slice<jule::Str>&);
inline void _2112589e8_julenv(jule::Slice<jule::Str>&);
inline void _2125343ee_mod(jule::Slice<jule::Str>&);
inline jule::Bool _21286c0c7_process_command(jule::Slice<jule::Str>&);
inline void _2128584ae_show_info(void);
void entry_point(void);
inline void _1b59630d8_init(void);
inline void _1b59638e1_write_output(jule::Str,jule::Str);
inline void _1b5963a89_clear_objects(void);
inline void _1b5963c32_compile_ir(jule::Str,jule::Str);
inline void _1b5963dca_do_spell(jule::Str,jule::Str,jule::Str);
inline jule::Bool _1b5964073_is_cpp_source_file(jule::Str);
inline void _1b596421b_push_comp_cmd_clang(jule::Str&);
inline void _1b59643b4_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _1b596455c_gen_compile_cmd(jule::Str,jule::Ptr<_1b54c72bd_IR>&);
inline jule::Str _1b5964705_get_compile_path(void);
inline void _1b596489d_apply_target_independent_optimizations(jule::Ptr<_1b54c72bd_IR>&);
inline void _1b5964a46_check_compiler_flag(void);
inline void _1b5964bde_check_target_arch(jule::Str);
inline void _1b5964d87_check_target_os(jule::Str);
inline void _1b5965030_check_target_flag(jule::Str&);
inline void _1b5965409_check_opt_flag(jule::Str&);
inline void _1b59655a2_check_cpp_std_flag(void);
inline jule::Slice<jule::Str> _1b596574a_check_flags(jule::Slice<jule::Str>&);
inline void _1b59658e3_setup_sema_flags(jule::I64&);
inline jule::Ptr<_1b54c72bd_IR> _1b5965a8b_build_ir(jule::Slice<jule::Str>&);
inline void _1b5965c34_compile_command(jule::Slice<jule::Str>&);


jule::Bool _210ecc0b8_PRODUCTION;
jule::Bool _2110618ab_OPT_COPY;
jule::Bool _2110619ee_OPT_DEADCODE;
jule::Bool _211061b42_OPT_APPEND;
jule::Bool _211061c85_OPT_MATH;
jule::Bool _211061dc8_OPT_ACCESS;
jule::Bool _21106201b_OPT_INLINE;
jule::Bool _21106226e_OPT_PTR;
jule::Bool _2110623b2_OPT_COND;
jule::Str _2110629cd_COMPILER;
jule::Str _211062bed_COMPILER_PATH;
jule::Str _211062dc9_CPP_STD;
jule::Bool _21106313d_SHADOWING;
jule::Bool _2110632c5_TRANSPILATION;
jule::Bool _2110634a1_TEST;
jule::Bool _21106367c_RC;
jule::Bool _2110639ce_SAFETY;
jule::U64 _21114a6dc_STDIN;
jule::U64 _21112c6d0_STDOUT;
jule::U64 _21112d6ae_STDERR;
jule::Array<jule::U8,256> _211213a3b_FIRST;
jule::Array<_211214102_accept_range,16> _211212287_ACCEPT_RANGES;
jule::Ptr<_212853b5d_RangeTable> _21280852a__L;
jule::Ptr<_212853b5d_RangeTable> _21280d2bb_LETTER;
jule::Array<jule::U8,256> _21284c34e__PROPERTIES;
jule::Array<jule::Str,4> _2128650ae_CPP_HEADER_EXTS;
jule::Array<jule::Str,3> _21286cb66_CPP_EXTS;
jule::Array<jule::Str,1> _21286e23e_OBJECTIVE_CPP_EXTS;
jule::Array<jule::Str,3> _2128843db_DISTOS;
jule::Array<jule::Str,3> _21288463e_DISTARCH;
jule::Str _21289b502_PATH_STDLIB;
jule::Str _212891a9c_PATH_EXEC;
jule::Str _212890419_PATH_WD;
jule::Str _2128b235e_PATH_API;
jule::Str _212893c25_OS;
jule::Str _2128b0c97_ARCH;
jule::Array<jule::I32,5> _212a2d211_SPACES;
jule::Array<jule::Str,6> _212a2d354_UNARY_OPS;
jule::Array<jule::Str,12> _212a2d497_BIN_OPS;
jule::Array<jule::Str,2> _212a2d72d_POSTFIX_OPS;
jule::Array<jule::Str,11> _212a2d882_ASSING_OPS;
jule::Array<_212b01317_KindPair,47> _212b01856_KEYWORDS;
jule::Array<_212b01317_KindPair,39> _212b01aa9_BASIC_OPS;
jule::Array<jule::U8,32> _1ce427ee6_DE_BRUIJN32_TAB;
jule::Array<jule::U8,64> _1ce4282d2_DE_BRUIJN64_TAB;
_1ce045d56_FloatInfo _1cde447e3_F32_INFO;
_1ce045d56_FloatInfo _1cde619db_F64_INFO;
jule::Array<jule::Array<jule::U64,2>,696> _1ce1c824c_DETAILED_POWS_OF_TEN;
jule::Slice<jule::I64> _1ce0dac31_POWTAB;
jule::Slice<jule::F64> _1ce235809_F64_POW10;
jule::Slice<jule::F32> _1ce25a0e2_F32_POW10;
jule::Array<jule::U64,20> _1ce27a321_U64_POW10;
jule::Slice<_1ce0e76ee_LeftCheat> _1cddb9119_LEFTCHEATS;
jule::I64 _1ce672707_BIT_SIZE;
jule::Str _1ce67284a_SYS_INT;
jule::Str _1ce67298d_SYS_UINT;
jule::Slice<jule::Any> _1b54cbe93_deads;
jule::Slice<jule::Any> _1b54cc56a_checking;
jule::Any _1b54cc724_current;
jule::Any _1b54cc9dd_main_current;
jule::Array<jule::U64,12> _1b59199c9_MDAYS;
jule::Array<jule::Array<jule::Str,2>,5> _21285a923_HELP_MAP;
jule::Str _1b577413b_OUT_DIR;
jule::Str _1b5935385_OUT_NAME;
jule::Str _1b5936430_OUT;





std::ostream &operator<<(std::ostream &_Stream, const _211214102_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212851364_FoldPair &_Src) {
	_Stream << "FoldPair{";
	_Stream << "from:" << _Src._field_from << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212851d7b_CaseRange &_Src) {
	_Stream << "CaseRange{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "delta:" << _Src._field_delta;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _21285283d_Range16 &_Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2128531bd_Range32 &_Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212853b5d_RangeTable &_Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _211dc0494_LazyBuff::_method_index(jule::I64 _5424_i) {
	if (((*this)._field_buff != nullptr)) {
		return (*this)._field_buff[_5424_i];
	}
	return (*this)._field_path[_5424_i];
}



inline void _211dc0494_LazyBuff::_method_append(jule::U8 _6125_c) {
	if (((*this)._field_buff == nullptr)) {
		if (((*this)._field_w < static_cast<jule::I64>((*this)._field_path.len())) && ((*this)._field_path[(*this)._field_w] == _6125_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*this)._field_path.len()));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,(*this)._field_w)));
	}
	(*this)._field_buff[(*this)._field_w]=_6125_c;
	((*this)._field_w)++;
}



inline jule::Str _211dc0494_LazyBuff::_method_string(void) {
	if (((*this)._field_buff == nullptr)) {
		return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len + (*this)._field_w);
	}
	return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,(*this)._field_w));
}







std::ostream &operator<<(std::ostream &_Stream, const _211dc0494_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _211184319_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_211184319_DirEntry>>> _211184759_Directory::_static_method_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_211184319_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_211184319_DirEntry>>();
	jule::Slice<jule::U16> _1613_utf16_path = _21116da95_utf16_from_str(_1524_path);
	_WDIR* _1717_dir = _211134385__wopendir((&(_1613_utf16_path[0LL])));
	if ((_1717_dir == nullptr)) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_211184319_DirEntry>>>(_2110b426b_get_last_fs_error());
	}
	for (;;) {
		{
			struct _wdirent* _2217_dirent = _21113452d__wreaddir(_1717_dir);
			if ((_2217_dirent == nullptr)) {
				goto _iter_end_1b6294364;
			}
			jule::Str _2617_name = _211160c96_u16_ptr_to_str(((jule::U16*)((*(_2217_dirent)).d_name)));
			jule::Ptr<_2111850d9_Status> _2721_stat = ({
				auto except = _2111850d9_Status::_static_method_of(_211dc6ce7_join(jule::Slice<jule::Str>({_1524_path,_2617_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_211184319_DirEntry>>>(except.error);
					return jule::Exceptional<jule::Slice<jule::Ptr<_211184319_DirEntry>>>(except.error);
				} jule::Ptr<_2111850d9_Status>();});
			});
			_1538_dirents = jule::alloc_for_append(_1538_dirents,1);_1538_dirents.__push(jule::new_struct<_211184319_DirEntry>(new( std::nothrow ) _211184319_DirEntry(_2617_name,_2721_stat)));
		}
	_iter_next_1b6294364:;
	}
	_iter_end_1b6294364:;
	_21115eca6__wclosedir(_1717_dir);
	return jule::Exceptional<jule::Slice<jule::Ptr<_211184319_DirEntry>>>(jule::Any(), _1538_dirents);
}



inline jule::VoidExceptional _211184759_Directory::_static_method_create(jule::Str _4026_path) {
	jule::Slice<jule::U16> _4513_utf16_path = _21116da95_utf16_from_str(_4026_path);
	if ((!(_21114221c_create_directory((&(_4513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2110b426b_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _211184759_Directory::_static_method_remove(jule::Str _5426_path) {
	jule::Slice<jule::U16> _5513_utf16_path = _21116da95_utf16_from_str(_5426_path);
	if ((!(_2111423b5_remove_directory((&(_5513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2110b426b_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _211184759_Directory &_Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_211184b99_File> _211184b99_File::_static_method_new(jule::U64 _4523_handle) {
	return jule::new_struct<_211184b99_File>(new( std::nothrow ) _211184b99_File(_4523_handle));
}



inline jule::Exceptional<jule::Ptr<_211184b99_File>> _211184b99_File::_static_method_create(jule::Str _5526_path) {
	return jule::Exceptional<jule::Ptr<_211184b99_File>>(jule::Any(),({
		auto except = _211184b99_File::_static_method_open(_5526_path,((static_cast<jule::I64>(770LL) | 770LL) | 770LL),438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_211184b99_File>>(except.error);
			return jule::Exceptional<jule::Ptr<_211184b99_File>>(except.error);
		} jule::Ptr<_211184b99_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> _211184b99_File::_static_method_read(jule::Str _6724_path) {
	jule::Ptr<_2111850d9_Status> _6813_s = ({
		auto except = _2111850d9_Status::_static_method_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_2111850d9_Status>();});
	});
	if ((!((*(_6813_s))._method_is_reg()))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(static_cast<jule::I64>(14LL));
	}
	if (((*(_6813_s))._field_size == 0LLU)) {
		return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	}
	jule::Ptr<_211184b99_File> _7817_f = ({
		auto except = _211184b99_File::_static_method_open(_6724_path,static_cast<jule::I64>(0LL),0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_211184b99_File>();});
	});
	__JULE_DEFER({
		({
			auto except = (*(_7817_f))._method_close();
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/fs/file.jule:79:17"));
		});
	});
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*(_6813_s))._field_size));
	jule::I64 _8213_n = ({
		auto except = (*(_7817_f))._method_read(_8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::I64();});
	});
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional _211184b99_File::_static_method_write(jule::Str _9125_path,jule::Slice<jule::U8> _9136_data,jule::I64 _9150_perm) {
	jule::Ptr<_211184b99_File> _9217_f = ({
		auto except = _211184b99_File::_static_method_open(_9125_path,((static_cast<jule::I64>(769LL) | 769LL) | 769LL),_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_211184b99_File>();});
	});
	({
		auto except = (*(_9217_f))._method_write(_9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = (*(_9217_f))._method_close();
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I64> _211184b99_File::_method_seek(jule::I64 _10527_offset,jule::I64 _10540_origin) {
	jule::I64 _10613_pos = _21117b575_seek(static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_handle)),_10527_offset,static_cast<jule::I64>(_10540_origin));
	if ((_10613_pos == -1LL)) {
		return jule::Exceptional<jule::I64>(_2110b426b_get_last_fs_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _211184b99_File::_method_close(void) {
	if ((_21117b8b6_close(static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_handle))) == -1LL)) {
		return jule::VoidExceptional(_2110b426b_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Ptr<_211184b99_File>> _211184b99_File::_static_method_open(jule::Str _2124_path,jule::I64 _2135_flag,jule::I64 _2148_mode) {
	jule::Slice<jule::U16> _2213_utf16_path = _21116da95_utf16_from_str(_2124_path);
	jule::I64 _2313_handle = _211135276__wopen((&(_2213_utf16_path[0LL])),static_cast<jule::I64>(_2135_flag),_2148_mode);
	if ((_2313_handle == -1LL)) {
		return jule::Exceptional<jule::Ptr<_211184b99_File>>(_2110b426b_get_last_fs_error());
	}
	return jule::Exceptional<jule::Ptr<_211184b99_File>>(jule::Any(),_211184b99_File::_static_method_new(static_cast<jule::U64>(static_cast<jule::U64>(_2313_handle))));
}



inline jule::VoidExceptional _211184b99_File::_static_method_remove(jule::Str _3426_path) {
	jule::Slice<jule::U16> _3513_utf16_path = _21116da95_utf16_from_str(_3426_path);
	if ((!(_211163a46_delete_file((&(_3513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2110b426b_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I64> _211184b99_File::_method_write(jule::Slice<jule::U8> _4928_buff) {
	jule::I64 _4945_n = jule::I64();
	if ((_4928_buff.len() == 0LL)) {
		_4945_n = 0LL;
		return jule::Exceptional<jule::I64>(jule::Any(),_4945_n);
	}
	if (_21118b299_is_console_handle((*this)._field_handle)) {
		jule::Slice<jule::U16> _5517_utf16_buff = _21116da95_utf16_from_str(static_cast<jule::Str>(_4928_buff));
		jule::Bool _5617_ok = _21117a310_write_console((*this)._field_handle,(&(_5517_utf16_buff[0LL])),static_cast<jule::I64>(_5517_utf16_buff.len()),_4945_n,nullptr);
		if ((!(_5617_ok))) {
			return jule::Exceptional<jule::I64>(_2110b426b_get_last_fs_error());
		}
		return jule::Exceptional<jule::I64>(jule::Any(),_4945_n);
	}
	_4945_n=static_cast<jule::I64>(static_cast<jule::I64>(_21117ba5e_write(static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_handle)),(&(_4928_buff[0LL])),static_cast<jule::U64>(static_cast<jule::U64>(_4928_buff.len())))));
	if ((_4945_n == -1LL)) {
		return jule::Exceptional<jule::I64>(_2110b426b_get_last_fs_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_4945_n);
}



inline jule::Exceptional<jule::I64> _211184b99_File::_method_read(jule::Slice<jule::U8> _8231_buff) {
	jule::I64 _8248_n = jule::I64();
	if ((_8231_buff.len() == 0LL)) {
		_8248_n = 0LL;
		return jule::Exceptional<jule::I64>(jule::Any(),_8248_n);
	}
	if (_21118b299_is_console_handle((*this)._field_handle)) {
		jule::Slice<jule::U16> _8821_codepage = jule::Slice<jule::U16>::alloc(static_cast<jule::I64>(_8231_buff.len()));
		jule::Bool _8917_ok = _21117a4a8_read_console((*this)._field_handle,(&(_8821_codepage[0LL])),static_cast<jule::I64>(_8231_buff.len()),_8248_n,nullptr);
		if ((!(_8917_ok))) {
			return jule::Exceptional<jule::I64>(_2110b426b_get_last_fs_error());
		}
		jule::Slice<jule::I32> _9617_runes = _211179254_decode(_8821_codepage.slice(0LL,_8248_n));
		_8248_n=0LL;
		{
			auto &expr = _9617_runes;
			auto it = expr.begin();
			_iter_begin_1b62b86b8:;
			if (it != expr.end()) {
				jule::I32 &_1b62b87d9_r = *it;
				{
					jule::I64 _9921_size = _21121581d_rune_len(_1b62b87d9_r);
					if ((_8248_n + _9921_size) > static_cast<jule::I64>(_8231_buff.len())) {
						goto _iter_end_1b62b86b8;
					}
					_211215b3c_encode_rune(_8231_buff.slice(_8248_n),_1b62b87d9_r);
					_8248_n+=_9921_size;
				}
				_iter_next_1b62b86b8:;
				++it;
				goto _iter_begin_1b62b86b8;
			}
			_iter_end_1b62b86b8:;
		}
		return jule::Exceptional<jule::I64>(jule::Any(),_8248_n);
	}
	_8248_n=static_cast<jule::I64>(static_cast<jule::I64>(_21117b71d_read(static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_handle)),(&(_8231_buff[0LL])),static_cast<jule::U64>(static_cast<jule::U64>(_8231_buff.len())))));
	if ((_8248_n == -1LL)) {
		return jule::Exceptional<jule::I64>(_2110b426b_get_last_fs_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_8248_n);
}







std::ostream &operator<<(std::ostream &_Stream, const _211184b99_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2111850d9_Status::_method_is_dir(void) {
	return (((*this)._field_mode & 16384LLU) == 16384LLU);
}



inline jule::Bool _2111850d9_Status::_method_is_reg(void) {
	return (((*this)._field_mode & 32768LLU) == 32768LLU);
}



inline jule::Exceptional<jule::Ptr<_2111850d9_Status>> _2111850d9_Status::_static_method_of(jule::Str _1222_path) {
	jule::Slice<jule::U16> _1313_utf16_path = _21116da95_utf16_from_str(_1222_path);
	struct stat _1417_handle = (struct stat){};
	jule::I64 _1513_code = _21113a688_wstat((&(_1313_utf16_path[0LL])),(&(_1417_handle)));
	if ((_1513_code != -1LL)) {
		return jule::Exceptional<jule::Ptr<_2111850d9_Status>>(jule::Any(),jule::new_struct<_2111850d9_Status>(new( std::nothrow ) _2111850d9_Status(static_cast<jule::U64>(static_cast<jule::U64>(_1417_handle.st_mode)),static_cast<jule::U64>(static_cast<jule::U64>(_1417_handle.st_size)))));
	}
	return jule::Exceptional<jule::Ptr<_2111850d9_Status>>(_2110b426b_get_last_fs_error());
}







std::ostream &operator<<(std::ostream &_Stream, const _2111850d9_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2128a6d59_Cmd> _2128a6d59_Cmd::_static_method_new(jule::Str _2023_path) {
	return jule::new_struct<_2128a6d59_Cmd>(new( std::nothrow ) _2128a6d59_Cmd(_2023_path,jule::Slice<jule::Str>(),jule::Slice<jule::Str>()));
}



inline jule::Exceptional<jule::I64> _2128a6d59_Cmd::_method_spawn(void) {
	return jule::Exceptional<jule::I64>(jule::Any(),static_cast<jule::I64>(({
		auto except = (*this)._method___spawn();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I64>(except.error);
			return jule::Exceptional<jule::I64>(except.error);
		} jule::I64();});
	})));
}



inline jule::Exceptional<jule::I64> _2128a6d59_Cmd::_method___spawn(void) {
	jule::I64 _5313_pid = ((((*this)._field_env == nullptr)) ? (_2128b97d9_execvp((*this)._field_path,(*this)._field_args)) : (static_cast<jule::I64>(_2128b9c07_execve((*this)._field_path,(*this)._field_args,(*this)._field_env))));
	if ((_5313_pid == -1LL)) {
		return jule::Exceptional<jule::I64>(_2128a68e7_get_last_process_error());
	}
	jule::I64 _6113_status = 0LL;
	if ((_cwait(((signed*)((&(_6113_status)))),_5313_pid,0LL) == -1LL)) {
		return jule::Exceptional<jule::I64>(_2128a68e7_get_last_process_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_6113_status);
}







std::ostream &operator<<(std::ostream &_Stream, const _2128a6d59_Cmd &_Src) {
	_Stream << "Cmd{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _21287ea02_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _212ae5c02_Token::_method_prec(void) {
	if ((*this)._field_id != static_cast<jule::U64>(7LLU)) {
		return 0LLU;
	}
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_1e80b90be:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_1e80b8dd2:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_1e80b8e48:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_1e80b8c39:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_1e80b8ca0:;
			{
				return 1LLU;
			}
		}
		else {
			_case_begin_1e80b882c:;
			{
				return 0LLU;
			}
		}
		_match_end_1e80b87c7:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _212ae5c02_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212aed0c2_File::_method_is_ok(void) {
	({
		auto except = _2111850d9_Status::_static_method_of((*this)._field__path);
		if (!except.ok()) {
			return false;
		}
	});
	return true;
}



inline void _212aed0c2_File::_method_fill(jule::Slice<jule::U8> _2431_data) {
	(*this)._field_data=_2431_data;
}



inline jule::Str _212aed0c2_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _212aed0c2_File::_method_dir(void) {
	return _211dd6565_dir((*this)._field__path);
}



inline jule::Str _212aed0c2_File::_method_name(void) {
	return _211dcb2b3_base((*this)._field__path);
}



inline jule::U64 _212aed0c2_File::_method_addr(void) {
	return static_cast<jule::U64>(((jule::U64)((&((*this))))));
}



inline jule::Slice<_212ae5c02_Token> _212aed0c2_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _212aed0c2_File::_method_get_row(jule::I64 _4426_row) {
	jule::I64 _4517_n = 0LL;
	jule::I64 _4617_line_start = 0LL;
	jule::I64 _4717_i = 0LL;
	for (; _4717_i < static_cast<jule::I64>((*this)._field_data.len()); (_4717_i)++) {
		{
			if ((*this)._field_data[_4717_i] != '\n') {
				goto _iter_next_1e80c1428;
			}
			(_4517_n)++;
			if (_4517_n == _4426_row) {
				return static_cast<jule::Str>((*this)._field_data.slice(_4617_line_start,_4717_i));
			}
			_4617_line_start=static_cast<jule::I64>((_4717_i + 1LL));
		}
	_iter_next_1e80c1428:;
	}
	_iter_end_1e80c1428:;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, const _212aed0c2_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b01317_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _212b08055_Lex::_method_push_err(jule::Str _45327_fmt,jule::Slice<jule::Any> _45340_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_212b01cb8_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_45327_fmt,_45340_args));
}



inline void _212b08055_Lex::_method_push_err_tok(_212ae5c02_Token& _45832_token,jule::Str _45846_fmt) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_212b01cb8_make_err(_45832_token._field_row,_45832_token._field_column,(*this)._field_file,_45846_fmt,jule::Slice<jule::Any>()));
}



inline void _212b08055_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	while ((*this)._field_pos < static_cast<jule::I64>((*((*this)._field_file))._field_data.len())) {
		{
			_212ae5c02_Token _46821_token = (*this)._method_token();
			if (_46821_token._field_id != static_cast<jule::U64>(0LLU)) {
				(*this)._field_tokens = jule::alloc_for_append((*this)._field_tokens,1);(*this)._field_tokens.__push(_46821_token);
			}
		}
	_iter_next_1e80c6d79:;
	}
	_iter_end_1e80c6d79:;
}



inline jule::Str _212b08055_Lex::_method_id(jule::Slice<jule::U8>& _47722_ln) {
	if ((_47722_ln.len() == 0LL)) {
		return jule::Str();
	}
	jule::I32 _48114_r;
	jule::I64 _48121_i;
	std::tie(_48114_r,_48121_i) = _211214883_decode_rune(_47722_ln);
	if ((_48114_r != '_') && (!(_212aea3cc_is_letter(_48114_r)))) {
		return jule::Str();
	}
	while (_48121_i < static_cast<jule::I64>(_47722_ln.len())) {
		{
			jule::I32 _48718_pr;
			jule::I64 _48722_n;
			std::tie(_48718_pr,_48722_n) = _211214883_decode_rune(_47722_ln.slice(_48121_i));
			if (((_48718_pr != '_') && (!(_212aeaa5e_is_decimal(static_cast<jule::U8>(static_cast<jule::U8>(_48718_pr)))))) && (!(_212aea3cc_is_letter(_48718_pr)))) {
				(*this)._field_pos+=_48121_i;
				return static_cast<jule::Str>(_47722_ln.slice(0LL,_48121_i));
			}
			_48121_i+=_48722_n;
		}
	_iter_next_1e80ca4ba:;
	}
	_iter_end_1e80ca4ba:;
	(*this)._field_pos+=static_cast<jule::I64>(_47722_ln.len());
	return static_cast<jule::Str>(_47722_ln);
}



inline jule::Slice<jule::U8> _212b08055_Lex::_method_resume(void) {
	jule::I64 _50217_i = (*this)._field_pos;
	for (; _50217_i < static_cast<jule::I64>((*((*this)._field_file))._field_data.len()); (_50217_i)++) {
		{
			jule::I32 _50417_r = static_cast<jule::I32>((*((*this)._field_file))._field_data[_50217_i]);
			if (_212ae9d05_is_space(_50417_r)) {
				
				((*this)._field_pos)++;
				{
					auto &_match_expr{ _50417_r };
					
					if (_match_expr == '\n') {
						_case_begin_1e80d0404:;
						{
							(*this)._method_new_line();
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_1e80d05ad:;
						{
							(*this)._field_column+=8LL;
						}
					}
					else {
						_case_begin_1e80d038d:;
						{
							((*this)._field_column)++;
						}
					}
					_match_end_1e80d0338:;
				}
				goto _iter_next_1e80cd963;
			}
			jule::I64 _51621_j = _50217_i;
			for (; _51621_j < static_cast<jule::I64>((*((*this)._field_file))._field_data.len()); (_51621_j)++) {
				{
					if ((*((*this)._field_file))._field_data[_51621_j] == '\n') {
						goto _iter_end_1e80ce7ee;
					}
				}
			_iter_next_1e80ce7ee:;
			}
			_iter_end_1e80ce7ee:;
			return (*((*this)._field_file))._field_data.slice(_50217_i,_51621_j);
		}
	_iter_next_1e80cd963:;
	}
	_iter_end_1e80cd963:;
	return nullptr;
}



inline void _212b08055_Lex::_method_lex_line_comment(_212ae5c02_Token& _52840_token) {
	jule::I64 _52913_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < static_cast<jule::I64>((*((*this)._field_file))._field_data.len()); ((*this)._field_pos)++) {
		{
			jule::U8 _53317_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if ((_53317_r == '\n') || (_53317_r == '\r')) {
				if ((*this)._method_is_first_token_of_line()) {
					_52840_token._field_id=static_cast<jule::U64>(18LLU);
					_52840_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_52913_start,(*this)._field_pos));
				}
				return;
			}
		}
	_iter_next_1e80d367c:;
	}
	_iter_end_1e80d367c:;
	if ((*this)._method_is_first_token_of_line()) {
		_52840_token._field_id=static_cast<jule::U64>(18LLU);
		_52840_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_52913_start));
	}
}



inline void _212b08055_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < static_cast<jule::I64>((*((*this)._field_file))._field_data.len()); ((*this)._field_pos)++) {
		{
			jule::U8 _55217_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_55217_r == '\r') {
				goto _iter_next_1e80d72da;
			}
			if (_55217_r == '\n') {
				(*this)._method_new_line();
				goto _iter_next_1e80d72da;
			}
			(*this)._field_column+=1LL;
			if (((((*this)._field_pos + 1LL) < static_cast<jule::I64>((*((*this)._field_file))._field_data.len())) && (_55217_r == '*')) && ((*((*this)._field_file))._field_data[((*this)._field_pos + 1LL)] == '/')) {
				(*this)._field_column+=2LL;
				(*this)._field_pos+=2LL;
				return;
			}
		}
	_iter_next_1e80d72da:;
	}
	_iter_end_1e80d72da:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _212b08055_Lex::_method_num(jule::Slice<jule::U8>& _57323_txt) {
	jule::Str _57338_lit = jule::Str();
	if (_57323_txt[0LL] == '_') {
		_57338_lit = jule::Str();
		return _57338_lit;
	}
	_57338_lit=_212b0684a_hex_num(_57323_txt);
	if ((!(_57338_lit.empty()))) {
		goto _julec_label_end;
	}
	_57338_lit=_212b06619_octal_num(_57323_txt);
	if ((!(_57338_lit.empty()))) {
		goto _julec_label_end;
	}
	_57338_lit=_212b04925_binary_num(_57323_txt);
	if ((!(_57338_lit.empty()))) {
		goto _julec_label_end;
	}
	_57338_lit=_212b045c3_common_num(_57323_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_57338_lit.len());
	return _57338_lit;
}



inline jule::Str _212b08055_Lex::_method_escape_seq(jule::Slice<jule::U8>& _59530_txt) {
	jule::Str _59617_seq = jule::Str();
	if ((_59530_txt.len() < 2LL)) {
		goto _julec_label_end;
	}
	{
		auto &_match_expr{ _59530_txt[1LL] };
		
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_1e80e2724:;
			{
				(*this)._field_pos+=2LL;
				return static_cast<jule::Str>(_59530_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_1e80e2636:;
			{
				_59617_seq=_212b070dc_big_unicode_point_escape(_59530_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_1e80e2438:;
			{
				_59617_seq=_212b074d8_little_unicode_point_escape(_59530_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_1e80e249e:;
			{
				_59617_seq=_212b0787e_hex_byte_escape(_59530_txt);
			}
		}
		else {
			_case_begin_1e80e22c3:;
			{
				_59617_seq=_212b07bd1_byte_escape(_59530_txt);
			}
		}
		_match_end_1e80e226d:;
	}
	_julec_label_end:;
	if (_59617_seq.empty()) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	}
	(*this)._field_pos+=static_cast<jule::I64>(_59617_seq.len());
	return _59617_seq;
}



inline jule::Str _212b08055_Lex::_method_get_rune(jule::Slice<jule::U8>& _62928_txt,jule::Bool _62941_raw) {
	if ((!(_62941_raw)) && (_62928_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_62928_txt);
	}
	jule::I32 _63414_r;
	jule::I64 _63417_n;
	std::tie(_63414_r,_63417_n) = _211214883_decode_rune(_62928_txt);
	(*this)._field_pos+=_63417_n;
	return static_cast<jule::Str>(_63414_r);
}



inline jule::Str _212b08055_Lex::_method_lex_rune(jule::Slice<jule::U8>& _63928_txt) {
	jule::Str _64017_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::I64 _64217_n = 0LL;
	jule::I64 _64317_i = 1LL;
	for (; _64317_i < static_cast<jule::I64>(_63928_txt.len()); (_64317_i)++) {
		{
			if (_63928_txt[_64317_i] == '\r') {
				goto _iter_next_1e80e9a17;
			}
			if (_63928_txt[_64317_i] == '\n') {
				(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*this)._field_pos)++;
				(*this)._method_new_line();
				return jule::Str();
			}
			jule::Slice<jule::U8> _65517_part = _63928_txt.slice(_64317_i);
			jule::Str _65617_r = (*this)._method_get_rune(_65517_part,false);
			_64017_run+=_65617_r;
			(*this)._field_column+=static_cast<jule::I64>(_2112162be_rune_count_str(_65617_r));
			if ((_65617_r == jule::Str("'", 1))) {
				((*this)._field_pos)++;
				goto _iter_end_1e80e9a17;
			}
			if ((_65617_r.len() > 1LL)) {
				_64317_i+=static_cast<jule::I64>((static_cast<jule::I64>(_65617_r.len()) - 1LL));
			}
			(_64217_n)++;
		}
	_iter_next_1e80e9a17:;
	}
	_iter_end_1e80e9a17:;
	if ((_64217_n == 0LL)) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if ((_64217_n > 1LL)) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	}
	return _64017_run;
}



inline jule::Str _212b08055_Lex::_method_lex_str(void) {
	jule::Str _67917_s = jule::Str();
	jule::U8 _68013_mark = (*((*this)._field_file))._field_data[(*this)._field_pos];
	((*this)._field_pos)++;
	jule::Bool _68213_raw = _68013_mark == '`';
	_67917_s+=static_cast<jule::Str>(_68013_mark);
	((*this)._field_column)++;
	while ((*this)._field_pos < static_cast<jule::I64>((*((*this)._field_file))._field_data.len())) {
		{
			jule::U8 _68717_ch = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_68717_ch == '\r') {
				goto _iter_next_1b6e36ba4;
			}
			if (_68717_ch == '\n') {
				(*this)._method_new_line();
				if ((!(_68213_raw))) {
					(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*this)._field_pos)++;
					return jule::Str();
				}
			}
			jule::Slice<jule::U8> _69921_part = (*((*this)._field_file))._field_data.slice((*this)._field_pos);
			jule::Str _70017_r = (*this)._method_get_rune(_69921_part,_68213_raw);
			_67917_s+=_70017_r;
			(*this)._field_column+=static_cast<jule::I64>(_2112162be_rune_count_str(_70017_r));
			if (_68717_ch == _68013_mark) {
				goto _iter_end_1b6e36ba4;
			}
		}
	_iter_next_1b6e36ba4:;
	}
	_iter_end_1b6e36ba4:;
	return _67917_s;
}



inline jule::Bool _212b08055_Lex::_method_is_first_token_of_line(void) {
	return ((*this)._field_column == 1LL);
}



inline void _212b08055_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _212b08055_Lex::_method_is_op(jule::Slice<jule::U8>& _72025_txt,jule::Str _72038_kind,jule::U64 _72049_id,_212ae5c02_Token& _72067_t) {
	if ((!(_212b02516_bytes_has_prefix(_72025_txt,_72038_kind)))) {
		return false;
	}
	_72067_t._field_kind=_72038_kind;
	_72067_t._field_id=_72049_id;
	(*this)._field_pos+=static_cast<jule::I64>(_72038_kind.len());
	return true;
}



inline jule::Bool _212b08055_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _73132_txt,_212ae5c02_Token& _73150_tok) {
	{
		auto &expr = _212b01aa9_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_1b6e3e360:;
		if (it != expr.end()) {
			_212b01317_KindPair &_1b6e3e470_pair = *it;
			{
				if ((*this)._method_is_op(_73132_txt,_1b6e3e470_pair._field_kind,_1b6e3e470_pair._field_id,_73150_tok)) {
					return true;
				}
			}
			_iter_next_1b6e3e360:;
			++it;
			goto _iter_begin_1b6e3e360;
		}
		_iter_end_1b6e3e360:;
	}
	return false;
}



inline jule::Bool _212b08055_Lex::_method_lex_id(jule::Slice<jule::U8>& _74126_txt,_212ae5c02_Token& _74144_t) {
	jule::Str _74213_lex = (*this)._method_id(_74126_txt);
	if (_74213_lex.empty()) {
		return false;
	}
	_74144_t._field_kind=_74213_lex;
	_74144_t._field_id=static_cast<jule::U64>(2LLU);
	return true;
}



inline jule::Bool _212b08055_Lex::_method_lex_num(jule::Slice<jule::U8>& _75227_txt,_212ae5c02_Token& _75245_t) {
	jule::Str _75313_lex = (*this)._method_num(_75227_txt);
	if (_75313_lex.empty()) {
		return false;
	}
	_75245_t._field_kind=_75313_lex;
	_75245_t._field_id=static_cast<jule::U64>(6LLU);
	return true;
}



inline _212ae5c02_Token _212b08055_Lex::_method_token(void) {
	_212ae5c02_Token _76517_t = _212ae5c02_Token((*this)._field_file,jule::I64(),jule::I64(),jule::Str(),static_cast<jule::U64>(0LLU));
	jule::Slice<jule::U8> _76713_txt = (*this)._method_resume();
	if ((_76713_txt == nullptr)) {
		return _76517_t;
	}
	_76517_t._field_column=(*this)._field_column;
	_76517_t._field_row=(*this)._field_row;
	{
		
		if ((*this)._method_lex_num(_76713_txt,_76517_t)) {
			_case_begin_1b6e464bb:;
		}
		else if (_76713_txt[0LL] == '\'') {
			_case_begin_1b6e458b6:;
			{
				_76517_t._field_kind=(*this)._method_lex_rune(_76713_txt);
				_76517_t._field_id=static_cast<jule::U64>(6LLU);
				return _76517_t;
			}
		}
		else if ((_76713_txt[0LL] == '\"') || (_76713_txt[0LL] == '`')) {
			_case_begin_1b6e4592c:;
			{
				_76517_t._field_kind=(*this)._method_lex_str();
				_76517_t._field_id=static_cast<jule::U64>(6LLU);
				return _76517_t;
			}
		}
		else if (_212b02516_bytes_has_prefix(_76713_txt,jule::Str("//", 2))) {
			_case_begin_1b6e45993:;
			{
				(*this)._method_lex_line_comment(_76517_t);
				return _76517_t;
			}
		}
		else if (_212b02516_bytes_has_prefix(_76713_txt,jule::Str("/*", 2))) {
			_case_begin_1b6e45a09:;
			{
				(*this)._method_lex_range_comment();
				return _76517_t;
			}
		}
		else if ((*this)._method_is_op(_76713_txt,jule::Str("(", 1),static_cast<jule::U64>(3LLU),_76517_t) || (*this)._method_is_op(_76713_txt,jule::Str(")", 1),static_cast<jule::U64>(3LLU),_76517_t) || (*this)._method_is_op(_76713_txt,jule::Str("{", 1),static_cast<jule::U64>(3LLU),_76517_t) || (*this)._method_is_op(_76713_txt,jule::Str("}", 1),static_cast<jule::U64>(3LLU),_76517_t) || (*this)._method_is_op(_76713_txt,jule::Str("[", 1),static_cast<jule::U64>(3LLU),_76517_t) || (*this)._method_is_op(_76713_txt,jule::Str("]", 1),static_cast<jule::U64>(3LLU),_76517_t) || (*this)._method_lex_basic_ops(_76713_txt,_76517_t)) {
			_case_begin_1b6e46eb1:;
		}
		else if ((*this)._method_lex_id(_76713_txt,_76517_t)) {
			_case_begin_1b6e47027:;
			{
				{
					auto &expr = _212b01856_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_1b6e4e040:;
					if (it != expr.end()) {
						_212b01317_KindPair &_1b6e4e408_pair = *it;
						{
							if (_1b6e4e408_pair._field_kind == _76517_t._field_kind) {
								_76517_t._field_id=_1b6e4e408_pair._field_id;
								goto _iter_end_1b6e4e040;
							}
						}
						_iter_next_1b6e4e040:;
						++it;
						goto _iter_begin_1b6e4e040;
					}
					_iter_end_1b6e4e040:;
				}
			}
		}
		else {
			_case_begin_1b6e44e6a:;
			{
				jule::I32 _81718_r;
				jule::I64 _81721_sz;
				std::tie(_81718_r,_81721_sz) = _211214883_decode_rune(_76713_txt);
				(*this)._method_push_err(jule::Str("undefined token: @", 18),jule::Slice<jule::Any>({jule::Any(_81718_r)}));
				((*this)._field_column)++;
				(*this)._field_pos+=_81721_sz;
				return _76517_t;
			}
		}
		_match_end_1b6e44e15:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_2112162be_rune_count_str(_76517_t._field_kind));
	return _76517_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b08055_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2129e26e2_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2129e3072_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _21298e309_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b14182_SptrTypeDecl &_Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b145c2_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b14a12_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b14e52_PtrTypeDecl::_method_is_unsafe(void) {
	return ((*this)._field_elem == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b14e52_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b15392_ArrTypeDecl::_method_auto_sized(void) {
	return ((*this)._field_size == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b15392_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b157d2_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b15c22_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b169e2_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b189c2_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1a562_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1e555_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b22b85_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b26705_Impl::_method_is_trait_impl(void) {
	return ((*this)._field_base != nullptr);
}



inline jule::Bool _212b26705_Impl::_method_is_struct_impl(void) {
	return ((*this)._field_base == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b26705_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _21313d9a8_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _21318843c_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e7653d74_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _1e765489c_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _1e765489c_ScopeParser::_method_stopped(void) {
	return ((*this)._field_pos == -1LL);
}



inline jule::Bool _1e765489c_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= static_cast<jule::I64>((*this)._field_stmts.len());
}



inline jule::Bool _1e765489c_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= static_cast<jule::I64>((*this)._field_stmts.len());
}



inline void _1e765489c_ScopeParser::_method_push_err(_212ae5c02_Token _18827_token,jule::Str _18841_fmt) {
	(*((*this)._field_p))._method_push_err(_18827_token,_18841_fmt,jule::Slice<jule::Any>());
}



inline void _1e765489c_ScopeParser::_method_push_suggestion(jule::Str _19334_fmt,jule::Slice<jule::Any> _19347_args) {
	(*((*this)._field_p))._method_push_suggestion(_19334_fmt,_19347_args);
}



inline void _1e765489c_ScopeParser::_method_insert_as_next(jule::Slice<_212ae5c02_Token>& _19738_tokens) {
	(*this)._field_stmts=jule::append((*this)._field_stmts.slice(0LL,((*this)._field_pos + 1LL)),(*this)._field_stmts.slice((*this)._field_pos));
	(*this)._field_stmts[((*this)._field_pos + 1LL)]=jule::new_struct<_1e7653d74_Stmt>(new( std::nothrow ) _1e7653d74_Stmt(_19738_tokens,jule::Bool()));
}



inline jule::Ptr<_1e7653d74_Stmt> _1e765489c_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stmts[(*this)._field_pos];
}



inline jule::Ptr<_212b1e555_ScopeTree> _1e765489c_ScopeParser::_method_build_scope(jule::Slice<_212ae5c02_Token>& _20735_tokens) {
	jule::Ptr<_212b1e555_ScopeTree> _20817_s = _1e76528ab_new_scope();
	(*(_20817_s))._field_parent=(*this)._field_s;
	_1e765489c_ScopeParser _21017_ssp = _1e765489c_ScopeParser((*this)._field_p,jule::Ptr<_212b1e555_ScopeTree>(),jule::Slice<jule::Ptr<_1e7653d74_Stmt>>(),jule::I64());
	_21017_ssp._method_build(_20735_tokens,_20817_s);
	return _20817_s;
}



inline jule::Any _1e765489c_ScopeParser::_method_build_var_st(jule::Slice<_212ae5c02_Token>& _21736_tokens) {
	jule::Ptr<_212b20325_VarDecl> _21817_v = (*((*this)._field_p))._method_build_var(_21736_tokens);
	(*(_21817_v))._field_scope=(*this)._field_s;
	return jule::Any(_21817_v);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_ret_st(jule::Slice<_212ae5c02_Token> _22335_tokens) {
	jule::Ptr<_212b20765_RetSt> _22417_st = jule::new_struct<_212b20765_RetSt>(new( std::nothrow ) _212b20765_RetSt(_22335_tokens[0LL],jule::Ptr<_212b16162_Expr>()));
	if ((_22335_tokens.len() > 1LL)) {
		_22335_tokens=_22335_tokens.slice(1LL);
		(*(_22417_st))._field_expr=(*((*this)._field_p))._method_build_expr(_22335_tokens);
	}
	return jule::Any(_22417_st);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_while_next_iter(jule::Ptr<_1e7653d74_Stmt>& _23445_s) {
	jule::Ptr<_212b20ba5_Iter> _23517_it = jule::new_struct<_212b20ba5_Iter>(new( std::nothrow ) _212b20ba5_Iter((*(_23445_s))._field_tokens[0LL],jule::Any(),jule::Ptr<_212b1e555_ScopeTree>()));
	jule::Slice<_212ae5c02_Token> _23817_tokens = (*(_23445_s))._field_tokens.slice(1LL);
	jule::Ptr<_212b210e5_WhileKind> _23917_kind = jule::new_struct<_212b210e5_WhileKind>(new( std::nothrow ) _212b210e5_WhileKind());
	if ((_23817_tokens.len() > 0LL)) {
		(*(_23917_kind))._field_expr=(*((*this)._field_p))._method_build_expr(_23817_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err((*(_23517_it))._field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_23817_tokens=(*((*this)._method_next()))._field_tokens;
	jule::Slice<_212ae5c02_Token> _25117_st_tokens = _1e7665dca_get_block_expr(_23817_tokens);
	if ((_25117_st_tokens.len() > 0LL)) {
		jule::Ptr<_1e7653d74_Stmt> _25321_stmt = jule::new_struct<_1e7653d74_Stmt>(new( std::nothrow ) _1e7653d74_Stmt(_25117_st_tokens,(*(_23445_s))._field_terminated));
		(*(_23917_kind))._field_next_token=_25117_st_tokens[0LL];
		(*(_23917_kind))._field_next=(*this)._method_build_st(_25321_stmt);
	}
	jule::I64 _26117_i = _25117_st_tokens.len();
	jule::Slice<_212ae5c02_Token> _26217_block_tokens = _1e767874a_range(_26117_i,jule::Str("{", 1),jule::Str("}", 1),_23817_tokens);
	if ((_26217_block_tokens == nullptr)) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_23517_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_26117_i < static_cast<jule::I64>(_23817_tokens.len())) {
		(*this)._method_push_err(_23817_tokens[_26117_i],jule::Str("invalid syntax", 14));
	}
	(*(_23517_it))._field_scope=(*this)._method_build_scope(_26217_block_tokens);
	(*(_23517_it))._field_kind=jule::Any(_23917_kind);
	return jule::Any(_23517_it);
}



inline jule::Ptr<_212b210e5_WhileKind> _1e765489c_ScopeParser::_method_build_while_iter_kind(jule::Slice<_212ae5c02_Token>& _27945_tokens) {
	return jule::new_struct<_212b210e5_WhileKind>(new( std::nothrow ) _212b210e5_WhileKind((*((*this)._field_p))._method_build_expr(_27945_tokens),jule::Any(),_212ae5c02_Token()));
}



inline jule::Slice<jule::Slice<_212ae5c02_Token>> _1e765489c_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_212ae5c02_Token>& _28550_toks) {
	jule::Slice<jule::Slice<_212ae5c02_Token>> _28618_vars;
	jule::Slice<_21287ea02_Log> _28624_errs;
	std::tie(_28618_vars,_28624_errs) = _1e76797b2_parts(_28550_toks,static_cast<jule::U64>(8LLU),true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_28624_errs);
	return _28618_vars;
}



inline jule::Ptr<_212b20325_VarDecl> _1e765489c_ScopeParser::_method_build_range_kind_key(jule::Slice<_212ae5c02_Token>& _29144_tokens) {
	if ((_29144_tokens.len() == 0LL)) {
		return nullptr;
	}
	jule::Ptr<_212b20325_VarDecl> _29517_key = jule::new_struct<_212b20325_VarDecl>(new( std::nothrow ) _212b20325_VarDecl(jule::Ptr<_212b1e555_ScopeTree>(),_29144_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_2129e3072_CommentGroup>(),jule::Ptr<_2129e3d42_TypeDecl>(),jule::Ptr<_212b16162_Expr>()));
	if ((*(_29517_key))._field_token._field_id == static_cast<jule::U64>(36LLU)) {
		(*(_29517_key))._field_mutable=true;
		if ((_29144_tokens.len() == 1LL)) {
			(*this)._method_push_err((*(_29517_key))._field_token,jule::Str("invalid syntax", 14));
		}
		(*(_29517_key))._field_token=_29144_tokens[1LL];
	} else if ((_29144_tokens.len() > 1LL)) {
		(*this)._method_push_err(_29144_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if ((*(_29517_key))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*this)._method_push_err((*(_29517_key))._field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_29517_key))._field_ident=(*(_29517_key))._field_token._field_kind;
	return _29517_key;
}



inline jule::Slice<jule::Ptr<_212b20325_VarDecl>> _1e765489c_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_212ae5c02_Token>>& _31645_parts) {
	jule::Slice<jule::Ptr<_212b20325_VarDecl>> _31717_keys = nullptr;
	{
		auto &expr = _31645_parts;
		auto it = expr.begin();
		_iter_begin_1b706c9ee:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b706ca76_tokens = *it;
			{
				_31717_keys = jule::alloc_for_append(_31717_keys,1);_31717_keys.__push((*this)._method_build_range_kind_key(_1b706ca76_tokens));
			}
			_iter_next_1b706c9ee:;
			++it;
			goto _iter_begin_1b706c9ee;
		}
		_iter_end_1b706c9ee:;
	}
	return _31717_keys;
}



inline void _1e765489c_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ptr<_212b21535_RangeKind>& _32451_rng,jule::Slice<_212ae5c02_Token>& _32473_tokens) {
	jule::Slice<jule::Slice<_212ae5c02_Token>> _32517_key_tokens = (*this)._method_get_range_kind_keys_tokens(_32473_tokens);
	if ((_32517_key_tokens.len() == 0LL)) {
		return;
	}
	if ((_32517_key_tokens.len() > 2LL)) {
		(*this)._method_push_err((*(_32451_rng))._field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ptr<_212b20325_VarDecl>> _33217_keys = (*this)._method_build_range_kind_keys(_32517_key_tokens);
	(*(_32451_rng))._field_key_a=_33217_keys[0LL];
	if ((_33217_keys.len() > 1LL)) {
		(*(_32451_rng))._field_key_b=_33217_keys[1LL];
	}
}



inline void _1e765489c_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ptr<_212b21535_RangeKind>& _33954_rng,jule::Slice<_212ae5c02_Token>& _33976_tokens) {
	jule::I64 _34017_i = 0LL;
	jule::Slice<_212ae5c02_Token> _34117_rang = _1e767874a_range(_34017_i,jule::Str("(", 1),jule::Str(")", 1),_33976_tokens);
	if (_34017_i < static_cast<jule::I64>(_33976_tokens.len())) {
		(*this)._method_push_err((*(_33954_rng))._field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_33954_rng,_34117_rang);
}



inline void _1e765489c_ScopeParser::_method_setup_range_kind_keys(jule::Ptr<_212b21535_RangeKind>& _34845_rng,jule::Slice<_212ae5c02_Token>& _34867_tokens) {
	if (_34867_tokens[0LL]._field_id == static_cast<jule::U64>(3LLU)) {
		if ((_34867_tokens[0LL]._field_kind != jule::Str("(", 1))) {
			(*this)._method_push_err(_34867_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_34845_rng,_34867_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_34845_rng,_34867_tokens);
}



inline jule::Ptr<_212b21535_RangeKind> _1e765489c_ScopeParser::_method_build_range_iter_kind(jule::Slice<_212ae5c02_Token>& _36045_var_tokens,jule::Slice<_212ae5c02_Token>& _36114_expr_tokens,_212ae5c02_Token& _36141_in_token) {
	jule::Ptr<_212b21535_RangeKind> _36217_rng = jule::new_struct<_212b21535_RangeKind>(new( std::nothrow ) _212b21535_RangeKind(_36141_in_token,jule::Ptr<_212b16162_Expr>(),jule::Ptr<_212b20325_VarDecl>(),jule::Ptr<_212b20325_VarDecl>()));
	if ((_36114_expr_tokens.len() == 0LL)) {
		(*this)._method_push_err((*(_36217_rng))._field_in_token,jule::Str("expression missing", 18));
		return _36217_rng;
	}
	(*(_36217_rng))._field_expr=(*((*this)._field_p))._method_build_expr(_36114_expr_tokens);
	if ((_36045_var_tokens.len() > 0LL)) {
		(*this)._method_setup_range_kind_keys(_36217_rng,_36045_var_tokens);
	}
	return _36217_rng;
}



inline jule::Any _1e765489c_ScopeParser::_method_build_common_iter_kind(jule::Slice<_212ae5c02_Token>& _37646_tokens,_212ae5c02_Token& _37664_err_tok) {
	jule::I64 _37717_brace_n = 0LL;
	{
		auto &expr = _37646_tokens;
		auto it = expr.begin();
		_iter_begin_1b707bd1b:;
		if (it != expr.end()) {
			jule::I64 _1b707be3c_i = it - expr.begin();
			_212ae5c02_Token _1b707c190_tok = *it;
			{
				if (_1b707c190_tok._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b707c190_tok._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b707d3c2:;
							{
								(_37717_brace_n)++;
								goto _iter_next_1b707bd1b;
							}
						}
						else {
							_case_begin_1b707cab9:;
							{
								(_37717_brace_n)--;
							}
						}
						_match_end_1b707cb41:;
					}
				}
				if ((_37717_brace_n != 0LL)) {
					goto _iter_next_1b707bd1b;
				}
				{
					auto &_match_expr{ _1b707c190_tok._field_id };
					
					if (_match_expr == static_cast<jule::U64>(15LLU)) {
						_case_begin_1b707dbec:;
						{
							jule::Slice<_212ae5c02_Token> _39525_decl_tokens = _37646_tokens.slice(0LL,_1b707be3c_i);
							jule::Slice<_212ae5c02_Token> _39625_expr_tokens = _37646_tokens.slice((_1b707be3c_i + 1LL));
							return jule::Any((*this)._method_build_range_iter_kind(_39525_decl_tokens,_39625_expr_tokens,_1b707c190_tok));
						}
					}
					_match_end_1b707da54:;
				}
			}
			_iter_next_1b707bd1b:;
			++it;
			_1b707be3c_i++;
			goto _iter_begin_1b707bd1b;
		}
		_iter_end_1b707bd1b:;
	}
	return jule::Any((*this)._method_build_while_iter_kind(_37646_tokens));
}



inline jule::Any _1e765489c_ScopeParser::_method_build_common_iter(jule::Slice<_212ae5c02_Token> _40340_tokens) {
	jule::Ptr<_212b20ba5_Iter> _40417_it = jule::new_struct<_212b20ba5_Iter>(new( std::nothrow ) _212b20ba5_Iter(_40340_tokens[0LL],jule::Any(),jule::Ptr<_212b1e555_ScopeTree>()));
	_40340_tokens=_40340_tokens.slice(1LL);
	if ((_40340_tokens.len() == 0LL)) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_40417_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	jule::Slice<_212ae5c02_Token> _41417_expr_tokens = _1e7665dca_get_block_expr(_40340_tokens);
	if ((_41417_expr_tokens.len() > 0LL)) {
		(*(_40417_it))._field_kind=(*this)._method_build_common_iter_kind(_41417_expr_tokens,(*(_40417_it))._field_token);
	}
	jule::I64 _41817_i = _41417_expr_tokens.len();
	jule::Slice<_212ae5c02_Token> _41917_scope_tokens = _1e767874a_range(_41817_i,jule::Str("{", 1),jule::Str("}", 1),_40340_tokens);
	if ((_41917_scope_tokens == nullptr)) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_40417_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_41817_i < static_cast<jule::I64>(_40340_tokens.len())) {
		(*this)._method_push_err(_40340_tokens[_41817_i],jule::Str("invalid syntax", 14));
	}
	(*(_40417_it))._field_scope=(*this)._method_build_scope(_41917_scope_tokens);
	return jule::Any(_40417_it);
}



inline jule::Any _1e765489c_ScopeParser::_method_buid_iter_st(jule::Ptr<_1e7653d74_Stmt>& _43336_st) {
	if ((*(_43336_st))._field_terminated) {
		return (*this)._method_build_while_next_iter(_43336_st);
	}
	return (*this)._method_build_common_iter((*(_43336_st))._field_tokens);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_break_st(jule::Slice<_212ae5c02_Token>& _44038_tokens) {
	jule::Ptr<_212b21975_BreakSt> _44117_brk = jule::new_struct<_212b21975_BreakSt>(new( std::nothrow ) _212b21975_BreakSt(_44038_tokens[0LL],_212ae5c02_Token()));
	if ((_44038_tokens.len() > 1LL)) {
		if (_44038_tokens[1LL]._field_id != static_cast<jule::U64>(2LLU)) {
			(*this)._method_push_err(_44038_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_44117_brk))._field_label=_44038_tokens[1LL];
			if ((_44038_tokens.len() > 2LL)) {
				(*this)._method_push_err(_44038_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_44117_brk);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_cont_st(jule::Slice<_212ae5c02_Token>& _45837_tokens) {
	jule::Ptr<_212b21db5_ContSt> _45917_cont = jule::new_struct<_212b21db5_ContSt>(new( std::nothrow ) _212b21db5_ContSt(_45837_tokens[0LL],_212ae5c02_Token()));
	if ((_45837_tokens.len() > 1LL)) {
		if (_45837_tokens[1LL]._field_id != static_cast<jule::U64>(2LLU)) {
			(*this)._method_push_err(_45837_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_45917_cont))._field_label=_45837_tokens[1LL];
			if ((_45837_tokens.len() > 2LL)) {
				(*this)._method_push_err(_45837_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_45917_cont);
}



inline jule::Ptr<_212b22305_If> _1e765489c_ScopeParser::_method_build_if(jule::Slice<_212ae5c02_Token>& _47632_tokens) {
	jule::Ptr<_212b22305_If> _47717_model = jule::new_struct<_212b22305_If>(new( std::nothrow ) _212b22305_If(_47632_tokens[0LL],jule::Ptr<_212b16162_Expr>(),jule::Ptr<_212b1e555_ScopeTree>()));
	_47632_tokens=_47632_tokens.slice(1LL);
	jule::Slice<_212ae5c02_Token> _48117_expr_tokens = _1e7665dca_get_block_expr(_47632_tokens);
	jule::I64 _48217_i = 0LL;
	if ((_48117_expr_tokens.len() == 0LL)) {
		(*this)._method_push_err((*(_47717_model))._field_token,jule::Str("expression missing", 18));
	} else {
		_48217_i=static_cast<jule::I64>(_48117_expr_tokens.len());
	}
	jule::Slice<_212ae5c02_Token> _48817_scope_tokens = _1e767874a_range(_48217_i,jule::Str("{", 1),jule::Str("}", 1),_47632_tokens);
	if ((_48817_scope_tokens == nullptr)) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_47717_model))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_48217_i < static_cast<jule::I64>(_47632_tokens.len())) {
		if (_47632_tokens[_48217_i]._field_id == static_cast<jule::U64>(17LLU)) {
			_47632_tokens=_47632_tokens.slice(_48217_i);
		} else {
			(*this)._method_push_err(_47632_tokens[_48217_i],jule::Str("invalid syntax", 14));
			_47632_tokens=nullptr;
		}
	}
	(*(_47717_model))._field_expr=(*((*this)._field_p))._method_build_expr(_48117_expr_tokens);
	(*(_47717_model))._field_scope=(*this)._method_build_scope(_48817_scope_tokens);
	return _47717_model;
}



inline jule::Ptr<_212b22745_Else> _1e765489c_ScopeParser::_method_build_else(jule::Slice<_212ae5c02_Token>& _50834_tokens) {
	jule::Ptr<_212b22745_Else> _50917_els = jule::new_struct<_212b22745_Else>(new( std::nothrow ) _212b22745_Else(_50834_tokens[0LL],jule::Ptr<_212b1e555_ScopeTree>()));
	_50834_tokens=_50834_tokens.slice(1LL);
	jule::I64 _51317_i = 0LL;
	jule::Slice<_212ae5c02_Token> _51417_scope_tokens = _1e767874a_range(_51317_i,jule::Str("{", 1),jule::Str("}", 1),_50834_tokens);
	if ((_51417_scope_tokens == nullptr)) {
		if (_51317_i < static_cast<jule::I64>(_50834_tokens.len())) {
			(*this)._method_push_err((*(_50917_els))._field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err((*(_50917_els))._field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	if (_51317_i < static_cast<jule::I64>(_50834_tokens.len())) {
		(*this)._method_push_err(_50834_tokens[_51317_i],jule::Str("invalid syntax", 14));
	}
	(*(_50917_els))._field_scope=(*this)._method_build_scope(_51417_scope_tokens);
	return _50917_els;
}



inline jule::Any _1e765489c_ScopeParser::_method_build_if_else_chain(jule::Slice<_212ae5c02_Token> _53242_tokens) {
	jule::Ptr<_212b22b85_Conditional> _53317_chain = jule::new_struct<_212b22b85_Conditional>(new( std::nothrow ) _212b22b85_Conditional((*this)._method_build_if(_53242_tokens),jule::Slice<jule::Ptr<_212b22305_If>>(),jule::Ptr<_212b22745_Else>()));
	if (((*(_53317_chain))._field_head == nullptr)) {
		return jule::Any(nullptr);
	}
	while ((_53242_tokens.len() != 0LL)) {
		{
			if (_53242_tokens[0LL]._field_id != static_cast<jule::U64>(17LLU)) {
				goto _iter_end_1b70a4eed;
			}
			if ((_53242_tokens.len() > 1LL) && (_53242_tokens[1LL]._field_id == static_cast<jule::U64>(16LLU))) {
				_53242_tokens=_53242_tokens.slice(1LL);
				jule::Ptr<_212b22305_If> _54525_elif = (*this)._method_build_if(_53242_tokens);
				(*(_53317_chain))._field_tail = jule::alloc_for_append((*(_53317_chain))._field_tail,1);(*(_53317_chain))._field_tail.__push(_54525_elif);
				goto _iter_next_1b70a4eed;
			}
			(*(_53317_chain))._field_default=(*this)._method_build_else(_53242_tokens);
			goto _iter_end_1b70a4eed;
		}
	_iter_next_1b70a4eed:;
	}
	_iter_end_1b70a4eed:;
	return jule::Any(_53317_chain);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_comment_st(_212ae5c02_Token& _55536_token) {
	return jule::Any(_1e767aa9e_build_comment(_55536_token));
}



inline jule::Any _1e765489c_ScopeParser::_method_build_co_call_st(jule::Slice<_212ae5c02_Token> _55939_tokens) {
	jule::Ptr<_212b177b2_CoExpr> _56017_c = jule::new_struct<_212b177b2_CoExpr>(new( std::nothrow ) _212b177b2_CoExpr(_55939_tokens[0LL],jule::Ptr<_212b16162_Expr>()));
	_55939_tokens=_55939_tokens.slice(1LL);
	(*(_56017_c))._field_expr=(*((*this)._field_p))._method_build_expr(_55939_tokens);
	return jule::Any(_56017_c);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_goto_st(jule::Slice<_212ae5c02_Token>& _56837_tokens) {
	jule::Ptr<_212b1d345_GotoSt> _56917_gt = jule::new_struct<_212b1d345_GotoSt>(new( std::nothrow ) _212b1d345_GotoSt(_56837_tokens[0LL],_212ae5c02_Token()));
	if ((_56837_tokens.len() == 1LL)) {
		(*this)._method_push_err((*(_56917_gt))._field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if ((_56837_tokens.len() > 2LL)) {
		(*this)._method_push_err(_56837_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_212ae5c02_Token _57817_ident_token = _56837_tokens[1LL];
	if (_57817_ident_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*this)._method_push_err(_57817_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return jule::Any(_56917_gt);
	}
	(*(_56917_gt))._field_label=_57817_ident_token;
	return jule::Any(_56917_gt);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_fall_st(jule::Slice<_212ae5c02_Token>& _58837_tokens) {
	jule::Ptr<_212b1d785_FallSt> _58917_fll = jule::new_struct<_212b1d785_FallSt>(new( std::nothrow ) _212b1d785_FallSt(_58837_tokens[0LL]));
	if ((_58837_tokens.len() > 1LL)) {
		(*this)._method_push_err(_58837_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_58917_fll);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_type_alias_st(jule::Slice<_212ae5c02_Token>& _59843_tokens) {
	jule::Ptr<_212b230c5_TypeAliasDecl> _59917_tad = (*((*this)._field_p))._method_build_type_alias_decl(_59843_tokens);
	(*(_59917_tad))._field_scope=(*this)._field_s;
	return jule::Any(_59917_tad);
}



inline void _1e765489c_ScopeParser::_method_push_case_expr(jule::Slice<_212ae5c02_Token> _60437_tokens,_212ae5c02_Token _60458_token,jule::Bool _6059_type_match,jule::Slice<jule::Ptr<_212b16162_Expr>>& _60532_exprs) {
	if ((_60437_tokens.len() == 0LL)) {
		return;
	}
	if (_6059_type_match) {
		jule::I64 _61121_i = 0LL;
		jule::Ptr<_2129e3d42_TypeDecl> _61222_t;
		jule::Bool _61225_ok;
		std::tie(_61222_t,_61225_ok) = (*((*this)._field_p))._method_build_type(_60437_tokens,(&(_61121_i)),true);
		if (_61225_ok) {
			_60532_exprs = jule::alloc_for_append(_60532_exprs,1);_60532_exprs.__push(jule::new_struct<_212b16162_Expr>(new( std::nothrow ) _212b16162_Expr(_60458_token,jule::Any(_61222_t))));
			if (_61121_i < static_cast<jule::I64>(_60437_tokens.len())) {
				(*this)._method_push_err(_60437_tokens[_61121_i],jule::Str("invalid syntax", 14));
			}
		}
		return;
	}
	_60532_exprs = jule::alloc_for_append(_60532_exprs,1);_60532_exprs.__push((*((*this)._field_p))._method_build_expr(_60437_tokens));
}



inline jule::Slice<jule::Ptr<_212b16162_Expr>> _1e765489c_ScopeParser::_method_build_case_exprs(jule::Slice<_212ae5c02_Token>& _62740_tokens,jule::Bool _62757_type_match) {
	jule::Slice<jule::Ptr<_212b16162_Expr>> _62817_exprs = jule::Slice<jule::Ptr<_212b16162_Expr>>::alloc(0LL,1LL);
	jule::I64 _63017_brace_n = 0LL;
	jule::I64 _63117_j = 0LL;
	{
		auto &expr = _62740_tokens;
		auto it = expr.begin();
		_iter_begin_1b70bac39:;
		if (it != expr.end()) {
			jule::I64 _1b70bac8e_i = it - expr.begin();
			_212ae5c02_Token _1b70bb003_tok = *it;
			{
				if (_1b70bb003_tok._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b70bb003_tok._field_kind };
						
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_1b70bc246:;
							{
								(_63017_brace_n)++;
							}
						}
						else {
							_case_begin_1b70bb93d:;
							{
								(_63017_brace_n)--;
							}
						}
						_match_end_1b70bb9b5:;
					}
					goto _iter_next_1b70bac39;
				} else if ((_63017_brace_n != 0LL)) {
					goto _iter_next_1b70bac39;
				}
				{
					
					if ((_1b70bb003_tok._field_id == static_cast<jule::U64>(7LLU)) && (_1b70bb003_tok._field_kind == jule::Str("|", 1))) {
						_case_begin_1b70bc9e9:;
						{
							jule::Slice<_212ae5c02_Token> _64821_expr_tokens = _62740_tokens.slice(_63117_j,_1b70bac8e_i);
							if ((_64821_expr_tokens.len() == 0LL)) {
								(*this)._method_push_err(_1b70bb003_tok,jule::Str("expression missing", 18));
							} else {
								(*this)._method_push_case_expr(_62740_tokens.slice(_63117_j,_1b70bac8e_i),_1b70bb003_tok,_62757_type_match,_62817_exprs);
							}
							_63117_j=static_cast<jule::I64>((_1b70bac8e_i + 1LL));
						}
					}
					else if (_1b70bb003_tok._field_id == static_cast<jule::U64>(11LLU)) {
						_case_begin_1b70bca60:;
						{
							(*this)._method_push_case_expr(_62740_tokens.slice(_63117_j,_1b70bac8e_i),_1b70bb003_tok,_62757_type_match,_62817_exprs);
							_62740_tokens=_62740_tokens.slice((_1b70bac8e_i + 1LL));
							return _62817_exprs;
						}
					}
					_match_end_1b70bc8a6:;
				}
			}
			_iter_next_1b70bac39:;
			++it;
			_1b70bac8e_i++;
			goto _iter_begin_1b70bac39;
		}
		_iter_end_1b70bac39:;
	}
	(*this)._method_push_err(_62740_tokens[0LL],jule::Str("invalid syntax", 14));
	_62740_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_212b1e555_ScopeTree> _1e765489c_ScopeParser::_method_build_case_scope(jule::Slice<_212ae5c02_Token>& _66640_tokens) {
	jule::I64 _66717_n = 0LL;
	for (;;) {
		{
			jule::I64 _66921_i = 0LL;
			jule::Slice<_212ae5c02_Token> _67022_next;
			std::tie(_67022_next,std::ignore) = _1e76538ce_skip_st(_66921_i,_66640_tokens.slice(_66717_n));
			if ((_67022_next.len() == 0LL)) {
				goto _iter_end_1b70c26be;
			}
			_212ae5c02_Token _67417_tok = _67022_next[0LL];
			if ((_67417_tok._field_id != static_cast<jule::U64>(7LLU)) || (_67417_tok._field_kind != jule::Str("|", 1))) {
				_66717_n+=_66921_i;
				goto _iter_next_1b70c26be;
			}
			jule::Slice<_212ae5c02_Token> _67921_scope_tokens = _66640_tokens.slice(0LL,_66717_n);
			jule::Ptr<_212b1e555_ScopeTree> _68021_scope = (*this)._method_build_scope(_67921_scope_tokens);
			_66640_tokens=_66640_tokens.slice(_66717_n);
			return _68021_scope;
		}
	_iter_next_1b70c26be:;
	}
	_iter_end_1b70c26be:;
	jule::Ptr<_212b1e555_ScopeTree> _68417_scope = (*this)._method_build_scope(_66640_tokens);
	_66640_tokens=nullptr;
	return _68417_scope;
}



inline std::tuple<jule::Ptr<_212b23515_Case>,jule::Bool> _1e765489c_ScopeParser::_method_build_case(jule::Slice<_212ae5c02_Token>& _68934_tokens,jule::Bool _68951_type_match) {
	jule::Ptr<_212b23515_Case> _69017_c = jule::new_struct<_212b23515_Case>(new( std::nothrow ) _212b23515_Case(_68934_tokens[0LL],jule::Ptr<_212b1e555_ScopeTree>(),jule::Slice<jule::Ptr<_212b16162_Expr>>()));
	_68934_tokens=_68934_tokens.slice(1LL);
	(*(_69017_c))._field_exprs=(*this)._method_build_case_exprs(_68934_tokens,_68951_type_match);
	(*(_69017_c))._field_scope=(*this)._method_build_case_scope(_68934_tokens);
	jule::Bool _69613_is_default = ((*(_69017_c))._field_exprs.len() == 0LL);
	return std::make_tuple(_69017_c,_69613_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_212b23515_Case>>,jule::Ptr<_212b22745_Else>> _1e765489c_ScopeParser::_method_build_cases(jule::Slice<_212ae5c02_Token> _70034_tokens,jule::Bool _70051_type_match) {
	jule::Slice<jule::Ptr<_212b23515_Case>> _70117_cases = nullptr;
	jule::Ptr<_212b22745_Else> _70217_def = nullptr;
	jule::Bool _70317_def_not_last = false;
	while ((_70034_tokens.len() > 0LL)) {
		{
			_212ae5c02_Token _70521_tok = _70034_tokens[0LL];
			if (_70521_tok._field_id == static_cast<jule::U64>(18LLU)) {
				_70034_tokens=_70034_tokens.slice(1LL);
				goto _iter_next_1b70ca7c6;
			}
			if ((_70521_tok._field_id != static_cast<jule::U64>(7LLU)) || (_70521_tok._field_kind != jule::Str("|", 1))) {
				(*this)._method_push_err(_70521_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_1b70ca7c6;
			}
			jule::Ptr<_212b23515_Case> _71622_c;
			jule::Bool _71625_is_default;
			std::tie(_71622_c,_71625_is_default) = (*this)._method_build_case(_70034_tokens,_70051_type_match);
			if (_71625_is_default) {
				(*(_71622_c))._field_token=_70521_tok;
				if ((_70217_def == nullptr)) {
					_70217_def=jule::new_struct<_212b22745_Else>(new( std::nothrow ) _212b22745_Else((*(_71622_c))._field_token,(*(_71622_c))._field_scope));
				} else {
					(*this)._method_push_err(_70521_tok,jule::Str("invalid syntax", 14));
				}
			} else {
				_70317_def_not_last=_70317_def_not_last || (_70217_def != nullptr);
				_70117_cases = jule::alloc_for_append(_70117_cases,1);_70117_cases.__push(_71622_c);
			}
		}
	_iter_next_1b70ca7c6:;
	}
	_iter_end_1b70ca7c6:;
	if (_70317_def_not_last) {
		(*this)._method_push_err((*(_70217_def))._field_token,jule::Str("default case should be last case", 32));
	}
	return std::make_tuple(_70117_cases,_70217_def);
}



inline jule::Ptr<_212b23955_MatchCase> _1e765489c_ScopeParser::_method_build_match_case(jule::Slice<_212ae5c02_Token> _74039_tokens) {
	jule::Ptr<_212b23955_MatchCase> _74117_m = jule::new_struct<_212b23955_MatchCase>(new( std::nothrow ) _212b23955_MatchCase(_74039_tokens[0LL],jule::Bool(),jule::Ptr<_212b16162_Expr>(),jule::Slice<jule::Ptr<_212b23515_Case>>(),jule::Ptr<_212b22745_Else>()));
	_74039_tokens=_74039_tokens.slice(1LL);
	if ((_74039_tokens.len() > 0LL) && (_74039_tokens[0LL]._field_id == static_cast<jule::U64>(10LLU))) {
		(*(_74117_m))._field_type_match=true;
		_74039_tokens=_74039_tokens.slice(1LL);
	}
	jule::Slice<_212ae5c02_Token> _75117_expr_tokens = _1e7665dca_get_block_expr(_74039_tokens);
	if ((_75117_expr_tokens.len() > 0LL)) {
		(*(_74117_m))._field_expr=(*((*this)._field_p))._method_build_expr(_75117_expr_tokens);
	} else if ((*(_74117_m))._field_type_match) {
		(*this)._method_push_err((*(_74117_m))._field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _75817_i = _75117_expr_tokens.len();
	jule::Slice<_212ae5c02_Token> _75917_block_toks = _1e767874a_range(_75817_i,jule::Str("{", 1),jule::Str("}", 1),_74039_tokens);
	if ((_75917_block_toks == nullptr)) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_74117_m))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_74117_m))._field_cases,(*(_74117_m))._field_default) = (*this)._method_build_cases(_75917_block_toks,(*(_74117_m))._field_type_match);
	return _74117_m;
}



inline jule::Ptr<_212b1e555_ScopeTree> _1e765489c_ScopeParser::_method_build_scope_st(jule::Slice<_212ae5c02_Token> _77137_tokens) {
	jule::Bool _77217_is_unsafe = false;
	jule::Bool _77317_is_deferred = false;
	_212ae5c02_Token _77417_token = _77137_tokens[0LL];
	if (_77417_token._field_id == static_cast<jule::U64>(35LLU)) {
		_77217_is_unsafe=true;
		_77137_tokens=_77137_tokens.slice(1LL);
		if ((_77137_tokens.len() == 0LL)) {
			(*this)._method_push_err(_77417_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
		_77417_token=_77137_tokens[0LL];
		if (_77417_token._field_id == static_cast<jule::U64>(37LLU)) {
			_77317_is_deferred=true;
			_77137_tokens=_77137_tokens.slice(1LL);
			if ((_77137_tokens.len() == 0LL)) {
				(*this)._method_push_err(_77417_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
	} else if (_77417_token._field_id == static_cast<jule::U64>(37LLU)) {
		_77317_is_deferred=true;
		_77137_tokens=_77137_tokens.slice(1LL);
		if ((_77137_tokens.len() == 0LL)) {
			(*this)._method_push_err(_77417_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
	}
	jule::I64 _80017_i = 0LL;
	jule::Slice<_212ae5c02_Token> _80117_scope_tokens = _1e767874a_range(_80017_i,jule::Str("{", 1),jule::Str("}", 1),_77137_tokens);
	if ((_80117_scope_tokens == nullptr)) {
		(*this)._method_push_err(_77417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if (_80017_i < static_cast<jule::I64>(_77137_tokens.len())) {
		(*this)._method_push_err(_77137_tokens[_80017_i],jule::Str("invalid syntax", 14));
	}
	jule::Ptr<_212b1e555_ScopeTree> _80817_scope = (*this)._method_build_scope(_80117_scope_tokens);
	(*(_80817_scope))._field_unsafety=_77217_is_unsafe;
	(*(_80817_scope))._field_deferred=_77317_is_deferred;
	return _80817_scope;
}



inline jule::Ptr<_212b1ce05_LabelSt> _1e765489c_ScopeParser::_method_build_label_st(jule::Slice<_212ae5c02_Token>& _81438_tokens) {
	jule::Ptr<_212b1ce05_LabelSt> _81517_lbl = jule::new_struct<_212b1ce05_LabelSt>(new( std::nothrow ) _212b1ce05_LabelSt(_81438_tokens[0LL],_81438_tokens[0LL]._field_kind));
	if ((_81438_tokens.len() > 2LL)) {
		_81438_tokens=_81438_tokens.slice(2LL);
		(*this)._method_insert_as_next(_81438_tokens);
	}
	return _81517_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _1e765489c_ScopeParser::_method_build_id_st(jule::Slice<_212ae5c02_Token>& _82935_tokens) {
	jule::Bool _82964_ok = jule::Bool();
	if ((_82935_tokens.len() == 1LL)) {
		return std::make_tuple(jule::Any(),_82964_ok);
	}
	_212ae5c02_Token _83417_token = _82935_tokens[1LL];
	{
		auto &_match_expr{ _83417_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(11LLU)) {
			_case_begin_1b70e5758:;
			{
				_82964_ok = true;
				return std::make_tuple(jule::Any((*this)._method_build_label_st(_82935_tokens)),_82964_ok);
			}
		}
		_match_end_1b70e4cda:;
	}
	return std::make_tuple(jule::Any(),_82964_ok);
}



inline jule::Ptr<_1e76761d7_AssignInfo> _1e765489c_ScopeParser::_method_build_assign_info(jule::Slice<_212ae5c02_Token>& _84341_tokens) {
	jule::Ptr<_1e76761d7_AssignInfo> _84417_info = jule::new_struct<_1e76761d7_AssignInfo>(new( std::nothrow ) _1e76761d7_AssignInfo(jule::Slice<_212ae5c02_Token>(),jule::Slice<_212ae5c02_Token>(),_212ae5c02_Token(),true));
	jule::I64 _84717_brace_n = 0LL;
	{
		auto &expr = _84341_tokens;
		auto it = expr.begin();
		_iter_begin_1b70e7a79:;
		if (it != expr.end()) {
			jule::I64 _1b70e7b9a_i = it - expr.begin();
			_212ae5c02_Token _1b70e7ded_token = *it;
			{
				if (_1b70e7ded_token._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b70e7ded_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b70e9174:;
							{
								(_84717_brace_n)++;
							}
						}
						else {
							_case_begin_1b70e886b:;
							{
								(_84717_brace_n)--;
							}
						}
						_match_end_1b70e88e3:;
					}
				}
				{
					
					if ((_84717_brace_n > 0LL)) {
						_case_begin_1b70e941b:;
						{
							goto _iter_next_1b70e7a79;
						}
					}
					else if (_1b70e7ded_token._field_id != static_cast<jule::U64>(7LLU)) {
						_case_begin_1b70e9482:;
						{
							goto _iter_next_1b70e7a79;
						}
					}
					else if ((!(_212aec18c_is_assign_op(_1b70e7ded_token._field_kind)))) {
						_case_begin_1b70e94e8:;
						{
							goto _iter_next_1b70e7a79;
						}
					}
					_match_end_1b70e8c9a:;
				}
				(*(_84417_info))._field_l=_84341_tokens.slice(0LL,_1b70e7b9a_i);
				if (((*(_84417_info))._field_l.len() == 0LL)) {
					(*(_84417_info))._field_ok=false;
				}
				(*(_84417_info))._field_setter=_1b70e7ded_token;
				if ((_1b70e7b9a_i + 1LL) >= static_cast<jule::I64>(_84341_tokens.len())) {
					(*(_84417_info))._field_r=nullptr;
					(*(_84417_info))._field_ok=_212aebd4b_is_postfix_op((*(_84417_info))._field_setter._field_kind);
					goto _iter_end_1b70e7a79;
				}
				(*(_84417_info))._field_r=_84341_tokens.slice((_1b70e7b9a_i + 1LL));
				if (_212aebd4b_is_postfix_op((*(_84417_info))._field_setter._field_kind)) {
					if (((*(_84417_info))._field_r.len() > 0LL)) {
						(*this)._method_push_err((*(_84417_info))._field_r[0LL],jule::Str("invalid syntax", 14));
						(*(_84417_info))._field_r=nullptr;
					}
				}
				goto _iter_end_1b70e7a79;
			}
			_iter_next_1b70e7a79:;
			++it;
			_1b70e7b9a_i++;
			goto _iter_begin_1b70e7a79;
		}
		_iter_end_1b70e7a79:;
	}
	return _84417_info;
}



inline jule::Ptr<_212b1dbc5_AssignLeft> _1e765489c_ScopeParser::_method_build_assign_l(jule::Slice<_212ae5c02_Token>& _89138_tokens) {
	jule::Ptr<_212b1dbc5_AssignLeft> _89217_l = jule::new_struct<_212b1dbc5_AssignLeft>(new( std::nothrow ) _212b1dbc5_AssignLeft(_89138_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ptr<_212b16162_Expr>()));
	if (_89138_tokens[0LL]._field_id == static_cast<jule::U64>(2LLU)) {
		(*(_89217_l))._field_ident=(*(_89217_l))._field_token._field_kind;
	}
	(*(_89217_l))._field_expr=(*((*this)._field_p))._method_build_expr(_89138_tokens);
	return _89217_l;
}



inline jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>> _1e765489c_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_212ae5c02_Token>>& _90439_parts) {
	jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>> _90517_lefts = nullptr;
	{
		auto &expr = _90439_parts;
		auto it = expr.begin();
		_iter_begin_1b7102d09:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b7102d81_part = *it;
			{
				jule::Ptr<_212b1dbc5_AssignLeft> _90721_l = (*this)._method_build_assign_l(_1b7102d81_part);
				_90517_lefts = jule::alloc_for_append(_90517_lefts,1);_90517_lefts.__push(_90721_l);
			}
			_iter_next_1b7102d09:;
			++it;
			goto _iter_begin_1b7102d09;
		}
		_iter_end_1b7102d09:;
	}
	return _90517_lefts;
}



inline std::tuple<jule::Ptr<_212b1e115_AssignSt>,jule::Bool> _1e765489c_ScopeParser::_method_build_plain_assign(jule::Slice<_212ae5c02_Token>& _91442_tokens) {
	jule::Ptr<_1e76761d7_AssignInfo> _91517_info = (*this)._method_build_assign_info(_91442_tokens);
	if ((!((*(_91517_info))._field_ok))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_212b1e115_AssignSt> _92017_assign = jule::new_struct<_212b1e115_AssignSt>(new( std::nothrow ) _212b1e115_AssignSt(jule::Bool(),(*(_91517_info))._field_setter,jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>>(),jule::Ptr<_212b16162_Expr>()));
	jule::Slice<jule::Slice<_212ae5c02_Token>> _92418_parts;
	jule::Slice<_21287ea02_Log> _92425_errs;
	std::tie(_92418_parts,_92425_errs) = _1e76797b2_parts((*(_91517_info))._field_l,static_cast<jule::U64>(8LLU),true);
	if ((_92425_errs.len() > 0LL)) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_92425_errs);
		return std::make_tuple(nullptr,false);
	}
	(*(_92017_assign))._field_left=(*this)._method_build_assign_ls(_92418_parts);
	if (((*(_91517_info))._field_r != nullptr)) {
		(*(_92017_assign))._field_right=(*((*this)._field_p))._method_build_expr((*(_91517_info))._field_r);
	}
	return std::make_tuple(_92017_assign,true);
}



inline std::tuple<jule::Ptr<_212b1e115_AssignSt>,jule::Bool> _1e765489c_ScopeParser::_method_build_decl_assign(jule::Slice<_212ae5c02_Token> _93840_tokens) {
	if ((_93840_tokens.len() < 1LL)) {
		return std::make_tuple(nullptr,false);
	}
	_93840_tokens=_93840_tokens.slice(1LL);
	_212ae5c02_Token _94417_token = _93840_tokens[0LL];
	if ((_94417_token._field_id != static_cast<jule::U64>(3LLU)) || (_94417_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_212b1e115_AssignSt> _94917_assign = jule::new_struct<_212b1e115_AssignSt>(new( std::nothrow ) _212b1e115_AssignSt(true,_212ae5c02_Token(),jule::Slice<jule::Ptr<_212b1dbc5_AssignLeft>>(),jule::Ptr<_212b16162_Expr>()));
	jule::I64 _95317_i = 0LL;
	jule::Slice<_212ae5c02_Token> _95417_rang = _1e767874a_range(_95317_i,jule::Str("(", 1),jule::Str(")", 1),_93840_tokens);
	if ((_95417_rang == nullptr)) {
		(*this)._method_push_err(_94417_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if ((_95317_i + 1LL) < static_cast<jule::I64>(_93840_tokens.len())) {
		(*(_94917_assign))._field_setter=_93840_tokens[_95317_i];
		(_95317_i)++;
		jule::Slice<_212ae5c02_Token> _96121_expr_tokens = _93840_tokens.slice(_95317_i);
		(*(_94917_assign))._field_right=(*((*this)._field_p))._method_build_expr(_96121_expr_tokens);
	}
	jule::Slice<jule::Slice<_212ae5c02_Token>> _96618_parts;
	jule::Slice<_21287ea02_Log> _96625_errs;
	std::tie(_96618_parts,_96625_errs) = _1e76797b2_parts(_95417_rang,static_cast<jule::U64>(8LLU),true);
	if ((_96625_errs.len() > 0LL)) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_96625_errs);
		return std::make_tuple(nullptr,false);
	}
	{
		auto &expr = _96618_parts;
		auto it = expr.begin();
		_iter_begin_1b71111ad:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b71118c8_part = *it;
			{
				jule::Bool _97321_is_mut = false;
				jule::Bool _97421_is_ref = false;
				_94417_token=_1b71118c8_part[0LL];
				if (_94417_token._field_id == static_cast<jule::U64>(36LLU)) {
					_97321_is_mut=true;
					_1b71118c8_part=_1b71118c8_part.slice(1LL);
					if ((_1b71118c8_part.len() == 0LL)) {
						(*this)._method_push_err(_94417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_1b71111ad;
					}
				}
				if ((_1b71118c8_part[0LL]._field_id == static_cast<jule::U64>(7LLU)) && (_1b71118c8_part[0LL]._field_kind == jule::Str("&", 1))) {
					_97421_is_ref=true;
					_1b71118c8_part=_1b71118c8_part.slice(1LL);
					if ((_1b71118c8_part.len() == 0LL)) {
						(*this)._method_push_err(_94417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_1b71111ad;
					}
				}
				if (((_1b71118c8_part[0LL]._field_id != static_cast<jule::U64>(2LLU)) && (_1b71118c8_part[0LL]._field_id != static_cast<jule::U64>(3LLU))) && (_1b71118c8_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_94417_token,jule::Str("invalid syntax", 14));
					goto _iter_next_1b71111ad;
				}
				jule::Ptr<_212b1dbc5_AssignLeft> _100221_l = (*this)._method_build_assign_l(_1b71118c8_part);
				(*(_100221_l))._field_mutable=_97321_is_mut;
				(*(_100221_l))._field_reference=_97421_is_ref;
				(*(_94917_assign))._field_left = jule::alloc_for_append((*(_94917_assign))._field_left,1);(*(_94917_assign))._field_left.__push(_100221_l);
			}
			_iter_next_1b71111ad:;
			++it;
			goto _iter_begin_1b71111ad;
		}
		_iter_end_1b71111ad:;
	}
	return std::make_tuple(_94917_assign,true);
}



inline std::tuple<jule::Ptr<_212b1e115_AssignSt>,jule::Bool> _1e765489c_ScopeParser::_method_build_assign_st(jule::Slice<_212ae5c02_Token>& _101139_tokens) {
	jule::Ptr<_212b1e115_AssignSt> _101158_st = jule::Ptr<_212b1e115_AssignSt>();
	jule::Bool _101173_ok = jule::Bool();
	if ((!(_1e7676a89_check_assign_tokens(_101139_tokens)))) {
		_101158_st = nullptr;
		_101173_ok = false;
		return std::make_tuple(_101158_st,_101173_ok);
	}
	{
		auto &_match_expr{ _101139_tokens[0LL]._field_id };
		
		if (_match_expr == static_cast<jule::U64>(34LLU)) {
			_case_begin_1b711b130:;
			{
				std::tie(_101158_st,_101173_ok) = (*this)._method_build_decl_assign(_101139_tokens);
			}
		}
		else {
			_case_begin_1b711a629:;
			{
				std::tie(_101158_st,_101173_ok) = (*this)._method_build_plain_assign(_101139_tokens);
			}
		}
		_match_end_1b711ac78:;
	}
	return std::make_tuple(_101158_st,_101173_ok);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_use_expr(jule::Slice<_212ae5c02_Token>& _102638_tokens) {
	if ((_102638_tokens.len() == 1LL)) {
		(*this)._method_push_err(_102638_tokens[0LL],jule::Str("expression missing", 18));
		return jule::Any(nullptr);
	}
	jule::Ptr<_212b165a2_UseExpr> _103217_ue = jule::new_struct<_212b165a2_UseExpr>(new( std::nothrow ) _212b165a2_UseExpr(_102638_tokens[0LL],jule::Ptr<_212b16162_Expr>()));
	_102638_tokens=_102638_tokens.slice(1LL);
	(*(_103217_ue))._field_expr=(*((*this)._field_p))._method_build_expr(_102638_tokens);
	return jule::Any(_103217_ue);
}



inline jule::Any _1e765489c_ScopeParser::_method_build_st(jule::Ptr<_1e7653d74_Stmt>& _104132_st) {
	_212ae5c02_Token _104217_token = (*(_104132_st))._field_tokens[0LL];
	if (_104217_token._field_id == static_cast<jule::U64>(2LLU)) {
		jule::Any _104422_s;
		jule::Bool _104425_ok;
		std::tie(_104422_s,_104425_ok) = (*this)._method_build_id_st((*(_104132_st))._field_tokens);
		if (_104425_ok) {
			return _104422_s;
		}
	}
	jule::Ptr<_212b1e115_AssignSt> _105018_s;
	jule::Bool _105021_ok;
	std::tie(_105018_s,_105021_ok) = (*this)._method_build_assign_st((*(_104132_st))._field_tokens);
	if (_105021_ok) {
		return jule::Any(_105018_s);
	}
	{
		auto &_match_expr{ _104217_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(19LLU)) {
			_case_begin_1b7121aa3:;
			{
				return (*this)._method_build_use_expr((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(38LLU) || _match_expr == static_cast<jule::U64>(9LLU) || _match_expr == static_cast<jule::U64>(34LLU) || _match_expr == static_cast<jule::U64>(36LLU)) {
			_case_begin_1b71226b9:;
			{
				return (*this)._method_build_var_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(4LLU)) {
			_case_begin_1b7122851:;
			{
				return (*this)._method_build_ret_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(12LLU)) {
			_case_begin_1b71221e1:;
			{
				return (*this)._method_buid_iter_st(_104132_st);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(13LLU)) {
			_case_begin_1b7122257:;
			{
				return (*this)._method_build_break_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(14LLU)) {
			_case_begin_1b71222bd:;
			{
				return (*this)._method_build_cont_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(16LLU)) {
			_case_begin_1b71228c8:;
			{
				return (*this)._method_build_if_else_chain((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(18LLU)) {
			_case_begin_1b712293e:;
			{
				return (*this)._method_build_comment_st(_104217_token);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(26LLU)) {
			_case_begin_1b71229a5:;
			{
				return (*this)._method_build_co_call_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(22LLU)) {
			_case_begin_1b7122a1b:;
			{
				return (*this)._method_build_goto_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(32LLU)) {
			_case_begin_1b7122a82:;
			{
				return (*this)._method_build_fall_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(10LLU)) {
			_case_begin_1b7122ae8:;
			{
				return (*this)._method_build_type_alias_st((*(_104132_st))._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(27LLU)) {
			_case_begin_1b7122b5e:;
			{
				return jule::Any((*this)._method_build_match_case((*(_104132_st))._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(35LLU) || _match_expr == static_cast<jule::U64>(37LLU)) {
			_case_begin_1b7122bc5:;
			{
				return jule::Any((*this)._method_build_scope_st((*(_104132_st))._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b7122c3b:;
			{
				if ((_104217_token._field_kind == jule::Str("{", 1))) {
					return jule::Any((*this)._method_build_scope_st((*(_104132_st))._field_tokens));
				}
			}
		}
		_match_end_1b71227eb:;
	}
	jule::Ptr<_212b16162_Expr> _109617_expr = (*((*this)._field_p))._method_build_expr((*(_104132_st))._field_tokens);
	if ((_109617_expr != nullptr)) {
		return jule::Any(_109617_expr);
	}
	(*this)._method_push_err(_104217_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _1e765489c_ScopeParser::_method_build(jule::Slice<_212ae5c02_Token>& _110429_tokens,jule::Ptr<_212b1e555_ScopeTree>& _110451_s) {
	if ((_110451_s == nullptr)) {
		return;
	}
	(*this)._field_stmts=_1e76544e5_split_stmts(_110429_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_110451_s;
	while ((!((*this)._method_is_last_st())) && (!((*this)._method_finished()))) {
		{
			jule::Ptr<_1e7653d74_Stmt> _111321_st = (*this)._method_next();
			jule::Any _111421_data = (*this)._method_build_st(_111321_st);
			if (_111421_data != jule::Any(nullptr)) {
				(*((*this)._field_s))._field_stmts = jule::alloc_for_append((*((*this)._field_s))._field_stmts,1);(*((*this)._field_s))._field_stmts.__push(_111421_data);
			}
			if ((*this)._method_stopped()) {
				goto _iter_end_1b712c141;
			}
		}
	_iter_next_1b712c141:;
	}
	_iter_end_1b712c141:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e765489c_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e7665407_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _1e766767e_ExprBuilder::_method_push_err(_212ae5c02_Token _23427_token,jule::Str _23441_fmt,jule::Slice<jule::Any> _23454_args) {
	(*((*this)._field_p))._method_push_err(_23427_token,_23441_fmt,_23454_args);
}



inline void _1e766767e_ExprBuilder::_method_push_suggestion(jule::Str _23934_fmt,jule::Slice<jule::Any> _23947_args) {
	(*((*this)._field_p))._method_push_suggestion(_23934_fmt,_23947_args);
}



inline jule::Ptr<_212b169e2_TupleExpr> _1e766767e_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_212ae5c02_Token>>& _24335_parts) {
	jule::Ptr<_212b169e2_TupleExpr> _24417_tuple = jule::new_struct<_212b169e2_TupleExpr>(new( std::nothrow ) _212b169e2_TupleExpr(jule::Slice<jule::Ptr<_212b16162_Expr>>::alloc(0LL,static_cast<jule::I64>(_24335_parts.len()))));
	{
		auto &expr = _24335_parts;
		auto it = expr.begin();
		_iter_begin_1b7134313:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b7134830_part = *it;
			{
				(*(_24417_tuple))._field_expr = jule::alloc_for_append((*(_24417_tuple))._field_expr,1);(*(_24417_tuple))._field_expr.__push((*this)._method_build_from_tokens(_1b7134830_part));
			}
			_iter_next_1b7134313:;
			++it;
			goto _iter_begin_1b7134313;
		}
		_iter_end_1b7134313:;
	}
	return _24417_tuple;
}



inline jule::Ptr<_212b16e32_LitExpr> _1e766767e_ExprBuilder::_method_build_lit(_212ae5c02_Token _25328_token) {
	return jule::new_struct<_212b16e32_LitExpr>(new( std::nothrow ) _212b16e32_LitExpr(_25328_token,_25328_token._field_kind));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e766767e_ExprBuilder::_method_build_primitive_type(_212ae5c02_Token& _26040_token) {
	return _1e76925ee_build_prim_type(_26040_token);
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_single(_212ae5c02_Token _26435_token) {
	{
		auto &_match_expr{ _26435_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(6LLU)) {
			_case_begin_1b7137998:;
			{
				return jule::Any((*this)._method_build_lit(_26435_token));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b7137a0e:;
			{
				if ((_26435_token._field_kind == jule::Str("...", 3))) {
					return jule::Any(jule::new_struct<_212b18582_VariadicExpr>(new( std::nothrow ) _212b18582_VariadicExpr(_26435_token,jule::Any())));
				}
			}
		}
		else if (_match_expr == static_cast<jule::U64>(2LLU) || _match_expr == static_cast<jule::U64>(28LLU) || _match_expr == static_cast<jule::U64>(40LLU)) {
			_case_begin_1b7137aa8:;
			{
				return jule::Any(_1e7666e42_build_ident_expr(_26435_token));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(1LLU)) {
			_case_begin_1b7137b1e:;
			{
				return jule::Any((*this)._method_build_primitive_type(_26435_token));
			}
		}
		_match_end_1b7137899:;
	}
	(*this)._method_push_err(_26435_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_212b17c02_IdentExpr> _1e766767e_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_212ae5c02_Token>& _28546_tokens) {
	if (_28546_tokens[0LL]._field_id != static_cast<jule::U64>(31LLU)) {
		return nullptr;
	} else if (_28546_tokens[1LL]._field_id != static_cast<jule::U64>(20LLU)) {
		(*this)._method_push_err(_28546_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_212ae5c02_Token _29317_token = _28546_tokens[2LL];
	if (_29317_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*this)._method_push_err(_28546_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b17c02_IdentExpr> _29917_expr = _1e7666e42_build_ident_expr(_29317_token);
	(*(_29917_expr))._field_cpp_linked=true;
	return _29917_expr;
}



inline jule::Ptr<_212b18142_UnaryExpr> _1e766767e_ExprBuilder::_method_build_unary(jule::Slice<_212ae5c02_Token> _30434_tokens) {
	_212ae5c02_Token _30517_op = _30434_tokens[0LL];
	if ((_30434_tokens.len() == 1LL)) {
		(*this)._method_push_err(_30517_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_212ae66c5_is_unary_op(_30517_op._field_kind)))) {
		(*this)._method_push_err(_30517_op,jule::Str("invalid unary operator: @", 25),jule::Slice<jule::Any>({jule::Any(_30517_op._field_kind)}));
		return nullptr;
	}
	_30434_tokens=_30434_tokens.slice(1LL);
	return jule::new_struct<_212b18142_UnaryExpr>(new( std::nothrow ) _212b18142_UnaryExpr(_30517_op,(*this)._method_build(_30434_tokens)));
}



inline jule::Ptr<_212b19352_SubIdentExpr> _1e766767e_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_212ae5c02_Token> _32542_tokens) {
	jule::I64 _32617_i = (_32542_tokens.len() - 1LL);
	_212ae5c02_Token _32717_ident_token = _32542_tokens[_32617_i];
	(_32617_i)--;
	_32542_tokens=_32542_tokens.slice(0LL,_32617_i);
	if ((_32542_tokens.len() == 0LL)) {
		(*this)._method_push_err(_32717_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_212b19352_SubIdentExpr>(new( std::nothrow ) _212b19352_SubIdentExpr(jule::Bool(),(*this)._method_build(_32542_tokens),_32717_ident_token));
}



inline jule::Ptr<_212b18e12_NsSelectionExpr> _1e766767e_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_212ae5c02_Token>& _34042_tokens) {
	jule::Ptr<_212b18e12_NsSelectionExpr> _34117_ns = jule::new_struct<_212b18e12_NsSelectionExpr>(new( std::nothrow ) _212b18e12_NsSelectionExpr());
	{
		auto &expr = _34042_tokens;
		auto it = expr.begin();
		_iter_begin_1b7147425:;
		if (it != expr.end()) {
			jule::I64 _1b7147546_i = it - expr.begin();
			_212ae5c02_Token _1b7147799_token = *it;
			{
				if (((_1b7147546_i & 1LL) == 0LL)) {
					if (_1b7147799_token._field_id != static_cast<jule::U64>(2LLU)) {
						(*this)._method_push_err(_1b7147799_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					}
					(*(_34117_ns))._field_ns = jule::alloc_for_append((*(_34117_ns))._field_ns,1);(*(_34117_ns))._field_ns.__push(_1b7147799_token);
				} else if (_1b7147799_token._field_id != static_cast<jule::U64>(23LLU)) {
					(*this)._method_push_err(_1b7147799_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				}
			}
			_iter_next_1b7147425:;
			++it;
			_1b7147546_i++;
			goto _iter_begin_1b7147425;
		}
		_iter_end_1b7147425:;
	}
	(*(_34117_ns))._field_ident=(*(_34117_ns))._field_ns[((*(_34117_ns))._field_ns.len() - 1LL)];
	(*(_34117_ns))._field_ns=(*(_34117_ns))._field_ns.slice(0LL,((*(_34117_ns))._field_ns.len() - 1LL));
	return _34117_ns;
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e766767e_ExprBuilder::_method_build_type(jule::Slice<_212ae5c02_Token>& _35934_tokens) {
	jule::I64 _36017_i = 0LL;
	jule::Ptr<_2129e3d42_TypeDecl> _36118_t;
	jule::Bool _36121_ok;
	std::tie(_36118_t,_36121_ok) = (*((*this)._field_p))._method_build_type(_35934_tokens,(&(_36017_i)),false);
	if ((!(_36121_ok))) {
		(*this)._method_push_err(_35934_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_36017_i < static_cast<jule::I64>(_35934_tokens.len())) {
		(*this)._method_push_err(_35934_tokens[_36017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _36118_t;
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_sub_ident(jule::Slice<_212ae5c02_Token>& _37339_tokens) {
	jule::I64 _37413_i = (_37339_tokens.len() - 2LL);
	_212ae5c02_Token _37513_token = _37339_tokens[_37413_i];
	{
		auto &_match_expr{ _37513_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(20LLU)) {
			_case_begin_1b71517c5:;
			{
				return jule::Any((*this)._method_build_obj_sub_ident(_37339_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(23LLU)) {
			_case_begin_1b715184c:;
			{
				return jule::Any((*this)._method_build_ns_sub_ident(_37339_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b71518b3:;
			{
				if ((_37513_token._field_kind == jule::Str("]", 1))) {
					return jule::Any((*this)._method_build_type(_37339_tokens));
				}
			}
		}
		_match_end_1b715172b:;
	}
	(*this)._method_push_err(_37513_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_212b18582_VariadicExpr> _1e766767e_ExprBuilder::_method_build_variadic(jule::Slice<_212ae5c02_Token> _39137_tokens) {
	_212ae5c02_Token _39217_token = _39137_tokens[(_39137_tokens.len() - 1LL)];
	_39137_tokens=_39137_tokens.slice(0LL,(_39137_tokens.len() - 1LL));
	return jule::new_struct<_212b18582_VariadicExpr>(new( std::nothrow ) _212b18582_VariadicExpr(_39217_token,(*this)._method_build(_39137_tokens)));
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_op_right(jule::Slice<_212ae5c02_Token>& _40038_tokens) {
	_212ae5c02_Token _40117_token = _40038_tokens[(_40038_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _40117_token._field_kind };
		
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_1b7156b93:;
			{
				_40038_tokens=_40038_tokens.slice(0LL,(_40038_tokens.len() - 1LL));
				jule::Any _40521_d = (*this)._method_build(_40038_tokens);
				if (_40521_d == jule::Any(nullptr)) {
					return jule::Any(nullptr);
				}
				{
					auto &_match_expr{ _40521_d };
					
					if (_match_expr.type_is<jule::Ptr<_212b19bd2_FnCallExpr>>()) {
						_case_begin_1b7158744:;
						{
							(*(_40521_d.operator jule::Ptr<_212b19bd2_FnCallExpr>()))._field_exception=jule::new_struct<_212b1e555_ScopeTree>(new( std::nothrow ) _212b1e555_ScopeTree(jule::Ptr<_212b1e555_ScopeTree>(),jule::Bool(),true,jule::Slice<jule::Any>()));
							return _40521_d;
						}
					}
					_match_end_1b715818e:;
				}
			}
		}
		else if (_match_expr == jule::Str("...", 3)) {
			_case_begin_1b7156c09:;
			{
				return jule::Any((*this)._method_build_variadic(_40038_tokens));
			}
		}
		_match_end_1b7156b3d:;
	}
	(*this)._method_push_err(_40117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_between_parentheses(jule::Slice<_212ae5c02_Token> _42348_tokens) {
	_212ae5c02_Token _42413_token = _42348_tokens[0LL];
	_42348_tokens=_42348_tokens.slice(1LL,(_42348_tokens.len() - 1LL));
	if ((_42348_tokens.len() == 0LL)) {
		(*this)._method_push_err(_42413_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_42348_tokens);
}



inline jule::Ptr<_212b189c2_CastExpr> _1e766767e_ExprBuilder::_method_try_build_cast(jule::Slice<_212ae5c02_Token>& _43438_tokens) {
	jule::I64 _43517_range_n = 0LL;
	{
		auto &expr = _43438_tokens;
		auto it = expr.begin();
		_iter_begin_1b715d5b2:;
		if (it != expr.end()) {
			jule::I64 _1b715d6d3_i = it - expr.begin();
			_212ae5c02_Token _1b715d936_token = *it;
			{
				if (_1b715d936_token._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b715d936_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b715eb68:;
							{
								(_43517_range_n)++;
								goto _iter_next_1b715d5b2;
							}
						}
						else {
							_case_begin_1b715e360:;
							{
								(_43517_range_n)--;
							}
						}
						_match_end_1b715e3d7:;
					}
				}
				if ((_43517_range_n > 0LL)) {
					goto _iter_next_1b715d5b2;
				} else if ((_1b715d6d3_i + 1LL) == static_cast<jule::I64>(_43438_tokens.len())) {
					return nullptr;
				}
				jule::Slice<_212ae5c02_Token> _45521_type_tokens = _43438_tokens.slice(0LL,(_1b715d6d3_i + 1LL));
				jule::Slice<_212ae5c02_Token> _45621_expr_tokens = _43438_tokens.slice((_1b715d6d3_i + 1LL));
				if ((_45621_expr_tokens.len() == 0LL)) {
					return nullptr;
				}
				_212ae5c02_Token _46317_tok = _45621_expr_tokens[0LL];
				if ((_46317_tok._field_id != static_cast<jule::U64>(3LLU)) || (_46317_tok._field_kind != jule::Str("(", 1))) {
					return nullptr;
				}
				jule::Ptr<_212b189c2_CastExpr> _46821_cast = jule::new_struct<_212b189c2_CastExpr>(new( std::nothrow ) _212b189c2_CastExpr());
				if ((_45621_expr_tokens.len() == 2LL)) {
					(*this)._method_push_err(_45621_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				}
				if ((_45521_type_tokens.len() == 2LL)) {
					(*this)._method_push_err(_45521_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_45521_type_tokens=_45521_type_tokens.slice(1LL,(_45521_type_tokens.len() - 1LL));
					jule::I64 _48225_type_index = 0LL;
					jule::Ptr<_2129e3d42_TypeDecl> _48326_t;
					jule::Bool _48329_ok;
					std::tie(_48326_t,_48329_ok) = (*((*this)._field_p))._method_build_type(_45521_type_tokens,(&(_48225_type_index)),true);
					if (_48329_ok && (_48225_type_index < static_cast<jule::I64>(_45521_type_tokens.len()))) {
						(*this)._method_push_err(_45521_type_tokens[_48225_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_48329_ok))) {
						return _46821_cast;
					}
					(*(_46821_cast))._field_kind=_48326_t;
					if ((_45621_expr_tokens.len() > 2LL)) {
						jule::I64 _49329_j = 0LL;
						_1e767874a_range(_49329_j,jule::Str("(", 1),jule::Str(")", 1),_45621_expr_tokens);
						if (_49329_j < static_cast<jule::I64>(_45621_expr_tokens.len())) {
							return nullptr;
						}
						_45621_expr_tokens=_45621_expr_tokens.slice(0LL,_49329_j);
						(*(_46821_cast))._field_expr=(*this)._method_build(_45621_expr_tokens);
					}
				}
				return _46821_cast;
			}
			_iter_next_1b715d5b2:;
			++it;
			_1b715d6d3_i++;
			goto _iter_begin_1b715d5b2;
		}
		_iter_end_1b715d5b2:;
	}
	return nullptr;
}



inline void _1e766767e_ExprBuilder::_method_push_arg(jule::Slice<jule::Ptr<_212b16162_Expr>>& _50832_args,jule::Slice<_212ae5c02_Token> _50851_tokens,_212ae5c02_Token _50868_err_token) {
	if ((_50851_tokens.len() == 0LL)) {
		(*this)._method_push_err(_50868_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_50832_args = jule::alloc_for_append(_50832_args,1);_50832_args.__push((*this)._method_build_from_tokens(_50851_tokens));
}



inline jule::Slice<jule::Ptr<_212b16162_Expr>> _1e766767e_ExprBuilder::_method_build_args(jule::Slice<_212ae5c02_Token> _51733_tokens) {
	if ((_51733_tokens.len() < 2LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_212b16162_Expr>> _52317_args = nullptr;
	jule::I64 _52417_last = 0LL;
	jule::I64 _52517_range_n = 0LL;
	_51733_tokens=_51733_tokens.slice(1LL,(_51733_tokens.len() - 1LL));
	{
		auto &expr = _51733_tokens;
		auto it = expr.begin();
		_iter_begin_1b716e0ea:;
		if (it != expr.end()) {
			jule::I64 _1b716ebab_i = it - expr.begin();
			_212ae5c02_Token _1b716ecee_token = *it;
			{
				if (_1b716ecee_token._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b716ecee_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b7170e21:;
							{
								(_52517_range_n)++;
							}
						}
						else {
							_case_begin_1b7170618:;
							{
								(_52517_range_n)--;
							}
						}
						_match_end_1b7170690:;
					}
				}
				if ((_52517_range_n > 0LL) || (_1b716ecee_token._field_id != static_cast<jule::U64>(8LLU))) {
					goto _iter_next_1b716e0ea;
				}
				(*this)._method_push_arg(_52317_args,_51733_tokens.slice(_52417_last,_1b716ebab_i),_1b716ecee_token);
				_52417_last=static_cast<jule::I64>((_1b716ebab_i + 1LL));
			}
			_iter_next_1b716e0ea:;
			++it;
			_1b716ebab_i++;
			goto _iter_begin_1b716e0ea;
		}
		_iter_end_1b716e0ea:;
	}
	if (_52417_last < static_cast<jule::I64>(_51733_tokens.len())) {
		if ((_52417_last == 0LL)) {
			if ((_51733_tokens.len() > 0LL)) {
				(*this)._method_push_arg(_52317_args,_51733_tokens.slice(_52417_last),_51733_tokens[_52417_last]);
			}
		} else {
			(*this)._method_push_arg(_52317_args,_51733_tokens.slice(_52417_last),_51733_tokens[(_52417_last - 1LL)]);
		}
	}
	return _52317_args;
}



inline jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _1e766767e_ExprBuilder::_method_build_call_generics(jule::Slice<_212ae5c02_Token> _55942_tokens) {
	if ((_55942_tokens.len() == 0LL)) {
		return nullptr;
	}
	_55942_tokens=_55942_tokens.slice(1LL,(_55942_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_212ae5c02_Token>> _56518_parts;
	jule::Slice<_21287ea02_Log> _56525_errs;
	std::tie(_56518_parts,_56525_errs) = _1e76797b2_parts(_55942_tokens,static_cast<jule::U64>(8LLU),true);
	jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _56617_generics = jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_56518_parts.len()));
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_56525_errs);
	{
		auto &expr = _56518_parts;
		auto it = expr.begin();
		_iter_begin_1b71762ab:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b71771ad_part = *it;
			{
				if ((_1b71771ad_part.len() == 0LL)) {
					goto _iter_next_1b71762ab;
				}
				jule::I64 _57221_j = 0LL;
				jule::Ptr<_2129e3d42_TypeDecl> _57322_generic;
				std::tie(_57322_generic,std::ignore) = (*((*this)._field_p))._method_build_type(_1b71771ad_part,(&(_57221_j)),true);
				if (_57221_j < static_cast<jule::I64>(_1b71771ad_part.len())) {
					(*this)._method_push_err(_1b71771ad_part[_57221_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_56617_generics = jule::alloc_for_append(_56617_generics,1);_56617_generics.__push(_57322_generic);
			}
			_iter_next_1b71762ab:;
			++it;
			goto _iter_begin_1b71762ab;
		}
		_iter_end_1b71762ab:;
	}
	return _56617_generics;
}



inline jule::Ptr<_212b19bd2_FnCallExpr> _1e766767e_ExprBuilder::_method_build_fn_call(_212ae5c02_Token& _58337_token,jule::Ptr<_1e7665407_CallData>& _58356_data) {
	return jule::new_struct<_212b19bd2_FnCallExpr>(new( std::nothrow ) _212b19bd2_FnCallExpr(_58337_token,(*this)._method_build_from_tokens((*(_58356_data))._field_expr_tokens),(*this)._method_build_call_generics((*(_58356_data))._field_generics_tokens),(*this)._method_build_args((*(_58356_data))._field_args_tokens),jule::Ptr<_212b1e555_ScopeTree>()));
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_parentheses_range(jule::Slice<_212ae5c02_Token>& _59247_tokens) {
	_212ae5c02_Token _59317_token = _59247_tokens[0LL];
	{
		auto &_match_expr{ _59317_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b717cbec:;
			{
				{
					auto &_match_expr{ _59317_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_1b717d538:;
						{
							jule::Ptr<_212b189c2_CastExpr> _59825_expr = (*this)._method_try_build_cast(_59247_tokens);
							if ((_59825_expr != nullptr)) {
								return jule::Any(_59825_expr);
							}
						}
					}
					_match_end_1b717d4a0:;
				}
			}
		}
		_match_end_1b717ca32:;
	}
	jule::Ptr<_1e7665407_CallData> _60517_data = _1e7665a67_get_call_data(_59247_tokens);
	if (((*(_60517_data))._field_expr_tokens.len() == 0LL)) {
		return (*this)._method_build_between_parentheses((*(_60517_data))._field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_59317_token,_60517_data));
}



inline jule::Ptr<_212b17372_UnsafeExpr> _1e766767e_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_212ae5c02_Token> _61640_tokens) {
	_212ae5c02_Token _61717_token = _61640_tokens[0LL];
	_61640_tokens=_61640_tokens.slice(1LL);
	jule::I64 _61917_i = 0LL;
	jule::Slice<_212ae5c02_Token> _62017_range_tokens = _1e767874a_range(_61917_i,jule::Str("{", 1),jule::Str("}", 1),_61640_tokens);
	if ((_62017_range_tokens.len() == 0LL)) {
		(*this)._method_push_err(_61640_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_212b17372_UnsafeExpr>(new( std::nothrow ) _212b17372_UnsafeExpr(_61717_token,(*((*this)._method_build_from_tokens(_62017_range_tokens)))._field_kind));
}



inline jule::Ptr<_212b1edd5_FnDecl> _1e766767e_ExprBuilder::_method_build_anon_fn(jule::Slice<_212ae5c02_Token>& _63137_tokens) {
	jule::Ptr<_212b1edd5_FnDecl> _63217_f = (*((*this)._field_p))._method_build_fn(_63137_tokens,false,false);
	if ((!((*(_63217_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_63217_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	}
	return _63217_f;
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_unsafe(jule::Slice<_212ae5c02_Token>& _64036_tokens) {
	{
		auto &_match_expr{ _64036_tokens[1LL]._field_id };
		
		if (_match_expr == static_cast<jule::U64>(33LLU)) {
			_case_begin_1b7187dd3:;
			{
				return jule::Any((*this)._method_build_anon_fn(_64036_tokens));
			}
		}
		else {
			_case_begin_1b71873aa:;
			{
				return jule::Any((*this)._method_build_unsafe_expr(_64036_tokens));
			}
		}
		_match_end_1b7187784:;
	}
}



inline void _1e766767e_ExprBuilder::_method_push_range_lit_part(jule::Slice<_212ae5c02_Token> _65042_part,_212ae5c02_Token _6519_error_token,jule::Slice<jule::Slice<_212ae5c02_Token>>& _65134_parts) {
	if ((_65042_part.len() == 0LL)) {
		(*this)._method_push_err(_6519_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_65134_parts = jule::alloc_for_append(_65134_parts,1);_65134_parts.__push(_65042_part);
}



inline jule::Slice<jule::Slice<_212ae5c02_Token>> _1e766767e_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_212ae5c02_Token> _66153_tokens) {
	if ((_66153_tokens.len() < 2LL)) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_212ae5c02_Token>> _66717_parts = nullptr;
	jule::I64 _66917_last = 0LL;
	jule::I64 _67017_range_n = 0LL;
	_66153_tokens=_66153_tokens.slice(1LL,(_66153_tokens.len() - 1LL));
	{
		auto &expr = _66153_tokens;
		auto it = expr.begin();
		_iter_begin_1b718c800:;
		if (it != expr.end()) {
			jule::I64 _1b718d3b1_i = it - expr.begin();
			_212ae5c02_Token _1b718d504_token = *it;
			{
				if (_1b718d504_token._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b718d504_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b718e626:;
							{
								(_67017_range_n)++;
							}
						}
						else {
							_case_begin_1b718dd1d:;
							{
								(_67017_range_n)--;
							}
						}
						_match_end_1b718dd95:;
					}
				}
				if ((_67017_range_n > 0LL) || (_1b718d504_token._field_id != static_cast<jule::U64>(8LLU))) {
					goto _iter_next_1b718c800;
				}
				(*this)._method_push_range_lit_part(_66153_tokens.slice(_66917_last,_1b718d3b1_i),_1b718d504_token,_66717_parts);
				_66917_last=static_cast<jule::I64>((_1b718d3b1_i + 1LL));
			}
			_iter_next_1b718c800:;
			++it;
			_1b718d3b1_i++;
			goto _iter_begin_1b718c800;
		}
		_iter_end_1b718c800:;
	}
	if (_66917_last < static_cast<jule::I64>(_66153_tokens.len())) {
		if ((_66917_last == 0LL)) {
			if ((_66153_tokens.len() > 0LL)) {
				(*this)._method_push_range_lit_part(_66153_tokens.slice(_66917_last),_66153_tokens[_66917_last],_66717_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_66153_tokens.slice(_66917_last),_66153_tokens[(_66917_last - 1LL)],_66717_parts);
		}
	}
	return _66717_parts;
}



inline jule::Ptr<_212b1a122_FieldExprPair> _1e766767e_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_212ae5c02_Token> _70344_tokens) {
	if (((_70344_tokens.len() - 2LL) == 0LL)) {
		(*this)._method_push_err(_70344_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b1a122_FieldExprPair> _70817_pair = jule::new_struct<_212b1a122_FieldExprPair>(new( std::nothrow ) _212b1a122_FieldExprPair(_70344_tokens[0LL],jule::Any()));
	_70344_tokens=_70344_tokens.slice(2LL);
	(*(_70817_pair))._field_expr=(*((*this)._method_build_from_tokens(_70344_tokens)))._field_kind;
	return _70817_pair;
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_212ae5c02_Token>& _71645_tokens) {
	_212ae5c02_Token _71717_token = _71645_tokens[0LL];
	if ((_71717_token._field_id == static_cast<jule::U64>(2LLU)) && (_71645_tokens.len() > 1LL)) {
		_71717_token=_71645_tokens[1LL];
		if (_71717_token._field_id == static_cast<jule::U64>(11LLU)) {
			return jule::Any((*this)._method_build_field_expr_pair(_71645_tokens));
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_71645_tokens));
}



inline jule::Slice<jule::Any> _1e766767e_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_212ae5c02_Token>& _72746_tokens) {
	jule::Slice<jule::Slice<_212ae5c02_Token>> _72817_parts = (*this)._method_get_brace_range_lit_expr_parts(_72746_tokens);
	if ((_72817_parts.len() == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Any> _73317_pairs = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_72817_parts.len()));
	{
		auto &expr = _72817_parts;
		auto it = expr.begin();
		_iter_begin_1b7199e6c:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b719a29c_part = *it;
			{
				_73317_pairs = jule::alloc_for_append(_73317_pairs,1);_73317_pairs.__push((*this)._method_build_struct_lit_expr(_1b719a29c_part));
			}
			_iter_next_1b7199e6c:;
			++it;
			goto _iter_begin_1b7199e6c;
		}
		_iter_end_1b7199e6c:;
	}
	return _73317_pairs;
}



inline jule::Ptr<_212b1a562_StructLit> _1e766767e_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_212ae5c02_Token> _74049_tokens) {
	jule::I64 _74117_i = 0LL;
	jule::Ptr<_2129e3d42_TypeDecl> _74218_t;
	jule::Bool _74221_ok;
	std::tie(_74218_t,_74221_ok) = (*((*this)._field_p))._method_build_type(_74049_tokens,(&(_74117_i)),true);
	if ((!(_74221_ok))) {
		return nullptr;
	} else if (_74117_i >= static_cast<jule::I64>(_74049_tokens.len())) {
		(*this)._method_push_err(_74049_tokens[_74117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_74049_tokens=_74049_tokens.slice(_74117_i);
	_212ae5c02_Token _75113_token = _74049_tokens[0LL];
	if ((_75113_token._field_id != static_cast<jule::U64>(3LLU)) || (_75113_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_75113_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_212b1a562_StructLit>(new( std::nothrow ) _212b1a562_StructLit(_74218_t,(*this)._method_build_struct_lit_exprs(_74049_tokens)));
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_212ae5c02_Token>& _76344_tokens) {
	jule::Slice<_212ae5c02_Token> _76418_l;
	jule::Slice<_212ae5c02_Token> _76425_r;
	std::tie(_76418_l,_76425_r) = _1e76662d7_split_colon(_76344_tokens);
	if ((_76418_l != nullptr)) {
		return jule::Any(jule::new_struct<_212b1b365_KeyValPair>(new( std::nothrow ) _212b1b365_KeyValPair((*((*this)._method_build_from_tokens(_76418_l)))._field_kind,(*((*this)._method_build_from_tokens(_76425_r)))._field_kind,_76344_tokens[_76418_l.len()])));
	}
	return jule::Any((*this)._method_build_from_tokens(_76344_tokens));
}



inline jule::Ptr<_212b1a9a2_BraceLit> _1e766767e_ExprBuilder::_method_build_brace_lit(jule::Slice<_212ae5c02_Token>& _77639_tokens) {
	jule::Ptr<_212b1a9a2_BraceLit> _77717_lit = jule::new_struct<_212b1a9a2_BraceLit>(new( std::nothrow ) _212b1a9a2_BraceLit(_77639_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_212ae5c02_Token>> _78117_parts = (*this)._method_get_brace_range_lit_expr_parts(_77639_tokens);
	if ((_78117_parts == nullptr)) {
		return _77717_lit;
	}
	(*(_77717_lit))._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_78117_parts.len()));
	{
		auto &expr = _78117_parts;
		auto it = expr.begin();
		_iter_begin_1b71a543e:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b71a51db_part = *it;
			{
				(*(_77717_lit))._field_exprs = jule::alloc_for_append((*(_77717_lit))._field_exprs,1);(*(_77717_lit))._field_exprs.__push((*this)._method_build_brace_lit_part(_1b71a51db_part));
			}
			_iter_next_1b71a543e:;
			++it;
			goto _iter_begin_1b71a543e;
		}
		_iter_end_1b71a543e:;
	}
	return _77717_lit;
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_brace_range(jule::Slice<_212ae5c02_Token>& _79441_tokens) {
	jule::Slice<_212ae5c02_Token> _79518_expr_tokens;
	jule::I64 _79531_range_n;
	std::tie(_79518_expr_tokens,_79531_range_n) = _1e766720b_get_range_expr_tokens(_79441_tokens);
	{
		
		if ((_79518_expr_tokens.len() == 0LL)) {
			_case_begin_1b71a751d:;
			{
				return jule::Any((*this)._method_build_brace_lit(_79441_tokens));
			}
		}
		else if ((_79531_range_n > 0LL)) {
			_case_begin_1b71a7584:;
			{
				(*this)._method_push_err(_79441_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_1b71a7485:;
	}
	_212ae5c02_Token _80613_else_token = _79518_expr_tokens[(_79518_expr_tokens.len() - 1LL)];
	if (_79518_expr_tokens[(_79518_expr_tokens.len() - 1LL)]._field_id == static_cast<jule::U64>(17LLU)) {
		_79518_expr_tokens=_79518_expr_tokens.slice(0LL,(_79518_expr_tokens.len() - 1LL));
		jule::Any _80921_d = (*this)._method_build(_79518_expr_tokens);
		if (_80921_d == jule::Any(nullptr)) {
			return jule::Any(nullptr);
		}
		{
			auto &_match_expr{ _80921_d };
			
			if (_match_expr.type_is<jule::Ptr<_212b19bd2_FnCallExpr>>()) {
				_case_begin_1b71aac4c:;
				{
					_79441_tokens=_79441_tokens.slice((_79518_expr_tokens.len() + 1LL));
					jule::I64 _81625_i = 0LL;
					jule::Slice<_212ae5c02_Token> _81725_range_tokens = _1e767874a_range(_81625_i,jule::Str("{", 1),jule::Str("}", 1),_79441_tokens);
					jule::Ptr<_212b19bd2_FnCallExpr> _81825_model = _80921_d.operator jule::Ptr<_212b19bd2_FnCallExpr>();
					if ((*(_81825_model))._method_ignored()) {
						(*this)._method_push_err(_80613_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					}
					(*(_81825_model))._field_exception=(*((*this)._field_p))._method_build_scope(_81725_range_tokens);
					return _80921_d;
				}
			}
			else {
				_case_begin_1b71aaee4:;
				{
					(*this)._method_push_err(_79518_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return jule::Any(nullptr);
				}
			}
			_match_end_1b71aa93e:;
		}
	}
	{
		auto &_match_expr{ _79518_expr_tokens[0LL]._field_id };
		
		if (_match_expr == static_cast<jule::U64>(35LLU)) {
			_case_begin_1b71b1978:;
			{
				return (*this)._method_build_unsafe(_79441_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(33LLU)) {
			_case_begin_1b71b1857:;
			{
				return jule::Any((*this)._method_build_anon_fn(_79441_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(2LLU) || _match_expr == static_cast<jule::U64>(31LLU)) {
			_case_begin_1b71b18bd:;
			{
				return jule::Any((*this)._method_build_typed_struct_literal(_79441_tokens));
			}
		}
		else {
			_case_begin_1b71a73a8:;
			{
				(*this)._method_push_err(_79518_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_1b71b09ee:;
	}
}



inline jule::Slice<jule::Slice<_212ae5c02_Token>> _1e766767e_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_212ae5c02_Token> _84643_tokens) {
	_84643_tokens=_84643_tokens.slice(1LL,(_84643_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_212ae5c02_Token>> _84818_parts;
	jule::Slice<_21287ea02_Log> _84825_errors;
	std::tie(_84818_parts,_84825_errors) = _1e76797b2_parts(_84643_tokens,static_cast<jule::U64>(8LLU),true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_84825_errors);
	return _84818_parts;
}



inline jule::Ptr<_212b1b7a5_SliceExpr> _1e766767e_ExprBuilder::_method_build_slice(jule::Slice<_212ae5c02_Token> _85334_tokens) {
	jule::Ptr<_212b1b7a5_SliceExpr> _85417_slc = jule::new_struct<_212b1b7a5_SliceExpr>(new( std::nothrow ) _212b1b7a5_SliceExpr(_85334_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_212ae5c02_Token>> _85817_parts = (*this)._method_get_enumerable_parts(_85334_tokens);
	if ((_85817_parts.len() == 0LL)) {
		return _85417_slc;
	}
	(*(_85417_slc))._field_elems=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_85817_parts.len()));
	{
		auto &expr = _85817_parts;
		auto it = expr.begin();
		_iter_begin_1b71b7b27:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b71b7b6b_p = *it;
			{
				if ((_1b71b7b6b_p.len() == 0LL)) {
					goto _iter_next_1b71b7b27;
				}
				(*(_85417_slc))._field_elems = jule::alloc_for_append((*(_85417_slc))._field_elems,1);(*(_85417_slc))._field_elems.__push((*((*this)._method_build_from_tokens(_1b71b7b6b_p)))._field_kind);
			}
			_iter_next_1b71b7b27:;
			++it;
			goto _iter_begin_1b71b7b27;
		}
		_iter_end_1b71b7b27:;
	}
	return _85417_slc;
}



inline jule::Ptr<_212b1bbe5_IndexingExpr> _1e766767e_ExprBuilder::_method_build_indexing(jule::Slice<_212ae5c02_Token> _87437_expr_tokens,jule::Slice<_212ae5c02_Token> _87513_tokens,_212ae5c02_Token _87534_error_token) {
	_87513_tokens=_87513_tokens.slice(1LL,(_87513_tokens.len() - 1LL));
	if ((_87513_tokens.len() == 0LL)) {
		(*this)._method_push_err(_87534_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b16162_Expr> _88117_expr = (*this)._method_build_from_tokens(_87437_expr_tokens);
	if ((_88117_expr == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_212b16162_Expr> _88517_index = (*this)._method_build_from_tokens(_87513_tokens);
	if ((_88517_index == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_212b1bbe5_IndexingExpr>(new( std::nothrow ) _212b1bbe5_IndexingExpr(_87534_error_token,(*(_88117_expr))._field_kind,(*(_88517_index))._field_kind));
}



inline jule::Ptr<_212b1c135_SlicingExpr> _1e766767e_ExprBuilder::_method_build_slicing(jule::Slice<_212ae5c02_Token>& _89637_expr_tokens,jule::Slice<_212ae5c02_Token>& _89664_slicing_tokens,jule::I64& _89710_colon,_212ae5c02_Token& _89727_error_token) {
	jule::Ptr<_212b1c135_SlicingExpr> _89817_slc = jule::new_struct<_212b1c135_SlicingExpr>(new( std::nothrow ) _212b1c135_SlicingExpr(_89727_error_token,(*((*this)._method_build_from_tokens(_89637_expr_tokens)))._field_kind,jule::Any(),jule::Any()));
	jule::Slice<_212ae5c02_Token> _90317_start_expr_tokens = _89664_slicing_tokens.slice(0LL,_89710_colon);
	if ((_90317_start_expr_tokens.len() > 0LL)) {
		(*(_89817_slc))._field_start=(*((*this)._method_build_from_tokens(_90317_start_expr_tokens)))._field_kind;
	}
	jule::Slice<_212ae5c02_Token> _90817_to_expr_tokens = _89664_slicing_tokens.slice((_89710_colon + 1LL));
	if ((_90817_to_expr_tokens.len() > 0LL)) {
		(*(_89817_slc))._field_to=(*((*this)._method_build_from_tokens(_90817_to_expr_tokens)))._field_kind;
	}
	return _89817_slc;
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_bracket_range(jule::Slice<_212ae5c02_Token> _91642_tokens) {
	_212ae5c02_Token _91717_error_token = _91642_tokens[0LL];
	jule::Slice<_212ae5c02_Token> _91818_expr_tokens;
	jule::I64 _91831_range_n;
	std::tie(_91818_expr_tokens,_91831_range_n) = _1e766720b_get_range_expr_tokens(_91642_tokens);
	{
		
		if ((_91818_expr_tokens.len() == 0LL)) {
			_case_begin_1b71c335d:;
			{
				return jule::Any((*this)._method_build_slice(_91642_tokens));
			}
		}
		else if ((_91818_expr_tokens.len() == 0LL) || (_91831_range_n > 0LL)) {
			_case_begin_1b71c33d5:;
			{
				(*this)._method_push_err(_91717_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_1b71c32a3:;
	}
	_91642_tokens=_91642_tokens.slice(_91818_expr_tokens.len());
	jule::I64 _93617_i = 0LL;
	jule::Slice<_212ae5c02_Token> _93718_slicing_tokens;
	jule::I64 _93734_colon;
	std::tie(_93718_slicing_tokens,_93734_colon) = _1e76928b8_split_map_range(_91642_tokens,_93617_i);
	if ((_93734_colon != -1LL)) {
		return jule::Any((*this)._method_build_slicing(_91818_expr_tokens,_93718_slicing_tokens,_93734_colon,_91717_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_91818_expr_tokens,_91642_tokens,_91717_error_token));
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_ternary(jule::Slice<_212ae5c02_Token> _94436_tokens) {
	jule::Ptr<_212b1c575_TernaryExpr> _94517_ter = jule::new_struct<_212b1c575_TernaryExpr>(new( std::nothrow ) _212b1c575_TernaryExpr());
	(*(_94517_ter))._field_token=_94436_tokens[0LL];
	_94436_tokens=_94436_tokens.slice(1LL);
	jule::Slice<_212ae5c02_Token> _94917_expr_tokens = _1e7665dca_get_block_expr(_94436_tokens);
	if ((_94917_expr_tokens.len() == 0LL)) {
		(*this)._method_push_err((*(_94517_ter))._field_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	(*(_94517_ter))._field_condition=(*this)._method_build_kind(_94917_expr_tokens);
	jule::I64 _95617_i = _94917_expr_tokens.len();
	jule::Slice<_212ae5c02_Token> _95717_true_expr = _1e767874a_range(_95617_i,jule::Str("{", 1),jule::Str("}", 1),_94436_tokens);
	if ((_95717_true_expr == nullptr)) {
		(*this)._method_push_err((*(_94517_ter))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_94517_ter);
	} else if ((_95717_true_expr.len() == 0LL)) {
		(*this)._method_push_err(_94436_tokens[_94917_expr_tokens.len()],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_95617_i >= static_cast<jule::I64>(_94436_tokens.len())) {
		(*this)._method_push_err((*(_94517_ter))._field_token,jule::Str("else block missed for ternary operator", 38),jule::Slice<jule::Any>());
		return jule::Any(_94517_ter);
	}
	_212ae5c02_Token _97113_else_token = _94436_tokens[_95617_i];
	if (_97113_else_token._field_id != static_cast<jule::U64>(17LLU)) {
		(*this)._method_push_err(_97113_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("else keyword expected for else block of ternary operator", 56),jule::Slice<jule::Any>());
		return jule::Any(_94517_ter);
	}
	(_95617_i)++;
	jule::I64 _97913_j = _95617_i;
	jule::Slice<_212ae5c02_Token> _98017_false_expr = _1e767874a_range(_95617_i,jule::Str("{", 1),jule::Str("}", 1),_94436_tokens);
	if ((_98017_false_expr == nullptr)) {
		(*this)._method_push_err(_97113_else_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_94517_ter);
	} else if ((_98017_false_expr.len() == 0LL)) {
		(*this)._method_push_err(_94436_tokens[_97913_j],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_95617_i < static_cast<jule::I64>(_94436_tokens.len())) {
		(*this)._method_push_err(_94436_tokens[_95617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_94517_ter))._field_true_expr=(*this)._method_build_kind(_95717_true_expr);
	(*(_94517_ter))._field_false_expr=(*this)._method_build_kind(_98017_false_expr);
	return jule::Any(_94517_ter);
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_data(jule::Slice<_212ae5c02_Token>& _99934_tokens) {
	{
		auto _match_expr{ _99934_tokens.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_1b71d4e74:;
			{
				return jule::Any(nullptr);
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_1b71d4eda:;
			{
				return (*this)._method_build_single(_99934_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_1b71d5051:;
			{
				if (_99934_tokens[0LL]._field_id == static_cast<jule::U64>(31LLU)) {
					return jule::Any((*this)._method_build_cpp_linked_ident(_99934_tokens));
				}
			}
		}
		_match_end_1b71d4cba:;
	}
	_212ae5c02_Token _101117_token = _99934_tokens[0LL];
	{
		auto &_match_expr{ _101117_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(16LLU)) {
			_case_begin_1b71d731c:;
			{
				return (*this)._method_build_ternary(_99934_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b71d7394:;
			{
				if ((_99934_tokens.len() > 1LL) && (_101117_token._field_kind == jule::Str("*", 1))) {
					_101117_token=_99934_tokens[1LL];
					if ((_101117_token._field_id == static_cast<jule::U64>(1LLU)) || (_101117_token._field_id == static_cast<jule::U64>(35LLU))) {
						return jule::Any((*this)._method_build_type(_99934_tokens));
					}
				}
				return jule::Any((*this)._method_build_unary(_99934_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b71d740a:;
			{
				if ((_99934_tokens.len() < 3LL)) {
					goto _match_end_1b71d5727;
				}
				if ((_99934_tokens.len() > 3LL)) {
					_212ae5c02_Token _103221_t = _99934_tokens[(_99934_tokens.len() - 1LL)];
					if ((_103221_t._field_id == static_cast<jule::U64>(3LLU)) && (_103221_t._field_kind == jule::Str(")", 1))) {
						goto _match_end_1b71d5727;
					}
				}
				_212ae5c02_Token _103817_next = _99934_tokens[1LL];
				if ((_103817_next._field_id != static_cast<jule::U64>(3LLU)) || (_103817_next._field_kind != jule::Str("]", 1))) {
					goto _match_end_1b71d5727;
				}
				return jule::Any((*this)._method_build_type(_99934_tokens));
			}
		}
		_match_end_1b71d5727:;
	}
	_101117_token=_99934_tokens[(_99934_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _101117_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(2LLU)) {
			_case_begin_1b71dd6b9:;
			{
				return (*this)._method_build_sub_ident(_99934_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(1LLU)) {
			_case_begin_1b71dd730:;
			{
				return jule::Any((*this)._method_build_type(_99934_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b71dd796:;
			{
				return (*this)._method_build_op_right(_99934_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b71dd81d:;
			{
				{
					auto &_match_expr{ _101117_token._field_kind };
					
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_1b71e0457:;
						{
							return (*this)._method_build_parentheses_range(_99934_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_1b71e04bd:;
						{
							return (*this)._method_build_brace_range(_99934_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_1b71e0567:;
						{
							return (*this)._method_build_bracket_range(_99934_tokens);
						}
					}
					_match_end_1b71e0402:;
				}
			}
		}
		_match_end_1b71dd664:;
	}
	(*this)._method_push_err(_101117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_212b19792_BinopExpr> _1e766767e_ExprBuilder::_method_build_binop(jule::Slice<_212ae5c02_Token>& _106935_tokens,jule::I64 _106952_i) {
	jule::Slice<_212ae5c02_Token> _107017_left_tokens = _106935_tokens.slice(0LL,_106952_i);
	jule::Slice<_212ae5c02_Token> _107117_right_tokens = _106935_tokens.slice((_106952_i + 1LL));
	if ((_107017_left_tokens.len() == 0LL)) {
		(*this)._method_push_err(_106935_tokens[_106952_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((_107117_right_tokens.len() == 0LL)) {
		(*this)._method_push_err(_106935_tokens[_106952_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_212b19792_BinopExpr>(new( std::nothrow ) _212b19792_BinopExpr((*this)._method_build(_107017_left_tokens),(*this)._method_build(_107117_right_tokens),_106935_tokens[_106952_i]));
}



inline jule::Any _1e766767e_ExprBuilder::_method_build(jule::Slice<_212ae5c02_Token>& _108929_tokens) {
	jule::I64 _109013_i = _1e76669e1_find_lowest_prec_op(_108929_tokens);
	if ((_109013_i == -1LL)) {
		return (*this)._method_build_data(_108929_tokens);
	}
	return jule::Any((*this)._method_build_binop(_108929_tokens,_109013_i));
}



inline jule::Any _1e766767e_ExprBuilder::_method_build_kind(jule::Slice<_212ae5c02_Token>& _109734_tokens) {
	jule::Slice<jule::Slice<_212ae5c02_Token>> _109818_parts;
	jule::Slice<_21287ea02_Log> _109825_errors;
	std::tie(_109818_parts,_109825_errors) = _1e76797b2_parts(_109734_tokens,static_cast<jule::U64>(8LLU),true);
	if ((_109825_errors != nullptr)) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_109825_errors);
		return jule::Any(nullptr);
	} else if ((_109818_parts.len() > 1LL)) {
		return jule::Any((*this)._method_build_tuple(_109818_parts));
	}
	return (*this)._method_build(_109734_tokens);
}



inline jule::Ptr<_212b16162_Expr> _1e766767e_ExprBuilder::_method_build_from_tokens(jule::Slice<_212ae5c02_Token> _110840_tokens) {
	_110840_tokens=_1e766676b_eliminate_comments(_110840_tokens);
	if ((_110840_tokens.len() == 0LL)) {
		return nullptr;
	}
	return jule::new_struct<_212b16162_Expr>(new( std::nothrow ) _212b16162_Expr(_110840_tokens[0LL],(*this)._method_build_kind(_110840_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1e766767e_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _1e767b1ba_Parser::_method_stop(void) {
	(*this)._field_ast=nullptr;
}



inline jule::Bool _1e767b1ba_Parser::_method_stopped(void) {
	return ((*this)._field_ast == nullptr);
}



inline void _1e767b1ba_Parser::_method_push_err(_212ae5c02_Token _24027_token,jule::Str _24041_fmt,jule::Slice<jule::Any> _24054_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1e7679ecc_compiler_err(_24027_token,_24041_fmt,_24054_args));
}



inline void _1e767b1ba_Parser::_method_push_suggestion(jule::Str _24534_fmt,jule::Slice<jule::Any> _24547_args) {
	{
		_1e767a4d8_push_suggestion((&((*this)._field_errors[((*this)._field_errors.len() - 1LL)])),_24534_fmt,_24547_args);
	}
}



inline jule::Ptr<_212b16162_Expr> _1e767b1ba_Parser::_method_build_expr(jule::Slice<_212ae5c02_Token>& _24935_tokens) {
	jule::Ptr<_1e766767e_ExprBuilder> _25017_ep = jule::new_struct<_1e766767e_ExprBuilder>(new( std::nothrow ) _1e766767e_ExprBuilder(this->self));
	jule::Ptr<_212b16162_Expr> _25117_expr = (*(_25017_ep))._method_build_from_tokens(_24935_tokens);
	return _25117_expr;
}



inline jule::Ptr<_2129e3902_Directive> _1e767b1ba_Parser::_method_build_directive(jule::Slice<_212ae5c02_Token> _25538_tokens) {
	if ((_25538_tokens.len() == 1LL)) {
		(*this)._method_push_err(_25538_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_25538_tokens[1LL]._field_column != static_cast<jule::I64>((_25538_tokens[0LL]._field_column + 1LL))) {
		(*this)._method_push_err(_25538_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_2129e3902_Directive>(new( std::nothrow ) _2129e3902_Directive(_25538_tokens[1LL],_25538_tokens.slice(2LL)));
}



inline void _1e767b1ba_Parser::_method_push_directive(jule::Ptr<_2129e3902_Directive> _27237_d) {
	if ((_27237_d == nullptr)) {
		return;
	}
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_1b720a9d3:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b720ac9c_pd = *it;
			{
				if ((*(_27237_d))._field_tag._field_kind == (*(_1b720ac9c_pd))._field_tag._field_kind) {
					return;
				}
			}
			_iter_next_1b720a9d3:;
			++it;
			goto _iter_begin_1b720a9d3;
		}
		_iter_end_1b720a9d3:;
	}
	(*this)._field_directives = jule::alloc_for_append((*this)._field_directives,1);(*this)._field_directives.__push(_27237_d);
}



inline jule::Ptr<_212b1e555_ScopeTree> _1e767b1ba_Parser::_method_build_scope(jule::Slice<_212ae5c02_Token>& _28636_tokens) {
	jule::Ptr<_212b1e555_ScopeTree> _28717_s = _1e76528ab_new_scope();
	_1e765489c_ScopeParser _28817_sp = _1e765489c_ScopeParser(this->self,jule::Ptr<_212b1e555_ScopeTree>(),jule::Slice<jule::Ptr<_1e7653d74_Stmt>>(),jule::I64());
	_28817_sp._method_build(_28636_tokens,_28717_s);
	return _28717_s;
}



inline std::tuple<jule::Ptr<_2129e3d42_TypeDecl>,jule::Bool> _1e767b1ba_Parser::_method___build_type(jule::Slice<_212ae5c02_Token>& _29544_tokens,jule::I64* _29613_i,jule::Bool _29622_err) {
	_1e769304a_TypeBuilder _29717_tb = _1e769304a_TypeBuilder(this->self,_29544_tokens,_29613_i,_29622_err);
	jule::Ptr<_2129e3d42_TypeDecl> _30318_decl;
	jule::Bool _30324_ok;
	std::tie(_30318_decl,_30324_ok) = _29717_tb._method_build();
	return std::make_tuple(_30318_decl,_30324_ok);
}



inline std::tuple<jule::Ptr<_2129e3d42_TypeDecl>,jule::Bool> _1e767b1ba_Parser::_method_build_type(jule::Slice<_212ae5c02_Token>& _30842_tokens,jule::I64* _30913_i,jule::Bool _30922_err) {
	_212ae5c02_Token _31013_token = _30842_tokens[(*(_30913_i))];
	jule::Ptr<_2129e3d42_TypeDecl> _31118_t;
	jule::Bool _31121_ok;
	std::tie(_31118_t,_31121_ok) = (*(this->self))._method___build_type(_30842_tokens,_30913_i,_30922_err);
	if (_30922_err && (!(_31121_ok))) {
		(*(this->self))._method_push_err(_31013_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	}
	return std::make_tuple(_31118_t,_31121_ok);
}



inline jule::Ptr<_212b230c5_TypeAliasDecl> _1e767b1ba_Parser::_method_build_type_alias_decl(jule::Slice<_212ae5c02_Token>& _31846_tokens) {
	jule::I64 _31917_i = 1LL;
	if (_31917_i >= static_cast<jule::I64>(_31846_tokens.len())) {
		(*(this->self))._method_push_err(_31846_tokens[(_31917_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b230c5_TypeAliasDecl> _32417_tad = jule::new_struct<_212b230c5_TypeAliasDecl>(new( std::nothrow ) _212b230c5_TypeAliasDecl(jule::Ptr<_212b1e555_ScopeTree>(),jule::Bool(),jule::Bool(),_31846_tokens[1LL],_31846_tokens[1LL]._field_kind,jule::Ptr<_2129e3d42_TypeDecl>(),jule::Ptr<_2129e3072_CommentGroup>()));
	_212ae5c02_Token _32817_token = _31846_tokens[_31917_i];
	if (_32817_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(this->self))._method_push_err(_32817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_31917_i)++;
	if (_31917_i >= static_cast<jule::I64>(_31846_tokens.len())) {
		(*(this->self))._method_push_err(_31846_tokens[(_31917_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	_32817_token=_31846_tokens[_31917_i];
	if (_32817_token._field_id != static_cast<jule::U64>(11LLU)) {
		(*(this->self))._method_push_err(_31846_tokens[(_31917_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	(_31917_i)++;
	if (_31917_i >= static_cast<jule::I64>(_31846_tokens.len())) {
		(*(this->self))._method_push_err(_31846_tokens[(_31917_i - 1LL)],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	jule::Ptr<_2129e3d42_TypeDecl> _34918_t;
	jule::Bool _34921_ok;
	std::tie(_34918_t,_34921_ok) = (*(this->self))._method_build_type(_31846_tokens,(&(_31917_i)),true);
	(*(_32417_tad))._field_kind=_34918_t;
	if (_34921_ok && (_31917_i < static_cast<jule::I64>(_31846_tokens.len()))) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _32417_tad;
}



inline void _1e767b1ba_Parser::_method_build_var_type_and_expr(jule::Ptr<_212b20325_VarDecl>& _35748_v,jule::Slice<_212ae5c02_Token>& _35766_tokens) {
	jule::I64 _35817_i = 0LL;
	_212ae5c02_Token _35917_tok = _35766_tokens[_35817_i];
	if (_35917_tok._field_id == static_cast<jule::U64>(11LLU)) {
		(_35817_i)++;
		if ((_35817_i >= static_cast<jule::I64>(_35766_tokens.len())) || ((_35766_tokens[_35817_i]._field_id == static_cast<jule::U64>(7LLU)) && (_35766_tokens[_35817_i]._field_kind == jule::Str("=", 1)))) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;
		}
		jule::Ptr<_2129e3d42_TypeDecl> _36722_t;
		jule::Bool _36725_ok;
		std::tie(_36722_t,_36725_ok) = (*(this->self))._method_build_type(_35766_tokens,(&(_35817_i)),true);
		if (_36725_ok) {
			(*(_35748_v))._field_kind=_36722_t;
			if (_35817_i >= static_cast<jule::I64>(_35766_tokens.len())) {
				return;
			}
			_35917_tok=_35766_tokens[_35817_i];
		}
	}
	if (_35917_tok._field_id == static_cast<jule::U64>(7LLU)) {
		if ((_35917_tok._field_kind != jule::Str("=", 1))) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;
		}
		jule::Slice<_212ae5c02_Token> _38221_expr_tokens = _35766_tokens.slice((_35817_i + 1LL));
		if ((_38221_expr_tokens.len() == 0LL)) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;
		}
		(*(_35748_v))._field_expr=(*(this->self))._method_build_expr(_38221_expr_tokens);
	} else {
		(*(this->self))._method_push_err(_35917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1e767b1ba_Parser::_method_build_var_common(jule::Ptr<_212b20325_VarDecl>& _39341_v,jule::Slice<_212ae5c02_Token> _39358_tokens) {
	(*(_39341_v))._field_token=_39358_tokens[0LL];
	if ((*(_39341_v))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(this->self))._method_push_err((*(_39341_v))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	(*(_39341_v))._field_ident=(*(_39341_v))._field_token._field_kind;
	(*(_39341_v))._field_kind=nullptr;
	if ((_39358_tokens.len() > 1LL)) {
		_39358_tokens=_39358_tokens.slice(1LL);
		(*(this->self))._method_build_var_type_and_expr(_39341_v,_39358_tokens);
	}
}



inline void _1e767b1ba_Parser::_method_build_var_begin(jule::Ptr<_212b20325_VarDecl>& _40839_v,jule::Ptr<jule::I64> _40856_i,jule::Slice<_212ae5c02_Token>& _40866_tokens) {
	_212ae5c02_Token _40913_tok = _40866_tokens[(*(_40856_i))];
	{
		auto &_match_expr{ _40913_tok._field_id };
		
		if (_match_expr == static_cast<jule::U64>(38LLU)) {
			_case_begin_1b722bd89:;
			{
				(*(_40839_v))._field_statically=true;
				goto _case_begin_1b722b4e8;
			}
		}
		else if (_match_expr == static_cast<jule::U64>(34LLU)) {
			_case_begin_1b722b4e8:;
			{
				((*(_40856_i)))++;
				if ((*(_40856_i)) >= static_cast<jule::I64>(_40866_tokens.len())) {
					(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				if (_40866_tokens[(*(_40856_i))]._field_id == static_cast<jule::U64>(36LLU)) {
					(*(_40839_v))._field_mutable=true;
					((*(_40856_i)))++;
				}
			}
		}
		else if (_match_expr == static_cast<jule::U64>(9LLU)) {
			_case_begin_1b722b55e:;
			{
				((*(_40856_i)))++;
				(*(_40839_v))._field_constant=true;
			}
		}
		else {
			_case_begin_1b722acab:;
			{
				(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_1b722b163:;
	}
	if ((*(_40856_i)) >= static_cast<jule::I64>(_40866_tokens.len())) {
		(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_212b20325_VarDecl> _1e767b1ba_Parser::_method_build_var(jule::Slice<_212ae5c02_Token> _44233_tokens) {
	jule::Ptr<jule::I64> _44317_i = jule::new_ptr<jule::I64>(0LL);
	jule::Ptr<_212b20325_VarDecl> _44417_v = jule::new_struct<_212b20325_VarDecl>(new( std::nothrow ) _212b20325_VarDecl(jule::Ptr<_212b1e555_ScopeTree>(),_44233_tokens[(*(_44317_i))],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_2129e3072_CommentGroup>(),jule::Ptr<_2129e3d42_TypeDecl>(),jule::Ptr<_212b16162_Expr>()));
	(*(this->self))._method_build_var_begin(_44417_v,_44317_i,_44233_tokens);
	if ((*(_44317_i)) >= static_cast<jule::I64>(_44233_tokens.len())) {
		return nullptr;
	}
	_44233_tokens=_44233_tokens.slice((*(_44317_i)));
	if ((_44233_tokens[0LL]._field_id == static_cast<jule::U64>(7LLU)) && (_44233_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		(*(_44417_v))._field_reference=true;
		if ((_44233_tokens.len() == 1LL)) {
			return nullptr;
		}
		_44233_tokens=_44233_tokens.slice(1LL);
	}
	(*(this->self))._method_build_var_common(_44417_v,_44233_tokens);
	return _44417_v;
}



inline jule::Ptr<_212b1c9b5_GenericDecl> _1e767b1ba_Parser::_method_build_generic(jule::Slice<_212ae5c02_Token>& _46437_tokens) {
	if ((_46437_tokens.len() > 1LL)) {
		(*this)._method_push_err(_46437_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	jule::Ptr<_212b1c9b5_GenericDecl> _46817_g = jule::new_struct<_212b1c9b5_GenericDecl>(new( std::nothrow ) _212b1c9b5_GenericDecl(_46437_tokens[0LL],jule::Str()));
	if ((*(_46817_g))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*this)._method_push_err((*(_46817_g))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_46817_g))._field_ident=(*(_46817_g))._field_token._field_kind;
	return _46817_g;
}



inline jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _1e767b1ba_Parser::_method_build_generics(jule::Slice<_212ae5c02_Token>& _47938_tokens,_212ae5c02_Token& _47956_error_token) {
	if ((_47938_tokens.len() == 0LL)) {
		(*this)._method_push_err(_47956_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<jule::Slice<_212ae5c02_Token>> _48518_parts;
	jule::Slice<_21287ea02_Log> _48525_errors;
	std::tie(_48518_parts,_48525_errors) = _1e76797b2_parts(_47938_tokens,static_cast<jule::U64>(8LLU),true);
	if ((_48525_errors.len() > 0LL)) {
		(*this)._field_errors=jule::append((*this)._field_errors,_48525_errors);
		return nullptr;
	}
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _49117_generics = jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>::alloc(0LL,static_cast<jule::I64>(_48518_parts.len()));
	{
		auto &expr = _48518_parts;
		auto it = expr.begin();
		_iter_begin_1b723bbac:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b723bdcc_part = *it;
			{
				_49117_generics = jule::alloc_for_append(_49117_generics,1);_49117_generics.__push((*this)._method_build_generic(_1b723bdcc_part));
			}
			_iter_next_1b723bbac:;
			++it;
			goto _iter_begin_1b723bbac;
		}
		_iter_end_1b723bbac:;
	}
	return _49117_generics;
}



inline jule::Ptr<_212b1e995_ParamDecl> _1e767b1ba_Parser::_method_build_self_param(jule::Slice<_212ae5c02_Token> _49939_tokens) {
	if ((_49939_tokens.len() == 0LL)) {
		return nullptr;
	}
	jule::Ptr<_212b1e995_ParamDecl> _50417_param = jule::new_struct<_212b1e995_ParamDecl>(new( std::nothrow ) _212b1e995_ParamDecl());
	jule::I64 _50717_i = 0LL;
	if (_49939_tokens[_50717_i]._field_id == static_cast<jule::U64>(36LLU)) {
		(*(_50417_param))._field_mutable=true;
		(_50717_i)++;
		if (_50717_i >= static_cast<jule::I64>(_49939_tokens.len())) {
			(*this)._method_push_err(_49939_tokens[(_50717_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if ((_49939_tokens[_50717_i]._field_kind == jule::Str("&", 1))) {
		(*(_50417_param))._field_ident=jule::Str("&", 1);
		(_50717_i)++;
		if (_50717_i >= static_cast<jule::I64>(_49939_tokens.len())) {
			(*this)._method_push_err(_49939_tokens[(_50717_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49939_tokens[_50717_i]._field_id == static_cast<jule::U64>(28LLU)) {
		(*(_50417_param))._field_ident+=jule::Str("self", 4);
		(*(_50417_param))._field_token=_49939_tokens[_50717_i];
		(_50717_i)++;
		if (_50717_i < static_cast<jule::I64>(_49939_tokens.len())) {
			(*this)._method_push_err(_49939_tokens[_50717_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	}
	return _50417_param;
}



inline void _1e767b1ba_Parser::_method_param_type_begin(jule::Ptr<_212b1e995_ParamDecl>& _53840_param,jule::I64& _53864_i,jule::Slice<_212ae5c02_Token>& _53873_tokens) {
	for (; _53864_i < static_cast<jule::I64>(_53873_tokens.len()); (_53864_i)++) {
		{
			_212ae5c02_Token _54017_token = _53873_tokens[_53864_i];
			if (_54017_token._field_id != static_cast<jule::U64>(7LLU)) {
				return;
			} else if ((_54017_token._field_kind != jule::Str("...", 3))) {
				return;
			}
			if ((*(_53840_param))._field_variadic) {
				(*this)._method_push_err(_54017_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_1b7245028;
			}
			(*(_53840_param))._field_variadic=true;
		}
	_iter_next_1b7245028:;
	}
	_iter_end_1b7245028:;
}



inline void _1e767b1ba_Parser::_method_build_param_type(jule::Ptr<_212b1e995_ParamDecl>& _55541_param,jule::Slice<_212ae5c02_Token>& _55565_tokens) {
	jule::I64 _55617_i = 0LL;
	(*(this->self))._method_param_type_begin(_55541_param,_55617_i,_55565_tokens);
	if (_55617_i >= static_cast<jule::I64>(_55565_tokens.len())) {
		return;
	}
	std::tie((*(_55541_param))._field_kind,std::ignore) = (*(this->self))._method_build_type(_55565_tokens,(&(_55617_i)),true);
	if (_55617_i < static_cast<jule::I64>(_55565_tokens.len())) {
		(*(this->self))._method_push_err(_55565_tokens[_55617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1e767b1ba_Parser::_method_param_body_id(jule::Ptr<_212b1e995_ParamDecl> _56832_param,_212ae5c02_Token _56851_token) {
	if (_212ae9255_is_ignore_ident(_56851_token._field_kind)) {
		(*(_56832_param))._field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	(*(_56832_param))._field_ident=_56851_token._field_kind;
}



inline void _1e767b1ba_Parser::_method_build_param_body(jule::Ptr<_212b1e995_ParamDecl>& _57641_param,jule::Ptr<jule::I64> _57664_i,jule::Slice<_212ae5c02_Token> _57677_tokens) {
	(*(this->self))._method_param_body_id(_57641_param,_57677_tokens[(*(_57664_i))]);
	_212ae5c02_Token _57817_tok = _57677_tokens[(*(_57664_i))];
	if (((*(_57664_i)) + 1LL) >= static_cast<jule::I64>(_57677_tokens.len())) {
		return;
	} else if ((((_57677_tokens.len() - (*(_57664_i))) - 1LL) < 2LL)) {
		(*(this->self))._method_push_err(_57817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;
	}
	_57817_tok=_57677_tokens[((*(_57664_i)) + 1LL)];
	if (_57817_tok._field_id != static_cast<jule::U64>(11LLU)) {
		(*(this->self))._method_build_param_type(_57641_param,_57677_tokens);
		return;
	}
	_57677_tokens=_57677_tokens.slice(((*(_57664_i)) + 2LL));
	(*(this->self))._method_build_param_type(_57641_param,_57677_tokens);
}



inline jule::Ptr<_212b1e995_ParamDecl> _1e767b1ba_Parser::_method_build_param(jule::Slice<_212ae5c02_Token> _59735_tokens) {
	jule::Ptr<_212b1e995_ParamDecl> _59817_param = jule::new_struct<_212b1e995_ParamDecl>(new( std::nothrow ) _212b1e995_ParamDecl(_59735_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_2129e3d42_TypeDecl>(),jule::Str()));
	if ((*(_59817_param))._field_token._field_id == static_cast<jule::U64>(36LLU)) {
		(*(_59817_param))._field_mutable=true;
		if ((_59735_tokens.len() == 1LL)) {
			(*(this->self))._method_push_err(_59735_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_59735_tokens=_59735_tokens.slice(1LL);
		(*(_59817_param))._field_token=_59735_tokens[0LL];
	}
	if ((_59735_tokens.len() >= 3LL)) {
		if (((*(_59817_param))._field_token._field_id == static_cast<jule::U64>(7LLU)) && ((*(_59817_param))._field_token._field_kind == jule::Str("&", 1))) {
			if ((_59735_tokens.len() == 1LL)) {
				(*(this->self))._method_push_err(_59735_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
			if ((_59735_tokens[1LL]._field_id == static_cast<jule::U64>(2LLU)) && (_59735_tokens[2LL]._field_id == static_cast<jule::U64>(11LLU))) {
				(*(_59817_param))._field_reference=true;
				_59735_tokens=_59735_tokens.slice(1LL);
				(*(_59817_param))._field_token=_59735_tokens[0LL];
			}
		}
	}
	if ((*(_59817_param))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(_59817_param))._field_ident=jule::Str("<anonymous>", 11);
		(*(this->self))._method_build_param_type(_59817_param,_59735_tokens);
	} else {
		jule::Ptr<jule::I64> _63421_i = jule::new_ptr<jule::I64>(0LL);
		(*(this->self))._method_build_param_body(_59817_param,_63421_i,_59735_tokens);
	}
	return _59817_param;
}



inline void _1e767b1ba_Parser::_method_check_params(jule::Slice<jule::Ptr<_212b1e995_ParamDecl>>& _64136_params) {
	{
		auto &expr = _64136_params;
		auto it = expr.begin();
		_iter_begin_1b725b5d3:;
		if (it != expr.end()) {
			jule::Ptr<_212b1e995_ParamDecl> _1b725b715_param = *it;
			{
				if ((*(_1b725b715_param))._method_is_self() || ((*(_1b725b715_param))._field_kind != nullptr)) {
					goto _iter_next_1b725b5d3;
				}
				if ((*(_1b725b715_param))._field_token._field_id == static_cast<jule::U64>(0LLU)) {
					(*this)._method_push_err((*(_1b725b715_param))._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					(*(_1b725b715_param))._field_kind=jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl((*(_1b725b715_param))._field_token,jule::Any(jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl((*(_1b725b715_param))._field_token,(*(_1b725b715_param))._field_token._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>())))));
					(*(_1b725b715_param))._field_ident=jule::Str("<anonymous>", 11);
					(*(_1b725b715_param))._field_token=_212ae5c02_Token();
				}
			}
			_iter_next_1b725b5d3:;
			++it;
			goto _iter_begin_1b725b5d3;
		}
		_iter_end_1b725b5d3:;
	}
}



inline jule::Slice<jule::Ptr<_212b1e995_ParamDecl>> _1e767b1ba_Parser::_method_build_params(jule::Slice<_212ae5c02_Token>& _66237_tokens,jule::Bool _66254_method) {
	jule::Slice<jule::Slice<_212ae5c02_Token>> _66318_parts;
	jule::Slice<_21287ea02_Log> _66325_errs;
	std::tie(_66318_parts,_66325_errs) = _1e76797b2_parts(_66237_tokens,static_cast<jule::U64>(8LLU),true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_66325_errs);
	if ((_66318_parts.len() == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_212b1e995_ParamDecl>> _66917_params = nullptr;
	if (_66254_method && (_66318_parts.len() > 0LL)) {
		jule::Ptr<_212b1e995_ParamDecl> _67121_param = (*(this->self))._method_build_self_param(_66318_parts[0LL]);
		if ((_67121_param != nullptr) && (*(_67121_param))._method_is_self()) {
			_66917_params = jule::alloc_for_append(_66917_params,1);_66917_params.__push(_67121_param);
			_66318_parts=_66318_parts.slice(1LL);
		}
	}
	{
		auto &expr = _66318_parts;
		auto it = expr.begin();
		_iter_begin_1b7262892:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b726450e_part = *it;
			{
				jule::Ptr<_212b1e995_ParamDecl> _67921_param = (*(this->self))._method_build_param(_1b726450e_part);
				if ((_67921_param != nullptr)) {
					_66917_params = jule::alloc_for_append(_66917_params,1);_66917_params.__push(_67921_param);
				}
			}
			_iter_next_1b7262892:;
			++it;
			goto _iter_begin_1b7262892;
		}
		_iter_end_1b7262892:;
	}
	(*(this->self))._method_check_params(_66917_params);
	return _66917_params;
}



inline std::tuple<jule::Ptr<_212b15c22_RetTypeDecl>,jule::Bool> _1e767b1ba_Parser::_method_build_multi_ret_type(jule::Slice<_212ae5c02_Token>& _68945_tokens,jule::I64& _68967_i) {
	jule::Ptr<_212b15c22_RetTypeDecl> _68977_t = jule::Ptr<_212b15c22_RetTypeDecl>();
	jule::Bool _68994_ok = jule::Bool();
	_68977_t=jule::new_struct<_212b15c22_RetTypeDecl>(new( std::nothrow ) _212b15c22_RetTypeDecl());
	(_68967_i)++;
	if (_68967_i >= static_cast<jule::I64>(_68945_tokens.len())) {
		(_68967_i)--;
		std::tie((*(_68977_t))._field_kind,_68994_ok) = (*(this->self))._method_build_type(_68945_tokens,(&(_68967_i)),false);
		return std::make_tuple(_68977_t,_68994_ok);
	}
	(_68967_i)--;
	jule::Slice<_212ae5c02_Token> _69917_range_tokens = _1e767874a_range(_68967_i,jule::Str("(", 1),jule::Str(")", 1),_68945_tokens);
	jule::Slice<jule::Slice<_212ae5c02_Token>> _70118_parts;
	jule::Slice<_21287ea02_Log> _70125_errs;
	std::tie(_70118_parts,_70125_errs) = _1e76797b2_parts(_69917_range_tokens,static_cast<jule::U64>(8LLU),true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_70125_errs);
	if ((_70118_parts.len() == 0LL)) {
		return std::make_tuple(_68977_t,_68994_ok);
	}
	jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _70717_types = jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_70118_parts.len()));
	(*(_68977_t))._field_idents=jule::Slice<_212ae5c02_Token>::alloc(0LL,static_cast<jule::I64>(_70118_parts.len()));
	{
		auto &expr = _70118_parts;
		auto it = expr.begin();
		_iter_begin_1b726b7ad:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b726b802_part = *it;
			{
				_212ae5c02_Token _71021_token = _1b726b802_part[0LL];
				jule::I64 _71121_offset = 0LL;
				if ((_1b726b802_part.len() > 1LL)) {
					_71021_token=_1b726b802_part[1LL];
					if (_71021_token._field_id == static_cast<jule::U64>(11LLU)) {
						_71121_offset=2LL;
						if ((_1b726b802_part.len() < 3LL)) {
							(*(this->self))._method_push_err(_71021_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_1b726b7ad;
						}
					}
				}
				_71021_token=_1b726b802_part[0LL];
				if ((_71121_offset == 2LL)) {
					if (_71021_token._field_id != static_cast<jule::U64>(2LLU)) {
					}
					(*(_68977_t))._field_idents = jule::alloc_for_append((*(_68977_t))._field_idents,1);(*(_68977_t))._field_idents.__push(_71021_token);
				} else {
					_71021_token._field_kind=jule::Str("_", 1);
					(*(_68977_t))._field_idents = jule::alloc_for_append((*(_68977_t))._field_idents,1);(*(_68977_t))._field_idents.__push(_71021_token);
				}
				jule::Ptr<_2129e3d42_TypeDecl> _73622_tk;
				std::tie(_73622_tk,std::ignore) = (*(this->self))._method_build_type(_1b726b802_part,(&(_71121_offset)),true);
				if (_71121_offset < static_cast<jule::I64>(_1b726b802_part.len())) {
					(*(this->self))._method_push_err(_1b726b802_part[_71121_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_70717_types = jule::alloc_for_append(_70717_types,1);_70717_types.__push(_73622_tk);
			}
			_iter_next_1b726b7ad:;
			++it;
			goto _iter_begin_1b726b7ad;
		}
		_iter_end_1b726b7ad:;
	}
	if ((_70717_types.len() > 1LL)) {
		(*(_68977_t))._field_kind=jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_68945_tokens[0LL],jule::Any(jule::new_struct<_212b14a12_TupleTypeDecl>(new( std::nothrow ) _212b14a12_TupleTypeDecl(_70717_types)))));
	} else {
		(*(_68977_t))._field_kind=_70717_types[0LL];
	}
	_68994_ok=true;
	return std::make_tuple(_68977_t,_68994_ok);
}



inline std::tuple<jule::Ptr<_212b15c22_RetTypeDecl>,jule::Bool> _1e767b1ba_Parser::_method_build_ret_type(jule::Slice<_212ae5c02_Token>& _75939_tokens,jule::I64& _75961_i) {
	jule::Ptr<_212b15c22_RetTypeDecl> _75971_t = jule::Ptr<_212b15c22_RetTypeDecl>();
	jule::Bool _75988_ok = jule::Bool();
	_75971_t=jule::new_struct<_212b15c22_RetTypeDecl>(new( std::nothrow ) _212b15c22_RetTypeDecl());
	if (_75961_i >= static_cast<jule::I64>(_75939_tokens.len())) {
		return std::make_tuple(_75971_t,_75988_ok);
	}
	_212ae5c02_Token _76517_token = _75939_tokens[_75961_i];
	{
		auto &_match_expr{ _76517_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b72763cd:;
			{
				if ((_76517_token._field_kind == jule::Str("{", 1))) {
					return std::make_tuple(_75971_t,_75988_ok);
				}
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b7276499:;
			{
				if ((_76517_token._field_kind == jule::Str("=", 1))) {
					return std::make_tuple(_75971_t,_75988_ok);
				}
			}
		}
		else if (_match_expr == static_cast<jule::U64>(11LLU)) {
			_case_begin_1b7276510:;
			{
				if ((_75961_i + 1LL) >= static_cast<jule::I64>(_75939_tokens.len())) {
					(*(this->self))._method_push_err(_76517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_75971_t,_75988_ok);
				}
				(_75961_i)++;
				_76517_token=_75939_tokens[_75961_i];
				if (_76517_token._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _76517_token._field_kind };
						
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_1b7279348:;
							{
								std::tie(_75971_t,_75988_ok) = (*(this->self))._method_build_multi_ret_type(_75939_tokens,_75961_i);
								return std::make_tuple(_75971_t,_75988_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_1b72793ae:;
							{
								(*(this->self))._method_push_err(_76517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_75971_t,_75988_ok);
							}
						}
						_match_end_1b72792b0:;
					}
				}
				std::tie((*(_75971_t))._field_kind,_75988_ok) = (*(this->self))._method_build_type(_75939_tokens,(&(_75961_i)),true);
				return std::make_tuple(_75971_t,_75988_ok);
			}
		}
		_match_end_1b7276378:;
	}
	(_75961_i)++;
	(*(this->self))._method_push_err(_76517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_75971_t,_75988_ok);
}



inline jule::Ptr<_212b1edd5_FnDecl> _1e767b1ba_Parser::_method_build_fn_prototype(jule::Slice<_212ae5c02_Token>& _80443_tokens,jule::I64& _80465_i,jule::Bool _80473_method) {
	jule::Ptr<_212b1edd5_FnDecl> _80517_f = jule::new_struct<_212b1edd5_FnDecl>(new( std::nothrow ) _212b1edd5_FnDecl(_80443_tokens[_80465_i],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_2129e3072_CommentGroup>(),jule::Ptr<_212b1e555_ScopeTree>(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),jule::Ptr<_212b15c22_RetTypeDecl>(),jule::Slice<jule::Ptr<_212b1e995_ParamDecl>>()));
	if ((*(_80517_f))._field_token._field_id == static_cast<jule::U64>(38LLU)) {
		(*(_80517_f))._field_statically=true;
		(_80465_i)++;
		if (_80465_i >= static_cast<jule::I64>(_80443_tokens.len())) {
			(*(this->self))._method_push_err((*(_80517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80517_f))._field_token=_80443_tokens[_80465_i];
	}
	if ((*(_80517_f))._field_token._field_id == static_cast<jule::U64>(35LLU)) {
		(*(_80517_f))._field_unsafety=true;
		(_80465_i)++;
		if (_80465_i >= static_cast<jule::I64>(_80443_tokens.len())) {
			(*(this->self))._method_push_err((*(_80517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80517_f))._field_token=_80443_tokens[_80465_i];
	}
	(_80465_i)++;
	if (_80465_i >= static_cast<jule::I64>(_80443_tokens.len())) {
		(*(this->self))._method_push_err((*(_80517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_212ae5c02_Token _83813_tok = _80443_tokens[_80465_i];
	if (_83813_tok._field_id == static_cast<jule::U64>(2LLU)) {
		(_80465_i)++;
		if (_80465_i >= static_cast<jule::I64>(_80443_tokens.len())) {
			(*(this->self))._method_push_err((*(_80517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80517_f))._field_ident=_83813_tok._field_kind;
	} else {
		(*(_80517_f))._field_ident=jule::Str("<anonymous>", 11);
	}
	_212ae5c02_Token _85013_error_token = _80443_tokens[_80465_i];
	jule::Slice<_212ae5c02_Token> _85117_generics_tokens = _1e767874a_range(_80465_i,jule::Str("[", 1),jule::Str("]", 1),_80443_tokens);
	if ((_85117_generics_tokens != nullptr)) {
		(*(_80517_f))._field_generics=(*(this->self))._method_build_generics(_85117_generics_tokens,_85013_error_token);
	}
	if ((_80443_tokens[_80465_i]._field_kind != jule::Str("(", 1))) {
		(*(this->self))._method_push_err(_80443_tokens[_80465_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_212ae5c02_Token> _86117_params_toks = _1e767874a_range(_80465_i,jule::Str("(", 1),jule::Str(")", 1),_80443_tokens);
	if ((_86117_params_toks.len() > 0LL)) {
		(*(_80517_f))._field_params=(*(this->self))._method_build_params(_86117_params_toks,_80473_method);
	}
	if (_80465_i < static_cast<jule::I64>(_80443_tokens.len())) {
		_212ae5c02_Token _86717_token = _80443_tokens[_80465_i];
		if ((_86717_token._field_id == static_cast<jule::U64>(7LLU)) && (_86717_token._field_kind == jule::Str("!", 1))) {
			(*(_80517_f))._field_exceptional=true;
			(_80465_i)++;
		}
	}
	std::tie((*(_80517_f))._field_result,std::ignore) = (*(this->self))._method_build_ret_type(_80443_tokens,_80465_i);
	return _80517_f;
}



inline jule::Ptr<_212b1edd5_FnDecl> _1e767b1ba_Parser::_method_build_fn(jule::Slice<_212ae5c02_Token>& _88033_tokens,jule::Bool _88050_method,jule::Bool _88064_prototype) {
	jule::I64 _88117_i = 0LL;
	jule::Ptr<_212b1edd5_FnDecl> _88217_f = (*(this->self))._method_build_fn_prototype(_88033_tokens,_88117_i,_88050_method);
	if (_88064_prototype) {
		if (_88117_i < static_cast<jule::I64>(_88033_tokens.len())) {
			(*(this->self))._method_push_err(_88033_tokens[(_88117_i + 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		return _88217_f;
	} else if ((_88217_f == nullptr)) {
		return _88217_f;
	}
	if (_88117_i >= static_cast<jule::I64>(_88033_tokens.len())) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88217_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_212ae5c02_Token> _89817_block_tokens = _1e767874a_range(_88117_i,jule::Str("{", 1),jule::Str("}", 1),_88033_tokens);
	if ((_89817_block_tokens != nullptr)) {
		(*(_88217_f))._field_scope=(*(this->self))._method_build_scope(_89817_block_tokens);
		(*((*(_88217_f))._field_scope))._field_unsafety=(*(_88217_f))._field_unsafety;
		if (_88117_i < static_cast<jule::I64>(_88033_tokens.len())) {
			(*(this->self))._method_push_err(_88033_tokens[_88117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88217_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _88217_f;
}



inline jule::Slice<_212ae5c02_Token> _1e767b1ba_Parser::_method_get_use_decl_selectors(jule::Slice<_212ae5c02_Token> _91445_tokens) {
	jule::I64 _91517_i = 0LL;
	_91445_tokens=_1e767874a_range(_91517_i,jule::Str("{", 1),jule::Str("}", 1),_91445_tokens);
	jule::Slice<jule::Slice<_212ae5c02_Token>> _91718_parts;
	jule::Slice<_21287ea02_Log> _91725_errs;
	std::tie(_91718_parts,_91725_errs) = _1e76797b2_parts(_91445_tokens,static_cast<jule::U64>(8LLU),true);
	if ((_91725_errs.len() > 0LL)) {
		(*this)._field_errors=jule::append((*this)._field_errors,_91725_errs);
		return nullptr;
	}
	jule::Slice<_212ae5c02_Token> _92317_selectors = jule::Slice<_212ae5c02_Token>::alloc(0LL,static_cast<jule::I64>(_91718_parts.len()));
	{
		auto &expr = _91718_parts;
		auto it = expr.begin();
		_iter_begin_1b7295b28:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b7296ad5_part = *it;
			{
				if ((_1b7296ad5_part.len() > 1LL)) {
					(*this)._method_push_err(_1b7296ad5_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_212ae5c02_Token _92821_tok = _1b7296ad5_part[0LL];
				if ((_92821_tok._field_id != static_cast<jule::U64>(2LLU)) && (_92821_tok._field_id != static_cast<jule::U64>(28LLU))) {
					(*this)._method_push_err(_92821_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_1b7295b28;
				}
				_92317_selectors = jule::alloc_for_append(_92317_selectors,1);_92317_selectors.__push(_92821_tok);
			}
			_iter_next_1b7295b28:;
			++it;
			goto _iter_begin_1b7295b28;
		}
		_iter_end_1b7295b28:;
	}
	return _92317_selectors;
}



inline void _1e767b1ba_Parser::_method_build_cpp_use_decl(jule::Ptr<_212b23d95_UseDecl>& _93942_decl,jule::Slice<_212ae5c02_Token>& _93959_tokens) {
	if ((_93959_tokens.len() > 1LL)) {
		(*this)._method_push_err(_93959_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_212ae5c02_Token _94313_token = _93959_tokens[0LL];
	if ((_94313_token._field_id != static_cast<jule::U64>(6LLU)) || ((_94313_token._field_kind[0LL] != '`') && (_94313_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_94313_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	(*(_93942_decl))._field_cpp_linked=true;
	(*(_93942_decl))._field_link_path=_94313_token._field_kind.slice(1LL,(_94313_token._field_kind.len() - 1LL));
	if ((!(_21286e382_is_std_header_path((*(_93942_decl))._field_link_path)))) {
		(*(_93942_decl))._field_link_path=_211dc6ce7_join(jule::Slice<jule::Str>({(*(_94313_token._field_file))._method_dir(),(*(_93942_decl))._field_link_path}));
	}
}



inline void _1e767b1ba_Parser::_method_build_std_use_decl(jule::Ptr<_212b23d95_UseDecl>& _95542_decl,jule::Slice<_212ae5c02_Token> _95562_tokens) {
	(*(_95542_decl))._field_std=true;
	_212ae5c02_Token _95817_token = _95562_tokens[0LL];
	if ((_95562_tokens.len() < 3LL)) {
		(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_95562_tokens=_95562_tokens.slice(2LL);
	_95817_token=_95562_tokens[(_95562_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _95817_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(23LLU)) {
			_case_begin_1b72a2c34:;
			{
				(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b72a2c9a:;
			{
				if ((_95817_token._field_kind != jule::Str("}", 1))) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_212ae5c02_Token> _97621_selectors = nullptr;
				std::tie(_95562_tokens,_97621_selectors) = _1e767898c_range_last(_95562_tokens);
				(*(_95542_decl))._field_selected=(*this)._method_get_use_decl_selectors(_97621_selectors);
				if ((_95562_tokens.len() == 0LL)) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95817_token=_95562_tokens[(_95562_tokens.len() - 1LL)];
				if (_95817_token._field_id != static_cast<jule::U64>(23LLU)) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95562_tokens=_95562_tokens.slice(0LL,(_95562_tokens.len() - 1LL));
				if ((_95562_tokens.len() == 0LL)) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b72a2d11:;
			{
				if ((_95817_token._field_kind != jule::Str("*", 1))) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95562_tokens=_95562_tokens.slice(0LL,(_95562_tokens.len() - 1LL));
				if ((_95562_tokens.len() == 0LL)) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95817_token=_95562_tokens[(_95562_tokens.len() - 1LL)];
				if (_95817_token._field_id != static_cast<jule::U64>(23LLU)) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95562_tokens=_95562_tokens.slice(0LL,(_95562_tokens.len() - 1LL));
				if ((_95562_tokens.len() == 0LL)) {
					(*this)._method_push_err(_95817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_95542_decl))._field_full=true;
			}
		}
		_match_end_1b72a2bce:;
	}
	(*(_95542_decl))._field_link_path=jule::Str("std::", 5) + _1e767ad68_tokstoa(_95562_tokens);
}



inline void _1e767b1ba_Parser::_method_build_ident_use_decl(jule::Ptr<_212b23d95_UseDecl>& _101944_decl,jule::Slice<_212ae5c02_Token> _101964_tokens) {
	(*(_101944_decl))._field_std=false;
	_212ae5c02_Token _102217_token = _101964_tokens[(_101964_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _102217_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(23LLU)) {
			_case_begin_1b72ae68b:;
			{
				(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b72ae702:;
			{
				if ((_102217_token._field_kind != jule::Str("}", 1))) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_212ae5c02_Token> _103421_selectors = nullptr;
				std::tie(_101964_tokens,_103421_selectors) = _1e767898c_range_last(_101964_tokens);
				(*(_101944_decl))._field_selected=(*this)._method_get_use_decl_selectors(_103421_selectors);
				if ((_101964_tokens.len() == 0LL)) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102217_token=_101964_tokens[(_101964_tokens.len() - 1LL)];
				if (_102217_token._field_id != static_cast<jule::U64>(23LLU)) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_101964_tokens=_101964_tokens.slice(0LL,(_101964_tokens.len() - 1LL));
				if ((_101964_tokens.len() == 0LL)) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b72ae768:;
			{
				if ((_102217_token._field_kind != jule::Str("*", 1))) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_101964_tokens=_101964_tokens.slice(0LL,(_101964_tokens.len() - 1LL));
				if ((_101964_tokens.len() == 0LL)) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102217_token=_101964_tokens[(_101964_tokens.len() - 1LL)];
				if (_102217_token._field_id != static_cast<jule::U64>(23LLU)) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_101964_tokens=_101964_tokens.slice(0LL,(_101964_tokens.len() - 1LL));
				if ((_101964_tokens.len() == 0LL)) {
					(*this)._method_push_err(_102217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_101944_decl))._field_full=true;
			}
		}
		_match_end_1b72ae58c:;
	}
	(*(_101944_decl))._field_link_path=_1e767ad68_tokstoa(_101964_tokens);
}



inline void _1e767b1ba_Parser::_method_parse_use_decl(jule::Ptr<_212b23d95_UseDecl>& _108438_decl,jule::Slice<_212ae5c02_Token> _108458_tokens) {
	if ((*(_108438_decl))._field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_108438_decl,_108458_tokens);
		return;
	}
	_212ae5c02_Token _109017_token = _108458_tokens[0LL];
	if (_109017_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*this)._method_push_err(_109017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	if ((_108458_tokens.len() > 2LL) && (_108458_tokens[1LL]._field_id == static_cast<jule::U64>(12LLU))) {
		(*(_108438_decl))._field_alias=_109017_token._field_kind;
		if (_108458_tokens[2LL]._field_id != static_cast<jule::U64>(2LLU)) {
			(*this)._method_push_err(_109017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;
		}
		_108458_tokens=_108458_tokens.slice(2LL);
		_109017_token=_108458_tokens[0LL];
	}
	
	{
		
		if ((_109017_token._field_kind == jule::Str("std", 3))) {
			_case_begin_1b72c047c:;
			{
				(*this)._method_build_std_use_decl(_108438_decl,_108458_tokens);
			}
		}
		else {
			_case_begin_1b72beba7:;
			{
				(*this)._method_build_ident_use_decl(_108438_decl,_108458_tokens);
			}
		}
		_match_end_1b72beb30:;
	}
}



inline jule::Ptr<_212b23d95_UseDecl> _1e767b1ba_Parser::_method_build_use_decl(jule::Slice<_212ae5c02_Token> _111937_tokens,jule::Bool _111954_cpp_linked) {
	jule::Ptr<_212b23d95_UseDecl> _112017_decl = jule::new_struct<_212b23d95_UseDecl>(new( std::nothrow ) _212b23d95_UseDecl(_111937_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_212ae5c02_Token>(),_111954_cpp_linked,jule::Bool()));
	if ((_111937_tokens.len() < 2LL)) {
		(*this)._method_push_err((*(_112017_decl))._field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	}
	_111937_tokens=_111937_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_112017_decl,_111937_tokens);
	return _112017_decl;
}



inline jule::Ptr<_212b16162_Expr> _1e767b1ba_Parser::_method_build_enum_item_expr(jule::Ptr<jule::I64> _113344_i,jule::Slice<_212ae5c02_Token>& _113358_tokens) {
	jule::I64 _113417_brace_n = 0LL;
	jule::I64 _113513_expr_start = (*(_113344_i));
	for (; (*(_113344_i)) < static_cast<jule::I64>(_113358_tokens.len()); ((*(_113344_i)))++) {
		{
			_212ae5c02_Token _113717_t = _113358_tokens[(*(_113344_i))];
			if (_113717_t._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _113717_t._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_1b72c66b4:;
						{
							(_113417_brace_n)++;
							goto _iter_next_1b72c4dbb;
						}
					}
					else {
						_case_begin_1b72c5dab:;
						{
							(_113417_brace_n)--;
						}
					}
					_match_end_1b72c5e33:;
				}
			}
			if ((_113417_brace_n > 0LL)) {
				goto _iter_next_1b72c4dbb;
			}
			if ((_113717_t._field_id == static_cast<jule::U64>(8LLU)) || (((*(_113344_i)) + 1LL) >= static_cast<jule::I64>(_113358_tokens.len()))) {
				jule::Slice<_212ae5c02_Token> _115625_expr_tokens = nullptr;
				if (_113717_t._field_id == static_cast<jule::U64>(8LLU)) {
					_115625_expr_tokens=_113358_tokens.slice(_113513_expr_start,(*(_113344_i)));
				} else {
					_115625_expr_tokens=_113358_tokens.slice(_113513_expr_start);
				}
				return (*(this->self))._method_build_expr(_115625_expr_tokens);
			}
		}
	_iter_next_1b72c4dbb:;
	}
	_iter_end_1b72c4dbb:;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>> _1e767b1ba_Parser::_method_build_enum_items(jule::Slice<_212ae5c02_Token>& _116841_tokens) {
	jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>> _116917_items = jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>>::alloc(0LL,1LL);
	jule::Ptr<jule::I64> _117017_i = jule::new_ptr<jule::I64>(0LL);
	for (; (*(_117017_i)) < static_cast<jule::I64>(_116841_tokens.len()); ((*(_117017_i)))++) {
		{
			_212ae5c02_Token _117221_t = _116841_tokens[(*(_117017_i))];
			if (_117221_t._field_id == static_cast<jule::U64>(18LLU)) {
				goto _iter_next_1b72ca4cb;
			}
			jule::Ptr<_212b242d5_EnumItemDecl> _117721_item = jule::new_struct<_212b242d5_EnumItemDecl>(new( std::nothrow ) _212b242d5_EnumItemDecl());
			(*(_117721_item))._field_token=_117221_t;
			if ((*(_117721_item))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
				(*(this->self))._method_push_err((*(_117721_item))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			}
			(*(_117721_item))._field_ident=(*(_117721_item))._field_token._field_kind;
			if ((((*(_117017_i)) + 1LL) >= static_cast<jule::I64>(_116841_tokens.len())) || (_116841_tokens[((*(_117017_i)) + 1LL)]._field_id == static_cast<jule::U64>(8LLU))) {
				if (((*(_117017_i)) + 1LL) < static_cast<jule::I64>(_116841_tokens.len())) {
					((*(_117017_i)))++;
				}
				_116917_items = jule::alloc_for_append(_116917_items,1);_116917_items.__push(_117721_item);
				goto _iter_next_1b72ca4cb;
			}
			((*(_117017_i)))++;
			_117221_t=_116841_tokens[(*(_117017_i))];
			((*(_117017_i)))++;
			if ((_117221_t._field_id != static_cast<jule::U64>(7LLU)) || (_117221_t._field_kind != jule::Str("=", 1))) {
				(*(this->self))._method_push_err(_117221_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>());
				goto _iter_next_1b72ca4cb;
			}
			if (((*(_117017_i)) >= static_cast<jule::I64>(_116841_tokens.len())) || (_116841_tokens[(*(_117017_i))]._field_id == static_cast<jule::U64>(8LLU))) {
				(*(this->self))._method_push_err(_117221_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_1b72ca4cb;
			}
			(*(_117721_item))._field_expr=(*(this->self))._method_build_enum_item_expr(_117017_i,_116841_tokens);
			_116917_items = jule::alloc_for_append(_116917_items,1);_116917_items.__push(_117721_item);
		}
	_iter_next_1b72ca4cb:;
	}
	_iter_end_1b72ca4cb:;
	return _116917_items;
}



inline jule::Ptr<_212b24725_EnumDecl> _1e767b1ba_Parser::_method_build_enum_decl(jule::Slice<_212ae5c02_Token>& _120940_tokens) {
	if ((_120940_tokens.len() < 2LL) || (_120940_tokens.len() < 3LL)) {
		(*(this->self))._method_push_err(_120940_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b24725_EnumDecl> _121417_e = jule::new_struct<_212b24725_EnumDecl>(new( std::nothrow ) _212b24725_EnumDecl(_120940_tokens[1LL],jule::Bool(),jule::Str(),jule::Ptr<_2129e3d42_TypeDecl>(),jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>>(),jule::Ptr<_2129e3072_CommentGroup>()));
	if ((*(_121417_e))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(this->self))._method_push_err((*(_121417_e))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_121417_e))._field_ident=(*(_121417_e))._field_token._field_kind;
	jule::I64 _122217_i = 2LL;
	if (_120940_tokens[_122217_i]._field_id == static_cast<jule::U64>(11LLU)) {
		(_122217_i)++;
		if (_122217_i >= static_cast<jule::I64>(_120940_tokens.len())) {
			(*(this->self))._method_push_err(_120940_tokens[(_122217_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _121417_e;
		}
		std::tie((*(_121417_e))._field_kind,std::ignore) = (*(this->self))._method_build_type(_120940_tokens,(&(_122217_i)),true);
		if (_122217_i >= static_cast<jule::I64>(_120940_tokens.len())) {
			(*(this->self))._method_stop();
			(*(this->self))._method_push_err((*(_121417_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _121417_e;
		}
	} else {
		(*(_121417_e))._field_kind=nullptr;
	}
	jule::Slice<_212ae5c02_Token> _123917_item_tokens = _1e767874a_range(_122217_i,jule::Str("{", 1),jule::Str("}", 1),_120940_tokens);
	if ((_123917_item_tokens == nullptr)) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_121417_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _121417_e;
	} else if (_122217_i < static_cast<jule::I64>(_120940_tokens.len())) {
		(*(this->self))._method_push_err(_120940_tokens[_122217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_121417_e))._field_items=(*(this->self))._method_build_enum_items(_123917_item_tokens);
	return _121417_e;
}



inline jule::Ptr<_212b24eea_FieldDecl> _1e767b1ba_Parser::_method_build_field(jule::Slice<_212ae5c02_Token> _125235_tokens) {
	jule::Ptr<_212b24eea_FieldDecl> _125317_f = jule::new_struct<_212b24eea_FieldDecl>(new( std::nothrow ) _212b24eea_FieldDecl());
	(*(_125317_f))._field_public=_125235_tokens[0LL]._field_id == static_cast<jule::U64>(21LLU);
	if ((*(_125317_f))._field_public) {
		if ((_125235_tokens.len() == 1LL)) {
			(*(this->self))._method_push_err(_125235_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125235_tokens=_125235_tokens.slice(1LL);
	}
	(*(_125317_f))._field_mutable=_125235_tokens[0LL]._field_id == static_cast<jule::U64>(36LLU);
	if ((*(_125317_f))._field_mutable) {
		if ((_125235_tokens.len() == 1LL)) {
			(*(this->self))._method_push_err(_125235_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125235_tokens=_125235_tokens.slice(1LL);
	}
	(*(_125317_f))._field_token=_125235_tokens[0LL];
	if ((*(_125317_f))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(this->self))._method_push_err((*(_125317_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_125317_f))._field_ident=(*(_125317_f))._field_token._field_kind;
	if ((_125235_tokens.len() == 1LL)) {
		(*(this->self))._method_push_err(_125235_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_125235_tokens[1LL]._field_id != static_cast<jule::U64>(11LLU)) {
		(*(this->self))._method_push_err(_125235_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_125235_tokens=_125235_tokens.slice(2LL);
	jule::I64 _129017_i = 0LL;
	std::tie((*(_125317_f))._field_kind,std::ignore) = (*(this->self))._method_build_type(_125235_tokens,(&(_129017_i)),true);
	if (_129017_i < static_cast<jule::I64>(_125235_tokens.len())) {
		_212ae5c02_Token _129317_token = _125235_tokens[_129017_i];
		if ((_129317_token._field_id != static_cast<jule::U64>(7LLU)) || (_129317_token._field_kind != jule::Str("=", 1))) {
			(*(this->self))._method_push_err(_125235_tokens[_129017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_129017_i)++;
		if (_129017_i >= static_cast<jule::I64>(_125235_tokens.len())) {
			(*(this->self))._method_push_err(_129317_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125235_tokens=_125235_tokens.slice(_129017_i);
		(*(_125317_f))._field_default=(*(this->self))._method_build_expr(_125235_tokens);
	}
	return _125317_f;
}



inline jule::Slice<jule::Ptr<_212b24eea_FieldDecl>> _1e767b1ba_Parser::_method_build_struct_decl_fields(jule::Slice<_212ae5c02_Token> _131048_tokens) {
	jule::Slice<jule::Ptr<_212b24eea_FieldDecl>> _131117_fields = nullptr;
	jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _131217_stmts = _1e76544e5_split_stmts(_131048_tokens);
	{
		auto &expr = _131217_stmts;
		auto it = expr.begin();
		_iter_begin_1b7300688:;
		if (it != expr.end()) {
			jule::Ptr<_1e7653d74_Stmt> _1b73006cc_stmt = *it;
			{
				_131048_tokens=(*(_1b73006cc_stmt))._field_tokens;
				if (_131048_tokens[0LL]._field_id == static_cast<jule::U64>(18LLU)) {
					goto _iter_next_1b7300688;
				}
				jule::Ptr<_212b24eea_FieldDecl> _131821_f = (*(this->self))._method_build_field(_131048_tokens);
				_131117_fields = jule::alloc_for_append(_131117_fields,1);_131117_fields.__push(_131821_f);
			}
			_iter_next_1b7300688:;
			++it;
			goto _iter_begin_1b7300688;
		}
		_iter_end_1b7300688:;
	}
	return _131117_fields;
}



inline jule::Ptr<_212b2587a_StructDecl> _1e767b1ba_Parser::_method_build_struct_decl(jule::Slice<_212ae5c02_Token>& _132442_tokens) {
	if ((_132442_tokens.len() < 3LL)) {
		(*(this->self))._method_push_err(_132442_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::I64 _133017_i = 1LL;
	jule::Ptr<_212b2587a_StructDecl> _133117_s = jule::new_struct<_212b2587a_StructDecl>(new( std::nothrow ) _212b2587a_StructDecl(_132442_tokens[_133017_i],jule::Str(),jule::Slice<jule::Ptr<_212b24eea_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_2129e3072_CommentGroup>(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>()));
	if ((*(_133117_s))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(this->self))._method_push_err((*(_133117_s))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_133017_i)++;
	if (_133017_i >= static_cast<jule::I64>(_132442_tokens.len())) {
		(*(this->self))._method_push_err(_132442_tokens[_133017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133117_s;
	}
	(*(_133117_s))._field_ident=(*(_133117_s))._field_token._field_kind;
	_212ae5c02_Token _134513_error_token = _132442_tokens[_133017_i];
	jule::Slice<_212ae5c02_Token> _134617_generics_tokens = _1e767874a_range(_133017_i,jule::Str("[", 1),jule::Str("]", 1),_132442_tokens);
	if ((_134617_generics_tokens != nullptr)) {
		(*(_133117_s))._field_generics=(*(this->self))._method_build_generics(_134617_generics_tokens,_134513_error_token);
	}
	if (_133017_i >= static_cast<jule::I64>(_132442_tokens.len())) {
		(*(this->self))._method_push_err(_132442_tokens[(_133017_i - 1LL)],jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _133117_s;
	}
	jule::Slice<_212ae5c02_Token> _135617_body_tokens = _1e767874a_range(_133017_i,jule::Str("{", 1),jule::Str("}", 1),_132442_tokens);
	if ((_135617_body_tokens == nullptr)) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_133117_s))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _133117_s;
	}
	if (_133017_i < static_cast<jule::I64>(_132442_tokens.len())) {
		(*(this->self))._method_push_err(_132442_tokens[_133017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_133117_s))._field_fields=(*(this->self))._method_build_struct_decl_fields(_135617_body_tokens);
	return _133117_s;
}



inline void _1e767b1ba_Parser::_method_check_method_receiver(jule::Ptr<_212b1edd5_FnDecl>& _137041_f) {
	if ((*(_137041_f))._field_statically) {
		if (((*(_137041_f))._field_params.len() > 0LL) && (*((*(_137041_f))._field_params[0LL]))._method_is_self()) {
			(*this)._method_push_err((*(_137041_f))._field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		}
		return;
	}
	if (((*(_137041_f))._field_params.len() == 0LL)) {
		(*this)._method_push_err((*(_137041_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_212b1e995_ParamDecl> _138313_param = (*(_137041_f))._field_params[0LL];
	if ((!((*(_138313_param))._method_is_self()))) {
		(*this)._method_push_err((*(_137041_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
}



inline jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> _1e767b1ba_Parser::_method_build_trait_methods(jule::Slice<_212ae5c02_Token> _139043_tokens) {
	jule::Slice<jule::Ptr<_212b1edd5_FnDecl>> _139117_methods = nullptr;
	jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _139217_stmts = _1e76544e5_split_stmts(_139043_tokens);
	{
		auto &expr = _139217_stmts;
		auto it = expr.begin();
		_iter_begin_1b73142d4:;
		if (it != expr.end()) {
			jule::Ptr<_1e7653d74_Stmt> _1b731445a_stmt = *it;
			{
				_139043_tokens=_1e766676b_eliminate_comments((*(_1b731445a_stmt))._field_tokens);
				if ((_139043_tokens.len() == 0LL)) {
					goto _iter_next_1b73142d4;
				}
				jule::Bool _139921_is_pub = false;
				if (_139043_tokens[0LL]._field_id == static_cast<jule::U64>(21LLU)) {
					_139921_is_pub=true;
					if ((_139043_tokens.len() == 1LL)) {
						(*(this->self))._method_push_err(_139043_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_1b73142d4;
					}
					_139043_tokens=_139043_tokens.slice(1LL);
				}
				jule::Ptr<_212b1edd5_FnDecl> _140921_f = (*(this->self))._method_build_fn(_139043_tokens,true,true);
				if ((_140921_f != nullptr)) {
					if ((*(_140921_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_140921_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_method_receiver(_140921_f);
					if (((*(_140921_f))._field_generics.len() > 0LL)) {
						(*(this->self))._method_push_err((*(_140921_f))._field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					}
					(*(_140921_f))._field_public=_139921_is_pub;
					_139117_methods = jule::alloc_for_append(_139117_methods,1);_139117_methods.__push(_140921_f);
				}
			}
			_iter_next_1b73142d4:;
			++it;
			goto _iter_begin_1b73142d4;
		}
		_iter_end_1b73142d4:;
	}
	return _139117_methods;
}



inline jule::Ptr<_212b1ade2_TraitDecl> _1e767b1ba_Parser::_method_build_trait_decl(jule::Slice<_212ae5c02_Token>& _142541_tokens) {
	if ((_142541_tokens.len() < 3LL)) {
		(*(this->self))._method_push_err(_142541_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b1ade2_TraitDecl> _143017_t = jule::new_struct<_212b1ade2_TraitDecl>(new( std::nothrow ) _212b1ade2_TraitDecl(_142541_tokens[1LL],jule::Str(),jule::Bool(),jule::Ptr<_2129e3072_CommentGroup>(),jule::Slice<jule::Ptr<_212b1edd5_FnDecl>>()));
	if ((*(_143017_t))._field_token._field_id != static_cast<jule::U64>(2LLU)) {
		(*(this->self))._method_push_err((*(_143017_t))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_143017_t))._field_ident=(*(_143017_t))._field_token._field_kind;
	jule::I64 _143817_i = 2LL;
	jule::Slice<_212ae5c02_Token> _143917_body_tokens = _1e767874a_range(_143817_i,jule::Str("{", 1),jule::Str("}", 1),_142541_tokens);
	if ((_143917_body_tokens == nullptr)) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_143017_t))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_143817_i < static_cast<jule::I64>(_142541_tokens.len())) {
		(*(this->self))._method_push_err(_142541_tokens[_143817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_143017_t))._field_methods=(*(this->self))._method_build_trait_methods(_143917_body_tokens);
	return _143017_t;
}



inline jule::Ptr<_212b1edd5_FnDecl> _1e767b1ba_Parser::_method_build_cpp_link_fn(jule::Slice<_212ae5c02_Token> _145341_tokens) {
	_145341_tokens=_145341_tokens.slice(1LL);
	jule::Ptr<_212b1edd5_FnDecl> _145517_f = (*(this->self))._method_build_fn(_145341_tokens,false,true);
	if ((_145517_f != nullptr)) {
		if ((*(_145517_f))._method_is_anon()) {
			(*(this->self))._method_push_err((*(_145517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		(*(_145517_f))._field_cpp_linked=true;
	}
	return _145517_f;
}



inline jule::Ptr<_212b20325_VarDecl> _1e767b1ba_Parser::_method_build_cpp_link_var(jule::Slice<_212ae5c02_Token> _146542_tokens) {
	_146542_tokens=_146542_tokens.slice(1LL);
	jule::Ptr<_212b20325_VarDecl> _146717_v = (*(this->self))._method_build_var(_146542_tokens);
	if ((_146717_v != nullptr)) {
		(*(_146717_v))._field_cpp_linked=true;
		if (((*(_146717_v))._field_expr != nullptr)) {
			(*(this->self))._method_push_err((*(_146717_v))._field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		}
	}
	return _146717_v;
}



inline jule::Ptr<_212b2587a_StructDecl> _1e767b1ba_Parser::_method_build_cpp_link_struct(jule::Slice<_212ae5c02_Token> _147745_tokens) {
	_147745_tokens=_147745_tokens.slice(1LL);
	jule::Ptr<_212b2587a_StructDecl> _147917_s = (*(this->self))._method_build_struct_decl(_147745_tokens);
	if ((_147917_s != nullptr)) {
		(*(_147917_s))._field_cpp_linked=true;
	}
	return _147917_s;
}



inline jule::Ptr<_212b230c5_TypeAliasDecl> _1e767b1ba_Parser::_method_build_cpp_link_type_alias(jule::Slice<_212ae5c02_Token> _148649_tokens) {
	_148649_tokens=_148649_tokens.slice(1LL);
	jule::Ptr<_212b230c5_TypeAliasDecl> _148817_t = (*(this->self))._method_build_type_alias_decl(_148649_tokens);
	if ((_148817_t != nullptr)) {
		(*(_148817_t))._field_cpp_linked=true;
	}
	return _148817_t;
}



inline jule::Ptr<_212b23d95_UseDecl> _1e767b1ba_Parser::_method_build_cpp_link_use(jule::Slice<_212ae5c02_Token> _149542_tokens) {
	if ((_149542_tokens.len() == 1LL)) {
		(*(this->self))._method_push_err(_149542_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_149542_tokens=_149542_tokens.slice(1LL);
	
	return (*(this->self))._method_build_use_decl(_149542_tokens,true);
}



inline jule::Any _1e767b1ba_Parser::_method_build_cpp_link(jule::Slice<_212ae5c02_Token>& _150639_tokens) {
	_212ae5c02_Token _150717_token = _150639_tokens[0LL];
	if ((_150639_tokens.len() == 1LL)) {
		(*(this->self))._method_push_err(_150717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	_150717_token=_150639_tokens[1LL];
	{
		auto &_match_expr{ _150717_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(19LLU)) {
			_case_begin_1b7331532:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_use(_150639_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(33LLU) || _match_expr == static_cast<jule::U64>(35LLU)) {
			_case_begin_1b7331598:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_fn(_150639_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(9LLU) || _match_expr == static_cast<jule::U64>(34LLU)) {
			_case_begin_1b733160e:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_var(_150639_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(25LLU)) {
			_case_begin_1b7331675:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_struct(_150639_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(10LLU)) {
			_case_begin_1b7331e06:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_type_alias(_150639_tokens));
			}
		}
		else {
			_case_begin_1b7330333:;
			{
				(*(this->self))._method_push_err(_150717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b7331312:;
	}
	return jule::Any(nullptr);
}



inline jule::Ptr<_212b1edd5_FnDecl> _1e767b1ba_Parser::_method_get_method(jule::Slice<_212ae5c02_Token>& _153735_tokens) {
	jule::I64 _153817_i = 0LL;
	_212ae5c02_Token _153917_token = _153735_tokens[_153817_i];
	if (_153917_token._field_id == static_cast<jule::U64>(38LLU)) {
		if ((_153817_i + 1LL) >= static_cast<jule::I64>(_153735_tokens.len())) {
			(*(this->self))._method_push_err(_153917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_153817_i)++;
		_153917_token=_153735_tokens[_153817_i];
	}
	if (_153917_token._field_id == static_cast<jule::U64>(35LLU)) {
		if ((_153817_i + 1LL) >= static_cast<jule::I64>(_153735_tokens.len())) {
			(*(this->self))._method_push_err(_153917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_153817_i)++;
		_153917_token=_153735_tokens[_153817_i];
	}
	if (_153917_token._field_id != static_cast<jule::U64>(33LLU)) {
		(*(this->self))._method_push_err(_153917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b1edd5_FnDecl> _156317_f = (*(this->self))._method_build_fn(_153735_tokens,true,false);
	if ((_156317_f != nullptr) && (*(_156317_f))._method_is_anon()) {
		(*(this->self))._method_push_err((*(_156317_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _156317_f;
}



inline void _1e767b1ba_Parser::_method_parse_impl_body(jule::Ptr<_212b26705_Impl>& _157040_ipl,jule::Slice<_212ae5c02_Token>& _157057_tokens) {
	jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _157117_stmts = _1e76544e5_split_stmts(_157057_tokens);
	{
		auto &expr = _157117_stmts;
		auto it = expr.begin();
		_iter_begin_1b733c939:;
		if (it != expr.end()) {
			jule::Ptr<_1e7653d74_Stmt> _1b733ca6b_stmt = *it;
			{
				_157057_tokens=(*(_1b733ca6b_stmt))._field_tokens;
				_212ae5c02_Token _157421_token = _157057_tokens[0LL];
				jule::Bool _157521_is_pub = false;
				{
					auto &_match_expr{ _157421_token._field_id };
					
					if (_match_expr == static_cast<jule::U64>(18LLU)) {
						_case_begin_1b733ddbe:;
						{
							goto _iter_next_1b733c939;
						}
					}
					else if (_match_expr == static_cast<jule::U64>(39LLU)) {
						_case_begin_1b733de35:;
						{
							(*(this->self))._method_push_directive((*(this->self))._method_build_directive(_157057_tokens));
							goto _iter_next_1b733c939;
						}
					}
					else if (_match_expr == static_cast<jule::U64>(21LLU)) {
						_case_begin_1b733deac:;
						{
							_157521_is_pub=true;
							if ((_157057_tokens.len() == 1LL)) {
								(*(this->self))._method_push_err(_157057_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_1b733c939;
							}
							_157057_tokens=_157057_tokens.slice(1LL);
							if ((_157057_tokens.len() > 0LL)) {
								_157421_token=_157057_tokens[0LL];
							}
						}
					}
					_match_end_1b733dd69:;
				}
				{
					auto &_match_expr{ _157421_token._field_id };
					
					if (_match_expr == static_cast<jule::U64>(9LLU)) {
						_case_begin_1b7341ba2:;
						{
							jule::Ptr<_212b20325_VarDecl> _159925_v = (*(this->self))._method_build_var(_157057_tokens);
							if ((_159925_v != nullptr)) {
								(*(_159925_v))._field_public=_157521_is_pub;
								(*(_157040_ipl))._field_statics = jule::alloc_for_append((*(_157040_ipl))._field_statics,1);(*(_157040_ipl))._field_statics.__push(_159925_v);
							}
						}
					}
					else if (_match_expr == static_cast<jule::U64>(38LLU) || _match_expr == static_cast<jule::U64>(33LLU) || _match_expr == static_cast<jule::U64>(35LLU)) {
						_case_begin_1b734040e:;
						{
							jule::Ptr<_212b1edd5_FnDecl> _160825_f = (*(this->self))._method_get_method(_157057_tokens);
							if ((_160825_f != nullptr)) {
								(*(this->self))._method_check_method_receiver(_160825_f);
								(*(this->self))._method_apply_fn_meta(_160825_f,_157521_is_pub);
								(*(_157040_ipl))._field_methods = jule::alloc_for_append((*(_157040_ipl))._field_methods,1);(*(_157040_ipl))._field_methods.__push(_160825_f);
							}
						}
					}
					else {
						_case_begin_1b733e034:;
						{
							(*(this->self))._method_push_err(_157421_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_1b733c939;
						}
					}
					_match_end_1b7341cc3:;
				}
			}
			_iter_next_1b733c939:;
			++it;
			goto _iter_begin_1b733c939;
		}
		_iter_end_1b733c939:;
	}
}



inline jule::Ptr<_212b26705_Impl> _1e767b1ba_Parser::_method_build_impl(jule::Slice<_212ae5c02_Token> _162234_tokens) {
	_212ae5c02_Token _162317_token = _162234_tokens[0LL];
	if ((_162234_tokens.len() < 2LL)) {
		(*(this->self))._method_push_err(_162317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::I64 _162917_i = 1LL;
	jule::Ptr<_2129e3d42_TypeDecl> _163118_base;
	jule::Bool _163128_ok;
	std::tie(_163118_base,_163128_ok) = (*(this->self))._method_build_type(_162234_tokens,(&(_162917_i)),true);
	if ((!(_163128_ok))) {
		return nullptr;
	}
	if (_162917_i >= static_cast<jule::I64>(_162234_tokens.len())) {
		(*(this->self))._method_push_err(_162317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_212b26705_Impl> _164017_ipl = jule::new_struct<_212b26705_Impl>(new( std::nothrow ) _212b26705_Impl(_163118_base,jule::Ptr<_2129e3d42_TypeDecl>(),jule::Slice<jule::Ptr<_212b1edd5_FnDecl>>(),jule::Slice<jule::Ptr<_212b20325_VarDecl>>()));
	_162317_token=_162234_tokens[_162917_i];
	if (_162317_token._field_id != static_cast<jule::U64>(12LLU)) {
		if ((_162317_token._field_id == static_cast<jule::U64>(3LLU)) && (_162317_token._field_kind == jule::Str("{", 1))) {
			std::tie((*(_164017_ipl))._field_base,(*(_164017_ipl))._field_dest) = std::make_tuple((*(_164017_ipl))._field_dest,(*(_164017_ipl))._field_base);
			goto _julec_label_body;
		}
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162317_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	(_162917_i)++;
	if (_162917_i >= static_cast<jule::I64>(_162234_tokens.len())) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162317_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_164017_ipl))._field_dest,_163128_ok) = (*(this->self))._method_build_type(_162234_tokens,(&(_162917_i)),true);
	if ((!(_163128_ok))) {
		return nullptr;
	}
	if (_162917_i >= static_cast<jule::I64>(_162234_tokens.len())) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162317_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_body:;
	jule::Slice<_212ae5c02_Token> _168017_body_tokens = _1e767874a_range(_162917_i,jule::Str("{", 1),jule::Str("}", 1),_162234_tokens);
	if ((_168017_body_tokens == nullptr)) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162317_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_162917_i < static_cast<jule::I64>(_162234_tokens.len())) {
		(*(this->self))._method_push_err(_162234_tokens[_162917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_parse_impl_body(_164017_ipl,_168017_body_tokens);
	return _164017_ipl;
}



inline jule::Any _1e767b1ba_Parser::_method_build_node_data(jule::Slice<_212ae5c02_Token>& _169440_tokens) {
	_212ae5c02_Token _169517_token = _169440_tokens[0LL];
	{
		auto &_match_expr{ _169517_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(19LLU)) {
			_case_begin_1b735cc78:;
			{
				
				return jule::Any((*(this->self))._method_build_use_decl(_169440_tokens,false));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(33LLU) || _match_expr == static_cast<jule::U64>(35LLU)) {
			_case_begin_1b735c21c:;
			{
				jule::Ptr<_212b1edd5_FnDecl> _170321_f = (*(this->self))._method_build_fn(_169440_tokens,false,false);
				if ((_170321_f != nullptr)) {
					(*(_170321_f))._field_global=true;
					if ((*(_170321_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_170321_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
				}
				return jule::Any(_170321_f);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(34LLU) || _match_expr == static_cast<jule::U64>(9LLU) || _match_expr == static_cast<jule::U64>(36LLU) || _match_expr == static_cast<jule::U64>(38LLU)) {
			_case_begin_1b735c283:;
			{
				return jule::Any((*(this->self))._method_build_var(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(10LLU)) {
			_case_begin_1b735c2e9:;
			{
				return jule::Any((*(this->self))._method_build_type_alias_decl(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(24LLU)) {
			_case_begin_1b735c360:;
			{
				return jule::Any((*(this->self))._method_build_enum_decl(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(25LLU)) {
			_case_begin_1b735c3c6:;
			{
				return jule::Any((*(this->self))._method_build_struct_decl(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(29LLU)) {
			_case_begin_1b735d020:;
			{
				return jule::Any((*(this->self))._method_build_trait_decl(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(30LLU)) {
			_case_begin_1b735d086:;
			{
				return jule::Any((*(this->self))._method_build_impl(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(31LLU)) {
			_case_begin_1b735d0ec:;
			{
				return (*(this->self))._method_build_cpp_link(_169440_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U64>(39LLU)) {
			_case_begin_1b735d163:;
			{
				return jule::Any((*(this->self))._method_build_directive(_169440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U64>(18LLU)) {
			_case_begin_1b735d1c9:;
			{
				return jule::Any(_1e767aa9e_build_comment(_169517_token));
			}
		}
		else {
			_case_begin_1b735b97a:;
			{
				(*(this->self))._method_push_err(_169517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_1b735bd87:;
	}
}



inline void _1e767b1ba_Parser::_method_check_comment_group(_2129e2b32_Node& _174839_node) {
	if (((*this)._field_comment_group == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ _174839_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_2129e34b2_Comment>>() || _match_expr.type_is<jule::Ptr<_2129e3902_Directive>>()) {
			_case_begin_1b73667ed:;
		}
		else {
			_case_begin_1b7366a51:;
			{
				(*this)._field_comment_group=nullptr;
			}
		}
		_match_end_1b73669eb:;
	}
}



inline void _1e767b1ba_Parser::_method_check_directive(_2129e2b32_Node& _176235_node) {
	if (((*this)._field_directives == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ _176235_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_2129e3902_Directive>>() || _match_expr.type_is<jule::Ptr<_2129e34b2_Comment>>()) {
			_case_begin_1b7368877:;
		}
		else {
			_case_begin_1b7368217:;
			{
				if (((*this)._field_directives.len() != 0LL)) {
					(*this)._method_push_err((*((*this)._field_directives[0LL]))._field_tag,jule::Str("this directive is out of scope, cant assign to any define", 57),jule::Slice<jule::Any>());
				}
				(*this)._field_directives=nullptr;
			}
		}
		_match_end_1b73681b2:;
	}
}



inline void _1e767b1ba_Parser::_method_apply_fn_meta(jule::Ptr<_212b1edd5_FnDecl>& _178037_f,jule::Bool _178049_is_pub) {
	(*(_178037_f))._field_public=_178049_is_pub;
	(*(_178037_f))._field_directives=(*this)._field_directives;
	(*this)._field_directives=nullptr;
	(*(_178037_f))._field_doc_comments=(*this)._field_comment_group;
	(*this)._field_comment_group=nullptr;
}



inline void _1e767b1ba_Parser::_method_apply_meta(_2129e2b32_Node& _178834_node,jule::Bool _178846_is_pub) {
	{
		auto &_match_expr{ _178834_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_212b20325_VarDecl>>()) {
			_case_begin_1b736bdec:;
			{
				jule::Ptr<_212b20325_VarDecl> _179121_v = _178834_node._field_data.operator jule::Ptr<_212b20325_VarDecl>();
				if ((_179121_v == nullptr)) {
					return;
				}
				(*(_179121_v))._field_public=_178846_is_pub;
				(*(_179121_v))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_179121_v))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1edd5_FnDecl>>()) {
			_case_begin_1b736be63:;
			{
				jule::Ptr<_212b1edd5_FnDecl> _180421_f = _178834_node._field_data.operator jule::Ptr<_212b1edd5_FnDecl>();
				if ((_180421_f == nullptr)) {
					return;
				}
				(*this)._method_apply_fn_meta(_180421_f,_178846_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b230c5_TypeAliasDecl>>()) {
			_case_begin_1b736bec9:;
			{
				jule::Ptr<_212b230c5_TypeAliasDecl> _181221_tad = _178834_node._field_data.operator jule::Ptr<_212b230c5_TypeAliasDecl>();
				if ((_181221_tad == nullptr)) {
					return;
				}
				(*(_181221_tad))._field_public=_178846_is_pub;
				(*(_181221_tad))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b24725_EnumDecl>>()) {
			_case_begin_1b736c040:;
			{
				jule::Ptr<_212b24725_EnumDecl> _182121_ed = _178834_node._field_data.operator jule::Ptr<_212b24725_EnumDecl>();
				if ((_182121_ed == nullptr)) {
					return;
				}
				(*(_182121_ed))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_182121_ed))._field_public=_178846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b2587a_StructDecl>>()) {
			_case_begin_1b736c13e:;
			{
				jule::Ptr<_212b2587a_StructDecl> _183021_sd = _178834_node._field_data.operator jule::Ptr<_212b2587a_StructDecl>();
				if ((_183021_sd == nullptr)) {
					return;
				}
				(*(_183021_sd))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
				(*(_183021_sd))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_183021_sd))._field_public=_178846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1ade2_TraitDecl>>()) {
			_case_begin_1b736c1a5:;
			{
				jule::Ptr<_212b1ade2_TraitDecl> _184121_td = _178834_node._field_data.operator jule::Ptr<_212b1ade2_TraitDecl>();
				if ((_184121_td == nullptr)) {
					return;
				}
				(*(_184121_td))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_184121_td))._field_public=_178846_is_pub;
			}
		}
		else {
			_case_begin_1b736bbee:;
			{
				if (_178846_is_pub) {
					(*this)._method_push_err(_178834_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_1b736bb99:;
	}
}



inline void _1e767b1ba_Parser::_method_check_use_decl(_2129e2b32_Node& _185634_node) {
	{
		auto &_match_expr{ _185634_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_212b23d95_UseDecl>>()) {
			_case_begin_1b7376b60:;
		}
		else {
			_case_begin_1b73766dc:;
			{
				return;
			}
		}
		_match_end_1b7376632:;
	}
	if (((*((*this)._field_ast))._field_decls.len() > 0LL)) {
		(*this)._method_push_err(_185634_node._field_token,jule::Str("use declarations must declared top of source code", 49),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	}
}



inline std::tuple<jule::Bool,jule::Any> _1e767b1ba_Parser::_method_build_general_scope_node_data(jule::Slice<_212ae5c02_Token> _187153_st) {
	jule::Bool _187168_is_pub = jule::Bool();
	jule::Any _187182_data = jule::Any();
	if (_187153_st[0LL]._field_id == static_cast<jule::U64>(21LLU)) {
		_187168_is_pub=true;
		_187153_st=_187153_st.slice(1LL);
		if ((_187153_st.len() == 0LL)) {
			(*(this->self))._method_push_err(_187153_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_187168_is_pub,_187182_data);
		}
	}
	_187182_data=(*(this->self))._method_build_node_data(_187153_st);
	return std::make_tuple(_187168_is_pub,_187182_data);
}



inline _2129e2b32_Node _1e767b1ba_Parser::_method_parse_node(jule::Slice<_212ae5c02_Token>& _188635_st) {
	_2129e2b32_Node _188717_node = _2129e2b32_Node(_188635_st[0LL],jule::Any());
	jule::Bool _189114_is_pub;
	jule::Any _189126_data;
	std::tie(_189114_is_pub,_189126_data) = (*(this->self))._method_build_general_scope_node_data(_188635_st);
	if (_189126_data == jule::Any(nullptr)) {
		return _188717_node;
	}
	_188717_node._field_data=_189126_data;
	(*(this->self))._method_apply_meta(_188717_node,_189114_is_pub);
	(*(this->self))._method_check_comment_group(_188717_node);
	(*(this->self))._method_check_directive(_188717_node);
	(*(this->self))._method_check_use_decl(_188717_node);
	return _188717_node;
}



inline void _1e767b1ba_Parser::_method_append_node(jule::Slice<_212ae5c02_Token>& _190536_st) {
	if ((_190536_st.len() == 0LL)) {
		return;
	}
	_2129e2b32_Node _191017_node = (*(this->self))._method_parse_node(_190536_st);
	if ((_191017_node._field_data == jule::Any(nullptr)) || (*(this->self))._method_stopped()) {
		return;
	}
	{
		
		if (_191017_node._method_is_directive()) {
			_case_begin_1b7382253:;
			{
				(*(this->self))._method_push_directive(_191017_node._field_data.operator jule::Ptr<_2129e3902_Directive>());
			}
		}
		else if (_191017_node._method_is_use_decl()) {
			_case_begin_1b73822b9:;
			{
				(*((*(this->self))._field_ast))._field_use_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_use_decls,1);(*((*(this->self))._field_ast))._field_use_decls.__push(_191017_node._field_data.operator jule::Ptr<_212b23d95_UseDecl>());
			}
		}
		else if (_191017_node._method_is_decl()) {
			_case_begin_1b7382330:;
			{
				(*((*(this->self))._field_ast))._field_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_decls,1);(*((*(this->self))._field_ast))._field_decls.__push(_191017_node);
			}
		}
		else if (_191017_node._method_is_comment()) {
			_case_begin_1b7382396:;
			{
				if (((*(this->self))._field_comment_group == nullptr)) {
					(*(this->self))._field_comment_group=jule::new_struct<_2129e3072_CommentGroup>(new( std::nothrow ) _2129e3072_CommentGroup());
				}
				(*((*(this->self))._field_comment_group))._field_comments = jule::alloc_for_append((*((*(this->self))._field_comment_group))._field_comments,1);(*((*(this->self))._field_comment_group))._field_comments.__push(_191017_node._field_data.operator jule::Ptr<_2129e34b2_Comment>());
			}
		}
		else if (_191017_node._method_is_impl()) {
			_case_begin_1b7382cd1:;
			{
				(*((*(this->self))._field_ast))._field_impls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_impls,1);(*((*(this->self))._field_ast))._field_impls.__push(_191017_node._field_data.operator jule::Ptr<_212b26705_Impl>());
			}
		}
		else {
			_case_begin_1b73820dd:;
			{
				(*(this->self))._method_push_err(_191017_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b7382077:;
	}
}



inline void _1e767b1ba_Parser::_method_remove_range(jule::I64 _194031_i,jule::Str _194039_kind,jule::Slice<_212ae5c02_Token>& _194051_tokens,jule::Slice<jule::I64>& _194073_ranges) {
	jule::Str _194113_close = _1e7679c57_get_close_kind_of_brace(_194039_kind);
	for (; (_194031_i >= 0LL); (_194031_i)--) {
		{
			_212ae5c02_Token _194317_tok = _194051_tokens[_194073_ranges[_194031_i]];
			if (_194317_tok._field_kind != _194113_close) {
				goto _iter_next_1b738915b;
			}
			_194073_ranges=jule::append(_194073_ranges.slice(0LL,_194031_i),_194073_ranges.slice((_194031_i + 1LL)));
			goto _iter_end_1b738915b;
		}
	_iter_next_1b738915b:;
	}
	_iter_end_1b738915b:;
}



inline void _1e767b1ba_Parser::_method_push_wrong_order_close_err(_212ae5c02_Token& _195346_t,jule::Slice<_212ae5c02_Token>& _195357_tokens,jule::Slice<jule::I64>& _195375_ranges) {
	{
		auto &_match_expr{ _195357_tokens[_195375_ranges[_195375_ranges.len() - 1LL]]._field_kind };
		
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_1b738bd95:;
			{
				(*this)._method_push_err(_195346_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_1b738be0b:;
			{
				(*this)._method_push_err(_195346_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_1b738be72:;
			{
				(*this)._method_push_err(_195346_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b738bd0c:;
	}
}



inline void _1e767b1ba_Parser::_method_push_range_close(_212ae5c02_Token _196135_t,jule::Str _196145_left,jule::Slice<_212ae5c02_Token>& _196157_tokens,jule::Slice<jule::I64>& _196179_ranges) {
	jule::I64 _196213_n = _196179_ranges.len();
	if ((_196213_n == 0LL)) {
		{
			auto &_match_expr{ _196135_t._field_kind };
			
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_1b739076c:;
				{
					(*this)._method_push_err(_196135_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_1b73907d3:;
				{
					(*this)._method_push_err(_196135_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_1b7390849:;
				{
					(*this)._method_push_err(_196135_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_1b73906e5:;
		}
		return;
	} else if (_196157_tokens[_196179_ranges[(_196213_n - 1LL)]]._field_kind != _196145_left) {
		(*this)._method_push_wrong_order_close_err(_196135_t,_196157_tokens,_196179_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>((_196213_n - 1LL)),_196135_t._field_kind,_196157_tokens,_196179_ranges);
}



inline void _1e767b1ba_Parser::_method_check_ranges(jule::Slice<_212ae5c02_Token>& _197632_tokens) {
	jule::Slice<jule::I64> _197717_ranges = nullptr;
	{
		auto &expr = _197632_tokens;
		auto it = expr.begin();
		_iter_begin_1b7394771:;
		if (it != expr.end()) {
			jule::I64 _1b73947e8_i = it - expr.begin();
			_212ae5c02_Token &_1b7394a5c_token = *it;
			{
				if (_1b7394a5c_token._field_id != static_cast<jule::U64>(3LLU)) {
					goto _iter_next_1b7394771;
				}
				{
					auto &_match_expr{ _1b7394a5c_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_1b7395233:;
						{
							_197717_ranges = jule::alloc_for_append(_197717_ranges,1);_197717_ranges.__push(_1b73947e8_i);
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_1b739582c:;
						{
							(*this)._method_push_range_close(_1b7394a5c_token,jule::Str("(", 1),_197632_tokens,_197717_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_1b7395893:;
						{
							(*this)._method_push_range_close(_1b7394a5c_token,jule::Str("{", 1),_197632_tokens,_197717_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_1b7395909:;
						{
							(*this)._method_push_range_close(_1b7394a5c_token,jule::Str("[", 1),_197632_tokens,_197717_ranges);
						}
					}
					_match_end_1b7395145:;
				}
			}
			_iter_next_1b7394771:;
			++it;
			_1b73947e8_i++;
			goto _iter_begin_1b7394771;
		}
		_iter_end_1b7394771:;
	}
	{
		auto &expr = _197717_ranges;
		auto it = expr.begin();
		_iter_begin_1b73980d2:;
		if (it != expr.end()) {
			jule::I64 _1b7397994_i = *it;
			{
				_212ae5c02_Token _200217_token = _197632_tokens[_1b7397994_i];
				{
					auto &_match_expr{ _200217_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_1b7398830:;
						{
							(*this)._method_push_err(_200217_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_1b7398896:;
						{
							(*this)._method_push_err(_200217_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_1b739890c:;
						{
							(*this)._method_push_err(_200217_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_1b7398665:;
				}
			}
			_iter_next_1b73980d2:;
			++it;
			goto _iter_begin_1b73980d2;
		}
		_iter_end_1b73980d2:;
	}
}



inline void _1e767b1ba_Parser::_method_parse(jule::Ptr<_212aed0c2_File>& _201130_f) {
	(*(this->self))._field_ast=jule::new_struct<_2129e26e2_Ast>(new( std::nothrow ) _2129e26e2_Ast(_201130_f,jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Slice<jule::Ptr<_212b23d95_UseDecl>>(),jule::Slice<jule::Ptr<_212b26705_Impl>>(),jule::Slice<_2129e2b32_Node>()));
	jule::Slice<_212ae5c02_Token> _201617_tokens = (*(_201130_f))._method_tokens();
	(*(this->self))._method_check_ranges(_201617_tokens);
	if (((*(this->self))._field_errors.len() > 0LL)) {
		return;
	}
	jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _202217_stmts = _1e76544e5_split_stmts(_201617_tokens);
	jule::I64 _202517_i = 0LL;
	_julec_label_iter:;
	for (; _202517_i < static_cast<jule::I64>(_202217_stmts.len()); (_202517_i)++) {
		{
			jule::Ptr<_1e7653d74_Stmt> _202821_stmt = _202217_stmts[_202517_i];
			if (((*(_202821_stmt))._field_tokens.len() == 0LL)) {
				return;
			}
			jule::Any _203325_data;
			std::tie(std::ignore,_203325_data) = (*(this->self))._method_build_general_scope_node_data((*(_202821_stmt))._field_tokens);
			if (_203325_data == jule::Any(nullptr)) {
				goto _iter_end_1b739c757;
			}
			if ((*(this->self))._method_stopped()) {
				return;
			}
			{
				auto &_match_expr{ _203325_data };
				
				if (_match_expr.type_is<jule::Ptr<_2129e3902_Directive>>()) {
					_case_begin_1b73a0271:;
					{
						jule::Ptr<_2129e3902_Directive> _204425_d = _203325_data.operator jule::Ptr<_2129e3902_Directive>();
						if ((_204425_d != nullptr) && _21288285c_is_top_directive((*(_204425_d))._field_tag._field_kind)) {
							(*((*(this->self))._field_ast))._field_top_directives = jule::alloc_for_append((*((*(this->self))._field_ast))._field_top_directives,1);(*((*(this->self))._field_ast))._field_top_directives.__push(_204425_d);
						} else {
							goto _iter_end_1b739c757;
						}
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_2129e34b2_Comment>>() || _match_expr.type_is<jule::Ptr<_2129e3072_CommentGroup>>()) {
					_case_begin_1b73a02d7:;
				}
				else {
					_case_begin_1b73a00c8:;
					{
						goto _iter_end_1b739c757;
					}
				}
				_match_end_1b739ed64:;
			}
		}
	_iter_next_1b739c757:;
	}
	_iter_end_1b739c757:;
	(*(this->self))._field_errors=nullptr;
	for (; _202517_i < static_cast<jule::I64>(_202217_stmts.len()); (_202517_i)++) {
		{
			jule::Ptr<_1e7653d74_Stmt> _206421_stmt = _202217_stmts[_202517_i];
			(*(this->self))._method_append_node((*(_206421_stmt))._field_tokens);
			if ((*(this->self))._method_stopped()) {
				goto _iter_end_1b739cee9;
			}
		}
	_iter_next_1b739cee9:;
	}
	_iter_end_1b739cee9:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e767b1ba_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _1e769304a_TypeBuilder::_method_push_err(_212ae5c02_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>());
	}
}



inline void _1e769304a_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_prim(void) {
	jule::Ptr<_2129e3d42_TypeDecl> _9217_t = _1e76925ee_build_prim_type((*this)._field_tokens[(*((*this)._field_i))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_namespace(void) {
	jule::Ptr<_2129e3d42_TypeDecl> _9817_t = jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl((*this)._field_tokens[(*((*this)._field_i))],jule::Any()));
	jule::Ptr<_21298e309_NamespaceTypeDecl> _10217_nst = jule::new_struct<_21298e309_NamespaceTypeDecl>(new( std::nothrow ) _21298e309_NamespaceTypeDecl());
	jule::I64 _10317_n = 0LL;
	for (; (*((*this)._field_i)) < static_cast<jule::I64>((*this)._field_tokens.len()); ((*((*this)._field_i)))++) {
		{
			_212ae5c02_Token _10521_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (((_10317_n & 1LL) == 0LL)) {
				if (_10521_token._field_id != static_cast<jule::U64>(2LLU)) {
					(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				}
				(*(_10217_nst))._field_idents = jule::alloc_for_append((*(_10217_nst))._field_idents,1);(*(_10217_nst))._field_idents.__push(_10521_token);
			} else if (_10521_token._field_id != static_cast<jule::U64>(23LLU)) {
				goto _iter_end_1b73a8a71;
			}
			(_10317_n)++;
		}
	_iter_next_1b73a8a71:;
	}
	_iter_end_1b73a8a71:;
	(*(_10217_nst))._field_idents=(*(_10217_nst))._field_idents.slice(0LL,((*(_10217_nst))._field_idents.len() - 1LL));
	((*((*this)._field_i)))--;
	(*(_10217_nst))._field_kind=(*((*this)._method_build_ident()))._field_kind.operator jule::Ptr<_2129908e3_IdentTypeDecl>();
	(*(_9817_t))._field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _1e769304a_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= static_cast<jule::I64>((*this)._field_tokens.len())) {
		return nullptr;
	}
	_212ae5c02_Token _13113_token = (*this)._field_tokens[(*((*this)._field_i))];
	if ((_13113_token._field_id != static_cast<jule::U64>(3LLU)) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_212ae5c02_Token>> _13617_parts = (*this)._method_ident_generics();
	if ((_13617_parts.len() == 0LL)) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>> _14217_types = jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_13617_parts.len()));
	{
		auto &expr = _13617_parts;
		auto it = expr.begin();
		_iter_begin_1b73b2dbb:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b73b3163_part = *it;
			{
				jule::I64 _14421_j = 0LL;
				jule::Ptr<_2129e3d42_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*((*this)._field_p))._method_build_type(_1b73b3163_part,(&(_14421_j)),true);
				if (_14421_j < static_cast<jule::I64>(_1b73b3163_part.len())) {
					(*this)._method_push_err(_1b73b3163_part[_14421_j],jule::Str("invalid syntax", 14));
				}
				_14217_types = jule::alloc_for_append(_14217_types,1);_14217_types.__push(_14522_t);
			}
			_iter_next_1b73b2dbb:;
			++it;
			goto _iter_begin_1b73b2dbb;
		}
		_iter_end_1b73b2dbb:;
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_212ae5c02_Token>> _1e769304a_TypeBuilder::_method_ident_generics(void) {
	jule::I64 _15513_first = (*((*this)._field_i));
	jule::I64 _15617_range_n = 0LL;
	for (; (*((*this)._field_i)) < static_cast<jule::I64>((*this)._field_tokens.len()); ((*((*this)._field_i)))++) {
		{
			_212ae5c02_Token _15817_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (_15817_token._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _15817_token._field_kind };
					
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_1b73b6dd1:;
						{
							(_15617_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_1b73b6e58:;
						{
							(_15617_range_n)--;
						}
					}
					_match_end_1b73b6bb1:;
				}
			}
			if ((_15617_range_n == 0LL)) {
				((*((*this)._field_i)))++;
				goto _iter_end_1b73b4eab;
			}
		}
	_iter_next_1b73b4eab:;
	}
	_iter_end_1b73b4eab:;
	jule::Slice<_212ae5c02_Token> _17017_tokens = (*this)._field_tokens.slice((_15513_first + 1LL),((*((*this)._field_i)) - 1LL));
	jule::Slice<jule::Slice<_212ae5c02_Token>> _17118_parts;
	jule::Slice<_21287ea02_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _1e76797b2_parts(_17017_tokens,static_cast<jule::U64>(8LLU),true);
	if ((*this)._field_err) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < static_cast<jule::I64>((*this)._field_tokens.len())) && ((*this)._field_tokens[((*((*this)._field_i)) + 1LL)]._field_id == static_cast<jule::U64>(23LLU))) {
		return (*this)._method_build_namespace();
	}
	_212ae5c02_Token _18217_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_2129908e3_IdentTypeDecl> _18317_it = jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>()));
	((*((*this)._field_i)))++;
	(*(_18317_it))._field_generics=(*this)._method_build_generics();
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= static_cast<jule::I64>((*this)._field_tokens.len())) || ((*this)._field_tokens[((*((*this)._field_i)) + 1LL)]._field_id != static_cast<jule::U64>(20LLU))) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	}
	(*((*this)._field_i))+=2LL;
	jule::Ptr<_2129e3d42_TypeDecl> _20217_t = (*this)._method_build_ident();
	(*((*(_20217_t))._field_kind.operator jule::Ptr<_2129908e3_IdentTypeDecl>()))._field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_fn(void) {
	_212ae5c02_Token _20817_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_212b1edd5_FnDecl> _20917_f = (*((*this)._field_p))._method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if ((_20917_f == nullptr)) {
		return nullptr;
	}
	if ((!((*(_20917_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_20917_f))._field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_ptr(void) {
	_212ae5c02_Token _22317_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= static_cast<jule::I64>((*this)._field_tokens.len())) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[(*((*this)._field_i))]._field_id == static_cast<jule::U64>(35LLU)) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_22317_token,jule::Any(jule::new_struct<_212b14e52_PtrTypeDecl>(new( std::nothrow ) _212b14e52_PtrTypeDecl(nullptr)))));
	}
	jule::Ptr<_2129e3d42_TypeDecl> _24017_elem = (*this)._method_step();
	if ((_24017_elem == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_22317_token,jule::Any(jule::new_struct<_212b14e52_PtrTypeDecl>(new( std::nothrow ) _212b14e52_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_sptr(void) {
	_212ae5c02_Token _25417_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= static_cast<jule::I64>((*this)._field_tokens.len())) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	jule::Ptr<_2129e3d42_TypeDecl> _26117_elem = (*this)._method_step();
	if ((_26117_elem == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_25417_token,jule::Any(jule::new_struct<_212b14182_SptrTypeDecl>(new( std::nothrow ) _212b14182_SptrTypeDecl(_26117_elem)))));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_op(void) {
	_212ae5c02_Token _27517_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _27517_token._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b73cc039:;
			{
				return (*this)._method_build_ptr();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_1b73cc1c1:;
			{
				return (*this)._method_build_sptr();
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_1b73cc237:;
			{
				return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_212ae5c02_Token(),jule::Any(jule::new_struct<_212b14182_SptrTypeDecl>(new( std::nothrow ) _212b14182_SptrTypeDecl((*this)._method_build_sptr())))));
			}
		}
		else {
			_case_begin_1b73cb81e:;
			{
				(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_1b73cbe7e:;
	}
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_slc(void) {
	_212ae5c02_Token _29717_token = (*this)._field_tokens[(*((*this)._field_i))];
	((*((*this)._field_i)))++;
	jule::Ptr<_2129e3d42_TypeDecl> _29917_elem = (*this)._method_step();
	if ((_29917_elem == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_29717_token,jule::Any(jule::new_struct<_212b145c2_SlcTypeDecl>(new( std::nothrow ) _212b145c2_SlcTypeDecl(_29917_elem)))));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= static_cast<jule::I64>((*this)._field_tokens.len())) {
		(*this)._method_push_err((*this)._field_tokens[((*((*this)._field_i)) - 1LL)],jule::Str("type missing", 12));
		return nullptr;
	}
	jule::I64 _32013_expr_delta = (*((*this)._field_i));
	jule::Ptr<_2129e3d42_TypeDecl> _32217_elem = (*this)._method_step();
	if ((_32217_elem == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_212b15392_ArrTypeDecl> _32717_arrt = jule::new_struct<_212b15392_ArrTypeDecl>(new( std::nothrow ) _212b15392_ArrTypeDecl(_32217_elem,jule::Ptr<_212b16162_Expr>()));
	jule::Slice<_212ae5c02_Token> _33117_expr_tokens = (*this)._field_tokens.slice(0LL,_32013_expr_delta);
	std::tie(std::ignore,_33117_expr_tokens) = _1e767898c_range_last(_33117_expr_tokens);
	_33117_expr_tokens=_33117_expr_tokens.slice(1LL,(_33117_expr_tokens.len() - 1LL));
	_212ae5c02_Token _33417_token = _33117_expr_tokens[0LL];
	if (((_33117_expr_tokens.len() == 1LL) && (_33417_token._field_id == static_cast<jule::U64>(7LLU))) && (_33417_token._field_kind == jule::Str("...", 3))) {
	} else {
		(*(_32717_arrt))._field_size=(*((*this)._field_p))._method_build_expr(_33117_expr_tokens);
	}
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_33417_token,jule::Any(_32717_arrt)));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_map(jule::I64 _34728_colon,jule::Slice<_212ae5c02_Token>& _34745_tokens) {
	_212ae5c02_Token _34817_colon_token = (*this)._field_tokens[_34728_colon];
	if ((_34728_colon == 0LL) || ((_34728_colon + 1LL) >= static_cast<jule::I64>(_34745_tokens.len()))) {
		(*this)._method_push_err(_34817_colon_token,jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Slice<_212ae5c02_Token> _35317_key_tokens = _34745_tokens.slice(0LL,_34728_colon);
	jule::Slice<_212ae5c02_Token> _35417_val_tokens = _34745_tokens.slice((_34728_colon + 1LL));
	jule::Ptr<_212b157d2_MapTypeDecl> _35517_mapt = jule::new_struct<_212b157d2_MapTypeDecl>(new( std::nothrow ) _212b157d2_MapTypeDecl());
	jule::I64 _35717_j = 0LL;
	jule::Ptr<_2129e3d42_TypeDecl> _35818_keyt;
	jule::Bool _35828_ok;
	std::tie(_35818_keyt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35317_key_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < static_cast<jule::I64>(_35317_key_tokens.len())) {
		(*this)._method_push_err(_35317_key_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_key=_35818_keyt;
	_35717_j=0LL;
	jule::Ptr<_2129e3d42_TypeDecl> _36718_valt;
	std::tie(_36718_valt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35417_val_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < static_cast<jule::I64>(_35417_val_tokens.len())) {
		(*this)._method_push_err(_35417_val_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_val=_36718_valt;
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_34817_colon_token,jule::Any(_35517_mapt)));
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_build_enumerable(void) {
	_212ae5c02_Token _38217_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((((*((*this)._field_i)) + 2LL) >= static_cast<jule::I64>((*this)._field_tokens.len())) || (_38217_token._field_id != static_cast<jule::U64>(3LLU))) || (_38217_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_38217_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	_38217_token=(*this)._field_tokens[(*((*this)._field_i))];
	if ((_38217_token._field_id == static_cast<jule::U64>(3LLU)) && (_38217_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_212ae5c02_Token> _39618_map_tokens;
	jule::I64 _39630_colon;
	std::tie(_39618_map_tokens,_39630_colon) = _1e76928b8_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if ((_39630_colon == -1LL)) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39630_colon,_39618_map_tokens);
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e769304a_TypeBuilder::_method_step(void) {
	_212ae5c02_Token _40513_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _40513_token._field_id };
		
		if (_match_expr == static_cast<jule::U64>(1LLU)) {
			_case_begin_1b73e4e31:;
			{
				return (*this)._method_build_prim();
			}
		}
		else if (_match_expr == static_cast<jule::U64>(2LLU)) {
			_case_begin_1b73e4e97:;
			{
				return (*this)._method_build_ident();
			}
		}
		else if (_match_expr == static_cast<jule::U64>(31LLU)) {
			_case_begin_1b73e58d2:;
			{
				return (*this)._method_build_cpp_link();
			}
		}
		else if (_match_expr == static_cast<jule::U64>(33LLU)) {
			_case_begin_1b73e5948:;
			{
				return (*this)._method_build_fn();
			}
		}
		else if (_match_expr == static_cast<jule::U64>(7LLU)) {
			_case_begin_1b73e59ae:;
			{
				return (*this)._method_build_op();
			}
		}
		else if (_match_expr == static_cast<jule::U64>(3LLU)) {
			_case_begin_1b73e5a25:;
			{
				return (*this)._method_build_enumerable();
			}
		}
		else {
			_case_begin_1b73e3869:;
			{
				((*((*this)._field_i)))++;
				(*this)._method_push_err(_40513_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_1b73e4a24:;
	}
}



inline std::tuple<jule::Ptr<_2129e3d42_TypeDecl>,jule::Bool> _1e769304a_TypeBuilder::_method_build(void) {
	jule::Bool _43444_ok = jule::Bool();
	jule::Ptr<_2129e3d42_TypeDecl> _43517_root = (*this)._method_step();
	if ((_43517_root == nullptr)) {
		_43444_ok = false;
		return std::make_tuple(_1e7692456_build_void_type(),_43444_ok);
	}
	_43444_ok = true;
	return std::make_tuple(_43517_root,_43444_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e769304a_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce045d56_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1cde9edae_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce0e76ee_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1cde2b80d_Decimal::_method_set(jule::Str _23422_s) {
	jule::Bool _23432_ok = jule::Bool();
	jule::I64 _23517_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23517_i >= static_cast<jule::I64>(_23422_s.len())) {
		return _23432_ok;
	}
	{
		
		if (_23422_s[_23517_i] == '+') {
			_case_begin_1b798307e:;
			{
				(_23517_i)++;
			}
		}
		else if (_23422_s[_23517_i] == '-') {
			_case_begin_1b7983337:;
			{
				(*this)._field_neg=true;
				(_23517_i)++;
			}
		}
		_match_end_1b7982eb3:;
	}
	jule::Bool _25217_sawdot = false;
	jule::Bool _25317_sawdigits = false;
	for (; _23517_i < static_cast<jule::I64>(_23422_s.len()); (_23517_i)++) {
		{
			{
				
				if (_23422_s[_23517_i] == '_') {
					_case_begin_1b7985339:;
					{
						goto _iter_next_1b7982a84;
					}
				}
				else if (_23422_s[_23517_i] == '.') {
					_case_begin_1b79853b1:;
					{
						if (_25217_sawdot) {
							return _23432_ok;
						}
						_25217_sawdot=true;
						(*this)._field_dp=(*this)._field_nd;
						goto _iter_next_1b7982a84;
					}
				}
				else if (('0' <= _23422_s[_23517_i]) && (_23422_s[_23517_i] <= '9')) {
					_case_begin_1b7985438:;
					{
						_25317_sawdigits=true;
						if ((_23422_s[_23517_i] == '0') && ((*this)._field_nd == 0LL)) {
							((*this)._field_dp)--;
							goto _iter_next_1b7982a84;
						}
						if (((*this)._field_nd < 800LL)) {
							(*this)._field_d[(*this)._field_nd]=_23422_s[_23517_i];
							((*this)._field_nd)++;
						} else if (_23422_s[_23517_i] != '0') {
							(*this)._field_trunc=true;
						}
						goto _iter_next_1b7982a84;
					}
				}
				_match_end_1b7985229:;
			}
			goto _iter_end_1b7982a84;
		}
	_iter_next_1b7982a84:;
	}
	_iter_end_1b7982a84:;
	if ((!(_25317_sawdigits))) {
		return _23432_ok;
	}
	if ((!(_25217_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23517_i < static_cast<jule::I64>(_23422_s.len())) && (_1ce0de394_lower(_23422_s[_23517_i]) == 'e')) {
		(_23517_i)++;
		if (_23517_i >= static_cast<jule::I64>(_23422_s.len())) {
			return _23432_ok;
		}
		jule::I64 _29821_esign = 1LL;
		if (_23422_s[_23517_i] == '+') {
			(_23517_i)++;
		} else if (_23422_s[_23517_i] == '-') {
			(_23517_i)++;
			_29821_esign=-1LL;
		}
		if (((_23517_i >= static_cast<jule::I64>(_23422_s.len())) || (_23422_s[_23517_i] < '0')) || (_23422_s[_23517_i] > '9')) {
			return _23432_ok;
		}
		jule::I64 _30821_e = 0LL;
		for (; (_23517_i < static_cast<jule::I64>(_23422_s.len())) && ((('0' <= _23422_s[_23517_i]) && (_23422_s[_23517_i] <= '9')) || (_23422_s[_23517_i] == '_')); (_23517_i)++) {
			{
				if (_23422_s[_23517_i] == '_') {
					goto _iter_next_1b798c50b;
				}
				if ((_30821_e < 10000LL)) {
					_30821_e=static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>((_30821_e * 10LL)) + static_cast<jule::I64>(static_cast<jule::I64>(_23422_s[_23517_i]))) - '0');
				}
			}
		_iter_next_1b798c50b:;
		}
		_iter_end_1b798c50b:;
		(*this)._field_dp+=static_cast<jule::I64>(_30821_e * _29821_esign);
	}
	if (_23517_i != static_cast<jule::I64>(_23422_s.len())) {
		return _23432_ok;
	}
	_23432_ok=true;
	return _23432_ok;
}



inline std::tuple<jule::U64,jule::Bool> _1cde2b80d_Decimal::_method_float_bits(_1ce045d56_FloatInfo& _32830_flt) {
	jule::U64 _32848_b = jule::U64();
	jule::Bool _32856_overflow = jule::Bool();
	jule::I64 _32917_exp = 0LL;
	jule::U64 _33017_mant = 0LLU;
	if (((*this)._field_nd == 0LL)) {
		_33017_mant=0LLU;
		_32917_exp=_32830_flt._field_bias;
		goto _julec_label_out;
	}
	if (((*this)._field_dp > 310LL)) {
		goto _julec_label_overflow;
	}
	if (((*this)._field_dp < -330LL)) {
		_33017_mant=0LLU;
		_32917_exp=_32830_flt._field_bias;
		goto _julec_label_out;
	}
	_32917_exp=0LL;
	while (((*this)._field_dp > 0LL)) {
		{
			jule::I64 _35521_n = 0LL;
			if ((*this)._field_dp >= static_cast<jule::I64>(_1ce0dac31_POWTAB.len())) {
				_35521_n=27LL;
			} else {
				_35521_n=_1ce0dac31_POWTAB[(*this)._field_dp];
			}
			(*this)._method_shift(static_cast<jule::I64>((-(_35521_n))));
			_32917_exp+=_35521_n;
		}
	_iter_next_1b79965d1:;
	}
	_iter_end_1b79965d1:;
	while (((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d[0LL] < '5'))) {
		{
			jule::I64 _36521_n = 0LL;
			if ((-((*this)._field_dp)) >= static_cast<jule::I64>(_1ce0dac31_POWTAB.len())) {
				_36521_n=27LL;
			} else {
				_36521_n=_1ce0dac31_POWTAB[(-((*this)._field_dp))];
			}
			(*this)._method_shift(_36521_n);
			_32917_exp-=_36521_n;
		}
	_iter_next_1b7998968:;
	}
	_iter_end_1b7998968:;
	(_32917_exp)--;
	if (_32917_exp < static_cast<jule::I64>((_32830_flt._field_bias + 1LL))) {
		jule::I64 _38217_n = (_32830_flt._field_bias + 1LL) - _32917_exp;
		(*this)._method_shift(static_cast<jule::I64>((-(_38217_n))));
		_32917_exp+=_38217_n;
	}
	if ((_32917_exp - _32830_flt._field_bias) >= static_cast<jule::I64>(static_cast<jule::I64>(((1LL << _32830_flt._field_expbits) - 1LL)))) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::I64>(static_cast<jule::I64>(1LL + _32830_flt._field_mantbits)));
	_33017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_33017_mant == static_cast<jule::U64>(2LLU << _32830_flt._field_mantbits)) {
		_33017_mant>>=1LLU;
		(_32917_exp)++;
		if ((_32917_exp - _32830_flt._field_bias) >= static_cast<jule::I64>(static_cast<jule::I64>(((1LL << _32830_flt._field_expbits) - 1LL)))) {
			goto _julec_label_overflow;
		}
	}
	if (((_33017_mant & static_cast<jule::U64>(1LLU << _32830_flt._field_mantbits)) == 0LLU)) {
		_32917_exp=_32830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_33017_mant=0LLU;
	_32917_exp=static_cast<jule::I64>(static_cast<jule::I64>(((static_cast<jule::U64>(1LLU) << _32830_flt._field_expbits) - 1LLU) + static_cast<jule::U64>(static_cast<jule::U64>(_32830_flt._field_bias))));
	_32856_overflow=true;
	_julec_label_out:;
	jule::U64 _41817_bits = _33017_mant & static_cast<jule::U64>((static_cast<jule::U64>(1LLU << _32830_flt._field_mantbits) - 1LLU));
	_41817_bits|=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_32917_exp - _32830_flt._field_bias) & static_cast<jule::I64>(static_cast<jule::I64>(((1LL << _32830_flt._field_expbits) - 1LL))))) << _32830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_41817_bits|=static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _32830_flt._field_mantbits) << _32830_flt._field_expbits);
	}
	_32848_b = _41817_bits;
	return std::make_tuple(_32848_b,_32856_overflow);
}



inline void _1cde2b80d_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>();
	jule::I64 _15617_n = 0LL;
	while ((_15229_v > 0LLU)) {
		{
			jule::U64 _15817_v1 = (_15229_v / 10LLU);
			_15229_v-=static_cast<jule::U64>(10LLU * _15817_v1);
			_15317_buf[_15617_n]=static_cast<jule::U8>(static_cast<jule::U8>(_15229_v + '0'));
			(_15617_n)++;
			_15229_v=_15817_v1;
		}
	_iter_next_1b79a5d82:;
	}
	_iter_end_1b79a5d82:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	for (; (_15617_n >= 0LL); (_15617_n)--) {
		{
			(*this)._field_d[(*this)._field_nd]=_15317_buf[_15617_n];
			((*this)._field_nd)++;
		}
	_iter_next_1b79a71b3:;
	}
	_iter_end_1b79a71b3:;
	(*this)._field_dp=(*this)._field_nd;
	_1cde7327d_trim((*this));
}



inline void _1cde2b80d_Decimal::_method_shift(jule::I64 _17728_k) {
	{
		
		if (((*this)._field_nd == 0LL)) {
			_case_begin_1b79a8eb7:;
		}
		else if ((_17728_k > 0LL)) {
			_case_begin_1b79a903e:;
			{
				while ((_17728_k > 60LL)) {
					{
						_1ce317996_left_shift((*this),60LLU);
						_17728_k-=60LL;
					}
				_iter_next_1b79a969e:;
				}
				_iter_end_1b79a969e:;
				_1ce317996_left_shift((*this),static_cast<jule::U64>(static_cast<jule::U64>(_17728_k)));
			}
		}
		else if ((_17728_k < 0LL)) {
			_case_begin_1b79a90b6:;
			{
				while ((_17728_k < -60LL)) {
					{
						_1ce349005_right_shift((*this),60LLU);
						_17728_k+=60LL;
					}
				_iter_next_1b79aad10:;
				}
				_iter_end_1b79aad10:;
				_1ce349005_right_shift((*this),static_cast<jule::U64>(static_cast<jule::U64>((-(_17728_k)))));
			}
		}
		_match_end_1b79a8da7:;
	}
}



inline void _1cde2b80d_Decimal::_method_round_down(jule::I64 _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_1cde7327d_trim((*this));
}



inline void _1cde2b80d_Decimal::_method_round_up(jule::I64 _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::I64 _21217_i = (_20627_nd - 1LL);
	for (; (_21217_i >= 0LL); (_21217_i)--) {
		{
			jule::U8 _21417_c = (*this)._field_d[_21217_i];
			if (_21417_c < '9') {
				((*this)._field_d[_21217_i])++;
				(*this)._field_nd=static_cast<jule::I64>((_21217_i + 1LL));
				return;
			}
		}
	_iter_next_1b79aea06:;
	}
	_iter_end_1b79aea06:;
	(*this)._field_d[0LL]='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _1cde2b80d_Decimal::_method_round(jule::I64 _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_1cde60ad9_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _1cde2b80d_Decimal::_method_rounded_integer(void) {
	if (((*this)._field_dp > 20LL)) {
		return jule::MAX_U64;
	}
	jule::I64 _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	for (; (_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd); (_25017_i)++) {
		{
			_25117_n=static_cast<jule::U64>(static_cast<jule::U64>((_25117_n * 10LLU)) + static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_d[_25017_i] - '0')));
		}
	_iter_next_1b79b3994:;
	}
	_iter_end_1b79b3994:;
	for (; _25017_i < (*this)._field_dp; (_25017_i)++) {
		{
			_25117_n*=10LLU;
		}
	_iter_next_1b79b5b1c:;
	}
	_iter_end_1b79b5b1c:;
	if (_1cde60ad9_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _1cde2b80d_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce4b898d_Const> _1ce4b898d_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_1ce4b898d_Const>(new( std::nothrow ) _1ce4b898d_Const(jule::Any(_1327_x)));
}



inline jule::Ptr<_1ce4b898d_Const> _1ce4b898d_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_1ce4b898d_Const>(new( std::nothrow ) _1ce4b898d_Const(jule::Any(_1527_x)));
}



inline jule::Ptr<_1ce4b898d_Const> _1ce4b898d_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_1ce4b898d_Const>(new( std::nothrow ) _1ce4b898d_Const(jule::Any(_1728_x)));
}



inline jule::Ptr<_1ce4b898d_Const> _1ce4b898d_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_1ce4b898d_Const>(new( std::nothrow ) _1ce4b898d_Const(jule::Any(_1927_x)));
}



inline jule::Ptr<_1ce4b898d_Const> _1ce4b898d_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_1ce4b898d_Const>(new( std::nothrow ) _1ce4b898d_Const(jule::Any(_2127_x)));
}



inline jule::Ptr<_1ce4b898d_Const> _1ce4b898d_Const::_static_method_new_nil(void) {
	return jule::new_struct<_1ce4b898d_Const>(new( std::nothrow ) _1ce4b898d_Const(jule::Any(nullptr)));
}



inline jule::I64 _1ce4b898d_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
}



inline jule::U64 _1ce4b898d_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LLU;
	}
	return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
}



inline jule::Bool _1ce4b898d_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _1ce4b898d_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str();
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _1ce4b898d_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
}



inline jule::I64 _1ce4b898d_Const::_method_as_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1b7bed22d:;
			{
				return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1b7bed294:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::U64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1b7bed4c5:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_1b7beccdd:;
			{
				return 0LL;
			}
		}
		_match_end_1b7be937d:;
	}
}



inline jule::U64 _1ce4b898d_Const::_method_as_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1b7c00153:;
			{
				return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1b7c001b9:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1b7c003ea:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_1b7beec13:;
			{
				return 0LLU;
			}
		}
		_match_end_1b7becd76:;
	}
}



inline jule::F64 _1ce4b898d_Const::_method_as_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1b7c02078:;
			{
				return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1b7c020de:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1b7c02320:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::U64()));
			}
		}
		else {
			_case_begin_1b7c01b38:;
			{
				return 0LL;
			}
		}
		_match_end_1b7beec9b:;
	}
}



inline void _1ce4b898d_Const::_method_set_i64(jule::I64 _13030_x) {
	(*this)._field_data=jule::Any(_13030_x);
}



inline void _1ce4b898d_Const::_method_set_u64(jule::U64 _13230_x) {
	(*this)._field_data=jule::Any(_13230_x);
}



inline void _1ce4b898d_Const::_method_set_bool(jule::Bool _13431_x) {
	(*this)._field_data=jule::Any(_13431_x);
}



inline void _1ce4b898d_Const::_method_set_str(jule::Str _13630_x) {
	(*this)._field_data=jule::Any(_13630_x);
}



inline void _1ce4b898d_Const::_method_set_f64(jule::F64 _13830_x) {
	(*this)._field_data=jule::Any(_13830_x);
}



inline void _1ce4b898d_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline jule::Bool _1ce4b898d_Const::_method_is_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1b7c077ba:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c07963:;
			{
				return false;
			}
		}
		_match_end_1b7c07842:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_is_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1b7c08aa7:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c08304:;
			{
				return false;
			}
		}
		_match_end_1b7c0829e:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_is_bool(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_1b7c0957a:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c08cc7:;
			{
				return false;
			}
		}
		_match_end_1b7c08c72:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_is_str(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_1b7c0a04d:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c0979a:;
			{
				return false;
			}
		}
		_match_end_1b7c09745:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_is_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1b7c0aa21:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c0a26d:;
			{
				return false;
			}
		}
		_match_end_1b7c0a218:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_is_nil(void) {
	return (*this)._field_data == jule::Any(nullptr);
}



inline jule::Bool _1ce4b898d_Const::_method_are_same_types(_1ce4b898d_Const _19033_x) {
	{
		
		if ((*this)._method_is_i64() == _19033_x._method_is_i64()) {
			_case_begin_1b7c0c6e3:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_u64() == _19033_x._method_is_u64()) {
			_case_begin_1b7c0c094:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_f64() == _19033_x._method_is_f64()) {
			_case_begin_1b7c0c10a:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_bool() == _19033_x._method_is_bool()) {
			_case_begin_1b7c0c171:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_str() == _19033_x._method_is_str()) {
			_case_begin_1b7c0c1d7:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_nil() == _19033_x._method_is_nil()) {
			_case_begin_1b7c0c3b3:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c0be2e:;
			{
				return false;
			}
		}
		_match_end_1b7c0bd63:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_and(_1ce4b898d_Const _21522_x) {
	{
		
		if ((*this)._method_is_bool() && _21522_x._method_is_bool()) {
			_case_begin_1b7c10e44:;
			{
				return (*this)._method_read_bool() && _21522_x._method_read_bool();
			}
		}
		else {
			_case_begin_1b7c106d5:;
			{
				return false;
			}
		}
		_match_end_1b7c10619:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_or(_1ce4b898d_Const _22621_x) {
	{
		
		if ((*this)._method_is_bool() && _22621_x._method_is_bool()) {
			_case_begin_1b7c1282a:;
			{
				return (*this)._method_read_bool() || _22621_x._method_read_bool();
			}
		}
		else {
			_case_begin_1b7c120bb:;
			{
				return false;
			}
		}
		_match_end_1b7c12000:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_eq(_1ce4b898d_Const _23721_x) {
	{
		
		if ((*this)._method_is_nil()) {
			_case_begin_1b7c141ab:;
			{
				return _23721_x._method_is_nil();
			}
		}
		else if ((*this)._method_is_bool()) {
			_case_begin_1b7c13a5c:;
			{
				return _23721_x._method_is_bool() && ((*this)._method_read_bool() == _23721_x._method_read_bool());
			}
		}
		else if ((*this)._method_is_str()) {
			_case_begin_1b7c13ac3:;
			{
				return _23721_x._method_is_str() && ((*this)._method_read_str() == _23721_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c13b39:;
			{
				return (*this)._method_read_i64() == static_cast<jule::I64>(_23721_x._method_as_i64());
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c13ba0:;
			{
				return (*this)._method_read_u64() == static_cast<jule::U64>(_23721_x._method_as_u64());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_1b7c13d7b:;
			{
				return (*this)._method_read_f64() == static_cast<jule::F64>(_23721_x._method_as_f64());
			}
		}
		else {
			_case_begin_1b7c138e7:;
			{
				return false;
			}
		}
		_match_end_1b7c1382b:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_lt(_1ce4b898d_Const _26421_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_1b7c18aa6:;
			{
				return _26421_x._method_is_str() && ((*this)._method_read_str() < _26421_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c18b1c:;
			{
				return (*this)._method_read_i64() < static_cast<jule::I64>(_26421_x._method_as_i64());
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c1848a:;
			{
				return (*this)._method_read_u64() < static_cast<jule::U64>(_26421_x._method_as_u64());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_1b7c18512:;
			{
				return (*this)._method_read_f64() < static_cast<jule::F64>(_26421_x._method_as_f64());
			}
		}
		else {
			_case_begin_1b7c18314:;
			{
				return false;
			}
		}
		_match_end_1b7c18248:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_lt_eq(_1ce4b898d_Const _28724_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_1b7c1bee9:;
			{
				return _28724_x._method_is_str() && ((*this)._method_read_str() <= _28724_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c1c060:;
			{
				return (*this)._method_read_i64() <= static_cast<jule::I64>(_28724_x._method_as_i64());
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c1b8cd:;
			{
				return (*this)._method_read_u64() <= static_cast<jule::U64>(_28724_x._method_as_u64());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_1b7c1b955:;
			{
				return (*this)._method_read_f64() <= static_cast<jule::F64>(_28724_x._method_as_f64());
			}
		}
		else {
			_case_begin_1b7c1b757:;
			{
				return false;
			}
		}
		_match_end_1b7c129c3:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_gt(_1ce4b898d_Const _31021_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_1b7c2063a:;
			{
				return _31021_x._method_is_str() && ((*this)._method_read_str() > _31021_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c206a1:;
			{
				return (*this)._method_read_i64() > static_cast<jule::I64>(_31021_x._method_as_i64());
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c2001e:;
			{
				return (*this)._method_read_u64() > static_cast<jule::U64>(_31021_x._method_as_u64());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_1b7c20096:;
			{
				return (*this)._method_read_f64() > static_cast<jule::F64>(_31021_x._method_as_f64());
			}
		}
		else {
			_case_begin_1b7c1ed98:;
			{
				return false;
			}
		}
		_match_end_1b7c18cd7:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_gt_eq(_1ce4b898d_Const _33324_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_1b7c23a7d:;
			{
				return _33324_x._method_is_str() && ((*this)._method_read_str() >= _33324_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c23ae4:;
			{
				return (*this)._method_read_i64() >= static_cast<jule::I64>(_33324_x._method_as_i64());
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c23462:;
			{
				return (*this)._method_read_u64() >= static_cast<jule::U64>(_33324_x._method_as_u64());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_1b7c234d9:;
			{
				return (*this)._method_read_f64() >= static_cast<jule::F64>(_33324_x._method_as_f64());
			}
		}
		else {
			_case_begin_1b7c232db:;
			{
				return false;
			}
		}
		_match_end_1b7c1c15e:;
	}
}



inline jule::Bool _1ce4b898d_Const::_method_add(_1ce4b898d_Const _35426_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_1b7c27213:;
			{
				if ((!(_35426_x._method_is_str()))) {
					return false;
				}
				(*this)._method_set_str((*this)._method_read_str() + _35426_x._method_read_str());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_1b7c27279:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_read_f64()) + static_cast<jule::F64>(_35426_x._method_as_f64())));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c26ae7:;
			{
				if (_35426_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_as_f64()) + static_cast<jule::F64>(_35426_x._method_read_f64())));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*this)._method_read_i64()) + static_cast<jule::I64>(_35426_x._method_as_i64())));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c26b6e:;
			{
				if (_35426_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_as_f64()) + static_cast<jule::F64>(_35426_x._method_read_f64())));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*this)._method_read_u64()) + static_cast<jule::U64>(_35426_x._method_as_u64())));
				}
			}
		}
		else {
			_case_begin_1b7c26971:;
			{
				return false;
			}
		}
		_match_end_1b7c268a5:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_sub(_1ce4b898d_Const _38326_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_1b7c2d6c0:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_read_f64()) - static_cast<jule::F64>(_38326_x._method_as_f64())));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c2d736:;
			{
				if (_38326_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_as_f64()) - static_cast<jule::F64>(_38326_x._method_read_f64())));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*this)._method_read_i64()) - static_cast<jule::I64>(_38326_x._method_as_i64())));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c2d0a4:;
			{
				if (_38326_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_as_f64()) - static_cast<jule::F64>(_38326_x._method_read_f64())));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*this)._method_read_u64()) - static_cast<jule::U64>(_38326_x._method_as_u64())));
				}
			}
		}
		else {
			_case_begin_1b7c2ce3e:;
			{
				return false;
			}
		}
		_match_end_1b7c2cd73:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_mul(_1ce4b898d_Const _40726_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_1b7c33ce1:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_read_f64()) * static_cast<jule::F64>(_40726_x._method_as_f64())));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c33d57:;
			{
				if (_40726_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_as_f64()) * static_cast<jule::F64>(_40726_x._method_read_f64())));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*this)._method_read_i64()) * static_cast<jule::I64>(_40726_x._method_as_i64())));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c336c5:;
			{
				if (_40726_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>((*this)._method_as_f64()) * static_cast<jule::F64>(_40726_x._method_read_f64())));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*this)._method_read_u64()) * static_cast<jule::U64>(_40726_x._method_as_u64())));
				}
			}
		}
		else {
			_case_begin_1b7c33560:;
			{
				return false;
			}
		}
		_match_end_1b7c33494:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_div(_1ce4b898d_Const _43526_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_1b7c3917b:;
			{
				jule::F64 _43817_l = _43526_x._method_as_f64();
				if ((_43817_l == 0LL)) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div(static_cast<jule::F64>((*this)._method_read_f64()),_43817_l)));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_1b7c391e2:;
			{
				jule::F64 _44417_l = _43526_x._method_as_f64();
				if ((_44417_l == 0LL)) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div(static_cast<jule::F64>((*this)._method_as_f64()),_44417_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c38a60:;
			{
				jule::F64 _45017_l = _43526_x._method_as_f64();
				if ((_45017_l == 0LL)) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div(static_cast<jule::F64>((*this)._method_as_f64()),_45017_l)));
			}
		}
		else {
			_case_begin_1b7c388ea:;
			{
				return false;
			}
		}
		_match_end_1b7c3882e:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_mod(_1ce4b898d_Const _46426_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_1b7c3dd0c:;
			{
				jule::I64 _46717_l = _46426_x._method_as_i64();
				if ((_46717_l == 0LL)) {
					return false;
				}
				(*this)._method_set_i64(static_cast<jule::I64>(jule::mod(static_cast<jule::I64>((*this)._method_read_i64()),_46717_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c3dd73:;
			{
				jule::U64 _47317_l = _46426_x._method_as_u64();
				if ((_47317_l == 0LLU)) {
					return false;
				}
				(*this)._method_set_u64(static_cast<jule::U64>(jule::mod(static_cast<jule::U64>((*this)._method_read_u64()),_47317_l)));
			}
		}
		else {
			_case_begin_1b7c3d58c:;
			{
				return false;
			}
		}
		_match_end_1b7c3d4c1:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_bitwise_and(_1ce4b898d_Const _48634_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_1b7c425a2:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*this)._method_read_i64()) & static_cast<jule::I64>(_48634_x._method_as_i64())));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c42618:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*this)._method_read_u64()) & static_cast<jule::U64>(_48634_x._method_as_u64())));
			}
		}
		else {
			_case_begin_1b7c41d32:;
			{
				return false;
			}
		}
		_match_end_1b7c41c66:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_bitwise_or(_1ce4b898d_Const _50033_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_1b7c44ede:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*this)._method_read_i64()) | static_cast<jule::I64>(_50033_x._method_as_i64())));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c45055:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*this)._method_read_u64()) | static_cast<jule::U64>(_50033_x._method_as_u64())));
			}
		}
		else {
			_case_begin_1b7c4476e:;
			{
				return false;
			}
		}
		_match_end_1b7c446a3:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_xor(_1ce4b898d_Const _51426_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_1b7c4792b:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*this)._method_read_i64()) ^ static_cast<jule::I64>(_51426_x._method_as_i64())));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c47992:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*this)._method_read_u64()) ^ static_cast<jule::U64>(_51426_x._method_as_u64())));
			}
		}
		else {
			_case_begin_1b7c471ab:;
			{
				return false;
			}
		}
		_match_end_1b7c470e0:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_lshift(_1ce4b898d_Const _52829_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_1b7c4a6cb:;
			{
				jule::I64 _53117_l = (*this)._method_as_i64();
				if ((_53117_l < 0LL)) {
					jule::U64 _53321_r = _52829_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_53117_l << _53321_r));
				} else {
					_1ce4b8020_lshift_unsig((*this),_52829_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c4a742:;
			{
				_1ce4b8020_lshift_unsig((*this),_52829_x);
			}
		}
		else {
			_case_begin_1b7c49e5b:;
			{
				return false;
			}
		}
		_match_end_1b7c49d90:;
	}
	return true;
}



inline jule::Bool _1ce4b898d_Const::_method_rshift(_1ce4b898d_Const _54829_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_1b7c4d833:;
			{
				jule::I64 _55117_l = (*this)._method_as_i64();
				if ((_55117_l < 0LL)) {
					jule::U64 _55321_r = _54829_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_55117_l >> _55321_r));
				} else {
					_1ce4b81b8_rshift_unsig((*this),_54829_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_1b7c4d899:;
			{
				_1ce4b81b8_rshift_unsig((*this),_54829_x);
			}
		}
		else {
			_case_begin_1b7c4d0b3:;
			{
				return false;
			}
		}
		_match_end_1b7c4cee7:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce4b898d_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b54b9d82_FileStream> _1b54b9d82_FileStream::_static_method_new(jule::Ptr<_211184b99_File> _1527_f) {
	return jule::new_struct<_1b54b9d82_FileStream>(new( std::nothrow ) _1b54b9d82_FileStream(_1527_f));
}



inline jule::Exceptional<jule::I64> _1b54b9d82_FileStream::_method_read(jule::Slice<jule::U8> _2431_buff) {
	jule::I64 _2448_n = jule::I64();
	_2448_n = static_cast<jule::I64>(({
		auto except = (*((*this)._field_buff))._method_read(_2431_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I64>(except.error);
			return jule::Exceptional<jule::I64>(except.error);
		} jule::I64();});
	}));
	return jule::Exceptional<jule::I64>(jule::Any(),_2448_n);
}



inline jule::Exceptional<jule::I64> _1b54b9d82_FileStream::_method_write(jule::Slice<jule::U8> _2828_buff) {
	jule::I64 _2845_n = jule::I64();
	_2845_n = static_cast<jule::I64>(({
		auto except = (*((*this)._field_buff))._method_write(_2828_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I64>(except.error);
			return jule::Exceptional<jule::I64>(except.error);
		} jule::I64();});
	}));
	return jule::Exceptional<jule::I64>(jule::Any(),_2845_n);
}



inline jule::Exceptional<jule::Slice<jule::U8>> _1b54b9d82_FileStream::_method_read_line(void) {
	
	jule::Slice<jule::U8> _4017_buff = jule::Slice<jule::U8>::alloc(0LL,1024LL);
	jule::Slice<jule::U8> _4117_part = jule::Slice<jule::U8>::alloc(1LL);
	for (;;) {
		{
			jule::I64 _4317_n = ({
				auto except = (*((*this)._field_buff))._method_read(_4117_part);
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
					return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
				} jule::I64();});
			});
			if ((_4317_n == 0LL)) {
				goto _iter_end_1b7cc8638;
			}
			jule::U8 _4817_b = _4117_part[0LL];
			_4017_buff = jule::alloc_for_append(_4017_buff,1);_4017_buff.__push(_4817_b);
			if ((_4817_b == 10LLU)) {
				goto _iter_end_1b7cc8638;
			}
		}
	_iter_next_1b7cc8638:;
	}
	_iter_end_1b7cc8638:;
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_4017_buff);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54b9d82_FileStream &_Src) {
	_Stream << "FileStream{";
	_Stream << "buff:" << _Src._field_buff;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::I64> _1b54bc5e3_ByteStream::_method_read(jule::Slice<jule::U8> _1731_buff) {
	jule::I64 _1748_n = jule::I64();
	if ((!((*this)._method_data()))) {
		_1748_n = 0LL;
		return jule::Exceptional<jule::I64>(jule::Any(),_1748_n);
	}
	_1748_n=static_cast<jule::I64>(copy(_1731_buff,(*this)._field_buff));
	(*this)._field_buff=(*this)._field_buff.slice(_1748_n);
	return jule::Exceptional<jule::I64>(jule::Any(), _1748_n);
}



inline jule::Exceptional<jule::I64> _1b54bc5e3_ByteStream::_method_write(jule::Slice<jule::U8> _2628_buff) {
	jule::I64 _2645_n = jule::I64();
	_2645_n=static_cast<jule::I64>(_2628_buff.len());
	(*this)._field_buff=jule::append((*this)._field_buff,_2628_buff);
	return jule::Exceptional<jule::I64>(jule::Any(), _2645_n);
}



inline jule::Ptr<_1b54bc5e3_ByteStream> _1b54bc5e3_ByteStream::_static_method_new(void) {
	return jule::new_ptr<_1b54bc5e3_ByteStream>();
}



inline jule::Bool _1b54bc5e3_ByteStream::_method_data(void) {
	return ((*this)._field_buff.len() != 0LL);
}



inline void _1b54bc5e3_ByteStream::_method_fit(void) {
	if ((!((*this)._method_data()))) {
		(*this)._field_buff=nullptr;
		return;
	}
	jule::Slice<jule::U8> _5117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*this)._field_buff.len()));
	copy(_5117_buff,(*this)._field_buff);
	(*this)._field_buff=_5117_buff;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54bc5e3_ByteStream &_Src) {
	_Stream << "ByteStream{";
	_Stream << "buff:" << _Src._field_buff;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b54c05c4_Scanner> _1b54c05c4_Scanner::_static_method_new(jule::Trait<_1b54bac95_Reader> _1627_r) {
	return jule::new_struct<_1b54c05c4_Scanner>(new( std::nothrow ) _1b54c05c4_Scanner(_1627_r,jule::Slice<jule::U8>()));
}



inline jule::Ptr<_1b54c05c4_Scanner> _1b54c05c4_Scanner::_static_method_newf(jule::Ptr<_211184b99_File> _2428_f) {
	return jule::new_struct<_1b54c05c4_Scanner>(new( std::nothrow ) _1b54c05c4_Scanner(_1b54b9d82_FileStream::_static_method_new(_2428_f),jule::Slice<jule::U8>()));
}



inline void _1b54c05c4_Scanner::_method_reset(void) {
	(*this)._field_b=nullptr;
}



inline jule::Slice<jule::U8> _1b54c05c4_Scanner::_method_bytes(void) {
	return (*this)._field_b;
}



inline jule::Str _1b54c05c4_Scanner::_method_text(void) {
	return static_cast<jule::Str>((*this)._field_b);
}



inline jule::Exceptional<jule::Bool> _1b54c05c4_Scanner::_method_scan(void) {
	
	(*this)._method_reset();
	jule::Slice<jule::U8> _5117_buff = jule::Slice<jule::U8>::alloc(0LL,1024LL);
	jule::Slice<jule::U8> _5217_part = jule::Slice<jule::U8>::alloc(1LL);
	for (;;) {
		{
			jule::I64 _5417_n = ({
				auto except = (*this)._field_r.get()._method_read(_5217_part);
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Bool>(jule::Any(),false);
					return jule::Exceptional<jule::Bool>(jule::Any(),false);
				} jule::I64();});
			});
			if ((_5417_n == 0LL)) {
				goto _iter_end_1b7cd5e81;
			}
			jule::U8 _6117_b = _5217_part[0LL];
			if ((_6117_b == 10LLU)) {
				goto _iter_end_1b7cd5e81;
			}
			_5117_buff = jule::alloc_for_append(_5117_buff,1);_5117_buff.__push(_6117_b);
		}
	_iter_next_1b7cd5e81:;
	}
	_iter_end_1b7cd5e81:;
	(*this)._field_b=_5117_buff;
	return jule::Exceptional<jule::Bool>(jule::Any(),(_5217_part[0LL] != 0LLU));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54c05c4_Scanner &_Src) {
	_Stream << "Scanner{";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "b:" << _Src._field_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83ac923_OperatorMap &_Src) {
	_Stream << "OperatorMap{";
	_Stream << "eq:" << _Src._field_eq << ", ";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "gt_eq:" << _Src._field_gt_eq << ", ";
	_Stream << "lt:" << _Src._field_lt << ", ";
	_Stream << "lt_eq:" << _Src._field_lt_eq << ", ";
	_Stream << "shl:" << _Src._field_shl << ", ";
	_Stream << "shr:" << _Src._field_shr << ", ";
	_Stream << "add:" << _Src._field_add << ", ";
	_Stream << "sub:" << _Src._field_sub << ", ";
	_Stream << "div:" << _Src._field_div << ", ";
	_Stream << "mul:" << _Src._field_mul << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "bit_and:" << _Src._field_bit_and << ", ";
	_Stream << "bit_or:" << _Src._field_bit_or << ", ";
	_Stream << "bit_xor:" << _Src._field_bit_xor << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "bit_not:" << _Src._field_bit_not << ", ";
	_Stream << "add_assign:" << _Src._field_add_assign << ", ";
	_Stream << "sub_assign:" << _Src._field_sub_assign << ", ";
	_Stream << "div_assign:" << _Src._field_div_assign << ", ";
	_Stream << "mul_assign:" << _Src._field_mul_assign << ", ";
	_Stream << "mod_assign:" << _Src._field_mod_assign << ", ";
	_Stream << "shl_assign:" << _Src._field_shl_assign << ", ";
	_Stream << "shr_assign:" << _Src._field_shr_assign << ", ";
	_Stream << "bit_or_assign:" << _Src._field_bit_or_assign << ", ";
	_Stream << "bit_and_assign:" << _Src._field_bit_and_assign << ", ";
	_Stream << "bit_xor_assign:" << _Src._field_bit_xor_assign;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83ae55c_Operators &_Src) {
	_Stream << "Operators{";
	_Stream << "eq:" << _Src._field_eq << ", ";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "gt_eq:" << _Src._field_gt_eq << ", ";
	_Stream << "lt:" << _Src._field_lt << ", ";
	_Stream << "lt_eq:" << _Src._field_lt_eq << ", ";
	_Stream << "shl:" << _Src._field_shl << ", ";
	_Stream << "shr:" << _Src._field_shr << ", ";
	_Stream << "add:" << _Src._field_add << ", ";
	_Stream << "sub:" << _Src._field_sub << ", ";
	_Stream << "div:" << _Src._field_div << ", ";
	_Stream << "mul:" << _Src._field_mul << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "bit_and:" << _Src._field_bit_and << ", ";
	_Stream << "bit_or:" << _Src._field_bit_or << ", ";
	_Stream << "bit_xor:" << _Src._field_bit_xor << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "bit_not:" << _Src._field_bit_not << ", ";
	_Stream << "add_assign:" << _Src._field_add_assign << ", ";
	_Stream << "sub_assign:" << _Src._field_sub_assign << ", ";
	_Stream << "div_assign:" << _Src._field_div_assign << ", ";
	_Stream << "mul_assign:" << _Src._field_mul_assign << ", ";
	_Stream << "mod_assign:" << _Src._field_mod_assign << ", ";
	_Stream << "shl_assign:" << _Src._field_shl_assign << ", ";
	_Stream << "shr_assign:" << _Src._field_shr_assign << ", ";
	_Stream << "bit_or_assign:" << _Src._field_bit_or_assign << ", ";
	_Stream << "bit_and_assign:" << _Src._field_bit_and_assign << ", ";
	_Stream << "bit_xor_assign:" << _Src._field_bit_xor_assign;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83b2cbe_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83bdbcb_OperandExprModel &_Src) {
	_Stream << "OperandExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c044c_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c1393_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c31b9_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c4220_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c4880_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c5056_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c6d16_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c76a7_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c8004_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c87c9_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c8c3b_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c95aa_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c9b1b_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83ca39c_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83caac8_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cb1e4_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cc987_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cd2c3_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cd9ee_BuiltinErrorCallExprModel &_Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83ce22a_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cec97_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d01d7_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d0726_IntegratedToStrExprModel &_Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d0d53_TernaryExprModel &_Src) {
	_Stream << "TernaryExprModel{";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d15c3_BackendEmitExprModel &_Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d1cbb_FreeExprModel &_Src) {
	_Stream << "FreeExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d3284_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1e83d5bb0_ParamIns::_method_to_str(void) {
	jule::Str _17717_s = jule::Str();
	if ((*((*this)._field_decl))._field_mutable) {
		_17717_s+=jule::Str("mut ", 4);
	}
	if ((*((*this)._field_decl))._field_reference) {
		_17717_s+=jule::Str("&_:", 3);
	}
	if ((*((*this)._field_decl))._method_is_self()) {
		if ((*((*this)._field_decl))._method_is_ref()) {
			_17717_s+=jule::Str("&", 1);
		}
		_17717_s+=jule::Str("self", 4);
		return _17717_s;
	}
	if ((*((*this)._field_decl))._field_variadic) {
		_17717_s+=jule::Str("...", 3);
	}
	if (((*this)._field_kind != nullptr)) {
		_17717_s+=(*((*this)._field_kind))._method_to_str();
	}
	return _17717_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d5bb0_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1e83d630e_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _1e83d630e_FnIns::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _22826_other) {
	jule::Ptr<_1e83d630e_FnIns> _22913_f = (*(_22826_other))._method_fnc();
	if ((_22913_f == nullptr)) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_exceptional != (*((*(_22913_f))._field_decl))._field_exceptional) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_unsafety != (*((*(_22913_f))._field_decl))._field_unsafety) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != static_cast<jule::I64>((*(_22913_f))._field_generics.len())) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._method_is_void() != (*((*(_22913_f))._field_decl))._method_is_void()) {
		return false;
	}
	jule::I64 _25017_i = 0LL;
	for (; _25017_i < static_cast<jule::I64>((*(this->self))._field_generics.len()); (_25017_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_25017_i]))._method_equals((*(_22913_f))._field_generics[_25017_i])))) {
				return false;
			}
		}
	_iter_next_1b805274c:;
	}
	_iter_end_1b805274c:;
	jule::Fn<jule::Bool(jule::Ptr<_1e83d5bb0_ParamIns>,jule::Ptr<_1e83d5bb0_ParamIns>)> _25713_check_params = jule::Fn<jule::Bool(jule::Ptr<_1e83d5bb0_ParamIns>,jule::Ptr<_1e83d5bb0_ParamIns>)>([=](jule::Ptr<_1e83d5bb0_ParamIns> _25731_p1,jule::Ptr<_1e83d5bb0_ParamIns> _25746_p2) mutable -> jule::Bool {
		if ((*((*(_25731_p1))._field_decl))._field_mutable != (*((*(_25746_p2))._field_decl))._field_mutable) {
			return false;
		}
		if ((*((*(_25731_p1))._field_decl))._method_is_self()) {
			if ((!((*((*(_25746_p2))._field_decl))._method_is_self()))) {
				return false;
			}
			if ((*((*(_25731_p1))._field_decl))._method_is_ref() != (*((*(_25746_p2))._field_decl))._method_is_ref()) {
				return false;
			}
			return true;
		}
		if ((*((*(_25731_p1))._field_decl))._field_reference != (*((*(_25746_p2))._field_decl))._field_reference) {
			return false;
		}
		if ((*((*(_25731_p1))._field_decl))._field_variadic != (*((*(_25746_p2))._field_decl))._field_variadic) {
			return false;
		}
		return (*((*(_25731_p1))._field_kind))._method_equals((*(_25746_p2))._field_kind);
	});
	if ((*(_22913_f))._field_params.len() != static_cast<jule::I64>((*(this->self))._field_params.len())) {
		return false;
	}
	_25017_i=0LL;
	for (; _25017_i < static_cast<jule::I64>((*(this->self))._field_params.len()); (_25017_i)++) {
		{
			if ((!(_25713_check_params((*(this->self))._field_params[_25017_i],(*(_22913_f))._field_params[_25017_i])))) {
				return false;
			}
		}
	_iter_next_1b805b679:;
	}
	_iter_end_1b805b679:;
	if ((!((*((*(this->self))._field_decl))._method_is_void()))) {
		if ((!((*((*(this->self))._field_result))._method_equals((*(_22913_f))._field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _1e83d630e_FnIns::_method_is_builtin(void) {
	return ((*this)._field_caller != nullptr);
}



inline jule::Bool _1e83d630e_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (((*this)._field_decl != nullptr) && (*((*this)._field_decl))._method_is_anon());
}



inline jule::Bool _1e83d630e_FnIns::_method_same(jule::Ptr<_1e83d630e_FnIns> _32023_f) {
	if (((*this)._field_decl != (*(_32023_f))._field_decl) || ((*(_32023_f))._field_generics.len() != static_cast<jule::I64>((*this)._field_generics.len()))) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_1b8061cbc:;
		if (it != expr.end()) {
			jule::I64 _1b806265d_i = it - expr.begin();
			jule::Ptr<_1ce76121e_TypeKind> &_1b80628b1_g = *it;
			{
				if ((!((*(_1b80628b1_g))._method_equals((*(_32023_f))._field_generics[_1b806265d_i])))) {
					return false;
				}
			}
			_iter_next_1b8061cbc:;
			++it;
			_1b806265d_i++;
			goto _iter_begin_1b8061cbc;
		}
		_iter_end_1b8061cbc:;
	}
	return true;
}



inline jule::Str _1e83d630e_FnIns::_method_get_kind_str(jule::Bool _33631_ident) {
	jule::Str _33717_s = jule::Str();
	if ((*((*this)._field_decl))._field_unsafety) {
		_33717_s+=jule::Str("unsafe ", 7);
	}
	_33717_s+=jule::Str("fn", 2);
	if (_33631_ident && ((*this)._field_decl != nullptr)) {
		_33717_s+=jule::Str(" ", 1) + (*((*this)._field_decl))._field_ident;
	}
	if (((*this)._field_generics.len() > 0LL)) {
		_33717_s+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_1b8065c6b:;
			if (it != expr.end()) {
				jule::I64 _1b8065cb0_i = it - expr.begin();
				jule::Ptr<_1ce76121e_TypeKind> &_1b8066002_t = *it;
				{
					_33717_s+=(*(_1b8066002_t))._method_to_str();
					if ((_1b8065cb0_i + 1LL) < static_cast<jule::I64>((*this)._field_generics.len())) {
						_33717_s+=jule::Str(",", 1);
					}
				}
				_iter_next_1b8065c6b:;
				++it;
				_1b8065cb0_i++;
				goto _iter_begin_1b8065c6b;
			}
			_iter_end_1b8065c6b:;
		}
		_33717_s+=jule::Str("]", 1);
	} else if (((*((*this)._field_decl))._field_generics.len() > 0LL)) {
		_33717_s+=jule::Str("[", 1);
		{
			auto &expr = (*((*this)._field_decl))._field_generics;
			auto it = expr.begin();
			_iter_begin_1b8067be6:;
			if (it != expr.end()) {
				jule::I64 _1b8067ca1_i = it - expr.begin();
				jule::Ptr<_212b1c9b5_GenericDecl> &_1b8067e9e_g = *it;
				{
					_33717_s+=(*(_1b8067e9e_g))._field_ident;
					if ((_1b8067ca1_i + 1LL) < static_cast<jule::I64>((*((*this)._field_decl))._field_generics.len())) {
						_33717_s+=jule::Str(",", 1);
					}
				}
				_iter_next_1b8067be6:;
				++it;
				_1b8067ca1_i++;
				goto _iter_begin_1b8067be6;
			}
			_iter_end_1b8067be6:;
		}
		_33717_s+=jule::Str("]", 1);
	}
	_33717_s+=jule::Str("(", 1);
	jule::I64 _37013_n = (*this)._field_params.len();
	if ((_37013_n > 0LL)) {
		{
			auto &expr = (*this)._field_params;
			auto it = expr.begin();
			_iter_begin_1b806a1e3:;
			if (it != expr.end()) {
				jule::Ptr<_1e83d5bb0_ParamIns> &_1b806a347_p = *it;
				{
					_33717_s+=(*(_1b806a347_p))._method_to_str();
					_33717_s+=jule::Str(",", 1);
				}
				_iter_next_1b806a1e3:;
				++it;
				goto _iter_begin_1b806a1e3;
			}
			_iter_end_1b806a1e3:;
		}
		(_33717_s).mut_slice(0LL,_33717_s.len() - 1LL);
	}
	_33717_s+=jule::Str(")", 1);
	if ((*((*this)._field_decl))._field_exceptional) {
		_33717_s+=jule::Str("!", 1);
	}
	if ((!((*((*this)._field_decl))._method_is_void()))) {
		_33717_s+=jule::Str(":", 1);
		_33717_s+=(*((*this)._field_result))._method_to_str();
	}
	return _33717_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d630e_FnIns &_Src) {
	_Stream << ((_1e83d630e_FnIns)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Ptr<_1e83de4b0_ReferenceStack> _1e83de4b0_ReferenceStack::_static_method_new(void) {
	return jule::new_struct<_1e83de4b0_ReferenceStack>(new( std::nothrow ) _1e83de4b0_ReferenceStack());
}



inline jule::I64 _1e83de4b0_ReferenceStack::_method_len(void) {
	return static_cast<jule::I64>((*this)._field_buffer.len());
}



inline jule::Any _1e83de4b0_ReferenceStack::_method_at(jule::I64 _5925_i) {
	return (*this)._field_buffer[_5925_i];
}



inline void _1e83de4b0_ReferenceStack::_method_push(jule::Any _6431_ref) {
	(*this)._field_buffer = jule::alloc_for_append((*this)._field_buffer,1);(*this)._field_buffer.__push(_6431_ref);
}



inline jule::Bool _1e83de4b0_ReferenceStack::_method_exist_0(jule::Ptr<_1ce6cecb4_Var> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_1b86b2bc0:;
		if (it != expr.end()) {
			jule::Any &_1b86b2ce1_ref = *it;
			{
				if (_1b86b2ce1_ref == jule::Any(_6927_t)) {
					return true;
				}
			}
			_iter_next_1b86b2bc0:;
			++it;
			goto _iter_begin_1b86b2bc0;
		}
		_iter_end_1b86b2bc0:;
	}
	return false;
}

inline jule::Bool _1e83de4b0_ReferenceStack::_method_exist_1(jule::Ptr<_1e83d630e_FnIns> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_1b86b5c17:;
		if (it != expr.end()) {
			jule::Any &_1b86b5d38_ref = *it;
			{
				if (_1b86b5d38_ref == jule::Any(_6927_t)) {
					return true;
				}
			}
			_iter_next_1b86b5c17:;
			++it;
			goto _iter_begin_1b86b5c17;
		}
		_iter_end_1b86b5c17:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83de4b0_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e83e45b4_SymbolBuilder> _1e83e45b4_SymbolBuilder::_method_get_root(void) {
	jule::Ptr<_1e83e45b4_SymbolBuilder> _30217_root = this->self;
	while (((*(_30217_root))._field_owner != nullptr)) {
		{
			_30217_root=(*(_30217_root))._field_owner;
		}
	_iter_next_1b807034c:;
	}
	_iter_end_1b807034c:;
	return _30217_root;
}



inline void _1e83e45b4_SymbolBuilder::_method_push_err(_212ae5c02_Token& _30928_token,jule::Str _30942_fmt,jule::Slice<jule::Any> _30955_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1ce6a9299_compiler_err(_30928_token,true,_30942_fmt,_30955_args));
}



inline void _1e83e45b4_SymbolBuilder::_method_push_err_text(_212ae5c02_Token& _31333_token,jule::Str _31347_fmt,jule::Slice<jule::Any> _31360_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1ce6a9299_compiler_err(_31333_token,false,_31347_fmt,_31360_args));
}



inline void _1e83e45b4_SymbolBuilder::_method_push_suggestion(jule::Str _31834_fmt,jule::Slice<jule::Any> _31847_args) {
	{
		_1ce6aae38_push_suggestion((&((*this)._field_errors[((*this)._field_errors.len() - 1LL)])),_31834_fmt,_31847_args);
	}
}



inline jule::Bool _1e83e45b4_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ptr<_212b23d95_UseDecl>& _32243_decl) {
	jule::Bool _32261_ok = jule::Bool();
	if (_21286e382_is_std_header_path((*(_32243_decl))._field_link_path)) {
		_32261_ok = true;
		return _32261_ok;
	}
	jule::Str _32713_ext = _211e04440_ext((*(_32243_decl))._field_link_path);
	if ((!(_21286ec9a_is_valid_header_ext(_32713_ext))) && (!(_21286ee43_is_valid_cpp_ext(_32713_ext)))) {
		(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_32713_ext)}));
		_32261_ok = false;
		return _32261_ok;
	}
	jule::Ptr<_2111850d9_Status> _33413_info = ({
		auto except = _2111850d9_Status::_static_method_of((*(_32243_decl))._field_link_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_32243_decl))._field_link_path)}));
			_32261_ok = false;
			return _32261_ok;
			_32261_ok = false;
			return _32261_ok;
		} jule::Ptr<_2111850d9_Status>();});
	});
	if ((*(_33413_info))._method_is_dir()) {
		(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_32243_decl))._field_link_path)}));
		_32261_ok = false;
		return _32261_ok;
	}
	_32261_ok = true;
	return _32261_ok;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1e83e45b4_SymbolBuilder::_method_build_cpp_header_import(jule::Ptr<_212b23d95_UseDecl>& _34647_decl) {
	jule::Str _34717_path = (*(_34647_decl))._field_link_path;
	if ((!(_21286e382_is_std_header_path((*(_34647_decl))._field_link_path)))) {
		jule::Bool _35021_ok = (*this)._method_check_cpp_use_decl_path(_34647_decl);
		if ((!(_35021_ok))) {
			return nullptr;
		}
		std::tie(_34717_path,_35021_ok) = _211da0dd1_abs((*(_34647_decl))._field_link_path);
		if ((!(_35021_ok))) {
			(*this)._method_push_err((*(_34647_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_34647_decl))._field_link_path)}));
		}
	}
	return jule::new_struct<_1ce6a0317_ImportInfo>(new( std::nothrow ) _1ce6a0317_ImportInfo((*(_34647_decl))._field_token,_34717_path,(*(_34647_decl))._field_link_path,jule::Str(),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_212ae5c02_Token>(),nullptr,jule::I64()));
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1e83e45b4_SymbolBuilder::_method_build_std_import(jule::Ptr<_212b23d95_UseDecl>& _37340_decl) {
	jule::Str _37417_path = (*(_37340_decl))._field_link_path.slice(5LL);
	_37417_path=_211e264a6_replace(_37417_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_37417_path=_211dc6ce7_join(jule::Slice<jule::Str>({_21289b502_PATH_STDLIB,_37417_path}));
	jule::Bool _37720_ok;
	std::tie(_37417_path,_37720_ok) = _211da0dd1_abs(_37417_path);
	if ((!(_37720_ok))) {
		(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_2111850d9_Status> _38413_info = ({
		auto except = _2111850d9_Status::_static_method_of(_37417_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_2111850d9_Status>();});
	});
	if ((!((*(_38413_info))._method_is_dir()))) {
		(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
		return nullptr;
	}
	jule::I64 _39413_i = (_2127dbb4b_find_last((*(_37340_decl))._field_link_path,jule::Str("::", 2)) + 1LL);
	jule::Str _39513_ident = (*(_37340_decl))._field_link_path.slice(_39413_i);
	return jule::new_struct<_1ce6a0317_ImportInfo>(new( std::nothrow ) _1ce6a0317_ImportInfo((*(_37340_decl))._field_token,_37417_path,(*(_37340_decl))._field_link_path,_39513_ident,(*(_37340_decl))._field_alias,jule::Bool(),false,true,(*(_37340_decl))._field_full,jule::Slice<_212ae5c02_Token>(),jule::new_struct<_1ce6a15e3_Package>(new( std::nothrow ) _1ce6a15e3_Package(nullptr)),jule::I64()));
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1e83e45b4_SymbolBuilder::_method_build_ident_import(jule::Ptr<_212b23d95_UseDecl>& _41243_decl) {
	jule::Str _41313_mod_path = (*(this->self))._field_importer.get()._method_get_mod_path();
	if ((_41313_mod_path.len() == 0LL)) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Str _42017_path = (*(_41243_decl))._field_link_path;
	_42017_path=_211e264a6_replace(_42017_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_42017_path=_211dc6ce7_join(jule::Slice<jule::Str>({_41313_mod_path,_42017_path}));
	jule::Bool _42420_ok;
	std::tie(_42017_path,_42420_ok) = _211da0dd1_abs(_42017_path);
	if ((!(_42420_ok))) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_2111850d9_Status> _43113_info = ({
		auto except = _2111850d9_Status::_static_method_of(_42017_path);
		(except.ok()) ? (except.result) : ({{
			(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_2111850d9_Status>();});
	});
	if ((!((*(_43113_info))._method_is_dir()))) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::I64 _44113_i = (_2127dbb4b_find_last((*(_41243_decl))._field_link_path,jule::Str("::", 2)) + 1LL);
	jule::Str _44213_ident = (*(_41243_decl))._field_link_path.slice(_44113_i);
	return jule::new_struct<_1ce6a0317_ImportInfo>(new( std::nothrow ) _1ce6a0317_ImportInfo((*(_41243_decl))._field_token,_42017_path,(*(_41243_decl))._field_link_path,_44213_ident,(*(_41243_decl))._field_alias,jule::Bool(),false,false,(*(_41243_decl))._field_full,jule::Slice<_212ae5c02_Token>(),jule::new_struct<_1ce6a15e3_Package>(new( std::nothrow ) _1ce6a15e3_Package(nullptr)),jule::I64()));
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1e83e45b4_SymbolBuilder::_method_build_import(jule::Ptr<_212b23d95_UseDecl>& _45937_decl) {
	{
		
		if ((*(_45937_decl))._field_cpp_linked) {
			_case_begin_1b809268d:;
			{
				return (*(this->self))._method_build_cpp_header_import(_45937_decl);
			}
		}
		else if ((*(_45937_decl))._field_std) {
			_case_begin_1b809211b:;
			{
				return (*(this->self))._method_build_std_import(_45937_decl);
			}
		}
		else {
			_case_begin_1b80919de:;
			{
				return (*(this->self))._method_build_ident_import(_45937_decl);
			}
		}
		_match_end_1b8091923:;
	}
}



inline jule::Bool _1e83e45b4_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ptr<_1ce6a0317_ImportInfo>& _46744_pkg) {
	jule::Bool _46764_ok = jule::Bool();
	jule::Ptr<_1ce6a0317_ImportInfo> _46913_lpkg = (*((*this)._field_table))._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>([=](jule::Ptr<_1ce6a0317_ImportInfo> _46949_spkg) mutable -> jule::Bool {
		return (*(_46744_pkg))._field_path == (*(_46949_spkg))._field_path;
	}));
	if ((_46913_lpkg == nullptr)) {
		_46764_ok = true;
		return _46764_ok;
	}
	(*this)._method_push_err((*(_46744_pkg))._field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>({jule::Any((*(_46744_pkg))._field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_46764_ok = false;
	return _46764_ok;
}



inline void _1e83e45b4_SymbolBuilder::_method_impl_import_selections(jule::Ptr<_1ce6a0317_ImportInfo>& _48146_imp,jule::Ptr<_212b23d95_UseDecl>& _48169_decl) {
	{
		auto &expr = (*(_48169_decl))._field_selected;
		auto it = expr.begin();
		_iter_begin_1b80985ea:;
		if (it != expr.end()) {
			_212ae5c02_Token _1b8098683_ident = *it;
			{
				if ((*(_48146_imp))._method_exist_ident(_1b8098683_ident._field_kind)) {
					(*this)._method_push_err(_1b8098683_ident,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>({jule::Any(_1b8098683_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
					goto _iter_next_1b80985ea;
				}
				(*(_48146_imp))._field_selected = jule::alloc_for_append((*(_48146_imp))._field_selected,1);(*(_48146_imp))._field_selected.__push(_1b8098683_ident);
			}
			_iter_next_1b80985ea:;
			++it;
			goto _iter_begin_1b80985ea;
		}
		_iter_end_1b80985ea:;
	}
}



inline jule::Str _1e83e45b4_SymbolBuilder::_method_get_as_link_path(jule::Str _49340_path) {
	if (_2127d7dbc_has_prefix(_49340_path,_21289b502_PATH_STDLIB)) {
		(_49340_path).mut_slice(_21289b502_PATH_STDLIB.len());
		return jule::Str("std", 3) + _211e264a6_replace(_49340_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _49914_root;
	std::tie(_49914_root,std::ignore) = _211da0dd1_abs((*(this->self))._field_importer.get()._method_get_mod_path());
	(_49340_path).mut_slice(_49914_root.len());
	if ((_49340_path[0LL] == 92LLU)) {
		(_49340_path).mut_slice(1LL);
	}
	return _211e264a6_replace(_49340_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
}



inline void _1e83e45b4_SymbolBuilder::_method_push_cycle_error(jule::Ptr<_1e83e45b4_SymbolBuilder>& _50737_sb,jule::Str _50757_path,jule::Str& _50773_message) {
	
	jule::Str _51013_refers_to = _212880739_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*((*((*(_50737_sb))._field_table))._field_file))._method_dir())),jule::Any((*(this->self))._method_get_as_link_path(_50757_path))}));
	(_50773_message).buffer.insert(0, (((_211e22edb_repeat(jule::Str(" ", 1),4LL) + _51013_refers_to) + jule::Str("\n", 1))));
}



inline void _1e83e45b4_SymbolBuilder::_method_push_cross_cycle_error(jule::Ptr<_1e83e45b4_SymbolBuilder>& _51743_target,jule::Ptr<_1ce6a0317_ImportInfo>& _51768_imp,_212ae5c02_Token& _51787_error_token) {
	jule::Str _51817_message = jule::Str();
	(*(this->self))._method_push_cycle_error(this->self,(*(_51768_imp))._field_path,_51817_message);
	jule::Ptr<_1e83e45b4_SymbolBuilder> _52217_owner = (*(this->self))._field_owner;
	jule::Ptr<_1e83e45b4_SymbolBuilder> _52317_old = this->self;
	while (((*(_52217_owner))._field_owner != nullptr)) {
		{
			(*(this->self))._method_push_cycle_error((*(_52317_old))._field_owner,(*((*((*(_52317_old))._field_table))._field_file))._method_dir(),_51817_message);
			if ((*(_52217_owner))._field_owner == _51743_target) {
				(*(this->self))._method_push_cycle_error(_51743_target,(*((*((*(_52217_owner))._field_table))._field_file))._method_dir(),_51817_message);
				goto _iter_end_1b80a4a8a;
			}
			_52317_old=_52217_owner;
			_52217_owner=(*(_52217_owner))._field_owner;
		}
	_iter_next_1b80a4a8a:;
	}
	_iter_end_1b80a4a8a:;
	(*(this->self))._method_push_err(_51787_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_51817_message)}));
}



inline jule::Bool _1e83e45b4_SymbolBuilder::_method_check_import_cycles(jule::Ptr<_1ce6a0317_ImportInfo> _54039_imp,jule::Ptr<_212b23d95_UseDecl>& _54058_decl) {
	if ((*(_54039_imp))._field_path == (*((*((*(this->self))._field_table))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*(_54058_decl))._field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*(_54039_imp))._field_path))}));
		return false;
	}
	if (((*(this->self))._field_owner == nullptr)) {
		return true;
	}
	if ((*((*((*((*(this->self))._field_owner))._field_table))._field_file))._method_dir() == (*(_54039_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error((*(this->self))._field_owner,_54039_imp,(*(_54058_decl))._field_token);
		return false;
	}
	jule::Ptr<_1e83e45b4_SymbolBuilder> _55517_owner = (*(this->self))._field_owner;
	_julec_label_iter:;
	if ((*((*((*(_55517_owner))._field_table))._field_file))._method_dir() == (*(_54039_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error(_55517_owner,_54039_imp,(*(_54058_decl))._field_token);
		return false;
	}
	if (((*(_55517_owner))._field_owner != nullptr)) {
		_55517_owner=(*(_55517_owner))._field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline void _1e83e45b4_SymbolBuilder::_method_check_package_accessibility(jule::Ptr<_212b23d95_UseDecl>& _57647_decl,jule::Str& _57664_mod,jule::Str& _57675_path) {
	if (((*this)._field_importer.get()._method_get_mod_path() != _57664_mod) && _2127cc2e0_contains(_57675_path,jule::Str("internal", 8))) {
		(*this)._method_push_err((*(_57647_decl))._field_token,jule::Str("you cannot access to internal packages", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _1e83e45b4_SymbolBuilder::_method_import_package(jule::Ptr<_1ce6a0317_ImportInfo>& _58239_imp,jule::Ptr<_212b23d95_UseDecl>& _58262_decl) {
	jule::Bool _58280_ok = jule::Bool();
	if ((*(_58239_imp))._field_cpp_linked) {
		_58280_ok = true;
		return _58280_ok;
	}
	jule::Ptr<_1ce6a0317_ImportInfo> _58717_port = (*(this->self))._field_importer.get()._method_get_import((*(_58239_imp))._field_path);
	if ((_58717_port != nullptr)) {
		(*(_58239_imp))._field_package=(*(_58717_port))._field_package;
		(*(_58239_imp))._field_duplicate=true;
		jule::Str _59217_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		(*(this->self))._field_importer.get()._method_set_mod_path((*(this->self))._field_importer.get()._method_mod_by_id((*(_58239_imp))._field_mod_id));
		(*(this->self))._method_check_package_accessibility(_58262_decl,_59217_old_mod,(*(_58717_port))._field_path);
		(*(this->self))._field_importer.get()._method_set_mod_path(_59217_old_mod);
	} else {
		if ((!((*(this->self))._method_check_import_cycles(_58239_imp,_58262_decl)))) {
			_58280_ok = false;
			return _58280_ok;
		}
		jule::Str _60117_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		__JULE_DEFER({
			(*(this->self))._field_importer.get()._method_set_mod_path(_60117_old_mod);
		});
		if ((*(_58239_imp))._field_std) {
			(*(this->self))._field_importer.get()._method_set_mod_path(_21289b502_PATH_STDLIB);
		}
		jule::Slice<jule::Ptr<_2129e26e2_Ast>> _60622_asts;
		jule::Slice<_21287ea02_Log> _60632_errors;
		std::tie(_60622_asts,_60632_errors) = (*(this->self))._field_importer.get()._method_import_package((*(_58239_imp))._field_path,(!((*(_58239_imp))._field_std)));
		if ((_60632_errors.len() > 0LL)) {
			(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_60632_errors);
			_58280_ok = false;
			return _58280_ok;
		}
		(*(this->self))._method_check_package_accessibility(_58262_decl,_60117_old_mod,(*(_58239_imp))._field_path);
		{
			auto &expr = _60622_asts;
			auto it = expr.begin();
			_iter_begin_1b80c1ba6:;
			if (it != expr.end()) {
				jule::Ptr<_2129e26e2_Ast> _1b80c1dd7_ast = *it;
				{
					jule::Ptr<_1ce7204a8_SymbolTable> _61525_table = nullptr;
					std::tie(_61525_table,_60632_errors) = _1b546219d_build_symbols(_1b80c1dd7_ast,(*(this->self))._field_importer,this->self);
					if ((_60632_errors.len() > 0LL)) {
						(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_60632_errors);
						(*(this->self))._method_push_err_text((*(_58239_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_58239_imp))._field_link_path)}));
						_58280_ok = false;
						return _58280_ok;
					}
					(*((*(_58239_imp))._field_package))._field_files = jule::alloc_for_append((*((*(_58239_imp))._field_package))._field_files,1);(*((*(_58239_imp))._field_package))._field_files.__push(_61525_table);
				}
				_iter_next_1b80c1ba6:;
				++it;
				goto _iter_begin_1b80c1ba6;
			}
			_iter_end_1b80c1ba6:;
		}
	}
	(*(this->self))._method_impl_import_selections(_58239_imp,_58262_decl);
	_58280_ok = true;
	return _58280_ok;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1e83e45b4_SymbolBuilder::_method_import_use_decl(jule::Ptr<_212b23d95_UseDecl>& _63440_decl) {
	jule::Ptr<_1ce6a0317_ImportInfo> _63517_imp = (*(this->self))._method_build_import(_63440_decl);
	if ((_63517_imp == nullptr)) {
		return nullptr;
	}
	jule::Bool _64117_ok = (*(this->self))._method_check_duplicate_use_decl(_63517_imp);
	if ((!(_64117_ok))) {
		return nullptr;
	}
	_64117_ok=(*(this->self))._method_import_package(_63517_imp,_63440_decl);
	(*((*(this->self))._field_table))._field_imports = jule::alloc_for_append((*((*(this->self))._field_table))._field_imports,1);(*((*(this->self))._field_table))._field_imports.__push(_63517_imp);
	if (_64117_ok) {
		(*(this->self))._field_importer.get()._method_imported(_63517_imp);
		return _63517_imp;
	}
	return nullptr;
}



inline void _1e83e45b4_SymbolBuilder::_method_import_use_decls(void) {
	{
		auto &expr = (*((*(this->self))._field_ast))._field_use_decls;
		auto it = expr.begin();
		_iter_begin_1b80c9681:;
		if (it != expr.end()) {
			jule::Ptr<_212b23d95_UseDecl> _1b80c972a_decl = *it;
			{
				(*(this->self))._method_import_use_decl(_1b80c972a_decl);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					goto _iter_end_1b80c9681;
				}
			}
			_iter_next_1b80c9681:;
			++it;
			goto _iter_begin_1b80c9681;
		}
		_iter_end_1b80c9681:;
	}
}



inline void _1e83e45b4_SymbolBuilder::_method_append_decl(_2129e2b32_Node& _66635_decl) {
	{
		auto &_match_expr{ _66635_decl._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_212b230c5_TypeAliasDecl>>()) {
			_case_begin_1b80cb452:;
			{
				jule::Ptr<_1ce75e6a1_TypeAlias> _66921_ta = _1e83e0acc_build_type_alias(_66635_decl._field_data.operator jule::Ptr<_212b230c5_TypeAliasDecl>());
				(*((*this)._field_table))._field_type_aliases = jule::alloc_for_append((*((*this)._field_table))._field_type_aliases,1);(*((*this)._field_table))._field_type_aliases.__push(_66921_ta);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b2587a_StructDecl>>()) {
			_case_begin_1b80cb210:;
			{
				jule::Ptr<_1e83b1718_Struct> _67321_srct = _1e83e158e_build_struct(_66635_decl._field_data.operator jule::Ptr<_212b2587a_StructDecl>());
				(*((*this)._field_table))._field_structs = jule::alloc_for_append((*((*this)._field_table))._field_structs,1);(*((*this)._field_table))._field_structs.__push(_67321_srct);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1edd5_FnDecl>>()) {
			_case_begin_1b80cb276:;
			{
				jule::Ptr<_1e83d4384_Fn> _67721_f = _1e83e2480_build_fn(_66635_decl._field_data.operator jule::Ptr<_212b1edd5_FnDecl>());
				(*((*this)._field_table))._field_funcs = jule::alloc_for_append((*((*this)._field_table))._field_funcs,1);(*((*this)._field_table))._field_funcs.__push(_67721_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1ade2_TraitDecl>>()) {
			_case_begin_1b80cb2dc:;
			{
				jule::Ptr<_1e85a7865_Trait> _68121_t = _1e83e2b34_build_trait(_66635_decl._field_data.operator jule::Ptr<_212b1ade2_TraitDecl>());
				(*((*this)._field_table))._field_traits = jule::alloc_for_append((*((*this)._field_table))._field_traits,1);(*((*this)._field_table))._field_traits.__push(_68121_t);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b20325_VarDecl>>()) {
			_case_begin_1b80cb353:;
			{
				jule::Ptr<_1ce6cecb4_Var> _68521_v = _1e83e3aad_build_var(_66635_decl._field_data.operator jule::Ptr<_212b20325_VarDecl>());
				(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.__push(_68521_v);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b24725_EnumDecl>>()) {
			_case_begin_1b80cba3a:;
			{
				jule::Ptr<_1e8648917_Enum> _68921_e = _1e83e387c_build_enum(_66635_decl._field_data.operator jule::Ptr<_212b24725_EnumDecl>());
				(*((*this)._field_table))._field_enums = jule::alloc_for_append((*((*this)._field_table))._field_enums,1);(*((*this)._field_table))._field_enums.__push(_68921_e);
			}
		}
		else {
			_case_begin_1b80caeac:;
			{
				(*this)._method_push_err(_66635_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b80cae02:;
	}
}



inline void _1e83e45b4_SymbolBuilder::_method_append_decls(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_decls;
		auto it = expr.begin();
		_iter_begin_1b80d3503:;
		if (it != expr.end()) {
			_2129e2b32_Node _1b80d3547_decl = *it;
			{
				(*this)._method_append_decl(_1b80d3547_decl);
			}
			_iter_next_1b80d3503:;
			++it;
			goto _iter_begin_1b80d3503;
		}
		_iter_end_1b80d3503:;
	}
}



inline void _1e83e45b4_SymbolBuilder::_method_append_impls(void) {
	(*((*this)._field_table))._field_impls=jule::Slice<jule::Ptr<_1e8648e34_Impl>>::alloc(0LL,static_cast<jule::I64>((*((*this)._field_ast))._field_impls.len()));
	{
		auto &expr = (*((*this)._field_ast))._field_impls;
		auto it = expr.begin();
		_iter_begin_1b80d54a0:;
		if (it != expr.end()) {
			jule::Ptr<_212b26705_Impl> _1b80d55c1_decl = *it;
			{
				(*((*this)._field_table))._field_impls = jule::alloc_for_append((*((*this)._field_table))._field_impls,1);(*((*this)._field_table))._field_impls.__push(_1e83e4262_build_impl(_1b80d55c1_decl));
			}
			_iter_next_1b80d54a0:;
			++it;
			goto _iter_begin_1b80d54a0;
		}
		_iter_end_1b80d54a0:;
	}
}



inline void _1e83e45b4_SymbolBuilder::_method_push_directive_pass(jule::Ptr<_2129e3902_Directive>& _71043_d) {
	if (((*(_71043_d))._field_args.len() == 0LL)) {
		(*this)._method_push_err((*(_71043_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if (((*(_71043_d))._field_args.len() > 1LL)) {
		_212ae5c02_Token _71517_arg = (*(_71043_d))._field_args[1LL];
		(*this)._method_push_err(_71517_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_212ae5c02_Token _71913_arg = (*(_71043_d))._field_args[0LL];
	if (_71913_arg._field_id != static_cast<jule::U64>(6LLU)) {
		(*this)._method_push_err(_71913_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_71913_arg._field_kind[0LL] != '\"') {
		(*this)._method_push_err(_71913_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*((*this)._field_table))._field_passes = jule::alloc_for_append((*((*this)._field_table))._field_passes,1);(*((*this)._field_table))._field_passes.__push(_1e83de900_Pass((*(_71043_d))._field_tag,_71913_arg._field_kind.slice(1LL,(_71913_arg._field_kind.len() - 1LL))));
}



inline void _1e83e45b4_SymbolBuilder::_method_append_top_directives(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_1b80db3b8:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b80db40c_d = *it;
			{
				{
					auto &_match_expr{ (*(_1b80db40c_d))._field_tag._field_kind };
					
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_1b80dcc7c:;
						{
							(*this)._method_push_directive_pass(_1b80db40c_d);
						}
					}
					_match_end_1b80dcc05:;
				}
			}
			_iter_next_1b80db3b8:;
			++it;
			goto _iter_begin_1b80db3b8;
		}
		_iter_end_1b80db3b8:;
	}
}



inline void _1e83e45b4_SymbolBuilder::_method_build(void) {
	(*(this->self))._field_table=jule::new_struct<_1ce7204a8_SymbolTable>(new( std::nothrow ) _1ce7204a8_SymbolTable((*((*(this->self))._field_ast))._field_file,jule::Slice<_1e83de900_Pass>(),jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Slice<jule::Ptr<_1e83b1718_Struct>>(),jule::Slice<jule::Ptr<_1e83d4384_Fn>>(),jule::Slice<jule::Ptr<_1e85a7865_Trait>>(),jule::Slice<jule::Ptr<_1e8648917_Enum>>(),jule::Slice<jule::Ptr<_1e8648e34_Impl>>()));
	(*(this->self))._method_append_top_directives();
	(*(this->self))._method_import_use_decls();
	if (((*(this->self))._field_errors.len() > 0LL)) {
		return;
	}
	(*(this->self))._method_append_decls();
	if (((*(this->self))._field_errors.len() > 0LL)) {
		return;
	}
	(*(this->self))._method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83e45b4_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e8648e34_Impl::_method_is_trait_impl(void) {
	return ((*this)._field_base != nullptr);
}



inline jule::Bool _1e8648e34_Impl::_method_is_struct_impl(void) {
	return ((*this)._field_base == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8648e34_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce62e86d_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce632574_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6830ec_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68353c_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68397c_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ce683dbc_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != jule::Any(nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce683dbc_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68430c_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68474c_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce684b8c_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6850cc_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68551c_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68595c_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6862dc_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ce68672c_Match::_method_is_generic_type_match(void) {
	return ((*this)._field_type_match && ((*this)._field_expr != nullptr)) && (*((*((*this)._field_expr))._field_kind))._field_generic;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68672c_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ce686b6c_Case::_method_is_default(void) {
	return ((*this)._field_exprs == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce686b6c_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6870ac_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6874ec_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce687d7c_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6882bc_ScopeChecker::_method_find_package(jule::Str _41835_ident) {
	return (*((*this)._field_s))._method_find_package(_41835_ident);
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6882bc_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)> _42837_selector) {
	return (*((*this)._field_s))._method_select_package(_42837_selector);
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce6882bc_ScopeChecker::_method_find_var(jule::Str _43931_ident,jule::Bool _43943_cpp_linked) {
	
	jule::Ptr<_1ce6cecb4_Var> _44217_v = (*((*this)._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
	if ((_44217_v != nullptr)) {
		return _44217_v;
	}
	jule::Ptr<_1ce6882bc_ScopeChecker> _44717_parent = (*this)._field_parent;
	while ((_44717_parent != nullptr)) {
		{
			_44217_v=(*((*(_44717_parent))._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
			if ((_44217_v != nullptr)) {
				return _44217_v;
			}
			_44717_parent=(*(_44717_parent))._field_parent;
		}
	_iter_next_1b8103545:;
	}
	_iter_end_1b8103545:;
	return (*((*this)._field_s))._method_find_var(_43931_ident,_43943_cpp_linked);
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce6882bc_ScopeChecker::_method_find_type_alias(jule::Str _46638_ident,jule::Bool _46650_cpp_linked) {
	
	jule::Ptr<_1ce75e6a1_TypeAlias> _46917_ta = (*((*this)._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
	if ((_46917_ta != nullptr)) {
		return _46917_ta;
	}
	jule::Ptr<_1ce6882bc_ScopeChecker> _47417_parent = (*this)._field_parent;
	while ((_47417_parent != nullptr)) {
		{
			_46917_ta=(*((*(_47417_parent))._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
			if ((_46917_ta != nullptr)) {
				return _46917_ta;
			}
			_47417_parent=(*(_47417_parent))._field_parent;
		}
	_iter_next_1b8107c31:;
	}
	_iter_end_1b8107c31:;
	return (*((*this)._field_s))._method_find_type_alias(_46638_ident,_46650_cpp_linked);
}



inline jule::Ptr<_1e83b1718_Struct> _1ce6882bc_ScopeChecker::_method_find_struct(jule::Str _49134_ident,jule::Bool _49146_cpp_linked) {
	return (*((*this)._field_s))._method_find_struct(_49134_ident,_49146_cpp_linked);
}



inline jule::Ptr<_1e83d4384_Fn> _1ce6882bc_ScopeChecker::_method_find_fn(jule::Str _50030_ident,jule::Bool _50042_cpp_linked) {
	return (*((*this)._field_s))._method_find_fn(_50030_ident,_50042_cpp_linked);
}



inline jule::Ptr<_1e85a7865_Trait> _1ce6882bc_ScopeChecker::_method_find_trait(jule::Str _50933_ident) {
	return (*((*this)._field_s))._method_find_trait(_50933_ident);
}



inline jule::Ptr<_1e8648917_Enum> _1ce6882bc_ScopeChecker::_method_find_enum(jule::Str _51832_ident) {
	return (*((*this)._field_s))._method_find_enum(_51832_ident);
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_is_unsafe(void) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _52617_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_52617_scope))._field_scope))._field_unsafety) {
		return true;
	}
	if (((*(_52617_scope))._field_parent != nullptr)) {
		_52617_scope=(*(_52617_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_is_root(void) {
	return ((*this)._field_parent == nullptr) || ((*this)._field_owner != nullptr);
}



inline void _1ce6882bc_ScopeChecker::_method_stop(void) {
	(*this)._field_i=-1LL;
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_stopped(void) {
	return ((*this)._field_i == -1LL);
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_is_deferred(void) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _55917_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_55917_scope))._field_scope))._field_deferred) {
		return true;
	}
	if (((*(_55917_scope))._field_parent != nullptr)) {
		_55917_scope=(*(_55917_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce6882bc_ScopeChecker::_method_get_root(void) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _57717_root = this->self;
	while (((*(_57717_root))._field_parent != nullptr) && ((*(_57717_root))._field_owner == nullptr)) {
		{
			_57717_root=(*(_57717_root))._field_parent;
		}
	_iter_next_1b811725c:;
	}
	_iter_end_1b811725c:;
	return _57717_root;
}



inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce6882bc_ScopeChecker::_method_get_hard_root(void) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _58717_root = this->self;
	while (((*(_58717_root))._field_parent != nullptr)) {
		{
			_58717_root=(*(_58717_root))._field_parent;
		}
	_iter_next_1b8118a77:;
	}
	_iter_end_1b8118a77:;
	return _58717_root;
}



inline jule::Ptr<_1ce6850cc_Label> _1ce6882bc_ScopeChecker::_method_find_label(jule::Str _59729_ident) {
	{
		auto &expr = (*((*this)._field_scope))._field_stmts;
		auto it = expr.begin();
		_iter_begin_1b811a1d8:;
		if (it != expr.end()) {
			jule::Any _1b811a2d7_st = *it;
			{
				{
					auto &_match_expr{ _1b811a2d7_st };
					
					if (_match_expr.type_is<jule::Ptr<_1ce6850cc_Label>>()) {
						_case_begin_1b811a947:;
						{
							jule::Ptr<_1ce6850cc_Label> _60125_label = _1b811a2d7_st.operator jule::Ptr<_1ce6850cc_Label>();
							if ((*(_60125_label))._field_ident == _59729_ident) {
								return _60125_label;
							}
						}
					}
					_match_end_1b811a7c1:;
				}
			}
			_iter_next_1b811a1d8:;
			++it;
			goto _iter_begin_1b811a1d8;
		}
		_iter_end_1b811a1d8:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce68793c_ScopeLabel> _1ce6882bc_ScopeChecker::_method_find_label_scope(jule::Str _61336_ident) {
	jule::Ptr<_1ce68793c_ScopeLabel> _61417_label = (*(this->self))._method_find_label_all(_61336_ident);
	if ((_61417_label != nullptr) && ((*(_61417_label))._field_scope == this->self)) {
		return _61417_label;
	}
	return nullptr;
}



inline jule::Ptr<_1ce68793c_ScopeLabel> _1ce6882bc_ScopeChecker::_method_find_label_all(jule::Str _62533_ident) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_1b811dc9c:;
		if (it != expr.end()) {
			jule::Ptr<_1ce68793c_ScopeLabel> _1b811de23_lbl = *it;
			{
				if ((*((*(_1b811de23_lbl))._field_label))._field_ident == _62533_ident) {
					return _1b811de23_lbl;
				}
			}
			_iter_next_1b811dc9c:;
			++it;
			goto _iter_begin_1b811dc9c;
		}
		_iter_end_1b811dc9c:;
	}
	return nullptr;
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_is_duplicated_ident(jule::U64 _63738_itself,jule::Str _63755_ident) {
	jule::Ptr<_1ce6cecb4_Var> _63813_v = (*this)._method_find_var(_63755_ident,false);
	if ((_63813_v != nullptr) && (static_cast<jule::U64>(_63813_v) != _63738_itself)) {
		if (((*(_63813_v))._field_scope == nullptr)) {
			return false;
		}
		return ((*(_63813_v))._field_scope == (*this)._field_scope) || (!((*((*this)._field_s))._method_is_flag(static_cast<jule::I64>(1LL))));
	}
	jule::Ptr<_1ce75e6a1_TypeAlias> _64613_ta = (*this)._method_find_type_alias(_63755_ident,false);
	if ((_64613_ta != nullptr) && (static_cast<jule::U64>(_64613_ta) != _63738_itself)) {
		if (((*(_64613_ta))._field_scope == nullptr)) {
			return false;
		}
		return ((*(_64613_ta))._field_scope == (*this)._field_tree) || (!((*((*this)._field_s))._method_is_flag(static_cast<jule::I64>(1LL))));
	}
	return false;
}



inline void _1ce6882bc_ScopeChecker::_method_check_var_decl(jule::Ptr<_212b20325_VarDecl> _65738_decl) {
	jule::Ptr<_1ce6cecb4_Var> _65817_v = _1e83e3aad_build_var(_65738_decl);
	(*(_65817_v))._field_scope=(*(this->self))._field_scope;
	__JULE_DEFER({
		(*((*(this->self))._field_table))._field_vars = jule::alloc_for_append((*((*(this->self))._field_table))._field_vars,1);(*((*(this->self))._field_table))._field_vars.__push(_65817_v);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_65817_v));
	});
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_65817_v)),(*(_65817_v))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_65817_v))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_65817_v))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		(*(this->self))._method_stop();
		return;
	}
	(*((*(this->self))._field_s))._method_check_var_decl(_65817_v,this->self);
	if ((!((*(_65817_v))._method_is_type_inferred())) && (((*(_65817_v))._field_kind == nullptr) || ((*((*(_65817_v))._field_kind))._field_kind == nullptr))) {
		return;
	}
	(*((*(this->self))._field_s))._method_check_type_var(_65817_v,this->self);
}



inline void _1ce6882bc_ScopeChecker::_method_check_type_alias_decl(jule::Ptr<_212b230c5_TypeAliasDecl> _68145_decl) {
	jule::Ptr<_1ce75e6a1_TypeAlias> _68217_ta = _1e83e0acc_build_type_alias(_68145_decl);
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_68217_ta)),(*(_68217_ta))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_68217_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_68217_ta))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		(*(this->self))._method_stop();
		return;
	}
	(*((*(this->self))._field_s))._method_check_type_alias_decl(_68217_ta,this->self);
	(*((*(this->self))._field_table))._field_type_aliases = jule::alloc_for_append((*((*(this->self))._field_table))._field_type_aliases,1);(*((*(this->self))._field_table))._field_type_aliases.__push(_68217_ta);
	if (((*((*(_68217_ta))._field_kind))._field_kind == nullptr)) {
		(*(this->self))._method_stop();
	}
}



inline jule::Ptr<_1ce62e86d_Scope> _1ce6882bc_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_1ce62e86d_Scope>(new( std::nothrow ) _1ce62e86d_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _1ce6882bc_ScopeChecker::_method_check_child_ssc(jule::Ptr<_212b1e555_ScopeTree>& _70540_tree,jule::Ptr<_1ce62e86d_Scope>& _70563_s,jule::Ptr<_1ce6882bc_ScopeChecker>& _70579_ssc) {
	(*(_70579_ssc))._field_parent=this->self;
	(*(_70579_ssc))._method_check(_70540_tree,_70563_s);
}



inline jule::Ptr<_1ce62e86d_Scope> _1ce6882bc_ScopeChecker::_method_check_child_sc(jule::Ptr<_212b1e555_ScopeTree>& _71039_tree,jule::Ptr<_1ce6882bc_ScopeChecker>& _71062_ssc) {
	jule::Ptr<_1ce62e86d_Scope> _71117_s = (*(this->self))._method_get_child();
	(*(this->self))._method_check_child_ssc(_71039_tree,_71117_s,_71062_ssc);
	return _71117_s;
}



inline jule::Ptr<_1ce62e86d_Scope> _1ce6882bc_ScopeChecker::_method_check_child(jule::Ptr<_212b1e555_ScopeTree>& _71636_tree) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _71717_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_child_sc(_71636_tree,_71717_ssc);
}



inline void _1ce6882bc_ScopeChecker::_method_check_anon_scope(jule::Ptr<_212b1e555_ScopeTree> _72140_tree) {
	jule::Ptr<_1ce62e86d_Scope> _72217_s = (*(this->self))._method_check_child(_72140_tree);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_72217_s));
}



inline void _1ce6882bc_ScopeChecker::_method_process_error_call(jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>& _72643_m,_212ae5c02_Token _72674_err) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err(_72674_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce6882bc_ScopeChecker> _73117_root = (*(this->self))._method_get_root();
	if ((!((*((*((*(_73117_root))._field_owner))._field_decl))._field_exceptional))) {
		(*((*(this->self))._field_s))._method_push_err(_72674_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	}
	(*(_72643_m))._field_func=(*(_73117_root))._field_owner;
}



inline void _1ce6882bc_ScopeChecker::_method_check_expr(jule::Ptr<_212b16162_Expr> _73934_expr) {
	jule::Ptr<_1ce728879_Eval> _74017_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_74017_eval))._field_ignored=true;
	jule::Ptr<_1ce727449_Data> _74217_d = (*(_74017_eval))._method_eval_expr(_73934_expr);
	if ((_74217_d == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ (*(_74217_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>()) {
			_case_begin_1b81427c6:;
			{
				jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel> _74921_m = (*(_74217_d))._field_model.operator jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>();
				(*(this->self))._method_process_error_call(_74921_m,(*(_73934_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_74217_d));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d15c3_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83d1cbb_FreeExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>()) {
			_case_begin_1b8142bb1:;
			{
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_74217_d));
			}
		}
		else {
			_case_begin_1b8142a18:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_73934_expr))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b81429b3:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_co_expr(jule::Ptr<_212b177b2_CoExpr> _76737_expr) {
	jule::Ptr<_1ce728879_Eval> _76817_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_76817_eval))._field_ignored=true;
	jule::Ptr<_1ce727449_Data> _77017_d = (*(_76817_eval))._method_eval_expr((*(_76737_expr))._field_expr);
	if ((_77017_d == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ (*(_77017_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>()) {
			_case_begin_1b814a0a3:;
			{
				jule::Ptr<_1e83c2581_FnCallExprModel> _77721_model = (*(_77017_d))._field_model.operator jule::Ptr<_1e83c2581_FnCallExprModel>();
				if ((*((*((*(_77721_model))._field_func))._field_decl))._field_exceptional) {
					(*((*(this->self))._field_s))._method_push_err((*(_76737_expr))._field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				}
				(*(_77721_model))._field_is_co=true;
				(*(_76817_eval))._method_check_fn_of_concurrent_call((*(_77721_model))._field_func,(*((*(_76737_expr))._field_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_77017_d));
			}
		}
		else {
			_case_begin_1b81491d4:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_76737_expr))._field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_1b814917e:;
	}
}



inline jule::Ptr<_1ce632574_If> _1ce6882bc_ScopeChecker::_method_check_if(jule::Ptr<_212b22305_If> _79232_i) {
	jule::Ptr<_1ce62e86d_Scope> _79317_s = (*(this->self))._method_check_child((*(_79232_i))._field_scope);
	jule::Ptr<_1ce727449_Data> _79517_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_79232_i))._field_expr);
	if ((_79517_d == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ce762330_Prim> _80017_prim = (*((*(_79517_d))._field_kind))._method_prim();
	if ((_80017_prim == nullptr) || (!((*(_80017_prim))._method_is_bool()))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_79232_i))._field_expr))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ce632574_If>(new( std::nothrow ) _1ce632574_If((*(_79517_d))._field_model,_79317_s));
}



inline jule::Ptr<_1ce6830ec_Else> _1ce6882bc_ScopeChecker::_method_check_else(jule::Ptr<_212b22745_Else> _81234_e) {
	return jule::new_struct<_1ce6830ec_Else>(new( std::nothrow ) _1ce6830ec_Else((*(this->self))._method_check_child((*(_81234_e))._field_scope)));
}



inline void _1ce6882bc_ScopeChecker::_method_check_conditional(jule::Ptr<_212b22b85_Conditional> _81841_conditional) {
	jule::Ptr<_1ce68353c_Conditional> _81917_c = jule::new_struct<_1ce68353c_Conditional>(new( std::nothrow ) _1ce68353c_Conditional());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_81917_c));
	(*(_81917_c))._field_elifs=jule::Slice<jule::Ptr<_1ce632574_If>>::alloc(0LL,static_cast<jule::I64>(((*(_81841_conditional))._field_tail.len() + 1LL)));
	(*(_81917_c))._field_elifs = jule::alloc_for_append((*(_81917_c))._field_elifs,1);(*(_81917_c))._field_elifs.__push((*(this->self))._method_check_if((*(_81841_conditional))._field_head));
	{
		auto &expr = (*(_81841_conditional))._field_tail;
		auto it = expr.begin();
		_iter_begin_1b815838b:;
		if (it != expr.end()) {
			jule::Ptr<_212b22305_If> _1b8157445_elif = *it;
			{
				(*(_81917_c))._field_elifs = jule::alloc_for_append((*(_81917_c))._field_elifs,1);(*(_81917_c))._field_elifs.__push((*(this->self))._method_check_if(_1b8157445_elif));
			}
			_iter_next_1b815838b:;
			++it;
			goto _iter_begin_1b815838b;
		}
		_iter_end_1b815838b:;
	}
	if (((*(_81841_conditional))._field_default != nullptr)) {
		(*(_81917_c))._field_default=(*(this->self))._method_check_else((*(_81841_conditional))._field_default);
	}
}



inline jule::Ptr<_1ce62e86d_Scope> _1ce6882bc_ScopeChecker::_method_check_iter_scope_sc(jule::U64 _83439_it,jule::Ptr<_212b1e555_ScopeTree> _83456_tree,jule::Ptr<_1ce6882bc_ScopeChecker> _83478_ssc) {
	(*(_83478_ssc))._field_it=_83439_it;
	return (*(this->self))._method_check_child_sc(_83456_tree,_83478_ssc);
}



inline jule::Ptr<_1ce62e86d_Scope> _1ce6882bc_ScopeChecker::_method_check_iter_scope(jule::U64 _83936_it,jule::Ptr<_212b1e555_ScopeTree>& _83954_tree) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _84017_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_iter_scope_sc(_83936_it,_83954_tree,_84017_ssc);
}



inline void _1ce6882bc_ScopeChecker::_method_check_inf_iter(jule::Ptr<_212b20ba5_Iter>& _84439_it) {
	jule::Ptr<_1ce68397c_InfIter> _84517_kind = jule::new_struct<_1ce68397c_InfIter>(new( std::nothrow ) _1ce68397c_InfIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_84517_kind));
	(*(_84517_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::U64>(static_cast<jule::U64>(_84517_kind)),(*(_84439_it))._field_scope);
}



inline void _1ce6882bc_ScopeChecker::_method_check_while_iter(jule::Ptr<_212b20ba5_Iter>& _85241_it) {
	jule::Ptr<_212b210e5_WhileKind> _85317_wh = (*(_85241_it))._field_kind.operator jule::Ptr<_212b210e5_WhileKind>();
	if (((*(_85317_wh))._field_expr == nullptr) && ((*(_85317_wh))._field_next == jule::Any(nullptr))) {
		(*(this->self))._method_check_inf_iter(_85241_it);
		return;
	}
	jule::Ptr<_1ce683dbc_WhileIter> _85917_kind = jule::new_struct<_1ce683dbc_WhileIter>(new( std::nothrow ) _1ce683dbc_WhileIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_85917_kind));
	(*(_85917_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::U64>(static_cast<jule::U64>(_85917_kind)),(*(_85241_it))._field_scope);
	if (((*(_85317_wh))._field_expr != nullptr)) {
		jule::Ptr<_1ce727449_Data> _86621_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_85317_wh))._field_expr);
		if ((_86621_d == nullptr)) {
			return;
		}
		jule::Ptr<_1ce762330_Prim> _87117_prim = (*((*(_86621_d))._field_kind))._method_prim();
		if ((_87117_prim == nullptr)) {
			(*((*(this->self))._field_s))._method_push_err((*(_85241_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		if ((!((*(_87117_prim))._method_is_bool()))) {
			(*((*(this->self))._field_s))._method_push_err((*(_85241_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		(*(_85917_kind))._field_expr=(*(_86621_d))._field_model;
	}
	if ((*(_85317_wh))._method_is_while_next()) {
		if ((!(_1ce64938d_is_valid_ast_st_for_next_st((*(_85317_wh))._field_next)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_85317_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;
		}
		jule::I64 _89117_n = (*((*(this->self))._field_scope))._field_stmts.len();
		(*(this->self))._method_check_node((*(_85317_wh))._field_next);
		if (_89117_n < static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len())) {
			jule::Any _89425_st = (*((*(this->self))._field_scope))._field_stmts[_89117_n];
			(*((*(this->self))._field_scope))._field_stmts=(*((*(this->self))._field_scope))._field_stmts.slice(0LL,_89117_n);
			if ((!(_1ce648d60_is_valid_st_for_next_st(_89425_st)))) {
				(*((*(this->self))._field_s))._method_push_err((*(_85317_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			}
			(*(_85917_kind))._field_next=_89425_st;
		}
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_range_iter(jule::Ptr<_212b20ba5_Iter>& _90541_it) {
	jule::Ptr<_212b21535_RangeKind> _90617_rang = (*(_90541_it))._field_kind.operator jule::Ptr<_212b21535_RangeKind>();
	jule::Ptr<_1ce727449_Data> _90817_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_90617_rang))._field_expr);
	if ((_90817_d == nullptr)) {
		return;
	}
	jule::Ptr<_1ce68430c_RangeIter> _91317_kind = jule::new_struct<_1ce68430c_RangeIter>(new( std::nothrow ) _1ce68430c_RangeIter(_90817_d,jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1ce6cecb4_Var>(),jule::Ptr<_1ce6cecb4_Var>()));
	_1ce70ed5a_RangeChecker _91717_rc = _1ce70ed5a_RangeChecker(this->self,_90617_rang,_91317_kind,_90817_d);
	jule::Bool _92313_ok = _91717_rc._method_check();
	if ((!(_92313_ok))) {
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_91317_kind));
	jule::Ptr<_1ce6882bc_ScopeChecker> _93017_ssc = (*(this->self))._method_new_child_checker();
	if (((*(_91317_kind))._field_key_a != nullptr)) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(static_cast<jule::I64>(1LL)))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_91317_kind))._field_key_a))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_91317_kind))._field_key_a))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_91317_kind))._field_key_a))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_93017_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_93017_ssc))._field_table))._field_vars,1);(*((*(_93017_ssc))._field_table))._field_vars.__push((*(_91317_kind))._field_key_a);
	}
	if (((*(_91317_kind))._field_key_b != nullptr)) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(static_cast<jule::I64>(1LL)))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_91317_kind))._field_key_b))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_91317_kind))._field_key_b))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_91317_kind))._field_key_b))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_93017_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_93017_ssc))._field_table))._field_vars,1);(*((*(_93017_ssc))._field_table))._field_vars.__push((*(_91317_kind))._field_key_b);
	}
	(*(_91317_kind))._field_scope=(*(this->self))._method_check_iter_scope_sc(static_cast<jule::U64>(static_cast<jule::U64>(_91317_kind)),(*(_90541_it))._field_scope,_93017_ssc);
}



inline void _1ce6882bc_ScopeChecker::_method_check_iter(jule::Ptr<_212b20ba5_Iter> _95134_it) {
	if ((*(_95134_it))._method_is_inf()) {
		(*(this->self))._method_check_inf_iter(_95134_it);
		return;
	}
	{
		auto &_match_expr{ (*(_95134_it))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_212b210e5_WhileKind>>()) {
			_case_begin_1b817c15c:;
			{
				(*(this->self))._method_check_while_iter(_95134_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b21535_RangeKind>>()) {
			_case_begin_1b817b4e1:;
			{
				(*(this->self))._method_check_range_iter(_95134_it);
			}
		}
		else {
			_case_begin_1b817b920:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_1b817b8ba:;
	}
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_check_valid_cont_label(jule::U64 _96742_it) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _96817_scope = this->self;
	_julec_label_iter:;
	if ((*(_96817_scope))._field_it == _96742_it) {
		return true;
	}
	if (((*(_96817_scope))._field_parent != nullptr)) {
		_96817_scope=(*(_96817_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_check_valid_break_label(jule::U64 _98343_ptr) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _98417_scope = this->self;
	_julec_label_iter:;
	if ((*(_98417_scope))._field_it == _98343_ptr) {
		return true;
	}
	if (((*(_98417_scope))._field_cse != 0LLU)) {
		jule::U64 _99217_mtch = static_cast<jule::U64>((*(((_1ce686b6c_Case*)((*(_98417_scope))._field_cse))))._field_owner);
		if (_99217_mtch == _98343_ptr) {
			return true;
		}
	}
	if (((*(_98417_scope))._field_parent != nullptr)) {
		_98417_scope=(*(_98417_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1ce68474c_ContSt> _1ce6882bc_ScopeChecker::_method_check_cont_valid_scope(jule::Ptr<_212b21db5_ContSt> _100642_c) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_100642_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_100642_c))._field_label._field_id != static_cast<jule::U64>(0LLU)) {
		return jule::new_struct<_1ce68474c_ContSt>(new( std::nothrow ) _1ce68474c_ContSt());
	}
	jule::Ptr<_1ce6882bc_ScopeChecker> _101617_scope = this->self;
	_julec_label_iter:;
	{
		
		if ((((*(_101617_scope))._field_it == 0LLU) && ((*(_101617_scope))._field_parent != nullptr)) && ((*(_101617_scope))._field_owner == nullptr)) {
			_case_begin_1b8186386:;
			{
				_101617_scope=(*(_101617_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if (((*(_101617_scope))._field_it != 0LLU)) {
			_case_begin_1b818640d:;
			{
				return jule::new_struct<_1ce68474c_ContSt>(new( std::nothrow ) _1ce68474c_ContSt((*(_101617_scope))._field_it));
			}
		}
		_match_end_1b81862cb:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_100642_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1ce6882bc_ScopeChecker::_method_check_cont(jule::Ptr<_212b21db5_ContSt> _103030_c) {
	jule::Ptr<_1ce68474c_ContSt> _103117_cont = (*(this->self))._method_check_cont_valid_scope(_103030_c);
	if ((_103117_cont == nullptr)) {
		return;
	}
	if ((*(_103030_c))._field_label._field_id != static_cast<jule::U64>(0LLU)) {
		jule::Ptr<_1ce68793c_ScopeLabel> _103721_label = _1ce63c3d6_find_label_parent((*(_103030_c))._field_label._field_kind,(*(this->self))._field_parent);
		if ((_103721_label == nullptr)) {
			(*((*(this->self))._field_s))._method_push_err((*(_103030_c))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_103030_c))._field_label._field_kind)}));
			return;
		}
		(*(_103721_label))._field_used=true;
		if (((*(_103721_label))._field_pos + 1LL) >= static_cast<jule::I64>((*((*((*(_103721_label))._field_scope))._field_scope))._field_stmts.len())) {
			(*((*(this->self))._field_s))._method_push_err((*(_103030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_103030_c))._field_label._field_kind)}));
			return;
		}
		jule::I64 _105017_i = ((*(_103721_label))._field_pos + 1LL);
		if (_105017_i >= static_cast<jule::I64>((*((*((*(_103721_label))._field_scope))._field_scope))._field_stmts.len())) {
			(*((*(this->self))._field_s))._method_push_err((*(_103030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _105425_st = (*((*((*(_103721_label))._field_scope))._field_scope))._field_stmts[_105017_i];
			{
				auto &_match_expr{ _105425_st };
				
				if (_match_expr.type_is<jule::Ptr<_1ce68397c_InfIter>>()) {
					_case_begin_1b818ed1d:;
					{
						(*(_103117_cont))._field_it=static_cast<jule::U64>(static_cast<jule::U64>(_105425_st.operator jule::Ptr<_1ce68397c_InfIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1ce68430c_RangeIter>>()) {
					_case_begin_1b81920b7:;
					{
						(*(_103117_cont))._field_it=static_cast<jule::U64>(static_cast<jule::U64>(_105425_st.operator jule::Ptr<_1ce68430c_RangeIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1ce683dbc_WhileIter>>()) {
					_case_begin_1b819212d:;
					{
						(*(_103117_cont))._field_it=static_cast<jule::U64>(static_cast<jule::U64>(_105425_st.operator jule::Ptr<_1ce683dbc_WhileIter>()));
					}
				}
				else {
					_case_begin_1b8191d97:;
					{
						(*((*(this->self))._field_s))._method_push_err((*(_103030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_103030_c))._field_label._field_kind)}));
					}
				}
				_match_end_1b8191d42:;
			}
		}
	}
	if (((*(_103117_cont))._field_it != 0LLU)) {
		if ((!((*(this->self))._method_check_valid_cont_label((*(_103117_cont))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_103030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_103030_c))._field_label._field_kind)}));
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_103117_cont));
}



inline void _1ce6882bc_ScopeChecker::_method_check_label(jule::Ptr<_212b1ce05_LabelSt> _107735_l) {
	if (((*(this->self))._method_find_label((*(_107735_l))._field_ident) != nullptr)) {
		(*((*(this->self))._field_s))._method_push_err((*(_107735_l))._field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any((*(_107735_l))._field_ident)}));
		return;
	}
	jule::Ptr<_1ce6850cc_Label> _108317_label = jule::new_struct<_1ce6850cc_Label>(new( std::nothrow ) _1ce6850cc_Label((*(_107735_l))._field_ident));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_108317_label));
	(*((*(this->self))._field_labels))=jule::append((*((*(this->self))._field_labels)),jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>({jule::new_struct<_1ce68793c_ScopeLabel>(new( std::nothrow ) _1ce68793c_ScopeLabel((*(_107735_l))._field_token,_108317_label,static_cast<jule::I64>((static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len()) - 1LL)),this->self,jule::Bool()))}));
}



inline void _1ce6882bc_ScopeChecker::_method_push_goto(jule::Ptr<_212b1d345_GotoSt> _109633_gt) {
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1ce68551c_GotoSt>(new( std::nothrow ) _1ce68551c_GotoSt((*(_109633_gt))._field_label._field_kind))));
	(*((*(this->self))._field_gotos))=jule::append((*((*(this->self))._field_gotos)),jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>({jule::new_struct<_1ce687d7c_ScopeGoto>(new( std::nothrow ) _1ce687d7c_ScopeGoto(_109633_gt,this->self,static_cast<jule::I64>((static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len()) - 1LL))))}));
}



inline void _1ce6882bc_ScopeChecker::_method_check_postfix(jule::Ptr<_212b1e115_AssignSt> _110837_a) {
	if (((*(_110837_a))._field_left.len() > 1LL)) {
		(*((*(this->self))._field_s))._method_push_err((*(_110837_a))._field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_212b16162_Expr> _111417_expr = (*((*(_110837_a))._field_left[0LL]))._field_expr;
	jule::Ptr<_1ce727449_Data> _111517_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_111417_expr);
	if ((_111517_d == nullptr)) {
		return;
	}
	_1ce64010e_check_assign((*(this->self))._field_s,_111517_d,nullptr,(*(_110837_a))._field_setter);
	if (((*((*(_111517_d))._field_kind))._method_ptr() != nullptr)) {
		jule::Ptr<_1ce7649e7_Ptr> _112321_ptr = (*((*(_111517_d))._field_kind))._method_ptr();
		if ((*(_112321_ptr))._method_is_unsafe()) {
			(*((*(this->self))._field_s))._method_push_err((*(_110837_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_110837_a))._field_setter._field_kind),jule::Any((*((*(_111517_d))._field_kind))._method_to_str())}));
			return;
		}
	} else {
		if (((*((*(_111517_d))._field_kind))._method_prim() == nullptr) || (!(_1ce6828d2_is_num((*((*((*(_111517_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_110837_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_110837_a))._field_setter._field_kind),jule::Any((*((*(_111517_d))._field_kind))._method_to_str())}));
			return;
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1ce68595c_Postfix>(new( std::nothrow ) _1ce68595c_Postfix((*(_111517_d))._field_model,(*(_110837_a))._field_setter._field_kind))));
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_is_new_assign_ident(jule::Str _114138_ident) {
	if (_212ae9255_is_ignore_ident(_114138_ident) || _114138_ident.empty()) {
		return false;
	}
	return (*((*this)._field_table))._method_def_by_ident(_114138_ident,false) == jule::Any(nullptr);
}



inline jule::Bool _1ce6882bc_ScopeChecker::_method_check_structure_assign_op(jule::Ptr<_1e83b84bc_StructIns>& _114950_s,jule::Ptr<_212b1e115_AssignSt>& _114970_a,jule::Ptr<_1ce727449_Data>& _114989_r) {
	jule::Ptr<_1e83d630e_FnIns> _115217_overload = nullptr;
	{
		auto &_match_expr{ (*(_114970_a))._field_setter._field_kind };
		
		if (_match_expr == jule::Str("+=", 2)) {
			_case_begin_1b81add09:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_add_assign;
			}
		}
		else if (_match_expr == jule::Str("-=", 2)) {
			_case_begin_1b81ac81e:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_sub_assign;
			}
		}
		else if (_match_expr == jule::Str("/=", 2)) {
			_case_begin_1b81ac610:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_div_assign;
			}
		}
		else if (_match_expr == jule::Str("*=", 2)) {
			_case_begin_1b81ac676:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_mul_assign;
			}
		}
		else if (_match_expr == jule::Str("%=", 2)) {
			_case_begin_1b81ac6dc:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_mod_assign;
			}
		}
		else if (_match_expr == jule::Str("<<=", 3)) {
			_case_begin_1b81ada0c:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_shl_assign;
			}
		}
		else if (_match_expr == jule::Str(">>=", 3)) {
			_case_begin_1b81ada73:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_shr_assign;
			}
		}
		else if (_match_expr == jule::Str("|=", 2)) {
			_case_begin_1b81adad9:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_bit_or_assign;
			}
		}
		else if (_match_expr == jule::Str("&=", 2)) {
			_case_begin_1b81adb50:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_bit_and_assign;
			}
		}
		else if (_match_expr == jule::Str("^=", 2)) {
			_case_begin_1b81add70:;
			{
				_115217_overload=(*(_114950_s))._field_operators._field_bit_xor_assign;
			}
		}
		else {
			_case_begin_1b81ac016:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_114970_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_114970_a))._field_setter._field_kind),jule::Any((*(_114950_s))._method_to_str())}));
				return false;
			}
		}
		_match_end_1b81ac4ab:;
	}
	if ((_115217_overload == nullptr)) {
		(*((*(this->self))._field_s))._method_push_err((*(_114970_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_114970_a))._field_setter._field_kind),jule::Any((*(_114950_s))._method_to_str())}));
		return false;
	}
	jule::Ptr<_1e83d5bb0_ParamIns> _118417_p = (*(_115217_overload))._field_params[1LL];
	return (*((*(this->self))._field_s))._method_check_assign_type((*((*(_118417_p))._field_decl))._field_reference,(*(_118417_p))._field_kind,_114989_r,(*(_114970_a))._field_setter);
}



inline void _1ce6882bc_ScopeChecker::_method_check_single_assign(jule::Ptr<_212b1e115_AssignSt>& _118844_a) {
	jule::Ptr<_1ce727449_Data> _118917_l = nullptr;
	if ((!(_212ae9255_is_ignore_ident((*((*(_118844_a))._field_left[0LL]))._field_ident)))) {
		jule::Ptr<_212b16162_Expr> _119221_expr = (*((*(_118844_a))._field_left[0LL]))._field_expr;
		_118917_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_119221_expr);
		if ((_118917_l == nullptr)) {
			return;
		}
	}
	jule::Ptr<_1ce728879_Eval> _119917_eval = (((_118917_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_118917_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
	(*(_119917_eval))._field_unsafety=(*(this->self))._method_is_unsafe();
	jule::Ptr<_1ce727449_Data> _120517_r = (*(_119917_eval))._method_eval_expr((*(_118844_a))._field_right);
	if ((_120517_r == nullptr)) {
		return;
	}
	if ((_118917_l == nullptr)) {
		if ((*((*(_120517_r))._field_kind))._method_void()) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_118844_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_120517_r));
		return;
	}
	if ((!(_1ce64010e_check_assign((*(this->self))._field_s,_118917_l,_120517_r,(*(_118844_a))._field_setter)))) {
		return;
	}
	if (((*((*(_120517_r))._field_kind))._method_tup() != nullptr)) {
		(*((*(this->self))._field_s))._method_push_err((*(_118844_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1ce685d9c_Assign>(new( std::nothrow ) _1ce685d9c_Assign(jule::new_struct<_1e83bdbcb_OperandExprModel>(new( std::nothrow ) _1e83bdbcb_OperandExprModel((*(_118917_l))._field_kind,(*(_118917_l))._field_model)),jule::new_struct<_1e83bdbcb_OperandExprModel>(new( std::nothrow ) _1e83bdbcb_OperandExprModel((*(_120517_r))._field_kind,(*(_120517_r))._field_model)),(*(_118844_a))._field_setter))));
	if (((*(_118844_a))._field_setter._field_kind != jule::Str("=", 1))) {
		jule::Ptr<_1e83b84bc_StructIns> _124121_strct = (*((*(_118917_l))._field_kind))._method_strct();
		if ((_124121_strct != nullptr)) {
			(*(this->self))._method_check_structure_assign_op(_124121_strct,_118844_a,_120517_r);
			return;
		}
		(*(_118844_a))._field_setter._field_kind=(*(_118844_a))._field_setter._field_kind.slice(0LL,((*(_118844_a))._field_setter._field_kind.len() - 1LL));
		_1ce72a084_BinaryEval _124821_solver = _1ce72a084_BinaryEval::_static_method_new(_119917_eval,(*(_118844_a))._field_setter);
		_120517_r=_124821_solver._method_solve_explicit(_118917_l,_120517_r);
		if ((_120517_r == nullptr)) {
			return;
		}
		(*(_118844_a))._field_setter._field_kind+=jule::Str("=", 1);
		return;
	}
	_1ce70c671_AssignTypeChecker _125717_checker = _1ce70c671_AssignTypeChecker((*(this->self))._field_s,(*(_118917_l))._field_kind,_120517_r,(*(_118844_a))._field_setter);
	_125717_checker._method_check();
}



inline void _1ce6882bc_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ptr<_1ce6862dc_MultiAssign> _126657_st,jule::Ptr<_212b1e115_AssignSt> _126713_a,jule::Ptr<_212b1dbc5_AssignLeft> _126731_lexpr,jule::Ptr<_1ce727449_Data> _126755_l,jule::Ptr<_1ce727449_Data> _126769_r) {
	if (_212ae9255_is_ignore_ident((*(_126731_lexpr))._field_ident)) {
		if ((*((*(_126769_r))._field_kind))._method_void()) {
			(*((*this)._field_s))._method_push_err((*((*(_126713_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*(_126657_st))._field_l = jule::alloc_for_append((*(_126657_st))._field_l,1);(*(_126657_st))._field_l.__push(jule::Any(nullptr));
		return;
	}
	if ((*(_126713_a))._field_declarative && (*this)._method_is_new_assign_ident((*(_126731_lexpr))._field_ident)) {
		if ((*this)._method_is_duplicated_ident(0LLU,(*(_126731_lexpr))._field_ident)) {
			(*((*this)._field_s))._method_push_err((*(_126731_lexpr))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_126731_lexpr))._field_ident)}));
			(*((*this)._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
			(*this)._method_stop();
			return;
		}
		jule::Ptr<_1ce6cecb4_Var> _128621_v = jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var((*this)._field_scope,(*(_126731_lexpr))._field_token,(*(_126731_lexpr))._field_ident,jule::Bool(),jule::Bool(),(*(_126731_lexpr))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),(*(_126731_lexpr))._field_reference,jule::Str(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value((*(_126713_a))._field_right,_126769_r)),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>()));
		(*((*this)._field_s))._method_check_var(_128621_v);
		(*(_126657_st))._field_l = jule::alloc_for_append((*(_126657_st))._field_l,1);(*(_126657_st))._field_l.__push(jule::Any(_128621_v));
		(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.__push(_128621_v);
		(*((*this)._field_scope))._field_stmts = jule::alloc_for_append((*((*this)._field_scope))._field_stmts,1);(*((*this)._field_scope))._field_stmts.__push(jule::Any(_128621_v));
		return;
	}
	if ((*(_126731_lexpr))._field_mutable || (*(_126731_lexpr))._field_reference) {
		(*((*this)._field_s))._method_push_err((*(_126731_lexpr))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_126731_lexpr))._field_ident)}));
		(*((*this)._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((!(_1ce64010e_check_assign((*this)._field_s,_126755_l,_126769_r,(*(_126713_a))._field_setter)))) {
		return;
	}
	
	(*((*this)._field_s))._method_check_validity_for_init_expr((*(_126755_l))._field_mutable,false,(*(_126755_l))._field_kind,_126769_r,(*(_126713_a))._field_setter);
	_1ce70c671_AssignTypeChecker _132117_checker = _1ce70c671_AssignTypeChecker((*this)._field_s,(*(_126755_l))._field_kind,_126769_r,(*(_126713_a))._field_setter);
	_132117_checker._method_check();
	(*(_126657_st))._field_l = jule::alloc_for_append((*(_126657_st))._field_l,1);(*(_126657_st))._field_l.__push((*(_126755_l))._field_model);
}



inline void _1ce6882bc_ScopeChecker::_method_check_ret_multi_assign(jule::Ptr<_212b1e115_AssignSt>& _133247_a) {
	jule::Ptr<_1ce727449_Data> _133317_rd = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_133247_a))._field_right);
	if ((_133317_rd == nullptr)) {
		return;
	}
	jule::Slice<jule::Ptr<_1ce727449_Data>> _133817_r = _1ce63d8d2_get_datas_from_tuple_data(_133317_rd);
	{
		
		if ((*(_133247_a))._field_left.len() > static_cast<jule::I64>(_133817_r.len())) {
			_case_begin_1b81d80db:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_133247_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_133247_a))._field_left.len() < static_cast<jule::I64>(_133817_r.len())) {
			_case_begin_1b81d8163:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_133247_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_1b81d8042:;
	}
	jule::Ptr<_1ce6862dc_MultiAssign> _135017_st = jule::new_struct<_1ce6862dc_MultiAssign>(new( std::nothrow ) _1ce6862dc_MultiAssign(jule::Slice<jule::Any>(),(*(_133317_rd))._field_model));
	if (((*((*(_133317_rd))._field_kind))._method_tup() == nullptr)) {
		(*(_135017_st))._field_r=jule::Any(jule::new_struct<_1e83c95aa_TupleExprModel>(new( std::nothrow ) _1e83c95aa_TupleExprModel(_133817_r)));
	}
	{
		auto &expr = (*(_133247_a))._field_left;
		auto it = expr.begin();
		_iter_begin_1b81dbcc1:;
		if (it != expr.end()) {
			jule::I64 _1b81dc101_i = it - expr.begin();
			{
				jule::Ptr<_212b1dbc5_AssignLeft> _135921_lexpr = (*(_133247_a))._field_left[_1b81dc101_i];
				jule::Ptr<_1ce727449_Data> _136021_l = nullptr;
				if ((!(_212ae9255_is_ignore_ident((*(_135921_lexpr))._field_ident))) && ((!((*(_133247_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_135921_lexpr))._field_ident))))) {
					_136021_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_135921_lexpr))._field_expr);
					if ((_136021_l == nullptr)) {
						goto _iter_next_1b81dbcc1;
					}
				}
				(*(this->self))._method___process_end_part_of_multi_assign(_135017_st,_133247_a,_135921_lexpr,_136021_l,_133817_r[_1b81dc101_i]);
			}
			_iter_next_1b81dbcc1:;
			++it;
			_1b81dc101_i++;
			goto _iter_begin_1b81dbcc1;
		}
		_iter_end_1b81dbcc1:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_135017_st));
}



inline void _1ce6882bc_ScopeChecker::_method_check_multi_assign(jule::Ptr<_212b1e115_AssignSt>& _137643_a) {
	{
		auto &_match_expr{ (*((*(_137643_a))._field_right))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_212b19bd2_FnCallExpr>>()) {
			_case_begin_1b81e1ed5:;
			{
				(*(this->self))._method_check_ret_multi_assign(_137643_a);
				return;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b17372_UnsafeExpr>>()) {
			_case_begin_1b81e204b:;
			{
				{
					auto &_match_expr{ (*((*((*(_137643_a))._field_right))._field_kind.operator jule::Ptr<_212b17372_UnsafeExpr>()))._field_expr };
					
					if (_match_expr.type_is<jule::Ptr<_212b19bd2_FnCallExpr>>()) {
						_case_begin_1b81e3668:;
						{
							(*(this->self))._method_check_ret_multi_assign(_137643_a);
							return;
						}
					}
					_match_end_1b81e35e1:;
				}
			}
		}
		_match_end_1b81e1e4c:;
	}
	jule::Slice<jule::Any> _138917_right = _1ce63e1b8_get_expr_models((*((*(_137643_a))._field_right))._field_kind);
	{
		
		if ((*(_137643_a))._field_left.len() > static_cast<jule::I64>(_138917_right.len())) {
			_case_begin_1b81e4625:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_137643_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_137643_a))._field_left.len() < static_cast<jule::I64>(_138917_right.len())) {
			_case_begin_1b81e468b:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_137643_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_1b81e4515:;
	}
	jule::Ptr<_1e83c95aa_TupleExprModel> _140017_right_tuple = jule::new_struct<_1e83c95aa_TupleExprModel>(new( std::nothrow ) _1e83c95aa_TupleExprModel());
	jule::Ptr<_1ce6862dc_MultiAssign> _140217_st = jule::new_struct<_1ce6862dc_MultiAssign>(new( std::nothrow ) _1ce6862dc_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_140017_right_tuple)));
	{
		auto &expr = (*(_137643_a))._field_left;
		auto it = expr.begin();
		_iter_begin_1b81e7aac:;
		if (it != expr.end()) {
			jule::I64 _1b81e7bbc_i = it - expr.begin();
			{
				jule::Ptr<_212b1dbc5_AssignLeft> _140721_lexpr = (*(_137643_a))._field_left[_1b81e7bbc_i];
				jule::Ptr<_1ce727449_Data> _140821_l = nullptr;
				if ((!(_212ae9255_is_ignore_ident((*(_140721_lexpr))._field_ident))) && ((!((*(_137643_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_140721_lexpr))._field_ident))))) {
					_140821_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_140721_lexpr))._field_expr);
					if ((_140821_l == nullptr)) {
						goto _iter_next_1b81e7aac;
					}
				}
				jule::Ptr<_212b16162_Expr> _141821_expr = jule::new_struct<_212b16162_Expr>(new( std::nothrow ) _212b16162_Expr((*((*(_137643_a))._field_right))._field_token,_138917_right[_1b81e7bbc_i]));
				jule::Ptr<_1ce728879_Eval> _141921_eval = (((_140821_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_140821_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
				jule::Ptr<_1ce727449_Data> _142421_r = (*(_141921_eval))._method_eval_expr(_141821_expr);
				if ((_142421_r == nullptr)) {
					goto _iter_next_1b81e7aac;
				}
				(*(_140017_right_tuple))._field_datas = jule::alloc_for_append((*(_140017_right_tuple))._field_datas,1);(*(_140017_right_tuple))._field_datas.__push(_142421_r);
				(*(this->self))._method___process_end_part_of_multi_assign(_140217_st,_137643_a,_140721_lexpr,_140821_l,_142421_r);
			}
			_iter_next_1b81e7aac:;
			++it;
			_1b81e7bbc_i++;
			goto _iter_begin_1b81e7aac;
		}
		_iter_end_1b81e7aac:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_140217_st));
}



inline void _1ce6882bc_ScopeChecker::_method_check_assign_st(jule::Ptr<_212b1e115_AssignSt> _143739_a) {
	if (_212aebd4b_is_postfix_op((*(_143739_a))._field_setter._field_kind)) {
		(*(this->self))._method_check_postfix(_143739_a);
		return;
	}
	if (((*(_143739_a))._field_left.len() == 1LL) && (!((*(_143739_a))._field_declarative))) {
		(*(this->self))._method_check_single_assign(_143739_a);
		return;
	}
	(*(this->self))._method_check_multi_assign(_143739_a);
}



inline jule::Ptr<_1ce62e86d_Scope> _1ce6882bc_ScopeChecker::_method_check_case_scope(jule::Ptr<_1ce686b6c_Case>& _145137_c,jule::Ptr<_212b1e555_ScopeTree>& _145152_tree) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _145217_ssc = (*(this->self))._method_new_child_checker();
	(*(_145217_ssc))._field_cse=static_cast<jule::U64>(static_cast<jule::U64>(_145137_c));
	return (*(this->self))._method_check_child_sc(_145152_tree,_145217_ssc);
}



inline jule::Ptr<_1ce686b6c_Case> _1ce6882bc_ScopeChecker::_method_check_case(jule::Ptr<_1ce68672c_Match> _145734_m,jule::I64 _145745_i,jule::Ptr<_212b23515_Case> _145757_c,jule::Ptr<_1ce727449_Data> _145787_expr) {
	jule::Ptr<_1ce686b6c_Case> _145817__case = (*(_145734_m))._field_cases[_145745_i];
	(*(_145817__case))._field_exprs=jule::Slice<jule::Ptr<_1ce727449_Data>>::alloc(0LL,static_cast<jule::I64>((*(_145757_c))._field_exprs.len()));
	jule::Bool _146017_generic_matched = false;
	jule::Ptr<_1ce728879_Eval> _146117_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	{
		auto &expr = (*(_145757_c))._field_exprs;
		auto it = expr.begin();
		_iter_begin_1b8207803:;
		if (it != expr.end()) {
			jule::Ptr<_212b16162_Expr> _1b82078be_e = *it;
			{
				jule::Ptr<_1ce727449_Data> _146321_d = (*(_146117_eval))._method_eval_expr_kind((*(_1b82078be_e))._field_kind);
				if ((_146321_d == nullptr)) {
					goto _iter_next_1b8207803;
				}
				if ((*(_145734_m))._field_type_match) {
					(*(_145817__case))._field_exprs = jule::alloc_for_append((*(_145817__case))._field_exprs,1);(*(_145817__case))._field_exprs.__push(_146321_d);
					if ((_1ce63d4a3_count_match_type(_145734_m,(*(_146321_d))._field_kind) > 1LL)) {
						(*((*(this->self))._field_s))._method_push_err((*(_1b82078be_e))._field_token,jule::Str("duplicated pattern: type @ is already matched", 45),jule::Slice<jule::Any>({jule::Any((*((*(_146321_d))._field_kind))._method_to_str())}));
					}
					if ((*((*(_145787_expr))._field_kind))._field_generic) {
						_146017_generic_matched=_146017_generic_matched || (*((*(_145787_expr))._field_kind))._method_equals((*(_146321_d))._field_kind);
					} else {
						jule::Ptr<_1e85a7865_Trait> _147525_trt = (*((*(_145787_expr))._field_kind))._method_trt();
						if ((_147525_trt != nullptr)) {
							(*((*(this->self))._field_s))._method_check_type_compatibility((*(_145787_expr))._field_kind,(*(_146321_d))._field_kind,(*(_1b82078be_e))._field_token);
						}
					}
					goto _iter_next_1b8207803;
				}
				if ((*(_146321_d))._field_decl) {
					(*((*(this->self))._field_s))._method_push_err((*(_1b82078be_e))._field_token,jule::Str("expecting expression, found type declaration", 44),jule::Slice<jule::Any>());
					(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("you can use type-match if you want to match types", 49),jule::Slice<jule::Any>());
					goto _iter_next_1b8207803;
				}
				(*(_145817__case))._field_exprs = jule::alloc_for_append((*(_145817__case))._field_exprs,1);(*(_145817__case))._field_exprs.__push(_146321_d);
				_1ce70c671_AssignTypeChecker _149221_checker = _1ce70c671_AssignTypeChecker((*(this->self))._field_s,(*(_145787_expr))._field_kind,_146321_d,(*(_1b82078be_e))._field_token);
				_149221_checker._method_check();
			}
			_iter_next_1b8207803:;
			++it;
			goto _iter_begin_1b8207803;
		}
		_iter_end_1b8207803:;
	}
	if (((!((*(_145734_m))._field_type_match)) || (!((*((*(_145787_expr))._field_kind))._field_generic))) || _146017_generic_matched) {
		(*(_145817__case))._field_scope=(*(this->self))._method_check_case_scope(_145817__case,(*(_145757_c))._field_scope);
	}
	return _145817__case;
}



inline void _1ce6882bc_ScopeChecker::_method_check_cases(jule::Ptr<_212b23955_MatchCase>& _150636_m,jule::Ptr<_1ce68672c_Match> _150655_rm,jule::Ptr<_1ce727449_Data> _150671_expr) {
	(*(_150655_rm))._field_cases=jule::Slice<jule::Ptr<_1ce686b6c_Case>>::alloc(0LL,static_cast<jule::I64>((*(_150636_m))._field_cases.len()));
	{
		auto &expr = (*(_150636_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b8213d4d:;
		if (it != expr.end()) {
			jule::I64 _1b82144d0_i = it - expr.begin();
			{
				jule::Ptr<_1ce686b6c_Case> _150921__case = jule::new_struct<_1ce686b6c_Case>(new( std::nothrow ) _1ce686b6c_Case(_150655_rm,jule::Ptr<_1ce62e86d_Scope>(),jule::Slice<jule::Ptr<_1ce727449_Data>>(),jule::Ptr<_1ce686b6c_Case>()));
				if ((_1b82144d0_i > 0LL)) {
					(*((*(_150655_rm))._field_cases[(_1b82144d0_i - 1LL)]))._field_next=_150921__case;
				}
				(*(_150655_rm))._field_cases = jule::alloc_for_append((*(_150655_rm))._field_cases,1);(*(_150655_rm))._field_cases.__push(_150921__case);
			}
			_iter_next_1b8213d4d:;
			++it;
			_1b82144d0_i++;
			goto _iter_begin_1b8213d4d;
		}
		_iter_end_1b8213d4d:;
	}
	if (((*(_150655_rm))._field_default != nullptr) && ((*(_150636_m))._field_cases.len() > 0LL)) {
		(*((*(_150655_rm))._field_cases[((*(_150655_rm))._field_cases.len() - 1LL)]))._field_next=(*(_150655_rm))._field_default;
	}
	{
		auto &expr = (*(_150636_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b82178ce:;
		if (it != expr.end()) {
			jule::I64 _1b821799a_i = it - expr.begin();
			jule::Ptr<_212b23515_Case> _1b8217b76_c = *it;
			{
				(*(this->self))._method_check_case(_150655_rm,_1b821799a_i,_1b8217b76_c,_150671_expr);
			}
			_iter_next_1b82178ce:;
			++it;
			_1b821799a_i++;
			goto _iter_begin_1b82178ce;
		}
		_iter_end_1b82178ce:;
	}
}



inline jule::Ptr<_1ce686b6c_Case> _1ce6882bc_ScopeChecker::_method_check_default(jule::Ptr<_1ce68672c_Match> _152737_m,jule::Ptr<_212b22745_Else> _152752_d) {
	jule::Ptr<_1ce686b6c_Case> _152817_def = jule::new_struct<_1ce686b6c_Case>(new( std::nothrow ) _1ce686b6c_Case(_152737_m,jule::Ptr<_1ce62e86d_Scope>(),jule::Slice<jule::Ptr<_1ce727449_Data>>(),jule::Ptr<_1ce686b6c_Case>()));
	(*(_152817_def))._field_scope=(*(this->self))._method_check_case_scope(_152817_def,(*(_152752_d))._field_scope);
	return _152817_def;
}



inline void _1ce6882bc_ScopeChecker::_method_check_comptime_panic(jule::Ptr<_1ce62e86d_Scope>& _153540_s) {
	if (((*(_153540_s))._field_stmts.len() != 1LL)) {
		return;
	}
	jule::Any _154013_stmt = (*(_153540_s))._field_stmts[0LL];
	{
		auto &_match_expr{ _154013_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b821bc8a:;
			{
				jule::Ptr<_1ce727449_Data> _154317_d = _154013_stmt.operator jule::Ptr<_1ce727449_Data>();
				{
					auto &_match_expr{ (*(_154317_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>>()) {
						_case_begin_1b821cb7b:;
						{
							jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel> _154621_m = (*(_154317_d))._field_model.operator jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>();
							{
								auto &_match_expr{ (*(_154621_m))._field_expr };
								
								if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
									_case_begin_1b821dbd2:;
									{
										jule::Ptr<_1ce4b898d_Const> _154925_c = (*(_154621_m))._field_expr.operator jule::Ptr<_1ce4b898d_Const>();
										if ((*(_154925_c))._method_is_str()) {
											(*((*this)._field_s))._method_push_err((*((*this)._field_called_from)),jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>({jule::Any((*(_154925_c))._method_read_str())}));
										}
									}
								}
								_match_end_1b821db7c:;
							}
						}
					}
					_match_end_1b821cae3:;
				}
			}
		}
		_match_end_1b821bc35:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_push_type_match(jule::Ptr<_1ce68672c_Match> _155839_tm,jule::Ptr<_212b23955_MatchCase>& _155852_m) {
	if ((*((*((*(_155839_tm))._field_expr))._field_kind))._field_generic) {
		{
			auto &expr = (*(_155839_tm))._field_cases;
			auto it = expr.begin();
			_iter_begin_1b8226404:;
			if (it != expr.end()) {
				jule::Ptr<_1ce686b6c_Case> _1b822648c_c = *it;
				{
					if (((*(_1b822648c_c))._field_scope != nullptr)) {
						(*(_155839_tm))._field_cases=nullptr;
						(*(_155839_tm))._field_default=_1b822648c_c;
						(*(this->self))._method_check_comptime_panic((*(_1b822648c_c))._field_scope);
						goto _julec_label_push;
					}
				}
				_iter_next_1b8226404:;
				++it;
				goto _iter_begin_1b8226404;
			}
			_iter_end_1b8226404:;
		}
		if (((*(_155839_tm))._field_default != nullptr)) {
			(*(this->self))._method_check_comptime_panic((*((*(_155839_tm))._field_default))._field_scope);
		}
		(*(_155839_tm))._field_cases=nullptr;
	}
	_julec_label_push:;
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_155839_tm));
}



inline void _1ce6882bc_ScopeChecker::_method_check_type_match(jule::Ptr<_212b23955_MatchCase>& _158041_m) {
	jule::Ptr<_1ce727449_Data> _158117_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval((*(_158041_m))._field_expr);
	if ((_158117_d == nullptr)) {
		return;
	}
	if ((!((*((*(_158117_d))._field_kind))._field_generic)) && (!((((*((*(_158117_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_158117_d))._field_kind))._method_prim()))._method_is_any()) || ((*((*(_158117_d))._field_kind))._method_trt() != nullptr)))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_158041_m))._field_expr))._field_token,jule::Str("type-match must be have <any>, <trait> or <generic> typed expression", 68),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ce68672c_Match> _159217_tm = jule::new_struct<_1ce68672c_Match>(new( std::nothrow ) _1ce68672c_Match(_158117_d,true,jule::Slice<jule::Ptr<_1ce686b6c_Case>>(),jule::Ptr<_1ce686b6c_Case>()));
	if (((*(_158041_m))._field_default != nullptr)) {
		(*(_159217_tm))._field_default=(*(this->self))._method_check_default(_159217_tm,(*(_158041_m))._field_default);
	}
	(*(this->self))._method_check_cases(_158041_m,_159217_tm,_158117_d);
	(*(this->self))._method_push_type_match(_159217_tm,_158041_m);
}



inline void _1ce6882bc_ScopeChecker::_method_check_common_match(jule::Ptr<_212b23955_MatchCase>& _160443_m) {
	jule::Ptr<_1ce727449_Data> _160517_d = nullptr;
	if (((*(_160443_m))._field_expr == nullptr)) {
		_160517_d=jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ce4b898d_Const::_static_method_new_bool(true)));
		(*(_160517_d))._field_model=jule::Any((*(_160517_d))._field_constant);
	} else {
		_160517_d=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_160443_m))._field_expr);
		if ((_160517_d == nullptr)) {
			return;
		}
	}
	jule::Ptr<_1ce68672c_Match> _161917_mc = jule::new_struct<_1ce68672c_Match>(new( std::nothrow ) _1ce68672c_Match(_160517_d,jule::Bool(),jule::Slice<jule::Ptr<_1ce686b6c_Case>>(),jule::Ptr<_1ce686b6c_Case>()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_161917_mc));
	if (((*(_160443_m))._field_default != nullptr)) {
		(*(_161917_mc))._field_default=(*(this->self))._method_check_default(_161917_mc,(*(_160443_m))._field_default);
	}
	(*(this->self))._method_check_cases(_160443_m,_161917_mc,_160517_d);
}



inline void _1ce6882bc_ScopeChecker::_method_check_match(jule::Ptr<_212b23955_MatchCase> _163135_m) {
	if ((*(_163135_m))._field_type_match) {
		(*(this->self))._method_check_type_match(_163135_m);
		return;
	}
	(*(this->self))._method_check_common_match(_163135_m);
}



inline void _1ce6882bc_ScopeChecker::_method_check_fall(jule::Ptr<_212b1d785_FallSt> _163930_f) {
	if ((((*(this->self))._field_cse == 0LLU) || (((*((*(this->self))._field_scope))._field_stmts.len() + 1LL) < static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len()))) || (*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_163930_f))._field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;
	}
	_1ce686b6c_Case* _164717__case = ((_1ce686b6c_Case*)((*(this->self))._field_cse));
	if (((*(_164717__case))._field_next == nullptr)) {
		(*((*(this->self))._field_s))._method_push_err((*(_163930_f))._field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1ce6870ac_FallSt>(new( std::nothrow ) _1ce6870ac_FallSt(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((*(_164717__case))._field_next)))))));
}



inline jule::Ptr<_1ce684b8c_BreakSt> _1ce6882bc_ScopeChecker::_method_check_break_with_label(jule::Ptr<_212b21975_BreakSt> _165942_b) {
	jule::Ptr<_1ce684b8c_BreakSt> _166017_brk = (*(this->self))._method_check_plain_break(_165942_b);
	if ((_166017_brk == nullptr)) {
		return nullptr;
	}
	(*(_166017_brk))._field_it=0LLU;
	(*(_166017_brk))._field_mtch=0LLU;
	jule::Ptr<_1ce68793c_ScopeLabel> _167017_label = _1ce63c3d6_find_label_parent((*(_165942_b))._field_label._field_kind,(*(this->self))._field_parent);
	if ((_167017_label == nullptr)) {
		(*((*(this->self))._field_s))._method_push_err((*(_165942_b))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_165942_b))._field_label._field_kind)}));
		return nullptr;
	}
	(*(_167017_label))._field_used=true;
	if (((*(_167017_label))._field_pos + 1LL) >= static_cast<jule::I64>((*((*((*(_167017_label))._field_scope))._field_scope))._field_stmts.len())) {
		(*((*(this->self))._field_s))._method_push_err((*(_165942_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_165942_b))._field_label._field_kind)}));
		return nullptr;
	}
	jule::I64 _168313_i = ((*(_167017_label))._field_pos + 1LL);
	if (_168313_i >= static_cast<jule::I64>((*((*((*(_167017_label))._field_scope))._field_scope))._field_stmts.len())) {
		(*((*(this->self))._field_s))._method_push_err((*(_165942_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_165942_b))._field_label._field_kind)}));
	} else {
		jule::Any _168721_st = (*((*((*(_167017_label))._field_scope))._field_scope))._field_stmts[_168313_i];
		{
			auto &_match_expr{ _168721_st };
			
			if (_match_expr.type_is<jule::Ptr<_1ce68397c_InfIter>>()) {
				_case_begin_1b82478ba:;
				{
					(*(_166017_brk))._field_it=static_cast<jule::U64>(static_cast<jule::U64>(_168721_st.operator jule::Ptr<_1ce68397c_InfIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1ce68430c_RangeIter>>()) {
				_case_begin_1b8248932:;
				{
					(*(_166017_brk))._field_it=static_cast<jule::U64>(static_cast<jule::U64>(_168721_st.operator jule::Ptr<_1ce68430c_RangeIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1ce683dbc_WhileIter>>()) {
				_case_begin_1b8248998:;
				{
					(*(_166017_brk))._field_it=static_cast<jule::U64>(static_cast<jule::U64>(_168721_st.operator jule::Ptr<_1ce683dbc_WhileIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1ce68672c_Match>>()) {
				_case_begin_1b8248a0e:;
				{
					(*(_166017_brk))._field_mtch=static_cast<jule::U64>(static_cast<jule::U64>(_168721_st.operator jule::Ptr<_1ce68672c_Match>()));
				}
			}
			else {
				_case_begin_1b8248712:;
				{
					(*((*(this->self))._field_s))._method_push_err((*(_165942_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_165942_b))._field_label._field_kind)}));
				}
			}
			_match_end_1b82486ac:;
		}
	}
	if (((*(_166017_brk))._field_it != 0LLU)) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_166017_brk))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_165942_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_165942_b))._field_label._field_kind)}));
		}
	}
	if (((*(_166017_brk))._field_mtch != 0LLU)) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_166017_brk))._field_mtch)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_165942_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_165942_b))._field_label._field_kind)}));
		}
	}
	return _166017_brk;
}



inline jule::Ptr<_1ce684b8c_BreakSt> _1ce6882bc_ScopeChecker::_method_check_plain_break(jule::Ptr<_212b21975_BreakSt> _171237_b) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_171237_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce6882bc_ScopeChecker> _171817_scope = this->self;
	_julec_label_iter:;
	{
		
		if (((((*(_171817_scope))._field_it == 0LLU) && ((*(_171817_scope))._field_cse == 0LLU)) && ((*(_171817_scope))._field_parent != nullptr)) && ((*(_171817_scope))._field_owner == nullptr)) {
			_case_begin_1b8251781:;
			{
				_171817_scope=(*(_171817_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if (((*(_171817_scope))._field_it != 0LLU)) {
			_case_begin_1b8251808:;
			{
				return jule::new_struct<_1ce684b8c_BreakSt>(new( std::nothrow ) _1ce684b8c_BreakSt((*(_171817_scope))._field_it,jule::U64()));
			}
		}
		else if (((*(_171817_scope))._field_cse != 0LLU)) {
			_case_begin_1b8251880:;
			{
				return jule::new_struct<_1ce684b8c_BreakSt>(new( std::nothrow ) _1ce684b8c_BreakSt(jule::U64(),static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((*(((_1ce686b6c_Case*)((*(_171817_scope))._field_cse))))._field_owner)))));
			}
		}
		_match_end_1b82516b5:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_171237_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1ce6882bc_ScopeChecker::_method_check_break(jule::Ptr<_212b21975_BreakSt> _173631_b) {
	if ((*(_173631_b))._field_label._field_id != static_cast<jule::U64>(0LLU)) {
		jule::Ptr<_1ce684b8c_BreakSt> _173821_brk = (*(this->self))._method_check_break_with_label(_173631_b);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_173821_brk));
		return;
	}
	jule::Ptr<_1ce684b8c_BreakSt> _174317_brk = (*(this->self))._method_check_plain_break(_173631_b);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_174317_brk));
}



inline void _1ce6882bc_ScopeChecker::_method_check_ret(jule::Ptr<_212b20765_RetSt> _174733_r) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_174733_r))._field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce6874ec_RetSt> _175217_rt = jule::new_struct<_1ce6874ec_RetSt>(new( std::nothrow ) _1ce6874ec_RetSt((*((*(this->self))._method_get_root()))._field_owner,jule::Slice<jule::Ptr<_1ce6cecb4_Var>>(),jule::Any()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_175217_rt));
	jule::Ptr<_1ce710773_RetTypeChecker> _175717_rtc = jule::new_struct<_1ce710773_RetTypeChecker>(new( std::nothrow ) _1ce710773_RetTypeChecker(this->self,(*(_175217_rt))._field_func,jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_212b16162_Expr>>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>(),(*(_174733_r))._field_token,jule::Any()));
	jule::Bool _176213_ok = (*(_175717_rtc))._method_check((*(_174733_r))._field_expr);
	if ((!(_176213_ok))) {
		return;
	}
	if (((*(_174733_r))._field_expr == nullptr) && ((*(_175717_rtc))._field_vars.len() == 0LL)) {
		return;
	}
	(*(_175217_rt))._field_vars=(*(_175717_rtc))._field_vars;
	if (((*(_174733_r))._field_expr != nullptr)) {
		(*(_175217_rt))._field_expr=(*(_175717_rtc))._field_model;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_use_expr(jule::Ptr<_212b165a2_UseExpr> _177834_ue) {
	if (((*(this->self))._field_result == nullptr)) {
		(*((*(this->self))._field_s))._method_push_err((*(_177834_ue))._field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;
	}
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_177834_ue))._field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	}
	if (((*(this->self))._field_i + 1LL) < static_cast<jule::I64>((*((*(this->self))._field_tree))._field_stmts.len())) {
		(*((*(this->self))._field_s))._method_push_err((*(_177834_ue))._field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_node(jule::Any& _179535_node) {
	{
		auto &_match_expr{ _179535_node };
		
		if (_match_expr.type_is<jule::Ptr<_2129e34b2_Comment>>()) {
			_case_begin_1b8264354:;
			{
				goto _match_end_1b82643cb;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1e555_ScopeTree>>()) {
			_case_begin_1b8264783:;
			{
				(*(this->self))._method_check_anon_scope(_179535_node.operator jule::Ptr<_212b1e555_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b20325_VarDecl>>()) {
			_case_begin_1b8264ab3:;
			{
				(*(this->self))._method_check_var_decl(_179535_node.operator jule::Ptr<_212b20325_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b230c5_TypeAliasDecl>>()) {
			_case_begin_1b82648a4:;
			{
				(*(this->self))._method_check_type_alias_decl(_179535_node.operator jule::Ptr<_212b230c5_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b16162_Expr>>()) {
			_case_begin_1b8264cb1:;
			{
				(*(this->self))._method_check_expr(_179535_node.operator jule::Ptr<_212b16162_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b177b2_CoExpr>>()) {
			_case_begin_1b8264d27:;
			{
				(*(this->self))._method_check_co_expr(_179535_node.operator jule::Ptr<_212b177b2_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b22b85_Conditional>>()) {
			_case_begin_1b8264d8d:;
			{
				(*(this->self))._method_check_conditional(_179535_node.operator jule::Ptr<_212b22b85_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b20ba5_Iter>>()) {
			_case_begin_1b8264e04:;
			{
				(*(this->self))._method_check_iter(_179535_node.operator jule::Ptr<_212b20ba5_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b21db5_ContSt>>()) {
			_case_begin_1b8264e6a:;
			{
				(*(this->self))._method_check_cont(_179535_node.operator jule::Ptr<_212b21db5_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1ce05_LabelSt>>()) {
			_case_begin_1b8264ed1:;
			{
				(*(this->self))._method_check_label(_179535_node.operator jule::Ptr<_212b1ce05_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1d345_GotoSt>>()) {
			_case_begin_1b8265047:;
			{
				(*(this->self))._method_push_goto(_179535_node.operator jule::Ptr<_212b1d345_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1e115_AssignSt>>()) {
			_case_begin_1b82650ad:;
			{
				(*(this->self))._method_check_assign_st(_179535_node.operator jule::Ptr<_212b1e115_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b23955_MatchCase>>()) {
			_case_begin_1b8265124:;
			{
				(*(this->self))._method_check_match(_179535_node.operator jule::Ptr<_212b23955_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1d785_FallSt>>()) {
			_case_begin_1b826518a:;
			{
				(*(this->self))._method_check_fall(_179535_node.operator jule::Ptr<_212b1d785_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b21975_BreakSt>>()) {
			_case_begin_1b8265201:;
			{
				(*(this->self))._method_check_break(_179535_node.operator jule::Ptr<_212b21975_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b20765_RetSt>>()) {
			_case_begin_1b8265267:;
			{
				(*(this->self))._method_check_ret(_179535_node.operator jule::Ptr<_212b20765_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b165a2_UseExpr>>()) {
			_case_begin_1b82652cd:;
			{
				(*(this->self))._method_check_use_expr(_179535_node.operator jule::Ptr<_212b165a2_UseExpr>());
			}
		}
		else {
			_case_begin_1b8264431:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_1b82643cb:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_result(void) {
	jule::Any _181917_stmt = (*((*(this->self))._field_tree))._field_stmts[((*((*(this->self))._field_tree))._field_stmts.len() - 1LL)];
	{
		auto &_match_expr{ _181917_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_212b165a2_UseExpr>>()) {
			_case_begin_1b8271e66:;
			{
				jule::Ptr<_212b165a2_UseExpr> _182221_ue = _181917_stmt.operator jule::Ptr<_212b165a2_UseExpr>();
				jule::Ptr<_1ce727449_Data> _182321_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_182221_ue))._field_expr);
				if ((_182321_d == nullptr)) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_182321_d));
				jule::Ptr<_1ce710773_RetTypeChecker> _183021_rtc = jule::new_struct<_1ce710773_RetTypeChecker>(new( std::nothrow ) _1ce710773_RetTypeChecker(this->self,jule::Ptr<_1e83d630e_FnIns>(),_1ce6e8382_get_result_types((*(this->self))._field_result),jule::Slice<jule::Ptr<_212b16162_Expr>>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>(),(*((*(_182221_ue))._field_expr))._field_token,jule::Any()));
				(*(_183021_rtc))._method_check((*(_182221_ue))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b16162_Expr>>()) {
			_case_begin_1b82721b9:;
			{
				jule::Ptr<_212b16162_Expr> _183821_expr = _181917_stmt.operator jule::Ptr<_212b16162_Expr>();
				jule::Ptr<_1ce727449_Data> _183921_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_183821_expr);
				if ((_183921_d == nullptr)) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_183921_d));
				{
					auto &_match_expr{ (*(_183921_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>()) {
						_case_begin_1b82776a8:;
						{
							jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel> _184825_m = (*(_183921_d))._field_model.operator jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>();
							(*(this->self))._method_process_error_call(_184825_m,(*(_183821_expr))._field_token);
						}
					}
					else {
						_case_begin_1b8277543:;
						{
							return;
						}
					}
					_match_end_1b82774dd:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1d345_GotoSt>>() || _match_expr.type_is<jule::Ptr<_212b21975_BreakSt>>() || _match_expr.type_is<jule::Ptr<_212b21db5_ContSt>>() || _match_expr.type_is<jule::Ptr<_212b20765_RetSt>>()) {
			_case_begin_1b8272230:;
			{
				(*(this->self))._method_check_node(_181917_stmt);
			}
		}
		else {
			_case_begin_1b827176d:;
			{
				(*(this->self))._method_check_node(_181917_stmt);
				return;
			}
		}
		_match_end_1b8271718:;
	}
	(*(this->self))._field_result=nullptr;
}



inline void _1ce6882bc_ScopeChecker::_method_check_tree(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < static_cast<jule::I64>((*((*(this->self))._field_tree))._field_stmts.len()); ((*(this->self))._field_i)++) {
		{
			jule::Any _187321_stmt = (*((*(this->self))._field_tree))._field_stmts[(*(this->self))._field_i];
			(*(this->self))._method_check_node(_187321_stmt);
			if ((*(this->self))._method_stopped()) {
				return;
			}
		}
	_iter_next_1b827a3e2:;
	}
	_iter_end_1b827a3e2:;
	if (((*(this->self))._field_result != nullptr) && ((*((*(this->self))._field_tree))._field_stmts.len() != 0LL)) {
		(*(this->self))._method_check_result();
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_goto(jule::Ptr<_1ce687d7c_ScopeGoto>& _188434_gt,jule::Ptr<_1ce68793c_ScopeLabel>& _188455_label) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _188517_gtsc = (*(_188434_gt))._field_scope;
	while (((*(_188517_gtsc))._field_child_index - 1LL) > (*((*(_188455_label))._field_scope))._field_child_index) {
		{
			_188517_gtsc=(*(_188517_gtsc))._field_parent;
		}
	_iter_next_1b827e45c:;
	}
	_iter_end_1b827e45c:;
	jule::I64 _189017_n = 0LL;
	if ((*(_188517_gtsc))._field_scope == (*((*(_188455_label))._field_scope))._field_scope) {
		if ((*(_188434_gt))._field_pos > (*(_188455_label))._field_pos) {
			return;
		}
		_189017_n=(*(_188434_gt))._field_pos;
	}
	jule::I64 _190317_i = ((*(_188455_label))._field_pos - 1LL);
	if ((_189017_n == 0LL)) {
		{
			auto &expr = (*((*((*(_188455_label))._field_scope))._field_scope))._field_stmts;
			auto it = expr.begin();
			_iter_begin_1b828264c:;
			if (it != expr.end()) {
				jule::I64 _1b82826d5_j = it - expr.begin();
				jule::Any _1b8282905_stmt = *it;
				{
					if (_1ce63d0eb_stmt_is_goto_scope(_1b8282905_stmt,(*(_188517_gtsc))._field_scope)) {
						_189017_n=_1b82826d5_j;
						goto _iter_end_1b828264c;
					}
				}
				_iter_next_1b828264c:;
				++it;
				_1b82826d5_j++;
				goto _iter_begin_1b828264c;
			}
			_iter_end_1b828264c:;
		}
	}
	for (; _190317_i >= _189017_n; (_190317_i)--) {
		{
			jule::Any _191621_stmt = (*((*((*(_188455_label))._field_scope))._field_scope))._field_stmts[_190317_i];
			if (_1ce6601b7_st_is_def(_191621_stmt)) {
				(*((*this)._field_s))._method_push_err((*((*(_188434_gt))._field_gt))._field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any((*((*(_188434_gt))._field_gt))._field_label._field_kind)}));
				return;
			}
		}
	_iter_next_1b82833a6:;
	}
	_iter_end_1b82833a6:;
}



inline void _1ce6882bc_ScopeChecker::_method_check_gotos(void) {
	{
		auto &expr = (*((*this)._field_gotos));
		auto it = expr.begin();
		_iter_begin_1b8285b17:;
		if (it != expr.end()) {
			jule::Ptr<_1ce687d7c_ScopeGoto> _1b8285b5b_gt = *it;
			{
				jule::Ptr<_1ce68793c_ScopeLabel> _192621_label = (*this)._method_find_label_all((*((*(_1b8285b5b_gt))._field_gt))._field_label._field_kind);
				if ((_192621_label == nullptr)) {
					(*((*this)._field_s))._method_push_err((*((*(_1b8285b5b_gt))._field_gt))._field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*((*(_1b8285b5b_gt))._field_gt))._field_label._field_kind)}));
					goto _iter_next_1b8285b17;
				}
				(*(_192621_label))._field_used=true;
				(*this)._method_check_goto(_1b8285b5b_gt,_192621_label);
			}
			_iter_next_1b8285b17:;
			++it;
			goto _iter_begin_1b8285b17;
		}
		_iter_end_1b8285b17:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_labels(void) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_1b8288a82:;
		if (it != expr.end()) {
			jule::Ptr<_1ce68793c_ScopeLabel> _1b8288ac6_l = *it;
			{
				if ((!((*(_1b8288ac6_l))._field_used))) {
					(*((*this)._field_s))._method_push_err((*(_1b8288ac6_l))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*((*(_1b8288ac6_l))._field_label))._field_ident)}));
				}
			}
			_iter_next_1b8288a82:;
			++it;
			goto _iter_begin_1b8288a82;
		}
		_iter_end_1b8288a82:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_vars(void) {
	{
		auto &expr = (*((*this)._field_table))._field_vars;
		auto it = expr.begin();
		_iter_begin_1b828a776:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b828a8a8_v = *it;
			{
				if ((((!((*(_1b828a8a8_v))._field_used)) && (!(_212ae9255_is_ignore_ident((*(_1b828a8a8_v))._field_ident)))) && (!(_212ae95da_is_anon_ident((*(_1b828a8a8_v))._field_ident)))) && ((*(_1b828a8a8_v))._field_ident != jule::Str("self", 4))) {
					(*((*this)._field_s))._method_push_err((*(_1b828a8a8_v))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_1b828a8a8_v))._field_ident)}));
				}
			}
			_iter_next_1b828a776:;
			++it;
			goto _iter_begin_1b828a776;
		}
		_iter_end_1b828a776:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check_aliases(void) {
	{
		auto &expr = (*((*this)._field_table))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_1b828d3e4:;
		if (it != expr.end()) {
			jule::Ptr<_1ce75e6a1_TypeAlias> _1b828d526_a = *it;
			{
				if (((!((*(_1b828d526_a))._field_used)) && (!(_212ae9255_is_ignore_ident((*(_1b828d526_a))._field_ident)))) && (!(_212ae95da_is_anon_ident((*(_1b828d526_a))._field_ident)))) {
					(*((*this)._field_s))._method_push_err((*(_1b828d526_a))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_1b828d526_a))._field_ident)}));
				}
			}
			_iter_next_1b828d3e4:;
			++it;
			goto _iter_begin_1b828d3e4;
		}
		_iter_end_1b828d3e4:;
	}
}



inline void _1ce6882bc_ScopeChecker::_method_check(jule::Ptr<_212b1e555_ScopeTree>& _196230_tree,jule::Ptr<_1ce62e86d_Scope>& _196253_s) {
	(*(_196253_s))._field_deferred=(*(_196230_tree))._field_deferred;
	(*(_196253_s))._field_unsafety=(*(_196230_tree))._field_unsafety;
	jule::I64 _196613_errors = (*((*(this->self))._field_s))._field_errors.len();
	(*(this->self))._field_tree=_196230_tree;
	(*(this->self))._field_scope=_196253_s;
	(*(this->self))._method_check_tree();
	if (_196613_errors == static_cast<jule::I64>((*((*(this->self))._field_s))._field_errors.len())) {
		(*(this->self))._method_check_vars();
		(*(this->self))._method_check_aliases();
		if ((*(this->self))._method_is_root()) {
			(*(this->self))._method_check_gotos();
			(*(this->self))._method_check_labels();
		}
	}
}



inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce6882bc_ScopeChecker::_method_new_child_checker(void) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _198617_base = _1ce63b292_new_scope_checker_base((*(this->self))._field_s,nullptr);
	(*(_198617_base))._field_parent=this->self;
	(*(_198617_base))._field_labels=(*(this->self))._field_labels;
	(*(_198617_base))._field_gotos=(*(this->self))._field_gotos;
	(*(_198617_base))._field_child_index=static_cast<jule::I64>(((*(this->self))._field_child_index + 1LL));
	return _198617_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6882bc_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "called_from:" << _Src._field_called_from << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _1ce698255_DirectiveChecker::_method_check_cdef(jule::Ptr<_2129e3902_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83d4384_Fn>>()) {
			_case_begin_1b8296a29:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1e83d4384_Fn>()))._field_cpp_linked) {
					goto _match_end_1b8296aa1;
				}
				goto _case_begin_1b8296be4;
			}
		}
		else {
			_case_begin_1b8296be4:;
			{
				(*((*this)._field_s))._method_push_err((*(_1630_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_1630_d))._field_tag._field_kind)}));
			}
		}
		_match_end_1b8296aa1:;
	}
	if (((*(_1630_d))._field_args.len() > 0LL)) {
		(*((*this)._field_s))._method_push_err((*(_1630_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1ce698255_DirectiveChecker::_method_check_typedef(jule::Ptr<_2129e3902_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b829a05a:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1e83b1718_Struct>()))._field_cpp_linked) {
					goto _match_end_1b829a0d2;
				}
				goto _case_begin_1b829a225;
			}
		}
		else {
			_case_begin_1b829a225:;
			{
				(*((*this)._field_s))._method_push_err((*(_3233_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_3233_d))._field_tag._field_kind)}));
			}
		}
		_match_end_1b829a0d2:;
	}
	if (((*(_3233_d))._field_args.len() > 0LL)) {
		(*((*this)._field_s))._method_push_err((*(_3233_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1ce698255_DirectiveChecker::_method_check_derive(jule::Ptr<_2129e3902_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b829d349:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1e83b1718_Struct>()))._field_cpp_linked))) {
					goto _match_end_1b829d3c1;
				}
				goto _case_begin_1b829d514;
			}
		}
		else {
			_case_begin_1b829d514:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b829d3c1:;
	}
	if (((*(_4832_d))._field_args.len() == 0LL)) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*((*this)._field_s))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	} else if (((*(_4832_d))._field_args.len() > 1LL)) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	{
		auto &_match_expr{ (*(_4832_d))._field_args[0LL]._field_kind };
		
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_1b82a2a57:;
		}
		else {
			_case_begin_1b82a26e4:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_4832_d))._field_args[0LL]._field_kind)}));
			}
		}
		_match_end_1b82a267d:;
	}
}



inline void _1ce698255_DirectiveChecker::_method_check_namespace(jule::Ptr<_2129e3902_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b82a452b:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1e83b1718_Struct>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d4384_Fn>>()) {
			_case_begin_1b82a48c2:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1e83d4384_Fn>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b82a4938:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1ce6cecb4_Var>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_1b82a46e6:;
			{
				(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
			}
		}
		_match_end_1b82a45a3:;
	}
	if (((*(_7439_d))._field_args.len() == 0LL)) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if (((*(_7439_d))._field_args.len() > 1LL)) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_212ae5c02_Token _10213_arg = (*(_7439_d))._field_args[0LL];
	if (_10213_arg._field_id != static_cast<jule::U64>(6LLU)) {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_10213_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_7439_d))._field_args[0LL]._field_kind=_10213_arg._field_kind.slice(1LL,(_10213_arg._field_kind.len() - 1LL));
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b82ae646:;
			{
				if ((_1ce72a947_find_directive((*((*this)._field_d)),jule::Str("typedef", 7)) == nullptr)) {
					jule::Ptr<_2129e3902_Directive> _11925_typedef = jule::new_struct<_2129e3902_Directive>(new( std::nothrow ) _2129e3902_Directive((*(_7439_d))._field_tag,jule::Slice<_212ae5c02_Token>()));
					(*(_11925_typedef))._field_tag._field_kind=jule::Str("typedef", 7);
					(*((*this)._field_d))=jule::append((*((*this)._field_d)),jule::Slice<jule::Ptr<_2129e3902_Directive>>({_11925_typedef}));
				}
			}
		}
		_match_end_1b82ae091:;
	}
}



inline void _1ce698255_DirectiveChecker::_method_check_deprecated(jule::Ptr<_2129e3902_Directive>& _12840_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b82b1c20:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1e83b1718_Struct>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_12840_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_12840_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d4384_Fn>>()) {
			_case_begin_1b82b20a5:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1e83d4384_Fn>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_12840_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_12840_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b82b211b:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1ce6cecb4_Var>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_12840_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_12840_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_1b82b1dc9:;
			{
				(*((*this)._field_s))._method_push_err((*(_12840_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_12840_d))._field_tag._field_kind)}));
			}
		}
		_match_end_1b82b1c97:;
	}
	if (((*(_12840_d))._field_args.len() == 0LL)) {
		return;
	}
	if (((*(_12840_d))._field_args.len() > 1LL)) {
		(*((*this)._field_s))._method_push_err((*(_12840_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_212ae5c02_Token _15613_arg = (*(_12840_d))._field_args[0LL];
	if (_15613_arg._field_id != static_cast<jule::U64>(6LLU)) {
		(*((*this)._field_s))._method_push_err(_15613_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_15613_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_15613_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_12840_d))._field_args[0LL]._field_kind=_15613_arg._field_kind.slice(1LL,(_15613_arg._field_kind.len() - 1LL));
}



inline void _1ce698255_DirectiveChecker::_method_check_test(jule::Ptr<_2129e3902_Directive>& _17031_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1e83d4384_Fn>>()) {
			_case_begin_1b82bb9a5:;
			{
				jule::Ptr<_1e83d4384_Fn> _17317_f = (*this)._field_o.operator jule::Ptr<_1e83d4384_Fn>();
				if (((!((*(_17317_f))._field_cpp_linked)) && (!((*(_17317_f))._method_is_init()))) && (!((*(_17317_f))._method_is_entry_point()))) {
					goto _match_end_1b82bba2c;
				}
				if ((*(_17317_f))._method_is_method()) {
					(*((*this)._field_s))._method_push_err((*(_17317_f))._field_token,jule::Str("you cannot declare test methods", 31),jule::Slice<jule::Any>());
					goto _match_end_1b82bba2c;
				}
				goto _case_begin_1b82bbb5e;
			}
		}
		else {
			_case_begin_1b82bbb5e:;
			{
				(*((*this)._field_s))._method_push_err((*(_17031_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_17031_d))._field_tag._field_kind)}));
			}
		}
		_match_end_1b82bba2c:;
	}
	if (((*(_17031_d))._field_args.len() > 0LL)) {
		(*((*this)._field_s))._method_push_err((*(_17031_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1ce698255_DirectiveChecker::_method_check_directive(jule::Ptr<_2129e3902_Directive>& _19139_d) {
	{
		auto &_match_expr{ (*(_19139_d))._field_tag._field_kind };
		
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_1b82c1d95:;
			{
				(*this)._method_check_cdef(_19139_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_1b82c1e0b:;
			{
				(*this)._method_check_typedef(_19139_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_1b82c1e72:;
			{
				(*this)._method_check_derive(_19139_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_1b82c1ed8:;
			{
				(*this)._method_check_namespace(_19139_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_1b82c2d30:;
			{
				(*this)._method_check_deprecated(_19139_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_1b82c2d96:;
			{
				(*this)._method_check_test(_19139_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_1b82c2e0c:;
			{
				(*((*this)._field_s))._method_push_err((*(_19139_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_19139_d))._field_tag._field_kind)}));
			}
		}
		else {
			_case_begin_1b82c1933:;
			{
				(*((*this)._field_s))._method_push_err((*(_19139_d))._field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_19139_d))._field_tag._field_kind)}));
			}
		}
		_match_end_1b82c1bec:;
	}
}



inline void _1ce698255_DirectiveChecker::_method_check(void) {
	{
		auto &expr = (*((*this)._field_d));
		auto it = expr.begin();
		_iter_begin_1b82c6bad:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b82c6c02_d = *it;
			{
				(*this)._method_check_directive(_1b82c6c02_d);
			}
			_iter_next_1b82c6bad:;
			++it;
			goto _iter_begin_1b82c6bad;
		}
		_iter_end_1b82c6bad:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce698255_DirectiveChecker &_Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6a15e3_Package::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6a15e3_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce6a15e3_Package::_method_find_var(jule::Str _28731_ident,jule::Bool _28743_cpp_linked) {
	return _1ce69d018_find_var_in_package((*this)._field_files,_28731_ident,_28743_cpp_linked);
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce6a15e3_Package::_method_find_type_alias(jule::Str _29338_ident,jule::Bool _29350_cpp_linked) {
	return _1ce69d645_find_type_alias_in_package((*this)._field_files,_29338_ident,_29350_cpp_linked);
}



inline jule::Ptr<_1e83b1718_Struct> _1ce6a15e3_Package::_method_find_struct(jule::Str _29934_ident,jule::Bool _29946_cpp_linked) {
	return _1ce69dc50_find_struct_in_package((*this)._field_files,_29934_ident,_29946_cpp_linked);
}



inline jule::Ptr<_1e83d4384_Fn> _1ce6a15e3_Package::_method_find_fn(jule::Str _30530_ident,jule::Bool _30542_cpp_linked) {
	return _1ce69e36b_find_fn_in_package((*this)._field_files,_30530_ident,_30542_cpp_linked);
}



inline jule::Ptr<_1e85a7865_Trait> _1ce6a15e3_Package::_method_find_trait(jule::Str _31133_ident) {
	return _1ce69e8cc_find_trait_in_package((*this)._field_files,_31133_ident);
}



inline jule::Ptr<_1e8648917_Enum> _1ce6a15e3_Package::_method_find_enum(jule::Str _31732_ident) {
	return _1ce69ed61_find_enum_in_package((*this)._field_files,_31732_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6a15e3_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6ab345_Sema::_method_find_package(jule::Str _23635_ident) {
	return (*((*this)._field_file))._method_find_package(_23635_ident);
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6ab345_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)> _24637_selector) {
	return (*((*this)._field_file))._method_select_package(_24637_selector);
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce6ab345_Sema::_method_find_var(jule::Str _25631_ident,jule::Bool _25643_cpp_linked) {
	jule::Ptr<_1ce6cecb4_Var> _25817_v = _1ce69d018_find_var_in_package((*this)._field_files,_25631_ident,_25643_cpp_linked);
	if ((_25817_v != nullptr)) {
		return _25817_v;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b82e21c3:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b82e2217_imp = *it;
			{
				if ((!(_1ce6a98a4_imp_is_lookupable(_1b82e2217_imp,_25631_ident)))) {
					goto _iter_next_1b82e21c3;
				}
				_25817_v=(*(_1b82e2217_imp))._method_find_var(_25631_ident,_25643_cpp_linked);
				if ((_25817_v != nullptr) && (*this)._method_is_accessible_define((*(_25817_v))._field_public,(*(_25817_v))._field_token)) {
					return _25817_v;
				}
			}
			_iter_next_1b82e21c3:;
			++it;
			goto _iter_begin_1b82e21c3;
		}
		_iter_end_1b82e21c3:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce6ab345_Sema::_method_find_type_alias(jule::Str _28338_ident,jule::Bool _28350_cpp_linked) {
	jule::Ptr<_1ce75e6a1_TypeAlias> _28517_ta = _1ce69d645_find_type_alias_in_package((*this)._field_files,_28338_ident,_28350_cpp_linked);
	if ((_28517_ta != nullptr)) {
		return _28517_ta;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b82e5946:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b82e598a_imp = *it;
			{
				if ((!(_1ce6a98a4_imp_is_lookupable(_1b82e598a_imp,_28338_ident)))) {
					goto _iter_next_1b82e5946;
				}
				_28517_ta=(*(_1b82e598a_imp))._method_find_type_alias(_28338_ident,_28350_cpp_linked);
				if ((_28517_ta != nullptr) && (*this)._method_is_accessible_define((*(_28517_ta))._field_public,(*(_28517_ta))._field_token)) {
					return _28517_ta;
				}
			}
			_iter_next_1b82e5946:;
			++it;
			goto _iter_begin_1b82e5946;
		}
		_iter_end_1b82e5946:;
	}
	return nullptr;
}



inline jule::Ptr<_1e83b1718_Struct> _1ce6ab345_Sema::_method_find_struct(jule::Str _31034_ident,jule::Bool _31046_cpp_linked) {
	jule::Ptr<_1e83b1718_Struct> _31217_s = _1ce69dc50_find_struct_in_package((*this)._field_files,_31034_ident,_31046_cpp_linked);
	if ((_31217_s != nullptr)) {
		return _31217_s;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b82e8a8c:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b82e8ad1_imp = *it;
			{
				if ((!(_1ce6a98a4_imp_is_lookupable(_1b82e8ad1_imp,_31034_ident)))) {
					goto _iter_next_1b82e8a8c;
				}
				_31217_s=(*(_1b82e8ad1_imp))._method_find_struct(_31034_ident,_31046_cpp_linked);
				if ((_31217_s != nullptr) && (*this)._method_is_accessible_define((*(_31217_s))._field_public,(*(_31217_s))._field_token)) {
					return _31217_s;
				}
			}
			_iter_next_1b82e8a8c:;
			++it;
			goto _iter_begin_1b82e8a8c;
		}
		_iter_end_1b82e8a8c:;
	}
	return nullptr;
}



inline jule::Ptr<_1e83d4384_Fn> _1ce6ab345_Sema::_method_find_fn(jule::Str _33730_ident,jule::Bool _33742_cpp_linked) {
	jule::Ptr<_1e83d4384_Fn> _33917_f = _1ce69e36b_find_fn_in_package((*this)._field_files,_33730_ident,_33742_cpp_linked);
	if ((_33917_f != nullptr)) {
		return _33917_f;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b82ebc8d:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b82ebcd2_imp = *it;
			{
				if ((!(_1ce6a98a4_imp_is_lookupable(_1b82ebcd2_imp,_33730_ident)))) {
					goto _iter_next_1b82ebc8d;
				}
				_33917_f=(*(_1b82ebcd2_imp))._method_find_fn(_33730_ident,_33742_cpp_linked);
				if ((_33917_f != nullptr) && (*this)._method_is_accessible_define((*(_33917_f))._field_public,(*(_33917_f))._field_token)) {
					return _33917_f;
				}
			}
			_iter_next_1b82ebc8d:;
			++it;
			goto _iter_begin_1b82ebc8d;
		}
		_iter_end_1b82ebc8d:;
	}
	return nullptr;
}



inline jule::Ptr<_1e85a7865_Trait> _1ce6ab345_Sema::_method_find_trait(jule::Str _36433_ident) {
	jule::Ptr<_1e85a7865_Trait> _36617_t = _1ce69e8cc_find_trait_in_package((*this)._field_files,_36433_ident);
	if ((_36617_t != nullptr)) {
		return _36617_t;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b83002be:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b82eeb09_imp = *it;
			{
				if ((!(_1ce6a98a4_imp_is_lookupable(_1b82eeb09_imp,_36433_ident)))) {
					goto _iter_next_1b83002be;
				}
				_36617_t=(*(_1b82eeb09_imp))._method_find_trait(_36433_ident);
				if ((_36617_t != nullptr) && (*this)._method_is_accessible_define((*(_36617_t))._field_public,(*(_36617_t))._field_token)) {
					return _36617_t;
				}
			}
			_iter_next_1b83002be:;
			++it;
			goto _iter_begin_1b83002be;
		}
		_iter_end_1b83002be:;
	}
	return nullptr;
}



inline jule::Ptr<_1e8648917_Enum> _1ce6ab345_Sema::_method_find_enum(jule::Str _39132_ident) {
	jule::Ptr<_1e8648917_Enum> _39317_e = _1ce69ed61_find_enum_in_package((*this)._field_files,_39132_ident);
	if ((_39317_e != nullptr)) {
		return _39317_e;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b8303091:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b83028cb_imp = *it;
			{
				if ((!(_1ce6a98a4_imp_is_lookupable(_1b83028cb_imp,_39132_ident)))) {
					goto _iter_next_1b8303091;
				}
				_39317_e=(*(_1b83028cb_imp))._method_find_enum(_39132_ident);
				if ((_39317_e != nullptr) && (*this)._method_is_accessible_define((*(_39317_e))._field_public,(*(_39317_e))._field_token)) {
					return _39317_e;
				}
			}
			_iter_next_1b8303091:;
			++it;
			goto _iter_begin_1b8303091;
		}
		_iter_end_1b8303091:;
	}
	return nullptr;
}



inline jule::Bool _1ce6ab345_Sema::_method_is_flag(jule::I64 _41522_flags) {
	return ((*this)._field_flags & _41522_flags) == _41522_flags;
}



inline void _1ce6ab345_Sema::_method_set_current_file(jule::Ptr<_1ce7204a8_SymbolTable> _41739_f) {
	(*this)._field_file=_41739_f;
}



inline void _1ce6ab345_Sema::_method_push_err(_212ae5c02_Token _41927_token,jule::Str _41941_fmt,jule::Slice<jule::Any> _41954_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1ce6a9299_compiler_err(_41927_token,true,_41941_fmt,_41954_args));
}



inline void _1ce6ab345_Sema::_method_push_suggestion(jule::Str _42434_fmt,jule::Slice<jule::Any> _42447_args) {
	{
		_1ce6aae38_push_suggestion((&((*this)._field_errors[((*this)._field_errors.len() - 1LL)])),_42434_fmt,_42447_args);
	}
}



inline jule::Bool _1ce6ab345_Sema::_method_is_accessible_define(jule::Bool _42935_public,_212ae5c02_Token _42949_token) {
	return (_42935_public || (_42949_token._field_file == nullptr)) || ((*((*((*this)._field_file))._field_file))._method_dir() == (*(_42949_token._field_file))._method_dir());
}



inline jule::Bool _1ce6ab345_Sema::_method_is_duplicated_ident(jule::U64 _43634_itself,jule::Str _43651_ident,jule::Bool _43663_cpp_linked) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_1b830b1ba:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> &_1b830b253_f = *it;
			{
				if ((*(_1b830b253_f))._method_is_duplicated_ident(_43634_itself,_43651_ident,_43663_cpp_linked)) {
					return true;
				}
				{
					auto &expr = (*(_1b830b253_f))._field_imports;
					auto it = expr.begin();
					_iter_begin_1b830c92a:;
					if (it != expr.end()) {
						jule::Ptr<_1ce6a0317_ImportInfo> &_1b830ca18_imp = *it;
						{
							{
								auto &expr = (*(_1b830ca18_imp))._field_selected;
								auto it = expr.begin();
								_iter_begin_1b830d266:;
								if (it != expr.end()) {
									_212ae5c02_Token &_1b830d2aa_selected = *it;
									{
										if (_1b830d2aa_selected._field_kind == _43651_ident) {
											return true;
										}
									}
									_iter_next_1b830d266:;
									++it;
									goto _iter_begin_1b830d266;
								}
								_iter_end_1b830d266:;
							}
						}
						_iter_next_1b830c92a:;
						++it;
						goto _iter_begin_1b830c92a;
					}
					_iter_end_1b830c92a:;
				}
			}
			_iter_next_1b830b1ba:;
			++it;
			goto _iter_begin_1b830b1ba;
		}
		_iter_end_1b830b1ba:;
	}
	return false;
}



inline void _1ce6ab345_Sema::_method_check_directives(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _45341_d,jule::Any _45367_o) {
	_1ce698255_DirectiveChecker _45417_dc = _1ce698255_DirectiveChecker(this->self,((jule::Ptr<jule::Slice<jule::Ptr<_2129e3902_Directive>>>)((&(_45341_d)))),_45367_o);
	_45417_dc._method_check();
}



inline jule::Bool _1ce6ab345_Sema::_method_check_generic_quantity(jule::I64 _46241_required,jule::I64 _46256_given,_212ae5c02_Token _46268_token) {
	jule::Bool _46284_ok = jule::Bool();
	{
		
		if ((_46241_required == 0LL) && (_46256_given > 0LL)) {
			_case_begin_1b8311c92:;
			{
				(*this)._method_push_err(_46268_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else if ((_46241_required > 0LL) && (_46256_given == 0LL)) {
			_case_begin_1b8311d5d:;
			{
				(*this)._method_push_err(_46268_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else if (_46241_required < _46256_given) {
			_case_begin_1b8311dc4:;
			{
				(*this)._method_push_err(_46268_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else if (_46241_required > _46256_given) {
			_case_begin_1b8311a72:;
			{
				(*this)._method_push_err(_46268_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else {
			_case_begin_1b83115dd:;
			{
				_46284_ok = true;
				return _46284_ok;
			}
		}
		_match_end_1b8311522:;
	}
}



inline jule::Bool _1ce6ab345_Sema::_method_is_duplicated_import_selection(jule::U64 _48145_itself,jule::Str _48162_ident) {
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b8315c0d:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> &_1b8315d1d_imp = *it;
			{
				if (static_cast<jule::U64>(_1b8315d1d_imp) == _48145_itself) {
					goto _iter_end_1b8315c0d;
				}
				if ((*(_1b8315d1d_imp))._method_exist_ident(_48162_ident)) {
					return true;
				}
			}
			_iter_next_1b8315c0d:;
			++it;
			goto _iter_begin_1b8315c0d;
		}
		_iter_end_1b8315c0d:;
	}
	return false;
}



inline jule::Any _1ce6ab345_Sema::_method_get_import_def(jule::Str _49629_ident,jule::Ptr<_1ce6a0317_ImportInfo>& _49646_imp) {
	if (_1b546854a_find_package_builtin_def((*(_49646_imp))._field_link_path,_49629_ident) != jule::Any(nullptr)) {
		return jule::Any(true);
	}
	{
		auto &expr = (*((*(_49646_imp))._field_package))._field_files;
		auto it = expr.begin();
		_iter_begin_1b831878d:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b83187d2_f = *it;
			{
				
				jule::Any _50321_def = (*(_1b83187d2_f))._method_def_by_ident(_49629_ident,false);
				if (_50321_def != jule::Any(nullptr)) {
					return _50321_def;
				}
			}
			_iter_next_1b831878d:;
			++it;
			goto _iter_begin_1b831878d;
		}
		_iter_end_1b831878d:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1ce6ab345_Sema::_method_check_import_selections(jule::Ptr<_1ce6a0317_ImportInfo>& _51247_imp) {
	jule::Bool _51267_ok = jule::Bool();
	_51267_ok=true;
	{
		auto &expr = (*(_51247_imp))._field_selected;
		auto it = expr.begin();
		_iter_begin_1b831ac02:;
		if (it != expr.end()) {
			_212ae5c02_Token _1b831ace0_ident = *it;
			{
				if ((_1b831ace0_ident._field_kind == jule::Str("self", 4))) {
					goto _iter_next_1b831ac02;
				}
				if ((*this)._method_is_duplicated_import_selection(static_cast<jule::U64>(static_cast<jule::U64>(_51247_imp)),_1b831ace0_ident._field_kind)) {
					(*this)._method_push_err(_1b831ace0_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1b831ace0_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					_51267_ok=false;
					goto _iter_next_1b831ac02;
				}
				jule::Any _52621_def = (*this)._method_get_import_def(_1b831ace0_ident._field_kind,_51247_imp);
				{
					auto &_match_expr{ _52621_def };
					
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_1b831d5ea:;
						{
							goto _iter_next_1b831ac02;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
						_case_begin_1b831da07:;
						{
							jule::Ptr<_1ce6cecb4_Var> _53325_v = _52621_def.operator jule::Ptr<_1ce6cecb4_Var>();
							if ((*this)._method_is_accessible_define((*(_53325_v))._field_public,(*(_53325_v))._field_token)) {
								goto _iter_next_1b831ac02;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce75e6a1_TypeAlias>>()) {
						_case_begin_1b831da6d:;
						{
							jule::Ptr<_1ce75e6a1_TypeAlias> _53925_ta = _52621_def.operator jule::Ptr<_1ce75e6a1_TypeAlias>();
							if ((*this)._method_is_accessible_define((*(_53925_ta))._field_public,(*(_53925_ta))._field_token)) {
								goto _iter_next_1b831ac02;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
						_case_begin_1b831e6a6:;
						{
							jule::Ptr<_1e83b1718_Struct> _54525_strct = _52621_def.operator jule::Ptr<_1e83b1718_Struct>();
							if ((*this)._method_is_accessible_define((*(_54525_strct))._field_public,(*(_54525_strct))._field_token)) {
								goto _iter_next_1b831ac02;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e85a7865_Trait>>()) {
						_case_begin_1b831e71c:;
						{
							jule::Ptr<_1e85a7865_Trait> _55125_t = _52621_def.operator jule::Ptr<_1e85a7865_Trait>();
							if ((*this)._method_is_accessible_define((*(_55125_t))._field_public,(*(_55125_t))._field_token)) {
								goto _iter_next_1b831ac02;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e8648917_Enum>>()) {
						_case_begin_1b831e783:;
						{
							jule::Ptr<_1e8648917_Enum> _55725_e = _52621_def.operator jule::Ptr<_1e8648917_Enum>();
							if ((*this)._method_is_accessible_define((*(_55725_e))._field_public,(*(_55725_e))._field_token)) {
								goto _iter_next_1b831ac02;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e83d4384_Fn>>()) {
						_case_begin_1b831e7e9:;
						{
							jule::Ptr<_1e83d4384_Fn> _56325_f = _52621_def.operator jule::Ptr<_1e83d4384_Fn>();
							if ((*this)._method_is_accessible_define((*(_56325_f))._field_public,(*(_56325_f))._field_token)) {
								goto _iter_next_1b831ac02;
							}
						}
					}
					else {
						_case_begin_1b831d793:;
						{
							(*this)._method_push_err(_1b831ace0_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_1b831ace0_ident._field_kind)}));
							_51267_ok=false;
							goto _iter_next_1b831ac02;
						}
					}
					_match_end_1b831d73d:;
				}
				(*this)._method_push_err(_1b831ace0_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_1b831ace0_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
				_51267_ok=false;
			}
			_iter_next_1b831ac02:;
			++it;
			goto _iter_begin_1b831ac02;
		}
		_iter_end_1b831ac02:;
	}
	return _51267_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_is_use_alias_duplication(jule::Ptr<_1ce6a0317_ImportInfo>& _58144_imp) {
	if (((*(_58144_imp))._field_alias.len() == 0LL)) {
		return false;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b832767b:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8327901_imp2 = *it;
			{
				if (_1b8327901_imp2 == _58144_imp) {
					goto _iter_end_1b832767b;
				}
				if ((*(_1b8327901_imp2))._field_alias == (*(_58144_imp))._field_alias) {
					return true;
				}
				if (((*(_1b8327901_imp2))._field_ident == (*(_1b8327901_imp2))._field_link_path) && ((*(_1b8327901_imp2))._field_ident == (*(_58144_imp))._field_alias)) {
					return true;
				}
			}
			_iter_next_1b832767b:;
			++it;
			goto _iter_begin_1b832767b;
		}
		_iter_end_1b832767b:;
	}
	return false;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_import(jule::Ptr<_1ce6a0317_ImportInfo>& _60236_imp) {
	if ((*(_60236_imp))._field_cpp_linked || ((*((*(_60236_imp))._field_package))._field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_60236_imp)) {
		(*this)._method_push_err((*(_60236_imp))._field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>({jule::Any((*(_60236_imp))._field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	}
	if ((!((*(_60236_imp))._field_duplicate))) {
		jule::Ptr<_1ce6ab345_Sema> _61321_sema = jule::new_struct_ptr<_1ce6ab345_Sema>(new( std::nothrow ) _1ce6ab345_Sema(jule::Slice<_21287ea02_Log>(),jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>(),jule::Ptr<_1ce7204a8_SymbolTable>(),(*this)._field_flags));
		(*(_61321_sema))._method_check((*((*(_60236_imp))._field_package))._field_files);
		if (((*(_61321_sema))._field_errors.len() != 0LL)) {
			(*this)._field_errors=jule::append((*this)._field_errors,(*(_61321_sema))._field_errors);
			(*(_61321_sema))._field_errors=nullptr;
			return false;
		}
	}
	return (*this)._method_check_import_selections(_60236_imp);
}



inline void _1ce6ab345_Sema::_method_check_imports(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_1b832eed0:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8330101_file = *it;
			{
				(*this)._method_set_current_file(_1b8330101_file);
				{
					auto &expr = (*(_1b8330101_file))._field_imports;
					auto it = expr.begin();
					_iter_begin_1b8330d05:;
					if (it != expr.end()) {
						jule::Ptr<_1ce6a0317_ImportInfo> _1b8330e04_imp = *it;
						{
							jule::Bool _63121_ok = (*this)._method_check_import(_1b8330e04_imp);
							if ((!(_63121_ok))) {
								(*this)._method_push_err((*(_1b8330e04_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_1b8330e04_imp))._field_link_path)}));
								return;
							}
						}
						_iter_next_1b8330d05:;
						++it;
						goto _iter_begin_1b8330d05;
					}
					_iter_end_1b8330d05:;
				}
			}
			_iter_next_1b832eed0:;
			++it;
			goto _iter_begin_1b832eed0;
		}
		_iter_end_1b832eed0:;
	}
}



inline void _1ce6ab345_Sema::_method_impl_file_impls(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_impls;
		auto it = expr.begin();
		_iter_begin_1b8332a3d:;
		if (it != expr.end()) {
			jule::Ptr<_1e8648e34_Impl> _1b8332b09_imp = *it;
			{
				(*(this->self))._method_impl_impl(_1b8332b09_imp);
			}
			_iter_next_1b8332a3d:;
			++it;
			goto _iter_begin_1b8332a3d;
		}
		_iter_end_1b8332a3d:;
	}
}



inline void _1ce6ab345_Sema::_method_impl_impls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8334006:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b833408e_file = *it;
			{
				(*(this->self))._method_set_current_file(_1b833408e_file);
				(*(this->self))._method_impl_file_impls();
			}
			_iter_next_1b8334006:;
			++it;
			goto _iter_begin_1b8334006;
		}
		_iter_end_1b8334006:;
	}
}



inline void _1ce6ab345_Sema::_method_check_enums(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b83354be:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8335557_file = *it;
			{
				(*(this->self))._method_set_current_file(_1b8335557_file);
				(*(this->self))._method_check_enum_decls();
			}
			_iter_next_1b83354be:;
			++it;
			goto _iter_begin_1b83354be;
		}
		_iter_end_1b83354be:;
	}
}



inline jule::Bool _1ce6ab345_Sema::_method_check_type_with_refers(jule::Ptr<_1ce761b37_TypeSymbol>& _66447_t,jule::Trait<_1b545ddc0_Lookup> _66513_l,jule::Ptr<_1ce766eb1_Referencer> _66528_referencer) {
	jule::Bool _66555_ok = jule::Bool();
	if ((*(_66447_t))._method_checked()) {
		_66555_ok = true;
		return _66555_ok;
	}
	_1ce767731_TypeChecker _66917_tc = _1ce767731_TypeChecker(this->self,_66513_l,_66528_referencer,_212ae5c02_Token(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool());
	if ((_66528_referencer != nullptr) && ((*(_66528_referencer))._field_refs != nullptr)) {
		_66917_tc._field_owner_alias=(*(_66528_referencer))._field_owner.operator jule::Ptr<_1ce75e6a1_TypeAlias>();
	}
	_66917_tc._method_check(_66447_t);
	_66555_ok = (*(_66447_t))._method_checked();
	return _66555_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_type(jule::Ptr<_1ce761b37_TypeSymbol>& _68835_t,jule::Trait<_1b545ddc0_Lookup> _68855_l) {
	return (*(this->self))._method_check_type_with_refers(_68835_t,_68855_l,nullptr);
}



inline jule::Ptr<_1ce76121e_TypeKind> _1ce6ab345_Sema::_method_build_type_with_generics(jule::Ptr<_2129e3d42_TypeDecl>& _69449_t,jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _69513_generics) {
	jule::Ptr<_1ce767731_TypeChecker> _69617_tc = jule::new_struct<_1ce767731_TypeChecker>(new( std::nothrow ) _1ce767731_TypeChecker(this->self,this->self,jule::Ptr<_1ce766eb1_Referencer>(),_212ae5c02_Token(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),_69513_generics,jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool()));
	return (*(_69617_tc))._method_check_decl(_69449_t);
}



inline jule::Ptr<_1ce76121e_TypeKind> _1ce6ab345_Sema::_method_build_type(jule::Ptr<_2129e3d42_TypeDecl>& _70535_t) {
	return (*(this->self))._method_build_type_with_generics(_70535_t,nullptr);
}



inline jule::Ptr<_1ce76121e_TypeKind> _1ce6ab345_Sema::_method_select_type(jule::Ptr<_2129e3d42_TypeDecl>& _71036_t) {
	jule::Ptr<_1ce767731_TypeChecker> _71117_tc = jule::new_struct<_1ce767731_TypeChecker>(new( std::nothrow ) _1ce767731_TypeChecker(this->self,this->self,jule::Ptr<_1ce766eb1_Referencer>(),_212ae5c02_Token(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool(),jule::Bool(),true,jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool()));
	return (*(_71117_tc))._method_check_decl(_71036_t);
}



inline jule::Ptr<_1ce728879_Eval> _1ce6ab345_Sema::_method_evalpd(jule::Trait<_1b545ddc0_Lookup> _72130_l,jule::Ptr<_1ce76121e_TypeKind> _72145_p,jule::Ptr<_1ce6cecb4_Var> _72163_owner) {
	jule::Ptr<_1ce728879_Eval> _72217_e = jule::new_struct_ptr<_1ce728879_Eval>(new( std::nothrow ) _1ce728879_Eval(this->self,_72130_l,jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_72163_owner,jule::Ptr<_1e83b2cbe_FieldIns>()));
	{
		auto &_match_expr{ _72130_l };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
			_case_begin_1b8342bb3:;
			{
				(*(_72217_e))._field_unsafety=(*(_72130_l.operator jule::Ptr<_1ce6882bc_ScopeChecker>()))._method_is_unsafe();
			}
		}
		_match_end_1b8342ae7:;
	}
	(*(_72217_e))._field_prefix=_72145_p;
	return _72217_e;
}



inline jule::Ptr<_1ce728879_Eval> _1ce6ab345_Sema::_method_evalp(jule::Trait<_1b545ddc0_Lookup> _73929_l,jule::Ptr<_1ce76121e_TypeKind> _73944_p) {
	return (*(this->self))._method_evalpd(_73929_l,_73944_p,nullptr);
}



inline jule::Ptr<_1ce728879_Eval> _1ce6ab345_Sema::_method_eval(jule::Trait<_1b545ddc0_Lookup> _74428_l) {
	return (*(this->self))._method_evalp(_74428_l,nullptr);
}



inline jule::Bool _1ce6ab345_Sema::_method_check_assign_type(jule::Bool _74837_dest_is_ref,jule::Ptr<_1ce76121e_TypeKind>& _74861_dest,jule::Ptr<_1ce727449_Data>& _74914_d,_212ae5c02_Token _74928_error_token) {
	if ((*(_74914_d))._field_decl) {
		(*(this->self))._method_push_err(_74928_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return false;
	}
	if (_74837_dest_is_ref) {
		if ((!((*(_74861_dest))._method_equals((*(_74914_d))._field_kind)))) {
			(*(this->self))._method_push_err(_74928_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_74861_dest))._method_to_str()),jule::Any((*((*(_74914_d))._field_kind))._method_to_str())}));
			return false;
		}
	} else {
		jule::Ptr<_1ce70c671_AssignTypeChecker> _76421_atc = jule::new_struct<_1ce70c671_AssignTypeChecker>(new( std::nothrow ) _1ce70c671_AssignTypeChecker(this->self,_74861_dest,_74914_d,_74928_error_token));
		jule::Bool _77017_ok = (*(_76421_atc))._method_check();
		if ((!(_77017_ok))) {
			return false;
		}
	}
	if ((!((*(_74914_d))._method_is_const())) || ((*(_74861_dest))._method_prim() == nullptr)) {
		return true;
	}
	jule::Str _78017_kind = (*((*(_74861_dest))._method_prim()))._field_kind;
	{
		
		if (_1ce6818d1_is_sig_int(_78017_kind)) {
			_case_begin_1b834b260:;
			{
				(*((*(_74914_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_74914_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1ce681caa_is_unsig_int(_78017_kind)) {
			_case_begin_1b834b2c6:;
			{
				(*((*(_74914_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_74914_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_1ce6825b3_is_float(_78017_kind)) {
			_case_begin_1b834b33c:;
			{
				(*((*(_74914_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_74914_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_1b834b172:;
	}
	return true;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_type_compatibility(jule::Ptr<_1ce76121e_TypeKind>& _79449_dest,jule::Ptr<_1ce76121e_TypeKind>& _79514_src,_212ae5c02_Token& _79535_error_token) {
	if ((_79514_src == nullptr)) {
		(*(this->self))._method_push_err(_79535_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_79449_dest))._method_to_str()),jule::Any((*(_79514_src))._method_to_str())}));
		return false;
	}
	if (((*(_79514_src))._method_tup() != nullptr)) {
		(*(this->self))._method_push_err(_79535_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_79449_dest))._method_to_str()),jule::Any((*(_79514_src))._method_to_str())}));
		return false;
	}
	_1ce70c231_TypeCompatibilityChecker _80917_tcc = _1ce70c231_TypeCompatibilityChecker(this->self,_79449_dest,_79514_src,_79535_error_token);
	if (_80917_tcc._method_check()) {
		return true;
	}
	(*(this->self))._method_push_err(_79535_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_79449_dest))._method_to_str()),jule::Any((*(_79514_src))._method_to_str())}));
	return false;
}



inline jule::Ptr<_1ce76121e_TypeKind> _1ce6ab345_Sema::_method_build_non_generic_type_kind(jule::Ptr<_2129e3d42_TypeDecl>& _83052_ast,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>& _83114_generics) {
	jule::Ptr<_1ce767731_TypeChecker> _83217_tc = jule::new_struct<_1ce767731_TypeChecker>(new( std::nothrow ) _1ce767731_TypeChecker(this->self,this->self,jule::Ptr<_1ce766eb1_Referencer>(),_212ae5c02_Token(),_83114_generics,jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool()));
	return (*(_83217_tc))._method_check_decl(_83052_ast);
}



inline void _1ce6ab345_Sema::_method_build_fn_non_generic_type_kinds(jule::Ptr<_1e83d630e_FnIns>& _84056_f) {
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _84117_generics = nullptr;
	if ((*((*(_84056_f))._field_decl))._method_is_method()) {
		_84117_generics=jule::append((*((*(_84056_f))._field_decl))._field_generics,(*((*((*(_84056_f))._field_decl))._field_owner))._field_generics);
	} else {
		_84117_generics=(*((*(_84056_f))._field_decl))._field_generics;
	}
	{
		auto &expr = (*(_84056_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b8357821:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> _1b8357865_p = *it;
			{
				if ((!((*((*(_1b8357865_p))._field_decl))._method_is_self()))) {
					(*(_1b8357865_p))._field_kind=(*(this->self))._method_build_non_generic_type_kind((*((*((*(_1b8357865_p))._field_decl))._field_kind))._field_decl,_84117_generics);
				}
			}
			_iter_next_1b8357821:;
			++it;
			goto _iter_begin_1b8357821;
		}
		_iter_end_1b8357821:;
	}
	if ((!((*((*(_84056_f))._field_decl))._method_is_void()))) {
		(*(_84056_f))._field_result=(*(this->self))._method_build_non_generic_type_kind((*((*((*((*(_84056_f))._field_decl))._field_result))._field_kind))._field_decl,_84117_generics);
	}
}



inline jule::Ptr<_1e83d630e_FnIns> _1ce6ab345_Sema::_method_get_trait_check_fn_kind(jule::Ptr<_1e83d4384_Fn>& _85848_f) {
	jule::Ptr<_1e83d630e_FnIns> _85917_ins = (*(_85848_f))._method_instance_force();
	(*(this->self))._method_build_fn_non_generic_type_kinds(_85917_ins);
	return _85917_ins;
}



inline jule::Bool _1ce6ab345_Sema::_method_reload_fn_ins_types(jule::Ptr<_1e83d630e_FnIns>& _86444_f) {
	jule::Bool _86457_ok = jule::Bool();
	if ((*(_86444_f))._method_is_builtin() || (*(_86444_f))._method_is_anon()) {
		_86457_ok = true;
		return _86457_ok;
	}
	jule::Ptr<_1ce6ab345_Sema> _86917_sema = (*((*(_86444_f))._field_decl))._field_sema;
	jule::Ptr<_1ce7204a8_SymbolTable> _87117_old = (*((*((*(_86444_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_86444_f))._field_decl))._field_sema))._method_set_current_file(_87117_old);
	});
	jule::Ptr<_1ce7204a8_SymbolTable> _87317_file = _1ce6aa993_find_file((*((*((*(_86444_f))._field_decl))._field_sema))._field_files,(*((*(_86444_f))._field_decl))._field_token._field_file);
	if ((_87317_file != nullptr)) {
		(*((*((*(_86444_f))._field_decl))._field_sema))._method_set_current_file(_87317_file);
	}
	jule::I64 _87817_size = (*(_86444_f))._field_generics.len();
	if (((*(_86444_f))._field_decl != nullptr) && ((*((*(_86444_f))._field_decl))._field_owner != nullptr)) {
		_87817_size+=static_cast<jule::I64>((*((*((*(_86444_f))._field_decl))._field_owner))._field_generics.len());
	}
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _88317_generics = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>::alloc(0LL,_87817_size);
	{
		auto &expr = (*(_86444_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b8364058:;
		if (it != expr.end()) {
			jule::I64 _1b83642ab_i = it - expr.begin();
			jule::Ptr<_1ce76121e_TypeKind> _1b83644ba_g = *it;
			{
				_88317_generics = jule::alloc_for_append(_88317_generics,1);_88317_generics.__push(jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias(jule::Ptr<_212b1e555_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_212ae5c02_Token(),(*((*((*(_86444_f))._field_decl))._field_generics[_1b83642ab_i]))._field_ident,jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),_1b83644ba_g)),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>())));
			}
			_iter_next_1b8364058:;
			++it;
			_1b83642ab_i++;
			goto _iter_begin_1b8364058;
		}
		_iter_end_1b8364058:;
	}
	if (((*(_86444_f))._field_decl != nullptr) && ((*((*(_86444_f))._field_decl))._field_owner != nullptr)) {
		jule::Ptr<_1e83b84bc_StructIns> _89521_owner = (*(_86444_f))._field_owner;
		{
			auto &expr = (*(_89521_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_1b8365125:;
			if (it != expr.end()) {
				jule::I64 _1b836617b_i = it - expr.begin();
				jule::Ptr<_1ce76121e_TypeKind> _1b83663e0_g = *it;
				{
					_88317_generics = jule::alloc_for_append(_88317_generics,1);_88317_generics.__push(jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias(jule::Ptr<_212b1e555_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_212ae5c02_Token(),(*((*((*(_89521_owner))._field_decl))._field_generics[_1b836617b_i]))._field_ident,jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),_1b83663e0_g)),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>())));
				}
				_iter_next_1b8365125:;
				++it;
				_1b836617b_i++;
				goto _iter_begin_1b8365125;
			}
			_iter_end_1b8365125:;
		}
	}
	_86457_ok=true;
	{
		auto &expr = (*(_86444_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b8367e6e:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> _1b836807e_p = *it;
			{
				if ((!((*((*(_1b836807e_p))._field_decl))._method_is_self()))) {
					(*(_1b836807e_p))._field_kind=(*(_86917_sema))._method_build_type_with_generics((*((*((*(_1b836807e_p))._field_decl))._field_kind))._field_decl,_88317_generics);
					if (((*(_1b836807e_p))._field_kind != nullptr)) {
						(*((*(_1b836807e_p))._field_kind))._field_variadic=(*((*(_1b836807e_p))._field_decl))._field_variadic;
						if ((*((*(_1b836807e_p))._field_decl))._field_reference && (!(_1ce765850_is_valid_for_ref((*(_1b836807e_p))._field_kind)))) {
							(*(this->self))._method_push_err((*((*(_1b836807e_p))._field_decl))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*(_1b836807e_p))._field_kind))._method_to_str())}));
						}
					} else {
						_86457_ok=false;
					}
				}
			}
			_iter_next_1b8367e6e:;
			++it;
			goto _iter_begin_1b8367e6e;
		}
		_iter_end_1b8367e6e:;
	}
	if ((!((*((*(_86444_f))._field_decl))._method_is_void()))) {
		(*(_86444_f))._field_result=(*(_86917_sema))._method_build_type_with_generics((*((*((*((*(_86444_f))._field_decl))._field_result))._field_kind))._field_decl,_88317_generics);
		_86457_ok=((*(_86444_f))._field_result != nullptr) && _86457_ok;
	}
	if (_86917_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*(_86917_sema))._field_errors);
		(*(_86917_sema))._field_errors=nullptr;
	}
	return _86457_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_ref_validity_for_init_expr(jule::Bool _93452_left_mut,jule::Ptr<_1ce727449_Data>& _93473_d,_212ae5c02_Token& _93488_error_token) {
	{
		auto &_match_expr{ (*(_93473_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b8371609:;
			{
				goto _match_end_1b837074b;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>>()) {
			_case_begin_1b8371670:;
			{
				jule::Ptr<_1e83c62cc_TraitSubIdentExprModel> _93921_model = (*(_93473_d))._field_model.operator jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>();
				if ((!(_1ce6a9101_is_valid_model_for_ref((*(_93921_model))._field_expr)))) {
					(*(this->self))._method_push_err(_93488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*(_93921_model))._field_ident)}));
					return false;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c6d16_StructSubIdentExprModel>>()) {
			_case_begin_1b837095a:;
			{
				jule::Ptr<_1e83c6d16_StructSubIdentExprModel> _94521_model = (*(_93473_d))._field_model.operator jule::Ptr<_1e83c6d16_StructSubIdentExprModel>();
				if ((!(_1ce6a9101_is_valid_model_for_ref((*(_94521_model))._field_expr)))) {
					(*(this->self))._method_push_err(_93488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*((*((*(_94521_model))._field_field))._field_decl))._field_ident)}));
					return false;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c87c9_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>>()) {
			_case_begin_1b83709c1:;
			{
				(*(this->self))._method_push_err(_93488_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
				return false;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83bebdd_UnaryExprModel>>()) {
			_case_begin_1b8370a37:;
			{
				jule::Ptr<_1e83bebdd_UnaryExprModel> _95521_unary = (*(_93473_d))._field_model.operator jule::Ptr<_1e83bebdd_UnaryExprModel>();
				if (((*(_95521_unary))._field_op._field_kind == jule::Str("*", 1))) {
					if ((!(_1ce6a9101_is_valid_model_for_ref((*(_93473_d))._field_model)))) {
						(*(this->self))._method_push_err(_93488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(jule::Str("address from * &T", 17))}));
						return false;
					}
					goto _match_end_1b837074b;
				}
				goto _case_begin_1b83707e5;
			}
		}
		else {
			_case_begin_1b83707e5:;
			{
				(*(this->self))._method_push_err(_93488_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
				return false;
			}
		}
		_match_end_1b837074b:;
	}
	if (_93452_left_mut && (!((*(_93473_d))._field_mutable))) {
		(*(this->self))._method_push_err(_93488_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
		return false;
	}
	return true;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_validity_for_init_expr(jule::Bool _97648_left_mut,jule::Bool _97664_left_ref,jule::Ptr<_1ce76121e_TypeKind>& _97710_left_kind,jule::Ptr<_1ce727449_Data>& _97737_d,_212ae5c02_Token& _97752_error_token) {
	if ((_97648_left_mut && (!((*(_97737_d))._field_mutable))) && (*((*(_97737_d))._field_kind))._method_mutable()) {
		(*(this->self))._method_push_err(_97752_error_token,jule::Str("immutable data cannot assign to mutable storage because of @ type which is mutable", 82),jule::Slice<jule::Any>({jule::Any((*((*(_97737_d))._field_kind))._method_to_str())}));
		return false;
	}
	if (_97664_left_ref) {
		if ((!((*(this->self))._method_check_ref_validity_for_init_expr(_97648_left_mut,_97737_d,_97752_error_token)))) {
			return false;
		}
	}
	jule::Ptr<_1ce70c671_AssignTypeChecker> _98817_atc = jule::new_struct<_1ce70c671_AssignTypeChecker>(new( std::nothrow ) _1ce70c671_AssignTypeChecker(this->self,jule::Ptr<_1ce76121e_TypeKind>(),_97737_d,_97752_error_token));
	return (*(_98817_atc))._method_check_validity();
}



inline jule::Bool _1ce6ab345_Sema::_method_check_type_alias_decl_kind(jule::Ptr<_1ce75e6a1_TypeAlias>& _99651_ta,jule::Trait<_1b545ddc0_Lookup> _99671_l) {
	jule::Bool _99684_ok = jule::Bool();
	jule::Ptr<_1ce7204a8_SymbolTable> _99717_old = (*(this->self))._field_file;
	__JULE_DEFER({
		(*(this->self))._method_set_current_file(_99717_old);
	});
	jule::Ptr<_1ce7204a8_SymbolTable> _100117_file = _1ce6aa993_find_file((*(this->self))._field_files,(*(_99651_ta))._field_token._field_file);
	if ((_100117_file != nullptr)) {
		(*(this->self))._method_set_current_file(_100117_file);
	}
	_99684_ok=(*(this->self))._method_check_type_with_refers((*(_99651_ta))._field_kind,_99671_l,jule::new_struct<_1ce766eb1_Referencer>(new( std::nothrow ) _1ce766eb1_Referencer((*(_99651_ta))._field_ident,jule::Any(_99651_ta),(&((*(_99651_ta))._field_refers)))));
	if ((_99684_ok && ((*((*((*(_99651_ta))._field_kind))._field_kind))._method_arr() != nullptr)) && (*((*((*((*(_99651_ta))._field_kind))._field_kind))._method_arr()))._field_auto) {
		(*(this->self))._method_push_err((*((*((*(_99651_ta))._field_kind))._field_decl))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_99684_ok=false;
	}
	return _99684_ok;
}



inline void _1ce6ab345_Sema::_method_check_type_alias_decl(jule::Ptr<_1ce75e6a1_TypeAlias>& _101746_ta,jule::Trait<_1b545ddc0_Lookup> _101766_l) {
	if (_212ae9255_is_ignore_ident((*(_101746_ta))._field_ident)) {
		(*(this->self))._method_push_err((*(_101746_ta))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_101746_ta,_101766_l);
}



inline void _1ce6ab345_Sema::_method_check_type_alias_decl_dup(jule::Ptr<_1ce75e6a1_TypeAlias>& _102550_ta) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_102550_ta)),(*(_102550_ta))._field_ident,(*(_102550_ta))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_102550_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_102550_ta))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_102550_ta,this->self);
}



inline jule::Bool _1ce6ab345_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _103444_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_1b838dbcb:;
		if (it != expr.end()) {
			jule::Ptr<_1ce75e6a1_TypeAlias> _1b838dca8_ta = *it;
			{
				(*(this->self))._method_check_type_alias_decl_dup(_1b838dca8_ta);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_103444_ok = false;
					return _103444_ok;
				}
			}
			_iter_next_1b838dbcb:;
			++it;
			goto _iter_begin_1b838dbcb;
		}
		_iter_end_1b838dbcb:;
	}
	_103444_ok = true;
	return _103444_ok;
}



inline void _1ce6ab345_Sema::_method_check_enum_items_dup(jule::Ptr<_1e8648917_Enum> _104639_e) {
	{
		auto &expr = (*(_104639_e))._field_items;
		auto it = expr.begin();
		_iter_begin_1b839089d:;
		if (it != expr.end()) {
			jule::Ptr<_1e86494b7_EnumItem> &_1b8390969_item = *it;
			{
				if (_212ae9255_is_ignore_ident((*(_1b8390969_item))._field_ident)) {
					(*this)._method_push_err((*(_1b8390969_item))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = (*(_104639_e))._field_items;
						auto it = expr.begin();
						_iter_begin_1b8392284:;
						if (it != expr.end()) {
							jule::Ptr<_1e86494b7_EnumItem> &_1b8392361_citem = *it;
							{
								if (_1b8390969_item == _1b8392361_citem) {
									goto _iter_end_1b8392284;
								} else if ((*(_1b8390969_item))._field_ident == (*(_1b8392361_citem))._field_ident) {
									(*this)._method_push_err((*(_1b8390969_item))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1b8390969_item))._field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_1b8392284;
								}
							}
							_iter_next_1b8392284:;
							++it;
							goto _iter_begin_1b8392284;
						}
						_iter_end_1b8392284:;
					}
				}
			}
			_iter_next_1b839089d:;
			++it;
			goto _iter_begin_1b839089d;
		}
		_iter_end_1b839089d:;
	}
}



inline void _1ce6ab345_Sema::_method_check_enum_items_str(jule::Ptr<_1e8648917_Enum>& _106445_e) {
	{
		auto &expr = (*(_106445_e))._field_items;
		auto it = expr.begin();
		_iter_begin_1b83926c4:;
		if (it != expr.end()) {
			jule::Ptr<_1e86494b7_EnumItem> _1b83944b7_item = *it;
			{
				if ((*(_1b83944b7_item))._method_auto_expr()) {
					(*(_1b83944b7_item))._field_value=jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value(jule::Ptr<_212b16162_Expr>(),jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ce4b898d_Const::_static_method_new_str((*(_1b83944b7_item))._field_ident)))));
					(*((*((*(_1b83944b7_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_1b83944b7_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_1ce727449_Data> _107425_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_1b83944b7_item))._field_value))._field_expr);
					if ((_107425_d == nullptr)) {
						goto _iter_next_1b83926c4;
					}
					if ((!((*(_107425_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_1b83944b7_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_106445_e))._field_kind))._field_kind,_107425_d,(*(_1b83944b7_item))._field_token);
					(*((*(_1b83944b7_item))._field_value))._field_data=_107425_d;
				}
			}
			_iter_next_1b83926c4:;
			++it;
			goto _iter_begin_1b83926c4;
		}
		_iter_end_1b83926c4:;
	}
}



inline void _1ce6ab345_Sema::_method_check_enum_items_int(jule::Ptr<_1e8648917_Enum>& _108945_e) {
	jule::Ptr<_1ce762330_Prim> _109013_prim = (*((*((*(_108945_e))._field_kind))._field_kind))._method_prim();
	jule::U64 _109117_max = static_cast<jule::U64>(_1ce67a06c_max((*(_109013_prim))._method_to_str()));
	{
		auto &expr = (*(_108945_e))._field_items;
		auto it = expr.begin();
		_iter_begin_1b839b5ac:;
		if (it != expr.end()) {
			jule::I64 _1b839b667_i = it - expr.begin();
			jule::Ptr<_1e86494b7_EnumItem> _1b839b854_item = *it;
			{
				if ((_109117_max == 0LLU)) {
					(*(this->self))._method_push_err((*(_1b839b854_item))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_109117_max)--;
				}
				if ((*(_1b839b854_item))._method_auto_expr()) {
					(*(_1b839b854_item))._field_value=jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value(jule::Ptr<_212b16162_Expr>(),jule::new_ptr<_1ce727449_Data>()));
					{
						
						if (_1ce6818d1_is_sig_int((*(_109013_prim))._method_to_str())) {
							_case_begin_1b839de0b:;
							{
								(*((*((*(_1b839b854_item))._field_value))._field_data))._field_constant=_1ce4b898d_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_109117_max - static_cast<jule::U64>(_109117_max - static_cast<jule::U64>(static_cast<jule::U64>(_1b839b667_i))))));
							}
						}
						else {
							_case_begin_1b839d966:;
							{
								(*((*((*(_1b839b854_item))._field_value))._field_data))._field_constant=_1ce4b898d_Const::_static_method_new_u64(static_cast<jule::U64>(_109117_max - static_cast<jule::U64>(_109117_max - static_cast<jule::U64>(static_cast<jule::U64>(_1b839b667_i)))));
							}
						}
						_match_end_1b839d911:;
					}
					(*((*((*(_1b839b854_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_1b839b854_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_1ce727449_Data> _111025_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_1b839b854_item))._field_value))._field_expr);
					if ((_111025_d == nullptr)) {
						goto _iter_next_1b839b5ac;
					}
					if ((!((*(_111025_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_1b839b854_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_108945_e))._field_kind))._field_kind,_111025_d,(*(_1b839b854_item))._field_token);
					(*((*(_1b839b854_item))._field_value))._field_data=_111025_d;
				}
			}
			_iter_next_1b839b5ac:;
			++it;
			_1b839b667_i++;
			goto _iter_begin_1b839b5ac;
		}
		_iter_end_1b839b5ac:;
	}
}



inline void _1ce6ab345_Sema::_method_check_enum_decl(jule::Ptr<_1e8648917_Enum>& _112540_e) {
	if (_212ae9255_is_ignore_ident((*(_112540_e))._field_ident)) {
		(*(this->self))._method_push_err((*(_112540_e))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_112540_e)),(*(_112540_e))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_112540_e))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_112540_e))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if (((*(_112540_e))._field_items.len() == 0LL)) {
		(*(this->self))._method_push_err((*(_112540_e))._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>({jule::Any((*(_112540_e))._field_ident)}));
	}
	(*(this->self))._method_check_enum_items_dup(_112540_e);
	if (((*(_112540_e))._field_kind != nullptr)) {
		if ((!((*(this->self))._method_check_type((*(_112540_e))._field_kind,this->self)))) {
			return;
		}
	} else {
		(*(_112540_e))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ptr<_1ce762330_Prim> _115217_t = (*((*((*(_112540_e))._field_kind))._field_kind))._method_prim();
	if ((_115217_t == nullptr)) {
		(*(this->self))._method_push_err((*(_112540_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((*(_115217_t))._method_is_str()) {
			_case_begin_1b83ac733:;
			{
				(*(this->self))._method_check_enum_items_str(_112540_e);
			}
		}
		else if (_1ce682173_is_int((*(_115217_t))._method_to_str())) {
			_case_begin_1b83ac799:;
			{
				(*(this->self))._method_check_enum_items_int(_112540_e);
			}
		}
		else {
			_case_begin_1b83ab8db:;
			{
				(*(this->self))._method_push_err((*(_112540_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b83ab853:;
	}
}



inline jule::Bool _1ce6ab345_Sema::_method_check_enum_decls(void) {
	jule::Bool _117238_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_enums;
		auto it = expr.begin();
		_iter_begin_1b83b026e:;
		if (it != expr.end()) {
			jule::Ptr<_1e8648917_Enum> _1b83b034b_e = *it;
			{
				(*(this->self))._method_check_enum_decl(_1b83b034b_e);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_117238_ok = false;
					return _117238_ok;
				}
			}
			_iter_next_1b83b026e:;
			++it;
			goto _iter_begin_1b83b026e;
		}
		_iter_end_1b83b026e:;
	}
	_117238_ok = true;
	return _117238_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_decl_generics(jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>& _118439_generics) {
	jule::Bool _118472_ok = jule::Bool();
	_118472_ok=true;
	{
		auto &expr = _118439_generics;
		auto it = expr.begin();
		_iter_begin_1b83b223d:;
		if (it != expr.end()) {
			jule::I64 _1b83b24d5_i = it - expr.begin();
			jule::Ptr<_212b1c9b5_GenericDecl> &_1b83b2727_g = *it;
			{
				if (_212ae9255_is_ignore_ident((*(_1b83b2727_g))._field_ident)) {
					(*this)._method_push_err((*(_1b83b2727_g))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_118472_ok=false;
					goto _iter_next_1b83b223d;
				}
				_julec_label_duplication_lookup:;
				{
					auto &expr = _118439_generics;
					auto it = expr.begin();
					_iter_begin_1b83b3e87:;
					if (it != expr.end()) {
						jule::I64 _1b83b400e_j = it - expr.begin();
						jule::Ptr<_212b1c9b5_GenericDecl> &_1b83b4273_ct = *it;
						{
							{
								
								if (_1b83b400e_j >= _1b83b24d5_i) {
									_case_begin_1b83b4a37:;
									{
										goto _iter_end_1b83b3e87;
									}
								}
								else if ((*(_1b83b2727_g))._field_ident == (*(_1b83b4273_ct))._field_ident) {
									_case_begin_1b83b4aae:;
									{
										(*this)._method_push_err((*(_1b83b2727_g))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1b83b2727_g))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_118472_ok=false;
										goto _iter_end_1b83b3e87;
									}
								}
								_match_end_1b83b4938:;
							}
						}
						_iter_next_1b83b3e87:;
						++it;
						_1b83b400e_j++;
						goto _iter_begin_1b83b3e87;
					}
					_iter_end_1b83b3e87:;
				}
			}
			_iter_next_1b83b223d:;
			++it;
			_1b83b24d5_i++;
			goto _iter_begin_1b83b223d;
		}
		_iter_end_1b83b223d:;
	}
	return _118472_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_fn_decl_params_dup(jule::Ptr<_1e83d4384_Fn>& _121244_f) {
	jule::Bool _121254_ok = jule::Bool();
	_121254_ok=true;
	_julec_label_check:;
	{
		auto &expr = (*(_121244_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b83b7de2:;
		if (it != expr.end()) {
			jule::I64 _1b83b7e7a_i = it - expr.begin();
			jule::Ptr<_1e83d3839_Param> &_1b83b819a_p = *it;
			{
				{
					auto &expr = (*(_121244_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_1b83b8970:;
					if (it != expr.end()) {
						jule::Ptr<_212b1c9b5_GenericDecl> &_1b83b8a08_g = *it;
						{
							if ((*(_1b83b819a_p))._field_ident == (*(_1b83b8a08_g))._field_ident) {
								_121254_ok=false;
								(*this)._method_push_err((*(_1b83b819a_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1b83b819a_p))._field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_1b83b7de2;
							}
						}
						_iter_next_1b83b8970:;
						++it;
						goto _iter_begin_1b83b8970;
					}
					_iter_end_1b83b8970:;
				}
				_julec_label_params_lookup:;
				{
					auto &expr = (*(_121244_f))._field_params;
					auto it = expr.begin();
					_iter_begin_1b83b8c28:;
					if (it != expr.end()) {
						jule::I64 _1b83b8c6c_j = it - expr.begin();
						jule::Ptr<_1e83d3839_Param> &_1b83bab2b_jp = *it;
						{
							{
								
								if (_1b83b8c6c_j >= _1b83b7e7a_i) {
									_case_begin_1b83bb401:;
									{
										goto _iter_end_1b83b8c28;
									}
								}
								else if (_212ae95da_is_anon_ident((*(_1b83b819a_p))._field_ident) || _212ae95da_is_anon_ident((*(_1b83bab2b_jp))._field_ident)) {
									_case_begin_1b83bb478:;
									{
										goto _iter_end_1b83b8c28;
									}
								}
								else if ((*(_1b83b819a_p))._field_ident == (*(_1b83bab2b_jp))._field_ident) {
									_case_begin_1b83bb500:;
									{
										_121254_ok=false;
										(*this)._method_push_err((*(_1b83b819a_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1b83b819a_p))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_1b83b7de2;
									}
								}
								_match_end_1b83bb2e1:;
							}
						}
						_iter_next_1b83b8c28:;
						++it;
						_1b83b8c6c_j++;
						goto _iter_begin_1b83b8c28;
					}
					_iter_end_1b83b8c28:;
				}
			}
			_iter_next_1b83b7de2:;
			++it;
			_1b83b7e7a_i++;
			goto _iter_begin_1b83b7de2;
		}
		_iter_end_1b83b7de2:;
	}
	return _121254_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_fn_decl_result_dup(jule::Ptr<_1e83d4384_Fn>& _124844_f) {
	jule::Bool _124854_ok = jule::Bool();
	_124854_ok=true;
	if ((*(_124844_f))._method_is_void()) {
		return _124854_ok;
	}
	{
		auto &expr = (*((*(_124844_f))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_1b83c058c:;
		if (it != expr.end()) {
			jule::I64 _1b83c05d1_i = it - expr.begin();
			_212ae5c02_Token &_1b83c0845_v = *it;
			{
				if (_212ae9255_is_ignore_ident(_1b83c0845_v._field_kind)) {
					goto _iter_next_1b83c058c;
				}
				{
					auto &expr = (*(_124844_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_1b83c15c1:;
					if (it != expr.end()) {
						jule::Ptr<_212b1c9b5_GenericDecl> &_1b83c166a_g = *it;
						{
							if (_1b83c0845_v._field_kind == (*(_1b83c166a_g))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_1b83c15c1:;
						++it;
						goto _iter_begin_1b83c15c1;
					}
					_iter_end_1b83c15c1:;
				}
				{
					auto &expr = (*(_124844_f))._field_params;
					auto it = expr.begin();
					_iter_begin_1b83c2748:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d3839_Param> &_1b83c2847_p = *it;
						{
							if (_1b83c0845_v._field_kind == (*(_1b83c2847_p))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_1b83c2748:;
						++it;
						goto _iter_begin_1b83c2748;
					}
					_iter_end_1b83c2748:;
				}
				_julec_label_itself_lookup:;
				{
					auto &expr = (*((*(_124844_f))._field_result))._field_idents;
					auto it = expr.begin();
					_iter_begin_1b83c3b01:;
					if (it != expr.end()) {
						jule::I64 _1b83c3b45_j = it - expr.begin();
						_212ae5c02_Token &_1b83c3da9_jv = *it;
						{
							{
								
								if (_1b83c3b45_j >= _1b83c05d1_i) {
									_case_begin_1b83c4629:;
									{
										goto _iter_end_1b83c3b01;
									}
								}
								else if (_1b83c3da9_jv._field_kind == _1b83c0845_v._field_kind) {
									_case_begin_1b83c46a1:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_1b83c452a:;
							}
						}
						_iter_next_1b83c3b01:;
						++it;
						_1b83c3b45_j++;
						goto _iter_begin_1b83c3b01;
					}
					_iter_end_1b83c3b01:;
				}
				goto _iter_next_1b83c058c;
				_julec_label_exist:;
				(*this)._method_push_err(_1b83c0845_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1b83c0845_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_124854_ok=false;
			}
			_iter_next_1b83c058c:;
			++it;
			_1b83c05d1_i++;
			goto _iter_begin_1b83c058c;
		}
		_iter_end_1b83c058c:;
	}
	return _124854_ok;
}



inline void _1ce6ab345_Sema::_method_check_fn_decl_types(jule::Ptr<_1e83d4384_Fn>& _129744_f) {
	jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>> _129817_generics = (*(_129744_f))._field_generics;
	if (((*(_129744_f))._field_owner != nullptr) && ((*((*(_129744_f))._field_owner))._field_generics.len() != 0LL)) {
		_129817_generics=jule::append(_129817_generics,(*((*(_129744_f))._field_owner))._field_generics);
	}
	{
		auto &expr = (*(_129744_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b83c8e36:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d3839_Param> _1b83c9002_p = *it;
			{
				if ((!((*(_1b83c9002_p))._method_is_self()))) {
					jule::Ptr<_1ce76121e_TypeKind> _130525_kind = (*(this->self))._method_build_non_generic_type_kind((*((*(_1b83c9002_p))._field_kind))._field_decl,_129817_generics);
					(*((*(_1b83c9002_p))._field_kind))._field_kind=_130525_kind;
				}
			}
			_iter_next_1b83c8e36:;
			++it;
			goto _iter_begin_1b83c8e36;
		}
		_iter_end_1b83c8e36:;
	}
	if ((!((*(_129744_f))._method_is_void()))) {
		jule::Ptr<_1ce76121e_TypeKind> _131121_kind = (*(this->self))._method_build_non_generic_type_kind((*((*((*(_129744_f))._field_result))._field_kind))._field_decl,_129817_generics);
		(*((*((*(_129744_f))._field_result))._field_kind))._field_kind=_131121_kind;
	}
}



inline void _1ce6ab345_Sema::_method_check_fn_decl_prototype(jule::Ptr<_1e83d4384_Fn>& _131848_f) {
	if ((*(_131848_f))._field_exceptional && (*(_131848_f))._field_cpp_linked) {
		(*(this->self))._method_push_err((*(_131848_f))._field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		return;
	}
	if ((*(_131848_f))._field_exceptional) {
		if ((*(_131848_f))._method_is_entry_point()) {
			(*(this->self))._method_push_err((*(_131848_f))._field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if ((*(_131848_f))._method_is_init()) {
			(*(this->self))._method_push_err((*(_131848_f))._field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		}
	}
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_131848_f))._field_generics)))) {
			_case_begin_1b83d0426:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_params_dup(_131848_f)))) {
			_case_begin_1b83d048c:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_result_dup(_131848_f)))) {
			_case_begin_1b83d0503:;
			{
				return;
			}
		}
		_match_end_1b83cd820:;
	}
	(*(this->self))._method_check_fn_decl_types(_131848_f);
}



inline void _1ce6ab345_Sema::_method_check_trait_decl_method(jule::Ptr<_1e83d4384_Fn>& _134148_f) {
	if (_212ae9255_is_ignore_ident((*(_134148_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_134148_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_fn_decl_prototype(_134148_f);
	(*(_134148_f))._field_sema=this->self;
}



inline void _1ce6ab345_Sema::_method_check_trait_decl_methods(jule::Ptr<_1e85a7865_Trait>& _135049_t) {
	{
		auto &expr = (*(_135049_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b83d4cee:;
		if (it != expr.end()) {
			jule::I64 _1b83d4dba_i = it - expr.begin();
			jule::Ptr<_1e83d4384_Fn> _1b83d50a7_f = *it;
			{
				(*(this->self))._method_check_trait_decl_method(_1b83d50a7_f);
				(*(_135049_t))._field_mutable=(*(_135049_t))._field_mutable || (*((*(_1b83d50a7_f))._field_params[0LL]))._field_mutable;
				if (((*(this->self))._field_errors.len() > 0LL)) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto &expr = (*(_135049_t))._field_methods;
					auto it = expr.begin();
					_iter_begin_1b83d71ca:;
					if (it != expr.end()) {
						jule::I64 _1b83d72c9_j = it - expr.begin();
						jule::Ptr<_1e83d4384_Fn> _1b83d7472_jf = *it;
						{
							{
								
								if (_1b83d72c9_j >= _1b83d4dba_i) {
									_case_begin_1b83d7be2:;
									{
										goto _iter_end_1b83d71ca;
									}
								}
								else if ((*(_1b83d50a7_f))._field_ident == (*(_1b83d7472_jf))._field_ident) {
									_case_begin_1b83d7c69:;
									{
										(*(this->self))._method_push_err((*(_1b83d50a7_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1b83d50a7_f))._field_ident)}));
										(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_1b83d71ca;
									}
								}
								_match_end_1b83d7ae3:;
							}
						}
						_iter_next_1b83d71ca:;
						++it;
						_1b83d72c9_j++;
						goto _iter_begin_1b83d71ca;
					}
					_iter_end_1b83d71ca:;
				}
			}
			_iter_next_1b83d4cee:;
			++it;
			_1b83d4dba_i++;
			goto _iter_begin_1b83d4cee;
		}
		_iter_end_1b83d4cee:;
	}
}



inline void _1ce6ab345_Sema::_method_check_trait_decl(jule::Ptr<_1e85a7865_Trait>& _138241_t) {
	if (_212ae9255_is_ignore_ident((*(_138241_t))._field_ident)) {
		(*(this->self))._method_push_err((*(_138241_t))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_138241_t)),(*(_138241_t))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_138241_t))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_138241_t))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_trait_decl_methods(_138241_t);
}



inline jule::Bool _1ce6ab345_Sema::_method_check_trait_decls(void) {
	jule::Bool _139439_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_traits;
		auto it = expr.begin();
		_iter_begin_1b83de37a:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> _1b83de457_t = *it;
			{
				(*(this->self))._method_check_trait_decl(_1b83de457_t);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_139439_ok = false;
					return _139439_ok;
				}
			}
			_iter_next_1b83de37a:;
			++it;
			goto _iter_begin_1b83de37a;
		}
		_iter_end_1b83de37a:;
	}
	_139439_ok = true;
	return _139439_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_trait_impl_methods(jule::Ptr<_1e85a7865_Trait>& _140648_base,jule::Ptr<_1e8648e34_Impl>& _140663_ipl) {
	jule::Bool _140677_ok = jule::Bool();
	_140677_ok=true;
	{
		auto &expr = (*(_140663_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b83e19ed:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> &_1b83e1aa8_f = *it;
			{
				if (((*(_140648_base))._method_find_method((*(_1b83e1aa8_f))._field_ident) == nullptr)) {
					(*this)._method_push_err((*(_1b83e1aa8_f))._field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>({jule::Any((*(_140648_base))._field_ident),jule::Any((*(_1b83e1aa8_f))._field_ident)}));
					_140677_ok=false;
				}
			}
			_iter_next_1b83e19ed:;
			++it;
			goto _iter_begin_1b83e19ed;
		}
		_iter_end_1b83e19ed:;
	}
	return _140677_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_impl_to_struct(jule::Ptr<_1e83b1718_Struct>& _141739_dest,jule::Ptr<_1e8648e34_Impl>& _141759_ipl) {
	jule::Bool _141773_ok = jule::Bool();
	_141773_ok=true;
	{
		auto &expr = (*(_141759_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b83e4b22:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b83e4bcc_f = *it;
			{
				if (((*(_141739_dest))._method_find_method((*(_1b83e4bcc_f))._field_ident,(*(_1b83e4bcc_f))._field_statically) != nullptr) || ((*(_141739_dest))._method_find_field((*(_1b83e4bcc_f))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_1b83e4bcc_f))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_141739_dest))._field_ident),jule::Any((*(_1b83e4bcc_f))._field_ident)}));
					_141773_ok=false;
					goto _iter_next_1b83e4b22;
				}
				if (((*(_141739_dest))._field_generics.len() > 0LL) && ((*(_1b83e4bcc_f))._field_generics.len() > 0LL)) {
					{
						auto &expr = (*(_1b83e4bcc_f))._field_generics;
						auto it = expr.begin();
						_iter_begin_1b83e7c68:;
						if (it != expr.end()) {
							jule::Ptr<_212b1c9b5_GenericDecl> _1b83e7d01_fg = *it;
							{
								{
									auto &expr = (*(_141739_dest))._field_generics;
									auto it = expr.begin();
									_iter_begin_1b83e8560:;
									if (it != expr.end()) {
										jule::Ptr<_212b1c9b5_GenericDecl> _1b83e85e8_dg = *it;
										{
											if ((*(_1b83e7d01_fg))._field_ident == (*(_1b83e85e8_dg))._field_ident) {
												(*(this->self))._method_push_err((*(_1b83e7d01_fg))._field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_141773_ok=false;
											}
										}
										_iter_next_1b83e8560:;
										++it;
										goto _iter_begin_1b83e8560;
									}
									_iter_end_1b83e8560:;
								}
							}
							_iter_next_1b83e7c68:;
							++it;
							goto _iter_begin_1b83e7c68;
						}
						_iter_end_1b83e7c68:;
					}
				}
				(*(this->self))._method_check_directives((*(_1b83e4bcc_f))._field_directives,jule::Any(_1b83e4bcc_f));
				(*(_1b83e4bcc_f))._field_sema=this->self;
				(*(_1b83e4bcc_f))._field_owner=_141739_dest;
				(*(_141739_dest))._field_methods = jule::alloc_for_append((*(_141739_dest))._field_methods,1);(*(_141739_dest))._field_methods.__push(_1b83e4bcc_f);
			}
			_iter_next_1b83e4b22:;
			++it;
			goto _iter_begin_1b83e4b22;
		}
		_iter_end_1b83e4b22:;
	}
	{
		auto &expr = (*(_141759_ipl))._field_statics;
		auto it = expr.begin();
		_iter_begin_1b83e468d:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b83e4d20_v = *it;
			{
				
				if (((*(_141739_dest))._method_find_method((*(_1b83e4d20_v))._field_ident,true) != nullptr) || ((*(_141739_dest))._method_find_static((*(_1b83e4d20_v))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_1b83e4d20_v))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_141739_dest))._field_ident),jule::Any((*(_1b83e4d20_v))._field_ident)}));
					_141773_ok=false;
					goto _iter_next_1b83e468d;
				}
				(*(this->self))._method_check_var_decl(_1b83e4d20_v,this->self);
				(*(this->self))._method_check_type_var(_1b83e4d20_v,this->self);
				(*(_141739_dest))._field_statics = jule::alloc_for_append((*(_141739_dest))._field_statics,1);(*(_141739_dest))._field_statics.__push(_1b83e4d20_v);
			}
			_iter_next_1b83e468d:;
			++it;
			goto _iter_begin_1b83e468d;
		}
		_iter_end_1b83e468d:;
	}
	return _141773_ok;
}



inline void _1ce6ab345_Sema::_method_impl_trait(jule::Ptr<_1e8648e34_Impl>& _146235_decl) {
	jule::Ptr<_1ce76121e_TypeKind> _146317_base_t = (*(this->self))._method_select_type((*(_146235_decl))._field_base);
	if ((_146317_base_t == nullptr)) {
		return;
	}
	jule::Ptr<_1e85a7865_Trait> _146717_base = (*(_146317_base_t))._method_trt();
	if ((_146717_base == nullptr)) {
		(*(this->self))._method_push_err((*((*(_146235_decl))._field_base))._field_token,jule::Str("invalid base type for impl: @", 29),jule::Slice<jule::Any>({jule::Any((*(_146317_base_t))._method_to_str())}));
		(*(this->self))._method_push_suggestion(jule::Str("expected trait, use a trait", 27),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ce76121e_TypeKind> _147417_dest_t = (*(this->self))._method_select_type((*(_146235_decl))._field_dest);
	if ((_147417_dest_t == nullptr)) {
		return;
	}
	jule::Ptr<_1e83b84bc_StructIns> _147817_dest_s = (*(_147417_dest_t))._method_strct();
	if ((_147817_dest_s == nullptr)) {
		(*(this->self))._method_push_err((*((*(_146235_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl: @", 36),jule::Slice<jule::Any>({jule::Any((*(_147417_dest_t))._method_to_str())}));
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1e83b1718_Struct> _148517_dest = (*(_147817_dest_s))._field_decl;
	if ((*((*(_148517_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_146235_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	(*(_146717_base))._field_implemented = jule::alloc_for_append((*(_146717_base))._field_implemented,1);(*(_146717_base))._field_implemented.__push(_148517_dest);
	(*(_148517_dest))._field_implements = jule::alloc_for_append((*(_148517_dest))._field_implements,1);(*(_148517_dest))._field_implements.__push(_146717_base);
	if (((*(_146235_decl))._field_statics.len() > 0LL)) {
		(*(this->self))._method_push_err((*((*(_146235_decl))._field_statics[0LL]))._field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	}
	{
		
		if ((!((*(this->self))._method_check_trait_impl_methods(_146717_base,_146235_decl)))) {
			_case_begin_1b8409186:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_impl_to_struct(_148517_dest,_146235_decl)))) {
			_case_begin_1b840942d:;
			{
				return;
			}
		}
		_match_end_1b840600c:;
	}
}



inline void _1ce6ab345_Sema::_method_impl_struct(jule::Ptr<_1e8648e34_Impl>& _150536_decl) {
	jule::Ptr<_1ce76121e_TypeKind> _150617_dest_t = (*(this->self))._method_select_type((*(_150536_decl))._field_dest);
	if ((_150617_dest_t == nullptr)) {
		return;
	}
	jule::Ptr<_1e83b84bc_StructIns> _151017_dest_s = (*(_150617_dest_t))._method_strct();
	if ((_151017_dest_s == nullptr)) {
		(*(this->self))._method_push_err((*((*(_150536_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl: @", 36),jule::Slice<jule::Any>({jule::Any((*(_150617_dest_t))._method_to_str())}));
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1e83b1718_Struct> _151717_dest = (*(_151017_dest_s))._field_decl;
	if ((*((*(_151717_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_150536_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((!((*(this->self))._method_impl_to_struct(_151717_dest,_150536_decl)))) {
			_case_begin_1b840b661:;
			{
				return;
			}
		}
		_match_end_1b840dd6c:;
	}
}



inline void _1ce6ab345_Sema::_method_impl_impl(jule::Ptr<_1e8648e34_Impl>& _153034_decl) {
	{
		
		if ((*(_153034_decl))._method_is_trait_impl()) {
			_case_begin_1b8411688:;
			{
				(*(this->self))._method_impl_trait(_153034_decl);
			}
		}
		else if ((*(_153034_decl))._method_is_struct_impl()) {
			_case_begin_1b8411710:;
			{
				(*(this->self))._method_impl_struct(_153034_decl);
			}
		}
		_match_end_1b8411589:;
	}
}



inline void _1ce6ab345_Sema::_method_check_var_decl(jule::Ptr<_1ce6cecb4_Var>& _153939_decl,jule::Trait<_1b545ddc0_Lookup> _153955_l) {
	if (_212ae9255_is_ignore_ident((*(_153939_decl))._field_ident)) {
		(*(this->self))._method_push_err((*(_153939_decl))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	if ((*(_153939_decl))._method_is_type_inferred()) {
		if ((!((*(_153939_decl))._method_is_initialized()))) {
			(*(this->self))._method_push_err((*(_153939_decl))._field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_check_type((*(_153939_decl))._field_kind,_153955_l);
	}
	if ((*(_153939_decl))._field_constant && (*(_153939_decl))._field_reference) {
		(*(this->self))._method_push_err((*(_153939_decl))._field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	}
	if ((!((*(_153939_decl))._method_is_initialized()))) {
		if ((*(_153939_decl))._field_constant) {
			(*(this->self))._method_push_err((*(_153939_decl))._field_token,jule::Str("missing expression for constant variable initialization", 55),jule::Slice<jule::Any>());
		}
		if ((*(_153939_decl))._field_statically) {
			(*(this->self))._method_push_err((*(_153939_decl))._field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		}
		if ((*(_153939_decl))._field_reference) {
			(*(this->self))._method_push_err((*(_153939_decl))._field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		}
	}
}



inline void _1ce6ab345_Sema::_method_check_global_var_decl(jule::Ptr<_1ce6cecb4_Var>& _157346_decl) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_157346_decl)),(*(_157346_decl))._field_ident,(*(_157346_decl))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_157346_decl))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_157346_decl))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_157346_decl))._field_cpp_linked && (*(_157346_decl))._field_constant) {
		(*(this->self))._method_push_err((*(_157346_decl))._field_token,jule::Str("cpp linked variables cannot be constant", 39),jule::Slice<jule::Any>());
	}
	if (((!((*(_157346_decl))._field_cpp_linked)) && (!((*(_157346_decl))._field_constant))) && (!((*(_157346_decl))._field_statically))) {
		(*(this->self))._method_push_err((*(_157346_decl))._field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_157346_decl))._field_directives,jule::Any(_157346_decl));
	(*(this->self))._method_check_var_decl(_157346_decl,this->self);
}



inline jule::Bool _1ce6ab345_Sema::_method_check_global_decls(void) {
	jule::Bool _159240_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_1b8420ed3:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b84210b0_decl = *it;
			{
				(*(this->self))._method_check_global_var_decl(_1b84210b0_decl);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_159240_ok = false;
					return _159240_ok;
				}
			}
			_iter_next_1b8420ed3:;
			++it;
			goto _iter_begin_1b8420ed3;
		}
		_iter_end_1b8420ed3:;
	}
	_159240_ok = true;
	return _159240_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_trait_impl(jule::Ptr<_1e83b1718_Struct>& _160448_strct,jule::Ptr<_1e85a7865_Trait>& _160469_trt) {
	jule::Bool _160484_ok = jule::Bool();
	{
		auto &expr = (*(_160469_trt))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b842347a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8423513_tf = *it;
			{
				jule::Bool _160621_exist = false;
				jule::Ptr<_1e83d4384_Fn> _160721_sf = (*(_160448_strct))._method_find_method((*(_1b8423513_tf))._field_ident,(*(_1b8423513_tf))._field_statically);
				jule::Ptr<_1e83d630e_FnIns> _160817_tf_k = (*(this->self))._method_get_trait_check_fn_kind(_1b8423513_tf);
				if ((_160721_sf != nullptr)) {
					jule::Ptr<_1e83d630e_FnIns> _161025_sf_k = (*(this->self))._method_get_trait_check_fn_kind(_160721_sf);
					_160621_exist=(((*((*(_160817_tf_k))._field_decl))._field_public == (*((*(_161025_sf_k))._field_decl))._field_public) && ((*((*(_160817_tf_k))._field_decl))._field_ident == (*((*(_161025_sf_k))._field_decl))._field_ident)) && (*(_160817_tf_k))._method_equals(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_161025_sf_k)));
				}
				if (_160621_exist) {
					jule::Ptr<_2129e3902_Directive> _161821_d = _1ce72a947_find_directive((*(_160721_sf))._field_directives,jule::Str("deprecated", 10));
					if ((_161821_d != nullptr)) {
						(*(this->self))._method_push_err((*(_161821_d))._field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					}
					_160484_ok=false;
				} else {
					
					jule::Str _162525_s = (*(_160817_tf_k))._method_get_kind_str(true);
					if ((*(_1b8423513_tf))._field_public) {
						(_162525_s).buffer.insert(0, (jule::Str("pub ", 4)));
					}
					(*(this->self))._method_push_err((*(_160448_strct))._field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>({jule::Any((*(_160469_trt))._field_ident),jule::Any(_162525_s)}));
					_160484_ok=false;
				}
			}
			_iter_next_1b842347a:;
			++it;
			goto _iter_begin_1b842347a;
		}
		_iter_end_1b842347a:;
	}
	return _160484_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_impls(jule::Ptr<_1e83b1718_Struct>& _163643_s) {
	jule::Bool _163657_ok = jule::Bool();
	_163657_ok=true;
	{
		auto &expr = (*(_163643_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_1b842bb8c:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> _1b842bc7a_trt = *it;
			{
				_163657_ok=(*(this->self))._method_check_struct_trait_impl(_163643_s,_1b842bc7a_trt) && _163657_ok;
			}
			_iter_next_1b842bb8c:;
			++it;
			goto _iter_begin_1b842bb8c;
		}
		_iter_end_1b842bb8c:;
	}
	return _163657_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_fields(jule::Ptr<_1e83b1718_Struct>& _164444_st) {
	jule::Bool _164459_ok = jule::Bool();
	_164459_ok=true;
	jule::Ptr<_1ce767731_TypeChecker> _164717_tc = jule::new_struct<_1ce767731_TypeChecker>(new( std::nothrow ) _1ce767731_TypeChecker(this->self,this->self,jule::new_struct<_1ce766eb1_Referencer>(new( std::nothrow ) _1ce766eb1_Referencer((*(_164444_st))._field_ident,jule::Any(_164444_st),nullptr)),_212ae5c02_Token(),(*(_164444_st))._field_generics,jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool()));
	jule::I64 _165713_n = (*(_164444_st))._field_instances.len();
	{
		auto &expr = (*(_164444_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_1b842ea91:;
		if (it != expr.end()) {
			jule::Ptr<_1e82e47a0_Field> _1b842eb3a_f = *it;
			{
				(*(_1b842eb3a_f))._field_owner=_164444_st;
				(*((*(_1b842eb3a_f))._field_kind))._field_kind=(*(_164717_tc))._method_check_decl((*((*(_1b842eb3a_f))._field_kind))._field_decl);
				_164459_ok=((*((*(_1b842eb3a_f))._field_kind))._field_kind != nullptr) && _164459_ok;
				{
					auto &expr = (*(_164444_st))._field_fields;
					auto it = expr.begin();
					_iter_begin_1b843193e:;
					if (it != expr.end()) {
						jule::Ptr<_1e82e47a0_Field> _1b8431a4e_cf = *it;
						{
							if (_1b842eb3a_f == _1b8431a4e_cf) {
								goto _iter_end_1b843193e;
							} else if ((*(_1b842eb3a_f))._field_ident == (*(_1b8431a4e_cf))._field_ident) {
								(*(this->self))._method_push_err((*(_1b842eb3a_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1b842eb3a_f))._field_ident)}));
								(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_164459_ok=false;
							}
						}
						_iter_next_1b843193e:;
						++it;
						goto _iter_begin_1b843193e;
					}
					_iter_end_1b843193e:;
				}
			}
			_iter_next_1b842ea91:;
			++it;
			goto _iter_begin_1b842ea91;
		}
		_iter_end_1b842ea91:;
	}
	if (_164459_ok && (_165713_n != static_cast<jule::I64>((*(_164444_st))._field_instances.len()))) {
		(*(_164717_tc))._field_referencer=nullptr;
		(*(_164444_st))._field_instances=(*(_164444_st))._field_instances.slice(0LL,_165713_n);
		{
			auto &expr = (*(_164444_st))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b843416c:;
			if (it != expr.end()) {
				jule::Ptr<_1e82e47a0_Field> _1b84345bd_f = *it;
				{
					(*((*(_1b84345bd_f))._field_kind))._field_kind=(*(_164717_tc))._method_check_decl((*((*(_1b84345bd_f))._field_kind))._field_decl);
				}
				_iter_next_1b843416c:;
				++it;
				goto _iter_begin_1b843416c;
			}
			_iter_end_1b843416c:;
		}
	}
	return _164459_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_decl_methods(jule::Ptr<_1e83b1718_Struct>& _168650_s) {
	jule::Bool _168664_ok = jule::Bool();
	{
		auto &expr = (*(_168650_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b843667a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8436735_m = *it;
			{
				(*(this->self))._method_check_fn_decl_types(_1b8436735_m);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_168664_ok = false;
					return _168664_ok;
				}
				{
					auto &_match_expr{ (*(_1b8436735_m))._field_ident };
					
					if (_match_expr == jule::Str("eq", 2)) {
						_case_begin_1b8437ba9:;
						{
							(*(_168650_s))._field_operators._field_eq=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("gt", 2)) {
						_case_begin_1b8437c20:;
						{
							(*(_168650_s))._field_operators._field_gt=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("gt_eq", 5)) {
						_case_begin_1b8437ea6:;
						{
							(*(_168650_s))._field_operators._field_gt_eq=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("lt", 2)) {
						_case_begin_1b843801c:;
						{
							(*(_168650_s))._field_operators._field_lt=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("lt_eq", 5)) {
						_case_begin_1b8438083:;
						{
							(*(_168650_s))._field_operators._field_lt_eq=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("shl", 3)) {
						_case_begin_1b84380e9:;
						{
							(*(_168650_s))._field_operators._field_shl=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("shr", 3)) {
						_case_begin_1b8438171:;
						{
							(*(_168650_s))._field_operators._field_shr=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("add", 3)) {
						_case_begin_1b84381e8:;
						{
							(*(_168650_s))._field_operators._field_add=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("sub", 3)) {
						_case_begin_1b8438270:;
						{
							(*(_168650_s))._field_operators._field_sub=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("div", 3)) {
						_case_begin_1b84382e7:;
						{
							(*(_168650_s))._field_operators._field_div=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("mul", 3)) {
						_case_begin_1b843836e:;
						{
							(*(_168650_s))._field_operators._field_mul=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("mod", 3)) {
						_case_begin_1b84383e6:;
						{
							(*(_168650_s))._field_operators._field_mod=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_and", 7)) {
						_case_begin_1b843846d:;
						{
							(*(_168650_s))._field_operators._field_bit_and=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_or", 6)) {
						_case_begin_1b84384e5:;
						{
							(*(_168650_s))._field_operators._field_bit_or=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_xor", 7)) {
						_case_begin_1b843856c:;
						{
							(*(_168650_s))._field_operators._field_bit_xor=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("neg", 3)) {
						_case_begin_1b84385e4:;
						{
							(*(_168650_s))._field_operators._field_neg=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("pos", 3)) {
						_case_begin_1b843866b:;
						{
							(*(_168650_s))._field_operators._field_pos=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_not", 7)) {
						_case_begin_1b84386e3:;
						{
							(*(_168650_s))._field_operators._field_bit_not=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("add_assign", 10)) {
						_case_begin_1b843876a:;
						{
							(*(_168650_s))._field_operators._field_add_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("sub_assign", 10)) {
						_case_begin_1b84387e2:;
						{
							(*(_168650_s))._field_operators._field_sub_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("div_assign", 10)) {
						_case_begin_1b8438869:;
						{
							(*(_168650_s))._field_operators._field_div_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("mul_assign", 10)) {
						_case_begin_1b84388e1:;
						{
							(*(_168650_s))._field_operators._field_mul_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("mod_assign", 10)) {
						_case_begin_1b8438968:;
						{
							(*(_168650_s))._field_operators._field_mod_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("shl_assign", 10)) {
						_case_begin_1b84389e0:;
						{
							(*(_168650_s))._field_operators._field_shl_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("shr_assign", 10)) {
						_case_begin_1b8438a67:;
						{
							(*(_168650_s))._field_operators._field_shr_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_or_assign", 13)) {
						_case_begin_1b8438ade:;
						{
							(*(_168650_s))._field_operators._field_bit_or_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_and_assign", 14)) {
						_case_begin_1b8438b66:;
						{
							(*(_168650_s))._field_operators._field_bit_and_assign=_1b8436735_m;
						}
					}
					else if (_match_expr == jule::Str("bit_xor_assign", 14)) {
						_case_begin_1b8438bdd:;
						{
							(*(_168650_s))._field_operators._field_bit_xor_assign=_1b8436735_m;
						}
					}
					_match_end_1b8437b54:;
				}
			}
			_iter_next_1b843667a:;
			++it;
			goto _iter_begin_1b843667a;
		}
		_iter_end_1b843667a:;
	}
	_168664_ok = true;
	return _168664_ok;
}



inline void _1ce6ab345_Sema::_method_check_struct_decl(jule::Ptr<_1e83b1718_Struct>& _175442_s) {
	if (_212ae9255_is_ignore_ident((*(_175442_s))._field_ident)) {
		(*(this->self))._method_push_err((*(_175442_s))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_175442_s)),(*(_175442_s))._field_ident,(*(_175442_s))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_175442_s))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_175442_s))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_175442_s))._field_directives,jule::Any(_175442_s));
	(*(_175442_s))._field_sema=this->self;
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_175442_s))._field_generics)))) {
			_case_begin_1b8447911:;
		}
		else if ((!((*(this->self))._method_check_struct_fields(_175442_s)))) {
			_case_begin_1b8447977:;
		}
		else if ((!((*(this->self))._method_check_struct_decl_methods(_175442_s)))) {
			_case_begin_1b84479dd:;
		}
		else if ((!((*(this->self))._method_check_struct_impls(_175442_s)))) {
			_case_begin_1b8447a65:;
		}
		_match_end_1b84445de:;
	}
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_decls(void) {
	jule::Bool _177440_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_1b844a21b:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b844a2e8_s = *it;
			{
				(*(this->self))._method_check_struct_decl(_1b844a2e8_s);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_177440_ok = false;
					return _177440_ok;
				}
			}
			_iter_next_1b844a21b:;
			++it;
			goto _iter_begin_1b844a21b;
		}
		_iter_end_1b844a21b:;
	}
	_177440_ok = true;
	return _177440_ok;
}



inline void _1ce6ab345_Sema::_method_check_fn_decl(jule::Ptr<_1e83d4384_Fn>& _178738_f) {
	if (_212ae9255_is_ignore_ident((*(_178738_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_178738_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_178738_f))._field_directives,jule::Any(_178738_f));
	(*(_178738_f))._field_sema=this->self;
	(*(this->self))._method_check_fn_decl_prototype(_178738_f);
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::U64>(static_cast<jule::U64>(_178738_f)),(*(_178738_f))._field_ident,(*(_178738_f))._field_cpp_linked)) {
		if (((*(_178738_f))._field_ident == jule::Str("init", 4))) {
			jule::Ptr<_1e83d4384_Fn> _179921_init = (*(this->self))._method_find_fn(jule::Str("init", 4),false);
			if ((_179921_init != nullptr)) {
				return;
			}
		}
		(*(this->self))._method_push_err((*(_178738_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_178738_f))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _1ce6ab345_Sema::_method_check_fn_decls(void) {
	jule::Bool _181036_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b84525b9:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8452696_f = *it;
			{
				(*(this->self))._method_check_fn_decl(_1b8452696_f);
				if (((*(this->self))._field_errors.len() > 0LL)) {
					_181036_ok = false;
					return _181036_ok;
				}
			}
			_iter_next_1b84525b9:;
			++it;
			goto _iter_begin_1b84525b9;
		}
		_iter_end_1b84525b9:;
	}
	_181036_ok = true;
	return _181036_ok;
}



inline void _1ce6ab345_Sema::_method_push_cycle_error(jule::Ptr<_1e83b1718_Struct>& _182232_st1,jule::Ptr<_1e83b1718_Struct>& _182247_st2,jule::Str& _182266_message) {
	
	jule::Str _182513_refers_to = _212880739_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_182232_st1))._field_ident),jule::Any((*(_182247_st2))._field_ident)}));
	(_182266_message).buffer.insert(0, (((_211e22edb_repeat(jule::Str(" ", 1),4LL) + _182513_refers_to) + jule::Str("\n", 1))));
}



inline jule::Bool _1ce6ab345_Sema::_method_check_cross_cycle(jule::Ptr<_1e83b1718_Struct>& _182933_st1,jule::Ptr<_1e83b1718_Struct>& _182948_st2,jule::Str& _182967_message) {
	{
		auto &expr = (*(_182948_st2))._field_uses;
		auto it = expr.begin();
		_iter_begin_1b845728e:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> &_1b8457338_u = *it;
			{
				if (_1b8457338_u == _182933_st1) {
					(*this)._method_push_cycle_error(_182948_st2,_1b8457338_u,_182967_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_182933_st1,_1b8457338_u,_182967_message)))) {
					(*this)._method_push_cycle_error(_182948_st2,_1b8457338_u,_182967_message);
					return false;
				}
			}
			_iter_next_1b845728e:;
			++it;
			goto _iter_begin_1b845728e;
		}
		_iter_end_1b845728e:;
	}
	return true;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _184553_derive,jule::Ptr<_1e83b1718_Struct>& _184567_st1,jule::Ptr<_1ce76121e_TypeKind>& _184586_k) {
	jule::Bool _1845102_ok = jule::Bool();
	jule::Ptr<_1e83b1718_Struct> _184617_st2 = _1ce76682e_get_struct_from_kind(_184586_k);
	if ((_184617_st2 == nullptr)) {
		_1845102_ok = true;
		return _1845102_ok;
	}
	if (_184567_st1 == _184617_st2) {
		(*this)._method_push_err((*(_184567_st1))._field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>({jule::Any(_184553_derive),jule::Any((*(_184567_st1))._field_ident)}));
		_1845102_ok = false;
		return _1845102_ok;
	}
	jule::Str _185817_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_184567_st1,_184617_st2,_185817_message)))) {
		jule::Str _186121_err_msg = _185817_message;
		_185817_message=jule::Str();
		(*this)._method_push_cycle_error(_184567_st1,_184617_st2,_185817_message);
		_186121_err_msg=_186121_err_msg + _185817_message;
		(*this)._method_push_err((*(_184567_st1))._field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>({jule::Any(_184553_derive),jule::Any(_186121_err_msg)}));
		_1845102_ok = false;
		return _1845102_ok;
	}
	_1845102_ok = true;
	return _1845102_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_ins_derive_clone(jule::Ptr<_1e83b84bc_StructIns> _187252_st) {
	jule::Bool _187270_ok = jule::Bool();
	if ((!((*((*(_187252_st))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
		_187270_ok = true;
		return _187270_ok;
	}
	{
		auto &expr = (*(_187252_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_1b846073c:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b2cbe_FieldIns> _1b84607e7_f = *it;
			{
				if (((*(_1b84607e7_f))._field_kind == nullptr) || (!((*((*(_1b84607e7_f))._field_kind))._method_mutable()))) {
					goto _iter_next_1b846073c;
				}
				if ((!((*((*(_1b84607e7_f))._field_kind))._method_supports_cloning()))) {
					(*this)._method_push_err((*((*(_187252_st))._field_decl))._field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>({jule::Any((*((*(_1b84607e7_f))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_187270_ok = false;
					return _187270_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),(*(_187252_st))._field_decl,(*(_1b84607e7_f))._field_kind)))) {
					_187270_ok = false;
					return _187270_ok;
				}
			}
			_iter_next_1b846073c:;
			++it;
			goto _iter_begin_1b846073c;
		}
		_iter_end_1b846073c:;
	}
	_187270_ok = true;
	return _187270_ok;
}



inline jule::Bool _1ce6ab345_Sema::_method_check_struct_derive_clone(jule::Ptr<_1e83b1718_Struct>& _189549_st) {
	return (*this)._method_check_struct_ins_derive_clone((*(_189549_st))._method_instance());
}



inline jule::Bool _1ce6ab345_Sema::_method_check_file_derives(void) {
	jule::Bool _189939_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_1b8465a94:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b8465bc6_st = *it;
			{
				_189939_ok=(*this)._method_check_struct_derive_clone(_1b8465bc6_st);
				if ((!(_189939_ok))) {
					goto _iter_end_1b8465a94;
				}
			}
			_iter_next_1b8465a94:;
			++it;
			goto _iter_begin_1b8465a94;
		}
		_iter_end_1b8465a94:;
	}
	return _189939_ok;
}



inline void _1ce6ab345_Sema::_method_check_package_derives(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_1b8466bc7:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8466ce8_f = *it;
			{
				(*this)._method_set_current_file(_1b8466ce8_f);
				jule::Bool _191417_ok = (*this)._method_check_file_derives();
				if ((!(_191417_ok))) {
					return;
				}
			}
			_iter_next_1b8466bc7:;
			++it;
			goto _iter_begin_1b8466bc7;
		}
		_iter_end_1b8466bc7:;
	}
}



inline void _1ce6ab345_Sema::_method_check_package_decls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8468503:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b846858b_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b846858b_f);
				if ((!((*(this->self))._method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_1b8468503:;
			++it;
			goto _iter_begin_1b8468503;
		}
		_iter_end_1b8468503:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8468833:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b84688cc_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b84688cc_f);
				if ((!((*(this->self))._method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_1b8468833:;
			++it;
			goto _iter_begin_1b8468833;
		}
		_iter_end_1b8468833:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8469922:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b84699bb_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b84699bb_f);
				if ((!((*(this->self))._method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_1b8469922:;
			++it;
			goto _iter_begin_1b8469922;
		}
		_iter_end_1b8469922:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b846b913:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b846aa44_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b846aa44_f);
				if ((!((*(this->self))._method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_1b846b913:;
			++it;
			goto _iter_begin_1b846b913;
		}
		_iter_end_1b846b913:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b846ba01:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b846ba9a_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b846ba9a_f);
				if ((!((*(this->self))._method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_1b846ba01:;
			++it;
			goto _iter_begin_1b846ba01;
		}
		_iter_end_1b846ba01:;
	}
	(*(this->self))._method_check_package_derives();
}



inline void _1ce6ab345_Sema::_method_check_data_for_type_inference(jule::Ptr<_1ce727449_Data>& _196249_d,_212ae5c02_Token& _196260_err_token) {
	{
		
		if ((*(_196249_d))._method_is_nil()) {
			_case_begin_1b846e8e4:;
			{
				(*this)._method_push_err(_196260_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if ((*(_196249_d))._method_is_void()) {
			_case_begin_1b846e96b:;
			{
				(*this)._method_push_err(_196260_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if ((*((*(_196249_d))._field_kind))._field_variadic) {
			_case_begin_1b846e9e3:;
			{
				(*this)._method_push_err(_196260_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b846e806:;
	}
}



inline void _1ce6ab345_Sema::_method_check_var(jule::Ptr<_1ce6cecb4_Var>& _197334_v) {
	if ((*(_197334_v))._field_cpp_linked) {
		return;
	}
	if ((*(_197334_v))._method_is_type_inferred()) {
		(*(_197334_v))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),(*((*((*(_197334_v))._field_value))._field_data))._field_kind));
		(*(this->self))._method_check_data_for_type_inference((*((*(_197334_v))._field_value))._field_data,(*((*((*(_197334_v))._field_value))._field_expr))._field_token);
	} else {
		jule::Ptr<_1ce764244_Arr> _198421_arr = (*((*((*(_197334_v))._field_kind))._field_kind))._method_arr();
		if ((_198421_arr != nullptr)) {
			if ((*(_198421_arr))._field_auto) {
				jule::Ptr<_1ce764244_Arr> _198725_data_arr = (*((*((*((*(_197334_v))._field_value))._field_data))._field_kind))._method_arr();
				if ((_198725_data_arr != nullptr)) {
					(*(_198421_arr))._field_n=(*(_198725_data_arr))._field_n;
				}
			}
		}
		(*(this->self))._method_check_assign_type((*(_197334_v))._field_reference,(*((*(_197334_v))._field_kind))._field_kind,(*((*(_197334_v))._field_value))._field_data,(*((*((*(_197334_v))._field_value))._field_expr))._field_token);
	}
	if ((*(_197334_v))._field_reference && (!(_1ce765850_is_valid_for_ref((*((*(_197334_v))._field_kind))._field_kind)))) {
		(*(this->self))._method_push_err((*(_197334_v))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*((*(_197334_v))._field_kind))._field_kind))._method_to_str())}));
	}
	(*(this->self))._method_check_validity_for_init_expr((*(_197334_v))._field_mutable,(*(_197334_v))._field_reference,(*((*(_197334_v))._field_kind))._field_kind,(*((*(_197334_v))._field_value))._field_data,(*((*((*(_197334_v))._field_value))._field_expr))._field_token);
	if ((*(_197334_v))._field_constant) {
		if ((!((*((*((*(_197334_v))._field_value))._field_data))._method_is_const()))) {
			(*(this->self))._method_push_err((*((*((*(_197334_v))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		}
	} else {
		(*((*((*(_197334_v))._field_value))._field_data))._field_constant=nullptr;
	}
	if (((*((*((*(_197334_v))._field_kind))._field_kind))._method_tup() != nullptr)) {
		(*((*(_197334_v))._field_kind))._field_kind=nullptr;
	}
}



inline void _1ce6ab345_Sema::_method_check_type_var(jule::Ptr<_1ce6cecb4_Var>& _202239_decl,jule::Trait<_1b545ddc0_Lookup> _202255_l) {
	if ((*(_202239_decl))._field_cpp_linked || (!((*(_202239_decl))._method_is_initialized()))) {
		return;
	}
	jule::Ptr<_1ce728879_Eval> _202717_eval = ((((*(_202239_decl))._field_kind != nullptr)) ? ((*(this->self))._method_evalpd(_202255_l,(*((*(_202239_decl))._field_kind))._field_kind,_202239_decl)) : ((*(this->self))._method_evalpd(_202255_l,nullptr,_202239_decl)));
	(*(_202717_eval))._field_immutable=(!((*(_202239_decl))._field_mutable));
	(*((*(_202239_decl))._field_value))._field_data=(*(_202717_eval))._method_eval_expr((*((*(_202239_decl))._field_value))._field_expr);
	if (((*((*(_202239_decl))._field_value))._field_data == nullptr)) {
		return;
	}
	(*(this->self))._method_check_var(_202239_decl);
}



inline void _1ce6ab345_Sema::_method_check_global_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_1b8482c15:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b8482ce2_decl = *it;
			{
				if (((*(_1b8482ce2_decl))._method_is_initialized() && ((*((*(_1b8482ce2_decl))._field_value))._field_data == nullptr)) || ((*(_1b8482ce2_decl))._method_is_type_inferred() && ((*((*(_1b8482ce2_decl))._field_kind))._field_kind == nullptr))) {
					(*(this->self))._method_check_type_var(_1b8482ce2_decl,this->self);
				}
			}
			_iter_next_1b8482c15:;
			++it;
			goto _iter_begin_1b8482c15;
		}
		_iter_end_1b8482c15:;
	}
}



inline jule::Ptr<_1e83d630e_FnIns> _1ce6ab345_Sema::_method_ready_to_check_fn(jule::Ptr<_1e83b84bc_StructIns>& _205342_s,jule::Ptr<_1e83d4384_Fn>& _205362_f) {
	jule::Ptr<_1e83d630e_FnIns> _205417_ins = (*(_205362_f))._method_instance();
	if (((*(_205362_f))._field_instances.len() != 0LL)) {
		return _205417_ins;
	}
	(*(_205417_ins))._field_owner=_205342_s;
	(*(_205362_f))._method_append_instance(_205417_ins);
	(*(this->self))._method_reload_fn_ins_types(_205417_ins);
	(*(_205417_ins))._field_reloaded=true;
	return _205417_ins;
}



inline void _1ce6ab345_Sema::_method_check_type_method(jule::Ptr<_1e83b84bc_StructIns>& _206542_s,jule::Ptr<_1e83d4384_Fn>& _206562_f) {
	if ((*(_206562_f))._field_cpp_linked) {
		return;
	}
	if (((*(_206562_f))._field_generics.len() > 0LL)) {
		return;
	}
	(*(this->self))._method_ready_to_check_fn(_206542_s,_206562_f);
	{
		auto &expr = (*(_206562_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b8489854:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d630e_FnIns> _1b8489931_ins = *it;
			{
				if (((*((*(_1b8489931_ins))._field_scope))._field_stmts.len() > 0LL)) {
					goto _iter_next_1b8489854;
				}
				(*(this->self))._method_check_fn_ins(_1b8489931_ins);
			}
			_iter_next_1b8489854:;
			++it;
			goto _iter_begin_1b8489854;
		}
		_iter_end_1b8489854:;
	}
}



inline void _1ce6ab345_Sema::_method_check_field_defaults(jule::Ptr<_1e83b84bc_StructIns>& _208545_ins) {
	jule::Ptr<_1ce728879_Eval> _208617_eval = (*(this->self))._method_eval(this->self);
	{
		auto &expr = (*(_208545_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_1b848c00a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b2cbe_FieldIns> _1b848c0a4_f = *it;
			{
				if (((*((*(_1b848c0a4_f))._field_decl))._field_default == nullptr)) {
					goto _iter_next_1b848c00a;
				}
				(*(_208617_eval))._field_prefix=(*(_1b848c0a4_f))._field_kind;
				(*(_208617_eval))._field_field=_1b848c0a4_f;
				(*(_1b848c0a4_f))._field_default=(*(_208617_eval))._method_eval_expr((*((*(_1b848c0a4_f))._field_decl))._field_default);
				if (((*(_1b848c0a4_f))._field_default == nullptr)) {
					goto _iter_next_1b848c00a;
				}
				
				(*(this->self))._method_check_assign_type(false,(*(_1b848c0a4_f))._field_kind,(*(_1b848c0a4_f))._field_default,(*((*((*(_1b848c0a4_f))._field_decl))._field_default))._field_token);
			}
			_iter_next_1b848c00a:;
			++it;
			goto _iter_begin_1b848c00a;
		}
		_iter_end_1b848c00a:;
	}
}



inline jule::Ptr<_1e83d630e_FnIns> _1ce6ab345_Sema::_method_check_struct_ins_op(jule::Ptr<_1e83b84bc_StructIns>& _210744_s,jule::Ptr<_1e83d4384_Fn>& _210764_f,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)> _210772_p) {
	if ((_210764_f == nullptr) || ((*(_210764_f))._field_generics.len() > 0LL)) {
		return nullptr;
	}
	jule::Ptr<_1e83d630e_FnIns> _211117_ins = (*(this->self))._method_ready_to_check_fn(_210744_s,_210764_f);
	return ((_210772_p(_210764_f)) ? (_211117_ins) : (nullptr));
}



inline void _1ce6ab345_Sema::_method_check_struct_ins(jule::Ptr<_1e83b84bc_StructIns>& _211541_s) {
	(*(this->self))._method_check_field_defaults(_211541_s);
	{
		auto &expr = (*(_211541_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b8494540:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b84945ea_f = *it;
			{
				(*(this->self))._method_check_type_method(_211541_s,_1b84945ea_f);
			}
			_iter_next_1b8494540:;
			++it;
			goto _iter_begin_1b8494540;
		}
		_iter_end_1b8494540:;
	}
}



inline void _1ce6ab345_Sema::_method_check_type_struct(jule::Ptr<_1e83b1718_Struct>& _212242_s) {
	if ((*(_212242_s))._field_cpp_linked) {
		return;
	}
	if (((*(_212242_s))._field_generics.len() > 0LL)) {
		return;
	}
	if (((*(_212242_s))._field_instances.len() == 0LL)) {
		jule::Ptr<_1e83b84bc_StructIns> _213321_ins = (*(_212242_s))._method_instance();
		(*(_213321_ins))._field_checked=true;
		(*(_212242_s))._method_append_instance(_213321_ins);
	}
	{
		auto &expr = (*(_212242_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b8497994:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b84bc_StructIns> _1b8497a93_ins = *it;
			{
				(*(this->self))._method_check_struct_ins(_1b8497a93_ins);
			}
			_iter_next_1b8497994:;
			++it;
			goto _iter_begin_1b8497994;
		}
		_iter_end_1b8497994:;
	}
}



inline void _1ce6ab345_Sema::_method_check_struct_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_1b8498b93:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b8498c70_s = *it;
			{
				(*(this->self))._method_check_type_struct(_1b8498c70_s);
			}
			_iter_next_1b8498b93:;
			++it;
			goto _iter_begin_1b8498b93;
		}
		_iter_end_1b8498b93:;
	}
}



inline void _1ce6ab345_Sema::_method_check_struct_ins_operators(jule::Ptr<_1e83b84bc_StructIns> _214950_s) {
	(*(_214950_s))._field_operators._field_eq=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_eq,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215078_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_eq(_215078_f);
	}));
	(*(_214950_s))._field_operators._field_gt=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_gt,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215178_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_gt(_215178_f);
	}));
	(*(_214950_s))._field_operators._field_gt_eq=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_gt_eq,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215284_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_gt_eq(_215284_f);
	}));
	(*(_214950_s))._field_operators._field_lt=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_lt,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215378_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_lt(_215378_f);
	}));
	(*(_214950_s))._field_operators._field_lt_eq=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_lt_eq,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215484_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_lt_eq(_215484_f);
	}));
	(*(_214950_s))._field_operators._field_shl=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_shl,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215580_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_shl(_215580_f);
	}));
	(*(_214950_s))._field_operators._field_shr=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_shr,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215680_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_shr(_215680_f);
	}));
	(*(_214950_s))._field_operators._field_add=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_add,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215780_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_add(_215780_f);
	}));
	(*(_214950_s))._field_operators._field_sub=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_sub,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215880_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_sub(_215880_f);
	}));
	(*(_214950_s))._field_operators._field_div=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_div,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _215980_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_div(_215980_f);
	}));
	(*(_214950_s))._field_operators._field_mul=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_mul,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216080_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_mul(_216080_f);
	}));
	(*(_214950_s))._field_operators._field_mod=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_mod,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216180_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_mod(_216180_f);
	}));
	(*(_214950_s))._field_operators._field_bit_and=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_and,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216288_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_and(_216288_f);
	}));
	(*(_214950_s))._field_operators._field_bit_or=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_or,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216386_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_or(_216386_f);
	}));
	(*(_214950_s))._field_operators._field_bit_xor=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_xor,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216488_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_xor(_216488_f);
	}));
	(*(_214950_s))._field_operators._field_neg=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_neg,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216580_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_neg(_216580_f);
	}));
	(*(_214950_s))._field_operators._field_pos=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_pos,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216680_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_pos(_216680_f);
	}));
	(*(_214950_s))._field_operators._field_bit_not=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_not,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216788_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_not(_216788_f);
	}));
	(*(_214950_s))._field_operators._field_add_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_add_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216894_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_add_assign(_216894_f);
	}));
	(*(_214950_s))._field_operators._field_sub_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_sub_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _216994_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_sub_assign(_216994_f);
	}));
	(*(_214950_s))._field_operators._field_div_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_div_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _217094_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_div_assign(_217094_f);
	}));
	(*(_214950_s))._field_operators._field_mul_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_mul_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _217194_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_mul_assign(_217194_f);
	}));
	(*(_214950_s))._field_operators._field_mod_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_mod_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _217294_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_mod_assign(_217294_f);
	}));
	(*(_214950_s))._field_operators._field_shl_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_shl_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _217394_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_shl_assign(_217394_f);
	}));
	(*(_214950_s))._field_operators._field_shr_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_shr_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _217494_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_shr_assign(_217494_f);
	}));
	(*(_214950_s))._field_operators._field_bit_or_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_or_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _2175100_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_or_assign(_2175100_f);
	}));
	(*(_214950_s))._field_operators._field_bit_and_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_and_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _2176102_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_and_assign(_2176102_f);
	}));
	(*(_214950_s))._field_operators._field_bit_xor_assign=(*(this->self))._method_check_struct_ins_op(_214950_s,(*((*(_214950_s))._field_decl))._field_operators._field_bit_xor_assign,jule::Fn<jule::Bool(jule::Ptr<_1e83d4384_Fn>)>([=](jule::Ptr<_1e83d4384_Fn> _2177102_f) mutable -> jule::Bool {
		return _1ce6d1e2b_FuncPattern::_static_method_bit_xor_assign(_2177102_f);
	}));
}



inline void _1ce6ab345_Sema::_method_check_type_struct_operators(jule::Ptr<_1e83b1718_Struct>& _218052_s) {
	if ((*(_218052_s))._field_cpp_linked) {
		return;
	}
	if (((*(_218052_s))._field_generics.len() > 0LL)) {
		return;
	}
	if (((*(_218052_s))._field_instances.len() == 0LL)) {
		jule::Ptr<_1e83b84bc_StructIns> _219121_ins = (*(_218052_s))._method_instance();
		(*(_219121_ins))._field_checked=true;
		(*(_218052_s))._method_append_instance(_219121_ins);
	}
	(*(this->self))._method_check_struct_ins_operators((*(_218052_s))._field_instances[0LL]);
}



inline void _1ce6ab345_Sema::_method_check_struct_types_operators(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_1b84dc258:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b84dc313_s = *it;
			{
				(*(this->self))._method_check_type_struct_operators(_1b84dc313_s);
			}
			_iter_next_1b84dc258:;
			++it;
			goto _iter_begin_1b84dc258;
		}
		_iter_end_1b84dc258:;
	}
}



inline void _1ce6ab345_Sema::_method_check_rets(jule::Ptr<_1e83d630e_FnIns>& _220534_f) {
	if ((*((*(_220534_f))._field_decl))._method_is_void()) {
		return;
	}
	_1ce6abd18_MissingRetChecker _220913_mrc = _1ce6abd18_MissingRetChecker::_static_method_new();
	jule::Bool _221013_ok = _220913_mrc._method_check((*(_220534_f))._field_scope);
	if ((!(_221013_ok))) {
		(*this)._method_push_err((*((*(_220534_f))._field_decl))._field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	}
}



inline void _1ce6ab345_Sema::_method_check_fn_ins_sc(jule::Ptr<_1e83d630e_FnIns>& _221639_f,jule::Ptr<_1ce6882bc_ScopeChecker>& _221655_sc) {
	if ((*((*(_221639_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _222117_vars = _1ce6a9d7c_build_ret_vars(_221639_f);
	(*((*(_221655_sc))._field_table))._field_vars=jule::append((*((*(_221655_sc))._field_table))._field_vars,_222117_vars);
	(*((*(_221655_sc))._field_table))._field_vars=jule::append((*((*(_221655_sc))._field_table))._field_vars,_1ce6aa18a_build_param_vars(_221639_f));
	(*((*(_221655_sc))._field_table))._field_type_aliases=jule::append((*((*(_221655_sc))._field_table))._field_type_aliases,_1ce6aa4dc_build_generic_type_aliases(_221639_f));
	(*(_221655_sc))._method_check((*((*(_221639_f))._field_decl))._field_scope,(*(_221639_f))._field_scope);
	if ((_222117_vars.len() > 0LL)) {
		jule::Slice<jule::Any> _223121_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*((*(_221639_f))._field_scope))._field_stmts.len() + static_cast<jule::I64>(_222117_vars.len())));
		{
			auto &expr = _222117_vars;
			auto it = expr.begin();
			_iter_begin_1b84e57e4:;
			if (it != expr.end()) {
				jule::Ptr<_1ce6cecb4_Var> _1b84e621d_v = *it;
				{
					_223121_stmts = jule::alloc_for_append(_223121_stmts,1);_223121_stmts.__push(jule::Any(_1b84e621d_v));
				}
				_iter_next_1b84e57e4:;
				++it;
				goto _iter_begin_1b84e57e4;
			}
			_iter_end_1b84e57e4:;
		}
		_223121_stmts=jule::append(_223121_stmts,(*((*(_221639_f))._field_scope))._field_stmts);
		(*((*(_221639_f))._field_scope))._field_stmts=_223121_stmts;
	}
	if ((!((*(_221655_sc))._method_stopped()))) {
		(*this)._method_check_rets(_221639_f);
	}
}



inline void _1ce6ab345_Sema::_method_check_fn_ins_caller(jule::Ptr<_1e83d630e_FnIns>& _224644_f,jule::Ptr<_212ae5c02_Token> _224659_caller) {
	if ((*((*(_224644_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Ptr<_1ce7204a8_SymbolTable> _225117_old = (*((*((*(_224644_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_224644_f))._field_decl))._field_sema))._method_set_current_file(_225117_old);
	});
	jule::Ptr<_1ce7204a8_SymbolTable> _225317_file = _1ce6aa993_find_file((*((*((*(_224644_f))._field_decl))._field_sema))._field_files,(*((*(_224644_f))._field_decl))._field_token._field_file);
	if ((_225317_file != nullptr)) {
		(*((*((*(_224644_f))._field_decl))._field_sema))._method_set_current_file(_225317_file);
	}
	jule::Ptr<_1ce6882bc_ScopeChecker> _225817_sc = _1ce6503e9_new_scope_checker((*((*(_224644_f))._field_decl))._field_sema,_224644_f);
	(*(_225817_sc))._field_called_from=_224659_caller;
	(*(this->self))._method_check_fn_ins_sc(_224644_f,_225817_sc);
	if ((*((*(_224644_f))._field_decl))._field_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*((*((*(_224644_f))._field_decl))._field_sema))._field_errors);
		(*((*((*(_224644_f))._field_decl))._field_sema))._field_errors=nullptr;
	}
}



inline void _1ce6ab345_Sema::_method_check_fn_ins(jule::Ptr<_1e83d630e_FnIns>& _226837_f) {
	(*(this->self))._method_check_fn_ins_caller(_226837_f,nullptr);
}



inline void _1ce6ab345_Sema::_method_check_type_fn(jule::Ptr<_1e83d4384_Fn>& _227238_f) {
	if ((*(_227238_f))._field_cpp_linked) {
		return;
	}
	if (((*(_227238_f))._field_generics.len() > 0LL)) {
		return;
	}
	{
		auto &expr = (*(_227238_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b850124a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d630e_FnIns> _1b8501349_ins = *it;
			{
				(*(this->self))._method_check_fn_ins(_1b8501349_ins);
			}
			_iter_next_1b850124a:;
			++it;
			goto _iter_begin_1b850124a;
		}
		_iter_end_1b850124a:;
	}
}



inline void _1ce6ab345_Sema::_method_check_test_fn(jule::Ptr<_1e83d630e_FnIns>& _228737_f) {
	if ((*((*(_228737_f))._field_decl))._field_public) {
		(*this)._method_push_err((*((*(_228737_f))._field_decl))._field_token,jule::Str("test function cannot be public", 30),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("remove \"pub\" modifier", 21),jule::Slice<jule::Any>());
		return;
	}
	if (((*(_228737_f))._field_params.len() != 1LL) || ((*(_228737_f))._field_result != nullptr)) {
		(*this)._method_push_err((*((*(_228737_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ce76286e_Sptr> _230017_sptr = (*((*((*(_228737_f))._field_params[0LL]))._field_kind))._method_sptr();
	if ((_230017_sptr == nullptr)) {
		(*this)._method_push_err((*((*(_228737_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1e83b84bc_StructIns> _230713_s = (*((*(_230017_sptr))._field_elem))._method_strct();
	if ((_230713_s == nullptr) || (!(_1ce6a1b21_is_std_package((*((*((*(_230713_s))._field_decl))._field_token._field_file))._method_path(),jule::Str("testing", 7))))) {
		(*this)._method_push_err((*((*(_228737_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
}



inline void _1ce6ab345_Sema::_method_precheck_type_fn(jule::Ptr<_1e83d4384_Fn>& _231541_f) {
	if ((*(_231541_f))._field_cpp_linked) {
		return;
	}
	if (((*(_231541_f))._field_generics.len() > 0LL)) {
		return;
	}
	if (((*(_231541_f))._field_instances.len() == 0LL)) {
		jule::Ptr<_1e83d630e_FnIns> _232621_ins = (*(_231541_f))._method_instance();
		(*(_231541_f))._field_instances = jule::alloc_for_append((*(_231541_f))._field_instances,1);(*(_231541_f))._field_instances.__push(_232621_ins);
		(*(this->self))._method_reload_fn_ins_types(_232621_ins);
		(*(_232621_ins))._field_reloaded=true;
		if (_1ce75e34e_has_directive((*(_231541_f))._field_directives,jule::Str("test", 4))) {
			(*(this->self))._method_check_test_fn(_232621_ins);
		}
	}
}



inline void _1ce6ab345_Sema::_method_precheck_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b850dee4:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b850e0c1_decl = *it;
			{
				(*(this->self))._method_precheck_type_fn(_1b850e0c1_decl);
			}
			_iter_next_1b850dee4:;
			++it;
			goto _iter_begin_1b850dee4;
		}
		_iter_end_1b850dee4:;
	}
}



inline void _1ce6ab345_Sema::_method_check_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b851026a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8510347_decl = *it;
			{
				(*(this->self))._method_check_type_fn(_1b8510347_decl);
			}
			_iter_next_1b851026a:;
			++it;
			goto _iter_begin_1b851026a;
		}
		_iter_end_1b851026a:;
	}
}



inline void _1ce6ab345_Sema::_method_check_package_types(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8511348:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b85113d1_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b85113d1_f);
				(*(this->self))._method_check_global_types();
			}
			_iter_next_1b8511348:;
			++it;
			goto _iter_begin_1b8511348;
		}
		_iter_end_1b8511348:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b851169a:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b85116de_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b85116de_f);
				(*(this->self))._method_precheck_fn_types();
			}
			_iter_next_1b851169a:;
			++it;
			goto _iter_begin_1b851169a;
		}
		_iter_end_1b851169a:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b85130b4:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b85125ad_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b85125ad_f);
				(*(this->self))._method_check_struct_types_operators();
			}
			_iter_next_1b85130b4:;
			++it;
			goto _iter_begin_1b85130b4;
		}
		_iter_end_1b85130b4:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8513e94:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8513449_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b8513449_f);
				(*(this->self))._method_check_struct_types();
			}
			_iter_next_1b8513e94:;
			++it;
			goto _iter_begin_1b8513e94;
		}
		_iter_end_1b8513e94:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b851426e:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8514307_f = *it;
			{
				(*(this->self))._method_set_current_file(_1b8514307_f);
				(*(this->self))._method_check_fn_types();
			}
			_iter_next_1b851426e:;
			++it;
			goto _iter_begin_1b851426e;
		}
		_iter_end_1b851426e:;
	}
}



inline void _1ce6ab345_Sema::_method_set_file_sema_fields(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b851644c:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8516529_f = *it;
			{
				(*(_1b8516529_f))._field_sema=this->self;
			}
			_iter_next_1b851644c:;
			++it;
			goto _iter_begin_1b851644c;
		}
		_iter_end_1b851644c:;
	}
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_1b851678d:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b85167d2_st = *it;
			{
				(*(_1b85167d2_st))._field_sema=this->self;
			}
			_iter_next_1b851678d:;
			++it;
			goto _iter_begin_1b851678d;
		}
		_iter_end_1b851678d:;
	}
}



inline void _1ce6ab345_Sema::_method_set_sema_fields(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8517be0:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8517c78_file = *it;
			{
				(*(this->self))._method_set_current_file(_1b8517c78_file);
				(*(this->self))._method_set_file_sema_fields();
			}
			_iter_next_1b8517be0:;
			++it;
			goto _iter_begin_1b8517be0;
		}
		_iter_end_1b8517be0:;
	}
}



inline void _1ce6ab345_Sema::_method_check(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _239830_files) {
	(*(this->self))._field_files=_239830_files;
	(*(this->self))._method_check_imports();
	if (((*(this->self))._field_errors.len() != 0LL)) {
		return;
	}
	(*(this->self))._method_check_enums();
	if (((*(this->self))._field_errors.len() != 0LL)) {
		return;
	}
	(*(this->self))._method_set_sema_fields();
	(*(this->self))._method_impl_impls();
	if (((*(this->self))._field_errors.len() != 0LL)) {
		return;
	}
	(*(this->self))._method_check_package_decls();
	if (((*(this->self))._field_errors.len() != 0LL)) {
		return;
	}
	(*(this->self))._method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6ab345_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}



inline _1ce6abd18_MissingRetChecker _1ce6abd18_MissingRetChecker::_static_method_new(void) {
	return _1ce6abd18_MissingRetChecker(jule::Slice<jule::U64>::alloc(16LL),jule::Bool());
}



inline jule::Bool _1ce6abd18_MissingRetChecker::_method_check_conditional(jule::Ptr<_1ce68353c_Conditional> _244436_c) {
	{
		auto &expr = (*(_244436_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_1b851d92c:;
		if (it != expr.end()) {
			jule::Ptr<_1ce632574_If> _1b851d9e8_elif = *it;
			{
				if ((_1b851d9e8_elif == nullptr)) {
					return false;
				}
				if ((!((*this)._method_check_scope((*(_1b851d9e8_elif))._field_scope)))) {
					return false;
				}
			}
			_iter_next_1b851d92c:;
			++it;
			goto _iter_begin_1b851d92c;
		}
		_iter_end_1b851d92c:;
	}
	return ((*(_244436_c))._field_default != nullptr) && (*this)._method_check_scope((*((*(_244436_c))._field_default))._field_scope);
}



inline jule::Bool _1ce6abd18_MissingRetChecker::_method_check_match(jule::Ptr<_1ce68672c_Match> _245630_m) {
	{
		auto &expr = (*(_245630_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b8521534:;
		if (it != expr.end()) {
			jule::Ptr<_1ce686b6c_Case> _1b8521600_c = *it;
			{
				if ((_1b8521600_c == nullptr)) {
					return false;
				}
				jule::I64 _246117_n = (*this)._field_breaked.len();
				jule::Bool _246217_ok = (*this)._method_check_scope((*(_1b8521600_c))._field_scope);
				{
					
					if (_246117_n != static_cast<jule::I64>((*this)._field_breaked.len())) {
						_case_begin_1b8522ed6:;
						{
							return false;
						}
					}
					else if ((!(_246217_ok))) {
						_case_begin_1b852305d:;
						{
							if ((!((*this)._field_falled))) {
								return false;
							}
							goto _case_begin_1b85230d5;
						}
					}
					else if ((*this)._field_falled) {
						_case_begin_1b85230d5:;
						{
							(*this)._field_falled=false;
							if (((*(_1b8521600_c))._field_next == nullptr)) {
								return false;
							}
							goto _iter_next_1b8521534;
						}
					}
					_match_end_1b8522e2b:;
				}
			}
			_iter_next_1b8521534:;
			++it;
			goto _iter_begin_1b8521534;
		}
		_iter_end_1b8521534:;
	}
	return ((*(_245630_m))._field_default != nullptr) && (*this)._method_check_scope((*((*(_245630_m))._field_default))._field_scope);
}



inline jule::Bool _1ce6abd18_MissingRetChecker::_method_check_inf_iter(jule::Ptr<_1ce68397c_InfIter> _248233_it) {
	jule::I64 _248313_n = (*this)._field_breaked.len();
	if ((*this)._method_check_scope((*(_248233_it))._field_scope)) {
		(*this)._field_breaked=(*this)._field_breaked.slice(0LL,_248313_n);
		return true;
	}
	if (_248313_n != static_cast<jule::I64>((*this)._field_breaked.len())) {
		jule::U64 _248917_itaddr = static_cast<jule::U64>(_248233_it);
		{
			auto expr = (*this)._field_breaked.slice(_248313_n);
			auto it = expr.begin();
			_iter_begin_1b8528173:;
			if (it != expr.end()) {
				jule::U64 _1b8528371_addr = *it;
				{
					if (_248917_itaddr == _1b8528371_addr) {
						(*this)._field_breaked=(*this)._field_breaked.slice(0LL,_248313_n);
						return false;
					}
				}
				_iter_next_1b8528173:;
				++it;
				goto _iter_begin_1b8528173;
			}
			_iter_end_1b8528173:;
		}
		(*this)._field_breaked=(*this)._field_breaked.slice(0LL,_248313_n);
	}
	return true;
}



inline jule::Bool _1ce6abd18_MissingRetChecker::_method_check_scope(jule::Ptr<_1ce62e86d_Scope> _250130_s) {
	if ((_250130_s == nullptr)) {
		return false;
	}
	{
		auto &expr = (*(_250130_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_1b8529dab:;
		if (it != expr.end()) {
			jule::Any _1b8529e00_st = *it;
			{
				{
					auto &_match_expr{ _1b8529e00_st };
					
					if (_match_expr.type_is<jule::Ptr<_1ce6870ac_FallSt>>()) {
						_case_begin_1b852ab7b:;
						{
							(*this)._field_falled=true;
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce684b8c_BreakSt>>()) {
						_case_begin_1b852ac03:;
						{
							jule::U64 _251121_addr = (*(_1b8529e00_st.operator jule::Ptr<_1ce684b8c_BreakSt>()))._field_it;
							if ((_251121_addr != 0LLU)) {
								(*this)._field_breaked = jule::alloc_for_append((*this)._field_breaked,1);(*this)._field_breaked.__push(_251121_addr);
							}
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce68474c_ContSt>>()) {
						_case_begin_1b852ac7a:;
						{
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce68397c_InfIter>>()) {
						_case_begin_1b852ad02:;
						{
							if ((*this)._method_check_inf_iter(_1b8529e00_st.operator jule::Ptr<_1ce68397c_InfIter>())) {
								return true;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce6874ec_RetSt>>()) {
						_case_begin_1b852ad79:;
						{
							return true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce62e86d_Scope>>()) {
						_case_begin_1b852ae01:;
						{
							if ((*this)._method_check_scope(_1b8529e00_st.operator jule::Ptr<_1ce62e86d_Scope>())) {
								return true;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
						_case_begin_1b852ae78:;
						{
							{
								auto &_match_expr{ (*(_1b8529e00_st.operator jule::Ptr<_1ce727449_Data>()))._field_model };
								
								if (_match_expr.type_is<jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>()) {
									_case_begin_1b8530224:;
									{
										return true;
									}
								}
								_match_end_1b85301be:;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce68353c_Conditional>>()) {
						_case_begin_1b852b000:;
						{
							if ((*this)._method_check_conditional(_1b8529e00_st.operator jule::Ptr<_1ce68353c_Conditional>())) {
								return true;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ce68672c_Match>>()) {
						_case_begin_1b852b077:;
						{
							if ((*this)._method_check_match(_1b8529e00_st.operator jule::Ptr<_1ce68672c_Match>())) {
								return true;
							}
						}
					}
					_match_end_1b852a96c:;
				}
			}
			_iter_next_1b8529dab:;
			++it;
			goto _iter_begin_1b8529dab;
		}
		_iter_end_1b8529dab:;
	}
	return false;
}



inline jule::Bool _1ce6abd18_MissingRetChecker::_method_check(jule::Ptr<_1ce62e86d_Scope> _254724_s) {
	return (*this)._method_check_scope(_254724_s);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6abd18_MissingRetChecker &_Src) {
	_Stream << "MissingRetChecker{";
	_Stream << "breaked:" << _Src._field_breaked << ", ";
	_Stream << "falled:" << _Src._field_falled;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6ce6cb_IterRelation &_Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_dispose(jule::Ptr<_1e83d4384_Fn> _1027_f) {
	return ((((((((((_1027_f != nullptr) && ((*(_1027_f))._field_owner != nullptr)) && ((*(_1027_f))._field_ident == jule::Str("dispose", 7))) && (!((*(_1027_f))._field_statically))) && (!((*(_1027_f))._field_unsafety))) && (*(_1027_f))._field_public) && (*(_1027_f))._method_is_void()) && ((*(_1027_f))._field_generics.len() == 0LL)) && ((*(_1027_f))._field_params.len() == 1LL)) && (*((*(_1027_f))._field_params[0LL]))._field_mutable) && (!((*((*(_1027_f))._field_params[0LL]))._method_is_ref()));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_to_str(jule::Ptr<_1e83d4384_Fn> _2526_f) {
	if (((((((((((_2526_f == nullptr) || ((*(_2526_f))._field_owner == nullptr)) || ((*(_2526_f))._field_ident != jule::Str("to_str", 6))) || (*(_2526_f))._field_statically) || (*(_2526_f))._field_unsafety) || (!((*(_2526_f))._field_public))) || (*(_2526_f))._method_is_void()) || ((*(_2526_f))._field_generics.len() != 0LL)) || ((*(_2526_f))._field_params.len() != 1LL)) || (*((*(_2526_f))._field_params[0LL]))._field_mutable) || (*((*(_2526_f))._field_params[0LL]))._method_is_ref()) {
		return false;
	}
	jule::Ptr<_1e83d630e_FnIns> _4017_ins = (*(_2526_f))._field_instances[0LL];
	jule::Ptr<_1ce762330_Prim> _4113_prim = (*((*(_4017_ins))._field_result))._method_prim();
	if ((_4113_prim == nullptr)) {
		return false;
	}
	return (*(_4113_prim))._method_is_str();
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_logical(jule::Ptr<_1e83d4384_Fn>& _4824_f,jule::Str _4832_ident) {
	if ((((((((((((((_4824_f == nullptr) || ((*(_4824_f))._field_ident != _4832_ident)) || ((*(_4824_f))._field_owner == nullptr)) || ((*(_4824_f))._field_instances.len() == 0LL)) || (*(_4824_f))._field_statically) || (*(_4824_f))._field_unsafety) || (!((*(_4824_f))._field_public))) || (*(_4824_f))._method_is_void()) || ((*(_4824_f))._field_generics.len() != 0LL)) || ((*(_4824_f))._field_params.len() != 2LL)) || (*((*(_4824_f))._field_params[0LL]))._field_mutable) || (*((*(_4824_f))._field_params[0LL]))._method_is_ref()) || (*((*(_4824_f))._field_params[1LL]))._field_mutable) || (*((*(_4824_f))._field_params[1LL]))._field_reference) {
		return false;
	}
	jule::Ptr<_1e83d630e_FnIns> _6617_ins = (*(_4824_f))._field_instances[0LL];
	jule::Ptr<_1ce762330_Prim> _6713_prim = (*((*(_6617_ins))._field_result))._method_prim();
	if ((_6713_prim == nullptr) || (!((*(_6713_prim))._method_is_bool()))) {
		return false;
	}
	return (*(_6617_ins))._field_owner == (*((*((*(_6617_ins))._field_params[1LL]))._field_kind))._method_strct();
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_eq(jule::Ptr<_1e83d4384_Fn> _7522_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_logical(_7522_f,jule::Str("eq", 2));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_gt(jule::Ptr<_1e83d4384_Fn> _8022_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_logical(_8022_f,jule::Str("gt", 2));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_gt_eq(jule::Ptr<_1e83d4384_Fn> _8525_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_logical(_8525_f,jule::Str("gt_eq", 5));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_lt(jule::Ptr<_1e83d4384_Fn> _9022_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_logical(_9022_f,jule::Str("lt", 2));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_lt_eq(jule::Ptr<_1e83d4384_Fn> _9525_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_logical(_9525_f,jule::Str("lt_eq", 5));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_result(jule::Ptr<_1e83d4384_Fn>& _9923_f,jule::Str _9931_ident) {
	if ((((((((((((((_9923_f == nullptr) || ((*(_9923_f))._field_ident != _9931_ident)) || ((*(_9923_f))._field_owner == nullptr)) || ((*(_9923_f))._field_instances.len() == 0LL)) || (*(_9923_f))._field_statically) || (*(_9923_f))._field_unsafety) || (!((*(_9923_f))._field_public))) || (*(_9923_f))._method_is_void()) || ((*(_9923_f))._field_generics.len() != 0LL)) || ((*(_9923_f))._field_params.len() != 2LL)) || (*((*(_9923_f))._field_params[0LL]))._field_mutable) || (*((*(_9923_f))._field_params[0LL]))._method_is_ref()) || (*((*(_9923_f))._field_params[1LL]))._field_mutable) || (*((*(_9923_f))._field_params[1LL]))._field_reference) {
		return false;
	}
	jule::Ptr<_1e83d630e_FnIns> _11717_ins = (*(_9923_f))._field_instances[0LL];
	return (*((*(_11717_ins))._field_result))._method_strct() == (*(_11717_ins))._field_owner;
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_shl(jule::Ptr<_1e83d4384_Fn> _12223_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_12223_f,jule::Str("shl", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_shr(jule::Ptr<_1e83d4384_Fn> _12723_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_12723_f,jule::Str("shr", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_add(jule::Ptr<_1e83d4384_Fn> _13223_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_13223_f,jule::Str("add", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_sub(jule::Ptr<_1e83d4384_Fn> _13723_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_13723_f,jule::Str("sub", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_div(jule::Ptr<_1e83d4384_Fn> _14223_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_14223_f,jule::Str("div", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_mul(jule::Ptr<_1e83d4384_Fn> _14723_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_14723_f,jule::Str("mul", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_mod(jule::Ptr<_1e83d4384_Fn> _15223_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_15223_f,jule::Str("mod", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_and(jule::Ptr<_1e83d4384_Fn> _15727_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_15727_f,jule::Str("bit_and", 7));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_or(jule::Ptr<_1e83d4384_Fn> _16226_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_16226_f,jule::Str("bit_or", 6));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_xor(jule::Ptr<_1e83d4384_Fn> _16727_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_result(_16727_f,jule::Str("bit_xor", 7));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_unary(jule::Ptr<_1e83d4384_Fn>& _17122_f,jule::Str _17130_ident) {
	if ((((((((((((_17122_f == nullptr) || ((*(_17122_f))._field_ident != _17130_ident)) || ((*(_17122_f))._field_owner == nullptr)) || ((*(_17122_f))._field_instances.len() == 0LL)) || (*(_17122_f))._field_statically) || (*(_17122_f))._field_unsafety) || (!((*(_17122_f))._field_public))) || (*(_17122_f))._method_is_void()) || ((*(_17122_f))._field_generics.len() != 0LL)) || ((*(_17122_f))._field_params.len() != 1LL)) || (*((*(_17122_f))._field_params[0LL]))._field_mutable) || (*((*(_17122_f))._field_params[0LL]))._method_is_ref()) {
		return false;
	}
	jule::Ptr<_1e83d630e_FnIns> _18717_ins = (*(_17122_f))._field_instances[0LL];
	return (*((*(_18717_ins))._field_result))._method_strct() == (*(_18717_ins))._field_owner;
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_neg(jule::Ptr<_1e83d4384_Fn> _19223_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_unary(_19223_f,jule::Str("neg", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_pos(jule::Ptr<_1e83d4384_Fn> _19723_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_unary(_19723_f,jule::Str("pos", 3));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_not(jule::Ptr<_1e83d4384_Fn> _20227_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_unary(_20227_f,jule::Str("bit_not", 7));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_assign(jule::Ptr<_1e83d4384_Fn>& _20623_f,jule::Str _20631_ident) {
	if ((((((((((((((_20623_f == nullptr) || ((*(_20623_f))._field_ident != _20631_ident)) || ((*(_20623_f))._field_owner == nullptr)) || ((*(_20623_f))._field_instances.len() == 0LL)) || (*(_20623_f))._field_statically) || (*(_20623_f))._field_unsafety) || (!((*(_20623_f))._field_public))) || (!((*(_20623_f))._method_is_void()))) || ((*(_20623_f))._field_generics.len() != 0LL)) || ((*(_20623_f))._field_params.len() != 2LL)) || (!((*((*(_20623_f))._field_params[0LL]))._field_mutable))) || (*((*(_20623_f))._field_params[0LL]))._method_is_ref()) || (*((*(_20623_f))._field_params[1LL]))._field_mutable) || (*((*(_20623_f))._field_params[1LL]))._field_reference) {
		return false;
	}
	return true;
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_add_assign(jule::Ptr<_1e83d4384_Fn> _22730_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_22730_f,jule::Str("add_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_sub_assign(jule::Ptr<_1e83d4384_Fn> _23230_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_23230_f,jule::Str("sub_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_div_assign(jule::Ptr<_1e83d4384_Fn> _23730_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_23730_f,jule::Str("div_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_mul_assign(jule::Ptr<_1e83d4384_Fn> _24230_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_24230_f,jule::Str("mul_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_mod_assign(jule::Ptr<_1e83d4384_Fn> _24730_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_24730_f,jule::Str("mod_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_shl_assign(jule::Ptr<_1e83d4384_Fn> _25230_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_25230_f,jule::Str("shl_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_shr_assign(jule::Ptr<_1e83d4384_Fn> _25730_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_25730_f,jule::Str("shr_assign", 10));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_or_assign(jule::Ptr<_1e83d4384_Fn> _26233_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_26233_f,jule::Str("bit_or_assign", 13));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_and_assign(jule::Ptr<_1e83d4384_Fn> _26734_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_26734_f,jule::Str("bit_and_assign", 14));
}



inline jule::Bool _1ce6d1e2b_FuncPattern::_static_method_bit_xor_assign(jule::Ptr<_1e83d4384_Fn> _27234_f) {
	return _1ce6d1e2b_FuncPattern::_static_method_assign(_27234_f,jule::Str("bit_xor_assign", 14));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6d1e2b_FuncPattern &_Src) {
	_Stream << "FuncPattern{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce70ed5a_RangeChecker::_method_build_var(jule::Ptr<_212b20325_VarDecl>& _90529_decl) {
	jule::Ptr<_1ce6cecb4_Var> _90617_v = _1e83e3aad_build_var(_90529_decl);
	return _90617_v;
}



inline void _1ce70ed5a_RangeChecker::_method_set_size_key(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _212ae9255_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3))))));
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b861898e:;
			{
				(*((*((*this)._field_kind))._field_key_a))._field_iter_relation=jule::new_struct<_1ce6ce6cb_IterRelation>(new( std::nothrow ) _1ce6ce6cb_IterRelation((*((*this)._field_d))._field_model.operator jule::Ptr<_1ce6cecb4_Var>()));
			}
		}
		_match_end_1b8618917:;
	}
}



inline void _1ce70ed5a_RangeChecker::_method_check_range_expr_validity(jule::Ptr<_1ce727449_Data>& _93649_d,jule::Ptr<_1ce6cecb4_Var>& _93660_key,jule::Ptr<_1ce76121e_TypeKind>& _93676_k) {
	jule::Bool _93717__mut = (*(_93660_key))._field_mutable;
	if (_93717__mut && (!((*(_93676_k))._method_mutable()))) {
		_93717__mut=false;
	}
	(*((*((*this)._field_sc))._field_s))._method_check_validity_for_init_expr(_93717__mut,(*(_93660_key))._field_reference,(*((*(_93660_key))._field_kind))._field_kind,_93649_d,(*((*this)._field_rang))._field_in_token);
}



inline void _1ce70ed5a_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _212ae9255_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_1ce762e02_Slc> _95517_slc = (*((*((*this)._field_d))._field_kind))._method_slc();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),(*(_95517_slc))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_95517_slc))._field_elem);
}



inline void _1ce70ed5a_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _212ae9255_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_1ce764244_Arr> _96817_arr = (*((*((*this)._field_d))._field_kind))._method_arr();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),(*(_96817_arr))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_96817_arr))._field_elem);
}



inline void _1ce70ed5a_RangeChecker::_method_check_map_key_a(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _212ae9255_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	jule::Ptr<_1ce763b39_Map> _98017_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),(*(_98017_m))._field_key));
	jule::Ptr<_1ce727449_Data> _98417_d = jule::new_ptr<_1ce727449_Data>((*((*this)._field_d)));
	(*(_98417_d))._field_kind=(*(_98017_m))._field_key;
	(*this)._method_check_range_expr_validity(_98417_d,(*((*this)._field_kind))._field_key_a,(*(_98017_m))._field_key);
}



inline void _1ce70ed5a_RangeChecker::_method_check_map_key_b(void) {
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _212ae9255_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_1ce763b39_Map> _99517_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),(*(_99517_m))._field_val));
	jule::Ptr<_1ce727449_Data> _99917_d = jule::new_ptr<_1ce727449_Data>((*((*this)._field_d)));
	(*(_99917_d))._field_kind=(*(_99517_m))._field_val;
	(*this)._method_check_range_expr_validity(_99917_d,(*((*this)._field_kind))._field_key_b,(*(_99517_m))._field_val);
}



inline void _1ce70ed5a_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _1ce70ed5a_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _212ae9255_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _1ce70ed5a_RangeChecker::_method_check(void) {
	{
		
		if ((*((*((*this)._field_d))._field_kind))._field_variadic) {
			_case_begin_1b8631d3c:;
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_slc() != nullptr)) {
			_case_begin_1b8630ec3:;
			{
				(*this)._method_check_slice();
				return true;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_arr() != nullptr)) {
			_case_begin_1b8631039:;
			{
				(*this)._method_check_array();
				return true;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_map() != nullptr)) {
			_case_begin_1b86310a0:;
			{
				(*this)._method_check_map();
				return true;
			}
		}
		else {
			_case_begin_1b8630d5d:;
			{
				jule::Ptr<_1ce762330_Prim> _103817_prim = (*((*((*this)._field_d))._field_kind))._method_prim();
				if ((_103817_prim != nullptr) && (*(_103817_prim))._method_is_str()) {
					(*this)._method_check_str();
					return true;
				}
			}
		}
		_match_end_1b8630c92:;
	}
	(*((*((*this)._field_sc))._field_s))._method_push_err((*((*this)._field_rang))._field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce70ed5a_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce7204a8_SymbolTable::_method_find_package(jule::Str _2535_ident) {
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_1b8652698:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8652753_pkg = *it;
			{
				if ((*(_1b8652753_pkg))._field_ident == _2535_ident) {
					return _1b8652753_pkg;
				}
			}
			_iter_next_1b8652698:;
			++it;
			goto _iter_begin_1b8652698;
		}
		_iter_end_1b8652698:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce7204a8_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)> _3737_selector) {
	if ((_3737_selector == nullptr)) {
		return nullptr;
	}
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_1b8653d1a:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8653743_pkg = *it;
			{
				if (_3737_selector(_1b8653743_pkg)) {
					return _1b8653743_pkg;
				}
			}
			_iter_next_1b8653d1a:;
			++it;
			goto _iter_begin_1b8653d1a;
		}
		_iter_end_1b8653d1a:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce7204a8_SymbolTable::_method_find_var(jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return (*this)._method___find_var(_5231_ident,_5243_cpp_linked,false);
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce7204a8_SymbolTable::_method_find_type_alias(jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return (*this)._method___find_type_alias(_5838_ident,_5850_cpp_linked,false);
}



inline jule::Ptr<_1e83b1718_Struct> _1ce7204a8_SymbolTable::_method_find_struct(jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_1b8657978:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b8657acc_s = *it;
			{
				if (((*(_1b8657acc_s))._field_ident == _6434_ident) && ((*(_1b8657acc_s))._field_cpp_linked == _6446_cpp_linked)) {
					return _1b8657acc_s;
				}
			}
			_iter_next_1b8657978:;
			++it;
			goto _iter_begin_1b8657978;
		}
		_iter_end_1b8657978:;
	}
	return nullptr;
}



inline jule::Ptr<_1e83d4384_Fn> _1ce7204a8_SymbolTable::_method_find_fn(jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b8659617:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b865976b_f = *it;
			{
				if (((*(_1b865976b_f))._field_ident == _7530_ident) && ((*(_1b865976b_f))._field_cpp_linked == _7542_cpp_linked)) {
					return _1b865976b_f;
				}
			}
			_iter_next_1b8659617:;
			++it;
			goto _iter_begin_1b8659617;
		}
		_iter_end_1b8659617:;
	}
	return nullptr;
}



inline jule::Ptr<_1e85a7865_Trait> _1ce7204a8_SymbolTable::_method_find_trait(jule::Str _8633_ident) {
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_1b865adcc:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> _1b865ae87_t = *it;
			{
				if ((*(_1b865ae87_t))._field_ident == _8633_ident) {
					return _1b865ae87_t;
				}
			}
			_iter_next_1b865adcc:;
			++it;
			goto _iter_begin_1b865adcc;
		}
		_iter_end_1b865adcc:;
	}
	return nullptr;
}



inline jule::Ptr<_1e8648917_Enum> _1ce7204a8_SymbolTable::_method_find_enum(jule::Str _9732_ident) {
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_1b865c30c:;
		if (it != expr.end()) {
			jule::Ptr<_1e8648917_Enum> _1b865c3b7_e = *it;
			{
				if ((*(_1b865c3b7_e))._field_ident == _9732_ident) {
					return _1b865c3b7_e;
				}
			}
			_iter_next_1b865c30c:;
			++it;
			goto _iter_begin_1b865c30c;
		}
		_iter_end_1b865c30c:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce7204a8_SymbolTable::_method___find_var(jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I64 _11021_i = ((*this)._field_vars.len() - 1LL);
		for (; (_11021_i >= 0LL); (_11021_i)--) {
			{
				jule::Ptr<_1ce6cecb4_Var> _11225_v = (*this)._field_vars[_11021_i];
				if (((*(_11225_v))._field_ident == _10829_ident) && ((*(_11225_v))._field_cpp_linked == _10841_cpp_linked)) {
					return _11225_v;
				}
			}
		_iter_next_1b865e254:;
		}
		_iter_end_1b865e254:;
	} else {
		{
			auto &expr = (*this)._field_vars;
			auto it = expr.begin();
			_iter_begin_1b865e2a9:;
			if (it != expr.end()) {
				jule::Ptr<_1ce6cecb4_Var> _1b866083d_v = *it;
				{
					if (((*(_1b866083d_v))._field_ident == _10829_ident) && ((*(_1b866083d_v))._field_cpp_linked == _10841_cpp_linked)) {
						return _1b866083d_v;
					}
				}
				_iter_next_1b865e2a9:;
				++it;
				goto _iter_begin_1b865e2a9;
			}
			_iter_end_1b865e2a9:;
		}
	}
	return nullptr;
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce7204a8_SymbolTable::_method___find_type_alias(jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I64 _12921_i = ((*this)._field_type_aliases.len() - 1LL);
		for (; (_12921_i >= 0LL); (_12921_i)--) {
			{
				jule::Ptr<_1ce75e6a1_TypeAlias> _13125_ta = (*this)._field_type_aliases[_12921_i];
				if (((*(_13125_ta))._field_ident == _12736_ident) && ((*(_13125_ta))._field_cpp_linked == _12748_cpp_linked)) {
					return _13125_ta;
				}
			}
		_iter_next_1b8662653:;
		}
		_iter_end_1b8662653:;
	} else {
		{
			auto &expr = (*this)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_1b86626a8:;
			if (it != expr.end()) {
				jule::Ptr<_1ce75e6a1_TypeAlias> _1b8663c3c_ta = *it;
				{
					if (((*(_1b8663c3c_ta))._field_ident == _12736_ident) && ((*(_1b8663c3c_ta))._field_cpp_linked == _12748_cpp_linked)) {
						return _1b8663c3c_ta;
					}
				}
				_iter_next_1b86626a8:;
				++it;
				goto _iter_begin_1b86626a8;
			}
			_iter_end_1b86626a8:;
		}
	}
	return nullptr;
}



inline jule::Any _1ce7204a8_SymbolTable::_method_def_by_ident(jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_1b8664d70:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b8664ec4_v = *it;
			{
				if (((*(_1b8664ec4_v))._field_ident == _14831_ident) && ((*(_1b8664ec4_v))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1b8664ec4_v);
				}
			}
			_iter_next_1b8664d70:;
			++it;
			goto _iter_begin_1b8664d70;
		}
		_iter_end_1b8664d70:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_1b8665920:;
		if (it != expr.end()) {
			jule::Ptr<_1ce75e6a1_TypeAlias> _1b8665117_ta = *it;
			{
				if (((*(_1b8665117_ta))._field_ident == _14831_ident) && ((*(_1b8665117_ta))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1b8665117_ta);
				}
			}
			_iter_next_1b8665920:;
			++it;
			goto _iter_begin_1b8665920;
		}
		_iter_end_1b8665920:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_1b86667ab:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b866527c_s = *it;
			{
				if (((*(_1b866527c_s))._field_ident == _14831_ident) && ((*(_1b866527c_s))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1b866527c_s);
				}
			}
			_iter_next_1b86667ab:;
			++it;
			goto _iter_begin_1b86667ab;
		}
		_iter_end_1b86667ab:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b8667977:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8666e2c_f = *it;
			{
				if (((*(_1b8666e2c_f))._field_ident == _14831_ident) && ((*(_1b8666e2c_f))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1b8666e2c_f);
				}
			}
			_iter_next_1b8667977:;
			++it;
			goto _iter_begin_1b8667977;
		}
		_iter_end_1b8667977:;
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_1b8668dda:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> _1b8668b98_t = *it;
			{
				if ((*(_1b8668b98_t))._field_ident == _14831_ident) {
					return jule::Any(_1b8668b98_t);
				}
			}
			_iter_next_1b8668dda:;
			++it;
			goto _iter_begin_1b8668dda;
		}
		_iter_end_1b8668dda:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_1b8667d0c:;
		if (it != expr.end()) {
			jule::Ptr<_1e8648917_Enum> _1b8669407_e = *it;
			{
				if ((*(_1b8669407_e))._field_ident == _14831_ident) {
					return jule::Any(_1b8669407_e);
				}
			}
			_iter_next_1b8667d0c:;
			++it;
			goto _iter_begin_1b8667d0c;
		}
		_iter_end_1b8667d0c:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1ce7204a8_SymbolTable::_method_is_duplicated_ident(jule::U64 _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_1b866ac22:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> &_1b866ad98_v = *it;
			{
				if (((static_cast<jule::U64>(_1b866ad98_v) != _19534_itself) && ((*(_1b866ad98_v))._field_ident == _19551_ident)) && ((*(_1b866ad98_v))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_1b866ac22:;
			++it;
			goto _iter_begin_1b866ac22;
		}
		_iter_end_1b866ac22:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_1b866ba36:;
		if (it != expr.end()) {
			jule::Ptr<_1ce75e6a1_TypeAlias> &_1b866aedb_ta = *it;
			{
				if (((static_cast<jule::U64>(_1b866aedb_ta) != _19534_itself) && ((*(_1b866aedb_ta))._field_ident == _19551_ident)) && ((*(_1b866aedb_ta))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_1b866ba36:;
			++it;
			goto _iter_begin_1b866ba36;
		}
		_iter_end_1b866ba36:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_1b866ccce:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> &_1b866b12e_s = *it;
			{
				if (((static_cast<jule::U64>(_1b866b12e_s) != _19534_itself) && ((*(_1b866b12e_s))._field_ident == _19551_ident)) && ((*(_1b866b12e_s))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_1b866ccce:;
			++it;
			goto _iter_begin_1b866ccce;
		}
		_iter_end_1b866ccce:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_1b866dc7a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> &_1b866d593_f = *it;
			{
				if (((static_cast<jule::U64>(_1b866d593_f) != _19534_itself) && ((*(_1b866d593_f))._field_ident == _19551_ident)) && ((*(_1b866d593_f))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_1b866dc7a:;
			++it;
			goto _iter_begin_1b866dc7a;
		}
		_iter_end_1b866dc7a:;
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_1b866c3d8:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> &_1b866e83b_t = *it;
			{
				if ((static_cast<jule::U64>(_1b866e83b_t) != _19534_itself) && ((*(_1b866e83b_t))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_1b866c3d8:;
			++it;
			goto _iter_begin_1b866c3d8;
		}
		_iter_end_1b866c3d8:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_1b8670cd2:;
		if (it != expr.end()) {
			jule::Ptr<_1e8648917_Enum> &_1b8670e14_e = *it;
			{
				if ((static_cast<jule::U64>(_1b8670e14_e) != _19534_itself) && ((*(_1b8670e14_e))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_1b8670cd2:;
			++it;
			goto _iter_begin_1b8670cd2;
		}
		_iter_end_1b8670cd2:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce7204a8_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ce727449_Data::_method_is_nil(void) {
	return (*((*this)._field_kind))._method_is_nil();
}



inline jule::Bool _1ce727449_Data::_method_is_void(void) {
	return (*((*this)._field_kind))._method_void();
}



inline jule::Bool _1ce727449_Data::_method_is_const(void) {
	return ((*this)._field_constant != nullptr);
}



inline jule::Bool _1ce727449_Data::_method_good_operand(jule::Ptr<_1ce727449_Data>& _9836_other) {
	return ((((*((*(_9836_other))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_9836_other))._field_kind))._method_prim()))._method_is_any()))) && ((*((*(_9836_other))._field_kind))._method_trt() == nullptr)) && (!((*((*this)._field_kind))._method_is_nil()));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce727449_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce7281d6_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1ce728879_Eval::_method_push_err(_212ae5c02_Token _12527_token,jule::Str _12541_fmt,jule::Slice<jule::Any> _12554_args) {
	(*((*this)._field_s))._method_push_err(_12527_token,_12541_fmt,_12554_args);
}



inline void _1ce728879_Eval::_method_push_suggestion(jule::Str _13034_fmt,jule::Slice<jule::Any> _13047_args) {
	(*((*this)._field_s))._method_push_suggestion(_13034_fmt,_13047_args);
}



inline void _1ce728879_Eval::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _1ce728879_Eval::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Bool _1ce728879_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _1ce728879_Eval::_method_is_global(void) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6ab345_Sema>>()) {
			_case_begin_1b867a22b:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b867a43a:;
			{
				return false;
			}
		}
		_match_end_1b867a319:;
	}
}



inline jule::Bool _1ce728879_Eval::_method_apply_numeric_prefix(jule::Ptr<_1ce727449_Data>& _15544_d) {
	if (((((_15544_d == nullptr) || ((*(_15544_d))._field_cast_kind != nullptr)) || (!((*(_15544_d))._method_is_const()))) || ((*((*(_15544_d))._field_kind))._method_prim() == nullptr)) || ((*this)._field_prefix == nullptr)) {
		return false;
	}
	jule::Ptr<_1ce762330_Prim> _16313_prim = (*((*this)._field_prefix))._method_prim();
	if ((_16313_prim == nullptr)) {
		return false;
	}
	{
		
		if (_1ce6825b3_is_float((*(_16313_prim))._method_to_str())) {
			_case_begin_1b867d718:;
			{
				(*(_15544_d))._field_kind=jule::new_ptr<_1ce76121e_TypeKind>((*((*this)._field_prefix)));
				(*((*(_15544_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_15544_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_1ce6818d1_is_sig_int((*(_16313_prim))._method_to_str())) {
			_case_begin_1b867d77e:;
			{
				if ((!(_1ce6dcd5a_sig_assignable((*(_16313_prim))._method_to_str(),_15544_d)))) {
					return false;
				}
				(*(_15544_d))._field_kind=jule::new_ptr<_1ce76121e_TypeKind>((*((*this)._field_prefix)));
				(*((*(_15544_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_15544_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1ce681caa_is_unsig_int((*(_16313_prim))._method_to_str())) {
			_case_begin_1b867d7e5:;
			{
				if ((!(_1ce6e348c_unsig_assignable((*(_16313_prim))._method_to_str(),_15544_d)))) {
					return false;
				}
				(*(_15544_d))._field_kind=jule::new_ptr<_1ce76121e_TypeKind>((*((*this)._field_prefix)));
				(*((*(_15544_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_15544_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_1b867dac0:;
	}
	return true;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_nil(void) {
	jule::Ptr<_1ce4b898d_Const> _19217_constant = _1ce4b898d_Const::_static_method_new_nil();
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),nullptr)),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_19217_constant),false,_19217_constant));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_str(jule::Ptr<_212b16e32_LitExpr>& _20323_l) {
	jule::Str _20417_s = (*(_20323_l))._field_value.slice(1LL,((*(_20323_l))._field_value.len() - 1LL));
	if (_212ae76c6_is_raw_str((*(_20323_l))._field_value)) {
		_20417_s=_1ce6dc497_to_raw_str(static_cast<jule::Slice<jule::U8>>(_20417_s));
	} else {
		_20417_s=_1ce70abe1_to_str(static_cast<jule::Slice<jule::U8>>(_20417_s));
	}
	jule::Ptr<_1ce4b898d_Const> _21017_constant = _1ce4b898d_Const::_static_method_new_str(_20417_s);
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_21017_constant),false,_21017_constant));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_bool(jule::Ptr<_212b16e32_LitExpr>& _22424_l) {
	jule::Ptr<_1ce4b898d_Const> _22517_constant = _1ce4b898d_Const::_static_method_new_bool(((*(_22424_l))._field_value == jule::Str("true", 4)));
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_22517_constant),false,_22517_constant));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_rune(jule::Ptr<_212b16e32_LitExpr>& _23824_l) {
	
	
	jule::Str _24213_lt = (*(_23824_l))._field_value.slice(1LL,((*(_23824_l))._field_value.len() - 1LL));
	jule::I32 _24313_r = _1ce6e2a63_to_rune(static_cast<jule::Slice<jule::U8>>(_24213_lt));
	jule::Ptr<_1ce727449_Data> _24417_data = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,_1ce4b898d_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_24313_r)))));
	jule::Bool _25113_is_ascii = _1ce70a43d_is_ascii(_24313_r);
	if (_25113_is_ascii) {
		(*(_24417_data))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u8", 2))));
	} else {
		(*(_24417_data))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i32", 3))));
	}
	(*(_24417_data))._field_model=jule::Any(jule::new_struct<_1e83d01d7_RuneExprModel>(new( std::nothrow ) _1e83d01d7_RuneExprModel(_24313_r)));
	(*(_24417_data))._field_is_rune=true;
	return _24417_data;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_float(jule::Ptr<_212b16e32_LitExpr>& _26725_l) {
	
	jule::F64 _27013_f = ({
		auto except = _1cde2c028_parse_float((*(_26725_l))._field_value,64LL);
		(except.ok()) ? (except.result) : ({
			jule::MAX_F64;
		});
	});
	jule::Ptr<_1ce4b898d_Const> _27117_constant = _1ce4b898d_Const::_static_method_new_f64(_27013_f);
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_27117_constant),false,_27117_constant));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_int(jule::Ptr<_212b16e32_LitExpr>& _28527_l) {
	
	jule::Str _28817_lit = (*(_28527_l))._field_value;
	jule::I64 _28917_base = 0LL;
	{
		
		if (_2127d7dbc_has_prefix(_28817_lit,jule::Str("0x", 2))) {
			_case_begin_1b8694a09:;
			{
				(_28817_lit).mut_slice(2LL);
				_28917_base=16LL;
			}
		}
		else if (_2127d7dbc_has_prefix(_28817_lit,jule::Str("0b", 2))) {
			_case_begin_1b8694b91:;
			{
				(_28817_lit).mut_slice(2LL);
				_28917_base=2LL;
			}
		}
		else if (_2127d7dbc_has_prefix(_28817_lit,jule::Str("0o", 2))) {
			_case_begin_1b86947c8:;
			{
				(_28817_lit).mut_slice(2LL);
				_28917_base=8LL;
			}
		}
		else if ((_28817_lit[0LL] == '0') && (_28817_lit.len() > 1LL)) {
			_case_begin_1b869483e:;
			{
				(_28817_lit).mut_slice(1LL);
				_28917_base=8LL;
			}
		}
		else {
			_case_begin_1b8694663:;
			{
				_28917_base=10LL;
			}
		}
		_match_end_1b86945db:;
	}
	jule::Ptr<_1ce727449_Data> _30817_d = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ce4b898d_Const>()));
	jule::Bool _31417_ok = true;
	jule::I64 _31513_sig = ({
		auto except = _1ce1e6b72_parse_int(_28817_lit,_28917_base,64LL);
		(except.ok()) ? (except.result) : ({
			_31417_ok=false;
			0LL;
		});
	});
	if (_31417_ok) {
		(*(_30817_d))._field_constant=_1ce4b898d_Const::_static_method_new_i64(_31513_sig);
		(*(_30817_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3))));
	} else {
		jule::U64 _32517_unsig = ({
			auto except = _1ce1c8a11_parse_uint(_28817_lit,_28917_base,64LL);
			(except.ok()) ? (except.result) : ({
				(*this)._method_push_err((*(_28527_l))._field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
				(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
				jule::MAX_U64;
			});
		});
		(*(_30817_d))._field_constant=_1ce4b898d_Const::_static_method_new_u64(_32517_unsig);
		(*(_30817_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("uint", 4))));
	}
	(*(_30817_d))._field_model=jule::Any((*(_30817_d))._field_constant);
	if ((!((*this)._method_apply_numeric_prefix(_30817_d)))) {
		_1ce72b33d_fit_bitsize(_30817_d);
	}
	return _30817_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_lit_num(jule::Ptr<_212b16e32_LitExpr>& _34627_l) {
	{
		
		if (_212ae86b6_is_float((*(_34627_l))._field_value)) {
			_case_begin_1b869e838:;
			{
				return (*this)._method_lit_float(_34627_l);
			}
		}
		else {
			_case_begin_1b869e20b:;
			{
				return (*this)._method_lit_int(_34627_l);
			}
		}
		_match_end_1b869e140:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_lit(jule::Ptr<_212b16e32_LitExpr> _35527_lit) {
	{
		
		if ((*(_35527_lit))._method_is_nil()) {
			_case_begin_1b86a1494:;
			{
				return (*this)._method_lit_nil();
			}
		}
		else if (_212ae7385_is_str((*(_35527_lit))._field_value)) {
			_case_begin_1b86a150a:;
			{
				return (*this)._method_lit_str(_35527_lit);
			}
		}
		else if (_212ae83b9_is_bool((*(_35527_lit))._field_value)) {
			_case_begin_1b86a120d:;
			{
				return (*this)._method_lit_bool(_35527_lit);
			}
		}
		else if (_212ae7a5b_is_rune((*(_35527_lit))._field_value)) {
			_case_begin_1b86a1274:;
			{
				return (*this)._method_lit_rune(_35527_lit);
			}
		}
		else if (_212ae8a3a_is_num((*(_35527_lit))._field_value)) {
			_case_begin_1b86a12da:;
			{
				return (*this)._method_lit_num(_35527_lit);
			}
		}
		else {
			_case_begin_1b86a0c79:;
			{
				return nullptr;
			}
		}
		_match_end_1b86a0bad:;
	}
}



inline jule::Any _1ce728879_Eval::_method_find_builtins(jule::Str _37232_ident) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6a0317_ImportInfo>>()) {
			_case_begin_1b86a46ea:;
			{
				jule::Any _37521_def = _1ce72aded_find_builtins_import(_37232_ident,(*this)._field_lookup.operator jule::Ptr<_1ce6a0317_ImportInfo>());
				if (_37521_def != jule::Any(nullptr)) {
					return _37521_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6ab345_Sema>>()) {
			_case_begin_1b86a4761:;
			{
				jule::Any _38021_def = _1ce72c031_find_builtins_sema(_37232_ident,(*this)._field_lookup.operator jule::Ptr<_1ce6ab345_Sema>());
				if (_38021_def != jule::Any(nullptr)) {
					return _38021_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
			_case_begin_1b86a47d8:;
			{
				jule::Any _38521_def = _1ce72c031_find_builtins_sema(_37232_ident,(*((*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>()))._field_s);
				if (_38521_def != jule::Any(nullptr)) {
					return _38521_def;
				}
			}
		}
		_match_end_1b86a4585:;
	}
	return ((jule::Any((*this)._field_dis_builtin)) ? (jule::Any(nullptr)) : (_1b547526b_find_builtin_def(_37232_ident)));
}



inline jule::Any _1ce728879_Eval::_method_get_def(jule::Str _39326_ident,jule::Bool _39338_cpp_linked) {
	if ((!(_39338_cpp_linked))) {
		jule::Ptr<_1e8648917_Enum> _39521_enm = (*this)._field_lookup.get()._method_find_enum(_39326_ident);
		if ((_39521_enm != nullptr)) {
			return jule::Any(_39521_enm);
		}
	}
	jule::Ptr<_1ce6cecb4_Var> _40117_v = (*this)._field_lookup.get()._method_find_var(_39326_ident,_39338_cpp_linked);
	if ((_40117_v != nullptr)) {
		return jule::Any(_40117_v);
	}
	jule::Ptr<_1e83d4384_Fn> _40617_f = (*this)._field_lookup.get()._method_find_fn(_39326_ident,_39338_cpp_linked);
	if ((_40617_f != nullptr)) {
		return jule::Any(_40617_f);
	}
	jule::Ptr<_1e83b1718_Struct> _41117_s = (*this)._field_lookup.get()._method_find_struct(_39326_ident,_39338_cpp_linked);
	if ((_41117_s != nullptr)) {
		return jule::Any(_41117_s);
	}
	jule::Ptr<_1ce75e6a1_TypeAlias> _41617_ta = (*this)._field_lookup.get()._method_find_type_alias(_39326_ident,_39338_cpp_linked);
	if ((_41617_ta != nullptr)) {
		return jule::Any(_41617_ta);
	}
	return (*this)._method_find_builtins(_39326_ident);
}



inline void _1ce728879_Eval::_method_push_reference(jule::Ptr<_1e83de4b0_ReferenceStack>& _42438_references) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
			_case_begin_1b86b16a2:;
			{
				jule::Ptr<_1ce6882bc_ScopeChecker> _42721_sc = (*((*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>()))._method_get_root();
				if ((!((*(_42438_references))._method_exist_1((*(_42721_sc))._field_owner)))) {
					(*(_42438_references))._method_push(jule::Any((*(_42721_sc))._field_owner));
				}
			}
		}
		else {
			_case_begin_1b86b05d5:;
			{
				if (((*this)._field_owner != nullptr) && (!((*(_42438_references))._method_exist_0((*this)._field_owner)))) {
					(*(_42438_references))._method_push(jule::Any((*this)._field_owner));
				}
			}
		}
		_match_end_1b86b0492:;
	}
}



inline void _1ce728879_Eval::_method_push_reference_to_fn(jule::Ptr<_1e83d630e_FnIns>& _43844_f) {
	(*this)._method_push_reference((*(_43844_f))._field_references);
}



inline void _1ce728879_Eval::_method_push_reference_to_var(jule::Ptr<_1ce6cecb4_Var>& _44245_v) {
	if (((*(_44245_v))._field_references != nullptr)) {
		(*this)._method_push_reference((*(_44245_v))._field_references);
	}
}



inline void _1ce728879_Eval::_method_push_reference_to_struct(jule::Ptr<_1e83b84bc_StructIns>& _44848_s) {
	(*this)._method_push_reference((*(_44848_s))._field_references);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method___eval_enum(jule::Ptr<_1e8648917_Enum> _45230_enm) {
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_45230_enm)),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),true,nullptr));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_enum(jule::Ptr<_1e8648917_Enum> _46432_enm,_212ae5c02_Token _46444_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_46432_enm))._field_public,(*(_46432_enm))._field_token)))) {
		(*this)._method_push_err(_46444_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_46432_enm))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	return (*this)._method___eval_enum(_46432_enm);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method___eval_struct(jule::Ptr<_1e83b84bc_StructIns> _47432_s) {
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_47432_s)),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_47432_s),true,nullptr));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_struct(jule::Ptr<_1e83b84bc_StructIns> _48734_s,_212ae5c02_Token _48749_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_48734_s))._field_decl))._field_public,(*((*(_48734_s))._field_decl))._field_token)))) {
		(*this)._method_push_err(_48749_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_48734_s))._field_decl))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*((*(_48734_s))._field_decl))._field_directives,_48749_error_token);
	return (*this)._method___eval_struct(_48734_s);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_fn_ins(jule::Ptr<_1e83d630e_FnIns> _49930_f) {
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_49930_f)),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_49930_f),false,nullptr));
}



inline void _1ce728879_Eval::_method_check_deprecated(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _51240_directives,_212ae5c02_Token _51282_tok) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	jule::Ptr<_2129e3902_Directive> _51713_d = _1ce72a947_find_directive(_51240_directives,jule::Str("deprecated", 10));
	if ((_51713_d != nullptr)) {
		if (((*(_51713_d))._field_args.len() == 0LL)) {
			(*this)._method_push_err(_51282_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			(*this)._method_push_err(_51282_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any((*(_51713_d))._field_args[0LL]._field_kind)}));
		}
		(*this)._method_push_suggestion(jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_fn(jule::Ptr<_1e83d4384_Fn> _52830_f,_212ae5c02_Token _52838_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_52830_f))._field_public,(*(_52830_f))._field_token)))) {
		(*this)._method_push_err(_52838_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_52830_f))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_52830_f))._field_directives,_52838_error_token);
	jule::Ptr<_1e83d630e_FnIns> _53717_ins = (*(_52830_f))._method_instance();
	(*this)._method_push_reference_to_fn(_53717_ins);
	return (*this)._method_eval_fn_ins(_53717_ins);
}



inline void _1ce728879_Eval::_method_push_illegal_cycle_error(jule::Ptr<_1ce6cecb4_Var>& _54244_v1,jule::Ptr<_1ce6cecb4_Var>& _54255_v2,jule::Str& _54270_message) {
	
	jule::Str _54513_refers_to = _212880739_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_54244_v1))._field_ident),jule::Any((*(_54255_v2))._field_ident)}));
	(_54270_message).buffer.insert(0, (((_211e22edb_repeat(jule::Str(" ", 1),4LL) + _54513_refers_to) + jule::Str("\n", 1))));
}



inline jule::Bool _1ce728879_Eval::_method_check_cross_cycle(jule::Ptr<_1ce6cecb4_Var>& _54937_v,jule::Str& _54951_message) {
	{
		auto &expr = (*(_54937_v))._field_depends;
		auto it = expr.begin();
		_iter_begin_1b86cdd40:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> &_1b86cddc8_d = *it;
			{
				if (_1b86cddc8_d == (*this)._field_owner) {
					(*this)._method_push_illegal_cycle_error(_54937_v,_1b86cddc8_d,_54951_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_1b86cddc8_d,_54951_message)))) {
					(*this)._method_push_illegal_cycle_error(_54937_v,_1b86cddc8_d,_54951_message);
					return false;
				}
			}
			_iter_next_1b86cdd40:;
			++it;
			goto _iter_begin_1b86cdd40;
		}
		_iter_end_1b86cdd40:;
	}
	return true;
}



inline jule::Bool _1ce728879_Eval::_method_check_illegal_cycles(jule::Ptr<_1ce6cecb4_Var>& _56844_v,_212ae5c02_Token _56853_decl_token) {
	jule::Bool _56874_ok = jule::Bool();
	if (((*this)._field_owner == nullptr)) {
		_56874_ok = true;
		return _56874_ok;
	}
	if ((*this)._field_owner == _56844_v) {
		(*this)._method_push_err((*((*this)._field_owner))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_owner))._field_ident)}));
		_56874_ok = false;
		return _56874_ok;
	}
	jule::Str _58017_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_56844_v,_58017_message)))) {
		jule::Str _58321_err_msg = _58017_message;
		_58017_message=jule::Str();
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_56844_v,_58017_message);
		_58321_err_msg=_58321_err_msg + _58017_message;
		(*this)._method_push_err(_56853_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_58321_err_msg)}));
		_56874_ok = false;
		return _56874_ok;
	}
	(*((*this)._field_owner))._field_depends = jule::alloc_for_append((*((*this)._field_owner))._field_depends,1);(*((*this)._field_owner))._field_depends.__push(_56844_v);
	_56874_ok = true;
	return _56874_ok;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_var(jule::Ptr<_1ce6cecb4_Var> _59531_v,_212ae5c02_Token _59540_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_59531_v))._field_public,(*(_59531_v))._field_token)))) {
		(*this)._method_push_err(_59540_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_59531_v))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_59531_v))._field_directives,_59540_error_token);
	(*(_59531_v))._field_used=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6ab345_Sema>>()) {
			_case_begin_1b86d8883:;
			{
				jule::Bool _60917_ok = (*this)._method_check_illegal_cycles(_59531_v,_59540_error_token);
				if ((!(_60917_ok))) {
					return nullptr;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
			_case_begin_1b86d88e9:;
			{
				if ((!((*(_59531_v))._field_reference)) || (*this)._method_is_unsafe()) {
					goto _match_end_1b86d8553;
				}
				jule::Ptr<_1ce6882bc_ScopeChecker> _61921_s = (*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>();
				while (((*(_61921_s))._field_owner == nullptr) && ((*(_61921_s))._field_parent != nullptr)) {
					{
						_61921_s=(*(_61921_s))._field_parent;
					}
				_iter_next_1b86d9e5b:;
				}
				_iter_end_1b86d9e5b:;
				if ((((*(_61921_s))._field_owner != nullptr) && (*((*(_61921_s))._field_owner))._field_anon) && ((*(_59531_v))._field_scope != (*((*(_61921_s))._field_owner))._field_scope)) {
					(*this)._method_push_err(_59540_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>({jule::Any((*(_59531_v))._field_ident)}));
				}
			}
		}
		_match_end_1b86d8553:;
	}
	(*this)._method_push_reference_to_var(_59531_v);
	if ((!((*(_59531_v))._field_cpp_linked)) && (((*(_59531_v))._field_value == nullptr) || ((*((*(_59531_v))._field_value))._field_data == nullptr))) {
		if ((*(_59531_v))._field_constant) {
			(*((*this)._field_s))._method_check_type_var(_59531_v,(*this)._field_s);
			if (((*((*(_59531_v))._field_value))._field_data == nullptr)) {
				return nullptr;
			}
		}
	}
	if (((*(_59531_v))._field_kind == nullptr) || ((*((*(_59531_v))._field_kind))._field_kind == nullptr)) {
		if (((*(_59531_v))._field_scope != nullptr)) {
			return nullptr;
		}
		(*((*this)._field_s))._method_check_type_var(_59531_v,(*this)._field_lookup);
		if (((*(_59531_v))._field_kind == nullptr) || ((*((*(_59531_v))._field_kind))._field_kind == nullptr)) {
			return nullptr;
		}
	}
	jule::Ptr<_1ce727449_Data> _65917_d = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data((*((*(_59531_v))._field_kind))._field_kind,jule::Ptr<_1ce76121e_TypeKind>(),(*(_59531_v))._field_mutable,(*(_59531_v))._field_reference,(!((*(_59531_v))._field_constant)),jule::Bool(),jule::Any(_59531_v),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
	if (((!((*(_59531_v))._field_cpp_linked)) && (*(_59531_v))._method_is_initialized()) && ((*((*(_59531_v))._field_value))._field_data != nullptr)) {
		(*(_65917_d))._field_is_rune=(*((*((*(_59531_v))._field_value))._field_data))._field_is_rune;
	}
	if ((*(_59531_v))._field_constant && ((*((*((*(_59531_v))._field_value))._field_data))._field_constant != nullptr)) {
		(*(_65917_d))._field_constant=jule::new_ptr<_1ce4b898d_Const>((*((*((*((*(_59531_v))._field_value))._field_data))._field_constant)));
		(*(_65917_d))._field_model=jule::Any((*(_65917_d))._field_constant);
	}
	if ((*(_65917_d))._method_is_const()) {
		(*this)._method_apply_numeric_prefix(_65917_d);
	}
	return _65917_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_type_alias(jule::Ptr<_1ce75e6a1_TypeAlias> _68338_ta,_212ae5c02_Token _68354_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_68338_ta))._field_public,(*(_68338_ta))._field_token)))) {
		(*this)._method_push_err(_68354_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_68338_ta))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_68338_ta))._field_used=true;
	jule::Trait<_1ce760828_Kind> _69217_kind = (*((*((*(_68338_ta))._field_kind))._field_kind))._field_kind;
	jule::Ptr<_1ce727449_Data> _69317_d = nullptr;
	{
		auto &_match_expr{ _69217_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b84bc_StructIns>>()) {
			_case_begin_1b86ea312:;
			{
				_69317_d=(*this)._method___eval_struct(_69217_kind.operator jule::Ptr<_1e83b84bc_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e8648917_Enum>>()) {
			_case_begin_1b86ebed4:;
			{
				_69317_d=(*this)._method___eval_enum(_69217_kind.operator jule::Ptr<_1e8648917_Enum>());
			}
		}
		else {
			_case_begin_1b86ea664:;
			{
				_69317_d=jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind((((*(_68338_ta))._field_cpp_linked) ? ((*(_68338_ta))._field_ident) : ((*((*((*(_68338_ta))._field_kind))._field_kind))._field_cpp_ident)),jule::Bool(),jule::Bool(),(*((*((*(_68338_ta))._field_kind))._field_kind))._field_kind)),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ptr<_1ce4b898d_Const>()));
				(*(_69317_d))._field_model=jule::Any((*(_69317_d))._field_kind);
			}
		}
		_match_end_1b86ea60e:;
	}
	(*((*(_69317_d))._field_kind))._field_generic=(*(_68338_ta))._field_generic;
	return _69317_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_def(jule::Any _71331_def,_212ae5c02_Token _71341_ident) {
	{
		auto &_match_expr{ _71331_def };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b86ee635:;
			{
				return (*this)._method_eval_var(_71331_def.operator jule::Ptr<_1ce6cecb4_Var>(),_71341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e8648917_Enum>>()) {
			_case_begin_1b86ee69b:;
			{
				return (*this)._method_eval_enum(_71331_def.operator jule::Ptr<_1e8648917_Enum>(),_71341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b86ee712:;
			{
				return (*this)._method_eval_struct((*(_71331_def.operator jule::Ptr<_1e83b1718_Struct>()))._method_instance(),_71341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d4384_Fn>>()) {
			_case_begin_1b86ee789:;
			{
				jule::Ptr<_1e83d4384_Fn> _72221_f = _71331_def.operator jule::Ptr<_1e83d4384_Fn>();
				if (((*(_72221_f))._field_ident != jule::Str("init", 4))) {
					return (*this)._method_eval_fn(_72221_f,_71341_ident);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d630e_FnIns>>()) {
			_case_begin_1b86ee800:;
			{
				return (*this)._method_eval_fn_ins(_71331_def.operator jule::Ptr<_1e83d630e_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce75e6a1_TypeAlias>>()) {
			_case_begin_1b86ee877:;
			{
				return (*this)._method_eval_type_alias(_71331_def.operator jule::Ptr<_1ce75e6a1_TypeAlias>(),_71341_ident);
			}
		}
		_match_end_1b86ee547:;
	}
	(*this)._method_push_err(_71341_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_71341_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_ident(jule::Ptr<_212b17c02_IdentExpr> _73529_ident) {
	jule::Any _73617_def = (*this)._method_get_def((*(_73529_ident))._field_ident,(*(_73529_ident))._field_cpp_linked);
	return (*this)._method_eval_def(_73617_def,(*(_73529_ident))._field_token);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_unary(jule::Ptr<_212b18142_UnaryExpr> _74034_u) {
	_1ce729825_UnaryEval _74117_unary = _1ce729825_UnaryEval::_static_method_new(this->self);
	return _74117_unary._method_eval(_74034_u);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_variadic(jule::Ptr<_212b18582_VariadicExpr> _74537_v) {
	if ((*(_74537_v))._field_expr == jule::Any(nullptr)) {
		(*(this->self))._method_push_err((*(_74537_v))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce76121e_TypeKind> _75117_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_75117_prefix;
	});
	jule::Ptr<_1ce727449_Data> _75517_d = (*(this->self))._method_eval_expr_kind((*(_74537_v))._field_expr);
	if ((_75517_d == nullptr)) {
		return nullptr;
	}
	if ((!((*((*(_75517_d))._field_kind))._method_variadicable()))) {
		(*(this->self))._method_push_err((*(_74537_v))._field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>({jule::Any((*((*(_75517_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	jule::Ptr<_1ce762e02_Slc> _76513_slc = (*((*(_75517_d))._field_kind))._method_slc();
	(*(_75517_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind((*((*(_76513_slc))._field_elem))._field_cpp_ident,(*((*(_76513_slc))._field_elem))._field_generic,true,(*((*(_76513_slc))._field_elem))._field_kind));
	return _75517_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_unsafe(jule::Ptr<_212b17372_UnsafeExpr> _77535_u) {
	jule::Bool _77613_unsafety = (*(this->self))._field_unsafety;
	(*(this->self))._field_unsafety=true;
	jule::Ptr<_1ce727449_Data> _77917_d = (*(this->self))._method_eval_expr_kind((*(_77535_u))._field_expr);
	(*(this->self))._field_unsafety=_77613_unsafety;
	return _77917_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_arr(jule::Ptr<_212b1b7a5_SliceExpr> _78632_s) {
	jule::Ptr<_1ce764244_Arr> _78817_pt = (*((*(this->self))._field_prefix))._method_arr();
	jule::Ptr<_1ce764244_Arr> _79017_arr = jule::new_struct_ptr<_1ce764244_Arr>(new( std::nothrow ) _1ce764244_Arr(false,0LL,(*(_78817_pt))._field_elem));
	jule::Bool _79617_filled = false;
	if (((*(_78632_s))._field_elems.len() == 2LL)) {
		{
			auto &_match_expr{ (*(_78632_s))._field_elems[1LL] };
			
			if (_match_expr.type_is<jule::Ptr<_212b18582_VariadicExpr>>()) {
				_case_begin_1b871344b:;
				{
					if ((*((*(_78632_s))._field_elems[1LL].operator jule::Ptr<_212b18582_VariadicExpr>()))._field_expr != jule::Any(nullptr)) {
						goto _match_end_1b87133e6;
					}
					if ((*(_78817_pt))._field_auto) {
						(*(this->self))._method_push_err((*(_78632_s))._field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					}
					_79617_filled=true;
					(*(_78632_s))._field_elems=(*(_78632_s))._field_elems.slice(0LL,1LL);
				}
			}
			_match_end_1b87133e6:;
		}
	}
	(*(_79017_arr))._field_n=static_cast<jule::I64>((*(_78632_s))._field_elems.len());
	if ((!((*(_78817_pt))._field_auto))) {
		if ((*(_79017_arr))._field_n > (*(_78817_pt))._field_n) {
			(*(this->self))._method_push_err((*(_78632_s))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if ((*(_79017_arr))._field_n < (*(_78817_pt))._field_n) {
			(*(_79017_arr))._field_n=(*(_78817_pt))._field_n;
		}
	}
	jule::Ptr<_1e83c8004_ArrayExprModel> _82517_model = jule::new_struct<_1e83c8004_ArrayExprModel>(new( std::nothrow ) _1e83c8004_ArrayExprModel(_79017_arr,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(((_79617_filled) ? (2LL) : (static_cast<jule::I64>((*(_78632_s))._field_elems.len())))))));
	jule::Ptr<_1ce76121e_TypeKind> _83017_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_79017_arr))._field_elem;
	{
		auto &expr = (*(_78632_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_1b87193db:;
		if (it != expr.end()) {
			jule::Any _1b87194c9_elem = *it;
			{
				jule::Ptr<_1ce727449_Data> _83321_d = (*(this->self))._method_eval_expr_kind(_1b87194c9_elem);
				if ((_83321_d == nullptr)) {
					goto _iter_next_1b87193db;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_79017_arr))._field_elem,_83321_d,(*(_78632_s))._field_token);
				(*(_82517_model))._field_elems = jule::alloc_for_append((*(_82517_model))._field_elems,1);(*(_82517_model))._field_elems.__push((*(_83321_d))._field_model);
			}
			_iter_next_1b87193db:;
			++it;
			goto _iter_begin_1b87193db;
		}
		_iter_end_1b87193db:;
	}
	(*(this->self))._field_prefix=_83017_prefix;
	if (_79617_filled) {
		(*(_82517_model))._field_elems = jule::alloc_for_append((*(_82517_model))._field_elems,1);(*(_82517_model))._field_elems.__push(jule::Any(nullptr));
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_79017_arr)),jule::Ptr<_1ce76121e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_82517_model),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_exp_slc(jule::Ptr<_212b1b7a5_SliceExpr> _85736_s,jule::Ptr<_1ce76121e_TypeKind> _85755_elem_type) {
	jule::Ptr<_1ce762e02_Slc> _85817_slc = jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc(_85755_elem_type));
	jule::Ptr<_1e83c31b9_SliceExprModel> _86217_model = jule::new_struct<_1e83c31b9_SliceExprModel>(new( std::nothrow ) _1e83c31b9_SliceExprModel(_85755_elem_type,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_85736_s))._field_elems.len()))));
	jule::Ptr<_1ce76121e_TypeKind> _86717_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_85817_slc))._field_elem;
	{
		auto &expr = (*(_85736_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_1b87201b1:;
		if (it != expr.end()) {
			jule::Any _1b872029e_elem = *it;
			{
				jule::Ptr<_1ce727449_Data> _87021_d = (*(this->self))._method_eval_expr_kind(_1b872029e_elem);
				if ((_87021_d == nullptr)) {
					goto _iter_next_1b87201b1;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_85817_slc))._field_elem,_87021_d,(*(_85736_s))._field_token);
				(*(_86217_model))._field_elems = jule::alloc_for_append((*(_86217_model))._field_elems,1);(*(_86217_model))._field_elems.__push((*(_87021_d))._field_model);
			}
			_iter_next_1b87201b1:;
			++it;
			goto _iter_begin_1b87201b1;
		}
		_iter_end_1b87201b1:;
	}
	(*(this->self))._field_prefix=_86717_prefix;
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_85817_slc)),jule::Ptr<_1ce76121e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_86217_model),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_slice_expr(jule::Ptr<_212b1b7a5_SliceExpr> _88939_s) {
	if (((*(this->self))._field_prefix != nullptr)) {
		{
			
			if (((*((*(this->self))._field_prefix))._method_arr() != nullptr)) {
				_case_begin_1b8723dc9:;
				{
					return (*(this->self))._method_eval_arr(_88939_s);
				}
			}
			else if (((*((*(this->self))._field_prefix))._method_slc() != nullptr)) {
				_case_begin_1b8723e51:;
				{
					jule::Ptr<_1ce762e02_Slc> _89625_pt = (*((*(this->self))._field_prefix))._method_slc();
					return (*(this->self))._method_eval_exp_slc(_88939_s,(*(_89625_pt))._field_elem);
				}
			}
			_match_end_1b8723cca:;
		}
	}
	jule::Ptr<_1ce76121e_TypeKind> _90117_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	if (((*(_88939_s))._field_elems.len() == 0LL)) {
		(*(this->self))._method_push_err((*(_88939_s))._field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _90917_first_elem = (*(this->self))._method_eval_expr_kind((*(_88939_s))._field_elems[0LL]);
	if ((_90917_first_elem == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _91417_d = (*(this->self))._method_eval_exp_slc(_88939_s,(*(_90917_first_elem))._field_kind);
	(*(this->self))._field_prefix=_90117_prefix;
	return _91417_d;
}



inline void _1ce728879_Eval::_method_check_integer_indexing_by_data(jule::Ptr<_1ce727449_Data>& _92054_d,_212ae5c02_Token _92064_token) {
	jule::Str _92113_err_key = _1ce72d83a_check_data_for_integer_indexing(_92054_d);
	{
		auto &_match_expr{ _92113_err_key };
		
		if (_match_expr == jule::Str()) {
			_case_begin_1b872ad59:;
			{
				return;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_1b872ac16:;
			{
				(*this)._method_push_err(_92064_token,_92113_err_key,jule::Slice<jule::Any>({jule::Any((*((*(_92054_d))._field_kind))._method_to_str())}));
			}
		}
		else {
			_case_begin_1b872a386:;
			{
				(*this)._method_push_err(_92064_token,_92113_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_1b872a892:;
	}
}



inline void _1ce728879_Eval::_method_indexing_ptr(jule::Ptr<_1ce727449_Data>& _93436_d,jule::Ptr<_1ce727449_Data>& _93451_index,jule::Ptr<_212b1bbe5_IndexingExpr>& _93466_i) {
	(*this)._method_check_integer_indexing_by_data(_93451_index,(*(_93466_i))._field_token);
	jule::Ptr<_1ce7649e7_Ptr> _93717_ptr = (*((*(_93436_d))._field_kind))._method_ptr();
	{
		
		if ((*(_93717_ptr))._method_is_unsafe()) {
			_case_begin_1b872e0d2:;
			{
				(*this)._method_push_err((*(_93466_i))._field_token,jule::Str("unsafe pointers are not supports indexing", 41),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((!((*this)._method_is_unsafe()))) {
			_case_begin_1b872e148:;
			{
				(*this)._method_push_err((*(_93466_i))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b872dec2:;
	}
	(*(_93436_d))._field_kind=(*(_93717_ptr))._field_elem;
}



inline void _1ce728879_Eval::_method_indexing_arr(jule::Ptr<_1ce727449_Data>& _95036_d,jule::Ptr<_1ce727449_Data>& _95051_index,jule::Ptr<_212b1bbe5_IndexingExpr>& _95066_i) {
	jule::Ptr<_1ce764244_Arr> _95117_arr = (*((*(_95036_d))._field_kind))._method_arr();
	(*(_95036_d))._field_kind=(*(_95117_arr))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_95051_index,(*(_95066_i))._field_token);
	if ((*(_95051_index))._method_is_const() && ((*((*(_95051_index))._field_constant))._method_as_f64() >= static_cast<jule::F64>(static_cast<jule::F64>((*(_95117_arr))._field_n)))) {
		(*this)._method_push_err((*(_95066_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	}
}



inline void _1ce728879_Eval::_method_indexing_slc(jule::Ptr<_1ce727449_Data>& _95936_d,jule::Ptr<_1ce727449_Data>& _95951_index,jule::Ptr<_212b1bbe5_IndexingExpr>& _95966_i) {
	jule::Ptr<_1ce762e02_Slc> _96017_slc = (*((*(_95936_d))._field_kind))._method_slc();
	(*(_95936_d))._field_kind=(*(_96017_slc))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_95951_index,(*(_95966_i))._field_token);
	if ((!((*(_95951_index))._method_is_const()))) {
		return;
	}
	{
		auto &_match_expr{ (*(_95936_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c31b9_SliceExprModel>>()) {
			_case_begin_1b87375e6:;
			{
				jule::Ptr<_1e83c31b9_SliceExprModel> _97021_m = (*(_95936_d))._field_model.operator jule::Ptr<_1e83c31b9_SliceExprModel>();
				jule::F64 _97117_indx = (*((*(_95951_index))._field_constant))._method_as_f64();
				if (_97117_indx >= static_cast<jule::F64>(static_cast<jule::F64>((*(_97021_m))._field_elems.len()))) {
					(*this)._method_push_err((*(_95966_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(*(_95936_d))._field_model=(*(_97021_m))._field_elems[static_cast<jule::I64>(static_cast<jule::U64>(_97117_indx))];
					(*(_95936_d))._field_decl=true;
				}
			}
		}
		_match_end_1b873753b:;
	}
}



inline void _1ce728879_Eval::_method_indexing_map(jule::Ptr<_1ce727449_Data>& _98136_d,jule::Ptr<_1ce727449_Data>& _98151_index,jule::Ptr<_212b1bbe5_IndexingExpr>& _98170_i) {
	if ((_98151_index == nullptr)) {
		return;
	}
	jule::Ptr<_1ce763b39_Map> _98617_m = (*((*(_98136_d))._field_kind))._method_map();
	_1ce70c671_AssignTypeChecker _98717_atc = _1ce70c671_AssignTypeChecker((*this)._field_s,(*(_98617_m))._field_key,_98151_index,(*(_98170_i))._field_token);
	_98717_atc._method_check();
	(*(_98136_d))._field_kind=(*(_98617_m))._field_val;
}



inline void _1ce728879_Eval::_method_indexing_str(jule::Ptr<_1ce727449_Data>& _99836_d,jule::Ptr<_1ce727449_Data>& _99851_index,jule::Ptr<_212b1bbe5_IndexingExpr>& _99866_i) {
	
	(*(_99836_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u8", 2))));
	if ((_99851_index == nullptr)) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_99851_index,(*(_99866_i))._field_token);
	if ((!((*(_99851_index))._method_is_const()))) {
		(*(_99836_d))._field_constant=nullptr;
		return;
	}
	if ((*(_99836_d))._method_is_const()) {
		_212ae5c02_Token _101417_error_token = (*(_99866_i))._field_token;
		jule::I64 _101517_j = (*((*(_99851_index))._field_constant))._method_as_i64();
		jule::Str _101617_s = (*((*(_99836_d))._field_constant))._method_read_str();
		if (static_cast<jule::I64>(_101517_j) >= static_cast<jule::I64>(_101617_s.len())) {
			(*this)._method_push_err(_101417_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			(*((*(_99836_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(_101617_s[_101517_j])));
		}
	}
}



inline void _1ce728879_Eval::_method_to_indexing(jule::Ptr<_1ce727449_Data>& _102535_d,jule::Ptr<_1ce727449_Data>& _102550_index,jule::Ptr<_212b1bbe5_IndexingExpr>& _102569_i) {
	{
		
		if (((*((*(_102535_d))._field_kind))._method_ptr() != nullptr)) {
			_case_begin_1b8745390:;
			{
				(*this)._method_indexing_ptr(_102535_d,_102550_index,_102569_i);
				return;
			}
		}
		else if (((*((*(_102535_d))._field_kind))._method_arr() != nullptr)) {
			_case_begin_1b8745417:;
			{
				(*this)._method_indexing_arr(_102535_d,_102550_index,_102569_i);
				return;
			}
		}
		else if (((*((*(_102535_d))._field_kind))._method_slc() != nullptr)) {
			_case_begin_1b874548e:;
			{
				(*this)._method_indexing_slc(_102535_d,_102550_index,_102569_i);
				return;
			}
		}
		else if (((*((*(_102535_d))._field_kind))._method_map() != nullptr)) {
			_case_begin_1b8745516:;
			{
				(*this)._method_indexing_map(_102535_d,_102550_index,_102569_i);
				return;
			}
		}
		else if (((*((*(_102535_d))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b874558d:;
			{
				jule::Ptr<_1ce762330_Prim> _104417_prim = (*((*(_102535_d))._field_kind))._method_prim();
				{
					
					if ((*(_104417_prim))._method_is_str()) {
						_case_begin_1b874a4e9:;
						{
							(*this)._method_indexing_str(_102535_d,_102550_index,_102569_i);
							return;
						}
					}
					_match_end_1b874a450:;
				}
			}
		}
		_match_end_1b874525d:;
	}
	(*this)._method_push_err((*(_102569_i))._field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>({jule::Any((*((*(_102535_d))._field_kind))._method_to_str())}));
}



inline jule::Bool _1ce728879_Eval::_method_push_generics_from_index_data(jule::Ptr<_2129908e3_IdentTypeDecl>& _105554_decl,jule::Ptr<_212b1bbe5_IndexingExpr>& _105581_i) {
	{
		auto &_match_expr{ (*(_105581_i))._field_index };
		
		if (_match_expr.type_is<jule::Ptr<_212b18142_UnaryExpr>>()) {
			_case_begin_1b874d981:;
			{
				jule::Ptr<_1ce727449_Data> _106021_d = (*(this->self))._method_eval_unary((*(_105581_i))._field_index.operator jule::Ptr<_212b18142_UnaryExpr>());
				if ((!((*(_106021_d))._field_decl))) {
					(*(this->self))._method_push_err((*(_105581_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return false;
				}
				(*(_105554_decl))._field_generics = jule::alloc_for_append((*(_105554_decl))._field_generics,1);(*(_105554_decl))._field_generics.__push(jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_212ae5c02_Token(),jule::Any((*(_106021_d))._field_kind))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2129e3d42_TypeDecl>>()) {
			_case_begin_1b874d9e7:;
			{
				(*(_105554_decl))._field_generics = jule::alloc_for_append((*(_105554_decl))._field_generics,1);(*(_105554_decl))._field_generics.__push((*(_105581_i))._field_index.operator jule::Ptr<_2129e3d42_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b17c02_IdentExpr>>()) {
			_case_begin_1b874cba0:;
			{
				jule::Ptr<_212b17c02_IdentExpr> _107121_expr = (*(_105581_i))._field_index.operator jule::Ptr<_212b17c02_IdentExpr>();
				(*(_105554_decl))._field_generics = jule::alloc_for_append((*(_105554_decl))._field_generics,1);(*(_105554_decl))._field_generics.__push(jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_212ae5c02_Token(),jule::Any(jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl((*(_107121_expr))._field_token,(*(_107121_expr))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>()))))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b169e2_TupleExpr>>()) {
			_case_begin_1b874cc16:;
			{
				{
					auto &expr = (*((*(_105581_i))._field_index.operator jule::Ptr<_212b169e2_TupleExpr>()))._field_expr;
					auto it = expr.begin();
					_iter_begin_1b8752aa6:;
					if (it != expr.end()) {
						jule::Ptr<_212b16162_Expr> _1b8752aea_expr = *it;
						{
							{
								auto &_match_expr{ (*(_1b8752aea_expr))._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_2129e3d42_TypeDecl>>()) {
									_case_begin_1b8754316:;
									{
										(*(_105554_decl))._field_generics = jule::alloc_for_append((*(_105554_decl))._field_generics,1);(*(_105554_decl))._field_generics.__push((*(_1b8752aea_expr))._field_kind.operator jule::Ptr<_2129e3d42_TypeDecl>());
									}
								}
								else if (_match_expr.type_is<jule::Ptr<_212b17c02_IdentExpr>>()) {
									_case_begin_1b875437c:;
									{
										jule::Ptr<_212b17c02_IdentExpr> _108429_expr = (*(_1b8752aea_expr))._field_kind.operator jule::Ptr<_212b17c02_IdentExpr>();
										(*(_105554_decl))._field_generics = jule::alloc_for_append((*(_105554_decl))._field_generics,1);(*(_105554_decl))._field_generics.__push(jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_212ae5c02_Token(),jule::Any(jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl((*(_108429_expr))._field_token,(*(_108429_expr))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>()))))));
									}
								}
								_match_end_1b87542b1:;
							}
						}
						_iter_next_1b8752aa6:;
						++it;
						goto _iter_begin_1b8752aa6;
					}
					_iter_end_1b8752aa6:;
				}
			}
		}
		else {
			_case_begin_1b874ca3a:;
			{
				(*(this->self))._method_push_err((*(_105581_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return false;
			}
		}
		_match_end_1b874c9a2:;
	}
	return true;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_ident_decl_from_indexing(jule::Ptr<_1ce727449_Data>& _110054_d,jule::Ptr<_212b1bbe5_IndexingExpr>& _110069_i) {
	jule::Ptr<_2129e3d42_TypeDecl> _110117_tdecl = jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl());
	jule::Ptr<_2129908e3_IdentTypeDecl> _110217_decl = nullptr;
	{
		auto &_match_expr{ (*(_110069_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_212b17c02_IdentExpr>>()) {
			_case_begin_1b8758a9b:;
			{
				jule::Ptr<_212b17c02_IdentExpr> _110521_expr = (*(_110069_i))._field_expr.operator jule::Ptr<_212b17c02_IdentExpr>();
				_110217_decl=jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl((*(_110521_expr))._field_token,(*(_110521_expr))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>()));
				(*(_110117_tdecl))._field_kind=jule::Any(_110217_decl);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b18e12_NsSelectionExpr>>()) {
			_case_begin_1b8758b89:;
			{
				jule::Ptr<_212b18e12_NsSelectionExpr> _111221_expr = (*(_110069_i))._field_expr.operator jule::Ptr<_212b18e12_NsSelectionExpr>();
				_110217_decl=jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl((*(_111221_expr))._field_ident,(*(_111221_expr))._field_ident._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>()));
				(*(_110117_tdecl))._field_kind=jule::Any(jule::new_struct<_21298e309_NamespaceTypeDecl>(new( std::nothrow ) _21298e309_NamespaceTypeDecl((*(_111221_expr))._field_ns,_110217_decl)));
			}
		}
		else {
			_case_begin_1b8757c65:;
			{
				(*(this->self))._method_push_err((*(_110069_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_1b8757bcc:;
	}
	if ((!((*(this->self))._method_push_generics_from_index_data(_110217_decl,_110069_i)))) {
		return nullptr;
	}
	return (*(this->self))._method_eval_type(_110117_tdecl);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_indexing(jule::Ptr<_212b1bbe5_IndexingExpr> _113137_i) {
	jule::Ptr<_1ce76121e_TypeKind> _113217_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_113217_prefix;
	});
	jule::Ptr<_1ce727449_Data> _113617_d = (*(this->self))._method_eval_expr_kind((*(_113137_i))._field_expr);
	if ((_113617_d == nullptr)) {
		return nullptr;
	}
	if ((*(_113617_d))._field_decl) {
		return (*(this->self))._method_eval_ident_decl_from_indexing(_113617_d,_113137_i);
	}
	_1ce727449_Data _114617_old_d = (*(_113617_d));
	jule::Ptr<_1ce727449_Data> _114817_index = (*(this->self))._method_eval_expr_kind((*(_113137_i))._field_index);
	if ((_114817_index == nullptr)) {
		return nullptr;
	}
	(*(_113617_d))._field_decl=false;
	(*(this->self))._method_to_indexing(_113617_d,_114817_index,_113137_i);
	if ((*(_113617_d))._method_is_const()) {
		(*(_113617_d))._field_decl=false;
		(*(_113617_d))._field_model=jule::Any((*(_113617_d))._field_constant);
	} else if ((*(_113617_d))._field_decl) {
		(*(_113617_d))._field_decl=false;
	} else {
		(*(_113617_d))._field_model=jule::Any(jule::new_struct<_1e83c3928_IndexingExprModel>(new( std::nothrow ) _1e83c3928_IndexingExprModel((*(_113137_i))._field_token,jule::new_ptr<_1ce727449_Data>(_114617_old_d),_114817_index)));
	}
	return _113617_d;
}



inline std::tuple<jule::Ptr<_1ce727449_Data>,jule::Ptr<_1ce727449_Data>> _1ce728879_Eval::_method_eval_slicing_exprs(jule::Ptr<_212b1c135_SlicingExpr>& _117943_s) {
	jule::Ptr<_1ce76121e_TypeKind> _118017_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_118017_prefix;
	});
	jule::Ptr<_1ce727449_Data> _118417_l = nullptr;
	jule::Ptr<_1ce727449_Data> _118517_r = nullptr;
	if ((*(_117943_s))._field_start != jule::Any(nullptr)) {
		_118417_l=(*(this->self))._method_eval_expr_kind((*(_117943_s))._field_start);
		if ((_118417_l != nullptr)) {
			(*(this->self))._method_check_integer_indexing_by_data(_118417_l,(*(_117943_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	} else {
		_118417_l=jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1ce4b898d_Const::_static_method_new_i64(0LL)));
		(*(_118417_l))._field_model=jule::Any((*(_118417_l))._field_constant);
	}
	if ((*(_117943_s))._field_to != jule::Any(nullptr)) {
		_118517_r=(*(this->self))._method_eval_expr_kind((*(_117943_s))._field_to);
		if ((_118517_r != nullptr)) {
			(*(this->self))._method_check_integer_indexing_by_data(_118517_r,(*(_117943_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	}
	return std::make_tuple(_118417_l,_118517_r);
}



inline void _1ce728879_Eval::_method_slicing_arr(jule::Ptr<_1ce727449_Data>& _121431_d) {
	jule::Ptr<_1ce76121e_TypeKind> _121517_elem_type = (*((*((*(_121431_d))._field_kind))._method_arr()))._field_elem;
	(*(_121431_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc(_121517_elem_type))));
	(*(_121431_d))._field_lvalue=false;
	(*(_121431_d))._field_mutable=(*(_121431_d))._field_mutable || (!((*(_121517_elem_type))._method_mutable()));
}



inline void _1ce728879_Eval::_method_slicing_str(jule::Ptr<_1ce727449_Data>& _122931_d,jule::Ptr<_1ce727449_Data>& _122942_l,jule::Ptr<_1ce727449_Data>& _122953_r) {
	(*(_122931_d))._field_lvalue=false;
	(*(_122931_d))._field_mutable=true;
	if ((!((*(_122931_d))._method_is_const()))) {
		return;
	}
	if ((_122942_l == nullptr) || (_122953_r == nullptr)) {
		(*(_122931_d))._field_constant=nullptr;
		return;
	}
	if ((*(_122942_l))._method_is_const() && (*(_122953_r))._method_is_const()) {
		jule::I64 _124217_left = (*((*(_122942_l))._field_constant))._method_as_i64();
		if ((_124217_left < 0LL)) {
			return;
		}
		jule::Str _124717_s = (*((*(_122931_d))._field_constant))._method_read_str();
		jule::I64 _124821_right = 0LL;
		if ((_122953_r == nullptr)) {
			_124821_right=static_cast<jule::I64>(static_cast<jule::I64>(_124717_s.len()));
		} else {
			_124821_right=static_cast<jule::I64>((*((*(_122953_r))._field_constant))._method_as_i64());
		}
		if (_124217_left > _124821_right) {
			return;
		}
		(*((*(_122931_d))._field_constant))._method_set_str(_124717_s.slice(_124217_left,_124821_right));
		(*(_122931_d))._field_decl=true;
	} else {
		(*(_122931_d))._field_constant=nullptr;
	}
}



inline void _1ce728879_Eval::_method_check_slicing(jule::Ptr<_1ce727449_Data>& _126537_d,jule::Ptr<_1ce727449_Data>& _126548_l,jule::Ptr<_1ce727449_Data>& _126559_r,jule::Ptr<_212b1c135_SlicingExpr>& _126570_s) {
	{
		
		if (((*((*(_126537_d))._field_kind))._method_arr() != nullptr)) {
			_case_begin_1b8775832:;
			{
				(*this)._method_slicing_arr(_126537_d);
				return;
			}
		}
		else if (((*((*(_126537_d))._field_kind))._method_slc() != nullptr)) {
			_case_begin_1b87758a9:;
			{
				return;
			}
		}
		else if (((*((*(_126537_d))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b8775931:;
			{
				jule::Ptr<_1ce762330_Prim> _127317_prim = (*((*(_126537_d))._field_kind))._method_prim();
				{
					
					if ((*(_127317_prim))._method_is_str()) {
						_case_begin_1b8778406:;
						{
							(*this)._method_slicing_str(_126537_d,_126548_l,_126559_r);
							return;
						}
					}
					_match_end_1b877835c:;
				}
			}
		}
		_match_end_1b8775766:;
	}
	(*this)._method_push_err((*(_126570_s))._field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>({jule::Any((*((*(_126537_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_slicing(jule::Ptr<_212b1c135_SlicingExpr> _128436_s) {
	jule::Ptr<_1ce727449_Data> _128517_d = (*(this->self))._method_eval_expr_kind((*(_128436_s))._field_expr);
	if ((_128517_d == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _129018_l;
	jule::Ptr<_1ce727449_Data> _129025_r;
	std::tie(_129018_l,_129025_r) = (*(this->self))._method_eval_slicing_exprs(_128436_s);
	if ((_129018_l == nullptr)) {
		return _128517_d;
	}
	(*(_128517_d))._field_decl=false;
	(*(this->self))._method_check_slicing(_128517_d,_129018_l,_129025_r,_128436_s);
	(*(_128517_d))._field_cast_kind=nullptr;
	if ((*(_128517_d))._method_is_const()) {
		(*(_128517_d))._field_decl=false;
		(*(_128517_d))._field_model=jule::Any((*(_128517_d))._field_constant);
	} else if ((*(_128517_d))._field_decl) {
		(*(_128517_d))._field_decl=false;
	} else {
		jule::Ptr<_1e83c585e_SlicingExprModel> _130921_model = jule::new_struct<_1e83c585e_SlicingExprModel>(new( std::nothrow ) _1e83c585e_SlicingExprModel((*(_128436_s))._field_token,(*(_128517_d))._field_model,(*(_129018_l))._field_model,jule::Any()));
		if ((_129025_r != nullptr)) {
			(*(_130921_model))._field_right=(*(_129025_r))._field_model;
		}
		(*(_128517_d))._field_model=jule::Any(_130921_model);
	}
	return _128517_d;
}



inline void _1ce728879_Eval::_method_cast_ptr(jule::Ptr<_1ce76121e_TypeKind> _132231_t,jule::Ptr<_1ce727449_Data> _132249_d,_212ae5c02_Token _132259_error_token) {
	jule::Ptr<_1ce76286e_Sptr> _132313_sptr = (*((*(_132249_d))._field_kind))._method_sptr();
	if ((_132313_sptr != nullptr)) {
		if ((!((*((*((*(_132231_t))._method_ptr()))._field_elem))._method_equals((*(_132313_sptr))._field_elem)))) {
			(*this)._method_push_err(_132259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_132249_d))._field_kind))._method_to_str()),jule::Any((*(_132231_t))._method_to_str())}));
		}
		return;
	}
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_132259_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ce762330_Prim> _133613_prim = (*((*(_132249_d))._field_kind))._method_prim();
	if (((*((*(_132249_d))._field_kind))._method_ptr() == nullptr) && ((_133613_prim == nullptr) || (!(_1ce682173_is_int((*(_133613_prim))._method_to_str()))))) {
		(*this)._method_push_err(_132259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_132249_d))._field_kind))._method_to_str()),jule::Any((*(_132231_t))._method_to_str())}));
	}
	(*(_132249_d))._field_constant=nullptr;
}



inline void _1ce728879_Eval::_method_cast_struct(jule::Ptr<_1ce76121e_TypeKind> _134434_t,jule::Ptr<_1ce727449_Data> _134452_d,_212ae5c02_Token _134462_error_token) {
	jule::Ptr<_1e85a7865_Trait> _134517_tr = (*((*(_134452_d))._field_kind))._method_trt();
	if ((_134517_tr == nullptr)) {
		(*this)._method_push_err(_134462_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_134452_d))._field_kind))._method_to_str()),jule::Any((*(_134434_t))._method_to_str())}));
		return;
	}
	jule::Ptr<_1e83b84bc_StructIns> _135117_s = (*(_134434_t))._method_strct();
	(*this)._method_push_reference_to_struct(_135117_s);
	if ((!((*((*(_135117_s))._field_decl))._method_is_implements(_134517_tr)))) {
		(*this)._method_push_err(_134462_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_134452_d))._field_kind))._method_to_str()),jule::Any((*(_134434_t))._method_to_str())}));
	}
}



inline void _1ce728879_Eval::_method_cast_ref(jule::Ptr<_1ce76121e_TypeKind> _135931_t,jule::Ptr<_1ce727449_Data> _135949_d,_212ae5c02_Token _135959_error_token) {
	jule::Ptr<_1ce76286e_Sptr> _136017_sptr = (*(_135931_t))._method_sptr();
	jule::Ptr<_1ce7649e7_Ptr> _136217_ptr = (*((*(_135949_d))._field_kind))._method_ptr();
	if ((_136217_ptr != nullptr) && (*((*(_136017_sptr))._field_elem))._method_equals((*(_136217_ptr))._field_elem)) {
		if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_135959_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		}
		return;
	}
	if (((*((*(_136017_sptr))._field_elem))._method_strct() != nullptr)) {
		(*this)._method_cast_struct((*(_136017_sptr))._field_elem,_135949_d,_135959_error_token);
		return;
	}
	(*this)._method_push_err(_135959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_135949_d))._field_kind))._method_to_str()),jule::Any((*(_135931_t))._method_to_str())}));
}



inline void _1ce728879_Eval::_method_cast_slc(jule::Ptr<_1ce76121e_TypeKind> _138131_t,jule::Ptr<_1ce727449_Data> _138149_d,_212ae5c02_Token _138159_error_token) {
	if (((*((*(_138149_d))._field_kind))._method_enm() != nullptr)) {
		if (((*((*((*((*((*(_138149_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim() == nullptr) || (!((*((*((*((*((*((*(_138149_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._method_is_str()))) {
			(*this)._method_push_err(_138159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_138149_d))._field_kind))._method_to_str()),jule::Any((*(_138131_t))._method_to_str())}));
			return;
		}
	} else if (((*((*(_138149_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_138149_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*this)._method_push_err(_138159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_138149_d))._field_kind))._method_to_str()),jule::Any((*(_138131_t))._method_to_str())}));
		return;
	}
	_138131_t=(*((*(_138131_t))._method_slc()))._field_elem;
	jule::Ptr<_1ce762330_Prim> _139313_prim = (*(_138131_t))._method_prim();
	if ((_139313_prim == nullptr) || ((!((*(_139313_prim))._method_is_u8())) && (!((*(_139313_prim))._method_is_i32())))) {
		(*this)._method_push_err(_138159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_138149_d))._field_kind))._method_to_str()),jule::Any((*(_138131_t))._method_to_str())}));
	}
}



inline void _1ce728879_Eval::_method_cast_str(jule::Ptr<_1ce727449_Data> _139931_d,_212ae5c02_Token _139941_error_token) {
	if (((*((*(_139931_d))._field_kind))._method_enm() != nullptr)) {
		jule::Ptr<_1e8648917_Enum> _140121_e = (*((*(_139931_d))._field_kind))._method_enm();
		if (((*((*((*(_140121_e))._field_kind))._field_kind))._method_prim() != nullptr) && (*((*((*((*(_140121_e))._field_kind))._field_kind))._method_prim()))._method_is_str()) {
			return;
		}
	}
	if (((*((*(_139931_d))._field_kind))._method_prim() != nullptr)) {
		jule::Ptr<_1ce762330_Prim> _140817_prim = (*((*(_139931_d))._field_kind))._method_prim();
		if ((!((*(_140817_prim))._method_is_u8())) && (!((*(_140817_prim))._method_is_i32()))) {
			(*this)._method_push_err(_139941_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_139931_d))._field_kind))._method_to_str())}));
		}
		return;
	}
	if (((*((*(_139931_d))._field_kind))._method_slc() == nullptr)) {
		(*this)._method_push_err(_139941_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_139931_d))._field_kind))._method_to_str())}));
		return;
	}
	jule::Ptr<_1ce76121e_TypeKind> _142017_t = (*((*((*(_139931_d))._field_kind))._method_slc()))._field_elem;
	jule::Ptr<_1ce762330_Prim> _142113_prim = (*(_142017_t))._method_prim();
	if ((_142113_prim == nullptr) || ((!((*(_142113_prim))._method_is_u8())) && (!((*(_142113_prim))._method_is_i32())))) {
		(*this)._method_push_err(_139941_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_139931_d))._field_kind))._method_to_str())}));
	}
}



inline void _1ce728879_Eval::_method_cast_int(jule::Ptr<_1ce76121e_TypeKind> _142731_t,jule::Ptr<_1ce727449_Data> _142749_d,_212ae5c02_Token _142759_error_token) {
	if ((*(_142749_d))._method_is_const()) {
		jule::Ptr<_1ce762330_Prim> _142917_prim = (*(_142731_t))._method_prim();
		{
			
			if (_1ce6818d1_is_sig_int((*(_142917_prim))._field_kind)) {
				_case_begin_1b87ab99a:;
				{
					(*((*(_142749_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_142749_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_1ce681caa_is_unsig_int((*(_142917_prim))._field_kind)) {
				_case_begin_1b87aba22:;
				{
					(*((*(_142749_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_142749_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_1b87ab8e0:;
		}
	}
	if (((*((*(_142749_d))._field_kind))._method_enm() != nullptr)) {
		jule::Ptr<_1e8648917_Enum> _144017_e = (*((*(_142749_d))._field_kind))._method_enm();
		if (_1ce6828d2_is_num((*((*((*(_144017_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	if (((*((*(_142749_d))._field_kind))._method_sptr() != nullptr)) {
		jule::Ptr<_1ce762330_Prim> _144717_prim = (*(_142731_t))._method_prim();
		if ((!((*(_144717_prim))._method_is_uintptr()))) {
			(*this)._method_push_err(_142759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_142749_d))._field_kind))._method_to_str()),jule::Any((*(_142731_t))._method_to_str())}));
		}
		return;
	}
	if (((*((*(_142749_d))._field_kind))._method_ptr() != nullptr)) {
		jule::Ptr<_1ce762330_Prim> _145417_prim = (*(_142731_t))._method_prim();
		if ((*(_145417_prim))._method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_142759_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if (((((!((*(_145417_prim))._method_is_i32())) && (!((*(_145417_prim))._method_is_i64()))) && (!((*(_145417_prim))._method_is_u16()))) && (!((*(_145417_prim))._method_is_u32()))) && (!((*(_145417_prim))._method_is_u64()))) {
			(*this)._method_push_err(_142759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_142749_d))._field_kind))._method_to_str()),jule::Any((*(_142731_t))._method_to_str())}));
		}
		return;
	}
	jule::Ptr<_1ce762330_Prim> _146513_prim = (*((*(_142749_d))._field_kind))._method_prim();
	if ((_146513_prim != nullptr) && _1ce6828d2_is_num((*(_146513_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_142759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_142749_d))._field_kind))._method_to_str()),jule::Any((*(_142731_t))._method_to_str())}));
}



inline void _1ce728879_Eval::_method_cast_num(jule::Ptr<_1ce76121e_TypeKind> _147331_t,jule::Ptr<_1ce727449_Data> _147349_d,_212ae5c02_Token _147359_error_token) {
	if ((*(_147349_d))._method_is_const()) {
		jule::Ptr<_1ce762330_Prim> _147517_prim = (*(_147331_t))._method_prim();
		{
			
			if (_1ce6825b3_is_float((*(_147517_prim))._field_kind)) {
				_case_begin_1b87bb746:;
				{
					(*((*(_147349_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_147349_d))._field_constant))._method_as_f64()));
				}
			}
			else if (_1ce6818d1_is_sig_int((*(_147517_prim))._field_kind)) {
				_case_begin_1b87bb7bd:;
				{
					(*((*(_147349_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_147349_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_1ce681caa_is_unsig_int((*(_147517_prim))._field_kind)) {
				_case_begin_1b87bb845:;
				{
					(*((*(_147349_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_147349_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_1b87bb67a:;
		}
	}
	if (((*((*(_147349_d))._field_kind))._method_enm() != nullptr)) {
		jule::Ptr<_1e8648917_Enum> _148717_e = (*((*(_147349_d))._field_kind))._method_enm();
		if (_1ce6828d2_is_num((*((*((*(_148717_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	jule::Ptr<_1ce762330_Prim> _149313_prim = (*((*(_147349_d))._field_kind))._method_prim();
	if ((_149313_prim != nullptr) && _1ce6828d2_is_num((*(_149313_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_147359_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_147349_d))._field_kind))._method_to_str()),jule::Any((*(_147331_t))._method_to_str())}));
}



inline void _1ce728879_Eval::_method_cast_prim(jule::Ptr<_1ce76121e_TypeKind> _150132_t,jule::Ptr<_1ce727449_Data> _150150_d,_212ae5c02_Token _150160_error_token) {
	jule::Ptr<_1ce762330_Prim> _150213_prim = (*(_150132_t))._method_prim();
	{
		
		if ((*(_150213_prim))._method_is_any()) {
			_case_begin_1b87c4dc0:;
		}
		else if ((*(_150213_prim))._method_is_str()) {
			_case_begin_1b87c4b8e:;
			{
				(*this)._method_cast_str(_150150_d,_150160_error_token);
			}
		}
		else if (_1ce682173_is_int((*(_150213_prim))._method_to_str())) {
			_case_begin_1b87c4c05:;
			{
				(*this)._method_cast_int(_150132_t,_150150_d,_150160_error_token);
			}
		}
		else if (_1ce6828d2_is_num((*(_150213_prim))._method_to_str())) {
			_case_begin_1b87c4c6b:;
			{
				(*this)._method_cast_num(_150132_t,_150150_d,_150160_error_token);
			}
		}
		else {
			_case_begin_1b87c4a29:;
			{
				(*this)._method_push_err(_150160_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_150132_t))._method_to_str())}));
			}
		}
		_match_end_1b87c49a2:;
	}
}



inline void _1ce728879_Eval::_method_cast_constant(jule::Ptr<_1ce76121e_TypeKind>& _151737_t,jule::Ptr<_1ce727449_Data>& _151756_d) {
	if ((_151756_d == nullptr) || (!((*(_151756_d))._method_is_const()))) {
		return;
	}
	jule::Ptr<_1ce762330_Prim> _152113_prim = (*(_151737_t))._method_prim();
	_1ce72e2db_cast_const_by_type((*(_152113_prim))._field_kind,_151756_d);
	(*(_151756_d))._field_model=jule::Any((*(_151756_d))._field_constant);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_cast_by_type_n_data(jule::Ptr<_1ce76121e_TypeKind> _152647_t,jule::Ptr<_1ce727449_Data> _152665_d,_212ae5c02_Token _152679_error_token) {
	if ((_152665_d != nullptr) && (*(_152665_d))._field_decl) {
		(*this)._method_push_err(_152679_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	{
		
		if (((*((*(_152665_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_152665_d))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_1b87cc8ab:;
			{
				if (((*(_152647_t))._method_enm() != nullptr)) {
					(*this)._method_push_err(_152679_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				}
			}
		}
		else if (((*(_152647_t))._method_ptr() != nullptr)) {
			_case_begin_1b87cc67a:;
			{
				(*this)._method_cast_ptr(_152647_t,_152665_d,_152679_error_token);
			}
		}
		else if (((*(_152647_t))._method_sptr() != nullptr)) {
			_case_begin_1b87cc6e1:;
			{
				(*this)._method_cast_ref(_152647_t,_152665_d,_152679_error_token);
			}
		}
		else if (((*(_152647_t))._method_slc() != nullptr)) {
			_case_begin_1b87cc757:;
			{
				(*this)._method_cast_slc(_152647_t,_152665_d,_152679_error_token);
			}
		}
		else if (((*(_152647_t))._method_strct() != nullptr)) {
			_case_begin_1b87cc7bd:;
			{
				(*this)._method_cast_struct(_152647_t,_152665_d,_152679_error_token);
			}
		}
		else if (((*(_152647_t))._method_prim() != nullptr)) {
			_case_begin_1b87cd68c:;
			{
				(*this)._method_cast_prim(_152647_t,_152665_d,_152679_error_token);
				(*this)._method_cast_constant(_152647_t,_152665_d);
			}
		}
		else {
			_case_begin_1b87cc515:;
			{
				(*this)._method_push_err(_152679_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_152647_t))._method_to_str())}));
				_152665_d=nullptr;
			}
		}
		_match_end_1b87cc49e:;
	}
	if ((_152665_d == nullptr)) {
		return nullptr;
	}
	(*(_152665_d))._field_mutable=(*(_152665_d))._field_mutable || ((!((*((*(_152665_d))._field_kind))._method_mutable())) && (*(_152647_t))._method_mutable());
	(*(_152665_d))._field_lvalue=false;
	(*(_152665_d))._field_decl=false;
	if (((*((*(_152665_d))._field_kind))._method_enm() == nullptr) || (!((*((*((*((*((*(_152665_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_equals(_152647_t)))) {
		(*(_152665_d))._field_cast_kind=_152647_t;
		_1ce72d30c_apply_cast_kind(_152665_d);
		(*((*(_152665_d))._field_model.operator jule::Ptr<_1e83c1aad_CastingExprModel>()))._field_token=_152679_error_token;
	} else {
		(*(_152665_d))._field_kind=_152647_t;
	}
	return _152665_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_cast(jule::Ptr<_212b189c2_CastExpr> _157633_c) {
	jule::Ptr<_1ce761b37_TypeSymbol> _157717_t = _1e83e0390_build_type((*(_157633_c))._field_kind);
	jule::Bool _157813_ok = (*((*(this->self))._field_s))._method_check_type(_157717_t,(*(this->self))._field_lookup);
	if ((!(_157813_ok))) {
		return nullptr;
	}
	jule::Ptr<_1ce76121e_TypeKind> _158317_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_158317_prefix;
	});
	jule::Ptr<_1ce727449_Data> _158717_d = (*(this->self))._method_eval_expr_kind((*(_157633_c))._field_expr);
	if ((_158717_d == nullptr)) {
		return nullptr;
	}
	return (*(this->self))._method_eval_cast_by_type_n_data((*(_157717_t))._field_kind,_158717_d,(*((*(_157633_c))._field_kind))._field_token);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_ns_selection(jule::Ptr<_212b18e12_NsSelectionExpr> _159536_s) {
	jule::Str _159613_path = _1ce76609d_build_link_path_by_tokens((*(_159536_s))._field_ns);
	jule::Ptr<_1ce6a0317_ImportInfo> _159717_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>([=](jule::Ptr<_1ce6a0317_ImportInfo> _159753_imp) mutable -> jule::Bool {
		if (((*(_159536_s))._field_ns.len() == 1LL) && ((*(_159753_imp))._field_alias == _159613_path)) {
			return true;
		}
		return ((*(_159753_imp))._field_link_path == _159613_path) && (*(_159753_imp))._method_is_accessible_via_selection();
	}));
	if ((_159717_imp == nullptr)) {
		(*this)._method_push_err((*(_159536_s))._field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_159613_path)}));
		return nullptr;
	}
	jule::Trait<_1b545ddc0_Lookup> _160917_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_159717_imp;
	
	(*this)._method_disallow_builtin();
	jule::Any _161417_def = (*this)._method_get_def((*(_159536_s))._field_ident._field_kind,false);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_160917_lookup;
	jule::Ptr<_1ce727449_Data> _161817_d = (*this)._method_eval_def(_161417_def,(*(_159536_s))._field_ident);
	return _161817_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_struct_lit_explicit(jule::Ptr<_1e83b84bc_StructIns> _162348_s,jule::Slice<jule::Any> _162413_exprs,_212ae5c02_Token _162436_error_token) {
	jule::Bool _162513_ok = (*((*(this->self))._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_162348_s))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_162348_s))._field_generics.len()),_162436_error_token);
	if ((!(_162513_ok))) {
		return nullptr;
	}
	if (((*(this->self))._field_field != nullptr) && ((*((*((*(this->self))._field_field))._field_decl))._field_owner == (*(_162348_s))._field_decl)) {
		(*(this->self))._method_push_err(_162436_error_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*(_162348_s))._field_decl))._field_ident)}));
	}
	(*(this->self))._method_push_reference_to_struct(_162348_s);
	(*(this->self))._method_check_deprecated((*((*(_162348_s))._field_decl))._field_directives,_162436_error_token);
	_1ce70e497_StructLitChecker _163817_slc = _1ce70e497_StructLitChecker(this->self,_162436_error_token,_162348_s,jule::Slice<jule::Ptr<_1e83c044c_StructArgExprModel>>());
	_163817_slc._method_check(_162413_exprs);
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_162348_s)),jule::Ptr<_1ce76121e_TypeKind>(),(!((*(this->self))._field_immutable)),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c0bbc_StructLitExprModel>(new( std::nothrow ) _1e83c0bbc_StructLitExprModel(_162436_error_token,_162348_s,_163817_slc._field_args))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_struct_lit(jule::Ptr<_212b1a562_StructLit> _165839_lit) {
	jule::Ptr<_1ce761b37_TypeSymbol> _165917_t = _1e83e0390_build_type((*(_165839_lit))._field_kind);
	jule::Bool _166013_ok = (*((*(this->self))._field_s))._method_check_type(_165917_t,(*(this->self))._field_lookup);
	if ((!(_166013_ok))) {
		return nullptr;
	}
	jule::Ptr<_1e83b84bc_StructIns> _166517_s = (*((*(_165917_t))._field_kind))._method_strct();
	if ((_166517_s == nullptr)) {
		if (((*((*(_165917_t))._field_kind))._method_sptr() != nullptr)) {
			_166517_s=(*((*((*((*(_165917_t))._field_kind))._method_sptr()))._field_elem))._method_strct();
			if ((_166517_s != nullptr)) {
				goto _julec_label_eval;
			}
		}
		(*(this->self))._method_push_err((*((*(_165839_lit))._field_kind))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_eval:;
	jule::Ptr<_1ce727449_Data> _167817_d = (*(this->self))._method_eval_struct_lit_explicit(_166517_s,(*(_165839_lit))._field_exprs,(*((*(_165839_lit))._field_kind))._field_token);
	if (((*((*(_165917_t))._field_kind))._method_sptr() != nullptr)) {
		jule::Ptr<_1e83c0bbc_StructLitExprModel> _168021_model = (*(_167817_d))._field_model.operator jule::Ptr<_1e83c0bbc_StructLitExprModel>();
		_1ce72b915_make_struct_lit_alloc(_167817_d,_168021_model);
	}
	return _167817_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_type(jule::Ptr<_2129e3d42_TypeDecl> _168632_t) {
	jule::Ptr<_1ce761b37_TypeSymbol> _168717_tk = _1e83e0390_build_type(_168632_t);
	jule::Bool _168813_ok = (*((*this)._field_s))._method_check_type(_168717_tk,(*this)._field_lookup);
	if ((!(_168813_ok))) {
		return nullptr;
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data((*(_168717_tk))._field_kind,jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any((*(_168717_tk))._field_kind),true,jule::Ptr<_1ce4b898d_Const>()));
}



inline void _1ce728879_Eval::_method_call_type_fn(jule::Ptr<_212b19bd2_FnCallExpr>& _169937_fc,jule::Ptr<_1ce727449_Data>& _169959_d) {
	if (((*(_169937_fc))._field_generics.len() > 0LL)) {
		(*(this->self))._method_push_err((*(_169937_fc))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*((*(_169959_d))._field_kind))._method_to_str())}));
	} else if (((*(_169937_fc))._field_args.len() < 1LL)) {
		(*(this->self))._method_push_err((*(_169937_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if (((*(_169937_fc))._field_args.len() > 1LL)) {
		(*(this->self))._method_push_err((*((*(_169937_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	if (((*(_169937_fc))._field_args.len() > 0LL)) {
		jule::Ptr<_1ce76121e_TypeKind> _170921_prefix = (*(this->self))._field_prefix;
		(*(this->self))._field_prefix=nullptr;
		jule::Ptr<_1ce727449_Data> _171121_arg = (*(this->self))._method_eval_expr_kind((*((*(_169937_fc))._field_args[0LL]))._field_kind);
		(*(this->self))._field_prefix=_170921_prefix;
		if ((_171121_arg != nullptr)) {
			_169959_d=(*(this->self))._method_eval_cast_by_type_n_data((*(_169959_d))._field_kind,_171121_arg,(*((*(_169937_fc))._field_args[0LL]))._field_token);
		}
	}
	if ((_169959_d != nullptr)) {
		(*(_169959_d))._field_decl=false;
	}
}



inline std::tuple<jule::Bool,jule::Bool> _1ce728879_Eval::_method_check_fn_call_generics(jule::Ptr<_1e83d630e_FnIns> _172345_f,jule::Ptr<_212b19bd2_FnCallExpr> _172413_fc) {
	jule::Bool _172432_ok = jule::Bool();
	jule::Bool _172442_dynamic_annotation = jule::Bool();
	{
		
		if ((((*((*(_172345_f))._field_decl))._field_generics.len() > 0LL) && ((*(_172413_fc))._field_generics.len() == 0LL)) && ((*(_172345_f))._field_params.len() > 0LL)) {
			_case_begin_1b881126e:;
			{
				_172442_dynamic_annotation=true;
				(*(_172345_f))._field_generics=jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>::alloc(static_cast<jule::I64>((*((*(_172345_f))._field_decl))._field_generics.len()));
				_172432_ok = true;
				_172442_dynamic_annotation = true;
				return std::make_tuple(_172432_ok,_172442_dynamic_annotation);
			}
		}
		else if ((!((*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_172345_f))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_172413_fc))._field_generics.len()),(*(_172413_fc))._field_token)))) {
			_case_begin_1b88112d5:;
			{
				_172432_ok = false;
				_172442_dynamic_annotation = false;
				return std::make_tuple(_172432_ok,_172442_dynamic_annotation);
			}
		}
		else {
			_case_begin_1b880ee0a:;
			{
				(*(_172345_f))._field_generics=jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*((*(_172345_f))._field_decl))._field_generics.len()));
				{
					auto &expr = (*(_172413_fc))._field_generics;
					auto it = expr.begin();
					_iter_begin_1b8810845:;
					if (it != expr.end()) {
						jule::Ptr<_2129e3d42_TypeDecl> _1b881112b_g = *it;
						{
							jule::Ptr<_1ce761b37_TypeSymbol> _173725_k = _1e83e0390_build_type(_1b881112b_g);
							_172432_ok=(*((*this)._field_s))._method_check_type(_173725_k,(*this)._field_lookup);
							if ((!(_172432_ok))) {
								_172432_ok = false;
								_172442_dynamic_annotation = false;
								return std::make_tuple(_172432_ok,_172442_dynamic_annotation);
							}
							(*(_172345_f))._field_generics = jule::alloc_for_append((*(_172345_f))._field_generics,1);(*(_172345_f))._field_generics.__push((*(_173725_k))._field_kind);
						}
						_iter_next_1b8810845:;
						++it;
						goto _iter_begin_1b8810845;
					}
					_iter_end_1b8810845:;
				}
				_172432_ok = true;
				_172442_dynamic_annotation = false;
				return std::make_tuple(_172432_ok,_172442_dynamic_annotation);
			}
		}
		_match_end_1b880ed61:;
	}
}



inline void _1ce728879_Eval::_method_call_builtin_fn(jule::Ptr<_212b19bd2_FnCallExpr>& _174940_fc,jule::Ptr<_1ce727449_Data>& _174962_d) {
	_174962_d=(*((*((*(_174962_d))._field_kind))._method_fnc()))._field_caller(this->self,_174940_fc,_174962_d);
	if ((_174962_d == nullptr)) {
		return;
	}
	(*(_174962_d))._field_mutable=true;
}



inline void _1ce728879_Eval::_method_check_fn_of_concurrent_call(jule::Ptr<_1e83d630e_FnIns>& _175747_f,_212ae5c02_Token _175758_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto &expr = (*(_175747_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b88199e7:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> &_1b8819ad5_p = *it;
			{
				if ((*((*(_1b8819ad5_p))._field_decl))._field_reference) {
					(*this)._method_push_err(_175758_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;
				}
			}
			_iter_next_1b88199e7:;
			++it;
			goto _iter_begin_1b88199e7;
		}
		_iter_end_1b88199e7:;
	}
}



inline void _1ce728879_Eval::_method_process_exceptional_handler(jule::Ptr<_1e83d630e_FnIns>& _177051_f,jule::Ptr<_212b19bd2_FnCallExpr>& _177067_fc,jule::Ptr<_1ce727449_Data>& _177089_d) {
	jule::Bool _177113_result_needed = (!((*((*(_177051_f))._field_decl))._method_is_void())) && (!((*this)._field_ignored));
	jule::Ptr<_1ce6882bc_ScopeChecker> _177217_csc = nullptr;
	jule::Ptr<_1ce62e86d_Scope> _177317_ch = nullptr;
	jule::Ptr<_1e83c2581_FnCallExprModel> _177517_model = (*(_177089_d))._field_model.operator jule::Ptr<_1e83c2581_FnCallExprModel>();
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6ab345_Sema>>()) {
			_case_begin_1b881d644:;
			{
				jule::Ptr<_1ce6ab345_Sema> _177921_s = (*this)._field_lookup.operator jule::Ptr<_1ce6ab345_Sema>();
				_177217_csc=_1ce6503e9_new_scope_checker(_177921_s,nullptr);
				if (_177113_result_needed) {
					(*(_177217_csc))._field_result=(*(_177051_f))._field_result;
				}
				_177317_ch=jule::new_ptr<_1ce62e86d_Scope>();
				(*((*(_177217_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_177217_csc))._field_table))._field_vars,1);(*((*(_177217_csc))._field_table))._field_vars.__push(_1ce72bae1_build_error_var(_177317_ch,_177067_fc));
				(*(_177217_csc))._method_check((*(_177067_fc))._field_exception,_177317_ch);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
			_case_begin_1b881d6aa:;
			{
				jule::Ptr<_1ce6882bc_ScopeChecker> _178821_sc = (*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>();
				_177217_csc=(*(_178821_sc))._method_new_child_checker();
				if (_177113_result_needed) {
					(*(_177217_csc))._field_result=(*(_177051_f))._field_result;
				}
				_177317_ch=(*(_178821_sc))._method_get_child();
				(*((*(_177217_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_177217_csc))._field_table))._field_vars,1);(*((*(_177217_csc))._field_table))._field_vars.__push(_1ce72bae1_build_error_var(_177317_ch,_177067_fc));
				(*(_178821_sc))._method_check_child_ssc((*(_177067_fc))._field_exception,_177317_ch,_177217_csc);
			}
		}
		_match_end_1b881d512:;
	}
	(*(_177517_model))._field_assigned=_177113_result_needed;
	(*(_177517_model))._field_except=_177317_ch;
	if (_177113_result_needed && ((*(_177217_csc))._field_result != nullptr)) {
		(*this)._method_push_err((*(_177067_fc))._field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	}
}



inline void _1ce728879_Eval::_method_call_fn(jule::Ptr<_212b19bd2_FnCallExpr>& _180632_fc,jule::Ptr<_1ce727449_Data>& _180654_d) {
	jule::Ptr<_1e83d630e_FnIns> _180717_f = (*((*(_180654_d))._field_kind))._method_fnc();
	if ((*(_180717_f))._method_is_builtin()) {
		(*(this->self))._method_call_builtin_fn(_180632_fc,_180654_d);
		return;
	}
	if ((!((*((*(_180717_f))._field_decl))._method_is_method())) && _1ce75e34e_has_directive((*((*(_180717_f))._field_decl))._field_directives,jule::Str("test", 4))) {
		(*(this->self))._method_push_err((*(_180632_fc))._field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_180654_d=nullptr;
		return;
	}
	if ((((!((*(_180654_d))._field_mutable)) && (*((*(_180717_f))._field_decl))._method_is_method()) && (!((*((*(_180717_f))._field_decl))._field_statically))) && (*((*((*(_180717_f))._field_decl))._field_params[0LL]))._field_mutable) {
		(*(this->self))._method_push_err((*(_180632_fc))._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	} else if ((!((*(this->self))._method_is_unsafe())) && (*((*(_180717_f))._field_decl))._field_unsafety) {
		(*(this->self))._method_push_err((*(_180632_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	jule::Bool _182518_ok;
	jule::Bool _182522_dynamic_annotation;
	std::tie(_182518_ok,_182522_dynamic_annotation) = (*(this->self))._method_check_fn_call_generics(_180717_f,_180632_fc);
	if ((!(_182518_ok))) {
		_180654_d=nullptr;
		return;
	}
	jule::Ptr<_1ce6ab345_Sema> _183117_old = (*(this->self))._field_s;
	if (((*((*(_180717_f))._field_decl))._field_owner != nullptr)) {
		(*(this->self))._field_s=(*((*((*(_180717_f))._field_decl))._field_owner))._field_sema;
	}
	__JULE_DEFER({
		if (_183117_old != (*(this->self))._field_s) {
			(*(_183117_old))._field_errors=jule::append((*(_183117_old))._field_errors,(*((*(this->self))._field_s))._field_errors);
			(*((*(this->self))._field_s))._field_errors=nullptr;
		}
		(*(this->self))._field_s=_183117_old;
	});
	if ((!(_182522_dynamic_annotation))) {
		if ((!((*(_180717_f))._field_reloaded))) {
			_182518_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_180717_f);
			if ((!(_182518_ok))) {
				_180654_d=nullptr;
				return;
			}
			(*(_180717_f))._field_reloaded=true;
		}
	} else {
		(*((*(this->self))._field_s))._method_build_fn_non_generic_type_kinds(_180717_f);
	}
	_1ce70d908_FnCallArgChecker _185717_fcac = _1ce70d908_FnCallArgChecker(this->self,(*(_180632_fc))._field_args,(*(_180632_fc))._field_token,_180717_f,_182522_dynamic_annotation,jule::Slice<jule::Any>());
	if (((*((*(_180717_f))._field_decl))._field_owner != nullptr)) {
		std::tie(_183117_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_183117_old);
		_182518_ok=_185717_fcac._method_check();
		std::tie(_183117_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_183117_old);
	} else {
		_182518_ok=_185717_fcac._method_check();
	}
	if ((!(_182518_ok)) && _182522_dynamic_annotation) {
		_180654_d=nullptr;
		return;
	}
	jule::Bool _187714_is_unique_ins;
	jule::I64 _187729_pos;
	std::tie(_187714_is_unique_ins,_187729_pos) = (*((*(_180717_f))._field_decl))._method_append_instance(_180717_f);
	if ((!(_187714_is_unique_ins))) {
		_180717_f=(*((*(_180717_f))._field_decl))._field_instances[_187729_pos];
	}
	jule::Any _188217_call_model = (*(_180654_d))._field_model;
	if ((*((*(_180717_f))._field_decl))._method_is_void()) {
		_180654_d=_1ce72d5c6_build_void_data();
	} else {
		if (_182522_dynamic_annotation) {
			_182518_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_180717_f);
			if ((!(_182518_ok))) {
				_180654_d=nullptr;
				return;
			}
			(*(_180717_f))._field_reloaded=true;
		}
		(*(_180654_d))._field_kind=(*(_180717_f))._field_result;
		(*(_180654_d))._field_lvalue=false;
	}
	(*(_180654_d))._field_mutable=true;
	(*(_180654_d))._field_model=jule::Any(jule::new_struct<_1e83c2581_FnCallExprModel>(new( std::nothrow ) _1e83c2581_FnCallExprModel((*(_180632_fc))._field_token,_180717_f,jule::Bool(),_188217_call_model,_185717_fcac._field_arg_models,jule::Ptr<_1ce62e86d_Scope>(),jule::Bool())));
	if ((*((*(_180717_f))._field_decl))._field_exceptional) {
		{
			
			if ((*(_180632_fc))._method_unhandled()) {
				_case_begin_1b8839cc0:;
				{
					(*(this->self))._method_push_err((*(_180632_fc))._field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					(*(this->self))._method_push_suggestion(jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if ((*(_180632_fc))._method_ignored()) {
				_case_begin_1b8839693:;
			}
			else {
				_case_begin_1b88392ec:;
				{
					(*(this->self))._method_process_exceptional_handler(_180717_f,_180632_fc,_180654_d);
				}
			}
			_match_end_1b8839231:;
		}
	} else if ((!((*(_180632_fc))._method_unhandled()))) {
		(*(this->self))._method_push_err((*(_180632_fc))._field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	}
	if (((*(_180717_f))._field_generics.len() > 0LL) && _187714_is_unique_ins) {
		(*((*(this->self))._field_s))._method_check_fn_ins_caller(_180717_f,((jule::Ptr<_212ae5c02_Token>)((&((*(_180632_fc))._field_token)))));
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_fn_call(jule::Ptr<_212b19bd2_FnCallExpr> _192836_fc) {
	jule::Ptr<_1ce76121e_TypeKind> _192917_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_192917_prefix;
	});
	{
		auto &_match_expr{ (*((*(_192836_fc))._field_expr))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_212b17c02_IdentExpr>>()) {
			_case_begin_1b883eeb2:;
			{
				if (((*((*(_192836_fc))._field_expr))._field_token._field_kind == jule::Str("error", 5))) {
					return _1b5465c1d_builtin_caller_error(this->self,_192836_fc);
				}
			}
		}
		_match_end_1b883ea0b:;
	}
	jule::Ptr<_1ce727449_Data> _194217_d = (*(this->self))._method_eval_expr_kind((*((*(_192836_fc))._field_expr))._field_kind);
	if ((_194217_d == nullptr)) {
		return nullptr;
	}
	if ((*(_194217_d))._field_decl) {
		(*(this->self))._method_call_type_fn(_192836_fc,_194217_d);
		return _194217_d;
	}
	if (((*((*(_194217_d))._field_kind))._method_fnc() == nullptr)) {
		(*(this->self))._method_push_err((*(_192836_fc))._field_token,jule::Str("attempting to call a non-function", 33),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(this->self))._method_call_fn(_192836_fc,_194217_d);
	return _194217_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_enum_static(jule::Ptr<_1e8648917_Enum> _196139_enm,_212ae5c02_Token _196151_ident) {
	jule::Ptr<_1ce727449_Data> _196217_d = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_196139_enm)),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ce4b898d_Const>()));
	jule::Ptr<_1e86494b7_EnumItem> _197117_item = (*(_196139_enm))._method_find_item(_196151_ident._field_kind);
	if ((_197117_item == nullptr)) {
		(*this)._method_push_err(_196151_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_196139_enm))._field_ident),jule::Any(_196151_ident._field_kind)}));
	} else {
		(*(_196217_d))._field_constant=jule::new_ptr<_1ce4b898d_Const>((*((*((*((*(_197117_item))._field_value))._field_data))._field_constant)));
		(*(_196217_d))._field_model=jule::Any((*(_196217_d))._field_constant);
		_1ce72dbd1_apply_cast_model_by_enum(_196217_d,_196139_enm);
	}
	return _196217_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_struct_static(jule::Ptr<_1e83b84bc_StructIns> _198341_s,_212ae5c02_Token _198356_ident) {
	jule::Ptr<_1ce727449_Data> _198417_d = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ce4b898d_Const>()));
	
	jule::Ptr<_1e83d4384_Fn> _199217_method = (*(_198341_s))._method_find_method(_198356_ident._field_kind,true);
	if ((_199217_method != nullptr)) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*(_199217_method))._field_public,(*(_199217_method))._field_token)))) {
			(*this)._method_push_err(_198356_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_198356_ident._field_kind)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1e83d630e_FnIns> _199921_ins = (*(_199217_method))._method_instance();
		(*(_199921_ins))._field_owner=_198341_s;
		(*this)._method_push_reference_to_fn(_199921_ins);
		(*(_198417_d))._field_model=jule::Any(jule::new_struct<_1e83c76a7_StructStaticIdentExprModel>(new( std::nothrow ) _1e83c76a7_StructStaticIdentExprModel(_198341_s,(*(_198417_d))._field_model,_199921_ins)));
		(*(_198417_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_199921_ins));
		return _198417_d;
	}
	jule::Ptr<_1ce6cecb4_Var> _201317_sttc = (*((*(_198341_s))._field_decl))._method_find_static(_198356_ident._field_kind);
	if ((_201317_sttc != nullptr)) {
		return (*this)._method_eval_var(_201317_sttc,_198356_ident);
	}
	(*this)._method_push_err(_198356_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_198341_s))._field_decl))._field_ident),jule::Any(_198356_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_trait_sub_ident(jule::Ptr<_1ce727449_Data> _202243_d,jule::Ptr<_1e85a7865_Trait> _202257_trt,_212ae5c02_Token _202274_ident) {
	jule::Ptr<_1e83d4384_Fn> _202317_f = (*(_202257_trt))._method_find_method(_202274_ident._field_kind);
	if ((_202317_f == nullptr)) {
		(*this)._method_push_err(_202274_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_202257_trt))._field_ident),jule::Any(_202274_ident._field_kind)}));
		return nullptr;
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_202317_f))._method_instance())),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::new_struct<_1e83c62cc_TraitSubIdentExprModel>(new( std::nothrow ) _1e83c62cc_TraitSubIdentExprModel(_202274_ident,(*(_202243_d))._field_model,_202274_ident._field_kind))),false,jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_struct_sub_ident(jule::Ptr<_1ce727449_Data> _204244_d,jule::Ptr<_1e83b84bc_StructIns> _204258_s,jule::Ptr<_212b19352_SubIdentExpr> _204273_si,jule::Bool _204292_ref) {
	jule::Ptr<_1e83b2cbe_FieldIns> _204317_f = (*(_204258_s))._method_find_field((*(_204273_si))._field_ident._field_kind);
	if ((_204317_f != nullptr)) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_204317_f))._field_decl))._field_public,(*((*(_204317_f))._field_decl))._field_token)))) {
			(*this)._method_push_err((*(_204273_si))._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_204317_f))._field_decl))._field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1e83c6d16_StructSubIdentExprModel> _205021_model = jule::new_struct<_1e83c6d16_StructSubIdentExprModel>(new( std::nothrow ) _1e83c6d16_StructSubIdentExprModel((*(_204244_d))._field_model,(*(_204244_d))._field_kind,jule::Ptr<_1e83d630e_FnIns>(),_204317_f));
		(*(_204244_d))._field_model=jule::Any(_205021_model);
		(*(_204244_d))._field_kind=(*(_204317_f))._field_kind;
		(*(_204244_d))._field_lvalue=true;
		if ((*((*(_204317_f))._field_decl))._field_mutable && (!((*(_204244_d))._field_mutable))) {
			{
				auto &_match_expr{ (*this)._field_lookup };
				
				if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
					_case_begin_1b885977e:;
					{
						jule::Ptr<_1ce6882bc_ScopeChecker> _206325_scope = (*((*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>()))._method_get_root();
						(*(_204244_d))._field_mutable=((*(_206325_scope))._field_owner != nullptr) && ((*((*(_206325_scope))._field_owner))._field_owner == _204258_s);
						if ((*(_204244_d))._field_mutable) {
							jule::Ptr<_1ce6cecb4_Var> _206633_field = (*(_205021_model))._field_expr.operator jule::Ptr<_1ce6cecb4_Var>();
							jule::Ptr<_1ce6cecb4_Var> _206733_v = jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var((*(_206633_field))._field_scope,(*(_206633_field))._field_token,(*(_206633_field))._field_ident,(*(_206633_field))._field_cpp_linked,(*(_206633_field))._field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),(*(_206633_field))._field_kind,(*(_206633_field))._field_value,jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>()));
							(*(_206733_v))._field_mutable=true;
							(*(_205021_model))._field_expr=jule::Any(_206733_v);
						}
					}
				}
				_match_end_1b8859680:;
			}
		}
		return _204244_d;
	}
	
	jule::Ptr<_1e83d4384_Fn> _208617_m = (*(_204258_s))._method_find_method((*(_204273_si))._field_ident._field_kind,false);
	if ((_208617_m == nullptr)) {
		(*this)._method_push_err((*(_204273_si))._field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_204258_s))._field_decl))._field_ident),jule::Any((*(_204273_si))._field_ident._field_kind)}));
		return nullptr;
	}
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_208617_m))._field_public,(*(_208617_m))._field_token)))) {
		(*this)._method_push_err((*(_204273_si))._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_208617_m))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	if ((*((*(_208617_m))._field_params[0LL]))._method_is_ref() && (!(_204292_ref))) {
		(*this)._method_push_err((*(_204273_si))._field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	}
	(*this)._method_check_deprecated((*(_208617_m))._field_directives,(*(_204273_si))._field_ident);
	jule::Ptr<_1e83d630e_FnIns> _210217_ins = (*(_208617_m))._method_instance();
	(*(_210217_ins))._field_owner=_204258_s;
	(*this)._method_push_reference_to_fn(_210217_ins);
	(*(_204244_d))._field_model=jule::Any(jule::new_struct<_1e83c6d16_StructSubIdentExprModel>(new( std::nothrow ) _1e83c6d16_StructSubIdentExprModel((*(_204244_d))._field_model,(*(_204244_d))._field_kind,_210217_ins,jule::Ptr<_1e83b2cbe_FieldIns>())));
	(*(_204244_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_210217_ins));
	return _204244_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_slice_sub_ident(jule::Ptr<_1ce727449_Data> _211443_d,_212ae5c02_Token _211453_ident) {
	{
		auto &_match_expr{ _211453_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_1b8867979:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_211443_d))._field_kind,(*(_211443_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_1b88679e0:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_211443_d))._field_kind,(*(_211443_d))._field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_1b8866813:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>({jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))))),jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3))))))}),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5465701_builtin_caller_common_mut),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_211443_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_211443_d))._field_kind,(*(_211443_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b8866439:;
			{
				(*this)._method_push_err(_211453_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_211443_d))._field_kind))._method_to_str()),jule::Any(_211453_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88665b0:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_array_sub_ident(jule::Ptr<_1ce727449_Data> _217143_d,_212ae5c02_Token _217153_ident) {
	{
		auto &_match_expr{ _217153_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_1b886d188:;
			{
				jule::Ptr<_1ce4b898d_Const> _217421_c = _1ce4b898d_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*((*(_217143_d))._field_kind))._method_arr()))._field_n)));
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_217421_c),jule::Bool(),_217421_c));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_1b886e233:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>({jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))))),jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3))))))}),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5465701_builtin_caller_common_mut),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_217143_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_217143_d))._field_kind,(*(_217143_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b886c9a1:;
			{
				(*this)._method_push_err(_217153_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_217143_d))._field_kind))._method_to_str()),jule::Any(_217153_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b886cb27:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_map_sub_ident(jule::Ptr<_1ce727449_Data> _221641_d,_212ae5c02_Token _221651_ident) {
	jule::Ptr<_1ce763b39_Map> _221717_map_kind = (*((*(_221641_d))._field_kind))._method_map();
	{
		auto &_match_expr{ _221651_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_1b887429e:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_221641_d))._field_kind,(*(_221641_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_1b88755e1:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5465701_builtin_caller_common_mut),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_221641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_221641_d))._field_kind,(*(_221641_d))._field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_1b88740a1:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc((*(_221717_map_kind))._field_key)))),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5465701_builtin_caller_common_mut),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_221641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_221641_d))._field_kind,(*(_221641_d))._field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_1b8874117:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc((*(_221717_map_kind))._field_val)))),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5465701_builtin_caller_common_mut),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_221641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_221641_d))._field_kind,(*(_221641_d))._field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_1b887417d:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>({jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str("key", 3))),(*(_221717_map_kind))._field_key))}),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5474996_builtin_caller_common),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_221641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_221641_d))._field_kind,(*(_221641_d))._field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_1b88741e4:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>({jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str("key", 3))),(*(_221717_map_kind))._field_key))}),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5465701_builtin_caller_common_mut),jule::Bool())))),jule::Ptr<_1ce76121e_TypeKind>(),(*(_221641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_221641_d))._field_kind,(*(_221641_d))._field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b887380e:;
			{
				(*this)._method_push_err(_221651_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_221717_map_kind))._method_to_str()),jule::Any(_221651_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b8873e4c:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_str_sub_ident(jule::Ptr<_1ce727449_Data> _233341_d,_212ae5c02_Token _233351_ident) {
	jule::Ptr<_1ce76121e_TypeKind> _233417_str_kind = jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("str", 3))));
	{
		auto &_match_expr{ _233351_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_1b88815db:;
			{
				jule::Ptr<_1ce727449_Data> _233721_sd = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
				if ((*(_233341_d))._method_is_const()) {
					(*(_233721_sd))._field_constant=_1ce4b898d_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*(_233341_d))._field_constant))._method_read_str().len())));
					(*(_233721_sd))._field_model=jule::Any((*(_233721_sd))._field_constant);
				} else {
					(*(_233721_sd))._field_model=jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel((*(_233341_d))._field_kind,(*(_233341_d))._field_model,jule::Str("len()", 5))));
				}
				return _233721_sd;
			}
		}
		else {
			_case_begin_1b887e74e:;
			{
				(*this)._method_push_err(_233351_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_233417_str_kind))._method_to_str()),jule::Any(_233351_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b8880354:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_int_type_static(_212ae5c02_Token _235739_ident) {
	
	{
		auto &_match_expr{ _235739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b8885eb4:;
			{
				jule::Ptr<_1ce4b898d_Const> _236221_c = _1ce4b898d_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1ce67a06c_max(jule::Str("int", 3)))));
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_236221_c),jule::Bool(),_236221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b888602a:;
			{
				jule::Ptr<_1ce4b898d_Const> _236921_c = _1ce4b898d_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1ce679ab6_min(jule::Str("int", 3)))));
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_236921_c),jule::Bool(),_236921_c));
			}
		}
		else {
			_case_begin_1b8884aea:;
			{
				(*this)._method_push_err(_235739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_235739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b8884e6e:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_uint_type_static(_212ae5c02_Token _238240_ident) {
	
	{
		auto &_match_expr{ _238240_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b888a45d:;
			{
				jule::Ptr<_1ce4b898d_Const> _238721_c = _1ce4b898d_Const::_static_method_new_u64(static_cast<jule::U64>(static_cast<jule::U64>(_1ce67a06c_max(jule::Str("uint", 4)))));
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_238721_c),jule::Bool(),_238721_c));
			}
		}
		else {
			_case_begin_1b8889094:;
			{
				(*this)._method_push_err(_238240_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_238240_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b8889418:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_i8_type_static(_212ae5c02_Token _239938_ident) {
	
	
	
	{
		auto &_match_expr{ _239938_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b888dc9c:;
			{
				jule::Ptr<_1ce4b898d_Const> _240621_c = _1ce4b898d_Const::_static_method_new_i64(127LL);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_240621_c),jule::Bool(),_240621_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b888dd13:;
			{
				jule::Ptr<_1ce4b898d_Const> _241321_c = _1ce4b898d_Const::_static_method_new_i64(-128LL);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_241321_c),jule::Bool(),_241321_c));
			}
		}
		else {
			_case_begin_1b888cb8b:;
			{
				(*this)._method_push_err(_239938_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_239938_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b888cc24:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_i16_type_static(_212ae5c02_Token _242539_ident) {
	
	
	
	{
		auto &_match_expr{ _242539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b889328a:;
			{
				jule::Ptr<_1ce4b898d_Const> _243221_c = _1ce4b898d_Const::_static_method_new_i64(32767LL);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_243221_c),jule::Bool(),_243221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b8893301:;
			{
				jule::Ptr<_1ce4b898d_Const> _243921_c = _1ce4b898d_Const::_static_method_new_i64(-32768LL);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_243921_c),jule::Bool(),_243921_c));
			}
		}
		else {
			_case_begin_1b8892179:;
			{
				(*this)._method_push_err(_242539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_242539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b8892212:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_i32_type_static(_212ae5c02_Token _245139_ident) {
	
	
	
	{
		auto &_match_expr{ _245139_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b8897778:;
			{
				jule::Ptr<_1ce4b898d_Const> _245821_c = _1ce4b898d_Const::_static_method_new_i64(2147483647LL);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_245821_c),jule::Bool(),_245821_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b88977de:;
			{
				jule::Ptr<_1ce4b898d_Const> _246521_c = _1ce4b898d_Const::_static_method_new_i64(-2147483648LL);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_246521_c),jule::Bool(),_246521_c));
			}
		}
		else {
			_case_begin_1b8896667:;
			{
				(*this)._method_push_err(_245139_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_245139_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b8896700:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_i64_type_static(_212ae5c02_Token _247739_ident) {
	
	
	
	{
		auto &_match_expr{ _247739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b889bb01:;
			{
				jule::Ptr<_1ce4b898d_Const> _248421_c = _1ce4b898d_Const::_static_method_new_i64(jule::MAX_I64);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_248421_c),jule::Bool(),_248421_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b889bb67:;
			{
				jule::Ptr<_1ce4b898d_Const> _249121_c = _1ce4b898d_Const::_static_method_new_i64(jule::MIN_I64);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_249121_c),jule::Bool(),_249121_c));
			}
		}
		else {
			_case_begin_1b889a9e0:;
			{
				(*this)._method_push_err(_247739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_247739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b889aa78:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_u8_type_static(_212ae5c02_Token _250338_ident) {
	
	
	{
		auto &_match_expr{ _250338_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b88a0e46:;
			{
				jule::Ptr<_1ce4b898d_Const> _250921_c = _1ce4b898d_Const::_static_method_new_u64(255LLU);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u8", 2)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_250921_c),jule::Bool(),_250921_c));
			}
		}
		else {
			_case_begin_1b889edac:;
			{
				(*this)._method_push_err(_250338_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_250338_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b889ed57:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_u16_type_static(_212ae5c02_Token _252139_ident) {
	
	
	{
		auto &_match_expr{ _252139_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b88a3ec1:;
			{
				jule::Ptr<_1ce4b898d_Const> _252721_c = _1ce4b898d_Const::_static_method_new_u64(65535LLU);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u16", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_252721_c),jule::Bool(),_252721_c));
			}
		}
		else {
			_case_begin_1b88a2e37:;
			{
				(*this)._method_push_err(_252139_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_252139_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88a2dd2:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_u32_type_static(_212ae5c02_Token _253939_ident) {
	
	
	{
		auto &_match_expr{ _253939_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b88a704b:;
			{
				jule::Ptr<_1ce4b898d_Const> _254521_c = _1ce4b898d_Const::_static_method_new_u64(4294967295LLU);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u32", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_254521_c),jule::Bool(),_254521_c));
			}
		}
		else {
			_case_begin_1b88a5eb2:;
			{
				(*this)._method_push_err(_253939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_253939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88a5e5c:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_u64_type_static(_212ae5c02_Token _255739_ident) {
	
	
	{
		auto &_match_expr{ _255739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b88aa01b:;
			{
				jule::Ptr<_1ce4b898d_Const> _256321_c = _1ce4b898d_Const::_static_method_new_u64(jule::MAX_U64);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_256321_c),jule::Bool(),_256321_c));
			}
		}
		else {
			_case_begin_1b88a8e82:;
			{
				(*this)._method_push_err(_255739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_255739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88a8e2c:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_f32_type_tatic(_212ae5c02_Token _257538_ident) {
	
	
	
	
	{
		auto &_match_expr{ _257538_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b88ad78e:;
			{
				jule::Ptr<_1ce4b898d_Const> _258321_c = _1ce4b898d_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_258321_c),jule::Bool(),_258321_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b88ad805:;
			{
				jule::Ptr<_1ce4b898d_Const> _259021_c = _1ce4b898d_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_259021_c),jule::Bool(),_259021_c));
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_1b88ac8ae:;
			{
				jule::Ptr<_1ce4b898d_Const> _259721_c = _1ce4b898d_Const::_static_method_new_f64(0.000000000000000000000000000000000000000000001401298464324817);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_259721_c),jule::Bool(),_259721_c));
			}
		}
		else {
			_case_begin_1b88ac491:;
			{
				(*this)._method_push_err(_257538_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_257538_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88ac716:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_f64_type_static(_212ae5c02_Token _260939_ident) {
	
	
	
	
	{
		auto &_match_expr{ _260939_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_1b88b3e59:;
			{
				jule::Ptr<_1ce4b898d_Const> _261721_c = _1ce4b898d_Const::_static_method_new_f64(jule::MAX_F64);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_261721_c),jule::Bool(),_261721_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_1b88b3ec0:;
			{
				jule::Ptr<_1ce4b898d_Const> _262421_c = _1ce4b898d_Const::_static_method_new_f64(jule::MIN_F64);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_262421_c),jule::Bool(),_262421_c));
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_1b88b3079:;
			{
				jule::Ptr<_1ce4b898d_Const> _263121_c = _1ce4b898d_Const::_static_method_new_f64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005);
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_263121_c),jule::Bool(),_263121_c));
			}
		}
		else {
			_case_begin_1b88b2b5b:;
			{
				(*this)._method_push_err(_260939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_260939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88b2dd1:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_prim_static(jule::Str _264335_kind,_212ae5c02_Token _264346_ident) {
	{
		auto &_match_expr{ _264335_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1b88b7e3b:;
			{
				return (*this)._method_eval_int_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_1b88b7c2c:;
			{
				return (*this)._method_eval_uint_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1b88b7c93:;
			{
				return (*this)._method_eval_i8_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1b88b7d09:;
			{
				return (*this)._method_eval_i16_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1b88b7d70:;
			{
				return (*this)._method_eval_i32_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1b88b88a9:;
			{
				return (*this)._method_eval_i64_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_1b88b8920:;
			{
				return (*this)._method_eval_u8_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1b88b8997:;
			{
				return (*this)._method_eval_u16_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1b88b8b95:;
			{
				return (*this)._method_eval_u32_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1b88b8c0b:;
			{
				return (*this)._method_eval_u64_type_static(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1b88b8c72:;
			{
				return (*this)._method_eval_f32_type_tatic(_264346_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1b88b8cd8:;
			{
				return (*this)._method_eval_f64_type_static(_264346_ident);
			}
		}
		else {
			_case_begin_1b88b7974:;
			{
				(*this)._method_push_err(_264346_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_264335_kind),jule::Any(_264346_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b88b79eb:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_type_static(jule::Ptr<_1ce727449_Data> _267539_d,jule::Ptr<_212b19352_SubIdentExpr> _267553_si) {
	{
		
		if (((*((*(_267539_d))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b88c0509:;
			{
				return (*this)._method_eval_prim_static((*((*((*(_267539_d))._field_kind))._method_prim()))._method_to_str(),(*(_267553_si))._field_ident);
			}
		}
		else if (((*((*(_267539_d))._field_kind))._method_enm() != nullptr)) {
			_case_begin_1b88c05e7:;
			{
				return (*this)._method_eval_enum_static((*((*(_267539_d))._field_kind))._method_enm(),(*(_267553_si))._field_ident);
			}
		}
		else if (((*((*(_267539_d))._field_kind))._method_strct() != nullptr)) {
			_case_begin_1b88c065d:;
			{
				return (*this)._method_eval_struct_static((*((*(_267539_d))._field_kind))._method_strct(),(*(_267553_si))._field_ident);
			}
		}
		else {
			_case_begin_1b88be20b:;
			{
				(*this)._method_push_err((*(_267553_si))._field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>({jule::Any((*((*(_267539_d))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b88be162:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_obj_sub_ident(jule::Ptr<_1ce727449_Data> _268941_d,jule::Ptr<_212b19352_SubIdentExpr> _268955_si) {
	if (_212ae9255_is_ignore_ident((*(_268955_si))._field_ident._field_kind)) {
		(*this)._method_push_err((*(_268955_si))._field_ident,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce76121e_TypeKind> _269517_kind = (*(_268941_d))._field_kind;
	if (((*((*(_268941_d))._field_kind))._method_ptr() != nullptr)) {
		jule::Ptr<_1ce7649e7_Ptr> _269717_ptr = (*((*(_268941_d))._field_kind))._method_ptr();
		if ((!((*(_269717_ptr))._method_is_unsafe()))) {
			if ((!((*(_268955_si))._field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err((*(_268955_si))._field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
			_269517_kind=(*((*((*(_268941_d))._field_kind))._method_ptr()))._field_elem;
			jule::Ptr<_1ce727449_Data> _270325_model = jule::new_ptr<_1ce727449_Data>((*(_268941_d)));
			_212ae5c02_Token _270625_token = (*(_268955_si))._field_ident;
			_270625_token._field_id=static_cast<jule::U64>(7LLU);
			_270625_token._field_kind=jule::Str("*", 1);
			(*(_268941_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(_270325_model,_270625_token)));
		}
	} else if (((*((*(_268941_d))._field_kind))._method_sptr() != nullptr)) {
		_269517_kind=(*((*((*(_268941_d))._field_kind))._method_sptr()))._field_elem;
		jule::Ptr<_1ce727449_Data> _271821_model = jule::new_ptr<_1ce727449_Data>((*(_268941_d)));
		_212ae5c02_Token _271921_token = (*(_268955_si))._field_ident;
		_271921_token._field_id=static_cast<jule::U64>(7LLU);
		_271921_token._field_kind=jule::Str("*", 1);
		(*(_268941_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(_271821_model,_271921_token)));
	}
	{
		
		if (((*((*(_268941_d))._field_kind))._method_trt() != nullptr)) {
			_case_begin_1b88cc192:;
			{
				return (*this)._method_eval_trait_sub_ident(_268941_d,(*((*(_268941_d))._field_kind))._method_trt(),(*(_268955_si))._field_ident);
			}
		}
		else if (((*(_269517_kind))._method_strct() != nullptr)) {
			_case_begin_1b88cc208:;
			{
				jule::Ptr<_1e83b84bc_StructIns> _273217_s = (*(_269517_kind))._method_strct();
				if (_1ce72c8e4_is_instanced_struct(_273217_s)) {
					jule::Bool _273425_used_reference_elem = ((*((*(_268941_d))._field_kind))._method_sptr() != nullptr);
					return (*this)._method_eval_struct_sub_ident(_268941_d,(*(_269517_kind))._method_strct(),_268955_si,_273425_used_reference_elem);
				}
			}
		}
		else if (((*(_269517_kind))._method_slc() != nullptr)) {
			_case_begin_1b88cc26e:;
			{
				return (*this)._method_eval_slice_sub_ident(_268941_d,(*(_268955_si))._field_ident);
			}
		}
		else if (((*(_269517_kind))._method_arr() != nullptr)) {
			_case_begin_1b88cc2d5:;
			{
				return (*this)._method_eval_array_sub_ident(_268941_d,(*(_268955_si))._field_ident);
			}
		}
		else if (((*(_269517_kind))._method_map() != nullptr)) {
			_case_begin_1b88cc34b:;
			{
				return (*this)._method_eval_map_sub_ident(_268941_d,(*(_268955_si))._field_ident);
			}
		}
		else if (((*(_269517_kind))._method_prim() != nullptr)) {
			_case_begin_1b88cc3c3:;
			{
				jule::Ptr<_1ce762330_Prim> _274417_p = (*(_269517_kind))._method_prim();
				{
					auto &_match_expr{ (*(_274417_p))._field_kind };
					
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_1b88d3918:;
						{
							return (*this)._method_eval_str_sub_ident(_268941_d,(*(_268955_si))._field_ident);
						}
					}
					_match_end_1b88d40bc:;
				}
			}
		}
		_match_end_1b88cbe3e:;
	}
	(*this)._method_push_err((*(_268955_si))._field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>({jule::Any((*((*(_268941_d))._field_kind))._method_to_str())}));
	return nullptr;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_sub_ident(jule::Ptr<_212b19352_SubIdentExpr> _275438_si) {
	jule::Ptr<_1ce76121e_TypeKind> _275517_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_275517_prefix;
	});
	jule::Ptr<_1ce727449_Data> _275917_d = (*(this->self))._method_eval_expr_kind((*(_275438_si))._field_expr);
	if ((_275917_d == nullptr)) {
		return nullptr;
	}
	if ((*(_275917_d))._field_decl) {
		return (*(this->self))._method_eval_type_static(_275917_d,_275438_si);
	}
	return (*(this->self))._method_eval_obj_sub_ident(_275917_d,_275438_si);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_tuple(jule::Ptr<_212b169e2_TupleExpr> _277134_tup) {
	jule::Ptr<_1ce763485_Tuple> _277217_tup_t = jule::new_struct_ptr<_1ce763485_Tuple>(new( std::nothrow ) _1ce763485_Tuple());
	(*(_277217_tup_t))._field_types=jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_277134_tup))._field_expr.len()));
	jule::Ptr<_1e83c95aa_TupleExprModel> _277517_model = jule::new_struct<_1e83c95aa_TupleExprModel>(new( std::nothrow ) _1e83c95aa_TupleExprModel(jule::Slice<jule::Ptr<_1ce727449_Data>>::alloc(0LL,static_cast<jule::I64>((*(_277134_tup))._field_expr.len()))));
	jule::Bool _277917_ok = true;
	{
		auto &expr = (*(_277134_tup))._field_expr;
		auto it = expr.begin();
		_iter_begin_1b88daed6:;
		if (it != expr.end()) {
			jule::Ptr<_212b16162_Expr> _1b88db0b3_expr = *it;
			{
				jule::Ptr<_1ce727449_Data> _278121_d = (*(this->self))._method_eval_expr_kind((*(_1b88db0b3_expr))._field_kind);
				if ((_278121_d == nullptr)) {
					_277917_ok=false;
					goto _iter_next_1b88daed6;
				}
				(*(_277217_tup_t))._field_types = jule::alloc_for_append((*(_277217_tup_t))._field_types,1);(*(_277217_tup_t))._field_types.__push((*(_278121_d))._field_kind);
				(*(_277517_model))._field_datas = jule::alloc_for_append((*(_277517_model))._field_datas,1);(*(_277517_model))._field_datas.__push(_278121_d);
			}
			_iter_next_1b88daed6:;
			++it;
			goto _iter_begin_1b88daed6;
		}
		_iter_end_1b88daed6:;
	}
	if ((!(_277917_ok))) {
		return nullptr;
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_277217_tup_t)),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_277517_model),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_map(jule::Ptr<_1ce763b39_Map> _280032_m,jule::Ptr<_212b1a9a2_BraceLit> _280045_lit) {
	jule::Ptr<_1e83c5056_MapExprModel> _280117_model = jule::new_struct<_1e83c5056_MapExprModel>(new( std::nothrow ) _1e83c5056_MapExprModel((*(_280032_m))._field_key,(*(_280032_m))._field_val,jule::Slice<jule::Ptr<_1e83c4880_KeyValPairExprModel>>()));
	{
		auto &expr = (*(_280045_lit))._field_exprs;
		auto it = expr.begin();
		_iter_begin_1b88e021b:;
		if (it != expr.end()) {
			jule::Any _1b88e02d7_expr = *it;
			{
				{
					auto &_match_expr{ _1b88e02d7_expr };
					
					if (_match_expr.type_is<jule::Ptr<_212b1b365_KeyValPair>>()) {
						_case_begin_1b88e0738:;
					}
					else {
						_case_begin_1b88e0914:;
						{
							(*(this->self))._method_push_err((*(_280045_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_1b88e07b0:;
				}
				jule::Ptr<_212b1b365_KeyValPair> _281521_pair = _1b88e02d7_expr.operator jule::Ptr<_212b1b365_KeyValPair>();
				jule::Ptr<_1ce727449_Data> _281721_key = (*(this->self))._method_eval_expr_kind((*(_281521_pair))._field_key);
				if ((_281721_key == nullptr)) {
					return nullptr;
				}
				jule::Ptr<_1ce727449_Data> _282221_val = (*(this->self))._method_eval_expr_kind((*(_281521_pair))._field_val);
				if ((_282221_val == nullptr)) {
					return nullptr;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_280032_m))._field_key,_281721_key,(*(_281521_pair))._field_colon);
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_280032_m))._field_val,_282221_val,(*(_281521_pair))._field_colon);
				(*(_280117_model))._field_entries = jule::alloc_for_append((*(_280117_model))._field_entries,1);(*(_280117_model))._field_entries.__push(jule::new_struct<_1e83c4880_KeyValPairExprModel>(new( std::nothrow ) _1e83c4880_KeyValPairExprModel((*(_281721_key))._field_model,(*(_282221_val))._field_model)));
			}
			_iter_next_1b88e021b:;
			++it;
			goto _iter_begin_1b88e021b;
		}
		_iter_end_1b88e021b:;
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_280032_m)),jule::Ptr<_1ce76121e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_280117_model),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_brace_lit(jule::Ptr<_212b1a9a2_BraceLit> _284338_lit) {
	{
		
		if (((*(this->self))._field_prefix == nullptr)) {
			_case_begin_1b7d39699:;
			{
				(*(this->self))._method_push_err((*(_284338_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if (((*((*(this->self))._field_prefix))._method_map() != nullptr)) {
			_case_begin_1b7d39787:;
			{
				return (*(this->self))._method_eval_map((*((*(this->self))._field_prefix))._method_map(),_284338_lit);
			}
		}
		else if (((*((*(this->self))._field_prefix))._method_strct() != nullptr)) {
			_case_begin_1b7d397ed:;
			{
				return (*(this->self))._method_eval_struct_lit_explicit((*((*(this->self))._field_prefix))._method_strct(),(*(_284338_lit))._field_exprs,(*(_284338_lit))._field_token);
			}
		}
		else {
			_case_begin_1b7d38775:;
			{
				(*(this->self))._method_push_err((*(_284338_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_1b7d386a9:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_anon_fn(jule::Ptr<_212b1edd5_FnDecl> _285835_decl) {
	_1ce767731_TypeChecker _285917_tc = _1ce767731_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_1ce766eb1_Referencer>(),_212ae5c02_Token(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool());
	jule::Ptr<_1e83d630e_FnIns> _286317_ins = _285917_tc._method_build_fn(_285835_decl);
	(*(_286317_ins))._field_anon=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
			_case_begin_1b7d3d989:;
			{
				jule::Ptr<_1ce6882bc_ScopeChecker> _286821_sc = (*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>();
				jule::Ptr<_1ce6882bc_ScopeChecker> _286921_scc = (*(_286821_sc))._method_new_child_checker();
				(*(_286921_scc))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>>(nullptr);
				(*(_286921_scc))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>>(nullptr);
				(*(_286921_scc))._field_owner=nullptr;
				(*(_286921_scc))._field_child_index=0LL;
				(*(_286921_scc))._field_it=0LLU;
				(*(_286921_scc))._field_cse=0LLU;
				(*(_286921_scc))._field_owner=_286317_ins;
				(*((*this)._field_s))._method_check_fn_ins_sc(_286317_ins,_286921_scc);
			}
		}
		else {
			_case_begin_1b7d3eacd:;
			{
				(*((*this)._field_s))._method_check_fn_ins(_286317_ins);
			}
		}
		_match_end_1b7d3e7ae:;
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_286317_ins)),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c4220_AnonFnExprModel>(new( std::nothrow ) _1e83c4220_AnonFnExprModel(_286317_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_binop(jule::Ptr<_212b19792_BinopExpr> _289234_op) {
	_1ce72a084_BinaryEval _289317_bs = _1ce72a084_BinaryEval::_static_method_new_plain(this->self);
	if (((*(this->self))._field_prefix != nullptr)) {
		jule::Ptr<_1ce762330_Prim> _289717_prim = (*((*(this->self))._field_prefix))._method_prim();
		if ((_289717_prim == nullptr) || (!(_1ce6828d2_is_num((*(_289717_prim))._method_to_str())))) {
			jule::Ptr<_1ce76121e_TypeKind> _289925_prefix = (*(this->self))._field_prefix;
			(*(this->self))._field_prefix=nullptr;
			__JULE_DEFER({
				(*(this->self))._field_prefix=_289925_prefix;
			});
			return _289317_bs._method_eval(_289234_op);
		}
	}
	return _289317_bs._method_eval(_289234_op);
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_ternary(jule::Ptr<_212b1c575_TernaryExpr> _290936_ter) {
	jule::Ptr<_1ce727449_Data> _291017_d = (*(this->self))._method_eval_expr_kind((*(_290936_ter))._field_condition);
	if ((_291017_d == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ce762330_Prim> _291513_prim = (*((*(_291017_d))._field_kind))._method_prim();
	if ((_291513_prim == nullptr) || (!((*(_291513_prim))._method_is_bool()))) {
		(*(this->self))._method_push_err((*(_290936_ter))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _292117_td = (*(this->self))._method_eval_expr_kind((*(_290936_ter))._field_true_expr);
	if ((_292117_td == nullptr)) {
		return nullptr;
	}
	(*(this->self))._method_apply_numeric_prefix(_292117_td);
	if ((*((*(_292117_td))._field_kind))._method_void()) {
		(*(this->self))._method_push_err((*(_290936_ter))._field_token,jule::Str("void type cannot used for ternary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce76121e_TypeKind> _293217_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_292117_td))._field_kind;
	jule::Ptr<_1ce727449_Data> _293517_fd = (*(this->self))._method_eval_expr_kind((*(_290936_ter))._field_false_expr);
	(*(this->self))._method_apply_numeric_prefix(_293517_fd);
	(*(this->self))._field_prefix=_293217_prefix;
	if ((_293517_fd == nullptr)) {
		return nullptr;
	}
	_1ce70c671_AssignTypeChecker _294317_ac = _1ce70c671_AssignTypeChecker((*(this->self))._field_s,jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce727449_Data>(),(*(_290936_ter))._field_token);
	if ((*(_292117_td))._method_is_const() && (!((*(_293517_fd))._method_is_const()))) {
		_294317_ac._field_dest=(*(_293517_fd))._field_kind;
		_294317_ac._field_d=_292117_td;
	} else {
		_294317_ac._field_dest=(*(_292117_td))._field_kind;
		_294317_ac._field_d=_293517_fd;
	}
	if ((!(_294317_ac._method_check()))) {
		(*(this->self))._method_push_suggestion(jule::Str("use same or compatible values for ternary expressions", 53),jule::Slice<jule::Any>());
	}
	if ((*(_291017_d))._method_is_const()) {
		if ((*((*(_291017_d))._field_constant))._method_read_bool()) {
			return _292117_td;
		}
		return _293517_fd;
	}
	jule::Ptr<_1ce727449_Data> _296517_r = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data());
	(*(_296517_r))._field_kind=_294317_ac._field_dest;
	(*(_296517_r))._field_lvalue=false;
	(*(_296517_r))._field_mutable=(*((*(_296517_r))._field_kind))._method_mutable();
	(*(_296517_r))._field_model=jule::Any(jule::new_struct<_1e83d0d53_TernaryExprModel>(new( std::nothrow ) _1e83d0d53_TernaryExprModel((*(_291017_d))._field_model,(*(_292117_td))._field_model,(*(_293517_fd))._field_model)));
	return _296517_r;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_expr_kind(jule::Any _297738_kind) {
	jule::Ptr<_1ce727449_Data> _297817_d = nullptr;
	{
		auto &_match_expr{ _297738_kind };
		
		if (_match_expr.type_is<jule::Ptr<_212b16e32_LitExpr>>()) {
			_case_begin_1b7d56ac3:;
			{
				_297817_d=(*(this->self))._method_eval_lit(_297738_kind.operator jule::Ptr<_212b16e32_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b17c02_IdentExpr>>()) {
			_case_begin_1b7d56b39:;
			{
				_297817_d=(*(this->self))._method_eval_ident(_297738_kind.operator jule::Ptr<_212b17c02_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b18142_UnaryExpr>>()) {
			_case_begin_1b7d56ba0:;
			{
				_297817_d=(*(this->self))._method_eval_unary(_297738_kind.operator jule::Ptr<_212b18142_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b18582_VariadicExpr>>()) {
			_case_begin_1b7d56c16:;
			{
				_297817_d=(*(this->self))._method_eval_variadic(_297738_kind.operator jule::Ptr<_212b18582_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b17372_UnsafeExpr>>()) {
			_case_begin_1b7d56c8d:;
			{
				_297817_d=(*(this->self))._method_eval_unsafe(_297738_kind.operator jule::Ptr<_212b17372_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1b7a5_SliceExpr>>()) {
			_case_begin_1b7d56d15:;
			{
				_297817_d=(*(this->self))._method_eval_slice_expr(_297738_kind.operator jule::Ptr<_212b1b7a5_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1bbe5_IndexingExpr>>()) {
			_case_begin_1b7d56d8c:;
			{
				_297817_d=(*(this->self))._method_eval_indexing(_297738_kind.operator jule::Ptr<_212b1bbe5_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1c135_SlicingExpr>>()) {
			_case_begin_1b7d56e14:;
			{
				_297817_d=(*(this->self))._method_eval_slicing(_297738_kind.operator jule::Ptr<_212b1c135_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b189c2_CastExpr>>()) {
			_case_begin_1b7d56e8b:;
			{
				_297817_d=(*(this->self))._method_eval_cast(_297738_kind.operator jule::Ptr<_212b189c2_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b18e12_NsSelectionExpr>>()) {
			_case_begin_1b7d57013:;
			{
				_297817_d=(*(this->self))._method_eval_ns_selection(_297738_kind.operator jule::Ptr<_212b18e12_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1a562_StructLit>>()) {
			_case_begin_1b7d5708a:;
			{
				_297817_d=(*(this->self))._method_eval_struct_lit(_297738_kind.operator jule::Ptr<_212b1a562_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2129e3d42_TypeDecl>>()) {
			_case_begin_1b7d57112:;
			{
				_297817_d=(*(this->self))._method_eval_type(_297738_kind.operator jule::Ptr<_2129e3d42_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b19bd2_FnCallExpr>>()) {
			_case_begin_1b7d57189:;
			{
				_297817_d=(*(this->self))._method_eval_fn_call(_297738_kind.operator jule::Ptr<_212b19bd2_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b19352_SubIdentExpr>>()) {
			_case_begin_1b7d57211:;
			{
				_297817_d=(*(this->self))._method_eval_sub_ident(_297738_kind.operator jule::Ptr<_212b19352_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b169e2_TupleExpr>>()) {
			_case_begin_1b7d57288:;
			{
				_297817_d=(*(this->self))._method_eval_tuple(_297738_kind.operator jule::Ptr<_212b169e2_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1a9a2_BraceLit>>()) {
			_case_begin_1b7d57310:;
			{
				_297817_d=(*(this->self))._method_eval_brace_lit(_297738_kind.operator jule::Ptr<_212b1a9a2_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1edd5_FnDecl>>()) {
			_case_begin_1b7d57387:;
			{
				_297817_d=(*(this->self))._method_eval_anon_fn(_297738_kind.operator jule::Ptr<_212b1edd5_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b19792_BinopExpr>>()) {
			_case_begin_1b7d5740e:;
			{
				_297817_d=(*(this->self))._method_eval_binop(_297738_kind.operator jule::Ptr<_212b19792_BinopExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1c575_TernaryExpr>>()) {
			_case_begin_1b7d57486:;
			{
				_297817_d=(*(this->self))._method_eval_ternary(_297738_kind.operator jule::Ptr<_212b1c575_TernaryExpr>());
			}
		}
		_match_end_1b7d568c5:;
	}
	if ((_297817_d == nullptr)) {
		return nullptr;
	}
	if (((*(_297817_d))._field_kind == nullptr)) {
		return _297817_d;
	}
	if ((!((*(_297817_d))._field_decl)) && ((*(this->self))._field_prefix != nullptr)) {
		if (((((((!((*((*(_297817_d))._field_kind))._method_cpp_linked())) && ((*(_297817_d))._field_cast_kind == nullptr)) && (!((*((*(_297817_d))._field_kind))._field_variadic))) && (!((*(_297817_d))._field_lvalue))) && (!((*(_297817_d))._method_is_const()))) && ((*((*(_297817_d))._field_kind))._method_prim() != nullptr)) && _1ce6828d2_is_num((*((*((*(_297817_d))._field_kind))._method_prim()))._field_kind)) {
			(*(_297817_d))._field_cast_kind=(*(_297817_d))._field_kind;
		}
		_1ce72d30c_apply_cast_kind(_297817_d);
		if (((*((*(_297817_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_297817_d))._field_kind))._method_prim()))._method_is_any()))) {
			if (((*((*(this->self))._field_prefix))._method_prim() != nullptr) && (*((*((*(this->self))._field_prefix))._method_prim()))._method_is_any()) {
				(*(_297817_d))._field_cast_kind=(*(this->self))._field_prefix;
				_1ce72d076_apply_cast_kind_model(_297817_d);
				(*(_297817_d))._field_cast_kind=nullptr;
			}
		}
	}
	return _297817_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval(jule::Ptr<_212b16162_Expr> _305428_expr) {
	jule::Ptr<_1ce727449_Data> _305517_d = (*(this->self))._method_eval_expr_kind((*(_305428_expr))._field_kind);
	if ((_305517_d == nullptr) || ((*(_305517_d))._field_kind == nullptr)) {
		return nullptr;
	}
	{
		
		if (((*((*(_305517_d))._field_kind))._method_fnc() != nullptr)) {
			_case_begin_1b7d6cbb6:;
			{
				jule::Ptr<_1e83d630e_FnIns> _306221_f = (*((*(_305517_d))._field_kind))._method_fnc();
				if ((*(_306221_f))._method_is_builtin()) {
					goto _match_end_1b7d6c5cd;
				}
				if ((*(_306221_f))._field_generics.len() != static_cast<jule::I64>((*((*(_306221_f))._field_decl))._field_generics.len())) {
					(*((*(this->self))._field_s))._method_push_err((*(_305428_expr))._field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				}
				if ((*((*(_306221_f))._field_decl))._method_is_method()) {
					(*((*(this->self))._field_s))._method_push_err((*(_305428_expr))._field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_1b7d6c5cd:;
	}
	return _305517_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce728879_Eval::_method_eval_expr(jule::Ptr<_212b16162_Expr> _308033_expr) {
	jule::Ptr<_1ce727449_Data> _308117_d = (*(this->self))._method_eval(_308033_expr);
	{
		
		if ((_308117_d == nullptr)) {
			_case_begin_1b7d72aab:;
			{
				return nullptr;
			}
		}
		else if ((*(_308117_d))._field_decl) {
			_case_begin_1b7d72b22:;
			{
				(*(this->self))._method_push_err((*(_308033_expr))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_1b7d7247e:;
			{
				return _308117_d;
			}
		}
		_match_end_1b7d72407:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce728879_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}



inline _1ce729825_UnaryEval _1ce729825_UnaryEval::_static_method_new(jule::Ptr<_1ce728879_Eval> _310123_e) {
	return _1ce729825_UnaryEval(_310123_e,jule::Ptr<_1ce727449_Data>(),jule::Ptr<_212b18142_UnaryExpr>());
}



inline void _1ce729825_UnaryEval::_method_minus(void) {
	{
		
		if (((*((*this)._field_d))._field_kind == nullptr)) {
			_case_begin_1b7d74a47:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b7d74d55:;
			{
				if ((!(_1ce6828d2_is_num((*((*((*this)._field_d))._field_kind))._method_to_str())))) {
					(*this)._field_d=nullptr;
					return;
				}
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_strct() != nullptr)) {
			_case_begin_1b7d74dbb:;
			{
				if (((*((*((*((*this)._field_d))._field_kind))._method_strct()))._field_operators._field_neg == nullptr)) {
					(*this)._field_d=nullptr;
					return;
				}
			}
		}
		else {
			_case_begin_1b7d7456e:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_1b7d744a3:;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_f64()) {
				_case_begin_1b7d78430:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-(static_cast<jule::F64>((*((*((*this)._field_d))._field_constant))._method_read_f64())))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_1b7d78496:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((-(static_cast<jule::I64>((*((*((*this)._field_d))._field_constant))._method_read_i64())))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_1b7d7851d:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((-(static_cast<jule::I64>((*((*((*this)._field_d))._field_constant))._method_as_i64())))));
				}
			}
			_match_end_1b7d7740c:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_ptr<_1ce727449_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1ce729825_UnaryEval::_method_plus(void) {
	{
		
		if (((*((*this)._field_d))._field_kind == nullptr)) {
			_case_begin_1b7d7dc0a:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b7d7e018:;
			{
				if ((!(_1ce6828d2_is_num((*((*((*this)._field_d))._field_kind))._method_to_str())))) {
					(*this)._field_d=nullptr;
					return;
				}
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_strct() != nullptr)) {
			_case_begin_1b7d7e07e:;
			{
				if (((*((*((*((*this)._field_d))._field_kind))._method_strct()))._field_operators._field_pos == nullptr)) {
					(*this)._field_d=nullptr;
					return;
				}
			}
		}
		else {
			_case_begin_1b7d7d732:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_1b7d7d666:;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_f64()) {
				_case_begin_1b7d825c1:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+(static_cast<jule::F64>((*((*((*this)._field_d))._field_constant))._method_read_f64())))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_1b7d82637:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((+(static_cast<jule::I64>((*((*((*this)._field_d))._field_constant))._method_read_i64())))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_1b7d826ae:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((+(static_cast<jule::I64>((*((*((*this)._field_d))._field_constant))._method_as_i64())))));
				}
			}
			_match_end_1b7d8159d:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_ptr<_1ce727449_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1ce729825_UnaryEval::_method_caret(void) {
	{
		
		if (((*((*this)._field_d))._field_kind == nullptr)) {
			_case_begin_1b7d88022:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b7d88330:;
			{
				if ((!(_1ce682173_is_int((*((*((*this)._field_d))._field_kind))._method_to_str())))) {
					(*this)._field_d=nullptr;
					return;
				}
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_strct() != nullptr)) {
			_case_begin_1b7d88396:;
			{
				if (((*((*((*((*this)._field_d))._field_kind))._method_strct()))._field_operators._field_bit_not == nullptr)) {
					(*this)._field_d=nullptr;
					return;
				}
			}
		}
		else {
			_case_begin_1b7d87a49:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_1b7d8797d:;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_1b7d8b8e9:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((~(static_cast<jule::I64>((*((*((*this)._field_d))._field_constant))._method_read_i64())))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_1b7d8b960:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_u64(static_cast<jule::U64>((~(static_cast<jule::U64>((*((*((*this)._field_d))._field_constant))._method_read_u64())))));
				}
			}
			_match_end_1b7d8a8d7:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_ptr<_1ce727449_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1ce729825_UnaryEval::_method_excl(void) {
	jule::Ptr<_1ce762330_Prim> _322013_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_322013_t == nullptr) || (!((*(_322013_t))._method_is_bool()))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_bool()) {
				_case_begin_1b7d9234a:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_bool((!((*((*((*this)._field_d))._field_constant))._method_read_bool())));
				}
			}
			_match_end_1b7d9225c:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_ptr<_1ce727449_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1ce729825_UnaryEval::_method_star(void) {
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_ptr<_1ce727449_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
	{
		
		if (((*((*((*this)._field_d))._field_kind))._method_ptr() != nullptr)) {
			_case_begin_1b7d95c66:;
			{
				if ((!((*((*this)._field_e))._method_is_unsafe()))) {
					(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				jule::Ptr<_1ce7649e7_Ptr> _325221_t = (*((*((*this)._field_d))._field_kind))._method_ptr();
				if ((*(_325221_t))._method_is_unsafe()) {
					(*this)._field_d=nullptr;
					return;
				}
				(*((*this)._field_d))._field_kind=(*(_325221_t))._field_elem;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_sptr() != nullptr)) {
			_case_begin_1b7d95ccc:;
			{
				(*((*this)._field_d))._field_kind=(*((*((*((*this)._field_d))._field_kind))._method_sptr()))._field_elem;
			}
		}
		else {
			_case_begin_1b7d95804:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_1b7d9579e:;
	}
	(*((*this)._field_d))._field_constant=nullptr;
	(*((*this)._field_d))._field_lvalue=true;
}



inline void _1ce729825_UnaryEval::_method_amper(void) {
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c0bbc_StructLitExprModel>>()) {
			_case_begin_1b7d9b3ba:;
			{
				jule::Ptr<_1e83c0bbc_StructLitExprModel> _327221_lit = (*((*this)._field_d))._field_model.operator jule::Ptr<_1e83c0bbc_StructLitExprModel>();
				_1ce72b915_make_struct_lit_alloc((*this)._field_d,_327221_lit);
			}
		}
		else {
			_case_begin_1b7d9aac3:;
			{
				{
					
					if (_1ce76507a_can_get_ptr((*this)._field_d)) {
						_case_begin_1b7d9b4ca:;
						{
							(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce7649e7_Ptr>(new( std::nothrow ) _1ce7649e7_Ptr((*((*this)._field_d))._field_kind))));
							(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_ptr<_1ce727449_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
						}
					}
					else {
						_case_begin_1b7d9b134:;
						{
							(*this)._field_d=nullptr;
						}
					}
					_match_end_1b7d9a7c6:;
				}
			}
		}
		_match_end_1b7d9aa6d:;
	}
	if (((*this)._field_d != nullptr)) {
		(*((*this)._field_d))._field_constant=nullptr;
		(*((*this)._field_d))._field_lvalue=false;
	}
}



inline void _1ce729825_UnaryEval::_method_type_decl(void) {
	_1ce767731_TypeChecker _329717_tc = _1ce767731_TypeChecker((*((*this)._field_e))._field_s,(*((*this)._field_e))._field_lookup,jule::Ptr<_1ce766eb1_Referencer>(),(*((*this)._field_u))._field_op,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool());
	{
		auto &_match_expr{ (*((*this)._field_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b7da2723:;
			{
				(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_329717_tc._method_build_ptr_from_type((*((*this)._field_d))._field_kind)));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_1b7da2789:;
			{
				(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_329717_tc._method_build_sptr_from_type((*((*this)._field_d))._field_kind)));
			}
		}
		else {
			_case_begin_1b7d9eda2:;
			{
				(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*((*this)._field_u))._field_op._field_kind),jule::Any((*((*((*this)._field_d))._field_kind))._method_to_str())}));
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_1b7da0c71:;
	}
	(*((*this)._field_d))._field_decl=true;
}



inline void _1ce729825_UnaryEval::_method_eval_data(void) {
	{
		auto &_match_expr{ (*((*this)._field_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("&", 1)) {
			_case_begin_1b7da5bdd:;
			{
				jule::Ptr<_1ce76121e_TypeKind> _331921_prefix = (*((*this)._field_e))._field_prefix;
				(*((*this)._field_e))._field_prefix=nullptr;
				(*this)._field_d=(*((*this)._field_e))._method_eval_expr_kind((*((*this)._field_u))._field_expr);
				(*((*this)._field_e))._field_prefix=_331921_prefix;
			}
		}
		else {
			_case_begin_1b7da536e:;
			{
				(*this)._field_d=(*((*this)._field_e))._method_eval_expr_kind((*((*this)._field_u))._field_expr);
			}
		}
		_match_end_1b7da56b0:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce729825_UnaryEval::_method_eval(jule::Ptr<_212b18142_UnaryExpr> _332827_u) {
	(*this)._field_u=_332827_u;
	(*this)._method_eval_data();
	if (((*this)._field_d == nullptr)) {
		return nullptr;
	}
	if ((*((*this)._field_d))._field_decl) {
		(*this)._method_type_decl();
		return (*this)._field_d;
	}
	jule::Ptr<_1ce76121e_TypeKind> _333917_cast_kind = (*((*this)._field_d))._field_cast_kind;
	jule::Ptr<_1ce76121e_TypeKind> _334013_kind = (*((*this)._field_d))._field_kind;
	{
		auto &_match_expr{ (*((*this)._field_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_1b7da9e56:;
			{
				(*this)._method_minus();
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_1b7da9ebc:;
			{
				(*this)._method_plus();
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_1b7daa033:;
			{
				(*this)._method_caret();
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_1b7daa099:;
			{
				(*this)._method_excl();
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b7daa110:;
			{
				(*this)._method_star();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_1b7daa4d9:;
			{
				(*this)._method_amper();
			}
		}
		else {
			_case_begin_1b7da80db:;
			{
				(*this)._field_d=nullptr;
			}
		}
		_match_end_1b7da9b8c:;
	}
	{
		
		if (((*this)._field_d == nullptr)) {
			_case_begin_1b7dac024:;
			{
				(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*((*this)._field_u))._field_op._field_kind),jule::Any((*(_334013_kind))._method_to_str())}));
				return nullptr;
			}
		}
		else if ((*((*this)._field_d))._method_is_const()) {
			_case_begin_1b7dac497:;
			{
				(*((*this)._field_d))._field_model=jule::Any((*((*this)._field_d))._field_constant);
			}
		}
		else if ((_333917_cast_kind != nullptr)) {
			_case_begin_1b7dac50d:;
			{
				(*((*this)._field_d))._field_cast_kind=_333917_cast_kind;
				_1ce72d30c_apply_cast_kind((*this)._field_d);
			}
		}
		_match_end_1b7dabe7a:;
	}
	(*((*this)._field_d))._field_mutable=true;
	return (*this)._field_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce729825_UnaryEval &_Src) {
	_Stream << "UnaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "u:" << _Src._field_u;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ce76121e_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _7817_kind = jule::Str();
	if ((*this)._field_variadic) {
		_7817_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_cpp_linked()) {
		_7817_kind+=jule::Str("cpp.", 4);
		_7817_kind+=(*this)._field_cpp_ident;
	} else {
		_7817_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _7817_kind;
}



inline jule::Bool _1ce76121e_TypeKind::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _9426_other) {
	if ((*(this->self))._method_is_nil()) {
		return (*(_9426_other))._method_is_nil();
	}
	if ((*(this->self))._method_cpp_linked()) {
		return (*(_9426_other))._method_cpp_linked() && ((*(this->self))._field_cpp_ident == (*(_9426_other))._field_cpp_ident);
	}
	return (*(this->self))._field_kind.get()._method_equals(_9426_other);
}



inline jule::Bool _1ce76121e_TypeKind::_method_cpp_linked(void) {
	return ((*this)._field_cpp_ident.len() != 0LL);
}



inline jule::Bool _1ce76121e_TypeKind::_method_is_nil(void) {
	return ((*this)._field_kind == nullptr);
}



inline jule::Bool _1ce76121e_TypeKind::_method_void(void) {
	jule::Ptr<_1ce762330_Prim> _11713_prim = (*this)._method_prim();
	return (_11713_prim != nullptr) && ((*(_11713_prim))._field_kind == jule::Str("void", 4));
}



inline jule::Bool _1ce76121e_TypeKind::_method_mutable(void) {
	{
		_1ce76121e_TypeKind* _12421__self = (&((*this)));
		if (((*(_12421__self))._method_strct() != nullptr)) {
			return (*((*(_12421__self))._method_strct()))._field_mutable;
		}
		if (((*(_12421__self))._method_trt() != nullptr)) {
			return (*((*(_12421__self))._method_trt()))._field_mutable;
		}
		if (((*(_12421__self))._method_prim() != nullptr)) {
			jule::Ptr<_1ce762330_Prim> _13321_p = (*(_12421__self))._method_prim();
			return (*(_13321_p))._method_is_any();
		}
		if (((*(_12421__self))._method_arr() != nullptr)) {
			return (*((*((*(_12421__self))._method_arr()))._field_elem))._method_mutable();
		}
		return (((*(_12421__self))._method_slc() != nullptr) || ((*(_12421__self))._method_ptr() != nullptr)) || ((*(_12421__self))._method_sptr() != nullptr);
	}
}



inline jule::Bool _1ce76121e_TypeKind::_method_nil_compatible(void) {
	{
		_1ce76121e_TypeKind* _14821__self = (&((*this)));
		jule::Ptr<_1ce762330_Prim> _15017_prim = (*(_14821__self))._method_prim();
		if ((_15017_prim != nullptr) && (*(_15017_prim))._method_is_any()) {
			return true;
		}
		return ((((((*(_14821__self))._method_is_nil() || ((*(_14821__self))._method_fnc() != nullptr)) || ((*(_14821__self))._method_sptr() != nullptr)) || ((*(_14821__self))._method_ptr() != nullptr)) || ((*(_14821__self))._method_trt() != nullptr)) || ((*(_14821__self))._method_slc() != nullptr)) || ((*(_14821__self))._method_map() != nullptr);
	}
}



inline jule::Bool _1ce76121e_TypeKind::_method_performs_rc(void) {
	{
		_1ce76121e_TypeKind* _16821__self = (&((*this)));
		return (((*(_16821__self))._method_sptr() != nullptr) || ((*(_16821__self))._method_slc() != nullptr)) || ((*(_16821__self))._method_trt() != nullptr);
	}
}



inline jule::Bool _1ce76121e_TypeKind::_method_supports_cloning(void) {
	{
		_1ce76121e_TypeKind* _17621__self = (&((*this)));
		{
			
			if (((*(_17621__self))._method_prim() != nullptr)) {
				_case_begin_1b893ddc4:;
				{
					return (!((*((*(_17621__self))._method_prim()))._method_is_any()));
				}
			}
			else if (((*(_17621__self))._method_enm() != nullptr)) {
				_case_begin_1b893d742:;
				{
					return true;
				}
			}
			else if (((*(_17621__self))._method_fnc() != nullptr)) {
				_case_begin_1b893d7a8:;
				{
					return true;
				}
			}
			else if (((*(_17621__self))._method_ptr() != nullptr)) {
				_case_begin_1b893d830:;
				{
					return true;
				}
			}
			else if (((*(_17621__self))._method_slc() != nullptr)) {
				_case_begin_1b893d8a7:;
				{
					return (*((*((*(_17621__self))._method_slc()))._field_elem))._method_supports_cloning();
				}
			}
			else if (((*(_17621__self))._method_map() != nullptr)) {
				_case_begin_1b893da72:;
				{
					jule::Ptr<_1ce763b39_Map> _18621_m = (*(_17621__self))._method_map();
					return (*((*(_18621_m))._field_key))._method_supports_cloning() && (*((*(_18621_m))._field_val))._method_supports_cloning();
				}
			}
			else if (((*(_17621__self))._method_arr() != nullptr)) {
				_case_begin_1b893dae9:;
				{
					return (*((*((*(_17621__self))._method_arr()))._field_elem))._method_supports_cloning();
				}
			}
			else if (((*(_17621__self))._method_sptr() != nullptr)) {
				_case_begin_1b893db71:;
				{
					return (*((*((*(_17621__self))._method_sptr()))._field_elem))._method_supports_cloning();
				}
			}
			else if (((*(_17621__self))._method_strct() != nullptr)) {
				_case_begin_1b893dbe8:;
				{
					jule::Ptr<_1e83b84bc_StructIns> _19325_s = (*(_17621__self))._method_strct();
					if ((!((*(_19325_s))._field_mutable))) {
						return true;
					}
					if ((((*(_19325_s))._field_decl == nullptr) || (*((*(_19325_s))._field_decl))._field_cpp_linked) || (!((*((*(_19325_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						return false;
					}
					return true;
				}
			}
			else {
				_case_begin_1b893d5cc:;
				{
					return false;
				}
			}
			_match_end_1b893d555:;
		}
	}
}



inline jule::Bool _1ce76121e_TypeKind::_method_variadicable(void) {
	{
		_1ce76121e_TypeKind* _21321__self = (&((*this)));
		return ((*(_21321__self))._method_slc() != nullptr);
	}
}



inline jule::Ptr<_1ce762330_Prim> _1ce76121e_TypeKind::_method_prim(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce762330_Prim>>()) {
			_case_begin_1b8948c58:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce762330_Prim>();
			}
		}
		else {
			_case_begin_1b894864d:;
			{
				return nullptr;
			}
		}
		_match_end_1b893b7b7:;
	}
}



inline jule::Ptr<_1ce76286e_Sptr> _1ce76121e_TypeKind::_method_sptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce76286e_Sptr>>()) {
			_case_begin_1b893adc1:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce76286e_Sptr>();
			}
		}
		else {
			_case_begin_1b8948a7c:;
			{
				return nullptr;
			}
		}
		_match_end_1b8949154:;
	}
}



inline jule::Ptr<_1ce7649e7_Ptr> _1ce76121e_TypeKind::_method_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce7649e7_Ptr>>()) {
			_case_begin_1b894a694:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce7649e7_Ptr>();
			}
		}
		else {
			_case_begin_1b8949583:;
			{
				return nullptr;
			}
		}
		_match_end_1b8949891:;
	}
}



inline jule::Ptr<_1e8648917_Enum> _1ce76121e_TypeKind::_method_enm(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e8648917_Enum>>()) {
			_case_begin_1b894b3ed:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1e8648917_Enum>();
			}
		}
		else {
			_case_begin_1b894a5c8:;
			{
				return nullptr;
			}
		}
		_match_end_1b894ab6c:;
	}
}



inline jule::Ptr<_1ce764244_Arr> _1ce76121e_TypeKind::_method_arr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce764244_Arr>>()) {
			_case_begin_1b894c157:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce764244_Arr>();
			}
		}
		else {
			_case_begin_1b894a397:;
			{
				return nullptr;
			}
		}
		_match_end_1b894b8c6:;
	}
}



inline jule::Ptr<_1ce762e02_Slc> _1ce76121e_TypeKind::_method_slc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce762e02_Slc>>()) {
			_case_begin_1b894cdb1:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce762e02_Slc>();
			}
		}
		else {
			_case_begin_1b894b123:;
			{
				return nullptr;
			}
		}
		_match_end_1b894c630:;
	}
}



inline jule::Ptr<_1e83d630e_FnIns> _1ce76121e_TypeKind::_method_fnc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e83d630e_FnIns>>()) {
			_case_begin_1b894db1a:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1e83d630e_FnIns>();
			}
		}
		else {
			_case_begin_1b894bd7c:;
			{
				return nullptr;
			}
		}
		_match_end_1b894d389:;
	}
}



inline jule::Ptr<_1e83b84bc_StructIns> _1ce76121e_TypeKind::_method_strct(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b84bc_StructIns>>()) {
			_case_begin_1b894e445:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1e83b84bc_StructIns>();
			}
		}
		else {
			_case_begin_1b894de28:;
			{
				return nullptr;
			}
		}
		_match_end_1b894d80c:;
	}
}



inline jule::Ptr<_1e85a7865_Trait> _1ce76121e_TypeKind::_method_trt(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e85a7865_Trait>>()) {
			_case_begin_1b894e016:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1e85a7865_Trait>();
			}
		}
		else {
			_case_begin_1b894e522:;
			{
				return nullptr;
			}
		}
		_match_end_1b894ecd6:;
	}
}



inline jule::Ptr<_1ce763b39_Map> _1ce76121e_TypeKind::_method_map(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce763b39_Map>>()) {
			_case_begin_1b894e588:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce763b39_Map>();
			}
		}
		else {
			_case_begin_1b895028c:;
			{
				return nullptr;
			}
		}
		_match_end_1b8950b2d:;
	}
}



inline jule::Ptr<_1ce763485_Tuple> _1ce76121e_TypeKind::_method_tup(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce763485_Tuple>>()) {
			_case_begin_1b8950303:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1ce763485_Tuple>();
			}
		}
		else {
			_case_begin_1b895105c:;
			{
				return nullptr;
			}
		}
		_match_end_1b89518dc:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce76121e_TypeKind &_Src) {
	_Stream << ((_1ce76121e_TypeKind)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Bool _1ce761b37_TypeSymbol::_method_checked(void) {
	return ((*this)._field_kind != nullptr);
}



inline void _1ce761b37_TypeSymbol::_method_remove_kind(void) {
	(*this)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce761b37_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ce762330_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _1ce762330_Prim::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _33226_other) {
	jule::Ptr<_1ce762330_Prim> _33313_prim = (*(_33226_other))._method_prim();
	if ((_33313_prim == nullptr)) {
		return false;
	}
	return (*(this->self))._field_kind == (*(_33313_prim))._field_kind;
}



inline jule::Bool _1ce762330_Prim::_method_is_i8(void) {
	return ((*this)._field_kind == jule::Str("i8", 2));
}



inline jule::Bool _1ce762330_Prim::_method_is_i16(void) {
	return ((*this)._field_kind == jule::Str("i16", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_i32(void) {
	return ((*this)._field_kind == jule::Str("i32", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_i64(void) {
	return ((*this)._field_kind == jule::Str("i64", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_u8(void) {
	return ((*this)._field_kind == jule::Str("u8", 2));
}



inline jule::Bool _1ce762330_Prim::_method_is_u16(void) {
	return ((*this)._field_kind == jule::Str("u16", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_u32(void) {
	return ((*this)._field_kind == jule::Str("u32", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_u64(void) {
	return ((*this)._field_kind == jule::Str("u64", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_f32(void) {
	return ((*this)._field_kind == jule::Str("f32", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_f64(void) {
	return ((*this)._field_kind == jule::Str("f64", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_int(void) {
	return ((*this)._field_kind == jule::Str("int", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_uint(void) {
	return ((*this)._field_kind == jule::Str("uint", 4));
}



inline jule::Bool _1ce762330_Prim::_method_is_uintptr(void) {
	return ((*this)._field_kind == jule::Str("uintptr", 7));
}



inline jule::Bool _1ce762330_Prim::_method_is_bool(void) {
	return ((*this)._field_kind == jule::Str("bool", 4));
}



inline jule::Bool _1ce762330_Prim::_method_is_str(void) {
	return ((*this)._field_kind == jule::Str("str", 3));
}



inline jule::Bool _1ce762330_Prim::_method_is_any(void) {
	return ((*this)._field_kind == jule::Str("any", 3));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce762330_Prim &_Src) {
	_Stream << ((_1ce762330_Prim)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Str _1ce76286e_Sptr::_method_to_str(void) {
	return jule::Str("&", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _1ce76286e_Sptr::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _40126_other) {
	jule::Ptr<_1ce76286e_Sptr> _40213_sptr = (*(_40126_other))._method_sptr();
	if ((_40213_sptr == nullptr)) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_40213_sptr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce76286e_Sptr &_Src) {
	_Stream << ((_1ce76286e_Sptr)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Str _1ce762e02_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _1ce762e02_Slc::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _42026_other) {
	jule::Ptr<_1ce762e02_Slc> _42113_slc = (*(_42026_other))._method_slc();
	if ((_42113_slc == nullptr)) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_42113_slc))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce762e02_Slc &_Src) {
	_Stream << ((_1ce762e02_Slc)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Str _1ce763485_Tuple::_method_to_str(void) {
	jule::Str _43717_s = jule::Str("(", 1);
	_43717_s+=(*((*this)._field_types[0LL]))._method_to_str();
	{
		auto expr = (*this)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_1b896426d:;
		if (it != expr.end()) {
			jule::Ptr<_1ce76121e_TypeKind> &_1b896447c_t = *it;
			{
				_43717_s+=jule::Str(",", 1);
				_43717_s+=(*(_1b896447c_t))._method_to_str();
			}
			_iter_next_1b896426d:;
			++it;
			goto _iter_begin_1b896426d;
		}
		_iter_end_1b896426d:;
	}
	_43717_s+=jule::Str(")", 1);
	return _43717_s;
}



inline jule::Bool _1ce763485_Tuple::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _44826_other) {
	jule::Ptr<_1ce763485_Tuple> _44913_tup = (*(_44826_other))._method_tup();
	if ((_44913_tup == nullptr)) {
		return false;
	}
	if ((*(this->self))._field_types.len() != static_cast<jule::I64>((*(_44913_tup))._field_types.len())) {
		return false;
	}
	jule::I64 _45817_i = 0LL;
	for (; _45817_i < static_cast<jule::I64>((*(this->self))._field_types.len()); (_45817_i)++) {
		{
			if ((!((*((*(this->self))._field_types[_45817_i]))._method_equals((*(_44913_tup))._field_types[_45817_i])))) {
				return false;
			}
		}
	_iter_next_1b8966ea7:;
	}
	_iter_end_1b8966ea7:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce763485_Tuple &_Src) {
	_Stream << ((_1ce763485_Tuple)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Str _1ce763b39_Map::_method_to_str(void) {
	jule::Str _47817_s = jule::Str("[", 1);
	_47817_s+=(*((*this)._field_key))._method_to_str();
	_47817_s+=jule::Str(":", 1);
	_47817_s+=(*((*this)._field_val))._method_to_str();
	_47817_s+=jule::Str("]", 1);
	return _47817_s;
}



inline jule::Bool _1ce763b39_Map::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _48726_other) {
	jule::Ptr<_1ce763b39_Map> _48813_map = (*(_48726_other))._method_map();
	if ((_48813_map == nullptr)) {
		return false;
	}
	return (*((*(this->self))._field_key))._method_equals((*(_48813_map))._field_key) && (*((*(this->self))._field_val))._method_equals((*(_48813_map))._field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce763b39_Map &_Src) {
	_Stream << ((_1ce763b39_Map)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Str _1ce764244_Arr::_method_to_str(void) {
	jule::Str _50617_s = jule::Str("[", 1);
	_50617_s+=_1cde2b4ab_itoa((*this)._field_n);
	_50617_s+=jule::Str("]", 1);
	_50617_s+=(*((*this)._field_elem))._method_to_str();
	return _50617_s;
}



inline jule::Bool _1ce764244_Arr::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _51426_other) {
	jule::Ptr<_1ce764244_Arr> _51513_arr = (*(_51426_other))._method_arr();
	if ((_51513_arr == nullptr)) {
		return false;
	}
	return ((*(this->self))._field_n == (*(_51513_arr))._field_n) && (*((*(this->self))._field_elem))._method_equals((*(_51513_arr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce764244_Arr &_Src) {
	_Stream << ((_1ce764244_Arr)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Str _1ce7649e7_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _1ce7649e7_Ptr::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _53826_other) {
	jule::Ptr<_1ce7649e7_Ptr> _53913_ptr = (*(_53826_other))._method_ptr();
	if ((_53913_ptr == nullptr)) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_53913_ptr))._field_elem);
}



inline jule::Bool _1ce7649e7_Ptr::_method_is_unsafe(void) {
	return ((*this)._field_elem == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce7649e7_Ptr &_Src) {
	_Stream << ((_1ce7649e7_Ptr)(_Src))._method_to_str();
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce766eb1_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212989117_CompileInfo &_Src) {
	_Stream << "CompileInfo{";
	_Stream << "prod:" << _Src._field_prod << ", ";
	_Stream << "test:" << _Src._field_test << ", ";
	_Stream << "compiler:" << _Src._field_compiler << ", ";
	_Stream << "cpp_std:" << _Src._field_cpp_std;
	_Stream << "}";
	return _Stream;
}



inline void _21299b019_DirectiveEval::_method_push_err(_212ae5c02_Token _2127_t,jule::Str _2137_fmt,jule::Slice<jule::Any> _2150_args) {
	(*this)._field_logs = jule::alloc_for_append((*this)._field_logs,1);(*this)._field_logs.__push(_21287ea02_Log(static_cast<jule::I64>(1LL),_2127_t._field_row,_2127_t._field_column,(*(_2127_t._field_file))._method_path(),_212880739_logf(_2137_fmt,_2150_args),jule::Str(),jule::Str()));
}



inline jule::Slice<jule::Slice<_212ae5c02_Token>> _21299b019_DirectiveEval::_method_split_operans(jule::Str _3332_op,jule::Slice<_212ae5c02_Token>& _3352_tokens) {
	jule::Slice<jule::Slice<_212ae5c02_Token>> _3417_parts = jule::Slice<jule::Slice<_212ae5c02_Token>>::alloc(0LL,10LL);
	jule::I64 _3617_i = 0LL;
	jule::I64 _3717_range_n = 0LL;
	jule::I64 _3817_last = 0LL;
	for (; _3617_i < static_cast<jule::I64>((static_cast<jule::I64>(_3352_tokens.len()) - 1LL)); (_3617_i)++) {
		{
			_212ae5c02_Token _4017_b = _3352_tokens[_3617_i];
			if (_4017_b._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _4017_b._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_1b8c8e19c:;
						{
							(_3717_range_n)++;
							goto _iter_next_1b8c8ce59;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_1b8c8e257:;
						{
							(_3717_range_n)--;
						}
					}
					_match_end_1b8c8e114:;
				}
			}
			if ((_3717_range_n > 0LL) || (_4017_b._field_id != static_cast<jule::U64>(7LLU))) {
				goto _iter_next_1b8c8ce59;
			}
			if (_4017_b._field_kind == _3332_op) {
				_3417_parts = jule::alloc_for_append(_3417_parts,1);_3417_parts.__push(_3352_tokens.slice(_3817_last,_3617_i));
				_3817_last=static_cast<jule::I64>((_3617_i + 1LL));
			}
		}
	_iter_next_1b8c8ce59:;
	}
	_iter_end_1b8c8ce59:;
	if (_3817_last < static_cast<jule::I64>(_3352_tokens.len())) {
		_3417_parts = jule::alloc_for_append(_3417_parts,1);_3417_parts.__push(_3352_tokens.slice(_3817_last));
	} else {
		(*this)._method_push_err(_3352_tokens[(_3817_last - 1LL)],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _3417_parts;
}



inline jule::Bool _21299b019_DirectiveEval::_method_eval_directive_ident(jule::Str _7435_ident) {
	if (_7435_ident.empty()) {
		return false;
	}
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_1b8c934d1:;
		if (it != expr.end()) {
			jule::Str &_1b8c9305d_var = *it;
			{
				if (_1b8c9305d_var == _7435_ident) {
					return true;
				}
			}
			_iter_next_1b8c934d1:;
			++it;
			goto _iter_begin_1b8c934d1;
		}
		_iter_end_1b8c934d1:;
	}
	return false;
}



inline jule::Bool _21299b019_DirectiveEval::_method_eval_directive_part(jule::Slice<_212ae5c02_Token> _8842_part) {
	jule::Bool _8913_logical_not = (_8842_part[0LL]._field_id == static_cast<jule::U64>(7LLU)) && (_8842_part[0LL]._field_kind == jule::Str("!", 1));
	if (_8913_logical_not) {
		_8842_part=_8842_part.slice(1LL);
	}
	if ((_8842_part.len() > 1LL)) {
		(*this)._method_push_err(_8842_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _9917_result = (*this)._method_eval_directive_ident(_8842_part[0LL]._field_kind);
	if (_8913_logical_not) {
		_9917_result=(!(_9917_result));
	}
	return _9917_result;
}



inline jule::Bool _21299b019_DirectiveEval::_method_eval(void) {
	if (((*((*this)._field_d))._field_args.len() == 0LL)) {
		(*this)._method_push_err((*((*this)._field_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _11217_result = false;
	jule::Slice<jule::Slice<_212ae5c02_Token>> _11417_logical_or_parts = (*this)._method_split_operans(jule::Str("||", 2),(*((*this)._field_d))._field_args);
	if ((_11417_logical_or_parts == nullptr)) {
		return false;
	}
	{
		auto &expr = _11417_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_1b8c9a065:;
		if (it != expr.end()) {
			jule::Slice<_212ae5c02_Token> _1b8c99b58_part = *it;
			{
				jule::Bool _12021_and = true;
				jule::Slice<jule::Slice<_212ae5c02_Token>> _12121_logical_and_parts = (*this)._method_split_operans(jule::Str("&&", 2),_1b8c99b58_part);
				if ((_12121_logical_and_parts == nullptr)) {
					return false;
				}
				{
					auto &expr = _12121_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_1b8c9b6e8:;
					if (it != expr.end()) {
						jule::Slice<_212ae5c02_Token> _1b8c9b352_and_part = *it;
						{
							_212ae5c02_Token _12721_first = _1b8c9b352_and_part[0LL];
							if ((_12721_first._field_id == static_cast<jule::U64>(3LLU)) && (_12721_first._field_kind == jule::Str("(", 1))) {
								_212ae5c02_Token _12925_end = _1b8c9b352_and_part[(_1b8c9b352_and_part.len() - 1LL)];
								if ((_12925_end._field_id != static_cast<jule::U64>(3LLU)) || (_12925_end._field_kind != jule::Str(")", 1))) {
									(*this)._method_push_err(_12721_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								}
								_1b8c9b352_and_part=_1b8c9b352_and_part.slice(1LL,(_1b8c9b352_and_part.len() - 1LL));
							}
							_12021_and=_12021_and && (*this)._method_eval_directive_part(_1b8c9b352_and_part);
						}
						_iter_next_1b8c9b6e8:;
						++it;
						goto _iter_begin_1b8c9b6e8;
					}
					_iter_end_1b8c9b6e8:;
				}
				_11217_result=_11217_result || _12021_and;
			}
			_iter_next_1b8c9a065:;
			++it;
			goto _iter_begin_1b8c9a065;
		}
		_iter_end_1b8c9a065:;
	}
	return _11217_result;
}







std::ostream &operator<<(std::ostream &_Stream, const _21299b019_DirectiveEval &_Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "vars:" << _Src._field_vars;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b54c4188_JuleImporter> _1b54c4188_JuleImporter::_static_method_new(_212989117_CompileInfo _7423_info) {
	jule::Ptr<_1b54c4188_JuleImporter> _7517_imp = jule::new_struct<_1b54c4188_JuleImporter>(new( std::nothrow ) _1b54c4188_JuleImporter(jule::Slice<jule::Str>({_21289b502_PATH_STDLIB}),jule::Str(),jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>>(),jule::Slice<jule::Str>()));
	_21298a091_init_vars((*(_7517_imp))._field_vars,_7423_info);
	return _7517_imp;
}



inline jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> _1b54c4188_JuleImporter::_method_all_packages(void) {
	return (*this)._field_pkgs;
}



inline void _1b54c4188_JuleImporter::_method_set_mod_path(jule::Str _9135_path) {
	(*this)._field_mod=_9135_path;
}



inline jule::Str _1b54c4188_JuleImporter::_method_get_mod_path(void) {
	return (*this)._field_mod;
}



inline jule::Str _1b54c4188_JuleImporter::_method_mod_by_id(jule::I64 _9928_id) {
	return (*this)._field_mods[_9928_id];
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1b54c4188_JuleImporter::_method_get_import(jule::Str _10333_path) {
	{
		auto &expr = (*this)._field_pkgs;
		auto it = expr.begin();
		_iter_begin_1b8ca44e2:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8ca45d0_p = *it;
			{
				if ((*(_1b8ca45d0_p))._field_path == _10333_path) {
					return _1b8ca45d0_p;
				}
			}
			_iter_next_1b8ca44e2:;
			++it;
			goto _iter_begin_1b8ca44e2;
		}
		_iter_end_1b8ca44e2:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_2129e26e2_Ast>>,jule::Slice<_21287ea02_Log>> _1b54c4188_JuleImporter::_method_import_package(jule::Str _11237_path,jule::Bool _11248_update_mod) {
	jule::Slice<jule::Ptr<_211184319_DirEntry>> _11317_dirents = ({
		auto except = _211184759_Directory::_static_method_read(_11237_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_21287ea02_Log>({_1b54c383b_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _11237_path)}));
			return std::make_tuple(nullptr,jule::Slice<_21287ea02_Log>({_1b54c383b_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _11237_path)}));
		} jule::Slice<jule::Ptr<_211184319_DirEntry>>();});
	});
	if (_11248_update_mod) {
		jule::Str _11817_new_mod = _2129ab17d_find_module_file_deep(_11237_path);
		if (_11817_new_mod != (*this)._field_mod) {
			(*this)._field_mod=_11817_new_mod;
			jule::Slice<_21287ea02_Log> _12125_errs = _2129acb52_check_module_file((*this)._field_mod);
			if ((_12125_errs.len() != 0LL)) {
				return std::make_tuple(nullptr,_12125_errs);
			}
		}
	}
	jule::Slice<jule::Ptr<_2129e26e2_Ast>> _12817_asts = jule::Slice<jule::Ptr<_2129e26e2_Ast>>::alloc(0LL,static_cast<jule::I64>(_11317_dirents.len()));
	{
		auto &expr = _11317_dirents;
		auto it = expr.begin();
		_iter_begin_1b8ca97c2:;
		if (it != expr.end()) {
			jule::Ptr<_211184319_DirEntry> _1b8ca9c34_dirent = *it;
			{
				if ((*((*(_1b8ca9c34_dirent))._field_stat))._method_is_dir() || (!(_21280457b_has_suffix((*(_1b8ca9c34_dirent))._field_name,jule::Str(".jule", 5))))) {
					goto _iter_next_1b8ca97c2;
				}
				jule::Str _13517__path = _211dc6ce7_join(jule::Slice<jule::Str>({_11237_path,(*(_1b8ca9c34_dirent))._field_name}));
				jule::Ptr<_212aed0c2_File> _13621_file = _212aed7dc_new_file_set(_13517__path);
				(*(_13621_file))._method_fill(_1b54c3693_read_buff((*(_13621_file))._method_path()));
				jule::Slice<_21287ea02_Log> _13821_errors = _212b08b05_lex(_13621_file);
				if ((_13821_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_13821_errors);
				}
				jule::Ptr<_21313d9a8_FileInfo> _14321_finfo = _213188937_parse_file(_13621_file);
				if (((*(_14321_finfo))._field_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,(*(_14321_finfo))._field_errors);
				}
				if ((!(_212988bb6_is_pass_file_annotation((*(_1b8ca9c34_dirent))._field_name)))) {
					goto _iter_next_1b8ca97c2;
				}
				jule::Bool _15318_r;
				jule::Slice<_21287ea02_Log> _15325_logs;
				std::tie(_15318_r,_15325_logs) = _1b54c3c9d_is_pass_build_directives((*(_14321_finfo))._field_ast);
				if ((_15325_logs.len() > 0LL)) {
					return std::make_tuple(nullptr,_15325_logs);
				}
				if ((!(_15318_r))) {
					goto _iter_next_1b8ca97c2;
				}
				_12817_asts = jule::alloc_for_append(_12817_asts,1);_12817_asts.__push((*(_14321_finfo))._field_ast);
			}
			_iter_next_1b8ca97c2:;
			++it;
			goto _iter_begin_1b8ca97c2;
		}
		_iter_end_1b8ca97c2:;
	}
	return std::make_tuple(_12817_asts,nullptr);
}



inline void _1b54c4188_JuleImporter::_method_imported(jule::Ptr<_1ce6a0317_ImportInfo> _16935_imp) {
	{
		auto &expr = (*this)._field_pkgs;
		auto it = expr.begin();
		_iter_begin_1b8cb1d7e:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8cb1e6c_p = *it;
			{
				if (((*(_1b8cb1e6c_p))._field_cpp_linked == (*(_16935_imp))._field_cpp_linked) && ((*(_1b8cb1e6c_p))._field_link_path == (*(_16935_imp))._field_link_path)) {
					return;
				}
			}
			_iter_next_1b8cb1d7e:;
			++it;
			goto _iter_begin_1b8cb1d7e;
		}
		_iter_end_1b8cb1d7e:;
	}
	if (((*this)._field_mod.len() != 0LL)) {
		{
			auto &expr = (*this)._field_mods;
			auto it = expr.begin();
			_iter_begin_1b8cb3347:;
			if (it != expr.end()) {
				jule::I64 _1b8cb3435_i = it - expr.begin();
				jule::Str _1b8cb3633_mod = *it;
				{
					if ((*this)._field_mod == _1b8cb3633_mod) {
						(*(_16935_imp))._field_mod_id=_1b8cb3435_i;
						goto _julec_label_setted;
					}
				}
				_iter_next_1b8cb3347:;
				++it;
				_1b8cb3435_i++;
				goto _iter_begin_1b8cb3347;
			}
			_iter_end_1b8cb3347:;
		}
		(*(_16935_imp))._field_mod_id=static_cast<jule::I64>((*this)._field_mods.len());
		(*this)._field_mods = jule::alloc_for_append((*this)._field_mods,1);(*this)._field_mods.__push((*this)._field_mod);
		_julec_label_setted:;
	}
	(*this)._field_pkgs = jule::alloc_for_append((*this)._field_pkgs,1);(*this)._field_pkgs.__push(_16935_imp);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54c4188_JuleImporter &_Src) {
	_Stream << "JuleImporter{";
	_Stream << "mods:" << _Src._field_mods << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "pkgs:" << _Src._field_pkgs << ", ";
	_Stream << "vars:" << _Src._field_vars;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54c9e91_OrderedDefines &_Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b54ca579_DefineOrderer::_static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_1e83b1718_Struct>>& _1737_s,jule::Ptr<_1e83b1718_Struct> _1746_t) {
	jule::Ptr<_1e83b1718_Struct>* _1817_p = (&((*(_1746_t))._field_depends[0LL]));
	jule::Ptr<_1e83b1718_Struct>* _1913_end = _1817_p + static_cast<jule::I64>((*(_1746_t))._field_depends.len());
	{
		auto &expr = _1737_s;
		auto it = expr.begin();
		_iter_begin_1b8ce8888:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> &_1b8ce88cc_tt = *it;
			{
				{
					if (_1b8ce88cc_tt == _1746_t) {
						goto _iter_end_1b8ce8888;
					}
					if (((*((*(_1817_p))))._field_cpp_linked || ((*((*(_1817_p))))._field_depends.len() == 0LL)) || (_1b8ce88cc_tt == (*(_1817_p)))) {
						(_1817_p)++;
						if (_1817_p == _1913_end) {
							return true;
						}
					}
				}
			}
			_iter_next_1b8ce8888:;
			++it;
			goto _iter_begin_1b8ce8888;
		}
		_iter_end_1b8ce8888:;
	}
	return false;
}



inline void _1b54ca579_DefineOrderer::_static_method_order_common_0(jule::Slice<jule::Ptr<_1e83b1718_Struct>>& _3840_s) {
	jule::I64 _3917_i = 0LL;
	{
		auto &expr = _3840_s;
		auto it = expr.begin();
		_iter_begin_1b8ce27c7:;
		if (it != expr.end()) {
			jule::I64 _1b8ce28e8_j = it - expr.begin();
			jule::Ptr<_1e83b1718_Struct> _1b8ce2b4b_t = *it;
			{
				if ((*(_1b8ce2b4b_t))._field_cpp_linked || ((*(_1b8ce2b4b_t))._field_depends.len() == 0LL)) {
					_3840_s.swap(_3917_i,_1b8ce28e8_j);
					(_3917_i)++;
				}
			}
			_iter_next_1b8ce27c7:;
			++it;
			_1b8ce28e8_j++;
			goto _iter_begin_1b8ce27c7;
		}
		_iter_end_1b8ce27c7:;
	}
	jule::I64 _4717_j = _3917_i;
	for (; _4717_j < static_cast<jule::I64>(_3840_s.len()); (_4717_j)++) {
		{
			jule::I64 _4921_k = _3917_i;
			for (; _4921_k < static_cast<jule::I64>((static_cast<jule::I64>(_3840_s.len()) - 1LL)); (_4921_k)++) {
				{
					if ((!(_1b54ca579_DefineOrderer::_static_method_is_common_ordered_0(_3840_s,_3840_s[_4921_k])))) {
						_3840_s.swap(_4921_k,static_cast<jule::I64>((_4921_k + 1LL)));
					}
				}
			_iter_next_1b8ce307a:;
			}
			_iter_end_1b8ce307a:;
		}
	_iter_next_1b8ce219a:;
	}
	_iter_end_1b8ce219a:;
}



inline void _1b54ca579_DefineOrderer::_static_method_order_structures(jule::Slice<jule::Ptr<_1e83b1718_Struct>>& _6041_structs) {
	_1b54ca579_DefineOrderer::_static_method_order_common_0(_6041_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54ca579_DefineOrderer &_Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}



inline void _1b54d350a_ScopeDeadCode::_method_optimize_child(jule::Ptr<_1ce62e86d_Scope>& _2739_s) {
	jule::Ptr<_1b54d350a_ScopeDeadCode> _2817_sdc = jule::new_struct_ptr<_1b54d350a_ScopeDeadCode>(new( std::nothrow ) _1b54d350a_ScopeDeadCode(this->self,_2739_s,(&((*(_2739_s))._field_stmts)),jule::I64()));
	{
		(*(_2817_sdc))._method_optimize_stmts();
	}
}



inline void _1b54d350a_ScopeDeadCode::_method_eliminate_followed(void) {
	(*((*this)._field_stmts))=(*((*this)._field_stmts)).slice(0LL,((*this)._field_i + 1LL));
	jule::Ptr<_1b54d350a_ScopeDeadCode> _3817_parent = (*this)._field_parent;
	while ((_3817_parent != nullptr)) {
		{
			(*((*(_3817_parent))._field_stmts))=(*((*(_3817_parent))._field_stmts)).slice(0LL,((*(_3817_parent))._field_i + 1LL));
			_3817_parent=(*(_3817_parent))._field_parent;
		}
	_iter_next_1b8d111ca:;
	}
	_iter_end_1b8d111ca:;
}



inline void _1b54d350a_ScopeDeadCode::_method_optimize_stmt(jule::Any _4544_st) {
	{
		auto &_match_expr{ _4544_st };
		
		if (_match_expr.type_is<jule::Ptr<_1ce62e86d_Scope>>()) {
			_case_begin_1b8d13375:;
			{
				jule::Ptr<_1ce62e86d_Scope> _4821_scope = _4544_st.operator jule::Ptr<_1ce62e86d_Scope>();
				if ((*(_4821_scope))._field_deferred) {
					_1b54d3b7b_eliminate_dead_code_of_scope(_4821_scope);
				} else {
					(*(this->self))._method_optimize_child(_4821_scope);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b8d133ec:;
			{
				{
					auto &_match_expr{ (*(_4544_st.operator jule::Ptr<_1ce727449_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>>()) {
						_case_begin_1b8d15498:;
						{
							(*(this->self))._method_eliminate_followed();
						}
					}
					_match_end_1b8d15410:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6874ec_RetSt>>()) {
			_case_begin_1b8d13474:;
			{
				(*(this->self))._method_eliminate_followed();
			}
		}
		_match_end_1b8d1330e:;
	}
}



inline void _1b54d350a_ScopeDeadCode::_method_optimize_stmts(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < static_cast<jule::I64>((*((*(this->self))._field_stmts)).len()); ((*(this->self))._field_i)++) {
		{
			(*(this->self))._method_optimize_stmt((*((*(this->self))._field_stmts))[(*(this->self))._field_i]);
		}
	_iter_next_1b8d16543:;
	}
	_iter_end_1b8d16543:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54d350a_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _1b54ed921_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _1b54ed921_AnsiEscape::_static_method_print(jule::Str _2025_escape,jule::Str _2038_text) {
	jule::out(_2025_escape);
	jule::out(_2038_text);
	_1b54ed921_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54ed921_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _1b54eeb53_Logger::_static_method_log_flat(_21287ea02_Log& _1429_l) {
	jule::outln(_1429_l._field_text);
}



inline void _1b54eeb53_Logger::_static_method_log_error(_21287ea02_Log& _1930_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_1930_l._field_text);
	_1b54ed921_AnsiEscape::_static_method_reset();
	if ((_1930_l._field_path.len() != 0LL)) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_1930_l._field_path);
	}
	if ((_1930_l._field_row != 0LL) && (_1930_l._field_column != 0LL)) {
		jule::out(jule::Str(":", 1));
		jule::out(_1cde2b4ab_itoa(_1930_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_1cde2b4ab_itoa(_1930_l._field_column));
	}
	if ((_1930_l._field_line.len() != 0LL)) {
		jule::Str _3621_line = _211e24806_trim_left(_1930_l._field_line,jule::Str("\r\n\v\b ", 5));
		jule::I64 _3721_offset = ((_1930_l._field_line.len() - static_cast<jule::I64>(_3621_line.len())) + 1LL);
		jule::I64 _3821_old_len = _3621_line.len();
		_3621_line=_211e24806_trim_left(_3621_line,jule::Str("\t", 1));
		if (_3821_old_len != static_cast<jule::I64>(_3621_line.len())) {
			_3721_offset+=static_cast<jule::I64>(static_cast<jule::I64>(_3821_old_len - static_cast<jule::I64>(_3621_line.len())) << 3LLU);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _4417_row = _1cde2b4ab_itoa(_1930_l._field_row);
		jule::out(_4417_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_3621_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_211e22edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_4417_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_211e22edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_1930_l._field_column - _3721_offset)));
		jule::out(jule::Str("^", 1));
		if ((_1930_l._field_suggestion.len() != 0LL)) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_211e22edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_4417_row.len())));
			jule::out(jule::Str(" | ", 3));
			_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_1930_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _1b54eeb53_Logger::_static_method_log(_21287ea02_Log& _6524_l) {
	{
		auto &_match_expr{ _6524_l._field_kind };
		
		if (_match_expr == static_cast<jule::I64>(0LL)) {
			_case_begin_1b8d643e8:;
			{
				_1b54eeb53_Logger::_static_method_log_flat(_6524_l);
			}
		}
		else if (_match_expr == static_cast<jule::I64>(1LL)) {
			_case_begin_1b8d6445e:;
			{
				_1b54eeb53_Logger::_static_method_log_error(_6524_l);
			}
		}
		_match_end_1b8d64393:;
	}
}



inline void _1b54eeb53_Logger::_static_method_print_logs(jule::Slice<_21287ea02_Log>& _7531_logs) {
	{
		auto &expr = _7531_logs;
		auto it = expr.begin();
		_iter_begin_1b8d64173:;
		if (it != expr.end()) {
			_21287ea02_Log &_1b8d65a59_l = *it;
			{
				_1b54eeb53_Logger::_static_method_log(_1b8d65a59_l);
			}
			_iter_next_1b8d64173:;
			++it;
			goto _iter_begin_1b8d64173;
		}
		_iter_end_1b8d64173:;
	}
	jule::out(jule::Str("=== ", 4));
	jule::out(_1cde2b4ab_itoa(static_cast<jule::I64>(_7531_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54eeb53_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b589b63c_UnsafeBinopExprModel &_Src) {
	_Stream << "UnsafeBinopExprModel{";
	_Stream << "node:" << _Src._field_node;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b589c71a_UnsafeIndexingExprModel &_Src) {
	_Stream << "UnsafeIndexingExprModel{";
	_Stream << "node:" << _Src._field_node;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b589cb5a_PushToSliceExprModel &_Src) {
	_Stream << "PushToSliceExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b589d595_StrInsertBeginExprModel &_Src) {
	_Stream << "StrInsertBeginExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b58a029a_ScopeOptimizer> _1b58a029a_ScopeOptimizer::_static_method_new(jule::Ptr<_1ce62e86d_Scope> _4527_scope) {
	return jule::new_struct<_1b58a029a_ScopeOptimizer>(new( std::nothrow ) _1b58a029a_ScopeOptimizer(jule::I64(),_4527_scope));
}



inline void _1b58a029a_ScopeOptimizer::_method_set_current_stmt(jule::Any _5139_stmt) {
	(*((*this)._field_scope))._field_stmts[(*this)._field_i]=_5139_stmt;
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_data(jule::Ptr<_1ce727449_Data> _5536_d) {
	{
		auto &_match_expr{ (*(_5536_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>()) {
			_case_begin_1b8d7d8a7:;
			{
				jule::Ptr<_1e83c2581_FnCallExprModel> _5821_m = (*(_5536_d))._field_model.operator jule::Ptr<_1e83c2581_FnCallExprModel>();
				if (_210ecc0b8_PRODUCTION) {
					if ((!((*((*(_5821_m))._field_func))._method_is_builtin())) && _1b58a06da_is_std_package((*((*((*((*(_5821_m))._field_func))._field_decl))._field_token._field_file))._method_path(),jule::Str("debug", 5))) {
						(*this)._method_set_current_stmt(jule::Any(nullptr));
						return;
					}
				}
			}
		}
		_match_end_1b8d7d841:;
	}
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_5536_d))._field_model);
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_var(jule::Ptr<_1ce6cecb4_Var> _7035_v) {
	if (((*(_7035_v))._field_value != nullptr)) {
		_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*((*(_7035_v))._field_value))._field_data))._field_model);
	}
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_conditional(jule::Ptr<_1ce68353c_Conditional> _7643_c) {
	{
		auto &expr = (*(_7643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_1b8d835d2:;
		if (it != expr.end()) {
			jule::Ptr<_1ce632574_If> _1b8d836d1_elif = *it;
			{
				_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_1b8d836d1_elif))._field_expr);
				(*this)._method_optimize_child((*(_1b8d836d1_elif))._field_scope);
			}
			_iter_next_1b8d835d2:;
			++it;
			goto _iter_begin_1b8d835d2;
		}
		_iter_end_1b8d835d2:;
	}
	if (((*(_7643_c))._field_default != nullptr)) {
		(*this)._method_optimize_child((*((*(_7643_c))._field_default))._field_scope);
	}
	if ((!(_2110623b2_OPT_COND))) {
		return;
	}
	jule::Bool _8917_const_case = false;
	{
		auto &expr = (*(_7643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_1b8d85d32:;
		if (it != expr.end()) {
			jule::I64 _1b8d85e31_i = it - expr.begin();
			jule::Ptr<_1ce632574_If> _1b8d860da_elif = *it;
			{
				if ((!(_1b58a094e_is_constant_valid_conditional_case(_1b8d860da_elif)))) {
					goto _iter_next_1b8d85d32;
				}
				_8917_const_case=true;
				(*(_7643_c))._field_elifs=(*(_7643_c))._field_elifs.slice(0LL,_1b8d85e31_i);
				(*(_7643_c))._field_default=jule::new_struct<_1ce6830ec_Else>(new( std::nothrow ) _1ce6830ec_Else((*(_1b8d860da_elif))._field_scope));
				goto _iter_end_1b8d85d32;
			}
			_iter_next_1b8d85d32:;
			++it;
			_1b8d85e31_i++;
			goto _iter_begin_1b8d85d32;
		}
		_iter_end_1b8d85d32:;
	}
	if (((*(_7643_c))._field_elifs.len() == 0LL)) {
		return;
	}
	jule::Ptr<_1ce632574_If>* _10917_i = (&((*(_7643_c))._field_elifs[0LL]));
	jule::Ptr<_1ce632574_If>* _11013_end = (&((*(_7643_c))._field_elifs[((*(_7643_c))._field_elifs.len() - 1LL)]));
	for (; _10917_i <= _11013_end; (_10917_i)++) {
		{
			{
				if (_1b58a1521_is_unreachable_conditional_case((*(_10917_i)))) {
					(*(_10917_i))=nullptr;
				}
			}
		}
	_iter_next_1b8d83318:;
	}
	_iter_end_1b8d83318:;
	if (((*(_7643_c))._field_elifs.len() == 0LL)) {
		return;
	}
	if ((!(_8917_const_case))) {
		return;
	}
	jule::I64 _12817_only = -1LL;
	{
		auto &expr = (*(_7643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_1b8d8b178:;
		if (it != expr.end()) {
			jule::I64 _1b8d8b266_j = it - expr.begin();
			jule::Ptr<_1ce632574_If> _1b8d8b431_elif = *it;
			{
				if ((_1b8d8b431_elif != nullptr)) {
					if ((_12817_only != -1LL)) {
						return;
					}
					_12817_only=_1b8d8b266_j;
				}
			}
			_iter_next_1b8d8b178:;
			++it;
			_1b8d8b266_j++;
			goto _iter_begin_1b8d8b178;
		}
		_iter_end_1b8d8b178:;
	}
	if ((_12817_only != -1LL)) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_7643_c))._field_elifs[_12817_only]))._field_scope));
	}
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_match(jule::Ptr<_1ce68672c_Match> _14537_m) {
	{
		auto &expr = (*(_14537_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b8d8d7eb:;
		if (it != expr.end()) {
			jule::Ptr<_1ce686b6c_Case> _1b8d8d8ea_case = *it;
			{
				{
					auto &expr = (*(_1b8d8d8ea_case))._field_exprs;
					auto it = expr.begin();
					_iter_begin_1b8d8e148:;
					if (it != expr.end()) {
						jule::Ptr<_1ce727449_Data> _1b8d8e1ae_expr = *it;
						{
							_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_1b8d8e1ae_expr))._field_model);
						}
						_iter_next_1b8d8e148:;
						++it;
						goto _iter_begin_1b8d8e148;
					}
					_iter_end_1b8d8e148:;
				}
				(*this)._method_optimize_child((*(_1b8d8d8ea_case))._field_scope);
			}
			_iter_next_1b8d8d7eb:;
			++it;
			goto _iter_begin_1b8d8d7eb;
		}
		_iter_end_1b8d8d7eb:;
	}
	if (((*(_14537_m))._field_default != nullptr)) {
		(*this)._method_optimize_child((*((*(_14537_m))._field_default))._field_scope);
	}
	if ((!(_2110623b2_OPT_COND))) {
		return;
	}
	jule::Bool _16017_const_case = false;
	{
		auto &expr = (*(_14537_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b8d9116c:;
		if (it != expr.end()) {
			jule::I64 _1b8d9126b_i = it - expr.begin();
			jule::Ptr<_1ce686b6c_Case> _1b8d91425_case = *it;
			{
				if ((!(_1b58a11be_is_constant_valid_match_case(_1b8d91425_case)))) {
					goto _iter_next_1b8d9116c;
				}
				_16017_const_case=true;
				(*(_14537_m))._field_cases=(*(_14537_m))._field_cases.slice(0LL,_1b8d9126b_i);
				(*(_1b8d91425_case))._field_exprs=nullptr;
				(*(_14537_m))._field_default=_1b8d91425_case;
				goto _iter_end_1b8d9116c;
			}
			_iter_next_1b8d9116c:;
			++it;
			_1b8d9126b_i++;
			goto _iter_begin_1b8d9116c;
		}
		_iter_end_1b8d9116c:;
	}
	if (((*(_14537_m))._field_cases.len() == 0LL)) {
		return;
	}
	jule::Ptr<_1ce686b6c_Case>* _17917_i = (&((*(_14537_m))._field_cases[0LL]));
	jule::Ptr<_1ce686b6c_Case>* _18013_end = (&((*(_14537_m))._field_cases[((*(_14537_m))._field_cases.len() - 1LL)]));
	for (; _17917_i <= _18013_end; (_17917_i)++) {
		{
			{
				if (_1b58a1895_is_unreachable_match_case((*(_17917_i)))) {
					(*(_17917_i))=nullptr;
				}
			}
		}
	_iter_next_1b8d8d532:;
	}
	_iter_end_1b8d8d532:;
	if ((!(_16017_const_case))) {
		return;
	}
	jule::I64 _19417_only = -1LL;
	{
		auto &expr = (*(_14537_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b8d95c87:;
		if (it != expr.end()) {
			jule::I64 _1b8d95d75_j = it - expr.begin();
			jule::Ptr<_1ce686b6c_Case> _1b8d96040_case = *it;
			{
				if ((_1b8d96040_case != nullptr)) {
					if ((_19417_only != -1LL)) {
						return;
					}
					_19417_only=_1b8d95d75_j;
				}
			}
			_iter_next_1b8d95c87:;
			++it;
			_1b8d95d75_j++;
			goto _iter_begin_1b8d95c87;
		}
		_iter_end_1b8d95c87:;
	}
	if ((_19417_only != -1LL)) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_14537_m))._field_cases[_19417_only]))._field_scope));
	}
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_range_iter(jule::Ptr<_1ce68430c_RangeIter> _21142_it) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_21142_it))._field_expr))._field_model);
	(*this)._method_optimize_child((*(_21142_it))._field_scope);
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_while_iter(jule::Ptr<_1ce683dbc_WhileIter> _21642_it) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_21642_it))._field_expr);
	(*this)._method_optimize_stmt((*(_21642_it))._field_next);
	(*this)._method_optimize_child((*(_21642_it))._field_scope);
}



inline jule::Bool _1b58a029a_ScopeOptimizer::_method_substr(jule::Ptr<_1ce685d9c_Assign> _22229_a) {
	{
		auto &_match_expr{ (*((*(_22229_a))._field_r))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c585e_SlicingExprModel>>()) {
			_case_begin_1b8d9b9a2:;
			{
				jule::Ptr<_1e83c585e_SlicingExprModel> _22521_sem = (*((*(_22229_a))._field_r))._field_model.operator jule::Ptr<_1e83c585e_SlicingExprModel>();
				if ((*(_22521_sem))._field_expr == (*((*(_22229_a))._field_l))._field_model) {
					(*this)._method_set_current_stmt(jule::Any(jule::new_struct<_1b589d09a_MutSlicingExprModel>(new( std::nothrow ) _1b589d09a_MutSlicingExprModel((*(_22521_sem))._field_token,(*(_22521_sem))._field_expr,(*(_22521_sem))._field_left,(*(_22521_sem))._field_right))));
					return true;
				}
			}
		}
		_match_end_1b8d9b93b:;
	}
	return false;
}



inline jule::Bool _1b58a029a_ScopeOptimizer::_method_str_insert(jule::Ptr<_1ce685d9c_Assign> _23933_a) {
	{
		auto &_match_expr{ (*((*(_23933_a))._field_r))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83be3c4_BinopExprModel>>()) {
			_case_begin_1b8d9eab5:;
			{
				jule::Ptr<_1e83be3c4_BinopExprModel> _24221_m = (*((*(_23933_a))._field_r))._field_model.operator jule::Ptr<_1e83be3c4_BinopExprModel>();
				if ((*((*(_24221_m))._field_right))._field_model == (*((*(_23933_a))._field_l))._field_model) {
					(*this)._method_set_current_stmt(jule::Any(jule::new_struct<_1b589d595_StrInsertBeginExprModel>(new( std::nothrow ) _1b589d595_StrInsertBeginExprModel((*((*(_23933_a))._field_l))._field_model,(*((*(_24221_m))._field_left))._field_model))));
					return true;
				}
			}
		}
		_match_end_1b8d9ea4e:;
	}
	return false;
}



inline jule::Bool _1b58a029a_ScopeOptimizer::_method_str_assign(jule::Ptr<_1ce685d9c_Assign> _25433_a) {
	if (((*(_25433_a))._field_op._field_kind != jule::Str("=", 1))) {
		return false;
	}
	jule::Ptr<_1ce762330_Prim> _25813_lp = (*((*((*(_25433_a))._field_l))._field_kind))._method_prim();
	if ((_25813_lp == nullptr) || (!((*(_25813_lp))._method_is_str()))) {
		return false;
	}
	{
		
		if ((*this)._method_substr(_25433_a) || (*this)._method_str_insert(_25433_a)) {
			_case_begin_1b8da43c2:;
			{
				return true;
			}
		}
		_match_end_1b8da4339:;
	}
	return false;
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_assign(jule::Ptr<_1ce685d9c_Assign> _27038_assign) {
	if (_2110618ab_OPT_COPY && (*this)._method_str_assign(_27038_assign)) {
		return;
	}
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_27038_assign))._field_l))._field_model);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_27038_assign))._field_r))._field_model);
	{
		auto &_match_expr{ (*(_27038_assign))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_1b8da5bed:;
			{
				if (_211061c85_OPT_MATH && ((*((*((*(_27038_assign))._field_l))._field_kind))._method_strct() == nullptr)) {
					(*(_27038_assign))._field_op._field_kind=(*(_27038_assign))._field_op._field_kind.slice(0LL,((*(_27038_assign))._field_op._field_kind.len() - 1LL));
					jule::Any _28325_model = jule::Any(jule::new_struct<_1e83be3c4_BinopExprModel>(new( std::nothrow ) _1e83be3c4_BinopExprModel((*(_27038_assign))._field_l,(*(_27038_assign))._field_r,(*(_27038_assign))._field_op)));
					_1b58a72a2_ExprOptimizer::_static_method_optimize(_28325_model);
					{
						auto &_match_expr{ _28325_model };
						
						if (_match_expr.type_is<jule::Ptr<_1e83be3c4_BinopExprModel>>()) {
							_case_begin_1b8da987d:;
							{
								(*(_27038_assign))._field_r=jule::new_ptr<_1e83bdbcb_OperandExprModel>((*((*(_27038_assign))._field_r)));
								(*(_27038_assign))._field_op._field_kind=jule::Str("=", 1);
								(*((*(_27038_assign))._field_r))._field_model=_28325_model;
								return;
							}
						}
						_match_end_1b8da954d:;
					}
					(*(_27038_assign))._field_op._field_kind+=jule::Str("=", 1);
					return;
				}
			}
		}
		_match_end_1b8da6e1e:;
	}
	if (_211061b42_OPT_APPEND) {
		{
			auto &_match_expr{ (*((*(_27038_assign))._field_r))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>>()) {
				_case_begin_1b8daba28:;
				{
					jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel> _30425_m = (*((*(_27038_assign))._field_r))._field_model.operator jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>();
					{
						auto &_match_expr{ (*(_30425_m))._field_elements };
						
						if (_match_expr.type_is<jule::Ptr<_1e83c31b9_SliceExprModel>>()) {
							_case_begin_1b8dacbe4:;
							{
								{
									auto &_match_expr{ (*(_30425_m))._field_dest };
									
									if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>() || _match_expr.type_is<jule::Ptr<_1e83c6d16_StructSubIdentExprModel>>()) {
										_case_begin_1b8dad5c9:;
										{
											(*this)._method_set_current_stmt(jule::Any(jule::new_struct<_1b589cb5a_PushToSliceExprModel>(new( std::nothrow ) _1b589cb5a_PushToSliceExprModel((*(_30425_m))._field_dest,(*(_30425_m))._field_elements.operator jule::Ptr<_1e83c31b9_SliceExprModel>()))));
										}
									}
									_match_end_1b8dad50d:;
								}
							}
						}
						_match_end_1b8dacb5b:;
					}
				}
			}
			_match_end_1b8dab9a1:;
		}
	}
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_multi_assign(jule::Ptr<_1ce6862dc_MultiAssign> _32044_assign) {
	{
		auto &expr = (*(_32044_assign))._field_l;
		auto it = expr.begin();
		_iter_begin_1b8dadb29:;
		if (it != expr.end()) {
			jule::I64 _1b8dadb6d_i = it - expr.begin();
			jule::Any _1b8daeba2_l = *it;
			{
				_1b58a72a2_ExprOptimizer::_static_method_optimize(_1b8daeba2_l);
				(*(_32044_assign))._field_l[_1b8dadb6d_i]=_1b8daeba2_l;
			}
			_iter_next_1b8dadb29:;
			++it;
			_1b8dadb6d_i++;
			goto _iter_begin_1b8dadb29;
		}
		_iter_end_1b8dadb29:;
	}
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_32044_assign))._field_r);
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_ret(jule::Ptr<_1ce6874ec_RetSt> _32835_r) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_32835_r))._field_expr);
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_stmt(jule::Any _33236_stmt) {
	{
		auto &_match_expr{ _33236_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1ce62e86d_Scope>>()) {
			_case_begin_1b8db1c70:;
			{
				(*this)._method_optimize_child(_33236_stmt.operator jule::Ptr<_1ce62e86d_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b8db1ce7:;
			{
				(*this)._method_optimize_data(_33236_stmt.operator jule::Ptr<_1ce727449_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b8db1db3:;
			{
				(*this)._method_optimize_var(_33236_stmt.operator jule::Ptr<_1ce6cecb4_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68353c_Conditional>>()) {
			_case_begin_1b8db1e29:;
			{
				(*this)._method_optimize_conditional(_33236_stmt.operator jule::Ptr<_1ce68353c_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68430c_RangeIter>>()) {
			_case_begin_1b8db1e90:;
			{
				(*this)._method_optimize_range_iter(_33236_stmt.operator jule::Ptr<_1ce68430c_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce683dbc_WhileIter>>()) {
			_case_begin_1b8db2006:;
			{
				(*this)._method_optimize_while_iter(_33236_stmt.operator jule::Ptr<_1ce683dbc_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68397c_InfIter>>()) {
			_case_begin_1b8db206c:;
			{
				(*this)._method_optimize_child((*(_33236_stmt.operator jule::Ptr<_1ce68397c_InfIter>()))._field_scope);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce685d9c_Assign>>()) {
			_case_begin_1b8db20e4:;
			{
				(*this)._method_optimize_assign(_33236_stmt.operator jule::Ptr<_1ce685d9c_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6862dc_MultiAssign>>()) {
			_case_begin_1b8db216b:;
			{
				(*this)._method_optimize_multi_assign(_33236_stmt.operator jule::Ptr<_1ce6862dc_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68672c_Match>>()) {
			_case_begin_1b8db21e3:;
			{
				(*this)._method_optimize_match(_33236_stmt.operator jule::Ptr<_1ce68672c_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6874ec_RetSt>>()) {
			_case_begin_1b8db226a:;
			{
				(*this)._method_optimize_ret(_33236_stmt.operator jule::Ptr<_1ce6874ec_RetSt>());
			}
		}
		_match_end_1b8da75d4:;
	}
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize_child(jule::Ptr<_1ce62e86d_Scope> _35937_child) {
	jule::Ptr<_1b58a029a_ScopeOptimizer> _36017_so = _1b58a029a_ScopeOptimizer::_static_method_new(_35937_child);
	(*(_36017_so))._method_optimize();
}



inline void _1b58a029a_ScopeOptimizer::_method_optimize(void) {
	{
		auto &expr = (*((*this)._field_scope))._field_stmts;
		auto it = expr.begin();
		_iter_begin_1b8db9915:;
		if (it != expr.end()) {
			jule::I64 _1b8db99e2_i = it - expr.begin();
			jule::Any _1b8db9bac_stmt = *it;
			{
				(*this)._field_i=_1b8db99e2_i;
				(*this)._method_optimize_stmt(_1b8db9bac_stmt);
			}
			_iter_next_1b8db9915:;
			++it;
			_1b8db99e2_i++;
			goto _iter_begin_1b8db9915;
		}
		_iter_end_1b8db9915:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1b58a029a_ScopeOptimizer &_Src) {
	_Stream << "ScopeOptimizer{";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline void _1b58a72a2_ExprOptimizer::_static_method_optimize(jule::Any& _5533_model) {
	{
		
		if (_21106226e_OPT_PTR || _211061c85_OPT_MATH || _211061dc8_OPT_ACCESS || _2110623b2_OPT_COND) {
			_case_begin_1b8dba141:;
			{
				jule::Ptr<_1b58a72a2_ExprOptimizer> _6221_exop = jule::new_struct<_1b58a72a2_ExprOptimizer>(new( std::nothrow ) _1b58a72a2_ExprOptimizer(((jule::Ptr<jule::Any>)((&(_5533_model))))));
				(*(_6221_exop))._method_do();
			}
		}
		_match_end_1b8dba075:;
	}
}



inline jule::Bool _1b58a72a2_ExprOptimizer::_method_str_cond(jule::Ptr<_1e83be3c4_BinopExprModel> _6927_m) {
	jule::Ptr<_1ce762330_Prim> _7013_lp = (*((*((*(_6927_m))._field_left))._field_kind))._method_prim();
	if ((_7013_lp == nullptr) || (!((*(_7013_lp))._method_is_str()))) {
		return false;
	}
	if (((*(_6927_m))._field_op._field_kind != jule::Str("==", 2)) && ((*(_6927_m))._field_op._field_kind != jule::Str("!=", 2))) {
		return false;
	}
	{
		auto &_match_expr{ (*((*(_6927_m))._field_left))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b8dbeeae:;
			{
				std::tie((*(_6927_m))._field_left,(*(_6927_m))._field_right) = std::make_tuple((*(_6927_m))._field_right,(*(_6927_m))._field_left);
				goto _julec_label_opt;
			}
		}
		_match_end_1b8dbee37:;
	}
	{
		auto &_match_expr{ (*((*(_6927_m))._field_right))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b8dc19b6:;
			{
				goto _match_end_1b8dc12bd;
			}
		}
		else {
			_case_begin_1b8dc1323:;
			{
				return true;
			}
		}
		_match_end_1b8dc12bd:;
	}
	_julec_label_opt:;
	jule::Ptr<_1ce4b898d_Const> _8913_c = (*((*(_6927_m))._field_right))._field_model.operator jule::Ptr<_1ce4b898d_Const>();
	if ((!((*(_8913_c))._method_read_str().empty()))) {
		return false;
	}
	{
		auto &_match_expr{ (*(_6927_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_1b8dc291d:;
			{
				(*((*this)._field_model))=jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel(jule::Ptr<_1ce76121e_TypeKind>(),(*((*(_6927_m))._field_left))._field_model,jule::Str("empty()", 7))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_1b8dc2c5e:;
			{
				_212ae5c02_Token _10021_op = (*(_6927_m))._field_op;
				_10021_op._field_kind=jule::Str("!", 1);
				(*((*this)._field_model))=jule::Any(jule::new_struct<_1e83bebdd_UnaryExprModel>(new( std::nothrow ) _1e83bebdd_UnaryExprModel(jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83c8c3b_CommonSubIdentExprModel>(new( std::nothrow ) _1e83c8c3b_CommonSubIdentExprModel(jule::Ptr<_1ce76121e_TypeKind>(),(*((*(_6927_m))._field_left))._field_model,jule::Str("empty()", 7)))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>())),_10021_op)));
			}
		}
		_match_end_1b8dc2566:;
	}
	return true;
}



inline void _1b58a72a2_ExprOptimizer::_method_binary(jule::Ptr<_1e83be3c4_BinopExprModel> _11525_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_11525_m))._field_left))._field_model);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_11525_m))._field_right))._field_model);
	{
		auto &_match_expr{ (*((*(_11525_m))._field_right))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b8dc7923:;
			{
				goto _match_end_1b8dc744a;
			}
		}
		else {
			_case_begin_1b8dc74a0:;
			{
				return;
			}
		}
		_match_end_1b8dc744a:;
	}
	if (_2110623b2_OPT_COND && (*this)._method_str_cond(_11525_m)) {
		return;
	}
	if ((!(_211061c85_OPT_MATH))) {
		return;
	}
	{
		auto &_match_expr{ (*(_11525_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b8dc8517:;
			{
				jule::Bool _13518_ok;
				jule::U64 _13522_x;
				std::tie(_13518_ok,_13522_x) = _1b58a76e2_check_for_bit_shift_opt((*(_11525_m))._field_left,(*(_11525_m))._field_right);
				if (_13518_ok) {
					(*(_11525_m))._field_op._field_kind=jule::Str("<<", 2);
					jule::Ptr<_1ce4b898d_Const> _13825_c = (*((*(_11525_m))._field_right))._field_model.operator jule::Ptr<_1ce4b898d_Const>();
					(*(_13825_c))._method_set_u64(_13522_x);
					return;
				}
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_1b8dc8704:;
			{
				jule::Bool _14318_ok;
				jule::U64 _14322_x;
				std::tie(_14318_ok,_14322_x) = _1b58a76e2_check_for_bit_shift_opt((*(_11525_m))._field_left,(*(_11525_m))._field_right);
				if (_14318_ok) {
					(*(_11525_m))._field_op._field_kind=jule::Str(">>", 2);
					jule::Ptr<_1ce4b898d_Const> _14625_c = (*((*(_11525_m))._field_right))._field_model.operator jule::Ptr<_1ce4b898d_Const>();
					(*(_14625_c))._method_set_u64(_14322_x);
					return;
				}
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_1b8dc877b:;
			{
				jule::Ptr<_1ce4b898d_Const> _15121_c = (*((*(_11525_m))._field_right))._field_model.operator jule::Ptr<_1ce4b898d_Const>();
				jule::F64 _15217_d = (*(_15121_c))._method_as_f64();
				if ((_15217_d == 2LL)) {
					(*(_11525_m))._field_op._field_kind=jule::Str("&", 1);
					(*(_15121_c))._method_set_i64(1LL);
				}
			}
		}
		_match_end_1b8dc8429:;
	}
	(*((*this)._field_model))=jule::Any(jule::new_struct<_1b589b63c_UnsafeBinopExprModel>(new( std::nothrow ) _1b589b63c_UnsafeBinopExprModel(_11525_m)));
}



inline void _1b58a72a2_ExprOptimizer::_method_unary(jule::Ptr<_1e83bebdd_UnaryExprModel> _16324_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_16324_m))._field_expr))._field_model);
	if (_21106226e_OPT_PTR && ((*(_16324_m))._field_op._field_kind == jule::Str("*", 1))) {
		{
			auto &_match_expr{ (*((*(_16324_m))._field_expr))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e83bebdd_UnaryExprModel>>()) {
				_case_begin_1b8dd18e9:;
				{
					jule::Ptr<_1e83bebdd_UnaryExprModel> _16825_um = (*((*(_16324_m))._field_expr))._field_model.operator jule::Ptr<_1e83bebdd_UnaryExprModel>();
					if (((*(_16825_um))._field_op._field_kind == jule::Str("&", 1))) {
						(*((*this)._field_model))=(*((*(_16825_um))._field_expr))._field_model;
					}
				}
			}
			_match_end_1b8dd1872:;
		}
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_structure_lit(jule::Ptr<_1e83c0bbc_StructLitExprModel> _17632_m) {
	{
		auto &expr = (*(_17632_m))._field_args;
		auto it = expr.begin();
		_iter_begin_1b8dd3e3a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83c044c_StructArgExprModel> _1b8dd4039_arg = *it;
			{
				_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_1b8dd4039_arg))._field_expr);
			}
			_iter_next_1b8dd3e3a:;
			++it;
			goto _iter_begin_1b8dd3e3a;
		}
		_iter_end_1b8dd3e3a:;
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_alloc_structure(jule::Ptr<_1e83c1393_AllocStructLitExprModel> _18234_m) {
	(*this)._method_structure_lit((*(_18234_m))._field_lit);
}



inline void _1b58a72a2_ExprOptimizer::_method_casting(jule::Ptr<_1e83c1aad_CastingExprModel> _18626_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_18626_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_args(jule::Slice<jule::Any> _19023_args) {
	{
		auto &expr = _19023_args;
		auto it = expr.begin();
		_iter_begin_1b8dd6932:;
		if (it != expr.end()) {
			jule::I64 _1b8dd69cb_i = it - expr.begin();
			jule::Any _1b8dd6c84_arg = *it;
			{
				_1b58a72a2_ExprOptimizer::_static_method_optimize(_1b8dd6c84_arg);
				_19023_args[_1b8dd69cb_i]=_1b8dd6c84_arg;
			}
			_iter_next_1b8dd6932:;
			++it;
			_1b8dd69cb_i++;
			goto _iter_begin_1b8dd6932;
		}
		_iter_end_1b8dd6932:;
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_scope(jule::Ptr<_1ce62e86d_Scope>& _19725_s) {
	jule::Ptr<_1b58a029a_ScopeOptimizer> _19817_scopt = _1b58a029a_ScopeOptimizer::_static_method_new(_19725_s);
	(*(_19817_scopt))._method_optimize();
}



inline void _1b58a72a2_ExprOptimizer::_method_func_call(jule::Ptr<_1e83c2581_FnCallExprModel> _20228_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_20228_m))._field_expr);
	(*this)._method_args((*(_20228_m))._field_args);
	if (((*(_20228_m))._field_except != nullptr)) {
		(*this)._method_scope((*(_20228_m))._field_except);
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_slice(jule::Ptr<_1e83c31b9_SliceExprModel> _21024_m) {
	(*this)._method_args((*(_21024_m))._field_elems);
}



inline void _1b58a72a2_ExprOptimizer::_method_array(jule::Ptr<_1e83c8004_ArrayExprModel> _21424_m) {
	if (((*(_21424_m))._field_elems.len() == 2LL) && ((*(_21424_m))._field_elems[1LL] == jule::Any(nullptr))) {
		jule::Any _21621_elem = (*(_21424_m))._field_elems[0LL];
		_1b58a72a2_ExprOptimizer::_static_method_optimize(_21621_elem);
		(*(_21424_m))._field_elems[0LL]=_21621_elem;
	}
	(*this)._method_args((*(_21424_m))._field_elems);
}



inline void _1b58a72a2_ExprOptimizer::_method_indexing(jule::Ptr<_1e83c3928_IndexingExprModel> _22327_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_22327_m))._field_expr))._field_model);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_22327_m))._field_index))._field_model);
	if ((!(_211061dc8_OPT_ACCESS))) {
		return;
	}
	jule::Bool _22913_array = ((*((*((*(_22327_m))._field_expr))._field_kind))._method_arr() != nullptr);
	if (_22913_array && (*((*(_22327_m))._field_index))._method_is_const()) {
		(*((*this)._field_model))=jule::Any(jule::new_struct<_1b589c71a_UnsafeIndexingExprModel>(new( std::nothrow ) _1b589c71a_UnsafeIndexingExprModel(_22327_m)));
		return;
	}
	{
		auto &_match_expr{ (*((*(_22327_m))._field_index))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b729e6ae:;
			{
				jule::Ptr<_1ce6cecb4_Var> _23917_i = (*((*(_22327_m))._field_index))._field_model.operator jule::Ptr<_1ce6cecb4_Var>();
				if ((*(_23917_i))._field_mutable || ((*(_23917_i))._field_iter_relation == nullptr)) {
					goto _match_end_1b8de2b4c;
				}
				{
					auto &_match_expr{ (*((*(_22327_m))._field_expr))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
						_case_begin_1b74451d4:;
						{
							jule::Ptr<_1ce6cecb4_Var> _24521_r = (*((*(_22327_m))._field_expr))._field_model.operator jule::Ptr<_1ce6cecb4_Var>();
							if ((*((*(_23917_i))._field_iter_relation))._field_range == _24521_r) {
								(*((*this)._field_model))=jule::Any(jule::new_struct<_1b589c71a_UnsafeIndexingExprModel>(new( std::nothrow ) _1b589c71a_UnsafeIndexingExprModel(_22327_m)));
							}
						}
					}
					_match_end_1b759e195:;
				}
			}
		}
		_match_end_1b8de2b4c:;
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_anon_func(jule::Ptr<_1e83c4220_AnonFnExprModel> _25628_m) {
	(*this)._method_scope((*((*(_25628_m))._field_func))._field_scope);
}



inline void _1b58a72a2_ExprOptimizer::_method_map(jule::Ptr<_1e83c5056_MapExprModel> _26022_m) {
	{
		auto &expr = (*(_26022_m))._field_entries;
		auto it = expr.begin();
		_iter_begin_1b7643aca:;
		if (it != expr.end()) {
			jule::Ptr<_1e83c4880_KeyValPairExprModel> _1b7643beb_pair = *it;
			{
				_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_1b7643beb_pair))._field_key);
				_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_1b7643beb_pair))._field_val);
			}
			_iter_next_1b7643aca:;
			++it;
			goto _iter_begin_1b7643aca;
		}
		_iter_end_1b7643aca:;
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_slicing(jule::Ptr<_1e83c585e_SlicingExprModel> _26726_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_26726_m))._field_expr);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_26726_m))._field_left);
	if ((*(_26726_m))._field_right != jule::Any(nullptr)) {
		_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_26726_m))._field_right);
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_trait_sub(jule::Ptr<_1e83c62cc_TraitSubIdentExprModel> _27528_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_27528_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_structure_sub(jule::Ptr<_1e83c6d16_StructSubIdentExprModel> _27932_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_27932_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_common_sub(jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel> _28329_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_28329_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_tuple(jule::Ptr<_1e83c95aa_TupleExprModel> _28724_m) {
	{
		auto &expr = (*(_28724_m))._field_datas;
		auto it = expr.begin();
		_iter_begin_1b7648c23:;
		if (it != expr.end()) {
			jule::Ptr<_1ce727449_Data> _1b7648d22_d = *it;
			{
				_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_1b7648d22_d))._field_model);
			}
			_iter_next_1b7648c23:;
			++it;
			goto _iter_begin_1b7648c23;
		}
		_iter_end_1b7648c23:;
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_new_call(jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel> _29327_m) {
	if ((*(_29327_m))._field_init != jule::Any(nullptr)) {
		_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_29327_m))._field_init);
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_out_call(jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel> _29927_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_29927_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_outln_call(jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel> _30329_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_30329_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_panic_call(jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel> _30729_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_30729_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_assert_call(jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel> _31130_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_31130_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_error_call(jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel> _31529_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_31529_m))._field_err);
}



inline void _1b58a72a2_ExprOptimizer::_method_make_call(jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel> _31928_m) {
	if ((*(_31928_m))._field_len != jule::Any(nullptr)) {
		_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_31928_m))._field_len);
	}
	if ((*(_31928_m))._field_cap != jule::Any(nullptr)) {
		_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_31928_m))._field_cap);
	}
}



inline void _1b58a72a2_ExprOptimizer::_method_append_call(jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel> _32830_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_32830_m))._field_dest);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_32830_m))._field_elements);
}



inline void _1b58a72a2_ExprOptimizer::_method_clone_call(jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel> _33329_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_33329_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_sizeof(jule::Ptr<_1e83ce22a_SizeofExprModel> _33725_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_33725_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_alignof(jule::Ptr<_1e83cec97_AlignofExprModel> _34126_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_34126_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_integrated_to_str(jule::Ptr<_1e83d0726_IntegratedToStrExprModel> _34536_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_34536_m))._field_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_ternary(jule::Ptr<_1e83d0d53_TernaryExprModel> _34926_m) {
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_34926_m))._field_condition);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_34926_m))._field_true_expr);
	_1b58a72a2_ExprOptimizer::_static_method_optimize((*(_34926_m))._field_false_expr);
}



inline void _1b58a72a2_ExprOptimizer::_method_do(void) {
	{
		auto &_match_expr{ (*((*this)._field_model)) };
		
		if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b76573a2:;
			{
				(*((*this)._field_model))=(*((*((*this)._field_model)).operator jule::Ptr<_1ce727449_Data>()))._field_model;
				(*this)._method_do();
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83be3c4_BinopExprModel>>()) {
			_case_begin_1b7657418:;
			{
				(*this)._method_binary((*((*this)._field_model)).operator jule::Ptr<_1e83be3c4_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83bebdd_UnaryExprModel>>()) {
			_case_begin_1b765747e:;
			{
				(*this)._method_unary((*((*this)._field_model)).operator jule::Ptr<_1e83bebdd_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c0bbc_StructLitExprModel>>()) {
			_case_begin_1b76574e5:;
			{
				(*this)._method_structure_lit((*((*this)._field_model)).operator jule::Ptr<_1e83c0bbc_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c1393_AllocStructLitExprModel>>()) {
			_case_begin_1b765755b:;
			{
				(*this)._method_alloc_structure((*((*this)._field_model)).operator jule::Ptr<_1e83c1393_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c1aad_CastingExprModel>>()) {
			_case_begin_1b76575d3:;
			{
				(*this)._method_casting((*((*this)._field_model)).operator jule::Ptr<_1e83c1aad_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>()) {
			_case_begin_1b765765a:;
			{
				(*this)._method_func_call((*((*this)._field_model)).operator jule::Ptr<_1e83c2581_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c31b9_SliceExprModel>>()) {
			_case_begin_1b76576d2:;
			{
				(*this)._method_slice((*((*this)._field_model)).operator jule::Ptr<_1e83c31b9_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c8004_ArrayExprModel>>()) {
			_case_begin_1b7657759:;
			{
				(*this)._method_array((*((*this)._field_model)).operator jule::Ptr<_1e83c8004_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c3928_IndexingExprModel>>()) {
			_case_begin_1b76577d1:;
			{
				(*this)._method_indexing((*((*this)._field_model)).operator jule::Ptr<_1e83c3928_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c4220_AnonFnExprModel>>()) {
			_case_begin_1b7657858:;
			{
				(*this)._method_anon_func((*((*this)._field_model)).operator jule::Ptr<_1e83c4220_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c5056_MapExprModel>>()) {
			_case_begin_1b76578d0:;
			{
				(*this)._method_map((*((*this)._field_model)).operator jule::Ptr<_1e83c5056_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c585e_SlicingExprModel>>()) {
			_case_begin_1b7657957:;
			{
				(*this)._method_slicing((*((*this)._field_model)).operator jule::Ptr<_1e83c585e_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>>()) {
			_case_begin_1b76579ce:;
			{
				(*this)._method_trait_sub((*((*this)._field_model)).operator jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c6d16_StructSubIdentExprModel>>()) {
			_case_begin_1b7657a56:;
			{
				(*this)._method_structure_sub((*((*this)._field_model)).operator jule::Ptr<_1e83c6d16_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>>()) {
			_case_begin_1b7657acd:;
			{
				(*this)._method_common_sub((*((*this)._field_model)).operator jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c95aa_TupleExprModel>>()) {
			_case_begin_1b7657b55:;
			{
				(*this)._method_tuple((*((*this)._field_model)).operator jule::Ptr<_1e83c95aa_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>>()) {
			_case_begin_1b7657bcc:;
			{
				(*this)._method_out_call((*((*this)._field_model)).operator jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>>()) {
			_case_begin_1b7657c54:;
			{
				(*this)._method_outln_call((*((*this)._field_model)).operator jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel>>()) {
			_case_begin_1b7657ccb:;
			{
				(*this)._method_new_call((*((*this)._field_model)).operator jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>>()) {
			_case_begin_1b7657d53:;
			{
				(*this)._method_panic_call((*((*this)._field_model)).operator jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>>()) {
			_case_begin_1b7657dca:;
			{
				(*this)._method_assert_call((*((*this)._field_model)).operator jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>()) {
			_case_begin_1b7657e52:;
			{
				(*this)._method_error_call((*((*this)._field_model)).operator jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel>>()) {
			_case_begin_1b7657ec9:;
			{
				(*this)._method_make_call((*((*this)._field_model)).operator jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>>()) {
			_case_begin_1b7658051:;
			{
				(*this)._method_append_call((*((*this)._field_model)).operator jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>>()) {
			_case_begin_1b76580c8:;
			{
				(*this)._method_clone_call((*((*this)._field_model)).operator jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83ce22a_SizeofExprModel>>()) {
			_case_begin_1b7658150:;
			{
				(*this)._method_sizeof((*((*this)._field_model)).operator jule::Ptr<_1e83ce22a_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cec97_AlignofExprModel>>()) {
			_case_begin_1b76581c7:;
			{
				(*this)._method_alignof((*((*this)._field_model)).operator jule::Ptr<_1e83cec97_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d0726_IntegratedToStrExprModel>>()) {
			_case_begin_1b765824e:;
			{
				(*this)._method_integrated_to_str((*((*this)._field_model)).operator jule::Ptr<_1e83d0726_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d0d53_TernaryExprModel>>()) {
			_case_begin_1b76582c6:;
			{
				(*this)._method_ternary((*((*this)._field_model)).operator jule::Ptr<_1e83d0d53_TernaryExprModel>());
			}
		}
		_match_end_1b765711b:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1b58a72a2_ExprOptimizer &_Src) {
	_Stream << "ExprOptimizer{";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b58b17d9_Optimizer> _1b58b17d9_Optimizer::_static_method_new(jule::Ptr<_1b54c72bd_IR>& _2228_ir) {
	return jule::new_struct<_1b58b17d9_Optimizer>(new( std::nothrow ) _1b58b17d9_Optimizer(_2228_ir));
}



inline void _1b58b17d9_Optimizer::_method_optimize_global(jule::Ptr<_1ce6cecb4_Var>& _2839_v) {
	if ((!((*(_2839_v))._field_cpp_linked))) {
		_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*((*(_2839_v))._field_value))._field_data))._field_model);
	}
}



inline void _1b58b17d9_Optimizer::_method_optimize_function(jule::Ptr<_1e83d4384_Fn>& _3441_func) {
	if ((*(_3441_func))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_3441_func))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b76734ab:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d630e_FnIns> _1b76735aa_ins = *it;
			{
				jule::Ptr<_1b58a029a_ScopeOptimizer> _3921_so = _1b58a029a_ScopeOptimizer::_static_method_new((*(_1b76735aa_ins))._field_scope);
				(*(_3921_so))._method_optimize();
			}
			_iter_next_1b76734ab:;
			++it;
			goto _iter_begin_1b76734ab;
		}
		_iter_end_1b76734ab:;
	}
}



inline void _1b58b17d9_Optimizer::_method_optimize_struct(jule::Ptr<_1e83b1718_Struct>& _4439_s) {
	if ((*(_4439_s))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_4439_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b767518e:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b84bc_StructIns> _1b767528d_ins = *it;
			{
				{
					auto &expr = (*(_1b767528d_ins))._field_fields;
					auto it = expr.begin();
					_iter_begin_1b7675997:;
					if (it != expr.end()) {
						jule::Ptr<_1e83b2cbe_FieldIns> _1b7675a0d_f = *it;
						{
							if (((*(_1b7675a0d_f))._field_default != nullptr)) {
								_1b58a72a2_ExprOptimizer::_static_method_optimize((*((*(_1b7675a0d_f))._field_default))._field_model);
							}
						}
						_iter_next_1b7675997:;
						++it;
						goto _iter_begin_1b7675997;
					}
					_iter_end_1b7675997:;
				}
				{
					auto &expr = (*(_1b767528d_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_1b7676349:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d4384_Fn> _1b7675c0b_m = *it;
						{
							(*this)._method_optimize_function(_1b7675c0b_m);
						}
						_iter_next_1b7676349:;
						++it;
						goto _iter_begin_1b7676349;
					}
					_iter_end_1b7676349:;
				}
			}
			_iter_next_1b767518e:;
			++it;
			goto _iter_begin_1b767518e;
		}
		_iter_end_1b767518e:;
	}
}



inline void _1b58b17d9_Optimizer::_method_optimize_globals(jule::Ptr<_1ce6a15e3_Package>& _6040_p) {
	{
		auto &expr = (*(_6040_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b7677a76:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b7677b75_f = *it;
			{
				{
					auto &expr = (*(_1b7677b75_f))._field_vars;
					auto it = expr.begin();
					_iter_begin_1b76783c3:;
					if (it != expr.end()) {
						jule::Ptr<_1ce6cecb4_Var> _1b7678439_v = *it;
						{
							(*this)._method_optimize_global(_1b7678439_v);
						}
						_iter_next_1b76783c3:;
						++it;
						goto _iter_begin_1b76783c3;
					}
					_iter_end_1b76783c3:;
				}
			}
			_iter_next_1b7677a76:;
			++it;
			goto _iter_begin_1b7677a76;
		}
		_iter_end_1b7677a76:;
	}
}



inline void _1b58b17d9_Optimizer::_method_optimize_functions(jule::Ptr<_1ce6a15e3_Package>& _6842_p) {
	{
		auto &expr = (*(_6842_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b76793b3:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b76794b2_f = *it;
			{
				{
					auto &expr = (*(_1b76794b2_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_1b7679c10:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d4384_Fn> _1b7679c76_func = *it;
						{
							(*this)._method_optimize_function(_1b7679c76_func);
						}
						_iter_next_1b7679c10:;
						++it;
						goto _iter_begin_1b7679c10;
					}
					_iter_end_1b7679c10:;
				}
			}
			_iter_next_1b76793b3:;
			++it;
			goto _iter_begin_1b76793b3;
		}
		_iter_end_1b76793b3:;
	}
}



inline void _1b58b17d9_Optimizer::_method_optimize_structs(jule::Ptr<_1ce6a15e3_Package>& _7640_p) {
	{
		auto &expr = (*(_7640_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b767ab89:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b767ac88_f = *it;
			{
				{
					auto &expr = (*(_1b767ac88_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_1b767b4d6:;
					if (it != expr.end()) {
						jule::Ptr<_1e83b1718_Struct> _1b767b54c_s = *it;
						{
							(*this)._method_optimize_struct(_1b767b54c_s);
						}
						_iter_next_1b767b4d6:;
						++it;
						goto _iter_begin_1b767b4d6;
					}
					_iter_end_1b767b4d6:;
				}
			}
			_iter_next_1b767ab89:;
			++it;
			goto _iter_begin_1b767ab89;
		}
		_iter_end_1b767ab89:;
	}
}



inline void _1b58b17d9_Optimizer::_method_optimize_package(jule::Ptr<_1ce6a15e3_Package>& _8440_p) {
	(*this)._method_optimize_globals(_8440_p);
	(*this)._method_optimize_functions(_8440_p);
	(*this)._method_optimize_structs(_8440_p);
}



inline void _1b58b17d9_Optimizer::_method_optimize(void) {
	{
		
		if (_2110623b2_OPT_COND || _211061b42_OPT_APPEND || _2110618ab_OPT_COPY) {
			_case_begin_1b767dbae:;
			{
				goto _match_end_1b767d63c;
			}
		}
		else {
			_case_begin_1b767d708:;
			{
				return;
			}
		}
		_match_end_1b767d63c:;
	}
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b767e044:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b767e2b9_u = *it;
			{
				if ((!((*(_1b767e2b9_u))._field_cpp_linked))) {
					(*this)._method_optimize_package((*(_1b767e2b9_u))._field_package);
				}
			}
			_iter_next_1b767e044:;
			++it;
			goto _iter_begin_1b767e044;
		}
		_iter_end_1b767e044:;
	}
	(*this)._method_optimize_package((*((*this)._field_ir))._field_main);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b58b17d9_Optimizer &_Src) {
	_Stream << "Optimizer{";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _1b591a0a1_AbsTime::_method_unix(void) {
	jule::Bool _5417_leap = false;
	jule::U64 _5517_y = ((*this)._field_year - 1900LLU);
	jule::U64 _5617_m = ((*this)._field_month - 1LLU);
	if ((_5617_m >= 12LLU) || (_5617_m < 0LLU)) {
		jule::U64 _5821_adj = (_5617_m / 12LLU);
		_5617_m%=12LL;
		if ((_5617_m < 0LLU)) {
			(_5821_adj)--;
			_5617_m+=12LLU;
		}
		_5517_y+=_5821_adj;
	}
	jule::U64 _6617_t = _1b591c01a_unix_year_to_seconds(_5517_y,_5417_leap);
	_6617_t+=static_cast<jule::U64>(_1b591c46b_unix_month_to_seconds(_5617_m,_5417_leap));
	_6617_t+=static_cast<jule::U64>(86400LLU * static_cast<jule::U64>(((*this)._field_day - 1LLU)));
	_6617_t+=static_cast<jule::U64>(3600LLU * (*this)._field_hour);
	_6617_t+=static_cast<jule::U64>(60LLU * (*this)._field_minute);
	_6617_t+=(*this)._field_second;
	return _6617_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b591a0a1_AbsTime &_Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _1b591ad71_Time _1b591ad71_Time::_static_method_unix(jule::U64 _8924_sec) {
	return _1b591ad71_Time(_8924_sec);
}



inline _1b591ad71_Time _1b591ad71_Time::_static_method_now(void) {
	return _1b591ad71_Time::_static_method_unix(static_cast<jule::U64>(_1b591b6ac_unix()));
}



inline jule::U64 _1b591ad71_Time::_method_unix(void) {
	return (*this)._field_sec;
}



inline jule::U64 _1b591ad71_Time::_method_day(void) {
	return (*this)._method_abs()._field_day;
}



inline jule::U64 _1b591ad71_Time::_method_month(void) {
	return (*this)._method_abs()._field_month;
}



inline jule::U64 _1b591ad71_Time::_method_year(void) {
	return (*this)._method_abs()._field_year;
}



inline jule::U64 _1b591ad71_Time::_method_second(void) {
	return (*this)._method_abs()._field_second;
}



inline jule::U64 _1b591ad71_Time::_method_minute(void) {
	return (*this)._method_abs()._field_minute;
}



inline jule::U64 _1b591ad71_Time::_method_hour(void) {
	return (*this)._method_abs()._field_hour;
}



inline _1b591a0a1_AbsTime _1b591ad71_Time::_method_abs(void) {
	jule::U64 _12513_secs = ((*this)._field_sec - 951868800LLU);
	jule::U64 _12617_days = (_12513_secs / 86400LLU);
	jule::U64 _12717_rem_secs = (_12513_secs % 86400LL);
	if ((_12717_rem_secs < 0LLU)) {
		_12717_rem_secs+=86400LLU;
		(_12617_days)--;
	}
	jule::U64 _13317_qc_cycles = (_12617_days / 146097LLU);
	jule::U64 _13417_rem_days = (_12617_days % 146097LL);
	if ((_13417_rem_days < 0LLU)) {
		_13417_rem_days+=146097LLU;
		(_13317_qc_cycles)--;
	}
	jule::U64 _14017_c_cycles = (_13417_rem_days / 36524LLU);
	if ((_14017_c_cycles == 4LLU)) {
		(_14017_c_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>((_14017_c_cycles * 36524LLU));
	jule::U64 _14617_q_cycles = (_13417_rem_days / 1461LLU);
	if ((_14617_q_cycles == 25LLU)) {
		(_14617_q_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>((_14617_q_cycles * 1461LLU));
	jule::U64 _15217_rem_years = (_13417_rem_days / 365LLU);
	if ((_15217_rem_years == 4LLU)) {
		(_15217_rem_years)--;
	}
	_13417_rem_days-=static_cast<jule::U64>((_15217_rem_years * 365LLU));
	jule::U64 _15813_leap = static_cast<jule::U64>(((((_15217_rem_years == 0LLU) && ((_14617_q_cycles > 0LLU) || (_14017_c_cycles == 0LLU)))) ? (1LLU) : (0LLU)));
	jule::U64 _15917_y_day = ((_13417_rem_days + 31LLU) + 28LLU) + _15813_leap;
	if (_15917_y_day >= static_cast<jule::U64>(365LLU + _15813_leap)) {
		_15917_y_day-=static_cast<jule::U64>(365LLU + _15813_leap);
	}
	jule::U64 _16417_months = 0LLU;
	for (; _1b59199c9_MDAYS[static_cast<jule::I64>(_16417_months)] <= _13417_rem_days; (_16417_months)++) {
		{
			_13417_rem_days-=_1b59199c9_MDAYS[static_cast<jule::I64>(_16417_months)];
		}
	_iter_next_1b76a968a:;
	}
	_iter_end_1b76a968a:;
	_1b591a0a1_AbsTime _16917_t = _1b591a0a1_AbsTime();
	_16917_t._field_year=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_15217_rem_years + static_cast<jule::U64>(4LLU * _14617_q_cycles)) + static_cast<jule::U64>(100LLU * _14017_c_cycles)) + static_cast<jule::U64>(400LLU * _13317_qc_cycles)) + 100LLU));
	_16917_t._field_month=static_cast<jule::U64>((_16417_months + 2LLU));
	if ((_16917_t._field_month >= 12LLU)) {
		_16917_t._field_month-=12LLU;
		(_16917_t._field_year)++;
	}
	_16917_t._field_month+=1LLU;
	_16917_t._field_year+=1900LLU;
	_16917_t._field_day=static_cast<jule::U64>((_13417_rem_days + 1LLU));
	_16917_t._field_week_day=static_cast<jule::U64>((static_cast<jule::U64>(3LLU + _12617_days) % 7LL));
	if ((_16917_t._field_week_day < 0LLU)) {
		_16917_t._field_week_day+=7LLU;
	}
	_16917_t._field_year_day=_15917_y_day;
	_16917_t._field_hour=static_cast<jule::U64>((_12717_rem_secs / 3600LLU));
	_16917_t._field_minute=static_cast<jule::U64>((static_cast<jule::U64>((_12717_rem_secs / 60LLU)) % 60LL));
	_16917_t._field_second=static_cast<jule::U64>((_12717_rem_secs % 60LL));
	return _16917_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b591ad71_Time &_Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::I64 _1b591baca_Duration::_static_method_nanoseconds(jule::I64 _22231_d) {
	return static_cast<jule::I64>((_22231_d * 1LL));
}



inline jule::I64 _1b591baca_Duration::_static_method_microseconds(jule::I64 _22732_d) {
	return static_cast<jule::I64>((_22732_d * 1000LL));
}



inline jule::I64 _1b591baca_Duration::_static_method_milliseconds(jule::I64 _23232_d) {
	return static_cast<jule::I64>((_23232_d * 1000000LL));
}



inline jule::I64 _1b591baca_Duration::_static_method_seconds(jule::I64 _23727_d) {
	return static_cast<jule::I64>((_23727_d * 1000000000LL));
}



inline jule::I64 _1b591baca_Duration::_static_method_minutes(jule::I64 _24227_d) {
	return static_cast<jule::I64>((_24227_d * 60000000000LL));
}



inline jule::I64 _1b591baca_Duration::_static_method_hours(jule::I64 _24725_d) {
	return static_cast<jule::I64>((_24725_d * 3600000000000LL));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b591baca_Duration &_Src) {
	_Stream << "Duration{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b57910c0_TestCoder> _1b57910c0_TestCoder::_static_method_new(jule::Ptr<_1b592255e_ObjectCoder>& _2228_oc) {
	return jule::new_struct<_1b57910c0_TestCoder>(new( std::nothrow ) _1b57910c0_TestCoder(_2228_oc));
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1b57910c0_TestCoder::_method_find_testing_package(void) {
	{
		auto &expr = (*((*((*this)._field_oc))._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b771302e:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b77130d9_imp = *it;
			{
				if (((*(_1b77130d9_imp))._field_link_path == jule::Str("std::testing", 12))) {
					return _1b77130d9_imp;
				}
			}
			_iter_next_1b771302e:;
			++it;
			goto _iter_begin_1b771302e;
		}
		_iter_end_1b771302e:;
	}
	return nullptr;
}



inline void _1b57910c0_TestCoder::_method_append_test(jule::Str& _3735_obj,jule::Ptr<_1e83d630e_FnIns> _3749_f) {
	_3735_obj+=(*((*this)._field_oc))._method_indent();
	_3735_obj+=jule::Str("_t->_method_reset();\n", 21);
	_3735_obj+=(*((*this)._field_oc))._method_indent();
	_3735_obj+=jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35);
	_3735_obj+=(*((*this)._field_oc))._method_indent();
	_3735_obj+=jule::Str("jule::outln(", 12);
	_3735_obj+=_1b5859540_cstr_lit(static_cast<jule::Slice<jule::U8>>((*((*(_3749_f))._field_decl))._field_ident));
	_3735_obj+=jule::Str(");\n", 3);
	_3735_obj+=(*((*this)._field_oc))._method_indent();
	_3735_obj+=_1b58c4698_IdentCoder::_static_method_func_ins(_3749_f);
	_3735_obj+=jule::Str("(_t);\n", 6);
	_3735_obj+=(*((*this)._field_oc))._method_indent();
	_3735_obj+=jule::Str("post_test();\n", 13);
}



inline void _1b57910c0_TestCoder::_method_append_package_tests(jule::Str& _5344_obj,jule::Ptr<_1ce6a15e3_Package>& _5359_p) {
	{
		auto &expr = (*(_5359_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b7718e03:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b7718ebe_file = *it;
			{
				{
					auto &expr = (*(_1b7718ebe_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_1b7719750:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d4384_Fn> _1b77197b6_f = *it;
						{
							if (_1b592c0d5_has_directive((*(_1b77197b6_f))._field_directives,jule::Str("test", 4))) {
								(*this)._method_append_test(_5344_obj,(*(_1b77197b6_f))._field_instances[0LL]);
							}
						}
						_iter_next_1b7719750:;
						++it;
						goto _iter_begin_1b7719750;
					}
					_iter_end_1b7719750:;
				}
			}
			_iter_next_1b7718e03:;
			++it;
			goto _iter_begin_1b7718e03;
		}
		_iter_end_1b7718e03:;
	}
}



inline void _1b57910c0_TestCoder::_method_serialize(jule::Str& _6537_obj) {
	_6537_obj+=jule::Str("\nvoid test_point(void) {\n", 25);
	(*((*this)._field_oc))._method_add_indent();
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	jule::Ptr<_1ce6a0317_ImportInfo> _7017_p = (*this)._method_find_testing_package();
	if ((_7017_p == nullptr)) {
		_6537_obj+=jule::Str("}", 1);
		(*((*this)._field_oc))._method_done_indent();
		return;
	}
	jule::Ptr<_1e83b84bc_StructIns> _8017_t = (*((*(_7017_p))._method_find_struct(jule::Str("T", 1),false)))._field_instances[0LL];
	_6537_obj+=_1b592c437_TypeCoder::_static_method_as_sptr(_1b592c437_TypeCoder::_static_method_structure_ins(_8017_t));
	_6537_obj+=jule::Str(" _t = jule::new_struct<", 23);
	_6537_obj+=_1b592c437_TypeCoder::_static_method_structure_ins(_8017_t);
	_6537_obj+=jule::Str(">(", 2);
	if ((!(_210ecc0b8_PRODUCTION))) {
		_6537_obj+=jule::Str("\"/jule/init\", ", 14);
	}
	_6537_obj+=jule::Str("new(std::nothrow) ", 18);
	_6537_obj+=_1b592c437_TypeCoder::_static_method_structure_ins(_8017_t);
	_6537_obj+=jule::Str(");\n", 3);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("auto post_test = [&](void) {\n", 29);
	(*((*this)._field_oc))._method_add_indent();
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("++total;\n", 9);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("if (_t->_method_failed()) { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 84);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("else if (_t->_method_skipped()) { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 92);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53);
	(*((*this)._field_oc))._method_done_indent();
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("};\n", 3);
	(*this)._method_append_package_tests(_6537_obj,(*((*((*this)._field_oc))._field_ir))._field_main);
	_6537_obj+=jule::Str("\n\n", 2);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("std::cout << std::endl << \"total tests: \" << total << \" skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 154);
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("if (failed != 0) std::exit(1);\n", 31);
	(*((*this)._field_oc))._method_done_indent();
	_6537_obj+=(*((*this)._field_oc))._method_indent();
	_6537_obj+=jule::Str("}\n", 2);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b57910c0_TestCoder &_Src) {
	_Stream << "TestCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b57cc35e_ScopeCoder> _1b57cc35e_ScopeCoder::_static_method_new(jule::Ptr<_1b592255e_ObjectCoder>& _4824_oc) {
	return jule::new_struct<_1b57cc35e_ScopeCoder>(new( std::nothrow ) _1b57cc35e_ScopeCoder(_4824_oc));
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_range_index_iter(jule::Ptr<_1ce68430c_RangeIter>& _5440_it) {
	jule::Str _5513_begin = _1b58c4698_IdentCoder::_static_method_iter_begin(static_cast<jule::U64>(static_cast<jule::U64>(_5440_it)));
	jule::Str _5613_next = _1b58c4698_IdentCoder::_static_method_iter_next(static_cast<jule::U64>(static_cast<jule::U64>(_5440_it)));
	jule::Str _5817_obj = jule::Str("{\n", 2);
	(*((*this)._field_oc))._method_add_indent();
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=jule::Str("auto ", 5);
	if (_2110618ab_OPT_COPY && _1b57ce2d9_is_copy_optimizable((*(_5440_it))._field_expr)) {
		_5817_obj+=jule::Str("&", 1);
	}
	_5817_obj+=jule::Str("expr = ", 7);
	_5817_obj+=(*((*((*this)._field_oc))._field_ec))._method_model((*((*(_5440_it))._field_expr))._field_model);
	_5817_obj+=jule::Str(";\n", 2);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=_5513_begin;
	_5817_obj+=jule::Str(":;\n", 3);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	(*((*this)._field_oc))._method_add_indent();
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	if (((*(_5440_it))._field_key_a != nullptr)) {
		_5817_obj+=(*((*this)._field_oc))._method_var_init_expr((*(_5440_it))._field_key_a,jule::Str("it - expr.begin()", 17));
		_5817_obj+=jule::Str("\n", 1);
		_5817_obj+=(*((*this)._field_oc))._method_indent();
	}
	if (((*(_5440_it))._field_key_b != nullptr)) {
		if (_2110618ab_OPT_COPY) {
			(*((*(_5440_it))._field_key_b))._field_reference=_1b582d79a_is_iter_copy_optimizable((*(_5440_it))._field_expr,(*(_5440_it))._field_key_b);
		}
		_5817_obj+=(*((*this)._field_oc))._method_var_init_expr((*(_5440_it))._field_key_b,jule::Str("*it", 3));
		_5817_obj+=jule::Str("\n", 1);
		_5817_obj+=(*((*this)._field_oc))._method_indent();
	}
	_5817_obj+=(*this)._method_scope((*(_5440_it))._field_scope);
	_5817_obj+=jule::Str("\n", 1);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=_5613_next;
	_5817_obj+=jule::Str(":;\n", 3);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=jule::Str("++it;\n", 6);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	if (((*(_5440_it))._field_key_a != nullptr)) {
		_5817_obj+=_1b58c4698_IdentCoder::_static_method_var((*(_5440_it))._field_key_a);
		_5817_obj+=jule::Str("++;\n", 4);
		_5817_obj+=(*((*this)._field_oc))._method_indent();
	}
	_5817_obj+=jule::Str("goto ", 5);
	_5817_obj+=_5513_begin;
	_5817_obj+=jule::Str(";\n", 2);
	(*((*this)._field_oc))._method_done_indent();
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=jule::Str("}\n", 2);
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=_1b58c4698_IdentCoder::_static_method_iter_end(static_cast<jule::U64>(static_cast<jule::U64>(_5440_it)));
	_5817_obj+=jule::Str(":;\n", 3);
	(*((*this)._field_oc))._method_done_indent();
	_5817_obj+=(*((*this)._field_oc))._method_indent();
	_5817_obj+=jule::Str("}", 1);
	return _5817_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_range_hashmap_iter(jule::Ptr<_1ce68430c_RangeIter>& _12442_it) {
	jule::Str _12513_begin = _1b58c4698_IdentCoder::_static_method_iter_begin(static_cast<jule::U64>(static_cast<jule::U64>(_12442_it)));
	jule::Str _12613_next = _1b58c4698_IdentCoder::_static_method_iter_next(static_cast<jule::U64>(static_cast<jule::U64>(_12442_it)));
	jule::Str _12817_obj = jule::Str("{\n", 2);
	(*((*this)._field_oc))._method_add_indent();
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("auto ", 5);
	if (_2110618ab_OPT_COPY && _1b57ce2d9_is_copy_optimizable((*(_12442_it))._field_expr)) {
		_12817_obj+=jule::Str("&", 1);
	}
	_12817_obj+=jule::Str("expr = ", 7);
	_12817_obj+=(*((*((*this)._field_oc))._field_ec))._method_model((*((*(_12442_it))._field_expr))._field_model);
	_12817_obj+=jule::Str(";\n", 2);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=_12513_begin;
	_12817_obj+=jule::Str(":;\n", 3);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	(*((*this)._field_oc))._method_add_indent();
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	if (((*(_12442_it))._field_key_a != nullptr)) {
		if (_2110618ab_OPT_COPY) {
			(*((*(_12442_it))._field_key_a))._field_reference=_1b582d79a_is_iter_copy_optimizable((*(_12442_it))._field_expr,(*(_12442_it))._field_key_a);
		}
		_12817_obj+=(*((*this)._field_oc))._method_var_init_expr((*(_12442_it))._field_key_a,jule::Str("it->first", 9));
		_12817_obj+=jule::Str("\n", 1);
		_12817_obj+=(*((*this)._field_oc))._method_indent();
	}
	if (((*(_12442_it))._field_key_b != nullptr)) {
		if (_2110618ab_OPT_COPY) {
			(*((*(_12442_it))._field_key_b))._field_reference=_1b582d79a_is_iter_copy_optimizable((*(_12442_it))._field_expr,(*(_12442_it))._field_key_b);
		}
		_12817_obj+=(*((*this)._field_oc))._method_var_init_expr((*(_12442_it))._field_key_b,jule::Str("it->second", 10));
		_12817_obj+=jule::Str("\n", 1);
		_12817_obj+=(*((*this)._field_oc))._method_indent();
	}
	_12817_obj+=(*this)._method_scope((*(_12442_it))._field_scope);
	_12817_obj+=jule::Str("\n", 1);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=_12613_next;
	_12817_obj+=jule::Str(":;\n", 3);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("++it;\n", 6);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("goto ", 5);
	_12817_obj+=_12513_begin;
	_12817_obj+=jule::Str(";\n", 2);
	(*((*this)._field_oc))._method_done_indent();
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("}\n", 2);
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=_1b58c4698_IdentCoder::_static_method_iter_end(static_cast<jule::U64>(static_cast<jule::U64>(_12442_it)));
	_12817_obj+=jule::Str(":;\n", 3);
	(*((*this)._field_oc))._method_done_indent();
	_12817_obj+=(*((*this)._field_oc))._method_indent();
	_12817_obj+=jule::Str("}", 1);
	return _12817_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_if_case(jule::Ptr<_1ce632574_If> _19230_i) {
	jule::Str _19317_obj = jule::Str();
	if ((*(_19230_i))._field_expr != jule::Any(nullptr)) {
		_19317_obj+=jule::Str("if (", 4);
		_19317_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_19230_i))._field_expr);
		_19317_obj+=jule::Str(") ", 2);
	}
	_19317_obj+=(*this)._method_scope((*(_19230_i))._field_scope);
	return _19317_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_conditional(jule::Ptr<_1ce68353c_Conditional> _20334_c) {
	jule::Str _20417_obj = jule::Str();
	{
		auto &expr = (*(_20334_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_1b774c376:;
		if (it != expr.end()) {
			jule::Ptr<_1ce632574_If> _1b774c40e_elif = *it;
			{
				if ((_1b774c40e_elif == nullptr)) {
					goto _iter_next_1b774c376;
				}
				if ((_20417_obj.len() != 0LL)) {
					_20417_obj+=jule::Str(" else ", 6);
				}
				_20417_obj+=(*this)._method_if_case(_1b774c40e_elif);
			}
			_iter_next_1b774c376:;
			++it;
			goto _iter_begin_1b774c376;
		}
		_iter_end_1b774c376:;
	}
	if (((*(_20334_c))._field_default != nullptr)) {
		if ((_20417_obj.len() != 0LL)) {
			_20417_obj+=jule::Str(" else ", 6);
		}
		_20417_obj+=(*this)._method_scope((*((*(_20334_c))._field_default))._field_scope);
	}
	return _20417_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_inf_iter(jule::Ptr<_1ce68397c_InfIter> _22331_it) {
	jule::Str _22417_obj = jule::Str("for (;;) {\n", 11);
	(*((*this)._field_oc))._method_add_indent();
	_22417_obj+=(*((*this)._field_oc))._method_indent();
	_22417_obj+=(*this)._method_scope((*(_22331_it))._field_scope);
	(*((*this)._field_oc))._method_done_indent();
	_22417_obj+=jule::Str("\n", 1);
	_22417_obj+=(*((*this)._field_oc))._method_indent();
	_22417_obj+=_1b58c4698_IdentCoder::_static_method_iter_next(static_cast<jule::U64>(static_cast<jule::U64>(_22331_it)));
	_22417_obj+=jule::Str(":;\n", 3);
	_22417_obj+=(*((*this)._field_oc))._method_indent();
	_22417_obj+=jule::Str("}\n", 2);
	_22417_obj+=(*((*this)._field_oc))._method_indent();
	_22417_obj+=_1b58c4698_IdentCoder::_static_method_iter_end(static_cast<jule::U64>(static_cast<jule::U64>(_22331_it)));
	_22417_obj+=jule::Str(":;", 2);
	return _22417_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_while_iter(jule::Ptr<_1ce683dbc_WhileIter> _24433_it) {
	jule::Str _24517_obj = jule::Str();
	if (((*(_24433_it))._field_expr != jule::Any(nullptr)) && ((*(_24433_it))._field_next == jule::Any(nullptr))) {
		_24517_obj+=jule::Str("while (", 7);
		_24517_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_24433_it))._field_expr);
		_24517_obj+=jule::Str(") {\n", 4);
	} else {
		_24517_obj+=jule::Str("for (; ", 7);
		if ((*(_24433_it))._field_expr != jule::Any(nullptr)) {
			_24517_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_24433_it))._field_expr);
		}
		_24517_obj+=jule::Str("; ", 2);
		if ((*(_24433_it))._field_next != jule::Any(nullptr)) {
			jule::Str _25721_st = (*this)._method_st((*(_24433_it))._field_next);
			_24517_obj+=_25721_st.slice(0LL,(_25721_st.len() - 1LL));
		}
		_24517_obj+=jule::Str(") {\n", 4);
	}
	(*((*this)._field_oc))._method_add_indent();
	_24517_obj+=(*((*this)._field_oc))._method_indent();
	_24517_obj+=(*this)._method_scope((*(_24433_it))._field_scope);
	_24517_obj+=jule::Str("\n", 1);
	(*((*this)._field_oc))._method_done_indent();
	_24517_obj+=(*((*this)._field_oc))._method_indent();
	_24517_obj+=_1b58c4698_IdentCoder::_static_method_iter_next(static_cast<jule::U64>(static_cast<jule::U64>(_24433_it)));
	_24517_obj+=jule::Str(":;\n", 3);
	_24517_obj+=(*((*this)._field_oc))._method_indent();
	_24517_obj+=jule::Str("}\n", 2);
	_24517_obj+=(*((*this)._field_oc))._method_indent();
	_24517_obj+=_1b58c4698_IdentCoder::_static_method_iter_end(static_cast<jule::U64>(static_cast<jule::U64>(_24433_it)));
	_24517_obj+=jule::Str(":;", 2);
	return _24517_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_range_iter(jule::Ptr<_1ce68430c_RangeIter> _28033_it) {
	{
		
		if (((*((*((*(_28033_it))._field_expr))._field_kind))._method_slc() != nullptr)) {
			_case_begin_1b775d8c6:;
			{
				return (*this)._method_range_index_iter(_28033_it);
			}
		}
		else if (((*((*((*(_28033_it))._field_expr))._field_kind))._method_arr() != nullptr)) {
			_case_begin_1b775dd5a:;
			{
				return (*this)._method_range_index_iter(_28033_it);
			}
		}
		else if (((*((*((*(_28033_it))._field_expr))._field_kind))._method_map() != nullptr)) {
			_case_begin_1b775d72d:;
			{
				return (*this)._method_range_hashmap_iter(_28033_it);
			}
		}
		else {
			_case_begin_1b775d299:;
			{
				return (*this)._method_range_index_iter(_28033_it);
			}
		}
		_match_end_1b775d1cd:;
	}
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_cont(jule::Ptr<_1ce68474c_ContSt> _29319_c) {
	jule::Str _29417_obj = jule::Str("goto ", 5);
	_29417_obj+=_1b58c4698_IdentCoder::_static_method_iter_next((*(_29319_c))._field_it);
	_29417_obj+=jule::Str(";", 1);
	return _29417_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_label(jule::Ptr<_1ce6850cc_Label> _30020_l) {
	return (_1b58c4698_IdentCoder::_static_method_label((*(_30020_l))._field_ident) + jule::Str(":;", 2));
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_goto_st(jule::Ptr<_1ce68551c_GotoSt> _30422_gt) {
	jule::Str _30517_obj = jule::Str("goto ", 5);
	_30517_obj+=_1b58c4698_IdentCoder::_static_method_label((*(_30422_gt))._field_ident);
	_30517_obj+=jule::Str(";", 1);
	return _30517_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_postfix(jule::Ptr<_1ce68595c_Postfix> _31130_p) {
	jule::Str _31217_obj = jule::Str("(", 1);
	_31217_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_31130_p))._field_expr);
	_31217_obj+=jule::Str(")", 1);
	_31217_obj+=(*(_31130_p))._field_op;
	_31217_obj+=jule::Str(";", 1);
	return _31217_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_assign(jule::Ptr<_1ce685d9c_Assign> _32029_a) {
	jule::Str _32117_obj = (*((*((*this)._field_oc))._field_ec))._method_expr((*((*(_32029_a))._field_l))._field_model);
	_32117_obj+=(*(_32029_a))._field_op._field_kind;
	_32117_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*((*(_32029_a))._field_r))._field_model);
	_32117_obj+=jule::Str(";", 1);
	return _32117_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_multi_assign(jule::Ptr<_1ce6862dc_MultiAssign> _32835_a) {
	jule::Str _32917_obj = jule::Str("std::tie(", 9);
	{
		auto &expr = (*(_32835_a))._field_l;
		auto it = expr.begin();
		_iter_begin_1b776a295:;
		if (it != expr.end()) {
			jule::Any _1b776a32d_l = *it;
			{
				_32917_obj+=(((_1b776a32d_l == jule::Any(nullptr))) ? (jule::Str("std::ignore", 11)) : ((*((*((*this)._field_oc))._field_ec))._method_expr(_1b776a32d_l)));
				_32917_obj+=jule::Str(",", 1);
			}
			_iter_next_1b776a295:;
			++it;
			goto _iter_begin_1b776a295;
		}
		_iter_end_1b776a295:;
	}
	(_32917_obj).mut_slice(0LL,_32917_obj.len() - 1LL);
	_32917_obj+=jule::Str(") = ", 4);
	_32917_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_32835_a))._field_r);
	_32917_obj+=jule::Str(";", 1);
	return _32917_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_match_expr(jule::Ptr<_1ce68672c_Match>& _34334_m) {
	if ((!((*((*(_34334_m))._field_expr))._method_is_const()))) {
		return jule::Str("_match_expr", 11);
	}
	if ((!((*((*((*(_34334_m))._field_expr))._field_constant))._method_is_bool())) || (!((*((*((*(_34334_m))._field_expr))._field_constant))._method_read_bool()))) {
		return (*((*((*this)._field_oc))._field_ec))._method_model((*((*(_34334_m))._field_expr))._field_model);
	}
	return jule::Str();
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_case(jule::Ptr<_1ce68672c_Match> _35327_m,jule::Ptr<_1ce686b6c_Case> _35342_c) {
	jule::Str _35417_obj = jule::Str();
	if (((*(_35342_c))._field_exprs.len() != 0LL) && (!((*(_35327_m))._method_is_generic_type_match()))) {
		if (((*(_35327_m))._field_cases.len() > 0LL) && ((*(_35327_m))._field_cases[0LL] == _35342_c)) {
			_35417_obj+=jule::Str("if (", 4);
		} else {
			_35417_obj+=jule::Str("else if (", 9);
		}
		{
			auto &expr = (*(_35342_c))._field_exprs;
			auto it = expr.begin();
			_iter_begin_1b8e8e08e:;
			if (it != expr.end()) {
				jule::I64 _1b8e8d962_i = it - expr.begin();
				jule::Ptr<_1ce727449_Data> _1b8e8e105_expr = *it;
				{
					{
						
						if ((!((*(_35327_m))._field_type_match))) {
							_case_begin_1b8e8ec60:;
							{
								jule::Str _36525_case_expr = (*this)._method_match_expr(_35327_m);
								if ((*((*(_35327_m))._field_expr))._method_good_operand(_1b8e8e105_expr)) {
									if ((_36525_case_expr.len() != 0LL)) {
										_35417_obj+=_36525_case_expr;
										_35417_obj+=jule::Str(" == ", 4);
									}
									_35417_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_1b8e8e105_expr))._field_model);
								} else {
									_35417_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_1b8e8e105_expr))._field_model);
									if ((_36525_case_expr.len() != 0LL)) {
										_35417_obj+=jule::Str(" == ", 4);
										_35417_obj+=_36525_case_expr;
									}
								}
							}
						}
						else {
							_case_begin_1b8e8e7cb:;
							{
								_35417_obj+=jule::Str("_match_expr", 11);
								_35417_obj+=jule::Str(".type_is<", 9);
								_35417_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_1b8e8e105_expr))._field_model);
								_35417_obj+=jule::Str(">()", 3);
							}
						}
						_match_end_1b8e8e710:;
					}
					if ((_1b8e8d962_i + 1LL) < static_cast<jule::I64>((*(_35342_c))._field_exprs.len())) {
						_35417_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_1b8e8e08e:;
				++it;
				_1b8e8d962_i++;
				goto _iter_begin_1b8e8e08e;
			}
			_iter_end_1b8e8e08e:;
		}
		_35417_obj+=jule::Str(") ", 2);
	} else if (((*(_35327_m))._field_default == _35342_c) && ((*(_35327_m))._field_cases.len() != 0LL)) {
		_35417_obj+=(*((*this)._field_oc))._method_indent();
		_35417_obj+=jule::Str("else ", 5);
	}
	(*((*this)._field_oc))._method_add_indent();
	_35417_obj+=jule::Str("{\n", 2);
	_35417_obj+=(*((*this)._field_oc))._method_indent();
	_35417_obj+=_1b58c4698_IdentCoder::_static_method_case_begin(static_cast<jule::U64>(static_cast<jule::U64>(_35342_c)));
	_35417_obj+=jule::Str(":;\n", 3);
	if (((*((*(_35342_c))._field_scope))._field_stmts.len() > 0LL)) {
		_35417_obj+=(*((*this)._field_oc))._method_indent();
		_35417_obj+=(*this)._method_scope((*(_35342_c))._field_scope);
		_35417_obj+=jule::Str("\n", 1);
	}
	(*((*this)._field_oc))._method_done_indent();
	_35417_obj+=(*((*this)._field_oc))._method_indent();
	_35417_obj+=jule::Str("}", 1);
	return _35417_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_match_st(jule::Ptr<_1ce68672c_Match> _41531_m) {
	if (((*(_41531_m))._field_cases.len() == 0LL) && ((*(_41531_m))._field_default == nullptr)) {
		return jule::Str();
	}
	jule::Bool _42013_generic_type_match = (*(_41531_m))._method_is_generic_type_match();
	if (_42013_generic_type_match && (((*(_41531_m))._field_default == nullptr) || ((*((*((*(_41531_m))._field_default))._field_scope))._field_stmts.len() == 0LL))) {
		return jule::Str();
	}
	jule::Str _42517_obj = jule::Str("{\n", 2);
	(*((*this)._field_oc))._method_add_indent();
	_42517_obj+=(*((*this)._field_oc))._method_indent();
	if ((!(_42013_generic_type_match)) && (!((*((*(_41531_m))._field_expr))._method_is_const()))) {
		if (_2110618ab_OPT_COPY && _1b57ce2d9_is_copy_optimizable((*(_41531_m))._field_expr)) {
			_42517_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_42517_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_42517_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*((*(_41531_m))._field_expr))._field_model);
		_42517_obj+=jule::Str(" };\n", 4);
		_42517_obj+=(*((*this)._field_oc))._method_indent();
	}
	if (((*(_41531_m))._field_cases.len() > 0LL)) {
		{
			auto &expr = (*(_41531_m))._field_cases;
			auto it = expr.begin();
			_iter_begin_1b8ea0c82:;
			if (it != expr.end()) {
				jule::Ptr<_1ce686b6c_Case> _1b8ea0d1a_c = *it;
				{
					if ((_1b8ea0d1a_c == nullptr)) {
						goto _iter_next_1b8ea0c82;
					}
					_42517_obj+=jule::Str("\n", 1);
					_42517_obj+=(*((*this)._field_oc))._method_indent();
					_42517_obj+=(*this)._method_case(_41531_m,_1b8ea0d1a_c);
				}
				_iter_next_1b8ea0c82:;
				++it;
				goto _iter_begin_1b8ea0c82;
			}
			_iter_end_1b8ea0c82:;
		}
	}
	if (((*(_41531_m))._field_default != nullptr)) {
		_42517_obj+=jule::Str("\n", 1);
		_42517_obj+=(*this)._method_case(_41531_m,(*(_41531_m))._field_default);
	}
	_42517_obj+=jule::Str("\n", 1);
	_42517_obj+=(*((*this)._field_oc))._method_indent();
	_42517_obj+=_1b58c4698_IdentCoder::_static_method_match_end(static_cast<jule::U64>(static_cast<jule::U64>(_41531_m)));
	_42517_obj+=jule::Str(":;", 2);
	_42517_obj+=jule::Str("\n", 1);
	(*((*this)._field_oc))._method_done_indent();
	_42517_obj+=(*((*this)._field_oc))._method_indent();
	_42517_obj+=jule::Str("}", 1);
	return _42517_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_fall_st(jule::Ptr<_1ce6870ac_FallSt> _47322_f) {
	jule::Str _47417_obj = jule::Str("goto ", 5);
	_47417_obj+=_1b58c4698_IdentCoder::_static_method_case_begin((*(_47322_f))._field_dest_case);
	_47417_obj+=jule::Str(";", 1);
	return _47417_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_break_st(jule::Ptr<_1ce684b8c_BreakSt> _48023_b) {
	jule::Str _48117_obj = jule::Str("goto ", 5);
	if (((*(_48023_b))._field_it != 0LLU)) {
		_48117_obj+=_1b58c4698_IdentCoder::_static_method_iter_end((*(_48023_b))._field_it);
	} else {
		_48117_obj+=_1b58c4698_IdentCoder::_static_method_match_end((*(_48023_b))._field_mtch);
	}
	_48117_obj+=jule::Str(";", 1);
	return _48117_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_ret_with_vars(jule::Ptr<_1ce6874ec_RetSt> _49136_r) {
	jule::Str _49217_obj = jule::Str();
	{
		auto &expr = (*(_49136_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_1b8ea9373:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b8ea940b_v = *it;
			{
				if (_212ae9255_is_ignore_ident((*(_1b8ea940b_v))._field_ident)) {
					_49217_obj+=(*((*((*this)._field_oc))._field_ec))._method_init_expr((*((*(_1b8ea940b_v))._field_kind))._field_kind);
				} else {
					_49217_obj+=_1b58c4698_IdentCoder::_static_method_var(_1b8ea940b_v);
				}
				_49217_obj+=jule::Str(",", 1);
			}
			_iter_next_1b8ea9373:;
			++it;
			goto _iter_begin_1b8ea9373;
		}
		_iter_end_1b8ea9373:;
	}
	(_49217_obj).mut_slice(0LL,_49217_obj.len() - 1LL);
	jule::Str _50417_oobj = jule::Str("return ", 7);
	if ((*((*((*(_49136_r))._field_func))._field_decl))._field_exceptional) {
		_50417_oobj+=jule::Str("jule::Exceptional<", 18);
		_50417_oobj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_49136_r))._field_func))._field_result);
		_50417_oobj+=jule::Str(">(jule::Any(), ", 15);
	}
	if (((*(_49136_r))._field_vars.len() > 1LL)) {
		_50417_oobj+=jule::Str("std::make_tuple(", 16);
		_50417_oobj+=_49217_obj;
		_50417_oobj+=jule::Str(")", 1);
	} else {
		_50417_oobj+=_49217_obj;
	}
	if ((*((*((*(_49136_r))._field_func))._field_decl))._field_exceptional) {
		_50417_oobj+=jule::Str(")", 1);
	}
	_50417_oobj+=jule::Str(";", 1);
	return _50417_oobj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_ret_tuple(jule::Ptr<_1ce6874ec_RetSt> _52832_r) {
	jule::Slice<jule::Ptr<_1ce727449_Data>> _52917_datas = (*((*(_52832_r))._field_expr.operator jule::Ptr<_1e83c95aa_TupleExprModel>()))._field_datas;
	jule::Str _53017_obj = jule::Str();
	{
		auto &expr = (*(_52832_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_1b8eb13e1:;
		if (it != expr.end()) {
			jule::I64 _1b8eb14ac_i = it - expr.begin();
			jule::Ptr<_1ce6cecb4_Var> _1b8eb1699_v = *it;
			{
				if (_212ae9255_is_ignore_ident((*(_1b8eb1699_v))._field_ident)) {
					goto _iter_next_1b8eb13e1;
				}
				jule::Any _53621_model = (*(_52917_datas[_1b8eb14ac_i]))._field_model;
				if (_53621_model == jule::Any(_1b8eb1699_v)) {
					goto _iter_next_1b8eb13e1;
				}
				jule::Str _54117_ident = _1b58c4698_IdentCoder::_static_method_var(_1b8eb1699_v);
				_53017_obj+=_54117_ident;
				_53017_obj+=jule::Str(" = ", 3);
				_53017_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr(_53621_model);
				_53017_obj+=jule::Str(";\n", 2);
				_53017_obj+=(*((*this)._field_oc))._method_indent();
			}
			_iter_next_1b8eb13e1:;
			++it;
			_1b8eb14ac_i++;
			goto _iter_begin_1b8eb13e1;
		}
		_iter_end_1b8eb13e1:;
	}
	jule::Str _54917_oobj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _52917_datas;
		auto it = expr.begin();
		_iter_begin_1b8eb0522:;
		if (it != expr.end()) {
			jule::I64 _1b8eb4702_i = it - expr.begin();
			jule::Ptr<_1ce727449_Data> _1b8eb4977_d = *it;
			{
				jule::Ptr<_1ce6cecb4_Var> _55121_v = (*(_52832_r))._field_vars[_1b8eb4702_i];
				if (_212ae9255_is_ignore_ident((*(_55121_v))._field_ident)) {
					_54917_oobj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_1b8eb4977_d))._field_model);
				} else {
					_54917_oobj+=_1b58c4698_IdentCoder::_static_method_var(_55121_v);
				}
				_54917_oobj+=jule::Str(",", 1);
			}
			_iter_next_1b8eb0522:;
			++it;
			_1b8eb4702_i++;
			goto _iter_begin_1b8eb0522;
		}
		_iter_end_1b8eb0522:;
	}
	(_54917_oobj).mut_slice(0LL,_54917_oobj.len() - 1LL);
	_54917_oobj+=jule::Str(")", 1);
	if ((*((*((*(_52832_r))._field_func))._field_decl))._field_exceptional) {
		_53017_obj+=jule::Str("return jule::Exceptional<", 25);
		_53017_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_52832_r))._field_func))._field_result);
		_53017_obj+=jule::Str(">(jule::Any(),", 14);
		_53017_obj+=_54917_oobj;
		_53017_obj+=jule::Str(")", 1);
	} else {
		_53017_obj+=jule::Str("return ", 7);
		_53017_obj+=_54917_oobj;
	}
	_53017_obj+=jule::Str(";", 1);
	return _53017_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_ret_with_exprs(jule::Ptr<_1ce6874ec_RetSt> _57837_r) {
	if (((*(_57837_r))._field_vars.len() > 1LL)) {
		return (*this)._method_ret_tuple(_57837_r);
	}
	if (((*(_57837_r))._field_vars.len() > 0LL)) {
		jule::Ptr<_1ce6cecb4_Var> _58521_v = (*(_57837_r))._field_vars[0LL];
		if ((!(_212ae9255_is_ignore_ident((*(_58521_v))._field_ident))) && ((*(_57837_r))._field_expr != jule::Any(_58521_v))) {
			jule::Str _58721_ident = _1b58c4698_IdentCoder::_static_method_var(_58521_v);
			jule::Str _58825_obj = _58721_ident;
			_58825_obj+=jule::Str(" = ", 3);
			_58825_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_57837_r))._field_expr);
			_58825_obj+=jule::Str(";\n", 2);
			_58825_obj+=(*((*this)._field_oc))._method_indent();
			if ((*((*((*(_57837_r))._field_func))._field_decl))._field_exceptional) {
				_58825_obj+=jule::Str("return jule::Exceptional<", 25);
				_58825_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_57837_r))._field_func))._field_result);
				_58825_obj+=jule::Str(">(jule::Any(),", 14);
				_58825_obj+=_58721_ident;
				_58825_obj+=jule::Str(")", 1);
			} else {
				_58825_obj+=jule::Str("return ", 7);
				_58825_obj+=_58721_ident;
			}
			_58825_obj+=jule::Str(";", 1);
			return _58825_obj;
		}
	}
	if ((*((*((*(_57837_r))._field_func))._field_decl))._field_exceptional) {
		jule::Str _60921_obj = jule::Str("return jule::Exceptional<", 25);
		_60921_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_57837_r))._field_func))._field_result);
		_60921_obj+=jule::Str(">(jule::Any(),", 14);
		_60921_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_57837_r))._field_expr);
		_60921_obj+=jule::Str(")", 1);
		_60921_obj+=jule::Str(";", 1);
		return _60921_obj;
	}
	jule::Str _61817_obj = jule::Str("return ", 7);
	_61817_obj+=(*((*((*this)._field_oc))._field_ec))._method_expr((*(_57837_r))._field_expr);
	_61817_obj+=jule::Str(";", 1);
	return _61817_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_ret_st(jule::Ptr<_1ce6874ec_RetSt> _62429_r) {
	if (((*(_62429_r))._field_expr == jule::Any(nullptr)) && ((*(_62429_r))._field_vars.len() == 0LL)) {
		if ((*((*((*(_62429_r))._field_func))._field_decl))._field_exceptional) {
			return jule::Str("return jule::VoidExceptional();", 31);
		}
		return jule::Str("return;", 7);
	}
	if ((*(_62429_r))._field_expr == jule::Any(nullptr)) {
		return (*this)._method_ret_with_vars(_62429_r);
	}
	return (*this)._method_ret_with_exprs(_62429_r);
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_ret_with_defaults(jule::Ptr<_1ce76121e_TypeKind> _63940_result) {
	jule::Str _64017_obj = jule::Str("return ", 7);
	if (((*(_63940_result))._method_tup() != nullptr)) {
		_64017_obj+=jule::Str("std::make_tuple(", 16);
		{
			auto &expr = (*((*(_63940_result))._method_tup()))._field_types;
			auto it = expr.begin();
			_iter_begin_1b8ec75d3:;
			if (it != expr.end()) {
				jule::Ptr<_1ce76121e_TypeKind> _1b8ec7627_t = *it;
				{
					_64017_obj+=(*((*((*this)._field_oc))._field_ec))._method_init_expr(_1b8ec7627_t);
					_64017_obj+=jule::Str(",", 1);
				}
				_iter_next_1b8ec75d3:;
				++it;
				goto _iter_begin_1b8ec75d3;
			}
			_iter_end_1b8ec75d3:;
		}
		(_64017_obj).mut_slice(0LL,_64017_obj.len() - 1LL);
		_64017_obj+=jule::Str(")", 1);
	} else {
		_64017_obj+=(*((*((*this)._field_oc))._field_ec))._method_init_expr(_63940_result);
	}
	_64017_obj+=jule::Str(";", 1);
	return _64017_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_var(jule::Ptr<_1ce6cecb4_Var> _65626_v) {
	if ((*(_65626_v))._field_constant) {
		return jule::Str();
	}
	return (*((*this)._field_oc))._method_var(_65626_v);
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_st(jule::Any _66425_st) {
	if (_66425_st == jule::Any(nullptr)) {
		return jule::Str();
	}
	{
		auto &_match_expr{ _66425_st };
		
		if (_match_expr.type_is<jule::Ptr<_1ce62e86d_Scope>>()) {
			_case_begin_1b8ecb95b:;
			{
				return (*this)._method_scope(_66425_st.operator jule::Ptr<_1ce62e86d_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b8ecbecd:;
			{
				return (*this)._method_var(_66425_st.operator jule::Ptr<_1ce6cecb4_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b8ecc044:;
			{
				return ((*((*((*this)._field_oc))._field_ec))._method_expr(jule::Any(_66425_st.operator jule::Ptr<_1ce727449_Data>())) + jule::Str(";", 1));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68353c_Conditional>>()) {
			_case_begin_1b8ecbdac:;
			{
				return (*this)._method_conditional(_66425_st.operator jule::Ptr<_1ce68353c_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68397c_InfIter>>()) {
			_case_begin_1b8ecbe23:;
			{
				return (*this)._method_inf_iter(_66425_st.operator jule::Ptr<_1ce68397c_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce683dbc_WhileIter>>()) {
			_case_begin_1b8ecc110:;
			{
				return (*this)._method_while_iter(_66425_st.operator jule::Ptr<_1ce683dbc_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68430c_RangeIter>>()) {
			_case_begin_1b8ecc176:;
			{
				return (*this)._method_range_iter(_66425_st.operator jule::Ptr<_1ce68430c_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68474c_ContSt>>()) {
			_case_begin_1b8ecc1dc:;
			{
				return (*this)._method_cont(_66425_st.operator jule::Ptr<_1ce68474c_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6850cc_Label>>()) {
			_case_begin_1b8ecc253:;
			{
				return (*this)._method_label(_66425_st.operator jule::Ptr<_1ce6850cc_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68551c_GotoSt>>()) {
			_case_begin_1b8ecc2b9:;
			{
				return (*this)._method_goto_st(_66425_st.operator jule::Ptr<_1ce68551c_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68595c_Postfix>>()) {
			_case_begin_1b8ecc330:;
			{
				return (*this)._method_postfix(_66425_st.operator jule::Ptr<_1ce68595c_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce685d9c_Assign>>()) {
			_case_begin_1b8ecc396:;
			{
				return (*this)._method_assign(_66425_st.operator jule::Ptr<_1ce685d9c_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6862dc_MultiAssign>>()) {
			_case_begin_1b8ecc41d:;
			{
				return (*this)._method_multi_assign(_66425_st.operator jule::Ptr<_1ce6862dc_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68672c_Match>>()) {
			_case_begin_1b8ecc495:;
			{
				return (*this)._method_match_st(_66425_st.operator jule::Ptr<_1ce68672c_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6870ac_FallSt>>()) {
			_case_begin_1b8ecc51c:;
			{
				return (*this)._method_fall_st(_66425_st.operator jule::Ptr<_1ce6870ac_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce684b8c_BreakSt>>()) {
			_case_begin_1b8ecc594:;
			{
				return (*this)._method_break_st(_66425_st.operator jule::Ptr<_1ce684b8c_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6874ec_RetSt>>()) {
			_case_begin_1b8ecc61b:;
			{
				return (*this)._method_ret_st(_66425_st.operator jule::Ptr<_1ce6874ec_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589cb5a_PushToSliceExprModel>>()) {
			_case_begin_1b8ecc693:;
			{
				return (*((*((*this)._field_oc))._field_ec))._method_push_to_slice(_66425_st.operator jule::Ptr<_1b589cb5a_PushToSliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589d09a_MutSlicingExprModel>>()) {
			_case_begin_1b8ecc71a:;
			{
				return (*((*((*this)._field_oc))._field_ec))._method_mut_slicing(_66425_st.operator jule::Ptr<_1b589d09a_MutSlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589d595_StrInsertBeginExprModel>>()) {
			_case_begin_1b8ecc792:;
			{
				return (*((*((*this)._field_oc))._field_ec))._method_str_insert_begin(_66425_st.operator jule::Ptr<_1b589d595_StrInsertBeginExprModel>());
			}
		}
		else {
			_case_begin_1b8ecbae3:;
			{
				return jule::Str("<unimplemented_stmt>", 20);
			}
		}
		_match_end_1b8ecb890:;
	}
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_scope(jule::Ptr<_1ce62e86d_Scope> _71528_s) {
	jule::Str _71617_obj = jule::Str("{\n", 2);
	(*((*this)._field_oc))._method_add_indent();
	{
		auto &expr = (*(_71528_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_1b8eda4c5:;
		if (it != expr.end()) {
			jule::Any _1b8eda5b3_st = *it;
			{
				_71617_obj+=(*((*this)._field_oc))._method_indent();
				_71617_obj+=(*this)._method_st(_1b8eda5b3_st);
				_71617_obj+=jule::Str("\n", 1);
			}
			_iter_next_1b8eda4c5:;
			++it;
			goto _iter_begin_1b8eda4c5;
		}
		_iter_end_1b8eda4c5:;
	}
	(*((*this)._field_oc))._method_done_indent();
	_71617_obj+=(*((*this)._field_oc))._method_indent();
	_71617_obj+=jule::Str("}", 1);
	if ((*(_71528_s))._field_deferred) {
		_71617_obj=((jule::Str("__JULE_DEFER(", 13) + _71617_obj) + jule::Str(");", 2));
	}
	return _71617_obj;
}



inline jule::Str _1b57cc35e_ScopeCoder::_method_func_scope(jule::Ptr<_1e83d630e_FnIns> _73733_f) {
	jule::Str _73817_obj = (*this)._method_scope((*(_73733_f))._field_scope);
	if ((*((*(_73733_f))._field_decl))._field_exceptional && (*((*(_73733_f))._field_decl))._method_is_void()) {
		_73817_obj=(_73817_obj.slice(0LL,(_73817_obj.len() - 2LL)) + jule::Str(" return jule::VoidExceptional(); }", 34));
	}
	return _73817_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b57cc35e_ScopeCoder &_Src) {
	_Stream << "ScopeCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b57d05a4_ExprCoder> _1b57d05a4_ExprCoder::_static_method_new(jule::Ptr<_1b592255e_ObjectCoder>& _9124_oc) {
	return jule::new_struct<_1b57d05a4_ExprCoder>(new( std::nothrow ) _1b57d05a4_ExprCoder(_9124_oc));
}



inline jule::Str _1b57d05a4_ExprCoder::_method_string(jule::Ptr<_1ce4b898d_Const>& _9722_c) {
	jule::Str _9813_content = (*(_9722_c))._method_read_str();
	if ((_9813_content.len() == 0LL)) {
		return jule::Str("jule::Str()", 11);
	}
	jule::Slice<jule::U8> _10213_bytes = static_cast<jule::Slice<jule::U8>>(_9813_content);
	jule::Str _10313_len = _1ce27c510_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_10213_bytes.len())),10LL);
	jule::Str _10413_lit = _1b5859540_cstr_lit(_10213_bytes);
	return ((((jule::Str("jule::Str(", 10) + _10413_lit) + jule::Str(", ", 2)) + _10313_len) + jule::Str(")", 1));
}



inline jule::Str _1b57d05a4_ExprCoder::_method_boolean(jule::Ptr<_1ce4b898d_Const>& _10823_c) {
	return (((*(_10823_c))._method_read_bool()) ? (jule::Str("true", 4)) : (jule::Str("false", 5)));
}



inline jule::Str _1b57d05a4_ExprCoder::_method_nil_lit(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_ftoa_special_cases(jule::F64& _11634_x) {
	{
		
		if (_1ce401e8c_is_nan(_11634_x)) {
			_case_begin_1b8ee58a9:;
			{
				return jule::Str("NAN", 3);
			}
		}
		else if (_1ce40bd98_is_inf(_11634_x,1LL)) {
			_case_begin_1b8ee5997:;
			{
				return jule::Str("INFINITY", 8);
			}
		}
		else if (_1ce40bd98_is_inf(_11634_x,-1LL)) {
			_case_begin_1b8ee5a0d:;
			{
				return jule::Str("-INFINITY", 9);
			}
		}
		else {
			_case_begin_1b8ee5238:;
			{
				return jule::Str();
			}
		}
		_match_end_1b8ee516c:;
	}
}



inline jule::Str _1b57d05a4_ExprCoder::_method_float32(jule::Ptr<_1ce4b898d_Const>& _12923_c) {
	jule::F64 _13013_x = (*(_12923_c))._method_as_f64();
	jule::Str _13313_f = (*this)._method_ftoa_special_cases(_13013_x);
	if ((!(_13313_f.empty()))) {
		return _13313_f;
	}
	{
		
		if ((_13013_x == 340282346638528860000000000000000000000.0)) {
			_case_begin_1b8ee8879:;
			{
				return jule::Str("jule::MAX_F32", 13);
			}
		}
		else if ((_13013_x == -340282346638528860000000000000000000000.0)) {
			_case_begin_1b8ee86ae:;
			{
				return jule::Str("jule::MIN_F32", 13);
			}
		}
		else {
			_case_begin_1b8ee80b5:;
			{
				return (_1b585a112_ftoa(_13013_x,32LL) + jule::Str("f", 1));
			}
		}
		_match_end_1b8ee8060:;
	}
}



inline jule::Str _1b57d05a4_ExprCoder::_method_float64(jule::Ptr<_1ce4b898d_Const>& _14823_c) {
	jule::F64 _14913_x = (*(_14823_c))._method_as_f64();
	jule::Str _15213_f = (*this)._method_ftoa_special_cases(_14913_x);
	if ((!(_15213_f.empty()))) {
		return _15213_f;
	}
	{
		
		if ((_14913_x == jule::MAX_F64)) {
			_case_begin_1b8eeb926:;
			{
				return jule::Str("jule::MAX_F64", 13);
			}
		}
		else if ((_14913_x == jule::MIN_F64)) {
			_case_begin_1b8eebb24:;
			{
				return jule::Str("jule::MIN_F64", 13);
			}
		}
		else {
			_case_begin_1b8eeb063:;
			{
				return _1b585a112_ftoa(_14913_x,64LL);
			}
		}
		_match_end_1b8eeb00d:;
	}
}



inline jule::Str _1b57d05a4_ExprCoder::_method_constant(jule::Ptr<_1ce4b898d_Const> _16827_c,jule::Bool _16838_fx32) {
	{
		
		if ((*(_16827_c))._method_is_str()) {
			_case_begin_1b8eed373:;
			{
				return (*this)._method_string(_16827_c);
			}
		}
		else if ((*(_16827_c))._method_is_bool()) {
			_case_begin_1b8eed3d9:;
			{
				return (*this)._method_boolean(_16827_c);
			}
		}
		else if ((*(_16827_c))._method_is_f64()) {
			_case_begin_1b8eed450:;
			{
				{
					
					if (_16838_fx32) {
						_case_begin_1b900074e:;
						{
							return (*this)._method_float32(_16827_c);
						}
					}
					else {
						_case_begin_1b9000122:;
						{
							return (*this)._method_float64(_16827_c);
						}
					}
					_match_end_1b9000056:;
				}
			}
		}
		else if ((*(_16827_c))._method_is_i64()) {
			_case_begin_1b8eed4b6:;
			{
				return _1b5864c32_itoa(static_cast<jule::I64>((*(_16827_c))._method_read_i64()));
			}
		}
		else if ((*(_16827_c))._method_is_u64()) {
			_case_begin_1b8eed692:;
			{
				return _1b5829774_utoa(static_cast<jule::U64>((*(_16827_c))._method_read_u64()));
			}
		}
		else if ((*(_16827_c))._method_is_nil()) {
			_case_begin_1b8eed708:;
			{
				return (*this)._method_nil_lit();
			}
		}
		else {
			_case_begin_1b8eed20d:;
			{
				return jule::Str("<unimplemented_constant_expression>", 35);
			}
		}
		_match_end_1b8eed164:;
	}
}



inline jule::Str _1b57d05a4_ExprCoder::_method_div_by_zero_binary(_212ae5c02_Token& _19238_op,jule::Ptr<_1e83bdbcb_OperandExprModel>& _19254_l,jule::Ptr<_1e83bdbcb_OperandExprModel>& _19281_r) {
	jule::Str _19317_op_func = jule::Str();
	{
		auto &_match_expr{ _19238_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("/=", 2)) {
			_case_begin_1b9003e5b:;
			{
				_19317_op_func=jule::Str("div", 3);
			}
		}
		else if (_match_expr == jule::Str("%", 1) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_1b9003ec2:;
			{
				_19317_op_func=jule::Str("mod", 3);
			}
		}
		_match_end_1b9003e06:;
	}
	jule::Str _20317_obj = jule::Str("jule::", 6);
	_20317_obj+=_19317_op_func;
	_20317_obj+=jule::Str("(", 1);
	if ((!(_210ecc0b8_PRODUCTION))) {
		_20317_obj+=jule::Str("\"", 1);
		_20317_obj+=(*((*this)._field_oc))._method_loc_info(_19238_op);
		_20317_obj+=jule::Str("\",", 2);
	}
	_20317_obj+=(*this)._method_expr((*(_19254_l))._field_model);
	_20317_obj+=jule::Str(",", 1);
	_20317_obj+=(*this)._method_expr((*(_19281_r))._field_model);
	_20317_obj+=jule::Str(")", 1);
	return _20317_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_unsafe_binary(jule::Ptr<_1e83be3c4_BinopExprModel> _21836_m) {
	jule::Str _21917_obj = jule::Str("(", 1);
	_21917_obj+=(*this)._method_model((*((*(_21836_m))._field_left))._field_model);
	_21917_obj+=jule::Str(" ", 1);
	_21917_obj+=(*(_21836_m))._field_op._field_kind;
	_21917_obj+=jule::Str(" ", 1);
	_21917_obj+=(*this)._method_model((*((*(_21836_m))._field_right))._field_model);
	_21917_obj+=jule::Str(")", 1);
	return _21917_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_binary(jule::Ptr<_1e83be3c4_BinopExprModel> _22929_m) {
	{
		auto &_match_expr{ (*(_22929_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_1b900a946:;
			{
				if (((*((*((*(_22929_m))._field_left))._field_kind))._method_strct() == nullptr)) {
					return (*this)._method_div_by_zero_binary((*(_22929_m))._field_op,(*(_22929_m))._field_left,(*(_22929_m))._field_right);
				}
			}
		}
		_match_end_1b900a89c:;
	}
	return (*this)._method_unsafe_binary(_22929_m);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_var(jule::Ptr<_1ce6cecb4_Var> _24022_m) {
	if ((*(_24022_m))._field_cpp_linked) {
		jule::Ptr<_2129e3902_Directive> _24217_d = _1b592bac9_find_directive((*(_24022_m))._field_directives,jule::Str("namespace", 9));
		if ((_24217_d != nullptr)) {
			jule::Str _24425_obj = _1b57d0bc0_concat_all_parts((*(_24217_d))._field_args);
			_24425_obj+=jule::Str("::", 2);
			_24425_obj+=_1b58c4698_IdentCoder::_static_method_var(_24022_m);
			return _24425_obj;
		}
	}
	return _1b58c4698_IdentCoder::_static_method_var(_24022_m);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_structure(jule::Ptr<_1e83b1718_Struct> _25324_m) {
	return _1b592c437_TypeCoder::_static_method_structure(_25324_m);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_structure_ins(jule::Ptr<_1e83b84bc_StructIns> _25732_m) {
	return _1b592c437_TypeCoder::_static_method_structure_ins(_25732_m);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_unary(jule::Ptr<_1e83bebdd_UnaryExprModel> _26128_m) {
	{
		auto &_match_expr{ (*(_26128_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_1b90122aa:;
			{
				jule::Str _26421_obj = jule::Str("(~(", 3);
				_26421_obj+=(*this)._method_expr((*((*(_26128_m))._field_expr))._field_model);
				_26421_obj+=jule::Str("))", 2);
				return _26421_obj;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b9012321:;
			{
				if (_210ecc0b8_PRODUCTION || ((*((*((*(_26128_m))._field_expr))._field_kind))._method_sptr() == nullptr)) {
					goto _match_end_1b9012211;
				}
				jule::Str _27221_obj = (*this)._method_expr((*((*(_26128_m))._field_expr))._field_model);
				_27221_obj+=jule::Str(".get(\"", 6);
				_27221_obj+=(*((*this)._field_oc))._method_loc_info((*(_26128_m))._field_op);
				_27221_obj+=jule::Str("\")", 2);
				return _27221_obj;
			}
		}
		_match_end_1b9012211:;
	}
	jule::Str _27917_obj = jule::Str("(", 1);
	_27917_obj+=(*(_26128_m))._field_op._field_kind;
	_27917_obj+=jule::Str("(", 1);
	_27917_obj+=(*this)._method_expr((*((*(_26128_m))._field_expr))._field_model);
	_27917_obj+=jule::Str("))", 2);
	return _27917_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_cpp_structure_lit(jule::Ptr<_1e83c0bbc_StructLitExprModel> _28740_m) {
	jule::Str _28817_obj = jule::Str("(", 1) + _1b592c437_TypeCoder::_static_method_structure_ins((*(_28740_m))._field_strct);
	_28817_obj+=jule::Str("){", 2);
	if (((*(_28740_m))._field_args.len() > 0LL)) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_28740_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b9018910:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b9018954_f = *it;
				{
					if ((*((*((*(_28740_m))._field_strct))._field_decl))._field_cpp_linked) {
						{
							auto &expr = (*(_28740_m))._field_args;
							auto it = expr.begin();
							_iter_begin_1b90195e2:;
							if (it != expr.end()) {
								jule::Ptr<_1e83c044c_StructArgExprModel> _1b901967a_arg = *it;
								{
									if ((*(_1b901967a_arg))._field_field == _1b9018954_f) {
										_28817_obj+=jule::Str(".", 1);
										_28817_obj+=_1b58c4698_IdentCoder::_static_method_field((*(_1b9018954_f))._field_decl);
										_28817_obj+=jule::Str("=", 1);
										_28817_obj+=(*this)._method_expr((*(_1b901967a_arg))._field_expr);
										_28817_obj+=jule::Str(",", 1);
										goto _iter_next_1b9018910;
									}
								}
								_iter_next_1b90195e2:;
								++it;
								goto _iter_begin_1b90195e2;
							}
							_iter_end_1b90195e2:;
						}
						goto _iter_next_1b9018910;
					}
					_28817_obj+=_1b58c4698_IdentCoder::_static_method_field((*(_1b9018954_f))._field_decl);
					_28817_obj+=jule::Str(": ", 2);
					{
						auto &expr = (*(_28740_m))._field_args;
						auto it = expr.begin();
						_iter_begin_1b901c062:;
						if (it != expr.end()) {
							jule::Ptr<_1e83c044c_StructArgExprModel> _1b901c172_arg = *it;
							{
								if ((*(_1b901c172_arg))._field_field == _1b9018954_f) {
									_28817_obj+=(*this)._method_expr((*(_1b901c172_arg))._field_expr);
									_28817_obj+=jule::Str(",", 1);
									goto _iter_next_1b9018910;
								}
							}
							_iter_next_1b901c062:;
							++it;
							goto _iter_begin_1b901c062;
						}
						_iter_end_1b901c062:;
					}
					_28817_obj+=(*this)._method_init_expr((*(_1b9018954_f))._field_kind);
					_28817_obj+=jule::Str(",", 1);
				}
				_iter_next_1b9018910:;
				++it;
				goto _iter_begin_1b9018910;
			}
			_iter_end_1b9018910:;
		}
		(_28817_obj).mut_slice(0LL,_28817_obj.len() - 1LL);
	}
	_28817_obj+=jule::Str("}", 1);
	return _28817_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_structure_lit(jule::Ptr<_1e83c0bbc_StructLitExprModel> _32436_m) {
	if ((*((*((*(_32436_m))._field_strct))._field_decl))._field_cpp_linked) {
		return (*this)._method_cpp_structure_lit(_32436_m);
	}
	jule::Str _32917_obj = _1b58c4698_IdentCoder::_static_method_structure_ins((*(_32436_m))._field_strct);
	_32917_obj+=jule::Str("(", 1);
	if (((*(_32436_m))._field_args.len() > 0LL)) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_32436_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b90220de:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b9022133_f = *it;
				{
					{
						auto &expr = (*(_32436_m))._field_args;
						auto it = expr.begin();
						_iter_begin_1b9022892:;
						if (it != expr.end()) {
							jule::Ptr<_1e83c044c_StructArgExprModel> _1b902292a_arg = *it;
							{
								if ((*(_1b902292a_arg))._field_field == _1b9022133_f) {
									_32917_obj+=(*this)._method_expr((*(_1b902292a_arg))._field_expr);
									_32917_obj+=jule::Str(",", 1);
									goto _iter_next_1b90220de;
								}
							}
							_iter_next_1b9022892:;
							++it;
							goto _iter_begin_1b9022892;
						}
						_iter_end_1b9022892:;
					}
					_32917_obj+=(*this)._method_init_expr((*(_1b9022133_f))._field_kind);
					_32917_obj+=jule::Str(",", 1);
				}
				_iter_next_1b90220de:;
				++it;
				goto _iter_begin_1b90220de;
			}
			_iter_end_1b90220de:;
		}
		(_32917_obj).mut_slice(0LL,_32917_obj.len() - 1LL);
	}
	_32917_obj+=jule::Str(")", 1);
	return _32917_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_alloc_structure(jule::Ptr<_1e83c1393_AllocStructLitExprModel> _35038_m) {
	jule::Str _35117_obj = jule::Str("jule::new_struct", 16);
	if ((*((*((*((*(_35038_m))._field_lit))._field_strct))._field_decl))._method_has_ref_accessible()) {
		_35117_obj+=jule::Str("_ptr", 4);
	}
	_35117_obj+=jule::Str("<", 1);
	_35117_obj+=_1b58c4698_IdentCoder::_static_method_structure_ins((*((*(_35038_m))._field_lit))._field_strct);
	_35117_obj+=jule::Str(">(", 2);
	if ((!(_210ecc0b8_PRODUCTION))) {
		_35117_obj+=jule::Str("\"", 1);
		_35117_obj+=(*((*this)._field_oc))._method_loc_info((*((*(_35038_m))._field_lit))._field_token);
		_35117_obj+=jule::Str("\",", 2);
	}
	_35117_obj+=jule::Str("new( std::nothrow ) ", 20);
	_35117_obj+=(*this)._method_structure_lit((*(_35038_m))._field_lit);
	_35117_obj+=jule::Str(")", 1);
	return _35117_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_casting(jule::Ptr<_1e83c1aad_CastingExprModel> _36930_m) {
	jule::Str _37017_obj = jule::Str();
	{
		
		if (((*((*(_36930_m))._field_kind))._method_prim() != nullptr) && (*((*((*(_36930_m))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_1b902a290:;
			{
				_37017_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_36930_m))._field_kind);
				_37017_obj+=jule::Str("(", 1);
				_37017_obj+=(*this)._method_model((*(_36930_m))._field_expr);
				_37017_obj+=jule::Str(")", 1);
			}
		}
		else if (((*((*(_36930_m))._field_expr_kind))._method_ptr() != nullptr) || ((*((*(_36930_m))._field_kind))._method_ptr() != nullptr)) {
			_case_begin_1b902b747:;
			{
				_37017_obj+=jule::Str("((", 2);
				_37017_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_36930_m))._field_kind);
				_37017_obj+=jule::Str(")(", 2);
				_37017_obj+=(*this)._method_expr((*(_36930_m))._field_expr);
				_37017_obj+=jule::Str("))", 2);
			}
		}
		else if (((*((*(_36930_m))._field_expr_kind))._method_trt() != nullptr) || ((*((*(_36930_m))._field_expr_kind))._method_prim() != nullptr) && (*((*((*(_36930_m))._field_expr_kind))._method_prim()))._method_is_any()) {
			_case_begin_1b902b7ad:;
			{
				_37017_obj+=(*this)._method_model((*(_36930_m))._field_expr);
				_37017_obj+=jule::Str(".", 1);
				if (_210ecc0b8_PRODUCTION) {
					_37017_obj+=jule::Str("operator ", 9);
					_37017_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_36930_m))._field_kind);
					_37017_obj+=jule::Str("()", 2);
				} else {
					if (((*((*(_36930_m))._field_expr_kind))._method_trt() != nullptr) && ((*((*(_36930_m))._field_kind))._method_sptr() != nullptr)) {
						_37017_obj+=jule::Str("cast_ptr<", 9);
						_37017_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*((*(_36930_m))._field_kind))._method_sptr()))._field_elem);
					} else {
						_37017_obj+=jule::Str("cast<", 5);
						_37017_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_36930_m))._field_kind);
					}
					_37017_obj+=jule::Str(">(\"", 3);
					_37017_obj+=(*((*this)._field_oc))._method_loc_info((*(_36930_m))._field_token);
					_37017_obj+=jule::Str("\")", 2);
				}
			}
		}
		else {
			_case_begin_1b9029de9:;
			{
				_37017_obj+=jule::Str("static_cast<", 12);
				_37017_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_36930_m))._field_kind);
				_37017_obj+=jule::Str(">(", 2);
				_37017_obj+=(*this)._method_expr((*(_36930_m))._field_expr);
				_37017_obj+=jule::Str(")", 1);
			}
		}
		_match_end_1b9029d72:;
	}
	return _37017_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_args(jule::Slice<jule::Any> _41427_args) {
	if ((_41427_args.len() == 0LL)) {
		return jule::Str();
	}
	jule::Str _41817_obj = jule::Str();
	{
		auto &expr = _41427_args;
		auto it = expr.begin();
		_iter_begin_1b9037566:;
		if (it != expr.end()) {
			jule::Any _1b90375bb_a = *it;
			{
				_41817_obj+=(*this)._method_expr(_1b90375bb_a);
				_41817_obj+=jule::Str(",", 1);
			}
			_iter_next_1b9037566:;
			++it;
			goto _iter_begin_1b9037566;
		}
		_iter_end_1b9037566:;
	}
	(_41817_obj).mut_slice(0LL,_41817_obj.len() - 1LL);
	return _41817_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_model_for_call(jule::Any _42737_expr) {
	{
		auto &_match_expr{ _42737_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1e83d630e_FnIns>>()) {
			_case_begin_1b9038d92:;
			{
				return (*this)._method_func_ins(_42737_expr.operator jule::Ptr<_1e83d630e_FnIns>());
			}
		}
		else {
			_case_begin_1b9038e6e:;
			{
				return (*this)._method_model(_42737_expr);
			}
		}
		_match_end_1b9038e19:;
	}
}



inline void _1b57d05a4_ExprCoder::_method_push_call_inf(jule::Str& _43637_obj,jule::Ptr<_1e83c2581_FnCallExprModel>& _43648_m) {
	if (_210ecc0b8_PRODUCTION || ((!((*((*(_43648_m))._field_func))._field_anon)) && (!(_1b582a797_is_builtin_call_has_debuginf(_43648_m))))) {
		_43637_obj+=jule::Str("(", 1);
		return;
	}
	if ((*((*(_43648_m))._field_func))._field_anon) {
		{
			auto &_match_expr{ (*(_43648_m))._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_1e83c6d16_StructSubIdentExprModel>>()) {
				_case_begin_1b903c181:;
				{
					if ((*((*((*((*((*(_43648_m))._field_expr.operator jule::Ptr<_1e83c6d16_StructSubIdentExprModel>()))._field_field))._field_decl))._field_owner))._field_cpp_linked) {
						_43637_obj+=jule::Str("(", 1);
						return;
					}
					goto _case_begin_1b903c44a;
				}
			}
			else {
				_case_begin_1b903c44a:;
				{
					_43637_obj+=jule::Str(".call", 5);
				}
			}
			_match_end_1b903c3b2:;
		}
	}
	_43637_obj+=jule::Str("(\"", 2);
	_43637_obj+=(*((*this)._field_oc))._method_loc_info((*(_43648_m))._field_token);
	_43637_obj+=jule::Str("\"", 1);
	if (((*(_43648_m))._field_args.len() != 0LL)) {
		_43637_obj+=jule::Str(",", 1);
	}
}



inline jule::Str _1b57d05a4_ExprCoder::_method_pure_func_call(jule::Ptr<_1e83c2581_FnCallExprModel>& _46138_m) {
	jule::Str _46217_obj = (*this)._method_model_for_call((*(_46138_m))._field_expr);
	if ((!((*((*(_46138_m))._field_func))._method_is_builtin()))) {
		if ((*((*((*(_46138_m))._field_func))._field_decl))._field_cpp_linked && ((*((*(_46138_m))._field_func))._field_generics.len() > 0LL)) {
			if ((!(_1b592c0d5_has_directive((*((*((*(_46138_m))._field_func))._field_decl))._field_directives,jule::Str("cdef", 4))))) {
				_46217_obj+=jule::Str("<", 1);
				{
					auto &expr = (*((*(_46138_m))._field_func))._field_generics;
					auto it = expr.begin();
					_iter_begin_1b9042230:;
					if (it != expr.end()) {
						jule::Ptr<_1ce76121e_TypeKind> _1b9042274_g = *it;
						{
							_46217_obj+=_1b592c437_TypeCoder::_static_method_kind(_1b9042274_g);
							_46217_obj+=jule::Str(",", 1);
						}
						_iter_next_1b9042230:;
						++it;
						goto _iter_begin_1b9042230;
					}
					_iter_end_1b9042230:;
				}
				(_46217_obj).mut_slice(0LL,_46217_obj.len() - 1LL);
				_46217_obj+=jule::Str(">", 1);
			}
		}
	}
	(*this)._method_push_call_inf(_46217_obj,_46138_m);
	_46217_obj+=(*this)._method_args((*(_46138_m))._field_args);
	_46217_obj+=jule::Str(")", 1);
	if ((*(_46138_m))._field_is_co) {
		(_46217_obj).buffer.insert(0, (jule::Str("__JULE_CO(", 10)));
		_46217_obj+=jule::Str(")", 1);
	}
	return _46217_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_func_call(jule::Ptr<_1e83c2581_FnCallExprModel> _48832_m) {
	if (((*((*(_48832_m))._field_func))._method_is_builtin() || (!((*((*((*(_48832_m))._field_func))._field_decl))._field_exceptional))) || (((*(_48832_m))._field_except != nullptr) && ((*((*(_48832_m))._field_except))._field_stmts.len() == 0LL))) {
		return (*this)._method_pure_func_call(_48832_m);
	}
	jule::Str _49617_obj = jule::Str("({\n", 3);
	(*((*this)._field_oc))._method_add_indent();
	_49617_obj+=(*((*this)._field_oc))._method_indent();
	_49617_obj+=jule::Str("auto except = ", 14);
	_49617_obj+=(*this)._method_pure_func_call(_48832_m);
	_49617_obj+=jule::Str(";\n", 2);
	_49617_obj+=(*((*this)._field_oc))._method_indent();
	if (((*(_48832_m))._field_except != nullptr)) {
		if (((*((*(_48832_m))._field_func))._field_result == nullptr) || (!((*(_48832_m))._field_assigned))) {
			_49617_obj+=jule::Str("if (!except.ok()) ", 18);
			_49617_obj+=(*((*((*this)._field_oc))._field_sc))._method_scope((*(_48832_m))._field_except);
			_49617_obj+=jule::Str("\n", 1);
		} else {
			jule::Bool _50921_forwarded = _1b5886946_is_forwarded((*(_48832_m))._field_except);
			_49617_obj+=jule::Str("(except.ok()) ? (except.result) : (", 35);
			if (_50921_forwarded) {
				_49617_obj+=jule::Str("{", 1);
			}
			_49617_obj+=(*((*((*this)._field_oc))._field_sc))._method_scope((*(_48832_m))._field_except);
			if (_50921_forwarded) {
				_49617_obj+=jule::Str(" ", 1);
				_49617_obj+=(*this)._method_init_expr((*((*(_48832_m))._field_func))._field_result);
				_49617_obj+=jule::Str(";}", 2);
			}
			_49617_obj+=jule::Str(");\n", 3);
		}
		(*((*this)._field_oc))._method_done_indent();
	} else {
		_49617_obj+=jule::Str("if (!except.ok()) jule::panic(jule::Str(\"", 41);
		_49617_obj+=jule::Str("unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 98);
		_49617_obj+=(*((*this)._field_oc))._method_loc_info((*(_48832_m))._field_token);
		_49617_obj+=jule::Str("\"));\n", 5);
		if ((!((*((*((*(_48832_m))._field_func))._field_decl))._method_is_void()))) {
			_49617_obj+=(*((*this)._field_oc))._method_indent();
			_49617_obj+=jule::Str("(except.result);\n", 17);
		}
		(*((*this)._field_oc))._method_done_indent();
	}
	_49617_obj+=(*((*this)._field_oc))._method_indent();
	_49617_obj+=jule::Str("})", 2);
	return _49617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_slice(jule::Ptr<_1e83c31b9_SliceExprModel> _54028_m) {
	if (((*(_54028_m))._field_elems.len() == 0LL)) {
		return (_1b592c437_TypeCoder::_static_method_as_slice((*(_54028_m))._field_elem_kind) + jule::Str("()", 2));
	}
	jule::Str _54417_obj = _1b592c437_TypeCoder::_static_method_as_slice((*(_54028_m))._field_elem_kind);
	_54417_obj+=jule::Str("({", 2);
	_54417_obj+=(*this)._method_args((*(_54028_m))._field_elems);
	_54417_obj+=jule::Str("})", 2);
	return _54417_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_indexing(jule::Ptr<_1e83c3928_IndexingExprModel> _55131_m) {
	jule::Str _55217_obj = (*this)._method_model((*((*(_55131_m))._field_expr))._field_model);
	{
		
		if (_210ecc0b8_PRODUCTION || ((*((*((*(_55131_m))._field_expr))._field_kind))._method_ptr() != nullptr) || ((*((*((*(_55131_m))._field_expr))._field_kind))._method_map() != nullptr)) {
			_case_begin_1b9056321:;
			{
				_55217_obj+=jule::Str("[", 1);
				_55217_obj+=(*this)._method_expr((*((*(_55131_m))._field_index))._field_model);
				_55217_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_1b9055e7a:;
			{
				_55217_obj+=jule::Str(".at(\"", 5);
				_55217_obj+=(*((*this)._field_oc))._method_loc_info((*(_55131_m))._field_token);
				_55217_obj+=jule::Str("\",", 2);
				_55217_obj+=(*this)._method_expr((*((*(_55131_m))._field_index))._field_model);
				_55217_obj+=jule::Str(")", 1);
			}
		}
		_match_end_1b9055e03:;
	}
	return _55217_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_unsafe_indexing(jule::Ptr<_1b589c71a_UnsafeIndexingExprModel> _57138_m) {
	jule::Str _57217_obj = (*this)._method_model((*((*((*(_57138_m))._field_node))._field_expr))._field_model);
	{
		
		if (_210ecc0b8_PRODUCTION || ((*((*((*((*(_57138_m))._field_node))._field_expr))._field_kind))._method_ptr() != nullptr) || ((*((*((*((*(_57138_m))._field_node))._field_expr))._field_kind))._method_map() != nullptr)) {
			_case_begin_1b905ae3b:;
			{
				_57217_obj+=jule::Str("[", 1);
				_57217_obj+=(*this)._method_expr((*((*((*(_57138_m))._field_node))._field_index))._field_model);
				_57217_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_1b905aa95:;
			{
				_57217_obj+=jule::Str(".__at(", 6);
				_57217_obj+=(*this)._method_expr((*((*((*(_57138_m))._field_node))._field_index))._field_model);
				_57217_obj+=jule::Str(")", 1);
			}
		}
		_match_end_1b905aa1d:;
	}
	return _57217_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_anon_func(jule::Ptr<_1e83c4220_AnonFnExprModel> _58932_m) {
	jule::Str _59017_obj = _1b592c437_TypeCoder::_static_method_func((*(_58932_m))._field_func);
	_59017_obj+=jule::Str("([=]", 4);
	_59017_obj+=(*((*this)._field_oc))._method_params_ins((*((*(_58932_m))._field_func))._field_params);
	_59017_obj+=jule::Str(" mutable -> ", 12);
	_59017_obj+=_1b592c437_TypeCoder::_static_method_func_ins_result((*(_58932_m))._field_func);
	_59017_obj+=jule::Str(" ", 1);
	_59017_obj+=(*((*((*this)._field_oc))._field_sc))._method_func_scope((*(_58932_m))._field_func);
	_59017_obj+=jule::Str(")", 1);
	return _59017_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_map(jule::Ptr<_1e83c5056_MapExprModel> _60126_m) {
	jule::Str _60217_obj = jule::Str("jule::Map<", 10);
	_60217_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_60126_m))._field_key_kind);
	_60217_obj+=jule::Str(",", 1);
	_60217_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_60126_m))._field_val_kind);
	_60217_obj+=jule::Str(">({", 3);
	if (((*(_60126_m))._field_entries.len() > 0LL)) {
		{
			auto &expr = (*(_60126_m))._field_entries;
			auto it = expr.begin();
			_iter_begin_1b9065297:;
			if (it != expr.end()) {
				jule::Ptr<_1e83c4880_KeyValPairExprModel> _1b9065330_pair = *it;
				{
					jule::Str _60925_pair_obj = jule::Str("{", 1);
					_60925_pair_obj+=(*this)._method_expr((*(_1b9065330_pair))._field_key);
					_60925_pair_obj+=jule::Str(",", 1);
					_60925_pair_obj+=(*this)._method_expr((*(_1b9065330_pair))._field_val);
					_60925_pair_obj+=jule::Str("}", 1);
					_60217_obj+=_60925_pair_obj;
					_60217_obj+=jule::Str(",", 1);
				}
				_iter_next_1b9065297:;
				++it;
				goto _iter_begin_1b9065297;
			}
			_iter_end_1b9065297:;
		}
		(_60217_obj).mut_slice(0LL,_60217_obj.len() - 1LL);
	}
	_60217_obj+=jule::Str("})", 2);
	return _60217_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_slicing(jule::Ptr<_1e83c585e_SlicingExprModel> _62330_m) {
	jule::Str _62417_obj = (*this)._method_model((*(_62330_m))._field_expr);
	_62417_obj+=jule::Str(".slice(", 7);
	if ((!(_210ecc0b8_PRODUCTION))) {
		_62417_obj+=jule::Str("\"", 1);
		_62417_obj+=(*((*this)._field_oc))._method_loc_info((*(_62330_m))._field_token);
		_62417_obj+=jule::Str("\",", 2);
	}
	_62417_obj+=(*this)._method_expr((*(_62330_m))._field_left);
	if ((*(_62330_m))._field_right != jule::Any(nullptr)) {
		_62417_obj+=jule::Str(",", 1);
		_62417_obj+=(*this)._method_expr((*(_62330_m))._field_right);
	}
	_62417_obj+=jule::Str(")", 1);
	return _62417_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_trait_sub(jule::Ptr<_1e83c62cc_TraitSubIdentExprModel> _64032_m) {
	jule::Str _64117_obj = (*this)._method_model((*(_64032_m))._field_expr);
	_64117_obj+=jule::Str(".get(", 5);
	if ((!(_210ecc0b8_PRODUCTION))) {
		_64117_obj+=jule::Str("\"", 1);
		_64117_obj+=(*((*this)._field_oc))._method_loc_info((*(_64032_m))._field_token);
		_64117_obj+=jule::Str("\"", 1);
	}
	_64117_obj+=jule::Str(")._method_", 10);
	_64117_obj+=(*(_64032_m))._field_ident;
	return _64117_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_structure_sub(jule::Ptr<_1e83c6d16_StructSubIdentExprModel> _65336_m) {
	jule::Str _65417_obj = (*this)._method_model((*(_65336_m))._field_expr);
	_65417_obj+=jule::Str(".", 1);
	if (((*(_65336_m))._field_field != nullptr)) {
		_65417_obj+=_1b58c4698_IdentCoder::_static_method_field((*((*(_65336_m))._field_field))._field_decl);
	} else {
		_65417_obj+=_1b58c4698_IdentCoder::_static_method_func_ins((*(_65336_m))._field_method);
	}
	return _65417_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_common_ident(jule::Ptr<_1e83c87c9_CommonIdentExprModel> _66427_m) {
	return (*(_66427_m))._field_ident;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_common_sub(jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel> _66833_m) {
	jule::Str _66917_obj = (*this)._method_model((*(_66833_m))._field_expr);
	_66917_obj+=jule::Str(".", 1);
	_66917_obj+=(*(_66833_m))._field_ident;
	return _66917_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_array(jule::Ptr<_1e83c8004_ArrayExprModel> _67528_m) {
	jule::Str _67617_obj = _1b592c437_TypeCoder::_static_method_array((*(_67528_m))._field_kind);
	if (((*(_67528_m))._field_elems.len() == 0LL)) {
		_67617_obj+=jule::Str("()", 2);
		return _67617_obj;
	}
	if (((*(_67528_m))._field_elems.len() == 2LL) && ((*(_67528_m))._field_elems[1LL] == jule::Any(nullptr))) {
		_67617_obj+=jule::Str("(", 1);
		_67617_obj+=(*this)._method_expr((*(_67528_m))._field_elems[0LL]);
		_67617_obj+=jule::Str(")", 1);
		return _67617_obj;
	}
	_67617_obj+=jule::Str("({", 2);
	_67617_obj+=(*this)._method_args((*(_67528_m))._field_elems);
	_67617_obj+=jule::Str("})", 2);
	return _67617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_func_ins_common(jule::Ptr<_1e83d630e_FnIns> _69834_m) {
	jule::Str _69917_obj = _1b592c437_TypeCoder::_static_method_func(_69834_m);
	_69917_obj+=jule::Str("(", 1);
	_69917_obj+=(*this)._method_func_ins(_69834_m);
	_69917_obj+=jule::Str(")", 1);
	return _69917_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_func_ins(jule::Ptr<_1e83d630e_FnIns> _70727_m) {
	if (((*(_70727_m))._field_decl != nullptr) && (*((*(_70727_m))._field_decl))._field_cpp_linked) {
		jule::Ptr<_2129e3902_Directive> _70917_d = _1b592bac9_find_directive((*((*(_70727_m))._field_decl))._field_directives,jule::Str("namespace", 9));
		if ((_70917_d != nullptr)) {
			jule::Str _71125_obj = _1b57d0bc0_concat_all_parts((*(_70917_d))._field_args);
			_71125_obj+=jule::Str("::", 2);
			_71125_obj+=_1b58c4698_IdentCoder::_static_method_func_ins(_70727_m);
			return _71125_obj;
		}
	}
	return _1b58c4698_IdentCoder::_static_method_func_ins(_70727_m);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_tuple(jule::Ptr<_1e83c95aa_TupleExprModel> _72028_m) {
	jule::Str _72117_obj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = (*(_72028_m))._field_datas;
		auto it = expr.begin();
		_iter_begin_1b907c7dc:;
		if (it != expr.end()) {
			jule::Ptr<_1ce727449_Data> _1b907c875_d = *it;
			{
				_72117_obj+=(*this)._method_expr((*(_1b907c875_d))._field_model);
				_72117_obj+=jule::Str(",", 1);
			}
			_iter_next_1b907c7dc:;
			++it;
			goto _iter_begin_1b907c7dc;
		}
		_iter_end_1b907c7dc:;
	}
	(_72117_obj).mut_slice(0LL,_72117_obj.len() - 1LL);
	_72117_obj+=jule::Str(")", 1);
	return _72117_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_new_call(jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel> _73131_m) {
	jule::Str _73217_obj = jule::Str("jule::new_ptr<", 14);
	_73217_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_73131_m))._field_kind);
	_73217_obj+=jule::Str(">(", 2);
	if ((*(_73131_m))._field_init != jule::Any(nullptr)) {
		_73217_obj+=(*this)._method_expr((*(_73131_m))._field_init);
	}
	_73217_obj+=jule::Str(")", 1);
	return _73217_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_out_call(jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel> _74231_m) {
	if ((*(_74231_m))._field_debug && _210ecc0b8_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _74617_obj = jule::Str("jule::out(", 10);
	_74617_obj+=(*this)._method_expr((*(_74231_m))._field_expr);
	_74617_obj+=jule::Str(")", 1);
	return _74617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_outln_call(jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel> _75233_m) {
	if ((*(_75233_m))._field_debug && _210ecc0b8_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _75617_obj = jule::Str("jule::outln(", 12);
	_75617_obj+=(*this)._method_expr((*(_75233_m))._field_expr);
	_75617_obj+=jule::Str(")", 1);
	return _75617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_panic_call(jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel> _76233_m) {
	jule::Str _76317_obj = jule::Str("jule::panic(", 12);
	_76317_obj+=(*this)._method_expr((*(_76233_m))._field_expr);
	_76317_obj+=jule::Str(" + jule::Str(\"\\nlocation: ", 26);
	_76317_obj+=(*((*this)._field_oc))._method_loc_info((*(_76233_m))._field_token);
	_76317_obj+=jule::Str("\"));", 4);
	return _76317_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_assert_call(jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel> _77134_m) {
	if (_210ecc0b8_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _77517_obj = jule::Str("if (!(", 6);
	_77517_obj+=(*this)._method_expr((*(_77134_m))._field_expr);
	_77517_obj+=jule::Str(")) jule::panic(jule::Str(", 25);
	_77517_obj+=_1b5859540_cstr_lit(static_cast<jule::Slice<jule::U8>>((*(_77134_m))._field_log));
	_77517_obj+=jule::Str(") + jule::Str(\"\\nlocation: ", 27);
	_77517_obj+=(*((*this)._field_oc))._method_loc_info((*(_77134_m))._field_token);
	_77517_obj+=jule::Str("\"));", 4);
	return _77517_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_error_call(jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel> _78533_m) {
	jule::Str _78617_obj = jule::Str("return ", 7);
	if ((*((*((*(_78533_m))._field_func))._field_decl))._method_is_void()) {
		_78617_obj+=jule::Str("jule::VoidExceptional(", 22);
	} else {
		_78617_obj+=jule::Str("jule::Exceptional<", 18);
		_78617_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_78533_m))._field_func))._field_result);
		_78617_obj+=jule::Str(">(", 2);
	}
	_78617_obj+=(*this)._method_expr((*(_78533_m))._field_err);
	_78617_obj+=jule::Str(")", 1);
	return _78617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_make_call(jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel> _79932_m) {
	jule::Str _80017_obj = jule::Str();
	if ((*(_79932_m))._field_len != jule::Any(nullptr)) {
		_80017_obj+=(*this)._method_expr((*(_79932_m))._field_len);
	} else {
		_80017_obj+=jule::Str("0", 1);
	}
	if ((*(_79932_m))._field_cap != jule::Any(nullptr)) {
		_80017_obj+=jule::Str(",", 1) + (*this)._method_expr((*(_79932_m))._field_cap);
	}
	if (((*((*((*((*(_79932_m))._field_kind))._method_slc()))._field_elem))._method_enm() != nullptr)) {
		_80017_obj+=jule::Str(",", 1);
		_80017_obj+=(*this)._method_init_expr((*((*((*(_79932_m))._field_kind))._method_slc()))._field_elem);
		if ((*(_79932_m))._field_cap != jule::Any(nullptr)) {
			(_80017_obj).buffer.insert(0, ((_1b592c437_TypeCoder::_static_method_kind((*(_79932_m))._field_kind) + jule::Str("::alloc(", 8))));
		} else {
			(_80017_obj).buffer.insert(0, ((_1b592c437_TypeCoder::_static_method_kind((*(_79932_m))._field_kind) + jule::Str("::alloc_def(", 12))));
		}
	} else {
		(_80017_obj).buffer.insert(0, ((_1b592c437_TypeCoder::_static_method_kind((*(_79932_m))._field_kind) + jule::Str("::alloc(", 8))));
	}
	_80017_obj+=jule::Str(")", 1);
	return _80017_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_push_to_slice(jule::Ptr<_1b589cb5a_PushToSliceExprModel> _82636_m) {
	jule::Str _82713_dest = (*this)._method_model((*(_82636_m))._field_dest);
	jule::Str _82817_obj = _82713_dest;
	_82817_obj+=jule::Str(" = jule::alloc_for_append(", 26);
	_82817_obj+=_82713_dest;
	_82817_obj+=jule::Str(",", 1);
	_82817_obj+=_1cde2b4ab_itoa(static_cast<jule::I64>((*((*(_82636_m))._field_elems))._field_elems.len()));
	_82817_obj+=jule::Str(");", 2);
	{
		auto &expr = (*((*(_82636_m))._field_elems))._field_elems;
		auto it = expr.begin();
		_iter_begin_1b9095d00:;
		if (it != expr.end()) {
			jule::Any _1b9095d44_e = *it;
			{
				_82817_obj+=_82713_dest;
				_82817_obj+=jule::Str(".__push(", 8);
				_82817_obj+=(*this)._method_model(_1b9095d44_e);
				_82817_obj+=jule::Str(");", 2);
			}
			_iter_next_1b9095d00:;
			++it;
			goto _iter_begin_1b9095d00;
		}
		_iter_end_1b9095d00:;
	}
	return _82817_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_append_call(jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel> _84434_m) {
	jule::Str _84517_obj = jule::Str("jule::append(", 13);
	_84517_obj+=(*this)._method_model((*(_84434_m))._field_dest);
	_84517_obj+=jule::Str(",", 1);
	_84517_obj+=(*this)._method_model((*(_84434_m))._field_elements);
	_84517_obj+=jule::Str(")", 1);
	return _84517_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_clone_call(jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel> _85333_m) {
	jule::Str _85417_obj = jule::Str("jule::clone(", 12);
	_85417_obj+=(*this)._method_model((*(_85333_m))._field_expr);
	_85417_obj+=jule::Str(")", 1);
	return _85417_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_sizeof(jule::Ptr<_1e83ce22a_SizeofExprModel> _86029_m) {
	jule::Str _86117_obj = jule::Str("sizeof(", 7);
	_86117_obj+=(*this)._method_expr((*(_86029_m))._field_expr);
	_86117_obj+=jule::Str(")", 1);
	return _86117_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_alignof(jule::Ptr<_1e83cec97_AlignofExprModel> _86730_m) {
	jule::Str _86817_obj = jule::Str("alignof(", 8);
	_86817_obj+=(*this)._method_expr((*(_86730_m))._field_expr);
	_86817_obj+=jule::Str(")", 1);
	return _86817_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_rune_lit(jule::Ptr<_1e83d01d7_RuneExprModel> _87423_m) {
	if (((*(_87423_m))._field_code <= 127LL)) {
		jule::Str _87621_b = _1b5846917_sbtoa(static_cast<jule::U8>(static_cast<jule::U8>((*(_87423_m))._field_code)));
		if ((_87621_b == jule::Str("'", 1))) {
			_87621_b=jule::Str("\\'", 2);
		}
		return ((jule::Str("'", 1) + _87621_b) + jule::Str("'", 1));
	}
	return _1b5864c32_itoa(static_cast<jule::I64>(static_cast<jule::I64>((*(_87423_m))._field_code)));
}



inline jule::Str _1b57d05a4_ExprCoder::_method_structure_static(jule::Ptr<_1e83c76a7_StructStaticIdentExprModel> _88535_m) {
	jule::Str _88617_obj = _1b58c4698_IdentCoder::_static_method_structure_ins((*(_88535_m))._field_structure);
	_88617_obj+=jule::Str("::", 2);
	_88617_obj+=_1b58c4698_IdentCoder::_static_method_func_ins((*(_88535_m))._field_method);
	return _88617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_integrated_to_str(jule::Ptr<_1e83d0726_IntegratedToStrExprModel> _89240_m) {
	jule::Str _89317_obj = jule::Str("jule::to_str(", 13);
	_89317_obj+=(*this)._method_model((*(_89240_m))._field_expr);
	_89317_obj+=jule::Str(")", 1);
	return _89317_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_ternary(jule::Ptr<_1e83d0d53_TernaryExprModel> _89930_m) {
	jule::Str _90017_obj = jule::Str("((", 2);
	_90017_obj+=(*this)._method_model((*(_89930_m))._field_condition);
	_90017_obj+=jule::Str(") ? (", 5);
	_90017_obj+=(*this)._method_model((*(_89930_m))._field_true_expr);
	_90017_obj+=jule::Str(") : (", 5);
	_90017_obj+=(*this)._method_model((*(_89930_m))._field_false_expr);
	_90017_obj+=jule::Str("))", 2);
	return _90017_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_backend_emit(jule::Ptr<_1e83d15c3_BackendEmitExprModel> _91035_m) {
	if (((*(_91035_m))._field_exprs.len() == 0LL)) {
		return (*(_91035_m))._field_code;
	}
	{
		auto &expr = (*(_91035_m))._field_exprs;
		auto it = expr.begin();
		_iter_begin_1b90a7163:;
		if (it != expr.end()) {
			jule::I64 _1b90a7262_i = it - expr.begin();
			jule::Any _1b90a740a_expr = *it;
			{
				(*(_91035_m))._field_exprs[_1b90a7262_i]=jule::Any((*this)._method_expr(_1b90a740a_expr));
			}
			_iter_next_1b90a7163:;
			++it;
			_1b90a7262_i++;
			goto _iter_begin_1b90a7163;
		}
		_iter_end_1b90a7163:;
	}
	return _1b54b00ec_format((*(_91035_m))._field_code,(*(_91035_m))._field_exprs);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_free(jule::Ptr<_1e83d1cbb_FreeExprModel> _92027_m) {
	if (_21106367c_RC) {
		return ((*this)._method_expr((*(_92027_m))._field_expr) + jule::Str(".dealloc()", 10));
	}
	return ((*this)._method_expr((*(_92027_m))._field_expr) + jule::Str(".__free()", 9));
}



inline jule::Str _1b57d05a4_ExprCoder::_method_mut_slicing(jule::Ptr<_1b589d09a_MutSlicingExprModel> _92734_m) {
	jule::Str _92817_obj = jule::Str("(", 1);
	_92817_obj+=(*this)._method_model((*(_92734_m))._field_expr);
	_92817_obj+=jule::Str(").mut_slice(", 12);
	if ((!(_210ecc0b8_PRODUCTION))) {
		_92817_obj+=jule::Str("\"", 1);
		_92817_obj+=(*((*this)._field_oc))._method_loc_info((*(_92734_m))._field_token);
		_92817_obj+=jule::Str("\",", 2);
	}
	_92817_obj+=(*this)._method_expr((*(_92734_m))._field_left);
	if ((*(_92734_m))._field_right != jule::Any(nullptr)) {
		_92817_obj+=jule::Str(",", 1);
		_92817_obj+=(*this)._method_expr((*(_92734_m))._field_right);
	}
	_92817_obj+=jule::Str(");", 2);
	return _92817_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_str_insert_begin(jule::Ptr<_1b589d595_StrInsertBeginExprModel> _94539_m) {
	jule::Str _94617_obj = jule::Str("(", 1);
	_94617_obj+=(*this)._method_model((*(_94539_m))._field_dest);
	_94617_obj+=jule::Str(").buffer.insert(0, (", 20);
	_94617_obj+=(*this)._method_model((*(_94539_m))._field_expr);
	_94617_obj+=jule::Str("));", 3);
	return _94617_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_model(jule::Any _95428_m) {
	{
		auto &_match_expr{ _95428_m };
		
		if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b90b0314:;
			{
				return (*this)._method_model((*(_95428_m.operator jule::Ptr<_1ce727449_Data>()))._field_model);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce76121e_TypeKind>>()) {
			_case_begin_1b90b0be9:;
			{
				return _1b592c437_TypeCoder::_static_method_kind(_95428_m.operator jule::Ptr<_1ce76121e_TypeKind>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b90b08b9:;
			{
				return (*this)._method_constant(_95428_m.operator jule::Ptr<_1ce4b898d_Const>(),false);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b90b0930:;
			{
				return (*this)._method_var(_95428_m.operator jule::Ptr<_1ce6cecb4_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e85a7865_Trait>>()) {
			_case_begin_1b90b09da:;
			{
				return _1b58c4698_IdentCoder::_static_method_trait_decl(_95428_m.operator jule::Ptr<_1e85a7865_Trait>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b90b0a51:;
			{
				return (*this)._method_structure(_95428_m.operator jule::Ptr<_1e83b1718_Struct>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83b84bc_StructIns>>()) {
			_case_begin_1b90b0ab7:;
			{
				return (*this)._method_structure_ins(_95428_m.operator jule::Ptr<_1e83b84bc_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d630e_FnIns>>()) {
			_case_begin_1b90b06ee:;
			{
				return (*this)._method_func_ins_common(_95428_m.operator jule::Ptr<_1e83d630e_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589b63c_UnsafeBinopExprModel>>()) {
			_case_begin_1b90b0765:;
			{
				return (*this)._method_unsafe_binary((*(_95428_m.operator jule::Ptr<_1b589b63c_UnsafeBinopExprModel>()))._field_node);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83be3c4_BinopExprModel>>()) {
			_case_begin_1b90b07cb:;
			{
				return (*this)._method_binary(_95428_m.operator jule::Ptr<_1e83be3c4_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83bebdd_UnaryExprModel>>()) {
			_case_begin_1b90b0842:;
			{
				return (*this)._method_unary(_95428_m.operator jule::Ptr<_1e83bebdd_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c0bbc_StructLitExprModel>>()) {
			_case_begin_1b90b1106:;
			{
				return (*this)._method_structure_lit(_95428_m.operator jule::Ptr<_1e83c0bbc_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c1393_AllocStructLitExprModel>>()) {
			_case_begin_1b90b116c:;
			{
				return (*this)._method_alloc_structure(_95428_m.operator jule::Ptr<_1e83c1393_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c1aad_CastingExprModel>>()) {
			_case_begin_1b90b11d3:;
			{
				return (*this)._method_casting(_95428_m.operator jule::Ptr<_1e83c1aad_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>()) {
			_case_begin_1b90b1249:;
			{
				return (*this)._method_func_call(_95428_m.operator jule::Ptr<_1e83c2581_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c31b9_SliceExprModel>>()) {
			_case_begin_1b90b12b0:;
			{
				return (*this)._method_slice(_95428_m.operator jule::Ptr<_1e83c31b9_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c8004_ArrayExprModel>>()) {
			_case_begin_1b90b1337:;
			{
				return (*this)._method_array(_95428_m.operator jule::Ptr<_1e83c8004_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589c71a_UnsafeIndexingExprModel>>()) {
			_case_begin_1b90b13ae:;
			{
				return (*this)._method_unsafe_indexing(_95428_m.operator jule::Ptr<_1b589c71a_UnsafeIndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c3928_IndexingExprModel>>()) {
			_case_begin_1b90b1436:;
			{
				return (*this)._method_indexing(_95428_m.operator jule::Ptr<_1e83c3928_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c4220_AnonFnExprModel>>()) {
			_case_begin_1b90b14ad:;
			{
				return (*this)._method_anon_func(_95428_m.operator jule::Ptr<_1e83c4220_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c5056_MapExprModel>>()) {
			_case_begin_1b90b1535:;
			{
				return (*this)._method_map(_95428_m.operator jule::Ptr<_1e83c5056_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c585e_SlicingExprModel>>()) {
			_case_begin_1b90b15ac:;
			{
				return (*this)._method_slicing(_95428_m.operator jule::Ptr<_1e83c585e_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>>()) {
			_case_begin_1b90b1634:;
			{
				return (*this)._method_trait_sub(_95428_m.operator jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c6d16_StructSubIdentExprModel>>()) {
			_case_begin_1b90b16ab:;
			{
				return (*this)._method_structure_sub(_95428_m.operator jule::Ptr<_1e83c6d16_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c87c9_CommonIdentExprModel>>()) {
			_case_begin_1b90b1733:;
			{
				return (*this)._method_common_ident(_95428_m.operator jule::Ptr<_1e83c87c9_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>>()) {
			_case_begin_1b90b17aa:;
			{
				return (*this)._method_common_sub(_95428_m.operator jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c95aa_TupleExprModel>>()) {
			_case_begin_1b90b1832:;
			{
				return (*this)._method_tuple(_95428_m.operator jule::Ptr<_1e83c95aa_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>>()) {
			_case_begin_1b90b18a9:;
			{
				return (*this)._method_out_call(_95428_m.operator jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>>()) {
			_case_begin_1b90b1931:;
			{
				return (*this)._method_outln_call(_95428_m.operator jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel>>()) {
			_case_begin_1b90b19a8:;
			{
				return (*this)._method_new_call(_95428_m.operator jule::Ptr<_1e83cb1e4_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>>()) {
			_case_begin_1b90b1a30:;
			{
				return (*this)._method_panic_call(_95428_m.operator jule::Ptr<_1e83cb920_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>>()) {
			_case_begin_1b90b1aa7:;
			{
				return (*this)._method_assert_call(_95428_m.operator jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>()) {
			_case_begin_1b90b1b2e:;
			{
				return (*this)._method_error_call(_95428_m.operator jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel>>()) {
			_case_begin_1b90b1ba6:;
			{
				return (*this)._method_make_call(_95428_m.operator jule::Ptr<_1e83cc987_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>>()) {
			_case_begin_1b90b1c2d:;
			{
				return (*this)._method_append_call(_95428_m.operator jule::Ptr<_1e83cd2c3_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>>()) {
			_case_begin_1b90b1ca5:;
			{
				return (*this)._method_clone_call(_95428_m.operator jule::Ptr<_1e83caac8_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83ce22a_SizeofExprModel>>()) {
			_case_begin_1b90b1d2c:;
			{
				return (*this)._method_sizeof(_95428_m.operator jule::Ptr<_1e83ce22a_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83cec97_AlignofExprModel>>()) {
			_case_begin_1b90b1da4:;
			{
				return (*this)._method_alignof(_95428_m.operator jule::Ptr<_1e83cec97_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d01d7_RuneExprModel>>()) {
			_case_begin_1b90b1e2b:;
			{
				return (*this)._method_rune_lit(_95428_m.operator jule::Ptr<_1e83d01d7_RuneExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c76a7_StructStaticIdentExprModel>>()) {
			_case_begin_1b90b1ea3:;
			{
				return (*this)._method_structure_static(_95428_m.operator jule::Ptr<_1e83c76a7_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d0726_IntegratedToStrExprModel>>()) {
			_case_begin_1b90b202a:;
			{
				return (*this)._method_integrated_to_str(_95428_m.operator jule::Ptr<_1e83d0726_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d0d53_TernaryExprModel>>()) {
			_case_begin_1b90b20a2:;
			{
				return (*this)._method_ternary(_95428_m.operator jule::Ptr<_1e83d0d53_TernaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d15c3_BackendEmitExprModel>>()) {
			_case_begin_1b90b2129:;
			{
				return (*this)._method_backend_emit(_95428_m.operator jule::Ptr<_1e83d15c3_BackendEmitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83d1cbb_FreeExprModel>>()) {
			_case_begin_1b90b21a1:;
			{
				return (*this)._method_free(_95428_m.operator jule::Ptr<_1e83d1cbb_FreeExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589d09a_MutSlicingExprModel>>()) {
			_case_begin_1b90b2228:;
			{
				return (*this)._method_mut_slicing(_95428_m.operator jule::Ptr<_1b589d09a_MutSlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b589d595_StrInsertBeginExprModel>>()) {
			_case_begin_1b90b22a0:;
			{
				return (*this)._method_str_insert_begin(_95428_m.operator jule::Ptr<_1b589d595_StrInsertBeginExprModel>());
			}
		}
		else {
			_case_begin_1b90b049b:;
			{
				return jule::Str("<unimplemented_expression_model>", 32);
			}
		}
		_match_end_1b90b038b:;
	}
}



inline jule::Str _1b57d05a4_ExprCoder::_method_expr(jule::Any _105327_e) {
	jule::Str _105417_obj = (*this)._method_model(_105327_e);
	if ((_105417_obj.len() == 0LL) || (_105417_obj[0LL] != '(')) {
		return _105417_obj;
	}
	{
		auto &_match_expr{ _105327_e };
		
		if (_match_expr.type_is<jule::Ptr<_1e83be3c4_BinopExprModel>>()) {
			_case_begin_1b90cc4b8:;
			{
				(_105417_obj).mut_slice(1LL,_105417_obj.len() - 1LL);
			}
		}
		_match_end_1b90cc254:;
	}
	return _105417_obj;
}



inline jule::Str _1b57d05a4_ExprCoder::_method_val(jule::Ptr<_1ce7281d6_Value> _106526_v) {
	if ((*((*(_106526_v))._field_data))._method_is_const()) {
		return (*this)._method_constant((*((*(_106526_v))._field_data))._field_constant,((*((*(_106526_v))._field_data))._field_kind != nullptr) && (*((*((*((*(_106526_v))._field_data))._field_kind))._method_prim()))._method_is_f32());
	}
	return (*this)._method_expr((*((*(_106526_v))._field_data))._field_model);
}



inline jule::Str _1b57d05a4_ExprCoder::_method_init_expr(jule::Ptr<_1ce76121e_TypeKind> _107232_t) {
	if (((*(_107232_t))._method_ptr() != nullptr)) {
		return jule::Str("nullptr", 7);
	}
	jule::Ptr<_1e8648917_Enum> _107617_enm = (*(_107232_t))._method_enm();
	if ((_107617_enm != nullptr)) {
		return (*this)._method_val((*((*(_107617_enm))._field_items[0LL]))._field_value);
	}
	return (_1b592c437_TypeCoder::_static_method_kind(_107232_t) + jule::Str("()", 2));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b57d05a4_ExprCoder &_Src) {
	_Stream << "ExprCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1b58c250e_DeriveCoder::_static_method_clone_func_decl(jule::Ptr<_1e83b1718_Struct>& _1032_s) {
	jule::Str _1117_obj = _1b592c437_TypeCoder::_static_method_structure(_1032_s);
	_1117_obj+=jule::Str(" clone(void) const ", 19);
	return _1117_obj;
}



inline jule::Str _1b58c250e_DeriveCoder::_static_method_clone_func_def(jule::Ptr<_1e83b1718_Struct>& _1631_s) {
	jule::Str _1717_obj = _1b592c437_TypeCoder::_static_method_structure(_1631_s);
	_1717_obj+=jule::Str(" ", 1) + _1717_obj;
	_1717_obj+=jule::Str("::clone(void) const ", 20);
	return _1717_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b58c250e_DeriveCoder &_Src) {
	_Stream << "DeriveCoder{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_to_ident(jule::Str _2924_ident) {
	return jule::Str("_", 1) + _2924_ident;
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_addr(jule::U64 _3420_addr) {
	return jule::Str("_", 1) + _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_3420_addr)),15LL);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_to_out(jule::Str _4322_ident,jule::U64 _4334_addr) {
	if ((_4334_addr != 0LLU)) {
		jule::Str _4521_obj = _1b58c4698_IdentCoder::_static_method_addr(_4334_addr);
		_4521_obj+=jule::Str("_", 1);
		_4521_obj+=_4322_ident;
		return _4521_obj;
	}
	return _1b58c4698_IdentCoder::_static_method_to_ident(_4322_ident);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_to_local(jule::I64 _5924_row,jule::I64 _5934_col,jule::Str _5944_ident) {
	jule::Str _6017_obj = _1cde2b4ab_itoa(_5924_row);
	_6017_obj+=_1cde2b4ab_itoa(_5934_col);
	_6017_obj+=jule::Str("_", 1);
	_6017_obj+=_5944_ident;
	return _1b58c4698_IdentCoder::_static_method_to_ident(_6017_obj);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_func(jule::Ptr<_1e83d4384_Fn>& _6821_f) {
	{
		
		if ((*(_6821_f))._field_cpp_linked) {
			_case_begin_1b90db3ea:;
			{
				return (*(_6821_f))._field_ident;
			}
		}
		else if (((*(_6821_f))._field_ident == jule::Str("main", 4))) {
			_case_begin_1b90dab47:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if ((*(_6821_f))._method_is_method()) {
			_case_begin_1b90dabad:;
			{
				if ((*(_6821_f))._field_statically) {
					return jule::Str("_static_method_", 15) + (*(_6821_f))._field_ident;
				}
				return jule::Str("_method_", 8) + (*(_6821_f))._field_ident;
			}
		}
		else {
			_case_begin_1b90da9d2:;
			{
				return _1b58c4698_IdentCoder::_static_method_to_out((*(_6821_f))._field_ident,static_cast<jule::U64>(static_cast<jule::U64>(_6821_f)));
			}
		}
		_match_end_1b90da916:;
	}
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_func_ins(jule::Ptr<_1e83d630e_FnIns>& _8529_f) {
	if ((*(_8529_f))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*((*(_8529_f))._field_decl))._field_ident;
	}
	if ((*((*(_8529_f))._field_decl))._field_cpp_linked || ((*(_8529_f))._field_generics.len() == 0LL)) {
		return _1b58c4698_IdentCoder::_static_method_func((*(_8529_f))._field_decl);
	}
	{
		auto &expr = (*((*(_8529_f))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b90e01bd:;
		if (it != expr.end()) {
			jule::I64 _1b90e0212_i = it - expr.begin();
			jule::Ptr<_1e83d630e_FnIns> _1b90e0476_ins = *it;
			{
				if ((*(_1b90e0476_ins))._method_same(_8529_f)) {
					jule::Str _9425_obj = _1b58c4698_IdentCoder::_static_method_func((*(_8529_f))._field_decl);
					_9425_obj+=jule::Str("_", 1);
					_9425_obj+=_1cde2b4ab_itoa(_1b90e0212_i);
					return _9425_obj;
				}
			}
			_iter_next_1b90e01bd:;
			++it;
			_1b90e0212_i++;
			goto _iter_begin_1b90e01bd;
		}
		_iter_end_1b90e01bd:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_trait_decl(jule::Ptr<_1e85a7865_Trait> _10426_t) {
	if ((*(_10426_t))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*(_10426_t))._field_ident;
	}
	return _1b58c4698_IdentCoder::_static_method_to_out((*(_10426_t))._field_ident,static_cast<jule::U64>(static_cast<jule::U64>(_10426_t)));
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_param(jule::Ptr<_1e83d3839_Param>& _11222_p) {
	if (_212ae95da_is_anon_ident((*(_11222_p))._field_ident) || _212ae9255_is_ignore_ident((*(_11222_p))._field_ident)) {
		return jule::Str();
	}
	return _1b58c4698_IdentCoder::_static_method_to_local((*(_11222_p))._field_token._field_row,(*(_11222_p))._field_token._field_column,(*(_11222_p))._field_ident);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_structure(jule::Ptr<_1e83b1718_Struct>& _12026_s) {
	if ((*(_12026_s))._field_cpp_linked) {
		if (_1b592c0d5_has_directive((*(_12026_s))._field_directives,jule::Str("typedef", 7))) {
			return (*(_12026_s))._field_ident;
		}
		return jule::Str("struct ", 7) + (*(_12026_s))._field_ident;
	}
	return _1b58c4698_IdentCoder::_static_method_to_out((*(_12026_s))._field_ident,static_cast<jule::U64>(static_cast<jule::U64>(_12026_s)));
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_structure_ins(jule::Ptr<_1e83b84bc_StructIns>& _13134_s) {
	if ((*((*(_13134_s))._field_decl))._field_cpp_linked || ((*(_13134_s))._field_generics.len() == 0LL)) {
		return _1b58c4698_IdentCoder::_static_method_structure((*(_13134_s))._field_decl);
	}
	{
		auto &expr = (*((*(_13134_s))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b90ed440:;
		if (it != expr.end()) {
			jule::I64 _1b90ed484_i = it - expr.begin();
			jule::Ptr<_1e83b84bc_StructIns> _1b90ed6e8_ins = *it;
			{
				if ((*(_1b90ed6e8_ins))._method_same(_13134_s)) {
					jule::Str _13725_obj = _1b58c4698_IdentCoder::_static_method_structure((*(_13134_s))._field_decl);
					_13725_obj+=jule::Str("_", 1);
					_13725_obj+=_1cde2b4ab_itoa(_1b90ed484_i);
					return _13725_obj;
				}
			}
			_iter_next_1b90ed440:;
			++it;
			_1b90ed484_i++;
			goto _iter_begin_1b90ed440;
		}
		_iter_end_1b90ed440:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_field(jule::Ptr<_1e82e47a0_Field>& _14722_f) {
	if ((*((*(_14722_f))._field_owner))._field_cpp_linked) {
		return (*(_14722_f))._field_ident;
	}
	return jule::Str("_field_", 7) + (*(_14722_f))._field_ident;
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_var(jule::Ptr<_1ce6cecb4_Var> _15523_v) {
	{
		
		if ((*(_15523_v))._field_cpp_linked) {
			_case_begin_1b9101a2b:;
			{
				return (*(_15523_v))._field_ident;
			}
		}
		else if (((*(_15523_v))._field_ident == jule::Str("error", 5))) {
			_case_begin_1b9101311:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if (((*(_15523_v))._field_ident == jule::Str("self", 4))) {
			_case_begin_1b9101377:;
			{
				if (((*((*((*(_15523_v))._field_kind))._field_kind))._method_sptr() != nullptr)) {
					return jule::Str("this->self", 10);
				}
				return jule::Str("(*this)", 7);
			}
		}
		else if (((*(_15523_v))._field_scope != nullptr)) {
			_case_begin_1b91013dd:;
			{
				return _1b58c4698_IdentCoder::_static_method_to_local((*(_15523_v))._field_token._field_row,(*(_15523_v))._field_token._field_column,(*(_15523_v))._field_ident);
			}
		}
		else {
			_case_begin_1b9100420:;
			{
				return _1b58c4698_IdentCoder::_static_method_to_out((*(_15523_v))._field_ident,static_cast<jule::U64>(static_cast<jule::U64>(_15523_v)));
			}
		}
		_match_end_1b9100376:;
	}
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_iter_begin(jule::U64 _17426_it) {
	return jule::Str("_iter_begin_", 12) + _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_17426_it)),15LL);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_iter_end(jule::U64 _17924_it) {
	return jule::Str("_iter_end_", 10) + _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_17924_it)),15LL);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_iter_next(jule::U64 _18425_it) {
	return jule::Str("_iter_next_", 11) + _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_18425_it)),15LL);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_label(jule::Str _18921_ident) {
	return jule::Str("_julec_label_", 13) + _18921_ident;
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_match_end(jule::U64 _19425_m) {
	return jule::Str("_match_end_", 11) + _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_19425_m)),15LL);
}



inline jule::Str _1b58c4698_IdentCoder::_static_method_case_begin(jule::U64 _19926_c) {
	return jule::Str("_case_begin_", 12) + _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_19926_c)),15LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b58c4698_IdentCoder &_Src) {
	_Stream << "IdentCoder{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b58d98cd_SerializationInfo &_Src) {
	_Stream << "SerializationInfo{";
	_Stream << "compiler:" << _Src._field_compiler << ", ";
	_Stream << "compiler_command:" << _Src._field_compiler_command;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_to_type(jule::Str _5727_id) {
	_5727_id=_1ce673780_real_kind_of(_5727_id);
	if ((97LL <= _5727_id[0LL]) && (_5727_id[0LL] <= 122LLU)) {
		_5727_id[0LL]-=32LLU;
	}
	return jule::Str("jule::", 6) + _5727_id;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_prim(jule::Ptr<_1ce762330_Prim> _6620_p) {
	return _1b592c437_TypeCoder::_static_method_to_type((*(_6620_p))._method_to_str());
}



inline jule::Str _1b592c437_TypeCoder::_static_method_tuple(jule::Ptr<_1ce763485_Tuple> _7125_t) {
	jule::Str _7217_obj = jule::Str("std::tuple<", 11);
	{
		auto &expr = (*(_7125_t))._field_types;
		auto it = expr.begin();
		_iter_begin_1b91d9a26:;
		if (it != expr.end()) {
			jule::Ptr<_1ce76121e_TypeKind> _1b91d9aae_tk = *it;
			{
				_7217_obj+=_1b592c437_TypeCoder::_static_method_kind(_1b91d9aae_tk);
				_7217_obj+=jule::Str(",", 1);
			}
			_iter_next_1b91d9a26:;
			++it;
			goto _iter_begin_1b91d9a26;
		}
		_iter_end_1b91d9a26:;
	}
	(_7217_obj).mut_slice(0LL,_7217_obj.len() - 1LL);
	_7217_obj+=jule::Str(">", 1);
	return _7217_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_as_sptr(jule::Str _8323_elem) {
	jule::Str _8417_obj = jule::Str("jule::Ptr<", 10);
	_8417_obj+=_8323_elem;
	_8417_obj+=jule::Str(">", 1);
	return _8417_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_sptr(jule::Ptr<_1ce76286e_Sptr> _9124_sptr) {
	return _1b592c437_TypeCoder::_static_method_as_sptr(_1b592c437_TypeCoder::_static_method_kind((*(_9124_sptr))._field_elem));
}



inline jule::Str _1b592c437_TypeCoder::_static_method_ptr(jule::Ptr<_1ce7649e7_Ptr> _9623_p) {
	
	if ((*(_9623_p))._method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _10117_elem = _1b592c437_TypeCoder::_static_method_kind((*(_9623_p))._field_elem);
	_10117_elem+=jule::Str("*", 1);
	return _10117_elem;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_enum_decl(jule::Ptr<_1e8648917_Enum> _10729_e) {
	return _1b592c437_TypeCoder::_static_method_kind((*((*(_10729_e))._field_kind))._field_kind);
}



inline jule::Str _1b592c437_TypeCoder::_static_method_as_slice(jule::Ptr<_1ce76121e_TypeKind> _11128_elem) {
	jule::Str _11217_obj = jule::Str("jule::Slice<", 12);
	_11217_obj+=_1b592c437_TypeCoder::_static_method_kind(_11128_elem);
	_11217_obj+=jule::Str(">", 1);
	return _11217_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_slice(jule::Ptr<_1ce762e02_Slc> _11925_s) {
	return _1b592c437_TypeCoder::_static_method_as_slice((*(_11925_s))._field_elem);
}



inline jule::Str _1b592c437_TypeCoder::_static_method_map(jule::Ptr<_1ce763b39_Map> _12423_m) {
	jule::Str _12517_obj = jule::Str("jule::Map<", 10);
	_12517_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_12423_m))._field_key);
	_12517_obj+=jule::Str(",", 1);
	_12517_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_12423_m))._field_val);
	_12517_obj+=jule::Str(">", 1);
	return _12517_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_trait_ident(jule::Str _13327_ident) {
	jule::Str _13417_obj = jule::Str("jule::Trait<", 12);
	_13417_obj+=_13327_ident;
	_13417_obj+=jule::Str(">", 1);
	return _13417_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_trait_decl(jule::Ptr<_1e85a7865_Trait> _14126_t) {
	return _1b592c437_TypeCoder::_static_method_trait_ident(_1b58c4698_IdentCoder::_static_method_trait_decl(_14126_t));
}



inline jule::Str _1b592c437_TypeCoder::_static_method_structure(jule::Ptr<_1e83b1718_Struct> _14625_s) {
	jule::Str _14717_rep = jule::Str();
	if ((*(_14625_s))._field_cpp_linked && (!(_1b592c0d5_has_directive((*(_14625_s))._field_directives,jule::Str("typedef", 7))))) {
		_14717_rep+=jule::Str("struct ", 7);
	}
	_14717_rep+=_1b58c4698_IdentCoder::_static_method_structure(_14625_s);
	return _14717_rep;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_structure_ins(jule::Ptr<_1e83b84bc_StructIns> _15633_s) {
	if ((*((*(_15633_s))._field_decl))._field_cpp_linked) {
		jule::Str _15821_ident = _1b58c4698_IdentCoder::_static_method_structure_ins(_15633_s);
		if (((*(_15633_s))._field_generics.len() > 0LL)) {
			_15821_ident+=jule::Str("<", 1);
			{
				auto &expr = (*(_15633_s))._field_generics;
				auto it = expr.begin();
				_iter_begin_1b91e78ad:;
				if (it != expr.end()) {
					jule::Ptr<_1ce76121e_TypeKind> _1b91e79ce_g = *it;
					{
						_15821_ident+=_1b592c437_TypeCoder::_static_method_kind(_1b91e79ce_g);
						_15821_ident+=jule::Str(",", 1);
					}
					_iter_next_1b91e78ad:;
					++it;
					goto _iter_begin_1b91e78ad;
				}
				_iter_end_1b91e78ad:;
			}
			(_15821_ident).mut_slice(0LL,_15821_ident.len() - 1LL);
			_15821_ident+=jule::Str(">", 1);
		}
		jule::Ptr<_2129e3902_Directive> _16817_d = _1b592bac9_find_directive((*((*(_15633_s))._field_decl))._field_directives,jule::Str("namespace", 9));
		if ((_16817_d != nullptr)) {
			(_15821_ident).buffer.insert(0, ((_1b57d0bc0_concat_all_parts((*(_16817_d))._field_args) + jule::Str("::", 2))));
		}
		return _15821_ident;
	}
	return _1b58c4698_IdentCoder::_static_method_structure_ins(_15633_s);
}



inline jule::Str _1b592c437_TypeCoder::_static_method_array(jule::Ptr<_1ce764244_Arr> _17825_a) {
	jule::Str _17917_obj = jule::Str("jule::Array<", 12);
	_17917_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_17825_a))._field_elem);
	_17917_obj+=jule::Str(",", 1);
	_17917_obj+=_1cde2b4ab_itoa((*(_17825_a))._field_n);
	_17917_obj+=jule::Str(">", 1);
	return _17917_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_param(jule::Ptr<_1e83d3839_Param>& _18826_p) {
	jule::Str _18917_obj = jule::Str();
	if ((*(_18826_p))._field_variadic) {
		_18917_obj+=jule::Str("jule::Slice<", 12);
		_18917_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_18826_p))._field_kind))._field_kind);
		_18917_obj+=jule::Str(">", 1);
	} else {
		_18917_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_18826_p))._field_kind))._field_kind);
	}
	return _18917_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_param_ins(jule::Ptr<_1e83d5bb0_ParamIns>& _20130_p) {
	jule::Str _20217_obj = jule::Str();
	if ((*((*(_20130_p))._field_decl))._field_variadic) {
		_20217_obj+=jule::Str("jule::Slice<", 12);
		_20217_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_20130_p))._field_kind);
		_20217_obj+=jule::Str(">", 1);
	} else {
		_20217_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_20130_p))._field_kind);
	}
	if ((*((*(_20130_p))._field_decl))._field_reference) {
		_20217_obj+=jule::Str("&", 1);
	}
	return _20217_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_func_result(jule::Ptr<_1e83d4384_Fn>& _21732_f) {
	if ((*(_21732_f))._method_is_void()) {
		if ((*(_21732_f))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*(_21732_f))._field_exceptional) {
		return ((jule::Str("jule::Exceptional<", 18) + _1b592c437_TypeCoder::_static_method_kind((*((*((*(_21732_f))._field_result))._field_kind))._field_kind)) + jule::Str(">", 1));
	}
	return _1b592c437_TypeCoder::_static_method_kind((*((*((*(_21732_f))._field_result))._field_kind))._field_kind);
}



inline jule::Str _1b592c437_TypeCoder::_static_method_func_ins_result(jule::Ptr<_1e83d630e_FnIns>& _23136_f) {
	if ((*((*(_23136_f))._field_decl))._method_is_void()) {
		if ((*((*(_23136_f))._field_decl))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*((*(_23136_f))._field_decl))._field_exceptional) {
		return ((jule::Str("jule::Exceptional<", 18) + _1b592c437_TypeCoder::_static_method_kind((*(_23136_f))._field_result)) + jule::Str(">", 1));
	}
	return _1b592c437_TypeCoder::_static_method_kind((*(_23136_f))._field_result);
}



inline jule::Str _1b592c437_TypeCoder::_static_method_anon_func(jule::Ptr<_1e83d630e_FnIns> _24429_f) {
	jule::Str _24517_decl = _1b592c437_TypeCoder::_static_method_func_ins_result(_24429_f);
	_24517_decl+=jule::Str("(", 1);
	if (((*(_24429_f))._field_params.len() > 0LL)) {
		{
			auto &expr = (*(_24429_f))._field_params;
			auto it = expr.begin();
			_iter_begin_1b92061d5:;
			if (it != expr.end()) {
				jule::Ptr<_1e83d5bb0_ParamIns> _1b920626d_param = *it;
				{
					if ((*((*(_1b920626d_param))._field_decl))._method_is_self()) {
						goto _iter_next_1b92061d5;
					}
					_24517_decl+=_1b592c437_TypeCoder::_static_method_param_ins(_1b920626d_param);
					_24517_decl+=jule::Str(",", 1);
				}
				_iter_next_1b92061d5:;
				++it;
				goto _iter_begin_1b92061d5;
			}
			_iter_end_1b92061d5:;
		}
		(_24517_decl).mut_slice(0LL,_24517_decl.len() - 1LL);
	} else {
		_24517_decl+=jule::Str("void", 4);
	}
	_24517_decl+=jule::Str(")", 1);
	return _24517_decl;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_func(jule::Ptr<_1e83d630e_FnIns> _26424_f) {
	jule::Str _26517_obj = jule::Str("jule::Fn<", 9);
	_26517_obj+=_1b592c437_TypeCoder::_static_method_anon_func(_26424_f);
	_26517_obj+=jule::Str(">", 1);
	return _26517_obj;
}



inline jule::Str _1b592c437_TypeCoder::_static_method_kind(jule::Ptr<_1ce76121e_TypeKind> _27224_k) {
	{
		
		if ((*(_27224_k))._method_cpp_linked()) {
			_case_begin_1b920998b:;
			{
				return (*(_27224_k))._field_cpp_ident;
			}
		}
		else if (((*(_27224_k))._method_prim() != nullptr)) {
			_case_begin_1b9209a02:;
			{
				return _1b592c437_TypeCoder::_static_method_prim((*(_27224_k))._method_prim());
			}
		}
		else if (((*(_27224_k))._method_tup() != nullptr)) {
			_case_begin_1b92097e3:;
			{
				return _1b592c437_TypeCoder::_static_method_tuple((*(_27224_k))._method_tup());
			}
		}
		else if (((*(_27224_k))._method_sptr() != nullptr)) {
			_case_begin_1b9209859:;
			{
				return _1b592c437_TypeCoder::_static_method_sptr((*(_27224_k))._method_sptr());
			}
		}
		else if (((*(_27224_k))._method_ptr() != nullptr)) {
			_case_begin_1b92098c0:;
			{
				return _1b592c437_TypeCoder::_static_method_ptr((*(_27224_k))._method_ptr());
			}
		}
		else if (((*(_27224_k))._method_enm() != nullptr)) {
			_case_begin_1b92094e6:;
			{
				return _1b592c437_TypeCoder::_static_method_enum_decl((*(_27224_k))._method_enm());
			}
		}
		else if (((*(_27224_k))._method_slc() != nullptr)) {
			_case_begin_1b920955c:;
			{
				return _1b592c437_TypeCoder::_static_method_slice((*(_27224_k))._method_slc());
			}
		}
		else if (((*(_27224_k))._method_map() != nullptr)) {
			_case_begin_1b92095c3:;
			{
				return _1b592c437_TypeCoder::_static_method_map((*(_27224_k))._method_map());
			}
		}
		else if (((*(_27224_k))._method_trt() != nullptr)) {
			_case_begin_1b9209639:;
			{
				return _1b592c437_TypeCoder::_static_method_trait_decl((*(_27224_k))._method_trt());
			}
		}
		else if (((*(_27224_k))._method_strct() != nullptr)) {
			_case_begin_1b9209c66:;
			{
				return _1b592c437_TypeCoder::_static_method_structure_ins((*(_27224_k))._method_strct());
			}
		}
		else if (((*(_27224_k))._method_arr() != nullptr)) {
			_case_begin_1b9209ccc:;
			{
				return _1b592c437_TypeCoder::_static_method_array((*(_27224_k))._method_arr());
			}
		}
		else if (((*(_27224_k))._method_fnc() != nullptr)) {
			_case_begin_1b9209d43:;
			{
				return _1b592c437_TypeCoder::_static_method_func((*(_27224_k))._method_fnc());
			}
		}
		else {
			_case_begin_1b920935e:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_1b9209293:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1b592c437_TypeCoder &_Src) {
	_Stream << "TypeCoder{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1b595ae38_Flag_0::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1b595ae38_Flag_0::_method_what(void) {
	return (*this)._field__what;
}



inline void _1b595ae38_Flag_0::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1b595ae38_Flag_0::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b595ae38_Flag_0 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1b595ae38_Flag_1::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1b595ae38_Flag_1::_method_what(void) {
	return (*this)._field__what;
}



inline void _1b595ae38_Flag_1::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1b595ae38_Flag_1::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b595ae38_Flag_1 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1b595ae38_Flag_2::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1b595ae38_Flag_2::_method_what(void) {
	return (*this)._field__what;
}



inline void _1b595ae38_Flag_2::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1b595ae38_Flag_2::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b595ae38_Flag_2 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1b595ae38_Flag_3::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1b595ae38_Flag_3::_method_what(void) {
	return (*this)._field__what;
}



inline void _1b595ae38_Flag_3::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1b595ae38_Flag_3::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b595ae38_Flag_3 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1b595ae38_Flag_4::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1b595ae38_Flag_4::_method_what(void) {
	return (*this)._field__what;
}



inline void _1b595ae38_Flag_4::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1b595ae38_Flag_4::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b595ae38_Flag_4 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b595bc5d_FlagSet> _1b595bc5d_FlagSet::_static_method_new(void) {
	return jule::new_struct<_1b595bc5d_FlagSet>(new( std::nothrow ) _1b595bc5d_FlagSet(jule::Slice<jule::Trait<_1b5959d27_CommonFlag>>::alloc(0LL,20LL)));
}



inline jule::Trait<_1b5959d27_CommonFlag> _1b595bc5d_FlagSet::_method_find_flag(jule::Str _6732_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_1b92464bc:;
		if (it != expr.end()) {
			jule::Trait<_1b5959d27_CommonFlag> _1b92465ee_flag = *it;
			{
				if (_1b92465ee_flag.get()._method_name() == _6732_name) {
					return _1b92465ee_flag;
				}
			}
			_iter_next_1b92464bc:;
			++it;
			goto _iter_begin_1b92464bc;
		}
		_iter_end_1b92464bc:;
	}
	return nullptr;
}



inline jule::Trait<_1b5959d27_CommonFlag> _1b595bc5d_FlagSet::_method_find_flag_short(jule::I32 _7738_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_1b9247b83:;
		if (it != expr.end()) {
			jule::Trait<_1b5959d27_CommonFlag> _1b9247cb5_flag = *it;
			{
				if (_1b9247cb5_flag.get()._method_short() == _7738_name) {
					return _1b9247cb5_flag;
				}
			}
			_iter_next_1b9247b83:;
			++it;
			goto _iter_begin_1b9247b83;
		}
		_iter_end_1b9247b83:;
	}
	return nullptr;
}



inline jule::Slice<jule::Trait<_1b5959d27_CommonFlag>> _1b595bc5d_FlagSet::_method_flags(void) {
	return (*this)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _1b595bc5d_FlagSet::_method_parse(jule::Slice<jule::Str> _11128_args) {
	_1b595c258_ArgParser _11217_ap = _1b595c258_ArgParser((*this),_11128_args,jule::Slice<jule::Str>(),jule::I64());
	({
		auto except = _11217_ap._method_parse();
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional<jule::Slice<jule::Str>>(jule::Any(),_11217_ap._field_content);
}



inline void _1b595bc5d_FlagSet::_method_reset(void) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_1b924b8ce:;
		if (it != expr.end()) {
			jule::Trait<_1b5959d27_CommonFlag> _1b924b923_f = *it;
			{
				_1b924b923_f.get()._method_reset();
			}
			_iter_next_1b924b8ce:;
			++it;
			goto _iter_begin_1b924b8ce;
		}
		_iter_end_1b924b8ce:;
	}
}



inline jule::Ptr<_1b595ae38_Flag_4> _1b595bc5d_FlagSet::_method_add_flag_common_0(jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	
	if (((*this)._method_find_flag(_12741_name) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && ((*this)._method_find_flag_short(_12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_1b595ae38_Flag_4> _14417_flag = jule::new_struct<_1b595ae38_Flag_4>(new( std::nothrow ) _1b595ae38_Flag_4(_12741_name,_12752_short,jule::Str(),_12765_what,jule::Ptr<jule::Str>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.__push(_14417_flag);
	return _14417_flag;
}

inline jule::Ptr<_1b595ae38_Flag_3> _1b595bc5d_FlagSet::_method_add_flag_common_1(jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	
	if (((*this)._method_find_flag(_12741_name) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && ((*this)._method_find_flag_short(_12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_1b595ae38_Flag_3> _14417_flag = jule::new_struct<_1b595ae38_Flag_3>(new( std::nothrow ) _1b595ae38_Flag_3(_12741_name,_12752_short,jule::Bool(),_12765_what,jule::Ptr<jule::Bool>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.__push(_14417_flag);
	return _14417_flag;
}





inline void _1b595bc5d_FlagSet::_method_add_var_0(jule::Ptr<jule::Str> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_1b595ae38_Flag_4> _17217_flag = (*this)._method_add_flag_common_0(_17146_name,_17157_short,_17170_what);
	(*(_17217_flag))._field__default=(*(_17137_var));
	(*(_17217_flag))._field__data=_17137_var;
}

inline void _1b595bc5d_FlagSet::_method_add_var_1(jule::Ptr<jule::Bool> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_1b595ae38_Flag_3> _17217_flag = (*this)._method_add_flag_common_1(_17146_name,_17157_short,_17170_what);
	(*(_17217_flag))._field__default=(*(_17137_var));
	(*(_17217_flag))._field__data=_17137_var;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b595bc5d_FlagSet &_Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1e8648917_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1e8648917_Enum::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _3526_other) {
	jule::Ptr<_1e8648917_Enum> _3613_enm = (*(_3526_other))._method_enm();
	return this->self == _3613_enm;
}



inline jule::Ptr<_1e86494b7_EnumItem> _1e8648917_Enum::_method_find_item(jule::Str _4432_ident) {
	{
		auto &expr = (*this)._field_items;
		auto it = expr.begin();
		_iter_begin_1b80e853a:;
		if (it != expr.end()) {
			jule::Ptr<_1e86494b7_EnumItem> _1b80e85e5_item = *it;
			{
				if ((*(_1b80e85e5_item))._field_ident == _4432_ident) {
					return _1b80e85e5_item;
				}
			}
			_iter_next_1b80e853a:;
			++it;
			goto _iter_begin_1b80e853a;
		}
		_iter_end_1b80e853a:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8648917_Enum &_Src) {
	_Stream << ((_1e8648917_Enum)(_Src))._method_to_str();
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2129e3d42_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b16e32_LitExpr::_method_is_nil(void) {
	return ((*this)._field_value == jule::Str("nil", 3));
}







std::ostream &operator<<(std::ostream &_Stream, const _212b16e32_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b17372_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b177b2_CoExpr &_Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b17c02_IdentExpr::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, const _212b17c02_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e76761d7_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b18142_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b18582_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2129908e3_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == static_cast<jule::U64>(1LLU);
}







std::ostream &operator<<(std::ostream &_Stream, const _2129908e3_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b18e12_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b19352_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b19792_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b19bd2_FnCallExpr::_method_unhandled(void) {
	return ((*this)._field_exception == nullptr);
}



inline jule::Bool _212b19bd2_FnCallExpr::_method_ignored(void) {
	return ((*this)._field_exception != nullptr) && (*((*this)._field_exception))._field_deferred;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b19bd2_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce685d9c_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b1a122_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != static_cast<jule::U64>(0LLU);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1a122_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2129e2b32_Node::_method_is_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_212b24725_EnumDecl>>() || _match_expr.type_is<jule::Ptr<_212b1edd5_FnDecl>>() || _match_expr.type_is<jule::Ptr<_212b2587a_StructDecl>>() || _match_expr.type_is<jule::Ptr<_212b1ade2_TraitDecl>>() || _match_expr.type_is<jule::Ptr<_212b230c5_TypeAliasDecl>>() || _match_expr.type_is<jule::Ptr<_212b24eea_FieldDecl>>() || _match_expr.type_is<jule::Ptr<_212b23d95_UseDecl>>() || _match_expr.type_is<jule::Ptr<_212b20325_VarDecl>>() || _match_expr.type_is<jule::Ptr<_2129e3d42_TypeDecl>>()) {
			_case_begin_1b6ed2e81:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b6ed316d:;
			{
				return false;
			}
		}
		_match_end_1b6ed3118:;
	}
}



inline jule::Bool _2129e2b32_Node::_method_is_comment(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_2129e34b2_Comment>>() || _match_expr.type_is<jule::Ptr<_2129e3072_CommentGroup>>()) {
			_case_begin_1b6ed4735:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b6ed4e1c:;
			{
				return false;
			}
		}
		_match_end_1b6ed4db7:;
	}
}



inline jule::Bool _2129e2b32_Node::_method_is_directive(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_2129e3902_Directive>>()) {
			_case_begin_1b6ed5acc:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b6ed5e40:;
			{
				return false;
			}
		}
		_match_end_1b6ed5dda:;
	}
}



inline jule::Bool _2129e2b32_Node::_method_is_impl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_212b26705_Impl>>()) {
			_case_begin_1b6ed6270:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b6ed6ca9:;
			{
				return false;
			}
		}
		_match_end_1b6ed6c54:;
	}
}



inline jule::Bool _2129e2b32_Node::_method_is_use_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_212b23d95_UseDecl>>()) {
			_case_begin_1b6ed70d9:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b6ed7b23:;
			{
				return false;
			}
		}
		_match_end_1b6ed7abd:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _2129e2b32_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b1a9a2_BraceLit::_method_is_empty(void) {
	return ((*this)._field_exprs.len() == 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1a9a2_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e83b2cbe_FieldIns> _1e82e47a0_Field::_method_instance(void) {
	return jule::new_struct<_1e83b2cbe_FieldIns>(new( std::nothrow ) _1e83b2cbe_FieldIns(this->self,(*((*(this->self))._field_kind))._field_kind,jule::Ptr<_1ce727449_Data>()));
}







std::ostream &operator<<(std::ostream &_Stream, const _1e82e47a0_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1b365_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce68793c_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b1b7a5_SliceExpr::_method_is_empty(void) {
	return ((*this)._field_elems.len() == 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1b7a5_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e83b84bc_StructIns> _1e83b1718_Struct::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	jule::Ptr<_1e83b84bc_StructIns> _13617_ins = jule::new_struct_ptr<_1e83b84bc_StructIns>(new( std::nothrow ) _1e83b84bc_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83b2cbe_FieldIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_fields.len())),jule::Slice<jule::Ptr<_1e83d4384_Fn>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_methods.len())),jule::Bool(),_1e83de4b0_ReferenceStack::_static_method_new(),_1e83ae55c_Operators()));
	{
		auto &expr = (*(this->self))._field_fields;
		auto it = expr.begin();
		_iter_begin_1b8013e17:;
		if (it != expr.end()) {
			jule::Ptr<_1e82e47a0_Field> _1b8013ed3_f = *it;
			{
				(*(_13617_ins))._field_fields = jule::alloc_for_append((*(_13617_ins))._field_fields,1);(*(_13617_ins))._field_fields.__push((*(_1b8013ed3_f))._method_instance());
				if (((!((*(_1b8013ed3_f))._field_mutable)) && ((*((*(_1b8013ed3_f))._field_kind))._field_kind != nullptr)) && (*((*((*(_1b8013ed3_f))._field_kind))._field_kind))._method_mutable()) {
					(*(_13617_ins))._field_mutable=true;
				}
			}
			_iter_next_1b8013e17:;
			++it;
			goto _iter_begin_1b8013e17;
		}
		_iter_end_1b8013e17:;
	}
	{
		auto &expr = (*(this->self))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b80141e2:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8014236_f = *it;
			{
				jule::Ptr<_1e83d4384_Fn> _15121_fins = jule::new_struct_ptr<_1e83d4384_Fn>(new( std::nothrow ) _1e83d4384_Fn((*(_1b8014236_f))._field_sema,(*(_1b8014236_f))._field_token,(*(_1b8014236_f))._field_global,(*(_1b8014236_f))._field_unsafety,(*(_1b8014236_f))._field_public,(*(_1b8014236_f))._field_cpp_linked,(*(_1b8014236_f))._field_statically,(*(_1b8014236_f))._field_exceptional,(*(_1b8014236_f))._field_ident,(*(_1b8014236_f))._field_directives,(*(_1b8014236_f))._field_doc,(*(_1b8014236_f))._field_scope,(*(_1b8014236_f))._field_generics,(*(_1b8014236_f))._field_result,(*(_1b8014236_f))._field_params,(*(_1b8014236_f))._field_owner,nullptr));
				(*(_13617_ins))._field_methods = jule::alloc_for_append((*(_13617_ins))._field_methods,1);(*(_13617_ins))._field_methods.__push(_15121_fins);
			}
			_iter_next_1b80141e2:;
			++it;
			goto _iter_begin_1b80141e2;
		}
		_iter_end_1b80141e2:;
	}
	return _13617_ins;
}



inline jule::Ptr<_1e83b84bc_StructIns> _1e83b1718_Struct::_method_append_instance(jule::Ptr<_1e83b84bc_StructIns>& _17839_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_1b801abcc:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b84bc_StructIns> _1b801b01d_ains = *it;
			{
				if ((*(_1b801b01d_ains))._method_same(_17839_ins)) {
					return _1b801b01d_ains;
				}
			}
			_iter_next_1b801abcc:;
			++it;
			goto _iter_begin_1b801abcc;
		}
		_iter_end_1b801abcc:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_17839_ins);
	return nullptr;
}



inline jule::Ptr<_1e83d4384_Fn> _1e83b1718_Struct::_method_find_method(jule::Str _19634_ident,jule::Bool _19646_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_1b801d1c9:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b801d32d_f = *it;
			{
				if (((*(_1b801d32d_f))._field_statically == _19646_statically) && ((*(_1b801d32d_f))._field_ident == _19634_ident)) {
					return _1b801d32d_f;
				}
			}
			_iter_next_1b801d1c9:;
			++it;
			goto _iter_begin_1b801d1c9;
		}
		_iter_end_1b801d1c9:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce6cecb4_Var> _1e83b1718_Struct::_method_find_static(jule::Str _20734_ident) {
	{
		auto &expr = (*this)._field_statics;
		auto it = expr.begin();
		_iter_begin_1b801e98e:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6cecb4_Var> _1b801ea49_v = *it;
			{
				if ((*(_1b801ea49_v))._field_ident == _20734_ident) {
					return _1b801ea49_v;
				}
			}
			_iter_next_1b801e98e:;
			++it;
			goto _iter_begin_1b801e98e;
		}
		_iter_end_1b801e98e:;
	}
	return nullptr;
}



inline jule::Ptr<_1e82e47a0_Field> _1e83b1718_Struct::_method_find_field(jule::Str _21833_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_1b8020dbe:;
		if (it != expr.end()) {
			jule::Ptr<_1e82e47a0_Field> _1b8020e79_f = *it;
			{
				if ((*(_1b8020e79_f))._field_ident == _21833_ident) {
					return _1b8020e79_f;
				}
			}
			_iter_next_1b8020dbe:;
			++it;
			goto _iter_begin_1b8020dbe;
		}
		_iter_end_1b8020dbe:;
	}
	return nullptr;
}



inline jule::Bool _1e83b1718_Struct::_method_is_implements(jule::Ptr<_1e85a7865_Trait> _22832_t) {
	{
		auto &expr = (*this)._field_implements;
		auto it = expr.begin();
		_iter_begin_1b80222ee:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> &_1b80223a9_it = *it;
			{
				if (_22832_t == _1b80223a9_it) {
					return true;
				}
			}
			_iter_next_1b80222ee:;
			++it;
			goto _iter_begin_1b80222ee;
		}
		_iter_end_1b80222ee:;
	}
	return false;
}



inline jule::Bool _1e83b1718_Struct::_method_is_derives(jule::Str _23829_ident) {
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_1b80235a8:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> &_1b8023663_d = *it;
			{
				if (((*(_1b8023663_d))._field_tag._field_kind == jule::Str("derive", 6))) {
					if (((*(_1b8023663_d))._field_args.len() == 1LL) && ((*(_1b8023663_d))._field_args[0LL]._field_kind == _23829_ident)) {
						return true;
					}
				}
			}
			_iter_next_1b80235a8:;
			++it;
			goto _iter_begin_1b80235a8;
		}
		_iter_end_1b80235a8:;
	}
	return false;
}



inline jule::Bool _1e83b1718_Struct::_method_is_uses(jule::Ptr<_1e83b1718_Struct> _25026_s) {
	{
		auto &expr = (*this)._field_uses;
		auto it = expr.begin();
		_iter_begin_1b80259c8:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> &_1b8025a83_u = *it;
			{
				while (_25026_s == _1b8025a83_u) {
					{
						return true;
					}
				_iter_next_1b802608e:;
				}
				_iter_end_1b802608e:;
			}
			_iter_next_1b80259c8:;
			++it;
			goto _iter_begin_1b80259c8;
		}
		_iter_end_1b80259c8:;
	}
	return false;
}



inline jule::Bool _1e83b1718_Struct::_method_has_ref_accessible(void) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_1b8025e90:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> &_1b8026aa6_m = *it;
			{
				if (((*(_1b8026aa6_m))._field_params.len() > 0LL) && (*((*(_1b8026aa6_m))._field_params[0LL]))._method_is_ref()) {
					return true;
				}
			}
			_iter_next_1b8025e90:;
			++it;
			goto _iter_begin_1b8025e90;
		}
		_iter_end_1b8025e90:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83b1718_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "operators:" << _Src._field_operators << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1bbe5_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6a0317_ImportInfo::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1ce6a0317_ImportInfo> _1ce6a0317_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce6a0317_ImportInfo::_method_find_var(jule::Str _16431_ident,jule::Bool _16443_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_16431_ident)))) {
		return nullptr;
	}
	return _1ce69d018_find_var_in_package((*((*this)._field_package))._field_files,_16431_ident,false);
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce6a0317_ImportInfo::_method_find_type_alias(jule::Str _17738_ident,jule::Bool _17750_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17738_ident)))) {
		return nullptr;
	}
	return _1ce69d645_find_type_alias_in_package((*((*this)._field_package))._field_files,_17738_ident,false);
}



inline jule::Ptr<_1e83b1718_Struct> _1ce6a0317_ImportInfo::_method_find_struct(jule::Str _19034_ident,jule::Bool _19046_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_19034_ident)))) {
		return nullptr;
	}
	return _1ce69dc50_find_struct_in_package((*((*this)._field_package))._field_files,_19034_ident,false);
}



inline jule::Ptr<_1e83d4384_Fn> _1ce6a0317_ImportInfo::_method_find_fn(jule::Str _20330_ident,jule::Bool _20342_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_20330_ident)))) {
		return nullptr;
	}
	return _1ce69e36b_find_fn_in_package((*((*this)._field_package))._field_files,_20330_ident,false);
}



inline jule::Ptr<_1e85a7865_Trait> _1ce6a0317_ImportInfo::_method_find_trait(jule::Str _21533_ident) {
	if ((!((*this)._method_is_lookupable(_21533_ident)))) {
		return nullptr;
	}
	return _1ce69e8cc_find_trait_in_package((*((*this)._field_package))._field_files,_21533_ident);
}



inline jule::Ptr<_1e8648917_Enum> _1ce6a0317_ImportInfo::_method_find_enum(jule::Str _22732_ident) {
	if ((!((*this)._method_is_lookupable(_22732_ident)))) {
		return nullptr;
	}
	return _1ce69ed61_find_enum_in_package((*((*this)._field_package))._field_files,_22732_ident);
}



inline jule::Bool _1ce6a0317_ImportInfo::_method_is_lookupable(jule::Str _23728_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if (((*this)._field_alias.len() != 0LL) || (*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if (((*this)._field_selected.len() > 0LL)) {
			if ((!((*this)._method_exist_ident(_23728_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _1ce6a0317_ImportInfo::_method_exist_ident(jule::Str _25726_ident) {
	{
		auto &expr = (*this)._field_selected;
		auto it = expr.begin();
		_iter_begin_1b82d543b:;
		if (it != expr.end()) {
			_212ae5c02_Token &_1b82d54e6_sident = *it;
			{
				if (_1b82d54e6_sident._field_kind == _25726_ident) {
					return true;
				}
			}
			_iter_next_1b82d543b:;
			++it;
			goto _iter_begin_1b82d543b;
		}
		_iter_end_1b82d543b:;
	}
	return false;
}



inline jule::Bool _1ce6a0317_ImportInfo::_method_is_accessible_via_selection(void) {
	return ((*this)._field_import_all || ((*this)._field_selected.len() == 0LL)) || (*this)._method_exist_ident(jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6a0317_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package << ", ";
	_Stream << "mod_id:" << _Src._field_mod_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1e83b84bc_StructIns::_method_to_str(void) {
	jule::Str _29317_kind = jule::Str();
	_29317_kind+=(*((*this)._field_decl))._field_ident;
	if (((*this)._field_generics.len() > 0LL)) {
		_29317_kind+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_1b8029724:;
			if (it != expr.end()) {
				jule::Ptr<_1ce76121e_TypeKind> &_1b8029768_g = *it;
				{
					_29317_kind+=(*(_1b8029768_g))._method_to_str();
					_29317_kind+=jule::Str(",", 1);
				}
				_iter_next_1b8029724:;
				++it;
				goto _iter_begin_1b8029724;
			}
			_iter_end_1b8029724:;
		}
		(_29317_kind).mut_slice(0LL,_29317_kind.len() - 1LL);
		_29317_kind+=jule::Str("]", 1);
	}
	return _29317_kind;
}



inline jule::Bool _1e83b84bc_StructIns::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _30826_other) {
	jule::Ptr<_1e83b84bc_StructIns> _30913_s = (*(_30826_other))._method_strct();
	if ((_30913_s == nullptr)) {
		return false;
	}
	if ((*(this->self))._field_decl != (*(_30913_s))._field_decl) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != static_cast<jule::I64>((*(_30913_s))._field_generics.len())) {
		return false;
	}
	jule::I64 _32217_i = 0LL;
	for (; _32217_i < static_cast<jule::I64>((*(this->self))._field_generics.len()); (_32217_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_32217_i]))._method_equals((*(_30913_s))._field_generics[_32217_i])))) {
				return false;
			}
		}
	_iter_next_1b802d7c2:;
	}
	_iter_end_1b802d7c2:;
	return true;
}



inline jule::Bool _1e83b84bc_StructIns::_method_same(jule::Ptr<_1e83b84bc_StructIns> _33623_s) {
	if (((*this)._field_decl != (*(_33623_s))._field_decl) || ((*(_33623_s))._field_generics.len() != static_cast<jule::I64>((*this)._field_generics.len()))) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_1b80315c7:;
		if (it != expr.end()) {
			jule::I64 _1b8031d14_i = it - expr.begin();
			jule::Ptr<_1ce76121e_TypeKind> &_1b8032067_g = *it;
			{
				if ((!((*(_1b8032067_g))._method_equals((*(_33623_s))._field_generics[_1b8031d14_i])))) {
					return false;
				}
			}
			_iter_next_1b80315c7:;
			++it;
			_1b8031d14_i++;
			goto _iter_begin_1b80315c7;
		}
		_iter_end_1b80315c7:;
	}
	return true;
}



inline jule::Ptr<_1e83d4384_Fn> _1e83b84bc_StructIns::_method_find_method(jule::Str _35134_ident,jule::Bool _35146_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_1b8033d27:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8033e7b_f = *it;
			{
				if (((*(_1b8033e7b_f))._field_statically == _35146_statically) && ((*(_1b8033e7b_f))._field_ident == _35134_ident)) {
					return _1b8033e7b_f;
				}
			}
			_iter_next_1b8033d27:;
			++it;
			goto _iter_begin_1b8033d27;
		}
		_iter_end_1b8033d27:;
	}
	return nullptr;
}



inline jule::Ptr<_1e83b2cbe_FieldIns> _1e83b84bc_StructIns::_method_find_field(jule::Str _36233_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_1b80355dc:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b2cbe_FieldIns> _1b8035697_f = *it;
			{
				if ((*((*(_1b8035697_f))._field_decl))._field_ident == _36233_ident) {
					return _1b8035697_f;
				}
			}
			_iter_next_1b80355dc:;
			++it;
			goto _iter_begin_1b80355dc;
		}
		_iter_end_1b80355dc:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83b84bc_StructIns &_Src) {
	_Stream << ((_1e83b84bc_StructIns)(_Src))._method_to_str();
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1c135_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83be3c4_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83bebdd_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ce6cecb4_Var::_method_is_initialized(void) {
	return ((*this)._field_value != nullptr);
}



inline jule::Bool _1ce6cecb4_Var::_method_is_type_inferred(void) {
	return ((*this)._field_kind == nullptr) || ((*((*this)._field_kind))._field_decl == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce6cecb4_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1c575_TernaryExpr &_Src) {
	_Stream << "TernaryExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}



inline void _1ce70c231_TypeCompatibilityChecker::_method_push_err(jule::Str _13027_fmt,jule::Slice<jule::Any> _13040_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_13027_fmt,_13040_args);
}



inline jule::Bool _1ce70c231_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _13432_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_13432_ok = true;
		return _13432_ok;
	}
	jule::Ptr<_1e85a7865_Trait> _13913_trt = (*((*this)._field_dest))._method_trt();
	jule::Bool _14017_ref = false;
	{
		
		if (((*((*this)._field_src))._method_sptr() != nullptr)) {
			_case_begin_1b8568ee9:;
			{
				_14017_ref=true;
				(*this)._field_src=(*((*((*this)._field_src))._method_sptr()))._field_elem;
				if (((*((*this)._field_src))._method_strct() == nullptr)) {
					_13432_ok = false;
					return _13432_ok;
				}
				goto _case_begin_1b85690c6;
			}
		}
		else if (((*((*this)._field_src))._method_strct() != nullptr)) {
			_case_begin_1b85690c6:;
			{
				jule::Ptr<_1e83b84bc_StructIns> _15117_s = (*((*this)._field_src))._method_strct();
				if ((!((*((*(_15117_s))._field_decl))._method_is_implements(_13913_trt)))) {
					_13432_ok = false;
					return _13432_ok;
				}
				if ((!(_14017_ref)) && _1ce6e1d1a_trait_has_reference_receiver(_13913_trt)) {
					(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_13432_ok = false;
					return _13432_ok;
				}
				_13432_ok = true;
				return _13432_ok;
			}
		}
		else if (((*((*this)._field_src))._method_trt() != nullptr)) {
			_case_begin_1b856913c:;
			{
				_13432_ok = _13913_trt == (*((*this)._field_src))._method_trt();
				return _13432_ok;
			}
		}
		else {
			_case_begin_1b8568856:;
			{
				_13432_ok = false;
				return _13432_ok;
			}
		}
		_match_end_1b85687ce:;
	}
}



inline jule::Bool _1ce70c231_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _17130_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_17130_ok = true;
		return _17130_ok;
	}
	jule::Ptr<_1ce7649e7_Ptr> _17617_dest = (*((*this)._field_dest))._method_ptr();
	if ((*(_17617_dest))._method_is_unsafe()) {
		_17130_ok = true;
		return _17130_ok;
	}
	_17130_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _17130_ok;
}



inline jule::Bool _1ce70c231_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _18531_ok = jule::Bool();
	if ((!((*((*this)._field_dest))._field_variadic))) {
		jule::Ptr<_1ce762330_Prim> _18717_prim = (*((*this)._field_dest))._method_prim();
		if ((_18717_prim != nullptr) && (*(_18717_prim))._method_is_any()) {
			_18531_ok = true;
			return _18531_ok;
		}
	}
	_18531_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _18531_ok;
}



inline jule::Bool _1ce70c231_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _19526_ok = jule::Bool();
	if (((*((*this)._field_dest))._method_ptr() != nullptr)) {
		_19526_ok = (*this)._method_check_ptr();
		return _19526_ok;
	}
	if ((*((*this)._field_dest))._method_nil_compatible()) {
		if ((*((*this)._field_src))._method_is_nil()) {
			_19526_ok = true;
			return _19526_ok;
		}
	}
	{
		
		if (((*((*this)._field_dest))._method_prim() != nullptr)) {
			_case_begin_1b8574bd6:;
			{
				_19526_ok = (*this)._method_check_prim();
				return _19526_ok;
			}
		}
		else if (((*((*this)._field_dest))._method_trt() != nullptr)) {
			_case_begin_1b8574c4c:;
			{
				_19526_ok = (*this)._method_check_trait();
				return _19526_ok;
			}
		}
		else {
			_case_begin_1b85745cb:;
			{
				_19526_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
				return _19526_ok;
			}
		}
		_match_end_1b85744bb:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce70c231_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1ce70c671_AssignTypeChecker::_method_push_err(jule::Str _22527_fmt,jule::Slice<jule::Any> _22540_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_22527_fmt,_22540_args);
}



inline jule::Bool _1ce70c671_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _23017_valid = true;
	{
		
		if (((*((*((*this)._field_d))._field_kind))._method_fnc() != nullptr)) {
			_case_begin_1b8577e1a:;
			{
				jule::Ptr<_1e83d630e_FnIns> _23317_f = (*((*((*this)._field_d))._field_kind))._method_fnc();
				{
					
					if ((*(_23317_f))._method_is_builtin()) {
						_case_begin_1b85795ae:;
						{
							(*this)._method_push_err(jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23317_f))._field_decl))._field_cpp_linked) {
						_case_begin_1b8579636:;
						{
							(*this)._method_push_err(jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23317_f))._field_decl))._method_is_method()) {
						_case_begin_1b85796ad:;
						{
							(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if (((*((*(_23317_f))._field_decl))._field_generics.len() > 0LL)) {
						_case_begin_1b8579735:;
						{
							(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					_match_end_1b85794d2:;
				}
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_tup() != nullptr)) {
			_case_begin_1b8577e92:;
			{
				(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23017_valid=false;
			}
		}
		_match_end_1b8577d60:;
	}
	return _23017_valid;
}



inline jule::Bool _1ce70c671_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*((*this)._field_d))._method_is_const())) || ((*((*this)._field_dest))._method_prim() == nullptr)) || ((*((*((*this)._field_d))._field_kind))._method_prim() == nullptr)) || (!(_1ce6828d2_is_num((*((*((*((*this)._field_d))._field_kind))._method_prim()))._field_kind)))) {
		return false;
	}
	if ((*((*this)._field_d))._field_model != (*((*this)._field_d))._field_constant) {
		return false;
	}
	jule::Str _26913_kind = (*((*((*this)._field_dest))._method_prim()))._field_kind;
	{
		
		if (_1ce6825b3_is_float(_26913_kind)) {
			_case_begin_1b85827a4:;
			{
				if ((!(_1ce6de07b_float_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else if (_1ce682173_is_int(_26913_kind)) {
			_case_begin_1b858281a:;
			{
				if ((!(_1ce6e3635_int_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else {
			_case_begin_1b8582034:;
			{
				return false;
			}
		}
		_match_end_1b8581eac:;
	}
	return true;
}



inline jule::Bool _1ce70c671_AssignTypeChecker::_method_is_prim(void) {
	if ((*((*this)._field_dest))._field_variadic || (*((*((*this)._field_d))._field_kind))._field_variadic) {
		return false;
	}
	if ((*((*this)._field_dest))._method_cpp_linked() || (*((*((*this)._field_d))._field_kind))._method_cpp_linked()) {
		return false;
	}
	return ((*((*this)._field_dest))._method_prim() != nullptr) && ((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr);
}



inline jule::Bool _1ce70c671_AssignTypeChecker::_method_check(void) {
	{
		
		if (((*this)._field_d == nullptr)) {
			_case_begin_1b8587666:;
			{
				return false;
			}
		}
		else if ((!((*this)._method_check_validity()))) {
			_case_begin_1b85876dd:;
			{
				return false;
			}
		}
		else if ((*this)._method_check_const()) {
			_case_begin_1b8587765:;
			{
				return true;
			}
		}
		else if (((*((*((*this)._field_d))._field_kind))._method_enm() != nullptr)) {
			_case_begin_1b85877dc:;
			{
				jule::Ptr<_1ce76121e_TypeKind> _31121_dkind = (*this)._field_dest;
				if (((*((*this)._field_dest))._method_enm() != nullptr)) {
					_31121_dkind=(*((*((*((*this)._field_dest))._method_enm()))._field_kind))._field_kind;
				} else if (((*((*this)._field_dest))._method_prim() == nullptr)) {
					goto _match_end_1b8587534;
				}
				if (_1ce67cc1d_types_are_compatible((*((*((*((*((*((*((*this)._field_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._field_kind,(*((*(_31121_dkind))._method_prim()))._field_kind)) {
					return true;
				}
			}
		}
		else if ((*this)._method_is_prim()) {
			_case_begin_1b8587864:;
			{
				jule::Ptr<_1ce762330_Prim> _32117_dest = (*((*this)._field_dest))._method_prim();
				if ((*(_32117_dest))._method_is_any()) {
					return true;
				}
				jule::Ptr<_1ce762330_Prim> _32521_src = (*((*((*this)._field_d))._field_kind))._method_prim();
				if (_1ce67cc1d_types_are_compatible((*(_32117_dest))._field_kind,(*(_32521_src))._field_kind)) {
					return true;
				}
			}
		}
		_match_end_1b8587534:;
	}
	return (*((*this)._field_s))._method_check_type_compatibility((*this)._field_dest,(*((*this)._field_d))._field_kind,(*this)._field_error_token);
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce70c671_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1ce70cd25_DynamicTypeAnnotation::_method_push_generic(jule::Ptr<_1ce76121e_TypeKind>& _34436_k,jule::I64 _34450_i) {
	(*((*this)._field_f))._field_generics[_34450_i]=_34436_k;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_prim(jule::Ptr<_1ce76121e_TypeKind>& _34844_k) {
	jule::Bool _34860_ok = jule::Bool();
	jule::Str _34913_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b8591cad:;
		if (it != expr.end()) {
			jule::I64 _1b8591d02_i = it - expr.begin();
			jule::Ptr<_212b1c9b5_GenericDecl> _1b8592066_g = *it;
			{
				if (_34913_kind != (*(_1b8592066_g))._field_ident) {
					goto _iter_next_1b8591cad;
				}
				jule::Ptr<_1ce76121e_TypeKind> _35517_t = (*((*this)._field_f))._field_generics[_1b8591d02_i];
				{
					
					if ((_35517_t == nullptr)) {
						_case_begin_1b85934a7:;
						{
							(*this)._method_push_generic(_34844_k,_1b8591d02_i);
						}
					}
					else if ((!((*(_35517_t))._method_equals(_34844_k)))) {
						_case_begin_1b859351d:;
						{
							_34860_ok = false;
							return _34860_ok;
						}
					}
					_match_end_1b8593397:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_34844_k))._field_kind;
				_34860_ok = true;
				return _34860_ok;
			}
			_iter_next_1b8591cad:;
			++it;
			_1b8591d02_i++;
			goto _iter_begin_1b8591cad;
		}
		_iter_end_1b8591cad:;
	}
	_34860_ok = false;
	return _34860_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_slc(jule::Ptr<_1ce76121e_TypeKind>& _37243_k) {
	jule::Bool _37259_ok = jule::Bool();
	jule::Ptr<_1ce762e02_Slc> _37317_pslc = (*((*((*this)._field_k))))._method_slc();
	if ((_37317_pslc == nullptr)) {
		_37259_ok = false;
		return _37259_ok;
	}
	jule::Ptr<_1ce762e02_Slc> _37817_slc = (*(_37243_k))._method_slc();
	(*this)._field_k=(&((*(_37317_pslc))._field_elem));
	_37259_ok = (*this)._method_annotate_kind((*(_37817_slc))._field_elem);
	return _37259_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_check_map_key(jule::Ptr<_1ce76121e_TypeKind>* _38343_k,jule::Ptr<_1ce76121e_TypeKind>& _38363_ck) {
	jule::Bool _38380_ok = jule::Bool();
	jule::Ptr<_1ce76121e_TypeKind>* _38417_old = (*this)._field_k;
	(*this)._field_k=_38343_k;
	_38380_ok=(*this)._method_annotate_kind(_38363_ck);
	(*this)._field_k=_38417_old;
	return _38380_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_map(jule::Ptr<_1ce76121e_TypeKind>& _39143_k) {
	jule::Bool _39159_ok = jule::Bool();
	jule::Ptr<_1ce763b39_Map> _39217_pmap = (*((*((*this)._field_k))))._method_map();
	if ((_39217_pmap == nullptr)) {
		_39159_ok = false;
		return _39159_ok;
	}
	jule::Ptr<_1ce763b39_Map> _39717_m = (*(_39143_k))._method_map();
	_39159_ok = (*this)._method_check_map_key((&((*(_39217_pmap))._field_key)),(*(_39717_m))._field_key) && (*this)._method_check_map_key((&((*(_39217_pmap))._field_val)),(*(_39717_m))._field_val);
	return _39159_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_fn(jule::Ptr<_1ce76121e_TypeKind>& _40342_k) {
	jule::Bool _40358_ok = jule::Bool();
	jule::Ptr<_1e83d630e_FnIns> _40417_pf = (*((*((*this)._field_k))))._method_fnc();
	if ((_40417_pf == nullptr)) {
		_40358_ok = false;
		return _40358_ok;
	}
	jule::Ptr<_1e83d630e_FnIns> _40817_f = (*(_40342_k))._method_fnc();
	{
		
		if ((*(_40417_pf))._field_params.len() != static_cast<jule::I64>((*(_40817_f))._field_params.len())) {
			_case_begin_1b859ecee:;
			{
				_40358_ok = false;
				return _40358_ok;
			}
		}
		else if ((*((*(_40417_pf))._field_decl))._method_is_void() != (*((*(_40817_f))._field_decl))._method_is_void()) {
			_case_begin_1b859ed76:;
			{
				_40358_ok = false;
				return _40358_ok;
			}
		}
		_match_end_1b859ec44:;
	}
	_40358_ok=true;
	jule::Ptr<_1ce76121e_TypeKind>* _41817_old = (*this)._field_k;
	{
		auto &expr = (*(_40817_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b85a17c3:;
		if (it != expr.end()) {
			jule::I64 _1b85a1e44_i = it - expr.begin();
			jule::Ptr<_1e83d5bb0_ParamIns> _1b85a2153_fp = *it;
			{
				(*this)._field_k=(&((*((*(_40417_pf))._field_params[_1b85a1e44_i]))._field_kind));
				_40358_ok=(*this)._method_annotate_kind((*(_1b85a2153_fp))._field_kind) && _40358_ok;
			}
			_iter_next_1b85a17c3:;
			++it;
			_1b85a1e44_i++;
			goto _iter_begin_1b85a17c3;
		}
		_iter_end_1b85a17c3:;
	}
	if ((!((*((*(_40417_pf))._field_decl))._method_is_void()))) {
		(*this)._field_k=(&((*(_40417_pf))._field_result));
		_40358_ok=(*this)._method_annotate_kind((*(_40817_f))._field_result) && _40358_ok;
	}
	(*this)._field_k=_41817_old;
	return _40358_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ptr<_1ce76121e_TypeKind>& _43343_k) {
	jule::Bool _43359_ok = jule::Bool();
	jule::Ptr<_1ce7649e7_Ptr> _43417_pptr = (*((*((*this)._field_k))))._method_ptr();
	if ((_43417_pptr == nullptr)) {
		_43359_ok = false;
		return _43359_ok;
	}
	jule::Ptr<_1ce7649e7_Ptr> _43917_ptr = (*(_43343_k))._method_ptr();
	(*this)._field_k=(&((*(_43417_pptr))._field_elem));
	_43359_ok = (*this)._method_annotate_kind((*(_43917_ptr))._field_elem);
	return _43359_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_sptr(jule::Ptr<_1ce76121e_TypeKind>& _44444_k) {
	jule::Bool _44460_ok = jule::Bool();
	jule::Ptr<_1ce76286e_Sptr> _44517_ssptr = (*((*((*this)._field_k))))._method_sptr();
	if ((_44517_ssptr == nullptr)) {
		_44460_ok = false;
		return _44460_ok;
	}
	jule::Ptr<_1ce76286e_Sptr> _45017_sptr = (*(_44444_k))._method_sptr();
	(*this)._field_k=(&((*(_44517_ssptr))._field_elem));
	_44460_ok = (*this)._method_annotate_kind((*(_45017_sptr))._field_elem);
	return _44460_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_any(jule::Ptr<_1ce76121e_TypeKind>& _45543_k) {
	jule::Bool _45559_ok = jule::Bool();
	jule::Str _45613_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b85ab107:;
		if (it != expr.end()) {
			jule::I64 _1b85ab14b_i = it - expr.begin();
			jule::Ptr<_212b1c9b5_GenericDecl> _1b85ab3b0_g = *it;
			{
				if (_45613_kind != (*(_1b85ab3b0_g))._field_ident) {
					goto _iter_next_1b85ab107;
				}
				jule::Ptr<_1ce76121e_TypeKind> _46217_t = (*((*this)._field_f))._field_generics[_1b85ab14b_i];
				{
					
					if ((_46217_t == nullptr)) {
						_case_begin_1b85ac801:;
						{
							(*this)._method_push_generic(_45543_k,_1b85ab14b_i);
						}
					}
					else if ((!((*(_46217_t))._method_equals(_45543_k)))) {
						_case_begin_1b85ac867:;
						{
							_45559_ok = false;
							return _45559_ok;
						}
					}
					_match_end_1b85ac6e1:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_45543_k))._field_kind;
				_45559_ok = true;
				return _45559_ok;
			}
			_iter_next_1b85ab107:;
			++it;
			_1b85ab14b_i++;
			goto _iter_begin_1b85ab107;
		}
		_iter_end_1b85ab107:;
	}
	_45559_ok = false;
	return _45559_ok;
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate_kind(jule::Ptr<_1ce76121e_TypeKind>& _47944_k) {
	jule::Bool _47960_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _47960_ok;
	}
	{
		
		if ((*this)._method_annotate_any(_47944_k)) {
			_case_begin_1b85b0914:;
			{
				_47960_ok = true;
				return _47960_ok;
			}
		}
		else if (((*(_47944_k))._method_prim() != nullptr)) {
			_case_begin_1b85b097a:;
			{
				_47960_ok = (*this)._method_annotate_prim(_47944_k);
				return _47960_ok;
			}
		}
		else if (((*(_47944_k))._method_slc() != nullptr)) {
			_case_begin_1b85b0628:;
			{
				_47960_ok = (*this)._method_annotate_slc(_47944_k);
				return _47960_ok;
			}
		}
		else if (((*(_47944_k))._method_map() != nullptr)) {
			_case_begin_1b85b068e:;
			{
				_47960_ok = (*this)._method_annotate_map(_47944_k);
				return _47960_ok;
			}
		}
		else if (((*(_47944_k))._method_fnc() != nullptr)) {
			_case_begin_1b85b0705:;
			{
				_47960_ok = (*this)._method_annotate_fn(_47944_k);
				return _47960_ok;
			}
		}
		else if (((*(_47944_k))._method_ptr() != nullptr)) {
			_case_begin_1b85b0309:;
			{
				_47960_ok = (*this)._method_annotate_ptr(_47944_k);
				return _47960_ok;
			}
		}
		else if (((*(_47944_k))._method_sptr() != nullptr)) {
			_case_begin_1b85b0370:;
			{
				_47960_ok = (*this)._method_annotate_sptr(_47944_k);
				return _47960_ok;
			}
		}
		else {
			_case_begin_1b85b0194:;
			{
				_47960_ok = false;
				return _47960_ok;
			}
		}
		_match_end_1b85ae99b:;
	}
}



inline jule::Bool _1ce70cd25_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _49636_ok = jule::Bool();
	(*this)._field_k=(&((*((*this)._field_p))._field_kind));
	_49636_ok = (*this)._method_annotate_kind((*((*this)._field_a))._field_kind);
	return _49636_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce70cd25_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1ce70d908_FnCallArgChecker::_method_push_err_token(_212ae5c02_Token _51233_token,jule::Str _51247_fmt,jule::Slice<jule::Any> _51260_args) {
	(*((*((*this)._field_e))._field_s))._method_push_err(_51233_token,_51247_fmt,_51260_args);
}



inline void _1ce70d908_FnCallArgChecker::_method_push_err(jule::Str _51627_fmt,jule::Slice<jule::Any> _51640_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_51627_fmt,_51640_args);
}



inline jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>> _1ce70d908_FnCallArgChecker::_method_get_params(void) {
	if ((((*((*this)._field_f))._field_params.len() > 0LL) && ((*((*((*this)._field_f))._field_params[0LL]))._field_decl != nullptr)) && (*((*((*((*this)._field_f))._field_params[0LL]))._field_decl))._method_is_self()) {
		return (*((*this)._field_f))._field_params.slice(1LL);
	}
	return (*((*this)._field_f))._field_params;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>& _52932_params) {
	jule::Bool _52955_ok = jule::Bool();
	jule::I64 _53017_n = _52932_params.len();
	if ((_53017_n > 0LL) && (*((*(_52932_params[0LL]))._field_decl))._method_is_self()) {
		(_53017_n)--;
	}
	jule::I64 _53517_diff = _53017_n - static_cast<jule::I64>((*this)._field_args.len());
	{
		
		if ((_53517_diff == 0LL)) {
			_case_begin_1b85bdc41:;
			{
				_52955_ok = true;
				return _52955_ok;
			}
		}
		else if ((_53017_n > 0LL) && (*((*(_52932_params[(_53017_n - 1LL)]))._field_decl))._field_variadic) {
			_case_begin_1b85bdcb8:;
			{
				_52955_ok = true;
				return _52955_ok;
			}
		}
		else if ((_53517_diff < 0LL) || (_53517_diff > static_cast<jule::I64>(_52932_params.len()))) {
			_case_begin_1b85bdd40:;
			{
				(*this)._method_push_err(jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_52955_ok = false;
				return _52955_ok;
			}
		}
		_match_end_1b85bdb75:;
	}
	jule::Str _54617_idents = jule::Str();
	for (; (_53517_diff > 0LL); (_53517_diff)--) {
		{
			_54617_idents+=jule::Str(", ", 2) + (*((*(_52932_params[_53017_n - _53517_diff]))._field_decl))._field_ident;
		}
	_iter_next_1b85c153a:;
	}
	_iter_end_1b85c153a:;
	(_54617_idents).mut_slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_54617_idents)}));
	_52955_ok = false;
	return _52955_ok;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_check_arg(jule::Ptr<_1e83d5bb0_ParamIns>& _55633_p,jule::Ptr<_1ce727449_Data>& _55652_arg,_212ae5c02_Token& _55669_error_token) {
	jule::Bool _55691_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation && _1e83d77b6_parameter_uses_generics((*(_55633_p))._field_decl,(*((*((*this)._field_f))._field_decl))._field_generics)) {
		_55691_ok=(!((*((*(_55633_p))._field_decl))._field_variadic));
		if (_55691_ok) {
			_1ce70cd25_DynamicTypeAnnotation _56025_dta = _1ce70cd25_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_55633_p,_55652_arg,_55669_error_token,nullptr);
			_55691_ok=_56025_dta._method_annotate();
		}
		if ((!(_55691_ok))) {
			(*this)._method_push_err_token(_55669_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_55691_ok = false;
			return _55691_ok;
		}
	}
	if ((*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((*((*(_55633_p))._field_decl))._field_mutable,(*((*(_55633_p))._field_decl))._field_reference,(*(_55633_p))._field_kind,_55652_arg,_55669_error_token)) {
		(*((*((*this)._field_e))._field_s))._method_check_assign_type((*((*(_55633_p))._field_decl))._field_reference,(*(_55633_p))._field_kind,_55652_arg,_55669_error_token);
	}
	_55691_ok = true;
	return _55691_ok;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_push(jule::Ptr<_1e83d5bb0_ParamIns>& _58328_p,jule::Ptr<_212b16162_Expr> _58346_arg) {
	jule::Bool _58360_ok = jule::Bool();
	jule::Ptr<_1ce76121e_TypeKind> _58417_old = (*((*this)._field_e))._field_prefix;
	jule::Bool _58513_old_immut = (*((*this)._field_e))._field_immutable;
	jule::Ptr<_1ce727449_Data> _58617_d = nullptr;
	(*((*this)._field_e))._field_immutable=(!((*((*(_58328_p))._field_decl))._field_mutable));
	if ((!((*this)._field_dynamic_annotation)) && (!((*((*(_58328_p))._field_decl))._field_variadic))) {
		(*((*this)._field_e))._field_prefix=(*(_58328_p))._field_kind;
	} else {
		(*((*this)._field_e))._field_prefix=nullptr;
	}
	_58617_d=(*((*this)._field_e))._method_eval_expr_kind((*(_58346_arg))._field_kind);
	(*((*this)._field_e))._field_prefix=_58417_old;
	(*((*this)._field_e))._field_immutable=_58513_old_immut;
	if ((_58617_d == nullptr)) {
		_58360_ok = false;
		return _58360_ok;
	}
	(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.__push(jule::Any(_58617_d));
	_58360_ok = (*this)._method_check_arg(_58328_p,_58617_d,(*(_58346_arg))._field_token);
	return _58360_ok;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_push_variadic(jule::Ptr<_1e83d5bb0_ParamIns>& _60737_p,jule::I64 _60755_i) {
	jule::Bool _60765_ok = jule::Bool();
	_60765_ok=true;
	jule::Bool _60917_variadiced = false;
	jule::Bool _61013_more = (_60755_i + 1LL) < static_cast<jule::I64>((*this)._field_args.len());
	jule::Ptr<_1e83c31b9_SliceExprModel> _61117_model = jule::new_struct<_1e83c31b9_SliceExprModel>(new( std::nothrow ) _1e83c31b9_SliceExprModel((*(_60737_p))._field_kind,jule::Slice<jule::Any>()));
	jule::Ptr<_1ce76121e_TypeKind> _61517_old = (*((*this)._field_e))._field_prefix;
	jule::Bool _62013_variadic = (*((*(_60737_p))._field_kind))._field_variadic;
	(*((*(_60737_p))._field_kind))._field_variadic=false;
	__JULE_DEFER({
		(*((*(_60737_p))._field_kind))._field_variadic=_62013_variadic;
	});
	for (; _60755_i < static_cast<jule::I64>((*this)._field_args.len()); (_60755_i)++) {
		{
			jule::Ptr<_212b16162_Expr> _62721_arg = (*this)._field_args[_60755_i];
			{
				auto &_match_expr{ (*(_62721_arg))._field_kind };
				
				if (_match_expr.type_is<jule::Ptr<_212b18582_VariadicExpr>>()) {
					_case_begin_1b85d2c00:;
					{
						(*((*this)._field_e))._field_prefix=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc((*(_60737_p))._field_kind))));
					}
				}
				else {
					_case_begin_1b85d332c:;
					{
						(*((*this)._field_e))._field_prefix=(*(_60737_p))._field_kind;
					}
				}
				_match_end_1b85d32b6:;
			}
			jule::Ptr<_1ce727449_Data> _64121_d = (*((*this)._field_e))._method_eval(_62721_arg);
			if ((_64121_d == nullptr)) {
				_60765_ok=false;
				goto _iter_next_1b85d2925;
			}
			if ((*((*(_64121_d))._field_kind))._field_variadic) {
				_60917_variadiced=true;
				{
					auto &_match_expr{ (*(_64121_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e83c31b9_SliceExprModel>>()) {
						_case_begin_1b85d4d34:;
						{
							_61117_model=(*(_64121_d))._field_model.operator jule::Ptr<_1e83c31b9_SliceExprModel>();
							(*(_61117_model))._field_elem_kind=(*(_60737_p))._field_kind;
						}
					}
					else {
						_case_begin_1b85d5c25:;
						{
							_61117_model=nullptr;
							(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.__push(jule::Any(_64121_d));
						}
					}
					_match_end_1b85d5b6a:;
				}
				(*((*(_60737_p))._field_kind))._field_variadic=true;
				_60765_ok=_60765_ok && (*this)._method_check_arg(_60737_p,_64121_d,(*(_62721_arg))._field_token);
				(_60755_i)++;
				goto _iter_end_1b85d2925;
			}
			(*(_61117_model))._field_elems = jule::alloc_for_append((*(_61117_model))._field_elems,1);(*(_61117_model))._field_elems.__push((*(_64121_d))._field_model);
			_60765_ok=_60765_ok && (*this)._method_check_arg(_60737_p,_64121_d,(*(_62721_arg))._field_token);
		}
	_iter_next_1b85d2925:;
	}
	_iter_end_1b85d2925:;
	(*((*this)._field_e))._field_prefix=_61517_old;
	if (_60917_variadiced && _61013_more) {
		(*this)._method_push_err_token((*((*this)._field_args[_60755_i]))._field_token,jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	}
	if ((_61117_model != nullptr)) {
		(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.__push(jule::Any(_61117_model));
	}
	return _60765_ok;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>& _68834_params) {
	jule::Bool _68857_ok = jule::Bool();
	_68857_ok=true;
	jule::I64 _69017_i = 0LL;
	_julec_label_iter:;
	while (_69017_i < static_cast<jule::I64>(_68834_params.len())) {
		{
			jule::Ptr<_1e83d5bb0_ParamIns> _69321_p = _68834_params[_69017_i];
			{
				
				if ((*((*(_69321_p))._field_decl))._method_is_self()) {
					_case_begin_1b85dcb0b:;
				}
				else if ((*((*(_69321_p))._field_decl))._field_variadic) {
					_case_begin_1b85dc9b8:;
					{
						_68857_ok=(*this)._method_push_variadic(_69321_p,_69017_i) && _68857_ok;
						goto _iter_end_1b85dbaa5;
					}
				}
				else if ((*this)._field_args.len() <= _69017_i) {
					_case_begin_1b85dc787:;
					{
						_68857_ok=false;
						goto _iter_end_1b85dbaa5;
					}
				}
				else {
					_case_begin_1b85dc622:;
					{
						_68857_ok=(*this)._method_push(_69321_p,(*this)._field_args[_69017_i]) && _68857_ok;
					}
				}
				_match_end_1b85dc59a:;
			}
			(_69017_i)++;
		}
	_iter_next_1b85dbaa5:;
	}
	_iter_end_1b85dbaa5:;
	return _68857_ok;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _71550_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b85e0944:;
		if (it != expr.end()) {
			jule::Ptr<_1ce76121e_TypeKind> _1b85e0a76_g = *it;
			{
				if ((_1b85e0a76_g == nullptr)) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_71550_ok = false;
					return _71550_ok;
				}
			}
			_iter_next_1b85e0944:;
			++it;
			goto _iter_begin_1b85e0944;
		}
		_iter_end_1b85e0944:;
	}
	_71550_ok = true;
	return _71550_ok;
}



inline jule::Bool _1ce70d908_FnCallArgChecker::_method_check(void) {
	jule::Bool _72526_ok = jule::Bool();
	jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>> _72617_params = (*this)._method_get_params();
	_72526_ok=(*this)._method_check_counts(_72617_params);
	if ((!(_72526_ok))) {
		_72526_ok = false;
		return _72526_ok;
	}
	_72526_ok=(*this)._method_check_args(_72617_params);
	if (_72526_ok && (*this)._field_dynamic_annotation) {
		_72526_ok=(*this)._method_check_dynamic_type_annotation();
	}
	return _72526_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce70d908_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1ce70e497_StructLitChecker::_method_push_err(_212ae5c02_Token _74927_token,jule::Str _74941_fmt,jule::Slice<jule::Any> _74954_args) {
	(*((*this)._field_e))._method_push_err(_74927_token,_74941_fmt,_74954_args);
}



inline void _1ce70e497_StructLitChecker::_method_push_suggestion(jule::Str _75434_fmt,jule::Slice<jule::Any> _75447_args) {
	(*((*this)._field_e))._method_push_suggestion(_75434_fmt,_75447_args);
}



inline void _1ce70e497_StructLitChecker::_method_push_match(jule::Ptr<_1e83b2cbe_FieldIns>& _75834_f,jule::Ptr<_1ce727449_Data>& _75853_d,_212ae5c02_Token& _75868_error_token) {
	(*this)._field_args = jule::alloc_for_append((*this)._field_args,1);(*this)._field_args.__push(jule::new_struct<_1e83c044c_StructArgExprModel>(new( std::nothrow ) _1e83c044c_StructArgExprModel(_75834_f,(*(_75853_d))._field_model)));
	
	if ((*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((!((*((*this)._field_e))._field_immutable)),false,(*(_75834_f))._field_kind,_75853_d,_75868_error_token)) {
		(*((*((*this)._field_e))._field_s))._method_check_assign_type(false,(*(_75834_f))._field_kind,_75853_d,_75868_error_token);
	}
}



inline void _1ce70e497_StructLitChecker::_method_check_pair(jule::Ptr<_212b1a122_FieldExprPair>& _77134_pair,jule::Slice<jule::Any>& _77161_exprs) {
	jule::Ptr<_1e83b2cbe_FieldIns> _77317_f = (*((*this)._field_s))._method_find_field((*(_77134_pair))._field_field._field_kind);
	if ((_77317_f == nullptr)) {
		(*this)._method_push_err((*(_77134_pair))._field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_77134_pair))._field_field._field_kind)}));
		return;
	}
	if ((!((*((*((*this)._field_e))._field_s))._method_is_accessible_define((*((*(_77317_f))._field_decl))._field_public,(*((*(_77317_f))._field_decl))._field_token)))) {
		(*this)._method_push_err((*(_77134_pair))._field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_77134_pair))._field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	_julec_label_dup_lookup:;
	{
		auto &expr = _77161_exprs;
		auto it = expr.begin();
		_iter_begin_1b85eeba6:;
		if (it != expr.end()) {
			jule::Any _1b85eec61_expr = *it;
			{
				{
					auto &_match_expr{ _1b85eec61_expr };
					
					if (_match_expr.type_is<jule::Ptr<_212b1a122_FieldExprPair>>()) {
						_case_begin_1b8600404:;
						{
							jule::Ptr<_212b1a122_FieldExprPair> _78825_dpair = _1b85eec61_expr.operator jule::Ptr<_212b1a122_FieldExprPair>();
							{
								
								if (_77134_pair == _78825_dpair) {
									_case_begin_1b86011d5:;
									{
										goto _iter_end_1b85eeba6;
									}
								}
								else if ((*(_77134_pair))._field_field._field_kind == (*(_78825_dpair))._field_field._field_kind) {
									_case_begin_1b860125c:;
									{
										(*this)._method_push_err((*(_77134_pair))._field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any((*(_77134_pair))._field_field._field_kind)}));
										goto _iter_end_1b85eeba6;
									}
								}
								_match_end_1b860112a:;
							}
						}
					}
					_match_end_1b860027d:;
				}
			}
			_iter_next_1b85eeba6:;
			++it;
			goto _iter_begin_1b85eeba6;
		}
		_iter_end_1b85eeba6:;
	}
	jule::Ptr<_1ce76121e_TypeKind> _79917_prefix = (*((*this)._field_e))._field_prefix;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_79917_prefix;
	});
	(*((*this)._field_e))._field_prefix=(*(_77317_f))._field_kind;
	jule::Ptr<_1ce727449_Data> _80317_d = (*((*this)._field_e))._method_eval_expr_kind((*(_77134_pair))._field_expr);
	if ((_80317_d == nullptr)) {
		return;
	}
	(*this)._method_push_match(_77317_f,_80317_d,(*(_77134_pair))._field_field);
}



inline jule::Bool _1ce70e497_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any>& _81035_exprs) {
	jule::Bool _81117_ok = true;
	{
		auto &expr = _81035_exprs;
		auto it = expr.begin();
		_iter_begin_1b860564b:;
		if (it != expr.end()) {
			jule::I64 _1b860576c_i = it - expr.begin();
			jule::Any _1b86059c0_expr = *it;
			{
				{
					auto &_match_expr{ _1b86059c0_expr };
					
					if (_match_expr.type_is<jule::Ptr<_212b1b365_KeyValPair>>()) {
						_case_begin_1b86061b8:;
						{
							jule::Ptr<_212b1b365_KeyValPair> _81525_pair = _1b86059c0_expr.operator jule::Ptr<_212b1b365_KeyValPair>();
							{
								auto &_match_expr{ (*(_81525_pair))._field_key };
								
								if (_match_expr.type_is<jule::Ptr<_212b17c02_IdentExpr>>()) {
									_case_begin_1b8607c9c:;
								}
								else {
									_case_begin_1b86070dc:;
									{
										(*this)._method_push_err((*(_81525_pair))._field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_81117_ok=false;
										goto _iter_next_1b860564b;
									}
								}
								_match_end_1b8607076:;
							}
							_81035_exprs[_1b860576c_i]=jule::Any(jule::new_struct<_212b1a122_FieldExprPair>(new( std::nothrow ) _212b1a122_FieldExprPair((*((*(_81525_pair))._field_key.operator jule::Ptr<_212b17c02_IdentExpr>()))._field_token,(*(_81525_pair))._field_val)));
						}
					}
					_match_end_1b8606042:;
				}
			}
			_iter_next_1b860564b:;
			++it;
			_1b860576c_i++;
			goto _iter_begin_1b860564b;
		}
		_iter_end_1b860564b:;
	}
	return _81117_ok;
}



inline void _1ce70e497_StructLitChecker::_method_check(jule::Slice<jule::Any>& _83329_exprs) {
	if ((_83329_exprs.len() == 0LL)) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_83329_exprs)))) {
		return;
	}
	jule::Bool _84217_paired = false;
	{
		auto &expr = _83329_exprs;
		auto it = expr.begin();
		_iter_begin_1b860a0ac:;
		if (it != expr.end()) {
			jule::I64 _1b860a112_i = it - expr.begin();
			jule::Any _1b860a376_expr = *it;
			{
				{
					auto &_match_expr{ _1b860a376_expr };
					
					if (_match_expr.type_is<jule::Ptr<_212b1a122_FieldExprPair>>()) {
						_case_begin_1b860aa80:;
						{
							jule::Ptr<_212b1a122_FieldExprPair> _84625_pair = _1b860a376_expr.operator jule::Ptr<_212b1a122_FieldExprPair>();
							if ((_1b860a112_i > 0LL) && (!(_84217_paired))) {
								(*this)._method_push_err((*(_84625_pair))._field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							}
							_84217_paired=true;
							(*this)._method_check_pair(_84625_pair,_83329_exprs);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_212b16162_Expr>>()) {
						_case_begin_1b860ab07:;
						{
							jule::Ptr<_212b16162_Expr> _85325_e = _1b860a376_expr.operator jule::Ptr<_212b16162_Expr>();
							if (_84217_paired) {
								(*this)._method_push_err((*(_85325_e))._field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							}
							if (_1b860a112_i >= static_cast<jule::I64>((*((*this)._field_s))._field_fields.len())) {
								(*this)._method_push_err((*(_85325_e))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_1b860a0ac;
							}
							jule::Ptr<_1e83b2cbe_FieldIns> _86225_field = (*((*this)._field_s))._field_fields[_1b860a112_i];
							jule::Ptr<_1ce76121e_TypeKind> _86425_prefix = (*((*this)._field_e))._field_prefix;
							__JULE_DEFER({
								(*((*this)._field_e))._field_prefix=_86425_prefix;
							});
							(*((*this)._field_e))._field_prefix=(*(_86225_field))._field_kind;
							jule::Ptr<_1ce727449_Data> _86825_d = (*((*this)._field_e))._method_eval_expr_kind((*(_85325_e))._field_kind);
							if ((_86825_d == nullptr)) {
								goto _iter_next_1b860a0ac;
							}
							(*this)._method_push_match(_86225_field,_86825_d,(*(_85325_e))._field_token);
						}
					}
					_match_end_1b860a8e8:;
				}
			}
			_iter_next_1b860a0ac:;
			++it;
			_1b860a112_i++;
			goto _iter_begin_1b860a0ac;
		}
		_iter_end_1b860a0ac:;
	}
	if ((!(_84217_paired))) {
		jule::I64 _87917_n = (*((*this)._field_s))._field_fields.len();
		jule::I64 _88021_diff = _87917_n - static_cast<jule::I64>(_83329_exprs.len());
		{
			
			if ((_88021_diff <= 0LL)) {
				_case_begin_1b8613170:;
				{
					return;
				}
			}
			_match_end_1b8613071:;
		}
		jule::Str _88621_idents = jule::Str();
		for (; (_88021_diff > 0LL); (_88021_diff)--) {
			{
				_88621_idents+=jule::Str(", ", 2) + (*((*((*((*this)._field_s))._field_fields[_87917_n - _88021_diff]))._field_decl))._field_ident;
			}
		_iter_next_1b8612537:;
		}
		_iter_end_1b8612537:;
		(_88621_idents).mut_slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_88621_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce70e497_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c0bbc_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline void _1ce710773_RetTypeChecker::_method_prepare_types(void) {
	if (((*this)._field_f != nullptr)) {
		(*this)._field_types=_1ce6e8382_get_result_types((*((*this)._field_f))._field_result);
	}
}



inline void _1ce710773_RetTypeChecker::_method_prepare_exprs(jule::Ptr<_212b16162_Expr>& _106737_e) {
	if ((_106737_e == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ (*(_106737_e))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_212b169e2_TupleExpr>>()) {
			_case_begin_1b863755c:;
			{
				(*this)._field_exprs=(*((*(_106737_e))._field_kind.operator jule::Ptr<_212b169e2_TupleExpr>()))._field_expr;
			}
		}
		else {
			_case_begin_1b8637bab:;
			{
				(*this)._field_exprs = jule::alloc_for_append((*this)._field_exprs,1);(*this)._field_exprs.__push(_106737_e);
			}
		}
		_match_end_1b86376b1:;
	}
}



inline void _1ce710773_RetTypeChecker::_method_ret_vars(void) {
	if (((*this)._field_f == nullptr) || (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ptr<_1ce6cecb4_Var>>::alloc(0LL,static_cast<jule::I64>((*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents.len()));
	jule::Ptr<_1ce6882bc_ScopeChecker> _108517_root_scope = (*((*this)._field_sc))._method_get_root();
	jule::I64 _108717_j = 0LL;
	{
		auto &expr = (*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_1b863b5b6:;
		if (it != expr.end()) {
			jule::I64 _1b863b60a_i = it - expr.begin();
			_212ae5c02_Token _1b863b86e_ident = *it;
			{
				if ((!(_212ae9255_is_ignore_ident(_1b863b86e_ident._field_kind)))) {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.__push((*((*(_108517_root_scope))._field_table))._field_vars[_108717_j]);
					(_108717_j)++;
				} else {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.__push(jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var(jule::Ptr<_1ce62e86d_Scope>(),_212ae5c02_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),(*this)._field_types[_1b863b60a_i])),jule::Ptr<_1ce7281d6_Value>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>())));
				}
			}
			_iter_next_1b863b5b6:;
			++it;
			_1b863b60a_i++;
			goto _iter_begin_1b863b5b6;
		}
		_iter_end_1b863b5b6:;
	}
	if ((_108717_j == 0LL)) {
		(*this)._field_vars=nullptr;
	}
}



inline void _1ce710773_RetTypeChecker::_method_check_exprs(void) {
	if (((*this)._field_exprs.len() == 0LL)) {
		return;
	}
	jule::Slice<jule::Ptr<_1ce727449_Data>> _111117_datas = jule::Slice<jule::Ptr<_1ce727449_Data>>::alloc(0LL,static_cast<jule::I64>((*this)._field_exprs.len()));
	{
		auto &expr = (*this)._field_exprs;
		auto it = expr.begin();
		_iter_begin_1b864009d:;
		if (it != expr.end()) {
			jule::I64 _1b86401ad_i = it - expr.begin();
			jule::Ptr<_212b16162_Expr> _1b8640301_expr = *it;
			{
				if (_1b86401ad_i >= static_cast<jule::I64>((*this)._field_types.len())) {
					goto _iter_end_1b864009d;
				}
				jule::Ptr<_1ce76121e_TypeKind> _111821_t = (*this)._field_types[_1b86401ad_i];
				jule::Ptr<_1ce727449_Data> _112021_d = (*((*((*((*this)._field_sc))._field_s))._method_evalp((*this)._field_sc,_111821_t)))._method_eval_expr(_1b8640301_expr);
				if ((_112021_d == nullptr)) {
					goto _iter_next_1b864009d;
				}
				_111117_datas = jule::alloc_for_append(_111117_datas,1);_111117_datas.__push(_112021_d);
				if ((!((*(_112021_d))._field_mutable)) && (*((*(_112021_d))._field_kind))._method_mutable()) {
					(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;
				}
				_1ce70c671_AssignTypeChecker _113221_ac = _1ce70c671_AssignTypeChecker((*((*this)._field_sc))._field_s,_111821_t,_112021_d,(*this)._field_error_token);
				_113221_ac._method_check();
			}
			_iter_next_1b864009d:;
			++it;
			_1b86401ad_i++;
			goto _iter_begin_1b864009d;
		}
		_iter_end_1b864009d:;
	}
	if ((_111117_datas.len() > 1LL)) {
		(*this)._field_model=jule::Any(jule::new_struct<_1e83c95aa_TupleExprModel>(new( std::nothrow ) _1e83c95aa_TupleExprModel(_111117_datas)));
	} else if ((_111117_datas.len() == 1LL)) {
		(*this)._field_model=(*(_111117_datas[0LL]))._field_model;
	}
}



inline jule::Bool _1ce710773_RetTypeChecker::_method_check(jule::Ptr<_212b16162_Expr>& _115129_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_115129_e);
	(*this)._method_ret_vars();
	jule::I64 _115613_n = (*this)._field_exprs.len();
	if ((_115613_n == 0LL) && ((*this)._field_types.len() > 0LL)) {
		if ((!((*((*((*this)._field_f))._field_decl))._method_any_var()))) {
			(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		}
		return true;
	}
	if (((_115613_n > 0LL) && ((*this)._field_f != nullptr)) && (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	}
	if (_115613_n > static_cast<jule::I64>((*this)._field_types.len())) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if (_115613_n < static_cast<jule::I64>((*this)._field_types.len())) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce710773_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1c9b5_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c1aad_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c2581_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1ce05_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c3928_IndexingExprModel &_Src) {
	_Stream << "IndexingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}



inline _1ce72a084_BinaryEval _1ce72a084_BinaryEval::_static_method_new_plain(jule::Ptr<_1ce728879_Eval> _338129_e) {
	return _1ce72a084_BinaryEval(_338129_e,jule::Ptr<_1ce727449_Data>(),jule::Ptr<_1ce727449_Data>(),_212ae5c02_Token());
}



inline _1ce72a084_BinaryEval _1ce72a084_BinaryEval::_static_method_new(jule::Ptr<_1ce728879_Eval> _338723_e,_212ae5c02_Token _338737_op) {
	return _1ce72a084_BinaryEval(_338723_e,jule::Ptr<_1ce727449_Data>(),jule::Ptr<_1ce727449_Data>(),_338737_op);
}



inline jule::Bool _1ce72a084_BinaryEval::_method_check_type_compatibility(void) {
	return (*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*this)._field_l))._field_kind,(*((*this)._field_r))._field_kind,(*this)._field_op);
}



inline jule::Bool _1ce72a084_BinaryEval::_method_check_struct_common_operator_compatibility(void) {
	jule::Ptr<_1e83d630e_FnIns> _340117_overload = nullptr;
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_1b7db4d51:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_shl;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_1b7db39cb:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_shr;
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_1b7db37de:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_add;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_1b7db3855:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_sub;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_1b7db38bb:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_div;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b7db4a54:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_mul;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_1b7db4aba:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_mod;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_1b7db4b31:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_bit_and;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_1b7db4b97:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_bit_or;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_1b7db4db7:;
			{
				_340117_overload=(*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_bit_xor;
			}
		}
		else {
			_case_begin_1b7db32b1:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return false;
			}
		}
		_match_end_1b7db3646:;
	}
	if ((_340117_overload == nullptr)) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
		return false;
	}
	jule::Ptr<_1e83d5bb0_ParamIns> _343317_p = (*(_340117_overload))._field_params[1LL];
	return (*((*((*this)._field_e))._field_s))._method_check_assign_type((*((*(_343317_p))._field_decl))._field_reference,(*(_343317_p))._field_kind,(*this)._field_r,(*this)._field_op);
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_nil(void) {
	if ((!((*((*((*this)._field_r))._field_kind))._method_nil_compatible()))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7dc1852:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7dbe1e0:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_1b7dc06b9:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_enum(void) {
	jule::Ptr<_1e8648917_Enum> _345817_enm = (*((*((*this)._field_l))._field_kind))._method_enm();
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7dc2ee6:;
			{
				jule::Ptr<_1ce76121e_TypeKind> _346221_rkind = (*((*this)._field_r))._field_kind;
				if (((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr)) {
					_346221_rkind=(*((*((*((*((*this)._field_r))._field_kind))._method_enm()))._field_kind))._field_kind;
				}
				if ((!((*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*(_345817_enm))._field_kind))._field_kind,_346221_rkind,(*this)._field_op)))) {
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		_match_end_1b7dc2e91:;
	}
	if (((*((*((*this)._field_r))._field_kind))._method_enm() == nullptr) || (_345817_enm != (*((*((*this)._field_r))._field_kind))._method_enm())) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_345817_enm))._field_ident),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_1b7dc92e9:;
			{
				if ((!(_1ce6828d2_is_num((*((*((*(_345817_enm))._field_kind))._field_kind))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_345817_enm))._field_ident)}));
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_1b7dc93a4:;
			{
				if (((*((*((*(_345817_enm))._field_kind))._field_kind))._method_prim() == nullptr) || (!(_1ce682173_is_int((*((*((*((*(_345817_enm))._field_kind))._field_kind))._method_prim()))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_345817_enm))._field_ident)}));
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_1b7dc658d:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_345817_enm))._field_ident)}));
				return nullptr;
			}
		}
		_match_end_1b7dc8084:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_sptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7dd1037:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7dce93c:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7dce563:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_1b7dd34ac:;
			{
				if ((!((*this)._method_check_type_compatibility()))) {
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_1b7dd359a:;
			{
				if (((*((*((*this)._field_l))._field_kind))._method_ptr() == nullptr)) {
					std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				}
				if ((*((*((*((*this)._field_l))._field_kind))._method_ptr()))._method_is_unsafe()) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				}
				if ((!(_1ce72cbad_is_ptr_arithmetic_compatible_int((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>({jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_1b7dcec5b:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7dd1e7d:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7ddacbc:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7dd96e4:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7dd964a:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7ddd6d7:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7ddc153:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7ddbc68:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7de1102:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7ddea6d:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7dde683:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_struct(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1)) {
			_case_begin_1b7de209d:;
			{
				if (((*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_gt == nullptr)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_1b7de2114:;
			{
				if (((*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_gt_eq == nullptr)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_1b7de217a:;
			{
				if (((*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_lt == nullptr)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_1b7de2202:;
			{
				if (((*((*((*((*this)._field_l))._field_kind))._method_strct()))._field_operators._field_lt_eq == nullptr)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7de2279:;
			{
				if ((!((*this)._method_check_type_compatibility()))) {
					return nullptr;
				}
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		_match_end_1b7de2048:;
	}
	if ((!((*this)._method_check_struct_common_operator_compatibility()))) {
		return nullptr;
	}
	return (*this)._field_l;
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7dee41d:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7ded054:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7deceee:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_any(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7e0161d:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7ded1ca:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_1b7e00364:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_1b7e03e4a:;
			{
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_1b7e028b6:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_1b7e024cb:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_str(void) {
	jule::Str _373117_rk = (*((*((*this)._field_r))._field_kind))._method_to_str();
	if ((_373117_rk != jule::Str("str", 3))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_373117_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_1b7e07536:;
			{
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_1b7e0759c:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		else {
			_case_begin_1b7e05347:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_1b7e0627c:;
	}
}



inline void _1ce72a084_BinaryEval::_method_set_type_to_greater(void) {
	if ((*((*this)._field_l))._method_is_const()) {
		if ((!((*((*this)._field_r))._method_is_const()))) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
			return;
		}
		goto _julec_label_set;
	}
	if ((*((*this)._field_r))._method_is_const()) {
		return;
	}
	_julec_label_set:;
	if (_1ce680281_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
		(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
	}
}



inline void _1ce72a084_BinaryEval::_method_check_mod_data(jule::Ptr<_1ce727449_Data>& _377438_d) {
	if ((!((*(_377438_d))._method_is_const()))) {
		if (((*((*(_377438_d))._field_kind))._method_prim() == nullptr) || (!(_1ce682173_is_int((*((*((*(_377438_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		}
		return;
	}
	{
		
		if (_1ce6dcd5a_sig_assignable(jule::Str("i64", 3),_377438_d)) {
			_case_begin_1b7e0eb6a:;
			{
				(*((*(_377438_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_377438_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1ce6e348c_unsig_assignable(jule::Str("u64", 3),_377438_d)) {
			_case_begin_1b7e0e939:;
			{
				(*((*(_377438_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_377438_d))._field_constant))._method_as_u64()));
			}
		}
		else {
			_case_begin_1b7e0e7c4:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_1b7e0e74c:;
	}
}



inline void _1ce72a084_BinaryEval::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Bool _1ce72a084_BinaryEval::_method_numbers_are_compatibile(jule::Str& _379639_lk,jule::Str& _379649_rk) {
	if ((!(_1ce6828d2_is_num(_379649_rk)))) {
		return false;
	}
	if ((*((*this)._field_l))._method_is_const()) {
		return true;
	}
	if ((_379639_lk == jule::Str("f32", 3))) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return (_379649_rk == jule::Str("f32", 3));
	}
	if ((_379639_lk == jule::Str("f64", 3))) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return (_379649_rk == jule::Str("f64", 3));
	}
	if ((*((*this)._field_r))._method_is_const()) {
		return true;
	}
	return _379639_lk == _379649_rk;
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_float(void) {
	jule::Str _382613_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _382713_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	if ((!((*this)._method_numbers_are_compatibile(_382613_lk,_382713_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_382613_lk),jule::Any(_382713_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_1b7e192a1:;
			{
				if ((!((*((*this)._field_l))._method_is_const())) || (!(_1ce6e3635_int_assignable(jule::Str("i64", 3),(*this)._field_l)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_382613_lk),jule::Any(_382713_rk)}));
					return nullptr;
				}
				if ((!((*((*this)._field_r))._method_is_const())) || (!(_1ce6e3635_int_assignable(jule::Str("u64", 3),(*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_382613_lk),jule::Any(_382713_rk)}));
					return nullptr;
				}
				(*((*((*this)._field_l))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*((*this)._field_l))._field_constant))._method_as_i64()));
				(*((*((*this)._field_r))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*((*this)._field_r))._field_constant))._method_as_u64()));
				if ((!(_1ce72c471_is_ok_for_shifting((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		_match_end_1b7e19405:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_1b7e1949e:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		_match_end_1b7e200a9:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_1b7e22045:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_1b7e22133:;
			{
				if ((!(_1ce682173_is_int(_382713_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_382613_lk),jule::Any(_382713_rk)}));
					return nullptr;
				}
				(*this)._method_mod();
				return (*this)._field_r;
			}
		}
		else {
			_case_begin_1b7e1e394:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b7e20dac:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_int(void) {
	jule::Str _389013_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _389113_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_1b7e2580c:;
			{
				if ((!(_1ce682173_is_int(_389013_lk))) || (!(_1ce682173_is_int(_389113_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_389013_lk),jule::Any(_389113_rk)}));
					return nullptr;
				}
				if ((!(_1ce72c471_is_ok_for_shifting((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		_match_end_1b7e257a7:;
	}
	if ((!((*this)._method_numbers_are_compatibile(_389013_lk,_389113_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_389013_lk),jule::Any(_389113_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_1b7e2913a:;
			{
				return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
			}
		}
		_match_end_1b7e29228:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_1b7e2b45b:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_1b7e2b549:;
			{
				(*this)._method_mod();
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_1b7e2a988:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_1b7e2a2d4:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_prim(void) {
	jule::Ptr<_1ce762330_Prim> _394913_prim = (*((*((*this)._field_l))._field_kind))._method_prim();
	{
		
		if ((*(_394913_prim))._method_is_bool()) {
			_case_begin_1b7e2d88c:;
			{
				return (*this)._method_eval_bool();
			}
		}
		else if ((*(_394913_prim))._method_is_str()) {
			_case_begin_1b7e2d914:;
			{
				return (*this)._method_eval_str();
			}
		}
		_match_end_1b7e2d7d2:;
	}
	if (((*((*((*this)._field_r))._field_kind))._method_prim() == nullptr)) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_394913_prim))._method_to_str()),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		
		if (_1ce6825b3_is_float((*(_394913_prim))._field_kind)) {
			_case_begin_1b7e319a0:;
			{
				return (*this)._method_eval_float();
			}
		}
		else if (_1ce682173_is_int((*(_394913_prim))._field_kind)) {
			_case_begin_1b7e31a5a:;
			{
				return (*this)._method_eval_int();
			}
		}
		else {
			_case_begin_1b7e311ec:;
			{
				return nullptr;
			}
		}
		_match_end_1b7e31197:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval_op(void) {
	{
		
		if ((*((*((*this)._field_l))._field_kind))._method_void()) {
			_case_begin_1b7e336a5:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_r))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_1b7e33793:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_1b7e33809;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_l))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_1b7e33809:;
			{
				return (*this)._method_eval_any();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_is_nil()) {
			_case_begin_1b7e331dd:;
			{
				return (*this)._method_eval_nil();
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr)) {
			_case_begin_1b7e33254:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_1b7e332ba;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_enm() != nullptr)) {
			_case_begin_1b7e332ba:;
			{
				return (*this)._method_eval_enum();
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_sptr() != nullptr)) {
			_case_begin_1b7e33331:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_1b7e33892;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_sptr() != nullptr)) {
			_case_begin_1b7e33892:;
			{
				return (*this)._method_eval_sptr();
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_ptr() != nullptr)) {
			_case_begin_1b7e33908:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_1b7e3396e;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_ptr() != nullptr)) {
			_case_begin_1b7e3396e:;
			{
				return (*this)._method_eval_ptr();
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_arr() != nullptr)) {
			_case_begin_1b7e339d5:;
			{
				return (*this)._method_eval_arr();
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_slc() != nullptr)) {
			_case_begin_1b7e33a4b:;
			{
				return (*this)._method_eval_slc();
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_fnc() != nullptr)) {
			_case_begin_1b7e33ab2:;
			{
				return (*this)._method_eval_fn();
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_trt() != nullptr)) {
			_case_begin_1b7e33b28:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_1b7e33b8e;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_trt() != nullptr)) {
			_case_begin_1b7e33b8e:;
			{
				return (*this)._method_eval_trait();
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_strct() != nullptr)) {
			_case_begin_1b7e33c16:;
			{
				return (*this)._method_eval_struct();
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr)) {
			_case_begin_1b7e33c8d:;
			{
				return (*this)._method_eval_prim();
			}
		}
		else {
			_case_begin_1b7e33078:;
			{
				return nullptr;
			}
		}
		_match_end_1b7e32eac:;
	}
}



inline void _1ce72a084_BinaryEval::_method_eval_const(jule::Ptr<_1ce727449_Data>& _401934_d) {
	{
		
		if ((_401934_d == nullptr)) {
			_case_begin_1b7e43550:;
			{
				return;
			}
		}
		else if ((!((*((*this)._field_l))._method_is_const())) || (!((*((*this)._field_r))._method_is_const()))) {
			_case_begin_1b7e435c7:;
			{
				(*(_401934_d))._field_constant=nullptr;
				return;
			}
		}
		_match_end_1b7e43451:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_1b7e447e8:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant)) == (*((*((*this)._field_r))._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_1b7e44d6a:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant)) != (*((*((*this)._field_r))._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_1b7e44650:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_or((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_1b7e446b6:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_and((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_1b7e4472c:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant)) > (*((*((*this)._field_r))._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_1b7e44e25:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant)) < (*((*((*this)._field_r))._field_constant)));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_1b7e44e8b:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant)) >= (*((*((*this)._field_r))._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_1b7e45013:;
			{
				(*(_401934_d))._field_constant=_1ce4b898d_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant)) <= (*((*((*this)._field_r))._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_1b7e4508a:;
			{
				(*((*((*this)._field_l))._field_constant))._method_add((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_1b7e45112:;
			{
				(*((*((*this)._field_l))._field_constant))._method_sub((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_1b7e45189:;
			{
				(*((*((*this)._field_l))._field_constant))._method_mul((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_1b7e45211:;
			{
				jule::Bool _405617_ok = (*((*((*this)._field_l))._field_constant))._method_div((*((*((*this)._field_r))._field_constant)));
				if ((!(_405617_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
				jule::Ptr<_1ce762330_Prim> _406121_prim = (*((*(_401934_d))._field_kind))._method_prim();
				{
					
					if (_1ce6818d1_is_sig_int((*(_406121_prim))._field_kind)) {
						_case_begin_1b7e542b9:;
						{
							(*((*(_401934_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_401934_d))._field_constant))._method_as_i64()));
						}
					}
					else if (_1ce681caa_is_unsig_int((*(_406121_prim))._field_kind)) {
						_case_begin_1b7e54341:;
						{
							(*((*(_401934_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_401934_d))._field_constant))._method_as_u64()));
						}
					}
					_match_end_1b7e5420e:;
				}
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_1b7e45288:;
			{
				jule::Bool _406917_ok = (*((*((*this)._field_l))._field_constant))._method_mod((*((*((*this)._field_r))._field_constant)));
				if ((!(_406917_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_1b7e45310:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_or((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_1b7e45387:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_and((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_1b7e4540e:;
			{
				(*((*((*this)._field_l))._field_constant))._method_xor((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_1b7e45486:;
			{
				(*((*((*this)._field_l))._field_constant))._method_lshift((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_1b7e4550d:;
			{
				(*((*((*this)._field_l))._field_constant))._method_rshift((*((*((*this)._field_r))._field_constant)));
				(*(_401934_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		_match_end_1b7e44d15:;
	}
	_1ce72dbd1_apply_cast_model_by_enum(_401934_d,(*((*(_401934_d))._field_kind))._method_enm());
	jule::Ptr<_1ce762330_Prim> _409317_prim = (*((*(_401934_d))._field_kind))._method_prim();
	if ((_409317_prim == nullptr) || (!(_1ce6828d2_is_num((*(_409317_prim))._method_to_str())))) {
		(*(_401934_d))._field_model=jule::Any((*(_401934_d))._field_constant);
		return;
	}
	if (((*this)._field_op._field_kind != jule::Str("<<", 2)) && ((*this)._field_op._field_kind != jule::Str(">>", 2))) {
		if (((*((*this)._field_l))._field_model == (*((*this)._field_l))._field_constant) && ((*((*this)._field_r))._field_model != (*((*this)._field_r))._field_constant)) {
			(*(_401934_d))._field_kind=(*((*this)._field_r))._field_kind;
			_409317_prim=(*((*(_401934_d))._field_kind))._method_prim();
		}
	}
	_1ce72b33d_fit_bitsize(_401934_d);
	_1ce72e2db_cast_const_by_type((*(_409317_prim))._field_kind,_401934_d);
}



inline void _1ce72a084_BinaryEval::_method_check_data(jule::Ptr<_1ce727449_Data>& _410934_d) {
	jule::Ptr<_1e83d630e_FnIns> _411013_f = (*((*(_410934_d))._field_kind))._method_fnc();
	if (((_411013_f != nullptr) && ((*(_411013_f))._field_decl != nullptr)) && (*((*(_411013_f))._field_decl))._method_is_method()) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	}
}



inline void _1ce72a084_BinaryEval::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline void _1ce72a084_BinaryEval::_method_set_model(jule::Ptr<_1ce727449_Data>& _412133_d) {
	if ((*(_412133_d))._method_is_const()) {
		if (((*((*this)._field_l))._field_model == (*((*this)._field_l))._field_constant) && ((*((*this)._field_r))._field_model == (*((*this)._field_r))._field_constant)) {
			return;
		}
	}
	jule::Ptr<_1ce727449_Data> _412918_l = (*this)._field_l;
	jule::Ptr<_1ce727449_Data> _412925_r = (*this)._field_r;
	std::tie(_412918_l,_412925_r) = std::make_tuple((*this)._field_l,(*this)._field_r);
	if ((!((*(_412918_l))._method_good_operand(_412925_r)))) {
		std::tie(_412918_l,_412925_r) = std::make_tuple(_412925_r,_412918_l);
	}
	(*(_412133_d))._field_model=jule::Any(jule::new_struct<_1e83be3c4_BinopExprModel>(new( std::nothrow ) _1e83be3c4_BinopExprModel(jule::new_struct<_1e83bdbcb_OperandExprModel>(new( std::nothrow ) _1e83bdbcb_OperandExprModel((*(_412918_l))._field_kind,(*(_412918_l))._field_model)),jule::new_struct<_1e83bdbcb_OperandExprModel>(new( std::nothrow ) _1e83bdbcb_OperandExprModel((*(_412925_r))._field_kind,(*(_412925_r))._field_model)),(*this)._field_op)));
}



inline void _1ce72a084_BinaryEval::_method_post_eval(jule::Ptr<_1ce727449_Data>& _414733_d) {
	(*(_414733_d))._field_lvalue=false;
	(*this)._method_set_model(_414733_d);
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_solve_explicit(jule::Ptr<_1ce727449_Data>& _415238_l,jule::Ptr<_1ce727449_Data>& _415253_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_415238_l,_415253_r);
	(*this)._method_check_datas();
	jule::Ptr<_1ce727449_Data> _415717_d = (*this)._method_eval_op();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_415238_l,_415253_r);
	(*this)._method_eval_const(_415717_d);
	if ((_415717_d != nullptr)) {
		(*(_415717_d))._field_mutable=true;
		(*this)._method_post_eval(_415717_d);
	}
	return _415717_d;
}



inline jule::Ptr<_1ce727449_Data> _1ce72a084_BinaryEval::_method_eval(jule::Ptr<_212b19792_BinopExpr>& _417228_op) {
	if (((*(_417228_op))._field_op._field_kind == jule::Str("=", 1))) {
		(*((*this)._field_e))._method_push_err((*(_417228_op))._field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		(*((*this)._field_e))._method_push_suggestion(jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _417917_l = (*((*this)._field_e))._method_eval_expr_kind((*(_417228_op))._field_left);
	if ((_417917_l == nullptr) || ((*(_417917_l))._field_kind == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ce76121e_TypeKind> _418417_prefix = (*((*this)._field_e))._field_prefix;
	(*((*this)._field_e))._field_prefix=(*(_417917_l))._field_kind;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_418417_prefix;
	});
	jule::Ptr<_1ce727449_Data> _418717_r = (*((*this)._field_e))._method_eval_expr_kind((*(_417228_op))._field_right);
	if ((_418717_r == nullptr) || ((*(_418717_r))._field_kind == nullptr)) {
		return nullptr;
	}
	(*this)._field_op=(*(_417228_op))._field_op;
	jule::Ptr<_1ce727449_Data> _419417_d = (*this)._method_solve_explicit(_417917_l,_418717_r);
	if (((_419417_d != nullptr) && (*(_417917_l))._field_is_rune) && (*(_418717_r))._field_is_rune) {
		(*(_419417_d))._field_is_rune=true;
	}
	return _419417_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce72a084_BinaryEval &_Src) {
	_Stream << "BinaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce75e6a1_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1d345_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1d785_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1dbc5_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c585e_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83c62cc_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1e115_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2129e34b2_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b1e995_ParamDecl::_method_is_self(void) {
	return _21280457b_has_suffix((*this)._field_ident,jule::Str("self", 4));
}



inline jule::Bool _212b1e995_ParamDecl::_method_is_ref(void) {
	return (!((*this)._field_ident.empty())) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1e995_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b1edd5_FnDecl::_method_is_anon(void) {
	return ((*this)._field_ident == jule::Str("<anonymous>", 11));
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1edd5_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b20325_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline void _1ce767731_TypeChecker::_method_push_err(_212ae5c02_Token _70727_token,jule::Str _70741_fmt,jule::Slice<jule::Any> _70754_args) {
	(*((*this)._field_s))._method_push_err(_70727_token,_70741_fmt,_70754_args);
}



inline void _1ce767731_TypeChecker::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _1ce767731_TypeChecker::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Ptr<_1ce762330_Prim> _1ce767731_TypeChecker::_method_build_prim(jule::Ptr<_2129908e3_IdentTypeDecl>& _71930_decl) {
	if ((!(_1ce766ae8_is_prim((*(_71930_decl))._field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (((*(_71930_decl))._field_generics.len() > 0LL)) {
		(*this)._method_push_err((*(_71930_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_71930_decl))._field_ident)}));
		return nullptr;
	}
	return _1ce7663cd_build_prim_type((*(_71930_decl))._field_ident);
}



inline void _1ce767731_TypeChecker::_method_push_cycle_error(jule::Any _73331_def1,jule::Any _73342_def2,jule::Str& _73358_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _73613_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _73629_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _73629_def };
			
			if (_match_expr.type_is<jule::Ptr<_1ce75e6a1_TypeAlias>>()) {
				_case_begin_1b897c990:;
				{
					return (*(_73629_def.operator jule::Ptr<_1ce75e6a1_TypeAlias>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
				_case_begin_1b897c86e:;
				{
					return (*(_73629_def.operator jule::Ptr<_1e83b1718_Struct>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1e8648917_Enum>>()) {
				_case_begin_1b897c8d5:;
				{
					return (*(_73629_def.operator jule::Ptr<_1e8648917_Enum>()))._field_ident;
				}
			}
			else {
				_case_begin_1b897c440:;
				{
					return jule::Str();
				}
			}
			_match_end_1b897c363:;
		}
	});
	jule::Str _74913_def1_ident = _73613_get_ident(_73331_def1);
	jule::Str _75013_def2_ident = _73613_get_ident(_73342_def2);
	jule::Str _75113_refers_to = _212880739_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_74913_def1_ident),jule::Any(_75013_def2_ident)}));
	(_73358_message).buffer.insert(0, (((_211e22edb_repeat(jule::Str(" ", 1),4LL) + _75113_refers_to) + jule::Str("\n", 1))));
}



inline jule::Bool _1ce767731_TypeChecker::_method_check_cross_cycle(jule::Any _75532_decl,jule::Str& _75548_message) {
	{
		auto &_match_expr{ _75532_decl };
		
		if (_match_expr.type_is<jule::Ptr<_1ce75e6a1_TypeAlias>>()) {
			_case_begin_1b89812ce:;
			{
				jule::Ptr<_1ce75e6a1_TypeAlias> _75817_ta = _75532_decl.operator jule::Ptr<_1ce75e6a1_TypeAlias>();
				{
					auto &expr = (*(_75817_ta))._field_refers;
					auto it = expr.begin();
					_iter_begin_1b89821e2:;
					if (it != expr.end()) {
						jule::Any &_1b8982258_d = *it;
						{
							{
								
								if (_1b8982258_d == (*((*this)._field_referencer))._field_owner) {
									_case_begin_1b8982984:;
									{
										(*this)._method_push_cycle_error(jule::Any(_75817_ta),_1b8982258_d,_75548_message);
										return false;
									}
								}
								else if ((!((*this)._method_check_cross_cycle(_1b8982258_d,_75548_message)))) {
									_case_begin_1b8982a0b:;
									{
										(*this)._method_push_cycle_error(jule::Any(_75817_ta),_1b8982258_d,_75548_message);
										return false;
									}
								}
								_match_end_1b8982885:;
							}
						}
						_iter_next_1b89821e2:;
						++it;
						goto _iter_begin_1b89821e2;
					}
					_iter_end_1b89821e2:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b8981356:;
			{
				jule::Ptr<_1e83b1718_Struct> _77017_s = _75532_decl.operator jule::Ptr<_1e83b1718_Struct>();
				{
					auto &expr = (*(_77017_s))._field_depends;
					auto it = expr.begin();
					_iter_begin_1b8982632:;
					if (it != expr.end()) {
						jule::Ptr<_1e83b1718_Struct> &_1b8984ba6_d = *it;
						{
							{
								
								if ((*((*this)._field_referencer))._field_owner == jule::Any(_1b8984ba6_d)) {
									_case_begin_1b89853b0:;
									{
										(*this)._method_push_cycle_error(jule::Any(_77017_s),jule::Any(_1b8984ba6_d),_75548_message);
										return false;
									}
								}
								else if ((!((*this)._method_check_cross_cycle(jule::Any(_1b8984ba6_d),_75548_message)))) {
									_case_begin_1b8985437:;
									{
										(*this)._method_push_cycle_error(jule::Any(_77017_s),jule::Any(_1b8984ba6_d),_75548_message);
										return false;
									}
								}
								_match_end_1b89852b1:;
							}
						}
						_iter_next_1b8982632:;
						++it;
						goto _iter_begin_1b8982632;
					}
					_iter_end_1b8982632:;
				}
			}
		}
		_match_end_1b89811e1:;
	}
	return true;
}



inline jule::Bool _1ce767731_TypeChecker::_method_check_illegal_cycles(jule::Ptr<_2129908e3_IdentTypeDecl>& _78940_ident,jule::Any _78967_decl) {
	jule::Bool _78980_ok = jule::Bool();
	if (((*this)._field_referencer == nullptr)) {
		_78980_ok = true;
		return _78980_ok;
	}
	{
		auto &_match_expr{ _78967_decl };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b89880c7:;
			{
				if ((*this)._field_not_plain || (*(_78967_decl.operator jule::Ptr<_1e83b1718_Struct>()))._field_cpp_linked) {
					_78980_ok = true;
					return _78980_ok;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce75e6a1_TypeAlias>>()) {
			_case_begin_1b8987bcb:;
			{
				if ((*(_78967_decl.operator jule::Ptr<_1ce75e6a1_TypeAlias>()))._field_cpp_linked) {
					_78980_ok = true;
					return _78980_ok;
				}
			}
		}
		_match_end_1b8988072:;
	}
	if (_78967_decl == (*((*this)._field_referencer))._field_owner) {
		(*this)._method_push_err((*(_78940_ident))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_referencer))._field_ident)}));
		_78980_ok = false;
		return _78980_ok;
	}
	jule::Str _81217_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_78967_decl,_81217_message)))) {
		jule::Str _81521_err_msg = _81217_message;
		_81217_message=jule::Str();
		(*this)._method_push_cycle_error((*((*this)._field_referencer))._field_owner,_78967_decl,_81217_message);
		_81521_err_msg=_81521_err_msg + _81217_message;
		(*this)._method_push_err((*(_78940_ident))._field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_81521_err_msg)}));
		_78980_ok = false;
		return _78980_ok;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_1ce75e6a1_TypeAlias>>()) {
			_case_begin_1b898cbc0:;
			{
				{
					(*((*((*this)._field_referencer))._field_refs))=jule::append((*((*((*this)._field_referencer))._field_refs)),jule::Slice<jule::Any>({_78967_decl}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b898cc36:;
			{
				{
					auto &_match_expr{ _78967_decl };
					
					if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
						_case_begin_1b898d462:;
						{
							jule::Ptr<_1e83b1718_Struct> _83125_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_1e83b1718_Struct>();
							(*(_83125_s))._field_depends = jule::alloc_for_append((*(_83125_s))._field_depends,1);(*(_83125_s))._field_depends.__push(_78967_decl.operator jule::Ptr<_1e83b1718_Struct>());
						}
					}
					_match_end_1b898d3a7:;
				}
			}
		}
		_match_end_1b898ac56:;
	}
	_78980_ok = true;
	return _78980_ok;
}



inline jule::Trait<_1ce760828_Kind> _1ce767731_TypeChecker::_method_from_type_alias(jule::Ptr<_2129908e3_IdentTypeDecl>& _83935_decl,jule::Ptr<_1ce75e6a1_TypeAlias>& _83962_ta) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_83962_ta))._field_public,(*(_83962_ta))._field_token)))) {
		(*this)._method_push_err((*(_83935_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_83935_decl))._field_ident)}));
		return nullptr;
	}
	(*(_83962_ta))._field_used=true;
	if (((*(_83935_decl))._field_generics.len() > 0LL)) {
		(*this)._method_push_err((*(_83935_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_83935_decl))._field_ident)}));
		return nullptr;
	}
	if ((!((*this)._field_inscatch)) && ((*this)._field_banned_generics != nullptr)) {
		(*this)._field_inscatch=true;
		{
			auto &expr = (*this)._field_banned_generics;
			auto it = expr.begin();
			_iter_begin_1b88e4ad3:;
			if (it != expr.end()) {
				jule::Ptr<_1ce75e6a1_TypeAlias> _1b88e5d04_bg = *it;
				{
					if ((_1b88e5d04_bg == _83962_ta) || (((*((*(_83962_ta))._field_kind))._field_kind != nullptr) && (*((*((*(_83962_ta))._field_kind))._field_kind))._method_equals((*((*(_1b88e5d04_bg))._field_kind))._field_kind))) {
						(*this)._field_inscatch=false;
						goto _iter_end_1b88e4ad3;
					}
				}
				_iter_next_1b88e4ad3:;
				++it;
				goto _iter_begin_1b88e4ad3;
			}
			_iter_end_1b88e4ad3:;
		}
	}
	if ((*this)._field_inscatch) {
		{
			auto &expr = (*this)._field_banned_generics;
			auto it = expr.begin();
			_iter_begin_1b88e7575:;
			if (it != expr.end()) {
				jule::Ptr<_1ce75e6a1_TypeAlias> _1b88e6134_bg = *it;
				{
					if (_1b88e6134_bg == _83962_ta) {
						(*this)._method_push_err((*(_83935_decl))._field_token,jule::Str("type declaration causes initiation cycle", 40),jule::Slice<jule::Any>({jule::Any((*(_83935_decl))._field_ident)}));
						return nullptr;
					}
					{
						auto &expr = (*(_83962_ta))._field_generics;
						auto it = expr.begin();
						_iter_begin_1b88e7b4c:;
						if (it != expr.end()) {
							jule::Ptr<_1ce75e6a1_TypeAlias> _1b88e7b91_dg = *it;
							{
								if (_1b88e6134_bg == _1b88e7b91_dg) {
									(*this)._method_push_err((*(_83935_decl))._field_token,jule::Str("type declaration causes initiation cycle", 40),jule::Slice<jule::Any>({jule::Any((*(_83935_decl))._field_ident)}));
									return nullptr;
								}
							}
							_iter_next_1b88e7b4c:;
							++it;
							goto _iter_begin_1b88e7b4c;
						}
						_iter_end_1b88e7b4c:;
					}
				}
				_iter_next_1b88e7575:;
				++it;
				goto _iter_begin_1b88e7575;
			}
			_iter_end_1b88e7575:;
		}
	}
	jule::Bool _88117_ok = (*this)._method_check_illegal_cycles(_83935_decl,jule::Any(_83962_ta));
	if ((!(_88117_ok))) {
		return nullptr;
	}
	_88117_ok=(*((*this)._field_s))._method_check_type_alias_decl_kind(_83962_ta,(*this)._field_lookup);
	if ((!(_88117_ok))) {
		return nullptr;
	}
	if ((*(_83962_ta))._field_generic && ((*this)._field_owner_alias != nullptr)) {
		(*((*this)._field_owner_alias))._field_generics = jule::alloc_for_append((*((*this)._field_owner_alias))._field_generics,1);(*((*this)._field_owner_alias))._field_generics.__push(_83962_ta);
	}
	return jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind((((*(_83962_ta))._field_cpp_linked) ? ((*(_83962_ta))._field_ident) : ((*((*((*(_83962_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_83962_ta))._field_generic,jule::Bool(),(*((*((*(_83962_ta))._field_kind))._field_kind))._field_kind));
}



inline jule::Ptr<_1e8648917_Enum> _1ce767731_TypeChecker::_method_from_enum(jule::Ptr<_2129908e3_IdentTypeDecl>& _90529_decl,jule::Ptr<_1e8648917_Enum>& _90556_e) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_90556_e))._field_public,(*(_90556_e))._field_token)))) {
		(*this)._method_push_err((*(_90529_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_90529_decl))._field_ident)}));
		return nullptr;
	}
	if (((*(_90529_decl))._field_generics.len() > 0LL)) {
		(*this)._method_push_err((*(_90529_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_90529_decl))._field_ident)}));
		return nullptr;
	}
	return _90556_e;
}



inline jule::Ptr<_1e85a7865_Trait> _1ce767731_TypeChecker::_method_from_trait(jule::Ptr<_2129908e3_IdentTypeDecl>& _91730_decl,jule::Ptr<_1e85a7865_Trait>& _91757_t) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_91757_t))._field_public,(*(_91757_t))._field_token)))) {
		(*this)._method_push_err((*(_91730_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_91730_decl))._field_ident)}));
		return nullptr;
	}
	if (((*(_91730_decl))._field_generics.len() > 0LL)) {
		(*this)._method_push_err((*(_91730_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_91730_decl))._field_ident)}));
		return nullptr;
	}
	return _91757_t;
}



inline jule::Bool _1ce767731_TypeChecker::_method_check_struct_ins(jule::Ptr<_1e83b84bc_StructIns>& _92940_ins,_212ae5c02_Token& _92958_error_token) {
	jule::Bool _92980_ok = jule::Bool();
	if ((*(_92940_ins))._field_checked) {
		_92980_ok = true;
		return _92980_ok;
	}
	(*(_92940_ins))._field_checked=true;
	if (((*this)._field_referencer != nullptr) && ((*((*this)._field_referencer))._field_owner == jule::Any((*(_92940_ins))._field_decl))) {
		_92980_ok = true;
		return _92980_ok;
	}
	jule::Ptr<_1ce7204a8_SymbolTable> _94017_old_file = (*((*this)._field_s))._field_file;
	__JULE_DEFER({
		(*((*this)._field_s))._method_set_current_file(_94017_old_file);
	});
	jule::Ptr<_1ce7204a8_SymbolTable> _94317_file = _1ce6aa993_find_file((*((*this)._field_s))._field_files,(*((*(_92940_ins))._field_decl))._field_token._field_file);
	if ((_94317_file != nullptr)) {
		(*((*this)._field_s))._method_set_current_file(_94317_file);
	}
	jule::Ptr<_1ce766eb1_Referencer> _94817_referencer = jule::new_struct<_1ce766eb1_Referencer>(new( std::nothrow ) _1ce766eb1_Referencer((*((*(_92940_ins))._field_decl))._field_ident,jule::Any((*(_92940_ins))._field_decl),nullptr));
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _95317_generics = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>::alloc(0LL,static_cast<jule::I64>((*(_92940_ins))._field_generics.len()));
	{
		auto &expr = (*(_92940_ins))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b8a6a3c9:;
		if (it != expr.end()) {
			jule::I64 _1b8a6aa06_i = it - expr.begin();
			jule::Ptr<_1ce76121e_TypeKind> _1b8a6abb0_g = *it;
			{
				_95317_generics = jule::alloc_for_append(_95317_generics,1);_95317_generics.__push(jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias(jule::Ptr<_212b1e555_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_212ae5c02_Token(),(*((*((*(_92940_ins))._field_decl))._field_generics[_1b8a6aa06_i]))._field_ident,jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),_1b8a6abb0_g)),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>())));
			}
			_iter_next_1b8a6a3c9:;
			++it;
			_1b8a6aa06_i++;
			goto _iter_begin_1b8a6a3c9;
		}
		_iter_end_1b8a6a3c9:;
	}
	jule::Ptr<_1ce7204a8_SymbolTable> _96317_old_sema_file = (*((*((*(_92940_ins))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_92940_ins))._field_decl))._field_sema))._method_set_current_file(_96317_old_sema_file);
	});
	_1ce767731_TypeChecker _96817_tc = _1ce767731_TypeChecker((*((*(_92940_ins))._field_decl))._field_sema,(*((*(_92940_ins))._field_decl))._field_sema,_94817_referencer,_212ae5c02_Token(),jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>(),_95317_generics,jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1ce75e6a1_TypeAlias>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>(),jule::Bool());
	{
		auto &expr = (*(_92940_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_1b8a6dac5:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b2cbe_FieldIns> _1b8a6db80_field = *it;
			{
				jule::Ptr<_1ce76121e_TypeKind> _97721_kind = _96817_tc._method_check_decl((*((*((*(_1b8a6db80_field))._field_decl))._field_kind))._field_decl);
				_92980_ok=(_97721_kind != nullptr);
				if ((((*((*(_92940_ins))._field_decl))._field_sema != nullptr) && ((*this)._field_s != (*((*(_92940_ins))._field_decl))._field_sema)) && ((*((*((*(_92940_ins))._field_decl))._field_sema))._field_errors.len() > 0LL)) {
					(*((*this)._field_s))._field_errors=jule::append((*((*this)._field_s))._field_errors,(*((*((*(_92940_ins))._field_decl))._field_sema))._field_errors);
					(*((*((*(_92940_ins))._field_decl))._field_sema))._field_errors=nullptr;
				}
				if ((!(_92980_ok))) {
					_92980_ok = false;
					return _92980_ok;
				}
				(*(_1b8a6db80_field))._field_kind=_97721_kind;
				if ((!((*((*(_1b8a6db80_field))._field_decl))._field_mutable)) && (*((*(_1b8a6db80_field))._field_kind))._method_mutable()) {
					(*(_92940_ins))._field_mutable=true;
					(*((*this)._field_s))._method_check_struct_ins_derive_clone(_92940_ins);
				}
			}
			_iter_next_1b8a6dac5:;
			++it;
			goto _iter_begin_1b8a6dac5;
		}
		_iter_end_1b8a6dac5:;
	}
	if (((*(_92940_ins))._field_generics.len() > 0LL)) {
		(*((*this)._field_s))._method_check_struct_ins_operators(_92940_ins);
		(*((*this)._field_s))._method_check_struct_ins(_92940_ins);
	}
	_92980_ok = true;
	return _92980_ok;
}



inline void _1ce767731_TypeChecker::_method_append_used_struct_reference(jule::Ptr<_1e83b1718_Struct>& _100452_s) {
	if (((*this)._field_referencer == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_1e83b1718_Struct>>()) {
			_case_begin_1b8a75d41:;
			{
				jule::Ptr<_1e83b1718_Struct> _101121_ref_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_1e83b1718_Struct>();
				if ((!((*(_101121_ref_s))._method_is_uses(_100452_s)))) {
					(*(_101121_ref_s))._field_uses = jule::alloc_for_append((*(_101121_ref_s))._field_uses,1);(*(_101121_ref_s))._field_uses.__push(_100452_s);
				}
			}
		}
		_match_end_1b8a75813:;
	}
}



inline jule::Ptr<_1e83b84bc_StructIns> _1ce767731_TypeChecker::_method_build_struct_instance(jule::Ptr<_2129908e3_IdentTypeDecl>& _101845_decl,jule::Ptr<_1e83b1718_Struct>& _101872_s) {
	jule::Ptr<_1ce766eb1_Referencer> _102017_referencer = (*this)._field_referencer;
	(*this)._field_referencer=nullptr;
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _102217_banned_generics = (*this)._field_banned_generics;
	if (((*this)._field_banned_generics == nullptr)) {
		{
			auto &_match_expr{ (*this)._field_lookup };
			
			if (_match_expr.type_is<jule::Ptr<_1ce6882bc_ScopeChecker>>()) {
				_case_begin_1b8a7921d:;
				{
					jule::Ptr<_1ce6882bc_ScopeChecker> _102925_sc = (*this)._field_lookup.operator jule::Ptr<_1ce6882bc_ScopeChecker>();
					jule::Ptr<_1ce6882bc_ScopeChecker> _103025_hard = (*(_102925_sc))._method_get_hard_root();
					if (((*((*(_103025_hard))._field_owner))._field_owner == nullptr) || ((*((*((*(_103025_hard))._field_owner))._field_owner))._field_decl != _101872_s)) {
						goto _match_end_1b8a7911e;
					}
					jule::I64 _103421_n = (*((*(_103025_hard))._field_owner))._field_generics.len() + static_cast<jule::I64>((*((*((*(_103025_hard))._field_owner))._field_owner))._field_generics.len());
					(*this)._field_banned_generics=(*((*(_103025_hard))._field_table))._field_type_aliases.slice(0LL,_103421_n);
				}
			}
			_match_end_1b8a7911e:;
		}
	} else {
		(*this)._field_inscatch=true;
	}
	jule::Ptr<_1e83b84bc_StructIns> _104417_ins = (*(_101872_s))._method_instance();
	(*(_104417_ins))._field_generics=jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_101845_decl))._field_generics.len()));
	{
		auto &expr = (*(_101845_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b8a7d7e9:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3d42_TypeDecl> _1b8a7d83d_g = *it;
			{
				jule::Ptr<_1ce76121e_TypeKind> _104721_kind = (*this)._method_build((*(_1b8a7d83d_g))._field_kind);
				if ((_104721_kind == nullptr)) {
					return nullptr;
				}
				(*(_104417_ins))._field_generics = jule::alloc_for_append((*(_104417_ins))._field_generics,1);(*(_104417_ins))._field_generics.__push(_104721_kind);
			}
			_iter_next_1b8a7d7e9:;
			++it;
			goto _iter_begin_1b8a7d7e9;
		}
		_iter_end_1b8a7d7e9:;
	}
	(*this)._field_banned_generics=_102217_banned_generics;
	(*this)._field_referencer=_102017_referencer;
	return _104417_ins;
}



inline jule::Ptr<_1e83b84bc_StructIns> _1ce767731_TypeChecker::_method_from_struct(jule::Ptr<_2129908e3_IdentTypeDecl>& _106135_decl,jule::Ptr<_1e83b1718_Struct>& _106162_s) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_106162_s))._field_public,(*(_106162_s))._field_token)))) {
		(*this)._method_push_err((*(_106135_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_106135_decl))._field_ident)}));
		return nullptr;
	}
	if ((*this)._field_selection) {
		if (((*(_106135_decl))._field_generics.len() > 0LL)) {
			(*this)._method_push_err((*(_106135_decl))._field_token,jule::Str("generics are not allowed in this scope", 38),jule::Slice<jule::Any>());
			return nullptr;
		}
		return jule::new_struct_ptr<_1e83b84bc_StructIns>(new( std::nothrow ) _1e83b84bc_StructIns(jule::Bool(),_106162_s,jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83b2cbe_FieldIns>>(),jule::Slice<jule::Ptr<_1e83d4384_Fn>>(),jule::Bool(),jule::Ptr<_1e83de4b0_ReferenceStack>(),_1e83ae55c_Operators()));
	}
	if (((*(_106162_s))._field_generics.len() > 0LL) && ((*this)._field_ignore_generics.len() > 0LL)) {
		return nullptr;
	}
	jule::Bool _108417_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_106135_decl,jule::Any(_106162_s));
	if ((!(_108417_ok))) {
		return nullptr;
	}
	(*this)._method_append_used_struct_reference(_106162_s);
	jule::Ptr<_1e83b84bc_StructIns> _109017_ins = (*this)._method_build_struct_instance(_106135_decl,_106162_s);
	if ((_109017_ins == nullptr)) {
		return nullptr;
	}
	_108417_ok=(*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_109017_ins))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_109017_ins))._field_generics.len()),(*(_106135_decl))._field_token);
	if ((!(_108417_ok))) {
		return nullptr;
	}
	jule::Ptr<_1e83b84bc_StructIns> _110017_exist_instance = (*(_106162_s))._method_append_instance(_109017_ins);
	if ((_110017_exist_instance != nullptr)) {
		return _110017_exist_instance;
	}
	_108417_ok=(*this)._method_check_struct_ins(_109017_ins,(*(_106135_decl))._field_token);
	if ((!(_108417_ok))) {
		return nullptr;
	}
	return _109017_ins;
}



inline jule::Trait<_1ce760828_Kind> _1ce767731_TypeChecker::_method_get_def(jule::Trait<_1b545ddc0_Lookup> _112226_l,jule::Ptr<_2129908e3_IdentTypeDecl>& _112242_decl) {
	{
		auto &expr = (*this)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_1b8a89c78:;
		if (it != expr.end()) {
			jule::Ptr<_212b1c9b5_GenericDecl> _1b8a89d88_g = *it;
			{
				if ((*(_1b8a89d88_g))._field_ident == (*(_112242_decl))._field_ident) {
					return _1ce7663cd_build_prim_type((*(_1b8a89d88_g))._field_ident);
				}
			}
			_iter_next_1b8a89c78:;
			++it;
			goto _iter_begin_1b8a89c78;
		}
		_iter_end_1b8a89c78:;
	}
	{
		auto &expr = (*this)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_1b8a8a97c:;
		if (it != expr.end()) {
			jule::Ptr<_1ce75e6a1_TypeAlias> _1b8a8a086_g = *it;
			{
				if ((*(_1b8a8a086_g))._field_ident == (*(_112242_decl))._field_ident) {
					jule::Ptr<_1e83b84bc_StructIns> _113125_st = (*((*((*(_1b8a8a086_g))._field_kind))._field_kind))._method_strct();
					if ((_113125_st != nullptr)) {
						jule::Bool _113325_ok = (*this)._method_check_illegal_cycles(_112242_decl,jule::Any((*(_113125_st))._field_decl));
						if ((!(_113325_ok))) {
							return nullptr;
						}
					}
					return (*((*((*(_1b8a8a086_g))._field_kind))._field_kind))._field_kind;
				}
			}
			_iter_next_1b8a8a97c:;
			++it;
			goto _iter_begin_1b8a8a97c;
		}
		_iter_end_1b8a8a97c:;
	}
	if ((!((*(_112242_decl))._field_cpp_linked))) {
		jule::Ptr<_1e8648917_Enum> _114321_e = _112226_l.get()._method_find_enum((*(_112242_decl))._field_ident);
		if ((_114321_e != nullptr)) {
			return (*this)._method_from_enum(_112242_decl,_114321_e);
		}
		jule::Ptr<_1e85a7865_Trait> _114821_t = _112226_l.get()._method_find_trait((*(_112242_decl))._field_ident);
		if ((_114821_t == nullptr) && (!((*this)._field_dis_builtin))) {
			_114821_t=_1b546de13_find_builtin_trait((*(_112242_decl))._field_ident);
		}
		if ((_114821_t != nullptr)) {
			return (*this)._method_from_trait(_112242_decl,_114821_t);
		}
	} else if ((*this)._field_selection) {
		(*this)._method_push_err((*(_112242_decl))._field_token,jule::Str("cpp-linked definitions are not allowed in this scope", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e83b1718_Struct> _116017_s = _112226_l.get()._method_find_struct((*(_112242_decl))._field_ident,(*(_112242_decl))._field_cpp_linked);
	if ((_116017_s != nullptr)) {
		return (*this)._method_from_struct(_112242_decl,_116017_s);
	}
	jule::Ptr<_1ce75e6a1_TypeAlias> _116517_ta = _112226_l.get()._method_find_type_alias((*(_112242_decl))._field_ident,(*(_112242_decl))._field_cpp_linked);
	if ((_116517_ta == nullptr) && (!((*this)._field_dis_builtin))) {
		_116517_ta=_1b546cebc_find_builtin_type_alias((*(_112242_decl))._field_ident);
	}
	if ((_116517_ta != nullptr)) {
		return (*this)._method_from_type_alias(_112242_decl,_116517_ta);
	}
	(*this)._method_push_err((*(_112242_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_112242_decl))._field_ident)}));
	return nullptr;
}



inline jule::Trait<_1ce760828_Kind> _1ce767731_TypeChecker::_method_build_ident(jule::Ptr<_2129908e3_IdentTypeDecl> _117734_decl) {
	{
		
		if (_1ce766ae8_is_prim((*(_117734_decl))._field_ident)) {
			_case_begin_1b8a96adc:;
			{
				return (*this)._method_build_prim(_117734_decl);
			}
		}
		else {
			_case_begin_1b8a964b0:;
			{
				return (*this)._method_get_def((*this)._field_lookup,_117734_decl);
			}
		}
		_match_end_1b8a963e4:;
	}
}



inline jule::Ptr<_1ce76286e_Sptr> _1ce767731_TypeChecker::_method_build_sptr_from_type(jule::Ptr<_1ce76121e_TypeKind>& _118644_elem) {
	{
		
		if ((_118644_elem == nullptr)) {
			_case_begin_1b8a97b76:;
			{
				return nullptr;
			}
		}
		else if (((*(_118644_elem))._method_strct() != nullptr)) {
			_case_begin_1b8a97bdc:;
			{
				jule::Ptr<_1e83b84bc_StructIns> _119217_s = (*(_118644_elem))._method_strct();
				if (((*(_119217_s))._field_decl != nullptr) && (*((*(_119217_s))._field_decl))._field_cpp_linked) {
					(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
		}
		else if (((*(_118644_elem))._method_arr() != nullptr) && (*((*(_118644_elem))._method_arr()))._field_auto) {
			_case_begin_1b8a97c53:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_1b8a97b10:;
	}
	return jule::new_struct_ptr<_1ce76286e_Sptr>(new( std::nothrow ) _1ce76286e_Sptr(_118644_elem));
}



inline jule::Ptr<_1ce76286e_Sptr> _1ce767731_TypeChecker::_method_build_sptr(jule::Ptr<_212b14182_SptrTypeDecl> _120633_decl) {
	jule::Bool _120713_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_120713_not_plain;
	});
	jule::Ptr<_1ce76121e_TypeKind> _121117_elem = (*this)._method_check_decl((*(_120633_decl))._field_elem);
	return (*this)._method_build_sptr_from_type(_121117_elem);
}



inline jule::Ptr<_1ce7649e7_Ptr> _1ce767731_TypeChecker::_method_build_ptr_from_type(jule::Ptr<_1ce76121e_TypeKind>& _121543_elem) {
	{
		
		if ((_121543_elem == nullptr)) {
			_case_begin_1b8a9d9b2:;
			{
				return nullptr;
			}
		}
		else if (((*(_121543_elem))._method_arr() != nullptr) && (*((*(_121543_elem))._method_arr()))._field_auto) {
			_case_begin_1b8a9da39:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_1ce7649e7_Ptr>();
			}
		}
		_match_end_1b8a9d8b3:;
	}
	return jule::new_struct_ptr<_1ce7649e7_Ptr>(new( std::nothrow ) _1ce7649e7_Ptr(_121543_elem));
}



inline jule::Ptr<_1ce7649e7_Ptr> _1ce767731_TypeChecker::_method_build_ptr(jule::Ptr<_212b14e52_PtrTypeDecl> _123132_decl) {
	jule::Bool _123213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_123213_not_plain;
	});
	jule::Ptr<_1ce76121e_TypeKind> _123617_elem = nullptr;
	if ((!((*(_123132_decl))._method_is_unsafe()))) {
		_123617_elem=(*this)._method_check_decl((*(_123132_decl))._field_elem);
		return (*this)._method_build_ptr_from_type(_123617_elem);
	}
	return jule::new_struct_ptr<_1ce7649e7_Ptr>(new( std::nothrow ) _1ce7649e7_Ptr(_123617_elem));
}



inline jule::Ptr<_1ce762e02_Slc> _1ce767731_TypeChecker::_method_build_slc(jule::Ptr<_212b145c2_SlcTypeDecl> _124832_decl) {
	jule::Bool _124913_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_124913_not_plain;
	});
	jule::Ptr<_1ce76121e_TypeKind> _125317_elem = (*this)._method_check_decl((*(_124832_decl))._field_elem);
	{
		
		if ((_125317_elem == nullptr)) {
			_case_begin_1b8aa4c4e:;
			{
				return nullptr;
			}
		}
		else if (((*(_125317_elem))._method_arr() != nullptr) && (*((*(_125317_elem))._method_arr()))._field_auto) {
			_case_begin_1b8aa4cb5:;
			{
				(*this)._method_push_err((*((*(_124832_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_1b8aa4bb6:;
	}
	return jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc(_125317_elem));
}



inline jule::Ptr<_1ce764244_Arr> _1ce767731_TypeChecker::_method_build_arr(jule::Ptr<_212b15392_ArrTypeDecl> _127032_decl) {
	jule::Bool _127113_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_127113_not_plain;
	});
	jule::I64 _127517_n = 0LL;
	if ((!((*(_127032_decl))._method_auto_sized()))) {
		jule::Ptr<_1ce727449_Data> _127821_size = (*((*((*this)._field_s))._method_eval((*this)._field_lookup)))._method_eval_expr((*(_127032_decl))._field_size);
		if ((_127821_size == nullptr)) {
			return nullptr;
		}
		if ((!((*(_127821_size))._method_is_const()))) {
			(*this)._method_push_err((*((*(_127032_decl))._field_size))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if (((*((*(_127821_size))._field_kind))._method_prim() == nullptr) || (!(_1ce682173_is_int((*((*((*(_127821_size))._field_kind))._method_prim()))._field_kind)))) {
			(*this)._method_push_err((*((*(_127032_decl))._field_size))._field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		}
		_127517_n=static_cast<jule::I64>(static_cast<jule::I64>((*((*(_127821_size))._field_constant))._method_as_i64()));
		if ((_127517_n < 0LL)) {
			(*this)._method_push_err((*((*(_127032_decl))._field_elem))._field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		} else if ((_1ce672707_BIT_SIZE != 64LL) && (static_cast<jule::F64>(_127517_n) > static_cast<jule::F64>(_1ce67a06c_max(jule::Str("int", 3))))) {
			(*this)._method_push_err((*((*(_127032_decl))._field_size))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	jule::Ptr<_1ce76121e_TypeKind> _130117_elem = (*this)._method_check_decl((*(_127032_decl))._field_elem);
	{
		
		if ((_130117_elem == nullptr)) {
			_case_begin_1b8ab0b5b:;
			{
				return nullptr;
			}
		}
		else if (((*(_130117_elem))._method_arr() != nullptr) && (*((*(_130117_elem))._method_arr()))._field_auto) {
			_case_begin_1b8ab0bc2:;
			{
				(*this)._method_push_err((*((*(_127032_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_1b8ab09b3:;
	}
	return jule::new_struct_ptr<_1ce764244_Arr>(new( std::nothrow ) _1ce764244_Arr((*(_127032_decl))._method_auto_sized(),_127517_n,_130117_elem));
}



inline jule::Ptr<_1ce763b39_Map> _1ce767731_TypeChecker::_method_build_map(jule::Ptr<_212b157d2_MapTypeDecl> _131932_decl) {
	jule::Bool _132013_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_132013_not_plain;
	});
	jule::Ptr<_1ce76121e_TypeKind> _132417_key = (*this)._method_check_decl((*(_131932_decl))._field_key);
	if ((_132417_key == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ce76121e_TypeKind> _132917_val = (*this)._method_check_decl((*(_131932_decl))._field_val);
	if ((_132917_val == nullptr)) {
		return nullptr;
	}
	if (((*(_132917_val))._method_enm() != nullptr)) {
		(*this)._method_push_err((*((*(_131932_decl))._field_val))._field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	}
	return jule::new_struct_ptr<_1ce763b39_Map>(new( std::nothrow ) _1ce763b39_Map(_132417_key,_132917_val));
}



inline jule::Ptr<_1ce763485_Tuple> _1ce767731_TypeChecker::_method_build_tuple(jule::Ptr<_212b14a12_TupleTypeDecl> _134334_decl) {
	jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _134417_types = jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_134334_decl))._field_types.len()));
	{
		auto &expr = (*(_134334_decl))._field_types;
		auto it = expr.begin();
		_iter_begin_1b8ab7910:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3d42_TypeDecl> _1b8ab803c_t = *it;
			{
				jule::Ptr<_1ce76121e_TypeKind> _134621_kind = (*this)._method_check_decl(_1b8ab803c_t);
				if ((_134621_kind == nullptr)) {
					return nullptr;
				}
				_134417_types = jule::alloc_for_append(_134417_types,1);_134417_types.__push(_134621_kind);
			}
			_iter_next_1b8ab7910:;
			++it;
			goto _iter_begin_1b8ab7910;
		}
		_iter_end_1b8ab7910:;
	}
	return jule::new_struct_ptr<_1ce763485_Tuple>(new( std::nothrow ) _1ce763485_Tuple(_134417_types));
}



inline jule::Bool _1ce767731_TypeChecker::_method_check_fn_types(jule::Ptr<_1e83d630e_FnIns>& _135638_f) {
	jule::Bool _135651_ok = jule::Bool();
	{
		auto &expr = (*(_135638_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b8aba1c6:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> _1b8aba281_p = *it;
			{
				(*(_1b8aba281_p))._field_kind=(*this)._method_build((*((*((*((*(_1b8aba281_p))._field_decl))._field_kind))._field_decl))._field_kind);
				_135651_ok=((*(_1b8aba281_p))._field_kind != nullptr);
				if ((!(_135651_ok))) {
					_135651_ok = false;
					return _135651_ok;
				}
			}
			_iter_next_1b8aba1c6:;
			++it;
			goto _iter_begin_1b8aba1c6;
		}
		_iter_end_1b8aba1c6:;
	}
	if ((!((*((*(_135638_f))._field_decl))._method_is_void()))) {
		(*(_135638_f))._field_result=(*this)._method_build((*((*((*((*((*(_135638_f))._field_decl))._field_result))._field_kind))._field_decl))._field_kind);
		_135651_ok = ((*(_135638_f))._field_result != nullptr);
		return _135651_ok;
	}
	_135651_ok = true;
	return _135651_ok;
}



inline jule::Ptr<_1e83d630e_FnIns> _1ce767731_TypeChecker::_method_build_fn(jule::Ptr<_212b1edd5_FnDecl> _137331_decl) {
	if (((*(_137331_decl))._field_generics.len() > 0LL)) {
		(*this)._method_push_err((*(_137331_decl))._field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e83d4384_Fn> _137917_f = _1e83e2480_build_fn(_137331_decl);
	jule::Ptr<_1e83d630e_FnIns> _138017_ins = (*(_137917_f))._method_instance_force();
	(*(_138017_ins))._field_anon=true;
	jule::Bool _138313_ok = (*this)._method_check_fn_types(_138017_ins);
	if ((!(_138313_ok))) {
		return nullptr;
	}
	return _138017_ins;
}



inline jule::Trait<_1ce760828_Kind> _1ce767731_TypeChecker::_method_build_by_namespace(jule::Ptr<_21298e309_NamespaceTypeDecl> _139141_decl) {
	jule::Str _139213_path = _1ce76609d_build_link_path_by_tokens((*(_139141_decl))._field_idents);
	jule::Ptr<_1ce6a0317_ImportInfo> _139317_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1ce6a0317_ImportInfo>)>([=](jule::Ptr<_1ce6a0317_ImportInfo> _139353_imp) mutable -> jule::Bool {
		if (((*(_139141_decl))._field_idents.len() == 1LL) && ((*(_139353_imp))._field_alias == _139213_path)) {
			return true;
		}
		return ((*(_139353_imp))._field_link_path == _139213_path) && (*(_139353_imp))._method_is_accessible_via_selection();
	}));
	if ((_139317_imp == nullptr) || (!((*(_139317_imp))._method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err((*(_139141_decl))._field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_139213_path)}));
		return nullptr;
	}
	(*this)._method_disallow_builtin();
	jule::Trait<_1ce760828_Kind> _140617_kind = (*this)._method_get_def(_139317_imp,(*(_139141_decl))._field_kind);
	(*this)._method_allow_builtin();
	return _140617_kind;
}



inline jule::Ptr<_1ce76121e_TypeKind> _1ce767731_TypeChecker::_method_build(jule::Any& _141229_decl_kind) {
	jule::Trait<_1ce760828_Kind> _141317_kind = nullptr;
	{
		auto &_match_expr{ _141229_decl_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce76121e_TypeKind>>()) {
			_case_begin_1b8ac7326:;
			{
				_141317_kind=_141229_decl_kind.operator jule::Ptr<_1ce76121e_TypeKind>();
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2129908e3_IdentTypeDecl>>()) {
			_case_begin_1b8ac847b:;
			{
				jule::Trait<_1ce760828_Kind> _141821_t = (*this)._method_build_ident(_141229_decl_kind.operator jule::Ptr<_2129908e3_IdentTypeDecl>());
				if ((_141821_t != nullptr)) {
					_141317_kind=_141821_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b14182_SptrTypeDecl>>()) {
			_case_begin_1b8ac84e2:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1ce76286e_Sptr> _142421_t = (*this)._method_build_sptr(_141229_decl_kind.operator jule::Ptr<_212b14182_SptrTypeDecl>());
				if ((_142421_t != nullptr)) {
					_141317_kind=_142421_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b14e52_PtrTypeDecl>>()) {
			_case_begin_1b8ac826c:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1ce7649e7_Ptr> _143021_t = (*this)._method_build_ptr(_141229_decl_kind.operator jule::Ptr<_212b14e52_PtrTypeDecl>());
				if ((_143021_t != nullptr)) {
					_141317_kind=_143021_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b145c2_SlcTypeDecl>>()) {
			_case_begin_1b8ac82d3:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1ce762e02_Slc> _143621_t = (*this)._method_build_slc(_141229_decl_kind.operator jule::Ptr<_212b145c2_SlcTypeDecl>());
				if ((_143621_t != nullptr)) {
					_141317_kind=_143621_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b15392_ArrTypeDecl>>()) {
			_case_begin_1b8ac7755:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1ce764244_Arr> _144221_t = (*this)._method_build_arr(_141229_decl_kind.operator jule::Ptr<_212b15392_ArrTypeDecl>());
				if ((_144221_t != nullptr)) {
					_141317_kind=_144221_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b157d2_MapTypeDecl>>()) {
			_case_begin_1b8ac77bb:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1ce763b39_Map> _144821_t = (*this)._method_build_map(_141229_decl_kind.operator jule::Ptr<_212b157d2_MapTypeDecl>());
				if ((_144821_t != nullptr)) {
					_141317_kind=_144821_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b14a12_TupleTypeDecl>>()) {
			_case_begin_1b8ac7832:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1ce763485_Tuple> _145421_t = (*this)._method_build_tuple(_141229_decl_kind.operator jule::Ptr<_212b14a12_TupleTypeDecl>());
				if ((_145421_t != nullptr)) {
					_141317_kind=_145421_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b1edd5_FnDecl>>()) {
			_case_begin_1b8ac7898:;
			{
				(*this)._field_inscatch=true;
				jule::Ptr<_1e83d630e_FnIns> _146021_t = (*this)._method_build_fn(_141229_decl_kind.operator jule::Ptr<_212b1edd5_FnDecl>());
				if ((_146021_t != nullptr)) {
					_141317_kind=_146021_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_21298e309_NamespaceTypeDecl>>()) {
			_case_begin_1b8ac857a:;
			{
				(*this)._field_inscatch=true;
				jule::Trait<_1ce760828_Kind> _146621_t = (*this)._method_build_by_namespace(_141229_decl_kind.operator jule::Ptr<_21298e309_NamespaceTypeDecl>());
				if ((_146621_t != nullptr)) {
					_141317_kind=_146621_t;
				}
			}
		}
		else {
			_case_begin_1b8ac75e0:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_1b8ac7568:;
	}
	if ((_141317_kind == nullptr)) {
		return nullptr;
	}
	{
		auto &_match_expr{ _141317_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ce76121e_TypeKind>>()) {
			_case_begin_1b8ad3be5:;
			{
				return _141317_kind.operator jule::Ptr<_1ce76121e_TypeKind>();
			}
		}
		else {
			_case_begin_1b8ad2ac3:;
			{
				return jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_141317_kind));
			}
		}
		_match_end_1b8ad2a6d:;
	}
}



inline jule::Ptr<_1ce76121e_TypeKind> _1ce767731_TypeChecker::_method_check_decl(jule::Ptr<_2129e3d42_TypeDecl>& _148734_decl) {
	_212ae5c02_Token _148917_error_token = (*this)._field_error_token;
	(*this)._field_error_token=(*(_148734_decl))._field_token;
	jule::Ptr<_1ce76121e_TypeKind> _149217_kind = (*this)._method_build((*(_148734_decl))._field_kind);
	(*this)._field_error_token=_148917_error_token;
	return _149217_kind;
}



inline void _1ce767731_TypeChecker::_method_check(jule::Ptr<_1ce761b37_TypeSymbol>& _149829_t) {
	if (((*(_149829_t))._field_decl == nullptr)) {
		return;
	}
	jule::Ptr<_1ce76121e_TypeKind> _150217_kind = (*this)._method_check_decl((*(_149829_t))._field_decl);
	if ((_150217_kind == nullptr)) {
		(*(_149829_t))._method_remove_kind();
		return;
	}
	(*(_149829_t))._field_kind=_150217_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce767731_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "selection:" << _Src._field_selection << ", ";
	_Stream << "owner_alias:" << _Src._field_owner_alias << ", ";
	_Stream << "banned_generics:" << _Src._field_banned_generics << ", ";
	_Stream << "inscatch:" << _Src._field_inscatch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b20765_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b20ba5_Iter::_method_is_inf(void) {
	return (*this)._field_kind == jule::Any(nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b20ba5_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b210e5_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != jule::Any(nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b210e5_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_1b54c72bd_IR>,jule::Slice<_21287ea02_Log>> _1b54c72bd_IR::_static_method_build(jule::Str _2825_path,jule::I64 _2836_flags) {
	jule::Ptr<_1b54c4188_JuleImporter> _2917_importer = _1b54c4188_JuleImporter::_static_method_new(_1b54c8500_build_compile_info());
	jule::Slice<jule::Ptr<_2129e26e2_Ast>> _3018_files;
	jule::Slice<_21287ea02_Log> _3029_logs;
	std::tie(_3018_files,_3029_logs) = (*(_2917_importer))._method_import_package(_2825_path,true);
	if ((_3029_logs.len() > 0LL)) {
		return std::make_tuple(nullptr,_3029_logs);
	}
	jule::Str _3413_root = _2825_path;
	if ((_3018_files.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1ce6a15e3_Package> _4018_pkg;
	std::tie(_4018_pkg,_3029_logs) = _1b5462c70_analyze_package(_3018_files,_2917_importer,_2836_flags);
	if ((_3029_logs.len() > 0LL)) {
		return std::make_tuple(nullptr,_3029_logs);
	}
	jule::Ptr<_1b54c72bd_IR> _4517_ir = jule::new_struct<_1b54c72bd_IR>(new( std::nothrow ) _1b54c72bd_IR(_3413_root,jule::Slice<jule::Str>(),_4018_pkg,(*(_2917_importer))._method_all_packages(),_1b54c9e91_OrderedDefines()));
	(*(_4517_ir))._field_passes=_1b54c80b0_get_all_unique_passes((*(_4517_ir))._field_main,(*(_4517_ir))._field_used);
	return std::make_tuple(_4517_ir,nullptr);
}



inline void _1b54c72bd_IR::_method_append_structs(jule::Ptr<_1ce6a15e3_Package>& _5734_p,jule::Slice<jule::Ptr<_1e83b1718_Struct>>& _5758_buffer) {
	{
		auto &expr = (*(_5734_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8cdbc77:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8cdbd10_f = *it;
			{
				{
					auto &expr = (*(_1b8cdbd10_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_1b8cdc607:;
					if (it != expr.end()) {
						jule::Ptr<_1e83b1718_Struct> _1b8cdc64b_s = *it;
						{
							if ((!((*(_1b8cdc64b_s))._field_cpp_linked))) {
								_5758_buffer = jule::alloc_for_append(_5758_buffer,1);_5758_buffer.__push(_1b8cdc64b_s);
							}
						}
						_iter_next_1b8cdc607:;
						++it;
						goto _iter_begin_1b8cdc607;
					}
					_iter_end_1b8cdc607:;
				}
			}
			_iter_next_1b8cdbc77:;
			++it;
			goto _iter_begin_1b8cdbc77;
		}
		_iter_end_1b8cdbc77:;
	}
}



inline jule::Slice<jule::Ptr<_1e83b1718_Struct>> _1b54c72bd_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ptr<_1e83b1718_Struct>> _7017_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_7017_buffer);
	{
		auto &expr = (*this)._field_used;
		auto it = expr.begin();
		_iter_begin_1b8cdd4c6:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8cddedd_u = *it;
			{
				if ((!((*(_1b8cddedd_u))._field_cpp_linked))) {
					(*this)._method_append_structs((*(_1b8cddedd_u))._field_package,_7017_buffer);
				}
			}
			_iter_next_1b8cdd4c6:;
			++it;
			goto _iter_begin_1b8cdd4c6;
		}
		_iter_end_1b8cdd4c6:;
	}
	return _7017_buffer;
}



inline void _1b54c72bd_IR::_method_order(void) {
	(*this)._field_ordered._field_structs=(*this)._method_get_all_structures();
	_1b54ca579_DefineOrderer::_static_method_order_structures((*this)._field_ordered._field_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b54c72bd_IR &_Src) {
	_Stream << "IR{";
	_Stream << "root:" << _Src._field_root << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b21535_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b21975_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cb920_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83cc14b_BuiltinAssertCallExprModel &_Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b21db5_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b22305_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b22745_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2129e3902_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b589d09a_MutSlicingExprModel &_Src) {
	_Stream << "MutSlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b230c5_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b23515_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b23955_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b23d95_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b242d5_EnumItemDecl::_method_auto_expr(void) {
	return ((*this)._field_expr == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b242d5_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _212b24725_EnumDecl::_method_default_typed(void) {
	return ((*this)._field_kind == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _212b24725_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b24eea_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e83d5bb0_ParamIns> _1e83d3839_Param::_method_instance(void) {
	return jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(this->self,jule::Ptr<_1ce76121e_TypeKind>()));
}



inline jule::Bool _1e83d3839_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _1e83d3839_Param::_method_is_ref(void) {
	return (!((*this)._field_ident.empty())) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d3839_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e83d4384_Fn::_method_is_void(void) {
	return ((*this)._field_result == nullptr);
}



inline jule::Bool _1e83d4384_Fn::_method_is_method(void) {
	return ((*this)._field_owner != nullptr);
}



inline jule::Bool _1e83d4384_Fn::_method_is_entry_point(void) {
	return ((*this)._field_ident == jule::Str("main", 4));
}



inline jule::Bool _1e83d4384_Fn::_method_is_init(void) {
	return ((*this)._field_ident == jule::Str("init", 4));
}



inline jule::Bool _1e83d4384_Fn::_method_is_anon(void) {
	return _212ae95da_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _1e83d4384_Fn::_method_any_var(void) {
	return ((*this)._field_result != nullptr) && ((*((*this)._field_result))._field_idents.len() > 0LL);
}



inline jule::Bool _1e83d4384_Fn::_method_parameters_uses_generics(void) {
	if (((*this)._field_generics.len() == 0LL)) {
		return false;
	}
	{
		auto &expr = (*this)._field_params;
		auto it = expr.begin();
		_iter_begin_1b803d12d:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d3839_Param> &_1b803d8e2_p = *it;
			{
				if (_1e83d77b6_parameter_uses_generics(_1b803d8e2_p,(*this)._field_generics)) {
					return true;
				}
			}
			_iter_next_1b803d12d:;
			++it;
			goto _iter_begin_1b803d12d;
		}
		_iter_end_1b803d12d:;
	}
	return false;
}



inline jule::Bool _1e83d4384_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if (((*((*this)._field_result))._field_kind == nullptr) || ((*((*((*this)._field_result))._field_kind))._field_kind == nullptr)) {
		return false;
	}
	return _1e83d7332_kind_uses_generics((*((*((*this)._field_result))._field_kind))._field_kind,(*this)._field_generics);
}



inline jule::Ptr<_1e83d630e_FnIns> _1e83d4384_Fn::_method_instance_force(void) {
	jule::Ptr<_1e83d630e_FnIns> _11217_ins = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),this->self,jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::new_struct<_1ce62e86d_Scope>(new( std::nothrow ) _1ce62e86d_Scope()),_1e83de4b0_ReferenceStack::_static_method_new(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(),jule::Bool()));
	(*(_11217_ins))._field_params=jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_params.len()));
	{
		auto &expr = (*(this->self))._field_params;
		auto it = expr.begin();
		_iter_begin_1b8042de1:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d3839_Param> _1b8042e35_p = *it;
			{
				(*(_11217_ins))._field_params = jule::alloc_for_append((*(_11217_ins))._field_params,1);(*(_11217_ins))._field_params.__push((*(_1b8042e35_p))._method_instance());
			}
			_iter_next_1b8042de1:;
			++it;
			goto _iter_begin_1b8042de1;
		}
		_iter_end_1b8042de1:;
	}
	if (((*((*(_11217_ins))._field_decl))._field_result != nullptr)) {
		(*(_11217_ins))._field_result=(*((*((*((*(_11217_ins))._field_decl))._field_result))._field_kind))._field_kind;
	}
	return _11217_ins;
}



inline jule::Ptr<_1e83d630e_FnIns> _1e83d4384_Fn::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	return (*(this->self))._method_instance_force();
}



inline std::tuple<jule::Bool,jule::I64> _1e83d4384_Fn::_method_append_instance(jule::Ptr<_1e83d630e_FnIns>& _13939_ins) {
	if (((*this)._field_generics.len() == 0LL)) {
		if (((*this)._field_instances.len() == 1LL)) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_13939_ins);
		return std::make_tuple(true,-1LL);
	}
	if (((*this)._field_instances.len() == 0LL)) {
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_13939_ins);
		return std::make_tuple(true,-1LL);
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_1b8049876:;
		if (it != expr.end()) {
			jule::I64 _1b804990e_j = it - expr.begin();
			jule::Ptr<_1e83d630e_FnIns> _1b8049a52_ains = *it;
			{
				if ((*(_1b8049a52_ains))._method_same(_13939_ins)) {
					return std::make_tuple(false,_1b804990e_j);
				}
			}
			_iter_next_1b8049876:;
			++it;
			_1b804990e_j++;
			goto _iter_begin_1b8049876;
		}
		_iter_end_1b8049876:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_13939_ins);
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83d4384_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b2587a_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b1ade2_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b16162_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e83de900_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b592255e_ObjectCoder> _1b592255e_ObjectCoder::_static_method_new(jule::Ptr<_1b54c72bd_IR>& _6028_ir,_1b58d98cd_SerializationInfo _6037_info) {
	jule::Ptr<_1b592255e_ObjectCoder> _6117_oc = jule::new_struct<_1b592255e_ObjectCoder>(new( std::nothrow ) _1b592255e_ObjectCoder(_6028_ir,_6037_info,jule::Str(),jule::Ptr<_1b57d05a4_ExprCoder>(),jule::Ptr<_1b57cc35e_ScopeCoder>()));
	(*(_6117_oc))._field_ec=_1b57d05a4_ExprCoder::_static_method_new(_6117_oc);
	(*(_6117_oc))._field_sc=_1b57cc35e_ScopeCoder::_static_method_new(_6117_oc);
	return _6117_oc;
}



inline void _1b592255e_ObjectCoder::_method_add_indent(void) {
	
	(*this)._field_indent_buffer+=jule::Str("\t", 1);
}



inline void _1b592255e_ObjectCoder::_method_done_indent(void) {
	(*this)._field_indent_buffer=(*this)._field_indent_buffer.slice(0LL,((*this)._field_indent_buffer.len() - 1LL));
}



inline jule::Str _1b592255e_ObjectCoder::_method_indent(void) {
	return (*this)._field_indent_buffer;
}



inline jule::Str _1b592255e_ObjectCoder::_method_loc_info(_212ae5c02_Token& _8724_t) {
	jule::Str _8817_loc = (*(_8724_t._field_file))._method_path();
	if (_210ecc0b8_PRODUCTION) {
		{
			
			if (_2127d7dbc_has_prefix(_8817_loc,_21289b502_PATH_STDLIB)) {
				_case_begin_1b910ca15:;
				{
					(_8817_loc).mut_slice(_211dd6565_dir(_21289b502_PATH_STDLIB).len() + 1LL);
				}
			}
			else if (_2127d7dbc_has_prefix(_8817_loc,(*((*this)._field_ir))._field_root)) {
				_case_begin_1b910ca8c:;
				{
					(_8817_loc).mut_slice(_211dd6565_dir((*((*this)._field_ir))._field_root).len() + 1LL);
				}
			}
			_match_end_1b910c916:;
		}
	}
	_8817_loc+=jule::Str(":", 1);
	_8817_loc+=_1cde2b4ab_itoa(_8724_t._field_row);
	_8817_loc+=jule::Str(":", 1);
	_8817_loc+=_1cde2b4ab_itoa(_8724_t._field_column);
	return _1b58541b6_cstr_bytes(static_cast<jule::Slice<jule::U8>>(_8817_loc));
}



inline jule::Str _1b592255e_ObjectCoder::_method_links(void) {
	jule::Str _11217_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b9111222:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b9111310_pkg = *it;
			{
				{
					
					if ((!((*(_1b9111310_pkg))._field_cpp_linked))) {
						_case_begin_1b91119a3:;
						{
							goto _iter_next_1b9111222;
						}
					}
					else if (_21286e382_is_std_header_path((*(_1b9111310_pkg))._field_path)) {
						_case_begin_1b9111a2a:;
						{
							_11217_obj+=jule::Str("#include ", 9);
							_11217_obj+=(*(_1b9111310_pkg))._field_path;
							_11217_obj+=jule::Str("\n", 1);
						}
					}
					_match_end_1b91118a4:;
				}
			}
			_iter_next_1b9111222:;
			++it;
			goto _iter_begin_1b9111222;
		}
		_iter_end_1b9111222:;
	}
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b9113301:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b91114a8_pkg = *it;
			{
				{
					
					if ((!((*(_1b91114a8_pkg))._field_cpp_linked))) {
						_case_begin_1b9113499:;
						{
							goto _iter_next_1b9113301;
						}
					}
					else if (_1b58d3db1_is_cpp_header_file((*(_1b91114a8_pkg))._field_path)) {
						_case_begin_1b9113521:;
						{
							_11217_obj+=jule::Str("#include \"", 10);
							_11217_obj+=(*(_1b91114a8_pkg))._field_path;
							_11217_obj+=jule::Str("\"\n", 2);
						}
					}
					_match_end_1b911339a:;
				}
			}
			_iter_next_1b9113301:;
			++it;
			goto _iter_begin_1b9113301;
		}
		_iter_end_1b9113301:;
	}
	return _11217_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_param_ins(jule::Ptr<_1e83d5bb0_ParamIns>& _13829_p) {
	jule::Str _13917_obj = _1b592c437_TypeCoder::_static_method_param_ins(_13829_p);
	_13917_obj+=jule::Str(" ", 1);
	_13917_obj+=_1b58c4698_IdentCoder::_static_method_param((*(_13829_p))._field_decl);
	return _13917_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_param(jule::Ptr<_1e83d3839_Param>& _14629_p) {
	jule::Str _14717_obj = _1b592c437_TypeCoder::_static_method_param(_14629_p);
	if (((!((*(_14629_p))._field_ident.empty())) && (!(_212ae9255_is_ignore_ident((*(_14629_p))._field_ident)))) && (!(_212ae95da_is_anon_ident((*(_14629_p))._field_ident)))) {
		_14717_obj+=jule::Str(" ", 1);
		_14717_obj+=_1b58c4698_IdentCoder::_static_method_param(_14629_p);
	}
	return _14717_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_params(jule::Slice<jule::Ptr<_1e83d3839_Param>>& _15630_params) {
	{
		
		if ((_15630_params.len() == 0LL)) {
			_case_begin_1b9119659:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_15630_params.len() == 1LL) && (*(_15630_params[0LL]))._method_is_self()) {
			_case_begin_1b91196d1:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_1b911955a:;
	}
	jule::Str _16317_obj = jule::Str("(", 1);
	{
		auto &expr = _15630_params;
		auto it = expr.begin();
		_iter_begin_1b911ae30:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d3839_Param> _1b911aa12_p = *it;
			{
				if ((!((*(_1b911aa12_p))._method_is_self()))) {
					_16317_obj+=((*this)._method_param(_1b911aa12_p) + jule::Str(",", 1));
				}
			}
			_iter_next_1b911ae30:;
			++it;
			goto _iter_begin_1b911ae30;
		}
		_iter_end_1b911ae30:;
	}
	(_16317_obj).mut_slice(0LL,_16317_obj.len() - 1LL);
	return (_16317_obj + jule::Str(")", 1));
}



inline jule::Str _1b592255e_ObjectCoder::_method_params_ins(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>& _17534_params) {
	{
		
		if ((_17534_params.len() == 0LL)) {
			_case_begin_1b911cd77:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_17534_params.len() == 1LL) && (*((*(_17534_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_1b911cdee:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_1b911cc78:;
	}
	jule::Str _18317_obj = jule::Str("(", 1);
	{
		auto &expr = _17534_params;
		auto it = expr.begin();
		_iter_begin_1b911e780:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> _1b911e362_p = *it;
			{
				if ((!((*((*(_1b911e362_p))._field_decl))._method_is_self()))) {
					_18317_obj+=((*this)._method_param_ins(_1b911e362_p) + jule::Str(",", 1));
				}
			}
			_iter_next_1b911e780:;
			++it;
			goto _iter_begin_1b911e780;
		}
		_iter_end_1b911e780:;
	}
	(_18317_obj).mut_slice(0LL,_18317_obj.len() - 1LL);
	return (_18317_obj + jule::Str(")", 1));
}



inline jule::Str _1b592255e_ObjectCoder::_method_params_decls(jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>& _19636_params) {
	{
		
		if ((_19636_params.len() == 0LL)) {
			_case_begin_1b9121d7b:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_19636_params.len() == 1LL) && (*((*(_19636_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_1b9121e03:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_1b9121c7c:;
	}
	jule::Str _20417_obj = jule::Str("(", 1);
	{
		auto &expr = _19636_params;
		auto it = expr.begin();
		_iter_begin_1b9123784:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> _1b9123366_p = *it;
			{
				if ((!((*((*(_1b9123366_p))._field_decl))._method_is_self()))) {
					_20417_obj+=_1b592c437_TypeCoder::_static_method_param_ins(_1b9123366_p);
					_20417_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_1b9123784:;
			++it;
			goto _iter_begin_1b9123784;
		}
		_iter_end_1b9123784:;
	}
	(_20417_obj).mut_slice(0LL,_20417_obj.len() - 1LL);
	return (_20417_obj + jule::Str(")", 1));
}



inline jule::Str _1b592255e_ObjectCoder::_method_trait_def(jule::Ptr<_1e85a7865_Trait>& _21833_t) {
	
	jule::Str _22013_outid = _1b58c4698_IdentCoder::_static_method_trait_decl(_21833_t);
	jule::Str _22217_obj = jule::Str("struct ", 7);
	_22217_obj+=_22013_outid;
	_22217_obj+=jule::Str(" {\n", 3);
	_22217_obj+=jule::Str("\t", 1);
	_22217_obj+=jule::Str("virtual ~", 9);
	_22217_obj+=_22013_outid;
	_22217_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto &expr = (*(_21833_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b912747a:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b912759b_f = *it;
			{
				_22217_obj+=jule::Str("\t", 1);
				_22217_obj+=jule::Str("virtual ", 8);
				_22217_obj+=_1b592c437_TypeCoder::_static_method_func_result(_1b912759b_f);
				_22217_obj+=jule::Str(" _method_", 9);
				_22217_obj+=(*(_1b912759b_f))._field_ident;
				_22217_obj+=(*this)._method_params((*(_1b912759b_f))._field_params);
				_22217_obj+=jule::Str(" {", 2);
				if ((!((*(_1b912759b_f))._method_is_void()))) {
					_22217_obj+=jule::Str(" return {}; ", 12);
				}
				_22217_obj+=jule::Str("}\n", 2);
			}
			_iter_next_1b912747a:;
			++it;
			goto _iter_begin_1b912747a;
		}
		_iter_end_1b912747a:;
	}
	_22217_obj+=jule::Str("};", 2);
	return _22217_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_traits_tbl(jule::Ptr<_1ce7204a8_SymbolTable>& _24734_tbl) {
	jule::Str _24817_obj = jule::Str();
	{
		auto &expr = (*(_24734_tbl))._field_traits;
		auto it = expr.begin();
		_iter_begin_1b912adb8:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> _1b912ae84_t = *it;
			{
				_24817_obj+=(*this)._method_trait_def(_1b912ae84_t);
				_24817_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_1b912adb8:;
			++it;
			goto _iter_begin_1b912adb8;
		}
		_iter_end_1b912adb8:;
	}
	return _24817_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_traits_pkg(jule::Ptr<_1ce6a15e3_Package>& _25734_pkg) {
	jule::Str _25817_obj = jule::Str();
	{
		auto &expr = (*(_25734_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_1b912c969:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b912ca35_tbl = *it;
			{
				_25817_obj+=(*this)._method_traits_tbl(_1b912ca35_tbl);
			}
			_iter_next_1b912c969:;
			++it;
			goto _iter_begin_1b912c969;
		}
		_iter_end_1b912c969:;
	}
	return _25817_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_traits(void) {
	jule::Str _26717_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b912dea9:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b912e097_u = *it;
			{
				if ((!((*(_1b912e097_u))._field_cpp_linked))) {
					_26717_obj+=(*this)._method_traits_pkg((*(_1b912e097_u))._field_package);
				}
			}
			_iter_next_1b912dea9:;
			++it;
			goto _iter_begin_1b912dea9;
		}
		_iter_end_1b912dea9:;
	}
	_26717_obj+=(*this)._method_traits_pkg((*((*this)._field_ir))._field_main);
	return _26717_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_trait_decl(jule::Ptr<_1e85a7865_Trait>& _27830_t) {
	jule::Str _27917_obj = jule::Str("struct ", 7);
	_27917_obj+=_1b58c4698_IdentCoder::_static_method_trait_decl(_27830_t);
	_27917_obj+=jule::Str(";", 1);
	return _27917_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_trait_decls(jule::Ptr<_1ce6a15e3_Package>& _28635_p) {
	jule::Str _28717_obj = jule::Str();
	{
		auto &expr = (*(_28635_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b913263e:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b913270a_f = *it;
			{
				{
					auto &expr = (*(_1b913270a_f))._field_traits;
					auto it = expr.begin();
					_iter_begin_1b9132e47:;
					if (it != expr.end()) {
						jule::Ptr<_1e85a7865_Trait> _1b9132ead_t = *it;
						{
							if ((*(_1b9132ead_t))._field_token._field_id != static_cast<jule::U64>(0LLU)) {
								_28717_obj+=(*this)._method_trait_decl(_1b9132ead_t);
								_28717_obj+=jule::Str("\n", 1);
							}
						}
						_iter_next_1b9132e47:;
						++it;
						goto _iter_begin_1b9132e47;
					}
					_iter_end_1b9132e47:;
				}
			}
			_iter_next_1b913263e:;
			++it;
			goto _iter_begin_1b913263e;
		}
		_iter_end_1b913263e:;
	}
	return _28717_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_plain_decl(jule::Ptr<_1e83b1718_Struct>& _30044_s) {
	jule::Str _30117_obj = jule::Str();
	{
		auto &expr = (*(_30044_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b9134cb2:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b84bc_StructIns> _1b9134d7d_ins = *it;
			{
				_30117_obj+=jule::Str("\nstruct ", 8);
				_30117_obj+=_1b58c4698_IdentCoder::_static_method_structure_ins(_1b9134d7d_ins);
				_30117_obj+=jule::Str(";\n", 2);
			}
			_iter_next_1b9134cb2:;
			++it;
			goto _iter_begin_1b9134cb2;
		}
		_iter_end_1b9134cb2:;
	}
	return _30117_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_plain_decls(void) {
	jule::Str _31217_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_1b91364ab:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b9136555_s = *it;
			{
				if ((!((*(_1b9136555_s))._field_cpp_linked)) && ((*(_1b9136555_s))._field_token._field_id != static_cast<jule::U64>(0LLU))) {
					_31217_obj+=(*this)._method_structure_plain_decl(_1b9136555_s);
					_31217_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_1b91364ab:;
			++it;
			goto _iter_begin_1b91364ab;
		}
		_iter_end_1b91364ab:;
	}
	return _31217_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_traits(jule::Ptr<_1e83b1718_Struct>& _32336_s) {
	if (((*(_32336_s))._field_implements.len() == 0LL)) {
		return jule::Str();
	}
	jule::Str _32717_obj = jule::Str(": ", 2);
	{
		auto &expr = (*(_32336_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_1b91391d4:;
		if (it != expr.end()) {
			jule::Ptr<_1e85a7865_Trait> &_1b91392d3_i = *it;
			{
				_32717_obj+=jule::Str("public ", 7);
				_32717_obj+=_1b58c4698_IdentCoder::_static_method_trait_decl(_1b91392d3_i);
				_32717_obj+=jule::Str(",", 1);
			}
			_iter_next_1b91391d4:;
			++it;
			goto _iter_begin_1b91391d4;
		}
		_iter_end_1b91391d4:;
	}
	(_32717_obj).mut_slice(0LL,_32717_obj.len() - 1LL);
	return _32717_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_var_init_expr(jule::Ptr<_1ce6cecb4_Var>& _33837_v,jule::Str _33846_init) {
	jule::Str _33917_obj = jule::Str();
	if ((*(_33837_v))._field_statically) {
		_33917_obj+=jule::Str("static ", 7);
	}
	_33917_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_33837_v))._field_kind))._field_kind);
	_33917_obj+=jule::Str(" ", 1);
	if ((*(_33837_v))._field_reference) {
		_33917_obj+=jule::Str("&", 1);
	}
	_33917_obj+=_1b58c4698_IdentCoder::_static_method_var(_33837_v);
	if ((!(_33846_init.empty()))) {
		_33917_obj+=jule::Str(" = ", 3);
		_33917_obj+=_33846_init;
	}
	_33917_obj+=jule::Str(";", 1);
	return _33917_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_var(jule::Ptr<_1ce6cecb4_Var> _35926_v) {
	if (_212ae9255_is_ignore_ident((*(_35926_v))._field_ident)) {
		return jule::Str();
	}
	if (((*(_35926_v))._field_value != nullptr) && ((*((*(_35926_v))._field_value))._field_expr != nullptr)) {
		if ((*((*((*(_35926_v))._field_value))._field_data))._field_model != jule::Any(nullptr)) {
			return (*this)._method_var_init_expr(_35926_v,(*((*this)._field_ec))._method_val((*(_35926_v))._field_value));
		}
		return (*this)._method_var_init_expr(_35926_v,jule::Str());
	}
	return (*this)._method_var_init_expr(_35926_v,(*((*this)._field_ec))._method_init_expr((*((*(_35926_v))._field_kind))._field_kind));
}



inline jule::Str _1b592255e_ObjectCoder::_method_field_decl(jule::Ptr<_1e83b2cbe_FieldIns>& _37334_f) {
	jule::Str _37417_obj = _1b592c437_TypeCoder::_static_method_kind((*(_37334_f))._field_kind);
	_37417_obj+=jule::Str(" ", 1);
	_37417_obj+=_1b58c4698_IdentCoder::_static_method_field((*(_37334_f))._field_decl);
	_37417_obj+=jule::Str(" = ", 3);
	if (((*(_37334_f))._field_default == nullptr)) {
		_37417_obj+=(*((*this)._field_ec))._method_init_expr((*(_37334_f))._field_kind);
	} else {
		_37417_obj+=(*((*this)._field_ec))._method_expr((*((*(_37334_f))._field_default))._field_model);
	}
	_37417_obj+=jule::Str(";", 1);
	return _37417_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_build_structure_self_field_kind(jule::Ptr<_1e83b84bc_StructIns>& _38955_s) {
	return _1b592c437_TypeCoder::_static_method_as_sptr(_1b592c437_TypeCoder::_static_method_structure_ins(_38955_s));
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_self_field(jule::Ptr<_1e83b84bc_StructIns>& _39444_s) {
	jule::Str _39517_obj = (*this)._method_build_structure_self_field_kind(_39444_s);
	_39517_obj+=jule::Str(" self;", 6);
	return _39517_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_self_field_init_st(jule::Ptr<_1e83b84bc_StructIns>& _40052_s) {
	jule::Str _40117_obj = jule::Str("this->self = ", 13);
	_40117_obj+=(*this)._method_build_structure_self_field_kind(_40052_s);
	_40117_obj+=jule::Str("::make(this, nullptr);", 22);
	return _40117_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_constructor(jule::Ptr<_1e83b84bc_StructIns>& _40745_s) {
	jule::Str _40817_obj = _1b58c4698_IdentCoder::_static_method_structure_ins(_40745_s);
	_40817_obj+=jule::Str("(", 1);
	if (((*(_40745_s))._field_fields.len() > 0LL)) {
		{
			auto &expr = (*(_40745_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b9149711:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b91497cc_f = *it;
				{
					_40817_obj+=_1b592c437_TypeCoder::_static_method_kind((*(_1b91497cc_f))._field_kind);
					_40817_obj+=jule::Str(" __param_", 9);
					_40817_obj+=(*((*(_1b91497cc_f))._field_decl))._field_ident;
					_40817_obj+=jule::Str(", ", 2);
				}
				_iter_next_1b9149711:;
				++it;
				goto _iter_begin_1b9149711;
			}
			_iter_end_1b9149711:;
		}
		(_40817_obj).mut_slice(0LL,_40817_obj.len() - 2LL);
	} else {
		_40817_obj+=jule::Str("void", 4);
	}
	_40817_obj+=jule::Str(")", 1);
	if (((*(_40745_s))._field_fields.len() > 0LL)) {
		_40817_obj+=jule::Str(": ", 2);
		{
			auto &expr = (*(_40745_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b914bd62:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b914be83_f = *it;
				{
					_40817_obj+=_1b58c4698_IdentCoder::_static_method_field((*(_1b914be83_f))._field_decl);
					_40817_obj+=jule::Str("(", 1);
					_40817_obj+=jule::Str("__param_", 8);
					_40817_obj+=(*((*(_1b914be83_f))._field_decl))._field_ident;
					_40817_obj+=jule::Str("), ", 3);
				}
				_iter_next_1b914bd62:;
				++it;
				goto _iter_begin_1b914bd62;
			}
			_iter_end_1b914bd62:;
		}
		(_40817_obj).mut_slice(0LL,_40817_obj.len() - 2LL);
	}
	_40817_obj+=jule::Str(" {", 2);
	if ((*((*(_40745_s))._field_decl))._method_has_ref_accessible()) {
		_40817_obj+=jule::Str("\n", 1);
		(*this)._method_add_indent();
		_40817_obj+=(*this)._method_indent();
		_40817_obj+=(*this)._method_structure_self_field_init_st(_40745_s);
		_40817_obj+=jule::Str("\n", 1);
		(*this)._method_done_indent();
		_40817_obj+=jule::Str("\n", 1);
		_40817_obj+=(*this)._method_indent();
	}
	_40817_obj+=jule::Str("}", 1);
	return _40817_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_destructor(jule::Ptr<_1e83b84bc_StructIns>& _45144_s) {
	
	jule::Ptr<_1e83d4384_Fn> _45313_dispose_method = (*(_45144_s))._method_find_method(jule::Str("dispose", 7),false);
	jule::Bool _45417_disposed = _1ce6d1e2b_FuncPattern::_static_method_dispose(_45313_dispose_method);
	jule::Bool _45513_ref_access = (*((*(_45144_s))._field_decl))._method_has_ref_accessible();
	if ((!(_45513_ref_access)) && (!(_45417_disposed))) {
		return jule::Str();
	}
	jule::Str _46117_obj = jule::Str("~", 1);
	_46117_obj+=_1b58c4698_IdentCoder::_static_method_structure_ins(_45144_s);
	_46117_obj+=jule::Str("(void) { ", 9);
	if (_45417_disposed) {
		_46117_obj+=jule::Str("this->", 6);
		_46117_obj+=_1b58c4698_IdentCoder::_static_method_func(_45313_dispose_method);
		_46117_obj+=jule::Str("(); ", 4);
	}
	if (_45513_ref_access) {
		_46117_obj+=jule::Str("this->self.ref = nullptr; ", 26);
	}
	_46117_obj+=jule::Str("}", 1);
	return _46117_obj;
}



inline void _1b592255e_ObjectCoder::_method_structure_operator_eq(jule::Str& _47945_obj,jule::Str& _47956_ident,jule::Ptr<_1e83b84bc_StructIns>& _47973_s) {
	if (((*(_47973_s))._field_operators._field_eq != nullptr)) {
		(*this)._method_structure_operator(_47945_obj,_47956_ident,(*(_47973_s))._field_operators._field_eq,jule::Str("==", 2));
		return;
	}
	_47945_obj+=(*this)._method_indent();
	if (_21106201b_OPT_INLINE) {
		_47945_obj+=jule::Str("inline ", 7);
	}
	_47945_obj+=jule::Str("bool operator==(", 16);
	_47945_obj+=_47956_ident;
	_47945_obj+=jule::Str(" _other) {", 10);
	if (((*(_47973_s))._field_fields.len() > 0LL)) {
		(*this)._method_add_indent();
		_47945_obj+=jule::Str("\n", 1);
		_47945_obj+=(*this)._method_indent();
		_47945_obj+=jule::Str("return ", 7);
		(*this)._method_add_indent();
		jule::I64 _49921_n = 0LL;
		{
			auto &expr = (*(_47973_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b9159b72:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b9159c3d_f = *it;
				{
					jule::Ptr<_1e83b84bc_StructIns> _50221_strct = (*((*(_1b9159c3d_f))._field_kind))._method_strct();
					if (((_50221_strct != nullptr) && ((*(_50221_strct))._field_decl != nullptr)) && (*((*(_50221_strct))._field_decl))._field_cpp_linked) {
						goto _iter_next_1b9159b72;
					}
					(_49921_n)++;
					_47945_obj+=jule::Str("\n", 1);
					_47945_obj+=(*this)._method_indent();
					_47945_obj+=jule::Str("this->", 6);
					jule::Str _51121_f_ident = _1b58c4698_IdentCoder::_static_method_field((*(_1b9159c3d_f))._field_decl);
					_47945_obj+=_51121_f_ident;
					_47945_obj+=jule::Str(" == _other.", 11);
					_47945_obj+=_51121_f_ident;
					_47945_obj+=jule::Str(" &&", 3);
				}
				_iter_next_1b9159b72:;
				++it;
				goto _iter_begin_1b9159b72;
			}
			_iter_end_1b9159b72:;
		}
		(*this)._method_done_indent();
		if ((_49921_n > 0LL)) {
			(_47945_obj).mut_slice(0LL,_47945_obj.len() - 3LL);
		} else {
			_47945_obj+=jule::Str("true", 4);
		}
		_47945_obj+=jule::Str(";\n", 2);
		(*this)._method_done_indent();
		_47945_obj+=(*this)._method_indent();
		_47945_obj+=jule::Str("}", 1);
	} else {
		_47945_obj+=jule::Str(" return true; }", 15);
	}
	_47945_obj+=jule::Str("\n\n", 2);
}



inline void _1b592255e_ObjectCoder::_method_structure_operator_not_eq(jule::Str& _53349_obj,jule::Str& _53360_ident,jule::Ptr<_1e83b84bc_StructIns>& _53377_s) {
	_53349_obj+=(*this)._method_indent();
	if (_21106201b_OPT_INLINE) {
		_53349_obj+=jule::Str("inline ", 7);
	}
	_53349_obj+=jule::Str("bool operator!=(", 16);
	_53349_obj+=_53360_ident;
	_53349_obj+=jule::Str(" _other) { return !this->operator==(_other); }\n\n", 48);
}



inline void _1b592255e_ObjectCoder::_method_structure_operator(jule::Str& _54442_obj,jule::Str& _54453_ident,jule::Ptr<_1e83d630e_FnIns>& _54470_f,jule::Str _54481_op) {
	if ((_54470_f == nullptr)) {
		return;
	}
	jule::Bool _54913_unary = ((*(_54470_f))._field_params.len() == 1LL);
	jule::Bool _55013_assignment = (*((*(_54470_f))._field_decl))._method_is_void();
	_54442_obj+=(*this)._method_indent();
	if (_21106201b_OPT_INLINE) {
		_54442_obj+=jule::Str("inline ", 7);
	}
	if (_55013_assignment) {
		_54442_obj+=_54453_ident;
		_54442_obj+=jule::Str("&", 1);
	} else {
		if (((*((*(_54470_f))._field_result))._method_prim() == nullptr)) {
			_54442_obj+=_54453_ident;
		} else {
			_54442_obj+=jule::Str("jule::Bool", 10);
		}
	}
	_54442_obj+=jule::Str(" operator", 9);
	_54442_obj+=_54481_op;
	_54442_obj+=jule::Str("(", 1);
	if ((!(_54913_unary))) {
		jule::Ptr<_1e83d5bb0_ParamIns> _57221_p = (*(_54470_f))._field_params[1LL];
		_54442_obj+=_1b592c437_TypeCoder::_static_method_param_ins(_57221_p);
		_54442_obj+=jule::Str(" _other", 7);
	}
	_54442_obj+=jule::Str(") { ", 4);
	if ((!(_55013_assignment))) {
		_54442_obj+=jule::Str("return ", 7);
	}
	_54442_obj+=jule::Str("this->", 6);
	_54442_obj+=_1b58c4698_IdentCoder::_static_method_func_ins(_54470_f);
	if ((!(_54913_unary))) {
		_54442_obj+=jule::Str("(_other); ", 10);
		if (_55013_assignment) {
			_54442_obj+=jule::Str("return *this; ", 14);
		}
		_54442_obj+=jule::Str("}", 1);
	} else {
		_54442_obj+=jule::Str("(); }", 5);
	}
	_54442_obj+=jule::Str("\n\n", 2);
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_operators(jule::Ptr<_1e83b84bc_StructIns>& _59443_s) {
	jule::Str _59513_ident = _1b58c4698_IdentCoder::_static_method_structure_ins(_59443_s);
	jule::Str _59617_obj = jule::Str();
	(*this)._method_structure_operator_eq(_59617_obj,_59513_ident,_59443_s);
	(*this)._method_structure_operator_not_eq(_59617_obj,_59513_ident,_59443_s);
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_gt,jule::Str(">", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_gt_eq,jule::Str(">=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_lt,jule::Str("<", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_lt_eq,jule::Str("<=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_shl,jule::Str("<<", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_shr,jule::Str(">>", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_add,jule::Str("+", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_sub,jule::Str("-", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_div,jule::Str("/", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_mul,jule::Str("*", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_mod,jule::Str("%", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_and,jule::Str("&", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_or,jule::Str("|", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_xor,jule::Str("^", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_neg,jule::Str("-", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_pos,jule::Str("+", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_not,jule::Str("~", 1));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_add_assign,jule::Str("+=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_sub_assign,jule::Str("-=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_div_assign,jule::Str("/=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_mul_assign,jule::Str("*=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_mod_assign,jule::Str("%=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_shl_assign,jule::Str("<<=", 3));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_shr_assign,jule::Str(">>=", 3));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_or_assign,jule::Str("|=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_and_assign,jule::Str("&=", 2));
	(*this)._method_structure_operator(_59617_obj,_59513_ident,(*(_59443_s))._field_operators._field_bit_xor_assign,jule::Str("^=", 2));
	return _59617_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_derive_defs_decls(jule::Ptr<_1e83b84bc_StructIns>& _63547_s) {
	jule::Str _63617_obj = jule::Str();
	if ((*((*(_63547_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_63617_obj+=(*this)._method_indent();
		_63617_obj+=_1b58c250e_DeriveCoder::_static_method_clone_func_decl((*(_63547_s))._field_decl);
		_63617_obj+=jule::Str(";\n\n", 3);
	}
	return _63617_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_ins_decl(jule::Ptr<_1e83b84bc_StructIns>& _64542_s) {
	jule::Str _64617_obj = jule::Str("struct ", 7);
	jule::Str _64713_out_ident = _1b58c4698_IdentCoder::_static_method_structure_ins(_64542_s);
	_64617_obj+=_64713_out_ident;
	_64617_obj+=(*this)._method_structure_traits((*(_64542_s))._field_decl);
	_64617_obj+=jule::Str(" {\n", 3);
	jule::Bool _65313_ref_access = (*((*(_64542_s))._field_decl))._method_has_ref_accessible();
	(*this)._method_add_indent();
	if (_65313_ref_access) {
		_64617_obj+=(*this)._method_indent();
		_64617_obj+=(*this)._method_structure_self_field(_64542_s);
		_64617_obj+=jule::Str("\n\n", 2);
	}
	if (((*(_64542_s))._field_fields.len() > 0LL)) {
		{
			auto &expr = (*(_64542_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b918189c:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b9181968_f = *it;
				{
					_64617_obj+=(*this)._method_indent();
					_64617_obj+=(*this)._method_field_decl(_1b9181968_f);
					_64617_obj+=jule::Str("\n", 1);
				}
				_iter_next_1b918189c:;
				++it;
				goto _iter_begin_1b918189c;
			}
			_iter_end_1b918189c:;
		}
		_64617_obj+=jule::Str("\n\n", 2);
		_64617_obj+=(*this)._method_indent();
		_64617_obj+=(*this)._method_structure_constructor(_64542_s);
		_64617_obj+=jule::Str("\n\n", 2);
	}
	_64617_obj+=(*this)._method_indent();
	_64617_obj+=(*this)._method_structure_destructor(_64542_s);
	_64617_obj+=jule::Str("\n\n", 2);
	_64617_obj+=(*this)._method_indent();
	_64617_obj+=_64713_out_ident;
	if (_65313_ref_access) {
		_64617_obj+=jule::Str("(void) { ", 9);
		_64617_obj+=(*this)._method_structure_self_field_init_st(_64542_s);
		_64617_obj+=jule::Str(" }\n\n", 4);
	} else {
		_64617_obj+=jule::Str("(void) = default;\n\n", 19);
	}
	{
		auto &expr = (*(_64542_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b9180879:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b91844c6_f = *it;
			{
				_64617_obj+=(*this)._method_func_decl(_1b91844c6_f,true);
				_64617_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_1b9180879:;
			++it;
			goto _iter_begin_1b9180879;
		}
		_iter_end_1b9180879:;
	}
	_64617_obj+=(*this)._method_structure_derive_defs_decls(_64542_s);
	_64617_obj+=(*this)._method_structure_operators(_64542_s);
	_64617_obj+=jule::Str("\n", 1);
	(*this)._method_done_indent();
	_64617_obj+=((*this)._method_indent() + jule::Str("};", 2));
	return _64617_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_decl(jule::Ptr<_1e83b1718_Struct>& _70438_s) {
	jule::Str _70517_obj = jule::Str();
	{
		auto &expr = (*(_70438_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b91884a8:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b84bc_StructIns> _1b9188574_ins = *it;
			{
				_70517_obj+=(*this)._method_structure_ins_decl(_1b9188574_ins);
				_70517_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_1b91884a8:;
			++it;
			goto _iter_begin_1b91884a8;
		}
		_iter_end_1b91884a8:;
	}
	return _70517_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_decls(void) {
	jule::Str _71517_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_1b9189c6d:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b9189d17_s = *it;
			{
				if ((!((*(_1b9189d17_s))._field_cpp_linked)) && ((*(_1b9189d17_s))._field_token._field_id != static_cast<jule::U64>(0LLU))) {
					_71517_obj+=(*this)._method_structure_decl(_1b9189d17_s);
					_71517_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_1b9189c6d:;
			++it;
			goto _iter_begin_1b9189c6d;
		}
		_iter_end_1b9189c6d:;
	}
	return _71517_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_func_head(jule::Ptr<_1e83d630e_FnIns>& _72533_f,jule::Bool _72544_method) {
	jule::Str _72617_obj = jule::Str();
	if (_72544_method && (*((*(_72533_f))._field_decl))._field_statically) {
		_72617_obj+=jule::Str("static ", 7);
	}
	if (_21106201b_OPT_INLINE && (!((*((*(_72533_f))._field_decl))._method_is_entry_point()))) {
		_72617_obj+=jule::Str("inline ", 7);
	}
	_72617_obj+=_1b592c437_TypeCoder::_static_method_func_ins_result(_72533_f);
	_72617_obj+=jule::Str(" ", 1);
	if ((!(_72544_method)) && ((*((*(_72533_f))._field_decl))._field_owner != nullptr)) {
		_72617_obj+=_1b58c4698_IdentCoder::_static_method_structure_ins((*(_72533_f))._field_owner);
		_72617_obj+=jule::Str("::", 2);
	}
	_72617_obj+=_1b58c4698_IdentCoder::_static_method_func_ins(_72533_f);
	return _72617_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_func_decl(jule::Ptr<_1e83d4384_Fn>& _74733_f,jule::Bool _74741_method) {
	jule::Str _74817_obj = jule::Str();
	{
		auto &expr = (*(_74733_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b9190c85:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d630e_FnIns> _1b9190d51_c = *it;
			{
				_74817_obj+=(*this)._method_indent();
				_74817_obj+=(*this)._method_func_head(_1b9190d51_c,_74741_method);
				_74817_obj+=(*this)._method_params_decls((*(_1b9190d51_c))._field_params);
				_74817_obj+=jule::Str(";\n", 2);
			}
			_iter_next_1b9190c85:;
			++it;
			goto _iter_begin_1b9190c85;
		}
		_iter_end_1b9190c85:;
	}
	return _74817_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_func_decls(jule::Ptr<_1ce6a15e3_Package>& _75934_pkg) {
	jule::Str _76017_obj = jule::Str();
	{
		auto &expr = (*(_75934_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_1b91931a5:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b9193271_file = *it;
			{
				{
					auto &expr = (*(_1b9193271_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_1b91939ad:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d4384_Fn> _1b9193a24_f = *it;
						{
							if ((!((*(_1b9193a24_f))._field_cpp_linked)) && ((*(_1b9193a24_f))._field_token._field_id != static_cast<jule::U64>(0LLU))) {
								_76017_obj+=(*this)._method_func_decl(_1b9193a24_f,false);
							}
						}
						_iter_next_1b91939ad:;
						++it;
						goto _iter_begin_1b91939ad;
					}
					_iter_end_1b91939ad:;
				}
			}
			_iter_next_1b91931a5:;
			++it;
			goto _iter_begin_1b91931a5;
		}
		_iter_end_1b91931a5:;
	}
	return _76017_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_decls(void) {
	jule::Str _77317_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b91957d4:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b91958c2_u = *it;
			{
				if ((!((*(_1b91958c2_u))._field_cpp_linked))) {
					_77317_obj+=(*this)._method_trait_decls((*(_1b91958c2_u))._field_package);
				}
			}
			_iter_next_1b91957d4:;
			++it;
			goto _iter_begin_1b91957d4;
		}
		_iter_end_1b91957d4:;
	}
	_77317_obj+=(*this)._method_trait_decls((*((*this)._field_ir))._field_main);
	_77317_obj+=(*this)._method_structure_plain_decls();
	_77317_obj+=(*this)._method_traits();
	_77317_obj+=jule::Str("\n", 1);
	_77317_obj+=(*this)._method_structure_decls();
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b91979c3:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b9197ac2_u = *it;
			{
				if ((!((*(_1b9197ac2_u))._field_cpp_linked))) {
					_77317_obj+=(*this)._method_func_decls((*(_1b9197ac2_u))._field_package);
				}
			}
			_iter_next_1b91979c3:;
			++it;
			goto _iter_begin_1b91979c3;
		}
		_iter_end_1b91979c3:;
	}
	_77317_obj+=(*this)._method_func_decls((*((*this)._field_ir))._field_main);
	return _77317_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_pkg_globals(jule::Ptr<_1ce6a15e3_Package>& _80035_p,jule::Str& _80053_global_initializers) {
	jule::Str _80117_obj = jule::Str();
	{
		auto &expr = (*(_80035_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b919a179:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b919a245_f = *it;
			{
				{
					auto &expr = (*(_1b919a245_f))._field_vars;
					auto it = expr.begin();
					_iter_begin_1b919a982:;
					if (it != expr.end()) {
						jule::Ptr<_1ce6cecb4_Var> _1b919a9e8_v = *it;
						{
							if ((((*(_1b919a9e8_v))._field_token._field_id != static_cast<jule::U64>(0LLU)) && (!((*(_1b919a9e8_v))._field_cpp_linked))) && (!((*(_1b919a9e8_v))._field_constant))) {
								_80117_obj+=_1b592c437_TypeCoder::_static_method_kind((*((*(_1b919a9e8_v))._field_kind))._field_kind);
								_80117_obj+=jule::Str(" ", 1);
								if ((*(_1b919a9e8_v))._field_reference) {
									_80117_obj+=jule::Str("&", 1);
								}
								_80117_obj+=_1b58c4698_IdentCoder::_static_method_var(_1b919a9e8_v);
								_80117_obj+=jule::Str(";\n", 2);
								_80053_global_initializers+=(*this)._method_indent();
								_80053_global_initializers+=_1b58c4698_IdentCoder::_static_method_var(_1b919a9e8_v);
								if (((*(_1b919a9e8_v))._field_value != nullptr) && ((*((*(_1b919a9e8_v))._field_value))._field_expr != nullptr)) {
									if ((*((*((*(_1b919a9e8_v))._field_value))._field_data))._field_model != jule::Any(nullptr)) {
										_80053_global_initializers+=jule::Str(" = ", 3);
										_80053_global_initializers+=(*((*this)._field_ec))._method_val((*(_1b919a9e8_v))._field_value);
									}
								} else {
									_80053_global_initializers+=jule::Str(" = ", 3);
									_80053_global_initializers+=(*((*this)._field_ec))._method_init_expr((*((*(_1b919a9e8_v))._field_kind))._field_kind);
								}
								_80053_global_initializers+=jule::Str(";\n", 2);
							}
						}
						_iter_next_1b919a982:;
						++it;
						goto _iter_begin_1b919a982;
					}
					_iter_end_1b919a982:;
				}
			}
			_iter_next_1b919a179:;
			++it;
			goto _iter_begin_1b919a179;
		}
		_iter_end_1b919a179:;
	}
	return _80117_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_globals(jule::Str& _83231_global_initializers) {
	jule::Str _83317_obj = jule::Str();
	(*this)._method_add_indent();
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b91a2428:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b91a257c_u = *it;
			{
				if ((!((*(_1b91a257c_u))._field_cpp_linked))) {
					_83317_obj+=(*this)._method_pkg_globals((*(_1b91a257c_u))._field_package,_83231_global_initializers);
				}
			}
			_iter_next_1b91a2428:;
			++it;
			goto _iter_begin_1b91a2428;
		}
		_iter_end_1b91a2428:;
	}
	_83317_obj+=(*this)._method_pkg_globals((*((*this)._field_ir))._field_main,_83231_global_initializers);
	(*this)._method_done_indent();
	return _83317_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_func(jule::Ptr<_1e83d4384_Fn>& _84628_f) {
	jule::Str _84717_obj = jule::Str();
	{
		auto &expr = (*(_84628_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b91a4bcd:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d630e_FnIns> _1b91a4c99_ins = *it;
			{
				_84717_obj+=(*this)._method_func_head(_1b91a4c99_ins,false);
				_84717_obj+=(*this)._method_params_ins((*(_1b91a4c99_ins))._field_params);
				_84717_obj+=jule::Str(" ", 1);
				_84717_obj+=(*((*this)._field_sc))._method_func_scope(_1b91a4c99_ins);
				_84717_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_1b91a4bcd:;
			++it;
			goto _iter_begin_1b91a4bcd;
		}
		_iter_end_1b91a4bcd:;
	}
	return _84717_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_pkg_funcs(jule::Ptr<_1ce6a15e3_Package>& _85933_p) {
	jule::Str _86017_obj = jule::Str();
	{
		auto &expr = (*(_85933_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b91a7582:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b91a764d_f = *it;
			{
				{
					auto &expr = (*(_1b91a764d_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_1b91a7d8a:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d4384_Fn> _1b91a7e01_f = *it;
						{
							if ((!(_2110634a1_TEST)) && _1b592c0d5_has_directive((*(_1b91a7e01_f))._field_directives,jule::Str("test", 4))) {
								goto _iter_next_1b91a7d8a;
							}
							if ((!((*(_1b91a7e01_f))._field_cpp_linked)) && ((*(_1b91a7e01_f))._field_token._field_id != static_cast<jule::U64>(0LLU))) {
								_86017_obj+=(*this)._method_func(_1b91a7e01_f);
								_86017_obj+=jule::Str("\n\n", 2);
							}
						}
						_iter_next_1b91a7d8a:;
						++it;
						goto _iter_begin_1b91a7d8a;
					}
					_iter_end_1b91a7d8a:;
				}
			}
			_iter_next_1b91a7582:;
			++it;
			goto _iter_begin_1b91a7582;
		}
		_iter_end_1b91a7582:;
	}
	return _86017_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_methods(jule::Ptr<_1e83b84bc_StructIns>& _87641_s) {
	jule::Str _87717_obj = jule::Str();
	{
		auto &expr = (*(_87641_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b91aaa19:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b91aaad5_f = *it;
			{
				_87717_obj+=(*this)._method_indent();
				_87717_obj+=(*this)._method_func(_1b91aaad5_f);
				_87717_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_1b91aaa19:;
			++it;
			goto _iter_begin_1b91aaa19;
		}
		_iter_end_1b91aaa19:;
	}
	return _87717_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_ostream(jule::Ptr<_1e83b84bc_StructIns>& _88741_s) {
	jule::Str _88817_obj = jule::Str();
	_88817_obj+=(*this)._method_indent();
	_88817_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_88817_obj+=_1b58c4698_IdentCoder::_static_method_structure_ins(_88741_s);
	_88817_obj+=jule::Str(" &_Src) {\n", 10);
	(*this)._method_add_indent();
	_88817_obj+=(*this)._method_indent();
	jule::Ptr<_1e83d4384_Fn> _89617_fts = (*(_88741_s))._method_find_method(jule::Str("to_str", 6),false);
	if (_1ce6d1e2b_FuncPattern::_static_method_to_str(_89617_fts)) {
		_88817_obj+=jule::Str("_Stream << ((", 13);
		_88817_obj+=_1b58c4698_IdentCoder::_static_method_structure_ins(_88741_s);
		_88817_obj+=jule::Str(")(_Src)).", 9);
		_88817_obj+=_1b58c4698_IdentCoder::_static_method_func(_89617_fts);
		_88817_obj+=jule::Str("();\n", 4);
	} else {
		_88817_obj+=jule::Str("_Stream << \"", 12);
		_88817_obj+=(*((*(_88741_s))._field_decl))._field_ident;
		_88817_obj+=jule::Str("{\";\n", 4);
		{
			auto &expr = (*(_88741_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b91b1349:;
			if (it != expr.end()) {
				jule::I64 _1b91b1459_i = it - expr.begin();
				jule::Ptr<_1e83b2cbe_FieldIns> _1b91b15e1_f = *it;
				{
					_88817_obj+=(*this)._method_indent();
					_88817_obj+=jule::Str("_Stream << \"", 12);
					_88817_obj+=(*((*(_1b91b15e1_f))._field_decl))._field_ident;
					_88817_obj+=jule::Str(":", 1);
					jule::Ptr<_1e83b84bc_StructIns> _91521_strct = (*((*(_1b91b15e1_f))._field_kind))._method_strct();
					if (((_91521_strct != nullptr) && ((*(_91521_strct))._field_decl != nullptr)) && (*((*(_91521_strct))._field_decl))._field_cpp_linked) {
						_88817_obj+=jule::Str(" cpp.", 5);
						_88817_obj+=_1b58c4698_IdentCoder::_static_method_field((*(_1b91b15e1_f))._field_decl);
						_88817_obj+=jule::Str("\"", 1);
					} else {
						_88817_obj+=jule::Str("\" << _Src.", 10);
						_88817_obj+=_1b58c4698_IdentCoder::_static_method_field((*(_1b91b15e1_f))._field_decl);
					}
					if ((_1b91b1459_i + 1LL) < static_cast<jule::I64>((*(_88741_s))._field_fields.len())) {
						_88817_obj+=jule::Str(" << \", \"", 8);
					}
					_88817_obj+=jule::Str(";\n", 2);
				}
				_iter_next_1b91b1349:;
				++it;
				_1b91b1459_i++;
				goto _iter_begin_1b91b1349;
			}
			_iter_end_1b91b1349:;
		}
		_88817_obj+=(*this)._method_indent();
		_88817_obj+=jule::Str("_Stream << \"}\";\n", 16);
	}
	_88817_obj+=(*this)._method_indent();
	_88817_obj+=jule::Str("return _Stream;\n", 16);
	(*this)._method_done_indent();
	_88817_obj+=(*this)._method_indent();
	_88817_obj+=jule::Str("}", 1);
	return _88817_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_derive_defs(jule::Ptr<_1e83b84bc_StructIns>& _94345_s) {
	jule::Str _94417_obj = jule::Str();
	if ((*((*(_94345_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_94417_obj+=(*this)._method_indent();
		_94417_obj+=_1b58c250e_DeriveCoder::_static_method_clone_func_def((*(_94345_s))._field_decl);
		_94417_obj+=jule::Str("{\n", 2);
		(*this)._method_add_indent();
		_94417_obj+=(*this)._method_indent();
		_94417_obj+=_1b592c437_TypeCoder::_static_method_structure_ins(_94345_s);
		_94417_obj+=jule::Str(" clone;\n", 8);
		{
			auto &expr = (*(_94345_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_1b91b95d8:;
			if (it != expr.end()) {
				jule::Ptr<_1e83b2cbe_FieldIns> _1b91b9709_f = *it;
				{
					jule::Str _95421_ident = _1b58c4698_IdentCoder::_static_method_field((*(_1b91b9709_f))._field_decl);
					_94417_obj+=(*this)._method_indent();
					_94417_obj+=jule::Str("clone.", 6);
					_94417_obj+=_95421_ident;
					_94417_obj+=jule::Str(" = jule::clone(this->", 21);
					_94417_obj+=_95421_ident;
					_94417_obj+=jule::Str(");\n", 3);
				}
				_iter_next_1b91b95d8:;
				++it;
				goto _iter_begin_1b91b95d8;
			}
			_iter_end_1b91b95d8:;
		}
		_94417_obj+=(*this)._method_indent();
		_94417_obj+=jule::Str("return clone;\n", 14);
		(*this)._method_done_indent();
		_94417_obj+=(*this)._method_indent();
		_94417_obj+=jule::Str("}", 1);
	}
	return _94417_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure_ins(jule::Ptr<_1e83b84bc_StructIns>& _97237_s) {
	jule::Str _97317_obj = (*this)._method_structure_methods(_97237_s);
	_97317_obj+=jule::Str("\n\n", 2);
	_97317_obj+=(*this)._method_structure_derive_defs(_97237_s);
	_97317_obj+=jule::Str("\n\n", 2);
	_97317_obj+=(*this)._method_structure_ostream(_97237_s);
	return _97317_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structure(jule::Ptr<_1e83b1718_Struct>& _98233_s) {
	jule::Str _98317_obj = jule::Str();
	{
		auto &expr = (*(_98233_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_1b91bed3b:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b84bc_StructIns> _1b91bee07_ins = *it;
			{
				_98317_obj+=(*this)._method_structure_ins(_1b91bee07_ins);
				_98317_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_1b91bed3b:;
			++it;
			goto _iter_begin_1b91bed3b;
		}
		_iter_end_1b91bed3b:;
	}
	return _98317_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_structures(void) {
	jule::Str _99317_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_1b91c1601:;
		if (it != expr.end()) {
			jule::Ptr<_1e83b1718_Struct> _1b91c169a_s = *it;
			{
				if ((!((*(_1b91c169a_s))._field_cpp_linked)) && ((*(_1b91c169a_s))._field_token._field_id != static_cast<jule::U64>(0LLU))) {
					_99317_obj+=(*this)._method_structure(_1b91c169a_s);
					_99317_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_1b91c1601:;
			++it;
			goto _iter_begin_1b91c1601;
		}
		_iter_end_1b91c1601:;
	}
	return _99317_obj;
}



inline jule::Str _1b592255e_ObjectCoder::_method_funcs(void) {
	jule::Str _100517_obj = jule::Str();
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b91c3845:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b91c3933_u = *it;
			{
				if ((!((*(_1b91c3933_u))._field_cpp_linked))) {
					_100517_obj+=(*this)._method_pkg_funcs((*(_1b91c3933_u))._field_package);
				}
			}
			_iter_next_1b91c3845:;
			++it;
			goto _iter_begin_1b91c3845;
		}
		_iter_end_1b91c3845:;
	}
	_100517_obj+=(*this)._method_pkg_funcs((*((*this)._field_ir))._field_main);
	return _100517_obj;
}



inline void _1b592255e_ObjectCoder::_method_push_init(jule::Ptr<_1ce6a15e3_Package>& _101529_pkg,jule::Str& _101549_obj) {
	
	{
		auto &expr = (*(_101529_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_1b91c5ec9:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b91c6095_file = *it;
			{
				{
					auto &expr = (*(_1b91c6095_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_1b91c67d2:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d4384_Fn> &_1b91c6848_f = *it;
						{
							if (((*(_1b91c6848_f))._field_ident == jule::Str("init", 4))) {
								_101549_obj+=jule::Str("\n\t", 2);
								_101549_obj+=_1b58c4698_IdentCoder::_static_method_func(_1b91c6848_f);
								_101549_obj+=jule::Str("();", 3);
							}
						}
						_iter_next_1b91c67d2:;
						++it;
						goto _iter_begin_1b91c67d2;
					}
					_iter_end_1b91c67d2:;
				}
			}
			_iter_next_1b91c5ec9:;
			++it;
			goto _iter_begin_1b91c5ec9;
		}
		_iter_end_1b91c5ec9:;
	}
}



inline jule::Str _1b592255e_ObjectCoder::_method_init_caller(jule::Str& _102931_global_initializers) {
	jule::Str _103017_obj = jule::Str("void ", 5);
	_103017_obj+=jule::Str("__jule_call_initializers", 24);
	_103017_obj+=jule::Str("(void) {\n", 9);
	_103017_obj+=_102931_global_initializers;
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b91c8916:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b91c8a15_u = *it;
			{
				if ((!((*(_1b91c8a15_u))._field_cpp_linked))) {
					(*this)._method_push_init((*(_1b91c8a15_u))._field_package,_103017_obj);
				}
			}
			_iter_next_1b91c8916:;
			++it;
			goto _iter_begin_1b91c8916;
		}
		_iter_end_1b91c8916:;
	}
	(*this)._method_push_init((*((*this)._field_ir))._field_main,_103017_obj);
	_103017_obj+=jule::Str("\n}", 2);
	return _103017_obj;
}



inline void _1b592255e_ObjectCoder::_method_append_standard(jule::Str& _104839_obj_code) {
	_1b591a0a1_AbsTime _104913_time = _1b591ad71_Time::_static_method_now()._method_abs();
	jule::Str _105117_time_str = jule::Str();
	_105117_time_str+=_1ce276eee_fmt_uint(_104913_time._field_day,10LL);
	_105117_time_str+=jule::Str("/", 1);
	_105117_time_str+=_1ce276eee_fmt_uint(_104913_time._field_month,10LL);
	_105117_time_str+=jule::Str("/", 1);
	_105117_time_str+=_1ce276eee_fmt_uint(_104913_time._field_year,10LL);
	_105117_time_str+=jule::Str(" ", 1);
	_105117_time_str+=_1ce276eee_fmt_uint(_104913_time._field_hour,10LL);
	_105117_time_str+=jule::Str(".", 1);
	_105117_time_str+=_1ce276eee_fmt_uint(_104913_time._field_minute,10LL);
	_105117_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM) UTC", 25);
	jule::Str _106317_s = jule::Str();
	_106317_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_106317_s+=jule::Str("// JuleC version: ", 18);
	_106317_s+=jule::Str("jule0.0.10 @master", 18);
	_106317_s+=jule::Str("\n", 1);
	_106317_s+=jule::Str("// Date: ", 9);
	_106317_s+=_105117_time_str;
	_106317_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_106317_s+=(*this)._field_info._field_compiler;
	_106317_s+=jule::Str(" ", 1);
	_106317_s+=(*this)._field_info._field_compiler_command;
	_106317_s+=jule::Str("\n\n", 2);
	if (_210ecc0b8_PRODUCTION) {
		_106317_s+=jule::Str("#define __JULE_ENABLE__PRODUCTION\n", 34);
	}
	if ((!(_21106367c_RC))) {
		_106317_s+=jule::Str("#define __JULE_DISABLE__REFERENCE_COUNTING\n", 43);
	}
	if ((!(_2110639ce_SAFETY))) {
		_106317_s+=jule::Str("#define __JULE_DISABLE__SAFETY\n", 31);
	}
	_106317_s+=jule::Str("\n\n#include \"", 12);
	_106317_s+=_2128b235e_PATH_API;
	_106317_s+=jule::Str("\"\n\n", 3);
	_106317_s+=_104839_obj_code;
	_106317_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 149);
	if (_2110634a1_TEST) {
		_106317_s+=jule::Str("test_point();", 13);
	} else {
		_106317_s+=jule::Str("entry_point();", 14);
	}
	_106317_s+=jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28);
	_104839_obj_code=_106317_s;
}



inline jule::Str _1b592255e_ObjectCoder::_method_serialize(void) {
	jule::Str _111417_global_initializers = jule::Str();
	jule::Str _111517_obj = jule::Str();
	_111517_obj+=(*this)._method_links();
	_111517_obj+=jule::Str("\n", 1);
	_111517_obj+=(*this)._method_decls();
	_111517_obj+=jule::Str("\n\n", 2);
	_111517_obj+=(*this)._method_globals(_111417_global_initializers);
	_111517_obj+=jule::Str("\n", 1);
	_111517_obj+=(*this)._method_structures();
	_111517_obj+=(*this)._method_funcs();
	_111517_obj+=jule::Str("\n", 1);
	_111517_obj+=(*this)._method_init_caller(_111417_global_initializers);
	_111517_obj+=jule::Str("\n", 1);
	return _111517_obj;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b592255e_ObjectCoder &_Src) {
	_Stream << "ObjectCoder{";
	_Stream << "ir:" << _Src._field_ir << ", ";
	_Stream << "info:" << _Src._field_info << ", ";
	_Stream << "indent_buffer:" << _Src._field_indent_buffer << ", ";
	_Stream << "ec:" << _Src._field_ec << ", ";
	_Stream << "sc:" << _Src._field_sc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _212b165a2_UseExpr &_Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1e85a7865_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1e85a7865_Trait::_method_equals(jule::Ptr<_1ce76121e_TypeKind> _2526_other) {
	jule::Ptr<_1e85a7865_Trait> _2613_trt = (*(_2526_other))._method_trt();
	return this->self == _2613_trt;
}



inline jule::Bool _1e85a7865_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == static_cast<jule::U64>(0LLU);
}



inline jule::Ptr<_1e83d4384_Fn> _1e85a7865_Trait::_method_find_method(jule::Str _3734_ident) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_1b80e4624:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b80e46ce_f = *it;
			{
				if ((*(_1b80e46ce_f))._field_ident == _3734_ident) {
					return _1b80e46ce_f;
				}
			}
			_iter_next_1b80e4624:;
			++it;
			goto _iter_begin_1b80e4624;
		}
		_iter_end_1b80e4624:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e85a7865_Trait &_Src) {
	_Stream << ((_1e85a7865_Trait)(_Src))._method_to_str();
	return _Stream;
}



inline jule::Bool _1e86494b7_EnumItem::_method_auto_expr(void) {
	return ((*this)._field_value == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e86494b7_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::I64,jule::Bool> _1b595c258_ArgParser::_method_parse_integer_0(jule::Str& _18632_s,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I64)> _18640_parser) {
	jule::I64 _18684_x = jule::I64();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s.empty()) {
			_case_begin_1b925c35c:;
			{
				_18684_x = 0LL;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_2127d7dbc_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_1b925c505:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_2127d7dbc_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_1b925c56b:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_2127d7dbc_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_1b925c5d2:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_1b925baba:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_1b925b955:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_1b925b889:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}

inline std::tuple<jule::U64,jule::Bool> _1b595c258_ArgParser::_method_parse_integer_1(jule::Str& _18632_s,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I64)> _18640_parser) {
	jule::U64 _18684_x = jule::U64();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s.empty()) {
			_case_begin_1b9266be6:;
			{
				_18684_x = 0LLU;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_2127d7dbc_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_1b9266d8e:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_2127d7dbc_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_1b9266e05:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_2127d7dbc_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_1b9266e6b:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_1b9266454:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_1b92662de:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_1b9266223:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}



inline jule::Str _1b595c258_ArgParser::_method_get_data(void) {
	if (((*this)._field_i + 1LL) >= static_cast<jule::I64>((*this)._field_args.len())) {
		return jule::Str();
	}
	((*this)._field_i)++;
	return (*this)._field_args[(*this)._field_i];
}



inline jule::VoidExceptional _1b595c258_ArgParser::_method_process_flag(jule::Trait<_1b5959d27_CommonFlag>& _21236_flag) {
	{
		auto &_match_expr{ _21236_flag };
		
		if (_match_expr.type_is<jule::Ptr<_1b595ae38_Flag_3>>()) {
			_case_begin_1b9253d7b:;
			{
				jule::Ptr<_1b595ae38_Flag_3> _21521_bf = _21236_flag.operator jule::Ptr<_1b595ae38_Flag_3>();
				(*((*(_21521_bf))._field__data))=(!((*(_21521_bf))._field__default));
				return jule::VoidExceptional();
			}
		}
		_match_end_1b9253d26:;
	}
	jule::Str _22013_data = (*this)._method_get_data();
	if (_22013_data.empty()) {
		return jule::VoidExceptional(((jule::Str("--", 2) + _21236_flag.get()._method_name()) + jule::Str(": expression missing", 20)));
	}
	{
		auto &_match_expr{ _21236_flag };
		
		if (_match_expr.type_is<jule::Ptr<_1b595ae38_Flag_0>>()) {
			_case_begin_1b9255333:;
			{
				jule::Ptr<_1b595ae38_Flag_0> _22721_intf = _21236_flag.operator jule::Ptr<_1b595ae38_Flag_0>();
				jule::Bool _22833_ok;
				std::tie((*((*(_22721_intf))._field__data)),_22833_ok) = (*this)._method_parse_integer_0(_22013_data,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I64)>([=](jule::Str _22872_s,jule::I64 _22880_base) mutable -> std::tuple<jule::I64,jule::Bool> {
					return std::make_tuple(static_cast<jule::I64>(({
						auto except = _1ce1e6b72_parse_int(_22872_s,_22880_base,64LL);
						(except.ok()) ? (except.result) : ({{
							return std::make_tuple(0LL,false);
							return std::make_tuple(0LL,false);
						} jule::I64();});
					})),true);
				}));
				if ((!(_22833_ok))) {
					return jule::VoidExceptional(((jule::Str("--", 2) + _21236_flag.get()._method_name()) + jule::Str(": expression must be valid signed integer", 41)));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b595ae38_Flag_1>>()) {
			_case_begin_1b9255399:;
			{
				jule::Ptr<_1b595ae38_Flag_1> _23521_uintf = _21236_flag.operator jule::Ptr<_1b595ae38_Flag_1>();
				jule::Bool _23634_ok;
				std::tie((*((*(_23521_uintf))._field__data)),_23634_ok) = (*this)._method_parse_integer_1(_22013_data,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I64)>([=](jule::Str _23673_s,jule::I64 _23681_base) mutable -> std::tuple<jule::U64,jule::Bool> {
					return std::make_tuple(static_cast<jule::U64>(({
						auto except = _1ce1c8a11_parse_uint(_23673_s,_23681_base,64LL);
						(except.ok()) ? (except.result) : ({{
							return std::make_tuple(0LLU,false);
							return std::make_tuple(0LLU,false);
						} jule::U64();});
					})),true);
				}));
				if ((!(_23634_ok))) {
					return jule::VoidExceptional(((jule::Str("--", 2) + _21236_flag.get()._method_name()) + jule::Str(": expression must be valid unsigned integer", 43)));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b595ae38_Flag_2>>()) {
			_case_begin_1b925606a:;
			{
				jule::Ptr<_1b595ae38_Flag_2> _24321_ff = _21236_flag.operator jule::Ptr<_1b595ae38_Flag_2>();
				(*((*(_24321_ff))._field__data))=static_cast<jule::F64>(({
					auto except = _1cde2c028_parse_float(_22013_data,64LL);
					(except.ok()) ? (except.result) : ({{
						return jule::VoidExceptional(((jule::Str("--", 2) + _21236_flag.get()._method_name()) + jule::Str(": expression must be valid floating-point", 41)));
						return jule::VoidExceptional(((jule::Str("--", 2) + _21236_flag.get()._method_name()) + jule::Str(": expression must be valid floating-point", 41)));
					} jule::F64();});
				}));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b595ae38_Flag_4>>()) {
			_case_begin_1b92560d1:;
			{
				(*((*(_21236_flag.operator jule::Ptr<_1b595ae38_Flag_4>()))._field__data))=_22013_data;
			}
		}
		_match_end_1b92554dc:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1b595c258_ArgParser::_method_single_dash(jule::Str& _25231_arg) {
	jule::Slice<jule::I32> _25313_rarg = static_cast<jule::Slice<jule::I32>>(_25231_arg).slice(1LL);
	{
		auto &expr = _25313_rarg;
		auto it = expr.begin();
		_iter_begin_1b926daaa:;
		if (it != expr.end()) {
			jule::I32 &_1b926dbba_r = *it;
			{
				jule::Trait<_1b5959d27_CommonFlag> _25521_flag = (*this)._field_set._method_find_flag_short(_1b926dbba_r);
				if ((_25521_flag == nullptr)) {
					return jule::VoidExceptional((_25231_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_1b926dbba_r));
				}
				({
					auto except = (*this)._method_process_flag(_25521_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_1b926daaa:;
			++it;
			goto _iter_begin_1b926daaa;
		}
		_iter_end_1b926daaa:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1b595c258_ArgParser::_method_double_dash(jule::Str& _26431_arg) {
	jule::Trait<_1b5959d27_CommonFlag> _26517_flag = (*this)._field_set._method_find_flag(_26431_arg.slice(2LL));
	if ((_26517_flag == nullptr)) {
		return jule::VoidExceptional((_26431_arg + jule::Str(": flag is not exist", 19)));
	}
	({
		auto except = (*this)._method_process_flag(_26517_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::VoidExceptional _1b595c258_ArgParser::_method_try_arg(void) {
	jule::Str _27413_arg = (*this)._field_args[(*this)._field_i];
	if (((*this)._field_args.len() == 0LL)) {
		return jule::VoidExceptional();
	}
	if (_27413_arg[0LL] == '-') {
		if (((*this)._field_args.len() > 1LL) && (_27413_arg[1LL] == '-')) {
			({
				auto except = (*this)._method_double_dash(_27413_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();
		}
		({
			auto except = (*this)._method_single_dash(_27413_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();
	}
	(*this)._field_content = jule::alloc_for_append((*this)._field_content,1);(*this)._field_content.__push(_27413_arg); return jule::VoidExceptional(); }



inline jule::VoidExceptional _1b595c258_ArgParser::_method_parse(void) {
	for (; (*this)._field_i < static_cast<jule::I64>((*this)._field_args.len()); ((*this)._field_i)++) {
		{
			({
				auto except = (*this)._method_try_arg();
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_1b9276d5a:;
	}
	_iter_end_1b9276d5a:; return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _1b595c258_ArgParser &_Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _211062505_push_opt_level(jule::I64 _3323_level) {
	_2110618ab_OPT_COPY=_3323_level >= static_cast<jule::I64>(1LL);
	_2110619ee_OPT_DEADCODE=_3323_level >= static_cast<jule::I64>(1LL);
	_211061b42_OPT_APPEND=_3323_level >= static_cast<jule::I64>(1LL);
	_211061c85_OPT_MATH=_3323_level >= static_cast<jule::I64>(1LL);
	_211061dc8_OPT_ACCESS=_3323_level >= static_cast<jule::I64>(1LL);
	_21106201b_OPT_INLINE=_3323_level >= static_cast<jule::I64>(1LL);
	_21106226e_OPT_PTR=_3323_level >= static_cast<jule::I64>(1LL);
	_2110623b2_OPT_COND=_3323_level >= static_cast<jule::I64>(1LL);
}



inline jule::I32 _21115e2a0_decode_rune(jule::I32 _6720_r1,jule::I32 _6730_r2) {
	if ((((55296LL <= _6720_r1) && (_6720_r1 < 56320LL)) && (56320LL <= _6730_r2)) && (_6730_r2 < 57344LL)) {
		return static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>((_6720_r1 - 55296LL)) << 10LL)) | static_cast<jule::I32>((_6730_r2 - 56320LL))) + 65536LL));
	}
	return 65533LL;
}



inline std::tuple<jule::I32,jule::I32> _21115e448_encode_rune(jule::I32 _7724_r) {
	jule::I32 _7735_r1 = jule::I32();
	jule::I32 _7745_r2 = jule::I32();
	if ((_7724_r < 65536LL) || (_7724_r > 1114111LL)) {
		_7735_r1 = 65533LL;
		_7745_r2 = 65533LL;
		return std::make_tuple(_7735_r1,_7745_r2);
	}
	_7724_r-=65536LL;
	_7735_r1 = static_cast<jule::I32>(55296LL + static_cast<jule::I32>((static_cast<jule::I32>((_7724_r >> 10LL)) & 1023LL)));
	_7745_r2 = static_cast<jule::I32>(56320LL + static_cast<jule::I32>((_7724_r & 1023LL)));
	return std::make_tuple(_7735_r1,_7745_r2);
}



inline jule::Slice<jule::I32> _211179254_decode(jule::Slice<jule::U16> _11815_s) {
	jule::Slice<jule::I32> _11913_a = jule::Slice<jule::I32>::alloc(static_cast<jule::I64>(_11815_s.len()));
	jule::I64 _12013_n = 0LL;
	jule::I64 _12113_i = 0LL;
	for (; _12113_i < static_cast<jule::I64>(_11815_s.len()); (_12113_i)++) {
		{
			jule::U16 _12313_r = _11815_s[_12113_i];
			{
				
				if ((_12313_r < 55296LLU) || 57344LL <= _12313_r) {
					_case_begin_1b5979154:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(static_cast<jule::I32>(_12313_r));
					}
				}
				else if ((((_12313_r < 56320LLU) && ((_12113_i + 1LL) < static_cast<jule::I64>(_11815_s.len()))) && (56320LL <= _11815_s[(_12113_i + 1LL)])) && (_11815_s[(_12113_i + 1LL)] < 57344LLU)) {
					_case_begin_1b5978c9c:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(_21115e2a0_decode_rune(static_cast<jule::I32>(static_cast<jule::I32>(_12313_r)),static_cast<jule::I32>(static_cast<jule::I32>(_11815_s[(_12113_i + 1LL)]))));
						(_12113_i)++;
					}
				}
				else {
					_case_begin_1b5978906:;
					{
						_11913_a[_12013_n]=65533LL;
					}
				}
				_match_end_1b597887e:;
			}
			(_12013_n)++;
		}
	_iter_next_1b5975d21:;
	}
	_iter_end_1b5975d21:;
	return _11913_a.slice(0LL,_12013_n);
}



inline jule::Slice<jule::U16> _211179650_append_rune(jule::Slice<jule::U16> _14924_a,jule::I32 _14934_r) {
	{
		
		if ((0LL <= _14934_r) && (_14934_r < 55296LL) || (57344LL <= _14934_r) && (_14934_r < 65536LL)) {
			_case_begin_1b597cca1:;
			{
				return jule::append(_14924_a,jule::Slice<jule::U16>({static_cast<jule::U16>(static_cast<jule::U16>(_14934_r))}));
			}
		}
		else if ((65536LL <= _14934_r) && (_14934_r <= 1114111LL)) {
			_case_begin_1b597cd17:;
			{
				jule::I32 _15614_r1;
				jule::I32 _15618_r2;
				std::tie(_15614_r1,_15618_r2) = _21115e448_encode_rune(_14934_r);
				return jule::append(_14924_a,jule::Slice<jule::U16>({static_cast<jule::U16>(static_cast<jule::U16>(_15614_r1)),static_cast<jule::U16>(static_cast<jule::U16>(_15618_r2))}));
			}
		}
		_match_end_1b597ca3c:;
	}
	return jule::append(_14924_a,jule::Slice<jule::U16>({65533LLU}));
}



inline jule::Slice<jule::U16> _21116da95_utf16_from_str(jule::Str _1423_s) {
	
	jule::Slice<jule::I32> _209_runes = static_cast<jule::Slice<jule::I32>>(_1423_s);
	jule::Slice<jule::U16> _2113_buff = jule::Slice<jule::U16>::alloc(0LL,static_cast<jule::I64>(_209_runes.len()));
	{
		auto &expr = _209_runes;
		auto it = expr.begin();
		_iter_begin_1b598bc8d:;
		if (it != expr.end()) {
			jule::I32 &_1b598c82c_r = *it;
			{
				if ((_1b598c82c_r == 0LL)) {
					goto _iter_end_1b598bc8d;
				}
				_2113_buff=_211179650_append_rune(_2113_buff,_1b598c82c_r);
			}
			_iter_next_1b598bc8d:;
			++it;
			goto _iter_begin_1b598bc8d;
		}
		_iter_end_1b598bc8d:;
	}
	return _211179650_append_rune(_2113_buff,0LL);
}



inline jule::Str _2111664d8_utf16_to_str(jule::Slice<jule::U16> _3421_s) {
	if ((_3421_s == nullptr)) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _3813_code_page = _3421_s;
	{
		auto &expr = _3421_s;
		auto it = expr.begin();
		_iter_begin_1b598e213:;
		if (it != expr.end()) {
			jule::I64 _1b598e323_i = it - expr.begin();
			jule::U16 &_1b598e587_v = *it;
			{
				if ((_1b598e587_v == 0LLU)) {
					_3813_code_page=_3813_code_page.slice(0LL,_1b598e323_i);
					goto _iter_end_1b598e213;
				}
			}
			_iter_next_1b598e213:;
			++it;
			_1b598e323_i++;
			goto _iter_begin_1b598e213;
		}
		_iter_end_1b598e213:;
	}
	return static_cast<jule::Str>(_211179254_decode(_3813_code_page));
}



inline jule::Str _211160c96_u16_ptr_to_str(jule::U16* _5030_s) {
	if ((_5030_s == nullptr)) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _5513_code_page = nullptr;
	jule::I64 _5613_i = 0LL;
	for (; ; (_5613_i)++) {
		{
			jule::U16 _5813_r = _5030_s[_5613_i];
			if ((_5813_r == 0LLU)) {
				return static_cast<jule::Str>(_211179254_decode(_5513_code_page));
			}
			_5513_code_page = jule::alloc_for_append(_5513_code_page,1);_5513_code_page.__push(_5813_r);
		}
	_iter_next_1b598bd26:;
	}
	_iter_end_1b598bd26:;
	return jule::Str();
}



inline jule::I64 _2111163ab_get_last_errno(void) {
	return errno;
}



inline jule::U64 _21112a8cb_get_std_handle(jule::U64 _5523_stdh) {
	return static_cast<jule::U64>(((jule::U64)(GetStdHandle(_5523_stdh))));
}



inline jule::I64 _21113a688_wstat(jule::U16* _5921_path,struct stat* _5937_stat) {
	return static_cast<jule::I64>(wstat(((wchar_t*)(_5921_path)),_5937_stat));
}



inline jule::I64 _211135276__wopen(jule::U16* _6422_path,jule::I64 _6434_flag,jule::I64 _6445_mode) {
	return static_cast<jule::I64>(_wopen(((wchar_t*)((&(_6422_path[0LL])))),_6434_flag,_6445_mode));
}



inline jule::U32 _211145e8a_get_last_error(void) {
	return static_cast<jule::U32>(GetLastError());
}



inline jule::U32 _21113d878_get_current_directory(jule::U32 _7337_bufflen,jule::U16* _7355_buff) {
	return static_cast<jule::U32>(GetCurrentDirectoryW(_7337_bufflen,((wchar_t*)(_7355_buff))));
}



inline jule::Bool _211163a46_delete_file(jule::U16* _8427_path) {
	return DeleteFileW(((wchar_t*)(_8427_path)));
}



inline jule::Bool _21114221c_create_directory(jule::U16* _8932_path) {
	return CreateDirectoryW(((wchar_t*)(_8932_path)),nullptr);
}



inline jule::Bool _2111423b5_remove_directory(jule::U16* _9432_path) {
	return RemoveDirectoryW(((wchar_t*)(_9432_path)));
}



inline _WDIR* _211134385__wopendir(jule::U16* _9925_path) {
	return _wopendir(((wchar_t*)(_9925_path)));
}



inline struct _wdirent* _21113452d__wreaddir(_WDIR* _10229_dir) {
	return _wreaddir(_10229_dir);
}



inline jule::I64 _21115eca6__wclosedir(_WDIR* _10530_dir) {
	return static_cast<jule::I64>(_wclosedir(_10530_dir));
}



inline jule::U32 _2111519ac_get_full_path_name(jule::U16* _10834_path,jule::U32 _10846_bufflen,jule::U16* _1095_buff,jule::U16** _10917_fname) {
	return static_cast<jule::U32>(GetFullPathNameW(((wchar_t*)(_10834_path)),_10846_bufflen,((wchar_t*)(_1095_buff)),((wchar_t**)(_10917_fname))));
}



inline jule::Bool _21117a310_write_console(jule::U64 _12429_handle,jule::U16* _12445_buffer,jule::I64 _12459_to_write,jule::I64& _12510_written,void* _12524_reserved) {
	return WriteConsoleW(((HANDLE)(_12429_handle)),((void*)(_12445_buffer)),static_cast<DWORD>(_12459_to_write),((DWORD*)(_12510_written)),_12524_reserved);
}



inline jule::Bool _21117a4a8_read_console(jule::U64 _13128_handle,jule::U16* _13148_buffer,jule::I64 _13162_to_read,jule::I64& _13210_readed,void* _13223_input_control) {
	return ReadConsoleW(((HANDLE)(_13128_handle)),((void*)(_13148_buffer)),static_cast<DWORD>(_13162_to_read),((DWORD*)((&(_13210_readed)))),_13223_input_control);
}



inline jule::I64 _21117b575_seek(jule::I64 _2613_handle,jule::I64 _2626_offset,jule::I64 _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::I64 _21117b71d_read(jule::I64 _3120_handle,void* _3137_buff,jule::U64 _3152_n) {
	return static_cast<jule::I64>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::I64 _21117b8b6_close(jule::I64 _3614_handle) {
	return static_cast<jule::I64>(close(_3614_handle));
}



inline jule::I64 _21117ba5e_write(jule::I64 _3921_handle,void* _3934_buff,jule::U64 _3949_n) {
	return static_cast<jule::I64>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _21117bc07_exit(jule::I64 _4413_code) {
	exit(_4413_code);
}



inline std::tuple<jule::I32,jule::I64> _211214883_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::I64 _18242_size = jule::I64();
	if ((_18220_p.len() < 1LL)) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _211213a3b_FIRST[static_cast<jule::I64>(_1869_p0)];
	if ((_1879_x >= 240LLU)) {
		jule::I32 _19213_mask = static_cast<jule::U8>((static_cast<jule::U8>((_1879_x << 31LLU)) >> 31LLU));
		_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_18220_p[0LL])) & static_cast<jule::I32>((~(_19213_mask)))) | static_cast<jule::I32>(65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::I64 _1959_sz = static_cast<jule::I64>((_1879_x & 7LLU));
	_211214102_accept_range _1969_accept = _211212287_ACCEPT_RANGES[static_cast<jule::I64>((_1879_x >> 4LLU))];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if ((_1959_sz <= 2LL)) {
		_18233_r = static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((_1869_p0 & 31LLU))) << 6LL)) | static_cast<jule::I32>(static_cast<jule::I32>((_2009_b1 & 63LLU))));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LLU) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if ((_1959_sz <= 3LL)) {
		_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((_1869_p0 & 15LLU))) << 12LL)) | static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((_2009_b1 & 63LLU))) << 6LL))) | static_cast<jule::I32>(static_cast<jule::I32>((_2079_b2 & 63LLU))));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LLU) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((_1869_p0 & 7LLU))) << 18LL)) | static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((_2009_b1 & 63LLU))) << 12LL))) | static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((_2079_b2 & 63LLU))) << 6LL))) | static_cast<jule::I32>(static_cast<jule::I32>((_2149_b3 & 63LLU))));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::I64> _211215103_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::I32 _27638_r = jule::I32();
	jule::I64 _27647_size = jule::I64();
	if ((_27625_p.len() == 0LL)) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _2809_end = _27625_p.len();
	jule::I64 _28113_start = (_2809_end - 1LL);
	_27638_r=static_cast<jule::I32>(static_cast<jule::I32>(_27625_p[_28113_start]));
	if ((_27638_r < 128LL)) {
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _28913_lim = (_2809_end - 4LL);
	if ((_28913_lim < 0LL)) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	for (; _28113_start >= _28913_lim; (_28113_start)--) {
		{
			if (_211216467_rune_start(_27625_p[_28113_start])) {
				goto _iter_end_1b5a41d43;
			}
		}
	_iter_next_1b5a41d43:;
	}
	_iter_end_1b5a41d43:;
	if ((_28113_start < 0LL)) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _211214883_decode_rune(_27625_p.slice(_28113_start,_2809_end));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	return std::make_tuple(_27638_r,_27647_size);
}



inline jule::I64 _21121581d_rune_len(jule::I32 _35217_r) {
	{
		
		if ((_35217_r < 0LL)) {
			_case_begin_1b5a49752:;
			{
				return -1LL;
			}
		}
		else if ((_35217_r <= 127LL)) {
			_case_begin_1b5a49862:;
			{
				return 1LL;
			}
		}
		else if ((_35217_r <= 2047LL)) {
			_case_begin_1b5a498c8:;
			{
				return 2LL;
			}
		}
		else if ((55296LL <= _35217_r) && (_35217_r <= 57343LL)) {
			_case_begin_1b5a4993e:;
			{
				return -1LL;
			}
		}
		else if ((_35217_r <= 65535LL)) {
			_case_begin_1b5a49532:;
			{
				return 3LL;
			}
		}
		else if ((_35217_r <= 1114111LL)) {
			_case_begin_1b5a49598:;
			{
				return 4LL;
			}
		}
		else {
			_case_begin_1b5a469b3:;
			{
				return -1LL;
			}
		}
		_match_end_1b5a485ca:;
	}
}



inline jule::I64 _211215b3c_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		
		if ((_3699_i <= 127LLU)) {
			_case_begin_1b5a50945:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(static_cast<jule::U8>(_36739_r));
				return 1LL;
			}
		}
		else if ((_3699_i <= 2047LLU)) {
			_case_begin_1b5a509ab:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(192LLU | static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 6LL))));
				_36724_p[1LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_36739_r)) & 63LLU)));
				return 2LL;
			}
		}
		else if ((_3699_i > 1114111LLU) || (55296LL <= _3699_i) && (_3699_i <= 57343LLU)) {
			_case_begin_1b5a50758:;
			{
				_36739_r=65533LL;
				goto _case_begin_1b5a507be;
			}
		}
		else if ((_3699_i <= 65535LLU)) {
			_case_begin_1b5a507be:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(224LLU | static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 12LL))));
				_36724_p[1LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 6LL))) & 63LLU)));
				_36724_p[2LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_36739_r)) & 63LLU)));
				return 3LL;
			}
		}
		else {
			_case_begin_1b5a4c49c:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(240LLU | static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 18LL))));
				_36724_p[1LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 12LL))) & 63LLU)));
				_36724_p[2LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 6LL))) & 63LLU)));
				_36724_p[3LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_36739_r)) & 63LLU)));
				return 4LL;
			}
		}
		_match_end_1b5a4c3d1:;
	}
}



inline jule::Slice<jule::U8> _211215cd5_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if ((_39835_r <= 127LL)) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_39835_r))}));
	}
	return _211215e7d_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _211215e7d_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		
		if ((_4079_i <= 2047LLU)) {
			_case_begin_1b5a5a543:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LLU | static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 6LL)))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_40545_r)) & 63LLU)))}));
			}
		}
		else if ((_4079_i > 1114111LLU) || (55296LL <= _4079_i) && (_4079_i <= 57343LLU)) {
			_case_begin_1b5a5a5a9:;
			{
				_40545_r=65533LL;
				goto _case_begin_1b5a5a620;
			}
		}
		else if ((_4079_i <= 65535LLU)) {
			_case_begin_1b5a5a620:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LLU | static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 12LL)))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 6LL))) & 63LLU))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_40545_r)) & 63LLU)))}));
			}
		}
		else {
			_case_begin_1b5a5781a:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LLU | static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 18LL)))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 12LL))) & 63LLU))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 6LL))) & 63LLU))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_40545_r)) & 63LLU)))}));
			}
		}
		_match_end_1b5a57782:;
	}
}



inline jule::I64 _2112162be_rune_count_str(jule::Str _46623_s) {
	jule::I64 _46633_n = jule::I64();
	jule::I64 _46713_i = 0LL;
	for (; _46713_i < static_cast<jule::I64>(_46623_s.len()); (_46633_n)++) {
		{
			jule::U8 _46917_c = _46623_s[_46713_i];
			if ((_46917_c < 128LLU)) {
				(_46713_i)++;
				goto _iter_next_1b5a65b47;
			}
			jule::U8 _47513_x = _211213a3b_FIRST[static_cast<jule::I64>(_46917_c)];
			if ((_47513_x == 241LLU)) {
				(_46713_i)++;
				goto _iter_next_1b5a65b47;
			}
			jule::I64 _48017_size = static_cast<jule::I64>((_47513_x & 7LLU));
			if ((_46713_i + _48017_size) > static_cast<jule::I64>(_46623_s.len())) {
				(_46713_i)++;
				goto _iter_next_1b5a65b47;
			}
			_211214102_accept_range _48513_accept = _211212287_ACCEPT_RANGES[static_cast<jule::I64>((_47513_x >> 4LLU))];
			_46917_c=_46623_s[(_46713_i + 1LL)];
			if ((_46917_c < _48513_accept._field_lo) || (_48513_accept._field_hi < _46917_c)) {
				_48017_size=1LL;
			} else if ((_48017_size == 2LL)) {
			} else {
				_46917_c=_46623_s[(_46713_i + 2LL)];
				if ((_46917_c < 128LLU) || (191LL < _46917_c)) {
					_48017_size=1LL;
				} else if ((_48017_size == 3LL)) {
				} else {
					_46917_c=_46623_s[(_46713_i + 3LL)];
					if ((_46917_c < 128LLU) || (191LL < _46917_c)) {
						_48017_size=1LL;
					}
				}
			}
			_46713_i+=_48017_size;
		}
	_iter_next_1b5a65b47:;
	}
	_iter_end_1b5a65b47:;
	return _46633_n;
}



inline jule::Bool _211216467_rune_start(jule::U8 _51019_b) {
	return ((_51019_b & 192LLU) != 128LLU);
}



inline jule::I64 _211283094_get_last_os_error_windows(void) {
	jule::U32 _169_err = _211145e8a_get_last_error();
	{
		auto &_match_expr{ _169_err };
		
		if (_match_expr == 5LL) {
			_case_begin_1b5a8e5ee:;
			{
				return static_cast<jule::I64>(0LL);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_1b5a8e665:;
			{
				return static_cast<jule::I64>(4LL);
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_1b5a8e115:;
			{
				return static_cast<jule::I64>(7LL);
			}
		}
		else if (_match_expr == 123LL) {
			_case_begin_1b5a8e17b:;
			{
				return static_cast<jule::I64>(4LL);
			}
		}
		else {
			_case_begin_1b5a8d785:;
			{
				return static_cast<jule::I64>(0LL);
			}
		}
		_match_end_1b5a8abe4:;
	}
}



inline jule::Slice<jule::Str> _21128893a_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _211288c7b_working_dir(void) {
	return jule::Exceptional<jule::Str>(jule::Any(),({
		auto except = _211d9a859___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _211d9a859___getwd(void) {
	jule::Array<jule::U16,261> _1513_buff = jule::Array<jule::U16,261>();
	jule::U32 _169_n = _21113d878_get_current_directory(261LLU,(&(_1513_buff[0LL])));
	if ((_169_n == 0LLU)) {
		return jule::Exceptional<jule::Str>(_211283094_get_last_os_error_windows());
	}
	return jule::Exceptional<jule::Str>(jule::Any(),_211160c96_u16_ptr_to_str((&(_1513_buff[0LL]))));
}



inline jule::Slice<jule::U8> _211e09e4b_stobs(jule::Str& _915_s) {
	{
		jule::Slice<jule::U8> slice;;
		slice.data.alloc = _915_s.begin();;
		slice.data.ref = nullptr;;
		slice._slice = slice.data.alloc;;
		slice._len = slice._cap = _915_s.len();;
		return slice;
	}
}



inline jule::Bool _211e22903_is_letter(jule::I32 _7618_r) {
	if ((static_cast<jule::U32>(_7618_r) <= 255LLU)) {
		return ((_21284c34e__PROPERTIES[static_cast<jule::I64>(static_cast<jule::U8>(_7618_r))] & 96LLU) != 0LLU);
	}
	return _212856611_is_excluding_latin(_21280d2bb_LETTER,_7618_r);
}



inline jule::Bool _212855632_is16(jule::Slice<_21285283d_Range16> _1919_ranges,jule::U16 _19128_r) {
	if ((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LLU)) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_1b571430c:;
			if (it != expr.end()) {
				jule::I64 _1b571442d_i = it - expr.begin();
				{
					_21285283d_Range16* _19417_range = (&(_1919_ranges[_1b571442d_i]));
					{
						if (_19128_r < (*(_19417_range))._field_lo) {
							return false;
						}
						if (_19128_r <= (*(_19417_range))._field_hi) {
							return ((*(_19417_range))._field_stride == 1LLU) || (jule::mod(_19128_r - (*(_19417_range))._field_lo,(*(_19417_range))._field_stride) == 0LLU);
						}
					}
				}
				_iter_next_1b571430c:;
				++it;
				_1b571442d_i++;
				goto _iter_begin_1b571430c;
			}
			_iter_end_1b571430c:;
		}
		return false;
	}
	jule::I64 _20813_lo = 0LL;
	jule::I64 _20913_hi = _1919_ranges.len();
	while (_20813_lo < _20913_hi) {
		{
			jule::I64 _21113_m = _20813_lo + static_cast<jule::I64>(static_cast<jule::I64>(_20913_hi - _20813_lo) >> 1LLU);
			_21285283d_Range16* _21213_range = (&(_1919_ranges[_21113_m]));
			{
				if (((*(_21213_range))._field_lo <= _19128_r) && (_19128_r <= (*(_21213_range))._field_hi)) {
					return ((*(_21213_range))._field_stride == 1LLU) || (jule::mod(_19128_r - (*(_21213_range))._field_lo,(*(_21213_range))._field_stride) == 0LLU);
				}
				if (_19128_r < (*(_21213_range))._field_lo) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::I64>((_21113_m + 1LL));
				}
			}
		}
	_iter_next_1b5707201:;
	}
	_iter_end_1b5707201:;
	return false;
}



inline jule::Bool _212855ac7_is32(jule::Slice<_2128531bd_Range32> _2289_ranges,jule::U32 _22828_r) {
	if ((_2289_ranges.len() <= 18LL)) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_1b61c0d0c:;
			if (it != expr.end()) {
				jule::I64 _1b61c103d_i = it - expr.begin();
				{
					_2128531bd_Range32* _23117_range = (&(_2289_ranges[_1b61c103d_i]));
					{
						if (_22828_r < (*(_23117_range))._field_lo) {
							return false;
						}
						if (_22828_r <= (*(_23117_range))._field_hi) {
							return ((*(_23117_range))._field_stride == 1LLU) || (jule::mod(_22828_r - (*(_23117_range))._field_lo,(*(_23117_range))._field_stride) == 0LLU);
						}
					}
				}
				_iter_next_1b61c0d0c:;
				++it;
				_1b61c103d_i++;
				goto _iter_begin_1b61c0d0c;
			}
			_iter_end_1b61c0d0c:;
		}
		return false;
	}
	jule::I64 _24513_lo = 0LL;
	jule::I64 _24613_hi = _2289_ranges.len();
	while (_24513_lo < _24613_hi) {
		{
			jule::I64 _24813_m = _24513_lo + static_cast<jule::I64>(static_cast<jule::I64>(_24613_hi - _24513_lo) >> 1LLU);
			_2128531bd_Range32* _24913_range = (&(_2289_ranges[_24813_m]));
			{
				if (((*(_24913_range))._field_lo <= _22828_r) && (_22828_r <= (*(_24913_range))._field_hi)) {
					return ((*(_24913_range))._field_stride == 1LLU) || (jule::mod(_22828_r - (*(_24913_range))._field_lo,(*(_24913_range))._field_stride) == 0LLU);
				}
				if (_22828_r < (*(_24913_range))._field_lo) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::I64>((_24813_m + 1LL));
				}
			}
		}
	_iter_next_1b61c01b3:;
	}
	_iter_end_1b61c01b3:;
	return false;
}



inline jule::Bool _212856611_is_excluding_latin(jule::Ptr<_212853b5d_RangeTable> _27823_range_tab,jule::I32 _27847_r) {
	{
		jule::Slice<_21285283d_Range16> &_28014_r16 = (*(_27823_range_tab))._field_r16;
		jule::I64 _28213_off = (*(_27823_range_tab))._field_latin_offset;
		if ((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(static_cast<jule::U32>(_28014_r16[(_28014_r16.len() - 1LL)]._field_hi)))) {
			return _212855632_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(static_cast<jule::U16>(_27847_r)));
		}
	}
	jule::Slice<_2128531bd_Range32> &_28710_r32 = (*(_27823_range_tab))._field_r32;
	if ((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(static_cast<jule::I32>(_28710_r32[0LL]._field_lo)))) {
		return _212855ac7_is32(_28710_r32,static_cast<jule::U32>(static_cast<jule::U32>(_27847_r)));
	}
	return false;
}



inline jule::Str _211e22edb_repeat(jule::Str _1415_s,jule::I64 _1427_n) {
	if ((_1427_n <= 0LL)) {
		return jule::Str();
	}
	jule::Str _1913_ss = _1415_s;
	for (; (_1427_n > 1LL); (_1427_n)--) {
		{
			_1913_ss+=_1415_s;
		}
	_iter_next_1b61ea4da:;
	}
	_iter_end_1b61ea4da:;
	return _1913_ss;
}



inline jule::Bool _212778ec3__has_prefix(jule::Str& _2617_s,jule::Str& _2626_sub,jule::I64 _2640_start) {
	if ((_2626_sub.len() == 0LL) || ((_2617_s.len() - _2640_start) < static_cast<jule::I64>(_2626_sub.len()))) {
		return false;
	}
	jule::I64 _3113_i = 0LL;
	for (; _3113_i < static_cast<jule::I64>(_2626_sub.len()); std::tie(_3113_i,_2640_start) = std::make_tuple(static_cast<jule::I64>((_3113_i + 1LL)),static_cast<jule::I64>((_2640_start + 1LL)))) {
		{
			if (_2617_s[_2640_start] != _2626_sub[_3113_i]) {
				return false;
			}
		}
	_iter_next_1b61ec3ee:;
	}
	_iter_end_1b61ec3ee:;
	return true;
}



inline jule::Bool _2127d7dbc_has_prefix(jule::Str _4119_s,jule::Str _4127_sub) {
	return _212778ec3__has_prefix(_4119_s,_4127_sub,0LL);
}



inline jule::Bool _212802e70__has_suffix(jule::Str& _4517_s,jule::Str& _4526_sub,jule::I64 _4540_start) {
	if ((_4526_sub.len() == 0LL) || ((_4517_s.len() - _4540_start) < static_cast<jule::I64>(_4526_sub.len()))) {
		return false;
	}
	_4540_start=static_cast<jule::I64>(static_cast<jule::I64>(_4517_s.len()) - _4540_start);
	jule::I64 _5113_i = 0LL;
	for (; _5113_i < static_cast<jule::I64>(_4526_sub.len()); (_5113_i)++) {
		{
			if (_4517_s[((_4540_start - _5113_i) - 1LL)] != _4526_sub[((_4526_sub.len() - _5113_i) - 1LL)]) {
				return false;
			}
		}
	_iter_next_1b61eea72:;
	}
	_iter_end_1b61eea72:;
	return true;
}



inline jule::Bool _21280457b_has_suffix(jule::Str _6119_s,jule::Str _6127_sub) {
	return _212802e70__has_suffix(_6119_s,_6127_sub,0LL);
}



inline jule::I64 _211e138e4_find_at(jule::Str _6916_s,jule::Str _6924_sub,jule::I64 _6938_i) {
	if (((_6938_i < 0LL) || (_6916_s.len() < static_cast<jule::I64>(_6924_sub.len()))) || (_6924_sub.len() == 0LL)) {
		return -1LL;
	}
	for (; _6938_i < static_cast<jule::I64>(_6916_s.len()); (_6938_i)++) {
		{
			if (_212778ec3__has_prefix(_6916_s,_6924_sub,_6938_i)) {
				return _6938_i;
			}
		}
	_iter_next_1b6204060:;
	}
	_iter_end_1b6204060:;
	return -1LL;
}



inline jule::I64 _2127d6b02_find_last_at(jule::Str _9221_s,jule::Str _9229_sub,jule::I64 _9239_i) {
	jule::I64 _9313_j = ((_9239_i - static_cast<jule::I64>(_9229_sub.len())) + 1LL);
	if ((((_9229_sub.len() == 0LL) || (_9239_i < 0LL)) || (_9239_i >= static_cast<jule::I64>(_9221_s.len()))) || (_9313_j < 0LL)) {
		return -1LL;
	}
	_julec_label_loop:;
	for (; (_9313_j >= 0LL); (_9313_j)--) {
		{
			jule::I64 _9917_k = _9313_j;
			jule::I64 _10017_z = 0LL;
			for (; _10017_z < static_cast<jule::I64>(_9229_sub.len()); std::tie(_9917_k,_10017_z) = std::make_tuple(static_cast<jule::I64>((_9917_k + 1LL)),static_cast<jule::I64>((_10017_z + 1LL)))) {
				{
					if (_9221_s[_9917_k] != _9229_sub[_10017_z]) {
						goto _iter_next_1b6207409;
					}
				}
			_iter_next_1b6208c68:;
			}
			_iter_end_1b6208c68:;
			return _9313_j;
		}
	_iter_next_1b6207409:;
	}
	_iter_end_1b6207409:;
	return -1LL;
}



inline jule::I64 _2127dbb4b_find_last(jule::Str _11418_s,jule::Str _11426_sub) {
	return static_cast<jule::I64>(_2127d6b02_find_last_at(_11418_s,_11426_sub,static_cast<jule::I64>((static_cast<jule::I64>(_11418_s.len()) - 1LL))));
}



inline jule::I64 _2127c8286__find_rune(jule::Slice<jule::U8>& _17016_s,jule::I32 _17027_r) {
	jule::I64 _17113_i = 0LL;
	while (_17113_i < static_cast<jule::I64>(_17016_s.len())) {
		{
			jule::I32 _17314_br;
			jule::I64 _17318_n;
			std::tie(_17314_br,_17318_n) = _211214883_decode_rune(_17016_s.slice(_17113_i));
			if (_17027_r == _17314_br) {
				return _17113_i;
			}
			_17113_i+=_17318_n;
		}
	_iter_next_1b62136ce:;
	}
	_iter_end_1b62136ce:;
	return -1LL;
}



inline jule::I64 _211e1696e_find_last_byte(jule::Str _19723_s,jule::U8 _19731_b) {
	jule::I64 _19813_i = (_19723_s.len() - 1LL);
	for (; (_19813_i >= 0LL); (_19813_i)--) {
		{
			if (_19723_s[_19813_i] == _19731_b) {
				return _19813_i;
			}
		}
	_iter_next_1b621621a:;
	}
	_iter_end_1b621621a:;
	return -1LL;
}



inline jule::I64 _211e241b8_find_any(jule::Str _23817_s,jule::Str _23825_runes) {
	jule::Slice<jule::U8> _2399_sb = _211e09e4b_stobs(_23817_s);
	jule::Slice<jule::U8> _24013_rb = _211e09e4b_stobs(_23825_runes);
	jule::I64 _24113_i = 0LL;
	while (_24113_i < static_cast<jule::I64>(_2399_sb.len())) {
		{
			jule::I32 _24314_r;
			jule::I64 _24317_n;
			std::tie(_24314_r,_24317_n) = _211214883_decode_rune(_2399_sb.slice(_24113_i));
			if ((_2127c8286__find_rune(_24013_rb,_24314_r) != -1LL)) {
				return _24113_i;
			}
			_24113_i+=_24317_n;
		}
	_iter_next_1b621b52d:;
	}
	_iter_end_1b621b52d:;
	return -1LL;
}



inline jule::Slice<jule::Str> _211e0ee2e_split(jule::Str _27214_s,jule::Str _27222_sub,jule::I64 _27236_n) {
	jule::Slice<jule::Str> _27313_parts = jule::Slice<jule::Str>::alloc(0LL,static_cast<jule::I64>((((_27236_n < 0LL)) ? (10LL) : (_27236_n))));
	if ((_27236_n == 0LL)) {
		return _27313_parts;
	}
	if ((_27236_n < 0LL)) {
		_27236_n=static_cast<jule::I64>(_27214_s.len());
	}
	jule::I64 _28013_i = 0LL;
	for (; (_27236_n > 0LL); (_27236_n)--) {
		{
			jule::I64 _28213_j = _211e138e4_find_at(_27214_s,_27222_sub,_28013_i);
			if ((_28213_j == -1LL)) {
				goto _iter_end_1b6222b50;
			}
			_27313_parts = jule::alloc_for_append(_27313_parts,1);_27313_parts.__push(_27214_s.slice(_28013_i,_28213_j));
			_28013_i=static_cast<jule::I64>(_28213_j + static_cast<jule::I64>(_27222_sub.len()));
		}
	_iter_next_1b6222b50:;
	}
	_iter_end_1b6222b50:;
	if ((_27236_n > 0LL) && (_28013_i < static_cast<jule::I64>(_27214_s.len()))) {
		_27313_parts = jule::alloc_for_append(_27313_parts,1);_27313_parts.__push(_27214_s.slice(_28013_i));
	}
	return _27313_parts;
}



inline jule::Bool _2127cc2e0_contains(jule::Str _29617_s,jule::Str _29625_sub) {
	return (_211e138e4_find_at(_29617_s,_29625_sub,0LL) != -1LL);
}



inline jule::Bool _211e19741_contains_any(jule::Str _31221_s,jule::Str _31229_runes) {
	return (_211e241b8_find_any(_31221_s,_31229_runes) != -1LL);
}



inline jule::Str _211e264a6_replace(jule::Str _33816_s,jule::Str _33824_sub,jule::Str _33834_new,jule::I64 _33848_n) {
	if ((_33848_n == 0LL) || (_33824_sub == _33834_new)) {
		return _33816_s;
	}
	if ((_33848_n < 0LL)) {
		_33848_n=static_cast<jule::I64>(_33816_s.len());
	}
	jule::Str _34713_ss = jule::Str();
	jule::I64 _34813_i = 0LL;
	for (; (_33848_n > 0LL); (_33848_n)--) {
		{
			jule::I64 _35013_j = _211e138e4_find_at(_33816_s,_33824_sub,_34813_i);
			if ((_35013_j == -1LL)) {
				goto _iter_end_1b622cbc1;
			}
			_34713_ss+=_33816_s.slice(_34813_i,_35013_j);
			_34713_ss+=_33834_new;
			_34813_i=static_cast<jule::I64>(_35013_j + static_cast<jule::I64>(_33824_sub.len()));
		}
	_iter_next_1b622cbc1:;
	}
	_iter_end_1b622cbc1:;
	_34713_ss+=_33816_s.slice(_34813_i);
	return _34713_ss;
}



inline void _2127cec82__trim_left(jule::Slice<jule::U8>& _39020_s,jule::Slice<jule::U8>& _39032_cutset) {
	jule::I64 _39113_i = 0LL;
	while (_39113_i < static_cast<jule::I64>(_39020_s.len())) {
		{
			jule::I32 _39314_r;
			jule::I64 _39317_n;
			std::tie(_39314_r,_39317_n) = _211214883_decode_rune(_39020_s.slice(_39113_i));
			if ((_2127c8286__find_rune(_39032_cutset,_39314_r) == -1LL)) {
				_39020_s=_39020_s.slice(_39113_i);
				return;
			}
			_39113_i+=_39317_n;
		}
	_iter_next_1b6233a95:;
	}
	_iter_end_1b6233a95:;
	_39020_s=nullptr;
}



inline jule::Str _211e24806_trim_left(jule::Str _40518_s,jule::Str _40526_cutset) {
	jule::Slice<jule::U8> _40613_bytes = _211e09e4b_stobs(_40518_s);
	jule::Slice<jule::U8> _4079_bcutset = _211e09e4b_stobs(_40526_cutset);
	_2127cec82__trim_left(_40613_bytes,_4079_bcutset);
	return static_cast<jule::Str>(_40613_bytes);
}



inline void _211e2499e__trim_right(jule::Slice<jule::U8>& _41221_s,jule::Slice<jule::U8>& _41233_cutset) {
	jule::I64 _41313_i = _41221_s.len();
	while ((_41313_i > 0LL)) {
		{
			jule::I32 _41514_r;
			jule::I64 _41517_n;
			std::tie(_41514_r,_41517_n) = _211215103_decode_last_rune(_41221_s.slice(0LL,_41313_i));
			if ((_2127c8286__find_rune(_41233_cutset,_41514_r) == -1LL)) {
				_41221_s=_41221_s.slice(0LL,_41313_i);
				return;
			}
			_41313_i-=_41517_n;
		}
	_iter_next_1b6236db7:;
	}
	_iter_end_1b6236db7:;
	_41221_s=nullptr;
}



inline jule::Str _211e25a9e_trim(jule::Str _43613_s,jule::Str _43621_cutset) {
	jule::Slice<jule::U8> _43713_bytes = _211e09e4b_stobs(_43613_s);
	jule::Slice<jule::U8> _4389_bcutset = _211e09e4b_stobs(_43621_cutset);
	_2127cec82__trim_left(_43713_bytes,_4389_bcutset);
	_211e2499e__trim_right(_43713_bytes,_4389_bcutset);
	return static_cast<jule::Str>(_43713_bytes);
}



inline jule::Bool _211267452_is_path_sep(jule::U8 _4820_c) {
	return (_4820_c == 92LLU) || (_4820_c == '/');
}



inline jule::Bool _21126e49d_is_slash(jule::U8 _5213_c) {
	return (_5213_c == '\\') || (_5213_c == '/');
}



inline jule::U8 _211265780_to_upper(jule::U8 _5413_c) {
	if (('a' <= _5413_c) && (_5413_c <= 'z')) {
		return static_cast<jule::U8>(_5413_c - ('a' - 'A'));
	}
	return _5413_c;
}



inline jule::I64 _211267e36_volume_name_len(jule::Str _8220_path) {
	if ((_8220_path.len() < 2LL)) {
		return 0LL;
	}
	jule::U8 _879_c = _8220_path[0LL];
	if ((_8220_path[1LL] == ':') && ((('a' <= _879_c) && (_879_c <= 'z')) || (('A' <= _879_c) && (_879_c <= 'Z')))) {
		return 2LL;
	}
	if ((!(_21126e49d_is_slash(_8220_path[0LL]))) || (!(_21126e49d_is_slash(_8220_path[1LL])))) {
		return 0LL;
	}
	jule::Str _9510_p1;
	jule::Str _9518_rest;
	std::tie(_9510_p1,_9518_rest,std::ignore) = _2112699d7_cut_path(_8220_path.slice(2LL));
	jule::Str _9613_p2 = jule::Str();
	jule::Bool _9713_ok = false;
	std::tie(_9613_p2,_9518_rest,_9713_ok) = _2112699d7_cut_path(_9518_rest);
	if ((!(_9713_ok))) {
		return static_cast<jule::I64>(_8220_path.len());
	}
	if ((_9510_p1 != jule::Str(".", 1)) && (_9510_p1 != jule::Str("?", 1))) {
		return static_cast<jule::I64>((static_cast<jule::I64>(static_cast<jule::I64>(_8220_path.len()) - static_cast<jule::I64>(_9518_rest.len())) - 1LL));
	}
	if ((((_9613_p2.len() == 3LL) && (_211265780_to_upper(_9613_p2[0LL]) == 'U')) && (_211265780_to_upper(_9613_p2[1LL]) == 'N')) && (_211265780_to_upper(_9613_p2[2LL]) == 'C')) {
		std::tie(std::ignore,_9518_rest,std::ignore) = _2112699d7_cut_path(_9518_rest);
		std::tie(std::ignore,_9518_rest,_9713_ok) = _2112699d7_cut_path(_9518_rest);
		if ((!(_9713_ok))) {
			return static_cast<jule::I64>(_8220_path.len());
		}
	}
	return static_cast<jule::I64>((static_cast<jule::I64>(static_cast<jule::I64>(_8220_path.len()) - static_cast<jule::I64>(_9518_rest.len())) - 1LL));
}



inline std::tuple<jule::Str,jule::Str,jule::Bool> _2112699d7_cut_path(jule::Str _11913_path) {
	jule::Str _11926_before = jule::Str();
	jule::Str _11939_after = jule::Str();
	jule::Bool _11951_found = jule::Bool();
	{
		auto &expr = _11913_path;
		auto it = expr.begin();
		_iter_begin_1b625ce43:;
		if (it != expr.end()) {
			jule::I64 _1b625ce87_i = it - expr.begin();
			{
				if (_21126e49d_is_slash(_11913_path[_1b625ce87_i])) {
					_11926_before = _11913_path.slice(0LL,_1b625ce87_i);
					_11939_after = _11913_path.slice((_1b625ce87_i + 1LL));
					_11951_found = true;
					return std::make_tuple(_11926_before,_11939_after,_11951_found);
				}
			}
			_iter_next_1b625ce43:;
			++it;
			_1b625ce87_i++;
			goto _iter_begin_1b625ce43;
		}
		_iter_end_1b625ce43:;
	}
	_11926_before = _11913_path;
	_11939_after = jule::Str();
	_11951_found = false;
	return std::make_tuple(_11926_before,_11939_after,_11951_found);
}



inline std::tuple<jule::Str,jule::Bool> _211269b80_full_path(jule::Str _12814_name) {
	jule::Str _12827_path = jule::Str();
	jule::Bool _12838_ok = jule::Bool();
	jule::Slice<jule::U16> _1299_utf16_name = _21116da95_utf16_from_str(_12814_name);
	jule::U16* _1309_p = (&(_1299_utf16_name[0LL]));
	jule::U32 _13113_n = 100LLU;
	for (;;) {
		{
			jule::Slice<jule::U16> _13317_buff = jule::Slice<jule::U16>::alloc(static_cast<jule::I64>(_13113_n));
			_13113_n=static_cast<jule::U32>(static_cast<jule::U32>(_2111519ac_get_full_path_name(_1309_p,static_cast<jule::U32>(static_cast<jule::U32>(_13317_buff.len())),(&(_13317_buff[0LL])),nullptr)));
			if ((_13113_n == 0LLU)) {
				_12827_path = jule::Str();
				_12838_ok = false;
				return std::make_tuple(_12827_path,_12838_ok);
			}
			if (_13113_n <= static_cast<jule::U32>(static_cast<jule::U32>(_13317_buff.len()))) {
				_12827_path = _2111664d8_utf16_to_str(_13317_buff.slice(0LL,static_cast<jule::I64>(_13113_n)));
				_12838_ok = true;
				return std::make_tuple(_12827_path,_12838_ok);
			}
		}
	_iter_next_1b6260165:;
	}
	_iter_end_1b6260165:;
	_12827_path = jule::Str();
	_12838_ok = false;
	return std::make_tuple(_12827_path,_12838_ok);
}



inline std::tuple<jule::Str,jule::Bool> _21126de2b___abs(jule::Str _14514_path) {
	jule::Bool _14532_ok = jule::Bool();
	if (_14514_path.empty()) {
		_14514_path=jule::Str(".", 1);
	}
	std::tie(_14514_path,_14532_ok) = _211269b80_full_path(_14514_path);
	if ((!(_14532_ok))) {
		_14532_ok = false;
		return std::make_tuple(jule::Str(),_14532_ok);
	}
	_14532_ok = true;
	return std::make_tuple(_211da8bb9_clean(_14514_path),_14532_ok);
}



inline jule::Str _21126e0c4___join(jule::Slice<jule::Str> _15915_elem) {
	jule::Str _16013_s = jule::Str();
	jule::U8 _16113_last_char = 0LLU;
	{
		auto &expr = _15915_elem;
		auto it = expr.begin();
		_iter_begin_1b6266e19:;
		if (it != expr.end()) {
			jule::Str _1b626706d_e = *it;
			{
				{
					
					if ((_16013_s.len() == 0LL)) {
						_case_begin_1b6267a0d:;
					}
					else if (_21126e49d_is_slash(_16113_last_char)) {
						_case_begin_1b62677cc:;
						{
							while ((_1b626706d_e.len() > 0LL) && _21126e49d_is_slash(_1b626706d_e[0LL])) {
								{
									(_1b626706d_e).mut_slice(1LL);
								}
							_iter_next_1b6268778:;
							}
							_iter_end_1b6268778:;
						}
					}
					else if (_16113_last_char == ':') {
						_case_begin_1b6267843:;
					}
					else {
						_case_begin_1b6267667:;
						{
							_16013_s+=jule::Str("\\", 1);
							_16113_last_char='\\';
						}
					}
					_match_end_1b626759b:;
				}
				if ((_1b626706d_e.len() > 0LL)) {
					_16013_s+=_1b626706d_e;
					_16113_last_char=_1b626706d_e[(_1b626706d_e.len() - 1LL)];
				}
			}
			_iter_next_1b6266e19:;
			++it;
			goto _iter_begin_1b6266e19;
		}
		_iter_end_1b6266e19:;
	}
	if ((_16013_s.len() == 0LL)) {
		return jule::Str();
	}
	return _211da8bb9_clean(_16013_s);
}



inline jule::Str _211da8bb9_clean(jule::Str _10818_path) {
	jule::Str _1099_original_path = _10818_path;
	jule::I64 _1109_vol_len = _211267e36_volume_name_len(_10818_path);
	(_10818_path).mut_slice(_1109_vol_len);
	if (_10818_path.empty()) {
		if (((_1109_vol_len > 1LL) && _211267452_is_path_sep(_1099_original_path[0LL])) && _211267452_is_path_sep(_1099_original_path[1LL])) {
			return _211dc0d24_from_slash(_1099_original_path);
		}
		return (_1099_original_path + jule::Str(".", 1));
	}
	jule::Bool _1199_rooted = _211267452_is_path_sep(_10818_path[0LL]);
	jule::I64 _1269_n = _10818_path.len();
	_211dc0494_LazyBuff _12713_out = _211dc0494_LazyBuff(_10818_path,jule::Slice<jule::U8>(),jule::I64(),_1099_original_path,_1109_vol_len);
	jule::I64 _13214_r = 0LL;
	jule::I64 _13221_dotdot = 0LL;
	std::tie(_13214_r,_13221_dotdot) = std::make_tuple(0LL,0LL);
	if (_1199_rooted) {
		_12713_out._method_append(92LLU);
		std::tie(_13214_r,_13221_dotdot) = std::make_tuple(1LL,1LL);
	}
	while (_13214_r < _1269_n) {
		{
			{
				
				if (_211267452_is_path_sep(_10818_path[_13214_r])) {
					_case_begin_1b6275b1a:;
					{
						(_13214_r)++;
					}
				}
				else if ((_10818_path[_13214_r] == '.') && (((_13214_r + 1LL) == _1269_n) || _211267452_is_path_sep(_10818_path[(_13214_r + 1LL)]))) {
					_case_begin_1b627638a:;
					{
						(_13214_r)++;
					}
				}
				else if (((_10818_path[_13214_r] == '.') && (_10818_path[(_13214_r + 1LL)] == '.')) && (((_13214_r + 2LL) == _1269_n) || _211267452_is_path_sep(_10818_path[(_13214_r + 2LL)]))) {
					_case_begin_1b6276401:;
					{
						_13214_r+=2LL;
						{
							
							if (_12713_out._field_w > _13221_dotdot) {
								_case_begin_1b6279ca6:;
								{
									(_12713_out._field_w)--;
									while ((_12713_out._field_w > _13221_dotdot) && (!(_211267452_is_path_sep(static_cast<jule::U8>(_12713_out._method_index(_12713_out._field_w)))))) {
										{
											(_12713_out._field_w)--;
										}
									_iter_next_1b627a636:;
									}
									_iter_end_1b627a636:;
								}
							}
							else if ((!(_1199_rooted))) {
								_case_begin_1b6279d2d:;
								{
									if ((_12713_out._field_w > 0LL)) {
										_12713_out._method_append(92LLU);
									}
									_12713_out._method_append('.');
									_12713_out._method_append('.');
									_13221_dotdot=_12713_out._field_w;
								}
							}
							_match_end_1b6279c1d:;
						}
					}
				}
				else {
					_case_begin_1b6271099:;
					{
						if ((_1199_rooted && (_12713_out._field_w != 1LL)) || ((!(_1199_rooted)) && (_12713_out._field_w != 0LL))) {
							_12713_out._method_append(92LLU);
						}
						if (((true && (_12713_out._field_w == 0LL)) && (_12713_out._field_vol_len == 0LL)) && (_13214_r != 0LL)) {
							jule::I64 _17525_i = _13214_r;
							for (; (_17525_i < _1269_n) && (!(_211267452_is_path_sep(_10818_path[_17525_i]))); (_17525_i)++) {
								{
									if (_10818_path[_17525_i] == ':') {
										_12713_out._method_append('.');
										_12713_out._method_append(92LLU);
										goto _iter_end_1b6272ad4;
									}
								}
							_iter_next_1b6272ad4:;
							}
							_iter_end_1b6272ad4:;
						}
						for (; (_13214_r < _1269_n) && (!(_211267452_is_path_sep(_10818_path[_13214_r]))); (_13214_r)++) {
							{
								_12713_out._method_append(_10818_path[_13214_r]);
							}
						_iter_next_1b62727b5:;
						}
						_iter_end_1b62727b5:;
					}
				}
				_match_end_1b6270ecd:;
			}
		}
	_iter_next_1b6270a27:;
	}
	_iter_end_1b6270a27:;
	if ((_12713_out._field_w == 0LL)) {
		_12713_out._method_append('.');
	}
	return _211dc0d24_from_slash(_12713_out._method_string());
}



inline jule::Str _211dc0d24_from_slash(jule::Str _21119_path) {
	if (92LL == '/') {
		return _21119_path;
	}
	return _211e264a6_replace(_21119_path,jule::Str("/", 1),static_cast<jule::Str>(92LL),-1LL);
}



inline jule::Str _211dc6ce7_join(jule::Slice<jule::Str> _22513_elem) {
	return _21126e0c4___join(_22513_elem);
}



inline jule::Str _211e04440_ext(jule::Str _23012_path) {
	jule::I64 _23113_i = (_23012_path.len() - 1LL);
	for (; (_23113_i >= 0LL) && (!(_211267452_is_path_sep(_23012_path[_23113_i]))); (_23113_i)--) {
		{
			if (_23012_path[_23113_i] == '.') {
				return _23012_path.slice(_23113_i);
			}
		}
	_iter_next_1b62807d4:;
	}
	_iter_end_1b62807d4:;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _211da0dd1_abs(jule::Str _24512_path) {
	jule::Str _24610_abs_path;
	jule::Bool _24620_ok;
	std::tie(_24610_abs_path,_24620_ok) = _21126de2b___abs(_24512_path);
	return std::make_tuple(_24610_abs_path,_24620_ok);
}



inline jule::Str _211dcb2b3_base(jule::Str _25417_path) {
	if (_25417_path.empty()) {
		return jule::Str(".", 1);
	}
	while ((_25417_path.len() > 0LL) && _211267452_is_path_sep(_25417_path[(_25417_path.len() - 1LL)])) {
		{
			(_25417_path).mut_slice(0LL,_25417_path.len() - 1LL);
		}
	_iter_next_1b6283661:;
	}
	_iter_end_1b6283661:;
	(_25417_path).mut_slice(_211dd904b_volume_name(_25417_path).len());
	jule::I64 _26513_i = (_25417_path.len() - 1LL);
	while ((_26513_i >= 0LL) && (!(_211267452_is_path_sep(_25417_path[_26513_i])))) {
		{
			(_26513_i)--;
		}
	_iter_next_1b626c2b5:;
	}
	_iter_end_1b626c2b5:;
	if ((_26513_i >= 0LL)) {
		(_25417_path).mut_slice(_26513_i + 1LL);
	}
	if (_25417_path.empty()) {
		return static_cast<jule::Str>(92LL);
	}
	return _25417_path;
}



inline jule::Str _211dd6565_dir(jule::Str _28512_path) {
	jule::Str _2869_vol = _211dd904b_volume_name(_28512_path);
	jule::I64 _28713_i = (_28512_path.len() - 1LL);
	while ((_28713_i >= static_cast<jule::I64>(_2869_vol.len())) && (!(_211267452_is_path_sep(_28512_path[_28713_i])))) {
		{
			(_28713_i)--;
		}
	_iter_next_1b6286dd4:;
	}
	_iter_end_1b6286dd4:;
	jule::Str _2919_dir = _211da8bb9_clean(_28512_path.slice(_2869_vol.len(),(_28713_i + 1LL)));
	if ((_2919_dir == jule::Str(".", 1)) && (_2869_vol.len() > 2LL)) {
		return _2869_vol;
	}
	return _2869_vol + _2919_dir;
}



inline jule::Str _211dd904b_volume_name(jule::Str _30320_path) {
	return _211dc0d24_from_slash(_30320_path.slice(0LL,_211267e36_volume_name_len(_30320_path)));
}



inline jule::I64 _2110b426b_get_last_fs_error(void) {
	jule::I64 _729_err = _2111163ab_get_last_errno();
	{
		auto &_match_expr{ _729_err };
		
		if (_match_expr == 13LL) {
			_case_begin_1e808000d:;
			{
				return static_cast<jule::I64>(0LL);
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_1e807dd86:;
			{
				return static_cast<jule::I64>(1LL);
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_1e80805c4:;
			{
				return static_cast<jule::I64>(2LL);
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_211da2652:;
			{
				return static_cast<jule::I64>(3LL);
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_212de694d:;
			{
				return static_cast<jule::I64>(4LL);
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_212de7201:;
			{
				return static_cast<jule::I64>(5LL);
			}
		}
		else if (_match_expr == 132LL) {
			_case_begin_212deae19:;
			{
				return static_cast<jule::I64>(6LL);
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_212dea5de:;
			{
				return static_cast<jule::I64>(7LL);
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_212de73ee:;
			{
				return static_cast<jule::I64>(8LL);
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_212deb090:;
			{
				return static_cast<jule::I64>(9LL);
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_212e06441:;
			{
				return static_cast<jule::I64>(10LL);
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_212e094dd:;
			{
				return static_cast<jule::I64>(11LL);
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_212e09224:;
			{
				return static_cast<jule::I64>(12LL);
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_212e09bb4:;
			{
				return static_cast<jule::I64>(13LL);
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_212e0a720:;
			{
				return static_cast<jule::I64>(14LL);
			}
		}
		else if (_match_expr == 124LL) {
			_case_begin_212e0c2e3:;
			{
				return static_cast<jule::I64>(15LL);
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_212e0deb5:;
			{
				return static_cast<jule::I64>(16LL);
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_212e1213e:;
			{
				return static_cast<jule::I64>(17LL);
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_212e0e3b1:;
			{
				return static_cast<jule::I64>(18LL);
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_212e11e74:;
			{
				return static_cast<jule::I64>(19LL);
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_212e13849:;
			{
				return static_cast<jule::I64>(20LL);
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_212e0a90c:;
			{
				return static_cast<jule::I64>(21LL);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_212e11b22:;
			{
				return static_cast<jule::I64>(22LL);
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_212e17c38:;
			{
				return static_cast<jule::I64>(23LL);
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_212e17b17:;
			{
				return static_cast<jule::I64>(24LL);
			}
		}
		else if (_match_expr == 119LL) {
			_case_begin_212e19d39:;
			{
				return static_cast<jule::I64>(25LL);
			}
		}
		else if (_match_expr == 104LL) {
			_case_begin_212e19b3b:;
			{
				return static_cast<jule::I64>(26LL);
			}
		}
		else if (_match_expr == 41LL) {
			_case_begin_212e2d59a:;
			{
				return static_cast<jule::I64>(27LL);
			}
		}
		else {
			_case_begin_1e7c8367e:;
			{
				return static_cast<jule::I64>(1LL);
			}
		}
		_match_end_1e7ca2d1e:;
	}
}



inline jule::Bool _21118b299_is_console_handle(jule::U64 _11822_handle) {
	return ((_11822_handle == _21114a6dc_STDIN) || (_11822_handle == _21112c6d0_STDOUT)) || (_11822_handle == _21112d6ae_STDERR);
}



inline jule::I64 _2128a68e7_get_last_process_error(void) {
	jule::I64 _429_err = _2111163ab_get_last_errno();
	{
		auto &_match_expr{ _429_err };
		
		if (_match_expr == 13LL) {
			_case_begin_1e7de8085:;
			{
				return static_cast<jule::I64>(0LL);
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_1e7dd3c30:;
			{
				return static_cast<jule::I64>(1LL);
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_1e7de1138:;
			{
				return static_cast<jule::I64>(2LL);
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_1e7de6cdc:;
			{
				return static_cast<jule::I64>(3LL);
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_1e7e0bdce:;
			{
				return static_cast<jule::I64>(4LL);
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_1e7e175c1:;
			{
				return static_cast<jule::I64>(5LL);
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_1e7e1182e:;
			{
				return static_cast<jule::I64>(6LL);
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_1e7e17978:;
			{
				return static_cast<jule::I64>(7LL);
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_1e7e1c5c6:;
			{
				return static_cast<jule::I64>(9LL);
			}
		}
		else if (_match_expr == 121LL) {
			_case_begin_1e7e23863:;
			{
				return static_cast<jule::I64>(10LL);
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_1e7e25e3c:;
			{
				return static_cast<jule::I64>(11LL);
			}
		}
		else {
			_case_begin_1e7bc9916:;
			{
				return static_cast<jule::I64>(0LL);
			}
		}
		_match_end_1e7d892ce:;
	}
}



inline jule::Slice<wchar_t*> _2128b9113_ustr_slice_to_wcstr_slice(jule::Slice<jule::Slice<jule::U16>> _1830_us) {
	jule::Slice<wchar_t*> _1913_wcs = jule::Slice<wchar_t*>::alloc(0LL,static_cast<jule::I64>((_1830_us.len() + 1LL)));
	{
		auto &expr = _1830_us;
		auto it = expr.begin();
		_iter_begin_212deeaaa:;
		if (it != expr.end()) {
			jule::I64 _1e7a91bc9_i = it - expr.begin();
			{
				_1913_wcs = jule::alloc_for_append(_1913_wcs,1);_1913_wcs.__push(((wchar_t*)((&(_1830_us[_1e7a91bc9_i][0LL])))));
			}
			_iter_next_212deeaaa:;
			++it;
			_1e7a91bc9_i++;
			goto _iter_begin_212deeaaa;
		}
		_iter_end_212deeaaa:;
	}
	_1913_wcs = jule::alloc_for_append(_1913_wcs,1);_1913_wcs.__push(nullptr);
	return _1913_wcs;
}



inline jule::Slice<jule::Slice<jule::U16>> _2128b9465_str_slice_to_ustr_slice(jule::Slice<jule::Str> _2728_s) {
	jule::Slice<jule::Slice<jule::U16>> _2813_us = jule::Slice<jule::Slice<jule::U16>>::alloc(0LL,static_cast<jule::I64>(_2728_s.len()));
	{
		auto &expr = _2728_s;
		auto it = expr.begin();
		_iter_begin_212e3886e:;
		if (it != expr.end()) {
			jule::Str &_1e7b0ec7a_p = *it;
			{
				_2813_us = jule::alloc_for_append(_2813_us,1);_2813_us.__push(_21116da95_utf16_from_str(_1e7b0ec7a_p));
			}
			_iter_next_212e3886e:;
			++it;
			goto _iter_begin_212e3886e;
		}
		_iter_end_212e3886e:;
	}
	return _2813_us;
}



inline jule::I64 _2128b97d9_execvp(jule::Str _3511_file,jule::Slice<jule::Str> _3522_argv) {
	jule::Slice<jule::U16> _369_utf16_file = _21116da95_utf16_from_str(_3511_file);
	jule::Slice<jule::Slice<jule::U16>> _379_ucargv = _2128b9465_str_slice_to_ustr_slice(_3522_argv);
	jule::Slice<wchar_t*> _389_cargv = _2128b9113_ustr_slice_to_wcstr_slice(_379_ucargv);
	return static_cast<jule::I64>(_wspawnvp(P_NOWAIT,((wchar_t*)((&(_369_utf16_file[0LL])))),(&(_389_cargv[0LL]))));
}



inline jule::I64 _2128b9c07_execve(jule::Str _4211_file,jule::Slice<jule::Str> _4222_argv,jule::Slice<jule::Str> _4235_env) {
	jule::Slice<jule::Slice<jule::U16>> _439_ucargv = _2128b9465_str_slice_to_ustr_slice(_4222_argv);
	jule::Slice<wchar_t*> _449_cargv = _2128b9113_ustr_slice_to_wcstr_slice(_439_ucargv);
	jule::Slice<jule::Slice<jule::U16>> _459_ucenv = _2128b9465_str_slice_to_ustr_slice(_4235_env);
	jule::Slice<wchar_t*> _469_cenv = _2128b9113_ustr_slice_to_wcstr_slice(_459_ucenv);
	jule::Slice<jule::U16> _479_utf16_file = _21116da95_utf16_from_str(_4211_file);
	return static_cast<jule::I64>(_wspawnvpe(P_NOWAIT,((wchar_t*)((&(_479_utf16_file[0LL])))),(&(_449_cargv[0LL])),(&(_469_cenv[0LL]))));
}



inline void _2128bad6d_exit(jule::I64 _1213_code) {
	_21117bc07_exit(_1213_code);
}



inline jule::Str _2128bb29c_executable(void) {
	return jule::executable();
}



inline jule::Bool _21286e382_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[(_2627_p.len() - 1LL)] == '>');
}



inline jule::Bool _21286ec9a_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _2128650ae_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_212e09a60:;
		if (it != expr.end()) {
			jule::Str &_212e331b5_valid_ext = *it;
			{
				if (_3128_ext == _212e331b5_valid_ext) {
					return true;
				}
			}
			_iter_next_212e09a60:;
			++it;
			goto _iter_begin_212e09a60;
		}
		_iter_end_212e09a60:;
	}
	return false;
}



inline jule::Bool _21286ee43_is_valid_cpp_ext(jule::Str _4225_ext) {
	if ((_4225_ext == jule::Str(".c", 2))) {
		return true;
	}
	{
		auto &expr = _21286cb66_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_1e7bde62e:;
		if (it != expr.end()) {
			jule::Str &_1e7c2260c_e = *it;
			{
				if (_4225_ext == _1e7c2260c_e) {
					return true;
				}
			}
			_iter_next_1e7bde62e:;
			++it;
			goto _iter_begin_1e7bde62e;
		}
		_iter_end_1e7bde62e:;
	}
	{
		auto &expr = _21286e23e_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_1e7c87243:;
		if (it != expr.end()) {
			jule::Str &_1e7ca86c6_e = *it;
			{
				if (_4225_ext == _1e7ca86c6_e) {
					return true;
				}
			}
			_iter_next_1e7c87243:;
			++it;
			goto _iter_begin_1e7c87243;
		}
		_iter_end_1e7c87243:;
	}
	return false;
}



inline jule::Str _212880739_logf(jule::Str _29313_fmt,jule::Slice<jule::Any> _29326_args) {
	return _21288144e_apply_fmt(_29313_fmt,_29326_args);
}



inline jule::Str _212880c56_arg_to_str(jule::Any _29715_arg) {
	{
		auto &_match_expr{ _29715_arg };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_212935a64:;
			{
				return _29715_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_1e7d98453:;
			{
				return static_cast<jule::Str>(_29715_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_1e7d984b9:;
			{
				return static_cast<jule::Str>(_29715_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_212951c28:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_1e801c71a:;
	}
}



inline jule::I64 _212881064_find_next_fmt(jule::Str _30618_fmt) {
	{
		auto &expr = _30618_fmt;
		auto it = expr.begin();
		_iter_begin_212e37351:;
		if (it != expr.end()) {
			jule::I64 _212928590_i = it - expr.begin();
			jule::U8 &_212e7a66e_b = *it;
			{
				if (_212e7a66e_b == '@') {
					return _212928590_i;
				}
			}
			_iter_next_212e37351:;
			++it;
			_212928590_i++;
			goto _iter_begin_212e37351;
		}
		_iter_end_212e37351:;
	}
	return -1LL;
}



inline jule::Str _21288144e_apply_fmt(jule::Str _31518_fmt,jule::Slice<jule::Any> _31528_args) {
	jule::Str _31613_s = jule::Str();
	{
		auto &expr = _31528_args;
		auto it = expr.begin();
		_iter_begin_1e7c78652:;
		if (it != expr.end()) {
			jule::Any &_1e7caa84e_arg = *it;
			{
				jule::I64 _31913_i = _212881064_find_next_fmt(_31518_fmt);
				if ((_31913_i == -1LL)) {
					goto _iter_end_1e7c78652;
				}
				_31613_s+=_31518_fmt.slice(0LL,_31913_i);
				_31613_s+=_212880c56_arg_to_str(_1e7caa84e_arg);
				(_31518_fmt).mut_slice(_31913_i + 1LL);
			}
			_iter_next_1e7c78652:;
			++it;
			goto _iter_begin_1e7c78652;
		}
		_iter_end_1e7c78652:;
	}
	_31613_s+=_31518_fmt;
	return _31613_s;
}



inline jule::Bool _21288285c_is_top_directive(jule::Str _2825_directive) {
	return (_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5));
}



inline jule::Bool _2128848b4_is_windows(jule::Str _5119_os) {
	return (_5119_os == jule::Str("windows", 7));
}



inline jule::Bool _212884c49_is_darwin(jule::Str _5318_os) {
	return (_5318_os == jule::Str("darwin", 6));
}



inline jule::Bool _212885101_is_linux(jule::Str _5517_os) {
	return (_5517_os == jule::Str("linux", 5));
}



inline jule::Bool _21288550d_is_i386(jule::Str _5716_arch) {
	return (_5716_arch == jule::Str("i386", 4));
}



inline jule::Bool _21288584e_is_amd64(jule::Str _5917_arch) {
	return (_5917_arch == jule::Str("amd64", 5));
}



inline jule::Bool _212885bd4_is_arm64(jule::Str _6117_arch) {
	return (_6117_arch == jule::Str("arm64", 5));
}



inline jule::Bool _212886069_is_unix(jule::Str _6316_os) {
	return _212884c49_is_darwin(_6316_os) || _212885101_is_linux(_6316_os);
}



inline jule::Bool _21288650e_is_32bit(jule::Str _6517_arch) {
	return _21288550d_is_i386(_6517_arch);
}



inline jule::Bool _21288680b_is_64bit(jule::Str _6717_arch) {
	return _21288584e_is_amd64(_6717_arch) || _212885bd4_is_arm64(_6717_arch);
}



inline void _212895809_init(void) {
	jule::Str _2513_path = _2128bb29c_executable();
	if (_2513_path.empty()) {
		jule::panic(jule::Str("std::jule::build: executable file cannot found", 46) + jule::Str("\nlocation: std/jule/build/env.jule:27:9"));;
	}
	jule::Str _309_pwd = ({
		auto except = _211288c7b_working_dir();
		(except.ok()) ? (except.result) : ({{
			jule::panic(jule::Str("std::jule::build: working directory path cannot found", 53) + jule::Str("\nlocation: std/jule/build/env.jule:31:9"));;
			return;
			return;
		} jule::Str();});
	});
	jule::Str _359_path_exec = _211dd6565_dir(_2513_path);
	_2513_path=_211dc6ce7_join(jule::Slice<jule::Str>({_359_path_exec,jule::Str("..", 2)}));
	{
		_212890419_PATH_WD=_309_pwd;
		_212891a9c_PATH_EXEC=_359_path_exec;
		_21289b502_PATH_STDLIB=_211dc6ce7_join(jule::Slice<jule::Str>({_2513_path,jule::Str("std", 3)}));
		_2128b235e_PATH_API=_211dc6ce7_join(jule::Slice<jule::Str>({_212891a9c_PATH_EXEC,jule::Str("..", 2)}));
		_2128b235e_PATH_API=_211dc6ce7_join(jule::Slice<jule::Str>({_2128b235e_PATH_API,jule::Str("api", 3)}));
		_2128b235e_PATH_API=_211dc6ce7_join(jule::Slice<jule::Str>({_2128b235e_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Bool _212ae66c5_is_unary_op(jule::Str _31820_kind) {
	{
		auto &expr = _212a2d354_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_1b6e4e88c:;
		if (it != expr.end()) {
			jule::Str &_1b6e504b4_op = *it;
			{
				if (_31820_kind == _1b6e504b4_op) {
					return true;
				}
			}
			_iter_next_1b6e4e88c:;
			++it;
			goto _iter_begin_1b6e4e88c;
		}
		_iter_end_1b6e4e88c:;
	}
	return false;
}



inline jule::Bool _212ae6a9e_is_bin_op(jule::Str _32918_kind) {
	{
		auto &expr = _212a2d497_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_1b6e50bac:;
		if (it != expr.end()) {
			jule::Str &_1b6e50607_op = *it;
			{
				if (_32918_kind == _1b6e50607_op) {
					return true;
				}
			}
			_iter_next_1b6e50bac:;
			++it;
			goto _iter_begin_1b6e50bac;
		}
		_iter_end_1b6e50bac:;
	}
	return false;
}



inline jule::Bool _212ae7385_is_str(jule::Str _35115_k) {
	return (!(_35115_k.empty())) && ((_35115_k[0LL] == '\"') || _212ae76c6_is_raw_str(_35115_k));
}



inline jule::Bool _212ae76c6_is_raw_str(jule::Str _35319_k) {
	return (!(_35319_k.empty())) && (_35319_k[0LL] == '`');
}



inline jule::Bool _212ae7a5b_is_rune(jule::Str _35616_k) {
	return (!(_35616_k.empty())) && (_35616_k[0LL] == '\'');
}



inline jule::Bool _212ae83b9_is_bool(jule::Str _36016_k) {
	return (_36016_k == jule::Str("true", 4)) || (_36016_k == jule::Str("false", 5));
}



inline jule::Bool _212ae86b6_is_float(jule::Str _36317_k) {
	if (_2127d7dbc_has_prefix(_36317_k,jule::Str("0x", 2))) {
		return _211e19741_contains_any(_36317_k,jule::Str(".pP", 3));
	}
	return _211e19741_contains_any(_36317_k,jule::Str(".eE", 3));
}



inline jule::Bool _212ae8a3a_is_num(jule::Str _37115_k) {
	if (_37115_k.empty()) {
		return false;
	}
	jule::U8 _3769_b = _37115_k[0LL];
	return (_3769_b == '.') || (('0' <= _3769_b) && (_3769_b <= '9'));
}



inline jule::Bool _212ae9255_is_ignore_ident(jule::Str _38624_ident) {
	return (_38624_ident == jule::Str("_", 1));
}



inline jule::Bool _212ae95da_is_anon_ident(jule::Str _38822_ident) {
	return (_38822_ident == jule::Str("<anonymous>", 11));
}



inline jule::Bool _212ae9d05_is_space(jule::I32 _40217_r) {
	{
		auto &expr = _212a2d211_SPACES;
		auto it = expr.begin();
		_iter_begin_1b6e5b2d3:;
		if (it != expr.end()) {
			jule::I32 &_1b6e5abb7_cr = *it;
			{
				if (_40217_r == _1b6e5abb7_cr) {
					return true;
				}
			}
			_iter_next_1b6e5b2d3:;
			++it;
			goto _iter_begin_1b6e5b2d3;
		}
		_iter_end_1b6e5b2d3:;
	}
	return false;
}



inline jule::Bool _212aea3cc_is_letter(jule::I32 _41318_r) {
	return _211e22903_is_letter(_41318_r);
}



inline jule::Bool _212aeaa5e_is_decimal(jule::U8 _43519_b) {
	return ('0' <= _43519_b) && (_43519_b <= '9');
}



inline jule::Bool _212aead7d_is_binary(jule::U8 _43718_b) {
	return (_43718_b == '0') || (_43718_b == '1');
}



inline jule::Bool _212aeb213_is_octal(jule::U8 _43917_b) {
	return ('0' <= _43917_b) && (_43917_b <= '7');
}



inline jule::Bool _212aeb598_is_hex(jule::U8 _44215_b) {
	{
		
		if (('0' <= _44215_b) && (_44215_b <= '9')) {
			_case_begin_1b6e617c2:;
			{
				return true;
			}
		}
		else if (('a' <= _44215_b) && (_44215_b <= 'f')) {
			_case_begin_1b6e61838:;
			{
				return true;
			}
		}
		else if (('A' <= _44215_b) && (_44215_b <= 'F')) {
			_case_begin_1b6e611a6:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b6e61041:;
			{
				return false;
			}
		}
		_match_end_1b6e60e97:;
	}
}



inline jule::Bool _212aeb92d_is_assign(jule::U64 _45418_id) {
	return ((((((_45418_id == static_cast<jule::U64>(2LLU)) || (_45418_id == static_cast<jule::U64>(31LLU))) || (_45418_id == static_cast<jule::U64>(34LLU))) || (_45418_id == static_cast<jule::U64>(20LLU))) || (_45418_id == static_cast<jule::U64>(28LLU))) || (_45418_id == static_cast<jule::U64>(3LLU))) || (_45418_id == static_cast<jule::U64>(7LLU));
}



inline jule::Bool _212aebd4b_is_postfix_op(jule::Str _46722_kind) {
	{
		auto &expr = _212a2d72d_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_1b6e65441:;
		if (it != expr.end()) {
			jule::Str &_1b6e65485_op = *it;
			{
				if (_46722_kind == _1b6e65485_op) {
					return true;
				}
			}
			_iter_next_1b6e65441:;
			++it;
			goto _iter_begin_1b6e65441;
		}
		_iter_end_1b6e65441:;
	}
	return false;
}



inline jule::Bool _212aec18c_is_assign_op(jule::Str _47821_kind) {
	if (_212aebd4b_is_postfix_op(_47821_kind)) {
		return true;
	}
	{
		auto &expr = _212a2d882_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_1b6e66354:;
		if (it != expr.end()) {
			jule::Str &_1b6e66398_op = *it;
			{
				if (_47821_kind == _1b6e66398_op) {
					return true;
				}
			}
			_iter_next_1b6e66354:;
			++it;
			goto _iter_begin_1b6e66354;
		}
		_iter_end_1b6e66354:;
	}
	return false;
}



inline jule::Ptr<_212aed0c2_File> _212aed7dc_new_file_set(jule::Str _6421_path) {
	return jule::new_struct<_212aed0c2_File>(new( std::nothrow ) _212aed0c2_File(jule::Slice<jule::U8>(),_6421_path,jule::Slice<_212ae5c02_Token>()));
}



inline _21287ea02_Log _212b01cb8_make_err(jule::I64 _10513_row,jule::I64 _10523_col,jule::Ptr<_212aed0c2_File>& _10534_f,jule::Str _10544_fmt,jule::Slice<jule::Any> _10557_args) {
	return _21287ea02_Log(static_cast<jule::I64>(1LL),_10513_row,_10523_col,(*(_10534_f))._method_path(),_212880739_logf(_10544_fmt,_10557_args),jule::Str(),jule::Str());
}



inline jule::Bool _212b02516_bytes_has_prefix(jule::Slice<jule::U8>& _11522_bytes,jule::Str _11537_prefix) {
	if (_11522_bytes.len() < static_cast<jule::I64>(_11537_prefix.len())) {
		return false;
	}
	{
		auto &expr = _11537_prefix;
		auto it = expr.begin();
		_iter_begin_1b6e69588:;
		if (it != expr.end()) {
			jule::I64 _1b6e699b7_i = it - expr.begin();
			{
				if (_11522_bytes[_1b6e699b7_i] != _11537_prefix[_1b6e699b7_i]) {
					return false;
				}
			}
			_iter_next_1b6e69588:;
			++it;
			_1b6e699b7_i++;
			goto _iter_begin_1b6e69588;
		}
		_iter_end_1b6e69588:;
	}
	return true;
}



inline jule::Str _212b02956_float_fmt_e(jule::Slice<jule::U8>& _12717_txt,jule::I64 _12734_i) {
	jule::Str _12744_lit = jule::Str();
	(_12734_i)++;
	if (_12734_i >= static_cast<jule::I64>(_12717_txt.len())) {
		return _12744_lit;
	}
	jule::U8 _13313_b = _12717_txt[_12734_i];
	if (_13313_b == '_') {
		return _12744_lit;
	}
	if ((_13313_b == '+') || (_13313_b == '-')) {
		(_12734_i)++;
		if (_12734_i >= static_cast<jule::I64>(_12717_txt.len())) {
			return _12744_lit;
		}
		if (_12717_txt[_12734_i] == '_') {
			return _12744_lit;
		}
	}
	jule::I64 _1479_first = _12734_i;
	for (; _12734_i < static_cast<jule::I64>(_12717_txt.len()); (_12734_i)++) {
		{
			_13313_b=_12717_txt[_12734_i];
			if ((_13313_b != '_') && (!(_212aeaa5e_is_decimal(_13313_b)))) {
				goto _iter_end_1b6e6ca75;
			}
		}
	_iter_next_1b6e6ca75:;
	}
	_iter_end_1b6e6ca75:;
	if (_12734_i == _1479_first) {
		_12744_lit = jule::Str();
		return _12744_lit;
	}
	_12744_lit = static_cast<jule::Str>(_12717_txt.slice(0LL,_12734_i));
	return _12744_lit;
}



inline jule::Str _212b02e2e_float_fmt_p(jule::Slice<jule::U8>& _16117_txt,jule::I64 _16130_i) {
	return _212b02956_float_fmt_e(_16117_txt,_16130_i);
}



inline jule::Str _212b0332a_float_fmt_dotnp(jule::Slice<jule::U8>& _16521_txt,jule::I64 _16538_i) {
	if (_16521_txt[_16538_i] != '.') {
		return jule::Str();
	}
	(_16538_i)++;
	_julec_label_loop:;
	for (; _16538_i < static_cast<jule::I64>(_16521_txt.len()); (_16538_i)++) {
		{
			jule::U8 _17313_b = _16521_txt[_16538_i];
			{
				
				if (_17313_b == '_' || _212aeaa5e_is_decimal(_17313_b)) {
					_case_begin_1b6e71c66:;
					{
						goto _iter_next_1b6e6e6ae;
					}
				}
				else if (_212b051b7_is_float_fmt_p(_17313_b,_16538_i)) {
					_case_begin_1b6e71ccc:;
					{
						return _212b02e2e_float_fmt_p(_16521_txt,_16538_i);
					}
				}
				else {
					_case_begin_1b6e71abd:;
					{
						goto _iter_end_1b6e6e6ae;
					}
				}
				_match_end_1b6e71a46:;
			}
		}
	_iter_next_1b6e6e6ae:;
	}
	_iter_end_1b6e6e6ae:;
	return jule::Str();
}



inline jule::Str _212b0376a_float_fmt_dotfp(jule::Slice<jule::U8>& _18821_txt,jule::I64 _18838_i) {
	_18838_i+=2LL;
	return _212b02956_float_fmt_e(_18821_txt,_18838_i);
}



inline jule::Str _212b03baa_float_fmt_dotp(jule::Slice<jule::U8>& _19320_txt,jule::I64 _19337_i) {
	(_19337_i)++;
	return _212b02956_float_fmt_e(_19320_txt,_19337_i);
}



inline jule::Str _212b0421b_float_num(jule::Slice<jule::U8>& _19815_txt,jule::I64 _19832_i) {
	jule::Str _19842_lit = jule::Str();
	(_19832_i)++;
	if (_19832_i >= static_cast<jule::I64>(_19815_txt.len())) {
		_19842_lit = static_cast<jule::Str>(_19815_txt);
		return _19842_lit;
	}
	if (_19815_txt[_19832_i] == '_') {
		(_19832_i)--;
		_19842_lit = static_cast<jule::Str>(_19815_txt.slice(0LL,_19832_i));
		return _19842_lit;
	}
	for (; _19832_i < static_cast<jule::I64>(_19815_txt.len()); (_19832_i)++) {
		{
			jule::U8 _20813_b = _19815_txt[_19832_i];
			if ((_19832_i > 1LL) && ((_20813_b == 'e') || (_20813_b == 'E'))) {
				_19842_lit = _212b02956_float_fmt_e(_19815_txt,_19832_i);
				return _19842_lit;
			}
			if ((_20813_b != '_') && (!(_212aeaa5e_is_decimal(_20813_b)))) {
				goto _iter_end_1b6e752a8;
			}
		}
	_iter_next_1b6e752a8:;
	}
	_iter_end_1b6e752a8:;
	if ((_19832_i == 1LL)) {
		return _19842_lit;
	}
	_19842_lit = static_cast<jule::Str>(_19815_txt.slice(0LL,_19832_i));
	return _19842_lit;
}



inline jule::Str _212b045c3_common_num(jule::Slice<jule::U8>& _22316_txt) {
	jule::Str _22331_lit = jule::Str();
	jule::I64 _22413_i = 0LL;
	_julec_label_loop:;
	for (; _22413_i < static_cast<jule::I64>(_22316_txt.len()); (_22413_i)++) {
		{
			jule::U8 _22713_b = _22316_txt[_22413_i];
			{
				
				if (_22713_b == '.') {
					_case_begin_1b6e79dd4:;
					{
						_22331_lit = _212b0421b_float_num(_22316_txt,_22413_i);
						return _22331_lit;
					}
				}
				else if (_22713_b == '_') {
					_case_begin_1b6e79e5b:;
					{
						goto _iter_next_1b6e792bd;
					}
				}
				else if (_212b04c77_is_float_fmt_e(_22713_b,_22413_i)) {
					_case_begin_1b6e79ed3:;
					{
						_22331_lit = _212b02956_float_fmt_e(_22316_txt,_22413_i);
						return _22331_lit;
					}
				}
				else if ((!(_212aeaa5e_is_decimal(_22713_b)))) {
					_case_begin_1b6e7a05a:;
					{
						goto _iter_end_1b6e792bd;
					}
				}
				_match_end_1b6e79d07:;
			}
		}
	_iter_next_1b6e792bd:;
	}
	_iter_end_1b6e792bd:;
	if ((_22413_i == 0LL)) {
		return _22331_lit;
	}
	_22331_lit = static_cast<jule::Str>(_22316_txt.slice(0LL,_22413_i));
	return _22331_lit;
}



inline jule::Str _212b04925_binary_num(jule::Slice<jule::U8>& _24616_txt) {
	jule::Str _24631_lit = jule::Str();
	if ((!(_212b02516_bytes_has_prefix(_24616_txt,jule::Str("0b", 2))))) {
		_24631_lit = jule::Str();
		return _24631_lit;
	}
	if ((_24616_txt.len() < 2LL)) {
		return _24631_lit;
	}
	
	jule::I64 _25513_i = 2LL;
	for (; _25513_i < static_cast<jule::I64>(_24616_txt.len()); (_25513_i)++) {
		{
			if ((_24616_txt[_25513_i] != '_') && (!(_212aead7d_is_binary(_24616_txt[_25513_i])))) {
				goto _iter_end_1b6e7ddc7;
			}
		}
	_iter_next_1b6e7ddc7:;
	}
	_iter_end_1b6e7ddc7:;
	if ((_25513_i == 2LL)) {
		return _24631_lit;
	}
	_24631_lit = static_cast<jule::Str>(_24616_txt.slice(0LL,_25513_i));
	return _24631_lit;
}



inline jule::Bool _212b04c77_is_float_fmt_e(jule::U8 _26819_b,jule::I64 _26828_i) {
	return (_26828_i > 0LL) && ((_26819_b == 'e') || (_26819_b == 'E'));
}



inline jule::Bool _212b051b7_is_float_fmt_p(jule::U8 _27219_b,jule::I64 _27228_i) {
	return (_27228_i > 0LL) && ((_27219_b == 'p') || (_27219_b == 'P'));
}



inline jule::Bool _212b05607_is_float_fmt_dotnp(jule::Slice<jule::U8>& _27624_txt,jule::I64 _27641_i) {
	if (_27624_txt[_27641_i] != '.') {
		return false;
	}
	(_27641_i)++;
	_julec_label_loop:;
	for (; _27641_i < static_cast<jule::I64>(_27624_txt.len()); (_27641_i)++) {
		{
			jule::U8 _28313_b = _27624_txt[_27641_i];
			{
				
				if (_28313_b == '_' || _212aeaa5e_is_decimal(_28313_b)) {
					_case_begin_1b6e842c8:;
					{
						goto _iter_next_1b6e8377d;
					}
				}
				else if (_212b051b7_is_float_fmt_p(_28313_b,_27641_i)) {
					_case_begin_1b6e8433e:;
					{
						return true;
					}
				}
				else {
					_case_begin_1b6e84130:;
					{
						goto _iter_end_1b6e8377d;
					}
				}
				_match_end_1b6e840a8:;
			}
		}
	_iter_next_1b6e8377d:;
	}
	_iter_end_1b6e8377d:;
	return false;
}



inline jule::Bool _212b05a47_is_float_fmt_dotp(jule::Slice<jule::U8>& _29723_txt,jule::I64 _29736_i) {
	{
		
		if ((_29723_txt.len() < 3LL)) {
			_case_begin_1b6e86440:;
			{
				goto _case_begin_1b6e864a6;
			}
		}
		else if (_29723_txt[_29736_i] != '.') {
			_case_begin_1b6e864a6:;
			{
				goto _case_begin_1b6e85d24;
			}
		}
		else if ((_29723_txt[(_29736_i + 1LL)] != 'p') && (_29723_txt[(_29736_i + 1LL)] != 'P')) {
			_case_begin_1b6e85d24:;
			{
				return false;
			}
		}
		else {
			_case_begin_1b6e85bae:;
			{
				return true;
			}
		}
		_match_end_1b6e85ae3:;
	}
}



inline jule::Bool _212b05e87_is_float_fmt_dotfp(jule::Slice<jule::U8>& _31024_txt,jule::I64 _31037_i) {
	{
		
		if ((_31024_txt.len() < 4LL)) {
			_case_begin_1b6e88a5d:;
			{
				goto _case_begin_1b6e88ac4;
			}
		}
		else if (_31024_txt[_31037_i] != '.') {
			_case_begin_1b6e88ac4:;
			{
				goto _case_begin_1b6e88442;
			}
		}
		else if ((_31024_txt[(_31037_i + 1LL)] != 'f') && (_31024_txt[(_31037_i + 1LL)] != 'F')) {
			_case_begin_1b6e88442:;
			{
				goto _case_begin_1b6e884b9;
			}
		}
		else if ((_31024_txt[(_31037_i + 2LL)] != 'p') && (_31024_txt[(_31037_i + 1LL)] != 'P')) {
			_case_begin_1b6e884b9:;
			{
				return false;
			}
		}
		else {
			_case_begin_1b6e87dd1:;
			{
				return true;
			}
		}
		_match_end_1b6e87d15:;
	}
}



inline jule::Str _212b06619_octal_num(jule::Slice<jule::U8>& _32515_txt) {
	jule::Str _32530_lit = jule::Str();
	if (_32515_txt[0LL] != '0') {
		_32530_lit = jule::Str();
		return _32530_lit;
	}
	if ((_32515_txt.len() < 2LL)) {
		return _32530_lit;
	}
	jule::I64 _33313_octal_start = 1LL;
	jule::Bool _33513_o = false;
	if (_32515_txt[1LL] == 'o') {
		if ((_32515_txt.len() < 3LL)) {
			return _32530_lit;
		}
		(_33313_octal_start)++;
		_33513_o=true;
	}
	jule::I64 _34413_i = _33313_octal_start;
	for (; _34413_i < static_cast<jule::I64>(_32515_txt.len()); (_34413_i)++) {
		{
			jule::U8 _34613_b = _32515_txt[_34413_i];
			if (_34613_b == '.') {
				if (_33513_o) {
					_32530_lit = jule::Str();
					return _32530_lit;
				}
				_32530_lit = _212b0421b_float_num(_32515_txt,_34413_i);
				return _32530_lit;
			}
			if (_212b04c77_is_float_fmt_e(_34613_b,_34413_i)) {
				_32530_lit = _212b02956_float_fmt_e(_32515_txt,_34413_i);
				return _32530_lit;
			}
			if ((_34613_b != '_') && (!(_212aeb213_is_octal(_34613_b)))) {
				goto _iter_end_1b6e8d58a;
			}
		}
	_iter_next_1b6e8d58a:;
	}
	_iter_end_1b6e8d58a:;
	if (_34413_i == _33313_octal_start) {
		return _32530_lit;
	}
	_32530_lit = static_cast<jule::Str>(_32515_txt.slice(0LL,_34413_i));
	return _32530_lit;
}



inline jule::Str _212b0684a_hex_num(jule::Slice<jule::U8>& _36713_txt) {
	jule::Str _36728_lit = jule::Str();
	if ((_36713_txt.len() < 3LL)) {
		return _36728_lit;
	}
	if ((_36713_txt[0LL] != '0') || ((_36713_txt[1LL] != 'x') && (_36713_txt[1LL] != 'X'))) {
		return _36728_lit;
	}
	
	jule::I64 _37613_i = 2LL;
	_julec_label_loop:;
	for (; _37613_i < static_cast<jule::I64>(_36713_txt.len()); (_37613_i)++) {
		{
			jule::U8 _37913_b = _36713_txt[_37613_i];
			{
				
				if (_212b05a47_is_float_fmt_dotp(_36713_txt,_37613_i)) {
					_case_begin_1b6e94dcc:;
					{
						_36728_lit = _212b03baa_float_fmt_dotp(_36713_txt,_37613_i);
						return _36728_lit;
					}
				}
				else if (_212b05e87_is_float_fmt_dotfp(_36713_txt,_37613_i)) {
					_case_begin_1b6e94e54:;
					{
						_36728_lit = _212b0376a_float_fmt_dotfp(_36713_txt,_37613_i);
						return _36728_lit;
					}
				}
				else if (_212b051b7_is_float_fmt_p(_37913_b,_37613_i)) {
					_case_begin_1b6e94ecb:;
					{
						_36728_lit = _212b02e2e_float_fmt_p(_36713_txt,_37613_i);
						return _36728_lit;
					}
				}
				else if (_212b05607_is_float_fmt_dotnp(_36713_txt,_37613_i)) {
					_case_begin_1b6e95053:;
					{
						_36728_lit = _212b0332a_float_fmt_dotnp(_36713_txt,_37613_i);
						return _36728_lit;
					}
				}
				else if ((_37913_b != '_') && (!(_212aeb598_is_hex(_37913_b)))) {
					_case_begin_1b6e950ca:;
					{
						goto _iter_end_1b6e94096;
					}
				}
				_match_end_1b6e94cde:;
			}
		}
	_iter_next_1b6e94096:;
	}
	_iter_end_1b6e94096:;
	if ((_37613_i == 2LL)) {
		return _36728_lit;
	}
	_36728_lit = static_cast<jule::Str>(_36713_txt.slice(0LL,_37613_i));
	return _36728_lit;
}



inline jule::Str _212b06b9c_hex_escape(jule::Slice<jule::U8>& _40016_txt,jule::I64 _40029_n) {
	jule::Str _40039_seq = jule::Str();
	if (_40016_txt.len() < _40029_n) {
		return _40039_seq;
	}
	
	jule::I64 _40613_i = 2LL;
	for (; _40613_i < _40029_n; (_40613_i)++) {
		{
			if ((!(_212aeb598_is_hex(_40016_txt[_40613_i])))) {
				return _40039_seq;
			}
		}
	_iter_next_1b6e9442b:;
	}
	_iter_end_1b6e9442b:;
	_40039_seq=static_cast<jule::Str>(_40016_txt.slice(0LL,_40029_n));
	return _40039_seq;
}



inline jule::Str _212b070dc_big_unicode_point_escape(jule::Slice<jule::U8>& _41830_txt) {
	return _212b06b9c_hex_escape(_41830_txt,10LL);
}



inline jule::Str _212b074d8_little_unicode_point_escape(jule::Slice<jule::U8>& _42333_txt) {
	return _212b06b9c_hex_escape(_42333_txt,6LL);
}



inline jule::Str _212b0787e_hex_byte_escape(jule::Slice<jule::U8>& _42821_txt) {
	return _212b06b9c_hex_escape(_42821_txt,4LL);
}



inline jule::Str _212b07bd1_byte_escape(jule::Slice<jule::U8>& _43317_txt) {
	jule::Str _43332_seq = jule::Str();
	if ((_43317_txt.len() < 4LL)) {
		return _43332_seq;
	}
	if (((!(_212aeb213_is_octal(_43317_txt[1LL]))) || (!(_212aeb213_is_octal(_43317_txt[2LL])))) || (!(_212aeb213_is_octal(_43317_txt[3LL])))) {
		return _43332_seq;
	}
	_43332_seq = static_cast<jule::Str>(_43317_txt.slice(0LL,4LL));
	return _43332_seq;
}



inline jule::Slice<_21287ea02_Log> _212b08b05_lex(jule::Ptr<_212aed0c2_File> _83216_f) {
	if ((_83216_f == nullptr)) {
		return nullptr;
	}
	_212b08055_Lex _83713_lex = _212b08055_Lex(jule::Slice<_212ae5c02_Token>(),_83216_f,0LL,jule::I64(),-1LL,jule::Slice<_21287ea02_Log>());
	_83713_lex._method_new_line();
	_83713_lex._method_lex();
	if ((_83713_lex._field_errors.len() > 0LL)) {
		return _83713_lex._field_errors;
	}
	(*(_83216_f))._field__tokens=_83713_lex._field_tokens;
	return nullptr;
}



inline jule::Bool _2129d7396_find_module_file(jule::Slice<jule::Ptr<_211184319_DirEntry>>& _1226_dirents) {
	{
		auto &expr = _1226_dirents;
		auto it = expr.begin();
		_iter_begin_1b6ee70d8:;
		if (it != expr.end()) {
			jule::Ptr<_211184319_DirEntry> &_1b6ee7193_d = *it;
			{
				if ((!((*((*(_1b6ee7193_d))._field_stat))._method_is_dir())) && ((*(_1b6ee7193_d))._field_name == jule::Str("jule.mod", 8))) {
					return true;
				}
			}
			_iter_next_1b6ee70d8:;
			++it;
			goto _iter_begin_1b6ee70d8;
		}
		_iter_end_1b6ee70d8:;
	}
	return false;
}



inline jule::Str _2129ab17d_find_module_file_deep(jule::Str _2434_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_211184319_DirEntry>> _2617_dirents = ({
				auto except = _211184759_Directory::_static_method_read(_2434_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_1b6ee7e96;
					goto _iter_end_1b6ee7e96;
				} jule::Slice<jule::Ptr<_211184319_DirEntry>>();});
			});
			jule::Bool _3013_exist = _2129d7396_find_module_file(_2617_dirents);
			if (_3013_exist) {
				return _2434_path;
			}
			jule::I64 _3513_n = _2434_path.len();
			_2434_path=_211dd6565_dir(_2434_path);
			if (_2434_path.len() == _3513_n) {
				goto _iter_end_1b6ee7e96;
			}
		}
	_iter_next_1b6ee7e96:;
	}
	_iter_end_1b6ee7e96:;
	return jule::Str();
}



inline jule::Slice<_21287ea02_Log> _2129acb52_check_module_file(jule::Str _4626_path) {
	jule::Slice<jule::U8> _479_bytes = ({
		auto except = _211184b99_File::_static_method_read(_211dc6ce7_join(jule::Slice<jule::Str>({_4626_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_21287ea02_Log>({_21287ea02_Log(static_cast<jule::I64>(0LL),jule::I64(),jule::I64(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
			return jule::Slice<_21287ea02_Log>({_21287ea02_Log(static_cast<jule::I64>(0LL),jule::I64(),jule::I64(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
		} jule::Slice<jule::U8>();});
	});
	jule::Str _549_s = _211e25a9e_trim(static_cast<jule::Str>(_479_bytes),jule::Str(" \n\r\t\v", 5));
	if ((_549_s.len() != 0LL)) {
		return jule::Slice<_21287ea02_Log>({_21287ea02_Log(static_cast<jule::I64>(0LL),jule::I64(),jule::I64(),jule::Str(),jule::Str("module file has syntax error(s)", 31),jule::Str(),jule::Str())});
	}
	return nullptr;
}



inline jule::Ptr<_21313d9a8_FileInfo> _213188937_parse_file(jule::Ptr<_212aed0c2_File> _2223_f) {
	if ((_2223_f == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_21313d9a8_FileInfo> _2713_finf = jule::new_struct<_21313d9a8_FileInfo>(new( std::nothrow ) _21313d9a8_FileInfo());
	std::tie((*(_2713_finf))._field_ast,(*(_2713_finf))._field_errors) = _213189042_parse_fileset(_2223_f);
	if (((*(_2713_finf))._field_errors.len() > 0LL)) {
		(*(_2713_finf))._field_ast=nullptr;
	}
	return _2713_finf;
}



inline std::tuple<jule::Ptr<_2129e26e2_Ast>,jule::Slice<_21287ea02_Log>> _213189042_parse_fileset(jule::Ptr<_212aed0c2_File> _5822_f) {
	jule::Ptr<_1e767b1ba_Parser> _5913_p = jule::new_struct_ptr<_1e767b1ba_Parser>(new( std::nothrow ) _1e767b1ba_Parser());
	(*(_5913_p))._method_parse(_5822_f);
	return std::make_tuple((*(_5913_p))._field_ast,(*(_5913_p))._field_errors);
}



inline jule::Ptr<_212b1e555_ScopeTree> _1e76528ab_new_scope(void) {
	return jule::new_ptr<_212b1e555_ScopeTree>();
}



inline std::tuple<jule::Bool,jule::Bool> _1e7652a54_is_st(_212ae5c02_Token _4610_current,_212ae5c02_Token _4626_prev) {
	jule::Bool _4641_ok = jule::Bool();
	jule::Bool _4651_terminated = jule::Bool();
	_4641_ok=(_4610_current._field_id == static_cast<jule::U64>(5LLU)) || (_4626_prev._field_row < _4610_current._field_row);
	_4651_terminated=_4610_current._field_id == static_cast<jule::U64>(5LLU);
	return std::make_tuple(_4641_ok,_4651_terminated);
}



inline jule::Bool _1e7652e72_prev_is_incomplete_expr(jule::Slice<_212ae5c02_Token>& _5229_tokens,jule::I64& _5247_i) {
	if ((_5247_i > 1LL) && (_5229_tokens[(_5247_i - 2LL)]._field_id == static_cast<jule::U64>(23LLU))) {
		return false;
	}
	{
		_212ae5c02_Token* _5813_prev = (&(_5229_tokens[(_5247_i - 1LL)]));
		return ((*(_5813_prev))._field_id == static_cast<jule::U64>(20LLU)) || ((((*(_5813_prev))._field_id == static_cast<jule::U64>(7LLU)) && _212ae6a9e_is_bin_op((*(_5813_prev))._field_kind)) && ((*(_5813_prev))._field_row < _5229_tokens[_5247_i]._field_row));
	}
}



inline std::tuple<jule::I64,jule::Bool> _1e765344a_next_st_pos(jule::Slice<_212ae5c02_Token>& _6717_tokens,jule::I64 _6734_start) {
	jule::I64 _6813_brace_n = 0LL;
	jule::I64 _6913_i = _6734_start;
	for (; _6913_i < static_cast<jule::I64>(_6717_tokens.len()); (_6913_i)++) {
		{
			jule::Bool _7117_ok = false;
			jule::Bool _7217_terminated = false;
			_212ae5c02_Token _7313_tok = _6717_tokens[_6913_i];
			{
				auto &_match_expr{ _7313_tok._field_id };
				
				if (_match_expr == static_cast<jule::U64>(3LLU)) {
					_case_begin_1b740687c:;
					{
						{
							auto &_match_expr{ _7313_tok._field_kind };
							
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_1b74088e5:;
								{
									if ((_6813_brace_n == 0LL) && (_6913_i > _6734_start)) {
										if ((!(_1e7652e72_prev_is_incomplete_expr(_6717_tokens,_6913_i)))) {
											std::tie(_7117_ok,_7217_terminated) = _1e7652a54_is_st(_7313_tok,_6717_tokens[(_6913_i - 1LL)]);
											if (_7117_ok) {
												goto _julec_label_return;
											}
										}
									}
									(_6813_brace_n)++;
								}
							}
							else {
								_case_begin_1b7406a14:;
								{
									(_6813_brace_n)--;
									if ((_6813_brace_n == 0LL) && ((_6913_i + 1LL) < static_cast<jule::I64>(_6717_tokens.len()))) {
										std::tie(_7117_ok,_7217_terminated) = _1e7652a54_is_st(_6717_tokens[(_6913_i + 1LL)],_7313_tok);
										if (_7117_ok) {
											(_6913_i)++;
											goto _julec_label_return;
										}
									}
								}
							}
							_match_end_1b7407130:;
						}
						goto _iter_next_1b740534d;
					}
				}
				_match_end_1b74066b2:;
			}
			if ((_6813_brace_n != 0LL)) {
				goto _iter_next_1b740534d;
			}
			if (_6913_i > _6734_start) {
				if (_1e7652e72_prev_is_incomplete_expr(_6717_tokens,_6913_i)) {
					goto _iter_next_1b740534d;
				}
				std::tie(_7117_ok,_7217_terminated) = _1e7652a54_is_st(_7313_tok,_6717_tokens[(_6913_i - 1LL)]);
			} else {
				std::tie(_7117_ok,_7217_terminated) = _1e7652a54_is_st(_7313_tok,_7313_tok);
			}
			if ((!(_7117_ok))) {
				goto _iter_next_1b740534d;
			}
			_julec_label_return:;
			if (_7217_terminated) {
				(_6913_i)++;
			}
			return std::make_tuple(_6913_i,_7217_terminated);
		}
	_iter_next_1b740534d:;
	}
	_iter_end_1b740534d:;
	return std::make_tuple(_6913_i,false);
}



inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::Bool> _1e76538ce_skip_st(jule::I64& _12917_i,jule::Slice<_212ae5c02_Token> _12929_tokens) {
	jule::I64 _1309_start = _12917_i;
	jule::Bool _13113_terminated = false;
	std::tie(_12917_i,_13113_terminated) = _1e765344a_next_st_pos(_12929_tokens,_1309_start);
	jule::Slice<_212ae5c02_Token> _13313_st_tokens = _12929_tokens.slice(_1309_start,_12917_i);
	if (_13113_terminated) {
		if ((_13313_st_tokens.len() == 1LL)) {
			std::tie(_13313_st_tokens,_13113_terminated) = _1e76538ce_skip_st(_12917_i,_12929_tokens);
			return std::make_tuple(_13313_st_tokens,_13113_terminated);
		}
		_13313_st_tokens=_13313_st_tokens.slice(0LL,(_13313_st_tokens.len() - 1LL));
	}
	return std::make_tuple(_13313_st_tokens,_13113_terminated);
}



inline jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _1e76544e5_split_stmts(jule::Slice<_212ae5c02_Token>& _15121_tokens) {
	jule::Slice<jule::Ptr<_1e7653d74_Stmt>> _15213_stmts = nullptr;
	jule::I64 _15313_pos = 0LL;
	while (_15313_pos < static_cast<jule::I64>(_15121_tokens.len())) {
		{
			jule::Slice<_212ae5c02_Token> _15518_stmt;
			jule::Bool _15524_terminated;
			std::tie(_15518_stmt,_15524_terminated) = _1e76538ce_skip_st(_15313_pos,_15121_tokens);
			_15213_stmts = jule::alloc_for_append(_15213_stmts,1);_15213_stmts.__push(jule::new_struct<_1e7653d74_Stmt>(new( std::nothrow ) _1e7653d74_Stmt(_15518_stmt,_15524_terminated)));
		}
	_iter_next_1b7410ad9:;
	}
	_iter_end_1b7410ad9:;
	return _15213_stmts;
}



inline jule::Ptr<_1e7665407_CallData> _1e7665a67_get_call_data(jule::Slice<_212ae5c02_Token>& _4523_tokens) {
	jule::Ptr<_1e7665407_CallData> _4613_data = jule::new_struct<_1e7665407_CallData>(new( std::nothrow ) _1e7665407_CallData());
	std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_args_tokens) = _1e767898c_range_last(_4523_tokens);
	if (((*(_4613_data))._field_expr_tokens.len() == 0LL)) {
		return _4613_data;
	}
	_212ae5c02_Token _539_token = (*(_4613_data))._field_expr_tokens[((*(_4613_data))._field_expr_tokens.len() - 1LL)];
	if ((_539_token._field_id == static_cast<jule::U64>(3LLU)) && (_539_token._field_kind == jule::Str("]", 1))) {
		std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_generics_tokens) = _1e767898c_range_last((*(_4613_data))._field_expr_tokens);
	}
	return _4613_data;
}



inline jule::Slice<_212ae5c02_Token> _1e7665dca_get_block_expr(jule::Slice<_212ae5c02_Token>& _6124_tokens) {
	jule::I64 _6213_brace_n = 0LL;
	jule::I64 _6313_skip_to_next_brace_close = 0LL;
	{
		auto &expr = _6124_tokens;
		auto it = expr.begin();
		_iter_begin_1b741799d:;
		if (it != expr.end()) {
			jule::I64 _1b7417a58_i = it - expr.begin();
			_212ae5c02_Token _1b7417cab_tok = *it;
			{
				{
					auto &_match_expr{ _1b7417cab_tok._field_id };
					
					if (_match_expr == static_cast<jule::U64>(16LLU) || _match_expr == static_cast<jule::U64>(17LLU) || _match_expr == static_cast<jule::U64>(35LLU)) {
						_case_begin_1b7418592:;
						{
							(_6313_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == static_cast<jule::U64>(3LLU)) {
						_case_begin_1b7418619:;
						{
							{
								auto &_match_expr{ _1b7417cab_tok._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_1b74199a0:;
									{
										if ((_6213_brace_n > 0LL) || (_6313_skip_to_next_brace_close > 0LL)) {
											if ((_6313_skip_to_next_brace_close > 0LL)) {
												(_6313_skip_to_next_brace_close)--;
											}
											(_6213_brace_n)++;
											goto _match_end_1b741962b;
										}
										return _6124_tokens.slice(0LL,_1b7417a58_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_1b7419be2:;
									{
										(_6213_brace_n)++;
									}
								}
								else {
									_case_begin_1b74187d4:;
									{
										(_6213_brace_n)--;
									}
								}
								_match_end_1b741962b:;
							}
						}
					}
					_match_end_1b7418372:;
				}
			}
			_iter_next_1b741799d:;
			++it;
			_1b7417a58_i++;
			goto _iter_begin_1b741799d;
		}
		_iter_end_1b741799d:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::Slice<_212ae5c02_Token>> _1e76662d7_split_colon(jule::Slice<_212ae5c02_Token>& _9521_tokens) {
	jule::I64 _9613_range_n = 0LL;
	{
		auto &expr = _9521_tokens;
		auto it = expr.begin();
		_iter_begin_1b741ae79:;
		if (it != expr.end()) {
			jule::I64 _1b7419e12_i = it - expr.begin();
			_212ae5c02_Token _1b7417eed_token = *it;
			{
				{
					auto &_match_expr{ _1b7417eed_token._field_id };
					
					if (_match_expr == static_cast<jule::U64>(3LLU)) {
						_case_begin_1b741ba6d:;
						{
							{
								auto &_match_expr{ _1b7417eed_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_1b741c9a3:;
									{
										(_9613_range_n)++;
										goto _iter_next_1b741ae79;
									}
								}
								else {
									_case_begin_1b741bc8d:;
									{
										(_9613_range_n)--;
									}
								}
								_match_end_1b741c3a9:;
							}
						}
					}
					else if (_match_expr == static_cast<jule::U64>(11LLU)) {
						_case_begin_1b741bae5:;
						{
							if ((_9613_range_n < 1LL)) {
								jule::Slice<_212ae5c02_Token> _11325_l = _9521_tokens.slice(0LL,_1b7419e12_i);
								jule::Slice<_212ae5c02_Token> _11425_r = _9521_tokens.slice((_1b7419e12_i + 1LL));
								return std::make_tuple(_11325_l,_11425_r);
							}
						}
					}
					_match_end_1b741ba07:;
				}
			}
			_iter_next_1b741ae79:;
			++it;
			_1b7419e12_i++;
			goto _iter_begin_1b741ae79;
		}
		_iter_end_1b741ae79:;
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_212ae5c02_Token> _1e766676b_eliminate_comments(jule::Slice<_212ae5c02_Token>& _12228_tokens) {
	jule::Slice<_212ae5c02_Token> _12313_cutted = nullptr;
	{
		auto &expr = _12228_tokens;
		auto it = expr.begin();
		_iter_begin_1b741e499:;
		if (it != expr.end()) {
			_212ae5c02_Token _1b741e4ee_token = *it;
			{
				if (_1b741e4ee_token._field_id != static_cast<jule::U64>(18LLU)) {
					_12313_cutted = jule::alloc_for_append(_12313_cutted,1);_12313_cutted.__push(_1b741e4ee_token);
				}
			}
			_iter_next_1b741e499:;
			++it;
			goto _iter_begin_1b741e499;
		}
		_iter_end_1b741e499:;
	}
	return _12313_cutted;
}



inline jule::I64 _1e76669e1_find_lowest_prec_op(jule::Slice<_212ae5c02_Token>& _13425_tokens) {
	jule::U8 _13913_prec = 255LLU;
	jule::I64 _14013_prec_pos = -1LL;
	jule::I64 _14213_brace_n = 0LL;
	jule::Bool _14313_skip_to_next_brace_open = false;
	{
		auto &expr = _13425_tokens;
		auto it = expr.begin();
		_iter_begin_1b7421424:;
		if (it != expr.end()) {
			jule::I64 _1b74214bd_i = it - expr.begin();
			_212ae5c02_Token &_1b7421721_token = *it;
			{
				{
					
					if (_1b7421721_token._field_id == static_cast<jule::U64>(3LLU)) {
						_case_begin_1b7421ed5:;
						{
							{
								auto &_match_expr{ _1b7421721_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_1b74233e3:;
									{
										_14313_skip_to_next_brace_open=false;
										goto _case_begin_1b7423459;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_1b7423459:;
									{
										(_14213_brace_n)++;
									}
								}
								else {
									_case_begin_1b7422bea:;
									{
										(_14213_brace_n)--;
									}
								}
								_match_end_1b7422d1b:;
							}
							goto _iter_next_1b7421424;
						}
					}
					else if (_14313_skip_to_next_brace_open) {
						_case_begin_1b742205c:;
						{
							goto _iter_next_1b7421424;
						}
					}
					else if (_1b7421721_token._field_id == static_cast<jule::U64>(16LLU)) {
						_case_begin_1b74220d4:;
						{
							_14313_skip_to_next_brace_open=true;
							goto _iter_next_1b7421424;
						}
					}
					else if ((_1b74214bd_i == 0LL)) {
						_case_begin_1b742215b:;
						{
							goto _iter_next_1b7421424;
						}
					}
					else if (_1b7421721_token._field_id != static_cast<jule::U64>(7LLU)) {
						_case_begin_1b74221d3:;
						{
							goto _iter_next_1b7421424;
						}
					}
					else if ((_14213_brace_n > 0LL)) {
						_case_begin_1b742225a:;
						{
							goto _iter_next_1b7421424;
						}
					}
					_match_end_1b7421d92:;
				}
				_212ae5c02_Token _17113_left = _13425_tokens[(_1b74214bd_i - 1LL)];
				if ((_17113_left._field_id == static_cast<jule::U64>(7LLU)) || (_17113_left._field_id == static_cast<jule::U64>(11LLU))) {
					goto _iter_next_1b7421424;
				}
				if (((_1b74214bd_i > 1LL) && (_17113_left._field_id == static_cast<jule::U64>(3LLU))) && (_17113_left._field_kind == jule::Str("]", 1))) {
					_212ae5c02_Token _17917_lleft = _13425_tokens[(_1b74214bd_i - 2LL)];
					if ((_17917_lleft._field_id == static_cast<jule::U64>(3LLU)) && (_17917_lleft._field_kind == jule::Str("[", 1))) {
						if ((_1b7421721_token._field_kind == jule::Str("&", 1)) || (_1b7421721_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_1b7421424;
						}
					}
				}
				jule::U8 _18813_p = _1b7421721_token._method_prec();
				if ((_18813_p != 0LLU) && (_18813_p <= _13913_prec)) {
					_13913_prec=_18813_p;
					_14013_prec_pos=_1b74214bd_i;
				}
			}
			_iter_next_1b7421424:;
			++it;
			_1b74214bd_i++;
			goto _iter_begin_1b7421424;
		}
		_iter_end_1b7421424:;
	}
	return _14013_prec_pos;
}



inline jule::Ptr<_212b17c02_IdentExpr> _1e7666e42_build_ident_expr(_212ae5c02_Token& _19826_token) {
	return jule::new_struct<_212b17c02_IdentExpr>(new( std::nothrow ) _212b17c02_IdentExpr(_19826_token,_19826_token._field_kind,false));
}



inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::I64> _1e766720b_get_range_expr_tokens(jule::Slice<_212ae5c02_Token>& _20631_tokens) {
	jule::I64 _20713_range_n = 0LL;
	jule::I64 _20813_i = (_20631_tokens.len() - 1LL);
	for (; (_20813_i >= 0LL); (_20813_i)--) {
		{
			_212ae5c02_Token _21013_tok = _20631_tokens[_20813_i];
			if (_21013_tok._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _21013_tok._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_1b742bbc1:;
						{
							(_20713_range_n)++;
						}
					}
					else {
						_case_begin_1b742b3b8:;
						{
							(_20713_range_n)--;
						}
					}
					_match_end_1b742b440:;
				}
			}
			if ((_20713_range_n == 0LL)) {
				return std::make_tuple(_20631_tokens.slice(0LL,_20813_i),_20713_range_n);
			}
		}
	_iter_next_1b7419780:;
	}
	_iter_end_1b7419780:;
	return std::make_tuple(nullptr,_20713_range_n);
}



inline jule::Bool _1e7676a89_check_assign_tokens(jule::Slice<_212ae5c02_Token>& _1625_tokens) {
	if ((_1625_tokens.len() == 0LL) || (!(_212aeb92d_is_assign(_1625_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::I64 _2113_brace_n = 0LL;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_1b742dbd4:;
		if (it != expr.end()) {
			_212ae5c02_Token &_1b742dc7d_t = *it;
			{
				if (_1b742dc7d_t._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b742dc7d_t._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b742ee9e:;
							{
								(_2113_brace_n)++;
							}
						}
						else {
							_case_begin_1b742e696:;
							{
								(_2113_brace_n)--;
							}
						}
						_match_end_1b742e71d:;
					}
				}
				if ((_2113_brace_n < 0LL)) {
					return false;
				} else if ((_2113_brace_n > 0LL)) {
					goto _iter_next_1b742dbd4;
				} else if ((_1b742dc7d_t._field_id == static_cast<jule::U64>(7LLU)) && _212aec18c_is_assign_op(_1b742dc7d_t._field_kind)) {
					return true;
				}
			}
			_iter_next_1b742dbd4:;
			++it;
			goto _iter_begin_1b742dbd4;
		}
		_iter_end_1b742dbd4:;
	}
	return false;
}



inline _21287ea02_Log _1e7677c11_make_err(jule::I64 _5113_row,jule::I64 _5123_col,jule::Ptr<_212aed0c2_File>& _5134_f,jule::Str _5144_fmt,jule::Slice<jule::Any> _5157_args) {
	return _21287ea02_Log(static_cast<jule::I64>(1LL),_5113_row,_5123_col,(*(_5134_f))._method_path(),_212880739_logf(_5144_fmt,_5157_args),jule::Str(),jule::Str());
}



inline jule::Slice<_212ae5c02_Token> _1e767874a_range(jule::I64& _7015_i,jule::Str _7023_open,jule::Str _7040_close,jule::Slice<_212ae5c02_Token>& _7063_tokens) {
	if (_7015_i >= static_cast<jule::I64>(_7063_tokens.len())) {
		return nullptr;
	}
	_212ae5c02_Token _759_tok = _7063_tokens[_7015_i];
	if ((_759_tok._field_id != static_cast<jule::U64>(3LLU)) || (_759_tok._field_kind != _7023_open)) {
		return nullptr;
	}
	(_7015_i)++;
	jule::I64 _8113_range_n = 1LL;
	jule::I64 _829_start = _7015_i;
	for (; (_8113_range_n != 0LL) && (_7015_i < static_cast<jule::I64>(_7063_tokens.len())); (_7015_i)++) {
		{
			_212ae5c02_Token _8413_token = _7063_tokens[_7015_i];
			if (_8413_token._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _8413_token._field_kind };
					
					if (_match_expr == _7023_open) {
						_case_begin_1b7435c96:;
						{
							(_8113_range_n)++;
						}
					}
					else if (_match_expr == _7040_close) {
						_case_begin_1b7435d1d:;
						{
							(_8113_range_n)--;
						}
					}
					_match_end_1b7435a76:;
				}
			}
		}
	_iter_next_1b7434c62:;
	}
	_iter_end_1b7434c62:;
	return _7063_tokens.slice(_829_start,(_7015_i - 1LL));
}



inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::Slice<_212ae5c02_Token>> _1e767898c_range_last(jule::Slice<_212ae5c02_Token>& _10320_tokens) {
	jule::Slice<_212ae5c02_Token> _10339_cutted = jule::Slice<_212ae5c02_Token>();
	jule::Slice<_212ae5c02_Token> _10356_cut = jule::Slice<_212ae5c02_Token>();
	if ((_10320_tokens.len() == 0LL)) {
		_10339_cutted = _10320_tokens;
		_10356_cut = nullptr;
		return std::make_tuple(_10339_cutted,_10356_cut);
	} else if (_10320_tokens[(_10320_tokens.len() - 1LL)]._field_id != static_cast<jule::U64>(3LLU)) {
		_10339_cutted = _10320_tokens;
		_10356_cut = nullptr;
		return std::make_tuple(_10339_cutted,_10356_cut);
	}
	jule::I64 _11013_brace_n = 0LL;
	jule::I64 _11113_i = (_10320_tokens.len() - 1LL);
	for (; (_11113_i >= 0LL); (_11113_i)--) {
		{
			_212ae5c02_Token _11313_token = _10320_tokens[_11113_i];
			if (_11313_token._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _11313_token._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_1b743a5d6:;
						{
							(_11013_brace_n)++;
							goto _iter_next_1b7438c88;
						}
					}
					else {
						_case_begin_1b7439ccd:;
						{
							(_11013_brace_n)--;
						}
					}
					_match_end_1b7439d55:;
				}
			}
			if ((_11013_brace_n == 0LL)) {
				_10339_cutted = _10320_tokens.slice(0LL,_11113_i);
				_10356_cut = _10320_tokens.slice(_11113_i);
				return std::make_tuple(_10339_cutted,_10356_cut);
			}
		}
	_iter_next_1b7438c88:;
	}
	_iter_end_1b7438c88:;
	_10339_cutted = _10320_tokens;
	_10356_cut = nullptr;
	return std::make_tuple(_10339_cutted,_10356_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_212ae5c02_Token>>,jule::Slice<_21287ea02_Log>> _1e76797b2_parts(jule::Slice<_212ae5c02_Token>& _14115_tokens,jule::U64 _14132_id,jule::Bool _14145_expr_must) {
	if ((_14115_tokens.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_212ae5c02_Token>> _14613_parts = nullptr;
	jule::Slice<_21287ea02_Log> _14713_errors = nullptr;
	jule::I64 _14913_range_n = 0LL;
	jule::I64 _15013_last = 0LL;
	{
		auto &expr = _14115_tokens;
		auto it = expr.begin();
		_iter_begin_1b743d430:;
		if (it != expr.end()) {
			jule::I64 _1b743d61c_i = it - expr.begin();
			_212ae5c02_Token _1b743d83c_token = *it;
			{
				if (_1b743d83c_token._field_id == static_cast<jule::U64>(3LLU)) {
					{
						auto &_match_expr{ _1b743d83c_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_1b743ea6e:;
							{
								(_14913_range_n)++;
								goto _iter_next_1b743d430;
							}
						}
						else {
							_case_begin_1b743e266:;
							{
								(_14913_range_n)--;
							}
						}
						_match_end_1b743e2dd:;
					}
				}
				if ((_14913_range_n > 0LL)) {
					goto _iter_next_1b743d430;
				}
				if (_1b743d83c_token._field_id == _14132_id) {
					if (_14145_expr_must && ((_1b743d61c_i - _15013_last) <= 0LL)) {
						_21287ea02_Log _17021_err = _1e7677c11_make_err(_1b743d83c_token._field_row,_1b743d83c_token._field_column,_1b743d83c_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
						_14713_errors = jule::alloc_for_append(_14713_errors,1);_14713_errors.__push(_17021_err);
					}
					_14613_parts = jule::alloc_for_append(_14613_parts,1);_14613_parts.__push(_14115_tokens.slice(_15013_last,_1b743d61c_i));
					_15013_last=static_cast<jule::I64>((_1b743d61c_i + 1LL));
				}
			}
			_iter_next_1b743d430:;
			++it;
			_1b743d61c_i++;
			goto _iter_begin_1b743d430;
		}
		_iter_end_1b743d430:;
	}
	if (_15013_last < static_cast<jule::I64>(_14115_tokens.len())) {
		_14613_parts = jule::alloc_for_append(_14613_parts,1);_14613_parts.__push(_14115_tokens.slice(_15013_last));
	} else if ((!(_14145_expr_must))) {
		_14613_parts = jule::alloc_for_append(_14613_parts,1);_14613_parts.__push(jule::Slice<_212ae5c02_Token>());
	}
	return std::make_tuple(_14613_parts,_14713_errors);
}



inline jule::Str _1e7679c57_get_close_kind_of_brace(jule::Str _18728_left) {
	{
		auto &_match_expr{ _18728_left };
		
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_1b7443820:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_1b744390d:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_1b7443974:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_1b743d540:;
			{
				return jule::Str();
			}
		}
		_match_end_1b744339c:;
	}
}



inline _21287ea02_Log _1e7679ecc_compiler_err(_212ae5c02_Token& _19618_token,jule::Str& _19633_fmt,jule::Slice<jule::Any> _19646_args) {
	return _21287ea02_Log(static_cast<jule::I64>(1LL),_19618_token._field_row,_19618_token._field_column,(*(_19618_token._field_file))._method_path(),_212880739_logf(_19633_fmt,_19646_args),(*(_19618_token._field_file))._method_get_row(_19618_token._field_row),jule::Str());
}



inline void _1e767a4d8_push_suggestion(_21287ea02_Log* _20731_log,jule::Str _20742_fmt,jule::Slice<jule::Any> _20755_args) {
	(*(_20731_log))._field_suggestion=_212880739_logf(_20742_fmt,_20755_args);
}



inline jule::Ptr<_2129e34b2_Comment> _1e767aa9e_build_comment(_212ae5c02_Token& _21123_token) {
	_21123_token._field_kind=_211e25a9e_trim(_21123_token._field_kind.slice(2LL),jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_2129e34b2_Comment>(new( std::nothrow ) _2129e34b2_Comment(_21123_token,_21123_token._field_kind));
}



inline jule::Str _1e767ad68_tokstoa(jule::Slice<_212ae5c02_Token>& _22013_tokens) {
	jule::Str _22113_s = jule::Str();
	{
		auto &expr = _22013_tokens;
		auto it = expr.begin();
		_iter_begin_1b7447a66:;
		if (it != expr.end()) {
			_212ae5c02_Token &_1b7447b87_token = *it;
			{
				_22113_s+=_1b7447b87_token._field_kind;
			}
			_iter_next_1b7447a66:;
			++it;
			goto _iter_begin_1b7447a66;
		}
		_iter_end_1b7447a66:;
	}
	return _22113_s;
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e7692456_build_void_type(void) {
	return jule::new_ptr<_2129e3d42_TypeDecl>();
}



inline jule::Ptr<_2129e3d42_TypeDecl> _1e76925ee_build_prim_type(_212ae5c02_Token _2224_t) {
	return jule::new_struct<_2129e3d42_TypeDecl>(new( std::nothrow ) _2129e3d42_TypeDecl(_2224_t,jule::Any(jule::new_struct<_2129908e3_IdentTypeDecl>(new( std::nothrow ) _2129908e3_IdentTypeDecl(_2224_t,_2224_t._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_2129e3d42_TypeDecl>>())))));
}



inline std::tuple<jule::Slice<_212ae5c02_Token>,jule::I64> _1e76928b8_split_map_range(jule::Slice<_212ae5c02_Token>& _3525_tokens,jule::I64& _3547_i) {
	jule::Slice<_212ae5c02_Token> _3557_range_tokens = jule::Slice<_212ae5c02_Token>();
	jule::I64 _3580_colon = jule::I64();
	_3580_colon=-1LL;
	jule::I64 _3713_range_n = 0LL;
	jule::I64 _389_start = _3547_i;
	for (; _3547_i < static_cast<jule::I64>(_3525_tokens.len()); (_3547_i)++) {
		{
			_212ae5c02_Token _4013_token = _3525_tokens[_3547_i];
			if (_4013_token._field_id == static_cast<jule::U64>(3LLU)) {
				{
					auto &_match_expr{ _4013_token._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_1b744b54d:;
						{
							(_3713_range_n)++;
							goto _iter_next_1b7449925;
						}
					}
					else {
						_case_begin_1b744ac45:;
						{
							(_3713_range_n)--;
						}
					}
					_match_end_1b744acbc:;
				}
			}
			if ((_3713_range_n == 0LL)) {
				if ((_389_start + 1LL) > _3547_i) {
					return std::make_tuple(_3557_range_tokens,_3580_colon);
				}
				_3557_range_tokens=_3525_tokens.slice((_389_start + 1LL),_3547_i);
				goto _iter_end_1b7449925;
			} else if ((_3713_range_n != 1LL)) {
				goto _iter_next_1b7449925;
			}
			if ((_3580_colon == -1LL) && (_4013_token._field_id == static_cast<jule::U64>(11LLU))) {
				_3580_colon=static_cast<jule::I64>((static_cast<jule::I64>(_3547_i - _389_start) - 1LL));
			}
		}
	_iter_next_1b7449925:;
	}
	_iter_end_1b7449925:;
	return std::make_tuple(_3557_range_tokens,_3580_colon);
}



inline jule::I64 _1ce3852c7_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::I64>(64LL - static_cast<jule::I64>(_1ce431a6b_len64(_6124_x)));
}



inline jule::I64 _1ce4284e1_trailing_zeros(jule::U64 _8323_x) {
	
	return static_cast<jule::I64>(_1ce4295ad_trailing_zeros64(static_cast<jule::U64>(static_cast<jule::U64>(_8323_x))));
}



inline jule::I64 _1ce429206_trailing_zeros32(jule::U32 _10525_x) {
	if ((_10525_x == 0LLU)) {
		return 32LL;
	}
	return static_cast<jule::I64>(static_cast<jule::I64>(_1ce427ee6_DE_BRUIJN32_TAB[static_cast<jule::I64>((((_10525_x & static_cast<jule::U32>((-(_10525_x)))) * 125613361LLU) >> 27LLU))]));
}



inline jule::I64 _1ce4295ad_trailing_zeros64(jule::U64 _11425_x) {
	if ((_11425_x == 0LLU)) {
		return 64LL;
	}
	return static_cast<jule::I64>(static_cast<jule::I64>(_1ce4282d2_DE_BRUIJN64_TAB[static_cast<jule::I64>((((_11425_x & static_cast<jule::U64>((-(_11425_x)))) * 285870213051353865LLU) >> 58LLU))]));
}



inline jule::I64 _1ce4316a3_len32(jule::U32 _35218_x) {
	jule::I64 _35228_n = jule::I64();
	if ((_35218_x >= 65536LLU)) {
		_35218_x>>=16LLU;
		_35228_n=16LL;
	}
	if ((_35218_x >= 256LLU)) {
		_35218_x>>=8LLU;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::I64>(_35228_n + static_cast<jule::I64>(static_cast<jule::I64>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::I64>(_35218_x)])));
	return _35228_n;
}



inline jule::I64 _1ce431a6b_len64(jule::U64 _36618_x) {
	jule::I64 _36628_n = jule::I64();
	if ((_36618_x >= 4294967296LLU)) {
		_36618_x>>=32LLU;
		_36628_n=32LL;
	}
	if ((_36618_x >= 65536LLU)) {
		_36618_x>>=16LLU;
		_36628_n+=16LL;
	}
	if ((_36618_x >= 256LLU)) {
		_36618_x>>=8LLU;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::I64>(_36628_n + static_cast<jule::I64>(static_cast<jule::I64>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::I64>(_36618_x)])));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _1ce4327a3_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>(static_cast<jule::U64>(_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(_41514_x & _41522_y) | static_cast<jule::U64>(static_cast<jule::U64>(_41514_x | _41522_y) & static_cast<jule::U64>((~(_41544_sum))))) >> 63LLU));
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _1ce435388_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	
	jule::U64 _5019_x0 = (_49914_x & 4294967295LLU);
	jule::U64 _5029_x1 = (_49914_x >> 32LLU);
	jule::U64 _5039_y0 = (_49922_y & 4294967295LLU);
	jule::U64 _5049_y1 = (_49922_y >> 32LLU);
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + static_cast<jule::U64>((_5059_w0 >> 32LLU));
	jule::U64 _50713_w1 = (_5069_t & 4294967295LLU);
	jule::U64 _5089_w2 = (_5069_t >> 32LLU);
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_5029_x1 * _5049_y1) + _5089_w2) + static_cast<jule::U64>((_50713_w1 >> 32LLU)));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _1cdda1761_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _1cdda1909_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _1ce36862e_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _1ce3687c7_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline std::tuple<jule::F64,jule::I64> _1ce37a94e_frexp(jule::F64 _4718_f) {
	jule::F64 _4728_frac = jule::F64();
	jule::I64 _4739_exp = jule::I64();
	{
		
		if ((_4718_f == 0LL)) {
			_case_begin_1b75681a3:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		else if (_1ce40bd98_is_inf(_4718_f,0LL) || _1ce401e8c_is_nan(_4718_f)) {
			_case_begin_1b756822a:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		_match_end_1b75680a4:;
	}
	std::tie(_4718_f,_4739_exp) = _1ce39b8e8_normalize(_4718_f);
	jule::U64 _5613_x = _1ce36862e_f64_bits(_4718_f);
	_4739_exp+=static_cast<jule::I64>((static_cast<jule::I64>((static_cast<jule::I64>(static_cast<jule::I64>(((_5613_x >> 52LLU) & 2047LLU))) - 1023LL)) + 1LL));
	_5613_x=static_cast<jule::U64>((_5613_x & 9227875636482146303LLU));
	_5613_x|=4602678819172646912LLU;
	_4728_frac=static_cast<jule::F64>(_1ce3687c7_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F64 _1ce3bc4a7_nan(void) {
	return static_cast<jule::F64>(_1ce3687c7_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _1ce401e8c_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _1ce406821_inf(jule::I64 _6112_sign) {
	if ((_6112_sign >= 0LL)) {
		return static_cast<jule::F64>(_1ce3687c7_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_1ce3687c7_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _1ce40bd98_is_inf(jule::F64 _7215_f,jule::I64 _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline std::tuple<jule::F64,jule::I64> _1ce39b8e8_normalize(jule::F64 _8214_x) {
	jule::F64 _8224_y = jule::F64();
	jule::I64 _8232_exp = jule::I64();
	
	if ((_1ce3896a5_abs(_8214_x) < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)) {
		_8224_y = static_cast<jule::F64>((_8214_x * 4503599627370496LL));
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	}
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline jule::F64 _1ce41ccbb_log(jule::F64 _11112_x) {
	
	
	
	
	
	
	
	
	
	{
		
		if (_1ce401e8c_is_nan(_11112_x) || _1ce40bd98_is_inf(_11112_x,1LL)) {
			_case_begin_1b75b8a2d:;
			{
				return _11112_x;
			}
		}
		else if ((_11112_x < 0LL)) {
			_case_begin_1b75b8aa5:;
			{
				return static_cast<jule::F64>(_1ce3bc4a7_nan());
			}
		}
		else if ((_11112_x == 0LL)) {
			_case_begin_1b75b8b2c:;
			{
				return static_cast<jule::F64>(_1ce406821_inf(-1LL));
			}
		}
		_match_end_1b75b8962:;
	}
	jule::F64 _13314_f1;
	jule::I64 _13322_ki;
	std::tie(_13314_f1,_13322_ki) = _1ce37a94e_frexp(_11112_x);
	if ((_13314_f1 < 0.7071067811865476)) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	}
	jule::F64 _1389_f = (_13314_f1 - 1LL);
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);
	jule::F64 _1429_s = jule::div(_1389_f,static_cast<jule::F64>(2LL + _1389_f));
	jule::F64 _1439_s2 = _1429_s * _1429_s;
	jule::F64 _1449_s4 = _1439_s2 * _1439_s2;
	jule::F64 _1459_t1 = _1439_s2 * static_cast<jule::F64>(0.6666666666666735 + static_cast<jule::F64>(_1449_s4 * static_cast<jule::F64>(0.2857142874366239 + static_cast<jule::F64>(_1449_s4 * static_cast<jule::F64>(0.1818357216161805 + static_cast<jule::F64>((_1449_s4 * 0.14798198605116586)))))));
	jule::F64 _1469_t2 = _1449_s4 * static_cast<jule::F64>(0.3999999999940942 + static_cast<jule::F64>(_1449_s4 * static_cast<jule::F64>(0.22222198432149784 + static_cast<jule::F64>((_1449_s4 * 0.15313837699209373)))));
	jule::F64 _1479_R = _1459_t1 + _1469_t2;
	jule::F64 _1489_hfsq = (0.5 * _1389_f) * _1389_f;
	return static_cast<jule::F64>(static_cast<jule::F64>((_1399_k * 0.6931471803691238)) - static_cast<jule::F64>(static_cast<jule::F64>(_1489_hfsq - static_cast<jule::F64>(static_cast<jule::F64>(_1429_s * static_cast<jule::F64>(_1489_hfsq + _1479_R)) + static_cast<jule::F64>((_1399_k * 0.00000000019082149292705877)))) - _1389_f));
}



inline jule::F64 _1ce3896a5_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_1ce3687c7_f64_from_bits(static_cast<jule::U64>((static_cast<jule::U64>(_1ce36862e_f64_bits(_4312_x)) & 9223372036854775807LLU))));
}



inline std::tuple<jule::F64,jule::F64> _1ce439634_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	
	jule::F64 _469_abs_f = _1ce3896a5_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if ((_469_abs_f > 4503599627370496LL)) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>((_469_abs_f + 4503599627370496LL));
		_4713_i-=4503599627370496LL;
		while (_4713_i > _469_abs_f) {
			{
				(_4713_i)--;
			}
		_iter_next_1b62c7d04:;
		}
		_iter_end_1b62c7d04:;
		if ((_4413_f < 0LL)) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _1ce439b2e_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;
	jule::I64 _4516_exp;
	std::tie(_4510_frac,_4516_exp) = _1ce37a94e_frexp(_4413_x);
	if ((_4510_frac == 0.5)) {
		return static_cast<jule::F64>(static_cast<jule::F64>((_4516_exp - 1LL)));
	}
	return static_cast<jule::F64>(static_cast<jule::F64>((static_cast<jule::F64>(_1ce41ccbb_log(_4510_frac)) * 1.4426950408889634)) + static_cast<jule::F64>(static_cast<jule::F64>(_4516_exp)));
}



inline jule::Str _1cdda3961_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::I64 _7837_prec,jule::I64 _7848_bit_size) {
	return static_cast<jule::Str>(_1cde2c2e2_generic_ftoa(jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_1ce0950e7_max(static_cast<jule::I64>((_7837_prec + 4LL)),24LL))),_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _1cde2c2e2_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::I64 _8259_prec,jule::I64 _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	jule::Ptr<_1ce045d56_FloatInfo> _8413_flt = nullptr;
	{
		auto &_match_expr{ _8270_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_1b79bc45e:;
			{
				_8313_bits=static_cast<jule::U64>(static_cast<jule::U64>(_1cdda1761_f32_bits(static_cast<jule::F32>(static_cast<jule::F32>(_8234_val)))));
				_8413_flt=((jule::Ptr<_1ce045d56_FloatInfo>)((&(_1cde447e3_F32_INFO))));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1b79bc2a5:;
			{
				_8313_bits=static_cast<jule::U64>(_1ce36862e_f64_bits(_8234_val));
				_8413_flt=((jule::Ptr<_1ce045d56_FloatInfo>)((&(_1cde619db_F64_INFO))));
			}
		}
		else {
			_case_begin_1b79bbd76:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_1b79bbd21:;
	}
	jule::Bool _969_neg = ((_8313_bits >> static_cast<jule::U64>((*(_8413_flt))._field_expbits + (*(_8413_flt))._field_mantbits)) != 0LLU);
	jule::I64 _9713_exp = static_cast<jule::I64>(_8313_bits >> (*(_8413_flt))._field_mantbits) & static_cast<jule::I64>(static_cast<jule::I64>(((1LL << (*(_8413_flt))._field_expbits) - 1LL)));
	jule::U64 _9813_mant = _8313_bits & static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits) - 1LLU));
	{
		auto &_match_expr{ _9713_exp };
		
		if (_match_expr == static_cast<jule::I64>(((1LL << (*(_8413_flt))._field_expbits) - 1LL))) {
			_case_begin_1b79c1d7b:;
			{
				{
					
					if ((_9813_mant != 0LLU)) {
						_case_begin_1b79c4103:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'n','a','n'}));
						}
					}
					else if (_969_neg) {
						_case_begin_1b79c429b:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'-','i','n','f'}));
						}
					}
					else {
						_case_begin_1b79c2e26:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'+','i','n','f'}));
						}
					}
					_match_end_1b79c2d5a:;
				}
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_1b79bba68:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_1b79c170a:;
			{
				_9813_mant|=static_cast<jule::U64>(static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits);
			}
		}
		_match_end_1b79c1672:;
	}
	_9713_exp+=(*(_8413_flt))._field_bias;
	if (_8244_fmt == 'b') {
		return _1cde27551_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _1cde71a84_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	
	_1cde9edae_DecimalSlice _13213_digs = _1cde9edae_DecimalSlice();
	jule::Bool _13313_ok = false;
	jule::Bool _1359_shortest = (_8259_prec < 0LL);
	if (_1359_shortest) {
		_13213_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_1cdde09c0_ryu_ftoa_shortest(_13213_digs,_9813_mant,static_cast<jule::I64>(_9713_exp - static_cast<jule::I64>(static_cast<jule::I64>((*(_8413_flt))._field_mantbits))),(*(_8413_flt)));
		_13313_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_1b79c923a:;
				{
					_8259_prec=static_cast<jule::I64>(_1ce0950e7_max(static_cast<jule::I64>((_13213_digs._field_nd - 1LL)),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_1b79c92a1:;
				{
					_8259_prec=static_cast<jule::I64>(_1ce0950e7_max(static_cast<jule::I64>(_13213_digs._field_nd - _13213_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_1b79c935b:;
				{
					_8259_prec=_13213_digs._field_nd;
				}
			}
			_match_end_1b79c8e60:;
		}
	} else if (_8244_fmt != 'f') {
		jule::I64 _15217_digits = _8259_prec;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_1b79cba89:;
				{
					(_15217_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_1b79cb913:;
				{
					if ((_8259_prec == 0LL)) {
						_8259_prec=1LL;
					}
					_15217_digits=_8259_prec;
				}
			}
			else {
				_case_begin_1b79c93c2:;
				{
					_15217_digits=1LL;
				}
			}
			_match_end_1b79cb5b1:;
		}
		if ((_8270_bit_size == 32LL) && (_15217_digits <= 9LL)) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_1cdddea13_ryu_ftoa_fixed32(_13213_digs,static_cast<jule::U32>(static_cast<jule::U32>(_9813_mant)),static_cast<jule::I64>(_9713_exp - static_cast<jule::I64>(static_cast<jule::I64>((*(_8413_flt))._field_mantbits))),_15217_digits);
			_13313_ok=true;
		} else if ((_15217_digits <= 18LL)) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_1ce35d47b_ryu_ftoa_fixed64(_13213_digs,_9813_mant,static_cast<jule::I64>(_9713_exp - static_cast<jule::I64>(static_cast<jule::I64>((*(_8413_flt))._field_mantbits))),_15217_digits);
			_13313_ok=true;
		}
	}
	if ((!(_13313_ok))) {
		return _1ce05cc6e_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _1ce05a453_fmt_digits(_8221_dst,_1359_shortest,_969_neg,_13213_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _1ce05cc6e_big_ftoa(jule::Slice<jule::U8> _18217_dst,jule::I64 _18234_prec,jule::U8 _18245_fmt,jule::Bool _18256_neg,jule::U64 _18313_mant,jule::I64 _18324_exp,_1ce045d56_FloatInfo& _18335_flt) {
	_1cde2b80d_Decimal _18413_d = _1cde2b80d_Decimal();
	_18413_d._method_assign(_18313_mant);
	_18413_d._method_shift(static_cast<jule::I64>(_18324_exp - static_cast<jule::I64>(static_cast<jule::I64>(_18335_flt._field_mantbits))));
	_1cde9edae_DecimalSlice _18713_digs = _1cde9edae_DecimalSlice();
	jule::Bool _1889_shortest = (_18234_prec < 0LL);
	if (_1889_shortest) {
		_1ce2969be_round_shortest(_18413_d,_18313_mant,_18324_exp,_18335_flt);
		_18713_digs=_1cde9edae_DecimalSlice(_18413_d._field_d.slice(0LL),_18413_d._field_nd,_18413_d._field_dp,jule::Bool());
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_1b79d5796:;
				{
					_18234_prec=static_cast<jule::I64>((_18713_digs._field_nd - 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_1b79d580c:;
				{
					_18234_prec=static_cast<jule::I64>(_1ce0950e7_max(static_cast<jule::I64>(_18713_digs._field_nd - _18713_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_1b79d58c8:;
				{
					_18234_prec=_18713_digs._field_nd;
				}
			}
			_match_end_1b79d55a9:;
		}
	} else {
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_1b79d4685:;
				{
					_18413_d._method_round(static_cast<jule::I64>((_18234_prec + 1LL)));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_1b79d46eb:;
				{
					_18413_d._method_round(static_cast<jule::I64>(_18413_d._field_dp + _18234_prec));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_1b79d4762:;
				{
					if ((_18234_prec == 0LL)) {
						_18234_prec=1LL;
					}
					_18413_d._method_round(_18234_prec);
				}
			}
			_match_end_1b79d7457:;
		}
		_18713_digs=_1cde9edae_DecimalSlice(_18413_d._field_d.slice(0LL),_18413_d._field_nd,_18413_d._field_dp,jule::Bool());
	}
	return _1ce05a453_fmt_digits(_18217_dst,_1889_shortest,_18256_neg,_18713_digs,_18234_prec,_18245_fmt);
}



inline jule::Slice<jule::U8> _1ce05a453_fmt_digits(jule::Slice<jule::U8> _21919_dst,jule::Bool _21932_shortest,jule::Bool _21948_neg,_1cde9edae_DecimalSlice _22013_digs,jule::I64 _22037_prec,jule::U8 _22048_fmt) {
	{
		auto &_match_expr{ _22048_fmt };
		
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_1b79db1c5:;
			{
				return _1ce3672ed_fmt_e(_21919_dst,_21948_neg,_22013_digs,_22037_prec,_22048_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_1b79db291:;
			{
				return _1cddc2067_fmt_f(_21919_dst,_21948_neg,_22013_digs,_22037_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_1b79db307:;
			{
				jule::I64 _22817_eprec = _22037_prec;
				if ((_22817_eprec > _22013_digs._field_nd) && (_22013_digs._field_nd >= _22013_digs._field_dp)) {
					_22817_eprec=_22013_digs._field_nd;
				}
				if (_21932_shortest) {
					_22817_eprec=6LL;
				}
				jule::I64 _23813_exp = (_22013_digs._field_dp - 1LL);
				if ((_23813_exp < -4LL) || (_23813_exp >= _22817_eprec)) {
					if (_22037_prec > _22013_digs._field_nd) {
						_22037_prec=_22013_digs._field_nd;
					}
					return _1ce3672ed_fmt_e(_21919_dst,_21948_neg,_22013_digs,static_cast<jule::I64>((_22037_prec - 1LL)),static_cast<jule::U8>(static_cast<jule::U8>(_22048_fmt + 'e') - 'g'));
				}
				if (_22037_prec > _22013_digs._field_dp) {
					_22037_prec=_22013_digs._field_nd;
				}
				return _1cddc2067_fmt_f(_21919_dst,_21948_neg,_22013_digs,static_cast<jule::I64>(_1ce0950e7_max(static_cast<jule::I64>(_22037_prec - _22013_digs._field_dp),0LL)));
			}
		}
		_match_end_1b79db170:;
	}
	return jule::append(_21919_dst,jule::Slice<jule::U8>({'%',_22048_fmt}));
}



inline void _1ce2969be_round_shortest(_1cde2b80d_Decimal& _25724_d,jule::U64 _25736_mant,jule::I64 _25747_exp,_1ce045d56_FloatInfo& _25758_flt) {
	if ((_25736_mant == 0LLU)) {
		_25724_d._field_nd=0LL;
		return;
	}
	jule::I64 _2789_minexp = (_25758_flt._field_bias + 1LL);
	if ((_25747_exp > _2789_minexp) && ((332LL * static_cast<jule::I64>(_25724_d._field_dp - _25724_d._field_nd)) >= static_cast<jule::I64>(100LL * static_cast<jule::I64>(_25747_exp - static_cast<jule::I64>(static_cast<jule::I64>(_25758_flt._field_mantbits)))))) {
		return;
	}
	_1cde2b80d_Decimal _28713_upper = _1cde2b80d_Decimal();
	_28713_upper._method_assign(static_cast<jule::U64>((static_cast<jule::U64>(_25736_mant << 1LLU) + 1LLU)));
	_28713_upper._method_shift(static_cast<jule::I64>((static_cast<jule::I64>(_25747_exp - static_cast<jule::I64>(static_cast<jule::I64>(_25758_flt._field_mantbits))) - 1LL)));
	jule::U64 _29713_mantlo = 0LLU;
	jule::I64 _29813_explo = 0LL;
	if ((_25736_mant > static_cast<jule::U64>(1LLU << _25758_flt._field_mantbits)) || (_25747_exp == _2789_minexp)) {
		_29713_mantlo=static_cast<jule::U64>((_25736_mant - 1LLU));
		_29813_explo=_25747_exp;
	} else {
		_29713_mantlo=static_cast<jule::U64>((static_cast<jule::U64>(_25736_mant << 1LLU) - 1LLU));
		_29813_explo=static_cast<jule::I64>((_25747_exp - 1LL));
	}
	_1cde2b80d_Decimal _30613_lower = _1cde2b80d_Decimal();
	_30613_lower._method_assign(static_cast<jule::U64>((static_cast<jule::U64>(_29713_mantlo << 1LLU) + 1LLU)));
	_30613_lower._method_shift(static_cast<jule::I64>((static_cast<jule::I64>(_29813_explo - static_cast<jule::I64>(static_cast<jule::I64>(_25758_flt._field_mantbits))) - 1LL)));
	jule::Bool _3139_inclusive = ((_25736_mant & 1LL) == 0LLU);
	jule::U8 _32613_upperdelta = 0LLU;
	jule::I64 _33013_ui = 0LL;
	for (; ; (_33013_ui)++) {
		{
			jule::I64 _33513_mi = (_33013_ui - _28713_upper._field_dp) + _25724_d._field_dp;
			if (_33513_mi >= _25724_d._field_nd) {
				goto _iter_end_1b79e5e9e;
			}
			jule::I64 _33913_li = (_33013_ui - _28713_upper._field_dp) + _30613_lower._field_dp;
			jule::U8 _34017_l = static_cast<jule::U8>(48LLU);
			if ((_33913_li >= 0LL) && (_33913_li < _30613_lower._field_nd)) {
				_34017_l=_30613_lower._field_d[_33913_li];
			}
			jule::U8 _34417_m = static_cast<jule::U8>(48LLU);
			if ((_33513_mi >= 0LL)) {
				_34417_m=_25724_d._field_d[_33513_mi];
			}
			jule::U8 _34817_u = static_cast<jule::U8>(48LLU);
			if (_33013_ui < _28713_upper._field_nd) {
				_34817_u=_28713_upper._field_d[_33013_ui];
			}
			jule::Bool _35613_okdown = (_34017_l != _34417_m) || (_3139_inclusive && ((_33913_li + 1LL) == _30613_lower._field_nd));
			{
				
				if ((_32613_upperdelta == 0LLU) && ((_34417_m + 1LLU) < _34817_u)) {
					_case_begin_1b7a00371:;
					{
						_32613_upperdelta=2LLU;
					}
				}
				else if ((_32613_upperdelta == 0LLU) && (_34417_m != _34817_u)) {
					_case_begin_1b7a003e8:;
					{
						_32613_upperdelta=1LLU;
					}
				}
				else if ((_32613_upperdelta == 1LLU) && ((_34417_m != '9') || (_34817_u != '0'))) {
					_case_begin_1b7a00470:;
					{
						_32613_upperdelta=2LLU;
					}
				}
				_match_end_1b7a002b6:;
			}
			jule::Bool _37713_okup = (_32613_upperdelta > 0LLU) && ((_3139_inclusive || (_32613_upperdelta > 1LLU)) || ((_33013_ui + 1LL) < _28713_upper._field_nd));
			{
				
				if (_35613_okdown && _37713_okup) {
					_case_begin_1b7a0393a:;
					{
						_25724_d._method_round(static_cast<jule::I64>((_33513_mi + 1LL)));
						return;
					}
				}
				else if (_35613_okdown) {
					_case_begin_1b7a039a1:;
					{
						_25724_d._method_round_down(static_cast<jule::I64>((_33513_mi + 1LL)));
						return;
					}
				}
				else if (_37713_okup) {
					_case_begin_1b7a03a28:;
					{
						_25724_d._method_round_up(static_cast<jule::I64>((_33513_mi + 1LL)));
						return;
					}
				}
				_match_end_1b7a0275d:;
			}
		}
	_iter_next_1b79e5e9e:;
	}
	_iter_end_1b79e5e9e:;
}



inline jule::Slice<jule::U8> _1ce3672ed_fmt_e(jule::Slice<jule::U8> _39614_dst,jule::Bool _39627_neg,_1cde9edae_DecimalSlice _39638_d,jule::I64 _39655_prec,jule::U8 _39666_fmt) {
	if (_39627_neg) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('-');
	}
	jule::U8 _40313_ch = '0';
	if ((_39638_d._field_nd != 0LL)) {
		_40313_ch=_39638_d._field_d[0LL];
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);
	if ((_39655_prec > 0LL)) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('.');
		jule::I64 _41217_i = 1LL;
		jule::I64 _41313_m = _1ce06435d_min(_39638_d._field_nd,static_cast<jule::I64>((_39655_prec + 1LL)));
		if (_41217_i < _41313_m) {
			_39614_dst=jule::append(_39614_dst,_39638_d._field_d.slice(_41217_i,_41313_m));
			_41217_i=_41313_m;
		}
		for (; _41217_i <= _39655_prec; (_41217_i)++) {
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('0');
			}
		_iter_next_1b7a09721:;
		}
		_iter_end_1b7a09721:;
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_39666_fmt);
	jule::I64 _42513_exp = (_39638_d._field_dp - 1LL);
	if ((_39638_d._field_nd == 0LL)) {
		_42513_exp=0LL;
	}
	if ((_42513_exp < 0LL)) {
		_40313_ch='-';
		_42513_exp=static_cast<jule::I64>((-(_42513_exp)));
	} else {
		_40313_ch='+';
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);
	{
		
		if ((_42513_exp < 10LL)) {
			_case_begin_1b7a0b4e2:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push('0');_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp)) + '0'));
			}
		}
		else if ((_42513_exp < 100LL)) {
			_case_begin_1b7a0d7e1:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp / 10LL))) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp % 10LL))) + '0'));
			}
		}
		else {
			_case_begin_1b7a0b734:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,3);_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp / 100LL))) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp / 10LL))) % 10LL)) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp % 10LL))) + '0'));
			}
		}
		_match_end_1b7a0a612:;
	}
	return _39614_dst;
}



inline jule::Slice<jule::U8> _1cddc2067_fmt_f(jule::Slice<jule::U8> _45114_dst,jule::Bool _45127_neg,_1cde9edae_DecimalSlice _45138_d,jule::I64 _45155_prec) {
	if (_45127_neg) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('-');
	}
	if ((_45138_d._field_dp > 0LL)) {
		jule::I64 _45917_m = _1ce06435d_min(_45138_d._field_nd,_45138_d._field_dp);
		_45114_dst=jule::append(_45114_dst,_45138_d._field_d.slice(0LL,_45917_m));
		for (; _45917_m < _45138_d._field_dp; (_45917_m)++) {
			{
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');
			}
		_iter_next_1b7a1199d:;
		}
		_iter_end_1b7a1199d:;
	} else {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');
	}
	if ((_45155_prec > 0LL)) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('.');
		jule::I64 _47017_i = 0LL;
		for (; _47017_i < _45155_prec; (_47017_i)++) {
			{
				jule::U8 _47221_ch = static_cast<jule::U8>(48LLU);
				jule::I64 _47317_j = _45138_d._field_dp + _47017_i;
				if ((0LL <= _47317_j) && (_47317_j < _45138_d._field_nd)) {
					_47221_ch=_45138_d._field_d[_47317_j];
				}
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push(_47221_ch);
			}
		_iter_next_1b7a12c8a:;
		}
		_iter_end_1b7a12c8a:;
	}
	return _45114_dst;
}



inline jule::Slice<jule::U8> _1cde27551_fmt_b(jule::Slice<jule::U8> _48414_dst,jule::Bool _48427_neg,jule::U64 _48438_mant,jule::I64 _48453_exp,_1ce045d56_FloatInfo& _48464_flt) {
	if (_48427_neg) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('-');
	}
	std::tie(_48414_dst,std::ignore) = _1cddb9d73_fmt_bits(_48414_dst,_48438_mant,10LL,false,true);
	_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('p');
	_48453_exp-=static_cast<jule::I64>(static_cast<jule::I64>(_48464_flt._field_mantbits));
	if ((_48453_exp >= 0LL)) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('+');
	}
	std::tie(_48414_dst,std::ignore) = _1cddb9d73_fmt_bits(_48414_dst,static_cast<jule::U64>(static_cast<jule::U64>(_48453_exp)),10LL,(_48453_exp < 0LL),true);
	return _48414_dst;
}



inline jule::Slice<jule::U8> _1cde71a84_fmt_x(jule::Slice<jule::U8> _50614_dst,jule::I64 _50627_prec,jule::U8 _50638_fmt,jule::Bool _50649_neg,jule::U64 _50713_mant,jule::I64 _50728_exp,_1ce045d56_FloatInfo& _50739_flt) {
	if ((_50713_mant == 0LLU)) {
		_50728_exp=0LL;
	}
	_50713_mant<<=static_cast<jule::U64>(60LLU - _50739_flt._field_mantbits);
	while ((_50713_mant != 0LLU) && ((_50713_mant & 1152921504606846976LLU) == 0LLU)) {
		{
			_50713_mant<<=1LLU;
			(_50728_exp)--;
		}
	_iter_next_1b7a19544:;
	}
	_iter_end_1b7a19544:;
	if ((_50627_prec >= 0LL) && (_50627_prec < 15LL)) {
		jule::U64 _52113_shift = static_cast<jule::U64>(_50627_prec << 2LLU);
		jule::U64 _52213_extra = ((_50713_mant << _52113_shift) & 1152921504606846975LLU);
		_50713_mant>>=static_cast<jule::U64>(60LLU - _52113_shift);
		if (((_52213_extra | static_cast<jule::U64>((_50713_mant & 1LLU))) > 576460752303423488LLU)) {
			(_50713_mant)++;
		}
		_50713_mant<<=static_cast<jule::U64>(60LLU - _52113_shift);
		if (((_50713_mant & 2305843009213693952LLU) != 0LLU)) {
			_50713_mant>>=1LLU;
			(_50728_exp)++;
		}
	}
	jule::Str _5359_hex = (((_50638_fmt == 'X')) ? (jule::Str("0123456789ABCDEF", 16)) : (jule::Str("0123456789abcdef", 16)));
	if (_50649_neg) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('-');
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push('0');_50614_dst.__push(_50638_fmt);_50614_dst.__push(static_cast<jule::U8>('0' + static_cast<jule::U8>(static_cast<jule::U8>(((_50713_mant >> 60LLU) & 1LLU)))));
	_50713_mant<<=4LLU;
	if ((_50627_prec < 0LL) && (_50713_mant != 0LLU)) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');
		while ((_50713_mant != 0LLU)) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_5359_hex[static_cast<jule::I64>(((_50713_mant >> 60LLU) & 15LLU))]);
				_50713_mant<<=4LLU;
			}
		_iter_next_1b7a207d1:;
		}
		_iter_end_1b7a207d1:;
	} else if ((_50627_prec > 0LL)) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');
		jule::I64 _55317_i = 0LL;
		for (; _55317_i < _50627_prec; (_55317_i)++) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_5359_hex[static_cast<jule::I64>(((_50713_mant >> 60LLU) & 15LLU))]);
				_50713_mant<<=4LLU;
			}
		_iter_next_1b7a1dea5:;
		}
		_iter_end_1b7a1dea5:;
	}
	jule::U8 _56113_ch = static_cast<jule::U8>(80LLU);
	if (_50638_fmt == static_cast<jule::U8>(_1ce0de394_lower(_50638_fmt))) {
		_56113_ch='p';
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56113_ch);
	if ((_50728_exp < 0LL)) {
		_56113_ch='-';
		_50728_exp=static_cast<jule::I64>((-(_50728_exp)));
	} else {
		_56113_ch='+';
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56113_ch);
	{
		
		if ((_50728_exp < 100LL)) {
			_case_begin_1b7a1d8ab:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,2);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 10LL))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp % 10LL))) + '0'));
			}
		}
		else if ((_50728_exp < 1000LL)) {
			_case_begin_1b7a27b7e:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 100LL))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(((_50728_exp / 10LL) % 10LL))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp % 10LL))) + '0'));
			}
		}
		else {
			_case_begin_1b7a1d845:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,4);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 1000LL))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 100LL))) % 10LL)) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(((_50728_exp / 10LL) % 10LL))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp % 10LL))) + '0'));
			}
		}
		_match_end_1b7a244d8:;
	}
	return _50614_dst;
}



inline jule::I64 _1ce06435d_min(jule::I64 _5868_a,jule::I64 _58616_b) {
	return static_cast<jule::I64>((((_5868_a < _58616_b)) ? (_5868_a) : (_58616_b)));
}



inline jule::I64 _1ce0950e7_max(jule::I64 _5908_a,jule::I64 _59016_b) {
	return static_cast<jule::I64>((((_5908_a > _59016_b)) ? (_5908_a) : (_59016_b)));
}



inline jule::U8 _1ce0de394_lower(jule::U8 _4710_c) {
	return static_cast<jule::U8>(_4710_c | ('x' - 'X'));
}



inline std::tuple<jule::U64,jule::I64> _1ce12880c___parse_uint(jule::Str _5121_s,jule::I64 _5133_base,jule::I64 _5148_bit_size) {
	if (_5121_s.empty()) {
		return std::make_tuple(0LLU,static_cast<jule::I64>(2LL));
	}
	{
		
		if ((2LL <= _5133_base) && (_5133_base <= 36LL)) {
			_case_begin_1b7a2d58b:;
		}
		else if ((_5133_base == 0LL)) {
			_case_begin_1b7a2d2b1:;
			{
				_5133_base=10LL;
				if (_5121_s[0LL] == '0') {
					{
						
						if ((_5121_s.len() >= 3LL) && (_1ce0de394_lower(_5121_s[1LL]) == 'b')) {
							_case_begin_1b7a300a4:;
							{
								_5133_base=2LL;
								(_5121_s).mut_slice(2LL);
							}
						}
						else if ((_5121_s.len() >= 3LL) && (_1ce0de394_lower(_5121_s[1LL]) == 'o')) {
							_case_begin_1b7a30181:;
							{
								_5133_base=8LL;
								(_5121_s).mut_slice(2LL);
							}
						}
						else if ((_5121_s.len() >= 3LL) && (_1ce0de394_lower(_5121_s[1LL]) == 'x')) {
							_case_begin_1b7a2ed73:;
							{
								_5133_base=16LL;
								(_5121_s).mut_slice(2LL);
							}
						}
						else {
							_case_begin_1b7a2ec0d:;
							{
								_5133_base=8LL;
								(_5121_s).mut_slice(1LL);
							}
						}
						_match_end_1b7a2eb42:;
					}
				}
			}
		}
		else {
			_case_begin_1b7a2c47a:;
			{
				return std::make_tuple(0LLU,static_cast<jule::I64>(3LL));
			}
		}
		_match_end_1b7a2c898:;
	}
	if ((_5148_bit_size == 0LL)) {
		_5148_bit_size=64LL;
	} else if ((_5148_bit_size < 0LL) || (_5148_bit_size > 64LL)) {
		return std::make_tuple(0LLU,static_cast<jule::I64>(4LL));
	}
	jule::U64 _9013_cutoff = 0LLU;
	{
		auto &_match_expr{ _5133_base };
		
		if (_match_expr == 10LL) {
			_case_begin_1b7a352b8:;
			{
				_9013_cutoff=1844674407370955265LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_1b7a35472:;
			{
				_9013_cutoff=1152921504606846977LLU;
			}
		}
		else {
			_case_begin_1b7a35010:;
			{
				_9013_cutoff=static_cast<jule::U64>((static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(static_cast<jule::U64>(_5133_base)))) + 1LLU));
			}
		}
		_match_end_1b7a35263:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto &_match_expr{ _5148_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_1b7a354d8:;
			{
				_10013_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1b7a36c8c:;
			{
				_10013_max_val=jule::MAX_U64;
			}
		}
		_match_end_1b7a36709:;
	}
	jule::U64 _10813_n = 0LLU;
	{
		auto &expr = _5121_s;
		auto it = expr.begin();
		_iter_begin_1b7a371aa:;
		if (it != expr.end()) {
			jule::U8 _1b7a3cb83_c = *it;
			{
				jule::U8 _11017_d = 0LLU;
				{
					
					if (('0' <= _1b7a3cb83_c) && (_1b7a3cb83_c <= '9')) {
						_case_begin_1b7a3de3c:;
						{
							_11017_d=static_cast<jule::U8>(_1b7a3cb83_c - '0');
						}
					}
					else if (('a' <= static_cast<jule::U8>(_1ce0de394_lower(_1b7a3cb83_c))) && (_1ce0de394_lower(_1b7a3cb83_c) <= 'z')) {
						_case_begin_1b7a3db62:;
						{
							_11017_d=static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(_1ce0de394_lower(_1b7a3cb83_c)) - 'a') + 10LLU));
						}
					}
					else if (_1b7a3cb83_c == '_') {
						_case_begin_1b7a3dbc8:;
						{
							goto _iter_next_1b7a371aa;
						}
					}
					else {
						_case_begin_1b7a3d6cd:;
						{
							return std::make_tuple(0LLU,static_cast<jule::I64>(2LL));
						}
					}
					_match_end_1b7a3d656:;
				}
				if (_11017_d >= static_cast<jule::U8>(static_cast<jule::U8>(_5133_base))) {
					return std::make_tuple(0LLU,static_cast<jule::I64>(2LL));
				}
				if (_10813_n >= _9013_cutoff) {
					return std::make_tuple(_10013_max_val,static_cast<jule::I64>(1LL));
				}
				_10813_n*=static_cast<jule::U64>(static_cast<jule::U64>(_5133_base));
				jule::U64 _13213_n1 = _10813_n + static_cast<jule::U64>(static_cast<jule::U64>(_11017_d));
				if ((_13213_n1 < _10813_n) || (_13213_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,static_cast<jule::I64>(1LL));
				}
				_10813_n=_13213_n1;
			}
			_iter_next_1b7a371aa:;
			++it;
			goto _iter_begin_1b7a371aa;
		}
		_iter_end_1b7a371aa:;
	}
	return std::make_tuple(_10813_n,static_cast<jule::I64>(0LL));
}



inline jule::Exceptional<jule::U64> _1ce1c8a11_parse_uint(jule::Str _14623_s,jule::I64 _14635_base,jule::I64 _14650_bit_size) {
	jule::U64 _14710_un;
	jule::I64 _14714_err;
	std::tie(_14710_un,_14714_err) = _1ce12880c___parse_uint(_14623_s,_14635_base,_14650_bit_size);
	if (_14714_err != static_cast<jule::I64>(0LL)) {
		return jule::Exceptional<jule::U64>(_14714_err);
	}
	return jule::Exceptional<jule::U64>(jule::Any(),_14710_un);
}



inline jule::Exceptional<jule::I64> _1ce1e6b72_parse_int(jule::Str _17222_s,jule::I64 _17230_base,jule::I64 _17245_bit_size) {
	if (_17222_s.empty()) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I64>(2LL));
	}
	jule::Bool _17813_neg = false;
	if (_17222_s[0LL] == '+') {
		(_17222_s).mut_slice(1LL);
	} else if (_17222_s[0LL] == '-') {
		_17813_neg=true;
		(_17222_s).mut_slice(1LL);
	}
	jule::U64 _18714_un;
	jule::I64 _18718_err;
	std::tie(_18714_un,_18718_err) = _1ce12880c___parse_uint(_17222_s,_17230_base,_17245_bit_size);
	if ((_18718_err != static_cast<jule::I64>(0LL)) && (_18718_err != static_cast<jule::I64>(1LL))) {
		return jule::Exceptional<jule::I64>(_18718_err);
	}
	if ((_17245_bit_size == 0LL)) {
		_17245_bit_size=64LL;
	}
	jule::U64 _1969_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::U64>(static_cast<jule::U64>((_17245_bit_size - 1LL))));
	if ((!(_17813_neg)) && (_18714_un >= _1969_cutoff)) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I64>(1LL));
	}
	if (_17813_neg && (_18714_un > _1969_cutoff)) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I64>(1LL));
	}
	jule::I64 _20313_n = static_cast<jule::I64>(_18714_un);
	if (_17813_neg) {
		_20313_n=static_cast<jule::I64>((-(_20313_n)));
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_20313_n);
}



inline std::tuple<jule::F64,jule::Bool> _1ce0391bd_eisel_lemire64(jule::U64 _4123_man,jule::I64 _4133_exp10,jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if ((_4123_man == 0LLU)) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_1ce3687c7_f64_from_bits(9223372036854775808LLU));
		}
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::I64 _579_clz = _1ce3852c7_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::U64>(static_cast<jule::U64>(_579_clz));
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>(((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL)) - static_cast<jule::U64>(static_cast<jule::U64>(_579_clz));
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _1ce435388_mul64(_4123_man,_1ce1c824c_DETAILED_POWS_OF_TEN[(_4133_exp10 - -348LL)][1LL]);
	if (((_6314_x_hi & 511LLU) == 511LLU) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _1ce435388_mul64(_4123_man,_1ce1c824c_DETAILED_POWS_OF_TEN[(_4133_exp10 - -348LL)][0LL]);
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LLU) == 511LLU) && ((_6829_merged_lo + 1LLU) == 0LLU)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = (_6314_x_hi >> 63LLU);
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> static_cast<jule::U64>((_799_msb + 9LLU));
	_6013_ret_exp2-=static_cast<jule::U64>(1LLU ^ _799_msb);
	if (((_6324_x_lo == 0LLU) && ((_6314_x_hi & 511LLU) == 0LLU)) && ((_8013_ret_mantissa & 3LLU) == 1LLU)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>((_8013_ret_mantissa & 1LLU));
	_8013_ret_mantissa>>=1LLU;
	if (((_8013_ret_mantissa >> 53LLU) > 0LLU)) {
		_8013_ret_mantissa>>=1LLU;
		_6013_ret_exp2+=1LLU;
	}
	if (((_6013_ret_exp2 - 1LLU) >= 2046LLU)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LLU) | static_cast<jule::U64>((_8013_ret_mantissa & 4503599627370495LLU));
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_1ce3687c7_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1ce06ad15_eisel_lemire32(jule::U64 _11023_man,jule::I64 _11033_exp10,jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if ((_11023_man == 0LLU)) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_1cdda1909_f32_from_bits(2147483648LLU));
		}
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::I64 _1329_clz = _1ce3852c7_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::U64>(static_cast<jule::U64>(_1329_clz));
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>(((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL)) - static_cast<jule::U64>(static_cast<jule::U64>(_1329_clz));
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _1ce435388_mul64(_11023_man,_1ce1c824c_DETAILED_POWS_OF_TEN[(_11033_exp10 - -348LL)][1LL]);
	if (((_13814_x_hi & 274877906943LLU) == 274877906943LLU) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _1ce435388_mul64(_11023_man,_1ce1c824c_DETAILED_POWS_OF_TEN[(_11033_exp10 - -348LL)][0LL]);
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LLU) == 274877906943LLU) && ((_14329_merged_lo + 1LLU) == 0LLU)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = (_13814_x_hi >> 63LLU);
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> static_cast<jule::U64>((_1549_msb + 38LLU));
	_13513_ret_exp2-=static_cast<jule::U64>(1LLU ^ _1549_msb);
	if (((_13824_x_lo == 0LLU) && ((_13814_x_hi & 274877906943LLU) == 0LLU)) && ((_15513_ret_mantissa & 3LLU) == 1LLU)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>((_15513_ret_mantissa & 1LLU));
	_15513_ret_mantissa>>=1LLU;
	if (((_15513_ret_mantissa >> 24LLU) > 0LLU)) {
		_15513_ret_mantissa>>=1LLU;
		_13513_ret_exp2+=1LLU;
	}
	if (((_13513_ret_exp2 - 1LLU) >= 254LLU)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LLU) | static_cast<jule::U64>((_15513_ret_mantissa & 8388607LLU));
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LLU;
	}
	_11058_f = static_cast<jule::F32>(_1cdda1909_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_17813_ret_bits))));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::I64 _1ce17854e_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > static_cast<jule::I64>(_4534_s.len())) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::I64 _5013_i = 0LL;
	for (; _5013_i < _4613_n; (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];
			if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
				_5217_c+='a' - 'A';
			}
			if (_5217_c != _4542_prefix[_5013_i]) {
				return _5013_i;
			}
		}
	_iter_next_1b7a6a8e7:;
	}
	_iter_end_1b7a6a8e7:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::I64,jule::Bool> _1ce25dc83_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::I64 _6834_n = jule::I64();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s.empty()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::I64 _7213_sign = 1LL;
	jule::I64 _7313_nsign = 0LL;
	{
		auto &_match_expr{ _6816_s[0LL] };
		
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_1b7a703ad:;
			{
				if (_6816_s[0LL] == '-') {
					_7213_sign=-1LL;
				}
				_7313_nsign=1LL;
				(_6816_s).mut_slice(1LL);
				goto _case_begin_1b7a70424;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_1b7a70424:;
			{
				jule::I64 _8317_case_n = _1ce17854e_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
				if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
					_8317_case_n=3LL;
				}
				if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
					_6826_f = static_cast<jule::F64>(_1ce406821_inf(_7213_sign));
					_6834_n = static_cast<jule::I64>(_7313_nsign + _6834_n);
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_1b7a7048a:;
			{
				if ((_1ce17854e_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL)) {
					_6826_f = static_cast<jule::F64>(_1ce3bc4a7_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		_match_end_1b7a70358:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::I64,jule::Bool,jule::Bool,jule::Bool,jule::I64,jule::Bool> _1ce2806cd_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::I64 _10340_exp = jule::I64();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10438_hex = jule::Bool();
	jule::I64 _10449_i = jule::I64();
	jule::Bool _10457_ok = jule::Bool();
	if (_10449_i >= static_cast<jule::I64>(_10315_s.len())) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		
		if (_10315_s[_10449_i] == '+') {
			_case_begin_1b7a77096:;
			{
				(_10449_i)++;
			}
		}
		else if (_10315_s[_10449_i] == '-') {
			_case_begin_1b7a773e8:;
			{
				_10350_neg=true;
				(_10449_i)++;
			}
		}
		_match_end_1b7a76c99:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::I64 _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < static_cast<jule::I64>(_10315_s.len())) && (_10315_s[_10449_i] == '0')) && (_1ce0de394_lower(_10315_s[(_10449_i + 1LL)]) == 'x')) {
		_11813_base=16LLU;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::I64 _13013_nd = 0LL;
	jule::I64 _13113_nd_mant = 0LL;
	jule::I64 _13213_dp = 0LL;
	for (; _10449_i < static_cast<jule::I64>(_10315_s.len()); (_10449_i)++) {
		{
			jule::U8 _13413_c = _10315_s[_10449_i];
			{
				
				if (_13413_c == '_') {
					_case_begin_1b7a7d4ba:;
					{
						goto _iter_next_1b7a7c442;
					}
				}
				else if (_13413_c == '.') {
					_case_begin_1b7a7d542:;
					{
						if (_12813_sawdot) {
							goto _julec_label_loop_end;
						}
						_12813_sawdot=true;
						_13213_dp=_13013_nd;
						goto _iter_next_1b7a7c442;
					}
				}
				else if (('0' <= _13413_c) && (_13413_c <= '9')) {
					_case_begin_1b7a7d5b9:;
					{
						_12913_sawdigits=true;
						if ((_13413_c == '0') && (_13013_nd == 0LL)) {
							(_13213_dp)--;
							goto _iter_next_1b7a7c442;
						}
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=_11813_base;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(_13413_c - '0'));
							(_13113_nd_mant)++;
						} else if (_13413_c != '0') {
							_10425_trunc=true;
						}
						goto _iter_next_1b7a7c442;
					}
				}
				else if (((_11813_base == 16LLU) && ('a' <= static_cast<jule::U8>(_1ce0de394_lower(_13413_c)))) && (_1ce0de394_lower(_13413_c) <= 'f')) {
					_case_begin_1b7a7d641:;
					{
						_12913_sawdigits=true;
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=16LLU;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(((_1ce0de394_lower(_13413_c) - 'a') + 10LLU)));
							(_13113_nd_mant)++;
						} else {
							_10425_trunc=true;
						}
						goto _iter_next_1b7a7c442;
					}
				}
				_match_end_1b7a7d3dd:;
			}
			goto _iter_end_1b7a7c442;
		}
	_iter_next_1b7a7c442:;
	}
	_iter_end_1b7a7c442:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if ((_11813_base == 16LLU)) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < static_cast<jule::I64>(_10315_s.len())) && (_1ce0de394_lower(_10315_s[_10449_i]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= static_cast<jule::I64>(_10315_s.len())) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::I64 _19717_esign = 1LL;
		if (_10315_s[_10449_i] == '+') {
			(_10449_i)++;
		} else if (_10315_s[_10449_i] == '-') {
			(_10449_i)++;
			_19717_esign=-1LL;
		}
		if (((_10449_i >= static_cast<jule::I64>(_10315_s.len())) || (_10315_s[_10449_i] < '0')) || (_10315_s[_10449_i] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::I64 _20717_e = 0LL;
		for (; (_10449_i < static_cast<jule::I64>(_10315_s.len())) && ((('0' <= _10315_s[_10449_i]) && (_10315_s[_10449_i] <= '9')) || (_10315_s[_10449_i] == '_')); (_10449_i)++) {
			{
				if (_10315_s[_10449_i] == '_') {
					goto _iter_next_1b7a88041;
				}
				if ((_20717_e < 10000LL)) {
					_20717_e=static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>((_20717_e * 10LL)) + static_cast<jule::I64>(static_cast<jule::I64>(_10315_s[_10449_i]))) - '0');
				}
			}
		_iter_next_1b7a88041:;
		}
		_iter_end_1b7a88041:;
		_13213_dp+=static_cast<jule::I64>(_20717_e * _19717_esign);
	} else if ((_11813_base == 16LLU)) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((_10325_mantissa != 0LLU)) {
		_10340_exp=static_cast<jule::I64>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1cdda5a40_atof64exact(jule::U64 _48216_mantissa,jule::I64 _48235_exp,jule::Bool _48245_neg) {
	jule::F64 _48258_f = jule::F64();
	jule::Bool _48266_ok = jule::Bool();
	if (((_48216_mantissa >> _1cde619db_F64_INFO._field_mantbits) != 0LLU)) {
		return std::make_tuple(_48258_f,_48266_ok);
	}
	_48258_f=static_cast<jule::F64>(static_cast<jule::F64>(_48216_mantissa));
	if (_48245_neg) {
		_48258_f=static_cast<jule::F64>((-(_48258_f)));
	}
	{
		
		if ((_48235_exp == 0LL)) {
			_case_begin_1b7a961e7:;
			{
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		else if ((_48235_exp > 0LL) && (_48235_exp <= 37LL)) {
			_case_begin_1b7a9626e:;
			{
				if ((_48235_exp > 22LL)) {
					_48258_f*=_1ce235809_F64_POW10[(_48235_exp - 22LL)];
					_48235_exp=22LL;
				}
				if ((_48258_f > 1000000000000000LL) || (_48258_f < -1000000000000000LL)) {
					return std::make_tuple(_48258_f,_48266_ok);
				}
				_48258_f = static_cast<jule::F64>(_48258_f * _1ce235809_F64_POW10[_48235_exp]);
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		else if ((_48235_exp < 0LL) && (_48235_exp >= -22LL)) {
			_case_begin_1b7a962e6:;
			{
				_48258_f = static_cast<jule::F64>(jule::div(_48258_f,_1ce235809_F64_POW10[(-(_48235_exp))]));
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		_match_end_1b7a9612b:;
	}
	return std::make_tuple(_48258_f,_48266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1ce0c849e_atof32exact(jule::U64 _51616_mantissa,jule::I64 _51635_exp,jule::Bool _51649_neg) {
	jule::F32 _51662_f = jule::F32();
	jule::Bool _51670_ok = jule::Bool();
	if (((_51616_mantissa >> _1cde447e3_F32_INFO._field_mantbits) != 0LLU)) {
		return std::make_tuple(_51662_f,_51670_ok);
	}
	_51662_f=static_cast<jule::F32>(static_cast<jule::F32>(_51616_mantissa));
	if (_51649_neg) {
		_51662_f=static_cast<jule::F32>((-(_51662_f)));
	}
	{
		
		if ((_51635_exp == 0LL)) {
			_case_begin_1b7a9bab0:;
			{
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		else if ((_51635_exp > 0LL) && (_51635_exp <= 17LL)) {
			_case_begin_1b7a9bb37:;
			{
				if ((_51635_exp > 10LL)) {
					_51662_f*=_1ce25a0e2_F32_POW10[(_51635_exp - 10LL)];
					_51635_exp=10LL;
				}
				if ((_51662_f > 10000000LL) || (_51662_f < -10000000LL)) {
					return std::make_tuple(_51662_f,_51670_ok);
				}
				_51662_f = static_cast<jule::F32>(_51662_f * _1ce25a0e2_F32_POW10[_51635_exp]);
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		else if ((_51635_exp < 0LL) && (_51635_exp >= -10LL)) {
			_case_begin_1b7a9bbae:;
			{
				_51662_f = static_cast<jule::F32>(jule::div(_51662_f,_1ce25a0e2_F32_POW10[(-(_51635_exp))]));
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		_match_end_1b7a9b9e4:;
	}
	return std::make_tuple(_51662_f,_51670_ok);
}



inline std::tuple<jule::F64,jule::I64> _1ce274c11_atof_hex(jule::Str _55213_s,_1ce045d56_FloatInfo& _55222_flt,jule::U64 _55242_mantissa,jule::I64 _55261_exp,jule::Bool _55271_neg,jule::Bool _55282_trunc) {
	jule::I64 _5539_max_exp = ((static_cast<jule::I64>(1LL << _55222_flt._field_expbits) + _55222_flt._field_bias) - 2LL);
	jule::I64 _5549_min_exp = (_55222_flt._field_bias + 1LL);
	_55261_exp+=static_cast<jule::I64>(static_cast<jule::I64>(_55222_flt._field_mantbits));
	while ((_55242_mantissa != 0LLU) && ((_55242_mantissa >> static_cast<jule::U64>((_55222_flt._field_mantbits + 2LLU))) == 0LLU)) {
		{
			_55242_mantissa<<=1LLU;
			(_55261_exp)--;
		}
	_iter_next_1b7aa1e28:;
	}
	_iter_end_1b7aa1e28:;
	if (_55282_trunc) {
		_55242_mantissa|=1LLU;
	}
	while (((_55242_mantissa >> static_cast<jule::U64>((static_cast<jule::U64>(1LLU + _55222_flt._field_mantbits) + 2LLU))) != 0LLU)) {
		{
			_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>((_55242_mantissa >> 1LLU)) | static_cast<jule::U64>((_55242_mantissa & 1LLU)));
			(_55261_exp)++;
		}
	_iter_next_1b7aa359a:;
	}
	_iter_end_1b7aa359a:;
	while ((_55242_mantissa > 1LLU) && (_55261_exp < static_cast<jule::I64>((_5549_min_exp - 2LL)))) {
		{
			_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>((_55242_mantissa >> 1LLU)) | static_cast<jule::U64>((_55242_mantissa & 1LLU)));
			(_55261_exp)++;
		}
	_iter_next_1b7aa513a:;
	}
	_iter_end_1b7aa513a:;
	jule::U64 _58413_round = (_55242_mantissa & 3LLU);
	_55242_mantissa>>=2LLU;
	_58413_round|=static_cast<jule::U64>((_55242_mantissa & 1LLU));
	_55261_exp+=2LL;
	if ((_58413_round == 3LLU)) {
		(_55242_mantissa)++;
		if (_55242_mantissa == static_cast<jule::U64>(1LLU << static_cast<jule::U64>(1LLU + _55222_flt._field_mantbits))) {
			_55242_mantissa>>=1LLU;
			(_55261_exp)++;
		}
	}
	if (((_55242_mantissa >> _55222_flt._field_mantbits) == 0LLU)) {
		_55261_exp=_55222_flt._field_bias;
	}
	jule::I64 _59913_err = static_cast<jule::I64>(0LL);
	if (_55261_exp > _5539_max_exp) {
		_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(1LL << _55222_flt._field_mantbits));
		_55261_exp=static_cast<jule::I64>((_5539_max_exp + 1LL));
		_59913_err=static_cast<jule::I64>(1LL);
	}
	jule::U64 _60613_bits = _55242_mantissa & static_cast<jule::U64>((static_cast<jule::U64>(1LLU << _55222_flt._field_mantbits) - 1LLU));
	_60613_bits|=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_55261_exp - _55222_flt._field_bias) & static_cast<jule::I64>(static_cast<jule::I64>(((1LL << _55222_flt._field_expbits) - 1LL))))) << _55222_flt._field_mantbits);
	if (_55271_neg) {
		_60613_bits|=static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _55222_flt._field_mantbits) << _55222_flt._field_expbits);
	}
	if (_55222_flt == _1cde447e3_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_1cdda1909_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_60613_bits))))),_59913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_1ce3687c7_f64_from_bits(_60613_bits)),_59913_err);
}



inline std::tuple<jule::F32,jule::I64,jule::I64> _1ce273b44_atof32(jule::Str _61711_s) {
	jule::F32 _61721_f = jule::F32();
	jule::I64 _61729_n = jule::I64();
	jule::I64 _61737_err = 0LL;
	{
		jule::F64 _61914_val;
		jule::I64 _61919__n;
		jule::Bool _61923_ok;
		std::tie(_61914_val,_61919__n,_61923_ok) = _1ce25dc83_special(_61711_s);
		if (_61923_ok) {
			_61721_f = static_cast<jule::F32>(static_cast<jule::F32>(_61914_val));
			_61729_n = _61919__n;
			_61737_err = static_cast<jule::I64>(0LL);
			return std::make_tuple(_61721_f,_61729_n,_61737_err);
		}
	}
	jule::U64 _62510_mantissa;
	jule::I64 _62520_exp;
	jule::Bool _62525_neg;
	jule::Bool _62530_trunc;
	jule::Bool _62537_hex;
	jule::I64 _62542__n;
	jule::Bool _62550_ok;
	std::tie(_62510_mantissa,_62520_exp,_62525_neg,_62530_trunc,_62537_hex,_62542__n,_62550_ok) = _1ce2806cd_read_float(_61711_s);
	_61729_n=_62542__n;
	if ((!(_62550_ok))) {
		_61721_f = 0LL;
		_61737_err = static_cast<jule::I64>(2LL);
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	if (_62537_hex) {
		jule::F64 _63217_ff = 0LL;
		std::tie(_63217_ff,_61737_err) = _1ce274c11_atof_hex(_61711_s.slice(0LL,_61729_n),_1cde447e3_F32_INFO,_62510_mantissa,_62520_exp,_62525_neg,_62530_trunc);
		_61721_f = static_cast<jule::F32>(static_cast<jule::F32>(_63217_ff));
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	{
		if ((!(_62530_trunc))) {
			std::tie(_61721_f,_62550_ok) = _1ce0c849e_atof32exact(_62510_mantissa,_62520_exp,_62525_neg);
			if (_62550_ok) {
				_61737_err = static_cast<jule::I64>(0LL);
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
		}
		std::tie(_61721_f,_62550_ok) = _1ce06ad15_eisel_lemire32(_62510_mantissa,_62520_exp,_62525_neg);
		if (_62550_ok) {
			if ((!(_62530_trunc))) {
				_61737_err = static_cast<jule::I64>(0LL);
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
			jule::F32 _65421_f_up = 0LL;
			std::tie(_65421_f_up,_62550_ok) = _1ce06ad15_eisel_lemire32(static_cast<jule::U64>((_62510_mantissa + 1LLU)),_62520_exp,_62525_neg);
			if (_62550_ok && (_61721_f == _65421_f_up)) {
				_61737_err = static_cast<jule::I64>(0LL);
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
		}
	}
	_1cde2b80d_Decimal _66313_d = _1cde2b80d_Decimal();
	if ((!(_66313_d._method_set(_61711_s.slice(0LL,_61729_n))))) {
		_61721_f = 0LL;
		_61737_err = static_cast<jule::I64>(2LL);
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	jule::U64 _66710_b;
	jule::Bool _66713_ovf;
	std::tie(_66710_b,_66713_ovf) = _66313_d._method_float_bits(_1cde447e3_F32_INFO);
	_61721_f=static_cast<jule::F32>(_1cdda1909_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_66710_b))));
	if (_66713_ovf) {
		_61737_err=static_cast<jule::I64>(1LL);
	}
	return std::make_tuple(_61721_f,_61729_n,_61737_err);
}



inline std::tuple<jule::F64,jule::I64,jule::I64> _1ce2d4a1d_atof64(jule::Str _67511_s) {
	jule::F64 _67521_f = jule::F64();
	jule::I64 _67529_n = jule::I64();
	jule::I64 _67537_err = 0LL;
	{
		jule::F64 _67714_val;
		jule::I64 _67719__n;
		jule::Bool _67723_ok;
		std::tie(_67714_val,_67719__n,_67723_ok) = _1ce25dc83_special(_67511_s);
		if (_67723_ok) {
			_67521_f = _67714_val;
			_67529_n = _67719__n;
			_67537_err = static_cast<jule::I64>(0LL);
			return std::make_tuple(_67521_f,_67529_n,_67537_err);
		}
	}
	jule::U64 _68310_mantissa;
	jule::I64 _68320_exp;
	jule::Bool _68325_neg;
	jule::Bool _68330_trunc;
	jule::Bool _68337_hex;
	jule::I64 _68342__n;
	jule::Bool _68350_ok;
	std::tie(_68310_mantissa,_68320_exp,_68325_neg,_68330_trunc,_68337_hex,_68342__n,_68350_ok) = _1ce2806cd_read_float(_67511_s);
	_67529_n=_68342__n;
	if ((!(_68350_ok))) {
		_67521_f = 0LL;
		_67537_err = static_cast<jule::I64>(2LL);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	if (_68337_hex) {
		std::tie(_67521_f,_67537_err) = _1ce274c11_atof_hex(_67511_s.slice(0LL,_67529_n),_1cde619db_F64_INFO,_68310_mantissa,_68320_exp,_68325_neg,_68330_trunc);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	{
		if ((!(_68330_trunc))) {
			std::tie(_67521_f,_68350_ok) = _1cdda5a40_atof64exact(_68310_mantissa,_68320_exp,_68325_neg);
			if (_68350_ok) {
				_67537_err = static_cast<jule::I64>(0LL);
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
		}
		std::tie(_67521_f,_68350_ok) = _1ce0391bd_eisel_lemire64(_68310_mantissa,_68320_exp,_68325_neg);
		if (_68350_ok) {
			if ((!(_68330_trunc))) {
				_67537_err = static_cast<jule::I64>(0LL);
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
			jule::F64 _71121_f_up = 0LL;
			std::tie(_71121_f_up,_68350_ok) = _1ce0391bd_eisel_lemire64(static_cast<jule::U64>((_68310_mantissa + 1LLU)),_68320_exp,_68325_neg);
			if (_68350_ok && (_67521_f == _71121_f_up)) {
				_67537_err = static_cast<jule::I64>(0LL);
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
		}
	}
	_1cde2b80d_Decimal _72013_d = _1cde2b80d_Decimal();
	if ((!(_72013_d._method_set(_67511_s.slice(0LL,_67529_n))))) {
		_67521_f = 0LL;
		_67537_err = static_cast<jule::I64>(2LL);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	jule::U64 _72410_b;
	jule::Bool _72413_ovf;
	std::tie(_72410_b,_72413_ovf) = _72013_d._method_float_bits(_1cde619db_F64_INFO);
	_67521_f=static_cast<jule::F64>(_1ce3687c7_f64_from_bits(_72410_b));
	if (_72413_ovf) {
		_67537_err=static_cast<jule::I64>(1LL);
	}
	return std::make_tuple(_67521_f,_67529_n,_67537_err);
}



inline std::tuple<jule::F64,jule::I64,jule::I64> _1ce3072e3_parse_float_prefix(jule::Str _73223_s,jule::I64 _73231_bit_size) {
	if ((_73231_bit_size == 32LL)) {
		jule::F32 _73414_f;
		jule::I64 _73417_n;
		jule::I64 _73420_err;
		std::tie(_73414_f,_73417_n,_73420_err) = _1ce273b44_atof32(_73223_s);
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_73414_f)),_73417_n,_73420_err);
	}
	jule::F64 _73810_f;
	jule::I64 _73813_n;
	jule::I64 _73816_err;
	std::tie(_73810_f,_73813_n,_73816_err) = _1ce2d4a1d_atof64(_73223_s);
	return std::make_tuple(_73810_f,_73813_n,_73816_err);
}



inline jule::Exceptional<jule::F64> _1cde2c028_parse_float(jule::Str _76620_s,jule::I64 _76628_bit_size) {
	jule::F64 _76710_f;
	jule::I64 _76713_n;
	jule::I64 _76716_err;
	std::tie(_76710_f,_76713_n,_76716_err) = _1ce3072e3_parse_float_prefix(_76620_s,_76628_bit_size);
	if ((_76713_n != static_cast<jule::I64>(_76620_s.len())) && ((_76716_err == static_cast<jule::I64>(0LL)) || (_76716_err != static_cast<jule::I64>(2LL)))) {
		return jule::Exceptional<jule::F64>(static_cast<jule::I64>(2LL));
	}
	if (_76716_err != static_cast<jule::I64>(0LL)) {
		return jule::Exceptional<jule::F64>(_76716_err);
	}
	return jule::Exceptional<jule::F64>(jule::Any(),_76710_f);
}



inline void _1cdddea13_ryu_ftoa_fixed32(_1cde9edae_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::I64 _4958_exp,jule::I64 _4968_prec) {
	if ((_4968_prec < 0LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: std/conv/ftoaryu.jule:51:9"));;
	}
	if ((_4968_prec > 9LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: std/conv/ftoaryu.jule:54:9"));;
	}
	if ((_4947_mant == 0LLU)) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::I64 _6213_e2 = _4958_exp;
	jule::I64 _639_b = _1ce4316a3_len32(_4947_mant);
	if ((_639_b < 25LL)) {
		_4947_mant<<=static_cast<jule::U64>(static_cast<jule::U64>(25LL - _639_b));
		_6213_e2+=static_cast<jule::I64>((static_cast<jule::I64>(static_cast<jule::I64>(_639_b)) - 25LL));
	}
	jule::I64 _749_q = (((-(_1cde4388b_mul_by_log2_log10(static_cast<jule::I64>((_6213_e2 + 24LL))))) + _4968_prec) - 1LL);
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::I64 _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _1ce180dc5_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if ((_8118_dexp2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: std/conv/ftoaryu.jule:83:9"));;
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _1ce2d6b41_divisible_by_pow5(static_cast<jule::U64>(static_cast<jule::U64>(_4947_mant)),static_cast<jule::I64>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::U64 _949_extra = static_cast<jule::U64>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>(((1LL << _949_extra) - 1LL));
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > static_cast<jule::U32>(1LLU << static_cast<jule::U64>((_949_extra - 1LLU)))) || ((_9713_dfrac == static_cast<jule::U32>(1LLU << static_cast<jule::U64>((_949_extra - 1LLU)))) && (!(_8129_d0)))) || (((_9713_dfrac == static_cast<jule::U32>(1LLU << static_cast<jule::U64>((_949_extra - 1LLU)))) && _8129_d0) && ((_8114_di & 1LLU) == 1LLU));
	} else {
		_9913_round_up=((_9713_dfrac >> static_cast<jule::U64>((_949_extra - 1LLU))) == 1LLU);
	}
	if ((_9713_dfrac != 0LLU)) {
		_8129_d0=false;
	}
	_1cddbb209_format_decimal(_4926_d,static_cast<jule::U64>(static_cast<jule::U64>(_8114_di)),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _1ce35d47b_ryu_ftoa_fixed64(_1cde9edae_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::I64 _12358_exp,jule::I64 _12368_prec) {
	if ((_12368_prec > 18LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: std/conv/ftoaryu.jule:125:9"));;
	}
	if ((_12347_mant == 0LLU)) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::I64 _13313_e2 = _12358_exp;
	jule::I64 _1349_b = _1ce431a6b_len64(_12347_mant);
	if ((_1349_b < 55LL)) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::U64>(static_cast<jule::U64>(55LL - _1349_b)));
		_13313_e2+=static_cast<jule::I64>((static_cast<jule::I64>(static_cast<jule::I64>(_1349_b)) - 55LL));
	}
	jule::I64 _1489_q = (((-(_1cde4388b_mul_by_log2_log10(static_cast<jule::I64>((_13313_e2 + 54LL))))) + _12368_prec) - 1LL);
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::I64 _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _1ce1e0e02_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if ((_15518_dexp2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: std/conv/ftoaryu.jule:157:9"));;
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _1ce2d6b41_divisible_by_pow5(_12347_mant,static_cast<jule::I64>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::U64 _1689_extra = static_cast<jule::U64>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>(((1LL << _1689_extra) - 1LL));
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > static_cast<jule::U64>(1LLU << static_cast<jule::U64>((_1689_extra - 1LLU)))) || ((_17113_dfrac == static_cast<jule::U64>(1LLU << static_cast<jule::U64>((_1689_extra - 1LLU)))) && (!(_15529_d0)))) || (((_17113_dfrac == static_cast<jule::U64>(1LLU << static_cast<jule::U64>((_1689_extra - 1LLU)))) && _15529_d0) && ((_15514_di & 1LLU) == 1LLU));
	} else {
		_17313_round_up=((_17113_dfrac >> static_cast<jule::U64>((_1689_extra - 1LLU))) == 1LLU);
	}
	if ((_17113_dfrac != 0LLU)) {
		_15529_d0=false;
	}
	_1cddbb209_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _1cddbb209_format_decimal(_1cde9edae_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::I64 _20490_prec) {
	jule::U64 _2059_max = _1ce27a321_U64_POW10[_20490_prec];
	jule::I64 _20613_trimmed = 0LL;
	while (_20445_m >= _2059_max) {
		{
			jule::U64 _20814_a = (_20445_m / 10LLU);
			jule::U64 _20817_b = (_20445_m % 10LL);
			std::tie(_20814_a,_20817_b) = std::make_tuple((_20445_m / 10LLU),(_20445_m % 10LL));
			_20445_m=_20814_a;
			(_20613_trimmed)++;
			if ((_20817_b > 5LLU)) {
				_20474_round_up=true;
			} else if ((_20817_b < 5LLU)) {
				_20474_round_up=false;
			} else {
				_20474_round_up=_20457_trunc || ((_20445_m & 1LLU) == 1LLU);
			}
			if ((_20817_b != 0LLU)) {
				_20457_trunc=true;
			}
		}
	_iter_next_1b7ae4c29:;
	}
	_iter_end_1b7ae4c29:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m/=10LLU;
		(_20613_trimmed)++;
	}
	jule::U64 _23313_n = static_cast<jule::U64>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::I64>(static_cast<jule::I64>(_20490_prec));
	jule::U64 _23513_v = _20445_m;
	while ((_23513_v >= 100LLU)) {
		{
			jule::U64 _23717_v1 = 0LLU;
			jule::U64 _23817_v2 = 0LLU;
			if (((_23513_v >> 32LLU) == 0LLU)) {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U32>(_23513_v) / 100LLU))),static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U32>(_23513_v) % 100LL))));
			} else {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>((_23513_v / 100LLU)),static_cast<jule::U64>((_23513_v % 100LL)));
			}
			_23313_n-=2LLU;
			_20424_d._field_d[static_cast<jule::I64>((_23313_n + 1LLU))]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(((2LL * _23817_v2) + 1LLU))]);
			_20424_d._field_d[static_cast<jule::I64>((_23313_n + 0LLU))]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(((2LL * _23817_v2) + 0LLU))]);
			_23513_v=_23717_v1;
		}
	_iter_next_1b7ae48d8:;
	}
	_iter_end_1b7ae48d8:;
	if ((_23513_v > 0LLU)) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::I64>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(((2LL * _23513_v) + 1LLU))]);
	}
	if ((_23513_v >= 10LLU)) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::I64>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(2LL * _23513_v)]);
	}
	while (_20424_d._field_d[(_20424_d._field_nd - 1LL)] == '0') {
		{
			(_20424_d._field_nd)--;
			(_20613_trimmed)++;
		}
	_iter_next_1b5dad9a6:;
	}
	_iter_end_1b5dad9a6:;
	_20424_d._field_dp=static_cast<jule::I64>(_20424_d._field_nd + _20613_trimmed);
}



inline void _1cdde09c0_ryu_ftoa_shortest(_1cde9edae_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::I64 _26559_exp,_1ce045d56_FloatInfo& _26570_flt) {
	if ((_26548_mant == 0LLU)) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_1ce4295ad_trailing_zeros64(_26548_mant) >= static_cast<jule::I64>((-(_26559_exp))))) {
		_26548_mant>>=static_cast<jule::U64>(static_cast<jule::U64>((-(_26559_exp))));
		_1ce0959ee_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::I64 _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _1ce005e04_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if ((_27726_e2 == 0LL)) {
		_1ce0959ee_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::I64 _2839_q = (_1cde4388b_mul_by_log2_log10(static_cast<jule::I64>((-(_27726_e2)))) + 1LL);
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _1cde447e3_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _1ce180dc5_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27710_ml)),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _1ce180dc5_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27714_mc)),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _1ce180dc5_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27718_mu)),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(_29417_dl32)),static_cast<jule::U64>(static_cast<jule::U64>(_29517_dc32)),static_cast<jule::U64>(static_cast<jule::U64>(_29617_du32)));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _1ce1e0e02_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _1ce1e0e02_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _1ce1e0e02_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if ((_27726_e2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: std/conv/ftoaryu.jule:307:9"));;
	}
	if ((_2839_q > 55LL)) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_1ce2d6b41_divisible_by_pow5(_27710_ml,static_cast<jule::I64>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_1ce2d6b41_divisible_by_pow5(_27714_mc,static_cast<jule::I64>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_1ce2d6b41_divisible_by_pow5(_27718_mu,static_cast<jule::I64>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::U64 _3299_extra = static_cast<jule::U64>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>(((1LL << _3299_extra) - 1LL));
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LLU);
	if (_29213_du0 && (_33613_fracu == 0LLU)) {
		_34213_uok=((_26548_mant & 1LLU) == 0LLU);
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > static_cast<jule::U64>(1LLU << static_cast<jule::U64>((_3299_extra - 1LLU)))) || ((_33413_fracc == static_cast<jule::U64>(1LLU << static_cast<jule::U64>((_3299_extra - 1LLU)))) && ((_28813_dc & 1LLU) == 1LLU));
	} else {
		_35113_cup=((_33413_fracc >> static_cast<jule::U64>((_3299_extra - 1LLU))) == 1LLU);
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LLU)) && ((_26548_mant & 1LLU) == 0LLU);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LLU);
	_1ce0959ee_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::I64 _1cde4388b_mul_by_log2_log10(jule::I64 _38322_x) {
	return static_cast<jule::I64>((static_cast<jule::I64>((_38322_x * 78913LL)) >> 18LL));
}



inline jule::I64 _1cdea4116_mul_by_log10_log2(jule::I64 _39322_x) {
	return static_cast<jule::I64>((static_cast<jule::I64>((_39322_x * 108853LL)) >> 15LL));
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::I64> _1ce005e04_compute_bounds(jule::U64 _40119_mant,jule::I64 _40130_exp,_1ce045d56_FloatInfo& _40218_flt) {
	jule::U64 _40236_lower = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40262_upper = jule::U64();
	jule::I64 _40274_e2 = jule::I64();
	if ((_40119_mant != static_cast<jule::U64>(1LLU << _40218_flt._field_mantbits)) || (_40130_exp == static_cast<jule::I64>(static_cast<jule::I64>((_40218_flt._field_bias + 1LL)) - static_cast<jule::I64>(static_cast<jule::I64>(_40218_flt._field_mantbits))))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((static_cast<jule::U64>(2LLU * _40119_mant) - 1LLU)),static_cast<jule::U64>(2LLU * _40119_mant),static_cast<jule::U64>((static_cast<jule::U64>(2LLU * _40119_mant) + 1LLU)));
		_40274_e2=static_cast<jule::I64>((_40130_exp - 1LL));
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((static_cast<jule::U64>(4LLU * _40119_mant) - 1LLU)),static_cast<jule::U64>(4LLU * _40119_mant),static_cast<jule::U64>((static_cast<jule::U64>(4LLU * _40119_mant) + 2LLU)));
		_40274_e2=static_cast<jule::I64>((_40130_exp - 2LL));
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _1ce0959ee_ryu_digits(_1cde9edae_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _1ce13582a_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _1ce13582a_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _1ce13582a_divmod1e9(_41563_upper);
	if ((_41810_uhi == 0LLU)) {
		_1ce1320eb_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if ((_41619_llo != 0LLU)) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LLU);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_1ce1320eb_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::U64 _43417_n = static_cast<jule::U64>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		while ((_43517_v > 0LLU)) {
			{
				jule::U32 _43718_v1 = (_43517_v / 10LLU);
				jule::U32 _43722_v2 = (_43517_v % 10LL);
				std::tie(_43718_v1,_43722_v2) = std::make_tuple((_43517_v / 10LLU),(_43517_v % 10LL));
				_43517_v=_43718_v1;
				(_43417_n)--;
				_41520_d._field_d[static_cast<jule::I64>(_43417_n)]=static_cast<jule::U8>(static_cast<jule::U8>(_43722_v2 + '0'));
			}
		_iter_next_1b5dd3c84:;
		}
		_iter_end_1b5dd3c84:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::I64>(_43417_n));
		_41520_d._field_nd=static_cast<jule::I64>(static_cast<jule::I64>(9LL - _43417_n));
		_1ce1320eb_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::I64>((_41520_d._field_nd + 8LL)));
	}
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[(_41520_d._field_nd - 1LL)] == '0')) {
		{
			(_41520_d._field_nd)--;
		}
	_iter_next_1b5dd459d:;
	}
	_iter_end_1b5dd459d:;
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0')) {
		{
			(_41520_d._field_nd)--;
			(_41520_d._field_dp)--;
			_41520_d._field_d=_41520_d._field_d.slice(1LL);
		}
	_iter_next_1b5dd4823:;
	}
	_iter_end_1b5dd4823:;
}



inline void _1ce1320eb_ryu_digits32(_1cde9edae_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::I64 _46166_endindex) {
	if ((_46121_upper == 0LLU)) {
		_46022_d._field_dp=static_cast<jule::I64>((_46166_endindex + 1LL));
		return;
	}
	jule::I64 _46613_trimmed = 0LL;
	jule::I64 _46913_c_next_digit = 0LL;
	while ((_46121_upper > 0LLU)) {
		{
			jule::U32 _47613_l = ((_46043_lower + 9LLU) / 10LLU);
			jule::U32 _47718_c = (_46059_central / 10LLU);
			jule::U32 _47725_cdigit = (_46059_central % 10LL);
			std::tie(_47718_c,_47725_cdigit) = std::make_tuple((_46059_central / 10LLU),(_46059_central % 10LL));
			jule::U32 _47813_u = (_46121_upper / 10LLU);
			if (_47613_l > _47813_u) {
				goto _iter_end_1b5dda40b;
			}
			if ((_47613_l == static_cast<jule::U32>((_47718_c + 1LLU))) && (_47718_c < _47813_u)) {
				(_47718_c)++;
				_47725_cdigit=0LLU;
				_46151_cup=false;
			}
			(_46613_trimmed)++;
			_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
			_46913_c_next_digit=static_cast<jule::I64>(static_cast<jule::I64>(_47725_cdigit));
			std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
		}
	_iter_next_1b5dda40b:;
	}
	_iter_end_1b5dda40b:;
	if ((_46613_trimmed > 0LL)) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LLU) == 1LLU));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::I64 _51813_n = _46166_endindex;
	while (_51813_n > _46022_d._field_nd) {
		{
			jule::U32 _52014_v1 = (_51713_v / 100LLU);
			jule::U32 _52018_v2 = (_51713_v % 100LL);
			std::tie(_52014_v1,_52018_v2) = std::make_tuple((_51713_v / 100LLU),(_51713_v % 100LL));
			_46022_d._field_d[_51813_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(((2LL * _52018_v2) + 1LLU))]);
			_46022_d._field_d[(_51813_n - 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(((2LL * _52018_v2) + 0LLU))]);
			_51813_n-=2LL;
			_51713_v=_52014_v1;
		}
	_iter_next_1b5de1e5c:;
	}
	_iter_end_1b5de1e5c:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[_51813_n]=static_cast<jule::U8>(static_cast<jule::U8>(_51713_v + '0'));
	}
	_46022_d._field_nd=static_cast<jule::I64>((_46166_endindex + 1LL));
	_46022_d._field_dp=static_cast<jule::I64>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::I64,jule::Bool> _1ce180dc5_mult64bit_pow10(jule::U32 _54220_m,jule::I64 _54232_e2,jule::I64 _54241_q) {
	jule::U32 _54251_resM = jule::U32();
	jule::I64 _54262_resE = jule::I64();
	jule::Bool _54273_exact = jule::Bool();
	if ((_54241_q == 0LL)) {
		_54251_resM = static_cast<jule::U32>((_54220_m << 6LLU));
		_54262_resE = static_cast<jule::I64>((_54232_e2 - 6LL));
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: std/conv/ftoaryu.jule:549:9"));;
	}
	jule::U64 _55113_pow = _1ce1c824c_DETAILED_POWS_OF_TEN[(_54241_q - -348LL)][1LL];
	if ((_54241_q < 0LL)) {
		_55113_pow+=1LLU;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _1ce435388_mul64(static_cast<jule::U64>(static_cast<jule::U64>(_54220_m)),_55113_pow);
	_54232_e2+=static_cast<jule::I64>((static_cast<jule::I64>((static_cast<jule::I64>(_1cdea4116_mul_by_log10_log2(_54241_q)) - 63LL)) + 57LL));
	_54251_resM = static_cast<jule::U32>(static_cast<jule::U32>((_55610_hi << 7LLU) | static_cast<jule::U64>((_55614_lo >> 57LLU))));
	_54262_resE = _54232_e2;
	_54273_exact = ((_55614_lo << 7LLU) == 0LLU);
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::I64,jule::Bool> _1ce1e0e02_mult128bit_pow10(jule::U64 _57021_m,jule::I64 _57033_e2,jule::I64 _57042_q) {
	jule::U64 _57052_resM = jule::U64();
	jule::I64 _57063_resE = jule::I64();
	jule::Bool _57074_exact = jule::Bool();
	if ((_57042_q == 0LL)) {
		_57052_resM = static_cast<jule::U64>((_57021_m << 8LLU));
		_57063_resE = static_cast<jule::I64>((_57033_e2 - 8LL));
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: std/conv/ftoaryu.jule:577:9"));;
	}
	jule::Array<jule::U64,2> _57913_pow = _1ce1c824c_DETAILED_POWS_OF_TEN[(_57042_q - -348LL)];
	if ((_57042_q < 0LL)) {
		_57913_pow[0LL]+=1LLU;
	}
	_57033_e2+=static_cast<jule::I64>((static_cast<jule::I64>((static_cast<jule::I64>(_1cdea4116_mul_by_log10_log2(_57042_q)) - 127LL)) + 119LL));
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _1ce435388_mul64(_57021_m,_57913_pow[0LL]);
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _1ce435388_mul64(_57021_m,_57913_pow[1LL]);
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _1ce4327a3_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>(static_cast<jule::U64>((_58814_h1 << 9LLU)) | static_cast<jule::U64>((_58910_mid >> 55LLU)));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LLU) == 0LLU) && (_58714_l0 == 0LLU);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _1ce2d6b41_divisible_by_pow5(jule::U64 _59426_m,jule::I64 _59434_k) {
	if ((_59426_m == 0LLU)) {
		return true;
	}
	jule::I64 _59813_i = 0LL;
	for (; _59813_i < _59434_k; (_59813_i)++) {
		{
			if (((_59426_m % 5LL) != 0LLU)) {
				return false;
			}
			_59426_m/=5LLU;
		}
	_iter_next_1b7b9d343:;
	}
	_iter_end_1b7b9d343:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _1ce13582a_divmod1e9(jule::U64 _61014_x) {
	{
		return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>((_61014_x / 1000000000LL))),static_cast<jule::U32>(static_cast<jule::U32>((_61014_x % 1000000000LL))));
	}
	jule::U64 _61510_hi;
	std::tie(_61510_hi,std::ignore) = _1ce435388_mul64(static_cast<jule::U64>((_61014_x >> 1LLU)),9903520314283042200LLU);
	jule::U64 _6169_q = (_61510_hi >> 28LLU);
	return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>(_6169_q)),static_cast<jule::U32>(static_cast<jule::U32>(_61014_x - static_cast<jule::U64>((_6169_q * 1000000000LL)))));
}



inline void _1cde7327d_trim(_1cde2b80d_Decimal& _27514_a) {
	while ((_27514_a._field_nd > 0LL) && (_27514_a._field_d[(_27514_a._field_nd - 1LL)] == '0')) {
		{
			(_27514_a._field_nd)--;
		}
	_iter_next_1b7ba20e4:;
	}
	_iter_end_1b7ba20e4:;
	if ((_27514_a._field_nd == 0LL)) {
		_27514_a._field_dp=0LL;
	}
}



inline void _1ce349005_right_shift(_1cde2b80d_Decimal& _28521_a,jule::U64 _28533_k) {
	jule::I64 _28613_r = 0LL;
	jule::I64 _28713_w = 0LL;
	jule::U64 _29013_n = 0LLU;
	for (; ((_29013_n >> _28533_k) == 0LLU); (_28613_r)++) {
		{
			if (_28613_r >= _28521_a._field_nd) {
				if ((_29013_n == 0LLU)) {
					_28521_a._field_nd=0LL;
					return;
				}
				while (((_29013_n >> _28533_k) == 0LLU)) {
					{
						_29013_n=static_cast<jule::U64>((_29013_n * 10LLU));
						(_28613_r)++;
					}
				_iter_next_1b7ba5812:;
				}
				_iter_end_1b7ba5812:;
				goto _iter_end_1b7ba4558;
			}
			jule::U64 _30413_c = static_cast<jule::U64>(_28521_a._field_d[_28613_r]);
			_29013_n=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_29013_n * 10LLU)) + _30413_c) - '0');
		}
	_iter_next_1b7ba4558:;
	}
	_iter_end_1b7ba4558:;
	_28521_a._field_dp-=static_cast<jule::I64>((_28613_r - 1LL));
	jule::U64 _3099_mask = static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(1LL << _28533_k)) - 1LLU));
	for (; _28613_r < _28521_a._field_nd; (_28613_r)++) {
		{
			jule::U64 _31313_c = static_cast<jule::U64>(_28521_a._field_d[_28613_r]);
			jule::U64 _31413_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_31413_dig + '0'));
			(_28713_w)++;
			_29013_n=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_29013_n * 10LLU)) + _31313_c) - '0');
		}
	_iter_next_1b7ba7d42:;
	}
	_iter_end_1b7ba7d42:;
	while ((_29013_n > 0LLU)) {
		{
			jule::U64 _32313_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			if ((_28713_w < 800LL)) {
				_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_32313_dig + '0'));
				(_28713_w)++;
			} else if ((_32313_dig > 0LLU)) {
				_28521_a._field_trunc=true;
			}
			_29013_n=static_cast<jule::U64>((_29013_n * 10LLU));
		}
	_iter_next_1b7baa74b:;
	}
	_iter_end_1b7baa74b:;
	_28521_a._field_nd=_28713_w;
	_1cde7327d_trim(_28521_a);
}



inline jule::Bool _1ce35ab1b_prefix_is_less_than(jule::Array<jule::U8,800> _33924_b,jule::I64 _33938_end,jule::Str _33948_s) {
	jule::I64 _34013_i = 0LL;
	for (; _34013_i < static_cast<jule::I64>(_33948_s.len()); (_34013_i)++) {
		{
			if (_34013_i >= _33938_end) {
				return true;
			}
			if (_33924_b[_34013_i] != _33948_s[_34013_i]) {
				return _33924_b[_34013_i] < _33948_s[_34013_i];
			}
		}
	_iter_next_1b7bad331:;
	}
	_iter_end_1b7bad331:;
	return false;
}



inline void _1ce317996_left_shift(_1cde2b80d_Decimal& _35320_a,jule::U64 _35332_k) {
	jule::I64 _35413_delta = _1cddb9119_LEFTCHEATS[static_cast<jule::I64>(_35332_k)]._field_delta;
	if (_1ce35ab1b_prefix_is_less_than(_35320_a._field_d,_35320_a._field_nd,_1cddb9119_LEFTCHEATS[static_cast<jule::I64>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::I64 _35913_r = _35320_a._field_nd;
	jule::I64 _36013_w = _35320_a._field_nd + _35413_delta;
	jule::U64 _36313_n = 0LLU;
	(_35913_r)--;
	for (; (_35913_r >= 0LL); (_35913_r)--) {
		{
			_36313_n+=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_35320_a._field_d[_35913_r])) - '0') << _35332_k);
			jule::U64 _36713_quo = (_36313_n / 10LLU);
			jule::U64 _36813_rem = _36313_n - static_cast<jule::U64>(10LLU * _36713_quo);
			(_36013_w)--;
			if ((_36013_w < 800LL)) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_36813_rem + '0'));
			} else if ((_36813_rem != 0LLU)) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_36713_quo;
		}
	_iter_next_1b7bb1c91:;
	}
	_iter_end_1b7bb1c91:;
	while ((_36313_n > 0LLU)) {
		{
			jule::U64 _38013_quo = (_36313_n / 10LLU);
			jule::U64 _38113_rem = _36313_n - static_cast<jule::U64>(10LLU * _38013_quo);
			(_36013_w)--;
			if ((_36013_w < 800LL)) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_38113_rem + '0'));
			} else if ((_38113_rem != 0LLU)) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_38013_quo;
		}
	_iter_next_1b7bb3cc6:;
	}
	_iter_end_1b7bb3cc6:;
	_35320_a._field_nd+=_35413_delta;
	if ((_35320_a._field_nd >= 800LL)) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_1cde7327d_trim(_35320_a);
}



inline jule::Bool _1cde60ad9_should_round_up(_1cde2b80d_Decimal& _40021_a,jule::I64 _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[_40033_nd] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (((_40021_a._field_d[(_40033_nd - 1LL)] - '0') & 1LL) != 0LLU);
	}
	return _40021_a._field_d[_40033_nd] >= '5';
}



inline jule::Str _1ce276eee_fmt_uint(jule::U64 _6217_i,jule::I64 _6225_base) {
	if ((true && (_6217_i < 100LLU)) && (_6225_base == 10LL)) {
		return _1cde2cd1a_small(static_cast<jule::I64>(static_cast<jule::I64>(_6217_i)));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _1cddb9d73_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _1ce27c510_fmt_int(jule::I64 _7316_i,jule::I64 _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _1cde2cd1a_small(static_cast<jule::I64>(static_cast<jule::I64>(_7316_i)));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _1cddb9d73_fmt_bits(nullptr,static_cast<jule::U64>(static_cast<jule::U64>(_7316_i)),_7324_base,(_7316_i < 0LL),false);
	return _7713_s;
}



inline jule::Str _1cde2b4ab_itoa(jule::I64 _8213_i) {
	return _1ce27c510_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_8213_i)),10LL);
}



inline jule::Str _1cde2cd1a_small(jule::I64 _8710_i) {
	if ((_8710_i < 10LL)) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8710_i,(_8710_i + 1LL));
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(_8710_i << 1LLU,((_8710_i << 1LLU) + 2LL));
}



inline jule::Bool _1cddb9bca_is_power_of_two(jule::I64 _9420_x) {
	return ((_9420_x & static_cast<jule::I64>((_9420_x - 1LL))) == 0LL);
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1cddb9d73_fmt_bits(jule::Slice<jule::U8> _10317_dst,jule::U64 _10334_u,jule::I64 _10342_base,jule::Bool _10353_neg,jule::Bool _10364_append_) {
	jule::Slice<jule::U8> _10381_d = jule::Slice<jule::U8>();
	jule::Str _10392_s = jule::Str();
	if ((_10342_base < 2LL) || (_10342_base > 36LL)) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: std/conv/itoa.jule:105:9"));;
	}
	jule::Slice<jule::U8> _10913_a = jule::Slice<jule::U8>::alloc(65LL);
	jule::I64 _11013_i = _10913_a.len();
	if (_10353_neg) {
		_10334_u=static_cast<jule::U64>((-(_10334_u)));
	}
	if ((_10342_base == 10LL)) {
		
		jule::U64 _15117_us = static_cast<jule::U64>(_10334_u);
		while ((_15117_us >= 100LLU)) {
			{
				jule::U64 _15317_is = (_15117_us % 100LL) << 1LLU;
				_15117_us/=100LLU;
				_11013_i-=2LL;
				_10913_a[(_11013_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>((_15317_is + 1LLU))]);
				_10913_a[(_11013_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>((_15317_is + 0LLU))]);
			}
		_iter_next_1b7bc6305:;
		}
		_iter_end_1b7bc6305:;
		jule::U64 _16113_is = _15117_us << 1LLU;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>((_16113_is + 1LLU))]);
		if ((_15117_us >= 10LLU)) {
			(_11013_i)--;
			_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I64>(_16113_is)]);
		}
	} else if (_1cddb9bca_is_power_of_two(_10342_base)) {
		jule::U64 _17613_shift = (static_cast<jule::U64>(_1ce4284e1_trailing_zeros(static_cast<jule::U64>(static_cast<jule::U64>(_10342_base)))) & 7LLU);
		jule::U64 _17713_b = static_cast<jule::U64>(_10342_base);
		jule::U64 _17813_m = (static_cast<jule::U64>(_10342_base) - 1LLU);
		while (_10334_u >= _17713_b) {
			{
				(_11013_i)--;
				_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I64>(static_cast<jule::U64>(_10334_u) & _17813_m)]);
				_10334_u>>=_17613_shift;
			}
		_iter_next_1b7bd062d:;
		}
		_iter_end_1b7bd062d:;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I64>(static_cast<jule::U64>(_10334_u))]);
	} else {
		jule::U64 _18913_b = static_cast<jule::U64>(_10342_base);
		while (_10334_u >= _18913_b) {
			{
				(_11013_i)--;
				jule::U64 _19517_q = jule::div(_10334_u,_18913_b);
				_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I64>(static_cast<jule::U64>(_10334_u - static_cast<jule::U64>(_19517_q * _18913_b)))]);
				_10334_u=_19517_q;
			}
		_iter_next_1b7bcebb0:;
		}
		_iter_end_1b7bcebb0:;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I64>(static_cast<jule::U64>(_10334_u))]);
	}
	if (_10353_neg) {
		(_11013_i)--;
		_10913_a[_11013_i]='-';
	}
	if (_10364_append_) {
		_10381_d=jule::append(_10317_dst,_10913_a.slice(_11013_i));
		return std::make_tuple(_10381_d,_10392_s);
	}
	_10392_s=static_cast<jule::Str>(_10913_a.slice(_11013_i));
	return std::make_tuple(_10381_d,_10392_s);
}



inline void _1ce4b8020_lshift_unsig(_1ce4b898d_Const& _56722_c,_1ce4b898d_Const& _56733_x) {
	jule::U64 _5689_l = _56722_c._method_as_u64();
	jule::U64 _5699_r = _56733_x._method_as_u64();
	_56722_c._method_set_u64(static_cast<jule::U64>(_5689_l << _5699_r));
}



inline void _1ce4b81b8_rshift_unsig(_1ce4b898d_Const& _57322_c,_1ce4b898d_Const& _57333_x) {
	jule::U64 _5749_l = _57322_c._method_as_u64();
	jule::U64 _5759_r = _57333_x._method_as_u64();
	_57322_c._method_set_u64(static_cast<jule::U64>(_5749_l >> _5759_r));
}



inline jule::Str _1ce673780_real_kind_of(jule::Str _4521_kind) {
	{
		auto &_match_expr{ _4521_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1b7c6d7ed:;
			{
				return _1ce67284a_SYS_INT;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_1b7c6d864:;
			{
				return _1ce67298d_SYS_UINT;
			}
		}
		else {
			_case_begin_1b7c68991:;
			{
				return _4521_kind;
			}
		}
		_match_end_1b7c6d0a0:;
	}
}



inline jule::I64 _1ce673c9c_bitsize_of(jule::Str _5919_k) {
	{
		auto &_match_expr{ _5919_k };
		
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_1b7c6e887:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_1b7c6e8ed:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_1b7c6e9a8:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_1b7c6ea1e:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_1b7c6ea85:;
			{
				return _1ce672707_BIT_SIZE;
			}
		}
		else {
			_case_begin_1b7c6db2d:;
			{
				return -1LL;
			}
		}
		_match_end_1b7c6da1d:;
	}
}



inline jule::Str _1ce674154_int_from_bits(jule::I64 _8622_bits) {
	{
		auto &_match_expr{ _8622_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_1b7c71a32:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_1b7c71b0e:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_1b7c71b75:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1b7c71bdb:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_1b7c71636:;
			{
				return jule::Str();
			}
		}
		_match_end_1b7c712d4:;
	}
}



inline jule::Str _1ce6745a5_uint_from_bits(jule::I64 _10423_bits) {
	{
		auto &_match_expr{ _10423_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_1b7c73094:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_1b7c73171:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_1b7c731d7:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1b7c7324d:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_1b7c7256b:;
			{
				return jule::Str();
			}
		}
		_match_end_1b7c72a22:;
	}
}



inline jule::Str _1ce674990_float_from_bits(jule::I64 _12224_bits) {
	{
		auto &_match_expr{ _12224_bits };
		
		if (_match_expr == 32LL) {
			_case_begin_1b7c745d4:;
			{
				return jule::Str("f32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1b7c746d3:;
			{
				return jule::Str("f64", 3);
			}
		}
		else {
			_case_begin_1b7c73acd:;
			{
				return jule::Str();
			}
		}
		_match_end_1b7c74084:;
	}
}



inline jule::Bool _1ce675760_check_bit_float(jule::Str _15024_val,jule::I64 _15034_bit) {
	({
		auto except = _1cde2c028_parse_float(_15024_val,_15034_bit);
		(except.ok()) ? (except.result) : ({{
			return false;
			return false;
		} jule::F64();});
	});
	return true;
}



inline jule::I64 _1ce675bd3_bitsize_of_float(jule::F64 _16025_x) {
	{
		
		if ((-340282346638528860000000000000000000000.0 <= _16025_x) && (_16025_x <= 340282346638528860000000000000000000000.0)) {
			_case_begin_1b7c7a7e9:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_1b7c79650:;
			{
				return 64LL;
			}
		}
		_match_end_1b7c7a431:;
	}
}



inline jule::I64 _1ce676101_bitsize_of_int(jule::I64 _17623_x) {
	{
		
		if ((-128LL <= _17623_x) && (_17623_x <= 127LL)) {
			_case_begin_1b7c7b9b5:;
			{
				return 8LL;
			}
		}
		else if ((-32768LL <= _17623_x) && (_17623_x <= 32767LL)) {
			_case_begin_1b7c7ba2b:;
			{
				return 16LL;
			}
		}
		else if ((-2147483648LL <= _17623_x) && (_17623_x <= 2147483647LL)) {
			_case_begin_1b7c7b7c8:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_1b7c7b60d:;
			{
				return 64LL;
			}
		}
		_match_end_1b7c7b542:;
	}
}



inline jule::I64 _1ce676585_bitsize_of_uint(jule::U64 _19624_x) {
	{
		
		if ((_19624_x <= 255LLU)) {
			_case_begin_1b7c7dcd6:;
			{
				return 8LL;
			}
		}
		else if ((_19624_x <= 65535LLU)) {
			_case_begin_1b7c7dd4c:;
			{
				return 16LL;
			}
		}
		else if ((_19624_x <= 4294967295LLU)) {
			_case_begin_1b7c7dae9:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_1b7c7d92e:;
			{
				return 64LL;
			}
		}
		_match_end_1b7c7d863:;
	}
}



inline void _1ce676981_update_target(void) {
	{
		{
			auto &_match_expr{ _2128b0c97_ARCH };
			
			if (_match_expr == jule::Str("arm64", 5) || _match_expr == jule::Str("amd64", 5)) {
				_case_begin_1b7c802d2:;
				{
					_1ce672707_BIT_SIZE=64LL;
					_1ce67284a_SYS_INT=jule::Str("i64", 3);
					_1ce67298d_SYS_UINT=jule::Str("u64", 3);
				}
			}
			else if (_match_expr == jule::Str("i386", 4)) {
				_case_begin_1b7c7e06c:;
				{
					_1ce672707_BIT_SIZE=32LL;
					_1ce67284a_SYS_INT=jule::Str("i32", 3);
					_1ce67298d_SYS_UINT=jule::Str("u32", 3);
				}
			}
			_match_end_1b7c80249:;
		}
	}
}



inline void _1ce676d27_init(void) {
	_1ce676981_update_target();
}



inline jule::F64 _1ce679ab6_min(jule::Str _4716_k) {
	_4716_k=_1ce673780_real_kind_of(_4716_k);
	{
		auto &_match_expr{ _4716_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1b7c834e4:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1b7c832e6:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1b7c8335c:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1b7c8314d:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1b7c831b4:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1b7c8322a:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_1b7c7ee6e:;
			{
				return 0LL;
			}
		}
		_match_end_1b7c80623:;
	}
}



inline jule::F64 _1ce67a06c_max(jule::Str _6916_k) {
	_6916_k=_1ce673780_real_kind_of(_6916_k);
	{
		auto &_match_expr{ _6916_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1b7c852e8:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1b7c8535e:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1b7c85150:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1b7c851b6:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_1b7c8522c:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1b7c84e74:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1b7c84eda:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1b7c85051:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1b7c850b7:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1b7c85590:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_1b7c84b22:;
			{
				return 0LL;
			}
		}
		_match_end_1b7c84c76:;
	}
}



inline jule::Bool _1ce67a644_is_i8_compatible(jule::Str _629_k) {
	return (_629_k == jule::Str("i8", 2));
}



inline jule::Bool _1ce67a90d_is_i16_compatible(jule::Str _1130_k) {
	return (_1130_k == jule::Str("i8", 2)) || (_1130_k == jule::Str("i16", 3));
}



inline jule::Bool _1ce67acc6_is_i32_compatible(jule::Str _1730_k) {
	return (((_1730_k == jule::Str("i8", 2)) || (_1730_k == jule::Str("i16", 3))) || (_1730_k == jule::Str("i32", 3))) || (_1730_k == jule::Str("u8", 2));
}



inline jule::Bool _1ce67b1e4_is_i64_compatible(jule::Str _2530_k) {
	return (((_2530_k == jule::Str("i8", 2)) || (_2530_k == jule::Str("i16", 3))) || (_2530_k == jule::Str("i32", 3))) || (_2530_k == jule::Str("i64", 3));
}



inline jule::Bool _1ce67b535_is_u8_compatible(jule::Str _3329_k) {
	return (_3329_k == jule::Str("u8", 2));
}



inline jule::Bool _1ce67b8ba_is_u16_compatible(jule::Str _3830_k) {
	return (_3830_k == jule::Str("u8", 2)) || (_3830_k == jule::Str("u16", 3));
}



inline jule::Bool _1ce67bc50_is_u32_compatible(jule::Str _4330_k) {
	return ((_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3))) || (_4330_k == jule::Str("u32", 3));
}



inline jule::Bool _1ce67c206_is_u64_compatible(jule::Str _5030_k) {
	return (((_5030_k == jule::Str("u8", 2)) || (_5030_k == jule::Str("u16", 3))) || (_5030_k == jule::Str("u32", 3))) || (_5030_k == jule::Str("u64", 3));
}



inline jule::Bool _1ce67c503_is_f32_compatible(jule::Str _5830_k) {
	return (_5830_k == jule::Str("f32", 3));
}



inline jule::Bool _1ce67c888_is_f64_compatible(jule::Str _6330_k) {
	return (_6330_k == jule::Str("f64", 3));
}



inline jule::Bool _1ce67cc1d_types_are_compatible(jule::Str _7033_k1,jule::Str _7042_k2) {
	{
		auto &_match_expr{ _7033_k1 };
		
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_1b7c8e621:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1b7c8e687:;
			{
				return (_7042_k2 == jule::Str("int", 3));
			}
		}
		else if (_match_expr == jule::Str("uintptr", 7)) {
			_case_begin_1b7c8e6ed:;
			{
				return (_7042_k2 == jule::Str("uintptr", 7));
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_1b7c8e775:;
			{
				return (_7042_k2 == jule::Str("uint", 4));
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1b7c8e8c9:;
			{
				return _1ce67a644_is_i8_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1b7c8e951:;
			{
				return _1ce67a90d_is_i16_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1b7c8e9c8:;
			{
				return _1ce67acc6_is_i32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1b7c8ea50:;
			{
				return _1ce67b1e4_is_i64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_1b7c8eca3:;
			{
				return _1ce67b535_is_u8_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1b7c8ed19:;
			{
				return _1ce67b8ba_is_u16_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1b7c8ed80:;
			{
				return _1ce67bc50_is_u32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1b7c8ede6:;
			{
				return _1ce67c206_is_u64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1b7c8ee5c:;
			{
				return _1ce67c503_is_f32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1b7c8eec3:;
			{
				return _1ce67c888_is_f64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_1b7c9004a:;
			{
				return (_7042_k2 == jule::Str("bool", 4));
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_1b7c900c2:;
			{
				return (_7042_k2 == jule::Str("str", 3));
			}
		}
		else {
			_case_begin_1b7c874d7:;
			{
				return false;
			}
		}
		_match_end_1b7c8755e:;
	}
}



inline jule::Bool _1ce67d306_is_i16_greater(jule::Str _10927_k) {
	return (_10927_k == jule::Str("i8", 2));
}



inline jule::Bool _1ce67d603_is_i32_greater(jule::Str _11427_k) {
	return (_11427_k == jule::Str("i8", 2)) || (_11427_k == jule::Str("i16", 3));
}



inline jule::Bool _1ce67d999_is_i64_greater(jule::Str _11927_k) {
	return ((_11927_k == jule::Str("i8", 2)) || (_11927_k == jule::Str("i16", 3))) || (_11927_k == jule::Str("i32", 3));
}



inline jule::Bool _1ce67dd40_is_u16_greater(jule::Str _12627_k) {
	return (_12627_k == jule::Str("u8", 2));
}



inline jule::Bool _1ce67e417_is_u32_greater(jule::Str _13127_k) {
	return (_13127_k == jule::Str("u8", 2)) || (_13127_k == jule::Str("u16", 3));
}



inline jule::Bool _1ce67e69d_is_u64_greater(jule::Str _13727_k) {
	return ((_13727_k == jule::Str("u8", 2)) || (_13727_k == jule::Str("u16", 3))) || (_13727_k == jule::Str("u32", 3));
}



inline jule::Bool _1ce67ea44_is_f32_greater(jule::Str _14423_k) {
	return (_14423_k != jule::Str("f64", 3));
}



inline jule::Bool _1ce67edda_is_f64_greater(jule::Str _14923_k) {
	return true;
}



inline jule::Bool _1ce680281_is_greater(jule::Str _15423_k1,jule::Str _15432_k2) {
	{
		auto &_match_expr{ _15423_k1 };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1b7c9963c:;
			{
				return _1ce6818d1_is_sig_int(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_1b7c996a3:;
			{
				return _1ce681caa_is_unsig_int(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("uintptr", 7)) {
			_case_begin_1b7c99719:;
			{
				return _1ce681caa_is_unsig_int(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1b7c99780:;
			{
				return _1ce67d306_is_i16_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1b7c998a1:;
			{
				return _1ce67d603_is_i32_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1b7c99917:;
			{
				return _1ce67d999_is_i64_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1b7c9997d:;
			{
				return _1ce67dd40_is_u16_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1b7c999e4:;
			{
				return _1ce67e417_is_u32_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1b7c99a6b:;
			{
				return _1ce67e69d_is_u64_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1b7c99c8b:;
			{
				return _1ce67ea44_is_f32_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1b7c99d02:;
			{
				return _1ce67edda_is_f64_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_1b7c99d68:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b7c995c6:;
			{
				return false;
			}
		}
		_match_end_1b7c99560:;
	}
}



inline jule::Bool _1ce6818d1_is_sig_int(jule::Str _2723_k) {
	return ((((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3))) || (_2723_k == jule::Str("int", 3));
}



inline jule::Bool _1ce681caa_is_unsig_int(jule::Str _3625_k) {
	return (((((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3))) || (_3625_k == jule::Str("uint", 4))) || (_3625_k == jule::Str("uintptr", 7));
}



inline jule::Bool _1ce682173_is_int(jule::Str _4615_k) {
	return _1ce6818d1_is_sig_int(_4615_k) || _1ce681caa_is_unsig_int(_4615_k);
}



inline jule::Bool _1ce6825b3_is_float(jule::Str _5117_k) {
	return (_5117_k == jule::Str("f32", 3)) || (_5117_k == jule::Str("f64", 3));
}



inline jule::Bool _1ce6828d2_is_num(jule::Str _5615_k) {
	return _1ce682173_is_int(_5615_k) || _1ce6825b3_is_float(_5615_k);
}



inline jule::Bool _1ce70a43d_is_ascii(jule::I32 _1017_r) {
	
	return (_1017_r <= 127LL);
}



inline jule::I32 _1ce6e2a63_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if ((_1816_bytes.len() == 0LL)) {
		return 0LL;
	}
	jule::I32 _2313_r = 0LL;
	if ((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL)) {
		jule::I64 _2517_i = 0LL;
		_2313_r=static_cast<jule::I32>(_1ce70b2a7_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _211214883_decode_rune(_1816_bytes);
	}
	return _2313_r;
}



inline jule::Str _1ce6dc497_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _1ce70abe1_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if ((_4215_bytes.len() == 0LL)) {
		return jule::Str();
	}
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_4215_bytes.len()));
	jule::I64 _4813_i = 0LL;
	while (_4813_i < static_cast<jule::I64>(_4215_bytes.len())) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];
			if (_5013_b == '\\') {
				_4713_s=jule::append(_4713_s,_1ce70bbc0_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;
				jule::I64 _5421_size;
				std::tie(_5418_r,_5421_size) = _211214883_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_211215cd5_append_rune(_4713_s,_5418_r);
			}
		}
	_iter_next_1b7ca9c68:;
	}
	_iter_end_1b7ca9c68:;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _1ce70b076_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if ((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\')) {
		return std::make_tuple(_6241_seq,_6252_ok);
	}
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		
		if (_match_expr == '\\') {
			_case_begin_1b7cae861:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_1b7cb0576:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_1b7cb05dc:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_1b7cb0664:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_1b7cb06db:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_1b7cb0763:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_1b7cb07da:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_1b7cb0862:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_1b7cb08d9:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_1b7cb0961:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_1b7cb0455:;
	}
	_6252_ok=(_6241_seq != 0LLU);
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _1ce70b2a7_rune_from_esq_seq(jule::Slice<jule::U8> _8422_bytes,jule::I64& _8442_i) {
	jule::U8 _8510_b;
	jule::Bool _8513_ok;
	std::tie(_8510_b,_8513_ok) = _1ce70b076_try_btoa_common_esq(_8422_bytes.slice(_8442_i));
	(_8442_i)++;
	if (_8513_ok) {
		(_8442_i)++;
		return static_cast<jule::I32>(static_cast<jule::I32>(_8510_b));
	}
	{
		auto &_match_expr{ _8422_bytes[_8442_i] };
		
		if (_match_expr == 'u') {
			_case_begin_1b7cb5bec:;
			{
				
				jule::I32 _9513_r = static_cast<jule::I32>(({
					auto except = _1ce1c8a11_parse_uint(static_cast<jule::Str>(_8422_bytes.slice((_8442_i + 1LL),(_8442_i + 5LL))),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:95:22"));
					(except.result);
				}));
				_8442_i+=5LL;
				return _9513_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_1b7cb63e5:;
			{
				
				jule::I32 _10013_r = static_cast<jule::I32>(({
					auto except = _1ce1c8a11_parse_uint(static_cast<jule::Str>(_8422_bytes.slice((_8442_i + 1LL),(_8442_i + 9LL))),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:100:22"));
					(except.result);
				}));
				_8442_i+=9LL;
				return _10013_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_1b7cb6eea:;
			{
				
				jule::Slice<jule::U8> _10513_seq = _8422_bytes.slice((_8442_i + 1LL),(_8442_i + 3LL));
				_8442_i+=3LL;
				return static_cast<jule::I32>(static_cast<jule::I32>(({
					auto except = _1ce1c8a11_parse_uint(static_cast<jule::Str>(_10513_seq),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:107:18"));
					(except.result);
				})));
			}
		}
		else {
			_case_begin_1b7cb5614:;
			{
				
				jule::Slice<jule::U8> _11013_seq = _8422_bytes.slice(_8442_i,(_8442_i + 3LL));
				_8442_i+=3LL;
				return static_cast<jule::I32>(static_cast<jule::I32>(({
					auto except = _1ce1c8a11_parse_uint(static_cast<jule::Str>(_11013_seq.slice(1LL)),8LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:112:18"));
					(except.result);
				})));
			}
		}
		_match_end_1b7cb4d50:;
	}
}



inline jule::Slice<jule::U8> _1ce70bbc0_str_esq_seq(jule::Slice<jule::U8> _11616_bytes,jule::I64& _11636_i) {
	jule::I32 _1179_r = _1ce70b2a7_rune_from_esq_seq(_11616_bytes,_11636_i);
	if ((_1179_r <= 255LL)) {
		return jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_1179_r))});
	}
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1179_r));
}



inline jule::I64 _1b54a36a6_find_format_prefix(jule::Slice<jule::U8>& _924_bytes,jule::I64& _940_start) {
	jule::I64 _1013_i = _940_start;
	while (_1013_i < static_cast<jule::I64>(_924_bytes.len())) {
		{
			jule::I32 _1214_r;
			jule::I64 _1217_size;
			std::tie(_1214_r,_1217_size) = _211214883_decode_rune(_924_bytes.slice(_1013_i));
			if (_1214_r == '{') {
				return _1013_i;
			}
			_1013_i+=_1217_size;
		}
	_iter_next_1b7ce9923:;
	}
	_iter_end_1b7ce9923:;
	return -1LL;
}



inline jule::Slice<jule::U8> _1b54a1330_get_format_range(jule::I64& _2630_i,jule::Slice<jule::U8>& _2643_bytes) {
	jule::I64 _279_start = _2630_i;
	jule::I64 _2813_braces = 0LL;
	while (_2630_i < static_cast<jule::I64>(_2643_bytes.len())) {
		{
			jule::I32 _3014_r;
			jule::I64 _3017_size;
			std::tie(_3014_r,_3017_size) = _211214883_decode_rune(_2643_bytes.slice(_2630_i));
			_2630_i+=_3017_size;
			{
				auto &_match_expr{ _3014_r };
				
				if (_match_expr == '{') {
					_case_begin_1b7ced042:;
					{
						(_2813_braces)++;
					}
				}
				else if (_match_expr == '}') {
					_case_begin_1b7ced20c:;
					{
						(_2813_braces)--;
						if ((_2813_braces == 0LL)) {
							return _2643_bytes.slice(_279_start,_2630_i);
						}
					}
				}
				_match_end_1b7ced0db:;
			}
		}
	_iter_next_1b7cec195:;
	}
	_iter_end_1b7cec195:;
	return nullptr;
}



inline jule::Slice<jule::U8> _1b54a4a1a_fmt_by_default(jule::Any& _4620_arg) {
	if (_4620_arg == jule::Any(nullptr)) {
		return jule::Slice<jule::U8>({'n','i','l'});
	}
	{
		auto &_match_expr{ _4620_arg };
		
		if (_match_expr.type_is<jule::F32>()) {
			_case_begin_1b7d049a5:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1cdda3961_fmt_float(static_cast<jule::F64>(static_cast<jule::F64>(_4620_arg.operator jule::F32())),'g',-1LL,32LL));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1b7d0418b:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1cdda3961_fmt_float(static_cast<jule::F64>(_4620_arg.operator jule::F64()),'g',-1LL,64LL));
			}
		}
		else if (_match_expr.type_is<jule::I8>()) {
			_case_begin_1b7d04a60:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce27c510_fmt_int(static_cast<jule::I8>(_4620_arg.operator jule::I8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I16>()) {
			_case_begin_1b7d04ac6:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce27c510_fmt_int(static_cast<jule::I16>(_4620_arg.operator jule::I16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_1b7d04b3c:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce27c510_fmt_int(static_cast<jule::I32>(_4620_arg.operator jule::I32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1b7d04ba3:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce27c510_fmt_int(static_cast<jule::I64>(_4620_arg.operator jule::I64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_1b7d04c19:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce276eee_fmt_uint(static_cast<jule::U8>(_4620_arg.operator jule::U8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U16>()) {
			_case_begin_1b7d04c80:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce276eee_fmt_uint(static_cast<jule::U16>(_4620_arg.operator jule::U16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U32>()) {
			_case_begin_1b7d05423:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce276eee_fmt_uint(static_cast<jule::U32>(_4620_arg.operator jule::U32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1b7d05489:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ce276eee_fmt_uint(static_cast<jule::U64>(_4620_arg.operator jule::U64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::Str>()) {
			_case_begin_1b7d05500:;
			{
				return static_cast<jule::Slice<jule::U8>>(_4620_arg.operator jule::Str());
			}
		}
		else if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_1b7d05566:;
			{
				if (_4620_arg.operator jule::Bool()) {
					return jule::Slice<jule::U8>({'t','r','u','e'});
				}
				return jule::Slice<jule::U8>({'f','a','l','s','e'});
			}
		}
		else {
			_case_begin_1b7cec360:;
			{
				return static_cast<jule::Slice<jule::U8>>(jule::to_str(_4620_arg));
			}
		}
		_match_end_1b7d047b8:;
	}
}



inline jule::Slice<jule::U8> _1b54a4bb3_apply_fmt_by_default(jule::I64& _7530_j,jule::Slice<jule::Any>& _7539_args) {
	jule::Any _769_arg = _7539_args[_7530_j];
	(_7530_j)++;
	return _1b54a4a1a_fmt_by_default(_769_arg);
}



inline jule::Slice<jule::U8> _1b5499c74_apply_fmt(jule::Slice<jule::U8>& _8319_fmt,jule::I64& _8337_j,jule::Slice<jule::Any>& _8346_args) {
	if ((_8319_fmt.len() == 2LL)) {
		return _1b54a4bb3_apply_fmt_by_default(_8337_j,_8346_args);
	}
	if ((_8319_fmt.len() == 4LL) && (_8319_fmt == jule::Slice<jule::U8>({'{','{','}','}'}))) {
		return jule::Slice<jule::U8>({'{','}'});
	}
	return _8319_fmt;
}



inline jule::Slice<jule::U8> _1b5499e1c_format_bytes(jule::Str _9717_fmt,jule::Slice<jule::Any> _9727_args) {
	jule::Slice<jule::U8> _9813_fmt_bytes = static_cast<jule::Slice<jule::U8>>(_9717_fmt);
	if ((_9727_args.len() == 0LL)) {
		return _9813_fmt_bytes;
	}
	jule::Slice<jule::U8> _10413_bytes = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_9717_fmt.len()));
	jule::I64 _10613_j = 0LL;
	jule::I64 _10713_last = 0LL;
	jule::I64 _10813_i = _1b54a36a6_find_format_prefix(_9813_fmt_bytes,_10713_last);
	for (; (_10813_i != -1LL); _10813_i=static_cast<jule::I64>(_1b54a36a6_find_format_prefix(_9813_fmt_bytes,_10813_i))) {
		{
			_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10713_last,_10813_i));
			jule::Slice<jule::U8> _11117_format = _1b54a1330_get_format_range(_10813_i,_9813_fmt_bytes);
			if ((_11117_format == nullptr)) {
				goto _iter_next_1b7d132ee;
			}
			_10413_bytes=jule::append(_10413_bytes,_1b5499c74_apply_fmt(_11117_format,_10613_j,_9727_args));
			if (_10613_j >= static_cast<jule::I64>(_9727_args.len())) {
				_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10813_i));
				_10713_last=static_cast<jule::I64>(_9813_fmt_bytes.len());
				goto _iter_end_1b7d132ee;
			}
			_10713_last=_10813_i;
		}
	_iter_next_1b7d132ee:;
	}
	_iter_end_1b7d132ee:;
	if (_10713_last < static_cast<jule::I64>(_9813_fmt_bytes.len())) {
		_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10713_last));
	}
	return _10413_bytes;
}



inline jule::Str _1b54b00ec_format(jule::Str _15715_fmt,jule::Slice<jule::Any> _15725_args) {
	return static_cast<jule::Str>(_1b5499e1c_format_bytes(_15715_fmt,_15725_args));
}



inline jule::Bool _1e83d7332_kind_uses_generics(jule::Ptr<_1ce76121e_TypeKind> _39023_k,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>& _39038_generics) {
	jule::Str _3919_pk = (*(_39023_k))._method_to_str();
	{
		auto &expr = _39038_generics;
		auto it = expr.begin();
		_iter_begin_1b8ad858a:;
		if (it != expr.end()) {
			jule::Ptr<_212b1c9b5_GenericDecl> &_1b8ad86ab_g = *it;
			{
				if (_2127cc2e0_contains(_3919_pk,(*(_1b8ad86ab_g))._field_ident)) {
					return true;
				}
			}
			_iter_next_1b8ad858a:;
			++it;
			goto _iter_begin_1b8ad858a;
		}
		_iter_end_1b8ad858a:;
	}
	return false;
}



inline jule::Bool _1e83d77b6_parameter_uses_generics(jule::Ptr<_1e83d3839_Param>& _40029_p,jule::Slice<jule::Ptr<_212b1c9b5_GenericDecl>>& _40041_generics) {
	if ((*(_40029_p))._method_is_self()) {
		return false;
	}
	return _1e83d7332_kind_uses_generics((*((*(_40029_p))._field_kind))._field_kind,_40041_generics);
}



inline jule::Str _1e83deee9_build_doc(jule::Ptr<_2129e3072_CommentGroup> _8518_cg) {
	if ((_8518_cg == nullptr)) {
		return jule::Str();
	}
	jule::Str _9013_doc = jule::Str();
	{
		auto &expr = (*(_8518_cg))._field_comments;
		auto it = expr.begin();
		_iter_begin_1b8adadea:;
		if (it != expr.end()) {
			jule::Ptr<_2129e34b2_Comment> _1b8adae94_c = *it;
			{
				_9013_doc+=(*(_1b8adae94_c))._field_text;
				_9013_doc+=jule::Str(" ", 1);
			}
			_iter_next_1b8adadea:;
			++it;
			goto _iter_begin_1b8adadea;
		}
		_iter_end_1b8adadea:;
	}
	return _9013_doc;
}



inline jule::Ptr<_1ce761b37_TypeSymbol> _1e83e0390_build_type(jule::Ptr<_2129e3d42_TypeDecl> _9819_t) {
	if ((_9819_t == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(_9819_t,jule::Ptr<_1ce76121e_TypeKind>()));
}



inline jule::Ptr<_1ce7281d6_Value> _1e83e06e2_build_expr(jule::Ptr<_212b16162_Expr> _10719_expr) {
	if ((_10719_expr == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value(_10719_expr,jule::Ptr<_1ce727449_Data>()));
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1e83e0acc_build_type_alias(jule::Ptr<_212b230c5_TypeAliasDecl> _11725_decl) {
	return jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias((*(_11725_decl))._field_scope,(*(_11725_decl))._field_public,(*(_11725_decl))._field_cpp_linked,jule::Bool(),jule::Bool(),(*(_11725_decl))._field_token,(*(_11725_decl))._field_ident,_1e83e0390_build_type((*(_11725_decl))._field_kind),_1e83deee9_build_doc((*(_11725_decl))._field_doc_comments),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>()));
}



inline jule::Ptr<_1e82e47a0_Field> _1e83e0dda_build_field(jule::Ptr<_212b24eea_FieldDecl> _12920_decl) {
	return jule::new_struct_ptr<_1e82e47a0_Field>(new( std::nothrow ) _1e82e47a0_Field(jule::Ptr<_1e83b1718_Struct>(),(*(_12920_decl))._field_token,(*(_12920_decl))._field_public,(*(_12920_decl))._field_mutable,(*(_12920_decl))._field_ident,_1e83e0390_build_type((*(_12920_decl))._field_kind),(*(_12920_decl))._field_default));
}



inline jule::Slice<jule::Ptr<_1e82e47a0_Field>> _1e83e123c_build_fields(jule::Slice<jule::Ptr<_212b24eea_FieldDecl>>& _14022_decls) {
	jule::Slice<jule::Ptr<_1e82e47a0_Field>> _14113_fields = jule::Slice<jule::Ptr<_1e82e47a0_Field>>::alloc(0LL,static_cast<jule::I64>(_14022_decls.len()));
	{
		auto &expr = _14022_decls;
		auto it = expr.begin();
		_iter_begin_1b8ae0b7a:;
		if (it != expr.end()) {
			jule::Ptr<_212b24eea_FieldDecl> _1b8ae0e55_decl = *it;
			{
				_14113_fields = jule::alloc_for_append(_14113_fields,1);_14113_fields.__push(_1e83e0dda_build_field(_1b8ae0e55_decl));
			}
			_iter_next_1b8ae0b7a:;
			++it;
			goto _iter_begin_1b8ae0b7a;
		}
		_iter_end_1b8ae0b7a:;
	}
	return _14113_fields;
}



inline jule::Ptr<_1e83b1718_Struct> _1e83e158e_build_struct(jule::Ptr<_212b2587a_StructDecl> _14821_decl) {
	return jule::new_struct_ptr<_1e83b1718_Struct>(new( std::nothrow ) _1e83b1718_Struct(jule::Ptr<_1ce6ab345_Sema>(),jule::Slice<jule::Ptr<_1e83b1718_Struct>>(),jule::Slice<jule::Ptr<_1e83b1718_Struct>>(),(*(_14821_decl))._field_token,(*(_14821_decl))._field_ident,_1e83e123c_build_fields((*(_14821_decl))._field_fields),jule::Slice<jule::Ptr<_1e83d4384_Fn>>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>(),(*(_14821_decl))._field_public,(*(_14821_decl))._field_cpp_linked,(*(_14821_decl))._field_directives,_1e83deee9_build_doc((*(_14821_decl))._field_doc_comments),(*(_14821_decl))._field_generics,jule::Slice<jule::Ptr<_1e85a7865_Trait>>(),_1e83ac923_OperatorMap(),jule::Slice<jule::Ptr<_1e83b84bc_StructIns>>()));
}



inline jule::Ptr<_1e83d3839_Param> _1e83e1a12_build_param(jule::Ptr<_212b1e995_ParamDecl> _16120_decl) {
	return jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param((*(_16120_decl))._field_token,(*(_16120_decl))._field_mutable,(*(_16120_decl))._field_variadic,(*(_16120_decl))._field_reference,_1e83e0390_build_type((*(_16120_decl))._field_kind),(*(_16120_decl))._field_ident));
}



inline jule::Slice<jule::Ptr<_1e83d3839_Param>> _1e83e1ccb_build_params(jule::Slice<jule::Ptr<_212b1e995_ParamDecl>>& _17222_decls) {
	jule::Slice<jule::Ptr<_1e83d3839_Param>> _17313_params = jule::Slice<jule::Ptr<_1e83d3839_Param>>::alloc(0LL,static_cast<jule::I64>(_17222_decls.len()));
	{
		auto &expr = _17222_decls;
		auto it = expr.begin();
		_iter_begin_1b8ae3155:;
		if (it != expr.end()) {
			jule::Ptr<_212b1e995_ParamDecl> _1b8ae4ce4_decl = *it;
			{
				_17313_params = jule::alloc_for_append(_17313_params,1);_17313_params.__push(_1e83e1a12_build_param(_1b8ae4ce4_decl));
			}
			_iter_next_1b8ae3155:;
			++it;
			goto _iter_begin_1b8ae3155;
		}
		_iter_end_1b8ae3155:;
	}
	return _17313_params;
}



inline jule::Ptr<_1e83d3284_RetType> _1e83e212d_build_ret_type(jule::Ptr<_212b15c22_RetTypeDecl> _18023_decl) {
	if (((*(_18023_decl))._field_idents == nullptr) && ((*(_18023_decl))._field_kind == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_1e83d3284_RetType>(new( std::nothrow ) _1e83d3284_RetType(_1e83e0390_build_type((*(_18023_decl))._field_kind),(*(_18023_decl))._field_idents));
}



inline jule::Ptr<_1e83d4384_Fn> _1e83e2480_build_fn(jule::Ptr<_212b1edd5_FnDecl> _19017_decl) {
	return jule::new_struct_ptr<_1e83d4384_Fn>(new( std::nothrow ) _1e83d4384_Fn(jule::Ptr<_1ce6ab345_Sema>(),(*(_19017_decl))._field_token,(*(_19017_decl))._field_global,(*(_19017_decl))._field_unsafety,(*(_19017_decl))._field_public,(*(_19017_decl))._field_cpp_linked,(*(_19017_decl))._field_statically,(*(_19017_decl))._field_exceptional,(*(_19017_decl))._field_ident,(*(_19017_decl))._field_directives,_1e83deee9_build_doc((*(_19017_decl))._field_doc_comments),(*(_19017_decl))._field_scope,(*(_19017_decl))._field_generics,_1e83e212d_build_ret_type((*(_19017_decl))._field_result),_1e83e1ccb_build_params((*(_19017_decl))._field_params),jule::Ptr<_1e83b1718_Struct>(),jule::Slice<jule::Ptr<_1e83d630e_FnIns>>()));
}



inline jule::Slice<jule::Ptr<_1e83d4384_Fn>> _1e83e27d2_build_methods(jule::Slice<jule::Ptr<_212b1edd5_FnDecl>>& _20923_decls) {
	jule::Slice<jule::Ptr<_1e83d4384_Fn>> _21013_methods = jule::Slice<jule::Ptr<_1e83d4384_Fn>>::alloc(0LL,static_cast<jule::I64>(_20923_decls.len()));
	{
		auto &expr = _20923_decls;
		auto it = expr.begin();
		_iter_begin_1b8ae9964:;
		if (it != expr.end()) {
			jule::Ptr<_212b1edd5_FnDecl> _1b8ae9c3e_decl = *it;
			{
				_21013_methods = jule::alloc_for_append(_21013_methods,1);_21013_methods.__push(_1e83e2480_build_fn(_1b8ae9c3e_decl));
			}
			_iter_next_1b8ae9964:;
			++it;
			goto _iter_begin_1b8ae9964;
		}
		_iter_end_1b8ae9964:;
	}
	return _21013_methods;
}



inline jule::Ptr<_1e85a7865_Trait> _1e83e2b34_build_trait(jule::Ptr<_212b1ade2_TraitDecl> _21720_decl) {
	return jule::new_struct_ptr<_1e85a7865_Trait>(new( std::nothrow ) _1e85a7865_Trait((*(_21720_decl))._field_token,(*(_21720_decl))._field_ident,(*(_21720_decl))._field_public,jule::Bool(),_1e83deee9_build_doc((*(_21720_decl))._field_doc_comments),_1e83e27d2_build_methods((*(_21720_decl))._field_methods),jule::Slice<jule::Ptr<_1e83b1718_Struct>>()));
}



inline jule::Ptr<_1e86494b7_EnumItem> _1e83e2e86_build_enum_item(jule::Ptr<_212b242d5_EnumItemDecl> _22724_decl) {
	return jule::new_struct<_1e86494b7_EnumItem>(new( std::nothrow ) _1e86494b7_EnumItem((*(_22724_decl))._field_token,(*(_22724_decl))._field_ident,_1e83e06e2_build_expr((*(_22724_decl))._field_expr)));
}



inline jule::Slice<jule::Ptr<_1e86494b7_EnumItem>> _1e83e32d8_build_enum_items(jule::Slice<jule::Ptr<_212b242d5_EnumItemDecl>>& _23526_decls) {
	jule::Slice<jule::Ptr<_1e86494b7_EnumItem>> _23613_items = jule::Slice<jule::Ptr<_1e86494b7_EnumItem>>::alloc(0LL,static_cast<jule::I64>(_23526_decls.len()));
	{
		auto &expr = _23526_decls;
		auto it = expr.begin();
		_iter_begin_1b8aeced9:;
		if (it != expr.end()) {
			jule::Ptr<_212b242d5_EnumItemDecl> _1b8aed02d_decl = *it;
			{
				_23613_items = jule::alloc_for_append(_23613_items,1);_23613_items.__push(_1e83e2e86_build_enum_item(_1b8aed02d_decl));
			}
			_iter_next_1b8aeced9:;
			++it;
			goto _iter_begin_1b8aeced9;
		}
		_iter_end_1b8aeced9:;
	}
	return _23613_items;
}



inline jule::Ptr<_1e8648917_Enum> _1e83e387c_build_enum(jule::Ptr<_212b24725_EnumDecl> _24319_decl) {
	return jule::new_struct_ptr<_1e8648917_Enum>(new( std::nothrow ) _1e8648917_Enum((*(_24319_decl))._field_token,(*(_24319_decl))._field_public,(*(_24319_decl))._field_ident,_1e83e0390_build_type((*(_24319_decl))._field_kind),_1e83e32d8_build_enum_items((*(_24319_decl))._field_items),_1e83deee9_build_doc((*(_24319_decl))._field_doc_comments)));
}



inline jule::Ptr<_1ce6cecb4_Var> _1e83e3aad_build_var(jule::Ptr<_212b20325_VarDecl> _25418_decl) {
	return jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var(jule::Ptr<_1ce62e86d_Scope>(),(*(_25418_decl))._field_token,(*(_25418_decl))._field_ident,(*(_25418_decl))._field_cpp_linked,(*(_25418_decl))._field_constant,(*(_25418_decl))._field_mutable,(*(_25418_decl))._field_public,jule::Bool(),(*(_25418_decl))._field_statically,(*(_25418_decl))._field_reference,_1e83deee9_build_doc((*(_25418_decl))._field_doc_comments),_1e83e0390_build_type((*(_25418_decl))._field_kind),_1e83e06e2_build_expr((*(_25418_decl))._field_expr),_1e83de4b0_ReferenceStack::_static_method_new(),(*(_25418_decl))._field_directives,jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>()));
}



inline jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _1e83e3e10_build_vars(jule::Slice<jule::Ptr<_212b20325_VarDecl>> _27219_decls) {
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _27313_vars = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>::alloc(0LL,static_cast<jule::I64>(_27219_decls.len()));
	{
		auto &expr = _27219_decls;
		auto it = expr.begin();
		_iter_begin_1b8b0295b:;
		if (it != expr.end()) {
			jule::Ptr<_212b20325_VarDecl> _1b8b02c36_decl = *it;
			{
				_27313_vars = jule::alloc_for_append(_27313_vars,1);_27313_vars.__push(_1e83e3aad_build_var(_1b8b02c36_decl));
			}
			_iter_next_1b8b0295b:;
			++it;
			goto _iter_begin_1b8b0295b;
		}
		_iter_end_1b8b0295b:;
	}
	return _27313_vars;
}



inline jule::Ptr<_1e8648e34_Impl> _1e83e4262_build_impl(jule::Ptr<_212b26705_Impl> _28019_decl) {
	return jule::new_struct<_1e8648e34_Impl>(new( std::nothrow ) _1e8648e34_Impl((*(_28019_decl))._field_base,(*(_28019_decl))._field_dest,_1e83e27d2_build_methods((*(_28019_decl))._field_methods),_1e83e3e10_build_vars((*(_28019_decl))._field_statics)));
}



inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce63b292_new_scope_checker_base(jule::Ptr<_1ce6ab345_Sema>& _4132_s,jule::Ptr<_1e83d630e_FnIns> _4146_owner) {
	return jule::new_struct_ptr<_1ce6882bc_ScopeChecker>(new( std::nothrow ) _1ce6882bc_ScopeChecker(jule::Ptr<_212ae5c02_Token>(),_4132_s,_4146_owner,jule::Ptr<_1ce6882bc_ScopeChecker>(),jule::I64(),jule::new_struct<_1ce7204a8_SymbolTable>(new( std::nothrow ) _1ce7204a8_SymbolTable()),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_212b1e555_ScopeTree>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::U64(),jule::U64(),jule::Ptr<jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>>(),jule::Ptr<jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>>(),jule::I64()));
}



inline jule::Ptr<_1ce6882bc_ScopeChecker> _1ce6503e9_new_scope_checker(jule::Ptr<_1ce6ab345_Sema>& _4927_s,jule::Ptr<_1e83d630e_FnIns> _4941_owner) {
	jule::Ptr<_1ce6882bc_ScopeChecker> _5013_base = _1ce63b292_new_scope_checker_base(_4927_s,_4941_owner);
	(*(_5013_base))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1ce68793c_ScopeLabel>>>(nullptr);
	(*(_5013_base))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1ce687d7c_ScopeGoto>>>(nullptr);
	return _5013_base;
}



inline jule::Ptr<_1ce68793c_ScopeLabel> _1ce63c3d6_find_label_parent(jule::Str _5922_ident,jule::Ptr<_1ce6882bc_ScopeChecker> _5938_scope) {
	jule::Ptr<_1ce68793c_ScopeLabel> _6013_label = (*(_5938_scope))._method_find_label_scope(_5922_ident);
	while ((_6013_label == nullptr)) {
		{
			if (((*(_5938_scope))._field_parent == nullptr) || ((*(_5938_scope))._field_owner != nullptr)) {
				return nullptr;
			}
			_5938_scope=(*(_5938_scope))._field_parent;
			_6013_label=(*(_5938_scope))._method_find_label_scope(_5922_ident);
		}
	_iter_next_1b8b06ab4:;
	}
	_iter_end_1b8b06ab4:;
	return _6013_label;
}



inline jule::Bool _1ce63d0eb_stmt_is_goto_scope(jule::Any& _7324_stmt,jule::Ptr<_1ce62e86d_Scope>& _7336_sc) {
	{
		auto &_match_expr{ _7324_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1ce62e86d_Scope>>()) {
			_case_begin_1b8b094ac:;
			{
				return _7324_stmt.operator jule::Ptr<_1ce62e86d_Scope>() == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68397c_InfIter>>()) {
			_case_begin_1b8b09523:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1ce68397c_InfIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68430c_RangeIter>>()) {
			_case_begin_1b8b08eb2:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1ce68430c_RangeIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce683dbc_WhileIter>>()) {
			_case_begin_1b8b09028:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1ce683dbc_WhileIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68672c_Match>>()) {
			_case_begin_1b8b0908e:;
			{
				jule::Ptr<_1ce68672c_Match> _8813_m = _7324_stmt.operator jule::Ptr<_1ce68672c_Match>();
				{
					auto &expr = (*(_8813_m))._field_cases;
					auto it = expr.begin();
					_iter_begin_1b8b0be1b:;
					if (it != expr.end()) {
						jule::Ptr<_1ce686b6c_Case> &_1b8b0be82_c = *it;
						{
							if ((*(_1b8b0be82_c))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_1b8b0be1b:;
						++it;
						goto _iter_begin_1b8b0be1b;
					}
					_iter_end_1b8b0be1b:;
				}
				return ((*(_8813_m))._field_default != nullptr) && ((*((*(_8813_m))._field_default))._field_scope == _7336_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce68353c_Conditional>>()) {
			_case_begin_1b8b09105:;
			{
				jule::Ptr<_1ce68353c_Conditional> _9713_c = _7324_stmt.operator jule::Ptr<_1ce68353c_Conditional>();
				{
					auto &expr = (*(_9713_c))._field_elifs;
					auto it = expr.begin();
					_iter_begin_1b8b0db54:;
					if (it != expr.end()) {
						jule::Ptr<_1ce632574_If> &_1b8b0dbba_elif = *it;
						{
							if ((*(_1b8b0dbba_elif))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_1b8b0db54:;
						++it;
						goto _iter_begin_1b8b0db54;
					}
					_iter_end_1b8b0db54:;
				}
				return ((*(_9713_c))._field_default != nullptr) && ((*((*(_9713_c))._field_default))._field_scope == _7336_sc);
			}
		}
		else {
			_case_begin_1b8b08c81:;
			{
				return false;
			}
		}
		_match_end_1b8b08c2b:;
	}
}



inline jule::I64 _1ce63d4a3_count_match_type(jule::Ptr<_1ce68672c_Match>& _11022_m,jule::Ptr<_1ce76121e_TypeKind>& _11034_t) {
	jule::I64 _11113_n = 0LL;
	jule::Str _1129_kind = (*(_11034_t))._method_to_str();
	_julec_label_loop:;
	{
		auto &expr = (*(_11022_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_1b8b10c88:;
		if (it != expr.end()) {
			jule::Ptr<_1ce686b6c_Case> &_1b8b10d21_c = *it;
			{
				if ((_1b8b10d21_c == nullptr)) {
					goto _iter_next_1b8b10c88;
				}
				{
					auto &expr = (*(_1b8b10d21_c))._field_exprs;
					auto it = expr.begin();
					_iter_begin_1b8b1145e:;
					if (it != expr.end()) {
						jule::Ptr<_1ce727449_Data> &_1b8b11a14_expr = *it;
						{
							if ((_1b8b11a14_expr == nullptr)) {
								goto _iter_end_1b8b10c88;
							}
							if (_1129_kind == (*((*(_1b8b11a14_expr))._field_model.operator jule::Ptr<_1ce76121e_TypeKind>()))._method_to_str()) {
								(_11113_n)++;
							}
						}
						_iter_next_1b8b1145e:;
						++it;
						goto _iter_begin_1b8b1145e;
					}
					_iter_end_1b8b1145e:;
				}
			}
			_iter_next_1b8b10c88:;
			++it;
			goto _iter_begin_1b8b10c88;
		}
		_iter_end_1b8b10c88:;
	}
	return _11113_n;
}



inline jule::Slice<jule::Ptr<_1ce727449_Data>> _1ce63d8d2_get_datas_from_tuple_data(jule::Ptr<_1ce727449_Data>& _13435_d) {
	if (((*((*(_13435_d))._field_kind))._method_tup() != nullptr)) {
		{
			auto &_match_expr{ (*(_13435_d))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e83c95aa_TupleExprModel>>()) {
				_case_begin_1b8b15243:;
				{
					return (*((*(_13435_d))._field_model.operator jule::Ptr<_1e83c95aa_TupleExprModel>()))._field_datas;
				}
			}
			else {
				_case_begin_1b8b1350a:;
				{
					jule::Ptr<_1ce763485_Tuple> _14121_t = (*((*(_13435_d))._field_kind))._method_tup();
					jule::Slice<jule::Ptr<_1ce727449_Data>> _14221_r = jule::Slice<jule::Ptr<_1ce727449_Data>>::alloc(0LL,static_cast<jule::I64>((*(_14121_t))._field_types.len()));
					{
						auto &expr = (*(_14121_t))._field_types;
						auto it = expr.begin();
						_iter_begin_1b8b14c9d:;
						if (it != expr.end()) {
							jule::Ptr<_1ce76121e_TypeKind> _1b8b14ce2_kind = *it;
							{
								_14221_r = jule::alloc_for_append(_14221_r,1);_14221_r.__push(jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(_1b8b14ce2_kind,jule::Ptr<_1ce76121e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>())));
							}
							_iter_next_1b8b14c9d:;
							++it;
							goto _iter_begin_1b8b14c9d;
						}
						_iter_end_1b8b14c9d:;
					}
					return _14221_r;
				}
			}
			_match_end_1b8b13472:;
		}
	} else {
		return jule::Slice<jule::Ptr<_1ce727449_Data>>({_13435_d});
	}
}



inline jule::Slice<jule::Any> _1ce63e1b8_get_expr_models(jule::Any& _15625_m) {
	{
		auto &_match_expr{ _15625_m };
		
		if (_match_expr.type_is<jule::Ptr<_212b169e2_TupleExpr>>()) {
			_case_begin_1b8b16343:;
			{
				jule::Ptr<_212b169e2_TupleExpr> _15917_tup = _15625_m.operator jule::Ptr<_212b169e2_TupleExpr>();
				jule::Slice<jule::Any> _16017_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_15917_tup))._field_expr.len()));
				{
					auto &expr = (*(_15917_tup))._field_expr;
					auto it = expr.begin();
					_iter_begin_1b8b17751:;
					if (it != expr.end()) {
						jule::Ptr<_212b16162_Expr> _1b8b17dc2_expr = *it;
						{
							_16017_models = jule::alloc_for_append(_16017_models,1);_16017_models.__push((*(_1b8b17dc2_expr))._field_kind);
						}
						_iter_next_1b8b17751:;
						++it;
						goto _iter_begin_1b8b17751;
					}
					_iter_end_1b8b17751:;
				}
				return _16017_models;
			}
		}
		else {
			_case_begin_1b8b161cd:;
			{
				return jule::Slice<jule::Any>({_15625_m});
			}
		}
		_match_end_1b8b1673e:;
	}
}



inline jule::Bool _1ce634631_check_mut(jule::Ptr<_1ce6ab345_Sema>& _17119_s,jule::Ptr<_1ce727449_Data>& _17130_left,jule::Ptr<_1ce727449_Data> _17147_right,_212ae5c02_Token _17161_op) {
	jule::Bool _17174_ok = jule::Bool();
	{
		
		if ((!((*(_17130_left))._field_mutable))) {
			_case_begin_1b8b197db:;
			{
				(*(_17119_s))._method_push_err(_17161_op,jule::Str("cannot assign to immutable storage", 34),jule::Slice<jule::Any>());
				_17174_ok = false;
				return _17174_ok;
			}
		}
		else if (((_17147_right != nullptr) && (!((*(_17147_right))._field_mutable))) && (*((*(_17147_right))._field_kind))._method_mutable()) {
			_case_begin_1b8b198c9:;
			{
				if ((_17161_op._field_kind != jule::Str("=", 1)) && ((*((*(_17147_right))._field_kind))._method_strct() != nullptr)) {
					_17174_ok = true;
					return _17174_ok;
				}
				(*(_17119_s))._method_push_err(_17161_op,jule::Str("immutable data cannot assign to mutable storage because of @ type which is mutable", 82),jule::Slice<jule::Any>({jule::Any((*((*(_17147_right))._field_kind))._method_to_str())}));
				_17174_ok = false;
				return _17174_ok;
			}
		}
		else {
			_case_begin_1b8b19159:;
			{
				_17174_ok = true;
				return _17174_ok;
			}
		}
		_match_end_1b8b1908d:;
	}
}



inline jule::Bool _1ce64010e_check_assign(jule::Ptr<_1ce6ab345_Sema>& _19022_s,jule::Ptr<_1ce727449_Data>& _19037_left,jule::Ptr<_1ce727449_Data> _19054_right,_212ae5c02_Token _19068_op) {
	jule::Bool _19081_ok = jule::Bool();
	jule::Ptr<_1e83d630e_FnIns> _1919_f = (*((*(_19037_left))._field_kind))._method_fnc();
	if (((_1919_f != nullptr) && ((*(_1919_f))._field_decl != nullptr)) && (*((*(_1919_f))._field_decl))._field_global) {
		(*(_19022_s))._method_push_err(_19068_op,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_19081_ok = false;
		return _19081_ok;
	}
	{
		
		if ((*(_19037_left))._method_is_const()) {
			_case_begin_1b8b20a89:;
			{
				(*(_19022_s))._method_push_err(_19068_op,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				(*(_19022_s))._method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_19081_ok = false;
				return _19081_ok;
			}
		}
		else if ((!((*(_19037_left))._field_lvalue))) {
			_case_begin_1b8b20b66:;
			{
				(*(_19022_s))._method_push_err(_19068_op,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_19081_ok = false;
				return _19081_ok;
			}
		}
		else if ((!(_1ce634631_check_mut(_19022_s,_19037_left,_19054_right,_19068_op)))) {
			_case_begin_1b8b20bcc:;
			{
				_19081_ok = false;
				return _19081_ok;
			}
		}
		else {
			_case_begin_1b8b2043a:;
			{
				_19081_ok = true;
				return _19081_ok;
			}
		}
		_match_end_1b8b2033b:;
	}
}



inline jule::Bool _1ce64938d_is_valid_ast_st_for_next_st(jule::Any& _21237_n) {
	{
		auto &_match_expr{ _21237_n };
		
		if (_match_expr.type_is<jule::Ptr<_212b1e115_AssignSt>>()) {
			_case_begin_1b8b238a0:;
			{
				return (!((*(_21237_n.operator jule::Ptr<_212b1e115_AssignSt>()))._field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_212b19bd2_FnCallExpr>>() || _match_expr.type_is<jule::Ptr<_212b16162_Expr>>()) {
			_case_begin_1b8b23916:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b8b233e9:;
			{
				return false;
			}
		}
		_match_end_1b8b20eb8:;
	}
}



inline jule::Bool _1ce648d60_is_valid_st_for_next_st(jule::Any& _22429_st) {
	{
		auto &_match_expr{ _22429_st };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ce68595c_Postfix>>() || _match_expr.type_is<jule::Ptr<_1ce685d9c_Assign>>() || _match_expr.type_is<jule::Ptr<_1ce6862dc_MultiAssign>>()) {
			_case_begin_1b8b23ae2:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b8b24c8b:;
			{
				{
					auto &_match_expr{ (*(_22429_st.operator jule::Ptr<_1ce727449_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e83c2581_FnCallExprModel>>()) {
						_case_begin_1b8b263db:;
						{
							return true;
						}
					}
					else {
						_case_begin_1b8b25c6a:;
						{
							return false;
						}
					}
					_match_end_1b8b25c15:;
				}
			}
		}
		else {
			_case_begin_1b8b2450a:;
			{
				return false;
			}
		}
		_match_end_1b8b247b3:;
	}
}



inline jule::Bool _1ce6601b7_st_is_def(jule::Any& _24115_st) {
	{
		auto &_match_expr{ _24115_st };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b8b266b6:;
			{
				return true;
			}
		}
		else {
			_case_begin_1b8b26908:;
			{
				return false;
			}
		}
		_match_end_1b8b268a3:;
	}
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce69d018_find_var_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _4129_files,jule::Str _4152_ident,jule::Bool _4164_cpp_linked) {
	{
		auto &expr = _4129_files;
		auto it = expr.begin();
		_iter_begin_1b8b27233:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b272cc_f = *it;
			{
				jule::Ptr<_1ce6cecb4_Var> _4317_v = (*(_1b8b272cc_f))._method_find_var(_4152_ident,_4164_cpp_linked);
				if ((_4317_v != nullptr)) {
					return _4317_v;
				}
			}
			_iter_next_1b8b27233:;
			++it;
			goto _iter_begin_1b8b27233;
		}
		_iter_end_1b8b27233:;
	}
	return nullptr;
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1ce69d645_find_type_alias_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _5336_files,jule::Str _5359_ident,jule::Bool _5371_cpp_linked) {
	{
		auto &expr = _5336_files;
		auto it = expr.begin();
		_iter_begin_1b8b28311:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b28a09_f = *it;
			{
				jule::Ptr<_1ce75e6a1_TypeAlias> _5517_ta = (*(_1b8b28a09_f))._method_find_type_alias(_5359_ident,_5371_cpp_linked);
				if ((_5517_ta != nullptr)) {
					return _5517_ta;
				}
			}
			_iter_next_1b8b28311:;
			++it;
			goto _iter_begin_1b8b28311;
		}
		_iter_end_1b8b28311:;
	}
	return nullptr;
}



inline jule::Ptr<_1e83b1718_Struct> _1ce69dc50_find_struct_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _6532_files,jule::Str _6555_ident,jule::Bool _6567_cpp_linked) {
	{
		auto &expr = _6532_files;
		auto it = expr.begin();
		_iter_begin_1b8b29a60:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b2a258_f = *it;
			{
				jule::Ptr<_1e83b1718_Struct> _6717_s = (*(_1b8b2a258_f))._method_find_struct(_6555_ident,_6567_cpp_linked);
				if ((_6717_s != nullptr)) {
					return _6717_s;
				}
			}
			_iter_next_1b8b29a60:;
			++it;
			goto _iter_begin_1b8b29a60;
		}
		_iter_end_1b8b29a60:;
	}
	return nullptr;
}



inline jule::Ptr<_1e83d4384_Fn> _1ce69e36b_find_fn_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _7728_files,jule::Str _7751_ident,jule::Bool _7763_cpp_linked) {
	{
		auto &expr = _7728_files;
		auto it = expr.begin();
		_iter_begin_1b8b2b2ae:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b2b9a7_file = *it;
			{
				jule::Ptr<_1e83d4384_Fn> _7917_f = (*(_1b8b2b9a7_file))._method_find_fn(_7751_ident,_7763_cpp_linked);
				if ((_7917_f != nullptr)) {
					return _7917_f;
				}
			}
			_iter_next_1b8b2b2ae:;
			++it;
			goto _iter_begin_1b8b2b2ae;
		}
		_iter_end_1b8b2b2ae:;
	}
	return nullptr;
}



inline jule::Ptr<_1e85a7865_Trait> _1ce69e8cc_find_trait_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _8931_files,jule::Str _8954_ident) {
	{
		auto &expr = _8931_files;
		auto it = expr.begin();
		_iter_begin_1b8b2c7bb:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b2c8ba_f = *it;
			{
				jule::Ptr<_1e85a7865_Trait> _9117_t = (*(_1b8b2c8ba_f))._method_find_trait(_8954_ident);
				if ((_9117_t != nullptr)) {
					return _9117_t;
				}
			}
			_iter_next_1b8b2c7bb:;
			++it;
			goto _iter_begin_1b8b2c7bb;
		}
		_iter_end_1b8b2c7bb:;
	}
	return nullptr;
}



inline jule::Ptr<_1e8648917_Enum> _1ce69ed61_find_enum_in_package(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _10130_files,jule::Str _10153_ident) {
	{
		auto &expr = _10130_files;
		auto it = expr.begin();
		_iter_begin_1b8b2dc95:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b2ddb6_f = *it;
			{
				jule::Ptr<_1e8648917_Enum> _10317_e = (*(_1b8b2ddb6_f))._method_find_enum(_10153_ident);
				if ((_10317_e != nullptr)) {
					return _10317_e;
				}
			}
			_iter_next_1b8b2dc95:;
			++it;
			goto _iter_begin_1b8b2dc95;
		}
		_iter_end_1b8b2dc95:;
	}
	return nullptr;
}



inline jule::Bool _1ce6a1b21_is_std_package(jule::Str _32219_f,jule::Str _32227_p) {
	return _2127d7dbc_has_prefix(_32219_f,_211dc6ce7_join(jule::Slice<jule::Str>({_21289b502_PATH_STDLIB,_32227_p})));
}



inline jule::Bool _1ce6a9101_is_valid_model_for_ref(jule::Any& _1232_m) {
	{
		auto &_match_expr{ _1232_m };
		
		if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b8b31946:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c6d16_StructSubIdentExprModel>>()) {
			_case_begin_1b8b319ac:;
			{
				jule::Ptr<_1e83c6d16_StructSubIdentExprModel> _1717_model = _1232_m.operator jule::Ptr<_1e83c6d16_StructSubIdentExprModel>();
				return _1ce6a9101_is_valid_model_for_ref((*(_1717_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>>()) {
			_case_begin_1b8b314a1:;
			{
				jule::Ptr<_1e83c62cc_TraitSubIdentExprModel> _2017_model = _1232_m.operator jule::Ptr<_1e83c62cc_TraitSubIdentExprModel>();
				return _1ce6a9101_is_valid_model_for_ref((*(_2017_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83bebdd_UnaryExprModel>>()) {
			_case_begin_1b8b31517:;
			{
				jule::Ptr<_1e83bebdd_UnaryExprModel> _2317_unary = _1232_m.operator jule::Ptr<_1e83bebdd_UnaryExprModel>();
				if (((*(_2317_unary))._field_op._field_kind != jule::Str("*", 1))) {
					return false;
				}
				if (((*((*((*(_2317_unary))._field_expr))._field_kind))._method_ptr() != nullptr)) {
					return true;
				}
				if (((*((*((*(_2317_unary))._field_expr))._field_kind))._method_sptr() == nullptr)) {
					return false;
				}
				return _1ce6a9101_is_valid_model_for_ref((*((*(_2317_unary))._field_expr))._field_model);
			}
		}
		else {
			_case_begin_1b8b3133b:;
			{
				return false;
			}
		}
		_match_end_1b8b312d6:;
	}
}



inline _21287ea02_Log _1ce6a9299_compiler_err(_212ae5c02_Token& _4518_token,jule::Bool _4532_line,jule::Str _4544_fmt,jule::Slice<jule::Any> _4557_args) {
	_21287ea02_Log _4613_log = _21287ea02_Log(static_cast<jule::I64>(1LL),_4518_token._field_row,_4518_token._field_column,(*(_4518_token._field_file))._method_path(),_212880739_logf(_4544_fmt,_4557_args),jule::Str(),jule::Str());
	if (_4532_line) {
		_4613_log._field_line=(*(_4518_token._field_file))._method_get_row(_4518_token._field_row);
	}
	return _4613_log;
}



inline jule::Bool _1ce6a98a4_imp_is_lookupable(jule::Ptr<_1ce6a0317_ImportInfo>& _5923_i,jule::Str _5939_ident) {
	if ((*(_5923_i))._field_cpp_linked) {
		return false;
	}
	if ((!((*(_5923_i))._field_import_all))) {
		if (((*(_5923_i))._field_selected.len() > 0LL)) {
			return (*(_5923_i))._method_exist_ident(_5939_ident);
		}
	}
	return (*(_5923_i))._field_import_all;
}



inline jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _1ce6a9d7c_build_ret_vars(jule::Ptr<_1e83d630e_FnIns>& _7224_f) {
	if ((*((*(_7224_f))._field_decl))._method_is_void() || ((*(_7224_f))._field_result == nullptr)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _7713_vars = nullptr;
	jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _7813_types = _1ce6e8382_get_result_types((*(_7224_f))._field_result);
	{
		auto &expr = (*((*((*(_7224_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_1b8b3b577:;
		if (it != expr.end()) {
			jule::I64 _1b8b3b5bb_i = it - expr.begin();
			_212ae5c02_Token _1b8b3b830_ident = *it;
			{
				if (_212ae9255_is_ignore_ident(_1b8b3b830_ident._field_kind)) {
					goto _iter_next_1b8b3b577;
				}
				jule::Ptr<_1ce6cecb4_Var> _8417_v = jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var((*(_7224_f))._field_scope,_1b8b3b830_ident,_1b8b3b830_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),_7813_types[_1b8b3b5bb_i])),jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value(jule::Ptr<_212b16162_Expr>(),jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data()))),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>()));
				_7713_vars = jule::alloc_for_append(_7713_vars,1);_7713_vars.__push(_8417_v);
			}
			_iter_next_1b8b3b577:;
			++it;
			_1b8b3b5bb_i++;
			goto _iter_begin_1b8b3b577;
		}
		_iter_end_1b8b3b577:;
	}
	return _7713_vars;
}



inline jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _1ce6aa18a_build_param_vars(jule::Ptr<_1e83d630e_FnIns>& _10126_f) {
	if (((*(_10126_f))._field_params.len() == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ce6cecb4_Var>> _10613_vars = jule::Slice<jule::Ptr<_1ce6cecb4_Var>>::alloc(0LL,static_cast<jule::I64>((*(_10126_f))._field_params.len()));
	{
		auto &expr = (*(_10126_f))._field_params;
		auto it = expr.begin();
		_iter_begin_1b8b3e415:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d5bb0_ParamIns> _1b8b3ea42_p = *it;
			{
				jule::Ptr<_1ce6cecb4_Var> _10817_v = jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var((*(_10126_f))._field_scope,(*((*(_1b8b3ea42_p))._field_decl))._field_token,(*((*(_1b8b3ea42_p))._field_decl))._field_ident,jule::Bool(),jule::Bool(),(*((*(_1b8b3ea42_p))._field_decl))._field_mutable,jule::Bool(),true,jule::Bool(),(*((*(_1b8b3ea42_p))._field_decl))._field_reference,jule::Str(),jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol()),jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value(jule::Ptr<_212b16162_Expr>(),jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data()))),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>()));
				{
					
					if ((*((*(_1b8b3ea42_p))._field_decl))._method_is_self()) {
						_case_begin_1b8b41e73:;
						{
							(*((*(_10817_v))._field_kind))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),false,(*(_10126_f))._field_owner));
							(*(_10817_v))._field_reference=true;
							if ((*((*(_1b8b3ea42_p))._field_decl))._method_is_ref()) {
								(*(_10817_v))._field_ident=(*(_10817_v))._field_ident.slice(1LL);
								(*((*((*(_10817_v))._field_kind))._field_kind))._field_kind=jule::new_struct_ptr<_1ce76286e_Sptr>(new( std::nothrow ) _1ce76286e_Sptr(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind((*((*((*(_10817_v))._field_kind))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*((*(_10817_v))._field_kind))._field_kind))._field_kind))));
							}
						}
					}
					else if ((*((*(_1b8b3ea42_p))._field_decl))._field_variadic) {
						_case_begin_1b8b423e6:;
						{
							(*((*(_10817_v))._field_kind))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),false,jule::new_struct_ptr<_1ce762e02_Slc>(new( std::nothrow ) _1ce762e02_Slc(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind((*((*(_1b8b3ea42_p))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*(_1b8b3ea42_p))._field_kind))._field_kind))))));
						}
					}
					else {
						_case_begin_1b8b41acc:;
						{
							(*((*(_10817_v))._field_kind))._field_kind=(*(_1b8b3ea42_p))._field_kind;
						}
					}
					_match_end_1b8b41a55:;
				}
				_10613_vars = jule::alloc_for_append(_10613_vars,1);_10613_vars.__push(_10817_v);
			}
			_iter_next_1b8b3e415:;
			++it;
			goto _iter_begin_1b8b3e415;
		}
		_iter_end_1b8b3e415:;
	}
	return _10613_vars;
}



inline jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _1ce6aa4dc_build_generic_type_aliases(jule::Ptr<_1e83d630e_FnIns>& _16236_f) {
	jule::I64 _16313_size = (*(_16236_f))._field_generics.len();
	if (((*((*(_16236_f))._field_decl))._field_owner != nullptr)) {
		_16313_size+=static_cast<jule::I64>((*((*((*(_16236_f))._field_decl))._field_owner))._field_generics.len());
	}
	if ((_16313_size == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>> _17213_aliases = jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>::alloc(0LL,_16313_size);
	{
		auto &expr = (*(_16236_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_1b8b48aa1:;
		if (it != expr.end()) {
			jule::I64 _1b8b48d04_i = it - expr.begin();
			jule::Ptr<_1ce76121e_TypeKind> _1b8b49057_g = *it;
			{
				jule::Ptr<_212b1c9b5_GenericDecl> _17517_decl = (*((*(_16236_f))._field_decl))._field_generics[_1b8b48d04_i];
				_17213_aliases = jule::alloc_for_append(_17213_aliases,1);_17213_aliases.__push(jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias((*((*(_16236_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_17517_decl))._field_token,(*(_17517_decl))._field_ident,jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),_1b8b49057_g)),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>())));
			}
			_iter_next_1b8b48aa1:;
			++it;
			_1b8b48d04_i++;
			goto _iter_begin_1b8b48aa1;
		}
		_iter_end_1b8b48aa1:;
	}
	if (((*((*(_16236_f))._field_decl))._field_owner != nullptr)) {
		jule::Ptr<_1e83b84bc_StructIns> _18917_owner = (*(_16236_f))._field_owner;
		{
			auto &expr = (*(_18917_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_1b8b4a476:;
			if (it != expr.end()) {
				jule::I64 _1b8b4b686_i = it - expr.begin();
				jule::Ptr<_1ce76121e_TypeKind> _1b8b4b8ea_g = *it;
				{
					jule::Ptr<_212b1c9b5_GenericDecl> _19121_decl = (*((*(_18917_owner))._field_decl))._field_generics[_1b8b4b686_i];
					_17213_aliases = jule::alloc_for_append(_17213_aliases,1);_17213_aliases.__push(jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias((*((*(_16236_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_19121_decl))._field_token,(*(_19121_decl))._field_ident,jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),_1b8b4b8ea_g)),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>())));
				}
				_iter_next_1b8b4a476:;
				++it;
				_1b8b4b686_i++;
				goto _iter_begin_1b8b4a476;
			}
			_iter_end_1b8b4a476:;
		}
	}
	return _17213_aliases;
}



inline jule::Ptr<_1ce7204a8_SymbolTable> _1ce6aa993_find_file(jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>& _20819_files,jule::Ptr<_212aed0c2_File>& _20843_handler) {
	{
		auto &expr = _20819_files;
		auto it = expr.begin();
		_iter_begin_1b8b4ca0b:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8b4ca50_fl = *it;
			{
				if ((*(_1b8b4ca50_fl))._field_file == _20843_handler) {
					return _1b8b4ca50_fl;
				}
			}
			_iter_next_1b8b4ca0b:;
			++it;
			goto _iter_begin_1b8b4ca0b;
		}
		_iter_end_1b8b4ca0b:;
	}
	return nullptr;
}



inline void _1ce6aae38_push_suggestion(_21287ea02_Log* _21731_log,jule::Str _21742_fmt,jule::Slice<jule::Any> _21755_args) {
	(*(_21731_log))._field_suggestion=_212880739_logf(_21742_fmt,_21755_args);
}



inline jule::Slice<jule::Ptr<_1ce76121e_TypeKind>> _1ce6e8382_get_result_types(jule::Ptr<_1ce76121e_TypeKind>& _2626_result) {
	{
		
		if ((_2626_result == nullptr)) {
			_case_begin_1b8b50bda:;
			{
				return nullptr;
			}
		}
		else if (((*(_2626_result))._method_tup() == nullptr)) {
			_case_begin_1b8b50a42:;
			{
				return jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>({_2626_result});
			}
		}
		else {
			_case_begin_1b8b505ad:;
			{
				return (*((*(_2626_result))._method_tup()))._field_types;
			}
		}
		_match_end_1b8b4eb40:;
	}
}



inline jule::Bool _1ce6e1d1a_trait_has_reference_receiver(jule::Ptr<_1e85a7865_Trait>& _3934_t) {
	{
		auto &expr = (*(_3934_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_1b8b51d62:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> &_1b8b518de_f = *it;
			{
				if ((*(_1b8b518de_f))._field_statically) {
					goto _iter_next_1b8b51d62;
				}
				jule::Ptr<_1e83d3839_Param> _4613_p = (*(_1b8b518de_f))._field_params[0LL];
				if ((*(_4613_p))._method_is_ref() && (*(_4613_p))._method_is_self()) {
					return true;
				}
			}
			_iter_next_1b8b51d62:;
			++it;
			goto _iter_begin_1b8b51d62;
		}
		_iter_end_1b8b51d62:;
	}
	return false;
}



inline jule::Bool _1ce6de07b_float_assignable(jule::Str _5421_kind,jule::Ptr<_1ce727449_Data>& _5433_d) {
	jule::Str _559_value = _1cdda3961_fmt_float(static_cast<jule::F64>((*((*(_5433_d))._field_constant))._method_as_f64()),'g',-1LL,64LL);
	return _1ce675760_check_bit_float(_559_value,static_cast<jule::I64>(_1ce673c9c_bitsize_of(_5421_kind)));
}



inline jule::Bool _1ce6dcd5a_sig_assignable(jule::Str _5919_kind,jule::Ptr<_1ce727449_Data>& _5931_d) {
	jule::F64 _609_min = _1ce679ab6_min(_5919_kind);
	jule::F64 _619_max = _1ce67a06c_max(_5919_kind);
	{
		
		if ((*((*(_5931_d))._field_constant))._method_is_f64()) {
			_case_begin_1b8b5620c:;
			{
				jule::F64 _6413_x = (*((*(_5931_d))._field_constant))._method_read_f64();
				jule::F64 _6514_i;
				jule::F64 _6517_frac;
				std::tie(_6514_i,_6517_frac) = _1ce439634_modf(_6413_x);
				if ((_6517_frac != 0LL)) {
					return false;
				}
				return (_6514_i >= _609_min) && (_6514_i <= _619_max);
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_u64()) {
			_case_begin_1b8b56273:;
			{
				jule::F64 _7113_x = (*((*(_5931_d))._field_constant))._method_as_f64();
				if (_7113_x <= _619_max) {
					return true;
				}
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_i64()) {
			_case_begin_1b8b562d9:;
			{
				jule::F64 _7613_x = (*((*(_5931_d))._field_constant))._method_as_f64();
				return (_609_min <= _7613_x) && (_7613_x <= _619_max);
			}
		}
		_match_end_1b8b560b9:;
	}
	return false;
}



inline jule::Bool _1ce6e348c_unsig_assignable(jule::Str _8221_kind,jule::Ptr<_1ce727449_Data>& _8233_d) {
	jule::F64 _839_max = _1ce67a06c_max(_8221_kind);
	if ((*(_8233_d))._field_is_rune && (_8221_kind == jule::Str("u8", 2))) {
		return _1ce70a43d_is_ascii(static_cast<jule::I32>(static_cast<jule::I32>((*((*(_8233_d))._field_constant))._method_read_i64())));
	}
	{
		
		if ((*((*(_8233_d))._field_constant))._method_is_f64()) {
			_case_begin_1b8b5c257:;
			{
				jule::F64 _9013_x = (*((*(_8233_d))._field_constant))._method_read_f64();
				if ((_9013_x < 0LL)) {
					return false;
				}
				jule::F64 _9414_i;
				jule::F64 _9417_frac;
				std::tie(_9414_i,_9417_frac) = _1ce439634_modf(_9013_x);
				if ((_9417_frac != 0LL)) {
					return false;
				}
				return _9414_i <= _839_max;
			}
		}
		else if ((*((*(_8233_d))._field_constant))._method_is_u64()) {
			_case_begin_1b8b5c2bd:;
			{
				jule::F64 _10013_x = (*((*(_8233_d))._field_constant))._method_as_f64();
				if (_10013_x <= _839_max) {
					return true;
				}
			}
		}
		else if ((*((*(_8233_d))._field_constant))._method_is_i64()) {
			_case_begin_1b8b5c334:;
			{
				jule::F64 _10513_x = (*((*(_8233_d))._field_constant))._method_as_f64();
				return (0LL <= _10513_x) && (_10513_x <= _839_max);
			}
		}
		_match_end_1b8b5b4cb:;
	}
	return false;
}



inline jule::Bool _1ce6e3635_int_assignable(jule::Str _11119_kind,jule::Ptr<_1ce727449_Data>& _11131_d) {
	{
		
		if (_1ce6818d1_is_sig_int(_11119_kind)) {
			_case_begin_1b8b62a32:;
			{
				return _1ce6dcd5a_sig_assignable(_11119_kind,_11131_d);
			}
		}
		else if (_1ce681caa_is_unsig_int(_11119_kind)) {
			_case_begin_1b8b62a98:;
			{
				return _1ce6e348c_unsig_assignable(_11119_kind,_11131_d);
			}
		}
		else {
			_case_begin_1b8b622b2:;
			{
				return false;
			}
		}
		_match_end_1b8b5ce5b:;
	}
}



inline jule::Ptr<_2129e3902_Directive> _1ce72a947_find_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _420624_directives,jule::Str _420666_d) {
	{
		auto &expr = _420624_directives;
		auto it = expr.begin();
		_iter_begin_1b8b63901:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b8b62b31_dr = *it;
			{
				if ((*(_1b8b62b31_dr))._field_tag._field_kind == _420666_d) {
					return _1b8b62b31_dr;
				}
			}
			_iter_next_1b8b63901:;
			++it;
			goto _iter_begin_1b8b63901;
		}
		_iter_end_1b8b63901:;
	}
	return nullptr;
}



inline jule::Any _1ce72aded_find_builtins_import(jule::Str _421525_ident,jule::Ptr<_1ce6a0317_ImportInfo> _421537_imp) {
	return _1b546854a_find_package_builtin_def((*(_421537_imp))._field_link_path,_421525_ident);
}



inline void _1ce72b33d_fit_bitsize(jule::Ptr<_1ce727449_Data>& _422221_d) {
	jule::Ptr<_1ce762330_Prim> _422313_prim = (*((*(_422221_d))._field_kind))._method_prim();
	jule::I64 _42249_z = _1ce673c9c_bitsize_of((*(_422313_prim))._method_to_str());
	if ((_42249_z == 64LL)) {
		return;
	}
	jule::I64 _422913_k = 0LL;
	{
		
		if ((*((*(_422221_d))._field_constant))._method_is_i64()) {
			_case_begin_1b8b66959:;
			{
				_422913_k=static_cast<jule::I64>(_1ce676101_bitsize_of_int(static_cast<jule::I64>((*((*(_422221_d))._field_constant))._method_read_i64())));
				if (_422913_k > _42249_z) {
					(*(_422313_prim))._field_kind=_1ce674154_int_from_bits(_422913_k);
				}
			}
		}
		else if ((*((*(_422221_d))._field_constant))._method_is_u64()) {
			_case_begin_1b8b669d1:;
			{
				_422913_k=static_cast<jule::I64>(_1ce676585_bitsize_of_uint(static_cast<jule::U64>((*((*(_422221_d))._field_constant))._method_read_u64())));
				if (_422913_k > _42249_z) {
					(*(_422313_prim))._field_kind=_1ce6745a5_uint_from_bits(_422913_k);
				}
			}
		}
		else if ((*((*(_422221_d))._field_constant))._method_is_f64()) {
			_case_begin_1b8b66a58:;
			{
				_422913_k=static_cast<jule::I64>(_1ce675bd3_bitsize_of_float(static_cast<jule::F64>((*((*(_422221_d))._field_constant))._method_read_f64())));
				if (_422913_k > _42249_z) {
					(*(_422313_prim))._field_kind=_1ce674990_float_from_bits(_422913_k);
				}
			}
		}
		_match_end_1b8b6688d:;
	}
}



inline void _1ce72b915_make_struct_lit_alloc(jule::Ptr<_1ce727449_Data>& _424931_d,jule::Ptr<_1e83c0bbc_StructLitExprModel>& _424946_lit) {
	(*(_424931_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce76286e_Sptr>(new( std::nothrow ) _1ce76286e_Sptr(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_424946_lit))._field_strct))))));
	(*(_424931_d))._field_model=jule::Any(jule::new_struct<_1e83c1393_AllocStructLitExprModel>(new( std::nothrow ) _1e83c1393_AllocStructLitExprModel(_424946_lit)));
}



inline jule::Ptr<_1ce6cecb4_Var> _1ce72bae1_build_error_var(jule::Ptr<_1ce62e86d_Scope>& _426025_s,jule::Ptr<_212b19bd2_FnCallExpr>& _426041_fc) {
	return jule::new_struct<_1ce6cecb4_Var>(new( std::nothrow ) _1ce6cecb4_Var(_426025_s,(*(_426041_fc))._field_token,jule::Str("error", 5),jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),false,jule::Str(),jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("any", 3)))))),jule::new_struct<_1ce7281d6_Value>(new( std::nothrow ) _1ce7281d6_Value(jule::Ptr<_212b16162_Expr>(),jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data()))),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Slice<jule::Ptr<_2129e3902_Directive>>(),jule::Ptr<_1ce6ce6cb_IterRelation>(),jule::Slice<jule::Ptr<_1ce6cecb4_Var>>()));
}



inline jule::Any _1ce72c031_find_builtins_sema(jule::Str _427923_ident,jule::Ptr<_1ce6ab345_Sema> _427939_s) {
	{
		auto &expr = (*((*(_427939_s))._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_1b8b6e2be:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8b6e379_imp = *it;
			{
				if ((*(_1b8b6e379_imp))._field_import_all || (*(_1b8b6e379_imp))._method_exist_ident(_427923_ident)) {
					jule::Any _428221_def = _1ce72aded_find_builtins_import(_427923_ident,_1b8b6e379_imp);
					if (_428221_def != jule::Any(nullptr)) {
						return _428221_def;
					}
				}
			}
			_iter_next_1b8b6e2be:;
			++it;
			goto _iter_begin_1b8b6e2be;
		}
		_iter_end_1b8b6e2be:;
	}
	jule::Str _429013_ppath = (*((*((*(_427939_s))._field_file))._field_file))._method_dir();
	if (_2127d7dbc_has_prefix(_429013_ppath,_21289b502_PATH_STDLIB)) {
		(_429013_ppath).mut_slice(_21289b502_PATH_STDLIB.len());
		_429013_ppath=jule::Str("std", 3) + _211e264a6_replace(_429013_ppath,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
		return _1b546854a_find_package_builtin_def(_429013_ppath,_427923_ident);
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1ce72c471_is_ok_for_shifting(jule::Ptr<_1ce727449_Data>& _430428_d) {
	if ((*(_430428_d))._method_is_const()) {
		{
			
			if ((*((*(_430428_d))._field_constant))._method_is_i64()) {
				_case_begin_1b8b73922:;
				{
					return ((*((*(_430428_d))._field_constant))._method_read_i64() >= 0LL);
				}
			}
			else if ((*((*(_430428_d))._field_constant))._method_is_u64()) {
				_case_begin_1b8b73988:;
				{
					return true;
				}
			}
			else if ((*((*(_430428_d))._field_constant))._method_is_f64()) {
				_case_begin_1b8b73306:;
				{
					return ((*((*(_430428_d))._field_constant))._method_read_f64() >= 0LL);
				}
			}
			else {
				_case_begin_1b8b73191:;
				{
					return false;
				}
			}
			_match_end_1b8b730c5:;
		}
	}
	jule::Ptr<_1ce762330_Prim> _43179_prim = (*((*(_430428_d))._field_kind))._method_prim();
	return (_43179_prim != nullptr) && _1ce682173_is_int((*(_43179_prim))._method_to_str());
}



inline jule::Bool _1ce72c8e4_is_instanced_struct(jule::Ptr<_1e83b84bc_StructIns> _432124_s) {
	return (*((*(_432124_s))._field_decl))._field_generics.len() == static_cast<jule::I64>((*(_432124_s))._field_generics.len());
}



inline jule::Bool _1ce72cbad_is_ptr_arithmetic_compatible_int(jule::Ptr<_1ce727449_Data>& _432542_d) {
	if ((*(_432542_d))._method_is_const()) {
		return _1ce6e3635_int_assignable(jule::Str("int", 3),_432542_d);
	}
	_1ce70c231_TypeCompatibilityChecker _432913_tcc = _1ce70c231_TypeCompatibilityChecker(jule::Ptr<_1ce6ab345_Sema>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),(*(_432542_d))._field_kind,_212ae5c02_Token());
	return _432913_tcc._method_check();
}



inline void _1ce72d076_apply_cast_kind_model(jule::Ptr<_1ce727449_Data>& _433831_d) {
	(*(_433831_d))._field_model=jule::Any(jule::new_struct<_1e83c1aad_CastingExprModel>(new( std::nothrow ) _1e83c1aad_CastingExprModel(_212ae5c02_Token(),(*(_433831_d))._field_model,(*(_433831_d))._field_cast_kind,(*(_433831_d))._field_kind)));
}



inline void _1ce72d30c_apply_cast_kind(jule::Ptr<_1ce727449_Data>& _434625_d) {
	if (((*(_434625_d))._field_cast_kind == nullptr)) {
		return;
	}
	_1ce72d076_apply_cast_kind_model(_434625_d);
	(*(_434625_d))._field_kind=(*(_434625_d))._field_cast_kind;
	(*(_434625_d))._field_cast_kind=nullptr;
}



inline jule::Ptr<_1ce727449_Data> _1ce72d5c6_build_void_data(void) {
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("void", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Str _1ce72d83a_check_data_for_integer_indexing(jule::Ptr<_1ce727449_Data>& _436741_d) {
	jule::Str _436753_err_fmt = jule::Str();
	if ((_436741_d == nullptr)) {
		_436753_err_fmt = jule::Str();
		return _436753_err_fmt;
	}
	{
		
		if (((*((*(_436741_d))._field_kind))._method_prim() == nullptr)) {
			_case_begin_1b8b7bb4a:;
			{
				_436753_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _436753_err_fmt;
			}
		}
		else if ((!(_1ce682173_is_int((*((*((*(_436741_d))._field_kind))._method_prim()))._method_to_str())))) {
			_case_begin_1b8b7bbb1:;
			{
				_436753_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _436753_err_fmt;
			}
		}
		else if ((*(_436741_d))._method_is_const()) {
			_case_begin_1b8b7bc27:;
			{
				if (((*((*(_436741_d))._field_constant))._method_as_f64() < 0LL)) {
					_436753_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _436753_err_fmt;
				}
			}
		}
		else if (((*((*(_436741_d))._field_kind))._method_prim() == nullptr) || (*(_436741_d))._method_is_const() || _1ce673780_real_kind_of((*((*((*(_436741_d))._field_kind))._method_prim()))._method_to_str()) != _1ce673780_real_kind_of(jule::Str("int", 3))) {
			_case_begin_1b8b7bc8d:;
			{
				(*(_436741_d))._field_cast_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3))));
				_1ce72d30c_apply_cast_kind(_436741_d);
			}
		}
		_match_end_1b8b7c1ab:;
	}
	_436753_err_fmt = jule::Str();
	return _436753_err_fmt;
}



inline void _1ce72dbd1_apply_cast_model_by_enum(jule::Ptr<_1ce727449_Data>& _439334_d,jule::Ptr<_1e8648917_Enum> _439348_e) {
	if ((_439348_e == nullptr)) {
		return;
	}
	jule::Ptr<_1ce762330_Prim> _43979_p = (*((*((*(_439348_e))._field_kind))._field_kind))._method_prim();
	if ((*(_43979_p))._method_is_str()) {
		return;
	}
	(*(_439334_d))._field_cast_kind=(*((*(_439348_e))._field_kind))._field_kind;
	_1ce72d076_apply_cast_kind_model(_439334_d);
	(*(_439334_d))._field_cast_kind=nullptr;
}



inline void _1ce72e2db_cast_const_by_type(jule::Str& _440624_t,jule::Ptr<_1ce727449_Data>& _440637_d) {
	{
		
		if (_1ce6818d1_is_sig_int(_440624_t)) {
			_case_begin_1b8b84812:;
			{
				{
					auto _match_expr{ _1ce673c9c_bitsize_of(_1ce673780_real_kind_of(_440624_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_1b8b85615:;
						{
							(*((*(_440637_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_440637_d))._field_constant))._method_as_i64()));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_1b8b85769:;
						{
							(*((*(_440637_d))._field_constant))._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I32>((*((*(_440637_d))._field_constant))._method_as_i64()))));
						}
					}
					else if (_match_expr == 16LL) {
						_case_begin_1b8b857d0:;
						{
							(*((*(_440637_d))._field_constant))._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I16>((*((*(_440637_d))._field_constant))._method_as_i64()))));
						}
					}
					else if (_match_expr == 8LL) {
						_case_begin_1b8b85846:;
						{
							(*((*(_440637_d))._field_constant))._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I8>((*((*(_440637_d))._field_constant))._method_as_i64()))));
						}
					}
					_match_end_1b8b85307:;
				}
			}
		}
		else if (_1ce681caa_is_unsig_int(_440624_t)) {
			_case_begin_1b8b84889:;
			{
				{
					auto _match_expr{ _1ce673c9c_bitsize_of(_1ce673780_real_kind_of(_440624_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_1b8b88c45:;
						{
							(*((*(_440637_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_440637_d))._field_constant))._method_as_u64()));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_1b8b8a010:;
						{
							(*((*(_440637_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U32>((*((*(_440637_d))._field_constant))._method_as_u64()))));
						}
					}
					else if (_match_expr == 16LL) {
						_case_begin_1b8b8a076:;
						{
							(*((*(_440637_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U16>((*((*(_440637_d))._field_constant))._method_as_u64()))));
						}
					}
					else if (_match_expr == 8LL) {
						_case_begin_1b8b8a0dc:;
						{
							(*((*(_440637_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U8>((*((*(_440637_d))._field_constant))._method_as_u64()))));
						}
					}
					_match_end_1b8b85109:;
				}
			}
		}
		else if (_1ce6825b3_is_float(_440624_t)) {
			_case_begin_1b8b84911:;
			{
				{
					auto _match_expr{ _1ce673c9c_bitsize_of(_1ce673780_real_kind_of(_440624_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_1b8b8e6da:;
						{
							(*((*(_440637_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_440637_d))._field_constant))._method_as_f64()));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_1b8b8e83e:;
						{
							(*((*(_440637_d))._field_constant))._method_set_f64(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F32>((*((*(_440637_d))._field_constant))._method_as_f64()))));
						}
					}
					_match_end_1b8b8d563:;
				}
			}
		}
		_match_end_1b8b84702:;
	}
}



inline jule::Bool _1ce75e34e_has_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _3323_directives,jule::Str _3354_tag) {
	{
		auto &expr = _3323_directives;
		auto it = expr.begin();
		_iter_begin_1b8b8c430:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b8b90ae8_dr = *it;
			{
				if ((*(_1b8b90ae8_dr))._field_tag._field_kind == _3354_tag) {
					return true;
				}
			}
			_iter_next_1b8b8c430:;
			++it;
			goto _iter_begin_1b8b8c430;
		}
		_iter_end_1b8b8c430:;
	}
	return false;
}



inline jule::Bool _1ce76507a_can_get_ptr(jule::Ptr<_1ce727449_Data>& _55221_d) {
	if ((!((*(_55221_d))._field_lvalue)) || (*(_55221_d))._method_is_const()) {
		return false;
	}
	{
		
		if (((*((*(_55221_d))._field_kind))._method_fnc() != nullptr) || ((*((*(_55221_d))._field_kind))._method_enm() != nullptr)) {
			_case_begin_1b8b9369a:;
			{
				return false;
			}
		}
		else {
			_case_begin_1b8b92e3b:;
			{
				return true;
			}
		}
		_match_end_1b8b92dc5:;
	}
}



inline jule::Bool _1ce7653cc_is_valid_for_sptr_type(jule::Ptr<_1ce76121e_TypeKind>& _56732_t) {
	jule::Ptr<_1e83b84bc_StructIns> _56813_s = (*(_56732_t))._method_strct();
	if (((_56813_s != nullptr) && ((*(_56813_s))._field_decl != nullptr)) && (*((*(_56813_s))._field_decl))._field_cpp_linked) {
		return false;
	}
	return true;
}



inline jule::Bool _1ce765850_is_valid_for_ref(jule::Ptr<_1ce76121e_TypeKind>& _57626_t) {
	return ((*(_57626_t))._method_fnc() == nullptr);
}



inline jule::Bool _1ce765bc4_is_builtin_str_convertable(jule::Ptr<_1ce76121e_TypeKind>& _57936_t) {
	return ((!((*(_57936_t))._method_void())) && ((*(_57936_t))._method_fnc() == nullptr)) && ((*(_57936_t))._method_tup() == nullptr);
}



inline jule::Str _1ce76609d_build_link_path_by_tokens(jule::Slice<_212ae5c02_Token>& _58331_tokens) {
	jule::Str _58413_s = _58331_tokens[0LL]._field_kind;
	{
		auto expr = _58331_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_1b8b97eb8:;
		if (it != expr.end()) {
			_212ae5c02_Token &_1b8b9824e_token = *it;
			{
				_58413_s+=jule::Str("::", 2);
				_58413_s+=_1b8b9824e_token._field_kind;
			}
			_iter_next_1b8b97eb8:;
			++it;
			goto _iter_begin_1b8b97eb8;
		}
		_iter_end_1b8b97eb8:;
	}
	return _58413_s;
}



inline jule::Ptr<_1ce762330_Prim> _1ce7663cd_build_prim_type(jule::Str _59220_kind) {
	return jule::new_struct_ptr<_1ce762330_Prim>(new( std::nothrow ) _1ce762330_Prim(_59220_kind));
}



inline jule::Ptr<_1e83b1718_Struct> _1ce76682e_get_struct_from_kind(jule::Ptr<_1ce76121e_TypeKind> _59829_k) {
	{
		
		if ((_59829_k == nullptr)) {
			_case_begin_1b8b9997b:;
			{
				return nullptr;
			}
		}
		else if (((*(_59829_k))._method_strct() != nullptr)) {
			_case_begin_1b8b999e2:;
			{
				return (*((*(_59829_k))._method_strct()))._field_decl;
			}
		}
		else if (((*(_59829_k))._method_sptr() != nullptr)) {
			_case_begin_1b8b996e5:;
			{
				return _1ce76682e_get_struct_from_kind((*((*(_59829_k))._method_sptr()))._field_elem);
			}
		}
		else if (((*(_59829_k))._method_slc() != nullptr)) {
			_case_begin_1b8b9975b:;
			{
				return _1ce76682e_get_struct_from_kind((*((*(_59829_k))._method_slc()))._field_elem);
			}
		}
		else if (((*(_59829_k))._method_arr() != nullptr)) {
			_case_begin_1b8b997c2:;
			{
				return _1ce76682e_get_struct_from_kind((*((*(_59829_k))._method_arr()))._field_elem);
			}
		}
		else if (((*(_59829_k))._method_ptr() != nullptr)) {
			_case_begin_1b8b9941a:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_1b8b992a5:;
			{
				return nullptr;
			}
		}
		_match_end_1b8b991c8:;
	}
}



inline jule::Bool _1ce766ae8_is_prim(jule::Str _62712_kind) {
	return (((((((((((((((_62712_kind == jule::Str("i8", 2)) || (_62712_kind == jule::Str("i16", 3))) || (_62712_kind == jule::Str("i32", 3))) || (_62712_kind == jule::Str("i64", 3))) || (_62712_kind == jule::Str("u8", 2))) || (_62712_kind == jule::Str("u16", 3))) || (_62712_kind == jule::Str("u32", 3))) || (_62712_kind == jule::Str("u64", 3))) || (_62712_kind == jule::Str("f32", 3))) || (_62712_kind == jule::Str("f64", 3))) || (_62712_kind == jule::Str("int", 3))) || (_62712_kind == jule::Str("uint", 4))) || (_62712_kind == jule::Str("uintptr", 7))) || (_62712_kind == jule::Str("bool", 4))) || (_62712_kind == jule::Str("str", 3))) || (_62712_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ptr<_1ce7204a8_SymbolTable>,jule::Slice<_21287ea02_Log>> _1b546219d_build_symbols(jule::Ptr<_2129e26e2_Ast>& _1523_ast,jule::Trait<_1ce69b511_Importer>& _1539_importer,jule::Ptr<_1e83e45b4_SymbolBuilder> _1563_owner) {
	jule::Ptr<_1e83e45b4_SymbolBuilder> _1613_sb = jule::new_struct_ptr<_1e83e45b4_SymbolBuilder>(new( std::nothrow ) _1e83e45b4_SymbolBuilder(_1563_owner,_1539_importer,jule::Slice<_21287ea02_Log>(),_1523_ast,jule::Ptr<_1ce7204a8_SymbolTable>()));
	(*(_1613_sb))._method_build();
	if (((*(_1613_sb))._field_errors.len() == 0LL)) {
		return std::make_tuple((*(_1613_sb))._field_table,nullptr);
	}
	return std::make_tuple(nullptr,(*(_1613_sb))._field_errors);
}



inline std::tuple<jule::Ptr<_1ce6a15e3_Package>,jule::Slice<_21287ea02_Log>> _1b5462742___analyze_package(jule::Slice<jule::Ptr<_2129e26e2_Ast>>& _2927_files,jule::Trait<_1ce69b511_Importer>& _2947_importer,jule::I64& _2968_flags) {
	jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>::alloc(0LL,static_cast<jule::I64>(_2927_files.len()));
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_1b8ba55be:;
		if (it != expr.end()) {
			jule::Ptr<_2129e26e2_Ast> _1b8ba5899_f = *it;
			{
				jule::Ptr<_1ce7204a8_SymbolTable> _3318_table;
				jule::Slice<_21287ea02_Log> _3329_errors;
				std::tie(_3318_table,_3329_errors) = _1b546219d_build_symbols(_1b8ba5899_f,_2947_importer,nullptr);
				if ((_3329_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_3329_errors);
				}
				_3113_tables = jule::alloc_for_append(_3113_tables,1);_3113_tables.__push(_3318_table);
			}
			_iter_next_1b8ba55be:;
			++it;
			goto _iter_begin_1b8ba55be;
		}
		_iter_end_1b8ba55be:;
	}
	jule::Ptr<_1ce6ab345_Sema> _4013_sema = jule::new_struct_ptr<_1ce6ab345_Sema>(new( std::nothrow ) _1ce6ab345_Sema(jule::Slice<_21287ea02_Log>(),jule::Slice<jule::Ptr<_1ce7204a8_SymbolTable>>(),jule::Ptr<_1ce7204a8_SymbolTable>(),_2968_flags));
	(*(_4013_sema))._method_check(_3113_tables);
	if (((*(_4013_sema))._field_errors.len() > 0LL)) {
		return std::make_tuple(nullptr,(*(_4013_sema))._field_errors);
	}
	jule::Ptr<_1ce6a15e3_Package> _4813_pkg = jule::new_struct<_1ce6a15e3_Package>(new( std::nothrow ) _1ce6a15e3_Package((*(_4013_sema))._field_files));
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_1ce6a15e3_Package>,jule::Slice<_21287ea02_Log>> _1b5462c70_analyze_package(jule::Slice<jule::Ptr<_2129e26e2_Ast>> _7228_files,jule::Trait<_1ce69b511_Importer> _7247_importer,jule::I64 _7267_flags) {
	if ((_7228_files.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1ce6a15e3_Package> _7714_package;
	jule::Slice<_21287ea02_Log> _7727_logs;
	std::tie(_7714_package,_7727_logs) = _1b5462742___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Ptr<_1e83d630e_FnIns> _1b5469bcd_find_builtin_fn(jule::Str _2120_ident) {
	{
		auto &_match_expr{ _2120_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_1b8bae078:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _2420_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c2384_builtin_caller_out),jule::Bool()));
				return _2420_f;
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_1b8bae0de:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _2720_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5496c60_builtin_caller_outln),jule::Bool()));
				return _2720_f;
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_1b8badce2:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _3020_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54745ab_builtin_caller_new),jule::Bool()));
				return _3020_f;
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_1b8badd58:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _3320_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b547190a_builtin_caller_panic),jule::Bool()));
				return _3320_f;
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_1b8baddbe:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _3620_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5471aa3_builtin_caller_make),jule::Bool()));
				return _3620_f;
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_1b8bada7d:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _3920_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5496204_builtin_caller_append),jule::Bool()));
				return _3920_f;
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_1b8badae4:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _4220_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b549639c_builtin_caller_copy),jule::Bool()));
				return _4220_f;
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_1b8badb5a:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _4520_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5496545_builtin_caller_clone),jule::Bool()));
				return _4520_f;
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_1b8badbc1:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _4820_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54966dd_builtin_caller_assert),jule::Bool()));
				return _4820_f;
			}
		}
		else {
			_case_begin_1b8bad297:;
			{
				return nullptr;
			}
		}
		_match_end_1b8bad808:;
	}
}



inline jule::Ptr<_1ce75e6a1_TypeAlias> _1b546cebc_find_builtin_type_alias(jule::Str _5528_ident) {
	{
		auto &_match_expr{ _5528_ident };
		
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_1b8bb4e2a:;
			{
				static jule::Ptr<_1ce75e6a1_TypeAlias> _5820_t = jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias(jule::Ptr<_212b1e555_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_212ae5c02_Token(),jule::Str(),jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>()));
				return _5820_t;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_1b8bb4ed5:;
			{
				static jule::Ptr<_1ce75e6a1_TypeAlias> _6820_t = jule::new_struct<_1ce75e6a1_TypeAlias>(new( std::nothrow ) _1ce75e6a1_TypeAlias(jule::Ptr<_212b1e555_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_212ae5c02_Token(),jule::Str(),jule::new_struct<_1ce761b37_TypeSymbol>(new( std::nothrow ) _1ce761b37_TypeSymbol(jule::Ptr<_2129e3d42_TypeDecl>(),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1ce75e6a1_TypeAlias>>()));
				return _6820_t;
			}
		}
		else {
			_case_begin_1b8bb3dd5:;
			{
				return nullptr;
			}
		}
		_match_end_1b8bb4941:;
	}
}



inline jule::Ptr<_1e85a7865_Trait> _1b546de13_find_builtin_trait(jule::Str _8223_ident) {
	return nullptr;
}



inline jule::Any _1b547526b_find_builtin_def(jule::Str _8621_ident) {
	jule::Ptr<_1e83d630e_FnIns> _8713_f = _1b5469bcd_find_builtin_fn(_8621_ident);
	if ((_8713_f != nullptr)) {
		return jule::Any(_8713_f);
	}
	jule::Ptr<_1ce75e6a1_TypeAlias> _9213_ta = _1b546cebc_find_builtin_type_alias(_8621_ident);
	if ((_9213_ta != nullptr)) {
		return jule::Any(_9213_ta);
	}
	jule::Ptr<_1e85a7865_Trait> _9713_t = _1b546de13_find_builtin_trait(_8621_ident);
	if ((_9713_t != nullptr)) {
		return jule::Any(_9713_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1b548cd22_find_builtin_def_std_debug(jule::Str _10531_ident) {
	{
		auto &_match_expr{ _10531_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_1b8bb9869:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _10820_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c3242_builtin_caller_std_debug_out),jule::Bool()));
				return jule::Any(_10820_f);
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_1b8bb96c1:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _11120_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c33da_builtin_caller_std_debug_outln),jule::Bool()));
				return jule::Any(_11120_f);
			}
		}
		else {
			_case_begin_1b8bb779b:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_1b8bb93a2:;
	}
}



inline jule::Any _1b54899cd_find_builtin_def_std_mem(jule::Str _11829_ident) {
	{
		auto &_match_expr{ _11829_ident };
		
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_1b8bbb591:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _12120_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b5496886_builtin_caller_std_mem_size_of),jule::Bool()));
				return jule::Any(_12120_f);
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_1b8bbb3e8:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _12420_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c2ab0_builtin_caller_std_mem_align_of),jule::Bool()));
				return jule::Any(_12420_f);
			}
		}
		else if (_match_expr == jule::Str("free", 4)) {
			_case_begin_1b8bbb45e:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _12720_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c2c58_builtin_caller_std_mem_free),jule::Bool()));
				return jule::Any(_12720_f);
			}
		}
		else {
			_case_begin_1b8bb9737:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_1b8bbb096:;
	}
}



inline jule::Any _1b5495b93_find_builtin_def_std_jule_integrated(jule::Str _13441_ident) {
	{
		auto &_match_expr{ _13441_ident };
		
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_1b8bbdc14:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _13720_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c2e01_builtin_caller_std_jule_integrated_to_str),jule::Bool()));
				return jule::Any(_13720_f);
			}
		}
		else if (_match_expr == jule::Str("emit", 4)) {
			_case_begin_1b8bbda6b:;
			{
				static jule::Ptr<_1e83d630e_FnIns> _14020_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>(),jule::Ptr<_1ce76121e_TypeKind>(),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54c3099_builtin_caller_std_jule_integrated_emit),jule::Bool()));
				return jule::Any(_14020_f);
			}
		}
		else {
			_case_begin_1b8bbb4c5:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_1b8bbd719:;
	}
}



inline jule::Any _1b546854a_find_package_builtin_def(jule::Str _14729_link_path,jule::Str _14745_ident) {
	{
		auto &_match_expr{ _14729_link_path };
		
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_1b8bc0793:;
			{
				return _1b548cd22_find_builtin_def_std_debug(_14745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_1b8bc5699:;
			{
				return _1b54899cd_find_builtin_def_std_mem(_14745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_1b8bc5710:;
			{
				return _1b5495b93_find_builtin_def_std_jule_integrated(_14745_ident);
			}
		}
		else {
			_case_begin_1b8bc05b7:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_1b8bc0694:;
	}
}



inline jule::Ptr<_1ce727449_Data> _1b54b0295_builtin_caller_common_plain(jule::Ptr<_1ce728879_Eval>& _16037_e,jule::Ptr<_212b19bd2_FnCallExpr>& _16052_fc,jule::Ptr<_1ce727449_Data>& _16074_d) {
	jule::Ptr<_1e83d630e_FnIns> _16113_f = (*((*(_16074_d))._field_kind))._method_fnc();
	_1ce70d908_FnCallArgChecker _16313_fcac = _1ce70d908_FnCallArgChecker(_16037_e,(*(_16052_fc))._field_args,(*(_16052_fc))._field_token,_16113_f,false,jule::Slice<jule::Any>());
	if ((!(_16313_fcac._method_check()))) {
		return nullptr;
	}
	jule::Ptr<_1e83c2581_FnCallExprModel> _17413_model = jule::new_struct<_1e83c2581_FnCallExprModel>(new( std::nothrow ) _1e83c2581_FnCallExprModel((*(_16052_fc))._field_token,_16113_f,jule::Bool(),(*(_16074_d))._field_model,_16313_fcac._field_arg_models,jule::Ptr<_1ce62e86d_Scope>(),jule::Bool()));
	if (((*(_16113_f))._field_result == nullptr)) {
		_16074_d=_1ce72d5c6_build_void_data();
	} else {
		_16074_d=jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data((*(_16113_f))._field_result,jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
	}
	(*(_16074_d))._field_model=jule::Any(_17413_model);
	return _16074_d;
}



inline jule::Ptr<_1ce727449_Data> _1b5474996_builtin_caller_common(jule::Ptr<_1ce728879_Eval>& _19331_e,jule::Ptr<_212b19bd2_FnCallExpr>& _19346_fc,jule::Ptr<_1ce727449_Data>& _19368_d) {
	if (((*(_19346_fc))._field_generics.len() > 0LL)) {
		(*(_19331_e))._method_push_err((*(_19346_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	return _1b54b0295_builtin_caller_common_plain(_19331_e,_19346_fc,_19368_d);
}



inline jule::Ptr<_1ce727449_Data> _1b5465701_builtin_caller_common_mut(jule::Ptr<_1ce728879_Eval>& _20135_e,jule::Ptr<_212b19bd2_FnCallExpr>& _20150_fc,jule::Ptr<_1ce727449_Data>& _20172_d) {
	if ((!((*(_20172_d))._field_mutable))) {
		(*(_20135_e))._method_push_err((*(_20150_fc))._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	}
	return _1b5474996_builtin_caller_common(_20135_e,_20150_fc,_20172_d);
}



inline jule::Ptr<_1ce727449_Data> _1b5465c1d_builtin_caller_error(jule::Ptr<_1ce728879_Eval>& _20830_e,jule::Ptr<_212b19bd2_FnCallExpr>& _20845_fc) {
	if (((*(_20845_fc))._field_generics.len() > 0LL)) {
		(*(_20830_e))._method_push_err((*(_20845_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_20845_fc))._field_args.len() < 1LL)) {
		(*(_20830_e))._method_push_err((*(_20845_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	}
	if (((*(_20845_fc))._field_args.len() > 1LL)) {
		(*(_20830_e))._method_push_err((*((*(_20845_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _21913_expr = (*(_20830_e))._method_eval_expr((*(_20845_fc))._field_args[0LL]);
	if ((_21913_expr == nullptr)) {
		return nullptr;
	}
	if ((*(_21913_expr))._method_is_nil()) {
		(*(_20830_e))._method_push_err((*((*(_20845_fc))._field_args[0LL]))._field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _22813_d = _1ce72d5c6_build_void_data();
	(*(_22813_d))._field_model=jule::Any(jule::new_struct<_1e83cd9ee_BuiltinErrorCallExprModel>(new( std::nothrow ) _1e83cd9ee_BuiltinErrorCallExprModel(jule::Ptr<_1e83d630e_FnIns>(),(*(_21913_expr))._field_model)));
	return _22813_d;
}



inline jule::Ptr<_1ce727449_Data> _1b54c2384_builtin_caller_out(jule::Ptr<_1ce728879_Eval>& _23628_e,jule::Ptr<_212b19bd2_FnCallExpr>& _23643_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_23643_fc))._field_generics.len() > 0LL)) {
		(*(_23628_e))._method_push_err((*(_23643_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_23643_fc))._field_args.len() < 1LL)) {
		(*(_23628_e))._method_push_err((*(_23643_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	}
	if (((*(_23643_fc))._field_args.len() > 1LL)) {
		(*(_23628_e))._method_push_err((*((*(_23643_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _24813_expr = (*(_23628_e))._method_eval_expr((*(_23643_fc))._field_args[0LL]);
	if ((_24813_expr == nullptr)) {
		return nullptr;
	}
	if ((!(_1ce765bc4_is_builtin_str_convertable((*(_24813_expr))._field_kind)))) {
		(*(_23628_e))._method_push_err((*((*(_23643_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _25813_d = _1ce72d5c6_build_void_data();
	(*(_25813_d))._field_model=jule::Any(jule::new_struct<_1e83c9b1b_BuiltinOutCallExprModel>(new( std::nothrow ) _1e83c9b1b_BuiltinOutCallExprModel((*(_24813_expr))._field_model,jule::Bool())));
	return _25813_d;
}



inline jule::Ptr<_1ce727449_Data> _1b5496c60_builtin_caller_outln(jule::Ptr<_1ce728879_Eval>& _26330_e,jule::Ptr<_212b19bd2_FnCallExpr>& _26345_fc,jule::Ptr<_1ce727449_Data>& _26367_d) {
	_26367_d=_1b54c2384_builtin_caller_out(_26330_e,_26345_fc,_26367_d);
	if ((_26367_d == nullptr)) {
		return nullptr;
	}
	(*(_26367_d))._field_model=jule::Any(jule::new_struct<_1e83ca39c_BuiltinOutlnCallExprModel>(new( std::nothrow ) _1e83ca39c_BuiltinOutlnCallExprModel((*((*(_26367_d))._field_model.operator jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>()))._field_expr,jule::Bool())));
	return _26367_d;
}



inline jule::Ptr<_1ce727449_Data> _1b54745ab_builtin_caller_new(jule::Ptr<_1ce728879_Eval>& _27528_e,jule::Ptr<_212b19bd2_FnCallExpr>& _27543_fc,jule::Ptr<_1ce727449_Data>& _27565_d) {
	if (((*(_27543_fc))._field_generics.len() > 0LL)) {
		(*(_27528_e))._method_push_err((*(_27543_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_27543_fc))._field_args.len() < 1LL)) {
		(*(_27528_e))._method_push_err((*(_27543_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	}
	if (((*(_27543_fc))._field_args.len() > 2LL)) {
		(*(_27528_e))._method_push_err((*((*(_27543_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _28713_t = (*(_27528_e))._method_eval_expr_kind((*((*(_27543_fc))._field_args[0LL]))._field_kind);
	if ((_28713_t == nullptr)) {
		return nullptr;
	}
	if ((!((*(_28713_t))._field_decl))) {
		(*(_27528_e))._method_push_err((*((*(_27543_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_1ce7653cc_is_valid_for_sptr_type((*(_28713_t))._field_kind)))) {
		jule::Ptr<_1e83b84bc_StructIns> _29817_s = (*((*(_28713_t))._field_kind))._method_strct();
		if (((_29817_s != nullptr) && ((*(_29817_s))._field_decl != nullptr)) && (*((*(_29817_s))._field_decl))._field_cpp_linked) {
			(*(_27528_e))._method_push_err((*((*(_27543_fc))._field_args[0LL]))._field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	(*(_27565_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1ce76286e_Sptr>(new( std::nothrow ) _1ce76286e_Sptr((*(_28713_t))._field_kind))));
	if (((*(_27543_fc))._field_args.len() == 2LL)) {
		jule::Ptr<_1ce76121e_TypeKind> _31217_old = (*(_27528_e))._field_prefix;
		(*(_27528_e))._field_prefix=(*(_28713_t))._field_kind;
		jule::Ptr<_1ce727449_Data> _31517_init = (*(_27528_e))._method_eval_expr((*(_27543_fc))._field_args[1LL]);
		(*(_27528_e))._field_prefix=_31217_old;
		if ((_31517_init != nullptr)) {
			_212ae5c02_Token _32021_token = (*((*(_27543_fc))._field_args[1LL]))._field_token;
			
			(*((*(_27528_e))._field_s))._method_check_validity_for_init_expr((!((*(_27528_e))._field_immutable)),false,(*(_28713_t))._field_kind,_31517_init,_32021_token);
			(*((*(_27528_e))._field_s))._method_check_assign_type(false,(*(_28713_t))._field_kind,_31517_init,_32021_token);
			(*(_27565_d))._field_model=jule::Any(jule::new_struct<_1e83cb1e4_BuiltinNewCallExprModel>(new( std::nothrow ) _1e83cb1e4_BuiltinNewCallExprModel((*(_28713_t))._field_kind,(*(_31517_init))._field_model)));
		}
	} else {
		(*(_27565_d))._field_model=jule::Any(jule::new_struct<_1e83cb1e4_BuiltinNewCallExprModel>(new( std::nothrow ) _1e83cb1e4_BuiltinNewCallExprModel((*(_28713_t))._field_kind,jule::Any())));
	}
	return _27565_d;
}



inline jule::Ptr<_1ce727449_Data> _1b547190a_builtin_caller_panic(jule::Ptr<_1ce728879_Eval>& _33830_e,jule::Ptr<_212b19bd2_FnCallExpr>& _33845_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_33845_fc))._field_generics.len() > 0LL)) {
		(*(_33830_e))._method_push_err((*(_33845_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_33845_fc))._field_args.len() < 1LL)) {
		(*(_33830_e))._method_push_err((*(_33845_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	}
	if (((*(_33845_fc))._field_args.len() > 1LL)) {
		(*(_33830_e))._method_push_err((*((*(_33845_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _35013_expr = (*(_33830_e))._method_eval_expr((*(_33845_fc))._field_args[0LL]);
	if ((_35013_expr == nullptr)) {
		return nullptr;
	}
	if (((*((*(_35013_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_35013_expr))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_33830_e))._method_push_err((*(_33845_fc))._field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _35913_d = _1ce72d5c6_build_void_data();
	(*(_35913_d))._field_model=jule::Any(jule::new_struct<_1e83cb920_BuiltinPanicCallExprModel>(new( std::nothrow ) _1e83cb920_BuiltinPanicCallExprModel((*(_33845_fc))._field_token,(*(_35013_expr))._field_model)));
	return _35913_d;
}



inline jule::Ptr<_1ce727449_Data> _1b5471aa3_builtin_caller_make(jule::Ptr<_1ce728879_Eval>& _36729_e,jule::Ptr<_212b19bd2_FnCallExpr>& _36744_fc,jule::Ptr<_1ce727449_Data>& _36766_d) {
	if (((*(_36744_fc))._field_generics.len() > 0LL)) {
		(*(_36729_e))._method_push_err((*(_36744_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_36744_fc))._field_args.len() < 2LL)) {
		if (((*(_36744_fc))._field_args.len() == 1LL)) {
			(*(_36729_e))._method_push_err((*(_36744_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		}
		(*(_36729_e))._method_push_err((*(_36744_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	}
	if (((*(_36744_fc))._field_args.len() > 3LL)) {
		(*(_36729_e))._method_push_err((*((*(_36744_fc))._field_args[3LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _38313_t = (*(_36729_e))._method_eval_expr_kind((*((*(_36744_fc))._field_args[0LL]))._field_kind);
	if ((_38313_t == nullptr)) {
		return nullptr;
	}
	if ((!((*(_38313_t))._field_decl)) || ((*((*(_38313_t))._field_kind))._method_slc() == nullptr)) {
		(*(_36729_e))._method_push_err((*((*(_36744_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_36766_d))._field_kind=(*(_38313_t))._field_kind;
	jule::Ptr<_1ce727449_Data> _39513_len = (*((*((*(_36729_e))._field_s))._method_evalp((*(_36729_e))._field_lookup,(*(_38313_t))._field_kind)))._method_eval_expr((*(_36744_fc))._field_args[1LL]);
	if ((_39513_len == nullptr)) {
		return _36766_d;
	}
	(*(_36729_e))._method_check_integer_indexing_by_data(_39513_len,(*((*(_36744_fc))._field_args[1LL]))._field_token);
	if (((*(_36744_fc))._field_args.len() == 3LL)) {
		jule::Ptr<_1ce727449_Data> _40317_cap = (*((*((*(_36729_e))._field_s))._method_evalp((*(_36729_e))._field_lookup,(*(_38313_t))._field_kind)))._method_eval_expr((*(_36744_fc))._field_args[2LL]);
		if ((_40317_cap == nullptr)) {
			return _36766_d;
		}
		(*(_36729_e))._method_check_integer_indexing_by_data(_40317_cap,(*((*(_36744_fc))._field_args[2LL]))._field_token);
		(*(_36766_d))._field_model=jule::Any(jule::new_struct<_1e83cc987_BuiltinMakeCallExprModel>(new( std::nothrow ) _1e83cc987_BuiltinMakeCallExprModel((*(_38313_t))._field_kind,(*(_39513_len))._field_model,(*(_40317_cap))._field_model)));
	} else {
		(*(_36766_d))._field_model=jule::Any(jule::new_struct<_1e83cc987_BuiltinMakeCallExprModel>(new( std::nothrow ) _1e83cc987_BuiltinMakeCallExprModel((*(_38313_t))._field_kind,(*(_39513_len))._field_model,jule::Any())));
	}
	return _36766_d;
}



inline jule::Ptr<_1ce727449_Data> _1b5496204_builtin_caller_append(jule::Ptr<_1ce728879_Eval>& _42431_e,jule::Ptr<_212b19bd2_FnCallExpr>& _42446_fc,jule::Ptr<_1ce727449_Data>& _42468_d) {
	if (((*(_42446_fc))._field_generics.len() > 0LL)) {
		(*(_42431_e))._method_push_err((*(_42446_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_42446_fc))._field_args.len() < 2LL)) {
		if (((*(_42446_fc))._field_args.len() == 1LL)) {
			(*(_42431_e))._method_push_err((*(_42446_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_42431_e))._method_push_err((*(_42446_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _43713_t = (*(_42431_e))._method_eval_expr((*(_42446_fc))._field_args[0LL]);
	if ((_43713_t == nullptr)) {
		return nullptr;
	}
	if (((*((*(_43713_t))._field_kind))._method_slc() == nullptr)) {
		(*(_42431_e))._method_push_err((*((*(_42446_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e83d630e_FnIns> _44713_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>({jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str())),(*(_43713_t))._field_kind)),jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(jule::new_struct_ptr<_1e83d3839_Param>(new( std::nothrow ) _1e83d3839_Param(_212ae5c02_Token(),true,true,jule::Bool(),jule::Ptr<_1ce761b37_TypeSymbol>(),jule::Str())),(*((*((*(_43713_t))._field_kind))._method_slc()))._field_elem))}),(*(_43713_t))._field_kind,jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54b0295_builtin_caller_common_plain),jule::Bool()));
	(*(_42468_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_44713_f));
	(*(_42468_d))._field_model=jule::Any(jule::new_struct<_1e83c87c9_CommonIdentExprModel>(new( std::nothrow ) _1e83c87c9_CommonIdentExprModel(jule::Str("append", 6))));
	_42468_d=_1b54b0295_builtin_caller_common_plain(_42431_e,_42446_fc,_42468_d);
	if ((_42468_d != nullptr)) {
		jule::Ptr<_1e83c2581_FnCallExprModel> _47517_model = (*(_42468_d))._field_model.operator jule::Ptr<_1e83c2581_FnCallExprModel>();
		(*(_42468_d))._field_model=jule::Any(jule::new_struct<_1e83cd2c3_BuiltinAppendCallExprModel>(new( std::nothrow ) _1e83cd2c3_BuiltinAppendCallExprModel((*(_47517_model))._field_args[0LL],(*(_47517_model))._field_args[1LL])));
	}
	return _42468_d;
}



inline jule::Ptr<_1ce727449_Data> _1b549639c_builtin_caller_copy(jule::Ptr<_1ce728879_Eval>& _48429_e,jule::Ptr<_212b19bd2_FnCallExpr>& _48444_fc,jule::Ptr<_1ce727449_Data>& _48466_d) {
	if (((*(_48444_fc))._field_generics.len() > 0LL)) {
		(*(_48429_e))._method_push_err((*(_48444_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_48444_fc))._field_args.len() < 2LL)) {
		if (((*(_48444_fc))._field_args.len() == 1LL)) {
			(*(_48429_e))._method_push_err((*(_48444_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_48429_e))._method_push_err((*(_48444_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	if (((*(_48444_fc))._field_args.len() > 2LL)) {
		(*(_48429_e))._method_push_err((*((*(_48444_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _50013_dest = (*(_48429_e))._method_eval_expr((*(_48444_fc))._field_args[0LL]);
	if ((_50013_dest == nullptr)) {
		return nullptr;
	}
	if (((*((*(_50013_dest))._field_kind))._method_slc() == nullptr)) {
		(*(_48429_e))._method_push_err((*((*(_48444_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!((*(_50013_dest))._field_mutable))) {
		(*(_48429_e))._method_push_err((*((*(_48444_fc))._field_args[0LL]))._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1e83d3839_Param> _51213_empty_param = jule::new_ptr<_1e83d3839_Param>();
	jule::Ptr<_1e83d630e_FnIns> _51313_f = jule::new_struct_ptr<_1e83d630e_FnIns>(new( std::nothrow ) _1e83d630e_FnIns(jule::Ptr<_1e83b84bc_StructIns>(),jule::Ptr<_1e83d4384_Fn>(),jule::Slice<jule::Ptr<_1ce76121e_TypeKind>>(),jule::Slice<jule::Ptr<_1e83d5bb0_ParamIns>>({jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(_51213_empty_param,(*(_50013_dest))._field_kind)),jule::new_struct<_1e83d5bb0_ParamIns>(new( std::nothrow ) _1e83d5bb0_ParamIns(_51213_empty_param,(*(_50013_dest))._field_kind))}),jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1ce62e86d_Scope>(),jule::Ptr<_1e83de4b0_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1ce727449_Data>(jule::Ptr<_1ce728879_Eval>&,jule::Ptr<_212b19bd2_FnCallExpr>&,jule::Ptr<_1ce727449_Data>&)>(_1b54b0295_builtin_caller_common_plain),jule::Bool()));
	(*(_48466_d))._field_kind=jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_51313_f));
	(*(_48466_d))._field_model=jule::Any(jule::new_struct<_1e83c87c9_CommonIdentExprModel>(new( std::nothrow ) _1e83c87c9_CommonIdentExprModel(jule::Str("copy", 4))));
	_48466_d=_1b54b0295_builtin_caller_common_plain(_48429_e,_48444_fc,_48466_d);
	if ((_48466_d != nullptr)) {
		jule::Ptr<_1ce727449_Data> _53817_src = (*((*(_48466_d))._field_model.operator jule::Ptr<_1e83c2581_FnCallExprModel>()))._field_args[1LL].operator jule::Ptr<_1ce727449_Data>();
		jule::Ptr<_1ce762e02_Slc> _53917_slc = (*((*(_53817_src))._field_kind))._method_slc();
		if ((!((*(_53817_src))._field_mutable)) && (*((*(_53917_slc))._field_elem))._method_mutable()) {
			(*(_48429_e))._method_push_err((*((*(_48444_fc))._field_args[1LL]))._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
		}
	}
	return _48466_d;
}



inline jule::Ptr<_1ce727449_Data> _1b5496545_builtin_caller_clone(jule::Ptr<_1ce728879_Eval>& _54730_e,jule::Ptr<_212b19bd2_FnCallExpr>& _54745_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_54745_fc))._field_generics.len() > 0LL)) {
		(*(_54730_e))._method_push_err((*(_54745_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_54745_fc))._field_args.len() < 1LL)) {
		(*(_54730_e))._method_push_err((*(_54745_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if (((*(_54745_fc))._field_args.len() > 1LL)) {
		(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _56013_d = (*(_54730_e))._method_eval_expr_kind((*((*(_54745_fc))._field_args[0LL]))._field_kind);
	if ((_56013_d == nullptr)) {
		return nullptr;
	}
	jule::Fn<void(jule::Ptr<_1ce76121e_TypeKind>)> _5659_check_kind = jule::Fn<void(jule::Ptr<_1ce76121e_TypeKind>)>([=](jule::Ptr<_1ce76121e_TypeKind> _56529_k) mutable -> void {
		{
			
			if (((*(_56529_k))._method_slc() != nullptr)) {
				_case_begin_1b8c322b6:;
				{
					if ((!((*((*((*(_56529_k))._method_slc()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_56529_k))._method_to_str())}));
						}
					}
				}
			}
			else if (((*(_56529_k))._method_map() != nullptr)) {
				_case_begin_1b8c3232c:;
				{
					jule::Ptr<_1ce763b39_Map> _57517_m = (*(_56529_k))._method_map();
					if ((!((*((*(_57517_m))._field_key))._method_supports_cloning())) || (!((*((*(_57517_m))._field_val))._method_supports_cloning()))) {
						{
							(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_56529_k))._method_to_str())}));
						}
					}
				}
			}
			else if (((*(_56529_k))._method_arr() != nullptr)) {
				_case_begin_1b8c32393:;
				{
					if ((!((*((*((*(_56529_k))._method_arr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_56529_k))._method_to_str())}));
						}
					}
				}
			}
			else if (((*(_56529_k))._method_sptr() != nullptr)) {
				_case_begin_1b8c32409:;
				{
					if ((!((*((*((*(_56529_k))._method_sptr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_56529_k))._method_to_str())}));
						}
					}
				}
			}
			else if (((*(_56529_k))._method_strct() != nullptr)) {
				_case_begin_1b8c324e7:;
				{
					jule::Ptr<_1e83b84bc_StructIns> _59717_s = (*((*(_56013_d))._field_kind))._method_strct();
					if ((!((*(_59717_s))._field_mutable))) {
						{
							(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any((*((*(_56013_d))._field_kind))._method_to_str())}));
						}
					}
					if ((((*(_59717_s))._field_decl == nullptr) || (*((*(_59717_s))._field_decl))._field_cpp_linked) || (!((*((*(_59717_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						{
							(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_56013_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
						}
					}
				}
			}
			else {
				_case_begin_1b8c32151:;
				{
					{
						(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_56013_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			_match_end_1b8c32085:;
		}
	});
	if (((*((*(_56013_d))._field_kind))._method_strct() != nullptr)) {
		jule::Ptr<_1e83b84bc_StructIns> _62117_s = (*((*(_56013_d))._field_kind))._method_strct();
		if (((*(_62117_s))._field_decl != nullptr) && (!((*((*(_62117_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
			(*(_54730_e))._method_push_err((*((*(_54745_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_56013_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
		}
	}
	if ((!((*((*(_56013_d))._field_kind))._method_supports_cloning()))) {
		_5659_check_kind((*(_56013_d))._field_kind);
	}
	(*(_56013_d))._field_mutable=true;
	(*(_56013_d))._field_model=jule::Any(jule::new_struct<_1e83caac8_BuiltinCloneCallExprModel>(new( std::nothrow ) _1e83caac8_BuiltinCloneCallExprModel((*(_56013_d))._field_model)));
	return _56013_d;
}



inline jule::Ptr<_1ce727449_Data> _1b54966dd_builtin_caller_assert(jule::Ptr<_1ce728879_Eval>& _63631_e,jule::Ptr<_212b19bd2_FnCallExpr>& _63646_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_63646_fc))._field_generics.len() > 0LL)) {
		(*(_63631_e))._method_push_err((*(_63646_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_63646_fc))._field_args.len() < 1LL)) {
		(*(_63631_e))._method_push_err((*(_63646_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if (((*(_63646_fc))._field_args.len() > 2LL)) {
		(*(_63631_e))._method_push_err((*((*(_63646_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _64813_expr = (*(_63631_e))._method_eval_expr((*(_63646_fc))._field_args[0LL]);
	if ((_64813_expr == nullptr)) {
		return nullptr;
	}
	if (((*((*(_64813_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_64813_expr))._field_kind))._method_prim()))._method_is_bool()))) {
		(*(_63631_e))._method_push_err((*(_63646_fc))._field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1e83cc14b_BuiltinAssertCallExprModel> _65713_model = jule::new_struct<_1e83cc14b_BuiltinAssertCallExprModel>(new( std::nothrow ) _1e83cc14b_BuiltinAssertCallExprModel((*(_63646_fc))._field_token,(*(_64813_expr))._field_model,jule::Str("assertion failed", 16)));
	if (((*(_63646_fc))._field_args.len() == 2LL)) {
		jule::Ptr<_1ce727449_Data> _66517_log = (*(_63631_e))._method_eval_expr((*(_63646_fc))._field_args[1LL]);
		if ((_66517_log == nullptr)) {
			return nullptr;
		}
		if (((!((*(_66517_log))._method_is_const())) || ((*((*(_66517_log))._field_kind))._method_prim() == nullptr)) || (!((*((*((*(_66517_log))._field_kind))._method_prim()))._method_is_str()))) {
			(*(_63631_e))._method_push_err((*((*(_63646_fc))._field_args[1LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("const str", 9)),jule::Any((*((*(_66517_log))._field_kind))._method_to_str())}));
			return nullptr;
		}
		(*(_65713_model))._field_log=(*((*(_66517_log))._field_constant))._method_read_str();
	}
	jule::Ptr<_1ce727449_Data> _67813_d = _1ce72d5c6_build_void_data();
	(*(_67813_d))._field_model=jule::Any(_65713_model);
	return _67813_d;
}



inline jule::Ptr<_1ce727449_Data> _1b5496886_builtin_caller_std_mem_size_of(jule::Ptr<_1ce728879_Eval>& _68340_e,jule::Ptr<_212b19bd2_FnCallExpr>& _68355_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_68355_fc))._field_generics.len() > 0LL)) {
		(*(_68340_e))._method_push_err((*(_68355_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _68713_result = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
	if (((*(_68355_fc))._field_args.len() < 1LL)) {
		(*(_68340_e))._method_push_err((*(_68355_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _68713_result;
	}
	if (((*(_68355_fc))._field_args.len() > 1LL)) {
		(*(_68340_e))._method_push_err((*((*(_68355_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _69913_d = (*(_68340_e))._method_eval_expr_kind((*((*(_68355_fc))._field_args[0LL]))._field_kind);
	if ((_69913_d == nullptr)) {
		return _68713_result;
	}
	(*(_68713_result))._field_model=jule::Any(jule::new_struct<_1e83ce22a_SizeofExprModel>(new( std::nothrow ) _1e83ce22a_SizeofExprModel((*(_69913_d))._field_model)));
	return _68713_result;
}



inline jule::Ptr<_1ce727449_Data> _1b54c2ab0_builtin_caller_std_mem_align_of(jule::Ptr<_1ce728879_Eval>& _70841_e,jule::Ptr<_212b19bd2_FnCallExpr>& _70856_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_70856_fc))._field_generics.len() > 0LL)) {
		(*(_70841_e))._method_push_err((*(_70856_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _71213_result = jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
	if (((*(_70856_fc))._field_args.len() < 1LL)) {
		(*(_70841_e))._method_push_err((*(_70856_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _71213_result;
	}
	if (((*(_70856_fc))._field_args.len() > 1LL)) {
		(*(_70841_e))._method_push_err((*((*(_70856_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _72413_d = (*(_70841_e))._method_eval_expr_kind((*((*(_70856_fc))._field_args[0LL]))._field_kind);
	if ((_72413_d == nullptr)) {
		return _71213_result;
	}
	(*(_71213_result))._field_model=jule::Any(jule::new_struct<_1e83cec97_AlignofExprModel>(new( std::nothrow ) _1e83cec97_AlignofExprModel((*(_72413_d))._field_model)));
	return _71213_result;
}



inline jule::Ptr<_1ce727449_Data> _1b54c2c58_builtin_caller_std_mem_free(jule::Ptr<_1ce728879_Eval>& _73337_e,jule::Ptr<_212b19bd2_FnCallExpr>& _73352_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_73352_fc))._field_generics.len() > 0LL)) {
		(*(_73337_e))._method_push_err((*(_73352_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_73352_fc))._field_args.len() < 1LL)) {
		(*(_73337_e))._method_push_err((*(_73352_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("h", 1))}));
		return nullptr;
	}
	if (((*(_73352_fc))._field_args.len() > 1LL)) {
		(*(_73337_e))._method_push_err((*((*(_73352_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _74613_d = (*(_73337_e))._method_eval_expr_kind((*((*(_73352_fc))._field_args[0LL]))._field_kind);
	if ((_74613_d == nullptr)) {
		return nullptr;
	}
	if ((!((*((*(_74613_d))._field_kind))._method_performs_rc()))) {
		(*(_73337_e))._method_push_err((*((*(_73352_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _75513_result = _1ce72d5c6_build_void_data();
	(*(_75513_result))._field_model=jule::Any(jule::new_struct<_1e83d1cbb_FreeExprModel>(new( std::nothrow ) _1e83d1cbb_FreeExprModel((*(_74613_d))._field_model)));
	return _75513_result;
}



inline jule::Ptr<_1ce727449_Data> _1b54c2e01_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1ce728879_Eval>& _76051_e,jule::Ptr<_212b19bd2_FnCallExpr>& _76066_fc,jule::Ptr<_1ce727449_Data>& ) {
	if (((*(_76066_fc))._field_generics.len() > 0LL)) {
		(*(_76051_e))._method_push_err((*(_76066_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if (((*(_76066_fc))._field_args.len() < 1LL)) {
		(*(_76051_e))._method_push_err((*(_76066_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if (((*(_76066_fc))._field_args.len() > 1LL)) {
		(*(_76051_e))._method_push_err((*((*(_76066_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ce727449_Data> _77313_d = (*(_76051_e))._method_eval_expr_kind((*((*(_76066_fc))._field_args[0LL]))._field_kind);
	if ((_77313_d == nullptr)) {
		return nullptr;
	}
	if ((!(_1ce765bc4_is_builtin_str_convertable((*(_77313_d))._field_kind)))) {
		(*(_76051_e))._method_push_err((*((*(_76066_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1ce727449_Data>(new( std::nothrow ) _1ce727449_Data(jule::new_struct_ptr<_1ce76121e_TypeKind>(new( std::nothrow ) _1ce76121e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1ce7663cd_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_1ce76121e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e83d0726_IntegratedToStrExprModel>(new( std::nothrow ) _1e83d0726_IntegratedToStrExprModel((*(_77313_d))._field_model))),jule::Bool(),jule::Ptr<_1ce4b898d_Const>()));
}



inline jule::Ptr<_1ce727449_Data> _1b54c3099_builtin_caller_std_jule_integrated_emit(jule::Ptr<_1ce728879_Eval>& _79149_e,jule::Ptr<_212b19bd2_FnCallExpr>& _79164_fc,jule::Ptr<_1ce727449_Data>& ) {
	if ((!((*(_79149_e))._method_is_unsafe()))) {
		(*(_79149_e))._method_push_err((*(_79164_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	if (((*(_79164_fc))._field_args.len() < 1LL)) {
		(*(_79149_e))._method_push_err((*(_79164_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _80113_d = (*(_79149_e))._method_eval_expr((*(_79164_fc))._field_args[0LL]);
	if ((_80113_d == nullptr)) {
		return nullptr;
	}
	if (((*((*(_80113_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_80113_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_79149_e))._method_push_err((*((*(_79164_fc))._field_args[0LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_80113_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	if ((!((*(_80113_d))._method_is_const())) || (!((*((*(_80113_d))._field_constant))._method_is_str()))) {
		(*(_79149_e))._method_push_err((*((*(_79164_fc))._field_args[0LL]))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ce727449_Data> _81613_r = _1ce72d5c6_build_void_data();
	if (((*(_79164_fc))._field_generics.len() != 0LL)) {
		if ((!((*((*(_79149_e))._field_s))._method_check_generic_quantity(1LL,static_cast<jule::I64>((*(_79164_fc))._field_generics.len()),(*(_79164_fc))._field_token)))) {
			return nullptr;
		}
		jule::Ptr<_1ce761b37_TypeSymbol> _82217_k = _1e83e0390_build_type((*(_79164_fc))._field_generics[0LL]);
		if ((!((*((*(_79149_e))._field_s))._method_check_type(_82217_k,(*(_79149_e))._field_lookup)))) {
			return nullptr;
		}
		(*(_81613_r))._field_kind=(*(_82217_k))._field_kind;
	}
	jule::Ptr<_1e83d15c3_BackendEmitExprModel> _82913_model = jule::new_struct<_1e83d15c3_BackendEmitExprModel>(new( std::nothrow ) _1e83d15c3_BackendEmitExprModel((*((*(_80113_d))._field_constant))._method_read_str(),jule::Slice<jule::Any>()));
	if (((*(_79164_fc))._field_args.len() > 1LL)) {
		(*(_82913_model))._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(((*(_79164_fc))._field_args.len() - 1LL)));
		{
			auto expr = (*(_79164_fc))._field_args.slice(1LL);
			auto it = expr.begin();
			_iter_begin_1b8c791cb:;
			if (it != expr.end()) {
				jule::Ptr<_212b16162_Expr> _1b8c792ca_arg = *it;
				{
					jule::Ptr<_1ce727449_Data> _83621_argd = (*(_79149_e))._method_eval_expr_kind((*(_1b8c792ca_arg))._field_kind);
					if ((_83621_argd == nullptr)) {
						return nullptr;
					}
					(*(_82913_model))._field_exprs = jule::alloc_for_append((*(_82913_model))._field_exprs,1);(*(_82913_model))._field_exprs.__push((*(_83621_argd))._field_model);
				}
				_iter_next_1b8c791cb:;
				++it;
				goto _iter_begin_1b8c791cb;
			}
			_iter_end_1b8c791cb:;
		}
	}
	(*(_81613_r))._field_model=jule::Any(_82913_model);
	return _81613_r;
}



inline jule::Ptr<_1ce727449_Data> _1b54c3242_builtin_caller_std_debug_out(jule::Ptr<_1ce728879_Eval>& _84838_e,jule::Ptr<_212b19bd2_FnCallExpr>& _84853_fc,jule::Ptr<_1ce727449_Data>& _84875_d) {
	_84875_d=_1b54c2384_builtin_caller_out(_84838_e,_84853_fc,_84875_d);
	if ((_84875_d == nullptr)) {
		return nullptr;
	}
	(*((*(_84875_d))._field_model.operator jule::Ptr<_1e83c9b1b_BuiltinOutCallExprModel>()))._field_debug=true;
	return _84875_d;
}



inline jule::Ptr<_1ce727449_Data> _1b54c33da_builtin_caller_std_debug_outln(jule::Ptr<_1ce728879_Eval>& _85840_e,jule::Ptr<_212b19bd2_FnCallExpr>& _85855_fc,jule::Ptr<_1ce727449_Data>& _85877_d) {
	_85877_d=_1b5496c60_builtin_caller_outln(_85840_e,_85855_fc,_85877_d);
	if ((_85877_d == nullptr)) {
		return nullptr;
	}
	(*((*(_85877_d))._field_model.operator jule::Ptr<_1e83ca39c_BuiltinOutlnCallExprModel>()))._field_debug=true;
	return _85877_d;
}



inline std::tuple<jule::Bool,jule::Bool> _212988512_check_os(jule::Str _913_arg) {
	jule::Bool _925_ok = jule::Bool();
	jule::Bool _935_exist = jule::Bool();
	_925_ok=false;
	_935_exist=true;
	{
		auto &_match_expr{ _913_arg };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_1b8cb6ca7:;
			{
				_925_ok=_2128848b4_is_windows(_212893c25_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_1b8cb6d1d:;
			{
				_925_ok=_212884c49_is_darwin(_212893c25_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_1b8cb6d84:;
			{
				_925_ok=_212885101_is_linux(_212893c25_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_1b8cb6dea:;
			{
				_925_ok=_212886069_is_unix(_212893c25_OS);
			}
		}
		else {
			_case_begin_1b8cb6adc:;
			{
				_925_ok=true;
				_935_exist=false;
			}
		}
		_match_end_1b8cb65c0:;
	}
	return std::make_tuple(_925_ok,_935_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _2129886aa_check_arch(jule::Str _3015_arg) {
	jule::Bool _3027_ok = jule::Bool();
	jule::Bool _3037_exist = jule::Bool();
	_3027_ok=false;
	_3037_exist=true;
	{
		auto &_match_expr{ _3015_arg };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_1b8cb9aac:;
			{
				_3027_ok=_21288550d_is_i386(_2128b0c97_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_1b8cb9b23:;
			{
				_3027_ok=_21288584e_is_amd64(_2128b0c97_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_1b8cb9b89:;
			{
				_3027_ok=_212885bd4_is_arm64(_2128b0c97_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_1b8cb9c00:;
			{
				_3027_ok=_21288680b_is_64bit(_2128b0c97_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_1b8cba30a:;
			{
				_3027_ok=_21288650e_is_32bit(_2128b0c97_ARCH);
			}
		}
		else {
			_case_begin_1b8cb987b:;
			{
				_3027_ok=true;
				_3037_exist=false;
			}
		}
		_match_end_1b8cb935e:;
	}
	return std::make_tuple(_3027_ok,_3037_exist);
}



inline jule::Bool _212988bb6_is_pass_file_annotation(jule::Str _5432_p) {
	_5432_p=_211dcb2b3_base(_5432_p);
	jule::I64 _569_n = _5432_p.len();
	(_5432_p).mut_slice(0LL,_569_n - static_cast<jule::I64>(_211e04440_ext(_5432_p).len()));
	jule::Str _6213_a1 = jule::Str();
	jule::Str _6513_a2 = jule::Str();
	jule::I64 _6813_i = _211e1696e_find_last_byte(_5432_p,'_');
	if ((_6813_i == -1LL)) {
		jule::Bool _7118_ok;
		jule::Bool _7126_exist;
		std::tie(_7118_ok,_7126_exist) = _212988512_check_os(_5432_p);
		if (_7126_exist) {
			return _7118_ok;
		}
		std::tie(_7118_ok,_7126_exist) = _2129886aa_check_arch(_5432_p);
		return (!(_7126_exist)) || _7118_ok;
	}
	if ((_6813_i + 1LL) >= _569_n) {
		return true;
	}
	_6213_a1=_5432_p.slice((_6813_i + 1LL));
	(_5432_p).mut_slice(0LL,_6813_i);
	_6813_i=static_cast<jule::I64>(_211e1696e_find_last_byte(_5432_p,'_'));
	if ((_6813_i != -1LL)) {
		_6513_a2=_5432_p.slice((_6813_i + 1LL));
	}
	if (_6513_a2.empty()) {
		jule::Bool _9218_ok;
		jule::Bool _9226_exist;
		std::tie(_9218_ok,_9226_exist) = _212988512_check_os(_6213_a1);
		if (_9226_exist) {
			return _9218_ok;
		}
		std::tie(_9218_ok,_9226_exist) = _2129886aa_check_arch(_6213_a1);
		return (!(_9226_exist)) || _9218_ok;
	}
	jule::Bool _10014_ok;
	jule::Bool _10022_exist;
	std::tie(_10014_ok,_10022_exist) = _2129886aa_check_arch(_6213_a1);
	if (_10022_exist) {
		if ((!(_10014_ok))) {
			return false;
		}
		std::tie(_10014_ok,_10022_exist) = _212988512_check_os(_6513_a2);
		return (!(_10022_exist)) || _10014_ok;
	}
	std::tie(_10014_ok,_10022_exist) = _212988512_check_os(_6213_a1);
	return (!(_10022_exist)) || _10014_ok;
}



inline void _2129898ed_set_os_vars(jule::Slice<jule::Str>& _3321_vars) {
	_3321_vars = jule::alloc_for_append(_3321_vars,1);_3321_vars.__push(_212893c25_OS);
	if (_212886069_is_unix(_212893c25_OS)) {
		_3321_vars = jule::alloc_for_append(_3321_vars,1);_3321_vars.__push(jule::Str("unix", 4));
	}
}



inline void _212989c83_set_arch_vars(jule::Slice<jule::Str>& _4123_vars) {
	_4123_vars = jule::alloc_for_append(_4123_vars,1);_4123_vars.__push(_2128b0c97_ARCH);
	if (_21288680b_is_64bit(_2128b0c97_ARCH)) {
		_4123_vars = jule::alloc_for_append(_4123_vars,1);_4123_vars.__push(jule::Str("x64", 3));
	}
	if (_21288650e_is_32bit(_2128b0c97_ARCH)) {
		_4123_vars = jule::alloc_for_append(_4123_vars,1);_4123_vars.__push(jule::Str("x32", 3));
	}
}



inline void _21298a091_init_vars(jule::Slice<jule::Str>& _5219_vars,_212989117_CompileInfo& _5233_info) {
	_2129898ed_set_os_vars(_5219_vars);
	_212989c83_set_arch_vars(_5219_vars);
	if (_5233_info._field_prod) {
		_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("production", 10));
	}
	if (_5233_info._field_test) {
		_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("test", 4));
	}
	{
		auto &_match_expr{ _5233_info._field_compiler };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_1b8cc87e1:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("clang", 5));
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_1b8cc8857:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("gcc", 3));
			}
		}
		_match_end_1b8cc878b:;
	}
	{
		auto &_match_expr{ _5233_info._field_cpp_std };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_1b8cc9979:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("cpp14", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_1b8cc968d:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("cpp17", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_1b8cc9704:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("cpp20", 5));
			}
		}
		_match_end_1b8cc8dc9:;
	}
}



inline jule::Slice<jule::U8> _1b54c3693_read_buff(jule::Str _2514_path) {
	return ({
		auto except = _211184b99_File::_static_method_read(_2514_path);
		(except.ok()) ? (except.result) : ({{
			jule::outln(jule::Str("error: file cannot read", 23));
			
			_2128bad6d_exit(1LL);
			return nullptr;
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _21287ea02_Log _1b54c383b_flat_compiler_err(jule::Str _3622_text) {
	return _21287ea02_Log(static_cast<jule::I64>(1LL),jule::I64(),jule::I64(),jule::Str(),_3622_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Bool,jule::Slice<_21287ea02_Log>> _1b54c3c9d_is_pass_build_directives(jule::Ptr<_2129e26e2_Ast>& _4434_file) {
	{
		auto &expr = (*(_4434_file))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_1b8ccb3c6:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b8ccc5c5_td = *it;
			{
				if (((*(_1b8ccc5c5_td))._field_tag._field_kind != jule::Str("build", 5))) {
					goto _iter_next_1b8ccb3c6;
				}
				_21299b019_DirectiveEval _5017_de = _21299b019_DirectiveEval(jule::Slice<_21287ea02_Log>(),_1b8ccc5c5_td,jule::Slice<jule::Str>());
				jule::Bool _5313_result = _5017_de._method_eval();
				if ((_5017_de._field_logs.len() > 0LL)) {
					return std::make_tuple(false,_5017_de._field_logs);
				}
				if ((!(_5313_result))) {
					return std::make_tuple(false,nullptr);
				}
			}
			_iter_next_1b8ccb3c6:;
			++it;
			goto _iter_begin_1b8ccb3c6;
		}
		_iter_end_1b8ccb3c6:;
	}
	return std::make_tuple(true,nullptr);
}



inline void _1b54c7c08_push_passes(jule::Ptr<_1ce6a15e3_Package>& _9021_p,jule::Slice<jule::Str>& _9045_passes) {
	{
		auto &expr = (*(_9021_p))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8ce49c7:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8ce1d48_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = (*(_1b8ce1d48_f))._field_passes;
					auto it = expr.begin();
					_iter_begin_1b8cead30:;
					if (it != expr.end()) {
						_1e83de900_Pass _1b8cead85_pass = *it;
						{
							if (_1b8cead85_pass._field_text.empty()) {
								goto _iter_next_1b8cead30;
							}
							{
								auto &expr = _9045_passes;
								auto it = expr.begin();
								_iter_begin_1b8ceb43a:;
								if (it != expr.end()) {
									jule::Str _1b8cebb88_cpass = *it;
									{
										if (_1b8cebb88_cpass == _1b8cead85_pass._field_text) {
											goto _iter_next_1b8cead30;
										}
									}
									_iter_next_1b8ceb43a:;
									++it;
									goto _iter_begin_1b8ceb43a;
								}
								_iter_end_1b8ceb43a:;
							}
							_9045_passes = jule::alloc_for_append(_9045_passes,1);_9045_passes.__push(_1b8cead85_pass._field_text);
						}
						_iter_next_1b8cead30:;
						++it;
						goto _iter_begin_1b8cead30;
					}
					_iter_end_1b8cead30:;
				}
			}
			_iter_next_1b8ce49c7:;
			++it;
			goto _iter_begin_1b8ce49c7;
		}
		_iter_end_1b8ce49c7:;
	}
}



inline jule::Slice<jule::Str> _1b54c80b0_get_all_unique_passes(jule::Ptr<_1ce6a15e3_Package>& _10731_pkg,jule::Slice<jule::Ptr<_1ce6a0317_ImportInfo>> _10756_uses) {
	jule::Slice<jule::Str> _10813_passes = nullptr;
	_1b54c7c08_push_passes(_10731_pkg,_10813_passes);
	{
		auto &expr = _10756_uses;
		auto it = expr.begin();
		_iter_begin_1b8ced01e:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> _1b8ced508_u = *it;
			{
				if ((!((*(_1b8ced508_u))._field_cpp_linked))) {
					_1b54c7c08_push_passes((*(_1b8ced508_u))._field_package,_10813_passes);
				}
			}
			_iter_next_1b8ced01e:;
			++it;
			goto _iter_begin_1b8ced01e;
		}
		_iter_end_1b8ced01e:;
	}
	return _10813_passes;
}



inline _212989117_CompileInfo _1b54c8500_build_compile_info(void) {
	_212989117_CompileInfo _12113_info = _212989117_CompileInfo(_210ecc0b8_PRODUCTION,_2110634a1_TEST,jule::Str("clang", 5),jule::Str("cpp14", 5));
	{
		auto &_match_expr{ _2110629cd_COMPILER };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_1b8cee949:;
			{
				_12113_info._field_compiler=jule::Str("clang", 5);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_1b8cee9b0:;
			{
				_12113_info._field_compiler=jule::Str("gcc", 3);
			}
		}
		_match_end_1b8cee8e4:;
	}
	{
		auto &_match_expr{ _211062dc9_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_1b8d005c6:;
			{
				_12113_info._field_compiler=jule::Str("cpp14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_1b8ceedbc:;
			{
				_12113_info._field_compiler=jule::Str("cpp17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_1b8ceee33:;
			{
				_12113_info._field_compiler=jule::Str("cpp20", 5);
			}
		}
		_match_end_1b8d0052c:;
	}
	return _12113_info;
}



inline jule::Ptr<_2129e3902_Directive> _1b54ccb75_find_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _3324_directives,jule::Str _3355_tag) {
	{
		auto &expr = _3324_directives;
		auto it = expr.begin();
		_iter_begin_1b8d1828c:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b8d18336_dr = *it;
			{
				if ((*(_1b8d18336_dr))._field_tag._field_kind == _3355_tag) {
					return _1b8d18336_dr;
				}
			}
			_iter_next_1b8d1828c:;
			++it;
			goto _iter_begin_1b8d1828c;
		}
		_iter_end_1b8d1828c:;
	}
	return nullptr;
}



inline jule::Bool _1b54cd12b_has_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _4319_directives,jule::Str _4350_tag) {
	return (_1b54ccb75_find_directive(_4319_directives,_4350_tag) != nullptr);
}



inline jule::Bool _1b54cd5d2_is_exist(jule::Slice<jule::Any> _4813_arr,jule::Any _4825_t) {
	{
		auto &expr = _4813_arr;
		auto it = expr.begin();
		_iter_begin_1b8d19414:;
		if (it != expr.end()) {
			jule::Any &_1b8d1a008_ref = *it;
			{
				if (_4825_t == _1b8d1a008_ref) {
					return true;
				}
			}
			_iter_next_1b8d19414:;
			++it;
			goto _iter_begin_1b8d19414;
		}
		_iter_end_1b8d19414:;
	}
	return false;
}



inline jule::Bool _1b54cdb10_is_dead(jule::Any _5816_ref) {
	jule::Bool _5828_dead = jule::Bool();
	if (_1b54cd5d2_is_exist(_1b54cbe93_deads,_5816_ref)) {
		_5828_dead = true;
		return _5828_dead;
	}
	{
		auto &_match_expr{ _5816_ref };
		
		if (_match_expr.type_is<jule::Ptr<_1e83d630e_FnIns>>()) {
			_case_begin_1b8d1c68c:;
			{
				if ((*((*(_5816_ref.operator jule::Ptr<_1e83d630e_FnIns>()))._field_decl))._method_is_init()) {
					goto _match_end_1b8d1b548;
				}
				goto _case_begin_1b8d1add8;
			}
		}
		else {
			_case_begin_1b8d1add8:;
			{
				if ((_1b54cc724_current == _5816_ref) || (_1b54cc9dd_main_current == _5816_ref)) {
					_5828_dead = true;
					return _5828_dead;
				}
				if (_1b54cd5d2_is_exist(_1b54cc56a_checking,_5816_ref)) {
					_5828_dead = true;
					return _5828_dead;
				}
			}
		}
		_match_end_1b8d1b548:;
	}
	jule::Any _7913_old = _1b54cc724_current;
	_1b54cc724_current=_5816_ref;
	jule::I64 _819_len = _1b54cc56a_checking.len();
	_1b54cc56a_checking = jule::alloc_for_append(_1b54cc56a_checking,1);_1b54cc56a_checking.__push(_5816_ref);
	__JULE_DEFER({
		_1b54cc724_current=_7913_old;
		_1b54cde40_drop_ref(_1b54cc56a_checking,_819_len);
	});
	{
		auto &_match_expr{ _5816_ref };
		
		if (_match_expr.type_is<jule::Ptr<_1e83d630e_FnIns>>()) {
			_case_begin_1b8d1e8c0:;
			{
				_5828_dead = _1b54ce68d_is_fn_dead(_5816_ref.operator jule::Ptr<_1e83d630e_FnIns>());
				return _5828_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ce6cecb4_Var>>()) {
			_case_begin_1b8d1e936:;
			{
				_5828_dead = _1b54ceade_is_var_dead(_5816_ref.operator jule::Ptr<_1ce6cecb4_Var>());
				return _5828_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83b84bc_StructIns>>()) {
			_case_begin_1b8d1e77c:;
			{
				_5828_dead = _1b54d055c_is_struct_dead(_5816_ref.operator jule::Ptr<_1e83b84bc_StructIns>());
				return _5828_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e85a7865_Trait>>()) {
			_case_begin_1b8d1e7e3:;
			{
				_5828_dead = _1b54d08ae_is_trait_dead(_5816_ref.operator jule::Ptr<_1e85a7865_Trait>());
				return _5828_dead;
			}
		}
		else {
			_case_begin_1b8d1d46d:;
			{
				_5828_dead = false;
				return _5828_dead;
			}
		}
		_match_end_1b8d1e370:;
	}
}



inline void _1b54cde40_drop_ref(jule::Slice<jule::Any>& _10618_refs,jule::I64 _10631_pos) {
	_10618_refs=_10618_refs.slice(0LL,_10631_pos);
}



inline jule::Bool _1b54ce32a_is_all_references_are_dead(jule::Ptr<_1e83de4b0_ReferenceStack> _11435_references) {
	jule::I64 _11513_i = 0LL;
	for (; _11513_i < static_cast<jule::I64>((*(_11435_references))._method_len()); (_11513_i)++) {
		{
			jule::Any _11717_ref = (*(_11435_references))._method_at(_11513_i);
			if (_11717_ref == _1b54cc724_current) {
				goto _iter_next_1b8d223d9;
			}
			if (_11717_ref == _1b54cc9dd_main_current) {
				goto _iter_next_1b8d223d9;
			}
			if ((!(_1b54cdb10_is_dead(_11717_ref)))) {
				return false;
			}
		}
	_iter_next_1b8d223d9:;
	}
	_iter_end_1b8d223d9:;
	return true;
}



inline jule::Bool _1b54ce68d_is_fn_dead(jule::Ptr<_1e83d630e_FnIns> _13119_f) {
	if ((*((*(_13119_f))._field_decl))._field_cpp_linked || (*(_13119_f))._field_anon) {
		return false;
	}
	if ((*((*(_13119_f))._field_decl))._method_is_entry_point() || (*((*(_13119_f))._field_decl))._method_is_init()) {
		return (!((*((*(_13119_f))._field_decl))._field_statically));
	}
	if (_2110634a1_TEST && _1b54cd12b_has_directive((*((*(_13119_f))._field_decl))._field_directives,jule::Str("test", 4))) {
		return false;
	}
	if (((*(_13119_f))._field_owner != nullptr)) {
		if (_1b54cd5d2_is_exist(_1b54cc56a_checking,jule::Any((*(_13119_f))._field_owner))) {
			return true;
		}
		return _1b54cdb10_is_dead(jule::Any((*(_13119_f))._field_owner));
	}
	return _1b54ce32a_is_all_references_are_dead((*(_13119_f))._field_references);
}



inline jule::Bool _1b54ceade_is_var_dead(jule::Ptr<_1ce6cecb4_Var> _16120_v) {
	if ((*(_16120_v))._field_constant) {
		return true;
	}
	if ((*(_16120_v))._field_cpp_linked) {
		return false;
	}
	return _1b54ce32a_is_all_references_are_dead((*(_16120_v))._field_references);
}



inline jule::Bool _1b54d055c_is_struct_dead(jule::Ptr<_1e83b84bc_StructIns> _20623_s) {
	return false;
}



inline jule::Bool _1b54d08ae_is_trait_dead(jule::Ptr<_1e85a7865_Trait> _22322_t) {
	return false;
}



inline void _1b54d0c11_eliminate_dead_functions(jule::Slice<jule::Ptr<_1e83d4384_Fn>>& _24034_funcs) {
	jule::I64 _24113_i = 0LL;
	while (_24113_i < static_cast<jule::I64>(_24034_funcs.len())) {
		{
			jule::Ptr<_1e83d4384_Fn> _24317_f = _24034_funcs[_24113_i];
			jule::I64 _24417_j = 0LL;
			while (_24417_j < static_cast<jule::I64>((*(_24317_f))._field_instances.len())) {
				{
					jule::Ptr<_1e83d630e_FnIns> _24621_ins = (*(_24317_f))._field_instances[_24417_j];
					_1b54cc9dd_main_current=jule::Any(_24621_ins);
					if (_1b54ce68d_is_fn_dead(_24621_ins)) {
						_1b54cbe93_deads = jule::alloc_for_append(_1b54cbe93_deads,1);_1b54cbe93_deads.__push(jule::Any(_24621_ins));
						(*(_24317_f))._field_instances=jule::append((*(_24317_f))._field_instances.slice(0LL,_24417_j),(*(_24317_f))._field_instances.slice((_24417_j + 1LL)));
					} else {
						(_24417_j)++;
					}
				}
			_iter_next_1b8d39225:;
			}
			_iter_end_1b8d39225:;
			if (((*(_24317_f))._field_instances.len() == 0LL)) {
				_24034_funcs=jule::append(_24034_funcs.slice(0LL,_24113_i),_24034_funcs.slice((_24113_i + 1LL)));
				goto _iter_next_1b8d3870d;
			}
			(_24113_i)++;
		}
	_iter_next_1b8d3870d:;
	}
	_iter_end_1b8d3870d:;
}



inline void _1b54d1074_eliminate_dead_globals(jule::Ptr<_1ce6a15e3_Package>& _26532_pkg) {
	{
		auto &expr = (*(_26532_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8d3b337:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8d3b37b_f = *it;
			{
				jule::I64 _26717_i = 0LL;
				while (_26717_i < static_cast<jule::I64>((*(_1b8d3b37b_f))._field_vars.len())) {
					{
						jule::Ptr<_1ce6cecb4_Var> _26921_v = (*(_1b8d3b37b_f))._field_vars[_26717_i];
						_1b54cc9dd_main_current=jule::Any(_26921_v);
						if (_1b54ceade_is_var_dead(_26921_v)) {
							_1b54cbe93_deads = jule::alloc_for_append(_1b54cbe93_deads,1);_1b54cbe93_deads.__push(jule::Any(_26921_v));
							(*(_1b8d3b37b_f))._field_vars=jule::append((*(_1b8d3b37b_f))._field_vars.slice(0LL,_26717_i),(*(_1b8d3b37b_f))._field_vars.slice((_26717_i + 1LL)));
						} else {
							(_26717_i)++;
						}
					}
				_iter_next_1b8d3d3a0:;
				}
				_iter_end_1b8d3d3a0:;
			}
			_iter_next_1b8d3b337:;
			++it;
			goto _iter_begin_1b8d3b337;
		}
		_iter_end_1b8d3b337:;
	}
}



inline void _1b54d12d8_eliminate_dead_functions_package(jule::Ptr<_1ce6a15e3_Package>& _28142_pkg) {
	{
		auto &expr = (*(_28142_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8d3eb32:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8d3cb41_f = *it;
			{
				_1b54d0c11_eliminate_dead_functions((*(_1b8d3cb41_f))._field_funcs);
			}
			_iter_next_1b8d3eb32:;
			++it;
			goto _iter_begin_1b8d3eb32;
		}
		_iter_end_1b8d3eb32:;
	}
}



inline void _1b54d1c89_keep_alive_init(jule::Ptr<_1ce6a15e3_Package>& _32925_pkg) {
	
	
	jule::Ptr<_1e83d4384_Fn> _33213_f = (*(_32925_pkg))._method_find_fn(jule::Str("init", 4),false);
	if ((_33213_f != nullptr)) {
		(*(_33213_f))._field_statically=true;
	}
}



inline void _1b54d2053_eliminate_package(jule::Ptr<_1ce6a15e3_Package>& _33827_pkg) {
	_1b54cbe93_deads=jule::Slice<jule::Any>::alloc(0LL,1024LL);
	_1b54d1c89_keep_alive_init(_33827_pkg);
	_1b54d1074_eliminate_dead_globals(_33827_pkg);
	_1b54d12d8_eliminate_dead_functions_package(_33827_pkg);
}



inline void _1b54d231c_eliminate_defines(jule::Ptr<_1b54c72bd_IR>& _35031_ir) {
	jule::I64 _35113_i = ((*(_35031_ir))._field_used.len() - 1LL);
	for (; (_35113_i >= 0LL); (_35113_i)--) {
		{
			jule::Ptr<_1ce6a0317_ImportInfo> _35317_u = (*(_35031_ir))._field_used[_35113_i];
			if ((!((*(_35317_u))._field_cpp_linked))) {
				_1b54d2053_eliminate_package((*(_35317_u))._field_package);
			}
		}
	_iter_next_1b8d4bad9:;
	}
	_iter_end_1b8d4bad9:;
	_1b54d2053_eliminate_package((*(_35031_ir))._field_main);
	_1b54cbe93_deads=nullptr;
	_1b54cc56a_checking=nullptr;
	_1b54cc724_current=jule::Any(nullptr);
}



inline void _1b54d3b7b_eliminate_dead_code_of_scope(jule::Ptr<_1ce62e86d_Scope> _7937_s) {
	jule::Ptr<_1b54d350a_ScopeDeadCode> _8013_sdc = jule::new_struct_ptr<_1b54d350a_ScopeDeadCode>(new( std::nothrow ) _1b54d350a_ScopeDeadCode(jule::Ptr<_1b54d350a_ScopeDeadCode>(),_7937_s,(&((*(_7937_s))._field_stmts)),jule::I64()));
	{
		(*(_8013_sdc))._method_optimize_stmts();
	}
}



inline void _1b54d3ecd_eliminate_scope_functions(jule::Slice<jule::Ptr<_1e83d4384_Fn>>& _8835_funcs) {
	{
		auto &expr = _8835_funcs;
		auto it = expr.begin();
		_iter_begin_1b8d509bc:;
		if (it != expr.end()) {
			jule::Ptr<_1e83d4384_Fn> _1b8d50bed_func = *it;
			{
				{
					auto &expr = (*(_1b8d50bed_func))._field_instances;
					auto it = expr.begin();
					_iter_begin_1b8d51308:;
					if (it != expr.end()) {
						jule::Ptr<_1e83d630e_FnIns> _1b8d5136e_ins = *it;
						{
							_1b54d3b7b_eliminate_dead_code_of_scope((*(_1b8d5136e_ins))._field_scope);
						}
						_iter_next_1b8d51308:;
						++it;
						goto _iter_begin_1b8d51308;
					}
					_iter_end_1b8d51308:;
				}
			}
			_iter_next_1b8d509bc:;
			++it;
			goto _iter_begin_1b8d509bc;
		}
		_iter_end_1b8d509bc:;
	}
}



inline void _1b54d431e_eliminate_functions_scope_package(jule::Ptr<_1ce6a15e3_Package>& _9643_pkg) {
	{
		auto &expr = (*(_9643_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_1b8d50b76:;
		if (it != expr.end()) {
			jule::Ptr<_1ce7204a8_SymbolTable> _1b8d5156c_f = *it;
			{
				_1b54d3ecd_eliminate_scope_functions((*(_1b8d5156c_f))._field_funcs);
			}
			_iter_next_1b8d50b76:;
			++it;
			goto _iter_begin_1b8d50b76;
		}
		_iter_end_1b8d50b76:;
	}
}



inline void _1b54d4682_eliminate_scope_package(jule::Ptr<_1ce6a15e3_Package>& _10233_pkg) {
	_1b54d431e_eliminate_functions_scope_package(_10233_pkg);
}



inline void _1b54d4918_eliminate_scopes(jule::Ptr<_1b54c72bd_IR>& _10730_ir) {
	jule::I64 _10813_i = ((*(_10730_ir))._field_used.len() - 1LL);
	for (; (_10813_i >= 0LL); (_10813_i)--) {
		{
			jule::Ptr<_1ce6a0317_ImportInfo> _11017_u = (*(_10730_ir))._field_used[_10813_i];
			if ((!((*(_11017_u))._field_cpp_linked))) {
				_1b54d4682_eliminate_scope_package((*(_11017_u))._field_package);
			}
		}
	_iter_next_1b8d530a7:;
	}
	_iter_end_1b8d530a7:;
	_1b54d4682_eliminate_scope_package((*(_10730_ir))._field_main);
}



inline void _1b5501308_throw(jule::Str _914_msg) {
	jule::outln(_914_msg);
	_2128bad6d_exit(1LL);
}



inline jule::Bool _1b58a06da_is_std_package(jule::Str _37319_f,jule::Str _37327_p) {
	return _2127d7dbc_has_prefix(_37319_f,_211dc6ce7_join(jule::Slice<jule::Str>({_21289b502_PATH_STDLIB,_37327_p})));
}



inline jule::Bool _1b58a094e_is_constant_valid_conditional_case(jule::Ptr<_1ce632574_If>& _37740_i) {
	{
		auto &_match_expr{ (*(_37740_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b7681640:;
			{
				jule::Ptr<_1ce4b898d_Const> _38013_c = (*(_37740_i))._field_expr.operator jule::Ptr<_1ce4b898d_Const>();
				return (*(_38013_c))._method_is_bool() && (*(_38013_c))._method_read_bool();
			}
		}
		_match_end_1b7681563:;
	}
	return false;
}



inline jule::Bool _1b58a0d17_is_unreachable_expr(jule::Any& _38625_expr) {
	{
		auto &_match_expr{ _38625_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b768191a:;
			{
				jule::Ptr<_1ce4b898d_Const> _38913_c = _38625_expr.operator jule::Ptr<_1ce4b898d_Const>();
				return (*(_38913_c))._method_is_bool() && (!((*(_38913_c))._method_read_bool()));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e83be3c4_BinopExprModel>>()) {
			_case_begin_1b7681992:;
			{
				jule::Ptr<_1e83be3c4_BinopExprModel> _39213_m = _38625_expr.operator jule::Ptr<_1e83be3c4_BinopExprModel>();
				if (((*(_39213_m))._field_op._field_kind == jule::Str("&&", 2))) {
					return _1b58a0d17_is_unreachable_expr((*((*(_39213_m))._field_left))._field_model) || _1b58a0d17_is_unreachable_expr((*((*(_39213_m))._field_right))._field_model);
				}
			}
		}
		_match_end_1b76818b5:;
	}
	return false;
}



inline jule::Bool _1b58a11be_is_constant_valid_match_case(jule::Ptr<_1ce686b6c_Case>& _40034_case) {
	{
		auto &expr = (*(_40034_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_1b7683ac6:;
		if (it != expr.end()) {
			jule::Ptr<_1ce727449_Data> &_1b7686090_expr = *it;
			{
				if (((*(_1b7686090_expr))._method_is_const() && (*((*(_1b7686090_expr))._field_constant))._method_is_bool()) && (*((*(_1b7686090_expr))._field_constant))._method_read_bool()) {
					return true;
				}
			}
			_iter_next_1b7683ac6:;
			++it;
			goto _iter_begin_1b7683ac6;
		}
		_iter_end_1b7683ac6:;
	}
	return false;
}



inline jule::Bool _1b58a1521_is_unreachable_conditional_case(jule::Ptr<_1ce632574_If>& _40937_i) {
	return _1b58a0d17_is_unreachable_expr((*(_40937_i))._field_expr);
}



inline jule::Bool _1b58a1895_is_unreachable_match_case(jule::Ptr<_1ce686b6c_Case>& _41331_case) {
	{
		auto &expr = (*(_41331_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_1b7687cb7:;
		if (it != expr.end()) {
			jule::Ptr<_1ce727449_Data> &_1b7687dd8_expr = *it;
			{
				if ((!(_1b58a0d17_is_unreachable_expr((*(_1b7687dd8_expr))._field_model)))) {
					return false;
				}
			}
			_iter_next_1b7687cb7:;
			++it;
			goto _iter_begin_1b7687cb7;
		}
		_iter_end_1b7687cb7:;
	}
	return true;
}



inline std::tuple<jule::Bool,jule::U64> _1b58a76e2_check_for_bit_shift_opt(jule::Ptr<_1e83bdbcb_OperandExprModel>& _43129_l,jule::Ptr<_1e83bdbcb_OperandExprModel>& _43152_r) {
	jule::Bool _43176_ok = jule::Bool();
	jule::U64 _43186_x = jule::U64();
	if ((!(_1ce682173_is_int((*((*(_43129_l))._field_kind))._method_to_str()))) || (!(_1ce682173_is_int((*((*(_43152_r))._field_kind))._method_to_str())))) {
		_43176_ok = false;
		_43186_x = 0LLU;
		return std::make_tuple(_43176_ok,_43186_x);
	}
	{
		auto &_match_expr{ (*(_43152_r))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ce4b898d_Const>>()) {
			_case_begin_1b768b419:;
			{
				goto _match_end_1b768ad20;
			}
		}
		else {
			_case_begin_1b768ad75:;
			{
				_43176_ok = false;
				_43186_x = 0LLU;
				return std::make_tuple(_43176_ok,_43186_x);
			}
		}
		_match_end_1b768ad20:;
	}
	_43186_x=static_cast<jule::U64>((*((*(_43152_r))._field_model.operator jule::Ptr<_1ce4b898d_Const>()))._method_as_u64());
	if ((_43186_x == 0LLU) || ((_43186_x & 1LL) != 0LLU)) {
		_43176_ok = false;
		_43186_x = 0LLU;
		return std::make_tuple(_43176_ok,_43186_x);
	}
	jule::F64 _4459_j = _1ce439b2e_log2(static_cast<jule::F64>(static_cast<jule::F64>(_43186_x)));
	jule::U64 _4469_z = static_cast<jule::U64>(_4459_j);
	if (static_cast<jule::F64>(_4469_z) != _4459_j) {
		_43176_ok = false;
		_43186_x = 0LLU;
		return std::make_tuple(_43176_ok,_43186_x);
	}
	_43176_ok = true;
	_43186_x = _4469_z;
	return std::make_tuple(_43176_ok,_43186_x);
}



inline jule::U64 _1b591b6ac_unix(void) {
	return static_cast<jule::U64>(static_cast<jule::U64>(time(nullptr)));
}



inline jule::U64 _1b591c01a_unix_year_to_seconds(jule::U64 _25725_y,jule::Bool& _25743_leap) {
	if (((_25725_y - 2LLU) <= 136LLU)) {
		jule::U64 _25917_leaps = ((_25725_y - 68LLU) >> 2LLU);
		_25743_leap=(((_25725_y - 68LLU) & 3LLU) == 0LLU);
		if (_25743_leap) {
			(_25917_leaps)--;
		}
		return static_cast<jule::U64>(static_cast<jule::U64>(31536000LLU * static_cast<jule::U64>((_25725_y - 70LLU))) + static_cast<jule::U64>(86400LLU * _25917_leaps));
	}
	jule::U64 _26713_leaps = 0LLU;
	jule::U64 _26813_centuries = 0LLU;
	jule::U64 _26913_cycles = ((_25725_y - 100LLU) / 400LLU);
	jule::U64 _27013_rem = ((_25725_y - 100LLU) % 400LL);
	if ((_27013_rem < 0LLU)) {
		(_26913_cycles)--;
		_27013_rem+=400LLU;
	}
	if ((_27013_rem == 0LLU)) {
		_25743_leap=true;
		_26813_centuries=0LLU;
		_26713_leaps=0LLU;
	} else {
		if ((_27013_rem >= 200LLU)) {
			if ((_27013_rem >= 300LLU)) {
				_26813_centuries=3LLU;
				_27013_rem-=300LLU;
			} else {
				_26813_centuries=2LLU;
				_27013_rem-=200LLU;
			}
		} else {
			if ((_27013_rem >= 100LLU)) {
				_26813_centuries=1LLU;
				_27013_rem-=100LLU;
			} else {
				_26813_centuries=0LLU;
			}
		}
		if ((_27013_rem == 0LLU)) {
			_25743_leap=false;
			_26713_leaps=0LLU;
		} else {
			_26713_leaps=static_cast<jule::U64>(_27013_rem >> 2LLU);
			_27013_rem%=4LL;
			_25743_leap=(_27013_rem == 0LLU);
		}
	}
	_26713_leaps+=static_cast<jule::U64>(static_cast<jule::U64>(97LLU * _26913_cycles) + static_cast<jule::U64>(24LLU * _26813_centuries));
	if (_25743_leap) {
		(_26713_leaps)++;
	}
	return static_cast<jule::U64>((static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U64>((_25725_y - 100LLU)) * 31536000LLU)) + static_cast<jule::U64>((_26713_leaps * 86400LLU))) + 946684800LLU)) + 86400LLU));
}



inline jule::U64 _1b591c46b_unix_month_to_seconds(jule::U64 _31426_m,jule::Bool _31439_leap) {
	jule::U64 _31613_t = 0LLU;
	{
		auto &_match_expr{ _31426_m };
		
		if (_match_expr == 1LL) {
			_case_begin_1b76bdb44:;
			{
				_31613_t=2678400LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_1b76be073:;
			{
				_31613_t=5097600LLU;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_1b76be0d9:;
			{
				_31613_t=7776000LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_1b76be150:;
			{
				_31613_t=10368000LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_1b76be1b6:;
			{
				_31613_t=13046400LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_1b76be22c:;
			{
				_31613_t=15638400LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_1b76be2a4:;
			{
				_31613_t=18316800LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_1b76be32b:;
			{
				_31613_t=20995200LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_1b76be3a3:;
			{
				_31613_t=23587200LLU;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_1b76be42a:;
			{
				_31613_t=26265600LLU;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_1b76be4a2:;
			{
				_31613_t=28857600LLU;
			}
		}
		_match_end_1b76bdccb:;
	}
	if (_31439_leap && (_31426_m >= 2LLU)) {
		_31613_t+=86400LLU;
	}
	return _31613_t;
}



inline jule::Bool _1b57ce2d9_is_copy_optimizable(jule::Ptr<_1ce727449_Data>& _74925_expr) {
	if ((!((*(_74925_expr))._field_lvalue))) {
		return false;
	}
	{
		auto &_match_expr{ (*(_74925_expr))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c585e_SlicingExprModel>>()) {
			_case_begin_1b9213621:;
			{
				return false;
			}
		}
		_match_end_1b9213599:;
	}
	return true;
}



inline jule::Bool _1b582d79a_is_iter_copy_optimizable(jule::Ptr<_1ce727449_Data>& _76030_expr,jule::Ptr<_1ce6cecb4_Var>& _76044_v) {
	if ((!((*(_76030_expr))._field_lvalue)) && (!((*((*(_76030_expr))._field_kind))._method_mutable()))) {
		return true;
	}
	return (!((*(_76044_v))._field_mutable)) && (!((*(_76030_expr))._field_mutable));
}



inline jule::Str _1b57d0bc0_concat_all_parts(jule::Slice<_212ae5c02_Token> _108521_parts) {
	jule::Str _108613_s = jule::Str();
	{
		auto &expr = _108521_parts;
		auto it = expr.begin();
		_iter_begin_1b9216701:;
		if (it != expr.end()) {
			_212ae5c02_Token &_1b9216822_p = *it;
			{
				_108613_s+=_1b9216822_p._field_kind;
			}
			_iter_next_1b9216701:;
			++it;
			goto _iter_begin_1b9216701;
		}
		_iter_end_1b9216701:;
	}
	return _108613_s;
}



inline jule::Str _1b5845d23_decompose_common_esq(jule::U8 _109325_b) {
	{
		auto &_match_expr{ _109325_b };
		
		if (_match_expr == '\\') {
			_case_begin_1b92178de:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_1b9217955:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_1b92179bb:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_1b9217614:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_1b921767a:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_1b9217702:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_1b921736c:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_1b92173d3:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_1b9217449:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_1b92174c1:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_1b9217218:;
			{
				return jule::Str();
			}
		}
		_match_end_1b92172a1:;
	}
}



inline jule::Str _1b5846917_sbtoa(jule::U8 _112010_b) {
	if ((_112010_b == 0LLU)) {
		return jule::Str("\\x00", 4);
	}
	if ((_112010_b < 128LLU)) {
		jule::Str _112513_seq = _1b5845d23_decompose_common_esq(_112010_b);
		if ((!(_112513_seq.empty()))) {
			return _112513_seq;
		}
		if ((32LL <= _112010_b) && (_112010_b <= 126LLU)) {
			return static_cast<jule::Str>(_112010_b);
		}
	}
	jule::Str _11339_seq = _1ce276eee_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_112010_b)),8LL);
	if ((_11339_seq.len() == 2LL)) {
		return jule::Str("\\0", 2) + _11339_seq;
	}
	return jule::Str("\\", 1) + _11339_seq;
}



inline jule::Str _1b58541b6_cstr_bytes(jule::Slice<jule::U8> _114015_bytes) {
	jule::Str _114113_lit = jule::Str();
	{
		auto &expr = _114015_bytes;
		auto it = expr.begin();
		_iter_begin_1b921c9d2:;
		if (it != expr.end()) {
			jule::U8 &_1b921d8c3_b = *it;
			{
				_114113_lit+=_1b5846917_sbtoa(_1b921d8c3_b);
			}
			_iter_next_1b921c9d2:;
			++it;
			goto _iter_begin_1b921c9d2;
		}
		_iter_end_1b921c9d2:;
	}
	return _114113_lit;
}



inline jule::Str _1b5859540_cstr_lit(jule::Slice<jule::U8> _114813_bytes) {
	return ((jule::Str("\"", 1) + _1b58541b6_cstr_bytes(_114813_bytes)) + jule::Str("\"", 1));
}



inline jule::Str _1b585a112_ftoa(jule::F64 _11529_f,jule::I64 _115217_bitsize) {
	if ((_115217_bitsize != 32LL)) {
		if (_11529_f == static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::I64>(_11529_f)))) {
			return _1b5864c32_itoa(static_cast<jule::I64>(static_cast<jule::I64>(_11529_f)));
		}
		if (_11529_f == static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::U64>(_11529_f)))) {
			return _1b5829774_utoa(static_cast<jule::U64>(static_cast<jule::U64>(_11529_f)));
		}
	}
	jule::Str _116113_m = _1cdda3961_fmt_float(_11529_f,'f',-1LL,_115217_bitsize);
	if ((!(_2127cc2e0_contains(_116113_m,jule::Str(".", 1))))) {
		_116113_m+=jule::Str(".0", 2);
	}
	return _116113_m;
}



inline jule::Str _1b5864c32_itoa(jule::I64 _11689_x) {
	{
		
		if ((_11689_x == jule::MAX_I64)) {
			_case_begin_1b9223224:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if ((_11689_x == jule::MIN_I64)) {
			_case_begin_1b922328a:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_1b92230d1:;
	}
	jule::Str _11769_fmt = _1ce27c510_fmt_int(_11689_x,10LL);
	if (_21288680b_is_64bit(jule::Str("amd64", 5))) {
		return (_11769_fmt + jule::Str("LL", 2));
	}
	return (_11769_fmt + jule::Str("L", 1));
}



inline jule::Str _1b5829774_utoa(jule::U64 _11839_x) {
	{
		
		if ((_11839_x == jule::MAX_U64)) {
			_case_begin_1b9225479:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_1b922538b:;
	}
	jule::Str _11899_fmt = _1ce276eee_fmt_uint(_11839_x,10LL);
	if (_21288680b_is_64bit(jule::Str("amd64", 5))) {
		return (_11899_fmt + jule::Str("LLU", 3));
	}
	return (_11899_fmt + jule::Str("LU", 2));
}



inline jule::Bool _1b5886946_is_forwarded(jule::Ptr<_1ce62e86d_Scope>& _119618_s) {
	jule::Any _11979_last = (*(_119618_s))._field_stmts[((*(_119618_s))._field_stmts.len() - 1LL)];
	{
		auto &_match_expr{ _11979_last };
		
		if (_match_expr.type_is<jule::Ptr<_1ce727449_Data>>()) {
			_case_begin_1b92281c4:;
			{
				{
					auto &_match_expr{ (*(_11979_last.operator jule::Ptr<_1ce727449_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e83cd9ee_BuiltinErrorCallExprModel>>()) {
						_case_begin_1b9228328:;
						{
							return true;
						}
					}
					else {
						_case_begin_1b92287ac:;
						{
							return false;
						}
					}
					_match_end_1b9228757:;
				}
			}
		}
		else {
			_case_begin_1b9227a42:;
			{
				return true;
			}
		}
		_match_end_1b92279dc:;
	}
}



inline jule::Bool _1b582a797_is_builtin_call_has_debuginf(jule::Ptr<_1e83c2581_FnCallExprModel>& _121134_m) {
	if ((!((*((*(_121134_m))._field_func))._method_is_builtin()))) {
		return false;
	}
	{
		auto &_match_expr{ (*(_121134_m))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>>()) {
			_case_begin_1b9229db8:;
			{
				jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel> _121713_csie = (*(_121134_m))._field_expr.operator jule::Ptr<_1e83c8c3b_CommonSubIdentExprModel>();
				return ((*(_121713_csie))._field_ident == jule::Str("swap", 4));
			}
		}
		else {
			_case_begin_1b9229747:;
			{
				return false;
			}
		}
		_match_end_1b92296ae:;
	}
}



inline jule::Bool _1b58d3db1_is_cpp_header_file(jule::Str _113123_path) {
	jule::I64 _11329_offset = _211e1696e_find_last_byte(_113123_path,'.');
	if ((_11329_offset == -1LL)) {
		return false;
	}
	return _21286ec9a_is_valid_header_ext(_113123_path.slice(_11329_offset));
}



inline jule::Ptr<_2129e3902_Directive> _1b592bac9_find_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _2924_directives,jule::Str _2955_tag) {
	{
		auto &expr = _2924_directives;
		auto it = expr.begin();
		_iter_begin_1b922bddc:;
		if (it != expr.end()) {
			jule::Ptr<_2129e3902_Directive> _1b922bedb_dr = *it;
			{
				if ((*(_1b922bedb_dr))._field_tag._field_kind == _2955_tag) {
					return _1b922bedb_dr;
				}
			}
			_iter_next_1b922bddc:;
			++it;
			goto _iter_begin_1b922bddc;
		}
		_iter_end_1b922bddc:;
	}
	return nullptr;
}



inline jule::Bool _1b592c0d5_has_directive(jule::Slice<jule::Ptr<_2129e3902_Directive>>& _3919_directives,jule::Str _3950_tag) {
	return (_1b592bac9_find_directive(_3919_directives,_3950_tag) != nullptr);
}



inline void _2128593b1_print_error_message(jule::Str _3124_msg) {
	jule::outln(_3124_msg);
}



inline void _21123cd2e_help(jule::Slice<jule::Str>& _3410_args) {
	if ((_3410_args.len() > 2LL)) {
		_2128593b1_print_error_message(jule::Str("invalid command: ", 17) + _3410_args[2LL]);
		return;
	}
	jule::I64 _4013_max = _21285a923_HELP_MAP[0LL][0LL].len();
	{
		auto &expr = _21285a923_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_1b9285e68:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_1b92865d9_k = *it;
			{
				jule::I64 _4213_n = _1b92865d9_k[0LL].len();
				if (_4213_n > _4013_max) {
					_4013_max=_4213_n;
				}
			}
			_iter_next_1b9285e68:;
			++it;
			goto _iter_begin_1b9285e68;
		}
		_iter_end_1b9285e68:;
	}
	jule::Str _4813_s = jule::Str();
	
	{
		auto &expr = _21285a923_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_1b9286991:;
		if (it != expr.end()) {
			jule::I64 _1b9287e15_i = it - expr.begin();
			jule::Array<jule::Str,2> &_1b9288069_part = *it;
			{
				_4813_s+=_1b9288069_part[0LL];
				_4813_s+=_211e22edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>((static_cast<jule::I64>(_4013_max - static_cast<jule::I64>(_1b9288069_part[0LL].len())) + 5LL)));
				_4813_s+=_1b9288069_part[1LL];
				if (((_1b9287e15_i + 1LL) < 5LL)) {
					_4813_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_1b9286991:;
			++it;
			_1b9287e15_i++;
			goto _iter_begin_1b9286991;
		}
		_iter_end_1b9286991:;
	}
	jule::outln(_4813_s);
}



inline void _21285b638_version(jule::Slice<jule::Str>& _6213_args) {
	if ((_6213_args.len() > 2LL)) {
		_2128593b1_print_error_message(jule::Str("invalid command: ", 17) + _6213_args[2LL]);
		return;
	}
	jule::outln(jule::Str("jule0.0.10 @master", 18));
}



inline void _21285bc10_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _2128843db_DISTOS;
		auto it = expr.begin();
		_iter_begin_1b928b820:;
		if (it != expr.end()) {
			jule::Str &_1b928ba0c_os = *it;
			{
				jule::out(_1b928ba0c_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_1b928b820:;
			++it;
			goto _iter_begin_1b928b820;
		}
		_iter_end_1b928b820:;
	}
	jule::outln(jule::Str());
}



inline void _212863046_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _21288463e_DISTARCH;
		auto it = expr.begin();
		_iter_begin_1b928bd09:;
		if (it != expr.end()) {
			jule::Str &_1b928c711_arch = *it;
			{
				jule::out(_1b928c711_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_1b928bd09:;
			++it;
			goto _iter_begin_1b928bd09;
		}
		_iter_end_1b928bd09:;
	}
	jule::outln(jule::Str());
}



inline void _212865587_tool(jule::Slice<jule::Str>& _9110_args) {
	if ((_9110_args.len() == 2LL)) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if ((_9110_args.len() > 3LL)) {
		_2128593b1_print_error_message(jule::Str("invalid command: ", 17) + _9110_args[3LL]);
		return;
	}
	jule::Str _1029_cmd = _9110_args[2LL];
	{
		auto &_match_expr{ _1029_cmd };
		
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_1b929023b:;
			{
				_21285bc10_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_1b92906ae:;
			{
				_212863046_tool_distarch();
			}
		}
		else {
			_case_begin_1b928eda6:;
			{
				_2128593b1_print_error_message(jule::Str("undefined command: ", 19) + _1029_cmd);
			}
		}
		_match_end_1b928ed51:;
	}
}



inline void _2112589e8_julenv(jule::Slice<jule::Str>& _11112_args) {
	if ((_11112_args.len() > 2LL)) {
		_2128593b1_print_error_message(jule::Str("invalid command: ", 17) + _11112_args[2LL]);
		return;
	}
	jule::outln(jule::Str("julec version: jule0.0.10 @master", 33));
	jule::outln(jule::Str("architecture: amd64", 19));
	jule::outln(jule::Str("operating system: windows", 25));
	jule::outln(jule::Str("default compiler: ", 18) + _2110629cd_COMPILER);
	jule::outln(jule::Str("default C++ standard: ", 22) + _211062dc9_CPP_STD);
}



inline void _2125343ee_mod(jule::Slice<jule::Str>& _1249_args) {
	if ((_1249_args.len() == 2LL)) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;
	}
	if ((_1249_args.len() > 3LL)) {
		_2128593b1_print_error_message(jule::Str("invalid command: ", 17) + _1249_args[3LL]);
		return;
	}
	{
		auto &_match_expr{ _1249_args[2LL] };
		
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_1b9294eee:;
			{
				({
					auto except = _211184b99_File::_static_method_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_2128593b1_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_1b9294b8b:;
			{
				_2128593b1_print_error_message(jule::Str("invalid command: ", 17) + _1249_args[2LL]);
			}
		}
		_match_end_1b9294b36:;
	}
}



inline jule::Bool _21286c0c7_process_command(jule::Slice<jule::Str>& _14821_args) {
	{
		auto &_match_expr{ _14821_args[1LL] };
		
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_1b92973ca:;
			{
				_21123cd2e_help(_14821_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_1b9297441:;
			{
				_21285b638_version(_14821_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_1b92971dd:;
			{
				_212865587_tool(_14821_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_1b9297254:;
			{
				_2112589e8_julenv(_14821_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_1b92972ba:;
			{
				_2125343ee_mod(_14821_args);
			}
		}
		else {
			_case_begin_1b92950cb:;
			{
				return false;
			}
		}
		_match_end_1b929661b:;
	}
	return true;
}



inline void _2128584ae_show_info(void) {
	jule::outln(jule::Str("JuleC is a tool for Jule source code and developers.\n\nCommands:\n    help          Show help,\n    version       Show version,\n    tool          Tools for effective Jule,\n    julenv        Show information about native jule environment\n    mod           Module management\n\nCompilation:\n    julec [OPTIONS] INPUT\n", 310));
}



void entry_point(void) {
	jule::Slice<jule::Str> _17813_args = _21128893a_args();
	if ((_17813_args.len() < 2LL)) {
		_2128584ae_show_info();
		return;
	}
	if (_21286c0c7_process_command(_17813_args)) {
		return;
	}
	_1b5965c34_compile_command(_17813_args);
}



inline void _1b59630d8_init(void) {
	_2110629cd_COMPILER=jule::Str("clang", 5);
}



inline void _1b59638e1_write_output(jule::Str _5017_path,jule::Str _5028_content) {
	jule::Str _519_dir = _211dd6565_dir(_5017_path);
	({
		auto except = _2111850d9_Status::_static_method_of(_519_dir);
		if (!except.ok()) {
			({
				auto except = _211184759_Directory::_static_method_create(_519_dir);
				if (!except.ok()) {
					_1b5501308_throw(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	({
		auto except = _211184b99_File::_static_method_write(_5017_path,static_cast<jule::Slice<jule::U8>>(_5028_content),432LL);
		if (!except.ok()) {
			_1b5501308_throw(jule::Str("a problem occurs when code generation", 37));
		}
	});
}



inline void _1b5963a89_clear_objects(void) {
	({
		auto except = _211184b99_File::_static_method_remove(_1b5964705_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;
		}
	});
	_211184759_Directory::_static_method_remove(_1b577413b_OUT_DIR);
}



inline void _1b5963c32_compile_ir(jule::Str _7815_compiler,jule::Str _7830_compiler_cmd) {
	jule::Ptr<_2128a6d59_Cmd> _7913_cmd = _2128a6d59_Cmd::_static_method_new(_7815_compiler);
	(*(_7913_cmd))._field_args=jule::Slice<jule::Str>({_7815_compiler});
	(*(_7913_cmd))._field_args=jule::append((*(_7913_cmd))._field_args,_211e0ee2e_split(_7830_compiler_cmd,jule::Str(" ", 1),-1LL));
	jule::I64 _829_status = ({
		auto except = (*(_7913_cmd))._method_spawn();
		(except.ok()) ? (except.result) : ({
			{
				auto &_match_expr{ except.error };
				
				if (_match_expr == static_cast<jule::I64>(12LL)) {
					_case_begin_1b92a1add:;
					{
						_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of fork problem", 56));
					}
				}
				else if (_match_expr == static_cast<jule::I64>(3LL)) {
					_case_begin_1b92a1b54:;
					{
						_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of compiler path is not exist", 70));
					}
				}
				else if (_match_expr == static_cast<jule::I64>(9LL)) {
					_case_begin_1b92a1bba:;
					{
						_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of compiler path is not in the proper format", 85));
					}
				}
				else if (_match_expr == static_cast<jule::I64>(0LL)) {
					_case_begin_1b92a1c31:;
					{
						_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of permission denied", 61));
					}
				}
				else {
					_case_begin_1b92a1736:;
					{
						_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of unkown problem", 58));
					}
				}
				_match_end_1b92a18bd:;
			}
			_1b5501308_throw(jule::Str());
			0LL;
		});
	});
	if ((_829_status != 0LL)) {
		jule::Str _9913_error_message = ((jule::Str("\n>>> your backend compiler (", 28) + _2110629cd_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149));
		_1b54ed921_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),_9913_error_message);
		_1b5501308_throw(jule::Str());
	}
	_1b5963a89_clear_objects();
}



inline void _1b5963dca_do_spell(jule::Str _11013_obj,jule::Str _11023_compiler,jule::Str _11038_compiler_cmd) {
	jule::Str _1119_path = _1b5964705_get_compile_path();
	_1b59638e1_write_output(_1119_path,_11013_obj);
	if ((!(_2110632c5_TRANSPILATION))) {
		_1b5963c32_compile_ir(_11023_compiler,_11038_compiler_cmd);
	}
}



inline jule::Bool _1b5964073_is_cpp_source_file(jule::Str _11823_path) {
	jule::I64 _1199_offset = _211e1696e_find_last_byte(_11823_path,'.');
	if ((_1199_offset == -1LL)) {
		return false;
	}
	return _21286ee43_is_valid_cpp_ext(_11823_path.slice(_1199_offset));
}



inline void _1b596421b_push_comp_cmd_clang(jule::Str& _12629_cmd) {
	_12629_cmd+=jule::Str("-Wno-everything ", 16);
	_12629_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _211062dc9_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_1b92a9497:;
			{
				_12629_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_1b92a950d:;
			{
				_12629_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_1b92a9574:;
			{
				_12629_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_1b92a940e:;
	}
	_12629_cmd+=jule::Str(" ", 1);
	if (_210ecc0b8_PRODUCTION) {
		_12629_cmd+=jule::Str("-O3 ", 4);
		_12629_cmd+=jule::Str("-flto ", 6);
		_12629_cmd+=jule::Str("-DNDEBUG ", 9);
		_12629_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_12629_cmd+=jule::Str("-O0 ", 4);
	}
}



inline void _1b59643b4_push_comp_cmd_gcc(jule::Str& _14927_cmd) {
	_14927_cmd+=jule::Str("-w ", 3);
	_14927_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _211062dc9_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_1b92abd6d:;
			{
				_14927_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_1b92abe28:;
			{
				_14927_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_1b92abe8e:;
			{
				_14927_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_1b92abd18:;
	}
	_14927_cmd+=jule::Str(" ", 1);
	if (_210ecc0b8_PRODUCTION) {
		_14927_cmd+=jule::Str("-O3 ", 4);
		_14927_cmd+=jule::Str("-DNDEBUG ", 9);
		_14927_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_14927_cmd+=jule::Str("-O0 ", 4);
	}
}



inline std::tuple<jule::Str,jule::Str> _1b596455c_gen_compile_cmd(jule::Str _17220_source_path,jule::Ptr<_1b54c72bd_IR>& _17239_ir) {
	jule::Str &_17310_compiler = _211062bed_COMPILER_PATH;
	jule::Str _17413_cmd = jule::Str();
	{
		auto &_match_expr{ _2110629cd_COMPILER };
		
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_1b92ae997:;
			{
				_1b59643b4_push_comp_cmd_gcc(_17413_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_1b92aea0d:;
			{
				_1b596421b_push_comp_cmd_clang(_17413_cmd);
			}
		}
		_match_end_1b92ae942:;
	}
	{
		auto &expr = (*(_17239_ir))._field_passes;
		auto it = expr.begin();
		_iter_begin_1b92aed71:;
		if (it != expr.end()) {
			jule::Str &_1b92b06ac_pass = *it;
			{
				_17413_cmd+=_1b92b06ac_pass;
				_17413_cmd+=jule::Str(" ", 1);
			}
			_iter_next_1b92aed71:;
			++it;
			goto _iter_begin_1b92aed71;
		}
		_iter_end_1b92aed71:;
	}
	{
		auto &expr = (*(_17239_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_1b92b168b:;
		if (it != expr.end()) {
			jule::Ptr<_1ce6a0317_ImportInfo> &_1b92b0c95_u = *it;
			{
				if ((*(_1b92b0c95_u))._field_cpp_linked && _1b5964073_is_cpp_source_file((*(_1b92b0c95_u))._field_path)) {
					_17413_cmd+=(*(_1b92b0c95_u))._field_path;
					_17413_cmd+=jule::Str(" ", 1);
				}
			}
			_iter_next_1b92b168b:;
			++it;
			goto _iter_begin_1b92b168b;
		}
		_iter_end_1b92b168b:;
	}
	if ((!(_1b5936430_OUT.empty()))) {
		_17413_cmd+=jule::Str("-o ", 3);
		_17413_cmd+=_1b5936430_OUT;
		_17413_cmd+=jule::Str(" ", 1);
	}
	_17413_cmd+=_17220_source_path;
	return std::make_tuple(_17310_compiler,_17413_cmd);
}



inline jule::Str _1b5964705_get_compile_path(void) {
	return _211dc6ce7_join(jule::Slice<jule::Str>({_1b577413b_OUT_DIR,_1b5935385_OUT_NAME}));
}



inline void _1b596489d_apply_target_independent_optimizations(jule::Ptr<_1b54c72bd_IR>& _21548_ir) {
	if (_2110619ee_OPT_DEADCODE) {
		_1b54d231c_eliminate_defines(_21548_ir);
	}
	jule::Ptr<_1b58b17d9_Optimizer> _22213_opt = _1b58b17d9_Optimizer::_static_method_new(_21548_ir);
	(*(_22213_opt))._method_optimize();
	if (_2110619ee_OPT_DEADCODE) {
		_1b54d4918_eliminate_scopes(_21548_ir);
	}
}



inline void _1b5964a46_check_compiler_flag(void) {
	{
		auto &_match_expr{ _2110629cd_COMPILER };
		
		if (_match_expr == jule::Str()) {
			_case_begin_1b92b4b9a:;
			{
				_1b5501308_throw(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_1b92b5250:;
			{
				if (_211062bed_COMPILER_PATH.empty()) {
					_211062bed_COMPILER_PATH=jule::Str("clang++", 7);
				}
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_1b92b52b6:;
			{
				if (_211062bed_COMPILER_PATH.empty()) {
					_211062bed_COMPILER_PATH=jule::Str("g++", 3);
				}
			}
		}
		else {
			_case_begin_1b92b4eec:;
			{
				_1b5501308_throw(jule::Str("invalid option value for --compiler: ", 37) + _2110629cd_COMPILER);
			}
		}
		_match_end_1b92b49e1:;
	}
}



inline void _1b5964bde_check_target_arch(jule::Str _24822_arch) {
	{
		auto &expr = _21288463e_DISTARCH;
		auto it = expr.begin();
		_iter_begin_1b92b7263:;
		if (it != expr.end()) {
			jule::Str &_1b92b7708_distarch = *it;
			{
				if (_24822_arch == _1b92b7708_distarch) {
					return;
				}
			}
			_iter_next_1b92b7263:;
			++it;
			goto _iter_begin_1b92b7263;
		}
		_iter_end_1b92b7263:;
	}
	_1b5501308_throw(jule::Str("--target: unsupported/undefined architecture: ", 46) + _24822_arch);
}



inline void _1b5964d87_check_target_os(jule::Str _25720_os) {
	{
		auto &expr = _2128843db_DISTOS;
		auto it = expr.begin();
		_iter_begin_1b92b8484:;
		if (it != expr.end()) {
			jule::Str &_1b92b84c8_distos = *it;
			{
				if (_25720_os == _1b92b84c8_distos) {
					return;
				}
			}
			_iter_next_1b92b8484:;
			++it;
			goto _iter_begin_1b92b8484;
		}
		_iter_end_1b92b8484:;
	}
	_1b5501308_throw(jule::Str("--target: unsupported/undefined operating system: ", 50) + _25720_os);
}



inline void _1b5965030_check_target_flag(jule::Str& _26623_target) {
	if (_26623_target.empty()) {
		_1b5501308_throw(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _2719_parts = _211e0ee2e_split(_26623_target,jule::Str("-", 1),-1LL);
	if ((_2719_parts.len() != 2LL)) {
		_1b5501308_throw(jule::Str("--target: undefined platform target format: ", 44) + _26623_target);
	}
	jule::Str _27610_os = _2719_parts[0LL];
	jule::Str _27614_arch = _2719_parts[1LL];
	std::tie(_27610_os,_27614_arch) = std::make_tuple(_2719_parts[0LL],_2719_parts[1LL]);
	if ((_27610_os != jule::Str("native", 6))) {
		_1b5964d87_check_target_os(_27610_os);
		_212893c25_OS=_27610_os;
	}
	if ((_27614_arch != jule::Str("native", 6))) {
		_1b5964bde_check_target_arch(_27614_arch);
		_2128b0c97_ARCH=_27614_arch;
	}
	_1ce676981_update_target();
}



inline void _1b5965409_check_opt_flag(jule::Str& _28920_opt) {
	if (_28920_opt.empty()) {
		_1b5501308_throw(jule::Str("missing option value: --opt", 27));
	}
	{
		auto &_match_expr{ _28920_opt };
		
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_1b92be259:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_1b92bdeb2:;
			{
				_211062505_push_opt_level(static_cast<jule::I64>(1LL));
			}
		}
		else {
			_case_begin_1b92bd70e:;
			{
				_1b5501308_throw(jule::Str("--opt: invalid optimization level: ", 35) + _28920_opt);
			}
		}
		_match_end_1b92bde5c:;
	}
}



inline void _1b59655a2_check_cpp_std_flag(void) {
	{
		auto &_match_expr{ _211062dc9_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5) || _match_expr == jule::Str("cpp17", 5) || _match_expr == jule::Str("cpp20", 5)) {
			_case_begin_1b92c04be:;
			{
				goto _match_end_1b92c00a1;
			}
		}
		else {
			_case_begin_1b92be028:;
			{
				_1b5501308_throw(jule::Str("--cppstd: invalid optimization level: ", 38) + _211062dc9_CPP_STD);
			}
		}
		_match_end_1b92c00a1:;
	}
}



inline jule::Slice<jule::Str> _1b596574a_check_flags(jule::Slice<jule::Str>& _31217_args) {
	jule::Str _31313_opt = jule::Str("L0", 2);
	jule::Str _31413_target = jule::Str("native-native", 13);
	jule::Ptr<_1b595bc5d_FlagSet> _31613_fs = _1b595bc5d_FlagSet::_static_method_new();
	(*(_31613_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_31313_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	(*(_31613_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_31413_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	(*(_31613_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_1b5936430_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_21106313d_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Allow shadowing", 15));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2110632c5_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	(*(_31613_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_2110629cd_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	(*(_31613_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_211062bed_COMPILER_PATH)))),jule::Str("compiler-path", 13),0LL,jule::Str("Path of backend compiler", 24));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_210ecc0b8_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_21106367c_RC)))),jule::Str("disable-rc", 10),0LL,jule::Str("Disable reference counting", 26));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2110639ce_SAFETY)))),jule::Str("disable-safety", 14),0LL,jule::Str("Disable safety", 14));
	(*(_31613_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_211062dc9_CPP_STD)))),jule::Str("cppstd", 6),0LL,jule::Str("C++ standard", 12));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2110618ab_OPT_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2110619ee_OPT_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211061b42_OPT_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211061c85_OPT_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211061dc8_OPT_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_21106201b_OPT_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_21106226e_OPT_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	(*(_31613_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2110623b2_OPT_COND)))),jule::Str("opt-cond", 8),0LL,jule::Str("Conditional optimizations", 25));
	jule::Slice<jule::Str> _33813_content = ({
		auto except = (*(_31613_fs))._method_parse(_31217_args);
		(except.ok()) ? (except.result) : ({
			_1b5501308_throw(except.error.operator jule::Str());
			nullptr;
		});
	});
	_1b5964a46_check_compiler_flag();
	_1b59655a2_check_cpp_std_flag();
	_1b5965030_check_target_flag(_31413_target);
	_1b5965409_check_opt_flag(_31313_opt);
	return _33813_content;
}



inline void _1b59658e3_setup_sema_flags(jule::I64& _35126_flags) {
	if (_21106313d_SHADOWING) {
		_35126_flags|=static_cast<jule::I64>(1LL);
	}
}



inline jule::Ptr<_1b54c72bd_IR> _1b5965a8b_build_ir(jule::Slice<jule::Str>& _35714_args) {
	jule::Slice<jule::Str> _3589_content = _1b596574a_check_flags(_35714_args);
	jule::I64 _36013_sema_flags = static_cast<jule::I64>(0LL);
	_1b59658e3_setup_sema_flags(_36013_sema_flags);
	if ((_3589_content.len() == 0LL)) {
		_1b5501308_throw(_212880739_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if ((_3589_content.len() > 1LL)) {
		_1b5501308_throw(jule::Str("undefined content: ", 19) + _3589_content[1LL]);
	}
	jule::Str _36814_path;
	jule::Bool _36820_ok;
	std::tie(_36814_path,_36820_ok) = _211da0dd1_abs(_3589_content[0LL]);
	if ((!(_36820_ok))) {
		_1b5501308_throw(jule::Str("compile path could not processed because of a problem", 53));
	}
	jule::Ptr<_2111850d9_Status> _3749_inf = ({
		auto except = _2111850d9_Status::_static_method_of(_21289b502_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_1b5501308_throw(_212880739_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
			return nullptr;
		} jule::Ptr<_2111850d9_Status>();});
	});
	if ((!((*(_3749_inf))._method_is_dir()))) {
		_1b5501308_throw(_212880739_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	}
	jule::Ptr<_1b54c72bd_IR> _38214_ir;
	jule::Slice<_21287ea02_Log> _38218_logs;
	std::tie(_38214_ir,_38218_logs) = _1b54c72bd_IR::_static_method_build(_36814_path,_36013_sema_flags);
	if ((_38214_ir == nullptr) && (_38218_logs == nullptr)) {
		_1b5501308_throw(_212880739_logf(jule::Str("there is no Jule source code in package: @", 42),jule::Slice<jule::Any>({jule::Any(_36814_path)})));
	}
	if ((_38218_logs != nullptr)) {
		_1b54eeb53_Logger::_static_method_print_logs(_38218_logs);
		_1b5501308_throw(jule::Str());
	}
	return _38214_ir;
}



inline void _1b5965c34_compile_command(jule::Slice<jule::Str>& _39725_args) {
	_39725_args=_39725_args.slice(1LL);
	if ((_39725_args[0LL] == jule::Str("test", 4))) {
		_2110634a1_TEST=true;
		_39725_args=_39725_args.slice(1LL);
	}
	jule::Ptr<_1b54c72bd_IR> _40313_ir = _1b5965a8b_build_ir(_39725_args);
	
	if ((!(_2110634a1_TEST))) {
		jule::Ptr<_1e83d4384_Fn> _40817_f = (*((*(_40313_ir))._field_main))._method_find_fn(jule::Str("main", 4),false);
		if ((_40817_f == nullptr)) {
			_1b5501308_throw(_212880739_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		}
		(*(_40817_f))._field_statically=true;
	}
	jule::Ptr<_1e83d4384_Fn> _41413_f = (*((*(_40313_ir))._field_main))._method_find_fn(jule::Str("init", 4),false);
	if ((_41413_f != nullptr)) {
		(*(_41413_f))._field_statically=true;
	}
	_1b596489d_apply_target_independent_optimizations(_40313_ir);
	(*(_40313_ir))._method_order();
	jule::Str _42410_compiler;
	jule::Str _42420_compiler_cmd;
	std::tie(_42410_compiler,_42420_compiler_cmd) = _1b596455c_gen_compile_cmd(_1b5964705_get_compile_path(),_40313_ir);
	jule::Ptr<_1b592255e_ObjectCoder> _42613_oc = _1b592255e_ObjectCoder::_static_method_new(_40313_ir,_1b58d98cd_SerializationInfo(_42410_compiler,_42420_compiler_cmd));
	jule::Str _43013_obj = (*(_42613_oc))._method_serialize();
	if (_2110634a1_TEST) {
		jule::Ptr<_1b57910c0_TestCoder> _43317_tc = _1b57910c0_TestCoder::_static_method_new(_42613_oc);
		(*(_43317_tc))._method_serialize(_43013_obj);
	}
	(*(_42613_oc))._method_append_standard(_43013_obj);
	_1b5963dca_do_spell(_43013_obj,_42410_compiler,_42420_compiler_cmd);
}




void __jule_call_initializers(void) {
	_210ecc0b8_PRODUCTION = false;
	_2110618ab_OPT_COPY = false;
	_2110619ee_OPT_DEADCODE = false;
	_211061b42_OPT_APPEND = false;
	_211061c85_OPT_MATH = false;
	_211061dc8_OPT_ACCESS = false;
	_21106201b_OPT_INLINE = false;
	_21106226e_OPT_PTR = false;
	_2110623b2_OPT_COND = false;
	_2110629cd_COMPILER = jule::Str();
	_211062bed_COMPILER_PATH = jule::Str();
	_211062dc9_CPP_STD = jule::Str("cpp17", 5);
	_21106313d_SHADOWING = false;
	_2110632c5_TRANSPILATION = false;
	_2110634a1_TEST = false;
	_21106367c_RC = true;
	_2110639ce_SAFETY = true;
	_21114a6dc_STDIN = _21112a8cb_get_std_handle(static_cast<jule::U64>(18446744073709551606LLU));
	_21112c6d0_STDOUT = _21112a8cb_get_std_handle(static_cast<jule::U64>(18446744073709551605LLU));
	_21112d6ae_STDERR = _21112a8cb_get_std_handle(static_cast<jule::U64>(18446744073709551604LLU));
	_211213a3b_FIRST = jule::Array<jule::U8,256>({});
	_211212287_ACCEPT_RANGES = jule::Array<_211214102_accept_range,16>({_211214102_accept_range(128LLU,191LLU),_211214102_accept_range(160LLU,191LLU),_211214102_accept_range(128LLU,159LLU),_211214102_accept_range(144LLU,191LLU),_211214102_accept_range(128LLU,143LLU)});
	_21280852a__L = jule::new_struct<_212853b5d_RangeTable>(new( std::nothrow ) _212853b5d_RangeTable(jule::Slice<_21285283d_Range16>({_21285283d_Range16(65LLU,90LLU,1LLU),_21285283d_Range16(97LLU,122LLU,1LLU),_21285283d_Range16(170LLU,181LLU,11LLU),_21285283d_Range16(186LLU,192LLU,6LLU),_21285283d_Range16(193LLU,214LLU,1LLU),_21285283d_Range16(216LLU,246LLU,1LLU),_21285283d_Range16(248LLU,705LLU,1LLU),_21285283d_Range16(710LLU,721LLU,1LLU),_21285283d_Range16(736LLU,740LLU,1LLU),_21285283d_Range16(748LLU,750LLU,2LLU),_21285283d_Range16(880LLU,884LLU,1LLU),_21285283d_Range16(886LLU,887LLU,1LLU),_21285283d_Range16(890LLU,893LLU,1LLU),_21285283d_Range16(895LLU,902LLU,7LLU),_21285283d_Range16(904LLU,906LLU,1LLU),_21285283d_Range16(908LLU,910LLU,2LLU),_21285283d_Range16(911LLU,929LLU,1LLU),_21285283d_Range16(931LLU,1013LLU,1LLU),_21285283d_Range16(1015LLU,1153LLU,1LLU),_21285283d_Range16(1162LLU,1327LLU,1LLU),_21285283d_Range16(1329LLU,1366LLU,1LLU),_21285283d_Range16(1369LLU,1376LLU,7LLU),_21285283d_Range16(1377LLU,1416LLU,1LLU),_21285283d_Range16(1488LLU,1514LLU,1LLU),_21285283d_Range16(1519LLU,1522LLU,1LLU),_21285283d_Range16(1568LLU,1610LLU,1LLU),_21285283d_Range16(1646LLU,1647LLU,1LLU),_21285283d_Range16(1649LLU,1747LLU,1LLU),_21285283d_Range16(1749LLU,1765LLU,16LLU),_21285283d_Range16(1766LLU,1774LLU,8LLU),_21285283d_Range16(1775LLU,1786LLU,11LLU),_21285283d_Range16(1787LLU,1788LLU,1LLU),_21285283d_Range16(1791LLU,1808LLU,17LLU),_21285283d_Range16(1810LLU,1839LLU,1LLU),_21285283d_Range16(1869LLU,1957LLU,1LLU),_21285283d_Range16(1969LLU,1994LLU,25LLU),_21285283d_Range16(1995LLU,2026LLU,1LLU),_21285283d_Range16(2036LLU,2037LLU,1LLU),_21285283d_Range16(2042LLU,2048LLU,6LLU),_21285283d_Range16(2049LLU,2069LLU,1LLU),_21285283d_Range16(2074LLU,2084LLU,10LLU),_21285283d_Range16(2088LLU,2112LLU,24LLU),_21285283d_Range16(2113LLU,2136LLU,1LLU),_21285283d_Range16(2144LLU,2154LLU,1LLU),_21285283d_Range16(2160LLU,2183LLU,1LLU),_21285283d_Range16(2185LLU,2190LLU,1LLU),_21285283d_Range16(2208LLU,2249LLU,1LLU),_21285283d_Range16(2308LLU,2361LLU,1LLU),_21285283d_Range16(2365LLU,2384LLU,19LLU),_21285283d_Range16(2392LLU,2401LLU,1LLU),_21285283d_Range16(2417LLU,2432LLU,1LLU),_21285283d_Range16(2437LLU,2444LLU,1LLU),_21285283d_Range16(2447LLU,2448LLU,1LLU),_21285283d_Range16(2451LLU,2472LLU,1LLU),_21285283d_Range16(2474LLU,2480LLU,1LLU),_21285283d_Range16(2482LLU,2486LLU,4LLU),_21285283d_Range16(2487LLU,2489LLU,1LLU),_21285283d_Range16(2493LLU,2510LLU,17LLU),_21285283d_Range16(2524LLU,2525LLU,1LLU),_21285283d_Range16(2527LLU,2529LLU,1LLU),_21285283d_Range16(2544LLU,2545LLU,1LLU),_21285283d_Range16(2556LLU,2565LLU,9LLU),_21285283d_Range16(2566LLU,2570LLU,1LLU),_21285283d_Range16(2575LLU,2576LLU,1LLU),_21285283d_Range16(2579LLU,2600LLU,1LLU),_21285283d_Range16(2602LLU,2608LLU,1LLU),_21285283d_Range16(2610LLU,2611LLU,1LLU),_21285283d_Range16(2613LLU,2614LLU,1LLU),_21285283d_Range16(2616LLU,2617LLU,1LLU),_21285283d_Range16(2649LLU,2652LLU,1LLU),_21285283d_Range16(2654LLU,2674LLU,20LLU),_21285283d_Range16(2675LLU,2676LLU,1LLU),_21285283d_Range16(2693LLU,2701LLU,1LLU),_21285283d_Range16(2703LLU,2705LLU,1LLU),_21285283d_Range16(2707LLU,2728LLU,1LLU),_21285283d_Range16(2730LLU,2736LLU,1LLU),_21285283d_Range16(2738LLU,2739LLU,1LLU),_21285283d_Range16(2741LLU,2745LLU,1LLU),_21285283d_Range16(2749LLU,2768LLU,19LLU),_21285283d_Range16(2784LLU,2785LLU,1LLU),_21285283d_Range16(2809LLU,2821LLU,12LLU),_21285283d_Range16(2822LLU,2828LLU,1LLU),_21285283d_Range16(2831LLU,2832LLU,1LLU),_21285283d_Range16(2835LLU,2856LLU,1LLU),_21285283d_Range16(2858LLU,2864LLU,1LLU),_21285283d_Range16(2866LLU,2867LLU,1LLU),_21285283d_Range16(2869LLU,2873LLU,1LLU),_21285283d_Range16(2877LLU,2908LLU,31LLU),_21285283d_Range16(2909LLU,2911LLU,2LLU),_21285283d_Range16(2912LLU,2913LLU,1LLU),_21285283d_Range16(2929LLU,2947LLU,18LLU),_21285283d_Range16(2949LLU,2954LLU,1LLU),_21285283d_Range16(2958LLU,2960LLU,1LLU),_21285283d_Range16(2962LLU,2965LLU,1LLU),_21285283d_Range16(2969LLU,2970LLU,1LLU),_21285283d_Range16(2972LLU,2974LLU,2LLU),_21285283d_Range16(2975LLU,2979LLU,4LLU),_21285283d_Range16(2980LLU,2984LLU,4LLU),_21285283d_Range16(2985LLU,2986LLU,1LLU),_21285283d_Range16(2990LLU,3001LLU,1LLU),_21285283d_Range16(3024LLU,3077LLU,53LLU),_21285283d_Range16(3078LLU,3084LLU,1LLU),_21285283d_Range16(3086LLU,3088LLU,1LLU),_21285283d_Range16(3090LLU,3112LLU,1LLU),_21285283d_Range16(3114LLU,3129LLU,1LLU),_21285283d_Range16(3133LLU,3160LLU,27LLU),_21285283d_Range16(3161LLU,3162LLU,1LLU),_21285283d_Range16(3165LLU,3168LLU,3LLU),_21285283d_Range16(3169LLU,3200LLU,31LLU),_21285283d_Range16(3205LLU,3212LLU,1LLU),_21285283d_Range16(3214LLU,3216LLU,1LLU),_21285283d_Range16(3218LLU,3240LLU,1LLU),_21285283d_Range16(3242LLU,3251LLU,1LLU),_21285283d_Range16(3253LLU,3257LLU,1LLU),_21285283d_Range16(3261LLU,3293LLU,32LLU),_21285283d_Range16(3294LLU,3296LLU,2LLU),_21285283d_Range16(3297LLU,3313LLU,16LLU),_21285283d_Range16(3314LLU,3332LLU,18LLU),_21285283d_Range16(3333LLU,3340LLU,1LLU),_21285283d_Range16(3342LLU,3344LLU,1LLU),_21285283d_Range16(3346LLU,3386LLU,1LLU),_21285283d_Range16(3389LLU,3406LLU,17LLU),_21285283d_Range16(3412LLU,3414LLU,1LLU),_21285283d_Range16(3423LLU,3425LLU,1LLU),_21285283d_Range16(3450LLU,3455LLU,1LLU),_21285283d_Range16(3461LLU,3478LLU,1LLU),_21285283d_Range16(3482LLU,3505LLU,1LLU),_21285283d_Range16(3507LLU,3515LLU,1LLU),_21285283d_Range16(3517LLU,3520LLU,3LLU),_21285283d_Range16(3521LLU,3526LLU,1LLU),_21285283d_Range16(3585LLU,3632LLU,1LLU),_21285283d_Range16(3634LLU,3635LLU,1LLU),_21285283d_Range16(3648LLU,3654LLU,1LLU),_21285283d_Range16(3713LLU,3714LLU,1LLU),_21285283d_Range16(3716LLU,3718LLU,2LLU),_21285283d_Range16(3719LLU,3722LLU,1LLU),_21285283d_Range16(3724LLU,3747LLU,1LLU),_21285283d_Range16(3749LLU,3751LLU,2LLU),_21285283d_Range16(3752LLU,3760LLU,1LLU),_21285283d_Range16(3762LLU,3763LLU,1LLU),_21285283d_Range16(3773LLU,3776LLU,3LLU),_21285283d_Range16(3777LLU,3780LLU,1LLU),_21285283d_Range16(3782LLU,3804LLU,22LLU),_21285283d_Range16(3805LLU,3807LLU,1LLU),_21285283d_Range16(3840LLU,3904LLU,64LLU),_21285283d_Range16(3905LLU,3911LLU,1LLU),_21285283d_Range16(3913LLU,3948LLU,1LLU),_21285283d_Range16(3976LLU,3980LLU,1LLU),_21285283d_Range16(4096LLU,4138LLU,1LLU),_21285283d_Range16(4159LLU,4176LLU,17LLU),_21285283d_Range16(4177LLU,4181LLU,1LLU),_21285283d_Range16(4186LLU,4189LLU,1LLU),_21285283d_Range16(4193LLU,4197LLU,4LLU),_21285283d_Range16(4198LLU,4206LLU,8LLU),_21285283d_Range16(4207LLU,4208LLU,1LLU),_21285283d_Range16(4213LLU,4225LLU,1LLU),_21285283d_Range16(4238LLU,4256LLU,18LLU),_21285283d_Range16(4257LLU,4293LLU,1LLU),_21285283d_Range16(4295LLU,4301LLU,6LLU),_21285283d_Range16(4304LLU,4346LLU,1LLU),_21285283d_Range16(4348LLU,4680LLU,1LLU),_21285283d_Range16(4682LLU,4685LLU,1LLU),_21285283d_Range16(4688LLU,4694LLU,1LLU),_21285283d_Range16(4696LLU,4698LLU,2LLU),_21285283d_Range16(4699LLU,4701LLU,1LLU),_21285283d_Range16(4704LLU,4744LLU,1LLU),_21285283d_Range16(4746LLU,4749LLU,1LLU),_21285283d_Range16(4752LLU,4784LLU,1LLU),_21285283d_Range16(4786LLU,4789LLU,1LLU),_21285283d_Range16(4792LLU,4798LLU,1LLU),_21285283d_Range16(4800LLU,4802LLU,2LLU),_21285283d_Range16(4803LLU,4805LLU,1LLU),_21285283d_Range16(4808LLU,4822LLU,1LLU),_21285283d_Range16(4824LLU,4880LLU,1LLU),_21285283d_Range16(4882LLU,4885LLU,1LLU),_21285283d_Range16(4888LLU,4954LLU,1LLU),_21285283d_Range16(4992LLU,5007LLU,1LLU),_21285283d_Range16(5024LLU,5109LLU,1LLU),_21285283d_Range16(5112LLU,5117LLU,1LLU),_21285283d_Range16(5121LLU,5740LLU,1LLU),_21285283d_Range16(5743LLU,5759LLU,1LLU),_21285283d_Range16(5761LLU,5786LLU,1LLU),_21285283d_Range16(5792LLU,5866LLU,1LLU),_21285283d_Range16(5873LLU,5880LLU,1LLU),_21285283d_Range16(5888LLU,5905LLU,1LLU),_21285283d_Range16(5919LLU,5937LLU,1LLU),_21285283d_Range16(5952LLU,5969LLU,1LLU),_21285283d_Range16(5984LLU,5996LLU,1LLU),_21285283d_Range16(5998LLU,6000LLU,1LLU),_21285283d_Range16(6016LLU,6067LLU,1LLU),_21285283d_Range16(6103LLU,6108LLU,5LLU),_21285283d_Range16(6176LLU,6264LLU,1LLU),_21285283d_Range16(6272LLU,6276LLU,1LLU),_21285283d_Range16(6279LLU,6312LLU,1LLU),_21285283d_Range16(6314LLU,6320LLU,6LLU),_21285283d_Range16(6321LLU,6389LLU,1LLU),_21285283d_Range16(6400LLU,6430LLU,1LLU),_21285283d_Range16(6480LLU,6509LLU,1LLU),_21285283d_Range16(6512LLU,6516LLU,1LLU),_21285283d_Range16(6528LLU,6571LLU,1LLU),_21285283d_Range16(6576LLU,6601LLU,1LLU),_21285283d_Range16(6656LLU,6678LLU,1LLU),_21285283d_Range16(6688LLU,6740LLU,1LLU),_21285283d_Range16(6823LLU,6917LLU,94LLU),_21285283d_Range16(6918LLU,6963LLU,1LLU),_21285283d_Range16(6981LLU,6988LLU,1LLU),_21285283d_Range16(7043LLU,7072LLU,1LLU),_21285283d_Range16(7086LLU,7087LLU,1LLU),_21285283d_Range16(7098LLU,7141LLU,1LLU),_21285283d_Range16(7168LLU,7203LLU,1LLU),_21285283d_Range16(7245LLU,7247LLU,1LLU),_21285283d_Range16(7258LLU,7293LLU,1LLU),_21285283d_Range16(7296LLU,7304LLU,1LLU),_21285283d_Range16(7312LLU,7354LLU,1LLU),_21285283d_Range16(7357LLU,7359LLU,1LLU),_21285283d_Range16(7401LLU,7404LLU,1LLU),_21285283d_Range16(7406LLU,7411LLU,1LLU),_21285283d_Range16(7413LLU,7414LLU,1LLU),_21285283d_Range16(7418LLU,7424LLU,6LLU),_21285283d_Range16(7425LLU,7615LLU,1LLU),_21285283d_Range16(7680LLU,7957LLU,1LLU),_21285283d_Range16(7960LLU,7965LLU,1LLU),_21285283d_Range16(7968LLU,8005LLU,1LLU),_21285283d_Range16(8008LLU,8013LLU,1LLU),_21285283d_Range16(8016LLU,8023LLU,1LLU),_21285283d_Range16(8025LLU,8031LLU,2LLU),_21285283d_Range16(8032LLU,8061LLU,1LLU),_21285283d_Range16(8064LLU,8116LLU,1LLU),_21285283d_Range16(8118LLU,8124LLU,1LLU),_21285283d_Range16(8126LLU,8130LLU,4LLU),_21285283d_Range16(8131LLU,8132LLU,1LLU),_21285283d_Range16(8134LLU,8140LLU,1LLU),_21285283d_Range16(8144LLU,8147LLU,1LLU),_21285283d_Range16(8150LLU,8155LLU,1LLU),_21285283d_Range16(8160LLU,8172LLU,1LLU),_21285283d_Range16(8178LLU,8180LLU,1LLU),_21285283d_Range16(8182LLU,8188LLU,1LLU),_21285283d_Range16(8305LLU,8319LLU,14LLU),_21285283d_Range16(8336LLU,8348LLU,1LLU),_21285283d_Range16(8450LLU,8455LLU,5LLU),_21285283d_Range16(8458LLU,8467LLU,1LLU),_21285283d_Range16(8469LLU,8473LLU,4LLU),_21285283d_Range16(8474LLU,8477LLU,1LLU),_21285283d_Range16(8484LLU,8490LLU,2LLU),_21285283d_Range16(8491LLU,8493LLU,1LLU),_21285283d_Range16(8495LLU,8505LLU,1LLU),_21285283d_Range16(8508LLU,8511LLU,1LLU),_21285283d_Range16(8517LLU,8521LLU,1LLU),_21285283d_Range16(8526LLU,8579LLU,53LLU),_21285283d_Range16(8580LLU,11264LLU,2684LLU),_21285283d_Range16(11265LLU,11492LLU,1LLU),_21285283d_Range16(11499LLU,11502LLU,1LLU),_21285283d_Range16(11506LLU,11507LLU,1LLU),_21285283d_Range16(11520LLU,11557LLU,1LLU),_21285283d_Range16(11559LLU,11565LLU,6LLU),_21285283d_Range16(11568LLU,11623LLU,1LLU),_21285283d_Range16(11631LLU,11648LLU,17LLU),_21285283d_Range16(11649LLU,11670LLU,1LLU),_21285283d_Range16(11680LLU,11686LLU,1LLU),_21285283d_Range16(11688LLU,11694LLU,1LLU),_21285283d_Range16(11696LLU,11702LLU,1LLU),_21285283d_Range16(11704LLU,11710LLU,1LLU),_21285283d_Range16(11712LLU,11718LLU,1LLU),_21285283d_Range16(11720LLU,11726LLU,1LLU),_21285283d_Range16(11728LLU,11734LLU,1LLU),_21285283d_Range16(11736LLU,11742LLU,1LLU),_21285283d_Range16(11823LLU,12293LLU,470LLU),_21285283d_Range16(12294LLU,12337LLU,43LLU),_21285283d_Range16(12338LLU,12341LLU,1LLU),_21285283d_Range16(12347LLU,12348LLU,1LLU),_21285283d_Range16(12353LLU,12438LLU,1LLU),_21285283d_Range16(12445LLU,12447LLU,1LLU),_21285283d_Range16(12449LLU,12538LLU,1LLU),_21285283d_Range16(12540LLU,12543LLU,1LLU),_21285283d_Range16(12549LLU,12591LLU,1LLU),_21285283d_Range16(12593LLU,12686LLU,1LLU),_21285283d_Range16(12704LLU,12735LLU,1LLU),_21285283d_Range16(12784LLU,12799LLU,1LLU),_21285283d_Range16(13312LLU,19903LLU,1LLU),_21285283d_Range16(19968LLU,42124LLU,1LLU),_21285283d_Range16(42192LLU,42237LLU,1LLU),_21285283d_Range16(42240LLU,42508LLU,1LLU),_21285283d_Range16(42512LLU,42527LLU,1LLU),_21285283d_Range16(42538LLU,42539LLU,1LLU),_21285283d_Range16(42560LLU,42606LLU,1LLU),_21285283d_Range16(42623LLU,42653LLU,1LLU),_21285283d_Range16(42656LLU,42725LLU,1LLU),_21285283d_Range16(42775LLU,42783LLU,1LLU),_21285283d_Range16(42786LLU,42888LLU,1LLU),_21285283d_Range16(42891LLU,42954LLU,1LLU),_21285283d_Range16(42960LLU,42961LLU,1LLU),_21285283d_Range16(42963LLU,42965LLU,2LLU),_21285283d_Range16(42966LLU,42969LLU,1LLU),_21285283d_Range16(42994LLU,43009LLU,1LLU),_21285283d_Range16(43011LLU,43013LLU,1LLU),_21285283d_Range16(43015LLU,43018LLU,1LLU),_21285283d_Range16(43020LLU,43042LLU,1LLU),_21285283d_Range16(43072LLU,43123LLU,1LLU),_21285283d_Range16(43138LLU,43187LLU,1LLU),_21285283d_Range16(43250LLU,43255LLU,1LLU),_21285283d_Range16(43259LLU,43261LLU,2LLU),_21285283d_Range16(43262LLU,43274LLU,12LLU),_21285283d_Range16(43275LLU,43301LLU,1LLU),_21285283d_Range16(43312LLU,43334LLU,1LLU),_21285283d_Range16(43360LLU,43388LLU,1LLU),_21285283d_Range16(43396LLU,43442LLU,1LLU),_21285283d_Range16(43471LLU,43488LLU,17LLU),_21285283d_Range16(43489LLU,43492LLU,1LLU),_21285283d_Range16(43494LLU,43503LLU,1LLU),_21285283d_Range16(43514LLU,43518LLU,1LLU),_21285283d_Range16(43520LLU,43560LLU,1LLU),_21285283d_Range16(43584LLU,43586LLU,1LLU),_21285283d_Range16(43588LLU,43595LLU,1LLU),_21285283d_Range16(43616LLU,43638LLU,1LLU),_21285283d_Range16(43642LLU,43646LLU,4LLU),_21285283d_Range16(43647LLU,43695LLU,1LLU),_21285283d_Range16(43697LLU,43701LLU,4LLU),_21285283d_Range16(43702LLU,43705LLU,3LLU),_21285283d_Range16(43706LLU,43709LLU,1LLU),_21285283d_Range16(43712LLU,43714LLU,2LLU),_21285283d_Range16(43739LLU,43741LLU,1LLU),_21285283d_Range16(43744LLU,43754LLU,1LLU),_21285283d_Range16(43762LLU,43764LLU,1LLU),_21285283d_Range16(43777LLU,43782LLU,1LLU),_21285283d_Range16(43785LLU,43790LLU,1LLU),_21285283d_Range16(43793LLU,43798LLU,1LLU),_21285283d_Range16(43808LLU,43814LLU,1LLU),_21285283d_Range16(43816LLU,43822LLU,1LLU),_21285283d_Range16(43824LLU,43866LLU,1LLU),_21285283d_Range16(43868LLU,43881LLU,1LLU),_21285283d_Range16(43888LLU,44002LLU,1LLU),_21285283d_Range16(44032LLU,55203LLU,1LLU),_21285283d_Range16(55216LLU,55238LLU,1LLU),_21285283d_Range16(55243LLU,55291LLU,1LLU),_21285283d_Range16(63744LLU,64109LLU,1LLU),_21285283d_Range16(64112LLU,64217LLU,1LLU),_21285283d_Range16(64256LLU,64262LLU,1LLU),_21285283d_Range16(64275LLU,64279LLU,1LLU),_21285283d_Range16(64285LLU,64287LLU,2LLU),_21285283d_Range16(64288LLU,64296LLU,1LLU),_21285283d_Range16(64298LLU,64310LLU,1LLU),_21285283d_Range16(64312LLU,64316LLU,1LLU),_21285283d_Range16(64318LLU,64320LLU,2LLU),_21285283d_Range16(64321LLU,64323LLU,2LLU),_21285283d_Range16(64324LLU,64326LLU,2LLU),_21285283d_Range16(64327LLU,64433LLU,1LLU),_21285283d_Range16(64467LLU,64829LLU,1LLU),_21285283d_Range16(64848LLU,64911LLU,1LLU),_21285283d_Range16(64914LLU,64967LLU,1LLU),_21285283d_Range16(65008LLU,65019LLU,1LLU),_21285283d_Range16(65136LLU,65140LLU,1LLU),_21285283d_Range16(65142LLU,65276LLU,1LLU),_21285283d_Range16(65313LLU,65338LLU,1LLU),_21285283d_Range16(65345LLU,65370LLU,1LLU),_21285283d_Range16(65382LLU,65470LLU,1LLU),_21285283d_Range16(65474LLU,65479LLU,1LLU),_21285283d_Range16(65482LLU,65487LLU,1LLU),_21285283d_Range16(65490LLU,65495LLU,1LLU),_21285283d_Range16(65498LLU,65500LLU,1LLU)}),jule::Slice<_2128531bd_Range32>({_2128531bd_Range32(65536LLU,65547LLU,1LLU),_2128531bd_Range32(65549LLU,65574LLU,1LLU),_2128531bd_Range32(65576LLU,65594LLU,1LLU),_2128531bd_Range32(65596LLU,65597LLU,1LLU),_2128531bd_Range32(65599LLU,65613LLU,1LLU),_2128531bd_Range32(65616LLU,65629LLU,1LLU),_2128531bd_Range32(65664LLU,65786LLU,1LLU),_2128531bd_Range32(66176LLU,66204LLU,1LLU),_2128531bd_Range32(66208LLU,66256LLU,1LLU),_2128531bd_Range32(66304LLU,66335LLU,1LLU),_2128531bd_Range32(66349LLU,66368LLU,1LLU),_2128531bd_Range32(66370LLU,66377LLU,1LLU),_2128531bd_Range32(66384LLU,66421LLU,1LLU),_2128531bd_Range32(66432LLU,66461LLU,1LLU),_2128531bd_Range32(66464LLU,66499LLU,1LLU),_2128531bd_Range32(66504LLU,66511LLU,1LLU),_2128531bd_Range32(66560LLU,66717LLU,1LLU),_2128531bd_Range32(66736LLU,66771LLU,1LLU),_2128531bd_Range32(66776LLU,66811LLU,1LLU),_2128531bd_Range32(66816LLU,66855LLU,1LLU),_2128531bd_Range32(66864LLU,66915LLU,1LLU),_2128531bd_Range32(66928LLU,66938LLU,1LLU),_2128531bd_Range32(66940LLU,66954LLU,1LLU),_2128531bd_Range32(66956LLU,66962LLU,1LLU),_2128531bd_Range32(66964LLU,66965LLU,1LLU),_2128531bd_Range32(66967LLU,66977LLU,1LLU),_2128531bd_Range32(66979LLU,66993LLU,1LLU),_2128531bd_Range32(66995LLU,67001LLU,1LLU),_2128531bd_Range32(67003LLU,67004LLU,1LLU),_2128531bd_Range32(67072LLU,67382LLU,1LLU),_2128531bd_Range32(67392LLU,67413LLU,1LLU),_2128531bd_Range32(67424LLU,67431LLU,1LLU),_2128531bd_Range32(67456LLU,67461LLU,1LLU),_2128531bd_Range32(67463LLU,67504LLU,1LLU),_2128531bd_Range32(67506LLU,67514LLU,1LLU),_2128531bd_Range32(67584LLU,67589LLU,1LLU),_2128531bd_Range32(67592LLU,67594LLU,2LLU),_2128531bd_Range32(67595LLU,67637LLU,1LLU),_2128531bd_Range32(67639LLU,67640LLU,1LLU),_2128531bd_Range32(67644LLU,67647LLU,3LLU),_2128531bd_Range32(67648LLU,67669LLU,1LLU),_2128531bd_Range32(67680LLU,67702LLU,1LLU),_2128531bd_Range32(67712LLU,67742LLU,1LLU),_2128531bd_Range32(67808LLU,67826LLU,1LLU),_2128531bd_Range32(67828LLU,67829LLU,1LLU),_2128531bd_Range32(67840LLU,67861LLU,1LLU),_2128531bd_Range32(67872LLU,67897LLU,1LLU),_2128531bd_Range32(67968LLU,68023LLU,1LLU),_2128531bd_Range32(68030LLU,68031LLU,1LLU),_2128531bd_Range32(68096LLU,68112LLU,16LLU),_2128531bd_Range32(68113LLU,68115LLU,1LLU),_2128531bd_Range32(68117LLU,68119LLU,1LLU),_2128531bd_Range32(68121LLU,68149LLU,1LLU),_2128531bd_Range32(68192LLU,68220LLU,1LLU),_2128531bd_Range32(68224LLU,68252LLU,1LLU),_2128531bd_Range32(68288LLU,68295LLU,1LLU),_2128531bd_Range32(68297LLU,68324LLU,1LLU),_2128531bd_Range32(68352LLU,68405LLU,1LLU),_2128531bd_Range32(68416LLU,68437LLU,1LLU),_2128531bd_Range32(68448LLU,68466LLU,1LLU),_2128531bd_Range32(68480LLU,68497LLU,1LLU),_2128531bd_Range32(68608LLU,68680LLU,1LLU),_2128531bd_Range32(68736LLU,68786LLU,1LLU),_2128531bd_Range32(68800LLU,68850LLU,1LLU),_2128531bd_Range32(68864LLU,68899LLU,1LLU),_2128531bd_Range32(69248LLU,69289LLU,1LLU),_2128531bd_Range32(69296LLU,69297LLU,1LLU),_2128531bd_Range32(69376LLU,69404LLU,1LLU),_2128531bd_Range32(69415LLU,69424LLU,9LLU),_2128531bd_Range32(69425LLU,69445LLU,1LLU),_2128531bd_Range32(69488LLU,69505LLU,1LLU),_2128531bd_Range32(69552LLU,69572LLU,1LLU),_2128531bd_Range32(69600LLU,69622LLU,1LLU),_2128531bd_Range32(69635LLU,69687LLU,1LLU),_2128531bd_Range32(69745LLU,69746LLU,1LLU),_2128531bd_Range32(69749LLU,69763LLU,14LLU),_2128531bd_Range32(69764LLU,69807LLU,1LLU),_2128531bd_Range32(69840LLU,69864LLU,1LLU),_2128531bd_Range32(69891LLU,69926LLU,1LLU),_2128531bd_Range32(69956LLU,69959LLU,3LLU),_2128531bd_Range32(69968LLU,70002LLU,1LLU),_2128531bd_Range32(70006LLU,70019LLU,13LLU),_2128531bd_Range32(70020LLU,70066LLU,1LLU),_2128531bd_Range32(70081LLU,70084LLU,1LLU),_2128531bd_Range32(70106LLU,70108LLU,2LLU),_2128531bd_Range32(70144LLU,70161LLU,1LLU),_2128531bd_Range32(70163LLU,70187LLU,1LLU),_2128531bd_Range32(70207LLU,70208LLU,1LLU),_2128531bd_Range32(70272LLU,70278LLU,1LLU),_2128531bd_Range32(70280LLU,70282LLU,2LLU),_2128531bd_Range32(70283LLU,70285LLU,1LLU),_2128531bd_Range32(70287LLU,70301LLU,1LLU),_2128531bd_Range32(70303LLU,70312LLU,1LLU),_2128531bd_Range32(70320LLU,70366LLU,1LLU),_2128531bd_Range32(70405LLU,70412LLU,1LLU),_2128531bd_Range32(70415LLU,70416LLU,1LLU),_2128531bd_Range32(70419LLU,70440LLU,1LLU),_2128531bd_Range32(70442LLU,70448LLU,1LLU),_2128531bd_Range32(70450LLU,70451LLU,1LLU),_2128531bd_Range32(70453LLU,70457LLU,1LLU),_2128531bd_Range32(70461LLU,70480LLU,19LLU),_2128531bd_Range32(70493LLU,70497LLU,1LLU),_2128531bd_Range32(70656LLU,70708LLU,1LLU),_2128531bd_Range32(70727LLU,70730LLU,1LLU),_2128531bd_Range32(70751LLU,70753LLU,1LLU),_2128531bd_Range32(70784LLU,70831LLU,1LLU),_2128531bd_Range32(70852LLU,70853LLU,1LLU),_2128531bd_Range32(70855LLU,71040LLU,185LLU),_2128531bd_Range32(71041LLU,71086LLU,1LLU),_2128531bd_Range32(71128LLU,71131LLU,1LLU),_2128531bd_Range32(71168LLU,71215LLU,1LLU),_2128531bd_Range32(71236LLU,71296LLU,60LLU),_2128531bd_Range32(71297LLU,71338LLU,1LLU),_2128531bd_Range32(71352LLU,71424LLU,72LLU),_2128531bd_Range32(71425LLU,71450LLU,1LLU),_2128531bd_Range32(71488LLU,71494LLU,1LLU),_2128531bd_Range32(71680LLU,71723LLU,1LLU),_2128531bd_Range32(71840LLU,71903LLU,1LLU),_2128531bd_Range32(71935LLU,71942LLU,1LLU),_2128531bd_Range32(71945LLU,71948LLU,3LLU),_2128531bd_Range32(71949LLU,71955LLU,1LLU),_2128531bd_Range32(71957LLU,71958LLU,1LLU),_2128531bd_Range32(71960LLU,71983LLU,1LLU),_2128531bd_Range32(71999LLU,72001LLU,2LLU),_2128531bd_Range32(72096LLU,72103LLU,1LLU),_2128531bd_Range32(72106LLU,72144LLU,1LLU),_2128531bd_Range32(72161LLU,72163LLU,2LLU),_2128531bd_Range32(72192LLU,72203LLU,11LLU),_2128531bd_Range32(72204LLU,72242LLU,1LLU),_2128531bd_Range32(72250LLU,72272LLU,22LLU),_2128531bd_Range32(72284LLU,72329LLU,1LLU),_2128531bd_Range32(72349LLU,72368LLU,19LLU),_2128531bd_Range32(72369LLU,72440LLU,1LLU),_2128531bd_Range32(72704LLU,72712LLU,1LLU),_2128531bd_Range32(72714LLU,72750LLU,1LLU),_2128531bd_Range32(72768LLU,72818LLU,50LLU),_2128531bd_Range32(72819LLU,72847LLU,1LLU),_2128531bd_Range32(72960LLU,72966LLU,1LLU),_2128531bd_Range32(72968LLU,72969LLU,1LLU),_2128531bd_Range32(72971LLU,73008LLU,1LLU),_2128531bd_Range32(73030LLU,73056LLU,26LLU),_2128531bd_Range32(73057LLU,73061LLU,1LLU),_2128531bd_Range32(73063LLU,73064LLU,1LLU),_2128531bd_Range32(73066LLU,73097LLU,1LLU),_2128531bd_Range32(73112LLU,73440LLU,328LLU),_2128531bd_Range32(73441LLU,73458LLU,1LLU),_2128531bd_Range32(73474LLU,73476LLU,2LLU),_2128531bd_Range32(73477LLU,73488LLU,1LLU),_2128531bd_Range32(73490LLU,73523LLU,1LLU),_2128531bd_Range32(73648LLU,73728LLU,80LLU),_2128531bd_Range32(73729LLU,74649LLU,1LLU),_2128531bd_Range32(74880LLU,75075LLU,1LLU),_2128531bd_Range32(77712LLU,77808LLU,1LLU),_2128531bd_Range32(77824LLU,78895LLU,1LLU),_2128531bd_Range32(78913LLU,78918LLU,1LLU),_2128531bd_Range32(82944LLU,83526LLU,1LLU),_2128531bd_Range32(92160LLU,92728LLU,1LLU),_2128531bd_Range32(92736LLU,92766LLU,1LLU),_2128531bd_Range32(92784LLU,92862LLU,1LLU),_2128531bd_Range32(92880LLU,92909LLU,1LLU),_2128531bd_Range32(92928LLU,92975LLU,1LLU),_2128531bd_Range32(92992LLU,92995LLU,1LLU),_2128531bd_Range32(93027LLU,93047LLU,1LLU),_2128531bd_Range32(93053LLU,93071LLU,1LLU),_2128531bd_Range32(93760LLU,93823LLU,1LLU),_2128531bd_Range32(93952LLU,94026LLU,1LLU),_2128531bd_Range32(94032LLU,94099LLU,67LLU),_2128531bd_Range32(94100LLU,94111LLU,1LLU),_2128531bd_Range32(94176LLU,94177LLU,1LLU),_2128531bd_Range32(94179LLU,94208LLU,29LLU),_2128531bd_Range32(94209LLU,100343LLU,1LLU),_2128531bd_Range32(100352LLU,101589LLU,1LLU),_2128531bd_Range32(101632LLU,101640LLU,1LLU),_2128531bd_Range32(110576LLU,110579LLU,1LLU),_2128531bd_Range32(110581LLU,110587LLU,1LLU),_2128531bd_Range32(110589LLU,110590LLU,1LLU),_2128531bd_Range32(110592LLU,110882LLU,1LLU),_2128531bd_Range32(110898LLU,110928LLU,30LLU),_2128531bd_Range32(110929LLU,110930LLU,1LLU),_2128531bd_Range32(110933LLU,110948LLU,15LLU),_2128531bd_Range32(110949LLU,110951LLU,1LLU),_2128531bd_Range32(110960LLU,111355LLU,1LLU),_2128531bd_Range32(113664LLU,113770LLU,1LLU),_2128531bd_Range32(113776LLU,113788LLU,1LLU),_2128531bd_Range32(113792LLU,113800LLU,1LLU),_2128531bd_Range32(113808LLU,113817LLU,1LLU),_2128531bd_Range32(119808LLU,119892LLU,1LLU),_2128531bd_Range32(119894LLU,119964LLU,1LLU),_2128531bd_Range32(119966LLU,119967LLU,1LLU),_2128531bd_Range32(119970LLU,119973LLU,3LLU),_2128531bd_Range32(119974LLU,119977LLU,3LLU),_2128531bd_Range32(119978LLU,119980LLU,1LLU),_2128531bd_Range32(119982LLU,119993LLU,1LLU),_2128531bd_Range32(119995LLU,119997LLU,2LLU),_2128531bd_Range32(119998LLU,120003LLU,1LLU),_2128531bd_Range32(120005LLU,120069LLU,1LLU),_2128531bd_Range32(120071LLU,120074LLU,1LLU),_2128531bd_Range32(120077LLU,120084LLU,1LLU),_2128531bd_Range32(120086LLU,120092LLU,1LLU),_2128531bd_Range32(120094LLU,120121LLU,1LLU),_2128531bd_Range32(120123LLU,120126LLU,1LLU),_2128531bd_Range32(120128LLU,120132LLU,1LLU),_2128531bd_Range32(120134LLU,120138LLU,4LLU),_2128531bd_Range32(120139LLU,120144LLU,1LLU),_2128531bd_Range32(120146LLU,120485LLU,1LLU),_2128531bd_Range32(120488LLU,120512LLU,1LLU),_2128531bd_Range32(120514LLU,120538LLU,1LLU),_2128531bd_Range32(120540LLU,120570LLU,1LLU),_2128531bd_Range32(120572LLU,120596LLU,1LLU),_2128531bd_Range32(120598LLU,120628LLU,1LLU),_2128531bd_Range32(120630LLU,120654LLU,1LLU),_2128531bd_Range32(120656LLU,120686LLU,1LLU),_2128531bd_Range32(120688LLU,120712LLU,1LLU),_2128531bd_Range32(120714LLU,120744LLU,1LLU),_2128531bd_Range32(120746LLU,120770LLU,1LLU),_2128531bd_Range32(120772LLU,120779LLU,1LLU),_2128531bd_Range32(122624LLU,122654LLU,1LLU),_2128531bd_Range32(122661LLU,122666LLU,1LLU),_2128531bd_Range32(122928LLU,122989LLU,1LLU),_2128531bd_Range32(123136LLU,123180LLU,1LLU),_2128531bd_Range32(123191LLU,123197LLU,1LLU),_2128531bd_Range32(123214LLU,123536LLU,322LLU),_2128531bd_Range32(123537LLU,123565LLU,1LLU),_2128531bd_Range32(123584LLU,123627LLU,1LLU),_2128531bd_Range32(124112LLU,124139LLU,1LLU),_2128531bd_Range32(124896LLU,124902LLU,1LLU),_2128531bd_Range32(124904LLU,124907LLU,1LLU),_2128531bd_Range32(124909LLU,124910LLU,1LLU),_2128531bd_Range32(124912LLU,124926LLU,1LLU),_2128531bd_Range32(124928LLU,125124LLU,1LLU),_2128531bd_Range32(125184LLU,125251LLU,1LLU),_2128531bd_Range32(125259LLU,126464LLU,1205LLU),_2128531bd_Range32(126465LLU,126467LLU,1LLU),_2128531bd_Range32(126469LLU,126495LLU,1LLU),_2128531bd_Range32(126497LLU,126498LLU,1LLU),_2128531bd_Range32(126500LLU,126503LLU,3LLU),_2128531bd_Range32(126505LLU,126514LLU,1LLU),_2128531bd_Range32(126516LLU,126519LLU,1LLU),_2128531bd_Range32(126521LLU,126523LLU,2LLU),_2128531bd_Range32(126530LLU,126535LLU,5LLU),_2128531bd_Range32(126537LLU,126541LLU,2LLU),_2128531bd_Range32(126542LLU,126543LLU,1LLU),_2128531bd_Range32(126545LLU,126546LLU,1LLU),_2128531bd_Range32(126548LLU,126551LLU,3LLU),_2128531bd_Range32(126553LLU,126561LLU,2LLU),_2128531bd_Range32(126562LLU,126564LLU,2LLU),_2128531bd_Range32(126567LLU,126570LLU,1LLU),_2128531bd_Range32(126572LLU,126578LLU,1LLU),_2128531bd_Range32(126580LLU,126583LLU,1LLU),_2128531bd_Range32(126585LLU,126588LLU,1LLU),_2128531bd_Range32(126590LLU,126592LLU,2LLU),_2128531bd_Range32(126593LLU,126601LLU,1LLU),_2128531bd_Range32(126603LLU,126619LLU,1LLU),_2128531bd_Range32(126625LLU,126627LLU,1LLU),_2128531bd_Range32(126629LLU,126633LLU,1LLU),_2128531bd_Range32(126635LLU,126651LLU,1LLU),_2128531bd_Range32(131072LLU,173791LLU,1LLU),_2128531bd_Range32(173824LLU,177977LLU,1LLU),_2128531bd_Range32(177984LLU,178205LLU,1LLU),_2128531bd_Range32(178208LLU,183969LLU,1LLU),_2128531bd_Range32(183984LLU,191456LLU,1LLU),_2128531bd_Range32(194560LLU,195101LLU,1LLU),_2128531bd_Range32(196608LLU,201546LLU,1LLU),_2128531bd_Range32(201552LLU,205743LLU,1LLU)}),6LL));
	_21280d2bb_LETTER = _21280852a__L;
	_21284c34e__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});
	_2128650ae_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
	_21286cb66_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
	_21286e23e_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
	_2128843db_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
	_21288463e_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
	_21289b502_PATH_STDLIB = jule::Str();
	_212891a9c_PATH_EXEC = jule::Str();
	_212890419_PATH_WD = jule::Str();
	_2128b235e_PATH_API = jule::Str();
	_212893c25_OS = jule::Str("windows", 7);
	_2128b0c97_ARCH = jule::Str("amd64", 5);
	_212a2d211_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
	_212a2d354_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
	_212a2d497_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
	_212a2d72d_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
	_212a2d882_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
	_212b01856_KEYWORDS = jule::Array<_212b01317_KindPair,47>({_212b01317_KindPair(jule::Str("i8", 2),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("i16", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("i32", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("i64", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("u8", 2),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("u16", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("u32", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("u64", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("f32", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("f64", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("uint", 4),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("int", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("uintptr", 7),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("bool", 4),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("str", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("any", 3),static_cast<jule::U64>(1LLU)),_212b01317_KindPair(jule::Str("true", 4),static_cast<jule::U64>(6LLU)),_212b01317_KindPair(jule::Str("false", 5),static_cast<jule::U64>(6LLU)),_212b01317_KindPair(jule::Str("nil", 3),static_cast<jule::U64>(6LLU)),_212b01317_KindPair(jule::Str("const", 5),static_cast<jule::U64>(9LLU)),_212b01317_KindPair(jule::Str("ret", 3),static_cast<jule::U64>(4LLU)),_212b01317_KindPair(jule::Str("type", 4),static_cast<jule::U64>(10LLU)),_212b01317_KindPair(jule::Str("for", 3),static_cast<jule::U64>(12LLU)),_212b01317_KindPair(jule::Str("break", 5),static_cast<jule::U64>(13LLU)),_212b01317_KindPair(jule::Str("continue", 8),static_cast<jule::U64>(14LLU)),_212b01317_KindPair(jule::Str("in", 2),static_cast<jule::U64>(15LLU)),_212b01317_KindPair(jule::Str("if", 2),static_cast<jule::U64>(16LLU)),_212b01317_KindPair(jule::Str("else", 4),static_cast<jule::U64>(17LLU)),_212b01317_KindPair(jule::Str("use", 3),static_cast<jule::U64>(19LLU)),_212b01317_KindPair(jule::Str("pub", 3),static_cast<jule::U64>(21LLU)),_212b01317_KindPair(jule::Str("goto", 4),static_cast<jule::U64>(22LLU)),_212b01317_KindPair(jule::Str("enum", 4),static_cast<jule::U64>(24LLU)),_212b01317_KindPair(jule::Str("struct", 6),static_cast<jule::U64>(25LLU)),_212b01317_KindPair(jule::Str("co", 2),static_cast<jule::U64>(26LLU)),_212b01317_KindPair(jule::Str("match", 5),static_cast<jule::U64>(27LLU)),_212b01317_KindPair(jule::Str("self", 4),static_cast<jule::U64>(28LLU)),_212b01317_KindPair(jule::Str("trait", 5),static_cast<jule::U64>(29LLU)),_212b01317_KindPair(jule::Str("impl", 4),static_cast<jule::U64>(30LLU)),_212b01317_KindPair(jule::Str("cpp", 3),static_cast<jule::U64>(31LLU)),_212b01317_KindPair(jule::Str("fall", 4),static_cast<jule::U64>(32LLU)),_212b01317_KindPair(jule::Str("fn", 2),static_cast<jule::U64>(33LLU)),_212b01317_KindPair(jule::Str("let", 3),static_cast<jule::U64>(34LLU)),_212b01317_KindPair(jule::Str("unsafe", 6),static_cast<jule::U64>(35LLU)),_212b01317_KindPair(jule::Str("mut", 3),static_cast<jule::U64>(36LLU)),_212b01317_KindPair(jule::Str("defer", 5),static_cast<jule::U64>(37LLU)),_212b01317_KindPair(jule::Str("static", 6),static_cast<jule::U64>(38LLU)),_212b01317_KindPair(jule::Str("error", 5),static_cast<jule::U64>(40LLU))});
	_212b01aa9_BASIC_OPS = jule::Array<_212b01317_KindPair,39>({_212b01317_KindPair(jule::Str("::", 2),static_cast<jule::U64>(23LLU)),_212b01317_KindPair(jule::Str(":", 1),static_cast<jule::U64>(11LLU)),_212b01317_KindPair(jule::Str(";", 1),static_cast<jule::U64>(5LLU)),_212b01317_KindPair(jule::Str(",", 1),static_cast<jule::U64>(8LLU)),_212b01317_KindPair(jule::Str("...", 3),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str(".", 1),static_cast<jule::U64>(20LLU)),_212b01317_KindPair(jule::Str("+=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("-=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("*=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("/=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("%=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("<<=", 3),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str(">>=", 3),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("^=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("&=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("|=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("==", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("!=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str(">=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("<=", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("&&", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("||", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("<<", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str(">>", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("++", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("--", 2),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("+", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("-", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("*", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("/", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("%", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("&", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("|", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("^", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("!", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("<", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str(">", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("=", 1),static_cast<jule::U64>(7LLU)),_212b01317_KindPair(jule::Str("#", 1),static_cast<jule::U64>(39LLU))});
	_1ce427ee6_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
	_1ce4282d2_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
	_1cde447e3_F32_INFO = _1ce045d56_FloatInfo(23LLU,8LLU,-127LL);
	_1cde619db_F64_INFO = _1ce045d56_FloatInfo(52LLU,11LLU,-1023LL);
	_1ce1c824c_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
	_1ce0dac31_POWTAB = jule::Slice<jule::I64>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
	_1ce235809_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
	_1ce25a0e2_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
	_1ce27a321_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
	_1cddb9119_LEFTCHEATS = jule::Slice<_1ce0e76ee_LeftCheat>({_1ce0e76ee_LeftCheat(0LL,jule::Str()),_1ce0e76ee_LeftCheat(1LL,jule::Str("5", 1)),_1ce0e76ee_LeftCheat(1LL,jule::Str("25", 2)),_1ce0e76ee_LeftCheat(1LL,jule::Str("125", 3)),_1ce0e76ee_LeftCheat(2LL,jule::Str("625", 3)),_1ce0e76ee_LeftCheat(2LL,jule::Str("3125", 4)),_1ce0e76ee_LeftCheat(2LL,jule::Str("15625", 5)),_1ce0e76ee_LeftCheat(3LL,jule::Str("78125", 5)),_1ce0e76ee_LeftCheat(3LL,jule::Str("390625", 6)),_1ce0e76ee_LeftCheat(3LL,jule::Str("1953125", 7)),_1ce0e76ee_LeftCheat(4LL,jule::Str("9765625", 7)),_1ce0e76ee_LeftCheat(4LL,jule::Str("48828125", 8)),_1ce0e76ee_LeftCheat(4LL,jule::Str("244140625", 9)),_1ce0e76ee_LeftCheat(4LL,jule::Str("1220703125", 10)),_1ce0e76ee_LeftCheat(5LL,jule::Str("6103515625", 10)),_1ce0e76ee_LeftCheat(5LL,jule::Str("30517578125", 11)),_1ce0e76ee_LeftCheat(5LL,jule::Str("152587890625", 12)),_1ce0e76ee_LeftCheat(6LL,jule::Str("762939453125", 12)),_1ce0e76ee_LeftCheat(6LL,jule::Str("3814697265625", 13)),_1ce0e76ee_LeftCheat(6LL,jule::Str("19073486328125", 14)),_1ce0e76ee_LeftCheat(7LL,jule::Str("95367431640625", 14)),_1ce0e76ee_LeftCheat(7LL,jule::Str("476837158203125", 15)),_1ce0e76ee_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_1ce0e76ee_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_1ce0e76ee_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_1ce0e76ee_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_1ce0e76ee_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_1ce0e76ee_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_1ce0e76ee_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_1ce0e76ee_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_1ce0e76ee_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_1ce0e76ee_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_1ce0e76ee_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_1ce0e76ee_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_1ce0e76ee_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_1ce0e76ee_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_1ce0e76ee_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_1ce0e76ee_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_1ce0e76ee_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_1ce0e76ee_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_1ce0e76ee_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_1ce0e76ee_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_1ce0e76ee_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_1ce0e76ee_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_1ce0e76ee_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_1ce0e76ee_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_1ce0e76ee_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_1ce0e76ee_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_1ce0e76ee_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_1ce0e76ee_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_1ce0e76ee_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_1ce0e76ee_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_1ce0e76ee_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_1ce0e76ee_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_1ce0e76ee_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_1ce0e76ee_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_1ce0e76ee_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_1ce0e76ee_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_1ce0e76ee_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_1ce0e76ee_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_1ce0e76ee_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
	_1ce672707_BIT_SIZE = 0LL;
	_1ce67284a_SYS_INT = jule::Str();
	_1ce67298d_SYS_UINT = jule::Str();
	_1b54cbe93_deads = nullptr;
	_1b54cc56a_checking = nullptr;
	_1b54cc724_current = jule::Any(nullptr);
	_1b54cc9dd_main_current = jule::Any(nullptr);
	_1b59199c9_MDAYS = jule::Array<jule::U64,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
	_21285a923_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,5>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)}),jule::Array<jule::Str,2>({jule::Str("mod", 3),jule::Str("Module management", 17)})});
	_1b577413b_OUT_DIR = jule::Str("dist", 4);
	_1b5935385_OUT_NAME = jule::Str("ir.cpp", 6);
	_1b5936430_OUT = jule::Str();

	_212895809_init();
	_1ce676d27_init();
	_1b59630d8_init();
}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}