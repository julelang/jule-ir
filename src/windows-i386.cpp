// Auto generated by JuleC.
// JuleC version: jule0.0.10 @master
// Date: 29/3/2024 12.43 (DD/MM/YYYY) (HH.MM) UTC
//
// Recommended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#define __JULE_ENABLE__PRODUCTION


#include "api/jule.hpp"                                   

#include <dirent.h>
#include <cstdio>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>
#include "std/jule/integrated/integrated.hpp"                                   

struct _200009e3c_Reader {};
struct _20000a448_Writer {};
struct _20000ab63_WriterCloser {};
struct _20000b537_Stream {};
struct _1eedbccde_Importer {};
struct _1eee76606_Kind {};
struct _1eee992c7_Lookup {};
struct _2006123bd_CommonFlag {};

struct _2225658d7_accept_range;


struct _208c6d339_FoldPair;


struct _208c6d8cd_CaseRange;


struct _208c6de2d_Range16;


struct _208c6e4c2_Range32;


struct _208c6ea22_RangeTable;


struct _208c7450a_LazyBuff;


struct _2223e8825_DirEntry;


struct _222416139_Directory;


struct _222416733_File;


struct _222424a2c_Status;


struct _208e1cd8a_Cmd;


struct _208de2238_Log;


struct _1e02c1d07_Token;


struct _1e02c7e51_File;


struct _1e02ca67e_KindPair;


struct _1e02d1eb0_Lex;


struct _1e01bcb7b_Ast;


struct _1e0275bbd_NamespaceTypeDecl;


struct _1e0176184_SptrTypeDecl;


struct _1e025099a_SlcTypeDecl;


struct _1e01aebb2_TupleTypeDecl;


struct _1e01c50b2_PtrTypeDecl;


struct _1e0134b15_ArrTypeDecl;


struct _1e0181623_MapTypeDecl;


struct _1e0181843_RetTypeDecl;


struct _1e0181ea3_TupleExpr;


struct _1e02d7328_CastExpr;


struct _1e02dd807_Conditional;


struct _1ed0e56de_FileInfo;


struct _1ed0e590e_PackageInfo;


struct _1ed0e7eb6_Stmt;


struct _1ed0e8967_ScopeParser;


struct _1ed107888_CallData;


struct _1ed1090d7_ExprBuilder;


struct _1ed11a88a_Parser;


struct _1ed12ee54_TypeBuilder;


struct _1ecda7acd_FloatInfo;


struct _1ed45d6e4_DecimalSlice;


struct _1eec7e893_LeftCheat;


struct _1eec80366_Decimal;


struct _1eed1e24b_Const;


struct _2000089b8_FileStream;


struct _20000b900_ByteStream;


struct _20000e4b3_Scanner;


struct _1ee240ddd_Operators;


struct _1ee2449b3_FieldIns;


struct _1ee247620_OperandExprModel;


struct _1ee2485aa_StructArgExprModel;


struct _1ee248a0b_StructLitExprModel;


struct _1ee248de6_AllocStructLitExprModel;


struct _1ee24a458_SliceExprModel;


struct _1ee24ae09_AnonFnExprModel;


struct _1ee24b35a_KeyValPairExprModel;


struct _1ee24b8aa_MapExprModel;


struct _1ee24d626_StructStaticIdentExprModel;


struct _1ee24da55_ArrayExprModel;


struct _1ee24dda7_CommonIdentExprModel;


struct _1ee24e8be_TupleExprModel;


struct _1ee24eda8_BuiltinOutCallExprModel;


struct _1ee250370_BuiltinOutlnCallExprModel;


struct _1ee250738_BuiltinCloneCallExprModel;


struct _1ee250c00_BuiltinNewCallExprModel;


struct _1ee251d44_BuiltinMakeCallExprModel;


struct _1ee25230b_BuiltinAppendCallExprModel;


struct _1ee2527c3_BuiltinErrorCallExprModel;


struct _1ee252b03_SizeofExprModel;


struct _1ee2532a7_AlignofExprModel;


struct _1ee253571_RuneExprModel;


struct _1ee2538d4_IntegratedToStrExprModel;


struct _1ee253d13_BackendEmitExprModel;


struct _1ee254165_FreeExprModel;


struct _1ee255342_RetType;


struct _1ee25a358_ParamIns;


struct _1ee25b4ad_FnIns;


struct _1ee25edda_ReferenceStack;


struct _1ee2659b2_SymbolBuilder;


struct _1eec8a4d6_Impl;


struct _1eed8a5a3_Scope;


struct _1eeda2b92_If;


struct _1eeda2db2_Else;


struct _1eeda30d2_Conditional;


struct _1eeda3302_InfIter;


struct _1eeda3522_WhileIter;


struct _1eeda3742_RangeIter;


struct _1eeda3962_ContSt;


struct _1eeda3b82_BreakSt;


struct _1eeda3da2_Label;


struct _1eeda40c2_GotoSt;


struct _1eeda42e2_Postfix;


struct _1eeda4732_MultiAssign;


struct _1eeda4952_Match;


struct _1eeda4da3_Case;


struct _1eeda50c3_FallSt;


struct _1eeda52e3_RetSt;


struct _1eeda5733_ScopeGoto;


struct _1eeda5953_ScopeChecker;


struct _1eedb8bca_DirectiveChecker;


struct _1eedc3da0_Package;


struct _1eedca071_Sema;


struct _1eede7be8_MissingRetChecker;


struct _1eede9e3c_IterRelation;


struct _1eedebd62_FuncPattern;


struct _1eee37c6b_RangeChecker;


struct _1eee3c842_SymbolTable;


struct _1eee43b89_Data;


struct _1eee44e98_Value;


struct _1eee45be1_Eval;


struct _1eee664e7_UnaryEval;


struct _1eee76b45_TypeKind;


struct _1eee7b4a7_TypeSymbol;


struct _1eee7bead_Prim;


struct _1eee80d19_Sptr;


struct _1eee818ec_Slc;


struct _1eee82568_Tuple;


struct _1eee832d3_Map;


struct _1eee88e21_Arr;


struct _1eee89a04_Ptr;


struct _1eee8c760_Referencer;


struct _1e0131271_CompileInfo;


struct _1e0164716_DirectiveEval;


struct _1ed1dc40c_JuleImporter;


struct _1ed280cca_OrderedDefines;


struct _1ed2ccee2_DefineOrderer;


struct _1ed2dd19a_ScopeDeadCode;


struct _1ed14a546_AnsiEscape;


struct _1ed1edbd2_Logger;


struct _200563819_UnsafeBinopExprModel;


struct _200563ad3_UnsafeIndexingExprModel;


struct _200563e46_PushToSliceExprModel;


struct _200564919_StrInsertBeginExprModel;


struct _200565e6a_ScopeOptimizer;


struct _20056c548_ExprOptimizer;


struct _200575919_Optimizer;


struct _2005d8b9c_AbsTime;


struct _2005d9450_Time;


struct _2005db892_Duration;


struct _20041aeb8_TestCoder;


struct _2004729c0_ScopeCoder;


struct _2005213cb_ExprCoder;


struct _2005845d7_DeriveCoder;


struct _200586496_IdentCoder;


struct _2005bb872_SerializationInfo;


struct _20059b775_TraitHash;


struct _2005e95c5_CustomType;


struct _2005ea142_TypeCoder;


struct _2006127b9_Flag_0;

struct _2006127b9_Flag_1;

struct _2006127b9_Flag_2;

struct _2006127b9_Flag_3;

struct _2006127b9_Flag_4;


struct _200613ba5_FlagSet;


struct _1eec889ac_Enum;


struct _1e02e1de3_StructDecl;


struct _1e02e2443_TraitDecl;


struct _1e02e2993_Impl;


struct _1e029b2ba_IdentTypeDecl;


struct _1e0181a63_Expr;


struct _1e0181c83_UseExpr;


struct _1e01be3a8_Node;


struct _1e0182404_LitExpr;


struct _1e0182624_UnsafeExpr;


struct _1ed116754_AssignInfo;


struct _1e0182844_CoExpr;


struct _1e0182a64_IdentExpr;


struct _1e0182c84_UnaryExpr;


struct _1eeda4512_Assign;


struct _1e0182ea4_VariadicExpr;


struct _1e02812b1_Directive;


struct _1e02d7548_NsSelectionExpr;


struct _1e02d7768_SubIdentExpr;


struct _1e02d7988_BinopExpr;


struct _1eeda5513_ScopeLabel;


struct _1e02d7ba8_FnCallExpr;


struct _1e02d7dc8_FieldExprPair;


struct _1ee23da34_Field;


struct _1eedc08c4_ImportInfo;


struct _1e02d80e8_StructLit;


struct _1ee242032_Struct;


struct _1e02d8318_BraceLit;


struct _1ee24550d_StructIns;


struct _1eedeb24b_Var;


struct _1e02d8538_KeyValPair;


struct _1eee2aa61_TypeCompatibilityChecker;


struct _1eee2c3ae_AssignTypeChecker;


struct _1eee2e180_DynamicTypeAnnotation;


struct _1eee32804_FnCallArgChecker;


struct _1eee35a5a_StructLitChecker;


struct _1ee247bb4_BinopExprModel;


struct _1eee3a5cb_RetTypeChecker;


struct _1ee248115_UnaryExprModel;


struct _1e02d8758_SliceExpr;


struct _1e01821c3_IndexingExpr;


struct _1e02d8deb_SlicingExpr;


struct _1ee249523_CastingExprModel;


struct _1eee68818_BinaryEval;


struct _1eee75baa_TypeAlias;


struct _1ee24a007_FnCallExprModel;


struct _1e02d911b_GenericDecl;


struct _1ee24a9a8_IndexingExprModel;


struct _1e02d933b_LabelSt;


struct _1e02d955b_GotoSt;


struct _1e02d977b_FallSt;


struct _1ee24c009_SlicingExprModel;


struct _1ee24c658_TraitSubIdentExprModel;


struct _1ee24d060_StructSubIdentExprModel;


struct _1e02d999b_AssignLeft;


struct _1eee8d6a6_TypeChecker;


struct _1e02d9bbb_AssignSt;


struct _1e02d9ddb_ScopeTree;


struct _1ee24e58e_CommonSubIdentExprModel;


struct _1ed25d4b1_IR;


struct _1e02da10b_ParamDecl;


struct _1e02da32b_FnDecl;


struct _1e02daea8_VarDecl;


struct _1e02db31b_RetSt;


struct _1e02db816_Iter;


struct _1ee2511b7_BuiltinPanicCallExprModel;


struct _1ee25177d_BuiltinAssertCallExprModel;


struct _1e02dbd88_WhileKind;


struct _200564430_MutSlicingExprModel;


struct _1e02dc4a4_RangeKind;


struct _1e02dc817_BreakSt;


struct _1e02dcb7a_ContSt;


struct _1e02dd087_If;


struct _1e02dd3ea_Else;


struct _1e01c3db3_TypeDecl;


struct _1e02dde01_TypeAliasDecl;


struct _1e02de30d_Case;


struct _1e02de907_MatchCase;


struct _1ee255b8e_Param;


struct _1ee2579b5_Fn;


struct _1e02e009a_UseDecl;


struct _1e02e04a7_EnumItemDecl;


struct _1e02e0d9d_EnumDecl;


struct _2005a036c_ObjectCoder;


struct _1ee261518_Pass;


struct _1e02e160c_FieldDecl;


struct _1eec8627e_Trait;


struct _1eec87d0d_EnumItem;


struct _200616b64_ArgParser;

struct _2225658d7_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();


	_2225658d7_accept_range(jule::U8 __param_lo, jule::U8 __param_hi): _field_lo(__param_lo), _field_hi(__param_hi) {}

	

	_2225658d7_accept_range(void) = default;

	inline bool operator==(_2225658d7_accept_range _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi;
	}

	inline bool operator!=(_2225658d7_accept_range _other) { return !this->operator==(_other); }


};
struct _208c6d339_FoldPair {
	jule::U16 _field_from = jule::U16();
	jule::U16 _field_to = jule::U16();


	_208c6d339_FoldPair(jule::U16 __param_from, jule::U16 __param_to): _field_from(__param_from), _field_to(__param_to) {}

	

	_208c6d339_FoldPair(void) = default;

	inline bool operator==(_208c6d339_FoldPair _other) {
		return 
			this->_field_from == _other._field_from &&
			this->_field_to == _other._field_to;
	}

	inline bool operator!=(_208c6d339_FoldPair _other) { return !this->operator==(_other); }


};
struct _208c6d8cd_CaseRange {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::Array<jule::I32,3> _field_delta = jule::Array<jule::I32,3>();


	_208c6d8cd_CaseRange(jule::U32 __param_lo, jule::U32 __param_hi, jule::Array<jule::I32,3> __param_delta): _field_lo(__param_lo), _field_hi(__param_hi), _field_delta(__param_delta) {}

	

	_208c6d8cd_CaseRange(void) = default;

	inline bool operator==(_208c6d8cd_CaseRange _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_delta == _other._field_delta;
	}

	inline bool operator!=(_208c6d8cd_CaseRange _other) { return !this->operator==(_other); }


};
struct _208c6de2d_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();


	_208c6de2d_Range16(jule::U16 __param_lo, jule::U16 __param_hi, jule::U16 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_208c6de2d_Range16(void) = default;

	inline bool operator==(_208c6de2d_Range16 _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_stride == _other._field_stride;
	}

	inline bool operator!=(_208c6de2d_Range16 _other) { return !this->operator==(_other); }


};
struct _208c6e4c2_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();


	_208c6e4c2_Range32(jule::U32 __param_lo, jule::U32 __param_hi, jule::U32 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_208c6e4c2_Range32(void) = default;

	inline bool operator==(_208c6e4c2_Range32 _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_stride == _other._field_stride;
	}

	inline bool operator!=(_208c6e4c2_Range32 _other) { return !this->operator==(_other); }


};
struct _208c6ea22_RangeTable {
	jule::Slice<_208c6de2d_Range16> _field_r16 = jule::Slice<_208c6de2d_Range16>();
	jule::Slice<_208c6e4c2_Range32> _field_r32 = jule::Slice<_208c6e4c2_Range32>();
	jule::I32 _field_latin_offset = jule::I32();


	_208c6ea22_RangeTable(jule::Slice<_208c6de2d_Range16> __param_r16, jule::Slice<_208c6e4c2_Range32> __param_r32, jule::I32 __param_latin_offset): _field_r16(__param_r16), _field_r32(__param_r32), _field_latin_offset(__param_latin_offset) {}

	

	_208c6ea22_RangeTable(void) = default;

	inline bool operator==(_208c6ea22_RangeTable _other) {
		return 
			this->_field_r16 == _other._field_r16 &&
			this->_field_r32 == _other._field_r32 &&
			this->_field_latin_offset == _other._field_latin_offset;
	}

	inline bool operator!=(_208c6ea22_RangeTable _other) { return !this->operator==(_other); }


};
inline jule::U8 _208c7472a_index(_208c7450a_LazyBuff*,jule::I32);
inline void _208c74890_append(_208c7450a_LazyBuff*,jule::U8);
inline jule::Str _208c74a05_string(_208c7450a_LazyBuff*);
struct _208c7450a_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::I32 _field_w = jule::I32();
	jule::Str _field_vol_and_path = jule::Str();
	jule::I32 _field_vol_len = jule::I32();


	_208c7450a_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::I32 __param_w, jule::Str __param_vol_and_path, jule::I32 __param_vol_len): _field_path(__param_path), _field_buff(__param_buff), _field_w(__param_w), _field_vol_and_path(__param_vol_and_path), _field_vol_len(__param_vol_len) {}

	

	_208c7450a_LazyBuff(void) = default;

	inline bool operator==(_208c7450a_LazyBuff _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_buff == _other._field_buff &&
			this->_field_w == _other._field_w &&
			this->_field_vol_and_path == _other._field_vol_and_path &&
			this->_field_vol_len == _other._field_vol_len;
	}

	inline bool operator!=(_208c7450a_LazyBuff _other) { return !this->operator==(_other); }


};
struct _2223e8825_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_222424a2c_Status> _field_stat = jule::Ptr<_222424a2c_Status>();


	_2223e8825_DirEntry(jule::Str __param_name, jule::Ptr<_222424a2c_Status> __param_stat): _field_name(__param_name), _field_stat(__param_stat) {}

	

	_2223e8825_DirEntry(void) = default;

	inline bool operator==(_2223e8825_DirEntry _other) {
		return 
			this->_field_name == _other._field_name &&
			this->_field_stat == _other._field_stat;
	}

	inline bool operator!=(_2223e8825_DirEntry _other) { return !this->operator==(_other); }


};
inline jule::Exceptional<jule::Slice<jule::Ptr<_2223e8825_DirEntry>>> static__208c7593a_read(jule::Str);
inline jule::VoidExceptional static__208c75aa0_create(jule::Str);
inline jule::VoidExceptional static__208c75c15_remove(jule::Str);
struct _222416139_Directory {
	

	_222416139_Directory(void) = default;

	inline bool operator==(_222416139_Directory _other) { return true; }

	inline bool operator!=(_222416139_Directory _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_222416733_File> static__2223dd93b_new(jule::U32);
inline jule::Exceptional<jule::Ptr<_222416733_File>> static__222419abb_create(jule::Str);
inline jule::Exceptional<jule::Slice<jule::U8>> static__222422563_read(jule::Str);
inline jule::VoidExceptional static__222425ce7_write(jule::Str,jule::Slice<jule::U8>,jule::I32);
inline jule::Exceptional<jule::I32> _2224306c5_seek(_222416733_File*,jule::I32,jule::I32);
inline jule::VoidExceptional _222435543_close(_222416733_File*);
inline jule::Exceptional<jule::Ptr<_222416733_File>> static__2224cb2cb_open(jule::Str,jule::I32,jule::I32);
inline jule::VoidExceptional static__2224db4ea_remove(jule::Str);
inline jule::Exceptional<jule::I32> _2224eb86d_write(_222416733_File*,jule::Slice<jule::U8>);
inline jule::Exceptional<jule::I32> _2225040a1_read(_222416733_File*,jule::Slice<jule::U8>);
struct _222416733_File {
	jule::U32 _field_handle = jule::U32();


	_222416733_File(jule::U32 __param_handle): _field_handle(__param_handle) {}

	

	_222416733_File(void) = default;

	inline bool operator==(_222416733_File _other) {
		return 
			this->_field_handle == _other._field_handle;
	}

	inline bool operator!=(_222416733_File _other) { return !this->operator==(_other); }


};
inline jule::Bool _22243c6d2_is_dir(_222424a2c_Status*);
inline jule::Bool _22244350c_is_reg(_222424a2c_Status*);
inline jule::Exceptional<jule::Ptr<_222424a2c_Status>> static__208c76034_of(jule::Str);
struct _222424a2c_Status {
	jule::U32 _field_mode = jule::U32();
	jule::U32 _field_size = jule::U32();


	_222424a2c_Status(jule::U32 __param_mode, jule::U32 __param_size): _field_mode(__param_mode), _field_size(__param_size) {}

	

	_222424a2c_Status(void) = default;

	inline bool operator==(_222424a2c_Status _other) {
		return 
			this->_field_mode == _other._field_mode &&
			this->_field_size == _other._field_size;
	}

	inline bool operator!=(_222424a2c_Status _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_208e1cd8a_Cmd> static__208e1d2db_new(jule::Str);
inline jule::Exceptional<jule::I32> _208e1d5b6_spawn(_208e1cd8a_Cmd*);
inline jule::Exceptional<jule::I32> _208e33576___spawn(_208e1cd8a_Cmd*);
struct _208e1cd8a_Cmd {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();


	_208e1cd8a_Cmd(jule::Str __param_path, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_env): _field_path(__param_path), _field_args(__param_args), _field_env(__param_env) {}

	

	_208e1cd8a_Cmd(void) = default;

	inline bool operator==(_208e1cd8a_Cmd _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_args == _other._field_args &&
			this->_field_env == _other._field_env;
	}

	inline bool operator!=(_208e1cd8a_Cmd _other) { return !this->operator==(_other); }


};
struct _208de2238_Log {
	jule::I32 _field_kind = 0LL;
	jule::I32 _field_row = jule::I32();
	jule::I32 _field_column = jule::I32();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();


	_208de2238_Log(jule::I32 __param_kind, jule::I32 __param_row, jule::I32 __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion): _field_kind(__param_kind), _field_row(__param_row), _field_column(__param_column), _field_path(__param_path), _field_text(__param_text), _field_line(__param_line), _field_suggestion(__param_suggestion) {}

	

	_208de2238_Log(void) = default;

	inline bool operator==(_208de2238_Log _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_row == _other._field_row &&
			this->_field_column == _other._field_column &&
			this->_field_path == _other._field_path &&
			this->_field_text == _other._field_text &&
			this->_field_line == _other._field_line &&
			this->_field_suggestion == _other._field_suggestion;
	}

	inline bool operator!=(_208de2238_Log _other) { return !this->operator==(_other); }


};
inline jule::U8 _1e02c2258_prec(_1e02c1d07_Token*);
struct _1e02c1d07_Token {
	jule::Ptr<_1e02c7e51_File> _field_file = jule::Ptr<_1e02c7e51_File>();
	jule::I32 _field_row = jule::I32();
	jule::I32 _field_column = jule::I32();
	jule::Str _field_kind = jule::Str();
	jule::U32 _field_id = 0LLU;


	_1e02c1d07_Token(jule::Ptr<_1e02c7e51_File> __param_file, jule::I32 __param_row, jule::I32 __param_column, jule::Str __param_kind, jule::U32 __param_id): _field_file(__param_file), _field_row(__param_row), _field_column(__param_column), _field_kind(__param_kind), _field_id(__param_id) {}

	

	_1e02c1d07_Token(void) = default;

	inline bool operator==(_1e02c1d07_Token _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_row == _other._field_row &&
			this->_field_column == _other._field_column &&
			this->_field_kind == _other._field_kind &&
			this->_field_id == _other._field_id;
	}

	inline bool operator!=(_1e02c1d07_Token _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02c83c4_is_ok(_1e02c7e51_File*);
inline void _1e02c86e3_fill(_1e02c7e51_File*,jule::Slice<jule::U8>);
inline jule::Str _1e02c89bd_dir(_1e02c7e51_File*);
inline jule::Str _1e02c8c98_name(_1e02c7e51_File*);
inline jule::U32 _1e02c9073_addr(_1e02c7e51_File*);
inline jule::Str _1e02c942a_get_row(_1e02c7e51_File*,jule::I32);
struct _1e02c7e51_File {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Slice<_1e02c1d07_Token> _field_tokens = jule::Slice<_1e02c1d07_Token>();


	_1e02c7e51_File(jule::Str __param_path, jule::Slice<jule::U8> __param_data, jule::Slice<_1e02c1d07_Token> __param_tokens): _field_path(__param_path), _field_data(__param_data), _field_tokens(__param_tokens) {}

	

	_1e02c7e51_File(void) = default;

	inline bool operator==(_1e02c7e51_File _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_data == _other._field_data &&
			this->_field_tokens == _other._field_tokens;
	}

	inline bool operator!=(_1e02c7e51_File _other) { return !this->operator==(_other); }


};
struct _1e02ca67e_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::U32 _field_id = 0LLU;


	_1e02ca67e_KindPair(jule::Str __param_kind, jule::U32 __param_id): _field_kind(__param_kind), _field_id(__param_id) {}

	

	_1e02ca67e_KindPair(void) = default;

	inline bool operator==(_1e02ca67e_KindPair _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_id == _other._field_id;
	}

	inline bool operator!=(_1e02ca67e_KindPair _other) { return !this->operator==(_other); }


};
inline void _1e02d2631_push_err(_1e02d1eb0_Lex*,jule::Str,jule::Slice<jule::Any>);
inline void _1e02d2a2c_push_err_tok(_1e02d1eb0_Lex*,_1e02c1d07_Token&,jule::Str);
inline void _1e02d2c6e_lex(_1e02d1eb0_Lex*);
inline jule::Str _1e02d3126_id(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&);
inline jule::Slice<jule::U8> _1e02d3401_resume(_1e02d1eb0_Lex*);
inline void _1e02d3720_lex_line_comment(_1e02d1eb0_Lex*,_1e02c1d07_Token&);
inline void _1e02d3a3e_lex_range_comment(_1e02d1eb0_Lex*,_1e02c1d07_Token&);
inline jule::Str _1e02d3de6_num(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&);
inline jule::Str _1e02d429d_escape_seq(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&);
inline jule::Str _1e02d4732_get_rune(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&,jule::Bool);
inline jule::Str _1e02d4ad9_lex_rune(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&);
inline jule::Str _1e02d4db4_lex_str(_1e02d1eb0_Lex*);
inline jule::Bool _1e02d518e_is_first_token_of_line(_1e02d1eb0_Lex*);
inline void _1e02d53d1_new_line(_1e02d1eb0_Lex*);
inline jule::Bool _1e02d5a1e_is_op(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&,jule::Str,jule::U32,_1e02c1d07_Token&);
inline jule::Bool _1e02d5ea3_lex_basic_ops(_1e02d1eb0_Lex*,jule::Slice<jule::U8>,_1e02c1d07_Token&);
inline jule::Bool _1e02d6437_lex_id(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&,_1e02c1d07_Token&);
inline jule::Bool _1e02d68bb_lex_num(_1e02d1eb0_Lex*,jule::Slice<jule::U8>&,_1e02c1d07_Token&);
inline _1e02c1d07_Token _1e02d6b96_token(_1e02d1eb0_Lex*);
struct _1e02d1eb0_Lex {
	jule::I32 _field_mode = 0LL;
	jule::Slice<_1e02c1d07_Token> _field_tokens = jule::Slice<_1e02c1d07_Token>();
	jule::Ptr<_1e02c7e51_File> _field_file = jule::Ptr<_1e02c7e51_File>();
	jule::I32 _field_pos = jule::I32();
	jule::I32 _field_column = jule::I32();
	jule::I32 _field_row = jule::I32();
	jule::Slice<_208de2238_Log> _field_errors = jule::Slice<_208de2238_Log>();


	_1e02d1eb0_Lex(jule::I32 __param_mode, jule::Slice<_1e02c1d07_Token> __param_tokens, jule::Ptr<_1e02c7e51_File> __param_file, jule::I32 __param_pos, jule::I32 __param_column, jule::I32 __param_row, jule::Slice<_208de2238_Log> __param_errors): _field_mode(__param_mode), _field_tokens(__param_tokens), _field_file(__param_file), _field_pos(__param_pos), _field_column(__param_column), _field_row(__param_row), _field_errors(__param_errors) {}

	

	_1e02d1eb0_Lex(void) = default;

	inline bool operator==(_1e02d1eb0_Lex _other) {
		return 
			this->_field_mode == _other._field_mode &&
			this->_field_tokens == _other._field_tokens &&
			this->_field_file == _other._field_file &&
			this->_field_pos == _other._field_pos &&
			this->_field_column == _other._field_column &&
			this->_field_row == _other._field_row &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_1e02d1eb0_Lex _other) { return !this->operator==(_other); }


};
struct _1e01bcb7b_Ast {
	jule::Ptr<_1e02c7e51_File> _field_file = jule::Ptr<_1e02c7e51_File>();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Slice<jule::Ptr<_1e02e009a_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_1e02e009a_UseDecl>>();
	jule::Slice<_1e01be3a8_Node> _field_nodes = jule::Slice<_1e01be3a8_Node>();


	_1e01bcb7b_Ast(jule::Ptr<_1e02c7e51_File> __param_file, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_top_directives, jule::Slice<jule::Ptr<_1e02e009a_UseDecl>> __param_use_decls, jule::Slice<_1e01be3a8_Node> __param_nodes): _field_file(__param_file), _field_top_directives(__param_top_directives), _field_use_decls(__param_use_decls), _field_nodes(__param_nodes) {}

	

	_1e01bcb7b_Ast(void) = default;

	inline bool operator==(_1e01bcb7b_Ast _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_top_directives == _other._field_top_directives &&
			this->_field_use_decls == _other._field_use_decls &&
			this->_field_nodes == _other._field_nodes;
	}

	inline bool operator!=(_1e01bcb7b_Ast _other) { return !this->operator==(_other); }


};
struct _1e0275bbd_NamespaceTypeDecl {
	jule::Slice<_1e02c1d07_Token> _field_idents = jule::Slice<_1e02c1d07_Token>();
	jule::Ptr<_1e029b2ba_IdentTypeDecl> _field_kind = jule::Ptr<_1e029b2ba_IdentTypeDecl>();


	_1e0275bbd_NamespaceTypeDecl(jule::Slice<_1e02c1d07_Token> __param_idents, jule::Ptr<_1e029b2ba_IdentTypeDecl> __param_kind): _field_idents(__param_idents), _field_kind(__param_kind) {}

	

	_1e0275bbd_NamespaceTypeDecl(void) = default;

	inline bool operator==(_1e0275bbd_NamespaceTypeDecl _other) {
		return 
			this->_field_idents == _other._field_idents &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1e0275bbd_NamespaceTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e0176184_SptrTypeDecl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_elem = jule::Ptr<_1e01c3db3_TypeDecl>();


	_1e0176184_SptrTypeDecl(jule::Ptr<_1e01c3db3_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1e0176184_SptrTypeDecl(void) = default;

	inline bool operator==(_1e0176184_SptrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1e0176184_SptrTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e025099a_SlcTypeDecl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_elem = jule::Ptr<_1e01c3db3_TypeDecl>();


	_1e025099a_SlcTypeDecl(jule::Ptr<_1e01c3db3_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1e025099a_SlcTypeDecl(void) = default;

	inline bool operator==(_1e025099a_SlcTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1e025099a_SlcTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e01aebb2_TupleTypeDecl {
	jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>();


	_1e01aebb2_TupleTypeDecl(jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> __param_types): _field_types(__param_types) {}

	

	_1e01aebb2_TupleTypeDecl(void) = default;

	inline bool operator==(_1e01aebb2_TupleTypeDecl _other) {
		return 
			this->_field_types == _other._field_types;
	}

	inline bool operator!=(_1e01aebb2_TupleTypeDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e029d388_is_unsafe(_1e01c50b2_PtrTypeDecl*);
struct _1e01c50b2_PtrTypeDecl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_elem = jule::Ptr<_1e01c3db3_TypeDecl>();


	_1e01c50b2_PtrTypeDecl(jule::Ptr<_1e01c3db3_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1e01c50b2_PtrTypeDecl(void) = default;

	inline bool operator==(_1e01c50b2_PtrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1e01c50b2_PtrTypeDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02a0a2d_auto_sized(_1e0134b15_ArrTypeDecl*);
struct _1e0134b15_ArrTypeDecl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_elem = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e0181a63_Expr> _field_size = jule::Ptr<_1e0181a63_Expr>();


	_1e0134b15_ArrTypeDecl(jule::Ptr<_1e01c3db3_TypeDecl> __param_elem, jule::Ptr<_1e0181a63_Expr> __param_size): _field_elem(__param_elem), _field_size(__param_size) {}

	

	_1e0134b15_ArrTypeDecl(void) = default;

	inline bool operator==(_1e0134b15_ArrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem &&
			this->_field_size == _other._field_size;
	}

	inline bool operator!=(_1e0134b15_ArrTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e0181623_MapTypeDecl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_key = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_val = jule::Ptr<_1e01c3db3_TypeDecl>();


	_1e0181623_MapTypeDecl(jule::Ptr<_1e01c3db3_TypeDecl> __param_key, jule::Ptr<_1e01c3db3_TypeDecl> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1e0181623_MapTypeDecl(void) = default;

	inline bool operator==(_1e0181623_MapTypeDecl _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_1e0181623_MapTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e0181843_RetTypeDecl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Slice<_1e02c1d07_Token> _field_idents = jule::Slice<_1e02c1d07_Token>();


	_1e0181843_RetTypeDecl(jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Slice<_1e02c1d07_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1e0181843_RetTypeDecl(void) = default;

	inline bool operator==(_1e0181843_RetTypeDecl _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_1e0181843_RetTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e0181ea3_TupleExpr {
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_expr = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();


	_1e0181ea3_TupleExpr(jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_expr): _field_expr(__param_expr) {}

	

	_1e0181ea3_TupleExpr(void) = default;

	inline bool operator==(_1e0181ea3_TupleExpr _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e0181ea3_TupleExpr _other) { return !this->operator==(_other); }


};
struct _1e02d7328_CastExpr {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e02d7328_CastExpr(jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_1e02d7328_CastExpr(void) = default;

	inline bool operator==(_1e02d7328_CastExpr _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e02d7328_CastExpr _other) { return !this->operator==(_other); }


};
struct _1e02dd807_Conditional {
	jule::Ptr<_1e02dd087_If> _field_head = jule::Ptr<_1e02dd087_If>();
	jule::Slice<jule::Ptr<_1e02dd087_If>> _field_tail = jule::Slice<jule::Ptr<_1e02dd087_If>>();
	jule::Ptr<_1e02dd3ea_Else> _field_default = jule::Ptr<_1e02dd3ea_Else>();


	_1e02dd807_Conditional(jule::Ptr<_1e02dd087_If> __param_head, jule::Slice<jule::Ptr<_1e02dd087_If>> __param_tail, jule::Ptr<_1e02dd3ea_Else> __param_default): _field_head(__param_head), _field_tail(__param_tail), _field_default(__param_default) {}

	

	_1e02dd807_Conditional(void) = default;

	inline bool operator==(_1e02dd807_Conditional _other) {
		return 
			this->_field_head == _other._field_head &&
			this->_field_tail == _other._field_tail &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1e02dd807_Conditional _other) { return !this->operator==(_other); }


};
struct _1ed0e56de_FileInfo {
	jule::Ptr<_1e01bcb7b_Ast> _field_ast = jule::Ptr<_1e01bcb7b_Ast>();
	jule::Slice<_208de2238_Log> _field_errors = jule::Slice<_208de2238_Log>();


	_1ed0e56de_FileInfo(jule::Ptr<_1e01bcb7b_Ast> __param_ast, jule::Slice<_208de2238_Log> __param_errors): _field_ast(__param_ast), _field_errors(__param_errors) {}

	

	_1ed0e56de_FileInfo(void) = default;

	inline bool operator==(_1ed0e56de_FileInfo _other) {
		return 
			this->_field_ast == _other._field_ast &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_1ed0e56de_FileInfo _other) { return !this->operator==(_other); }


};
struct _1ed0e590e_PackageInfo {
	jule::Slice<jule::Ptr<_1ed0e56de_FileInfo>> _field_files = jule::Slice<jule::Ptr<_1ed0e56de_FileInfo>>();


	_1ed0e590e_PackageInfo(jule::Slice<jule::Ptr<_1ed0e56de_FileInfo>> __param_files): _field_files(__param_files) {}

	

	_1ed0e590e_PackageInfo(void) = default;

	inline bool operator==(_1ed0e590e_PackageInfo _other) {
		return 
			this->_field_files == _other._field_files;
	}

	inline bool operator!=(_1ed0e590e_PackageInfo _other) { return !this->operator==(_other); }


};
struct _1ed0e7eb6_Stmt {
	jule::Slice<_1e02c1d07_Token> _field_tokens = jule::Slice<_1e02c1d07_Token>();
	jule::Bool _field_terminated = jule::Bool();


	_1ed0e7eb6_Stmt(jule::Slice<_1e02c1d07_Token> __param_tokens, jule::Bool __param_terminated): _field_tokens(__param_tokens), _field_terminated(__param_terminated) {}

	

	_1ed0e7eb6_Stmt(void) = default;

	inline bool operator==(_1ed0e7eb6_Stmt _other) {
		return 
			this->_field_tokens == _other._field_tokens &&
			this->_field_terminated == _other._field_terminated;
	}

	inline bool operator!=(_1ed0e7eb6_Stmt _other) { return !this->operator==(_other); }


};
inline void _1ed0e9160_stop(_1ed0e8967_ScopeParser*);
inline jule::Bool _1ed0e943a_stopped(_1ed0e8967_ScopeParser*);
inline jule::Bool _1ed0e9715_finished(_1ed0e8967_ScopeParser*);
inline jule::Bool _1ed0e99e0_is_last_st(_1ed0e8967_ScopeParser*);
inline void _1ed0e9ddb_push_err(_1ed0e8967_ScopeParser*,_1e02c1d07_Token,jule::Str);
inline void _1ed0ea2d7_push_suggestion(_1ed0e8967_ScopeParser*,jule::Str,jule::Slice<jule::Any>);
inline void _1ed0ea606_insert_as_next(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1ed0e7eb6_Stmt> _1ed0ea8d1_next(_1ed0e8967_ScopeParser*);
inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed0ead65_build_scope(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&,_1e02c1d07_Token);
inline jule::Any _1ed0eb21c_build_var_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed0eb5c4_build_ret_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed0eb97b_build_while_next_iter(_1ed0e8967_ScopeParser*,jule::Ptr<_1ed0e7eb6_Stmt>&);
inline jule::Ptr<_1e02dbd88_WhileKind> _1ed0ebd33_build_while_iter_kind(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed0ec22e_get_range_kind_keys_tokens(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02daea8_VarDecl> _1ed0ec5c5_build_range_kind_key(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> _1ed0ec97c_build_range_kind_keys(_1ed0e8967_ScopeParser*,jule::Slice<jule::Slice<_1e02c1d07_Token>>&);
inline void _1ed0ecdbc_setup_range_kind_keys_plain(_1ed0e8967_ScopeParser*,jule::Ptr<_1e02dc4a4_RangeKind>&,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed0ed2eb_setup_range_kind_keys_explicit(_1ed0e8967_ScopeParser*,jule::Ptr<_1e02dc4a4_RangeKind>&,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed0ed6d6_setup_range_kind_keys(_1ed0e8967_ScopeParser*,jule::Ptr<_1e02dc4a4_RangeKind>&,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02dc4a4_RangeKind> _1ed0edc47_build_range_iter_kind(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&,jule::Slice<_1e02c1d07_Token>&,_1e02c1d07_Token&);
inline jule::Any _1ed0ee1cb_build_common_iter_kind(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&,_1e02c1d07_Token&);
inline jule::Any _1ed0ee583_build_common_iter(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed0ee93a_buid_iter_st(_1ed0e8967_ScopeParser*,jule::Ptr<_1ed0e7eb6_Stmt>&);
inline jule::Any _1ed0eece2_build_break_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed100199_build_cont_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02dd087_If> _1ed100551_build_if(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02dd3ea_Else> _1ed100908_build_else(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed100cb0_build_if_else_chain(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed101167_build_co_call_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed10151e_build_goto_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed1018c6_build_fall_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed101c7d_build_type_alias_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed102333_push_case_expr(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>,_1e02c1d07_Token,jule::Bool,jule::Slice<jule::Ptr<_1e0181a63_Expr>>&);
inline jule::Slice<jule::Ptr<_1e0181a63_Expr>> _1ed1027b7_build_case_exprs(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&,jule::Bool);
inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed102b6e_build_case_scope(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline std::tuple<jule::Ptr<_1e02de30d_Case>,jule::Bool> _1ed103103_build_case(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&,jule::Bool);
inline std::tuple<jule::Slice<jule::Ptr<_1e02de30d_Case>>,jule::Ptr<_1e02dd3ea_Else>> _1ed103587_build_cases(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>,jule::Bool);
inline jule::Ptr<_1e02de907_MatchCase> _1ed10393e_build_match_case(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed103ce6_build_scope_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d933b_LabelSt> _1ed10419d_build_label_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline std::tuple<jule::Any,jule::Bool> _1ed104555_build_id_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1ed116754_AssignInfo> _1ed10490c_build_assign_info(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02d999b_AssignLeft> _1ed104cb4_build_assign_l(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>> _1ed10516b_build_assign_ls(_1ed0e8967_ScopeParser*,jule::Slice<jule::Slice<_1e02c1d07_Token>>&);
inline std::tuple<jule::Ptr<_1e02d9bbb_AssignSt>,jule::Bool> _1ed105523_build_plain_assign(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline std::tuple<jule::Ptr<_1e02d9bbb_AssignSt>,jule::Bool> _1ed1058ca_build_decl_assign(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>);
inline std::tuple<jule::Ptr<_1e02d9bbb_AssignSt>,jule::Bool> _1ed105c82_build_assign_st(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed106139_build_use_expr(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed1064e1_build_st(_1ed0e8967_ScopeParser*,jule::Ptr<_1ed0e7eb6_Stmt>&);
inline void _1ed1068dc_build(_1ed0e8967_ScopeParser*,jule::Slice<_1e02c1d07_Token>&,jule::Ptr<_1e02d9ddb_ScopeTree>&);
struct _1ed0e8967_ScopeParser {
	jule::Ptr<_1ed11a88a_Parser> _field_p = jule::Ptr<_1ed11a88a_Parser>();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_s = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _field_stmts = jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>>();
	jule::I32 _field_pos = jule::I32();


	_1ed0e8967_ScopeParser(jule::Ptr<_1ed11a88a_Parser> __param_p, jule::Ptr<_1e02d9ddb_ScopeTree> __param_s, jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> __param_stmts, jule::I32 __param_pos): _field_p(__param_p), _field_s(__param_s), _field_stmts(__param_stmts), _field_pos(__param_pos) {}

	

	_1ed0e8967_ScopeParser(void) = default;

	inline bool operator==(_1ed0e8967_ScopeParser _other) {
		return 
			this->_field_p == _other._field_p &&
			this->_field_s == _other._field_s &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_pos == _other._field_pos;
	}

	inline bool operator!=(_1ed0e8967_ScopeParser _other) { return !this->operator==(_other); }


};
struct _1ed107888_CallData {
	jule::Slice<_1e02c1d07_Token> _field_expr_tokens = jule::Slice<_1e02c1d07_Token>();
	jule::Slice<_1e02c1d07_Token> _field_args_tokens = jule::Slice<_1e02c1d07_Token>();
	jule::Slice<_1e02c1d07_Token> _field_generics_tokens = jule::Slice<_1e02c1d07_Token>();


	_1ed107888_CallData(jule::Slice<_1e02c1d07_Token> __param_expr_tokens, jule::Slice<_1e02c1d07_Token> __param_args_tokens, jule::Slice<_1e02c1d07_Token> __param_generics_tokens): _field_expr_tokens(__param_expr_tokens), _field_args_tokens(__param_args_tokens), _field_generics_tokens(__param_generics_tokens) {}

	

	_1ed107888_CallData(void) = default;

	inline bool operator==(_1ed107888_CallData _other) {
		return 
			this->_field_expr_tokens == _other._field_expr_tokens &&
			this->_field_args_tokens == _other._field_args_tokens &&
			this->_field_generics_tokens == _other._field_generics_tokens;
	}

	inline bool operator!=(_1ed107888_CallData _other) { return !this->operator==(_other); }


};
inline void _1ed1099de_push_err(_1ed1090d7_ExprBuilder*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1ed109dda_push_suggestion(_1ed1090d7_ExprBuilder*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_1e0181ea3_TupleExpr> _1ed10a292_build_tuple(_1ed1090d7_ExprBuilder*,jule::Slice<jule::Slice<_1e02c1d07_Token>>&);
inline jule::Ptr<_1e0182404_LitExpr> _1ed10a649_build_lit(_1ed1090d7_ExprBuilder*,_1e02c1d07_Token);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed10aa01_build_primitive_type(_1ed1090d7_ExprBuilder*,_1e02c1d07_Token&);
inline jule::Any _1ed10ada8_build_single(_1ed1090d7_ExprBuilder*,_1e02c1d07_Token);
inline jule::Ptr<_1e0182a64_IdentExpr> _1ed10b260_build_cpp_linked_ident(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e0182c84_UnaryExpr> _1ed10b617_build_unary(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d7768_SubIdentExpr> _1ed10b9be_build_obj_sub_ident(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d7548_NsSelectionExpr> _1ed10bd76_build_ns_sub_ident(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed10c22d_build_type(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed10c5d5_build_sub_ident(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e0182ea4_VariadicExpr> _1ed10c98c_build_variadic(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed10cd44_build_op_right(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e0181a63_Expr> _1ed10d240_build_between_parentheses(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d7328_CastExpr> _1ed10d5d6_try_build_cast(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed10daae_push_arg(_1ed1090d7_ExprBuilder*,jule::Slice<jule::Ptr<_1e0181a63_Expr>>&,jule::Slice<_1e02c1d07_Token>,_1e02c1d07_Token);
inline jule::Slice<jule::Ptr<_1e0181a63_Expr>> _1ed10de66_build_args(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _1ed10e31d_build_call_generics(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d7ba8_FnCallExpr> _1ed10e7a2_build_fn_call(_1ed1090d7_ExprBuilder*,_1e02c1d07_Token&,jule::Ptr<_1ed107888_CallData>&);
inline jule::Any _1ed10eb9d_build_parentheses_range(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e0182624_UnsafeExpr> _1ed110044_build_unsafe_expr(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02da32b_FnDecl> _1ed1103eb_build_anon_fn(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed1107a3_build_unsafe(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed110c7b_push_range_lit_part(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>,_1e02c1d07_Token,jule::Slice<jule::Slice<_1e02c1d07_Token>>&);
inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed111177_get_brace_range_lit_expr_parts(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d7dc8_FieldExprPair> _1ed11151d_build_field_expr_pair(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e0181a63_Expr> _1ed1118c5_build_struct_lit_expr(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Ptr<_1e0181a63_Expr>> _1ed111c7c_build_struct_lit_exprs(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02d80e8_StructLit> _1ed112178_build_typed_struct_literal(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e0181a63_Expr> _1ed11251e_build_brace_lit_part(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02d8318_BraceLit> _1ed1128c6_build_brace_lit(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed112c7d_build_brace_range(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed113135_get_enumerable_parts(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d8758_SliceExpr> _1ed1134dc_build_slice(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e01821c3_IndexingExpr> _1ed113a4d_build_indexing(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>,jule::Slice<_1e02c1d07_Token>,_1e02c1d07_Token);
inline jule::Ptr<_1e02d8deb_SlicingExpr> _1ed114268_build_slicing(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&,jule::Slice<_1e02c1d07_Token>&,jule::I32&,_1e02c1d07_Token&,_1e02c1d07_Token);
inline jule::Any _1ed114620_build_bracket_range(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed1149c7_build_data(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02d7988_BinopExpr> _1ed114e5b_build_binop(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&,jule::I32);
inline jule::Any _1ed115313_build(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Any _1ed1156ba_build_kind(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e0181a63_Expr> _1ed115a72_build_from_tokens(_1ed1090d7_ExprBuilder*,jule::Slice<_1e02c1d07_Token>);
struct _1ed1090d7_ExprBuilder {
	jule::Ptr<_1ed11a88a_Parser> _field_p = jule::Ptr<_1ed11a88a_Parser>();


	_1ed1090d7_ExprBuilder(jule::Ptr<_1ed11a88a_Parser> __param_p): _field_p(__param_p) {}

	

	_1ed1090d7_ExprBuilder(void) = default;

	inline bool operator==(_1ed1090d7_ExprBuilder _other) {
		return 
			this->_field_p == _other._field_p;
	}

	inline bool operator!=(_1ed1090d7_ExprBuilder _other) { return !this->operator==(_other); }


};
inline void _1ed11ac31_stop(_1ed11a88a_Parser*);
inline jule::Bool _1ed11b00b_stopped(_1ed11a88a_Parser*);
inline void _1ed11b4d4_push_err(_1ed11a88a_Parser*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1ed11b8d0_push_suggestion(_1ed11a88a_Parser*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_1e0181a63_Expr> _1ed11bc87_build_expr(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02812b1_Directive> _1ed11c13e_build_directive(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>);
inline void _1ed11c45d_push_directive(_1ed11a88a_Parser*,jule::Ptr<_1e02812b1_Directive>);
inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed11c8e2_build_scope(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,_1e02c1d07_Token);
inline std::tuple<jule::Ptr<_1e01c3db3_TypeDecl>,jule::Bool> _1ed11ce53___build_type(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::I32*,jule::Bool);
inline std::tuple<jule::Ptr<_1e01c3db3_TypeDecl>,jule::Bool> _1ed11d4b4_build_type(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::I32*,jule::Bool);
inline jule::Ptr<_1e02dde01_TypeAliasDecl> _1ed11d86b_build_type_alias_decl(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed11dcab_build_var_type_and_expr(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<_1e02daea8_VarDecl>&,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed11e196_build_var_common(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<_1e02daea8_VarDecl>&,jule::Slice<_1e02c1d07_Token>);
inline void _1ed11e66e_build_var_begin(_1ed11a88a_Parser*,jule::Ptr<_1e02daea8_VarDecl>&,jule::Ptr<jule::I32>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02daea8_VarDecl> _1ed11ea26_build_var(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02d911b_GenericDecl> _1ed11edcd_build_generic(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _1ed120362_build_generics(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>&,_1e02c1d07_Token&);
inline jule::Ptr<_1e02da10b_ParamDecl> _1ed120719_build_self_param(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>);
inline void _1ed120be2_param_type_begin(_1ed11a88a_Parser*,jule::Ptr<_1e02da10b_ParamDecl>&,jule::I32&,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed1210dd_build_param_type(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<_1e02da10b_ParamDecl>&,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed1215b6_build_param_body(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<_1e02da10b_ParamDecl>&,jule::Ptr<jule::I32>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02da10b_ParamDecl> _1ed12196d_build_param(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline void _1ed121c8c_check_params(_1ed11a88a_Parser*,jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>>&);
inline jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>> _1ed122221_build_params(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::Bool);
inline std::tuple<jule::Ptr<_1e0181843_RetTypeDecl>,jule::Bool> _1ed1226a5_build_multi_ret_type(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::I32&);
inline std::tuple<jule::Ptr<_1e0181843_RetTypeDecl>,jule::Bool> _1ed122b39_build_ret_type(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::I32&);
inline jule::Ptr<_1e02da32b_FnDecl> _1ed12319a_build_fn_prototype(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::I32&,jule::Bool);
inline jule::Ptr<_1e02da32b_FnDecl> _1ed12370b_build_fn(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&,jule::Bool,jule::Bool);
inline jule::Slice<_1e02c1d07_Token> _1ed123ab3_get_use_decl_selectors(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>);
inline void _1ed123eae_build_cpp_use_decl(_1ed11a88a_Parser*,jule::Ptr<_1e02e009a_UseDecl>&,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed1243aa_build_std_use_decl(_1ed11a88a_Parser*,jule::Ptr<_1e02e009a_UseDecl>&,jule::Slice<_1e02c1d07_Token>);
inline void _1ed1247a6_build_ident_use_decl(_1ed11a88a_Parser*,jule::Ptr<_1e02e009a_UseDecl>&,jule::Slice<_1e02c1d07_Token>);
inline void _1ed124ba2_parse_use_decl(_1ed11a88a_Parser*,jule::Ptr<_1e02e009a_UseDecl>&,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02e009a_UseDecl> _1ed125136_build_use_decl(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>,jule::Bool);
inline jule::Ptr<_1e0181a63_Expr> _1ed1255ba_build_enum_item_expr(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<jule::I32>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>> _1ed125972_build_enum_items(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02e0d9d_EnumDecl> _1ed125d29_build_enum_decl(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02e160c_FieldDecl> _1ed1261d1_build_field(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>> _1ed1265cc_build_struct_decl_fields(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02e1de3_StructDecl> _1ed126973_build_struct_decl(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed126c92_check_method_receiver(_1ed11a88a_Parser*,jule::Ptr<_1e02da32b_FnDecl>&);
inline jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> _1ed127149_build_trait_methods(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02e2443_TraitDecl> _1ed127501_build_trait_decl(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02da32b_FnDecl> _1ed1278a8_build_cpp_link_fn(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02daea8_VarDecl> _1ed127c60_build_cpp_link_var(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02e1de3_StructDecl> _1ed128117_build_cpp_link_struct(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02dde01_TypeAliasDecl> _1ed128513_build_cpp_link_type_alias(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Ptr<_1e02e009a_UseDecl> _1ed1288a9_build_cpp_link_use(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed128c61_build_cpp_link(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02da32b_FnDecl> _1ed129118_get_method(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed129514_parse_impl_body(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<_1e02e2993_Impl>&,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e02e2993_Impl> _1ed1298bb_build_impl(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline jule::Any _1ed129c73_build_node_data(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed12a092_check_directive(_1ed11a88a_Parser*,_1e01be3a8_Node&);
inline void _1ed12a48d_apply_fn_meta(_1ed11a88a_Parser*,jule::Ptr<_1e02da32b_FnDecl>&,jule::Bool);
inline void _1ed12a889_apply_meta(_1ed11a88a_Parser*,_1e01be3a8_Node&,jule::Bool);
inline void _1ed12aba8_check_use_decl(_1ed11a88a_Parser*,_1e01be3a8_Node&);
inline std::tuple<jule::Bool,jule::Any> _1ed12b0a4_build_general_scope_node_data(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>);
inline _1e01be3a8_Node _1ed12b44a_parse_node(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed12b769_append_node(jule::Ptr<_1ed11a88a_Parser>,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed12bd1e_remove_range(_1ed11a88a_Parser*,jule::I32,jule::Str,jule::Slice<_1e02c1d07_Token>&,jule::Slice<jule::I32>&);
inline void _1ed12c33b_push_wrong_order_close_err(_1ed11a88a_Parser*,_1e02c1d07_Token&,jule::Slice<_1e02c1d07_Token>&,jule::Slice<jule::I32>&);
inline void _1ed12c8d0_push_range_close(_1ed11a88a_Parser*,_1e02c1d07_Token,jule::Str,jule::Slice<_1e02c1d07_Token>&,jule::Slice<jule::I32>&);
inline void _1ed12cbee_check_ranges(_1ed11a88a_Parser*,jule::Slice<_1e02c1d07_Token>&);
inline void _1ed12d01d_parse(jule::Ptr<_1ed11a88a_Parser>,jule::Ptr<_1e02c7e51_File>&);
struct _1ed11a88a_Parser {
	jule::Ptr<_1e01bcb7b_Ast> _field_ast = jule::Ptr<_1e01bcb7b_Ast>();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Slice<_208de2238_Log> _field_errors = jule::Slice<_208de2238_Log>();


	_1ed11a88a_Parser(jule::Ptr<_1e01bcb7b_Ast> __param_ast, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Slice<_208de2238_Log> __param_errors): _field_ast(__param_ast), _field_directives(__param_directives), _field_errors(__param_errors) {}

	

	_1ed11a88a_Parser(void) = default;

	inline bool operator==(_1ed11a88a_Parser _other) {
		return 
			this->_field_ast == _other._field_ast &&
			this->_field_directives == _other._field_directives &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_1ed11a88a_Parser _other) { return !this->operator==(_other); }


};
inline void _1ed130608_push_err(_1ed12ee54_TypeBuilder*,_1e02c1d07_Token,jule::Str);
inline void _1ed130a04_push_suggestion(_1ed12ee54_TypeBuilder*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed130cce_build_prim(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed1310a9_build_namespace(_1ed12ee54_TypeBuilder*);
inline jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _1ed131384_build_generics(_1ed12ee54_TypeBuilder*);
inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed13165e_ident_generics(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed131939_build_ident(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed131c14_build_cpp_link(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed131ede_build_fn(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed1322b9_build_ptr(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed132594_build_sptr(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed13286e_build_op(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed132b49_build_slc(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed132e24_build_arr(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed1333a8_build_map(_1ed12ee54_TypeBuilder*,jule::I32,jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed133683_build_enumerable(_1ed12ee54_TypeBuilder*);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed13395d_step(_1ed12ee54_TypeBuilder*);
inline std::tuple<jule::Ptr<_1e01c3db3_TypeDecl>,jule::Bool> _1ed133c38_build(_1ed12ee54_TypeBuilder*);
struct _1ed12ee54_TypeBuilder {
	jule::Ptr<_1ed11a88a_Parser> _field_p = jule::Ptr<_1ed11a88a_Parser>();
	jule::Slice<_1e02c1d07_Token> _field_tokens = jule::Slice<_1e02c1d07_Token>();
	jule::I32* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();


	_1ed12ee54_TypeBuilder(jule::Ptr<_1ed11a88a_Parser> __param_p, jule::Slice<_1e02c1d07_Token> __param_tokens, jule::I32* __param_i, jule::Bool __param_err): _field_p(__param_p), _field_tokens(__param_tokens), _field_i(__param_i), _field_err(__param_err) {}

	

	_1ed12ee54_TypeBuilder(void) = default;

	inline bool operator==(_1ed12ee54_TypeBuilder _other) {
		return 
			this->_field_p == _other._field_p &&
			this->_field_tokens == _other._field_tokens &&
			this->_field_i == _other._field_i &&
			this->_field_err == _other._field_err;
	}

	inline bool operator!=(_1ed12ee54_TypeBuilder _other) { return !this->operator==(_other); }


};
struct _1ecda7acd_FloatInfo {
	jule::U32 _field_mantbits = jule::U32();
	jule::U32 _field_expbits = jule::U32();
	jule::I32 _field_bias = jule::I32();


	_1ecda7acd_FloatInfo(jule::U32 __param_mantbits, jule::U32 __param_expbits, jule::I32 __param_bias): _field_mantbits(__param_mantbits), _field_expbits(__param_expbits), _field_bias(__param_bias) {}

	

	_1ecda7acd_FloatInfo(void) = default;

	inline bool operator==(_1ecda7acd_FloatInfo _other) {
		return 
			this->_field_mantbits == _other._field_mantbits &&
			this->_field_expbits == _other._field_expbits &&
			this->_field_bias == _other._field_bias;
	}

	inline bool operator!=(_1ecda7acd_FloatInfo _other) { return !this->operator==(_other); }


};
struct _1ed45d6e4_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::I32 _field_nd = jule::I32();
	jule::I32 _field_dp = jule::I32();
	jule::Bool _field_neg = jule::Bool();


	_1ed45d6e4_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::I32 __param_nd, jule::I32 __param_dp, jule::Bool __param_neg): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg) {}

	

	_1ed45d6e4_DecimalSlice(void) = default;

	inline bool operator==(_1ed45d6e4_DecimalSlice _other) {
		return 
			this->_field_d == _other._field_d &&
			this->_field_nd == _other._field_nd &&
			this->_field_dp == _other._field_dp &&
			this->_field_neg == _other._field_neg;
	}

	inline bool operator!=(_1ed45d6e4_DecimalSlice _other) { return !this->operator==(_other); }


};
struct _1eec7e893_LeftCheat {
	jule::I32 _field_delta = jule::I32();
	jule::Str _field_cutoff = jule::Str();


	_1eec7e893_LeftCheat(jule::I32 __param_delta, jule::Str __param_cutoff): _field_delta(__param_delta), _field_cutoff(__param_cutoff) {}

	

	_1eec7e893_LeftCheat(void) = default;

	inline bool operator==(_1eec7e893_LeftCheat _other) {
		return 
			this->_field_delta == _other._field_delta &&
			this->_field_cutoff == _other._field_cutoff;
	}

	inline bool operator!=(_1eec7e893_LeftCheat _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eec7ac68_set(_1eec80366_Decimal*,jule::Str);
inline std::tuple<jule::U64,jule::Bool> _1eec7adcd_float_bits(_1eec80366_Decimal*,_1ecda7acd_FloatInfo&);
inline void _1eec8081c_assign(_1eec80366_Decimal*,jule::U64);
inline void _1eec80b3b_shift(_1eec80366_Decimal*,jule::I32);
inline void _1eec80e5a_round_down(_1eec80366_Decimal*,jule::I32);
inline void _1eec81279_round_up(_1eec80366_Decimal*,jule::I32);
inline void _1eec81598_round(_1eec80366_Decimal*,jule::I32);
inline jule::U64 _1eec81873_rounded_integer(_1eec80366_Decimal*);
struct _1eec80366_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::I32 _field_nd = jule::I32();
	jule::I32 _field_dp = jule::I32();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();


	_1eec80366_Decimal(jule::Array<jule::U8,800> __param_d, jule::I32 __param_nd, jule::I32 __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg), _field_trunc(__param_trunc) {}

	

	_1eec80366_Decimal(void) = default;

	inline bool operator==(_1eec80366_Decimal _other) {
		return 
			this->_field_d == _other._field_d &&
			this->_field_nd == _other._field_nd &&
			this->_field_dp == _other._field_dp &&
			this->_field_neg == _other._field_neg &&
			this->_field_trunc == _other._field_trunc;
	}

	inline bool operator!=(_1eec80366_Decimal _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eed1e24b_Const> static__1eed1e46b_new_i64(jule::I64);
inline jule::Ptr<_1eed1e24b_Const> static__1eed1e5d1_new_u64(jule::U64);
inline jule::Ptr<_1eed1e24b_Const> static__1eed1e834_new_bool(jule::Bool);
inline jule::Ptr<_1eed1e24b_Const> static__1eed1eb42_new_str(jule::Str);
inline jule::Ptr<_1eed1e24b_Const> static__1eed1ee50_new_f64(jule::F64);
inline jule::Ptr<_1eed1e24b_Const> static__1eed20181_new_nil(void);
inline jule::I64 _1eed207e1_read_i64(_1eed1e24b_Const*);
inline jule::U64 _1eed20abb_read_u64(_1eed1e24b_Const*);
inline jule::Bool _1eed20d96_read_bool(_1eed1e24b_Const*);
inline jule::Str _1eed21171_read_str(_1eed1e24b_Const*);
inline jule::F64 _1eed2144b_read_f64(_1eed1e24b_Const*);
inline jule::I64 _1eed21726_as_i64(_1eed1e24b_Const*);
inline jule::U64 _1eed21a01_as_u64(_1eed1e24b_Const*);
inline jule::F64 _1eed21ccb_as_f64(_1eed1e24b_Const*);
inline void _1eed220ea_set_i64(_1eed1e24b_Const*,jule::I64);
inline void _1eed22419_set_u64(_1eed1e24b_Const*,jule::U64);
inline void _1eed22738_set_bool(_1eed1e24b_Const*,jule::Bool);
inline void _1eed22a57_set_str(_1eed1e24b_Const*,jule::Str);
inline void _1eed22d76_set_f64(_1eed1e24b_Const*,jule::F64);
inline void _1eed230b8_set_nil(_1eed1e24b_Const*);
inline jule::Bool _1eed23393_is_i64(_1eed1e24b_Const*);
inline jule::Bool _1eed2366d_is_u64(_1eed1e24b_Const*);
inline jule::Bool _1eed23948_is_bool(_1eed1e24b_Const*);
inline jule::Bool _1eed23c23_is_str(_1eed1e24b_Const*);
inline jule::Bool _1eed23eed_is_f64(_1eed1e24b_Const*);
inline jule::Bool _1eed242c8_is_nil(_1eed1e24b_Const*);
inline jule::Bool _1eed24680_are_same_types(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed24a37_and(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed24dde_or(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed25296_eq(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed2564d_lt(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed25a05_lt_eq(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed25dac_gt(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed26264_gt_eq(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed2661b_add(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed269c3_sub(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed26d7a_mul(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed27232_div(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed275d9_mod(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed27991_bitwise_and(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed27d48_bitwise_or(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed2d05c_xor(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed2d414_lshift(_1eed1e24b_Const*,_1eed1e24b_Const);
inline jule::Bool _1eed2d7bb_rshift(_1eed1e24b_Const*,_1eed1e24b_Const);
struct _1eed1e24b_Const {
	jule::Any _field_data = jule::Any();


	_1eed1e24b_Const(jule::Any __param_data): _field_data(__param_data) {}

	

	_1eed1e24b_Const(void) = default;

	inline jule::Bool operator==(_1eed1e24b_Const _other) { return _1eed25296_eq(this, _other); }

	inline bool operator!=(_1eed1e24b_Const _other) { return !this->operator==(_other); }

	inline jule::Bool operator>(_1eed1e24b_Const _other) { return _1eed25dac_gt(this, _other); }

	inline jule::Bool operator>=(_1eed1e24b_Const _other) { return _1eed26264_gt_eq(this, _other); }

	inline jule::Bool operator<(_1eed1e24b_Const _other) { return _1eed2564d_lt(this, _other); }

	inline jule::Bool operator<=(_1eed1e24b_Const _other) { return _1eed25a05_lt_eq(this, _other); }


};
inline jule::Ptr<_2000089b8_FileStream> static__200008bd8_new(jule::Ptr<_222416733_File>);
inline jule::Exceptional<jule::I32> _200008e4c_read(_2000089b8_FileStream*,jule::Slice<jule::U8>);
inline jule::Exceptional<jule::I32> _200009249_write(_2000089b8_FileStream*,jule::Slice<jule::U8>);
inline jule::Exceptional<jule::Slice<jule::U8>> _200009612_read_line(_2000089b8_FileStream*);
struct _2000089b8_FileStream {
	jule::Ptr<_222416733_File> _field_buff = jule::Ptr<_222416733_File>();


	_2000089b8_FileStream(jule::Ptr<_222416733_File> __param_buff): _field_buff(__param_buff) {}

	

	_2000089b8_FileStream(void) = default;

	inline bool operator==(_2000089b8_FileStream _other) {
		return 
			this->_field_buff == _other._field_buff;
	}

	inline bool operator!=(_2000089b8_FileStream _other) { return !this->operator==(_other); }


};
inline jule::Exceptional<jule::I32> _20000c13c_read(_20000b900_ByteStream*,jule::Slice<jule::U8>);
inline jule::Exceptional<jule::I32> _20000c4e4_write(_20000b900_ByteStream*,jule::Slice<jule::U8>);
inline jule::Ptr<_20000b900_ByteStream> static__20000c835_new(void);
inline jule::Bool _20000cb10_data(_20000b900_ByteStream*);
inline void _20000cd52_fit(_20000b900_ByteStream*);
struct _20000b900_ByteStream {
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();


	_20000b900_ByteStream(jule::Slice<jule::U8> __param_buff): _field_buff(__param_buff) {}

	

	_20000b900_ByteStream(void) = default;

	inline bool operator==(_20000b900_ByteStream _other) {
		return 
			this->_field_buff == _other._field_buff;
	}

	inline bool operator!=(_20000b900_ByteStream _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_20000e4b3_Scanner> static__20000e958_new(jule::Trait<_200009e3c_Reader>);
inline jule::Ptr<_20000e4b3_Scanner> static__20000ec66_newf(jule::Ptr<_222416733_File>);
inline void _2000100c9_reset(_20000e4b3_Scanner*);
inline jule::Slice<jule::U8> _2000103a4_bytes(_20000e4b3_Scanner*);
inline jule::Str _20001067e_text(_20000e4b3_Scanner*);
inline jule::Exceptional<jule::Bool> _200010959_scan(_20000e4b3_Scanner*);
struct _20000e4b3_Scanner {
	jule::Trait<_200009e3c_Reader> _field_r = jule::Trait<_200009e3c_Reader>();
	jule::Slice<jule::U8> _field_b = jule::Slice<jule::U8>();


	_20000e4b3_Scanner(jule::Trait<_200009e3c_Reader> __param_r, jule::Slice<jule::U8> __param_b): _field_r(__param_r), _field_b(__param_b) {}

	

	_20000e4b3_Scanner(void) = default;

	inline bool operator==(_20000e4b3_Scanner _other) {
		return 
			this->_field_r == _other._field_r &&
			this->_field_b == _other._field_b;
	}

	inline bool operator!=(_20000e4b3_Scanner _other) { return !this->operator==(_other); }


};
struct _1ee240ddd_Operators {
	jule::Ptr<_1ee25b4ad_FnIns> _field_eq = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_gt = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_gt_eq = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_lt = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_lt_eq = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_shl = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_shr = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_add = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_sub = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_div = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_mul = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_mod = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_and = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_or = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_xor = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_neg = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_pos = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_not = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_add_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_sub_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_div_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_mul_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_mod_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_shl_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_shr_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_or_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_and_assign = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_bit_xor_assign = jule::Ptr<_1ee25b4ad_FnIns>();


	_1ee240ddd_Operators(jule::Ptr<_1ee25b4ad_FnIns> __param_eq, jule::Ptr<_1ee25b4ad_FnIns> __param_gt, jule::Ptr<_1ee25b4ad_FnIns> __param_gt_eq, jule::Ptr<_1ee25b4ad_FnIns> __param_lt, jule::Ptr<_1ee25b4ad_FnIns> __param_lt_eq, jule::Ptr<_1ee25b4ad_FnIns> __param_shl, jule::Ptr<_1ee25b4ad_FnIns> __param_shr, jule::Ptr<_1ee25b4ad_FnIns> __param_add, jule::Ptr<_1ee25b4ad_FnIns> __param_sub, jule::Ptr<_1ee25b4ad_FnIns> __param_div, jule::Ptr<_1ee25b4ad_FnIns> __param_mul, jule::Ptr<_1ee25b4ad_FnIns> __param_mod, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_and, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_or, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_xor, jule::Ptr<_1ee25b4ad_FnIns> __param_neg, jule::Ptr<_1ee25b4ad_FnIns> __param_pos, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_not, jule::Ptr<_1ee25b4ad_FnIns> __param_add_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_sub_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_div_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_mul_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_mod_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_shl_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_shr_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_or_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_and_assign, jule::Ptr<_1ee25b4ad_FnIns> __param_bit_xor_assign): _field_eq(__param_eq), _field_gt(__param_gt), _field_gt_eq(__param_gt_eq), _field_lt(__param_lt), _field_lt_eq(__param_lt_eq), _field_shl(__param_shl), _field_shr(__param_shr), _field_add(__param_add), _field_sub(__param_sub), _field_div(__param_div), _field_mul(__param_mul), _field_mod(__param_mod), _field_bit_and(__param_bit_and), _field_bit_or(__param_bit_or), _field_bit_xor(__param_bit_xor), _field_neg(__param_neg), _field_pos(__param_pos), _field_bit_not(__param_bit_not), _field_add_assign(__param_add_assign), _field_sub_assign(__param_sub_assign), _field_div_assign(__param_div_assign), _field_mul_assign(__param_mul_assign), _field_mod_assign(__param_mod_assign), _field_shl_assign(__param_shl_assign), _field_shr_assign(__param_shr_assign), _field_bit_or_assign(__param_bit_or_assign), _field_bit_and_assign(__param_bit_and_assign), _field_bit_xor_assign(__param_bit_xor_assign) {}

	

	_1ee240ddd_Operators(void) = default;

	inline bool operator==(_1ee240ddd_Operators _other) {
		return 
			this->_field_eq == _other._field_eq &&
			this->_field_gt == _other._field_gt &&
			this->_field_gt_eq == _other._field_gt_eq &&
			this->_field_lt == _other._field_lt &&
			this->_field_lt_eq == _other._field_lt_eq &&
			this->_field_shl == _other._field_shl &&
			this->_field_shr == _other._field_shr &&
			this->_field_add == _other._field_add &&
			this->_field_sub == _other._field_sub &&
			this->_field_div == _other._field_div &&
			this->_field_mul == _other._field_mul &&
			this->_field_mod == _other._field_mod &&
			this->_field_bit_and == _other._field_bit_and &&
			this->_field_bit_or == _other._field_bit_or &&
			this->_field_bit_xor == _other._field_bit_xor &&
			this->_field_neg == _other._field_neg &&
			this->_field_pos == _other._field_pos &&
			this->_field_bit_not == _other._field_bit_not &&
			this->_field_add_assign == _other._field_add_assign &&
			this->_field_sub_assign == _other._field_sub_assign &&
			this->_field_div_assign == _other._field_div_assign &&
			this->_field_mul_assign == _other._field_mul_assign &&
			this->_field_mod_assign == _other._field_mod_assign &&
			this->_field_shl_assign == _other._field_shl_assign &&
			this->_field_shr_assign == _other._field_shr_assign &&
			this->_field_bit_or_assign == _other._field_bit_or_assign &&
			this->_field_bit_and_assign == _other._field_bit_and_assign &&
			this->_field_bit_xor_assign == _other._field_bit_xor_assign;
	}

	inline bool operator!=(_1ee240ddd_Operators _other) { return !this->operator==(_other); }


};
struct _1ee2449b3_FieldIns {
	jule::Ptr<_1ee23da34_Field> _field_decl = jule::Ptr<_1ee23da34_Field>();
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee43b89_Data> _field_default = jule::Ptr<_1eee43b89_Data>();


	_1ee2449b3_FieldIns(jule::Ptr<_1ee23da34_Field> __param_decl, jule::Ptr<_1eee76b45_TypeKind> __param_kind, jule::Ptr<_1eee43b89_Data> __param_default): _field_decl(__param_decl), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_1ee2449b3_FieldIns(void) = default;

	inline bool operator==(_1ee2449b3_FieldIns _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1ee2449b3_FieldIns _other) { return !this->operator==(_other); }


};
struct _1ee247620_OperandExprModel {
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Any _field_model = jule::Any();


	_1ee247620_OperandExprModel(jule::Ptr<_1eee76b45_TypeKind> __param_kind, jule::Any __param_model): _field_kind(__param_kind), _field_model(__param_model) {}

	

	_1ee247620_OperandExprModel(void) = default;

	inline bool operator==(_1ee247620_OperandExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_1ee247620_OperandExprModel _other) { return !this->operator==(_other); }


};
struct _1ee2485aa_StructArgExprModel {
	jule::Ptr<_1ee2449b3_FieldIns> _field_field = jule::Ptr<_1ee2449b3_FieldIns>();
	jule::Any _field_expr = jule::Any();


	_1ee2485aa_StructArgExprModel(jule::Ptr<_1ee2449b3_FieldIns> __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1ee2485aa_StructArgExprModel(void) = default;

	inline bool operator==(_1ee2485aa_StructArgExprModel _other) {
		return 
			this->_field_field == _other._field_field &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee2485aa_StructArgExprModel _other) { return !this->operator==(_other); }


};
struct _1ee248a0b_StructLitExprModel {
	jule::Ptr<_1ee24550d_StructIns> _field_strct = jule::Ptr<_1ee24550d_StructIns>();
	jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>>();


	_1ee248a0b_StructLitExprModel(jule::Ptr<_1ee24550d_StructIns> __param_strct, jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>> __param_args): _field_strct(__param_strct), _field_args(__param_args) {}

	

	_1ee248a0b_StructLitExprModel(void) = default;

	inline bool operator==(_1ee248a0b_StructLitExprModel _other) {
		return 
			this->_field_strct == _other._field_strct &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_1ee248a0b_StructLitExprModel _other) { return !this->operator==(_other); }


};
struct _1ee248de6_AllocStructLitExprModel {
	jule::Ptr<_1ee248a0b_StructLitExprModel> _field_lit = jule::Ptr<_1ee248a0b_StructLitExprModel>();


	_1ee248de6_AllocStructLitExprModel(jule::Ptr<_1ee248a0b_StructLitExprModel> __param_lit): _field_lit(__param_lit) {}

	

	_1ee248de6_AllocStructLitExprModel(void) = default;

	inline bool operator==(_1ee248de6_AllocStructLitExprModel _other) {
		return 
			this->_field_lit == _other._field_lit;
	}

	inline bool operator!=(_1ee248de6_AllocStructLitExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24a458_SliceExprModel {
	jule::Ptr<_1eee76b45_TypeKind> _field_elem_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1ee24a458_SliceExprModel(jule::Ptr<_1eee76b45_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems): _field_elem_kind(__param_elem_kind), _field_elems(__param_elems) {}

	

	_1ee24a458_SliceExprModel(void) = default;

	inline bool operator==(_1ee24a458_SliceExprModel _other) {
		return 
			this->_field_elem_kind == _other._field_elem_kind &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_1ee24a458_SliceExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24ae09_AnonFnExprModel {
	jule::Ptr<_1ee25b4ad_FnIns> _field_func = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Bool _field_global = jule::Bool();


	_1ee24ae09_AnonFnExprModel(jule::Ptr<_1ee25b4ad_FnIns> __param_func, jule::Bool __param_global): _field_func(__param_func), _field_global(__param_global) {}

	

	_1ee24ae09_AnonFnExprModel(void) = default;

	inline bool operator==(_1ee24ae09_AnonFnExprModel _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_global == _other._field_global;
	}

	inline bool operator!=(_1ee24ae09_AnonFnExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24b35a_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();


	_1ee24b35a_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1ee24b35a_KeyValPairExprModel(void) = default;

	inline bool operator==(_1ee24b35a_KeyValPairExprModel _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_1ee24b35a_KeyValPairExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24b8aa_MapExprModel {
	jule::Ptr<_1eee76b45_TypeKind> _field_key_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee76b45_TypeKind> _field_val_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Slice<jule::Ptr<_1ee24b35a_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_1ee24b35a_KeyValPairExprModel>>();


	_1ee24b8aa_MapExprModel(jule::Ptr<_1eee76b45_TypeKind> __param_key_kind, jule::Ptr<_1eee76b45_TypeKind> __param_val_kind, jule::Slice<jule::Ptr<_1ee24b35a_KeyValPairExprModel>> __param_entries): _field_key_kind(__param_key_kind), _field_val_kind(__param_val_kind), _field_entries(__param_entries) {}

	

	_1ee24b8aa_MapExprModel(void) = default;

	inline bool operator==(_1ee24b8aa_MapExprModel _other) {
		return 
			this->_field_key_kind == _other._field_key_kind &&
			this->_field_val_kind == _other._field_val_kind &&
			this->_field_entries == _other._field_entries;
	}

	inline bool operator!=(_1ee24b8aa_MapExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24d626_StructStaticIdentExprModel {
	jule::Ptr<_1ee24550d_StructIns> _field_structure = jule::Ptr<_1ee24550d_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ee25b4ad_FnIns> _field_method = jule::Ptr<_1ee25b4ad_FnIns>();


	_1ee24d626_StructStaticIdentExprModel(jule::Ptr<_1ee24550d_StructIns> __param_structure, jule::Any __param_expr, jule::Ptr<_1ee25b4ad_FnIns> __param_method): _field_structure(__param_structure), _field_expr(__param_expr), _field_method(__param_method) {}

	

	_1ee24d626_StructStaticIdentExprModel(void) = default;

	inline bool operator==(_1ee24d626_StructStaticIdentExprModel _other) {
		return 
			this->_field_structure == _other._field_structure &&
			this->_field_expr == _other._field_expr &&
			this->_field_method == _other._field_method;
	}

	inline bool operator!=(_1ee24d626_StructStaticIdentExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24da55_ArrayExprModel {
	jule::Ptr<_1eee88e21_Arr> _field_kind = jule::Ptr<_1eee88e21_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1ee24da55_ArrayExprModel(jule::Ptr<_1eee88e21_Arr> __param_kind, jule::Slice<jule::Any> __param_elems): _field_kind(__param_kind), _field_elems(__param_elems) {}

	

	_1ee24da55_ArrayExprModel(void) = default;

	inline bool operator==(_1ee24da55_ArrayExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_1ee24da55_ArrayExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24dda7_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();


	_1ee24dda7_CommonIdentExprModel(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1ee24dda7_CommonIdentExprModel(void) = default;

	inline bool operator==(_1ee24dda7_CommonIdentExprModel _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1ee24dda7_CommonIdentExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24e8be_TupleExprModel {
	jule::Slice<jule::Ptr<_1eee43b89_Data>> _field_datas = jule::Slice<jule::Ptr<_1eee43b89_Data>>();


	_1ee24e8be_TupleExprModel(jule::Slice<jule::Ptr<_1eee43b89_Data>> __param_datas): _field_datas(__param_datas) {}

	

	_1ee24e8be_TupleExprModel(void) = default;

	inline bool operator==(_1ee24e8be_TupleExprModel _other) {
		return 
			this->_field_datas == _other._field_datas;
	}

	inline bool operator!=(_1ee24e8be_TupleExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24eda8_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1ee24eda8_BuiltinOutCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1ee24eda8_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(_1ee24eda8_BuiltinOutCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_debug == _other._field_debug;
	}

	inline bool operator!=(_1ee24eda8_BuiltinOutCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee250370_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1ee250370_BuiltinOutlnCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1ee250370_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(_1ee250370_BuiltinOutlnCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_debug == _other._field_debug;
	}

	inline bool operator!=(_1ee250370_BuiltinOutlnCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee250738_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();


	_1ee250738_BuiltinCloneCallExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1ee250738_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(_1ee250738_BuiltinCloneCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee250738_BuiltinCloneCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee250c00_BuiltinNewCallExprModel {
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Any _field_init = jule::Any();


	_1ee250c00_BuiltinNewCallExprModel(jule::Ptr<_1eee76b45_TypeKind> __param_kind, jule::Any __param_init): _field_kind(__param_kind), _field_init(__param_init) {}

	

	_1ee250c00_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(_1ee250c00_BuiltinNewCallExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_init == _other._field_init;
	}

	inline bool operator!=(_1ee250c00_BuiltinNewCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee251d44_BuiltinMakeCallExprModel {
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();


	_1ee251d44_BuiltinMakeCallExprModel(jule::Ptr<_1eee76b45_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap): _field_kind(__param_kind), _field_len(__param_len), _field_cap(__param_cap) {}

	

	_1ee251d44_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(_1ee251d44_BuiltinMakeCallExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_len == _other._field_len &&
			this->_field_cap == _other._field_cap;
	}

	inline bool operator!=(_1ee251d44_BuiltinMakeCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee25230b_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();


	_1ee25230b_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements): _field_dest(__param_dest), _field_elements(__param_elements) {}

	

	_1ee25230b_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(_1ee25230b_BuiltinAppendCallExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_elements == _other._field_elements;
	}

	inline bool operator!=(_1ee25230b_BuiltinAppendCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee2527c3_BuiltinErrorCallExprModel {
	jule::Ptr<_1ee25b4ad_FnIns> _field_func = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Any _field_err = jule::Any();


	_1ee2527c3_BuiltinErrorCallExprModel(jule::Ptr<_1ee25b4ad_FnIns> __param_func, jule::Any __param_err): _field_func(__param_func), _field_err(__param_err) {}

	

	_1ee2527c3_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(_1ee2527c3_BuiltinErrorCallExprModel _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_err == _other._field_err;
	}

	inline bool operator!=(_1ee2527c3_BuiltinErrorCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee252b03_SizeofExprModel {
	jule::Any _field_expr = jule::Any();


	_1ee252b03_SizeofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1ee252b03_SizeofExprModel(void) = default;

	inline bool operator==(_1ee252b03_SizeofExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee252b03_SizeofExprModel _other) { return !this->operator==(_other); }


};
struct _1ee2532a7_AlignofExprModel {
	jule::Any _field_expr = jule::Any();


	_1ee2532a7_AlignofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1ee2532a7_AlignofExprModel(void) = default;

	inline bool operator==(_1ee2532a7_AlignofExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee2532a7_AlignofExprModel _other) { return !this->operator==(_other); }


};
struct _1ee253571_RuneExprModel {
	jule::I32 _field_code = jule::I32();


	_1ee253571_RuneExprModel(jule::I32 __param_code): _field_code(__param_code) {}

	

	_1ee253571_RuneExprModel(void) = default;

	inline bool operator==(_1ee253571_RuneExprModel _other) {
		return 
			this->_field_code == _other._field_code;
	}

	inline bool operator!=(_1ee253571_RuneExprModel _other) { return !this->operator==(_other); }


};
struct _1ee2538d4_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();


	_1ee2538d4_IntegratedToStrExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1ee2538d4_IntegratedToStrExprModel(void) = default;

	inline bool operator==(_1ee2538d4_IntegratedToStrExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee2538d4_IntegratedToStrExprModel _other) { return !this->operator==(_other); }


};
struct _1ee253d13_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1ee253d13_BackendEmitExprModel(jule::Str __param_code, jule::Slice<jule::Any> __param_exprs): _field_code(__param_code), _field_exprs(__param_exprs) {}

	

	_1ee253d13_BackendEmitExprModel(void) = default;

	inline bool operator==(_1ee253d13_BackendEmitExprModel _other) {
		return 
			this->_field_code == _other._field_code &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_1ee253d13_BackendEmitExprModel _other) { return !this->operator==(_other); }


};
struct _1ee254165_FreeExprModel {
	jule::Any _field_expr = jule::Any();


	_1ee254165_FreeExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1ee254165_FreeExprModel(void) = default;

	inline bool operator==(_1ee254165_FreeExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee254165_FreeExprModel _other) { return !this->operator==(_other); }


};
struct _1ee255342_RetType {
	jule::Ptr<_1eee7b4a7_TypeSymbol> _field_kind = jule::Ptr<_1eee7b4a7_TypeSymbol>();
	jule::Slice<_1e02c1d07_Token> _field_idents = jule::Slice<_1e02c1d07_Token>();


	_1ee255342_RetType(jule::Ptr<_1eee7b4a7_TypeSymbol> __param_kind, jule::Slice<_1e02c1d07_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1ee255342_RetType(void) = default;

	inline bool operator==(_1ee255342_RetType _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_1ee255342_RetType _other) { return !this->operator==(_other); }


};
inline jule::Str _1ee25a798_to_str(_1ee25a358_ParamIns*);
struct _1ee25a358_ParamIns {
	jule::Ptr<_1ee255b8e_Param> _field_decl = jule::Ptr<_1ee255b8e_Param>();
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();


	_1ee25a358_ParamIns(jule::Ptr<_1ee255b8e_Param> __param_decl, jule::Ptr<_1eee76b45_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1ee25a358_ParamIns(void) = default;

	inline bool operator==(_1ee25a358_ParamIns _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1ee25a358_ParamIns _other) { return !this->operator==(_other); }


};
inline jule::Str _1ee25b887_to_str(_1ee25b4ad_FnIns*);
inline jule::Bool _1ee25bc3e_equals(jule::Ptr<_1ee25b4ad_FnIns>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1ee25c13a_is_builtin(_1ee25b4ad_FnIns*);
inline jule::Bool _1ee25c415_is_anon(_1ee25b4ad_FnIns*);
inline jule::Bool _1ee25c7bc_same(_1ee25b4ad_FnIns*,jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Str _1ee25cb74_get_kind_str(_1ee25b4ad_FnIns*,jule::Bool);
struct _1ee25b4ad_FnIns {
	jule::Ptr<_1ee24550d_StructIns> _field_owner = jule::Ptr<_1ee24550d_StructIns>();
	jule::Ptr<_1ee2579b5_Fn> _field_decl = jule::Ptr<_1ee2579b5_Fn>();
	jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>();
	jule::Slice<jule::Ptr<_1ee25a358_ParamIns>> _field_params = jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>();
	jule::Ptr<_1eee76b45_TypeKind> _field_result = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Ptr<_1ee25edda_ReferenceStack> _field_references = jule::Ptr<_1ee25edda_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)> _field_caller = jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>();
	jule::Bool _field_reloaded = jule::Bool();


	_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns> __param_owner, jule::Ptr<_1ee2579b5_Fn> __param_decl, jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1ee25a358_ParamIns>> __param_params, jule::Ptr<_1eee76b45_TypeKind> __param_result, jule::Ptr<_1eed8a5a3_Scope> __param_scope, jule::Ptr<_1ee25edda_ReferenceStack> __param_references, jule::Bool __param_anon, jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)> __param_caller, jule::Bool __param_reloaded): _field_owner(__param_owner), _field_decl(__param_decl), _field_generics(__param_generics), _field_params(__param_params), _field_result(__param_result), _field_scope(__param_scope), _field_references(__param_references), _field_anon(__param_anon), _field_caller(__param_caller), _field_reloaded(__param_reloaded) {}

	

	_1ee25b4ad_FnIns(void) = default;

	inline bool operator==(_1ee25b4ad_FnIns _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_decl == _other._field_decl &&
			this->_field_generics == _other._field_generics &&
			this->_field_params == _other._field_params &&
			this->_field_result == _other._field_result &&
			this->_field_scope == _other._field_scope &&
			this->_field_references == _other._field_references &&
			this->_field_anon == _other._field_anon &&
			this->_field_caller == _other._field_caller &&
			this->_field_reloaded == _other._field_reloaded;
	}

	inline bool operator!=(_1ee25b4ad_FnIns _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1ee25edda_ReferenceStack> static__1ee26013d_new(void);
inline jule::I32 _1ee260539_len(_1ee25edda_ReferenceStack*);
inline jule::Any _1ee2608e1_at(_1ee25edda_ReferenceStack*,jule::I32);
inline void _1ee260c10_push(_1ee25edda_ReferenceStack*,jule::Any);
inline jule::Bool _1ee2610b7_exist_0(_1ee25edda_ReferenceStack*,jule::Ptr<_1eedeb24b_Var>);
inline jule::Bool _1ee2610b7_exist_1(_1ee25edda_ReferenceStack*,jule::Ptr<_1ee25b4ad_FnIns>);
struct _1ee25edda_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();


	_1ee25edda_ReferenceStack(jule::Slice<jule::Any> __param_buffer): _field_buffer(__param_buffer) {}

	

	_1ee25edda_ReferenceStack(void) = default;

	inline bool operator==(_1ee25edda_ReferenceStack _other) {
		return 
			this->_field_buffer == _other._field_buffer;
	}

	inline bool operator!=(_1ee25edda_ReferenceStack _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1ee2659b2_SymbolBuilder> _1ee2660de_get_root(jule::Ptr<_1ee2659b2_SymbolBuilder>);
inline void _1ee2665b7_push_err(_1ee2659b2_SymbolBuilder*,_1e02c1d07_Token&,jule::Str,jule::Slice<jule::Any>);
inline void _1ee266a90_push_err_text(_1ee2659b2_SymbolBuilder*,_1e02c1d07_Token&,jule::Str,jule::Slice<jule::Any>);
inline void _1ee266e8b_push_suggestion(_1ee2659b2_SymbolBuilder*,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1ee267354_check_cpp_use_decl_path(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee26773e_build_cpp_header_import(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee267ad5_build_std_import(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee267e8c_build_ident_import(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee268344_build_import(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Bool _1ee268740_check_duplicate_use_decl(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1eedc08c4_ImportInfo>&);
inline void _1ee268b2a_impl_import_selections(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1eedc08c4_ImportInfo>&,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Str _1ee268ed2_get_as_link_path(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Str);
inline void _1ee2694aa_push_cycle_error(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1ee2659b2_SymbolBuilder>&,jule::Str,jule::Str&);
inline void _1ee269983_push_cross_cycle_error(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1ee2659b2_SymbolBuilder>&,jule::Ptr<_1eedc08c4_ImportInfo>&,_1e02c1d07_Token&);
inline jule::Bool _1ee269e17_check_import_cycles(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1eedc08c4_ImportInfo>,jule::Ptr<_1e02e009a_UseDecl>&);
inline void _1ee26a434_check_package_accessibility(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1e02e009a_UseDecl>&,jule::Str&,jule::Str&);
inline jule::Bool _1ee26a8a7_import_package(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1eedc08c4_ImportInfo>&,jule::Ptr<_1e02e009a_UseDecl>&);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee26ac5e_import_use_decl(jule::Ptr<_1ee2659b2_SymbolBuilder>,jule::Ptr<_1e02e009a_UseDecl>&);
inline void _1ee26aea1_import_use_decls(jule::Ptr<_1ee2659b2_SymbolBuilder>);
inline void _1ee26b2c0_append_node(_1ee2659b2_SymbolBuilder*,_1e01be3a8_Node&);
inline void _1ee26b512_append_nodes(_1ee2659b2_SymbolBuilder*);
inline void _1ee26b831_push_directive_pass(_1ee2659b2_SymbolBuilder*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1ee26ba73_append_top_directives(_1ee2659b2_SymbolBuilder*);
inline void _1ee26bcb5_build(jule::Ptr<_1ee2659b2_SymbolBuilder>);
struct _1ee2659b2_SymbolBuilder {
	jule::Ptr<_1ee2659b2_SymbolBuilder> _field_owner = jule::Ptr<_1ee2659b2_SymbolBuilder>();
	jule::Trait<_1eedbccde_Importer> _field_importer = jule::Trait<_1eedbccde_Importer>();
	jule::Slice<_208de2238_Log> _field_errors = jule::Slice<_208de2238_Log>();
	jule::Ptr<_1e01bcb7b_Ast> _field_ast = jule::Ptr<_1e01bcb7b_Ast>();
	jule::Ptr<_1eee3c842_SymbolTable> _field_table = jule::Ptr<_1eee3c842_SymbolTable>();


	_1ee2659b2_SymbolBuilder(jule::Ptr<_1ee2659b2_SymbolBuilder> __param_owner, jule::Trait<_1eedbccde_Importer> __param_importer, jule::Slice<_208de2238_Log> __param_errors, jule::Ptr<_1e01bcb7b_Ast> __param_ast, jule::Ptr<_1eee3c842_SymbolTable> __param_table): _field_owner(__param_owner), _field_importer(__param_importer), _field_errors(__param_errors), _field_ast(__param_ast), _field_table(__param_table) {}

	

	_1ee2659b2_SymbolBuilder(void) = default;

	inline bool operator==(_1ee2659b2_SymbolBuilder _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_importer == _other._field_importer &&
			this->_field_errors == _other._field_errors &&
			this->_field_ast == _other._field_ast &&
			this->_field_table == _other._field_table;
	}

	inline bool operator!=(_1ee2659b2_SymbolBuilder _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eec8a915_is_trait_impl(_1eec8a4d6_Impl*);
inline jule::Bool _1eec8abe0_is_struct_impl(_1eec8a4d6_Impl*);
struct _1eec8a4d6_Impl {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_base = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_dest = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _field_methods = jule::Slice<jule::Ptr<_1ee2579b5_Fn>>();
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _field_statics = jule::Slice<jule::Ptr<_1eedeb24b_Var>>();


	_1eec8a4d6_Impl(jule::Ptr<_1e01c3db3_TypeDecl> __param_base, jule::Ptr<_1e01c3db3_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_1ee2579b5_Fn>> __param_methods, jule::Slice<jule::Ptr<_1eedeb24b_Var>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1eec8a4d6_Impl(void) = default;

	inline bool operator==(_1eec8a4d6_Impl _other) {
		return 
			this->_field_base == _other._field_base &&
			this->_field_dest == _other._field_dest &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics;
	}

	inline bool operator!=(_1eec8a4d6_Impl _other) { return !this->operator==(_other); }


};
struct _1eed8a5a3_Scope {
	jule::Ptr<_1eed8a5a3_Scope> _field_parent = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1eed8a5a3_Scope(jule::Ptr<_1eed8a5a3_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1eed8a5a3_Scope(void) = default;

	inline bool operator==(_1eed8a5a3_Scope _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_deferred == _other._field_deferred &&
			this->_field_stmts == _other._field_stmts;
	}

	inline bool operator!=(_1eed8a5a3_Scope _other) { return !this->operator==(_other); }


};
struct _1eeda2b92_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();


	_1eeda2b92_If(jule::Any __param_expr, jule::Ptr<_1eed8a5a3_Scope> __param_scope): _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1eeda2b92_If(void) = default;

	inline bool operator==(_1eeda2b92_If _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1eeda2b92_If _other) { return !this->operator==(_other); }


};
struct _1eeda2db2_Else {
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();


	_1eeda2db2_Else(jule::Ptr<_1eed8a5a3_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1eeda2db2_Else(void) = default;

	inline bool operator==(_1eeda2db2_Else _other) {
		return 
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1eeda2db2_Else _other) { return !this->operator==(_other); }


};
struct _1eeda30d2_Conditional {
	jule::Slice<jule::Ptr<_1eeda2b92_If>> _field_elifs = jule::Slice<jule::Ptr<_1eeda2b92_If>>();
	jule::Ptr<_1eeda2db2_Else> _field_default = jule::Ptr<_1eeda2db2_Else>();


	_1eeda30d2_Conditional(jule::Slice<jule::Ptr<_1eeda2b92_If>> __param_elifs, jule::Ptr<_1eeda2db2_Else> __param_default): _field_elifs(__param_elifs), _field_default(__param_default) {}

	

	_1eeda30d2_Conditional(void) = default;

	inline bool operator==(_1eeda30d2_Conditional _other) {
		return 
			this->_field_elifs == _other._field_elifs &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1eeda30d2_Conditional _other) { return !this->operator==(_other); }


};
struct _1eeda3302_InfIter {
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();


	_1eeda3302_InfIter(jule::Ptr<_1eed8a5a3_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1eeda3302_InfIter(void) = default;

	inline bool operator==(_1eeda3302_InfIter _other) {
		return 
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1eeda3302_InfIter _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eed6db80_is_while_next(_1eeda3522_WhileIter*);
struct _1eeda3522_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();


	_1eeda3522_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ptr<_1eed8a5a3_Scope> __param_scope): _field_expr(__param_expr), _field_next(__param_next), _field_scope(__param_scope) {}

	

	_1eeda3522_WhileIter(void) = default;

	inline bool operator==(_1eeda3522_WhileIter _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_next == _other._field_next &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1eeda3522_WhileIter _other) { return !this->operator==(_other); }


};
struct _1eeda3742_RangeIter {
	jule::Ptr<_1eee43b89_Data> _field_expr = jule::Ptr<_1eee43b89_Data>();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Ptr<_1eedeb24b_Var> _field_key_a = jule::Ptr<_1eedeb24b_Var>();
	jule::Ptr<_1eedeb24b_Var> _field_key_b = jule::Ptr<_1eedeb24b_Var>();


	_1eeda3742_RangeIter(jule::Ptr<_1eee43b89_Data> __param_expr, jule::Ptr<_1eed8a5a3_Scope> __param_scope, jule::Ptr<_1eedeb24b_Var> __param_key_a, jule::Ptr<_1eedeb24b_Var> __param_key_b): _field_expr(__param_expr), _field_scope(__param_scope), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1eeda3742_RangeIter(void) = default;

	inline bool operator==(_1eeda3742_RangeIter _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope &&
			this->_field_key_a == _other._field_key_a &&
			this->_field_key_b == _other._field_key_b;
	}

	inline bool operator!=(_1eeda3742_RangeIter _other) { return !this->operator==(_other); }


};
struct _1eeda3962_ContSt {
	jule::U32 _field_it = jule::U32();


	_1eeda3962_ContSt(jule::U32 __param_it): _field_it(__param_it) {}

	

	_1eeda3962_ContSt(void) = default;

	inline bool operator==(_1eeda3962_ContSt _other) {
		return 
			this->_field_it == _other._field_it;
	}

	inline bool operator!=(_1eeda3962_ContSt _other) { return !this->operator==(_other); }


};
struct _1eeda3b82_BreakSt {
	jule::U32 _field_it = jule::U32();
	jule::U32 _field_mtch = jule::U32();


	_1eeda3b82_BreakSt(jule::U32 __param_it, jule::U32 __param_mtch): _field_it(__param_it), _field_mtch(__param_mtch) {}

	

	_1eeda3b82_BreakSt(void) = default;

	inline bool operator==(_1eeda3b82_BreakSt _other) {
		return 
			this->_field_it == _other._field_it &&
			this->_field_mtch == _other._field_mtch;
	}

	inline bool operator!=(_1eeda3b82_BreakSt _other) { return !this->operator==(_other); }


};
struct _1eeda3da2_Label {
	jule::Str _field_ident = jule::Str();


	_1eeda3da2_Label(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1eeda3da2_Label(void) = default;

	inline bool operator==(_1eeda3da2_Label _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1eeda3da2_Label _other) { return !this->operator==(_other); }


};
struct _1eeda40c2_GotoSt {
	jule::Str _field_ident = jule::Str();


	_1eeda40c2_GotoSt(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1eeda40c2_GotoSt(void) = default;

	inline bool operator==(_1eeda40c2_GotoSt _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1eeda40c2_GotoSt _other) { return !this->operator==(_other); }


};
struct _1eeda42e2_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_1eeda42e2_Postfix(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1eeda42e2_Postfix(void) = default;

	inline bool operator==(_1eeda42e2_Postfix _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1eeda42e2_Postfix _other) { return !this->operator==(_other); }


};
struct _1eeda4732_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();


	_1eeda4732_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r): _field_l(__param_l), _field_r(__param_r) {}

	

	_1eeda4732_MultiAssign(void) = default;

	inline bool operator==(_1eeda4732_MultiAssign _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r;
	}

	inline bool operator!=(_1eeda4732_MultiAssign _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eed7987d_is_generic_type_match(_1eeda4952_Match*);
struct _1eeda4952_Match {
	jule::Ptr<_1eee43b89_Data> _field_expr = jule::Ptr<_1eee43b89_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_1eeda4da3_Case>> _field_cases = jule::Slice<jule::Ptr<_1eeda4da3_Case>>();
	jule::Ptr<_1eeda4da3_Case> _field_default = jule::Ptr<_1eeda4da3_Case>();


	_1eeda4952_Match(jule::Ptr<_1eee43b89_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ptr<_1eeda4da3_Case>> __param_cases, jule::Ptr<_1eeda4da3_Case> __param_default): _field_expr(__param_expr), _field_type_match(__param_type_match), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1eeda4952_Match(void) = default;

	inline bool operator==(_1eeda4952_Match _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_type_match == _other._field_type_match &&
			this->_field_cases == _other._field_cases &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1eeda4952_Match _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eed7a9b1_is_default(_1eeda4da3_Case*);
struct _1eeda4da3_Case {
	jule::Ptr<_1eeda4952_Match> _field_owner = jule::Ptr<_1eeda4952_Match>();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Slice<jule::Ptr<_1eee43b89_Data>> _field_exprs = jule::Slice<jule::Ptr<_1eee43b89_Data>>();
	jule::Ptr<_1eeda4da3_Case> _field_next = jule::Ptr<_1eeda4da3_Case>();


	_1eeda4da3_Case(jule::Ptr<_1eeda4952_Match> __param_owner, jule::Ptr<_1eed8a5a3_Scope> __param_scope, jule::Slice<jule::Ptr<_1eee43b89_Data>> __param_exprs, jule::Ptr<_1eeda4da3_Case> __param_next): _field_owner(__param_owner), _field_scope(__param_scope), _field_exprs(__param_exprs), _field_next(__param_next) {}

	

	_1eeda4da3_Case(void) = default;

	inline bool operator==(_1eeda4da3_Case _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_scope == _other._field_scope &&
			this->_field_exprs == _other._field_exprs &&
			this->_field_next == _other._field_next;
	}

	inline bool operator!=(_1eeda4da3_Case _other) { return !this->operator==(_other); }


};
struct _1eeda50c3_FallSt {
	jule::U32 _field_dest_case = jule::U32();


	_1eeda50c3_FallSt(jule::U32 __param_dest_case): _field_dest_case(__param_dest_case) {}

	

	_1eeda50c3_FallSt(void) = default;

	inline bool operator==(_1eeda50c3_FallSt _other) {
		return 
			this->_field_dest_case == _other._field_dest_case;
	}

	inline bool operator!=(_1eeda50c3_FallSt _other) { return !this->operator==(_other); }


};
struct _1eeda52e3_RetSt {
	jule::Ptr<_1ee25b4ad_FnIns> _field_func = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _field_vars = jule::Slice<jule::Ptr<_1eedeb24b_Var>>();
	jule::Any _field_expr = jule::Any();


	_1eeda52e3_RetSt(jule::Ptr<_1ee25b4ad_FnIns> __param_func, jule::Slice<jule::Ptr<_1eedeb24b_Var>> __param_vars, jule::Any __param_expr): _field_func(__param_func), _field_vars(__param_vars), _field_expr(__param_expr) {}

	

	_1eeda52e3_RetSt(void) = default;

	inline bool operator==(_1eeda52e3_RetSt _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_vars == _other._field_vars &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1eeda52e3_RetSt _other) { return !this->operator==(_other); }


};
struct _1eeda5733_ScopeGoto {
	jule::Ptr<_1e02d955b_GotoSt> _field_gt = jule::Ptr<_1e02d955b_GotoSt>();
	jule::Ptr<_1eeda5953_ScopeChecker> _field_scope = jule::Ptr<_1eeda5953_ScopeChecker>();
	jule::I32 _field_pos = jule::I32();


	_1eeda5733_ScopeGoto(jule::Ptr<_1e02d955b_GotoSt> __param_gt, jule::Ptr<_1eeda5953_ScopeChecker> __param_scope, jule::I32 __param_pos): _field_gt(__param_gt), _field_scope(__param_scope), _field_pos(__param_pos) {}

	

	_1eeda5733_ScopeGoto(void) = default;

	inline bool operator==(_1eeda5733_ScopeGoto _other) {
		return 
			this->_field_gt == _other._field_gt &&
			this->_field_scope == _other._field_scope &&
			this->_field_pos == _other._field_pos;
	}

	inline bool operator!=(_1eeda5733_ScopeGoto _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eed419ee_find_package(_1eeda5953_ScopeChecker*,jule::Str);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eed44309_select_package(_1eeda5953_ScopeChecker*,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>);
inline jule::Ptr<_1eedeb24b_Var> _1eeda5b73_find_var(_1eeda5953_ScopeChecker*,jule::Str,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eeda5cd8_find_type_alias(_1eeda5953_ScopeChecker*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee242032_Struct> _1eeda5e5e_find_struct(_1eeda5953_ScopeChecker*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2579b5_Fn> _1eeda63e3_find_fn(_1eeda5953_ScopeChecker*,jule::Str,jule::Bool);
inline jule::Ptr<_1eec8627e_Trait> _1eeda679a_find_trait(_1eeda5953_ScopeChecker*,jule::Str);
inline jule::Ptr<_1eec889ac_Enum> _1eeda6b52_find_enum(_1eeda5953_ScopeChecker*,jule::Str);
inline jule::Bool _1eeda6ee8_is_unsafe(jule::Ptr<_1eeda5953_ScopeChecker>);
inline jule::Bool _1eeda72c3_is_root(_1eeda5953_ScopeChecker*);
inline void _1eeda7515_stop(_1eeda5953_ScopeChecker*);
inline jule::Bool _1eeda77e0_stopped(_1eeda5953_ScopeChecker*);
inline jule::Bool _1eeda7aba_is_deferred(jule::Ptr<_1eeda5953_ScopeChecker>);
inline jule::Ptr<_1eeda5953_ScopeChecker> _1eeda7d95_get_root(jule::Ptr<_1eeda5953_ScopeChecker>);
inline jule::Ptr<_1eeda5953_ScopeChecker> _1eeda8170_get_hard_root(jule::Ptr<_1eeda5953_ScopeChecker>);
inline jule::Ptr<_1eeda3da2_Label> _1eeda8527_find_label(_1eeda5953_ScopeChecker*,jule::Str);
inline jule::Ptr<_1eeda5513_ScopeLabel> _1eeda88ce_find_label_scope(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Str);
inline jule::Ptr<_1eeda5513_ScopeLabel> _1eeda8c86_find_label_all(_1eeda5953_ScopeChecker*,jule::Str);
inline jule::Bool _1eeda921a_is_duplicated_ident(_1eeda5953_ScopeChecker*,jule::U32,jule::Str);
inline void _1eeda9539_check_var_decl(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02daea8_VarDecl>);
inline void _1eeda9858_check_type_alias_decl(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dde01_TypeAliasDecl>);
inline jule::Ptr<_1eed8a5a3_Scope> _1eeda9b33_get_child(_1eeda5953_ScopeChecker*);
inline void _1eedaa10b_check_child_ssc(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9ddb_ScopeTree>&,jule::Ptr<_1eed8a5a3_Scope>&,jule::Ptr<_1eeda5953_ScopeChecker>&);
inline jule::Ptr<_1eed8a5a3_Scope> _1eedaa590_check_child_sc(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9ddb_ScopeTree>&,jule::Ptr<_1eeda5953_ScopeChecker>&);
inline jule::Ptr<_1eed8a5a3_Scope> _1eedaa947_check_child(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9ddb_ScopeTree>&);
inline void _1eedaac66_check_anon_scope(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9ddb_ScopeTree>);
inline void _1eedab162_process_error_call(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>&,_1e02c1d07_Token);
inline void _1eedab481_check_expr(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e0181a63_Expr>);
inline void _1eedab7a0_check_co_expr(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e0182844_CoExpr>);
inline jule::Ptr<_1eeda2b92_If> _1eedabb57_check_if(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dd087_If>);
inline jule::Ptr<_1eeda2db2_Else> _1eedac00e_check_else(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dd3ea_Else>);
inline void _1eedac32d_check_conditional(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dd807_Conditional>);
inline jule::Ptr<_1eed8a5a3_Scope> _1eedac88e_check_iter_scope_sc(jule::Ptr<_1eeda5953_ScopeChecker>,jule::U32,jule::Ptr<_1e02d9ddb_ScopeTree>,jule::Ptr<_1eeda5953_ScopeChecker>);
inline jule::Ptr<_1eed8a5a3_Scope> _1eedacd23_check_iter_scope(jule::Ptr<_1eeda5953_ScopeChecker>,jule::U32,jule::Ptr<_1e02d9ddb_ScopeTree>&);
inline void _1eedad142_check_inf_iter(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02db816_Iter>&);
inline void _1eedad461_check_while_iter(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02db816_Iter>&);
inline void _1eedad780_check_range_iter(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02db816_Iter>&);
inline void _1eedada9e_check_iter(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02db816_Iter>);
inline jule::Bool _1eedade56_check_valid_cont_label(jule::Ptr<_1eeda5953_ScopeChecker>,jule::U32);
inline jule::Bool _1eedae352_check_valid_break_label(jule::Ptr<_1eeda5953_ScopeChecker>,jule::U32);
inline jule::Ptr<_1eeda3962_ContSt> _1eedae6e8_check_cont_valid_scope(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dcb7a_ContSt>);
inline void _1eedaea17_check_cont(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dcb7a_ContSt>);
inline void _1eedaed36_check_label(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d933b_LabelSt>);
inline void _1eedb0155_push_goto(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d955b_GotoSt>);
inline void _1eedb0474_check_postfix(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9bbb_AssignSt>);
inline jule::Bool _1eedb082b_is_new_assign_ident(_1eeda5953_ScopeChecker*,jule::Str);
inline jule::Bool _1eedb0dd1_check_structure_assign_op(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1ee24550d_StructIns>&,jule::Ptr<_1e02d9bbb_AssignSt>&,jule::Ptr<_1eee43b89_Data>&);
inline void _1eedb11de_check_single_assign(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9bbb_AssignSt>&);
inline void _1eedb18d7___process_end_part_of_multi_assign(_1eeda5953_ScopeChecker*,jule::Ptr<_1eeda4732_MultiAssign>,jule::Ptr<_1e02d9bbb_AssignSt>,jule::Ptr<_1e02d999b_AssignLeft>,jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1eee43b89_Data>);
inline void _1eedb1bc3_check_ret_multi_assign(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9bbb_AssignSt>&);
inline void _1eedb1ee2_check_multi_assign(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9bbb_AssignSt>&);
inline void _1eedb2311_check_assign_st(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9bbb_AssignSt>);
inline jule::Ptr<_1eed8a5a3_Scope> _1eedb2795_check_case_scope(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1eeda4da3_Case>&,jule::Ptr<_1e02d9ddb_ScopeTree>&);
inline jule::Ptr<_1eeda4da3_Case> _1eedb2dd3_check_case(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1eeda4952_Match>,jule::I32,jule::Ptr<_1e02de30d_Case>,jule::Ptr<_1eee43b89_Data>);
inline void _1eedb33ab_check_cases(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02de907_MatchCase>&,jule::Ptr<_1eeda4952_Match>,jule::Ptr<_1eee43b89_Data>);
inline jule::Ptr<_1eeda4da3_Case> _1eedb3840_check_default(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1eeda4952_Match>,jule::Ptr<_1e02dd3ea_Else>);
inline void _1eedb3b5e_check_comptime_panic(_1eeda5953_ScopeChecker*,jule::Ptr<_1eed8a5a3_Scope>&);
inline void _1eedb405a_push_type_match(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1eeda4952_Match>,jule::Ptr<_1e02de907_MatchCase>&);
inline void _1eedb4379_check_type_match(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02de907_MatchCase>&);
inline void _1eedb4698_check_common_match(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02de907_MatchCase>&);
inline void _1eedb49b7_check_match(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02de907_MatchCase>);
inline void _1eedb4cd6_check_fall(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d977b_FallSt>);
inline jule::Ptr<_1eeda3b82_BreakSt> _1eedb518d_check_break_with_label(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dc817_BreakSt>);
inline jule::Ptr<_1eeda3b82_BreakSt> _1eedb5545_check_plain_break(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dc817_BreakSt>);
inline void _1eedb5864_check_break(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02dc817_BreakSt>);
inline void _1eedb5b83_check_ret(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02db31b_RetSt>);
inline void _1eedb5ea2_check_use_expr(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e0181c83_UseExpr>);
inline void _1eedb62c1_check_node(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Any&);
inline void _1eedb6513_check_result(jule::Ptr<_1eeda5953_ScopeChecker>);
inline void _1eedb6755_check_tree(jule::Ptr<_1eeda5953_ScopeChecker>);
inline void _1eedb6b51_check_goto(_1eeda5953_ScopeChecker*,jule::Ptr<_1eeda5733_ScopeGoto>&,jule::Ptr<_1eeda5513_ScopeLabel>&);
inline void _1eedb6d93_check_gotos(_1eeda5953_ScopeChecker*);
inline void _1eedb70d5_check_labels(_1eeda5953_ScopeChecker*);
inline void _1eedb7327_check_vars(_1eeda5953_ScopeChecker*);
inline void _1eedb7569_check_aliases(_1eeda5953_ScopeChecker*);
inline void _1eedb7965_check(jule::Ptr<_1eeda5953_ScopeChecker>,jule::Ptr<_1e02d9ddb_ScopeTree>&,jule::Ptr<_1eed8a5a3_Scope>&);
inline jule::Ptr<_1eeda5953_ScopeChecker> _1eedb7c40_new_child_checker(jule::Ptr<_1eeda5953_ScopeChecker>);
struct _1eeda5953_ScopeChecker {
	jule::Ptr<_1e02c1d07_Token> _field_called_from = jule::Ptr<_1e02c1d07_Token>();
	jule::Ptr<_1eedca071_Sema> _field_s = jule::Ptr<_1eedca071_Sema>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_owner = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1eeda5953_ScopeChecker> _field_parent = jule::Ptr<_1eeda5953_ScopeChecker>();
	jule::I32 _field_child_index = jule::I32();
	jule::Ptr<_1eee3c842_SymbolTable> _field_table = jule::Ptr<_1eee3c842_SymbolTable>();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_tree = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Ptr<_1eee76b45_TypeKind> _field_result = jule::Ptr<_1eee76b45_TypeKind>();
	jule::U32 _field_it = jule::U32();
	jule::U32 _field_cse = jule::U32();
	jule::Ptr<jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>>();
	jule::I32 _field_i = jule::I32();


	_1eeda5953_ScopeChecker(jule::Ptr<_1e02c1d07_Token> __param_called_from, jule::Ptr<_1eedca071_Sema> __param_s, jule::Ptr<_1ee25b4ad_FnIns> __param_owner, jule::Ptr<_1eeda5953_ScopeChecker> __param_parent, jule::I32 __param_child_index, jule::Ptr<_1eee3c842_SymbolTable> __param_table, jule::Ptr<_1eed8a5a3_Scope> __param_scope, jule::Ptr<_1e02d9ddb_ScopeTree> __param_tree, jule::Ptr<_1eee76b45_TypeKind> __param_result, jule::U32 __param_it, jule::U32 __param_cse, jule::Ptr<jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>> __param_labels, jule::Ptr<jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>> __param_gotos, jule::I32 __param_i): _field_called_from(__param_called_from), _field_s(__param_s), _field_owner(__param_owner), _field_parent(__param_parent), _field_child_index(__param_child_index), _field_table(__param_table), _field_scope(__param_scope), _field_tree(__param_tree), _field_result(__param_result), _field_it(__param_it), _field_cse(__param_cse), _field_labels(__param_labels), _field_gotos(__param_gotos), _field_i(__param_i) {}

	

	_1eeda5953_ScopeChecker(void) = default;

	inline bool operator==(_1eeda5953_ScopeChecker _other) {
		return 
			this->_field_called_from == _other._field_called_from &&
			this->_field_s == _other._field_s &&
			this->_field_owner == _other._field_owner &&
			this->_field_parent == _other._field_parent &&
			this->_field_child_index == _other._field_child_index &&
			this->_field_table == _other._field_table &&
			this->_field_scope == _other._field_scope &&
			this->_field_tree == _other._field_tree &&
			this->_field_result == _other._field_result &&
			this->_field_it == _other._field_it &&
			this->_field_cse == _other._field_cse &&
			this->_field_labels == _other._field_labels &&
			this->_field_gotos == _other._field_gotos &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_1eeda5953_ScopeChecker _other) { return !this->operator==(_other); }


};
inline void _1eedb91b4_check_cdef(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedb94d3_check_typedef(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedb9802_check_derive(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedb9b21_check_namespace(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedb9e40_check_deprecated(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedba25e_check_test(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedba57d_check_directive(_1eedb8bca_DirectiveChecker*,jule::Ptr<_1e02812b1_Directive>&);
inline void _1eedba7c0_check(_1eedb8bca_DirectiveChecker*);
struct _1eedb8bca_DirectiveChecker {
	jule::Ptr<_1eedca071_Sema> _field_s = jule::Ptr<_1eedca071_Sema>();
	jule::Ptr<jule::Slice<jule::Ptr<_1e02812b1_Directive>>> _field_d = jule::Ptr<jule::Slice<jule::Ptr<_1e02812b1_Directive>>>();
	jule::Any _field_o = jule::Any();


	_1eedb8bca_DirectiveChecker(jule::Ptr<_1eedca071_Sema> __param_s, jule::Ptr<jule::Slice<jule::Ptr<_1e02812b1_Directive>>> __param_d, jule::Any __param_o): _field_s(__param_s), _field_d(__param_d), _field_o(__param_o) {}

	

	_1eedb8bca_DirectiveChecker(void) = default;

	inline bool operator==(_1eedb8bca_DirectiveChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_d == _other._field_d &&
			this->_field_o == _other._field_o;
	}

	inline bool operator!=(_1eedb8bca_DirectiveChecker _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc4411_find_package(_1eedc3da0_Package*,jule::Str);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc47b8_select_package(_1eedc3da0_Package*,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>);
inline jule::Ptr<_1eedeb24b_Var> _1eedc4c4c_find_var(_1eedc3da0_Package*,jule::Str,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eedc51d1_find_type_alias(_1eedc3da0_Package*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee242032_Struct> _1eedc5665_find_struct(_1eedc3da0_Package*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2579b5_Fn> _1eedc5ae9_find_fn(_1eedc3da0_Package*,jule::Str,jule::Bool);
inline jule::Ptr<_1eec8627e_Trait> _1eedc5ea1_find_trait(_1eedc3da0_Package*,jule::Str);
inline jule::Ptr<_1eec889ac_Enum> _1eedc6358_find_enum(_1eedc3da0_Package*,jule::Str);
struct _1eedc3da0_Package {
	jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>();


	_1eedc3da0_Package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>> __param_files): _field_files(__param_files) {}

	

	_1eedc3da0_Package(void) = default;

	inline bool operator==(_1eedc3da0_Package _other) {
		return 
			this->_field_files == _other._field_files;
	}

	inline bool operator!=(_1eedc3da0_Package _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedca626_find_package(_1eedca071_Sema*,jule::Str);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedca9cd_select_package(_1eedca071_Sema*,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>);
inline jule::Ptr<_1eedeb24b_Var> _1eedcae62_find_var(_1eedca071_Sema*,jule::Str,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eedcb3e6_find_type_alias(_1eedca071_Sema*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee242032_Struct> _1eedcb87a_find_struct(_1eedca071_Sema*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2579b5_Fn> _1eedcbd0e_find_fn(_1eedca071_Sema*,jule::Str,jule::Bool);
inline jule::Ptr<_1eec8627e_Trait> _1eedcc1b6_find_trait(_1eedca071_Sema*,jule::Str);
inline jule::Ptr<_1eec889ac_Enum> _1eedcc56d_find_enum(_1eedca071_Sema*,jule::Str);
inline jule::Bool _1eedcc9e1_is_flag(_1eedca071_Sema*,jule::I32);
inline void _1eedccd10_set_current_file(_1eedca071_Sema*,jule::Ptr<_1eee3c842_SymbolTable>);
inline void _1eedcd2d8_push_err(_1eedca071_Sema*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1eedcd6d4_push_suggestion(_1eedca071_Sema*,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1eedcdb68_is_accessible_define(_1eedca071_Sema*,jule::Bool,_1e02c1d07_Token);
inline jule::Bool _1eedce1c9_is_duplicated_ident(_1eedca071_Sema*,jule::U32,jule::Str,jule::Bool);
inline void _1eedce5c5_check_directives(jule::Ptr<_1eedca071_Sema>,jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Any);
inline jule::Bool _1eedceb36_check_generic_quantity(_1eedca071_Sema*,jule::I32,jule::I32,_1e02c1d07_Token);
inline jule::Bool _1eedd010e_is_duplicated_import_selection(_1eedca071_Sema*,jule::U32,jule::Str);
inline jule::Any _1eedd0582_get_import_def(_1eedca071_Sema*,jule::Str,jule::Ptr<_1eedc08c4_ImportInfo>&);
inline jule::Bool _1eedd097d_check_import_selections(_1eedca071_Sema*,jule::Ptr<_1eedc08c4_ImportInfo>&);
inline jule::Bool _1eedd0d68_is_use_alias_duplication(_1eedca071_Sema*,jule::Ptr<_1eedc08c4_ImportInfo>&);
inline jule::Bool _1eedd120e_check_import(_1eedca071_Sema*,jule::Ptr<_1eedc08c4_ImportInfo>&);
inline void _1eedd1451_check_imports(_1eedca071_Sema*);
inline void _1eedd1693_impl_file_impls(jule::Ptr<_1eedca071_Sema>);
inline void _1eedd18d5_impl_impls(jule::Ptr<_1eedca071_Sema>);
inline void _1eedd1b27_check_enums(jule::Ptr<_1eedca071_Sema>);
inline jule::Bool _1eedd2188_check_type_with_refers(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eee7b4a7_TypeSymbol>&,jule::Trait<_1eee992c7_Lookup>,jule::Ptr<_1eee8c760_Referencer>);
inline jule::Bool _1eedd261c_check_type(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eee7b4a7_TypeSymbol>&,jule::Trait<_1eee992c7_Lookup>);
inline jule::Ptr<_1eee76b45_TypeKind> _1eedd2ae5_build_type_with_generics(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1e01c3db3_TypeDecl>&,jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>);
inline jule::Ptr<_1eee76b45_TypeKind> _1eedd2e8b_build_type(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1e01c3db3_TypeDecl>&);
inline jule::Ptr<_1eee76b45_TypeKind> _1eedd3343_select_type(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1e01c3db3_TypeDecl>&);
inline jule::Ptr<_1eee45be1_Eval> _1eedd38a4_evalpd(jule::Ptr<_1eedca071_Sema>,jule::Trait<_1eee992c7_Lookup>,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eedeb24b_Var>);
inline jule::Ptr<_1eee45be1_Eval> _1eedd3d38_evalp(jule::Ptr<_1eedca071_Sema>,jule::Trait<_1eee992c7_Lookup>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Ptr<_1eee45be1_Eval> _1eedd41e0_eval(jule::Ptr<_1eedca071_Sema>,jule::Trait<_1eee992c7_Lookup>);
inline jule::Bool _1eedd482d_check_assign_type(jule::Ptr<_1eedca071_Sema>,jule::Bool,jule::Ptr<_1eee76b45_TypeKind>&,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token);
inline jule::Bool _1eedd4dd3_check_type_compatibility(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eee76b45_TypeKind>&,jule::Ptr<_1eee76b45_TypeKind>&,_1e02c1d07_Token&);
inline jule::Ptr<_1eee76b45_TypeKind> _1eedd539a_build_non_generic_type_kind(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1e01c3db3_TypeDecl>&,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>&);
inline void _1eedd56ec_build_fn_non_generic_type_kinds(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Ptr<_1ee25b4ad_FnIns> _1eedd5ad7_get_trait_check_fn_kind(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline jule::Bool _1eedd5e7d_reload_fn_ins_types(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Bool _1eedd6555_check_ref_validity_for_init_expr(jule::Ptr<_1eedca071_Sema>,jule::Bool,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token&);
inline jule::Bool _1eedd6cb4_check_validity_for_init_expr(jule::Ptr<_1eedca071_Sema>,jule::Bool,jule::Bool,jule::Ptr<_1eee76b45_TypeKind>&,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token&);
inline jule::Bool _1eedd7248_check_type_alias_decl_kind(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eee75baa_TypeAlias>&,jule::Trait<_1eee992c7_Lookup>);
inline void _1eedd7633_check_type_alias_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eee75baa_TypeAlias>&,jule::Trait<_1eee992c7_Lookup>);
inline void _1eedd7996_check_type_alias_decl_dup(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eee75baa_TypeAlias>&);
inline jule::Bool _1eedd7c60_check_type_alias_decls(jule::Ptr<_1eedca071_Sema>);
inline void _1eedd807e_check_enum_items_dup(_1eedca071_Sema*,jule::Ptr<_1eec889ac_Enum>);
inline void _1eedd839d_check_enum_items_str(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec889ac_Enum>&);
inline void _1eedd86bc_check_enum_items_int(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec889ac_Enum>&);
inline void _1eedd89db_check_enum_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec889ac_Enum>&);
inline jule::Bool _1eedd8cb6_check_enum_decls(jule::Ptr<_1eedca071_Sema>);
inline jule::Bool _1eedd916d_check_decl_generics(_1eedca071_Sema*,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>&);
inline jule::Bool _1eedd9569_check_fn_decl_params_dup(_1eedca071_Sema*,jule::Ptr<_1ee2579b5_Fn>&);
inline jule::Bool _1eedd9954_check_fn_decl_result_dup(_1eedca071_Sema*,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eedd9c62_check_fn_decl_types(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eedda0c5_check_fn_decl_prototype(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eedda427_check_trait_decl_method(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eedda779_check_trait_decl_methods(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec8627e_Trait>&);
inline void _1eeddaa87_check_trait_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec8627e_Trait>&);
inline jule::Bool _1eeddad62_check_trait_decls(jule::Ptr<_1eedca071_Sema>);
inline jule::Bool _1eeddb33a_check_trait_impl_methods(_1eedca071_Sema*,jule::Ptr<_1eec8627e_Trait>&,jule::Ptr<_1eec8a4d6_Impl>&);
inline jule::Bool _1eeddb7ad_impl_to_struct(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&,jule::Ptr<_1eec8a4d6_Impl>&);
inline void _1eeddbacc_impl_trait(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec8a4d6_Impl>&);
inline void _1eeddbdeb_impl_struct(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec8a4d6_Impl>&);
inline void _1eeddc21a_impl_impl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eec8a4d6_Impl>&);
inline void _1eeddc616_check_var_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eedeb24b_Var>&,jule::Trait<_1eee992c7_Lookup>);
inline void _1eeddc935_check_global_var_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eedeb24b_Var>&);
inline jule::Bool _1eeddcc10_check_global_decls(jule::Ptr<_1eedca071_Sema>);
inline jule::Bool _1eeddd1d8_check_struct_trait_impl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&,jule::Ptr<_1eec8627e_Trait>&);
inline jule::Bool _1eeddd57e_check_struct_impls(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&);
inline jule::Bool _1eeddd936_check_struct_fields(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&);
inline jule::Bool _1eedddd32_check_struct_decl_methods(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&);
inline void _1eedde140_check_struct_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&);
inline jule::Bool _1eedde41a_check_struct_decls(jule::Ptr<_1eedca071_Sema>);
inline void _1eedde739_check_fn_decl(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline jule::Bool _1eeddea14_check_fn_decls(jule::Ptr<_1eedca071_Sema>);
inline void _1eeddeedc_push_cycle_error(_1eedca071_Sema*,jule::Ptr<_1ee242032_Struct>&,jule::Ptr<_1ee242032_Struct>&,jule::Str&);
inline jule::Bool _1eede054d_check_cross_cycle(_1eedca071_Sema*,jule::Ptr<_1ee242032_Struct>&,jule::Ptr<_1ee242032_Struct>&,jule::Str&);
inline jule::Bool _1eede0b25_check_struct_derive_illegal_cycles(_1eedca071_Sema*,jule::Str,jule::Ptr<_1ee242032_Struct>&,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eede0edd_check_struct_ins_derive_clone(_1eedca071_Sema*,jule::Ptr<_1ee24550d_StructIns>);
inline jule::Bool _1eede13c8_check_struct_derive_clone(_1eedca071_Sema*,jule::Ptr<_1ee242032_Struct>&);
inline jule::Bool _1eede1692_check_file_derives(_1eedca071_Sema*);
inline void _1eede18d4_check_package_derives(_1eedca071_Sema*);
inline void _1eede1b26_check_package_decls(jule::Ptr<_1eedca071_Sema>);
inline void _1eede2066_check_data_for_type_inference(_1eedca071_Sema*,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token&);
inline void _1eede2374_check_var(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eedeb24b_Var>&);
inline void _1eede2770_check_type_var(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1eedeb24b_Var>&,jule::Trait<_1eee992c7_Lookup>);
inline void _1eede29b2_check_global_types(jule::Ptr<_1eedca071_Sema>);
inline jule::Ptr<_1ee25b4ad_FnIns> _1eede2e46_ready_to_check_fn(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee24550d_StructIns>&,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eede3342_check_type_method(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee24550d_StructIns>&,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eede3661_check_field_defaults(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Ptr<_1ee25b4ad_FnIns> _1eede3bc2_check_struct_ins_op(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee24550d_StructIns>&,jule::Ptr<_1ee2579b5_Fn>&,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>);
inline void _1eede3ee1_check_struct_ins(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee24550d_StructIns>&);
inline void _1eede4310_check_type_struct(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&);
inline void _1eede4552_check_struct_types(jule::Ptr<_1eedca071_Sema>);
inline void _1eede48b5_check_struct_ins_operators(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee24550d_StructIns>);
inline void _1eede4c17_check_type_struct_operators(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee242032_Struct>&);
inline void _1eede4e8c_check_struct_types_operators(jule::Ptr<_1eedca071_Sema>);
inline void _1eede529a_check_rets(_1eedca071_Sema*,jule::Ptr<_1ee25b4ad_FnIns>&);
inline void _1eede5696_check_fn_ins_sc(_1eedca071_Sema*,jule::Ptr<_1ee25b4ad_FnIns>&,jule::Ptr<_1eeda5953_ScopeChecker>&);
inline void _1eede5a92_check_fn_ins_caller(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee25b4ad_FnIns>&,jule::Ptr<_1e02c1d07_Token>);
inline void _1eede5db1_check_fn_ins(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee25b4ad_FnIns>&);
inline void _1eede61d0_check_type_fn(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eede64ee_check_test_fn(_1eedca071_Sema*,jule::Ptr<_1ee25b4ad_FnIns>&);
inline void _1eede681d_precheck_type_fn(jule::Ptr<_1eedca071_Sema>,jule::Ptr<_1ee2579b5_Fn>&);
inline void _1eede6a60_precheck_fn_types(jule::Ptr<_1eedca071_Sema>);
inline void _1eede6ca2_check_fn_types(jule::Ptr<_1eedca071_Sema>);
inline void _1eede6ee4_check_package_types(jule::Ptr<_1eedca071_Sema>);
inline void _1eede7236_set_file_sema_fields(jule::Ptr<_1eedca071_Sema>);
inline void _1eede7478_set_sema_fields(jule::Ptr<_1eedca071_Sema>);
inline void _1eede7797_check(jule::Ptr<_1eedca071_Sema>,jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&);
struct _1eedca071_Sema {
	jule::Slice<_208de2238_Log> _field_errors = jule::Slice<_208de2238_Log>();
	jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>();
	jule::Ptr<_1eee3c842_SymbolTable> _field_file = jule::Ptr<_1eee3c842_SymbolTable>();
	jule::I32 _field_flags = 0LL;


	_1eedca071_Sema(jule::Slice<_208de2238_Log> __param_errors, jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>> __param_files, jule::Ptr<_1eee3c842_SymbolTable> __param_file, jule::I32 __param_flags): _field_errors(__param_errors), _field_files(__param_files), _field_file(__param_file), _field_flags(__param_flags) {}

	

	_1eedca071_Sema(void) = default;

	inline bool operator==(_1eedca071_Sema _other) {
		return 
			this->_field_errors == _other._field_errors &&
			this->_field_files == _other._field_files &&
			this->_field_file == _other._field_file &&
			this->_field_flags == _other._field_flags;
	}

	inline bool operator!=(_1eedca071_Sema _other) { return !this->operator==(_other); }


};
inline _1eede7be8_MissingRetChecker static__1eede80e4_new(void);
inline jule::Bool _1eede8468_check_conditional(_1eede7be8_MissingRetChecker*,jule::Ptr<_1eeda30d2_Conditional>);
inline jule::Bool _1eede8820_check_match(_1eede7be8_MissingRetChecker*,jule::Ptr<_1eeda4952_Match>);
inline jule::Bool _1eede8bc7_check_inf_iter(_1eede7be8_MissingRetChecker*,jule::Ptr<_1eeda3302_InfIter>);
inline jule::Bool _1eede907e_check_scope(_1eede7be8_MissingRetChecker*,jule::Ptr<_1eed8a5a3_Scope>);
inline jule::Bool _1eede9436_check(_1eede7be8_MissingRetChecker*,jule::Ptr<_1eed8a5a3_Scope>);
struct _1eede7be8_MissingRetChecker {
	jule::Slice<jule::U32> _field_breaked = jule::Slice<jule::U32>();
	jule::Bool _field_falled = jule::Bool();


	_1eede7be8_MissingRetChecker(jule::Slice<jule::U32> __param_breaked, jule::Bool __param_falled): _field_breaked(__param_breaked), _field_falled(__param_falled) {}

	

	_1eede7be8_MissingRetChecker(void) = default;

	inline bool operator==(_1eede7be8_MissingRetChecker _other) {
		return 
			this->_field_breaked == _other._field_breaked &&
			this->_field_falled == _other._field_falled;
	}

	inline bool operator!=(_1eede7be8_MissingRetChecker _other) { return !this->operator==(_other); }


};
struct _1eede9e3c_IterRelation {
	jule::Ptr<_1eedeb24b_Var> _field_range = jule::Ptr<_1eedeb24b_Var>();


	_1eede9e3c_IterRelation(jule::Ptr<_1eedeb24b_Var> __param_range): _field_range(__param_range) {}

	

	_1eede9e3c_IterRelation(void) = default;

	inline bool operator==(_1eede9e3c_IterRelation _other) {
		return 
			this->_field_range == _other._field_range;
	}

	inline bool operator!=(_1eede9e3c_IterRelation _other) { return !this->operator==(_other); }


};
inline jule::Bool static__1eedec549_dispose(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eedec857_to_str(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eedecc42_logical(jule::Ptr<_1ee2579b5_Fn>&,jule::Str);
inline jule::Bool static__1eeded050_eq(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eeded35d_gt(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eeded66b_gt_eq(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eeded979_lt(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eededc87_lt_eq(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eedee172_result(jule::Ptr<_1ee2579b5_Fn>&,jule::Str);
inline jule::Bool static__1eedee480_shl(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eedee78d_shr(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eedeea9b_add(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eedeeda9_sub(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee001b7_div(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee004c5_mul(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee007d3_mod(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee00ae1_bit_and(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee00dee_bit_or(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee0120c_bit_xor(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee015e7_unary(jule::Ptr<_1ee2579b5_Fn>&,jule::Str);
inline jule::Bool static__1eee01905_neg(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee01c13_pos(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee02021_bit_not(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee0240b_assign(jule::Ptr<_1ee2579b5_Fn>&,jule::Str);
inline jule::Bool static__1eee02719_add_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee02a27_sub_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee02d35_div_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee03143_mul_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee03451_mod_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee0375e_shl_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee03a6c_shr_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee03d7a_bit_or_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee04188_bit_and_assign(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Bool static__1eee04496_bit_xor_assign(jule::Ptr<_1ee2579b5_Fn>);
struct _1eedebd62_FuncPattern {
	

	_1eedebd62_FuncPattern(void) = default;

	inline bool operator==(_1eedebd62_FuncPattern _other) { return true; }

	inline bool operator!=(_1eedebd62_FuncPattern _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eedeb24b_Var> _1eee382aa_build_var(_1eee37c6b_RangeChecker*,jule::Ptr<_1e02daea8_VarDecl>&);
inline void _1eee384ec_set_size_key(_1eee37c6b_RangeChecker*);
inline void _1eee38a19_check_range_expr_validity(_1eee37c6b_RangeChecker*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eedeb24b_Var>&,jule::Ptr<_1eee76b45_TypeKind>&);
inline void _1eee38c4a_check_slice(_1eee37c6b_RangeChecker*);
inline void _1eee38e8c_check_array(_1eee37c6b_RangeChecker*);
inline void _1eee391ce_check_map_key_a(_1eee37c6b_RangeChecker*);
inline void _1eee39421_check_map_key_b(_1eee37c6b_RangeChecker*);
inline void _1eee39663_check_map(_1eee37c6b_RangeChecker*);
inline void _1eee398a5_check_str(_1eee37c6b_RangeChecker*);
inline jule::Bool _1eee39b80_check(_1eee37c6b_RangeChecker*);
struct _1eee37c6b_RangeChecker {
	jule::Ptr<_1eeda5953_ScopeChecker> _field_sc = jule::Ptr<_1eeda5953_ScopeChecker>();
	jule::Ptr<_1e02dc4a4_RangeKind> _field_rang = jule::Ptr<_1e02dc4a4_RangeKind>();
	jule::Ptr<_1eeda3742_RangeIter> _field_kind = jule::Ptr<_1eeda3742_RangeIter>();
	jule::Ptr<_1eee43b89_Data> _field_d = jule::Ptr<_1eee43b89_Data>();


	_1eee37c6b_RangeChecker(jule::Ptr<_1eeda5953_ScopeChecker> __param_sc, jule::Ptr<_1e02dc4a4_RangeKind> __param_rang, jule::Ptr<_1eeda3742_RangeIter> __param_kind, jule::Ptr<_1eee43b89_Data> __param_d): _field_sc(__param_sc), _field_rang(__param_rang), _field_kind(__param_kind), _field_d(__param_d) {}

	

	_1eee37c6b_RangeChecker(void) = default;

	inline bool operator==(_1eee37c6b_RangeChecker _other) {
		return 
			this->_field_sc == _other._field_sc &&
			this->_field_rang == _other._field_rang &&
			this->_field_kind == _other._field_kind &&
			this->_field_d == _other._field_d;
	}

	inline bool operator!=(_1eee37c6b_RangeChecker _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee3cde7_find_package(_1eee3c842_SymbolTable*,jule::Str);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee3d29e_select_package(_1eee3c842_SymbolTable*,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>);
inline jule::Ptr<_1eedeb24b_Var> _1eee3d733_find_var(_1eee3c842_SymbolTable*,jule::Str,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee3dbb7_find_type_alias(_1eee3c842_SymbolTable*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee242032_Struct> _1eee3e14b_find_struct(_1eee3c842_SymbolTable*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2579b5_Fn> _1eee3e5d0_find_fn(_1eee3c842_SymbolTable*,jule::Str,jule::Bool);
inline jule::Ptr<_1eec8627e_Trait> _1eee3e987_find_trait(_1eee3c842_SymbolTable*,jule::Str);
inline jule::Ptr<_1eec889ac_Enum> _1eee3ed3e_find_enum(_1eee3c842_SymbolTable*,jule::Str);
inline jule::Ptr<_1eedeb24b_Var> _1eee404c1___find_var(_1eee3c842_SymbolTable*,jule::Str,jule::Bool,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee40a32___find_type_alias(_1eee3c842_SymbolTable*,jule::Str,jule::Bool,jule::Bool);
inline jule::Any _1eee40eb6_def_by_ident(_1eee3c842_SymbolTable*,jule::Str,jule::Bool);
inline jule::Bool _1eee41527_is_duplicated_ident(_1eee3c842_SymbolTable*,jule::U32,jule::Str,jule::Bool);
struct _1eee3c842_SymbolTable {
	jule::Ptr<_1e02c7e51_File> _field_file = jule::Ptr<_1e02c7e51_File>();
	jule::Slice<_1ee261518_Pass> _field_passes = jule::Slice<_1ee261518_Pass>();
	jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>>();
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _field_vars = jule::Slice<jule::Ptr<_1eedeb24b_Var>>();
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>();
	jule::Slice<jule::Ptr<_1ee242032_Struct>> _field_structs = jule::Slice<jule::Ptr<_1ee242032_Struct>>();
	jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _field_funcs = jule::Slice<jule::Ptr<_1ee2579b5_Fn>>();
	jule::Slice<jule::Ptr<_1eec8627e_Trait>> _field_traits = jule::Slice<jule::Ptr<_1eec8627e_Trait>>();
	jule::Slice<jule::Ptr<_1eec889ac_Enum>> _field_enums = jule::Slice<jule::Ptr<_1eec889ac_Enum>>();
	jule::Slice<jule::Ptr<_1eec8a4d6_Impl>> _field_impls = jule::Slice<jule::Ptr<_1eec8a4d6_Impl>>();


	_1eee3c842_SymbolTable(jule::Ptr<_1e02c7e51_File> __param_file, jule::Slice<_1ee261518_Pass> __param_passes, jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> __param_imports, jule::Slice<jule::Ptr<_1eedeb24b_Var>> __param_vars, jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ptr<_1ee242032_Struct>> __param_structs, jule::Slice<jule::Ptr<_1ee2579b5_Fn>> __param_funcs, jule::Slice<jule::Ptr<_1eec8627e_Trait>> __param_traits, jule::Slice<jule::Ptr<_1eec889ac_Enum>> __param_enums, jule::Slice<jule::Ptr<_1eec8a4d6_Impl>> __param_impls): _field_file(__param_file), _field_passes(__param_passes), _field_imports(__param_imports), _field_vars(__param_vars), _field_type_aliases(__param_type_aliases), _field_structs(__param_structs), _field_funcs(__param_funcs), _field_traits(__param_traits), _field_enums(__param_enums), _field_impls(__param_impls) {}

	

	_1eee3c842_SymbolTable(void) = default;

	inline bool operator==(_1eee3c842_SymbolTable _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_passes == _other._field_passes &&
			this->_field_imports == _other._field_imports &&
			this->_field_vars == _other._field_vars &&
			this->_field_type_aliases == _other._field_type_aliases &&
			this->_field_structs == _other._field_structs &&
			this->_field_funcs == _other._field_funcs &&
			this->_field_traits == _other._field_traits &&
			this->_field_enums == _other._field_enums &&
			this->_field_impls == _other._field_impls;
	}

	inline bool operator!=(_1eee3c842_SymbolTable _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eee440da_is_nil(_1eee43b89_Data*);
inline jule::Bool _1eee443b5_is_void(_1eee43b89_Data*);
inline jule::Bool _1eee44690_is_const(_1eee43b89_Data*);
inline jule::Bool _1eee44a47_good_operand(_1eee43b89_Data*,jule::Ptr<_1eee43b89_Data>&);
struct _1eee43b89_Data {
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee76b45_TypeKind> _field_cast_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_1eed1e24b_Const> _field_constant = jule::Ptr<_1eed1e24b_Const>();


	_1eee43b89_Data(jule::Ptr<_1eee76b45_TypeKind> __param_kind, jule::Ptr<_1eee76b45_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ptr<_1eed1e24b_Const> __param_constant): _field_kind(__param_kind), _field_cast_kind(__param_cast_kind), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_lvalue(__param_lvalue), _field_is_rune(__param_is_rune), _field_model(__param_model), _field_decl(__param_decl), _field_constant(__param_constant) {}

	

	_1eee43b89_Data(void) = default;

	inline bool operator==(_1eee43b89_Data _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_cast_kind == _other._field_cast_kind &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_reference == _other._field_reference &&
			this->_field_lvalue == _other._field_lvalue &&
			this->_field_is_rune == _other._field_is_rune &&
			this->_field_model == _other._field_model &&
			this->_field_decl == _other._field_decl &&
			this->_field_constant == _other._field_constant;
	}

	inline bool operator!=(_1eee43b89_Data _other) { return !this->operator==(_other); }


};
struct _1eee44e98_Value {
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1eee43b89_Data> _field_data = jule::Ptr<_1eee43b89_Data>();


	_1eee44e98_Value(jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Ptr<_1eee43b89_Data> __param_data): _field_expr(__param_expr), _field_data(__param_data) {}

	

	_1eee44e98_Value(void) = default;

	inline bool operator==(_1eee44e98_Value _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_1eee44e98_Value _other) { return !this->operator==(_other); }


};
inline void _1eee462c9_push_err(_1eee45be1_Eval*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1eee466c5_push_suggestion(_1eee45be1_Eval*,jule::Str,jule::Slice<jule::Any>);
inline void _1eee46917_allow_builtin(_1eee45be1_Eval*);
inline void _1eee46b59_disallow_builtin(_1eee45be1_Eval*);
inline jule::Bool _1eee46e34_is_unsafe(_1eee45be1_Eval*);
inline jule::Bool _1eee4720e_is_global(_1eee45be1_Eval*);
inline jule::Bool _1eee475b6_apply_numeric_prefix(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee47891_lit_nil(_1eee45be1_Eval*);
inline jule::Ptr<_1eee43b89_Data> _1eee47c48_lit_str(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee48100_lit_bool(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee484a7_lit_rune(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee4885e_lit_float(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee48c16_lit_int(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee490bd_lit_num(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee49475_eval_lit(_1eee45be1_Eval*,jule::Ptr<_1e0182404_LitExpr>);
inline jule::Any _1eee4982c_find_builtins(_1eee45be1_Eval*,jule::Str);
inline jule::Any _1eee49cb1_get_def(_1eee45be1_Eval*,jule::Str,jule::Bool);
inline void _1eee4a0d0_push_reference(_1eee45be1_Eval*,jule::Ptr<_1ee25edda_ReferenceStack>&);
inline void _1eee4a3ee_push_reference_to_fn(_1eee45be1_Eval*,jule::Ptr<_1ee25b4ad_FnIns>&);
inline void _1eee4a71d_push_reference_to_var(_1eee45be1_Eval*,jule::Ptr<_1eedeb24b_Var>&);
inline void _1eee4aa81_push_reference_to_struct(_1eee45be1_Eval*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Ptr<_1eee43b89_Data> _1eee4ae27___eval_enum(_1eee45be1_Eval*,jule::Ptr<_1eec889ac_Enum>);
inline jule::Ptr<_1eee43b89_Data> _1eee4b3ab_eval_enum(_1eee45be1_Eval*,jule::Ptr<_1eec889ac_Enum>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4b763___eval_struct(_1eee45be1_Eval*,jule::Ptr<_1ee24550d_StructIns>);
inline jule::Ptr<_1eee43b89_Data> _1eee4bbe7_eval_struct(_1eee45be1_Eval*,jule::Ptr<_1ee24550d_StructIns>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4c09e_eval_fn_ins(_1eee45be1_Eval*,jule::Ptr<_1ee25b4ad_FnIns>);
inline void _1eee4c49a_check_deprecated(_1eee45be1_Eval*,jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4c92e_eval_fn(_1eee45be1_Eval*,jule::Ptr<_1ee2579b5_Fn>,_1e02c1d07_Token);
inline void _1eee4ce4b_push_illegal_cycle_error(_1eee45be1_Eval*,jule::Ptr<_1eedeb24b_Var>&,jule::Ptr<_1eedeb24b_Var>&,jule::Str&);
inline jule::Bool _1eee4d3be_check_cross_cycle(_1eee45be1_Eval*,jule::Ptr<_1eedeb24b_Var>&,jule::Str&);
inline jule::Bool _1eee4d853_check_illegal_cycles(_1eee45be1_Eval*,jule::Ptr<_1eedeb24b_Var>&,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4dcd7_eval_var(_1eee45be1_Eval*,jule::Ptr<_1eedeb24b_Var>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4e26b_eval_type_alias(_1eee45be1_Eval*,jule::Ptr<_1eee75baa_TypeAlias>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4e700_eval_def(_1eee45be1_Eval*,jule::Any,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee4eaa7_eval_ident(_1eee45be1_Eval*,jule::Ptr<_1e0182a64_IdentExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee4ee5e_eval_unary(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e0182c84_UnaryExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee50316_eval_variadic(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e0182ea4_VariadicExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee506bd_eval_unsafe(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e0182624_UnsafeExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee50a75_eval_arr(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d8758_SliceExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee51009_eval_exp_slc(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d8758_SliceExpr>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Ptr<_1eee43b89_Data> _1eee513b1_eval_slice_expr(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d8758_SliceExpr>);
inline void _1eee51801_check_integer_indexing_by_data(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token);
inline void _1eee51cb8_indexing_ptr(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline void _1eee52291_indexing_arr(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline void _1eee52769_indexing_slc(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline void _1eee52c42_indexing_map(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline void _1eee5321a_indexing_str(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline void _1eee536e3_to_indexing(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline jule::Bool _1eee53bbb_push_generics_from_index_data(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee54183_eval_ident_decl_from_indexing(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e01821c3_IndexingExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee54529_eval_indexing(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e01821c3_IndexingExpr>);
inline std::tuple<jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1eee43b89_Data>> _1eee548d1_eval_slicing_exprs(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d8deb_SlicingExpr>&);
inline void _1eee54c00_slicing_arr(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee551c8_slicing_str(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee5577d_check_slicing(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1e02d8deb_SlicingExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee55b35_eval_slicing(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d8deb_SlicingExpr>);
inline void _1eee5610d_cast_ptr(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee565d6_cast_struct(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee56aae_cast_ref(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee57087_cast_slc(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee57483_cast_str(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee5795b_cast_int(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee57e34_cast_num(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee5840c_cast_prim(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline void _1eee58808_cast_constant(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee58dad_eval_cast_by_type_n_data(_1eee45be1_Eval*,jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee59254_eval_cast(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7328_CastExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee5960b_eval_ns_selection(_1eee45be1_Eval*,jule::Ptr<_1e02d7548_NsSelectionExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee59bb1_eval_struct_lit_explicit(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1ee24550d_StructIns>,jule::Slice<jule::Ptr<_1e0181a63_Expr>>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5a057_eval_struct_lit(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d80e8_StructLit>);
inline jule::Ptr<_1eee43b89_Data> _1eee5a40e_eval_type(_1eee45be1_Eval*,jule::Ptr<_1e01c3db3_TypeDecl>);
inline void _1eee5a80a_call_type_fn(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _1eee5ac8e_check_fn_call_generics(_1eee45be1_Eval*,jule::Ptr<_1ee25b4ad_FnIns>,jule::Ptr<_1e02d7ba8_FnCallExpr>);
inline void _1eee5b18a_call_builtin_fn(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee5b5ca_check_fn_of_concurrent_call(_1eee45be1_Eval*,jule::Ptr<_1ee25b4ad_FnIns>&,_1e02c1d07_Token);
inline void _1eee5bad6_process_exceptional_handler(_1eee45be1_Eval*,jule::Ptr<_1ee25b4ad_FnIns>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee5bec1_call_fn(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee5c378_eval_fn_call(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7ba8_FnCallExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee5c80c_eval_enum_static(_1eee45be1_Eval*,jule::Ptr<_1eec889ac_Enum>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5cc91_eval_struct_static(_1eee45be1_Eval*,jule::Ptr<_1ee24550d_StructIns>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5d302_eval_trait_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1eec8627e_Trait>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5d940_eval_struct_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1ee24550d_StructIns>,jule::Ptr<_1e02d7768_SubIdentExpr>,jule::Bool);
inline jule::Ptr<_1eee43b89_Data> _1eee5ddc4_eval_slice_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5e358_eval_array_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5e7dc_eval_map_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee5ec71_eval_str_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee60128_eval_int_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee604d0_eval_uint_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee60887_eval_i8_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee60c3e_eval_i16_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee610e6_eval_i32_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee6149d_eval_i64_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee61855_eval_u8_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee61c0c_eval_u16_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee620b4_eval_u32_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee6246b_eval_u64_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee62823_eval_f32_type_tatic(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee62bca_eval_f64_type_static(_1eee45be1_Eval*,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee6315e_eval_prim_static(_1eee45be1_Eval*,jule::Str,_1e02c1d07_Token);
inline jule::Ptr<_1eee43b89_Data> _1eee635e3_eval_type_static(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1e02d7768_SubIdentExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee63a77_eval_obj_sub_ident(_1eee45be1_Eval*,jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1e02d7768_SubIdentExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee63e2e_eval_sub_ident(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7768_SubIdentExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee642d6_eval_tuple(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e0181ea3_TupleExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee6476a_eval_map(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1eee832d3_Map>,jule::Ptr<_1e02d8318_BraceLit>);
inline jule::Ptr<_1eee43b89_Data> _1eee64b22_eval_brace_lit(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d8318_BraceLit>);
inline jule::Ptr<_1eee43b89_Data> _1eee64ec9_eval_anon_fn(_1eee45be1_Eval*,jule::Ptr<_1e02da32b_FnDecl>);
inline jule::Ptr<_1eee43b89_Data> _1eee65381_eval_binop(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e02d7988_BinopExpr>);
inline jule::Ptr<_1eee43b89_Data> _1eee65738_eval_expr_kind(jule::Ptr<_1eee45be1_Eval>,jule::Any);
inline jule::Ptr<_1eee43b89_Data> _1eee65ae0_eval(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e0181a63_Expr>);
inline jule::Ptr<_1eee43b89_Data> _1eee65e97_eval_expr(jule::Ptr<_1eee45be1_Eval>,jule::Ptr<_1e0181a63_Expr>);
struct _1eee45be1_Eval {
	jule::Ptr<_1eedca071_Sema> _field_s = jule::Ptr<_1eedca071_Sema>();
	jule::Trait<_1eee992c7_Lookup> _field_lookup = jule::Trait<_1eee992c7_Lookup>();
	jule::Ptr<_1eee76b45_TypeKind> _field_prefix = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_1eedeb24b_Var> _field_owner = jule::Ptr<_1eedeb24b_Var>();
	jule::Ptr<_1ee2449b3_FieldIns> _field_field = jule::Ptr<_1ee2449b3_FieldIns>();
	jule::Bool _field_arg = jule::Bool();


	_1eee45be1_Eval(jule::Ptr<_1eedca071_Sema> __param_s, jule::Trait<_1eee992c7_Lookup> __param_lookup, jule::Ptr<_1eee76b45_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Bool __param_immutable, jule::Bool __param_ignored, jule::Bool __param_dis_builtin, jule::Ptr<_1eedeb24b_Var> __param_owner, jule::Ptr<_1ee2449b3_FieldIns> __param_field, jule::Bool __param_arg): _field_s(__param_s), _field_lookup(__param_lookup), _field_prefix(__param_prefix), _field_unsafety(__param_unsafety), _field_immutable(__param_immutable), _field_ignored(__param_ignored), _field_dis_builtin(__param_dis_builtin), _field_owner(__param_owner), _field_field(__param_field), _field_arg(__param_arg) {}

	

	_1eee45be1_Eval(void) = default;

	inline bool operator==(_1eee45be1_Eval _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_lookup == _other._field_lookup &&
			this->_field_prefix == _other._field_prefix &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_immutable == _other._field_immutable &&
			this->_field_ignored == _other._field_ignored &&
			this->_field_dis_builtin == _other._field_dis_builtin &&
			this->_field_owner == _other._field_owner &&
			this->_field_field == _other._field_field &&
			this->_field_arg == _other._field_arg;
	}

	inline bool operator!=(_1eee45be1_Eval _other) { return !this->operator==(_other); }


};
inline _1eee664e7_UnaryEval static__1eee66a14_new(jule::Ptr<_1eee45be1_Eval>);
inline void _1eee66c56_minus(_1eee664e7_UnaryEval*);
inline void _1eee66e98_plus(_1eee664e7_UnaryEval*);
inline void _1eee671da_caret(_1eee664e7_UnaryEval*);
inline void _1eee6742c_excl(_1eee664e7_UnaryEval*);
inline void _1eee6766e_star(_1eee664e7_UnaryEval*);
inline void _1eee678b1_amper(_1eee664e7_UnaryEval*);
inline void _1eee67b03_type_decl(_1eee664e7_UnaryEval*);
inline void _1eee67d45_eval_data(_1eee664e7_UnaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee681b9_eval(_1eee664e7_UnaryEval*,jule::Ptr<_1e0182c84_UnaryExpr>);
struct _1eee664e7_UnaryEval {
	jule::Ptr<_1eee45be1_Eval> _field_e = jule::Ptr<_1eee45be1_Eval>();
	jule::Ptr<_1eee43b89_Data> _field_d = jule::Ptr<_1eee43b89_Data>();
	jule::Ptr<_1e0182c84_UnaryExpr> _field_u = jule::Ptr<_1e0182c84_UnaryExpr>();


	_1eee664e7_UnaryEval(jule::Ptr<_1eee45be1_Eval> __param_e, jule::Ptr<_1eee43b89_Data> __param_d, jule::Ptr<_1e0182c84_UnaryExpr> __param_u): _field_e(__param_e), _field_d(__param_d), _field_u(__param_u) {}

	

	_1eee664e7_UnaryEval(void) = default;

	inline bool operator==(_1eee664e7_UnaryEval _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_d == _other._field_d &&
			this->_field_u == _other._field_u;
	}

	inline bool operator!=(_1eee664e7_UnaryEval _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee77063_to_str(_1eee76b45_TypeKind*);
inline jule::Bool _1eee7741a_equals(jule::Ptr<_1eee76b45_TypeKind>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1eee77926_cpp_linked(_1eee76b45_TypeKind*);
inline jule::Bool _1eee77c01_is_nil(_1eee76b45_TypeKind*);
inline jule::Bool _1eee77ecb_void(_1eee76b45_TypeKind*);
inline jule::Bool _1eee782a6_mutable(_1eee76b45_TypeKind*);
inline jule::Bool _1eee78581_nil_compatible(_1eee76b45_TypeKind*);
inline jule::Bool _1eee7885b_performs_rc(_1eee76b45_TypeKind*);
inline jule::Bool _1eee78b36_supports_cloning(_1eee76b45_TypeKind*);
inline jule::Bool _1eee78e11_variadicable(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee7bead_Prim> _1eee791db_prim(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee80d19_Sptr> _1eee794b6_sptr(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee89a04_Ptr> _1eee79791_ptr(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eec889ac_Enum> _1eee79a6b_enm(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee88e21_Arr> _1eee79d46_arr(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee818ec_Slc> _1eee7a121_slc(_1eee76b45_TypeKind*);
inline jule::Ptr<_1ee25b4ad_FnIns> _1eee7a3eb_fnc(_1eee76b45_TypeKind*);
inline jule::Ptr<_1ee24550d_StructIns> _1eee7a6c6_strct(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eec8627e_Trait> _1eee7a9a1_trt(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee832d3_Map> _1eee7ac7b_map(_1eee76b45_TypeKind*);
inline jule::Ptr<_1eee82568_Tuple> _1eee7b056_tup(_1eee76b45_TypeKind*);
struct _1eee76b45_TypeKind {
	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_1eee76606_Kind> _field_kind = jule::Trait<_1eee76606_Kind>();


	_1eee76b45_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_generic, jule::Bool __param_variadic, jule::Trait<_1eee76606_Kind> __param_kind): _field_cpp_ident(__param_cpp_ident), _field_generic(__param_generic), _field_variadic(__param_variadic), _field_kind(__param_kind) {}

	

	_1eee76b45_TypeKind(void) = default;

	inline bool operator==(_1eee76b45_TypeKind _other) {
		return 
			this->_field_cpp_ident == _other._field_cpp_ident &&
			this->_field_generic == _other._field_generic &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1eee76b45_TypeKind _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eee7b919_checked(_1eee7b4a7_TypeSymbol*);
inline void _1eee7bb5b_remove_kind(_1eee7b4a7_TypeSymbol*);
struct _1eee7b4a7_TypeSymbol {
	jule::Ptr<_1e01c3db3_TypeDecl> _field_decl = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();


	_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl> __param_decl, jule::Ptr<_1eee76b45_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1eee7b4a7_TypeSymbol(void) = default;

	inline bool operator==(_1eee7b4a7_TypeSymbol _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1eee7b4a7_TypeSymbol _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee7c387_to_str(_1eee7bead_Prim*);
inline jule::Bool _1eee7c73e_equals(jule::Ptr<_1eee7bead_Prim>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1eee7cc17_is_i8(_1eee7bead_Prim*);
inline jule::Bool _1eee7cee2_is_i16(_1eee7bead_Prim*);
inline jule::Bool _1eee7d2bc_is_i32(_1eee7bead_Prim*);
inline jule::Bool _1eee7d597_is_i64(_1eee7bead_Prim*);
inline jule::Bool _1eee7d872_is_u8(_1eee7bead_Prim*);
inline jule::Bool _1eee7db4c_is_u16(_1eee7bead_Prim*);
inline jule::Bool _1eee7de27_is_u32(_1eee7bead_Prim*);
inline jule::Bool _1eee7e202_is_u64(_1eee7bead_Prim*);
inline jule::Bool _1eee7e4cc_is_f32(_1eee7bead_Prim*);
inline jule::Bool _1eee7e7a7_is_f64(_1eee7bead_Prim*);
inline jule::Bool _1eee7ea82_is_int(_1eee7bead_Prim*);
inline jule::Bool _1eee7ed5c_is_uint(_1eee7bead_Prim*);
inline jule::Bool _1eee80137_is_uintptr(_1eee7bead_Prim*);
inline jule::Bool _1eee80412_is_bool(_1eee7bead_Prim*);
inline jule::Bool _1eee806dc_is_str(_1eee7bead_Prim*);
inline jule::Bool _1eee809b7_is_any(_1eee7bead_Prim*);
struct _1eee7bead_Prim {
	jule::Str _field_kind = jule::Str();


	_1eee7bead_Prim(jule::Str __param_kind): _field_kind(__param_kind) {}

	

	_1eee7bead_Prim(void) = default;

	inline bool operator==(_1eee7bead_Prim _other) {
		return 
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1eee7bead_Prim _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee811e3_to_str(_1eee80d19_Sptr*);
inline jule::Bool _1eee8159a_equals(jule::Ptr<_1eee80d19_Sptr>,jule::Ptr<_1eee76b45_TypeKind>);
struct _1eee80d19_Sptr {
	jule::Ptr<_1eee76b45_TypeKind> _field_elem = jule::Ptr<_1eee76b45_TypeKind>();


	_1eee80d19_Sptr(jule::Ptr<_1eee76b45_TypeKind> __param_elem): _field_elem(__param_elem) {}

	

	_1eee80d19_Sptr(void) = default;

	inline bool operator==(_1eee80d19_Sptr _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1eee80d19_Sptr _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee81d5e_to_str(_1eee818ec_Slc*);
inline jule::Bool _1eee82216_equals(jule::Ptr<_1eee818ec_Slc>,jule::Ptr<_1eee76b45_TypeKind>);
struct _1eee818ec_Slc {
	jule::Ptr<_1eee76b45_TypeKind> _field_elem = jule::Ptr<_1eee76b45_TypeKind>();


	_1eee818ec_Slc(jule::Ptr<_1eee76b45_TypeKind> __param_elem): _field_elem(__param_elem) {}

	

	_1eee818ec_Slc(void) = default;

	inline bool operator==(_1eee818ec_Slc _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1eee818ec_Slc _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee829ca_to_str(_1eee82568_Tuple*);
inline jule::Bool _1eee82d82_equals(jule::Ptr<_1eee82568_Tuple>,jule::Ptr<_1eee76b45_TypeKind>);
struct _1eee82568_Tuple {
	jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>();


	_1eee82568_Tuple(jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> __param_types): _field_types(__param_types) {}

	

	_1eee82568_Tuple(void) = default;

	inline bool operator==(_1eee82568_Tuple _other) {
		return 
			this->_field_types == _other._field_types;
	}

	inline bool operator!=(_1eee82568_Tuple _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee836ac_to_str(_1eee832d3_Map*);
inline jule::Bool _1eee8896a_equals(jule::Ptr<_1eee832d3_Map>,jule::Ptr<_1eee76b45_TypeKind>);
struct _1eee832d3_Map {
	jule::Ptr<_1eee76b45_TypeKind> _field_key = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee76b45_TypeKind> _field_val = jule::Ptr<_1eee76b45_TypeKind>();


	_1eee832d3_Map(jule::Ptr<_1eee76b45_TypeKind> __param_key, jule::Ptr<_1eee76b45_TypeKind> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1eee832d3_Map(void) = default;

	inline bool operator==(_1eee832d3_Map _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_1eee832d3_Map _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee892ea_to_str(_1eee88e21_Arr*);
inline jule::Bool _1eee896a2_equals(jule::Ptr<_1eee88e21_Arr>,jule::Ptr<_1eee76b45_TypeKind>);
struct _1eee88e21_Arr {
	jule::Bool _field_auto = jule::Bool();
	jule::I32 _field_n = jule::I32();
	jule::Ptr<_1eee76b45_TypeKind> _field_elem = jule::Ptr<_1eee76b45_TypeKind>();


	_1eee88e21_Arr(jule::Bool __param_auto, jule::I32 __param_n, jule::Ptr<_1eee76b45_TypeKind> __param_elem): _field_auto(__param_auto), _field_n(__param_n), _field_elem(__param_elem) {}

	

	_1eee88e21_Arr(void) = default;

	inline bool operator==(_1eee88e21_Arr _other) {
		return 
			this->_field_auto == _other._field_auto &&
			this->_field_n == _other._field_n &&
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1eee88e21_Arr _other) { return !this->operator==(_other); }


};
inline jule::Str _1eee89dcd_to_str(_1eee89a04_Ptr*);
inline jule::Bool _1eee8a285_equals(jule::Ptr<_1eee89a04_Ptr>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1eee8a64d_is_unsafe(_1eee89a04_Ptr*);
struct _1eee89a04_Ptr {
	jule::Ptr<_1eee76b45_TypeKind> _field_elem = jule::Ptr<_1eee76b45_TypeKind>();


	_1eee89a04_Ptr(jule::Ptr<_1eee76b45_TypeKind> __param_elem): _field_elem(__param_elem) {}

	

	_1eee89a04_Ptr(void) = default;

	inline bool operator==(_1eee89a04_Ptr _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_1eee89a04_Ptr _other) { return !this->operator==(_other); }


};
struct _1eee8c760_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;


	_1eee8c760_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs): _field_ident(__param_ident), _field_owner(__param_owner), _field_refs(__param_refs) {}

	

	_1eee8c760_Referencer(void) = default;

	inline bool operator==(_1eee8c760_Referencer _other) {
		return 
			this->_field_ident == _other._field_ident &&
			this->_field_owner == _other._field_owner &&
			this->_field_refs == _other._field_refs;
	}

	inline bool operator!=(_1eee8c760_Referencer _other) { return !this->operator==(_other); }


};
struct _1e0131271_CompileInfo {
	jule::Bool _field_prod = jule::Bool();
	jule::Bool _field_test = jule::Bool();
	jule::Str _field_compiler = jule::Str("clang", 5);
	jule::Str _field_cpp_std = jule::Str("cpp14", 5);


	_1e0131271_CompileInfo(jule::Bool __param_prod, jule::Bool __param_test, jule::Str __param_compiler, jule::Str __param_cpp_std): _field_prod(__param_prod), _field_test(__param_test), _field_compiler(__param_compiler), _field_cpp_std(__param_cpp_std) {}

	

	_1e0131271_CompileInfo(void) = default;

	inline bool operator==(_1e0131271_CompileInfo _other) {
		return 
			this->_field_prod == _other._field_prod &&
			this->_field_test == _other._field_test &&
			this->_field_compiler == _other._field_compiler &&
			this->_field_cpp_std == _other._field_cpp_std;
	}

	inline bool operator!=(_1e0131271_CompileInfo _other) { return !this->operator==(_other); }


};
inline void _1e013929b_push_err(_1e0164716_DirectiveEval*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1e013a533_split_operans(_1e0164716_DirectiveEval*,jule::Str,jule::Slice<_1e02c1d07_Token>&);
inline jule::Bool _1e013663e_eval_directive_ident(_1e0164716_DirectiveEval*,jule::Str);
inline jule::Bool _1e014ba2d_eval_directive_part(_1e0164716_DirectiveEval*,jule::Slice<_1e02c1d07_Token>);
inline jule::Bool _1e013eda6_eval(_1e0164716_DirectiveEval*);
struct _1e0164716_DirectiveEval {
	jule::Slice<_208de2238_Log> _field_logs = jule::Slice<_208de2238_Log>();
	jule::Ptr<_1e02812b1_Directive> _field_d = jule::Ptr<_1e02812b1_Directive>();
	jule::Slice<jule::Str> _field_vars = jule::Slice<jule::Str>();


	_1e0164716_DirectiveEval(jule::Slice<_208de2238_Log> __param_logs, jule::Ptr<_1e02812b1_Directive> __param_d, jule::Slice<jule::Str> __param_vars): _field_logs(__param_logs), _field_d(__param_d), _field_vars(__param_vars) {}

	

	_1e0164716_DirectiveEval(void) = default;

	inline bool operator==(_1e0164716_DirectiveEval _other) {
		return 
			this->_field_logs == _other._field_logs &&
			this->_field_d == _other._field_d &&
			this->_field_vars == _other._field_vars;
	}

	inline bool operator!=(_1e0164716_DirectiveEval _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1ed1dc40c_JuleImporter> static__1ed160aab_new(_1e0131271_CompileInfo);
inline jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> _1ed1d7281_all_packages(_1ed1dc40c_JuleImporter*);
inline void _1ed1d8e64_set_mod_path(_1ed1dc40c_JuleImporter*,jule::Str);
inline jule::Str _1ed1daa8c_get_mod_path(_1ed1dc40c_JuleImporter*);
inline jule::Str _1ed224e17_mod_by_id(_1ed1dc40c_JuleImporter*,jule::I32);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1ed2283c1_get_import(_1ed1dc40c_JuleImporter*,jule::Str);
inline std::tuple<jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>,jule::Slice<_208de2238_Log>> _1ed22dd11_import_package(_1ed1dc40c_JuleImporter*,jule::Str,jule::Bool);
inline void _1ed25c416_imported(_1ed1dc40c_JuleImporter*,jule::Ptr<_1eedc08c4_ImportInfo>);
inline std::tuple<jule::Bool,jule::Slice<_208de2238_Log>> _1ed2b3e2e_is_pass_build_directives(_1ed1dc40c_JuleImporter*,jule::Ptr<_1e01bcb7b_Ast>&);
struct _1ed1dc40c_JuleImporter {
	jule::Slice<jule::Str> _field_mods = jule::Slice<jule::Str>();
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> _field_pkgs = jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>>();
	jule::Slice<jule::Str> _field_vars = jule::Slice<jule::Str>();


	_1ed1dc40c_JuleImporter(jule::Slice<jule::Str> __param_mods, jule::Str __param_mod, jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> __param_pkgs, jule::Slice<jule::Str> __param_vars): _field_mods(__param_mods), _field_mod(__param_mod), _field_pkgs(__param_pkgs), _field_vars(__param_vars) {}

	

	_1ed1dc40c_JuleImporter(void) = default;

	inline bool operator==(_1ed1dc40c_JuleImporter _other) {
		return 
			this->_field_mods == _other._field_mods &&
			this->_field_mod == _other._field_mod &&
			this->_field_pkgs == _other._field_pkgs &&
			this->_field_vars == _other._field_vars;
	}

	inline bool operator!=(_1ed1dc40c_JuleImporter _other) { return !this->operator==(_other); }


};
struct _1ed280cca_OrderedDefines {
	jule::Slice<jule::Ptr<_1ee242032_Struct>> _field_structs = jule::Slice<jule::Ptr<_1ee242032_Struct>>();


	_1ed280cca_OrderedDefines(jule::Slice<jule::Ptr<_1ee242032_Struct>> __param_structs): _field_structs(__param_structs) {}

	

	_1ed280cca_OrderedDefines(void) = default;

	inline bool operator==(_1ed280cca_OrderedDefines _other) {
		return 
			this->_field_structs == _other._field_structs;
	}

	inline bool operator!=(_1ed280cca_OrderedDefines _other) { return !this->operator==(_other); }


};
inline jule::Bool static__1ed30ceab_is_common_ordered_0(jule::Slice<jule::Ptr<_1ee242032_Struct>>&,jule::Ptr<_1ee242032_Struct>);
inline void static__1ed35b207_order_common_0(jule::Slice<jule::Ptr<_1ee242032_Struct>>&);
inline void static__208ebcbd7_order_structures(jule::Slice<jule::Ptr<_1ee242032_Struct>>&);
struct _1ed2ccee2_DefineOrderer {
	

	_1ed2ccee2_DefineOrderer(void) = default;

	inline bool operator==(_1ed2ccee2_DefineOrderer _other) { return true; }

	inline bool operator!=(_1ed2ccee2_DefineOrderer _other) { return !this->operator==(_other); }


};
inline void _1ed2b3835_optimize_child(jule::Ptr<_1ed2dd19a_ScopeDeadCode>,jule::Ptr<_1eed8a5a3_Scope>&);
inline void _1ed2b9033_eliminate_followed(_1ed2dd19a_ScopeDeadCode*);
inline void _1ed2baae5_optimize_stmt(jule::Ptr<_1ed2dd19a_ScopeDeadCode>,jule::Any);
inline void _1e00d3311_optimize_stmts(jule::Ptr<_1ed2dd19a_ScopeDeadCode>);
struct _1ed2dd19a_ScopeDeadCode {
	jule::Ptr<_1ed2dd19a_ScopeDeadCode> _field_parent = jule::Ptr<_1ed2dd19a_ScopeDeadCode>();
	jule::Ptr<_1eed8a5a3_Scope> _field_s = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::I32 _field_i = jule::I32();


	_1ed2dd19a_ScopeDeadCode(jule::Ptr<_1ed2dd19a_ScopeDeadCode> __param_parent, jule::Ptr<_1eed8a5a3_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::I32 __param_i): _field_parent(__param_parent), _field_s(__param_s), _field_stmts(__param_stmts), _field_i(__param_i) {}

	

	_1ed2dd19a_ScopeDeadCode(void) = default;

	inline bool operator==(_1ed2dd19a_ScopeDeadCode _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_s == _other._field_s &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_1ed2dd19a_ScopeDeadCode _other) { return !this->operator==(_other); }


};
inline void static__208e73b7c_reset(void);
inline void static__208e72274_print(jule::Str,jule::Str);
struct _1ed14a546_AnsiEscape {
	

	_1ed14a546_AnsiEscape(void) = default;

	inline bool operator==(_1ed14a546_AnsiEscape _other) { return true; }

	inline bool operator!=(_1ed14a546_AnsiEscape _other) { return !this->operator==(_other); }


};
inline void static__208de9042_log_flat(_208de2238_Log&);
inline void static__208e40330_log_error(_208de2238_Log&);
inline void static__208e47854_log(_208de2238_Log&);
inline void static__208e4903c_print_logs(jule::Slice<_208de2238_Log>&);
struct _1ed1edbd2_Logger {
	

	_1ed1edbd2_Logger(void) = default;

	inline bool operator==(_1ed1edbd2_Logger _other) { return true; }

	inline bool operator!=(_1ed1edbd2_Logger _other) { return !this->operator==(_other); }


};
struct _200563819_UnsafeBinopExprModel {
	jule::Ptr<_1ee247bb4_BinopExprModel> _field_node = jule::Ptr<_1ee247bb4_BinopExprModel>();


	_200563819_UnsafeBinopExprModel(jule::Ptr<_1ee247bb4_BinopExprModel> __param_node): _field_node(__param_node) {}

	

	_200563819_UnsafeBinopExprModel(void) = default;

	inline bool operator==(_200563819_UnsafeBinopExprModel _other) {
		return 
			this->_field_node == _other._field_node;
	}

	inline bool operator!=(_200563819_UnsafeBinopExprModel _other) { return !this->operator==(_other); }


};
struct _200563ad3_UnsafeIndexingExprModel {
	jule::Ptr<_1ee24a9a8_IndexingExprModel> _field_node = jule::Ptr<_1ee24a9a8_IndexingExprModel>();


	_200563ad3_UnsafeIndexingExprModel(jule::Ptr<_1ee24a9a8_IndexingExprModel> __param_node): _field_node(__param_node) {}

	

	_200563ad3_UnsafeIndexingExprModel(void) = default;

	inline bool operator==(_200563ad3_UnsafeIndexingExprModel _other) {
		return 
			this->_field_node == _other._field_node;
	}

	inline bool operator!=(_200563ad3_UnsafeIndexingExprModel _other) { return !this->operator==(_other); }


};
struct _200563e46_PushToSliceExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Ptr<_1ee24a458_SliceExprModel> _field_elems = jule::Ptr<_1ee24a458_SliceExprModel>();


	_200563e46_PushToSliceExprModel(jule::Any __param_dest, jule::Ptr<_1ee24a458_SliceExprModel> __param_elems): _field_dest(__param_dest), _field_elems(__param_elems) {}

	

	_200563e46_PushToSliceExprModel(void) = default;

	inline bool operator==(_200563e46_PushToSliceExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_200563e46_PushToSliceExprModel _other) { return !this->operator==(_other); }


};
struct _200564919_StrInsertBeginExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_expr = jule::Any();


	_200564919_StrInsertBeginExprModel(jule::Any __param_dest, jule::Any __param_expr): _field_dest(__param_dest), _field_expr(__param_expr) {}

	

	_200564919_StrInsertBeginExprModel(void) = default;

	inline bool operator==(_200564919_StrInsertBeginExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_200564919_StrInsertBeginExprModel _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_200565e6a_ScopeOptimizer> static__200566487_new(jule::Ptr<_1eed8a5a3_Scope>);
inline void _2005667a6_set_current_stmt(_200565e6a_ScopeOptimizer*,jule::Any);
inline void _200566ac5_optimize_data(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eee43b89_Data>);
inline void _200566de4_optimize_var(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eedeb24b_Var>);
inline void _200567213_optimize_conditional(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda30d2_Conditional>);
inline void _200567532_optimize_match(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda4952_Match>);
inline void _200567851_optimize_range_iter(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda3742_RangeIter>);
inline void _200567b70_optimize_while_iter(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda3522_WhileIter>);
inline jule::Bool _200568027_substr(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda4512_Assign>);
inline jule::Bool _2005683ce_str_insert(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda4512_Assign>);
inline jule::Bool _200568786_str_assign(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda4512_Assign>);
inline void _200568aa5_optimize_assign(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda4512_Assign>);
inline void _200568dc4_optimize_multi_assign(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda4732_MultiAssign>);
inline void _2005691e3_optimize_ret(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eeda52e3_RetSt>);
inline void _200569512_optimize_stmt(_200565e6a_ScopeOptimizer*,jule::Any);
inline void _200569831_optimize_child(_200565e6a_ScopeOptimizer*,jule::Ptr<_1eed8a5a3_Scope>);
inline void _200569a73_optimize(_200565e6a_ScopeOptimizer*);
struct _200565e6a_ScopeOptimizer {
	jule::I32 _field_i = jule::I32();
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();


	_200565e6a_ScopeOptimizer(jule::I32 __param_i, jule::Ptr<_1eed8a5a3_Scope> __param_scope): _field_i(__param_i), _field_scope(__param_scope) {}

	

	_200565e6a_ScopeOptimizer(void) = default;

	inline bool operator==(_200565e6a_ScopeOptimizer _other) {
		return 
			this->_field_i == _other._field_i &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_200565e6a_ScopeOptimizer _other) { return !this->operator==(_other); }


};
inline void static__20056caa9_optimize(jule::Any&);
inline jule::Bool _20056ce61_str_cond(_20056c548_ExprOptimizer*,jule::Ptr<_1ee247bb4_BinopExprModel>);
inline void _20056d280_binary(_20056c548_ExprOptimizer*,jule::Ptr<_1ee247bb4_BinopExprModel>);
inline void _20056d59e_unary(_20056c548_ExprOptimizer*,jule::Ptr<_1ee248115_UnaryExprModel>);
inline void _20056d8bd_structure_lit(_20056c548_ExprOptimizer*,jule::Ptr<_1ee248a0b_StructLitExprModel>);
inline void _20056dbdc_alloc_structure(_20056c548_ExprOptimizer*,jule::Ptr<_1ee248de6_AllocStructLitExprModel>);
inline void _20056e00b_casting(_20056c548_ExprOptimizer*,jule::Ptr<_1ee249523_CastingExprModel>);
inline void _20056e32a_args(_20056c548_ExprOptimizer*,jule::Slice<jule::Any>);
inline void _20056e649_scope(_20056c548_ExprOptimizer*,jule::Ptr<_1eed8a5a3_Scope>&);
inline void _20056e968_func_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24a007_FnCallExprModel>);
inline void _20056ec87_slice(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24a458_SliceExprModel>);
inline void _2005700a6_array(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24da55_ArrayExprModel>);
inline void _2005703c5_indexing(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24a9a8_IndexingExprModel>);
inline void _2005706e4_anon_func(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24ae09_AnonFnExprModel>);
inline void _200570a13_map(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24b8aa_MapExprModel>);
inline void _200570d32_slicing(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24c009_SlicingExprModel>);
inline void _200571151_trait_sub(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24c658_TraitSubIdentExprModel>);
inline void _200571470_structure_sub(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24d060_StructSubIdentExprModel>);
inline void _20057178e_common_sub(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>);
inline void _200571aad_tuple(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24e8be_TupleExprModel>);
inline void _200571dcc_new_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee250c00_BuiltinNewCallExprModel>);
inline void _2005721eb_out_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>);
inline void _20057251a_outln_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>);
inline void _200572839_panic_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>);
inline void _200572b58_assert_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>);
inline void _200572e77_error_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>);
inline void _200573296_make_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel>);
inline void _2005735b5_append_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>);
inline void _2005738d4_clone_call(_20056c548_ExprOptimizer*,jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>);
inline void _200573c03_sizeof(_20056c548_ExprOptimizer*,jule::Ptr<_1ee252b03_SizeofExprModel>);
inline void _200574022_alignof(_20056c548_ExprOptimizer*,jule::Ptr<_1ee2532a7_AlignofExprModel>);
inline void _200574341_integrated_to_str(_20056c548_ExprOptimizer*,jule::Ptr<_1ee2538d4_IntegratedToStrExprModel>);
inline void _200574583_do(_20056c548_ExprOptimizer*);
struct _20056c548_ExprOptimizer {
	jule::Ptr<jule::Any> _field_model = jule::Ptr<jule::Any>();


	_20056c548_ExprOptimizer(jule::Ptr<jule::Any> __param_model): _field_model(__param_model) {}

	

	_20056c548_ExprOptimizer(void) = default;

	inline bool operator==(_20056c548_ExprOptimizer _other) {
		return 
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_20056c548_ExprOptimizer _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_200575919_Optimizer> static__200575cd2_new(jule::Ptr<_1ed25d4b1_IR>&);
inline void _200576101_optimize_global(_200575919_Optimizer*,jule::Ptr<_1eedeb24b_Var>&);
inline void _200576420_optimize_function(_200575919_Optimizer*,jule::Ptr<_1ee2579b5_Fn>&);
inline void _20057673e_optimize_struct(_200575919_Optimizer*,jule::Ptr<_1ee242032_Struct>&);
inline void _200576a5d_optimize_globals(_200575919_Optimizer*,jule::Ptr<_1eedc3da0_Package>&);
inline void _200576d7c_optimize_functions(_200575919_Optimizer*,jule::Ptr<_1eedc3da0_Package>&);
inline void _20057719b_optimize_structs(_200575919_Optimizer*,jule::Ptr<_1eedc3da0_Package>&);
inline void _2005774ba_optimize_package(_200575919_Optimizer*,jule::Ptr<_1eedc3da0_Package>&);
inline void _20057770c_optimize(_200575919_Optimizer*);
struct _200575919_Optimizer {
	jule::Ptr<_1ed25d4b1_IR> _field_ir = jule::Ptr<_1ed25d4b1_IR>();


	_200575919_Optimizer(jule::Ptr<_1ed25d4b1_IR> __param_ir): _field_ir(__param_ir) {}

	

	_200575919_Optimizer(void) = default;

	inline bool operator==(_200575919_Optimizer _other) {
		return 
			this->_field_ir == _other._field_ir;
	}

	inline bool operator!=(_200575919_Optimizer _other) { return !this->operator==(_other); }


};
inline jule::U64 _2005d90ed_unix(_2005d8b9c_AbsTime*);
struct _2005d8b9c_AbsTime {
	jule::U64 _field_day = jule::U64();
	jule::U64 _field_week_day = jule::U64();
	jule::U64 _field_year_day = jule::U64();
	jule::U64 _field_month = jule::U64();
	jule::U64 _field_year = jule::U64();
	jule::U64 _field_second = jule::U64();
	jule::U64 _field_minute = jule::U64();
	jule::U64 _field_hour = jule::U64();


	_2005d8b9c_AbsTime(jule::U64 __param_day, jule::U64 __param_week_day, jule::U64 __param_year_day, jule::U64 __param_month, jule::U64 __param_year, jule::U64 __param_second, jule::U64 __param_minute, jule::U64 __param_hour): _field_day(__param_day), _field_week_day(__param_week_day), _field_year_day(__param_year_day), _field_month(__param_month), _field_year(__param_year), _field_second(__param_second), _field_minute(__param_minute), _field_hour(__param_hour) {}

	

	_2005d8b9c_AbsTime(void) = default;

	inline bool operator==(_2005d8b9c_AbsTime _other) {
		return 
			this->_field_day == _other._field_day &&
			this->_field_week_day == _other._field_week_day &&
			this->_field_year_day == _other._field_year_day &&
			this->_field_month == _other._field_month &&
			this->_field_year == _other._field_year &&
			this->_field_second == _other._field_second &&
			this->_field_minute == _other._field_minute &&
			this->_field_hour == _other._field_hour;
	}

	inline bool operator!=(_2005d8b9c_AbsTime _other) { return !this->operator==(_other); }


};
inline _2005d9450_Time static__2005d985c_unix(jule::U64);
inline _2005d9450_Time static__2005d9a8d_now(void);
inline jule::U64 _2005da055_unix(_2005d9450_Time*);
inline jule::U64 _2005da330_day(_2005d9450_Time*);
inline jule::U64 _2005da60a_month(_2005d9450_Time*);
inline jule::U64 _2005da8d5_year(_2005d9450_Time*);
inline jule::U64 _2005dabb0_second(_2005d9450_Time*);
inline jule::U64 _2005dae8a_minute(_2005d9450_Time*);
inline jule::U64 _2005db265_hour(_2005d9450_Time*);
inline _2005d8b9c_AbsTime _2005db540_abs(_2005d9450_Time*);
struct _2005d9450_Time {
	jule::U64 _field_sec = jule::U64();


	_2005d9450_Time(jule::U64 __param_sec): _field_sec(__param_sec) {}

	

	_2005d9450_Time(void) = default;

	inline bool operator==(_2005d9450_Time _other) {
		return 
			this->_field_sec == _other._field_sec;
	}

	inline bool operator!=(_2005d9450_Time _other) { return !this->operator==(_other); }


};
inline jule::I64 static__2005dbd37_nanoseconds(jule::I64);
inline jule::I64 static__2005dc145_microseconds(jule::I64);
inline jule::I64 static__2005dc453_milliseconds(jule::I64);
inline jule::I64 static__2005dc761_seconds(jule::I64);
inline jule::I64 static__2005dca6e_minutes(jule::I64);
inline jule::I64 static__2005dcd7c_hours(jule::I64);
struct _2005db892_Duration {
	

	_2005db892_Duration(void) = default;

	inline bool operator==(_2005db892_Duration _other) { return true; }

	inline bool operator!=(_2005db892_Duration _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_20041aeb8_TestCoder> static__200464a8e_new(jule::Ptr<_2005a036c_ObjectCoder>&);
inline jule::Ptr<_1eedc08c4_ImportInfo> _200464c04_find_testing_package(_20041aeb8_TestCoder*);
inline void _200464ee0_append_test(_20041aeb8_TestCoder*,jule::Str&,jule::Ptr<_1ee25b4ad_FnIns>);
inline void _2004652cb_append_package_tests(_20041aeb8_TestCoder*,jule::Str&,jule::Ptr<_1eedc3da0_Package>&);
inline jule::Bool _2004654b8_ready_testing_package(_20041aeb8_TestCoder*);
inline jule::Str _2004656e9_call_tm_reset(_20041aeb8_TestCoder*);
inline jule::Str _200465991_call_tm_failed(_20041aeb8_TestCoder*);
inline jule::Str _200465c6b_call_tm_skipped(_20041aeb8_TestCoder*);
inline void _20046608a_serialize(_20041aeb8_TestCoder*,jule::Str&);
struct _20041aeb8_TestCoder {
	jule::Ptr<_1ee24550d_StructIns> _field_t = jule::Ptr<_1ee24550d_StructIns>();
	jule::Ptr<_1ee2579b5_Fn> _field_tm_reset = jule::Ptr<_1ee2579b5_Fn>();
	jule::Ptr<_1ee2579b5_Fn> _field_tm_failed = jule::Ptr<_1ee2579b5_Fn>();
	jule::Ptr<_1ee2579b5_Fn> _field_tm_skipped = jule::Ptr<_1ee2579b5_Fn>();
	jule::Ptr<_2005a036c_ObjectCoder> _field_oc = jule::Ptr<_2005a036c_ObjectCoder>();


	_20041aeb8_TestCoder(jule::Ptr<_1ee24550d_StructIns> __param_t, jule::Ptr<_1ee2579b5_Fn> __param_tm_reset, jule::Ptr<_1ee2579b5_Fn> __param_tm_failed, jule::Ptr<_1ee2579b5_Fn> __param_tm_skipped, jule::Ptr<_2005a036c_ObjectCoder> __param_oc): _field_t(__param_t), _field_tm_reset(__param_tm_reset), _field_tm_failed(__param_tm_failed), _field_tm_skipped(__param_tm_skipped), _field_oc(__param_oc) {}

	

	_20041aeb8_TestCoder(void) = default;

	inline bool operator==(_20041aeb8_TestCoder _other) {
		return 
			this->_field_t == _other._field_t &&
			this->_field_tm_reset == _other._field_tm_reset &&
			this->_field_tm_failed == _other._field_tm_failed &&
			this->_field_tm_skipped == _other._field_tm_skipped &&
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_20041aeb8_TestCoder _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2004729c0_ScopeCoder> static__2004b8eab_new(jule::Ptr<_2005a036c_ObjectCoder>&);
inline jule::Str _200469962_range_index_iter(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3742_RangeIter>&);
inline jule::Str _2004c84e8_range_hashmap_iter(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3742_RangeIter>&);
inline jule::Str _20046b821_if_case(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda2b92_If>);
inline jule::Str _20046e071_conditional(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda30d2_Conditional>);
inline jule::Str _2004bd444_inf_iter(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3302_InfIter>);
inline jule::Str _2004c2558_while_iter(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3522_WhileIter>);
inline jule::Str _2004c4967_range_iter(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3742_RangeIter>);
inline jule::Str _2004d86a1_cont(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3962_ContSt>);
inline jule::Str _2004e8caa_label(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3da2_Label>);
inline jule::Str _2004ee3cb_goto_st(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda40c2_GotoSt>);
inline jule::Str _20050539e_postfix(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda42e2_Postfix>);
inline jule::Str _200556169_assign(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda4512_Assign>);
inline jule::Str _2005595bd_multi_assign(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda4732_MultiAssign>);
inline jule::Str _2004cbba0_match_expr(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda4952_Match>&);
inline jule::Str _2004ebb26_case(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda4952_Match>,jule::Ptr<_1eeda4da3_Case>);
inline jule::Str _200525765_match_st(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda4952_Match>);
inline jule::Str _200474a38_fall_st(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda50c3_FallSt>);
inline jule::Str _200498bc2_break_st(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda3b82_BreakSt>);
inline jule::Str _2004ac235_ret_with_vars(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda52e3_RetSt>);
inline jule::Str _2004acde5_ret_tuple(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda52e3_RetSt>);
inline jule::Str _2004ea0b9_ret_with_exprs(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda52e3_RetSt>);
inline jule::Str _2004ead12_ret_st(_2004729c0_ScopeCoder*,jule::Ptr<_1eeda52e3_RetSt>);
inline jule::Str _20050229c_ret_with_defaults(_2004729c0_ScopeCoder*,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Str _20050e078_var(_2004729c0_ScopeCoder*,jule::Ptr<_1eedeb24b_Var>);
inline jule::Str _2005188ac_st(_2004729c0_ScopeCoder*,jule::Any);
inline jule::Str _20051977b_scope(_2004729c0_ScopeCoder*,jule::Ptr<_1eed8a5a3_Scope>);
inline jule::Str _20051a53a_func_scope(_2004729c0_ScopeCoder*,jule::Ptr<_1ee25b4ad_FnIns>);
struct _2004729c0_ScopeCoder {
	jule::Ptr<_2005a036c_ObjectCoder> _field_oc = jule::Ptr<_2005a036c_ObjectCoder>();


	_2004729c0_ScopeCoder(jule::Ptr<_2005a036c_ObjectCoder> __param_oc): _field_oc(__param_oc) {}

	

	_2004729c0_ScopeCoder(void) = default;

	inline bool operator==(_2004729c0_ScopeCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_2004729c0_ScopeCoder _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2005213cb_ExprCoder> static__200467cb2_new(jule::Ptr<_2005a036c_ObjectCoder>&);
inline jule::Str _20052218a_string(_2005213cb_ExprCoder*,jule::Ptr<_1eed1e24b_Const>&);
inline jule::Str _2005264be_boolean(_2005213cb_ExprCoder*,jule::Ptr<_1eed1e24b_Const>&);
inline jule::Str _2005271d4_nil_lit(_2005213cb_ExprCoder*);
inline jule::Str _20055add8_ftoa_special_cases(_2005213cb_ExprCoder*,jule::F64&);
inline jule::Str _20055c7ad_float32(_2005213cb_ExprCoder*,jule::Ptr<_1eed1e24b_Const>&);
inline jule::Str _2004c8d56_float64(_2005213cb_ExprCoder*,jule::Ptr<_1eed1e24b_Const>&);
inline jule::Str _200528dea_constant(_2005213cb_ExprCoder*,jule::Ptr<_1eed1e24b_Const>,jule::Bool);
inline jule::Str _200551395_div_by_zero_binary(_2005213cb_ExprCoder*,_1e02c1d07_Token&,jule::Ptr<_1ee247620_OperandExprModel>&,jule::Ptr<_1ee247620_OperandExprModel>&);
inline jule::Str _20046a776_unsafe_binary(_2005213cb_ExprCoder*,jule::Ptr<_1ee247bb4_BinopExprModel>);
inline jule::Str _20055e183_binary(_2005213cb_ExprCoder*,jule::Ptr<_1ee247bb4_BinopExprModel>);
inline jule::Str _200510ac4_var(_2005213cb_ExprCoder*,jule::Ptr<_1eedeb24b_Var>);
inline jule::Str _200510c39_structure(_2005213cb_ExprCoder*,jule::Ptr<_1ee242032_Struct>);
inline jule::Str _200551021_structure_ins(_2005213cb_ExprCoder*,jule::Ptr<_1ee24550d_StructIns>);
inline jule::Str _200551186_unary(_2005213cb_ExprCoder*,jule::Ptr<_1ee248115_UnaryExprModel>);
inline jule::Str _2004b7d89_cpp_structure_lit(_2005213cb_ExprCoder*,jule::Ptr<_1ee248a0b_StructLitExprModel>);
inline jule::Str _2004b7eee_structure_lit(_2005213cb_ExprCoder*,jule::Ptr<_1ee248a0b_StructLitExprModel>);
inline jule::Str _200468cc4_alloc_structure(_2005213cb_ExprCoder*,jule::Ptr<_1ee248de6_AllocStructLitExprModel>);
inline jule::Str _200468e39_casting(_2005213cb_ExprCoder*,jule::Ptr<_1ee249523_CastingExprModel>);
inline jule::Str _20046aa51_args(_2005213cb_ExprCoder*,jule::Slice<jule::Any>);
inline jule::Str _20046ad4d_model_for_call(_2005213cb_ExprCoder*,jule::Any);
inline void _2004c7b35_push_call_inf(_2005213cb_ExprCoder*,jule::Str&,jule::Ptr<_1ee24a007_FnCallExprModel>&);
inline jule::Str _2004c7edc_pure_func_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee24a007_FnCallExprModel>&);
inline jule::Str _20057792c_func_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee24a007_FnCallExprModel>);
inline jule::Str _200577c29_slice(_2005213cb_ExprCoder*,jule::Ptr<_1ee24a458_SliceExprModel>);
inline jule::Str _2005780d1_indexing(_2005213cb_ExprCoder*,jule::Ptr<_1ee24a9a8_IndexingExprModel>);
inline jule::Str _200578488_unsafe_indexing(_2005213cb_ExprCoder*,jule::Ptr<_200563ad3_UnsafeIndexingExprModel>);
inline jule::Str _200578840_anon_func(_2005213cb_ExprCoder*,jule::Ptr<_1ee24ae09_AnonFnExprModel>);
inline jule::Str _200578be7_map(_2005213cb_ExprCoder*,jule::Ptr<_1ee24b8aa_MapExprModel>);
inline jule::Str _20057909e_slicing(_2005213cb_ExprCoder*,jule::Ptr<_1ee24c009_SlicingExprModel>);
inline jule::Str _200579456_trait_sub(_2005213cb_ExprCoder*,jule::Ptr<_1ee24c658_TraitSubIdentExprModel>);
inline jule::Str _20057980d_structure_sub(_2005213cb_ExprCoder*,jule::Ptr<_1ee24d060_StructSubIdentExprModel>);
inline jule::Str _200579bb5_common_ident(_2005213cb_ExprCoder*,jule::Ptr<_1ee24dda7_CommonIdentExprModel>);
inline jule::Str _20057a06c_common_sub(_2005213cb_ExprCoder*,jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>);
inline jule::Str _20057a424_array(_2005213cb_ExprCoder*,jule::Ptr<_1ee24da55_ArrayExprModel>);
inline jule::Str _20057a7cb_func_ins_common(_2005213cb_ExprCoder*,jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Str _20057ab83_func_ins(_2005213cb_ExprCoder*,jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Str _20057b03a_tuple(_2005213cb_ExprCoder*,jule::Ptr<_1ee24e8be_TupleExprModel>);
inline jule::Str _20057b3e2_new_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee250c00_BuiltinNewCallExprModel>);
inline jule::Str _20057b799_out_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>);
inline jule::Str _20057bb51_outln_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>);
inline jule::Str _20057c008_panic_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>);
inline jule::Str _20057c3b0_assert_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>);
inline jule::Str _20057c767_error_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>);
inline jule::Str _20057cb1e_make_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel>);
inline jule::Str _20057cec6_push_to_slice(_2005213cb_ExprCoder*,jule::Ptr<_200563e46_PushToSliceExprModel>);
inline jule::Str _20057d37d_append_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>);
inline jule::Str _20057d735_clone_call(_2005213cb_ExprCoder*,jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>);
inline jule::Str _20057dadc_sizeof(_2005213cb_ExprCoder*,jule::Ptr<_1ee252b03_SizeofExprModel>);
inline jule::Str _20057de94_alignof(_2005213cb_ExprCoder*,jule::Ptr<_1ee2532a7_AlignofExprModel>);
inline jule::Str _20057e34b_rune_lit(_2005213cb_ExprCoder*,jule::Ptr<_1ee253571_RuneExprModel>);
inline jule::Str _20057e703_structure_static(_2005213cb_ExprCoder*,jule::Ptr<_1ee24d626_StructStaticIdentExprModel>);
inline jule::Str _20057eaaa_integrated_to_str(_2005213cb_ExprCoder*,jule::Ptr<_1ee2538d4_IntegratedToStrExprModel>);
inline jule::Str _20057ee62_backend_emit(_2005213cb_ExprCoder*,jule::Ptr<_1ee253d13_BackendEmitExprModel>);
inline jule::Str _200580319_free(_2005213cb_ExprCoder*,jule::Ptr<_1ee254165_FreeExprModel>);
inline jule::Str _2005806c1_mut_slicing(_2005213cb_ExprCoder*,jule::Ptr<_200564430_MutSlicingExprModel>);
inline jule::Str _200580a78_str_insert_begin(_2005213cb_ExprCoder*,jule::Ptr<_200564919_StrInsertBeginExprModel>);
inline jule::Str _200580e30_model(_2005213cb_ExprCoder*,jule::Any);
inline jule::Str _2005812d7_expr(_2005213cb_ExprCoder*,jule::Any);
inline jule::Str _20058168e_val(_2005213cb_ExprCoder*,jule::Ptr<_1eee44e98_Value>);
inline jule::Str _200581a46_init_expr(_2005213cb_ExprCoder*,jule::Ptr<_1eee76b45_TypeKind>);
struct _2005213cb_ExprCoder {
	jule::Ptr<_2005a036c_ObjectCoder> _field_oc = jule::Ptr<_2005a036c_ObjectCoder>();


	_2005213cb_ExprCoder(jule::Ptr<_2005a036c_ObjectCoder> __param_oc): _field_oc(__param_oc) {}

	

	_2005213cb_ExprCoder(void) = default;

	inline bool operator==(_2005213cb_ExprCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_2005213cb_ExprCoder _other) { return !this->operator==(_other); }


};
inline jule::Str static__20058497d_clone_func_decl(jule::Ptr<_1ee242032_Struct>&);
inline jule::Str static__200584c8b_clone_func_def(jule::Ptr<_1ee242032_Struct>&);
struct _2005845d7_DeriveCoder {
	

	_2005845d7_DeriveCoder(void) = default;

	inline bool operator==(_2005845d7_DeriveCoder _other) { return true; }

	inline bool operator!=(_2005845d7_DeriveCoder _other) { return !this->operator==(_other); }


};
inline jule::Str static__2005868a3_to_ident(jule::Str);
inline jule::Str static__200586bb1_addr(jule::U32);
inline jule::Str static__20058709b_to_out(jule::Str,jule::U32);
inline jule::Str static__200587563_to_local(jule::I32,jule::I32,jule::Str);
inline jule::Str static__200587871_func(jule::Ptr<_1ee2579b5_Fn>&);
inline jule::Str static__200587b7e_func_ins(jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Str static__200587e8c_trait_decl(jule::Ptr<_1eec8627e_Trait>);
inline jule::Str static__20058829a_param(jule::Ptr<_1ee255b8e_Param>&);
inline jule::Str static__2005885a8_structure(jule::Ptr<_1ee242032_Struct>&);
inline jule::Str static__2005888b6_structure_ins(jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str static__200588bc4_field(jule::Ptr<_1ee23da34_Field>&);
inline jule::Str static__200588ed2_var(jule::Ptr<_1eedeb24b_Var>);
inline jule::Str static__2005892e0_iter_begin(jule::U32);
inline jule::Str static__2005895ed_iter_end(jule::U32);
inline jule::Str static__20058990b_iter_next(jule::U32);
inline jule::Str static__200589c19_label(jule::Str);
inline jule::Str static__20058a027_match_end(jule::U32);
inline jule::Str static__20058a335_case_begin(jule::U32);
struct _200586496_IdentCoder {
	

	_200586496_IdentCoder(void) = default;

	inline bool operator==(_200586496_IdentCoder _other) { return true; }

	inline bool operator!=(_200586496_IdentCoder _other) { return !this->operator==(_other); }


};
struct _2005bb872_SerializationInfo {
	jule::Str _field_compiler = jule::Str();
	jule::Str _field_compiler_command = jule::Str();


	_2005bb872_SerializationInfo(jule::Str __param_compiler, jule::Str __param_compiler_command): _field_compiler(__param_compiler), _field_compiler_command(__param_compiler_command) {}

	

	_2005bb872_SerializationInfo(void) = default;

	inline bool operator==(_2005bb872_SerializationInfo _other) {
		return 
			this->_field_compiler == _other._field_compiler &&
			this->_field_compiler_command == _other._field_compiler_command;
	}

	inline bool operator!=(_2005bb872_SerializationInfo _other) { return !this->operator==(_other); }


};
struct _20059b775_TraitHash {
	jule::Ptr<_1eec8627e_Trait> _field_t = jule::Ptr<_1eec8627e_Trait>();
	jule::Ptr<_1ee24550d_StructIns> _field_s = jule::Ptr<_1ee24550d_StructIns>();
	jule::I32 _field_i = jule::I32();


	_20059b775_TraitHash(jule::Ptr<_1eec8627e_Trait> __param_t, jule::Ptr<_1ee24550d_StructIns> __param_s, jule::I32 __param_i): _field_t(__param_t), _field_s(__param_s), _field_i(__param_i) {}

	

	_20059b775_TraitHash(void) = default;

	inline bool operator==(_20059b775_TraitHash _other) {
		return 
			this->_field_t == _other._field_t &&
			this->_field_s == _other._field_s &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_20059b775_TraitHash _other) { return !this->operator==(_other); }


};
inline jule::Str _2005e9a37_to_str(_2005e95c5_CustomType*);
inline jule::Bool _2005e9dde_equals(jule::Ptr<_2005e95c5_CustomType>,jule::Ptr<_1eee76b45_TypeKind>);
struct _2005e95c5_CustomType {
	jule::Str _field_kind = jule::Str();


	_2005e95c5_CustomType(jule::Str __param_kind): _field_kind(__param_kind) {}

	

	_2005e95c5_CustomType(void) = default;

	inline bool operator==(_2005e95c5_CustomType _other) {
		return 
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2005e95c5_CustomType _other) { return !this->operator==(_other); }


};
inline jule::Str static__2005ea6c5_to_type(jule::Str);
inline jule::Str static__2005ea9d3_prim(jule::Ptr<_1eee7bead_Prim>);
inline jule::Str static__2005eace1_tuple(jule::Ptr<_1eee82568_Tuple>);
inline jule::Str static__2005eb0ee_as_sptr(jule::Str);
inline jule::Str static__2005eb40c_as_ptr(jule::Str);
inline jule::Str static__2005eb71a_sptr(jule::Ptr<_1eee80d19_Sptr>);
inline jule::Str static__2005eba28_ptr(jule::Ptr<_1eee89a04_Ptr>);
inline jule::Str static__2005ebd36_enum_decl(jule::Ptr<_1eec889ac_Enum>);
inline jule::Str static__2005ec144_as_slice(jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Str static__2005ec452_slice(jule::Ptr<_1eee818ec_Slc>);
inline jule::Str static__2005ec760_map(jule::Ptr<_1eee832d3_Map>);
inline jule::Str static__2005eca6d_trait_ident(jule::Str);
inline jule::Str static__2005ecd7b_trait_decl(jule::Ptr<_1eec8627e_Trait>);
inline jule::Str static__2005ed189_structure(jule::Ptr<_1ee242032_Struct>);
inline jule::Str static__2005ed497_structure_ins(jule::Ptr<_1ee24550d_StructIns>);
inline jule::Str static__2005ed7a5_array(jule::Ptr<_1eee88e21_Arr>);
inline jule::Str static__2005edab3_param(jule::Ptr<_1ee255b8e_Param>&);
inline jule::Str static__2005eddc1_param_ins(jule::Ptr<_1ee25a358_ParamIns>&);
inline jule::Str static__2005ee1ce_func_result(jule::Ptr<_1ee2579b5_Fn>&);
inline jule::Str static__2005ee4dc_func_ins_result(jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Str static__2005ee7ea_anon_func(jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Str static__2005eeb08_func(jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Str static__2005eee16_kind(jule::Ptr<_1eee76b45_TypeKind>);
struct _2005ea142_TypeCoder {
	

	_2005ea142_TypeCoder(void) = default;

	inline bool operator==(_2005ea142_TypeCoder _other) { return true; }

	inline bool operator!=(_2005ea142_TypeCoder _other) { return !this->operator==(_other); }


};
inline jule::Str _203d133a1_name(_2006127b9_Flag_0*);
inline jule::Str _203d13516_what(_2006127b9_Flag_0*);
inline void _203d1367b_reset(_2006127b9_Flag_0*);
inline jule::I32 _203d137e1_short(_2006127b9_Flag_0*);
struct _2006127b9_Flag_0 {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::I64 _field__default = jule::I64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::I64> _field__data = jule::Ptr<jule::I64>();


	_2006127b9_Flag_0(jule::Str __param__name, jule::I32 __param__short, jule::I64 __param__default, jule::Str __param__what, jule::Ptr<jule::I64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_2006127b9_Flag_0(void) = default;

	inline bool operator==(_2006127b9_Flag_0 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_2006127b9_Flag_0 _other) { return !this->operator==(_other); }


};inline jule::Str _203d166d4_name(_2006127b9_Flag_1*);
inline jule::Str _203d13967_what(_2006127b9_Flag_1*);
inline void _203d150ea_reset(_2006127b9_Flag_1*);
inline jule::I32 _203d1643c_short(_2006127b9_Flag_1*);
struct _2006127b9_Flag_1 {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::U64 _field__default = jule::U64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::U64> _field__data = jule::Ptr<jule::U64>();


	_2006127b9_Flag_1(jule::Str __param__name, jule::I32 __param__short, jule::U64 __param__default, jule::Str __param__what, jule::Ptr<jule::U64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_2006127b9_Flag_1(void) = default;

	inline bool operator==(_2006127b9_Flag_1 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_2006127b9_Flag_1 _other) { return !this->operator==(_other); }


};inline jule::Str _203d19be3_name(_2006127b9_Flag_2*);
inline jule::Str _203d16e76_what(_2006127b9_Flag_2*);
inline void _203d18609_reset(_2006127b9_Flag_2*);
inline jule::I32 _203d1994b_short(_2006127b9_Flag_2*);
struct _2006127b9_Flag_2 {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();


	_2006127b9_Flag_2(jule::Str __param__name, jule::I32 __param__short, jule::F64 __param__default, jule::Str __param__what, jule::Ptr<jule::F64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_2006127b9_Flag_2(void) = default;

	inline bool operator==(_2006127b9_Flag_2 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_2006127b9_Flag_2 _other) { return !this->operator==(_other); }


};inline jule::Str _203d1a4eb_name(_2006127b9_Flag_3*);
inline jule::Str _203d1d246_what(_2006127b9_Flag_3*);
inline void _203d1bb5c_reset(_2006127b9_Flag_3*);
inline jule::I32 _203d1ce9e_short(_2006127b9_Flag_3*);
struct _2006127b9_Flag_3 {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();


	_2006127b9_Flag_3(jule::Str __param__name, jule::I32 __param__short, jule::Bool __param__default, jule::Str __param__what, jule::Ptr<jule::Bool> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_2006127b9_Flag_3(void) = default;

	inline bool operator==(_2006127b9_Flag_3 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_2006127b9_Flag_3 _other) { return !this->operator==(_other); }


};inline jule::Str _203d21755_name(_2006127b9_Flag_4*);
inline jule::Str _203d1d9d8_what(_2006127b9_Flag_4*);
inline void _203d2016b_reset(_2006127b9_Flag_4*);
inline jule::I32 _203d214ad_short(_2006127b9_Flag_4*);
struct _2006127b9_Flag_4 {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();


	_2006127b9_Flag_4(jule::Str __param__name, jule::I32 __param__short, jule::Str __param__default, jule::Str __param__what, jule::Ptr<jule::Str> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_2006127b9_Flag_4(void) = default;

	inline bool operator==(_2006127b9_Flag_4 _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_2006127b9_Flag_4 _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_200613ba5_FlagSet> static__200613ec4_new(void);
inline jule::Trait<_2006123bd_CommonFlag> _200614535_find_flag(_200613ba5_FlagSet*,jule::Str);
inline jule::Trait<_2006123bd_CommonFlag> _2006148dc_find_flag_short(_200613ba5_FlagSet*,jule::I32);
inline jule::Slice<jule::Trait<_2006123bd_CommonFlag>> _200614bb7_flags(_200613ba5_FlagSet*);
inline jule::Exceptional<jule::Slice<jule::Str>> _20061506e_parse(_200613ba5_FlagSet*,jule::Slice<jule::Str>);
inline void _2006152b1_reset(_200613ba5_FlagSet*);
inline jule::Ptr<_2006127b9_Flag_4> _200615822_add_flag_common_0(_200613ba5_FlagSet*,jule::Str,jule::I32,jule::Str);
inline jule::Ptr<_2006127b9_Flag_3> _200615822_add_flag_common_1(_200613ba5_FlagSet*,jule::Str,jule::I32,jule::Str);
inline void _200616515_add_var_0(_200613ba5_FlagSet*,jule::Ptr<jule::Str>,jule::Str,jule::I32,jule::Str);
inline void _200616515_add_var_1(_200613ba5_FlagSet*,jule::Ptr<jule::Bool>,jule::Str,jule::I32,jule::Str);
struct _200613ba5_FlagSet {
	jule::Slice<jule::Trait<_2006123bd_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_2006123bd_CommonFlag>>();


	_200613ba5_FlagSet(jule::Slice<jule::Trait<_2006123bd_CommonFlag>> __param__flags): _field__flags(__param__flags) {}

	

	_200613ba5_FlagSet(void) = default;

	inline bool operator==(_200613ba5_FlagSet _other) {
		return 
			this->_field__flags == _other._field__flags;
	}

	inline bool operator!=(_200613ba5_FlagSet _other) { return !this->operator==(_other); }


};
inline jule::Str _1eec88d86_to_str(_1eec889ac_Enum*);
inline jule::Bool _1eec8923d_equals(jule::Ptr<_1eec889ac_Enum>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Ptr<_1eec87d0d_EnumItem> _1eec89727_find_item(_1eec889ac_Enum*,jule::Str);
struct _1eec889ac_Enum {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1eee7b4a7_TypeSymbol> _field_kind = jule::Ptr<_1eee7b4a7_TypeSymbol>();
	jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>> _field_items = jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>>();


	_1eec889ac_Enum(_1e02c1d07_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1eee7b4a7_TypeSymbol> __param_kind, jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>> __param_items): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items) {}

	

	_1eec889ac_Enum(void) = default;

	inline bool operator==(_1eec889ac_Enum _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_items == _other._field_items;
	}

	inline bool operator!=(_1eec889ac_Enum _other) { return !this->operator==(_other); }


};
struct _1e02e1de3_StructDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>();


	_1e02e1de3_StructDecl(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Str __param_ident, jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> __param_generics): _field_token(__param_token), _field_end(__param_end), _field_ident(__param_ident), _field_fields(__param_fields), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_generics(__param_generics) {}

	

	_1e02e1de3_StructDecl(void) = default;

	inline bool operator==(_1e02e1de3_StructDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_ident == _other._field_ident &&
			this->_field_fields == _other._field_fields &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_directives == _other._field_directives &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_1e02e1de3_StructDecl _other) { return !this->operator==(_other); }


};
struct _1e02e2443_TraitDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_1e02da32b_FnDecl>>();


	_1e02e2443_TraitDecl(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Str __param_ident, jule::Bool __param_public, jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> __param_methods): _field_token(__param_token), _field_end(__param_end), _field_ident(__param_ident), _field_public(__param_public), _field_methods(__param_methods) {}

	

	_1e02e2443_TraitDecl(void) = default;

	inline bool operator==(_1e02e2443_TraitDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_ident == _other._field_ident &&
			this->_field_public == _other._field_public &&
			this->_field_methods == _other._field_methods;
	}

	inline bool operator!=(_1e02e2443_TraitDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02e2bb3_is_trait_impl(_1e02e2993_Impl*);
inline jule::Bool _1e02e2d28_is_struct_impl(_1e02e2993_Impl*);
struct _1e02e2993_Impl {
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_base = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_dest = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_1e02da32b_FnDecl>>();
	jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_1e02daea8_VarDecl>>();


	_1e02e2993_Impl(_1e02c1d07_Token __param_end, jule::Ptr<_1e01c3db3_TypeDecl> __param_base, jule::Ptr<_1e01c3db3_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> __param_methods, jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> __param_statics): _field_end(__param_end), _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1e02e2993_Impl(void) = default;

	inline bool operator==(_1e02e2993_Impl _other) {
		return 
			this->_field_end == _other._field_end &&
			this->_field_base == _other._field_base &&
			this->_field_dest == _other._field_dest &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics;
	}

	inline bool operator!=(_1e02e2993_Impl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e0286bac_is_prim(_1e029b2ba_IdentTypeDecl*);
struct _1e029b2ba_IdentTypeDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>();


	_1e029b2ba_IdentTypeDecl(_1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_generics(__param_generics) {}

	

	_1e029b2ba_IdentTypeDecl(void) = default;

	inline bool operator==(_1e029b2ba_IdentTypeDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_1e029b2ba_IdentTypeDecl _other) { return !this->operator==(_other); }


};
struct _1e0181a63_Expr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Bool _field_range = jule::Bool();
	jule::Any _field_kind = jule::Any();


	_1e0181a63_Expr(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Bool __param_range, jule::Any __param_kind): _field_token(__param_token), _field_end(__param_end), _field_range(__param_range), _field_kind(__param_kind) {}

	

	_1e0181a63_Expr(void) = default;

	inline bool operator==(_1e0181a63_Expr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_range == _other._field_range &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1e0181a63_Expr _other) { return !this->operator==(_other); }


};
struct _1e0181c83_UseExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e0181c83_UseExpr(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e0181c83_UseExpr(void) = default;

	inline bool operator==(_1e0181c83_UseExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e0181c83_UseExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e01e9c96_is_decl(_1e01be3a8_Node*);
inline jule::Bool _1e025331b_is_directive(_1e01be3a8_Node*);
inline jule::Bool _1e026a465_is_impl(_1e01be3a8_Node*);
inline jule::Bool _1e027644e_is_use_decl(_1e01be3a8_Node*);
struct _1e01be3a8_Node {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_data = jule::Any();


	_1e01be3a8_Node(_1e02c1d07_Token __param_token, jule::Any __param_data): _field_token(__param_token), _field_data(__param_data) {}

	

	_1e01be3a8_Node(void) = default;

	inline bool operator==(_1e01be3a8_Node _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_1e01be3a8_Node _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e018e8c8_is_nil(_1e0182404_LitExpr*);
struct _1e0182404_LitExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_value = jule::Str();


	_1e0182404_LitExpr(_1e02c1d07_Token __param_token, jule::Str __param_value): _field_token(__param_token), _field_value(__param_value) {}

	

	_1e0182404_LitExpr(void) = default;

	inline bool operator==(_1e0182404_LitExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_value == _other._field_value;
	}

	inline bool operator!=(_1e0182404_LitExpr _other) { return !this->operator==(_other); }


};
struct _1e0182624_UnsafeExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e0182624_UnsafeExpr(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e0182624_UnsafeExpr(void) = default;

	inline bool operator==(_1e0182624_UnsafeExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e0182624_UnsafeExpr _other) { return !this->operator==(_other); }


};
struct _1ed116754_AssignInfo {
	jule::Slice<_1e02c1d07_Token> _field_l = jule::Slice<_1e02c1d07_Token>();
	jule::Slice<_1e02c1d07_Token> _field_r = jule::Slice<_1e02c1d07_Token>();
	_1e02c1d07_Token _field_setter = _1e02c1d07_Token();
	jule::Bool _field_ok = jule::Bool();


	_1ed116754_AssignInfo(jule::Slice<_1e02c1d07_Token> __param_l, jule::Slice<_1e02c1d07_Token> __param_r, _1e02c1d07_Token __param_setter, jule::Bool __param_ok): _field_l(__param_l), _field_r(__param_r), _field_setter(__param_setter), _field_ok(__param_ok) {}

	

	_1ed116754_AssignInfo(void) = default;

	inline bool operator==(_1ed116754_AssignInfo _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_setter == _other._field_setter &&
			this->_field_ok == _other._field_ok;
	}

	inline bool operator!=(_1ed116754_AssignInfo _other) { return !this->operator==(_other); }


};
struct _1e0182844_CoExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e0182844_CoExpr(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e0182844_CoExpr(void) = default;

	inline bool operator==(_1e0182844_CoExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e0182844_CoExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e0221196_is_self(_1e0182a64_IdentExpr*);
struct _1e0182a64_IdentExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();


	_1e0182a64_IdentExpr(_1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked) {}

	

	_1e0182a64_IdentExpr(void) = default;

	inline bool operator==(_1e0182a64_IdentExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked;
	}

	inline bool operator!=(_1e0182a64_IdentExpr _other) { return !this->operator==(_other); }


};
struct _1e0182c84_UnaryExpr {
	_1e02c1d07_Token _field_op = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e0182c84_UnaryExpr(_1e02c1d07_Token __param_op, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_op(__param_op), _field_expr(__param_expr) {}

	

	_1e0182c84_UnaryExpr(void) = default;

	inline bool operator==(_1e0182c84_UnaryExpr _other) {
		return 
			this->_field_op == _other._field_op &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e0182c84_UnaryExpr _other) { return !this->operator==(_other); }


};
struct _1eeda4512_Assign {
	jule::Ptr<_1ee247620_OperandExprModel> _field_l = jule::Ptr<_1ee247620_OperandExprModel>();
	jule::Ptr<_1ee247620_OperandExprModel> _field_r = jule::Ptr<_1ee247620_OperandExprModel>();
	_1e02c1d07_Token _field_op = _1e02c1d07_Token();


	_1eeda4512_Assign(jule::Ptr<_1ee247620_OperandExprModel> __param_l, jule::Ptr<_1ee247620_OperandExprModel> __param_r, _1e02c1d07_Token __param_op): _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1eeda4512_Assign(void) = default;

	inline bool operator==(_1eeda4512_Assign _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1eeda4512_Assign _other) { return !this->operator==(_other); }


};
struct _1e0182ea4_VariadicExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e0182ea4_VariadicExpr(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e0182ea4_VariadicExpr(void) = default;

	inline bool operator==(_1e0182ea4_VariadicExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e0182ea4_VariadicExpr _other) { return !this->operator==(_other); }


};
struct _1e02812b1_Directive {
	_1e02c1d07_Token _field_tag = _1e02c1d07_Token();
	jule::Slice<_1e02c1d07_Token> _field_args = jule::Slice<_1e02c1d07_Token>();


	_1e02812b1_Directive(_1e02c1d07_Token __param_tag, jule::Slice<_1e02c1d07_Token> __param_args): _field_tag(__param_tag), _field_args(__param_args) {}

	

	_1e02812b1_Directive(void) = default;

	inline bool operator==(_1e02812b1_Directive _other) {
		return 
			this->_field_tag == _other._field_tag &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_1e02812b1_Directive _other) { return !this->operator==(_other); }


};
struct _1e02d7548_NsSelectionExpr {
	jule::Slice<_1e02c1d07_Token> _field_ns = jule::Slice<_1e02c1d07_Token>();
	_1e02c1d07_Token _field_ident = _1e02c1d07_Token();


	_1e02d7548_NsSelectionExpr(jule::Slice<_1e02c1d07_Token> __param_ns, _1e02c1d07_Token __param_ident): _field_ns(__param_ns), _field_ident(__param_ident) {}

	

	_1e02d7548_NsSelectionExpr(void) = default;

	inline bool operator==(_1e02d7548_NsSelectionExpr _other) {
		return 
			this->_field_ns == _other._field_ns &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e02d7548_NsSelectionExpr _other) { return !this->operator==(_other); }


};
struct _1e02d7768_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	_1e02c1d07_Token _field_ident = _1e02c1d07_Token();


	_1e02d7768_SubIdentExpr(jule::Bool __param_is_self, jule::Ptr<_1e0181a63_Expr> __param_expr, _1e02c1d07_Token __param_ident): _field_is_self(__param_is_self), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1e02d7768_SubIdentExpr(void) = default;

	inline bool operator==(_1e02d7768_SubIdentExpr _other) {
		return 
			this->_field_is_self == _other._field_is_self &&
			this->_field_expr == _other._field_expr &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e02d7768_SubIdentExpr _other) { return !this->operator==(_other); }


};
struct _1e02d7988_BinopExpr {
	jule::Ptr<_1e0181a63_Expr> _field_left = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e0181a63_Expr> _field_right = jule::Ptr<_1e0181a63_Expr>();
	_1e02c1d07_Token _field_op = _1e02c1d07_Token();


	_1e02d7988_BinopExpr(jule::Ptr<_1e0181a63_Expr> __param_left, jule::Ptr<_1e0181a63_Expr> __param_right, _1e02c1d07_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1e02d7988_BinopExpr(void) = default;

	inline bool operator==(_1e02d7988_BinopExpr _other) {
		return 
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1e02d7988_BinopExpr _other) { return !this->operator==(_other); }


};
struct _1eeda5513_ScopeLabel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1eeda3da2_Label> _field_label = jule::Ptr<_1eeda3da2_Label>();
	jule::I32 _field_pos = jule::I32();
	jule::Ptr<_1eeda5953_ScopeChecker> _field_scope = jule::Ptr<_1eeda5953_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();


	_1eeda5513_ScopeLabel(_1e02c1d07_Token __param_token, jule::Ptr<_1eeda3da2_Label> __param_label, jule::I32 __param_pos, jule::Ptr<_1eeda5953_ScopeChecker> __param_scope, jule::Bool __param_used): _field_token(__param_token), _field_label(__param_label), _field_pos(__param_pos), _field_scope(__param_scope), _field_used(__param_used) {}

	

	_1eeda5513_ScopeLabel(void) = default;

	inline bool operator==(_1eeda5513_ScopeLabel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label &&
			this->_field_pos == _other._field_pos &&
			this->_field_scope == _other._field_scope &&
			this->_field_used == _other._field_used;
	}

	inline bool operator!=(_1eeda5513_ScopeLabel _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e01c46ee_unhandled(_1e02d7ba8_FnCallExpr*);
inline jule::Bool _1e01831c4_ignored(_1e02d7ba8_FnCallExpr*);
struct _1e02d7ba8_FnCallExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_args = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_exception = jule::Ptr<_1e02d9ddb_ScopeTree>();


	_1e02d7ba8_FnCallExpr(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> __param_generics, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_args, jule::Ptr<_1e02d9ddb_ScopeTree> __param_exception): _field_token(__param_token), _field_expr(__param_expr), _field_generics(__param_generics), _field_args(__param_args), _field_exception(__param_exception) {}

	

	_1e02d7ba8_FnCallExpr(void) = default;

	inline bool operator==(_1e02d7ba8_FnCallExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_generics == _other._field_generics &&
			this->_field_args == _other._field_args &&
			this->_field_exception == _other._field_exception;
	}

	inline bool operator!=(_1e02d7ba8_FnCallExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e0196616_is_targeted(_1e02d7dc8_FieldExprPair*);
struct _1e02d7dc8_FieldExprPair {
	_1e02c1d07_Token _field_field = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e02d7dc8_FieldExprPair(_1e02c1d07_Token __param_field, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1e02d7dc8_FieldExprPair(void) = default;

	inline bool operator==(_1e02d7dc8_FieldExprPair _other) {
		return 
			this->_field_field == _other._field_field &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e02d7dc8_FieldExprPair _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1ee2449b3_FieldIns> _1ee23dda8_instance(jule::Ptr<_1ee23da34_Field>);
struct _1ee23da34_Field {
	jule::Ptr<_1ee242032_Struct> _field_owner = jule::Ptr<_1ee242032_Struct>();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1eee7b4a7_TypeSymbol> _field_kind = jule::Ptr<_1eee7b4a7_TypeSymbol>();
	jule::Ptr<_1e0181a63_Expr> _field_default = jule::Ptr<_1e0181a63_Expr>();


	_1ee23da34_Field(jule::Ptr<_1ee242032_Struct> __param_owner, _1e02c1d07_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1eee7b4a7_TypeSymbol> __param_kind, jule::Ptr<_1e0181a63_Expr> __param_default): _field_owner(__param_owner), _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_1ee23da34_Field(void) = default;

	inline bool operator==(_1ee23da34_Field _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1ee23da34_Field _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc0e79_find_package(_1eedc08c4_ImportInfo*,jule::Str);
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc1331_select_package(_1eedc08c4_ImportInfo*,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>);
inline jule::Ptr<_1eedeb24b_Var> _1eedc17b5_find_var(_1eedc08c4_ImportInfo*,jule::Str,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eedc1c49_find_type_alias(_1eedc08c4_ImportInfo*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee242032_Struct> _1eedc21cd_find_struct(_1eedc08c4_ImportInfo*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2579b5_Fn> _1eedc2662_find_fn(_1eedc08c4_ImportInfo*,jule::Str,jule::Bool);
inline jule::Ptr<_1eec8627e_Trait> _1eedc2a19_find_trait(_1eedc08c4_ImportInfo*,jule::Str);
inline jule::Ptr<_1eec889ac_Enum> _1eedc2dc1_find_enum(_1eedc08c4_ImportInfo*,jule::Str);
inline jule::Bool _1eedc3388_is_lookupable(_1eedc08c4_ImportInfo*,jule::Str);
inline jule::Bool _1eedc3740_exist_ident(_1eedc08c4_ImportInfo*,jule::Str);
inline jule::Bool _1eedc3a5e_is_accessible_via_selection(_1eedc08c4_ImportInfo*);
struct _1eedc08c4_ImportInfo {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<_1e02c1d07_Token> _field_selected = jule::Slice<_1e02c1d07_Token>();
	jule::Ptr<_1eedc3da0_Package> _field_package = jule::Ptr<_1eedc3da0_Package>();
	jule::I32 _field_mod_id = jule::I32();


	_1eedc08c4_ImportInfo(_1e02c1d07_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_1e02c1d07_Token> __param_selected, jule::Ptr<_1eedc3da0_Package> __param_package, jule::I32 __param_mod_id): _field_token(__param_token), _field_path(__param_path), _field_link_path(__param_link_path), _field_ident(__param_ident), _field_alias(__param_alias), _field_duplicate(__param_duplicate), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std), _field_import_all(__param_import_all), _field_selected(__param_selected), _field_package(__param_package), _field_mod_id(__param_mod_id) {}

	

	_1eedc08c4_ImportInfo(void) = default;

	inline bool operator==(_1eedc08c4_ImportInfo _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_path == _other._field_path &&
			this->_field_link_path == _other._field_link_path &&
			this->_field_ident == _other._field_ident &&
			this->_field_alias == _other._field_alias &&
			this->_field_duplicate == _other._field_duplicate &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_std == _other._field_std &&
			this->_field_import_all == _other._field_import_all &&
			this->_field_selected == _other._field_selected &&
			this->_field_package == _other._field_package &&
			this->_field_mod_id == _other._field_mod_id;
	}

	inline bool operator!=(_1eedc08c4_ImportInfo _other) { return !this->operator==(_other); }


};
struct _1e02d80e8_StructLit {
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();


	_1e02d80e8_StructLit(_1e02c1d07_Token __param_end, jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_exprs): _field_end(__param_end), _field_kind(__param_kind), _field_exprs(__param_exprs) {}

	

	_1e02d80e8_StructLit(void) = default;

	inline bool operator==(_1e02d80e8_StructLit _other) {
		return 
			this->_field_end == _other._field_end &&
			this->_field_kind == _other._field_kind &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_1e02d80e8_StructLit _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1ee24550d_StructIns> _1ee2424c7_instance(jule::Ptr<_1ee242032_Struct>);
inline jule::Ptr<_1ee24550d_StructIns> _1ee24287e_append_instance(_1ee242032_Struct*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Ptr<_1ee2579b5_Fn> _1ee242d13_find_method(_1ee242032_Struct*,jule::Str,jule::Bool);
inline jule::Ptr<_1eedeb24b_Var> _1ee2431ba_find_static(_1ee242032_Struct*,jule::Str);
inline jule::Ptr<_1ee23da34_Field> _1ee243572_find_field(_1ee242032_Struct*,jule::Str);
inline jule::Bool _1ee243929_is_implements(_1ee242032_Struct*,jule::Ptr<_1eec8627e_Trait>);
inline jule::Bool _1ee243cd1_is_derives(_1ee242032_Struct*,jule::Str);
inline jule::Bool _1ee244188_is_uses(_1ee242032_Struct*,jule::Ptr<_1ee242032_Struct>);
inline jule::Bool _1ee244463_has_ref_accessible(_1ee242032_Struct*);
struct _1ee242032_Struct {
	jule::Ptr<_1eedca071_Sema> _field_sema = jule::Ptr<_1eedca071_Sema>();
	jule::Slice<jule::Ptr<_1ee242032_Struct>> _field_depends = jule::Slice<jule::Ptr<_1ee242032_Struct>>();
	jule::Slice<jule::Ptr<_1ee242032_Struct>> _field_uses = jule::Slice<jule::Ptr<_1ee242032_Struct>>();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1ee23da34_Field>> _field_fields = jule::Slice<jule::Ptr<_1ee23da34_Field>>();
	jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _field_methods = jule::Slice<jule::Ptr<_1ee2579b5_Fn>>();
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _field_statics = jule::Slice<jule::Ptr<_1eedeb24b_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>();
	jule::Slice<jule::Ptr<_1eec8627e_Trait>> _field_implements = jule::Slice<jule::Ptr<_1eec8627e_Trait>>();
	jule::Slice<jule::Ptr<_1ee24550d_StructIns>> _field_instances = jule::Slice<jule::Ptr<_1ee24550d_StructIns>>();


	_1ee242032_Struct(jule::Ptr<_1eedca071_Sema> __param_sema, jule::Slice<jule::Ptr<_1ee242032_Struct>> __param_depends, jule::Slice<jule::Ptr<_1ee242032_Struct>> __param_uses, _1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_1ee23da34_Field>> __param_fields, jule::Slice<jule::Ptr<_1ee2579b5_Fn>> __param_methods, jule::Slice<jule::Ptr<_1eedeb24b_Var>> __param_statics, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> __param_generics, jule::Slice<jule::Ptr<_1eec8627e_Trait>> __param_implements, jule::Slice<jule::Ptr<_1ee24550d_StructIns>> __param_instances): _field_sema(__param_sema), _field_depends(__param_depends), _field_uses(__param_uses), _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_methods(__param_methods), _field_statics(__param_statics), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_generics(__param_generics), _field_implements(__param_implements), _field_instances(__param_instances) {}

	

	_1ee242032_Struct(void) = default;

	inline bool operator==(_1ee242032_Struct _other) {
		return 
			this->_field_sema == _other._field_sema &&
			this->_field_depends == _other._field_depends &&
			this->_field_uses == _other._field_uses &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_fields == _other._field_fields &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_directives == _other._field_directives &&
			this->_field_generics == _other._field_generics &&
			this->_field_implements == _other._field_implements &&
			this->_field_instances == _other._field_instances;
	}

	inline bool operator!=(_1ee242032_Struct _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e0197b12_is_empty(_1e02d8318_BraceLit*);
struct _1e02d8318_BraceLit {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();


	_1e02d8318_BraceLit(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_exprs): _field_token(__param_token), _field_end(__param_end), _field_exprs(__param_exprs) {}

	

	_1e02d8318_BraceLit(void) = default;

	inline bool operator==(_1e02d8318_BraceLit _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_1e02d8318_BraceLit _other) { return !this->operator==(_other); }


};
inline jule::Str _1ee24592b_to_str(_1ee24550d_StructIns*);
inline jule::Bool _1ee245cd3_equals(jule::Ptr<_1ee24550d_StructIns>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1ee24629a_same(_1ee24550d_StructIns*,jule::Ptr<_1ee24550d_StructIns>);
inline jule::Ptr<_1ee2579b5_Fn> _1ee24672e_find_method(_1ee24550d_StructIns*,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2449b3_FieldIns> _1ee246ad6_find_field(_1ee24550d_StructIns*,jule::Str);
struct _1ee24550d_StructIns {
	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_1ee242032_Struct> _field_decl = jule::Ptr<_1ee242032_Struct>();
	jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>();
	jule::Slice<jule::Ptr<_1ee2449b3_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_1ee2449b3_FieldIns>>();
	jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _field_methods = jule::Slice<jule::Ptr<_1ee2579b5_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_1ee25edda_ReferenceStack> _field_references = jule::Ptr<_1ee25edda_ReferenceStack>();
	_1ee240ddd_Operators _field_operators = _1ee240ddd_Operators();


	_1ee24550d_StructIns(jule::Bool __param_checked, jule::Ptr<_1ee242032_Struct> __param_decl, jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1ee2449b3_FieldIns>> __param_fields, jule::Slice<jule::Ptr<_1ee2579b5_Fn>> __param_methods, jule::Bool __param_mutable, jule::Ptr<_1ee25edda_ReferenceStack> __param_references, _1ee240ddd_Operators __param_operators): _field_checked(__param_checked), _field_decl(__param_decl), _field_generics(__param_generics), _field_fields(__param_fields), _field_methods(__param_methods), _field_mutable(__param_mutable), _field_references(__param_references), _field_operators(__param_operators) {}

	

	_1ee24550d_StructIns(void) = default;

	inline bool operator==(_1ee24550d_StructIns _other) {
		return 
			this->_field_checked == _other._field_checked &&
			this->_field_decl == _other._field_decl &&
			this->_field_generics == _other._field_generics &&
			this->_field_fields == _other._field_fields &&
			this->_field_methods == _other._field_methods &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_references == _other._field_references &&
			this->_field_operators == _other._field_operators;
	}

	inline bool operator!=(_1ee24550d_StructIns _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eedeb669_is_initialized(_1eedeb24b_Var*);
inline jule::Bool _1eedeb944_is_type_inferred(_1eedeb24b_Var*);
struct _1eedeb24b_Var {
	jule::Ptr<_1eed8a5a3_Scope> _field_scope = jule::Ptr<_1eed8a5a3_Scope>();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1eee7b4a7_TypeSymbol> _field_kind = jule::Ptr<_1eee7b4a7_TypeSymbol>();
	jule::Ptr<_1eee44e98_Value> _field_value = jule::Ptr<_1eee44e98_Value>();
	jule::Ptr<_1ee25edda_ReferenceStack> _field_references = jule::Ptr<_1ee25edda_ReferenceStack>();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Ptr<_1eede9e3c_IterRelation> _field_iter_relation = jule::Ptr<_1eede9e3c_IterRelation>();
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _field_depends = jule::Slice<jule::Ptr<_1eedeb24b_Var>>();


	_1eedeb24b_Var(jule::Ptr<_1eed8a5a3_Scope> __param_scope, _1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Ptr<_1eee7b4a7_TypeSymbol> __param_kind, jule::Ptr<_1eee44e98_Value> __param_value, jule::Ptr<_1ee25edda_ReferenceStack> __param_references, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Ptr<_1eede9e3c_IterRelation> __param_iter_relation, jule::Slice<jule::Ptr<_1eedeb24b_Var>> __param_depends): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_constant(__param_constant), _field_mutable(__param_mutable), _field_public(__param_public), _field_used(__param_used), _field_statically(__param_statically), _field_reference(__param_reference), _field_kind(__param_kind), _field_value(__param_value), _field_references(__param_references), _field_directives(__param_directives), _field_iter_relation(__param_iter_relation), _field_depends(__param_depends) {}

	

	_1eedeb24b_Var(void) = default;

	inline bool operator==(_1eedeb24b_Var _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_constant == _other._field_constant &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_public == _other._field_public &&
			this->_field_used == _other._field_used &&
			this->_field_statically == _other._field_statically &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_value == _other._field_value &&
			this->_field_references == _other._field_references &&
			this->_field_directives == _other._field_directives &&
			this->_field_iter_relation == _other._field_iter_relation &&
			this->_field_depends == _other._field_depends;
	}

	inline bool operator!=(_1eedeb24b_Var _other) { return !this->operator==(_other); }


};
struct _1e02d8538_KeyValPair {
	jule::Ptr<_1e0181a63_Expr> _field_key = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e0181a63_Expr> _field_val = jule::Ptr<_1e0181a63_Expr>();
	_1e02c1d07_Token _field_colon = _1e02c1d07_Token();


	_1e02d8538_KeyValPair(jule::Ptr<_1e0181a63_Expr> __param_key, jule::Ptr<_1e0181a63_Expr> __param_val, _1e02c1d07_Token __param_colon): _field_key(__param_key), _field_val(__param_val), _field_colon(__param_colon) {}

	

	_1e02d8538_KeyValPair(void) = default;

	inline bool operator==(_1e02d8538_KeyValPair _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val &&
			this->_field_colon == _other._field_colon;
	}

	inline bool operator!=(_1e02d8538_KeyValPair _other) { return !this->operator==(_other); }


};
inline void _1eee2b105_push_err(_1eee2aa61_TypeCompatibilityChecker*,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1eee2b3d0_check_trait(_1eee2aa61_TypeCompatibilityChecker*);
inline jule::Bool _1eee2b6aa_check_ptr(_1eee2aa61_TypeCompatibilityChecker*);
inline jule::Bool _1eee2b985_check_prim(_1eee2aa61_TypeCompatibilityChecker*);
inline jule::Bool _1eee2bc60_check(_1eee2aa61_TypeCompatibilityChecker*);
struct _1eee2aa61_TypeCompatibilityChecker {
	jule::Ptr<_1eedca071_Sema> _field_s = jule::Ptr<_1eedca071_Sema>();
	jule::Ptr<_1eee76b45_TypeKind> _field_dest = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee76b45_TypeKind> _field_src = jule::Ptr<_1eee76b45_TypeKind>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();


	_1eee2aa61_TypeCompatibilityChecker(jule::Ptr<_1eedca071_Sema> __param_s, jule::Ptr<_1eee76b45_TypeKind> __param_dest, jule::Ptr<_1eee76b45_TypeKind> __param_src, _1e02c1d07_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_src(__param_src), _field_error_token(__param_error_token) {}

	

	_1eee2aa61_TypeCompatibilityChecker(void) = default;

	inline bool operator==(_1eee2aa61_TypeCompatibilityChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_dest == _other._field_dest &&
			this->_field_src == _other._field_src &&
			this->_field_error_token == _other._field_error_token;
	}

	inline bool operator!=(_1eee2aa61_TypeCompatibilityChecker _other) { return !this->operator==(_other); }


};
inline void _1eee2c8ed_push_err(_1eee2c3ae_AssignTypeChecker*,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1eee2cbc8_check_validity(_1eee2c3ae_AssignTypeChecker*);
inline jule::Bool _1eee2cea3_check_const(_1eee2c3ae_AssignTypeChecker*);
inline jule::Bool _1eee2d27d_is_prim(_1eee2c3ae_AssignTypeChecker*);
inline jule::Bool _1eee2d558_check_compatibility(_1eee2c3ae_AssignTypeChecker*);
inline jule::Bool _1eee2d833_check(_1eee2c3ae_AssignTypeChecker*);
struct _1eee2c3ae_AssignTypeChecker {
	jule::Ptr<_1eedca071_Sema> _field_s = jule::Ptr<_1eedca071_Sema>();
	jule::Ptr<_1eee76b45_TypeKind> _field_dest = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee43b89_Data> _field_d = jule::Ptr<_1eee43b89_Data>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();


	_1eee2c3ae_AssignTypeChecker(jule::Ptr<_1eedca071_Sema> __param_s, jule::Ptr<_1eee76b45_TypeKind> __param_dest, jule::Ptr<_1eee43b89_Data> __param_d, _1e02c1d07_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_d(__param_d), _field_error_token(__param_error_token) {}

	

	_1eee2c3ae_AssignTypeChecker(void) = default;

	inline bool operator==(_1eee2c3ae_AssignTypeChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_dest == _other._field_dest &&
			this->_field_d == _other._field_d &&
			this->_field_error_token == _other._field_error_token;
	}

	inline bool operator!=(_1eee2c3ae_AssignTypeChecker _other) { return !this->operator==(_other); }


};
inline void _1eee2e7e0_push_generic(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&,jule::I32);
inline jule::Bool _1eee2eb64_annotate_prim(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee3001b_annotate_slc(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee304a0_check_map_key(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee30857_annotate_map(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee30c0e_annotate_fn(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee310b6_annotate_ptr(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee3146d_annotate_sptr(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee31825_annotate_any(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee31bcc_annotate_kind(_1eee2e180_DynamicTypeAnnotation*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee31ea7_annotate(_1eee2e180_DynamicTypeAnnotation*);
struct _1eee2e180_DynamicTypeAnnotation {
	jule::Ptr<_1eee45be1_Eval> _field_e = jule::Ptr<_1eee45be1_Eval>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_f = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee25a358_ParamIns> _field_p = jule::Ptr<_1ee25a358_ParamIns>();
	jule::Ptr<_1eee43b89_Data> _field_a = jule::Ptr<_1eee43b89_Data>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();
	jule::Ptr<_1eee76b45_TypeKind>* _field_k = nullptr;


	_1eee2e180_DynamicTypeAnnotation(jule::Ptr<_1eee45be1_Eval> __param_e, jule::Ptr<_1ee25b4ad_FnIns> __param_f, jule::Ptr<_1ee25a358_ParamIns> __param_p, jule::Ptr<_1eee43b89_Data> __param_a, _1e02c1d07_Token __param_error_token, jule::Ptr<_1eee76b45_TypeKind>* __param_k): _field_e(__param_e), _field_f(__param_f), _field_p(__param_p), _field_a(__param_a), _field_error_token(__param_error_token), _field_k(__param_k) {}

	

	_1eee2e180_DynamicTypeAnnotation(void) = default;

	inline bool operator==(_1eee2e180_DynamicTypeAnnotation _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_f == _other._field_f &&
			this->_field_p == _other._field_p &&
			this->_field_a == _other._field_a &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_k == _other._field_k;
	}

	inline bool operator!=(_1eee2e180_DynamicTypeAnnotation _other) { return !this->operator==(_other); }


};
inline void _1eee32e64_push_err_token(_1eee32804_FnCallArgChecker*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1eee33360_push_err(_1eee32804_FnCallArgChecker*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_1ee25a358_ParamIns>> _1eee3363a_get_params(_1eee32804_FnCallArgChecker*);
inline jule::Bool _1eee339e2_check_counts(_1eee32804_FnCallArgChecker*,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>&);
inline jule::Bool _1eee34053_check_arg(_1eee32804_FnCallArgChecker*,jule::Ptr<_1ee25a358_ParamIns>&,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token&);
inline jule::Bool _1eee344d7_push(_1eee32804_FnCallArgChecker*,jule::Ptr<_1ee25a358_ParamIns>&,jule::Ptr<_1e0181a63_Expr>);
inline jule::Bool _1eee3496b_push_variadic(_1eee32804_FnCallArgChecker*,jule::Ptr<_1ee25a358_ParamIns>&,jule::I32);
inline jule::Bool _1eee34d23_check_args(_1eee32804_FnCallArgChecker*,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>&);
inline jule::Bool _1eee35142_check_dynamic_type_annotation(_1eee32804_FnCallArgChecker*);
inline jule::Bool _1eee3540b_check(_1eee32804_FnCallArgChecker*);
struct _1eee32804_FnCallArgChecker {
	jule::Ptr<_1eee45be1_Eval> _field_e = jule::Ptr<_1eee45be1_Eval>();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_args = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();
	jule::Ptr<_1ee25b4ad_FnIns> _field_f = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();


	_1eee32804_FnCallArgChecker(jule::Ptr<_1eee45be1_Eval> __param_e, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_args, _1e02c1d07_Token __param_error_token, jule::Ptr<_1ee25b4ad_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models): _field_e(__param_e), _field_args(__param_args), _field_error_token(__param_error_token), _field_f(__param_f), _field_dynamic_annotation(__param_dynamic_annotation), _field_arg_models(__param_arg_models) {}

	

	_1eee32804_FnCallArgChecker(void) = default;

	inline bool operator==(_1eee32804_FnCallArgChecker _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_args == _other._field_args &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_f == _other._field_f &&
			this->_field_dynamic_annotation == _other._field_dynamic_annotation &&
			this->_field_arg_models == _other._field_arg_models;
	}

	inline bool operator!=(_1eee32804_FnCallArgChecker _other) { return !this->operator==(_other); }


};
inline void _1eee36176_push_err(_1eee35a5a_StructLitChecker*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1eee36572_push_suggestion(_1eee35a5a_StructLitChecker*,jule::Str,jule::Slice<jule::Any>);
inline void _1eee36a4a_push_match(_1eee35a5a_StructLitChecker*,jule::Ptr<_1ee2449b3_FieldIns>&,jule::Ptr<_1eee43b89_Data>&,_1e02c1d07_Token&);
inline void _1eee36e46_check_pair(_1eee35a5a_StructLitChecker*,jule::Ptr<_1e02d7dc8_FieldExprPair>&,jule::Slice<jule::Ptr<_1e0181a63_Expr>>&);
inline jule::Bool _1eee372ed_ready_exprs(_1eee35a5a_StructLitChecker*,jule::Slice<jule::Ptr<_1e0181a63_Expr>>&);
inline void _1eee3761c_check(_1eee35a5a_StructLitChecker*,jule::Slice<jule::Ptr<_1e0181a63_Expr>>&);
struct _1eee35a5a_StructLitChecker {
	jule::Ptr<_1eee45be1_Eval> _field_e = jule::Ptr<_1eee45be1_Eval>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();
	jule::Ptr<_1ee24550d_StructIns> _field_s = jule::Ptr<_1ee24550d_StructIns>();
	jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>>();


	_1eee35a5a_StructLitChecker(jule::Ptr<_1eee45be1_Eval> __param_e, _1e02c1d07_Token __param_error_token, jule::Ptr<_1ee24550d_StructIns> __param_s, jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>> __param_args): _field_e(__param_e), _field_error_token(__param_error_token), _field_s(__param_s), _field_args(__param_args) {}

	

	_1eee35a5a_StructLitChecker(void) = default;

	inline bool operator==(_1eee35a5a_StructLitChecker _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_s == _other._field_s &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_1eee35a5a_StructLitChecker _other) { return !this->operator==(_other); }


};
struct _1ee247bb4_BinopExprModel {
	jule::Ptr<_1ee247620_OperandExprModel> _field_left = jule::Ptr<_1ee247620_OperandExprModel>();
	jule::Ptr<_1ee247620_OperandExprModel> _field_right = jule::Ptr<_1ee247620_OperandExprModel>();
	_1e02c1d07_Token _field_op = _1e02c1d07_Token();


	_1ee247bb4_BinopExprModel(jule::Ptr<_1ee247620_OperandExprModel> __param_left, jule::Ptr<_1ee247620_OperandExprModel> __param_right, _1e02c1d07_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1ee247bb4_BinopExprModel(void) = default;

	inline bool operator==(_1ee247bb4_BinopExprModel _other) {
		return 
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1ee247bb4_BinopExprModel _other) { return !this->operator==(_other); }


};
inline void _1eee3aa71_prepare_types(_1eee3a5cb_RetTypeChecker*);
inline void _1eee3ad90_prepare_exprs(_1eee3a5cb_RetTypeChecker*,jule::Ptr<_1e0181a63_Expr>&);
inline void _1eee3b0d2_ret_vars(_1eee3a5cb_RetTypeChecker*);
inline void _1eee3b324_check_exprs(_1eee3a5cb_RetTypeChecker*);
inline jule::Bool _1eee3b6cb_check(_1eee3a5cb_RetTypeChecker*,jule::Ptr<_1e0181a63_Expr>&);
struct _1eee3a5cb_RetTypeChecker {
	jule::Ptr<_1eeda5953_ScopeChecker> _field_sc = jule::Ptr<_1eeda5953_ScopeChecker>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_f = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _field_vars = jule::Slice<jule::Ptr<_1eedeb24b_Var>>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();
	jule::Any _field_model = jule::Any();


	_1eee3a5cb_RetTypeChecker(jule::Ptr<_1eeda5953_ScopeChecker> __param_sc, jule::Ptr<_1ee25b4ad_FnIns> __param_f, jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> __param_types, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_exprs, jule::Slice<jule::Ptr<_1eedeb24b_Var>> __param_vars, _1e02c1d07_Token __param_error_token, jule::Any __param_model): _field_sc(__param_sc), _field_f(__param_f), _field_types(__param_types), _field_exprs(__param_exprs), _field_vars(__param_vars), _field_error_token(__param_error_token), _field_model(__param_model) {}

	

	_1eee3a5cb_RetTypeChecker(void) = default;

	inline bool operator==(_1eee3a5cb_RetTypeChecker _other) {
		return 
			this->_field_sc == _other._field_sc &&
			this->_field_f == _other._field_f &&
			this->_field_types == _other._field_types &&
			this->_field_exprs == _other._field_exprs &&
			this->_field_vars == _other._field_vars &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_1eee3a5cb_RetTypeChecker _other) { return !this->operator==(_other); }


};
struct _1ee248115_UnaryExprModel {
	jule::Ptr<_1eee43b89_Data> _field_expr = jule::Ptr<_1eee43b89_Data>();
	_1e02c1d07_Token _field_op = _1e02c1d07_Token();


	_1ee248115_UnaryExprModel(jule::Ptr<_1eee43b89_Data> __param_expr, _1e02c1d07_Token __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1ee248115_UnaryExprModel(void) = default;

	inline bool operator==(_1ee248115_UnaryExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1ee248115_UnaryExprModel _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e01a81e9_is_empty(_1e02d8758_SliceExpr*);
struct _1e02d8758_SliceExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();


	_1e02d8758_SliceExpr(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_exprs): _field_token(__param_token), _field_end(__param_end), _field_exprs(__param_exprs) {}

	

	_1e02d8758_SliceExpr(void) = default;

	inline bool operator==(_1e02d8758_SliceExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_1e02d8758_SliceExpr _other) { return !this->operator==(_other); }


};
struct _1e01821c3_IndexingExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e0181a63_Expr> _field_index = jule::Ptr<_1e0181a63_Expr>();


	_1e01821c3_IndexingExpr(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Ptr<_1e0181a63_Expr> __param_index): _field_token(__param_token), _field_end(__param_end), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1e01821c3_IndexingExpr(void) = default;

	inline bool operator==(_1e01821c3_IndexingExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_expr == _other._field_expr &&
			this->_field_index == _other._field_index;
	}

	inline bool operator!=(_1e01821c3_IndexingExpr _other) { return !this->operator==(_other); }


};
struct _1e02d8deb_SlicingExpr {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e0181a63_Expr> _field_start = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e0181a63_Expr> _field_to = jule::Ptr<_1e0181a63_Expr>();


	_1e02d8deb_SlicingExpr(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Ptr<_1e0181a63_Expr> __param_start, jule::Ptr<_1e0181a63_Expr> __param_to): _field_token(__param_token), _field_end(__param_end), _field_expr(__param_expr), _field_start(__param_start), _field_to(__param_to) {}

	

	_1e02d8deb_SlicingExpr(void) = default;

	inline bool operator==(_1e02d8deb_SlicingExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_expr == _other._field_expr &&
			this->_field_start == _other._field_start &&
			this->_field_to == _other._field_to;
	}

	inline bool operator!=(_1e02d8deb_SlicingExpr _other) { return !this->operator==(_other); }


};
struct _1ee249523_CastingExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1eee76b45_TypeKind> _field_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1eee76b45_TypeKind> _field_expr_kind = jule::Ptr<_1eee76b45_TypeKind>();


	_1ee249523_CastingExprModel(_1e02c1d07_Token __param_token, jule::Any __param_expr, jule::Ptr<_1eee76b45_TypeKind> __param_kind, jule::Ptr<_1eee76b45_TypeKind> __param_expr_kind): _field_token(__param_token), _field_expr(__param_expr), _field_kind(__param_kind), _field_expr_kind(__param_expr_kind) {}

	

	_1ee249523_CastingExprModel(void) = default;

	inline bool operator==(_1ee249523_CastingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_kind == _other._field_kind &&
			this->_field_expr_kind == _other._field_expr_kind;
	}

	inline bool operator!=(_1ee249523_CastingExprModel _other) { return !this->operator==(_other); }


};
inline _1eee68818_BinaryEval static__1eee68e34_new_plain(jule::Ptr<_1eee45be1_Eval>);
inline _1eee68818_BinaryEval static__1eee6931e_new(jule::Ptr<_1eee45be1_Eval>,_1e02c1d07_Token);
inline jule::Bool _1eee6963d_check_type_compatibility(_1eee68818_BinaryEval*);
inline jule::Bool _1eee6996d_check_struct_common_operator_compatibility(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee69c48_eval_nil(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6a023_eval_enum(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6a2ed_eval_sptr(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6a5c8_eval_ptr(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6a8a3_eval_arr(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6ab7d_eval_slc(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6ae58_eval_fn(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6b233_eval_struct(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6b50d_eval_trait(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6b7d8_eval_any(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6bab3_eval_bool(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6bd8d_eval_str(_1eee68818_BinaryEval*);
inline void _1eee6c0d0_set_type_to_greater(_1eee68818_BinaryEval*);
inline void _1eee6c3bb_check_mod_data(_1eee68818_BinaryEval*,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee6c60d_mod(_1eee68818_BinaryEval*);
inline jule::Bool _1eee6cad6_numbers_are_compatibile(_1eee68818_BinaryEval*,jule::Str&,jule::Str&);
inline jule::Ptr<_1eee43b89_Data> _1eee6cda0_eval_float(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6d17a_eval_int(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6d455_eval_prim(_1eee68818_BinaryEval*);
inline jule::Ptr<_1eee43b89_Data> _1eee6d730_eval_op(_1eee68818_BinaryEval*);
inline void _1eee6da4e_eval_const(_1eee68818_BinaryEval*,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee6dd6d_check_data(_1eee68818_BinaryEval*,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee6e0b0_check_datas(_1eee68818_BinaryEval*);
inline void _1eee6e3ce_set_model(_1eee68818_BinaryEval*,jule::Ptr<_1eee43b89_Data>&);
inline void _1eee6e6ed_post_eval(_1eee68818_BinaryEval*,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee6eb82_solve_explicit(_1eee68818_BinaryEval*,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee70039_eval(_1eee68818_BinaryEval*,jule::Ptr<_1e02d7988_BinopExpr>&);
struct _1eee68818_BinaryEval {
	jule::Ptr<_1eee45be1_Eval> _field_e = jule::Ptr<_1eee45be1_Eval>();
	jule::Ptr<_1eee43b89_Data> _field_l = jule::Ptr<_1eee43b89_Data>();
	jule::Ptr<_1eee43b89_Data> _field_r = jule::Ptr<_1eee43b89_Data>();
	_1e02c1d07_Token _field_op = _1e02c1d07_Token();


	_1eee68818_BinaryEval(jule::Ptr<_1eee45be1_Eval> __param_e, jule::Ptr<_1eee43b89_Data> __param_l, jule::Ptr<_1eee43b89_Data> __param_r, _1e02c1d07_Token __param_op): _field_e(__param_e), _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1eee68818_BinaryEval(void) = default;

	inline bool operator==(_1eee68818_BinaryEval _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_1eee68818_BinaryEval _other) { return !this->operator==(_other); }


};
struct _1eee75baa_TypeAlias {
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1eee7b4a7_TypeSymbol> _field_kind = jule::Ptr<_1eee7b4a7_TypeSymbol>();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _field_generics = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>();


	_1eee75baa_TypeAlias(jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, jule::Bool __param_generic, _1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Ptr<_1eee7b4a7_TypeSymbol> __param_kind, jule::Slice<jule::Any> __param_refers, jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> __param_generics): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_used(__param_used), _field_generic(__param_generic), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_refers(__param_refers), _field_generics(__param_generics) {}

	

	_1eee75baa_TypeAlias(void) = default;

	inline bool operator==(_1eee75baa_TypeAlias _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_used == _other._field_used &&
			this->_field_generic == _other._field_generic &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_refers == _other._field_refers &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_1eee75baa_TypeAlias _other) { return !this->operator==(_other); }


};
struct _1ee24a007_FnCallExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1ee25b4ad_FnIns> _field_func = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_1eed8a5a3_Scope> _field_except = jule::Ptr<_1eed8a5a3_Scope>();
	jule::Bool _field_assigned = jule::Bool();


	_1ee24a007_FnCallExprModel(_1e02c1d07_Token __param_token, jule::Ptr<_1ee25b4ad_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args, jule::Ptr<_1eed8a5a3_Scope> __param_except, jule::Bool __param_assigned): _field_token(__param_token), _field_func(__param_func), _field_is_co(__param_is_co), _field_expr(__param_expr), _field_args(__param_args), _field_except(__param_except), _field_assigned(__param_assigned) {}

	

	_1ee24a007_FnCallExprModel(void) = default;

	inline bool operator==(_1ee24a007_FnCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_func == _other._field_func &&
			this->_field_is_co == _other._field_is_co &&
			this->_field_expr == _other._field_expr &&
			this->_field_args == _other._field_args &&
			this->_field_except == _other._field_except &&
			this->_field_assigned == _other._field_assigned;
	}

	inline bool operator!=(_1ee24a007_FnCallExprModel _other) { return !this->operator==(_other); }


};
struct _1e02d911b_GenericDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();


	_1e02d911b_GenericDecl(_1e02c1d07_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1e02d911b_GenericDecl(void) = default;

	inline bool operator==(_1e02d911b_GenericDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e02d911b_GenericDecl _other) { return !this->operator==(_other); }


};
struct _1ee24a9a8_IndexingExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1eee43b89_Data> _field_expr = jule::Ptr<_1eee43b89_Data>();
	jule::Ptr<_1eee43b89_Data> _field_index = jule::Ptr<_1eee43b89_Data>();


	_1ee24a9a8_IndexingExprModel(_1e02c1d07_Token __param_token, jule::Ptr<_1eee43b89_Data> __param_expr, jule::Ptr<_1eee43b89_Data> __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1ee24a9a8_IndexingExprModel(void) = default;

	inline bool operator==(_1ee24a9a8_IndexingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_index == _other._field_index;
	}

	inline bool operator!=(_1ee24a9a8_IndexingExprModel _other) { return !this->operator==(_other); }


};
struct _1e02d933b_LabelSt {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();


	_1e02d933b_LabelSt(_1e02c1d07_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1e02d933b_LabelSt(void) = default;

	inline bool operator==(_1e02d933b_LabelSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e02d933b_LabelSt _other) { return !this->operator==(_other); }


};
struct _1e02d955b_GotoSt {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_label = _1e02c1d07_Token();


	_1e02d955b_GotoSt(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1e02d955b_GotoSt(void) = default;

	inline bool operator==(_1e02d955b_GotoSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_1e02d955b_GotoSt _other) { return !this->operator==(_other); }


};
struct _1e02d977b_FallSt {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();


	_1e02d977b_FallSt(_1e02c1d07_Token __param_token): _field_token(__param_token) {}

	

	_1e02d977b_FallSt(void) = default;

	inline bool operator==(_1e02d977b_FallSt _other) {
		return 
			this->_field_token == _other._field_token;
	}

	inline bool operator!=(_1e02d977b_FallSt _other) { return !this->operator==(_other); }


};
struct _1ee24c009_SlicingExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_1ee24c009_SlicingExprModel(_1e02c1d07_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_1ee24c009_SlicingExprModel(void) = default;

	inline bool operator==(_1ee24c009_SlicingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_1ee24c009_SlicingExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24c658_TraitSubIdentExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1ee2579b5_Fn> _field_method = jule::Ptr<_1ee2579b5_Fn>();
	jule::Ptr<_1eec8627e_Trait> _field_trt = jule::Ptr<_1eec8627e_Trait>();


	_1ee24c658_TraitSubIdentExprModel(_1e02c1d07_Token __param_token, jule::Any __param_expr, jule::Ptr<_1ee2579b5_Fn> __param_method, jule::Ptr<_1eec8627e_Trait> __param_trt): _field_token(__param_token), _field_expr(__param_expr), _field_method(__param_method), _field_trt(__param_trt) {}

	

	_1ee24c658_TraitSubIdentExprModel(void) = default;

	inline bool operator==(_1ee24c658_TraitSubIdentExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_method == _other._field_method &&
			this->_field_trt == _other._field_trt;
	}

	inline bool operator!=(_1ee24c658_TraitSubIdentExprModel _other) { return !this->operator==(_other); }


};
struct _1ee24d060_StructSubIdentExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1eee43b89_Data> _field_expr = jule::Ptr<_1eee43b89_Data>();
	jule::Ptr<_1eee76b45_TypeKind> _field_expr_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Ptr<_1ee25b4ad_FnIns> _field_method = jule::Ptr<_1ee25b4ad_FnIns>();
	jule::Ptr<_1ee2449b3_FieldIns> _field_field = jule::Ptr<_1ee2449b3_FieldIns>();


	_1ee24d060_StructSubIdentExprModel(_1e02c1d07_Token __param_token, jule::Ptr<_1eee43b89_Data> __param_expr, jule::Ptr<_1eee76b45_TypeKind> __param_expr_kind, jule::Ptr<_1ee25b4ad_FnIns> __param_method, jule::Ptr<_1ee2449b3_FieldIns> __param_field): _field_token(__param_token), _field_expr(__param_expr), _field_expr_kind(__param_expr_kind), _field_method(__param_method), _field_field(__param_field) {}

	

	_1ee24d060_StructSubIdentExprModel(void) = default;

	inline bool operator==(_1ee24d060_StructSubIdentExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_expr_kind == _other._field_expr_kind &&
			this->_field_method == _other._field_method &&
			this->_field_field == _other._field_field;
	}

	inline bool operator!=(_1ee24d060_StructSubIdentExprModel _other) { return !this->operator==(_other); }


};
struct _1e02d999b_AssignLeft {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e02d999b_AssignLeft(_1e02c1d07_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_1e02d999b_AssignLeft(void) = default;

	inline bool operator==(_1e02d999b_AssignLeft _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_reference == _other._field_reference &&
			this->_field_ident == _other._field_ident &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e02d999b_AssignLeft _other) { return !this->operator==(_other); }


};
inline void _1eee8de7b_push_err(_1eee8d6a6_TypeChecker*,_1e02c1d07_Token,jule::Str,jule::Slice<jule::Any>);
inline void _1eee8e1bd_allow_builtin(_1eee8d6a6_TypeChecker*);
inline void _1eee8e410_disallow_builtin(_1eee8d6a6_TypeChecker*);
inline jule::Ptr<_1eee7bead_Prim> _1eee8e7b7_build_prim(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&);
inline void _1eee8ec90_push_cycle_error(_1eee8d6a6_TypeChecker*,jule::Any,jule::Any,jule::Str&);
inline jule::Bool _1eee90224_check_cross_cycle(_1eee8d6a6_TypeChecker*,jule::Any,jule::Str&);
inline jule::Bool _1eee906a8_check_illegal_cycles(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Any);
inline jule::Trait<_1eee76606_Kind> _1eee90b3c_from_type_alias(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Ptr<_1eee75baa_TypeAlias>&);
inline jule::Ptr<_1eec889ac_Enum> _1eee910c1_from_enum(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Ptr<_1eec889ac_Enum>&);
inline jule::Ptr<_1eec8627e_Trait> _1eee91555_from_trait(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Ptr<_1eec8627e_Trait>&);
inline jule::Bool _1eee919d9_check_struct_ins(_1eee8d6a6_TypeChecker*,jule::Ptr<_1ee24550d_StructIns>&,_1e02c1d07_Token&);
inline void _1eee91d4c_append_used_struct_reference(_1eee8d6a6_TypeChecker*,jule::Ptr<_1ee242032_Struct>&);
inline jule::Ptr<_1ee24550d_StructIns> _1eee922c0_build_struct_instance(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Ptr<_1ee242032_Struct>&);
inline jule::Ptr<_1ee24550d_StructIns> _1eee92754_from_struct(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>&,jule::Ptr<_1ee242032_Struct>&);
inline jule::Trait<_1eee76606_Kind> _1eee92bd8_get_def(_1eee8d6a6_TypeChecker*,jule::Trait<_1eee992c7_Lookup>,jule::Ptr<_1e029b2ba_IdentTypeDecl>&);
inline jule::Trait<_1eee76606_Kind> _1eee93090_build_ident(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e029b2ba_IdentTypeDecl>);
inline jule::Ptr<_1eee80d19_Sptr> _1eee93447_build_sptr_from_type(_1eee8d6a6_TypeChecker*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Ptr<_1eee80d19_Sptr> _1eee937ee_build_sptr(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e0176184_SptrTypeDecl>);
inline jule::Ptr<_1eee89a04_Ptr> _1eee93ba6_build_ptr_from_type(_1eee8d6a6_TypeChecker*,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Ptr<_1eee89a04_Ptr> _1eee9405d_build_ptr(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e01c50b2_PtrTypeDecl>);
inline jule::Ptr<_1eee818ec_Slc> _1eee94415_build_slc(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e025099a_SlcTypeDecl>);
inline jule::Ptr<_1eee88e21_Arr> _1eee947bc_build_arr(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e0134b15_ArrTypeDecl>);
inline jule::Ptr<_1eee832d3_Map> _1eee94b74_build_map(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e0181623_MapTypeDecl>);
inline jule::Ptr<_1eee82568_Tuple> _1eee9502b_build_tuple(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e01aebb2_TupleTypeDecl>);
inline jule::Bool _1eee953d3_check_fn_types(_1eee8d6a6_TypeChecker*,jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Ptr<_1ee25b4ad_FnIns> _1eee9578a_build_fn(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e02da32b_FnDecl>);
inline jule::Trait<_1eee76606_Kind> _1eee95b42_build_by_namespace(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e0275bbd_NamespaceTypeDecl>);
inline jule::Ptr<_1eee76b45_TypeKind> _1eee95ee9_build(_1eee8d6a6_TypeChecker*,jule::Any&);
inline jule::Ptr<_1eee76b45_TypeKind> _1eee963a1_check_decl(_1eee8d6a6_TypeChecker*,jule::Ptr<_1e01c3db3_TypeDecl>&);
inline void _1eee966c0_check(_1eee8d6a6_TypeChecker*,jule::Ptr<_1eee7b4a7_TypeSymbol>&);
struct _1eee8d6a6_TypeChecker {
	jule::Ptr<_1eedca071_Sema> _field_s = jule::Ptr<_1eedca071_Sema>();
	jule::Trait<_1eee992c7_Lookup> _field_lookup = jule::Trait<_1eee992c7_Lookup>();
	jule::Ptr<_1eee8c760_Referencer> _field_referencer = jule::Ptr<_1eee8c760_Referencer>();
	_1e02c1d07_Token _field_error_token = _1e02c1d07_Token();
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>();
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Bool _field_selection = jule::Bool();
	jule::Ptr<_1eee75baa_TypeAlias> _field_owner_alias = jule::Ptr<_1eee75baa_TypeAlias>();
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _field_banned_generics = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>();
	jule::Bool _field_inscatch = jule::Bool();


	_1eee8d6a6_TypeChecker(jule::Ptr<_1eedca071_Sema> __param_s, jule::Trait<_1eee992c7_Lookup> __param_lookup, jule::Ptr<_1eee8c760_Referencer> __param_referencer, _1e02c1d07_Token __param_error_token, jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain, jule::Bool __param_dis_builtin, jule::Bool __param_selection, jule::Ptr<_1eee75baa_TypeAlias> __param_owner_alias, jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> __param_banned_generics, jule::Bool __param_inscatch): _field_s(__param_s), _field_lookup(__param_lookup), _field_referencer(__param_referencer), _field_error_token(__param_error_token), _field_ignore_generics(__param_ignore_generics), _field_use_generics(__param_use_generics), _field_not_plain(__param_not_plain), _field_dis_builtin(__param_dis_builtin), _field_selection(__param_selection), _field_owner_alias(__param_owner_alias), _field_banned_generics(__param_banned_generics), _field_inscatch(__param_inscatch) {}

	

	_1eee8d6a6_TypeChecker(void) = default;

	inline bool operator==(_1eee8d6a6_TypeChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_lookup == _other._field_lookup &&
			this->_field_referencer == _other._field_referencer &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_ignore_generics == _other._field_ignore_generics &&
			this->_field_use_generics == _other._field_use_generics &&
			this->_field_not_plain == _other._field_not_plain &&
			this->_field_dis_builtin == _other._field_dis_builtin &&
			this->_field_selection == _other._field_selection &&
			this->_field_owner_alias == _other._field_owner_alias &&
			this->_field_banned_generics == _other._field_banned_generics &&
			this->_field_inscatch == _other._field_inscatch;
	}

	inline bool operator!=(_1eee8d6a6_TypeChecker _other) { return !this->operator==(_other); }


};
struct _1e02d9bbb_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	_1e02c1d07_Token _field_setter = _1e02c1d07_Token();
	jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>>();
	jule::Ptr<_1e0181a63_Expr> _field_right = jule::Ptr<_1e0181a63_Expr>();


	_1e02d9bbb_AssignSt(jule::Bool __param_declarative, _1e02c1d07_Token __param_setter, jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>> __param_left, jule::Ptr<_1e0181a63_Expr> __param_right): _field_declarative(__param_declarative), _field_setter(__param_setter), _field_left(__param_left), _field_right(__param_right) {}

	

	_1e02d9bbb_AssignSt(void) = default;

	inline bool operator==(_1e02d9bbb_AssignSt _other) {
		return 
			this->_field_declarative == _other._field_declarative &&
			this->_field_setter == _other._field_setter &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_1e02d9bbb_AssignSt _other) { return !this->operator==(_other); }


};
struct _1e02d9ddb_ScopeTree {
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_parent = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<_1e01be3a8_Node> _field_stmts = jule::Slice<_1e01be3a8_Node>();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();


	_1e02d9ddb_ScopeTree(jule::Ptr<_1e02d9ddb_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<_1e01be3a8_Node> __param_stmts, _1e02c1d07_Token __param_end): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts), _field_end(__param_end) {}

	

	_1e02d9ddb_ScopeTree(void) = default;

	inline bool operator==(_1e02d9ddb_ScopeTree _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_deferred == _other._field_deferred &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_end == _other._field_end;
	}

	inline bool operator!=(_1e02d9ddb_ScopeTree _other) { return !this->operator==(_other); }


};
struct _1ee24e58e_CommonSubIdentExprModel {
	jule::Ptr<_1eee76b45_TypeKind> _field_expr_kind = jule::Ptr<_1eee76b45_TypeKind>();
	jule::Any _field_expr = jule::Any();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();


	_1ee24e58e_CommonSubIdentExprModel(jule::Ptr<_1eee76b45_TypeKind> __param_expr_kind, jule::Any __param_expr, _1e02c1d07_Token __param_token, jule::Str __param_ident): _field_expr_kind(__param_expr_kind), _field_expr(__param_expr), _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1ee24e58e_CommonSubIdentExprModel(void) = default;

	inline bool operator==(_1ee24e58e_CommonSubIdentExprModel _other) {
		return 
			this->_field_expr_kind == _other._field_expr_kind &&
			this->_field_expr == _other._field_expr &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1ee24e58e_CommonSubIdentExprModel _other) { return !this->operator==(_other); }


};
inline std::tuple<jule::Ptr<_1ed25d4b1_IR>,jule::Slice<_208de2238_Log>> static__1e00de075_build(jule::Str,jule::I32);
inline void _1e01136e8_append_structs(_1ed25d4b1_IR*,jule::Ptr<_1eedc3da0_Package>&,jule::Slice<jule::Ptr<_1ee242032_Struct>>&);
inline jule::Slice<jule::Ptr<_1ee242032_Struct>> _1ed2c632b_get_all_structures(_1ed25d4b1_IR*);
inline void _1ed2cad03_order(_1ed25d4b1_IR*);
struct _1ed25d4b1_IR {
	jule::Str _field_root = jule::Str();
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_1eedc3da0_Package> _field_main = jule::Ptr<_1eedc3da0_Package>();
	jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>>();
	_1ed280cca_OrderedDefines _field_ordered = _1ed280cca_OrderedDefines();


	_1ed25d4b1_IR(jule::Str __param_root, jule::Slice<jule::Str> __param_passes, jule::Ptr<_1eedc3da0_Package> __param_main, jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> __param_used, _1ed280cca_OrderedDefines __param_ordered): _field_root(__param_root), _field_passes(__param_passes), _field_main(__param_main), _field_used(__param_used), _field_ordered(__param_ordered) {}

	

	_1ed25d4b1_IR(void) = default;

	inline bool operator==(_1ed25d4b1_IR _other) {
		return 
			this->_field_root == _other._field_root &&
			this->_field_passes == _other._field_passes &&
			this->_field_main == _other._field_main &&
			this->_field_used == _other._field_used &&
			this->_field_ordered == _other._field_ordered;
	}

	inline bool operator!=(_1ed25d4b1_IR _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e01a6060_is_self(_1e02da10b_ParamDecl*);
inline jule::Bool _1e01a6b43_is_ref(_1e02da10b_ParamDecl*);
struct _1e02da10b_ParamDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Str _field_ident = jule::Str();


	_1e02da10b_ParamDecl(_1e02c1d07_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_1e02da10b_ParamDecl(void) = default;

	inline bool operator==(_1e02da10b_ParamDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1e02da10b_ParamDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02da54b_is_anon(_1e02da32b_FnDecl*);
struct _1e02da32b_FnDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>();
	jule::Ptr<_1e0181843_RetTypeDecl> _field_result = jule::Ptr<_1e0181843_RetTypeDecl>();
	jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>>();


	_1e02da32b_FnDecl(_1e02c1d07_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> __param_generics, jule::Ptr<_1e0181843_RetTypeDecl> __param_result, jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>> __param_params): _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params) {}

	

	_1e02da32b_FnDecl(void) = default;

	inline bool operator==(_1e02da32b_FnDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_global == _other._field_global &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_statically == _other._field_statically &&
			this->_field_exceptional == _other._field_exceptional &&
			this->_field_ident == _other._field_ident &&
			this->_field_directives == _other._field_directives &&
			this->_field_scope == _other._field_scope &&
			this->_field_generics == _other._field_generics &&
			this->_field_result == _other._field_result &&
			this->_field_params == _other._field_params;
	}

	inline bool operator!=(_1e02da32b_FnDecl _other) { return !this->operator==(_other); }


};
struct _1e02daea8_VarDecl {
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e02daea8_VarDecl(jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope, _1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_public(__param_public), _field_mutable(__param_mutable), _field_constant(__param_constant), _field_statically(__param_statically), _field_reference(__param_reference), _field_directives(__param_directives), _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_1e02daea8_VarDecl(void) = default;

	inline bool operator==(_1e02daea8_VarDecl _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_constant == _other._field_constant &&
			this->_field_statically == _other._field_statically &&
			this->_field_reference == _other._field_reference &&
			this->_field_directives == _other._field_directives &&
			this->_field_kind == _other._field_kind &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e02daea8_VarDecl _other) { return !this->operator==(_other); }


};
struct _1e02db31b_RetSt {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e02db31b_RetSt(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e02db31b_RetSt(void) = default;

	inline bool operator==(_1e02db31b_RetSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e02db31b_RetSt _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02dba36_is_inf(_1e02db816_Iter*);
struct _1e02db816_Iter {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();


	_1e02db816_Iter(_1e02c1d07_Token __param_token, jule::Any __param_kind, jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope): _field_token(__param_token), _field_kind(__param_kind), _field_scope(__param_scope) {}

	

	_1e02db816_Iter(void) = default;

	inline bool operator==(_1e02db816_Iter _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1e02db816_Iter _other) { return !this->operator==(_other); }


};
struct _1ee2511b7_BuiltinPanicCallExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_expr = jule::Any();


	_1ee2511b7_BuiltinPanicCallExprModel(_1e02c1d07_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1ee2511b7_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(_1ee2511b7_BuiltinPanicCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1ee2511b7_BuiltinPanicCallExprModel _other) { return !this->operator==(_other); }


};
struct _1ee25177d_BuiltinAssertCallExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();


	_1ee25177d_BuiltinAssertCallExprModel(_1e02c1d07_Token __param_token, jule::Any __param_expr, jule::Str __param_log): _field_token(__param_token), _field_expr(__param_expr), _field_log(__param_log) {}

	

	_1ee25177d_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(_1ee25177d_BuiltinAssertCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_log == _other._field_log;
	}

	inline bool operator!=(_1ee25177d_BuiltinAssertCallExprModel _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02dc0a8_is_while_next(_1e02dbd88_WhileKind*);
struct _1e02dbd88_WhileKind {
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Any _field_next = jule::Any();
	_1e02c1d07_Token _field_next_token = _1e02c1d07_Token();


	_1e02dbd88_WhileKind(jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Any __param_next, _1e02c1d07_Token __param_next_token): _field_expr(__param_expr), _field_next(__param_next), _field_next_token(__param_next_token) {}

	

	_1e02dbd88_WhileKind(void) = default;

	inline bool operator==(_1e02dbd88_WhileKind _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_next == _other._field_next &&
			this->_field_next_token == _other._field_next_token;
	}

	inline bool operator!=(_1e02dbd88_WhileKind _other) { return !this->operator==(_other); }


};
struct _200564430_MutSlicingExprModel {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_200564430_MutSlicingExprModel(_1e02c1d07_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_200564430_MutSlicingExprModel(void) = default;

	inline bool operator==(_200564430_MutSlicingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_200564430_MutSlicingExprModel _other) { return !this->operator==(_other); }


};
struct _1e02dc4a4_RangeKind {
	_1e02c1d07_Token _field_in_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e02daea8_VarDecl> _field_key_a = jule::Ptr<_1e02daea8_VarDecl>();
	jule::Ptr<_1e02daea8_VarDecl> _field_key_b = jule::Ptr<_1e02daea8_VarDecl>();


	_1e02dc4a4_RangeKind(_1e02c1d07_Token __param_in_token, jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Ptr<_1e02daea8_VarDecl> __param_key_a, jule::Ptr<_1e02daea8_VarDecl> __param_key_b): _field_in_token(__param_in_token), _field_expr(__param_expr), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1e02dc4a4_RangeKind(void) = default;

	inline bool operator==(_1e02dc4a4_RangeKind _other) {
		return 
			this->_field_in_token == _other._field_in_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_key_a == _other._field_key_a &&
			this->_field_key_b == _other._field_key_b;
	}

	inline bool operator!=(_1e02dc4a4_RangeKind _other) { return !this->operator==(_other); }


};
struct _1e02dc817_BreakSt {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_label = _1e02c1d07_Token();


	_1e02dc817_BreakSt(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1e02dc817_BreakSt(void) = default;

	inline bool operator==(_1e02dc817_BreakSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_1e02dc817_BreakSt _other) { return !this->operator==(_other); }


};
struct _1e02dcb7a_ContSt {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_label = _1e02c1d07_Token();


	_1e02dcb7a_ContSt(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1e02dcb7a_ContSt(void) = default;

	inline bool operator==(_1e02dcb7a_ContSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_1e02dcb7a_ContSt _other) { return !this->operator==(_other); }


};
struct _1e02dd087_If {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();


	_1e02dd087_If(_1e02c1d07_Token __param_token, jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope): _field_token(__param_token), _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1e02dd087_If(void) = default;

	inline bool operator==(_1e02dd087_If _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1e02dd087_If _other) { return !this->operator==(_other); }


};
struct _1e02dd3ea_Else {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();


	_1e02dd3ea_Else(_1e02c1d07_Token __param_token, jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope): _field_token(__param_token), _field_scope(__param_scope) {}

	

	_1e02dd3ea_Else(void) = default;

	inline bool operator==(_1e02dd3ea_Else _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_1e02dd3ea_Else _other) { return !this->operator==(_other); }


};
struct _1e01c3db3_TypeDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Any _field_kind = jule::Any();


	_1e01c3db3_TypeDecl(_1e02c1d07_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_1e01c3db3_TypeDecl(void) = default;

	inline bool operator==(_1e01c3db3_TypeDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1e01c3db3_TypeDecl _other) { return !this->operator==(_other); }


};
struct _1e02dde01_TypeAliasDecl {
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();


	_1e02dde01_TypeAliasDecl(jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Ptr<_1e01c3db3_TypeDecl> __param_kind): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind) {}

	

	_1e02dde01_TypeAliasDecl(void) = default;

	inline bool operator==(_1e02dde01_TypeAliasDecl _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_1e02dde01_TypeAliasDecl _other) { return !this->operator==(_other); }


};
struct _1e02de30d_Case {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>();


	_1e02de30d_Case(_1e02c1d07_Token __param_token, jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1e0181a63_Expr>> __param_exprs): _field_token(__param_token), _field_scope(__param_scope), _field_exprs(__param_exprs) {}

	

	_1e02de30d_Case(void) = default;

	inline bool operator==(_1e02de30d_Case _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_scope == _other._field_scope &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_1e02de30d_Case _other) { return !this->operator==(_other); }


};
struct _1e02de907_MatchCase {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();
	jule::Slice<jule::Ptr<_1e02de30d_Case>> _field_cases = jule::Slice<jule::Ptr<_1e02de30d_Case>>();
	jule::Ptr<_1e02dd3ea_Else> _field_default = jule::Ptr<_1e02dd3ea_Else>();


	_1e02de907_MatchCase(_1e02c1d07_Token __param_token, _1e02c1d07_Token __param_end, jule::Bool __param_type_match, jule::Ptr<_1e0181a63_Expr> __param_expr, jule::Slice<jule::Ptr<_1e02de30d_Case>> __param_cases, jule::Ptr<_1e02dd3ea_Else> __param_default): _field_token(__param_token), _field_end(__param_end), _field_type_match(__param_type_match), _field_expr(__param_expr), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1e02de907_MatchCase(void) = default;

	inline bool operator==(_1e02de907_MatchCase _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_type_match == _other._field_type_match &&
			this->_field_expr == _other._field_expr &&
			this->_field_cases == _other._field_cases &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1e02de907_MatchCase _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_1ee25a358_ParamIns> _1ee2560bd_instance(jule::Ptr<_1ee255b8e_Param>);
inline jule::Bool _1ee256398_is_self(_1ee255b8e_Param*);
inline jule::Bool _1ee256673_is_ref(_1ee255b8e_Param*);
struct _1ee255b8e_Param {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1eee7b4a7_TypeSymbol> _field_kind = jule::Ptr<_1eee7b4a7_TypeSymbol>();
	jule::Str _field_ident = jule::Str();


	_1ee255b8e_Param(_1e02c1d07_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1eee7b4a7_TypeSymbol> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_1ee255b8e_Param(void) = default;

	inline bool operator==(_1ee255b8e_Param _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_1ee255b8e_Param _other) { return !this->operator==(_other); }


};
inline jule::Bool _1ee257e7c_is_void(_1ee2579b5_Fn*);
inline jule::Bool _1ee258257_is_method(_1ee2579b5_Fn*);
inline jule::Bool _1ee258532_is_entry_point(_1ee2579b5_Fn*);
inline jule::Bool _1ee25880c_is_init(_1ee2579b5_Fn*);
inline jule::Bool _1ee258ad7_is_anon(_1ee2579b5_Fn*);
inline jule::Bool _1ee258db2_any_var(_1ee2579b5_Fn*);
inline jule::Bool _1ee2591d1_parameters_uses_generics(_1ee2579b5_Fn*);
inline jule::Bool _1ee25949a_result_uses_generics(_1ee2579b5_Fn*);
inline jule::Ptr<_1ee25b4ad_FnIns> _1ee259775_instance_force(jule::Ptr<_1ee2579b5_Fn>);
inline jule::Ptr<_1ee25b4ad_FnIns> _1ee259a50_instance(jule::Ptr<_1ee2579b5_Fn>);
inline std::tuple<jule::Bool,jule::I32> _1ee259e07_append_instance(_1ee2579b5_Fn*,jule::Ptr<_1ee25b4ad_FnIns>&);
struct _1ee2579b5_Fn {
	jule::Ptr<_1eedca071_Sema> _field_sema = jule::Ptr<_1eedca071_Sema>();
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1e02812b1_Directive>> _field_directives = jule::Slice<jule::Ptr<_1e02812b1_Directive>>();
	jule::Ptr<_1e02d9ddb_ScopeTree> _field_scope = jule::Ptr<_1e02d9ddb_ScopeTree>();
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>();
	jule::Ptr<_1ee255342_RetType> _field_result = jule::Ptr<_1ee255342_RetType>();
	jule::Slice<jule::Ptr<_1ee255b8e_Param>> _field_params = jule::Slice<jule::Ptr<_1ee255b8e_Param>>();
	jule::Ptr<_1ee242032_Struct> _field_owner = jule::Ptr<_1ee242032_Struct>();
	jule::Slice<jule::Ptr<_1ee25b4ad_FnIns>> _field_instances = jule::Slice<jule::Ptr<_1ee25b4ad_FnIns>>();


	_1ee2579b5_Fn(jule::Ptr<_1eedca071_Sema> __param_sema, _1e02c1d07_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_1e02812b1_Directive>> __param_directives, jule::Ptr<_1e02d9ddb_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> __param_generics, jule::Ptr<_1ee255342_RetType> __param_result, jule::Slice<jule::Ptr<_1ee255b8e_Param>> __param_params, jule::Ptr<_1ee242032_Struct> __param_owner, jule::Slice<jule::Ptr<_1ee25b4ad_FnIns>> __param_instances): _field_sema(__param_sema), _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params), _field_owner(__param_owner), _field_instances(__param_instances) {}

	

	_1ee2579b5_Fn(void) = default;

	inline bool operator==(_1ee2579b5_Fn _other) {
		return 
			this->_field_sema == _other._field_sema &&
			this->_field_token == _other._field_token &&
			this->_field_global == _other._field_global &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_statically == _other._field_statically &&
			this->_field_exceptional == _other._field_exceptional &&
			this->_field_ident == _other._field_ident &&
			this->_field_directives == _other._field_directives &&
			this->_field_scope == _other._field_scope &&
			this->_field_generics == _other._field_generics &&
			this->_field_result == _other._field_result &&
			this->_field_params == _other._field_params &&
			this->_field_owner == _other._field_owner &&
			this->_field_instances == _other._field_instances;
	}

	inline bool operator!=(_1ee2579b5_Fn _other) { return !this->operator==(_other); }


};
struct _1e02e009a_UseDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<_1e02c1d07_Token> _field_selected = jule::Slice<_1e02c1d07_Token>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();


	_1e02e009a_UseDecl(_1e02c1d07_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_1e02c1d07_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std): _field_token(__param_token), _field_link_path(__param_link_path), _field_alias(__param_alias), _field_full(__param_full), _field_selected(__param_selected), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std) {}

	

	_1e02e009a_UseDecl(void) = default;

	inline bool operator==(_1e02e009a_UseDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_link_path == _other._field_link_path &&
			this->_field_alias == _other._field_alias &&
			this->_field_full == _other._field_full &&
			this->_field_selected == _other._field_selected &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_std == _other._field_std;
	}

	inline bool operator!=(_1e02e009a_UseDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02e0908_auto_expr(_1e02e04a7_EnumItemDecl*);
struct _1e02e04a7_EnumItemDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1e0181a63_Expr> _field_expr = jule::Ptr<_1e0181a63_Expr>();


	_1e02e04a7_EnumItemDecl(_1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Ptr<_1e0181a63_Expr> __param_expr): _field_token(__param_token), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_1e02e04a7_EnumItemDecl(void) = default;

	inline bool operator==(_1e02e04a7_EnumItemDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_1e02e04a7_EnumItemDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _1e02e10bd_default_typed(_1e02e0d9d_EnumDecl*);
struct _1e02e0d9d_EnumDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>>();
	_1e02c1d07_Token _field_end = _1e02c1d07_Token();


	_1e02e0d9d_EnumDecl(_1e02c1d07_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>> __param_items, _1e02c1d07_Token __param_end): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_end(__param_end) {}

	

	_1e02e0d9d_EnumDecl(void) = default;

	inline bool operator==(_1e02e0d9d_EnumDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_items == _other._field_items &&
			this->_field_end == _other._field_end;
	}

	inline bool operator!=(_1e02e0d9d_EnumDecl _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2005a036c_ObjectCoder> static__20059d535_new(jule::Ptr<_1ed25d4b1_IR>&,_2005bb872_SerializationInfo);
inline void _2005922d7_add_indent(_2005a036c_ObjectCoder*);
inline void _2005953ea_done_indent(_2005a036c_ObjectCoder*);
inline jule::Str _200594c57_indent(_2005a036c_ObjectCoder*);
inline jule::I32 _2005be435_find_type_offset(_2005a036c_ObjectCoder*,jule::Ptr<_1eec8627e_Trait>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Str _2005beb61_loc_info(_2005a036c_ObjectCoder*,_1e02c1d07_Token&);
inline jule::Str _2005a2d86_links(_2005a036c_ObjectCoder*);
inline jule::Str _2005debe7_param_ins(_2005a036c_ObjectCoder*,jule::Ptr<_1ee25a358_ParamIns>&);
inline jule::Str _2005ded5c_param(_2005a036c_ObjectCoder*,jule::Ptr<_1ee255b8e_Param>&);
inline jule::Str _2005deec2_params(_2005a036c_ObjectCoder*,jule::Slice<jule::Ptr<_1ee255b8e_Param>>&);
inline jule::Str _2005e0137_params_ins(_2005a036c_ObjectCoder*,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>&);
inline jule::Str _2005e029c_params_decls(_2005a036c_ObjectCoder*,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>&);
inline void _2005e0412_prepare_structure(_2005a036c_ObjectCoder*,jule::Ptr<_1ee242032_Struct>&);
inline void _2005e0577_prepare_structures(_2005a036c_ObjectCoder*);
inline void _2005e06dc_build_trait_wrapper(_2005a036c_ObjectCoder*,jule::Ptr<_20059b775_TraitHash>&);
inline void _2005e0852_trait_decl(_2005a036c_ObjectCoder*,jule::Ptr<_1eec8627e_Trait>&);
inline void _2005e09b7_trait_decls(_2005a036c_ObjectCoder*,jule::Ptr<_1eedc3da0_Package>&);
inline jule::Str _2005e0b2c_structure_plain_decl(_2005a036c_ObjectCoder*,jule::Ptr<_1ee242032_Struct>&);
inline jule::Str _2005e0c92_structure_plain_decls(_2005a036c_ObjectCoder*);
inline jule::Str _2005e0e07_var_init_expr(_2005a036c_ObjectCoder*,jule::Ptr<_1eedeb24b_Var>&,jule::Str);
inline jule::Str _2005e106c_var(_2005a036c_ObjectCoder*,jule::Ptr<_1eedeb24b_Var>);
inline jule::Str _2005e11d2_field_decl(_2005a036c_ObjectCoder*,jule::Ptr<_1ee2449b3_FieldIns>&);
inline jule::Str _2005e1347_structure_constructor(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e14ac_structure_destructor(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline void _2005e1622_structure_operator_eq(_2005a036c_ObjectCoder*,jule::Str&,jule::Str&,jule::Ptr<_1ee24550d_StructIns>&);
inline void _2005e1787_structure_operator_not_eq(_2005a036c_ObjectCoder*,jule::Str&,jule::Str&,jule::Ptr<_1ee24550d_StructIns>&);
inline void _2005e1974_structure_operator(_2005a036c_ObjectCoder*,jule::Str&,jule::Str&,jule::Ptr<_1ee25b4ad_FnIns>&,jule::Str);
inline jule::Str _2005e1d1a_structure_operators(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e2216_structure_derive_defs_decls(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e25ac_structure_ins_decl(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e2964_structure_decl(_2005a036c_ObjectCoder*,jule::Ptr<_1ee242032_Struct>&);
inline jule::Str _2005e2c3e_structure_decls(_2005a036c_ObjectCoder*);
inline jule::Str _2005e31c3_func_head(_2005a036c_ObjectCoder*,jule::Ptr<_1ee25b4ad_FnIns>&,jule::Bool);
inline jule::Str _2005e3657_func_decl(_2005a036c_ObjectCoder*,jule::Ptr<_1ee2579b5_Fn>&,jule::Bool);
inline jule::Str _2005e3a0e_func_decls(_2005a036c_ObjectCoder*,jule::Ptr<_1eedc3da0_Package>&);
inline void _2005e3c51_build_trait_map(_2005a036c_ObjectCoder*);
inline void _2005e3e93_process_traits(_2005a036c_ObjectCoder*);
inline jule::Str _2005e426d_decls(_2005a036c_ObjectCoder*);
inline jule::Str _2005e4702_pkg_globals(_2005a036c_ObjectCoder*,jule::Ptr<_1eedc3da0_Package>&,jule::Str&);
inline jule::Str _2005e4aa9_globals(_2005a036c_ObjectCoder*,jule::Str&);
inline jule::Str _2005e4e61_func(_2005a036c_ObjectCoder*,jule::Ptr<_1ee2579b5_Fn>&);
inline jule::Str _2005e5318_pkg_funcs(_2005a036c_ObjectCoder*,jule::Ptr<_1eedc3da0_Package>&);
inline jule::Str _2005e56c0_structure_methods(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e5a77_structure_ostream(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e5e2e_structure_derive_defs(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e62d6_structure_ins(_2005a036c_ObjectCoder*,jule::Ptr<_1ee24550d_StructIns>&);
inline jule::Str _2005e668d_structure(_2005a036c_ObjectCoder*,jule::Ptr<_1ee242032_Struct>&);
inline jule::Str _2005e6968_structures(_2005a036c_ObjectCoder*);
inline jule::Str _2005e6c43_funcs(_2005a036c_ObjectCoder*);
inline void _2005e713e_push_init(_2005a036c_ObjectCoder*,jule::Ptr<_1eedc3da0_Package>&,jule::Str&);
inline jule::Str _2005e74e6_init_caller(_2005a036c_ObjectCoder*,jule::Str&);
inline void _2005e7815_append_standard(_2005a036c_ObjectCoder*,jule::Str&);
inline jule::Str _2005e7ae0_serialize(_2005a036c_ObjectCoder*);
struct _2005a036c_ObjectCoder {
	jule::Ptr<_1ed25d4b1_IR> _field_ir = jule::Ptr<_1ed25d4b1_IR>();
	_2005bb872_SerializationInfo _field_info = _2005bb872_SerializationInfo();
	jule::Str _field_indent_buffer = jule::Str();
	jule::Str _field_trait_declarations = jule::Str();
	jule::Str _field_trait_wrappers = jule::Str();
	jule::Str _field_trait_data = jule::Str();
	jule::Str _field_trait_data_t = jule::Str();
	jule::Slice<jule::Ptr<_20059b775_TraitHash>> _field_trait_map = jule::Slice<jule::Ptr<_20059b775_TraitHash>>();
	jule::Ptr<_2005213cb_ExprCoder> _field_ec = jule::Ptr<_2005213cb_ExprCoder>();
	jule::Ptr<_2004729c0_ScopeCoder> _field_sc = jule::Ptr<_2004729c0_ScopeCoder>();


	_2005a036c_ObjectCoder(jule::Ptr<_1ed25d4b1_IR> __param_ir, _2005bb872_SerializationInfo __param_info, jule::Str __param_indent_buffer, jule::Str __param_trait_declarations, jule::Str __param_trait_wrappers, jule::Str __param_trait_data, jule::Str __param_trait_data_t, jule::Slice<jule::Ptr<_20059b775_TraitHash>> __param_trait_map, jule::Ptr<_2005213cb_ExprCoder> __param_ec, jule::Ptr<_2004729c0_ScopeCoder> __param_sc): _field_ir(__param_ir), _field_info(__param_info), _field_indent_buffer(__param_indent_buffer), _field_trait_declarations(__param_trait_declarations), _field_trait_wrappers(__param_trait_wrappers), _field_trait_data(__param_trait_data), _field_trait_data_t(__param_trait_data_t), _field_trait_map(__param_trait_map), _field_ec(__param_ec), _field_sc(__param_sc) {}

	

	_2005a036c_ObjectCoder(void) = default;

	inline bool operator==(_2005a036c_ObjectCoder _other) {
		return 
			this->_field_ir == _other._field_ir &&
			this->_field_info == _other._field_info &&
			this->_field_indent_buffer == _other._field_indent_buffer &&
			this->_field_trait_declarations == _other._field_trait_declarations &&
			this->_field_trait_wrappers == _other._field_trait_wrappers &&
			this->_field_trait_data == _other._field_trait_data &&
			this->_field_trait_data_t == _other._field_trait_data_t &&
			this->_field_trait_map == _other._field_trait_map &&
			this->_field_ec == _other._field_ec &&
			this->_field_sc == _other._field_sc;
	}

	inline bool operator!=(_2005a036c_ObjectCoder _other) { return !this->operator==(_other); }


};
struct _1ee261518_Pass {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_text = jule::Str();


	_1ee261518_Pass(_1e02c1d07_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_1ee261518_Pass(void) = default;

	inline bool operator==(_1ee261518_Pass _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_text == _other._field_text;
	}

	inline bool operator!=(_1ee261518_Pass _other) { return !this->operator==(_other); }


};
struct _1e02e160c_FieldDecl {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1e01c3db3_TypeDecl> _field_kind = jule::Ptr<_1e01c3db3_TypeDecl>();
	jule::Ptr<_1e0181a63_Expr> _field_default = jule::Ptr<_1e0181a63_Expr>();


	_1e02e160c_FieldDecl(_1e02c1d07_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1e01c3db3_TypeDecl> __param_kind, jule::Ptr<_1e0181a63_Expr> __param_default): _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_1e02e160c_FieldDecl(void) = default;

	inline bool operator==(_1e02e160c_FieldDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_1e02e160c_FieldDecl _other) { return !this->operator==(_other); }


};
inline jule::Str _1eec866ad_to_str(_1eec8627e_Trait*);
inline jule::Bool _1eec86a65_equals(jule::Ptr<_1eec8627e_Trait>,jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1eec86e3e_is_builtin(_1eec8627e_Trait*);
inline jule::Ptr<_1ee2579b5_Fn> _1eec872e6_find_method(_1eec8627e_Trait*,jule::Str);
struct _1eec8627e_Trait {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _field_methods = jule::Slice<jule::Ptr<_1ee2579b5_Fn>>();
	jule::Slice<jule::Ptr<_1ee242032_Struct>> _field_implemented = jule::Slice<jule::Ptr<_1ee242032_Struct>>();


	_1eec8627e_Trait(_1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Bool __param_mutable, jule::Slice<jule::Ptr<_1ee2579b5_Fn>> __param_methods, jule::Slice<jule::Ptr<_1ee242032_Struct>> __param_implemented): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_mutable(__param_mutable), _field_methods(__param_methods), _field_implemented(__param_implemented) {}

	

	_1eec8627e_Trait(void) = default;

	inline bool operator==(_1eec8627e_Trait _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_methods == _other._field_methods &&
			this->_field_implemented == _other._field_implemented;
	}

	inline bool operator!=(_1eec8627e_Trait _other) { return !this->operator==(_other); }


};
inline jule::Bool _1eec8825e_auto_expr(_1eec87d0d_EnumItem*);
struct _1eec87d0d_EnumItem {
	_1e02c1d07_Token _field_token = _1e02c1d07_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1eee44e98_Value> _field_value = jule::Ptr<_1eee44e98_Value>();


	_1eec87d0d_EnumItem(_1e02c1d07_Token __param_token, jule::Str __param_ident, jule::Ptr<_1eee44e98_Value> __param_value): _field_token(__param_token), _field_ident(__param_ident), _field_value(__param_value) {}

	

	_1eec87d0d_EnumItem(void) = default;

	inline bool operator==(_1eec87d0d_EnumItem _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_value == _other._field_value;
	}

	inline bool operator!=(_1eec87d0d_EnumItem _other) { return !this->operator==(_other); }


};
inline std::tuple<jule::I64,jule::Bool> _200617291_parse_integer_0(_200616b64_ArgParser*,jule::Str&,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I32)>);
inline std::tuple<jule::U64,jule::Bool> _200617291_parse_integer_1(_200616b64_ArgParser*,jule::Str&,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I32)>);
inline jule::Str _20061756b_get_data(_200616b64_ArgParser*);
inline jule::VoidExceptional _20061788a_process_flag(_200616b64_ArgParser*,jule::Trait<_2006123bd_CommonFlag>&);
inline jule::VoidExceptional _200617ba9_single_dash(_200616b64_ArgParser*,jule::Str&);
inline jule::VoidExceptional _200617ec8_double_dash(_200616b64_ArgParser*,jule::Str&);
inline jule::VoidExceptional _20061821a_try_arg(_200616b64_ArgParser*);
inline jule::VoidExceptional _20061845c_parse(_200616b64_ArgParser*);
struct _200616b64_ArgParser {
	_200613ba5_FlagSet _field_set = _200613ba5_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::I32 _field_i = jule::I32();


	_200616b64_ArgParser(_200613ba5_FlagSet __param_set, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_content, jule::I32 __param_i): _field_set(__param_set), _field_args(__param_args), _field_content(__param_content), _field_i(__param_i) {}

	

	_200616b64_ArgParser(void) = default;

	inline bool operator==(_200616b64_ArgParser _other) {
		return 
			this->_field_set == _other._field_set &&
			this->_field_args == _other._field_args &&
			this->_field_content == _other._field_content &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_200616b64_ArgParser _other) { return !this->operator==(_other); }


};
inline void _22237de5e_push_opt_level(jule::I32);
inline jule::I32 _22249ea96_decode_rune(jule::I32,jule::I32);
inline std::tuple<jule::I32,jule::I32> _22249eda4_encode_rune(jule::I32);
inline jule::Slice<jule::I32> _2224a0514_decode(jule::Slice<jule::U16>);
inline jule::Slice<jule::U16> _2224a08ee_append_rune(jule::Slice<jule::U16>,jule::I32);
inline jule::Slice<jule::U16> _2224846d5_utf16_from_str(jule::Str);
inline jule::Str _2224a0a97_utf16_to_str(jule::Slice<jule::U16>);
inline jule::Str _2224a0c0c_u16_ptr_to_str(jule::U16*);
inline jule::I32 _222450690_get_last_errno(void);
inline jule::U32 _2224a1c52_get_std_handle(jule::U32);
inline jule::I32 _2224a202c_wstat(jule::U16*,struct stat*);
inline jule::I32 _2224a2192__wopen(jule::U16*,jule::I32,jule::I32);
inline jule::U32 _2224a2307_get_last_error(void);
inline jule::U32 _2224a246c_get_current_directory(jule::U32,jule::U16*);
inline jule::Bool _2224a2934_delete_file(jule::U16*);
inline jule::Bool _2224a2c42_create_directory(jule::U16*);
inline jule::Bool _2224a3050_remove_directory(jule::U16*);
inline _WDIR* _2224a335d__wopendir(jule::U16*);
inline struct _wdirent* _2224a366b__wreaddir(_WDIR*);
inline jule::I32 _2224a3979__wclosedir(_WDIR*);
inline jule::U32 _2224a4260_get_full_path_name(jule::U16*,jule::U32,jule::U16*,jule::U16**);
inline jule::Bool _2224a464a_get_console_mode(jule::U32,jule::I32&);
inline jule::Bool _2224a4a35_set_console_mode(jule::U32,jule::I32);
inline jule::Bool _2224a51a6_write_console(jule::U32,jule::U16*,jule::I32,jule::I32&,void*);
inline jule::Bool _2224a5827_read_console(jule::U32,jule::U16*,jule::I32,jule::I32&,void*);
inline jule::I32 _2224a8253_seek(jule::I32,jule::I32,jule::I32);
inline jule::I32 _2224a871a_read(jule::I32,void*,jule::U32);
inline jule::I32 _2224a8ab1_close(jule::I32);
inline jule::I32 _2224a9078_write(jule::I32,void*,jule::U32);
inline void _2224a92ed_exit(jule::I32);
inline std::tuple<jule::I32,jule::I32> _222567dc3_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::I32> _222568533_decode_last_rune(jule::Slice<jule::U8>);
inline jule::I32 _222568b4e_rune_len(jule::I32);
inline jule::I32 _2225690c2_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _2225694ac_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _222569897_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::I32 _222569eb3_rune_count_str(jule::Str);
inline jule::Bool _22256a2c1_rune_start(jule::U8);
inline jule::I32 _22edc2db3_get_last_os_error_windows(void);
inline jule::Slice<jule::Str> _22edc40d4_args(void);
inline jule::Exceptional<jule::Str> _22edc458a_working_dir(void);
inline jule::Exceptional<jule::Str> _22edc52c2___getwd(void);
inline jule::Slice<jule::U8> _22ee40d65_stobs(jule::Str&);
inline jule::Bool _208c2d86b_is_letter(jule::I32);
inline jule::Bool _208c7101d_is16(jule::Slice<_208c6de2d_Range16>,jule::U16);
inline jule::Bool _208c71408_is32(jule::Slice<_208c6e4c2_Range32>,jule::U32);
inline jule::Bool _208c71c66_is_excluding_latin(jule::Ptr<_208c6ea22_RangeTable>,jule::I32);
inline jule::Str _208bde08a_repeat(jule::Str,jule::I32);
inline jule::Bool _208a4164b__has_prefix(jule::Str&,jule::Str&,jule::I32);
inline jule::Bool _208be3dd6_has_prefix(jule::Str,jule::Str);
inline jule::Bool _208bee93b__has_suffix(jule::Str&,jule::Str&,jule::I32);
inline jule::Bool _208be3556_has_suffix(jule::Str,jule::Str);
inline jule::I32 _208be25cc_find_at(jule::Str,jule::Str,jule::I32);
inline jule::I32 _2308c0e43_find_last_at(jule::Str,jule::Str,jule::I32);
inline jule::I32 _2308c10a8_find_last(jule::Str,jule::Str);
inline jule::I32 _2308c17c3__find_rune(jule::Slice<jule::U8>&,jule::I32);
inline jule::I32 _2308c1cce_find_last_byte(jule::Str,jule::U8);
inline jule::I32 _208c7265c_find_any(jule::Str,jule::Str);
inline jule::Slice<jule::Str> _208c72937_split(jule::Str,jule::Str,jule::I32);
inline jule::Bool _208c72a9c_contains(jule::Str,jule::Str);
inline jule::Bool _208c72edc_contains_any(jule::Str,jule::Str);
inline jule::Str _208c732b7_replace(jule::Str,jule::Str,jule::Str,jule::I32);
inline void _2308c1a9d__trim_left(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _208c73ce0_trim_left(jule::Str,jule::Str);
inline void _208c73e55__trim_right(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _208c74230_trim(jule::Str,jule::Str);
inline jule::Bool _22ed9de49_is_path_sep(jule::U8);
inline jule::Bool _22ed9e0ae_is_slash(jule::U8);
inline jule::U8 _22ed9e224_to_upper(jule::U8);
inline jule::I32 _22ed9e664_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Str,jule::Bool> _22ed9e8a6_cut_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _22ed9ebb4_full_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _22eda005a___abs(jule::Str);
inline jule::Str _22eda0368___join(jule::Slice<jule::Str>);
inline jule::Str _208c74b6a_clean(jule::Str);
inline jule::Str _208c74e45_from_slash(jule::Str);
inline jule::Str _208c750aa_join(jule::Slice<jule::Str>);
inline jule::Str _208c75220_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _208c75385_abs(jule::Str);
inline jule::Str _208c754ea_base(jule::Str);
inline jule::Str _208c75660_dir(jule::Str);
inline jule::Str _208c757c5_volume_name(jule::Str);
inline jule::I32 _2223dddc0_get_last_fs_error(void);
inline jule::Bool _2225400cb_is_console_handle(jule::U32);
inline jule::I32 _208e1c791_get_last_process_error(void);
inline jule::Slice<wchar_t*> _208e324dc_ustr_slice_to_wcstr_slice(jule::Slice<jule::Slice<jule::U16>>);
inline jule::Slice<jule::Slice<jule::U16>> _208e327ea_str_slice_to_ustr_slice(jule::Slice<jule::Str>);
inline jule::I32 _208e32bc4_execvp(jule::Str,jule::Slice<jule::Str>);
inline jule::I32 _208e3318b_execve(jule::Str,jule::Slice<jule::Str>,jule::Slice<jule::Str>);
inline void _208e33ed3_exit(jule::I32);
inline jule::Str _208e34214_executable(void);
inline jule::Bool _208dd1348_is_std_header_path(jule::Str);
inline jule::Bool _208dd1634_is_valid_header_ext(jule::Str);
inline jule::Bool _208dd1942_is_valid_cpp_ext(jule::Str);
inline jule::Str _208de2722_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _208de2a74_arg_to_str(jule::Any);
inline jule::I32 _208de2d82_find_next_fmt(jule::Str);
inline jule::Str _208de32b1_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _208de44c1_is_top_directive(jule::Str);
inline jule::Bool _208de623c_is_windows(jule::Str);
inline jule::Bool _208de658e_is_darwin(jule::Str);
inline jule::Bool _208de689c_is_linux(jule::Str);
inline jule::Bool _208de6bee_is_i386(jule::Str);
inline jule::Bool _208de700c_is_amd64(jule::Str);
inline jule::Bool _208de731a_is_arm64(jule::Str);
inline jule::Bool _208de7628_is_unix(jule::Str);
inline jule::Bool _208de79be_is_32bit(jule::Str);
inline jule::Bool _208de7ccc_is_64bit(jule::Str);
inline void _208e05724_init(void);
inline jule::Bool _1e02c2621_is_unary_op(jule::Str);
inline jule::Bool _1e02c2973_is_bin_op(jule::Str);
inline jule::Bool _1e02c30d3_is_str(jule::Str);
inline jule::Bool _1e02c33e1_is_raw_str(jule::Str);
inline jule::Bool _1e02c36ee_is_rune(jule::Str);
inline jule::Bool _1e02c3da3_is_bool(jule::Str);
inline jule::Bool _1e02c41b1_is_float(jule::Str);
inline jule::Bool _1e02c44be_is_num(jule::Str);
inline jule::Bool _1e02c4ada_is_ignore_ident(jule::Str);
inline jule::Bool _1e02c4de8_is_anon_ident(jule::Str);
inline jule::Bool _1e02c5514_is_space(jule::I32);
inline jule::Bool _1e02c5943_is_letter(jule::I32);
inline jule::Bool _1e02c605e_is_decimal(jule::U8);
inline jule::Bool _1e02c636c_is_binary(jule::U8);
inline jule::Bool _1e02c667a_is_octal(jule::U8);
inline jule::Bool _1e02c6988_is_hex(jule::U8);
inline jule::Bool _1e02c6c96_is_assign(jule::U32);
inline jule::Bool _1e02c70a4_is_postfix_op(jule::Str);
inline jule::Bool _1e02c73b2_is_assign_op(jule::Str);
inline jule::Ptr<_1e02c7e51_File> _1e02c97e3_new_file_set(jule::Str);
inline _208de2238_Log _1e02cb31c_make_err(jule::I32,jule::I32,jule::Ptr<_1e02c7e51_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1e02cb74b_bytes_has_prefix(jule::Slice<jule::U8>&,jule::Str);
inline jule::Str _1e02cbb36_float_fmt_e(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02cc065_float_fmt_p(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02cc450_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02cc83a_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02ccc25_float_fmt_dotp(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02cd198_float_num(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02cd4a6_common_num(jule::Slice<jule::U8>&);
inline jule::Str _1e02cd7b4_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _1e02cdb9e_is_float_fmt_e(jule::U8,jule::I32);
inline jule::Bool _1e02ce089_is_float_fmt_p(jule::U8,jule::I32);
inline jule::Bool _1e02ce474_is_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::I32);
inline jule::Bool _1e02ce85e_is_float_fmt_dotp(jule::Slice<jule::U8>&,jule::I32);
inline jule::Bool _1e02cec49_is_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02d0178_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _1e02d0486_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _1e02d0871_hex_escape(jule::Slice<jule::U8>&,jule::I32);
inline jule::Str _1e02d0bc3_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _1e02d1014_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _1e02d1311_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _1e02d161e_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_208de2238_Log> _1e02d713b_lex(jule::Ptr<_1e02c7e51_File>,jule::I32);
inline jule::Bool _1e0140505_find_module_file(jule::Slice<jule::Ptr<_2223e8825_DirEntry>>&);
inline jule::Str _1e014231a_find_module_file_deep(jule::Str);
inline jule::Slice<_208de2238_Log> _1e014363a_check_module_file(jule::Str);
inline jule::Ptr<_1ed0e56de_FileInfo> _1ed0e5ba6_parse_file(jule::Ptr<_1e02c7e51_File>);
inline std::tuple<jule::Ptr<_1e01bcb7b_Ast>,jule::Slice<_208de2238_Log>> _1ed0e6080_parse_fileset(jule::Ptr<_1e02c7e51_File>);
inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed0e6bda_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _1ed0e6dd8_is_st(_1e02c1d07_Token,_1e02c1d07_Token);
inline jule::Bool _1ed0e7317_prev_is_incomplete_expr(jule::Slice<_1e02c1d07_Token>&,jule::I32&);
inline std::tuple<jule::I32,jule::Bool> _1ed0e7735_next_st_pos(jule::Slice<_1e02c1d07_Token>&,jule::I32);
inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::Bool> _1ed0e7b20_skip_st(jule::I32&,jule::Slice<_1e02c1d07_Token>);
inline jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _1ed0e83c3_split_stmts(jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1ed107888_CallData> _1ed107c62_get_call_data(jule::Slice<_1e02c1d07_Token>&);
inline jule::Slice<_1e02c1d07_Token> _1ed1080b4_get_block_expr(jule::Slice<_1e02c1d07_Token>&);
inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::Slice<_1e02c1d07_Token>> _1ed1083c2_split_colon(jule::Slice<_1e02c1d07_Token>&);
inline jule::I32 _1ed108724_find_lowest_prec_op(jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e0182a64_IdentExpr> _1ed108a32_build_ident_expr(_1e02c1d07_Token&);
inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::I32> _1ed108d40_get_range_expr_tokens(jule::Slice<_1e02c1d07_Token>&);
inline jule::Bool _1ed116b61_check_assign_tokens(jule::Slice<_1e02c1d07_Token>&);
inline _208de2238_Log _1ed118448_make_err(jule::I32,jule::I32,jule::Ptr<_1e02c7e51_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_1e02c1d07_Token> _1ed1189ed_range(jule::I32&,jule::Str,jule::Str,jule::Slice<_1e02c1d07_Token>&);
inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::Slice<_1e02c1d07_Token>> _1ed118d0b_range_last(jule::Slice<_1e02c1d07_Token>&);
inline std::tuple<jule::Slice<jule::Slice<_1e02c1d07_Token>>,jule::Slice<_208de2238_Log>> _1ed119317_parts(jule::Slice<_1e02c1d07_Token>&,jule::U32,jule::Bool);
inline jule::Str _1ed119669_get_close_kind_of_brace(jule::Str);
inline _208de2238_Log _1ed119b20_compiler_err(_1e02c1d07_Token&,jule::Str&,jule::Slice<jule::Any>);
inline void _1ed11a04e_push_suggestion(_208de2238_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1ed11a3e5_tokstoa(jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed12e22d_build_void_type(void);
inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed12e481_build_prim_type(_1e02c1d07_Token);
inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::I32> _1ed12e86b_split_map_range(jule::Slice<_1e02c1d07_Token>&,jule::I32&);
inline jule::I32 _1eec4a4a7_leading_zeros64(jule::U64);
inline jule::I32 _1eec4b046_trailing_zeros(jule::U32);
inline jule::I32 _1eec4ba08_trailing_zeros32(jule::U32);
inline jule::I32 _1eec4bd16_trailing_zeros64(jule::U64);
inline jule::I32 _1eec52a31_len32(jule::U32);
inline jule::I32 _1eec52d3e_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _1eec53c85_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::U64,jule::U64> _1eec5588b_mul64(jule::U64,jule::U64);
inline jule::U32 _1eeb7c142_f32_bits(jule::F32);
inline jule::F32 _1eeb7c494_f32_from_bits(jule::U32);
inline jule::U64 _1eeb7c7a2_f64_bits(jule::F64);
inline jule::F64 _1eeb7cb04_f64_from_bits(jule::U64);
inline std::tuple<jule::F64,jule::I32> _1eeb7ed9d_frexp(jule::F64);
inline jule::F64 _1eeb940e3_nan(void);
inline jule::Bool _1eeb98614_is_nan(jule::F64);
inline jule::F64 _1eeb9dc68_inf(jule::I32);
inline jule::Bool _1eeba0440_is_inf(jule::F64,jule::I32);
inline std::tuple<jule::F64,jule::I32> _1eeba2d27_normalize(jule::F64);
inline jule::F64 _1eebcc9bc_log(jule::F64);
inline jule::F64 _1eec58c24_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _1eec5a7e7_modf(jule::F64);
inline jule::F64 _1eec5ac7b_log2(jule::F64);
inline jule::Str _1ed3c6371_fmt_float(jule::F64,jule::U8,jule::I32,jule::I32);
inline jule::Slice<jule::U8> _1eea6cce1_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::I32,jule::I32);
inline jule::Slice<jule::U8> _1ed3b01e5_big_ftoa(jule::Slice<jule::U8>,jule::I32,jule::U8,jule::Bool,jule::U64,jule::I32,_1ecda7acd_FloatInfo&);
inline jule::Slice<jule::U8> _1ed3b26c0_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_1ed45d6e4_DecimalSlice,jule::I32,jule::U8);
inline void _1ed465ad6_round_shortest(_1eec80366_Decimal&,jule::U64,jule::I32,_1ecda7acd_FloatInfo&);
inline jule::Slice<jule::U8> _1eea95038_fmt_e(jule::Slice<jule::U8>,jule::Bool,_1ed45d6e4_DecimalSlice,jule::I32,jule::U8);
inline jule::Slice<jule::U8> _1eeb67050_fmt_f(jule::Slice<jule::U8>,jule::Bool,_1ed45d6e4_DecimalSlice,jule::I32);
inline jule::Slice<jule::U8> _1ed3ce06b_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::I32,_1ecda7acd_FloatInfo&);
inline jule::Slice<jule::U8> _1eea9417a_fmt_x(jule::Slice<jule::U8>,jule::I32,jule::U8,jule::Bool,jule::U64,jule::I32,_1ecda7acd_FloatInfo&);
inline jule::I32 _1eeac24d8_min(jule::I32,jule::I32);
inline jule::I32 _1eeb5a087_max(jule::I32,jule::I32);
inline jule::U8 _1ed42d7a2_lower(jule::U8);
inline std::tuple<jule::U64,jule::I32> _1eec7997b___parse_uint(jule::Str,jule::I32,jule::I32);
inline jule::Exceptional<jule::U64> _1eec79ae1_parse_uint(jule::Str,jule::I32,jule::I32);
inline jule::Exceptional<jule::I64> _1eec79c56_parse_int(jule::Str,jule::I32,jule::I32);
inline std::tuple<jule::F64,jule::Bool> _1eec7a1da_eisel_lemire64(jule::U64,jule::I32,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1eec7a350_eisel_lemire32(jule::U64,jule::I32,jule::Bool);
inline jule::I32 _1eec7a828_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::I32,jule::Bool> _1eec7a98d_special(jule::Str);
inline std::tuple<jule::U64,jule::I32,jule::Bool,jule::Bool,jule::Bool,jule::I32,jule::Bool> _1eec7ab03_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _1eec7b1a8_atof64exact(jule::U64,jule::I32,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _1eec7b31d_atof32exact(jule::U64,jule::I32,jule::Bool);
inline std::tuple<jule::F64,jule::I32> _1eec7b483_atof_hex(jule::Str,_1ecda7acd_FloatInfo&,jule::U64,jule::I32,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::I32,jule::I32> _1eec7b5e8_atof32(jule::Str);
inline std::tuple<jule::F64,jule::I32,jule::I32> _1eec7b75d_atof64(jule::Str);
inline std::tuple<jule::F64,jule::I32,jule::I32> _1eec7b8c3_parse_float_prefix(jule::Str,jule::I32);
inline jule::Exceptional<jule::F64> _1eec7ba38_parse_float(jule::Str,jule::I32);
inline void _1eec7bd57_ryu_ftoa_fixed32(_1ed45d6e4_DecimalSlice&,jule::U32,jule::I32,jule::I32);
inline void _1eec7bebc_ryu_ftoa_fixed64(_1ed45d6e4_DecimalSlice&,jule::U64,jule::I32,jule::I32);
inline void _1eec7c132_format_decimal(_1ed45d6e4_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::I32);
inline void _1eec7c297_ryu_ftoa_shortest(_1ed45d6e4_DecimalSlice&,jule::U64,jule::I32,_1ecda7acd_FloatInfo&);
inline jule::I32 _1eec7c40c_mul_by_log2_log10(jule::I32);
inline jule::I32 _1eec7c572_mul_by_log10_log2(jule::I32);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::I32> _1eec7c6d7_compute_bounds(jule::U64,jule::I32,_1ecda7acd_FloatInfo&);
inline void _1eec7c84c_ryu_digits(_1ed45d6e4_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _1eec7cd03_ryu_digits32(_1ed45d6e4_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::I32);
inline std::tuple<jule::U32,jule::I32,jule::Bool> _1eec7d2ba_mult64bit_pow10(jule::U32,jule::I32,jule::I32);
inline std::tuple<jule::U64,jule::I32,jule::Bool> _1eec7d782_mult128bit_pow10(jule::U64,jule::I32,jule::I32);
inline jule::Bool _1eec7db6c_divisible_by_pow5(jule::U64,jule::I32);
inline std::tuple<jule::U32,jule::U32> _1eec7de7a_divmod1e9(jule::U64);
inline void _1eec82005_trim(_1eec80366_Decimal&);
inline void _1eec82357_right_shift(_1eec80366_Decimal&,jule::U32);
inline jule::Bool _1eec82863_prefix_is_less_than(jule::Array<jule::U8,800>,jule::I32,jule::Str);
inline void _1eec82bb5_left_shift(_1eec80366_Decimal&,jule::U32);
inline jule::Bool _1eec830a0_should_round_up(_1eec80366_Decimal&,jule::I32);
inline jule::Str _1eec84227_fmt_uint(jule::U64,jule::I32);
inline jule::Str _1eec84656_fmt_int(jule::I64,jule::I32);
inline jule::Str _1eec84964_itoa(jule::I32);
inline jule::Str _1eec84cb6_small(jule::I32);
inline jule::Bool _1eec850c4_is_power_of_two(jule::I32);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1eec85745_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::I32,jule::Bool,jule::Bool);
inline void _1eed2dbc8_lshift_unsig(_1eed1e24b_Const&,_1eed1e24b_Const&);
inline void _1eed2e06e_rshift_unsig(_1eed1e24b_Const&,_1eed1e24b_Const&);
inline jule::Str _1eed95910_real_kind_of(jule::Str);
inline jule::I32 _1eed95ba7_bitsize_of(jule::Str);
inline jule::Str _1eed95ed7_int_from_bits(jule::I32);
inline jule::Str _1eed962e5_uint_from_bits(jule::I32);
inline jule::Str _1eed96603_float_from_bits(jule::I32);
inline jule::Bool _1eed9734b_check_bit_float(jule::Str,jule::I32);
inline jule::I32 _1eed97659_bitsize_of_float(jule::F64);
inline jule::I32 _1eed97967_bitsize_of_int(jule::I64);
inline jule::I32 _1eed97c75_bitsize_of_uint(jule::U64);
inline void _1eed97e1d_update_target(void);
inline void _1eed980b6_init(void);
inline jule::F64 _1eed9a8d2_min(jule::Str);
inline jule::F64 _1eed9ac34_max(jule::Str);
inline jule::Bool _1eed9b20c_is_i8_compatible(jule::Str);
inline jule::Bool _1eed9b55e_is_i16_compatible(jule::Str);
inline jule::Bool _1eed9b86c_is_i32_compatible(jule::Str);
inline jule::Bool _1eed9bbbe_is_i64_compatible(jule::Str);
inline jule::Bool _1eed9becc_is_u8_compatible(jule::Str);
inline jule::Bool _1eed9c2da_is_u16_compatible(jule::Str);
inline jule::Bool _1eed9c5e8_is_u32_compatible(jule::Str);
inline jule::Bool _1eed9c98e_is_u64_compatible(jule::Str);
inline jule::Bool _1eed9cc9c_is_f32_compatible(jule::Str);
inline jule::Bool _1eed9d0aa_is_f64_compatible(jule::Str);
inline jule::Bool _1eed9d495_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _1eed9d7a3_is_i16_greater(jule::Str);
inline jule::Bool _1eed9dab1_is_i32_greater(jule::Str);
inline jule::Bool _1eed9ddbe_is_i64_greater(jule::Str);
inline jule::Bool _1eed9e1cc_is_u16_greater(jule::Str);
inline jule::Bool _1eed9e60b_is_u32_greater(jule::Str);
inline jule::Bool _1eed9e919_is_u64_greater(jule::Str);
inline jule::Bool _1eed9ec27_is_f32_greater(jule::Str);
inline jule::Bool _1eeda0035_is_f64_greater(jule::Str);
inline jule::Bool _1eeda0420_is_greater(jule::Str,jule::Str);
inline jule::Bool _1eeda194e_is_sig_int(jule::Str);
inline jule::Bool _1eeda1ca1_is_unsig_int(jule::Str);
inline jule::Bool _1eeda20ae_is_int(jule::Str);
inline jule::Bool _1eeda2411_is_float(jule::Str);
inline jule::Bool _1eeda271e_is_num(jule::Str);
inline jule::Bool _1eee05a91_is_ascii(jule::I32);
inline jule::I32 _1eee0607a_to_rune(jule::Slice<jule::U8>);
inline jule::Str _1eee28de4_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _1eee29246_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _1eee29554_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _1eee2993e_rune_from_esq_seq(jule::Slice<jule::U8>,jule::I32&);
inline jule::Slice<jule::U8> _1eee29d29_str_esq_seq(jule::Slice<jule::U8>,jule::I32&);
inline jule::I32 _200004e04_find_format_prefix(jule::Slice<jule::U8>&,jule::I32&);
inline jule::Slice<jule::U8> _1eeed3e7c_get_format_range(jule::I32&,jule::Slice<jule::U8>&);
inline jule::Slice<jule::U8> _1eeee065e_fmt_by_default(jule::Any&);
inline jule::Slice<jule::U8> _1eeeddbbd_apply_fmt_by_default(jule::I32&,jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _1eeed24ca_apply_fmt(jule::Slice<jule::U8>&,jule::I32&,jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _1eeee94c0_format_bytes(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1eeedc408_format(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1ee25d119_kind_uses_generics(jule::Ptr<_1eee76b45_TypeKind>,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>&);
inline jule::Bool _1ee25d58c_parameter_uses_generics(jule::Ptr<_1ee255b8e_Param>&,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>&);
inline jule::Ptr<_1eee7b4a7_TypeSymbol> _1ee2618d1_build_type(jule::Ptr<_1e01c3db3_TypeDecl>);
inline jule::Ptr<_1eee44e98_Value> _1ee261c33_build_expr(jule::Ptr<_1e0181a63_Expr>);
inline jule::Ptr<_1eee75baa_TypeAlias> _1ee262041_build_type_alias(jule::Ptr<_1e02dde01_TypeAliasDecl>);
inline jule::Ptr<_1ee23da34_Field> _1ee262393_build_field(jule::Ptr<_1e02e160c_FieldDecl>);
inline jule::Slice<jule::Ptr<_1ee23da34_Field>> _1ee2626a1_build_fields(jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>>&);
inline jule::Ptr<_1ee242032_Struct> _1ee2629ae_build_struct(jule::Ptr<_1e02e1de3_StructDecl>);
inline jule::Ptr<_1ee255b8e_Param> _1ee262cbc_build_param(jule::Ptr<_1e02da10b_ParamDecl>);
inline jule::Slice<jule::Ptr<_1ee255b8e_Param>> _1ee263163_build_params(jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>>&);
inline jule::Ptr<_1ee255342_RetType> _1ee263471_build_ret_type(jule::Ptr<_1e0181843_RetTypeDecl>);
inline jule::Ptr<_1ee2579b5_Fn> _1ee26377e_build_fn(jule::Ptr<_1e02da32b_FnDecl>);
inline jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _1ee263a8c_build_methods(jule::Slice<jule::Ptr<_1e02da32b_FnDecl>>&);
inline jule::Ptr<_1eec8627e_Trait> _1ee263d9a_build_trait(jule::Ptr<_1e02e2443_TraitDecl>);
inline jule::Ptr<_1eec87d0d_EnumItem> _1ee2641a8_build_enum_item(jule::Ptr<_1e02e04a7_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>> _1ee2644b6_build_enum_items(jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>>&);
inline jule::Ptr<_1eec889ac_Enum> _1ee2647c4_build_enum(jule::Ptr<_1e02e0d9d_EnumDecl>);
inline jule::Ptr<_1eedeb24b_Var> _1ee264c03_build_var(jule::Ptr<_1e02daea8_VarDecl>);
inline jule::Slice<jule::Ptr<_1eedeb24b_Var>> _1ee265011_build_vars(jule::Slice<jule::Ptr<_1e02daea8_VarDecl>>);
inline jule::Ptr<_1eec8a4d6_Impl> _1ee26531e_build_impl(jule::Ptr<_1e02e2993_Impl>);
inline jule::Ptr<_1eeda5953_ScopeChecker> _1eed7cc27_new_scope_checker_base(jule::Ptr<_1eedca071_Sema>&,jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Ptr<_1eeda5953_ScopeChecker> _1eed57ae2_new_scope_checker(jule::Ptr<_1eedca071_Sema>&,jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Ptr<_1eeda5513_ScopeLabel> _1eed30856_find_label_parent(jule::Str,jule::Ptr<_1eeda5953_ScopeChecker>);
inline jule::Bool _1eed4ab18_stmt_is_goto_scope(jule::Any&,jule::Ptr<_1eed8a5a3_Scope>&);
inline jule::I32 _1eed629ed_count_match_type(jule::Ptr<_1eeda4952_Match>&,jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Slice<jule::Ptr<_1eee43b89_Data>> _1eed8aedd_get_datas_from_tuple_data(jule::Ptr<_1eee43b89_Data>&);
inline jule::Slice<jule::Any> _1eed63b42_get_expr_models(jule::Any&);
inline jule::Bool _1eed6766d_check_mut(jule::Ptr<_1eedca071_Sema>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Bool _1eed68251_check_assign(jule::Ptr<_1eedca071_Sema>&,jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eee43b89_Data>,_1e02c1d07_Token);
inline jule::Bool _1eed69384_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _1eed6c4b9_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _1eed6d09c_st_is_def(jule::Any&);
inline jule::Ptr<_1eedeb24b_Var> _1eedbd251_find_var_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eedbd7a1_find_type_alias_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1ee242032_Struct> _1eedbdc57_find_struct_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1ee2579b5_Fn> _1eedbe263_find_fn_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1eec8627e_Trait> _1eedbe64d_find_trait_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Str);
inline jule::Ptr<_1eec889ac_Enum> _1eedbea38_find_enum_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Str);
inline jule::Bool _1eedc67ed_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1eedc7c3e_is_valid_model_for_ref(jule::Any&);
inline _208de2238_Log _1eedc828e_compiler_err(_1e02c1d07_Token&,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1eedc8679_imp_is_lookupable(jule::Ptr<_1eedc08c4_ImportInfo>&,jule::Str);
inline jule::Slice<jule::Ptr<_1eedeb24b_Var>> _1eedc89cb_build_ret_vars(jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Slice<jule::Ptr<_1eedeb24b_Var>> _1eedc8cd9_build_param_vars(jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _1eedc913b_build_generic_type_aliases(jule::Ptr<_1ee25b4ad_FnIns>&);
inline jule::Ptr<_1eee3c842_SymbolTable> _1eedc9515_find_file(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>&,jule::Ptr<_1e02c7e51_File>&);
inline void _1eedc99cc_push_suggestion(_208de2238_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _1eee06564_get_result_types(jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee07741_trait_has_reference_receiver(jule::Ptr<_1eec8627e_Trait>&);
inline jule::Bool _1eee0c49e_float_assignable(jule::Str,jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _1eee19e07_sig_assignable(jule::Str,jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _1eee2a0b0_unsig_assignable(jule::Str,jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _1eee2a434_int_assignable(jule::Str,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1e02812b1_Directive> _1eee704ce_find_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Str);
inline jule::Any _1eee7090d_find_builtins_import(jule::Str,jule::Ptr<_1eedc08c4_ImportInfo>);
inline void _1eee70b83_fit_bitsize(jule::Ptr<_1eee43b89_Data>&);
inline void _1eee71029_make_struct_lit_alloc(jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1ee248a0b_StructLitExprModel>&);
inline jule::Ptr<_1eedeb24b_Var> _1eee71414_build_error_var(jule::Ptr<_1eed8a5a3_Scope>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&);
inline jule::Any _1eee717ee_find_builtins_sema(jule::Str,jule::Ptr<_1eedca071_Sema>);
inline jule::Bool _1eee71b0c_is_ok_for_shifting(jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _1eee71ea3_is_instanced_struct(jule::Ptr<_1ee24550d_StructIns>);
inline jule::Bool _1eee72327_is_ptr_arithmetic_compatible_int(jule::Ptr<_1eee43b89_Data>&);
inline void _1eee72569_apply_cast_kind_model(jule::Ptr<_1eee43b89_Data>&);
inline void _1eee727de_apply_cast_kind(jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee72a20_build_void_data(void);
inline jule::Str _1eee72d72_check_data_for_integer_indexing(jule::Ptr<_1eee43b89_Data>&);
inline void _1eee73207_apply_cast_model_by_enum(jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eec889ac_Enum>);
inline void _1eee73548_cast_const_by_type(jule::Str&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _1eee74ec8_has_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Str);
inline jule::Bool _1eee8aa16_can_get_ptr(jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _1eee8ad24_is_valid_for_sptr_type(jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee8b176_is_valid_for_ref(jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Bool _1eee8b4c8_is_builtin_str_convertable(jule::Ptr<_1eee76b45_TypeKind>&);
inline jule::Str _1eee8b819_build_link_path_by_tokens(jule::Slice<_1e02c1d07_Token>&);
inline jule::Ptr<_1eee7bead_Prim> _1eee8bb16_build_prim_type(jule::Str);
inline jule::Ptr<_1ee242032_Struct> _1eee8beac_get_struct_from_kind(jule::Ptr<_1eee76b45_TypeKind>);
inline jule::Bool _1eee8c2ba_is_prim(jule::Str);
inline void _1eee96acc_apply_implicit_cast(jule::Ptr<_1eee76b45_TypeKind>&,jule::Ptr<_1eee43b89_Data>&);
inline std::tuple<jule::Ptr<_1eee3c842_SymbolTable>,jule::Slice<_208de2238_Log>> _1eee9a163_build_symbols(jule::Ptr<_1e01bcb7b_Ast>&,jule::Trait<_1eedbccde_Importer>&,jule::Ptr<_1ee2659b2_SymbolBuilder>);
inline std::tuple<jule::Ptr<_1eedc3da0_Package>,jule::Slice<_208de2238_Log>> _1eee9a66e___analyze_package(jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>&,jule::Trait<_1eedbccde_Importer>&,jule::I32&);
inline std::tuple<jule::Ptr<_1eedc3da0_Package>,jule::Slice<_208de2238_Log>> _1eee9ab36_analyze_package(jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>,jule::Trait<_1eedbccde_Importer>,jule::I32);
inline jule::Ptr<_1ee25b4ad_FnIns> _1eeea0586_find_builtin_fn(jule::Str);
inline jule::Ptr<_1eee75baa_TypeAlias> _1eeec32bd_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_1eec8627e_Trait> _1eeea32c0_find_builtin_trait(jule::Str);
inline jule::Any _1eeea40d4_find_builtin_def(jule::Str);
inline jule::Any _1eeea4de8_find_builtin_def_std_debug(jule::Str);
inline jule::Any _1eeea73c3_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1eeec1c6c_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _1eeec6a85_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ptr<_1eee43b89_Data> _1eee9e420_builtin_caller_common_plain(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eeeed804_builtin_caller_common(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eeeed969_builtin_caller_common_mut(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eee9c31e_builtin_caller_error(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&);
inline jule::Ptr<_1eee43b89_Data> _1eee9c484_builtin_caller_out(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eeedc6d3_builtin_caller_outln(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eeedc848_builtin_caller_new(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eeedce75_builtin_caller_panic(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _1eeedd0da_builtin_caller_make(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200010b79_builtin_caller_append(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200010cde_builtin_caller_copy(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200010e54_builtin_caller_clone(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200011262_builtin_caller_assert(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _20001176d_builtin_caller_std_mem_size_of(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200011c68_builtin_caller_std_mem_align_of(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200012263_builtin_caller_std_mem_free(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200012780_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200012c7a_builtin_caller_std_jule_integrated_emit(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _200013253_builtin_caller_std_debug_out(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline jule::Ptr<_1eee43b89_Data> _20001374d_builtin_caller_std_debug_outln(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _1e01301b5_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _1e013032a_check_arch(jule::Str);
inline jule::Bool _1e0130490_is_pass_file_annotation(jule::Str);
inline void _1e01315e5_set_os_vars(jule::Slice<jule::Str>&);
inline void _1e01318ae_set_arch_vars(jule::Slice<jule::Str>&);
inline void _1e0131c11_init_vars(jule::Slice<jule::Str>&,_1e0131271_CompileInfo&);
inline jule::Slice<jule::U8> _1ed149820_read_buff(jule::Str);
inline _208de2238_Log _1ed14cc41_flat_compiler_err(jule::Str);
inline void _1ed2cbd15_push_passes(jule::Ptr<_1eedc3da0_Package>&,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _1ed2d4acb_get_all_unique_passes(jule::Ptr<_1eedc3da0_Package>&,jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>>);
inline _1e0131271_CompileInfo _1ed308649_build_compile_info(void);
inline jule::Ptr<_1e02812b1_Directive> _208e86c17_find_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Str);
inline jule::Bool _208e9043a_has_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Str);
inline jule::Bool _208e9ae07_is_exist(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _208ead986_is_dead(jule::Any);
inline void _1e010e24e_drop_ref(jule::Slice<jule::Any>&,jule::I32);
inline jule::Bool _1e0112b8c_is_all_references_are_dead(jule::Ptr<_1ee25edda_ReferenceStack>);
inline jule::Bool _1ed146e9e_is_fn_dead(jule::Ptr<_1ee25b4ad_FnIns>);
inline jule::Bool _1ed1a22b2_is_var_dead(jule::Ptr<_1eedeb24b_Var>);
inline jule::Bool _208ea2d32_is_struct_dead(jule::Ptr<_1ee24550d_StructIns>);
inline jule::Bool _1e00db4d4_is_trait_dead(jule::Ptr<_1eec8627e_Trait>);
inline void _1ed140abe_eliminate_dead_functions(jule::Slice<jule::Ptr<_1ee2579b5_Fn>>&);
inline void _1ed145750_eliminate_dead_globals(jule::Ptr<_1eedc3da0_Package>&);
inline void _1ed146685_eliminate_dead_functions_package(jule::Ptr<_1eedc3da0_Package>&);
inline void _1ed14d747_keep_alive_init(jule::Ptr<_1eedc3da0_Package>&);
inline void _1ed2add80_eliminate_package(jule::Ptr<_1eedc3da0_Package>&);
inline void _1ed2b0997_eliminate_defines(jule::Ptr<_1ed25d4b1_IR>&);
inline void _1e00ea16e_eliminate_dead_code_of_scope(jule::Ptr<_1eed8a5a3_Scope>);
inline void _1e0116421_eliminate_scope_functions(jule::Slice<jule::Ptr<_1ee2579b5_Fn>>&);
inline void _1e02e4cd6_eliminate_functions_scope_package(jule::Ptr<_1eedc3da0_Package>&);
inline void _1ed13dddb_eliminate_scope_package(jule::Ptr<_1eedc3da0_Package>&);
inline void _1ed13e4a2_eliminate_scopes(jule::Ptr<_1ed25d4b1_IR>&);
inline void _208e5b26e_throw(jule::Str);
inline jule::Bool _20056a018_is_std_package(jule::Str,jule::Str);
inline jule::Bool _20056a3d1_is_constant_valid_conditional_case(jule::Ptr<_1eeda2b92_If>&);
inline jule::Bool _20056a6ab_is_unreachable_expr(jule::Any&);
inline jule::Bool _20056aa52_is_constant_valid_match_case(jule::Ptr<_1eeda4da3_Case>&);
inline jule::Bool _20056ad93_is_unreachable_conditional_case(jule::Ptr<_1eeda2b92_If>&);
inline jule::Bool _20056b1d4_is_unreachable_match_case(jule::Ptr<_1eeda4da3_Case>&);
inline std::tuple<jule::Bool,jule::U64> _200574a6c_check_for_bit_shift_opt(jule::Ptr<_1ee247620_OperandExprModel>&,jule::Ptr<_1ee247620_OperandExprModel>&);
inline jule::U64 _2005ddd5b_unix(void);
inline jule::U64 _2005de246_unix_year_to_seconds(jule::U64,jule::Bool&);
inline jule::U64 _2005de675_unix_month_to_seconds(jule::U64,jule::Bool);
inline jule::Bool _20051b926_is_copy_optimizable(jule::Ptr<_1eee43b89_Data>&);
inline jule::Bool _20051da9e_is_iter_copy_optimizable(jule::Ptr<_1eee43b89_Data>&,jule::Ptr<_1eedeb24b_Var>&);
inline jule::Str _200581e0e_concat_all_parts(jule::Slice<_1e02c1d07_Token>);
inline jule::Str _200582261_decompose_common_esq(jule::U8);
inline jule::Str _20058256e_sbtoa(jule::U8);
inline jule::Str _2005828c1_cstr_bytes(jule::Slice<jule::U8>);
inline jule::Str _200582bce_cstr_lit(jule::Slice<jule::U8>);
inline jule::Str _2005830b9_ftoa(jule::F64,jule::I32);
inline jule::Str _2005833c7_itoa(jule::I64);
inline jule::Str _20058376d_utoa(jule::U64);
inline jule::Bool _200583a7b_is_forwarded(jule::Ptr<_1eed8a5a3_Scope>&);
inline jule::Bool _200583dcd_is_builtin_call_has_debuginf(jule::Ptr<_1ee24a007_FnCallExprModel>&);
inline jule::Bool _2005e7ea8_is_cpp_header_file(jule::Str);
inline jule::Ptr<_1e02812b1_Directive> _2005e8e10_find_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Str);
inline jule::Bool _2005e9350_has_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>&,jule::Str);
inline void _208d9ccc6_print_error_message(jule::Str);
inline void _208dc711e_help(jule::Slice<jule::Str>&);
inline void _208dada2e_version(jule::Slice<jule::Str>&);
inline void _208db302d_tool_distos(void);
inline void _208dbc5ba_tool_distarch(void);
inline void _208dc4c76_tool(jule::Slice<jule::Str>&);
inline void _208dc02b0_julenv(jule::Slice<jule::Str>&);
inline void _208dc0d93_mod(jule::Slice<jule::Str>&);
inline jule::Bool _208dc1976_process_command(jule::Slice<jule::Str>&);
inline void _208dc2559_show_info(void);
void entry_point(void);
inline void _208dceb82_enable_vtp(void);
inline void _208dacae9_init(void);
inline void _20060a262_write_output(jule::Str,jule::Str);
inline void _200618c10_clear_objects(void);
inline void _200619518_compile_ir(jule::Str,jule::Str);
inline void _20061967d_do_spell(jule::Str,jule::Str,jule::Str);
inline jule::Bool _2006197e3_is_cpp_source_file(jule::Str);
inline void _200619958_push_comp_cmd_clang(jule::Str&);
inline void _200619abd_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _200619c33_gen_compile_cmd(jule::Str,jule::Ptr<_1ed25d4b1_IR>&);
inline jule::Str _200619d98_get_compile_path(void);
inline void _20061a00d_apply_target_independent_optimizations(jule::Ptr<_1ed25d4b1_IR>&);
inline void _20061a173_check_compiler_flag(void);
inline void _20061a2d8_check_target_arch(jule::Str);
inline void _20061a44d_check_target_os(jule::Str);
inline void _20061a5b3_check_target_flag(jule::Str&);
inline void _20061a959_check_opt_flag(jule::Str&);
inline void _20061aabe_check_cpp_std_flag(void);
inline jule::Slice<jule::Str> _20061ac34_check_flags(jule::Slice<jule::Str>&);
inline void _20061ad99_setup_sema_flags(jule::I32&);
inline jule::Ptr<_1ed25d4b1_IR> _20061b00e_build_ir(jule::Slice<jule::Str>&);
inline void _20061b174_compile_command(jule::Slice<jule::Str>&);


struct _200009e3c_ReaderMptrData {
	jule::Exceptional<jule::I32>(*_200009cb6_read)(jule::Trait<_200009e3c_Reader>,jule::Slice<jule::U8>);
};

struct _20000a448_WriterMptrData {
	jule::Exceptional<jule::I32>(*_20000a2c2_write)(jule::Trait<_20000a448_Writer>,jule::Slice<jule::U8>);
};

struct _20000ab63_WriterCloserMptrData {
	jule::Exceptional<jule::I32>(*_20000a79a_write)(jule::Trait<_20000ab63_WriterCloser>,jule::Slice<jule::U8>);
	jule::VoidExceptional(*_20000a9dc_close)(jule::Trait<_20000ab63_WriterCloser>);
};

struct _20000b537_StreamMptrData {
	jule::Exceptional<jule::I32>(*_20000b009_read)(jule::Trait<_20000b537_Stream>,jule::Slice<jule::U8>);
	jule::Exceptional<jule::I32>(*_20000b3b1_write)(jule::Trait<_20000b537_Stream>,jule::Slice<jule::U8>);
};

struct _1eedbccde_ImporterMptrData {
	void(*_1eedbb8c0_set_mod_path)(jule::Trait<_1eedbccde_Importer>,jule::Str);
	jule::Str(*_1eedbbb56_get_mod_path)(jule::Trait<_1eedbccde_Importer>);
	jule::Str(*_1eedbc00d_mod_by_id)(jule::Trait<_1eedbccde_Importer>,jule::I32);
	jule::Ptr<_1eedc08c4_ImportInfo>(*_1eedbc3b5_get_import)(jule::Trait<_1eedbccde_Importer>,jule::Str);
	std::tuple<jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>,jule::Slice<_208de2238_Log>>(*_1eedbc849_import_package)(jule::Trait<_1eedbccde_Importer>,jule::Str,jule::Bool);
	void(*_1eedbcb68_imported)(jule::Trait<_1eedbccde_Importer>,jule::Ptr<_1eedc08c4_ImportInfo>);
};

struct _1eee76606_KindMptrData {
	jule::Str(*_1eee760c8_to_str)(jule::Trait<_1eee76606_Kind>);
	jule::Bool(*_1eee76480_equals)(jule::Trait<_1eee76606_Kind>,jule::Ptr<_1eee76b45_TypeKind>);
};

struct _1eee992c7_LookupMptrData {
	jule::Ptr<_1eedc08c4_ImportInfo>(*_1eee97209_find_package)(jule::Trait<_1eee992c7_Lookup>,jule::Str);
	jule::Ptr<_1eedc08c4_ImportInfo>(*_1eee975b1_select_package)(jule::Trait<_1eee992c7_Lookup>,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>);
	jule::Ptr<_1eedeb24b_Var>(*_1eee97a45_find_var)(jule::Trait<_1eee992c7_Lookup>,jule::Str,jule::Bool);
	jule::Ptr<_1eee75baa_TypeAlias>(*_1eee97ec9_find_type_alias)(jule::Trait<_1eee992c7_Lookup>,jule::Str,jule::Bool);
	jule::Ptr<_1ee242032_Struct>(*_1eee9845d_find_struct)(jule::Trait<_1eee992c7_Lookup>,jule::Str,jule::Bool);
	jule::Ptr<_1ee2579b5_Fn>(*_1eee988e2_find_fn)(jule::Trait<_1eee992c7_Lookup>,jule::Str,jule::Bool);
	jule::Ptr<_1eec8627e_Trait>(*_1eee98c99_find_trait)(jule::Trait<_1eee992c7_Lookup>,jule::Str);
	jule::Ptr<_1eec889ac_Enum>(*_1eee99151_find_enum)(jule::Trait<_1eee992c7_Lookup>,jule::Str);
};

struct _2006123bd_CommonFlagMptrData {
	jule::Str(*_200611c91_name)(jule::Trait<_2006123bd_CommonFlag>);
	jule::I32(*_200611e06_short)(jule::Trait<_2006123bd_CommonFlag>);
	jule::Str(*_20061206b_what)(jule::Trait<_2006123bd_CommonFlag>);
	void(*_200612258_reset)(jule::Trait<_2006123bd_CommonFlag>);
};



inline jule::Exceptional<jule::I32> _200009cb6_read_0(jule::Trait<_200009e3c_Reader> _self_,jule::Slice<jule::U8> _731_buff) {
	return _200008e4c_read(_self_.safe_ptr<_2000089b8_FileStream>(), _731_buff);
}
inline jule::Exceptional<jule::I32> _200009cb6_read_1(jule::Trait<_200009e3c_Reader> _self_,jule::Slice<jule::U8> _731_buff) {
	return _20000c13c_read(_self_.safe_ptr<_20000b900_ByteStream>(), _731_buff);
}
inline jule::Exceptional<jule::I32> _20000a2c2_write_0(jule::Trait<_20000a448_Writer> _self_,jule::Slice<jule::U8> _1228_buff) {
	return _200009249_write(_self_.safe_ptr<_2000089b8_FileStream>(), _1228_buff);
}
inline jule::Exceptional<jule::I32> _20000a2c2_write_1(jule::Trait<_20000a448_Writer> _self_,jule::Slice<jule::U8> _1228_buff) {
	return _20000c4e4_write(_self_.safe_ptr<_20000b900_ByteStream>(), _1228_buff);
}
inline jule::Exceptional<jule::I32> _20000b009_read_0(jule::Trait<_20000b537_Stream> _self_,jule::Slice<jule::U8> _2331_buff) {
	return _200008e4c_read(_self_.safe_ptr<_2000089b8_FileStream>(), _2331_buff);
}
inline jule::Exceptional<jule::I32> _20000b3b1_write_0(jule::Trait<_20000b537_Stream> _self_,jule::Slice<jule::U8> _2428_buff) {
	return _200009249_write(_self_.safe_ptr<_2000089b8_FileStream>(), _2428_buff);
}
inline jule::Exceptional<jule::I32> _20000b009_read_1(jule::Trait<_20000b537_Stream> _self_,jule::Slice<jule::U8> _2331_buff) {
	return _20000c13c_read(_self_.safe_ptr<_20000b900_ByteStream>(), _2331_buff);
}
inline jule::Exceptional<jule::I32> _20000b3b1_write_1(jule::Trait<_20000b537_Stream> _self_,jule::Slice<jule::U8> _2428_buff) {
	return _20000c4e4_write(_self_.safe_ptr<_20000b900_ByteStream>(), _2428_buff);
}
inline void _1eedbb8c0_set_mod_path_0(jule::Trait<_1eedbccde_Importer> _self_,jule::Str _1735_path) {
	_1ed1d8e64_set_mod_path(_self_.safe_ptr<_1ed1dc40c_JuleImporter>(), _1735_path);
}
inline jule::Str _1eedbbb56_get_mod_path_0(jule::Trait<_1eedbccde_Importer> _self_) {
	return _1ed1daa8c_get_mod_path(_self_.safe_ptr<_1ed1dc40c_JuleImporter>());
}
inline jule::Str _1eedbc00d_mod_by_id_0(jule::Trait<_1eedbccde_Importer> _self_,jule::I32 _2328_id) {
	return _1ed224e17_mod_by_id(_self_.safe_ptr<_1ed1dc40c_JuleImporter>(), _2328_id);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedbc3b5_get_import_0(jule::Trait<_1eedbccde_Importer> _self_,jule::Str _2833_path) {
	return _1ed2283c1_get_import(_self_.safe_ptr<_1ed1dc40c_JuleImporter>(), _2833_path);
}
inline std::tuple<jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>,jule::Slice<_208de2238_Log>> _1eedbc849_import_package_0(jule::Trait<_1eedbccde_Importer> _self_,jule::Str _3337_path,jule::Bool _3348_update_mod) {
	return _1ed22dd11_import_package(_self_.safe_ptr<_1ed1dc40c_JuleImporter>(), _3337_path, _3348_update_mod);
}
inline void _1eedbcb68_imported_0(jule::Trait<_1eedbccde_Importer> _self_,jule::Ptr<_1eedc08c4_ImportInfo> _3635__0) {
	_1ed25c416_imported(_self_.safe_ptr<_1ed1dc40c_JuleImporter>(), _3635__0);
}
inline jule::Str _1eee760c8_to_str_0(jule::Trait<_1eee76606_Kind> _self_) {
	return _1ee24592b_to_str(_self_.safe_ptr<_1ee24550d_StructIns>());
}
inline jule::Bool _1eee76480_equals_0(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1ee245cd3_equals(_self_.data.as<_1ee24550d_StructIns>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_1(jule::Trait<_1eee76606_Kind> _self_) {
	return _1ee25b887_to_str(_self_.safe_ptr<_1ee25b4ad_FnIns>());
}
inline jule::Bool _1eee76480_equals_1(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1ee25bc3e_equals(_self_.data.as<_1ee25b4ad_FnIns>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_2(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eec866ad_to_str(_self_.safe_ptr<_1eec8627e_Trait>());
}
inline jule::Bool _1eee76480_equals_2(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eec86a65_equals(_self_.data.as<_1eec8627e_Trait>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_3(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eec88d86_to_str(_self_.safe_ptr<_1eec889ac_Enum>());
}
inline jule::Bool _1eee76480_equals_3(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eec8923d_equals(_self_.data.as<_1eec889ac_Enum>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_4(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee77063_to_str(_self_.safe_ptr<_1eee76b45_TypeKind>());
}
inline jule::Bool _1eee76480_equals_4(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee7741a_equals(_self_.data.as<_1eee76b45_TypeKind>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_5(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee7c387_to_str(_self_.safe_ptr<_1eee7bead_Prim>());
}
inline jule::Bool _1eee76480_equals_5(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee7c73e_equals(_self_.data.as<_1eee7bead_Prim>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_6(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee811e3_to_str(_self_.safe_ptr<_1eee80d19_Sptr>());
}
inline jule::Bool _1eee76480_equals_6(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee8159a_equals(_self_.data.as<_1eee80d19_Sptr>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_7(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee81d5e_to_str(_self_.safe_ptr<_1eee818ec_Slc>());
}
inline jule::Bool _1eee76480_equals_7(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee82216_equals(_self_.data.as<_1eee818ec_Slc>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_8(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee829ca_to_str(_self_.safe_ptr<_1eee82568_Tuple>());
}
inline jule::Bool _1eee76480_equals_8(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee82d82_equals(_self_.data.as<_1eee82568_Tuple>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_9(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee836ac_to_str(_self_.safe_ptr<_1eee832d3_Map>());
}
inline jule::Bool _1eee76480_equals_9(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee8896a_equals(_self_.data.as<_1eee832d3_Map>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_10(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee892ea_to_str(_self_.safe_ptr<_1eee88e21_Arr>());
}
inline jule::Bool _1eee76480_equals_10(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee896a2_equals(_self_.data.as<_1eee88e21_Arr>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_11(jule::Trait<_1eee76606_Kind> _self_) {
	return _1eee89dcd_to_str(_self_.safe_ptr<_1eee89a04_Ptr>());
}
inline jule::Bool _1eee76480_equals_11(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _1eee8a285_equals(_self_.data.as<_1eee89a04_Ptr>(), _5926_other);
}
inline jule::Str _1eee760c8_to_str_12(jule::Trait<_1eee76606_Kind> _self_) {
	return _2005e9a37_to_str(_self_.safe_ptr<_2005e95c5_CustomType>());
}
inline jule::Bool _1eee76480_equals_12(jule::Trait<_1eee76606_Kind> _self_,jule::Ptr<_1eee76b45_TypeKind> _5926_other) {
	return _2005e9dde_equals(_self_.data.as<_2005e95c5_CustomType>(), _5926_other);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee97209_find_package_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _935_ident) {
	return _1eed419ee_find_package(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _935_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee975b1_select_package_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _1337_selector) {
	return _1eed44309_select_package(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _1337_selector);
}
inline jule::Ptr<_1eedeb24b_Var> _1eee97a45_find_var_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _1731_ident,jule::Bool _1743_cpp_linked) {
	return _1eeda5b73_find_var(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee97ec9_find_type_alias_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2138_ident,jule::Bool _2150_cpp_linked) {
	return _1eeda5cd8_find_type_alias(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_1ee242032_Struct> _1eee9845d_find_struct_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2534_ident,jule::Bool _2546_cpp_linked) {
	return _1eeda5e5e_find_struct(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_1ee2579b5_Fn> _1eee988e2_find_fn_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2930_ident,jule::Bool _2942_cpp_linked) {
	return _1eeda63e3_find_fn(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_1eec8627e_Trait> _1eee98c99_find_trait_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3333_ident) {
	return _1eeda679a_find_trait(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _3333_ident);
}
inline jule::Ptr<_1eec889ac_Enum> _1eee99151_find_enum_0(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3732_ident) {
	return _1eeda6b52_find_enum(_self_.safe_ptr<_1eeda5953_ScopeChecker>(), _3732_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee97209_find_package_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _935_ident) {
	return _1eedc0e79_find_package(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _935_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee975b1_select_package_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _1337_selector) {
	return _1eedc1331_select_package(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _1337_selector);
}
inline jule::Ptr<_1eedeb24b_Var> _1eee97a45_find_var_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _1731_ident,jule::Bool _1743_cpp_linked) {
	return _1eedc17b5_find_var(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee97ec9_find_type_alias_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2138_ident,jule::Bool _2150_cpp_linked) {
	return _1eedc1c49_find_type_alias(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_1ee242032_Struct> _1eee9845d_find_struct_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2534_ident,jule::Bool _2546_cpp_linked) {
	return _1eedc21cd_find_struct(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_1ee2579b5_Fn> _1eee988e2_find_fn_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2930_ident,jule::Bool _2942_cpp_linked) {
	return _1eedc2662_find_fn(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_1eec8627e_Trait> _1eee98c99_find_trait_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3333_ident) {
	return _1eedc2a19_find_trait(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _3333_ident);
}
inline jule::Ptr<_1eec889ac_Enum> _1eee99151_find_enum_1(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3732_ident) {
	return _1eedc2dc1_find_enum(_self_.safe_ptr<_1eedc08c4_ImportInfo>(), _3732_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee97209_find_package_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _935_ident) {
	return _1eedc4411_find_package(_self_.safe_ptr<_1eedc3da0_Package>(), _935_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee975b1_select_package_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _1337_selector) {
	return _1eedc47b8_select_package(_self_.safe_ptr<_1eedc3da0_Package>(), _1337_selector);
}
inline jule::Ptr<_1eedeb24b_Var> _1eee97a45_find_var_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _1731_ident,jule::Bool _1743_cpp_linked) {
	return _1eedc4c4c_find_var(_self_.safe_ptr<_1eedc3da0_Package>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee97ec9_find_type_alias_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2138_ident,jule::Bool _2150_cpp_linked) {
	return _1eedc51d1_find_type_alias(_self_.safe_ptr<_1eedc3da0_Package>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_1ee242032_Struct> _1eee9845d_find_struct_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2534_ident,jule::Bool _2546_cpp_linked) {
	return _1eedc5665_find_struct(_self_.safe_ptr<_1eedc3da0_Package>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_1ee2579b5_Fn> _1eee988e2_find_fn_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2930_ident,jule::Bool _2942_cpp_linked) {
	return _1eedc5ae9_find_fn(_self_.safe_ptr<_1eedc3da0_Package>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_1eec8627e_Trait> _1eee98c99_find_trait_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3333_ident) {
	return _1eedc5ea1_find_trait(_self_.safe_ptr<_1eedc3da0_Package>(), _3333_ident);
}
inline jule::Ptr<_1eec889ac_Enum> _1eee99151_find_enum_2(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3732_ident) {
	return _1eedc6358_find_enum(_self_.safe_ptr<_1eedc3da0_Package>(), _3732_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee97209_find_package_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _935_ident) {
	return _1eedca626_find_package(_self_.safe_ptr<_1eedca071_Sema>(), _935_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee975b1_select_package_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _1337_selector) {
	return _1eedca9cd_select_package(_self_.safe_ptr<_1eedca071_Sema>(), _1337_selector);
}
inline jule::Ptr<_1eedeb24b_Var> _1eee97a45_find_var_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _1731_ident,jule::Bool _1743_cpp_linked) {
	return _1eedcae62_find_var(_self_.safe_ptr<_1eedca071_Sema>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee97ec9_find_type_alias_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2138_ident,jule::Bool _2150_cpp_linked) {
	return _1eedcb3e6_find_type_alias(_self_.safe_ptr<_1eedca071_Sema>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_1ee242032_Struct> _1eee9845d_find_struct_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2534_ident,jule::Bool _2546_cpp_linked) {
	return _1eedcb87a_find_struct(_self_.safe_ptr<_1eedca071_Sema>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_1ee2579b5_Fn> _1eee988e2_find_fn_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2930_ident,jule::Bool _2942_cpp_linked) {
	return _1eedcbd0e_find_fn(_self_.safe_ptr<_1eedca071_Sema>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_1eec8627e_Trait> _1eee98c99_find_trait_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3333_ident) {
	return _1eedcc1b6_find_trait(_self_.safe_ptr<_1eedca071_Sema>(), _3333_ident);
}
inline jule::Ptr<_1eec889ac_Enum> _1eee99151_find_enum_3(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3732_ident) {
	return _1eedcc56d_find_enum(_self_.safe_ptr<_1eedca071_Sema>(), _3732_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee97209_find_package_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _935_ident) {
	return _1eee3cde7_find_package(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _935_ident);
}
inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee975b1_select_package_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _1337_selector) {
	return _1eee3d29e_select_package(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _1337_selector);
}
inline jule::Ptr<_1eedeb24b_Var> _1eee97a45_find_var_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _1731_ident,jule::Bool _1743_cpp_linked) {
	return _1eee3d733_find_var(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_1eee75baa_TypeAlias> _1eee97ec9_find_type_alias_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2138_ident,jule::Bool _2150_cpp_linked) {
	return _1eee3dbb7_find_type_alias(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_1ee242032_Struct> _1eee9845d_find_struct_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2534_ident,jule::Bool _2546_cpp_linked) {
	return _1eee3e14b_find_struct(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_1ee2579b5_Fn> _1eee988e2_find_fn_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _2930_ident,jule::Bool _2942_cpp_linked) {
	return _1eee3e5d0_find_fn(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_1eec8627e_Trait> _1eee98c99_find_trait_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3333_ident) {
	return _1eee3e987_find_trait(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _3333_ident);
}
inline jule::Ptr<_1eec889ac_Enum> _1eee99151_find_enum_4(jule::Trait<_1eee992c7_Lookup> _self_,jule::Str _3732_ident) {
	return _1eee3ed3e_find_enum(_self_.safe_ptr<_1eee3c842_SymbolTable>(), _3732_ident);
}
inline jule::Str _200611c91_name_0(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d133a1_name(_self_.safe_ptr<_2006127b9_Flag_0>());
}
inline jule::I32 _200611e06_short_0(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d137e1_short(_self_.safe_ptr<_2006127b9_Flag_0>());
}
inline jule::Str _20061206b_what_0(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d13516_what(_self_.safe_ptr<_2006127b9_Flag_0>());
}
inline void _200612258_reset_0(jule::Trait<_2006123bd_CommonFlag> _self_) {
	_203d1367b_reset(_self_.safe_ptr<_2006127b9_Flag_0>());
}
inline jule::Str _200611c91_name_1(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d166d4_name(_self_.safe_ptr<_2006127b9_Flag_1>());
}
inline jule::I32 _200611e06_short_1(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d1643c_short(_self_.safe_ptr<_2006127b9_Flag_1>());
}
inline jule::Str _20061206b_what_1(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d13967_what(_self_.safe_ptr<_2006127b9_Flag_1>());
}
inline void _200612258_reset_1(jule::Trait<_2006123bd_CommonFlag> _self_) {
	_203d150ea_reset(_self_.safe_ptr<_2006127b9_Flag_1>());
}
inline jule::Str _200611c91_name_2(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d19be3_name(_self_.safe_ptr<_2006127b9_Flag_2>());
}
inline jule::I32 _200611e06_short_2(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d1994b_short(_self_.safe_ptr<_2006127b9_Flag_2>());
}
inline jule::Str _20061206b_what_2(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d16e76_what(_self_.safe_ptr<_2006127b9_Flag_2>());
}
inline void _200612258_reset_2(jule::Trait<_2006123bd_CommonFlag> _self_) {
	_203d18609_reset(_self_.safe_ptr<_2006127b9_Flag_2>());
}
inline jule::Str _200611c91_name_3(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d1a4eb_name(_self_.safe_ptr<_2006127b9_Flag_3>());
}
inline jule::I32 _200611e06_short_3(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d1ce9e_short(_self_.safe_ptr<_2006127b9_Flag_3>());
}
inline jule::Str _20061206b_what_3(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d1d246_what(_self_.safe_ptr<_2006127b9_Flag_3>());
}
inline void _200612258_reset_3(jule::Trait<_2006123bd_CommonFlag> _self_) {
	_203d1bb5c_reset(_self_.safe_ptr<_2006127b9_Flag_3>());
}
inline jule::Str _200611c91_name_4(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d21755_name(_self_.safe_ptr<_2006127b9_Flag_4>());
}
inline jule::I32 _200611e06_short_4(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d214ad_short(_self_.safe_ptr<_2006127b9_Flag_4>());
}
inline jule::Str _20061206b_what_4(jule::Trait<_2006123bd_CommonFlag> _self_) {
	return _203d1d9d8_what(_self_.safe_ptr<_2006127b9_Flag_4>());
}
inline void _200612258_reset_4(jule::Trait<_2006123bd_CommonFlag> _self_) {
	_203d2016b_reset(_self_.safe_ptr<_2006127b9_Flag_4>());
}


static _200009e3c_ReaderMptrData _200009e3c_Reader_mptr_data[] = {
	{
		._200009cb6_read=_200009cb6_read_0,
	},
	{
		._200009cb6_read=_200009cb6_read_1,
	},
};static _20000a448_WriterMptrData _20000a448_Writer_mptr_data[] = {
	{
		._20000a2c2_write=_20000a2c2_write_0,
	},
	{
		._20000a2c2_write=_20000a2c2_write_1,
	},
};static _20000ab63_WriterCloserMptrData _20000ab63_WriterCloser_mptr_data[] = {
};static _20000b537_StreamMptrData _20000b537_Stream_mptr_data[] = {
	{
		._20000b009_read=_20000b009_read_0,
		._20000b3b1_write=_20000b3b1_write_0,
	},
	{
		._20000b009_read=_20000b009_read_1,
		._20000b3b1_write=_20000b3b1_write_1,
	},
};static _1eedbccde_ImporterMptrData _1eedbccde_Importer_mptr_data[] = {
	{
		._1eedbb8c0_set_mod_path=_1eedbb8c0_set_mod_path_0,
		._1eedbbb56_get_mod_path=_1eedbbb56_get_mod_path_0,
		._1eedbc00d_mod_by_id=_1eedbc00d_mod_by_id_0,
		._1eedbc3b5_get_import=_1eedbc3b5_get_import_0,
		._1eedbc849_import_package=_1eedbc849_import_package_0,
		._1eedbcb68_imported=_1eedbcb68_imported_0,
	},
};static _1eee76606_KindMptrData _1eee76606_Kind_mptr_data[] = {
	{
		._1eee760c8_to_str=_1eee760c8_to_str_0,
		._1eee76480_equals=_1eee76480_equals_0,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_1,
		._1eee76480_equals=_1eee76480_equals_1,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_2,
		._1eee76480_equals=_1eee76480_equals_2,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_3,
		._1eee76480_equals=_1eee76480_equals_3,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_4,
		._1eee76480_equals=_1eee76480_equals_4,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_5,
		._1eee76480_equals=_1eee76480_equals_5,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_6,
		._1eee76480_equals=_1eee76480_equals_6,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_7,
		._1eee76480_equals=_1eee76480_equals_7,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_8,
		._1eee76480_equals=_1eee76480_equals_8,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_9,
		._1eee76480_equals=_1eee76480_equals_9,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_10,
		._1eee76480_equals=_1eee76480_equals_10,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_11,
		._1eee76480_equals=_1eee76480_equals_11,
	},
	{
		._1eee760c8_to_str=_1eee760c8_to_str_12,
		._1eee76480_equals=_1eee76480_equals_12,
	},
};static _1eee992c7_LookupMptrData _1eee992c7_Lookup_mptr_data[] = {
	{
		._1eee97209_find_package=_1eee97209_find_package_0,
		._1eee975b1_select_package=_1eee975b1_select_package_0,
		._1eee97a45_find_var=_1eee97a45_find_var_0,
		._1eee97ec9_find_type_alias=_1eee97ec9_find_type_alias_0,
		._1eee9845d_find_struct=_1eee9845d_find_struct_0,
		._1eee988e2_find_fn=_1eee988e2_find_fn_0,
		._1eee98c99_find_trait=_1eee98c99_find_trait_0,
		._1eee99151_find_enum=_1eee99151_find_enum_0,
	},
	{
		._1eee97209_find_package=_1eee97209_find_package_1,
		._1eee975b1_select_package=_1eee975b1_select_package_1,
		._1eee97a45_find_var=_1eee97a45_find_var_1,
		._1eee97ec9_find_type_alias=_1eee97ec9_find_type_alias_1,
		._1eee9845d_find_struct=_1eee9845d_find_struct_1,
		._1eee988e2_find_fn=_1eee988e2_find_fn_1,
		._1eee98c99_find_trait=_1eee98c99_find_trait_1,
		._1eee99151_find_enum=_1eee99151_find_enum_1,
	},
	{
		._1eee97209_find_package=_1eee97209_find_package_2,
		._1eee975b1_select_package=_1eee975b1_select_package_2,
		._1eee97a45_find_var=_1eee97a45_find_var_2,
		._1eee97ec9_find_type_alias=_1eee97ec9_find_type_alias_2,
		._1eee9845d_find_struct=_1eee9845d_find_struct_2,
		._1eee988e2_find_fn=_1eee988e2_find_fn_2,
		._1eee98c99_find_trait=_1eee98c99_find_trait_2,
		._1eee99151_find_enum=_1eee99151_find_enum_2,
	},
	{
		._1eee97209_find_package=_1eee97209_find_package_3,
		._1eee975b1_select_package=_1eee975b1_select_package_3,
		._1eee97a45_find_var=_1eee97a45_find_var_3,
		._1eee97ec9_find_type_alias=_1eee97ec9_find_type_alias_3,
		._1eee9845d_find_struct=_1eee9845d_find_struct_3,
		._1eee988e2_find_fn=_1eee988e2_find_fn_3,
		._1eee98c99_find_trait=_1eee98c99_find_trait_3,
		._1eee99151_find_enum=_1eee99151_find_enum_3,
	},
	{
		._1eee97209_find_package=_1eee97209_find_package_4,
		._1eee975b1_select_package=_1eee975b1_select_package_4,
		._1eee97a45_find_var=_1eee97a45_find_var_4,
		._1eee97ec9_find_type_alias=_1eee97ec9_find_type_alias_4,
		._1eee9845d_find_struct=_1eee9845d_find_struct_4,
		._1eee988e2_find_fn=_1eee988e2_find_fn_4,
		._1eee98c99_find_trait=_1eee98c99_find_trait_4,
		._1eee99151_find_enum=_1eee99151_find_enum_4,
	},
};static _2006123bd_CommonFlagMptrData _2006123bd_CommonFlag_mptr_data[] = {
	{
		._200611c91_name=_200611c91_name_0,
		._200611e06_short=_200611e06_short_0,
		._20061206b_what=_20061206b_what_0,
		._200612258_reset=_200612258_reset_0,
	},
	{
		._200611c91_name=_200611c91_name_1,
		._200611e06_short=_200611e06_short_1,
		._20061206b_what=_20061206b_what_1,
		._200612258_reset=_200612258_reset_1,
	},
	{
		._200611c91_name=_200611c91_name_2,
		._200611e06_short=_200611e06_short_2,
		._20061206b_what=_20061206b_what_2,
		._200612258_reset=_200612258_reset_2,
	},
	{
		._200611c91_name=_200611c91_name_3,
		._200611e06_short=_200611e06_short_3,
		._20061206b_what=_20061206b_what_3,
		._200612258_reset=_200612258_reset_3,
	},
	{
		._200611c91_name=_200611c91_name_4,
		._200611e06_short=_200611e06_short_4,
		._20061206b_what=_20061206b_what_4,
		._200612258_reset=_200612258_reset_4,
	},
};

jule::Bool _22237d18e_PRODUCTION;
jule::Bool _22237d2b0_OPT_COPY;
jule::Bool _22237d3d1_OPT_DEADCODE;
jule::Bool _22237d579_OPT_APPEND;
jule::Bool _22237d69a_OPT_MATH;
jule::Bool _22237d7bb_OPT_ACCESS;
jule::Bool _22237d8dc_OPT_INLINE;
jule::Bool _22237db1d_OPT_PTR;
jule::Bool _22237dc3e_OPT_COND;
jule::Str _22237e3b0_COMPILER;
jule::Str _22237e5ad_COMPILER_PATH;
jule::Str _22237e767_CPP_STD;
jule::Bool _22237e965_SHADOWING;
jule::Bool _22237eb1e_TRANSPILATION;
jule::Bool _22237ecc8_TEST;
jule::Bool _22237ee82_RC;
jule::Bool _2223801c4_SAFETY;
jule::U32 _2224805b0_STDIN;
jule::U32 _2224875d9_STDOUT;
jule::U32 _222487a3a_STDERR;
jule::Array<jule::U8,256> _222566d28_FIRST;
jule::Array<_2225658d7_accept_range,16> _222567499_ACCEPT_RANGES;
jule::Ptr<_208c6ea22_RangeTable> _208c302eb__L;
jule::Ptr<_208c6ea22_RangeTable> _208c34a1a_LETTER;
jule::Array<jule::U8,256> _208c699ea__PROPERTIES;
jule::Array<jule::Str,4> _208dd0ed5_CPP_HEADER_EXTS;
jule::Array<jule::Str,3> _208dd1106_CPP_EXTS;
jule::Array<jule::Str,1> _208dd1227_OBJECTIVE_CPP_EXTS;
jule::Array<jule::Str,3> _208de5c42_DISTOS;
jule::Array<jule::Str,3> _208de5e73_DISTARCH;
jule::Str _208e02831_PATH_STDLIB;
jule::Str _208e0446a_PATH_EXEC;
jule::Str _208e06813_PATH_WD;
jule::Str _208e073b3_PATH_API;
jule::Str _208e0b74c_OS;
jule::Str _208e25425_ARCH;
jule::Array<jule::I32,5> _1e01c4dc5_SPACES;
jule::Array<jule::Str,6> _1e01c4204_UNARY_OPS;
jule::Array<jule::Str,12> _1e01c4325_BIN_OPS;
jule::Array<jule::Str,2> _1e01c4567_POSTFIX_OPS;
jule::Array<jule::Str,11> _1e02b9629_ASSING_OPS;
jule::Array<_1e02ca67e_KindPair,47> _1e02ca9ae_KEYWORDS;
jule::Array<_1e02ca67e_KindPair,39> _1e02cabe0_BASIC_OPS;
jule::Array<jule::U8,32> _1eec4a8d6_DE_BRUIJN32_TAB;
jule::Array<jule::U8,64> _1eec4ac7c_DE_BRUIJN64_TAB;
_1ecda7acd_FloatInfo _1ed3d4978_F32_INFO;
_1ecda7acd_FloatInfo _1ed42ca59_F64_INFO;
jule::Array<jule::Array<jule::U64,2>,696> _1ed489412_DETAILED_POWS_OF_TEN;
jule::Slice<jule::I32> _1eeabed32_POWTAB;
jule::Slice<jule::F64> _1eeb450b6_F64_POW10;
jule::Slice<jule::F32> _1eeb4568d_F32_POW10;
jule::Array<jule::U64,20> _1eeac021c_U64_POW10;
jule::Slice<_1eec7e893_LeftCheat> _1eec7ebc3_LEFTCHEATS;
jule::I32 _1eed952b1_BIT_SIZE;
jule::Str _1eed953d2_SYS_INT;
jule::Str _1eed95503_SYS_UINT;
jule::Slice<jule::Any> _208e88202_deads;
jule::Slice<jule::Any> _208e95819_checking;
jule::Any _208ea8255_current;
jule::Any _208eb4706_main_current;
jule::Array<jule::U64,12> _2005d7e98_MDAYS;
jule::Array<jule::Array<jule::Str,2>,5> _208da70bb_HELP_MAP;
jule::Str _200054492_OUT_DIR;
jule::Str _20006d38a_OUT_NAME;
jule::Str _20006e2c0_OUT;





std::ostream &operator<<(std::ostream &_Stream, _2225658d7_accept_range _Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _208c6d339_FoldPair _Src) {
	_Stream << "FoldPair{";
	_Stream << "from:" << _Src._field_from << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _208c6d8cd_CaseRange _Src) {
	_Stream << "CaseRange{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "delta:" << _Src._field_delta;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _208c6de2d_Range16 _Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _208c6e4c2_Range32 _Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _208c6ea22_RangeTable _Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _208c7472a_index(_208c7450a_LazyBuff* _self_,jule::I32 _5424_i) {
	if (((*_self_)._field_buff != nullptr)) {
		return (*_self_)._field_buff[_5424_i];
	}
	return (*_self_)._field_path[_5424_i];
}



inline void _208c74890_append(_208c7450a_LazyBuff* _self_,jule::U8 _6125_c) {
	if (((*_self_)._field_buff == nullptr)) {
		if (((*_self_)._field_w < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_path.len()))) && ((*_self_)._field_path[(*_self_)._field_w] == _6125_c)) {
			((*_self_)._field_w)++;
			return;
		}
		(*_self_)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::I32>((*_self_)._field_path.len()));
		copy((*_self_)._field_buff,static_cast<jule::Slice<jule::U8>>((*_self_)._field_path.slice(0LL,(*_self_)._field_w)));
	}
	(*_self_)._field_buff[(*_self_)._field_w]=_6125_c;
	((*_self_)._field_w)++;
}



inline jule::Str _208c74a05_string(_208c7450a_LazyBuff* _self_) {
	if (((*_self_)._field_buff == nullptr)) {
		return (*_self_)._field_vol_and_path.slice(0LL,(*_self_)._field_vol_len + (*_self_)._field_w);
	}
	return (*_self_)._field_vol_and_path.slice(0LL,(*_self_)._field_vol_len) + static_cast<jule::Str>((*_self_)._field_buff.slice(0LL,(*_self_)._field_w));
}







std::ostream &operator<<(std::ostream &_Stream, _208c7450a_LazyBuff _Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2223e8825_DirEntry _Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_2223e8825_DirEntry>>> static__208c7593a_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_2223e8825_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_2223e8825_DirEntry>>();
	jule::Slice<jule::U16> _1613_utf16_path = _2224846d5_utf16_from_str(_1524_path);
	_WDIR* _1717_dir = _2224a335d__wopendir((&(_1613_utf16_path[0LL])));
	if ((_1717_dir == nullptr)) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_2223e8825_DirEntry>>>(_2223dddc0_get_last_fs_error());
	}
	for (;;) {
		{
			struct _wdirent* _2217_dirent = _2224a366b__wreaddir(_1717_dir);
			if ((_2217_dirent == nullptr)) {
				goto _iter_end_23068bc53;
			}
			jule::Str _2617_name = _2224a0c0c_u16_ptr_to_str(((jule::U16*)(_2217_dirent->d_name)));
			jule::Ptr<_222424a2c_Status> _2721_stat = ({
				auto except = static__208c76034_of(_208c750aa_join(jule::Slice<jule::Str>({_1524_path,_2617_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_2223e8825_DirEntry>>>(except.error);
					return jule::Exceptional<jule::Slice<jule::Ptr<_2223e8825_DirEntry>>>(except.error);
				} jule::Ptr<_222424a2c_Status>();});
			});
			_1538_dirents = jule::alloc_for_append(_1538_dirents,1);_1538_dirents.__push(jule::new_ptr<_2223e8825_DirEntry>(_2223e8825_DirEntry(_2617_name,_2721_stat)));
		}
	_iter_next_23068bc53:;
	}
	_iter_end_23068bc53:;
	_2224a3979__wclosedir(_1717_dir);
	return jule::Exceptional<jule::Slice<jule::Ptr<_2223e8825_DirEntry>>>(jule::Any(), _1538_dirents);
}



inline jule::VoidExceptional static__208c75aa0_create(jule::Str _4026_path) {
	jule::Slice<jule::U16> _4513_utf16_path = _2224846d5_utf16_from_str(_4026_path);
	if ((!(_2224a2c42_create_directory((&(_4513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2223dddc0_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional static__208c75c15_remove(jule::Str _5426_path) {
	jule::Slice<jule::U16> _5513_utf16_path = _2224846d5_utf16_from_str(_5426_path);
	if ((!(_2224a3050_remove_directory((&(_5513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2223dddc0_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, _222416139_Directory _Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_222416733_File> static__2223dd93b_new(jule::U32 _4523_handle) {
	return jule::new_ptr<_222416733_File>(_222416733_File(_4523_handle));
}



inline jule::Exceptional<jule::Ptr<_222416733_File>> static__222419abb_create(jule::Str _5526_path) {
	return jule::Exceptional<jule::Ptr<_222416733_File>>(jule::Any(),({
		auto except = static__2224cb2cb_open(_5526_path,((static_cast<jule::I32>(770LL) | 770LL) | 770LL),438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_222416733_File>>(except.error);
			return jule::Exceptional<jule::Ptr<_222416733_File>>(except.error);
		} jule::Ptr<_222416733_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> static__222422563_read(jule::Str _6724_path) {
	jule::Ptr<_222424a2c_Status> _6813_s = ({
		auto except = static__208c76034_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_222424a2c_Status>();});
	});
	if ((!(_22244350c_is_reg(_6813_s.ptr())))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(static_cast<jule::I32>(14LL));
	}
	if ((_6813_s.get()._field_size == 0LLU)) {
		return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	}
	jule::Ptr<_222416733_File> _7817_f = ({
		auto except = static__2224cb2cb_open(_6724_path,static_cast<jule::I32>(0LL),0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_222416733_File>();});
	});
	__JULE_DEFER({
		({
			auto except = _222435543_close(_7817_f.ptr());
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/fs/file.jule:79:17"));
		});
	});
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::I32>(_6813_s.get()._field_size));
	jule::I32 _8213_n = ({
		auto except = _2225040a1_read(_7817_f.ptr(), _8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::I32();});
	});
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional static__222425ce7_write(jule::Str _9125_path,jule::Slice<jule::U8> _9136_data,jule::I32 _9150_perm) {
	jule::Ptr<_222416733_File> _9217_f = ({
		auto except = static__2224cb2cb_open(_9125_path,((static_cast<jule::I32>(769LL) | 769LL) | 769LL),_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_222416733_File>();});
	});
	({
		auto except = _2224eb86d_write(_9217_f.ptr(), _9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = _222435543_close(_9217_f.ptr());
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I32> _2224306c5_seek(_222416733_File* _self_,jule::I32 _10527_offset,jule::I32 _10540_origin) {
	jule::I32 _10613_pos = _2224a8253_seek(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle)),_10527_offset,static_cast<jule::I32>(_10540_origin));
	if ((_10613_pos == -1LL)) {
		return jule::Exceptional<jule::I32>(_2223dddc0_get_last_fs_error());
	}
	return jule::Exceptional<jule::I32>(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _222435543_close(_222416733_File* _self_) {
	if ((_2224a8ab1_close(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle))) == -1LL)) {
		return jule::VoidExceptional(_2223dddc0_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Ptr<_222416733_File>> static__2224cb2cb_open(jule::Str _2124_path,jule::I32 _2135_flag,jule::I32 _2148_mode) {
	jule::Slice<jule::U16> _2213_utf16_path = _2224846d5_utf16_from_str(_2124_path);
	jule::I32 _2313_handle = _2224a2192__wopen((&(_2213_utf16_path[0LL])),static_cast<jule::I32>(_2135_flag),_2148_mode);
	if ((_2313_handle == -1LL)) {
		return jule::Exceptional<jule::Ptr<_222416733_File>>(_2223dddc0_get_last_fs_error());
	}
	return jule::Exceptional<jule::Ptr<_222416733_File>>(jule::Any(),static__2223dd93b_new(static_cast<jule::U32>(static_cast<jule::U32>(_2313_handle))));
}



inline jule::VoidExceptional static__2224db4ea_remove(jule::Str _3426_path) {
	jule::Slice<jule::U16> _3513_utf16_path = _2224846d5_utf16_from_str(_3426_path);
	if ((!(_2224a2934_delete_file((&(_3513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2223dddc0_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I32> _2224eb86d_write(_222416733_File* _self_,jule::Slice<jule::U8> _4928_buff) {
	jule::I32 _4945_n = jule::I32();
	if ((_4928_buff.len() == 0LL)) {
		_4945_n = 0LL;
		return jule::Exceptional<jule::I32>(jule::Any(),_4945_n);
	}
	if (_2225400cb_is_console_handle((*_self_)._field_handle)) {
		jule::Slice<jule::U16> _5517_utf16_buff = _2224846d5_utf16_from_str(static_cast<jule::Str>(_4928_buff));
		jule::Bool _5617_ok = _2224a51a6_write_console((*_self_)._field_handle,(&(_5517_utf16_buff[0LL])),static_cast<jule::I32>(_5517_utf16_buff.len()),_4945_n,nullptr);
		if ((!(_5617_ok))) {
			return jule::Exceptional<jule::I32>(_2223dddc0_get_last_fs_error());
		}
		return jule::Exceptional<jule::I32>(jule::Any(),_4945_n);
	}
	_4945_n=static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_2224a9078_write(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle)),(&(_4928_buff[0LL])),static_cast<jule::U32>(static_cast<jule::U32>(_4928_buff.len()))))));
	if ((_4945_n == -1LL)) {
		return jule::Exceptional<jule::I32>(_2223dddc0_get_last_fs_error());
	}
	return jule::Exceptional<jule::I32>(jule::Any(),_4945_n);
}



inline jule::Exceptional<jule::I32> _2225040a1_read(_222416733_File* _self_,jule::Slice<jule::U8> _8231_buff) {
	jule::I32 _8248_n = jule::I32();
	if ((_8231_buff.len() == 0LL)) {
		_8248_n = 0LL;
		return jule::Exceptional<jule::I32>(jule::Any(),_8248_n);
	}
	if (_2225400cb_is_console_handle((*_self_)._field_handle)) {
		jule::Slice<jule::U16> _8821_codepage = jule::Slice<jule::U16>::alloc(static_cast<jule::I32>(_8231_buff.len()));
		jule::Bool _8917_ok = _2224a5827_read_console((*_self_)._field_handle,(&(_8821_codepage[0LL])),static_cast<jule::I32>(_8231_buff.len()),_8248_n,nullptr);
		if ((!(_8917_ok))) {
			return jule::Exceptional<jule::I32>(_2223dddc0_get_last_fs_error());
		}
		jule::Slice<jule::I32> _9617_runes = _2224a0514_decode(_8821_codepage.slice(0LL,_8248_n));
		_8248_n=0LL;
		{
			auto &expr = _9617_runes;
			auto it = expr.begin();
			_iter_begin_200d650c6:;
			if (it != expr.end()) {
				jule::I32 &_200d65192_r = *it;
				{
					jule::I32 _9921_size = _222568b4e_rune_len(_200d65192_r);
					if ((_8248_n + _9921_size) > static_cast<jule::I32>(static_cast<jule::I32>(_8231_buff.len()))) {
						goto _iter_end_200d650c6;
					}
					_2225690c2_encode_rune(_8231_buff.slice(_8248_n),_200d65192_r);
					_8248_n+=_9921_size;
				}
				_iter_next_200d650c6:;
				++it;
				goto _iter_begin_200d650c6;
			}
			_iter_end_200d650c6:;
		}
		return jule::Exceptional<jule::I32>(jule::Any(),_8248_n);
	}
	_8248_n=static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_2224a871a_read(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle)),(&(_8231_buff[0LL])),static_cast<jule::U32>(static_cast<jule::U32>(_8231_buff.len()))))));
	if ((_8248_n == -1LL)) {
		return jule::Exceptional<jule::I32>(_2223dddc0_get_last_fs_error());
	}
	return jule::Exceptional<jule::I32>(jule::Any(),_8248_n);
}







std::ostream &operator<<(std::ostream &_Stream, _222416733_File _Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _22243c6d2_is_dir(_222424a2c_Status* _self_) {
	return (((*_self_)._field_mode & 16384LLU) == 16384LLU);
}



inline jule::Bool _22244350c_is_reg(_222424a2c_Status* _self_) {
	return (((*_self_)._field_mode & 32768LLU) == 32768LLU);
}



inline jule::Exceptional<jule::Ptr<_222424a2c_Status>> static__208c76034_of(jule::Str _1222_path) {
	jule::Slice<jule::U16> _1313_utf16_path = _2224846d5_utf16_from_str(_1222_path);
	struct stat _1417_handle = (struct stat){};
	jule::I32 _1513_code = _2224a202c_wstat((&(_1313_utf16_path[0LL])),(&(_1417_handle)));
	if ((_1513_code != -1LL)) {
		return jule::Exceptional<jule::Ptr<_222424a2c_Status>>(jule::Any(),jule::new_ptr<_222424a2c_Status>(_222424a2c_Status(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_1417_handle.st_mode))),static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_1417_handle.st_size))))));
	}
	return jule::Exceptional<jule::Ptr<_222424a2c_Status>>(_2223dddc0_get_last_fs_error());
}







std::ostream &operator<<(std::ostream &_Stream, _222424a2c_Status _Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_208e1cd8a_Cmd> static__208e1d2db_new(jule::Str _2023_path) {
	return jule::new_ptr<_208e1cd8a_Cmd>(_208e1cd8a_Cmd(_2023_path,jule::Slice<jule::Str>(),jule::Slice<jule::Str>()));
}



inline jule::Exceptional<jule::I32> _208e1d5b6_spawn(_208e1cd8a_Cmd* _self_) {
	return jule::Exceptional<jule::I32>(jule::Any(),static_cast<jule::I32>(({
		auto except = _208e33576___spawn(&(*_self_));
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I32>(except.error);
			return jule::Exceptional<jule::I32>(except.error);
		} jule::I32();});
	})));
}



inline jule::Exceptional<jule::I32> _208e33576___spawn(_208e1cd8a_Cmd* _self_) {
	jule::I32 _5317_pid = 0LL;
	if (((*_self_)._field_env == nullptr)) {
		_5317_pid=static_cast<jule::I32>(_208e32bc4_execvp((*_self_)._field_path,(*_self_)._field_args));
	} else {
		_5317_pid=static_cast<jule::I32>(_208e3318b_execve((*_self_)._field_path,(*_self_)._field_args,(*_self_)._field_env));
	}
	if ((_5317_pid == -1LL)) {
		return jule::Exceptional<jule::I32>(_208e1c791_get_last_process_error());
	}
	jule::I32 _6213_status = 0LL;
	if ((_cwait(((signed*)((&(_6213_status)))),_5317_pid,0LL) == -1LL)) {
		return jule::Exceptional<jule::I32>(_208e1c791_get_last_process_error());
	}
	return jule::Exceptional<jule::I32>(jule::Any(),_6213_status);
}







std::ostream &operator<<(std::ostream &_Stream, _208e1cd8a_Cmd _Src) {
	_Stream << "Cmd{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _208de2238_Log _Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _1e02c2258_prec(_1e02c1d07_Token* _self_) {
	if ((*_self_)._field_id != static_cast<jule::U32>(7LLU)) {
		return 0LLU;
	}
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_200e1c1d3:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_200e1bd4d:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_200e1bdb4:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_200e1be2a:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_200e1bec4:;
			{
				return 1LLU;
			}
		}
		else {
			_case_begin_200e1b5de:;
			{
				return 0LLU;
			}
		}
		_match_end_200e1b8ec:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1e02c1d07_Token _Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02c83c4_is_ok(_1e02c7e51_File* _self_) {
	({
		auto except = static__208c76034_of((*_self_)._field_path);
		(except.ok()) ? (except.result) : ({{
			return false;
			return false;
		} jule::Ptr<_222424a2c_Status>();});
	});
	return true;
}



inline void _1e02c86e3_fill(_1e02c7e51_File* _self_,jule::Slice<jule::U8> _2331_data) {
	(*_self_)._field_data=_2331_data;
}



inline jule::Str _1e02c89bd_dir(_1e02c7e51_File* _self_) {
	return _208c75660_dir((*_self_)._field_path);
}



inline jule::Str _1e02c8c98_name(_1e02c7e51_File* _self_) {
	return _208c754ea_base((*_self_)._field_path);
}



inline jule::U32 _1e02c9073_addr(_1e02c7e51_File* _self_) {
	return static_cast<jule::U32>(((jule::U32)((&((*_self_))))));
}



inline jule::Str _1e02c942a_get_row(_1e02c7e51_File* _self_,jule::I32 _4426_row) {
	jule::I32 _4517_n = 0LL;
	jule::I32 _4617_line_start = 0LL;
	jule::I32 _4717_i = 0LL;
	for (; _4717_i < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_data.len())); (_4717_i)++) {
		{
			if ((*_self_)._field_data[_4717_i] != '\n') {
				goto _iter_next_200e238b0;
			}
			(_4517_n)++;
			if (_4517_n == _4426_row) {
				return static_cast<jule::Str>((*_self_)._field_data.slice(_4617_line_start,_4717_i));
			}
			_4617_line_start=static_cast<jule::I32>((_4717_i + 1LL));
		}
	_iter_next_200e238b0:;
	}
	_iter_end_200e238b0:;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, _1e02c7e51_File _Src) {
	_Stream << "File{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "tokens:" << _Src._field_tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02ca67e_KindPair _Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _1e02d2631_push_err(_1e02d1eb0_Lex* _self_,jule::Str _46027_fmt,jule::Slice<jule::Any> _46040_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_1e02cb31c_make_err((*_self_)._field_row,(*_self_)._field_column,(*_self_)._field_file,_46027_fmt,_46040_args));
}



inline void _1e02d2a2c_push_err_tok(_1e02d1eb0_Lex* _self_,_1e02c1d07_Token& _46532_token,jule::Str _46546_fmt) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_1e02cb31c_make_err(_46532_token._field_row,_46532_token._field_column,(*_self_)._field_file,_46546_fmt,jule::Slice<jule::Any>()));
}



inline void _1e02d2c6e_lex(_1e02d1eb0_Lex* _self_) {
	(*_self_)._field_errors=nullptr;
	_1e02d53d1_new_line(&(*_self_));
	while ((*_self_)._field_pos < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len()))) {
		{
			_1e02c1d07_Token _47521_token = _1e02d6b96_token(&(*_self_));
			if (_47521_token._field_id != static_cast<jule::U32>(0LLU)) {
				(*_self_)._field_tokens = jule::alloc_for_append((*_self_)._field_tokens,1);(*_self_)._field_tokens.__push(_47521_token);
			}
		}
	_iter_next_200e29a4d:;
	}
	_iter_end_200e29a4d:;
}



inline jule::Str _1e02d3126_id(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _48422_ln) {
	if ((_48422_ln.len() == 0LL)) {
		return jule::Str();
	}
	jule::I32 _48814_r;
	jule::I32 _48821_i;
	std::tie(_48814_r,_48821_i) = _222567dc3_decode_rune(_48422_ln);
	if ((_48814_r != '_') && (!(_1e02c5943_is_letter(_48814_r)))) {
		return jule::Str();
	}
	while (_48821_i < static_cast<jule::I32>(static_cast<jule::I32>(_48422_ln.len()))) {
		{
			jule::I32 _49418_pr;
			jule::I32 _49422_n;
			std::tie(_49418_pr,_49422_n) = _222567dc3_decode_rune(_48422_ln.slice(_48821_i));
			if (((_49418_pr != '_') && (!(_1e02c605e_is_decimal(static_cast<jule::U8>(static_cast<jule::U8>(_49418_pr)))))) && (!(_1e02c5943_is_letter(_49418_pr)))) {
				(*_self_)._field_pos+=_48821_i;
				return static_cast<jule::Str>(_48422_ln.slice(0LL,_48821_i));
			}
			_48821_i+=_49422_n;
		}
	_iter_next_200e2daa7:;
	}
	_iter_end_200e2daa7:;
	(*_self_)._field_pos+=static_cast<jule::I32>(_48422_ln.len());
	return static_cast<jule::Str>(_48422_ln);
}



inline jule::Slice<jule::U8> _1e02d3401_resume(_1e02d1eb0_Lex* _self_) {
	jule::I32 _50917_i = (*_self_)._field_pos;
	for (; _50917_i < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len())); (_50917_i)++) {
		{
			jule::I32 _51117_r = static_cast<jule::I32>((*_self_)._field_file.get()._field_data[_50917_i]);
			if (_1e02c5514_is_space(_51117_r)) {
				
				((*_self_)._field_pos)++;
				{
					auto &_match_expr{ _51117_r };
					
					if (_match_expr == '\n') {
						_case_begin_200e3433d:;
						{
							_1e02d53d1_new_line(&(*_self_));
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_200e34096:;
						{
							(*_self_)._field_column+=8LL;
						}
					}
					else {
						_case_begin_200e335e5:;
						{
							((*_self_)._field_column)++;
						}
					}
					_match_end_200e33bcd:;
				}
				goto _iter_next_200e32182;
			}
			jule::I32 _52321_j = _50917_i;
			for (; _52321_j < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len())); (_52321_j)++) {
				{
					if ((*_self_)._field_file.get()._field_data[_52321_j] == '\n') {
						goto _iter_end_200e330ea;
					}
				}
			_iter_next_200e330ea:;
			}
			_iter_end_200e330ea:;
			return (*_self_)._field_file.get()._field_data.slice(_50917_i,_52321_j);
		}
	_iter_next_200e32182:;
	}
	_iter_end_200e32182:;
	return nullptr;
}



inline void _1e02d3720_lex_line_comment(_1e02d1eb0_Lex* _self_,_1e02c1d07_Token& _53540_token) {
	jule::I32 _53613_start = (*_self_)._field_pos;
	(*_self_)._field_pos+=2LL;
	for (; (*_self_)._field_pos < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len())); ((*_self_)._field_pos)++) {
		{
			jule::U8 _53917_r = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];
			if ((_53917_r == '\n') || (_53917_r == '\r')) {
				goto _iter_end_200e37594;
			}
		}
	_iter_next_200e37594:;
	}
	_iter_end_200e37594:;
	if (((*_self_)._field_mode & static_cast<jule::I32>(1LL)) == static_cast<jule::I32>(1LL)) {
		_53540_token._field_id=static_cast<jule::U32>(18LLU);
		_53540_token._field_kind=static_cast<jule::Str>((*_self_)._field_file.get()._field_data.slice(_53613_start,(*_self_)._field_pos));
	}
}



inline void _1e02d3a3e_lex_range_comment(_1e02d1eb0_Lex* _self_,_1e02c1d07_Token& _55041_token) {
	jule::I32 _55113_start = (*_self_)._field_pos;
	(*_self_)._field_pos+=2LL;
	for (; (*_self_)._field_pos < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len())); ((*_self_)._field_pos)++) {
		{
			jule::U8 _55417_r = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];
			if (_55417_r == '\r') {
				goto _iter_next_200e3b532;
			}
			if (_55417_r == '\n') {
				_1e02d53d1_new_line(&(*_self_));
				goto _iter_next_200e3b532;
			}
			(*_self_)._field_column+=1LL;
			if (((((*_self_)._field_pos + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len()))) && (_55417_r == '*')) && ((*_self_)._field_file.get()._field_data[((*_self_)._field_pos + 1LL)] == '/')) {
				(*_self_)._field_column+=2LL;
				(*_self_)._field_pos+=2LL;
				if (((*_self_)._field_mode & static_cast<jule::I32>(1LL)) == static_cast<jule::I32>(1LL)) {
					_55041_token._field_id=static_cast<jule::U32>(18LLU);
					_55041_token._field_kind=static_cast<jule::Str>((*_self_)._field_file.get()._field_data.slice(_55113_start,(*_self_)._field_pos));
				}
				return;
			}
		}
	_iter_next_200e3b532:;
	}
	_iter_end_200e3b532:;
	_1e02d2631_push_err(&(*_self_), jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _1e02d3de6_num(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _57823_txt) {
	jule::Str _57838_lit = jule::Str();
	if (_57823_txt[0LL] == '_') {
		_57838_lit = jule::Str();
		return _57838_lit;
	}
	_57838_lit=_1e02d0486_hex_num(_57823_txt);
	if ((!(_57838_lit.empty()))) {
		goto _julec_label_end;
	}
	_57838_lit=_1e02d0178_octal_num(_57823_txt);
	if ((!(_57838_lit.empty()))) {
		goto _julec_label_end;
	}
	_57838_lit=_1e02cd7b4_binary_num(_57823_txt);
	if ((!(_57838_lit.empty()))) {
		goto _julec_label_end;
	}
	_57838_lit=_1e02cd4a6_common_num(_57823_txt);
	_julec_label_end:;
	(*_self_)._field_pos+=static_cast<jule::I32>(_57838_lit.len());
	return _57838_lit;
}



inline jule::Str _1e02d429d_escape_seq(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _60030_txt) {
	jule::Str _60117_seq = jule::Str();
	if ((_60030_txt.len() < 2LL)) {
		goto _julec_label_end;
	}
	{
		auto &_match_expr{ _60030_txt[1LL] };
		
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_200e488a2:;
			{
				(*_self_)._field_pos+=2LL;
				return static_cast<jule::Str>(_60030_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_200e487b4:;
			{
				_60117_seq=_1e02d0bc3_big_unicode_point_escape(_60030_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_200e484d9:;
			{
				_60117_seq=_1e02d1014_little_unicode_point_escape(_60030_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_200e48550:;
			{
				_60117_seq=_1e02d1311_hex_byte_escape(_60030_txt);
			}
		}
		else {
			_case_begin_200e47c47:;
			{
				_60117_seq=_1e02d161e_byte_escape(_60030_txt);
			}
		}
		_match_end_200e4840c:;
	}
	_julec_label_end:;
	if (_60117_seq.empty()) {
		((*_self_)._field_pos)++;
		_1e02d2631_push_err(&(*_self_), jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	}
	(*_self_)._field_pos+=static_cast<jule::I32>(_60117_seq.len());
	return _60117_seq;
}



inline jule::Str _1e02d4732_get_rune(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _63428_txt,jule::Bool _63441_raw) {
	if ((!(_63441_raw)) && (_63428_txt[0LL] == '\\')) {
		return _1e02d429d_escape_seq(&(*_self_), _63428_txt);
	}
	jule::I32 _63914_r;
	jule::I32 _63917_n;
	std::tie(_63914_r,_63917_n) = _222567dc3_decode_rune(_63428_txt);
	(*_self_)._field_pos+=_63917_n;
	return static_cast<jule::Str>(_63914_r);
}



inline jule::Str _1e02d4ad9_lex_rune(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _64428_txt) {
	jule::Str _64517_run = jule::Str("'", 1);
	((*_self_)._field_column)++;
	jule::I32 _64717_n = 0LL;
	jule::I32 _64817_i = 1LL;
	for (; _64817_i < static_cast<jule::I32>(static_cast<jule::I32>(_64428_txt.len())); (_64817_i)++) {
		{
			if (_64428_txt[_64817_i] == '\r') {
				goto _iter_next_200e50e09;
			}
			if (_64428_txt[_64817_i] == '\n') {
				_1e02d2631_push_err(&(*_self_), jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*_self_)._field_pos)++;
				_1e02d53d1_new_line(&(*_self_));
				return jule::Str();
			}
			jule::Slice<jule::U8> _66017_part = _64428_txt.slice(_64817_i);
			jule::Str _66117_r = _1e02d4732_get_rune(&(*_self_), _66017_part,false);
			_64517_run+=_66117_r;
			(*_self_)._field_column+=static_cast<jule::I32>(_222569eb3_rune_count_str(_66117_r));
			if ((_66117_r == jule::Str("'", 1))) {
				((*_self_)._field_pos)++;
				goto _iter_end_200e50e09;
			}
			if ((_66117_r.len() > 1LL)) {
				_64817_i+=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_66117_r.len())) - 1LL));
			}
			(_64717_n)++;
		}
	_iter_next_200e50e09:;
	}
	_iter_end_200e50e09:;
	if ((_64717_n == 0LL)) {
		_1e02d2631_push_err(&(*_self_), jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if ((_64717_n > 1LL)) {
		_1e02d2631_push_err(&(*_self_), jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	}
	return _64517_run;
}



inline jule::Str _1e02d4db4_lex_str(_1e02d1eb0_Lex* _self_) {
	jule::Str _68417_s = jule::Str();
	jule::U8 _68513_mark = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];
	((*_self_)._field_pos)++;
	jule::Bool _68713_raw = _68513_mark == '`';
	_68417_s+=static_cast<jule::Str>(_68513_mark);
	((*_self_)._field_column)++;
	while ((*_self_)._field_pos < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_file.get()._field_data.len()))) {
		{
			jule::U8 _69217_ch = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];
			if (_69217_ch == '\r') {
				goto _iter_next_200e58560;
			}
			if (_69217_ch == '\n') {
				_1e02d53d1_new_line(&(*_self_));
				if ((!(_68713_raw))) {
					_1e02d2631_push_err(&(*_self_), jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*_self_)._field_pos)++;
					return jule::Str();
				}
			}
			jule::Slice<jule::U8> _70421_part = (*_self_)._field_file.get()._field_data.slice((*_self_)._field_pos);
			jule::Str _70517_r = _1e02d4732_get_rune(&(*_self_), _70421_part,_68713_raw);
			_68417_s+=_70517_r;
			(*_self_)._field_column+=static_cast<jule::I32>(_222569eb3_rune_count_str(_70517_r));
			if (_69217_ch == _68513_mark) {
				goto _iter_end_200e58560;
			}
		}
	_iter_next_200e58560:;
	}
	_iter_end_200e58560:;
	return _68417_s;
}



inline jule::Bool _1e02d518e_is_first_token_of_line(_1e02d1eb0_Lex* _self_) {
	return ((*_self_)._field_column == 1LL);
}



inline void _1e02d53d1_new_line(_1e02d1eb0_Lex* _self_) {
	((*_self_)._field_row)++;
	(*_self_)._field_column=1LL;
}



inline jule::Bool _1e02d5a1e_is_op(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _72525_txt,jule::Str _72538_kind,jule::U32 _72549_id,_1e02c1d07_Token& _72567_t) {
	if ((!(_1e02cb74b_bytes_has_prefix(_72525_txt,_72538_kind)))) {
		return false;
	}
	_72567_t._field_kind=_72538_kind;
	_72567_t._field_id=_72549_id;
	(*_self_)._field_pos+=static_cast<jule::I32>(_72538_kind.len());
	return true;
}



inline jule::Bool _1e02d5ea3_lex_basic_ops(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8> _73632_txt,_1e02c1d07_Token& _73650_tok) {
	{
		auto &expr = _1e02cabe0_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_200e62734:;
		if (it != expr.end()) {
			_1e02ca67e_KindPair &_200e62888_pair = *it;
			{
				if (_1e02d5a1e_is_op(&(*_self_), _73632_txt,_200e62888_pair._field_kind,_200e62888_pair._field_id,_73650_tok)) {
					return true;
				}
			}
			_iter_next_200e62734:;
			++it;
			goto _iter_begin_200e62734;
		}
		_iter_end_200e62734:;
	}
	return false;
}



inline jule::Bool _1e02d6437_lex_id(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _74626_txt,_1e02c1d07_Token& _74644_t) {
	jule::Str _74713_lex = _1e02d3126_id(&(*_self_), _74626_txt);
	if (_74713_lex.empty()) {
		return false;
	}
	_74644_t._field_kind=_74713_lex;
	_74644_t._field_id=static_cast<jule::U32>(2LLU);
	return true;
}



inline jule::Bool _1e02d68bb_lex_num(_1e02d1eb0_Lex* _self_,jule::Slice<jule::U8>& _75727_txt,_1e02c1d07_Token& _75745_t) {
	jule::Str _75813_lex = _1e02d3de6_num(&(*_self_), _75727_txt);
	if (_75813_lex.empty()) {
		return false;
	}
	_75745_t._field_kind=_75813_lex;
	_75745_t._field_id=static_cast<jule::U32>(6LLU);
	return true;
}



inline _1e02c1d07_Token _1e02d6b96_token(_1e02d1eb0_Lex* _self_) {
	_1e02c1d07_Token _77017_t = _1e02c1d07_Token((*_self_)._field_file,jule::I32(),jule::I32(),jule::Str(),static_cast<jule::U32>(0LLU));
	jule::Slice<jule::U8> _77213_txt = _1e02d3401_resume(&(*_self_));
	if ((_77213_txt == nullptr)) {
		return _77017_t;
	}
	_77017_t._field_column=(*_self_)._field_column;
	_77017_t._field_row=(*_self_)._field_row;
	{
		
		if (_1e02d68bb_lex_num(&(*_self_), _77213_txt,_77017_t)) {
			_case_begin_200e6a143:;
			{
				goto _match_end_200e68c8a;
			}
		}
		else if (_77213_txt[0LL] == '\'') {
			_case_begin_200e693d9:;
			{
				_77017_t._field_kind=_1e02d4ad9_lex_rune(&(*_self_), _77213_txt);
				_77017_t._field_id=static_cast<jule::U32>(6LLU);
				return _77017_t;
			}
		}
		else if ((_77213_txt[0LL] == '\"') || (_77213_txt[0LL] == '`')) {
			_case_begin_200e69450:;
			{
				_77017_t._field_kind=_1e02d4db4_lex_str(&(*_self_));
				_77017_t._field_id=static_cast<jule::U32>(6LLU);
				return _77017_t;
			}
		}
		else if (_1e02cb74b_bytes_has_prefix(_77213_txt,jule::Str("//", 2))) {
			_case_begin_200e694b6:;
			{
				_1e02d3720_lex_line_comment(&(*_self_), _77017_t);
				return _77017_t;
			}
		}
		else if (_1e02cb74b_bytes_has_prefix(_77213_txt,jule::Str("/*", 2))) {
			_case_begin_200e6952c:;
			{
				_1e02d3a3e_lex_range_comment(&(*_self_), _77017_t);
				return _77017_t;
			}
		}
		else if (_1e02d5a1e_is_op(&(*_self_), _77213_txt,jule::Str("(", 1),static_cast<jule::U32>(3LLU),_77017_t) || _1e02d5a1e_is_op(&(*_self_), _77213_txt,jule::Str(")", 1),static_cast<jule::U32>(3LLU),_77017_t) || _1e02d5a1e_is_op(&(*_self_), _77213_txt,jule::Str("{", 1),static_cast<jule::U32>(3LLU),_77017_t) || _1e02d5a1e_is_op(&(*_self_), _77213_txt,jule::Str("}", 1),static_cast<jule::U32>(3LLU),_77017_t) || _1e02d5a1e_is_op(&(*_self_), _77213_txt,jule::Str("[", 1),static_cast<jule::U32>(3LLU),_77017_t) || _1e02d5a1e_is_op(&(*_self_), _77213_txt,jule::Str("]", 1),static_cast<jule::U32>(3LLU),_77017_t) || _1e02d5ea3_lex_basic_ops(&(*_self_), _77213_txt,_77017_t)) {
			_case_begin_200e6acc0:;
			{
				goto _match_end_200e68c8a;
			}
		}
		else if (_1e02d6437_lex_id(&(*_self_), _77213_txt,_77017_t)) {
			_case_begin_200e6ad36:;
			{
				{
					auto &expr = _1e02ca9ae_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_200e7405e:;
					if (it != expr.end()) {
						_1e02ca67e_KindPair &_200e741b3_pair = *it;
						{
							if (_200e741b3_pair._field_kind == _77017_t._field_kind) {
								_77017_t._field_id=_200e741b3_pair._field_id;
								goto _iter_end_200e7405e;
							}
						}
						_iter_next_200e7405e:;
						++it;
						goto _iter_begin_200e7405e;
					}
					_iter_end_200e7405e:;
				}
			}
		}
		else {
			_case_begin_200e69373:;
			{
				jule::I32 _81718_r;
				jule::I32 _81721_sz;
				std::tie(_81718_r,_81721_sz) = _222567dc3_decode_rune(_77213_txt);
				_1e02d2631_push_err(&(*_self_), jule::Str("undefined token: @", 18),jule::Slice<jule::Any>({jule::Any(_81718_r)}));
				((*_self_)._field_column)++;
				(*_self_)._field_pos+=_81721_sz;
				return _77017_t;
			}
		}
		_match_end_200e68c8a:;
	}
	(*_self_)._field_column+=static_cast<jule::I32>(_222569eb3_rune_count_str(_77017_t._field_kind));
	return _77017_t;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d1eb0_Lex _Src) {
	_Stream << "Lex{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e01bcb7b_Ast _Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "nodes:" << _Src._field_nodes;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0275bbd_NamespaceTypeDecl _Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0176184_SptrTypeDecl _Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e025099a_SlcTypeDecl _Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e01aebb2_TupleTypeDecl _Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e029d388_is_unsafe(_1e01c50b2_PtrTypeDecl* _self_) {
	return ((*_self_)._field_elem == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1e01c50b2_PtrTypeDecl _Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02a0a2d_auto_sized(_1e0134b15_ArrTypeDecl* _self_) {
	return ((*_self_)._field_size == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1e0134b15_ArrTypeDecl _Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0181623_MapTypeDecl _Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0181843_RetTypeDecl _Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0181ea3_TupleExpr _Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d7328_CastExpr _Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dd807_Conditional _Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed0e56de_FileInfo _Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed0e590e_PackageInfo _Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed0e7eb6_Stmt _Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _1ed0e9160_stop(_1ed0e8967_ScopeParser* _self_) {
	(*_self_)._field_pos=-1LL;
}



inline jule::Bool _1ed0e943a_stopped(_1ed0e8967_ScopeParser* _self_) {
	return ((*_self_)._field_pos == -1LL);
}



inline jule::Bool _1ed0e9715_finished(_1ed0e8967_ScopeParser* _self_) {
	return (*_self_)._field_pos >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_stmts.len()));
}



inline jule::Bool _1ed0e99e0_is_last_st(_1ed0e8967_ScopeParser* _self_) {
	return ((*_self_)._field_pos + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_stmts.len()));
}



inline void _1ed0e9ddb_push_err(_1ed0e8967_ScopeParser* _self_,_1e02c1d07_Token _18927_token,jule::Str _18941_fmt) {
	_1ed11b4d4_push_err((*_self_)._field_p.ptr(), _18927_token,_18941_fmt,jule::Slice<jule::Any>());
}



inline void _1ed0ea2d7_push_suggestion(_1ed0e8967_ScopeParser* _self_,jule::Str _19434_fmt,jule::Slice<jule::Any> _19447_args) {
	_1ed11b8d0_push_suggestion((*_self_)._field_p.ptr(), _19434_fmt,_19447_args);
}



inline void _1ed0ea606_insert_as_next(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _19838_tokens) {
	(*_self_)._field_stmts=jule::append((*_self_)._field_stmts.slice(0LL,((*_self_)._field_pos + 1LL)),(*_self_)._field_stmts.slice((*_self_)._field_pos));
	(*_self_)._field_stmts[((*_self_)._field_pos + 1LL)]=jule::new_ptr<_1ed0e7eb6_Stmt>(_1ed0e7eb6_Stmt(_19838_tokens,jule::Bool()));
}



inline jule::Ptr<_1ed0e7eb6_Stmt> _1ed0ea8d1_next(_1ed0e8967_ScopeParser* _self_) {
	((*_self_)._field_pos)++;
	return (*_self_)._field_stmts[(*_self_)._field_pos];
}



inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed0ead65_build_scope(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _20835_tokens,_1e02c1d07_Token _20856_end) {
	jule::Ptr<_1e02d9ddb_ScopeTree> _20917_s = _1ed0e6bda_new_scope();
	_20917_s.get()._field_parent=(*_self_)._field_s;
	_20917_s.get()._field_end=_20856_end;
	_1ed0e8967_ScopeParser _21217_ssp = _1ed0e8967_ScopeParser((*_self_)._field_p,jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>>(),jule::I32());
	_1ed1068dc_build(&_21217_ssp, _20835_tokens,_20917_s);
	return _20917_s;
}



inline jule::Any _1ed0eb21c_build_var_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _21936_tokens) {
	jule::Ptr<_1e02daea8_VarDecl> _22017_v = _1ed11ea26_build_var((*_self_)._field_p, _21936_tokens);
	_22017_v.get()._field_scope=(*_self_)._field_s;
	return jule::Any(_22017_v);
}



inline jule::Any _1ed0eb5c4_build_ret_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _22535_tokens) {
	jule::Ptr<_1e02db31b_RetSt> _22617_st = jule::new_ptr<_1e02db31b_RetSt>(_1e02db31b_RetSt(_22535_tokens[0LL],jule::Ptr<_1e0181a63_Expr>()));
	if ((_22535_tokens.len() > 1LL)) {
		_22535_tokens=_22535_tokens.slice(1LL);
		_22617_st.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _22535_tokens);
	}
	return jule::Any(_22617_st);
}



inline jule::Any _1ed0eb97b_build_while_next_iter(_1ed0e8967_ScopeParser* _self_,jule::Ptr<_1ed0e7eb6_Stmt>& _23645_s) {
	jule::Ptr<_1e02db816_Iter> _23717_it = jule::new_ptr<_1e02db816_Iter>(_1e02db816_Iter(_23645_s.get()._field_tokens[0LL],jule::Any(),jule::Ptr<_1e02d9ddb_ScopeTree>()));
	jule::Slice<_1e02c1d07_Token> _24017_tokens = _23645_s.get()._field_tokens.slice(1LL);
	jule::Ptr<_1e02dbd88_WhileKind> _24117_kind = jule::new_ptr<_1e02dbd88_WhileKind>(_1e02dbd88_WhileKind());
	if ((_24017_tokens.len() > 0LL)) {
		_24117_kind.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _24017_tokens);
	}
	if (_1ed0e99e0_is_last_st(&(*_self_))) {
		_1ed0e9ddb_push_err(&(*_self_), _23717_it.get()._field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_24017_tokens=_1ed0ea8d1_next(&(*_self_)).get()._field_tokens;
	jule::Slice<_1e02c1d07_Token> _25317_st_tokens = _1ed1080b4_get_block_expr(_24017_tokens);
	if ((_25317_st_tokens.len() > 0LL)) {
		jule::Ptr<_1ed0e7eb6_Stmt> _25521_stmt = jule::new_ptr<_1ed0e7eb6_Stmt>(_1ed0e7eb6_Stmt(_25317_st_tokens,_23645_s.get()._field_terminated));
		_24117_kind.get()._field_next_token=_25317_st_tokens[0LL];
		_24117_kind.get()._field_next=_1ed1064e1_build_st(&(*_self_), _25521_stmt);
	}
	jule::I32 _26317_i = _25317_st_tokens.len();
	jule::Slice<_1e02c1d07_Token> _26417_block_tokens = _1ed1189ed_range(_26317_i,jule::Str("{", 1),jule::Str("}", 1),_24017_tokens);
	if ((_26417_block_tokens == nullptr)) {
		_1ed0e9160_stop(&(*_self_));
		_1ed0e9ddb_push_err(&(*_self_), _23717_it.get()._field_token,jule::Str("body is not exist", 17));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_26317_i < static_cast<jule::I32>(static_cast<jule::I32>(_24017_tokens.len()))) {
		_1ed0e9ddb_push_err(&(*_self_), _24017_tokens[_26317_i],jule::Str("invalid syntax", 14));
	}
	_23717_it.get()._field_scope=_1ed0ead65_build_scope(&(*_self_), _26417_block_tokens,_24017_tokens[(_26317_i - 1LL)]);
	_23717_it.get()._field_kind=jule::Any(_24117_kind);
	return jule::Any(_23717_it);
}



inline jule::Ptr<_1e02dbd88_WhileKind> _1ed0ebd33_build_while_iter_kind(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _28145_tokens) {
	return jule::new_ptr<_1e02dbd88_WhileKind>(_1e02dbd88_WhileKind(_1ed11bc87_build_expr((*_self_)._field_p, _28145_tokens),jule::Any(),_1e02c1d07_Token()));
}



inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed0ec22e_get_range_kind_keys_tokens(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _28750_toks) {
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _28818_vars;
	jule::Slice<_208de2238_Log> _28824_errs;
	std::tie(_28818_vars,_28824_errs) = _1ed119317_parts(_28750_toks,static_cast<jule::U32>(8LLU),true);
	(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_28824_errs);
	return _28818_vars;
}



inline jule::Ptr<_1e02daea8_VarDecl> _1ed0ec5c5_build_range_kind_key(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _29344_tokens) {
	if ((_29344_tokens.len() == 0LL)) {
		return nullptr;
	}
	jule::Ptr<_1e02daea8_VarDecl> _29717_key = jule::new_ptr<_1e02daea8_VarDecl>(_1e02daea8_VarDecl(jule::Ptr<_1e02d9ddb_ScopeTree>(),_29344_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1e01c3db3_TypeDecl>(),jule::Ptr<_1e0181a63_Expr>()));
	if (_29717_key.get()._field_token._field_id == static_cast<jule::U32>(36LLU)) {
		_29717_key.get()._field_mutable=true;
		if ((_29344_tokens.len() == 1LL)) {
			_1ed0e9ddb_push_err(&(*_self_), _29717_key.get()._field_token,jule::Str("invalid syntax", 14));
		}
		_29717_key.get()._field_token=_29344_tokens[1LL];
	} else if ((_29344_tokens.len() > 1LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _29344_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if (_29717_key.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed0e9ddb_push_err(&(*_self_), _29717_key.get()._field_token,jule::Str("invalid syntax", 14));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	_29717_key.get()._field_ident=_29717_key.get()._field_token._field_kind;
	return _29717_key;
}



inline jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> _1ed0ec97c_build_range_kind_keys(_1ed0e8967_ScopeParser* _self_,jule::Slice<jule::Slice<_1e02c1d07_Token>>& _31845_parts) {
	jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> _31917_keys = nullptr;
	{
		auto &expr = _31845_parts;
		auto it = expr.begin();
		_iter_begin_20107558e:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2010756c1_tokens = *it;
			{
				_31917_keys = jule::alloc_for_append(_31917_keys,1);_31917_keys.__push(_1ed0ec5c5_build_range_kind_key(&(*_self_), _2010756c1_tokens));
			}
			_iter_next_20107558e:;
			++it;
			goto _iter_begin_20107558e;
		}
		_iter_end_20107558e:;
	}
	return _31917_keys;
}



inline void _1ed0ecdbc_setup_range_kind_keys_plain(_1ed0e8967_ScopeParser* _self_,jule::Ptr<_1e02dc4a4_RangeKind>& _32651_rng,jule::Slice<_1e02c1d07_Token>& _32673_tokens) {
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _32717_key_tokens = _1ed0ec22e_get_range_kind_keys_tokens(&(*_self_), _32673_tokens);
	if ((_32717_key_tokens.len() == 0LL)) {
		return;
	}
	if ((_32717_key_tokens.len() > 2LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _32651_rng.get()._field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> _33417_keys = _1ed0ec97c_build_range_kind_keys(&(*_self_), _32717_key_tokens);
	_32651_rng.get()._field_key_a=_33417_keys[0LL];
	if ((_33417_keys.len() > 1LL)) {
		_32651_rng.get()._field_key_b=_33417_keys[1LL];
	}
}



inline void _1ed0ed2eb_setup_range_kind_keys_explicit(_1ed0e8967_ScopeParser* _self_,jule::Ptr<_1e02dc4a4_RangeKind>& _34154_rng,jule::Slice<_1e02c1d07_Token>& _34176_tokens) {
	jule::I32 _34217_i = 0LL;
	jule::Slice<_1e02c1d07_Token> _34317_rang = _1ed1189ed_range(_34217_i,jule::Str("(", 1),jule::Str(")", 1),_34176_tokens);
	if (_34217_i < static_cast<jule::I32>(static_cast<jule::I32>(_34176_tokens.len()))) {
		_1ed0e9ddb_push_err(&(*_self_), _34154_rng.get()._field_in_token,jule::Str("invalid syntax", 14));
	}
	_1ed0ecdbc_setup_range_kind_keys_plain(&(*_self_), _34154_rng,_34317_rang);
}



inline void _1ed0ed6d6_setup_range_kind_keys(_1ed0e8967_ScopeParser* _self_,jule::Ptr<_1e02dc4a4_RangeKind>& _35045_rng,jule::Slice<_1e02c1d07_Token>& _35067_tokens) {
	if (_35067_tokens[0LL]._field_id == static_cast<jule::U32>(3LLU)) {
		if ((_35067_tokens[0LL]._field_kind != jule::Str("(", 1))) {
			_1ed0e9ddb_push_err(&(*_self_), _35067_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		_1ed0ed2eb_setup_range_kind_keys_explicit(&(*_self_), _35045_rng,_35067_tokens);
		return;
	}
	_1ed0ecdbc_setup_range_kind_keys_plain(&(*_self_), _35045_rng,_35067_tokens);
}



inline jule::Ptr<_1e02dc4a4_RangeKind> _1ed0edc47_build_range_iter_kind(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _36245_var_tokens,jule::Slice<_1e02c1d07_Token>& _36314_expr_tokens,_1e02c1d07_Token& _36341_in_token) {
	jule::Ptr<_1e02dc4a4_RangeKind> _36417_rng = jule::new_ptr<_1e02dc4a4_RangeKind>(_1e02dc4a4_RangeKind(_36341_in_token,jule::Ptr<_1e0181a63_Expr>(),jule::Ptr<_1e02daea8_VarDecl>(),jule::Ptr<_1e02daea8_VarDecl>()));
	if ((_36314_expr_tokens.len() == 0LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _36417_rng.get()._field_in_token,jule::Str("expression missing", 18));
		return _36417_rng;
	}
	_36417_rng.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _36314_expr_tokens);
	if ((_36245_var_tokens.len() > 0LL)) {
		_1ed0ed6d6_setup_range_kind_keys(&(*_self_), _36417_rng,_36245_var_tokens);
	}
	return _36417_rng;
}



inline jule::Any _1ed0ee1cb_build_common_iter_kind(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _37846_tokens,_1e02c1d07_Token& _37864_err_tok) {
	jule::I32 _37917_brace_n = 0LL;
	{
		auto &expr = _37846_tokens;
		auto it = expr.begin();
		_iter_begin_201085181:;
		if (it != expr.end()) {
			jule::I32 _20108522a_i = it - expr.begin();
			_1e02c1d07_Token _2010854a0_tok = *it;
			{
				if (_2010854a0_tok._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _2010854a0_tok._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_20108646d:;
							{
								(_37917_brace_n)++;
								goto _iter_next_201085181;
							}
						}
						else {
							_case_begin_201085d0d:;
							{
								(_37917_brace_n)--;
							}
						}
						_match_end_20108613d:;
					}
				}
				if ((_37917_brace_n != 0LL)) {
					goto _iter_next_201085181;
				}
				{
					auto &_match_expr{ _2010854a0_tok._field_id };
					
					if (_match_expr == static_cast<jule::U32>(15LLU)) {
						_case_begin_201085b43:;
						{
							jule::Slice<_1e02c1d07_Token> _39725_decl_tokens = _37846_tokens.slice(0LL,_20108522a_i);
							jule::Slice<_1e02c1d07_Token> _39825_expr_tokens = _37846_tokens.slice((_20108522a_i + 1LL));
							return jule::Any(_1ed0edc47_build_range_iter_kind(&(*_self_), _39725_decl_tokens,_39825_expr_tokens,_2010854a0_tok));
						}
					}
					_match_end_201086e63:;
				}
			}
			_iter_next_201085181:;
			++it;
			_20108522a_i++;
			goto _iter_begin_201085181;
		}
		_iter_end_201085181:;
	}
	return jule::Any(_1ed0ebd33_build_while_iter_kind(&(*_self_), _37846_tokens));
}



inline jule::Any _1ed0ee583_build_common_iter(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _40540_tokens) {
	jule::Ptr<_1e02db816_Iter> _40617_it = jule::new_ptr<_1e02db816_Iter>(_1e02db816_Iter(_40540_tokens[0LL],jule::Any(),jule::Ptr<_1e02d9ddb_ScopeTree>()));
	_40540_tokens=_40540_tokens.slice(1LL);
	if ((_40540_tokens.len() == 0LL)) {
		_1ed0e9160_stop(&(*_self_));
		_1ed0e9ddb_push_err(&(*_self_), _40617_it.get()._field_token,jule::Str("body is not exist", 17));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	jule::Slice<_1e02c1d07_Token> _41617_expr_tokens = _1ed1080b4_get_block_expr(_40540_tokens);
	if ((_41617_expr_tokens.len() > 0LL)) {
		_40617_it.get()._field_kind=_1ed0ee1cb_build_common_iter_kind(&(*_self_), _41617_expr_tokens,_40617_it.get()._field_token);
	}
	jule::I32 _42017_i = _41617_expr_tokens.len();
	jule::Slice<_1e02c1d07_Token> _42117_scope_tokens = _1ed1189ed_range(_42017_i,jule::Str("{", 1),jule::Str("}", 1),_40540_tokens);
	if ((_42117_scope_tokens == nullptr)) {
		_1ed0e9160_stop(&(*_self_));
		_1ed0e9ddb_push_err(&(*_self_), _40617_it.get()._field_token,jule::Str("body is not exist", 17));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_42017_i < static_cast<jule::I32>(static_cast<jule::I32>(_40540_tokens.len()))) {
		_1ed0e9ddb_push_err(&(*_self_), _40540_tokens[_42017_i],jule::Str("invalid syntax", 14));
	}
	_40617_it.get()._field_scope=_1ed0ead65_build_scope(&(*_self_), _42117_scope_tokens,_40540_tokens[(_42017_i - 1LL)]);
	return jule::Any(_40617_it);
}



inline jule::Any _1ed0ee93a_buid_iter_st(_1ed0e8967_ScopeParser* _self_,jule::Ptr<_1ed0e7eb6_Stmt>& _43536_st) {
	if (_43536_st.get()._field_terminated) {
		return _1ed0eb97b_build_while_next_iter(&(*_self_), _43536_st);
	}
	return _1ed0ee583_build_common_iter(&(*_self_), _43536_st.get()._field_tokens);
}



inline jule::Any _1ed0eece2_build_break_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _44238_tokens) {
	jule::Ptr<_1e02dc817_BreakSt> _44317_brk = jule::new_ptr<_1e02dc817_BreakSt>(_1e02dc817_BreakSt(_44238_tokens[0LL],_1e02c1d07_Token()));
	if ((_44238_tokens.len() > 1LL)) {
		if (_44238_tokens[1LL]._field_id != static_cast<jule::U32>(2LLU)) {
			_1ed0e9ddb_push_err(&(*_self_), _44238_tokens[1LL],jule::Str("invalid syntax", 14));
			_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			_44317_brk.get()._field_label=_44238_tokens[1LL];
			if ((_44238_tokens.len() > 2LL)) {
				_1ed0e9ddb_push_err(&(*_self_), _44238_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_44317_brk);
}



inline jule::Any _1ed100199_build_cont_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _46037_tokens) {
	jule::Ptr<_1e02dcb7a_ContSt> _46117_cont = jule::new_ptr<_1e02dcb7a_ContSt>(_1e02dcb7a_ContSt(_46037_tokens[0LL],_1e02c1d07_Token()));
	if ((_46037_tokens.len() > 1LL)) {
		if (_46037_tokens[1LL]._field_id != static_cast<jule::U32>(2LLU)) {
			_1ed0e9ddb_push_err(&(*_self_), _46037_tokens[1LL],jule::Str("invalid syntax", 14));
			_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			_46117_cont.get()._field_label=_46037_tokens[1LL];
			if ((_46037_tokens.len() > 2LL)) {
				_1ed0e9ddb_push_err(&(*_self_), _46037_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_46117_cont);
}



inline jule::Ptr<_1e02dd087_If> _1ed100551_build_if(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _47832_tokens) {
	jule::Ptr<_1e02dd087_If> _47917_model = jule::new_ptr<_1e02dd087_If>(_1e02dd087_If(_47832_tokens[0LL],jule::Ptr<_1e0181a63_Expr>(),jule::Ptr<_1e02d9ddb_ScopeTree>()));
	_47832_tokens=_47832_tokens.slice(1LL);
	jule::Slice<_1e02c1d07_Token> _48317_expr_tokens = _1ed1080b4_get_block_expr(_47832_tokens);
	jule::I32 _48417_i = 0LL;
	if ((_48317_expr_tokens.len() == 0LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _47917_model.get()._field_token,jule::Str("expression missing", 18));
	} else {
		_48417_i=static_cast<jule::I32>(_48317_expr_tokens.len());
	}
	jule::Slice<_1e02c1d07_Token> _49017_scope_tokens = _1ed1189ed_range(_48417_i,jule::Str("{", 1),jule::Str("}", 1),_47832_tokens);
	if ((_49017_scope_tokens == nullptr)) {
		_1ed0e9160_stop(&(*_self_));
		_1ed0e9ddb_push_err(&(*_self_), _47917_model.get()._field_token,jule::Str("body is not exist", 17));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1e02c1d07_Token _49717_end = _47832_tokens[(_48417_i - 1LL)];
	if (_48417_i < static_cast<jule::I32>(static_cast<jule::I32>(_47832_tokens.len()))) {
		if (_47832_tokens[_48417_i]._field_id == static_cast<jule::U32>(17LLU)) {
			_47832_tokens=_47832_tokens.slice(_48417_i);
		} else {
			_1ed0e9ddb_push_err(&(*_self_), _47832_tokens[_48417_i],jule::Str("invalid syntax", 14));
			_47832_tokens=nullptr;
		}
	}
	_47917_model.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _48317_expr_tokens);
	_47917_model.get()._field_scope=_1ed0ead65_build_scope(&(*_self_), _49017_scope_tokens,_49717_end);
	return _47917_model;
}



inline jule::Ptr<_1e02dd3ea_Else> _1ed100908_build_else(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _51134_tokens) {
	jule::Ptr<_1e02dd3ea_Else> _51217_els = jule::new_ptr<_1e02dd3ea_Else>(_1e02dd3ea_Else(_51134_tokens[0LL],jule::Ptr<_1e02d9ddb_ScopeTree>()));
	_51134_tokens=_51134_tokens.slice(1LL);
	jule::I32 _51617_i = 0LL;
	jule::Slice<_1e02c1d07_Token> _51717_scope_tokens = _1ed1189ed_range(_51617_i,jule::Str("{", 1),jule::Str("}", 1),_51134_tokens);
	if ((_51717_scope_tokens == nullptr)) {
		if (_51617_i < static_cast<jule::I32>(static_cast<jule::I32>(_51134_tokens.len()))) {
			_1ed0e9ddb_push_err(&(*_self_), _51217_els.get()._field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			_1ed0e9160_stop(&(*_self_));
			_1ed0e9ddb_push_err(&(*_self_), _51217_els.get()._field_token,jule::Str("body is not exist", 17));
			_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	if (_51617_i < static_cast<jule::I32>(static_cast<jule::I32>(_51134_tokens.len()))) {
		_1ed0e9ddb_push_err(&(*_self_), _51134_tokens[_51617_i],jule::Str("invalid syntax", 14));
	}
	_51217_els.get()._field_scope=_1ed0ead65_build_scope(&(*_self_), _51717_scope_tokens,_51134_tokens[(_51617_i - 1LL)]);
	return _51217_els;
}



inline jule::Any _1ed100cb0_build_if_else_chain(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _53542_tokens) {
	jule::Ptr<_1e02dd807_Conditional> _53617_chain = jule::new_ptr<_1e02dd807_Conditional>(_1e02dd807_Conditional(_1ed100551_build_if(&(*_self_), _53542_tokens),jule::Slice<jule::Ptr<_1e02dd087_If>>(),jule::Ptr<_1e02dd3ea_Else>()));
	if ((_53617_chain.get()._field_head == nullptr)) {
		return jule::Any(nullptr);
	}
	while ((_53542_tokens.len() != 0LL)) {
		{
			if (_53542_tokens[0LL]._field_id != static_cast<jule::U32>(17LLU)) {
				goto _iter_end_2010aaa7a;
			}
			if ((_53542_tokens.len() > 1LL) && (_53542_tokens[1LL]._field_id == static_cast<jule::U32>(16LLU))) {
				_53542_tokens=_53542_tokens.slice(1LL);
				jule::Ptr<_1e02dd087_If> _54825_elif = _1ed100551_build_if(&(*_self_), _53542_tokens);
				_53617_chain.get()._field_tail = jule::alloc_for_append(_53617_chain.get()._field_tail,1);_53617_chain.get()._field_tail.__push(_54825_elif);
				goto _iter_next_2010aaa7a;
			}
			_53617_chain.get()._field_default=_1ed100908_build_else(&(*_self_), _53542_tokens);
			goto _iter_end_2010aaa7a;
		}
	_iter_next_2010aaa7a:;
	}
	_iter_end_2010aaa7a:;
	return jule::Any(_53617_chain);
}



inline jule::Any _1ed101167_build_co_call_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _55839_tokens) {
	jule::Ptr<_1e0182844_CoExpr> _55917_c = jule::new_ptr<_1e0182844_CoExpr>(_1e0182844_CoExpr(_55839_tokens[0LL],jule::Ptr<_1e0181a63_Expr>()));
	_55839_tokens=_55839_tokens.slice(1LL);
	_55917_c.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _55839_tokens);
	return jule::Any(_55917_c);
}



inline jule::Any _1ed10151e_build_goto_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _56737_tokens) {
	jule::Ptr<_1e02d955b_GotoSt> _56817_gt = jule::new_ptr<_1e02d955b_GotoSt>(_1e02d955b_GotoSt(_56737_tokens[0LL],_1e02c1d07_Token()));
	if ((_56737_tokens.len() == 1LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _56817_gt.get()._field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if ((_56737_tokens.len() > 2LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _56737_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_1e02c1d07_Token _57717_ident_token = _56737_tokens[1LL];
	if (_57717_ident_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed0e9ddb_push_err(&(*_self_), _57717_ident_token,jule::Str("invalid syntax", 14));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return jule::Any(_56817_gt);
	}
	_56817_gt.get()._field_label=_57717_ident_token;
	return jule::Any(_56817_gt);
}



inline jule::Any _1ed1018c6_build_fall_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _58737_tokens) {
	jule::Ptr<_1e02d977b_FallSt> _58817_fll = jule::new_ptr<_1e02d977b_FallSt>(_1e02d977b_FallSt(_58737_tokens[0LL]));
	if ((_58737_tokens.len() > 1LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _58737_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_58817_fll);
}



inline jule::Any _1ed101c7d_build_type_alias_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _59743_tokens) {
	jule::Ptr<_1e02dde01_TypeAliasDecl> _59817_tad = _1ed11d86b_build_type_alias_decl((*_self_)._field_p, _59743_tokens);
	_59817_tad.get()._field_scope=(*_self_)._field_s;
	return jule::Any(_59817_tad);
}



inline void _1ed102333_push_case_expr(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _60337_tokens,_1e02c1d07_Token _60358_token,jule::Bool _6049_type_match,jule::Slice<jule::Ptr<_1e0181a63_Expr>>& _60432_exprs) {
	if ((_60337_tokens.len() == 0LL)) {
		return;
	}
	if (_6049_type_match) {
		jule::I32 _61021_i = 0LL;
		jule::Ptr<_1e01c3db3_TypeDecl> _61122_t;
		jule::Bool _61125_ok;
		std::tie(_61122_t,_61125_ok) = _1ed11d4b4_build_type((*_self_)._field_p, _60337_tokens,(&(_61021_i)),true);
		if (_61125_ok) {
			_60432_exprs = jule::alloc_for_append(_60432_exprs,1);_60432_exprs.__push(jule::new_ptr<_1e0181a63_Expr>(_1e0181a63_Expr(_60337_tokens[0LL],_1e02c1d07_Token(),jule::Bool(),jule::Any(jule::Any(_61122_t)))));
			if (_61021_i < static_cast<jule::I32>(static_cast<jule::I32>(_60337_tokens.len()))) {
				_1ed0e9ddb_push_err(&(*_self_), _60337_tokens[_61021_i],jule::Str("invalid syntax", 14));
			}
		}
		return;
	}
	_60432_exprs = jule::alloc_for_append(_60432_exprs,1);_60432_exprs.__push(_1ed11bc87_build_expr((*_self_)._field_p, _60337_tokens));
}



inline jule::Slice<jule::Ptr<_1e0181a63_Expr>> _1ed1027b7_build_case_exprs(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _62640_tokens,jule::Bool _62657_type_match) {
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _62717_exprs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>::alloc(0LL,1LL);
	jule::I32 _62917_brace_n = 0LL;
	jule::I32 _63017_j = 0LL;
	{
		auto &expr = _62640_tokens;
		auto it = expr.begin();
		_iter_begin_2010c074e:;
		if (it != expr.end()) {
			jule::I32 _2010c1398_i = it - expr.begin();
			_1e02c1d07_Token _2010c160c_tok = *it;
			{
				if (_2010c160c_tok._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _2010c160c_tok._field_kind };
						
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_2010c25db:;
							{
								(_62917_brace_n)++;
							}
						}
						else {
							_case_begin_2010c1e7b:;
							{
								(_62917_brace_n)--;
							}
						}
						_match_end_2010c22ab:;
					}
					goto _iter_next_2010c074e;
				} else if ((_62917_brace_n != 0LL)) {
					goto _iter_next_2010c074e;
				}
				{
					
					if ((_2010c160c_tok._field_id == static_cast<jule::U32>(7LLU)) && (_2010c160c_tok._field_kind == jule::Str("|", 1))) {
						_case_begin_2010c30d1:;
						{
							jule::Slice<_1e02c1d07_Token> _64721_expr_tokens = _62640_tokens.slice(_63017_j,_2010c1398_i);
							if ((_64721_expr_tokens.len() == 0LL)) {
								_1ed0e9ddb_push_err(&(*_self_), _2010c160c_tok,jule::Str("expression missing", 18));
							} else {
								_1ed102333_push_case_expr(&(*_self_), _62640_tokens.slice(_63017_j,_2010c1398_i),_2010c160c_tok,_62657_type_match,_62717_exprs);
							}
							_63017_j=static_cast<jule::I32>((_2010c1398_i + 1LL));
						}
					}
					else if (_2010c160c_tok._field_id == static_cast<jule::U32>(11LLU)) {
						_case_begin_2010c31d0:;
						{
							_1ed102333_push_case_expr(&(*_self_), _62640_tokens.slice(_63017_j,_2010c1398_i),_2010c160c_tok,_62657_type_match,_62717_exprs);
							_62640_tokens=_62640_tokens.slice((_2010c1398_i + 1LL));
							return _62717_exprs;
						}
					}
					_match_end_2010c282d:;
				}
			}
			_iter_next_2010c074e:;
			++it;
			_2010c1398_i++;
			goto _iter_begin_2010c074e;
		}
		_iter_end_2010c074e:;
	}
	_1ed0e9ddb_push_err(&(*_self_), _62640_tokens[0LL],jule::Str("invalid syntax", 14));
	_62640_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed102b6e_build_case_scope(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _66540_tokens) {
	jule::I32 _66617_n = 0LL;
	for (;;) {
		{
			jule::I32 _66821_i = 0LL;
			jule::Slice<_1e02c1d07_Token> _66922_next;
			std::tie(_66922_next,std::ignore) = _1ed0e7b20_skip_st(_66821_i,_66540_tokens.slice(_66617_n));
			if ((_66922_next.len() == 0LL)) {
				goto _iter_end_2010c834a;
			}
			_1e02c1d07_Token _67317_tok = _66922_next[0LL];
			if ((_67317_tok._field_id != static_cast<jule::U32>(7LLU)) || (_67317_tok._field_kind != jule::Str("|", 1))) {
				_66617_n+=_66821_i;
				goto _iter_next_2010c834a;
			}
			jule::Slice<_1e02c1d07_Token> _67821_scope_tokens = _66540_tokens.slice(0LL,_66617_n);
			jule::Ptr<_1e02d9ddb_ScopeTree> _67921_scope = _1ed0ead65_build_scope(&(*_self_), _67821_scope_tokens,_66540_tokens[_66617_n]);
			_66540_tokens=_66540_tokens.slice(_66617_n);
			return _67921_scope;
		}
	_iter_next_2010c834a:;
	}
	_iter_end_2010c834a:;
	_1e02c1d07_Token _68317_end = _1e02c1d07_Token();
	if ((_66540_tokens.len() > 0LL)) {
		_68317_end=_66540_tokens[(_66540_tokens.len() - 1LL)];
	}
	jule::Ptr<_1e02d9ddb_ScopeTree> _68717_scope = _1ed0ead65_build_scope(&(*_self_), _66540_tokens,_68317_end);
	_66540_tokens=nullptr;
	return _68717_scope;
}



inline std::tuple<jule::Ptr<_1e02de30d_Case>,jule::Bool> _1ed103103_build_case(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _69234_tokens,jule::Bool _69251_type_match) {
	jule::Ptr<_1e02de30d_Case> _69317_c = jule::new_ptr<_1e02de30d_Case>(_1e02de30d_Case(_69234_tokens[0LL],jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Slice<jule::Ptr<_1e0181a63_Expr>>()));
	_69234_tokens=_69234_tokens.slice(1LL);
	_69317_c.get()._field_exprs=_1ed1027b7_build_case_exprs(&(*_self_), _69234_tokens,_69251_type_match);
	_69317_c.get()._field_scope=_1ed102b6e_build_case_scope(&(*_self_), _69234_tokens);
	jule::Bool _69913_is_default = (_69317_c.get()._field_exprs.len() == 0LL);
	return std::make_tuple(_69317_c,_69913_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_1e02de30d_Case>>,jule::Ptr<_1e02dd3ea_Else>> _1ed103587_build_cases(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _70334_tokens,jule::Bool _70351_type_match) {
	jule::Slice<jule::Ptr<_1e02de30d_Case>> _70417_cases = nullptr;
	jule::Ptr<_1e02dd3ea_Else> _70517_def = nullptr;
	jule::Bool _70617_def_not_last = false;
	while ((_70334_tokens.len() > 0LL)) {
		{
			_1e02c1d07_Token _70821_tok = _70334_tokens[0LL];
			if ((_70821_tok._field_id != static_cast<jule::U32>(7LLU)) || (_70821_tok._field_kind != jule::Str("|", 1))) {
				_1ed0e9ddb_push_err(&(*_self_), _70821_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_2010d2530;
			}
			jule::Ptr<_1e02de30d_Case> _71322_c;
			jule::Bool _71325_is_default;
			std::tie(_71322_c,_71325_is_default) = _1ed103103_build_case(&(*_self_), _70334_tokens,_70351_type_match);
			if (_71325_is_default) {
				_71322_c.get()._field_token=_70821_tok;
				if ((_70517_def == nullptr)) {
					_70517_def=jule::new_ptr<_1e02dd3ea_Else>(_1e02dd3ea_Else(_71322_c.get()._field_token,_71322_c.get()._field_scope));
				} else {
					_1ed0e9ddb_push_err(&(*_self_), _70821_tok,jule::Str("invalid syntax", 14));
				}
			} else {
				_70617_def_not_last=_70617_def_not_last || (_70517_def != nullptr);
				_70417_cases = jule::alloc_for_append(_70417_cases,1);_70417_cases.__push(_71322_c);
			}
		}
	_iter_next_2010d2530:;
	}
	_iter_end_2010d2530:;
	if (_70617_def_not_last) {
		_1ed0e9ddb_push_err(&(*_self_), _70517_def.get()._field_token,jule::Str("default case should be last case", 32));
	}
	return std::make_tuple(_70417_cases,_70517_def);
}



inline jule::Ptr<_1e02de907_MatchCase> _1ed10393e_build_match_case(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _73739_tokens) {
	jule::Ptr<_1e02de907_MatchCase> _73817_m = jule::new_ptr<_1e02de907_MatchCase>(_1e02de907_MatchCase(_73739_tokens[0LL],_1e02c1d07_Token(),jule::Bool(),jule::Ptr<_1e0181a63_Expr>(),jule::Slice<jule::Ptr<_1e02de30d_Case>>(),jule::Ptr<_1e02dd3ea_Else>()));
	_73739_tokens=_73739_tokens.slice(1LL);
	if ((_73739_tokens.len() > 0LL) && (_73739_tokens[0LL]._field_id == static_cast<jule::U32>(10LLU))) {
		_73817_m.get()._field_type_match=true;
		_73739_tokens=_73739_tokens.slice(1LL);
	}
	jule::Slice<_1e02c1d07_Token> _74817_expr_tokens = _1ed1080b4_get_block_expr(_73739_tokens);
	if ((_74817_expr_tokens.len() > 0LL)) {
		_73817_m.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _74817_expr_tokens);
	} else if (_73817_m.get()._field_type_match) {
		_1ed0e9ddb_push_err(&(*_self_), _73817_m.get()._field_token,jule::Str("expression missing", 18));
	}
	jule::I32 _75517_i = _74817_expr_tokens.len();
	jule::Slice<_1e02c1d07_Token> _75617_block_toks = _1ed1189ed_range(_75517_i,jule::Str("{", 1),jule::Str("}", 1),_73739_tokens);
	if ((_75617_block_toks == nullptr)) {
		_1ed0e9160_stop(&(*_self_));
		_1ed0e9ddb_push_err(&(*_self_), _73817_m.get()._field_token,jule::Str("body is not exist", 17));
		_1ed0ea2d7_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_75517_i < static_cast<jule::I32>(static_cast<jule::I32>(_73739_tokens.len()))) {
		_1ed0e9ddb_push_err(&(*_self_), _73739_tokens[_75517_i],jule::Str("invalid syntax", 14));
	}
	_73817_m.get()._field_end=_73739_tokens[(_75517_i - 1LL)];
	std::tie(_73817_m.get()._field_cases,_73817_m.get()._field_default) = _1ed103587_build_cases(&(*_self_), _75617_block_toks,_73817_m.get()._field_type_match);
	return _73817_m;
}



inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed103ce6_build_scope_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _77037_tokens) {
	jule::Bool _77117_is_unsafe = false;
	jule::Bool _77217_is_deferred = false;
	_1e02c1d07_Token _77317_token = _77037_tokens[0LL];
	if (_77317_token._field_id == static_cast<jule::U32>(35LLU)) {
		_77117_is_unsafe=true;
		_77037_tokens=_77037_tokens.slice(1LL);
		if ((_77037_tokens.len() == 0LL)) {
			_1ed0e9ddb_push_err(&(*_self_), _77317_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
		_77317_token=_77037_tokens[0LL];
		if (_77317_token._field_id == static_cast<jule::U32>(37LLU)) {
			_77217_is_deferred=true;
			_77037_tokens=_77037_tokens.slice(1LL);
			if ((_77037_tokens.len() == 0LL)) {
				_1ed0e9ddb_push_err(&(*_self_), _77317_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
	} else if (_77317_token._field_id == static_cast<jule::U32>(37LLU)) {
		_77217_is_deferred=true;
		_77037_tokens=_77037_tokens.slice(1LL);
		if ((_77037_tokens.len() == 0LL)) {
			_1ed0e9ddb_push_err(&(*_self_), _77317_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
	}
	jule::I32 _79917_i = 0LL;
	jule::Slice<_1e02c1d07_Token> _80017_scope_tokens = _1ed1189ed_range(_79917_i,jule::Str("{", 1),jule::Str("}", 1),_77037_tokens);
	if ((_80017_scope_tokens == nullptr)) {
		_1ed0e9ddb_push_err(&(*_self_), _77317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if (_79917_i < static_cast<jule::I32>(static_cast<jule::I32>(_77037_tokens.len()))) {
		_1ed0e9ddb_push_err(&(*_self_), _77037_tokens[_79917_i],jule::Str("invalid syntax", 14));
	}
	jule::Ptr<_1e02d9ddb_ScopeTree> _80717_scope = _1ed0ead65_build_scope(&(*_self_), _80017_scope_tokens,_77037_tokens[(_79917_i - 1LL)]);
	_80717_scope.get()._field_unsafety=_77117_is_unsafe;
	_80717_scope.get()._field_deferred=_77217_is_deferred;
	return _80717_scope;
}



inline jule::Ptr<_1e02d933b_LabelSt> _1ed10419d_build_label_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _81338_tokens) {
	jule::Ptr<_1e02d933b_LabelSt> _81417_lbl = jule::new_ptr<_1e02d933b_LabelSt>(_1e02d933b_LabelSt(_81338_tokens[0LL],_81338_tokens[0LL]._field_kind));
	if ((_81338_tokens.len() > 2LL)) {
		_81338_tokens=_81338_tokens.slice(2LL);
		_1ed0ea606_insert_as_next(&(*_self_), _81338_tokens);
	}
	return _81417_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _1ed104555_build_id_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _82835_tokens) {
	jule::Bool _82864_ok = jule::Bool();
	if ((_82835_tokens.len() == 1LL)) {
		return std::make_tuple(jule::Any(),_82864_ok);
	}
	_1e02c1d07_Token _83317_token = _82835_tokens[1LL];
	{
		auto &_match_expr{ _83317_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(11LLU)) {
			_case_begin_2010ed0c8:;
			{
				_82864_ok = true;
				return std::make_tuple(jule::Any(_1ed10419d_build_label_st(&(*_self_), _82835_tokens)),_82864_ok);
			}
		}
		_match_end_2010edd54:;
	}
	return std::make_tuple(jule::Any(),_82864_ok);
}



inline jule::Ptr<_1ed116754_AssignInfo> _1ed10490c_build_assign_info(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _84241_tokens) {
	jule::Ptr<_1ed116754_AssignInfo> _84317_info = jule::new_ptr<_1ed116754_AssignInfo>(_1ed116754_AssignInfo(jule::Slice<_1e02c1d07_Token>(),jule::Slice<_1e02c1d07_Token>(),_1e02c1d07_Token(),true));
	jule::I32 _84617_brace_n = 0LL;
	{
		auto &expr = _84241_tokens;
		auto it = expr.begin();
		_iter_begin_201101142:;
		if (it != expr.end()) {
			jule::I32 _2011011db_i = it - expr.begin();
			_1e02c1d07_Token _201101461_token = *it;
			{
				if (_201101461_token._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _201101461_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_201102473:;
							{
								(_84617_brace_n)++;
							}
						}
						else {
							_case_begin_201101d13:;
							{
								(_84617_brace_n)--;
							}
						}
						_match_end_201102143:;
					}
				}
				{
					
					if ((_84617_brace_n > 0LL)) {
						_case_begin_2011026c6:;
						{
							goto _iter_next_201101142;
						}
					}
					else if (_201101461_token._field_id != static_cast<jule::U32>(7LLU)) {
						_case_begin_201102a6c:;
						{
							goto _iter_next_201101142;
						}
					}
					else if ((!(_1e02c73b2_is_assign_op(_201101461_token._field_kind)))) {
						_case_begin_201102ae4:;
						{
							goto _iter_next_201101142;
						}
					}
					_match_end_201102d47:;
				}
				_84317_info.get()._field_l=_84241_tokens.slice(0LL,_2011011db_i);
				if ((_84317_info.get()._field_l.len() == 0LL)) {
					_84317_info.get()._field_ok=false;
				}
				_84317_info.get()._field_setter=_201101461_token;
				if ((_2011011db_i + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_84241_tokens.len()))) {
					_84317_info.get()._field_r=nullptr;
					_84317_info.get()._field_ok=_1e02c70a4_is_postfix_op(_84317_info.get()._field_setter._field_kind);
					goto _iter_end_201101142;
				}
				_84317_info.get()._field_r=_84241_tokens.slice((_2011011db_i + 1LL));
				if (_1e02c70a4_is_postfix_op(_84317_info.get()._field_setter._field_kind)) {
					if ((_84317_info.get()._field_r.len() > 0LL)) {
						_1ed0e9ddb_push_err(&(*_self_), _84317_info.get()._field_r[0LL],jule::Str("invalid syntax", 14));
						_84317_info.get()._field_r=nullptr;
					}
				}
				goto _iter_end_201101142;
			}
			_iter_next_201101142:;
			++it;
			_2011011db_i++;
			goto _iter_begin_201101142;
		}
		_iter_end_201101142:;
	}
	return _84317_info;
}



inline jule::Ptr<_1e02d999b_AssignLeft> _1ed104cb4_build_assign_l(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _89038_tokens) {
	jule::Ptr<_1e02d999b_AssignLeft> _89117_l = jule::new_ptr<_1e02d999b_AssignLeft>(_1e02d999b_AssignLeft(_89038_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ptr<_1e0181a63_Expr>()));
	if (_89038_tokens[0LL]._field_id == static_cast<jule::U32>(2LLU)) {
		_89117_l.get()._field_ident=_89117_l.get()._field_token._field_kind;
	}
	_89117_l.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _89038_tokens);
	return _89117_l;
}



inline jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>> _1ed10516b_build_assign_ls(_1ed0e8967_ScopeParser* _self_,jule::Slice<jule::Slice<_1e02c1d07_Token>>& _90339_parts) {
	jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>> _90417_lefts = nullptr;
	{
		auto &expr = _90339_parts;
		auto it = expr.begin();
		_iter_begin_20110b526:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _20110b658_part = *it;
			{
				jule::Ptr<_1e02d999b_AssignLeft> _90621_l = _1ed104cb4_build_assign_l(&(*_self_), _20110b658_part);
				_90417_lefts = jule::alloc_for_append(_90417_lefts,1);_90417_lefts.__push(_90621_l);
			}
			_iter_next_20110b526:;
			++it;
			goto _iter_begin_20110b526;
		}
		_iter_end_20110b526:;
	}
	return _90417_lefts;
}



inline std::tuple<jule::Ptr<_1e02d9bbb_AssignSt>,jule::Bool> _1ed105523_build_plain_assign(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _91342_tokens) {
	jule::Ptr<_1ed116754_AssignInfo> _91417_info = _1ed10490c_build_assign_info(&(*_self_), _91342_tokens);
	if ((!(_91417_info.get()._field_ok))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_1e02d9bbb_AssignSt> _91917_assign = jule::new_ptr<_1e02d9bbb_AssignSt>(_1e02d9bbb_AssignSt(jule::Bool(),_91417_info.get()._field_setter,jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>>(),jule::Ptr<_1e0181a63_Expr>()));
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _92318_parts;
	jule::Slice<_208de2238_Log> _92325_errs;
	std::tie(_92318_parts,_92325_errs) = _1ed119317_parts(_91417_info.get()._field_l,static_cast<jule::U32>(8LLU),true);
	if ((_92325_errs.len() > 0LL)) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_92325_errs);
		return std::make_tuple(nullptr,false);
	}
	_91917_assign.get()._field_left=_1ed10516b_build_assign_ls(&(*_self_), _92318_parts);
	if ((_91417_info.get()._field_r != nullptr)) {
		_91917_assign.get()._field_right=_1ed11bc87_build_expr((*_self_)._field_p, _91417_info.get()._field_r);
	}
	return std::make_tuple(_91917_assign,true);
}



inline std::tuple<jule::Ptr<_1e02d9bbb_AssignSt>,jule::Bool> _1ed1058ca_build_decl_assign(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token> _93740_tokens) {
	if ((_93740_tokens.len() < 1LL)) {
		return std::make_tuple(nullptr,false);
	}
	_93740_tokens=_93740_tokens.slice(1LL);
	_1e02c1d07_Token _94317_token = _93740_tokens[0LL];
	if ((_94317_token._field_id != static_cast<jule::U32>(3LLU)) || (_94317_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_1e02d9bbb_AssignSt> _94817_assign = jule::new_ptr<_1e02d9bbb_AssignSt>(_1e02d9bbb_AssignSt(true,_1e02c1d07_Token(),jule::Slice<jule::Ptr<_1e02d999b_AssignLeft>>(),jule::Ptr<_1e0181a63_Expr>()));
	jule::I32 _95217_i = 0LL;
	jule::Slice<_1e02c1d07_Token> _95317_rang = _1ed1189ed_range(_95217_i,jule::Str("(", 1),jule::Str(")", 1),_93740_tokens);
	if ((_95317_rang == nullptr)) {
		_1ed0e9ddb_push_err(&(*_self_), _94317_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if ((_95217_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_93740_tokens.len()))) {
		_94817_assign.get()._field_setter=_93740_tokens[_95217_i];
		(_95217_i)++;
		jule::Slice<_1e02c1d07_Token> _96021_expr_tokens = _93740_tokens.slice(_95217_i);
		_94817_assign.get()._field_right=_1ed11bc87_build_expr((*_self_)._field_p, _96021_expr_tokens);
	}
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _96518_parts;
	jule::Slice<_208de2238_Log> _96525_errs;
	std::tie(_96518_parts,_96525_errs) = _1ed119317_parts(_95317_rang,static_cast<jule::U32>(8LLU),true);
	if ((_96525_errs.len() > 0LL)) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_96525_errs);
		return std::make_tuple(nullptr,false);
	}
	{
		auto &expr = _96518_parts;
		auto it = expr.begin();
		_iter_begin_20111a029:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _20111a37b_part = *it;
			{
				jule::Bool _97221_is_mut = false;
				jule::Bool _97321_is_ref = false;
				_94317_token=_20111a37b_part[0LL];
				if (_94317_token._field_id == static_cast<jule::U32>(36LLU)) {
					_97221_is_mut=true;
					_20111a37b_part=_20111a37b_part.slice(1LL);
					if ((_20111a37b_part.len() == 0LL)) {
						_1ed0e9ddb_push_err(&(*_self_), _94317_token,jule::Str("invalid syntax", 14));
						goto _iter_next_20111a029;
					}
				}
				if ((_20111a37b_part[0LL]._field_id == static_cast<jule::U32>(7LLU)) && (_20111a37b_part[0LL]._field_kind == jule::Str("&", 1))) {
					_97321_is_ref=true;
					_20111a37b_part=_20111a37b_part.slice(1LL);
					if ((_20111a37b_part.len() == 0LL)) {
						_1ed0e9ddb_push_err(&(*_self_), _94317_token,jule::Str("invalid syntax", 14));
						goto _iter_next_20111a029;
					}
				}
				if (((_20111a37b_part[0LL]._field_id != static_cast<jule::U32>(2LLU)) && (_20111a37b_part[0LL]._field_id != static_cast<jule::U32>(3LLU))) && (_20111a37b_part[0LL]._field_kind != jule::Str("(", 1))) {
					_1ed0e9ddb_push_err(&(*_self_), _94317_token,jule::Str("invalid syntax", 14));
					goto _iter_next_20111a029;
				}
				jule::Ptr<_1e02d999b_AssignLeft> _100121_l = _1ed104cb4_build_assign_l(&(*_self_), _20111a37b_part);
				_100121_l.get()._field_mutable=_97221_is_mut;
				_100121_l.get()._field_reference=_97321_is_ref;
				_94817_assign.get()._field_left = jule::alloc_for_append(_94817_assign.get()._field_left,1);_94817_assign.get()._field_left.__push(_100121_l);
			}
			_iter_next_20111a029:;
			++it;
			goto _iter_begin_20111a029;
		}
		_iter_end_20111a029:;
	}
	return std::make_tuple(_94817_assign,true);
}



inline std::tuple<jule::Ptr<_1e02d9bbb_AssignSt>,jule::Bool> _1ed105c82_build_assign_st(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _101039_tokens) {
	jule::Ptr<_1e02d9bbb_AssignSt> _101058_st = jule::Ptr<_1e02d9bbb_AssignSt>();
	jule::Bool _101073_ok = jule::Bool();
	if ((!(_1ed116b61_check_assign_tokens(_101039_tokens)))) {
		_101058_st = nullptr;
		_101073_ok = false;
		return std::make_tuple(_101058_st,_101073_ok);
	}
	{
		auto &_match_expr{ _101039_tokens[0LL]._field_id };
		
		if (_match_expr == static_cast<jule::U32>(34LLU)) {
			_case_begin_20112a424:;
			{
				std::tie(_101058_st,_101073_ok) = _1ed1058ca_build_decl_assign(&(*_self_), _101039_tokens);
			}
		}
		else {
			_case_begin_20112938a:;
			{
				std::tie(_101058_st,_101073_ok) = _1ed105523_build_plain_assign(&(*_self_), _101039_tokens);
			}
		}
		_match_end_201129a94:;
	}
	return std::make_tuple(_101058_st,_101073_ok);
}



inline jule::Any _1ed106139_build_use_expr(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _102538_tokens) {
	if ((_102538_tokens.len() == 1LL)) {
		_1ed0e9ddb_push_err(&(*_self_), _102538_tokens[0LL],jule::Str("expression missing", 18));
		return jule::Any(nullptr);
	}
	jule::Ptr<_1e0181c83_UseExpr> _103117_ue = jule::new_ptr<_1e0181c83_UseExpr>(_1e0181c83_UseExpr(_102538_tokens[0LL],jule::Ptr<_1e0181a63_Expr>()));
	_102538_tokens=_102538_tokens.slice(1LL);
	_103117_ue.get()._field_expr=_1ed11bc87_build_expr((*_self_)._field_p, _102538_tokens);
	return jule::Any(_103117_ue);
}



inline jule::Any _1ed1064e1_build_st(_1ed0e8967_ScopeParser* _self_,jule::Ptr<_1ed0e7eb6_Stmt>& _104032_st) {
	_1e02c1d07_Token _104117_token = _104032_st.get()._field_tokens[0LL];
	if (_104117_token._field_id == static_cast<jule::U32>(2LLU)) {
		jule::Any _104322_s;
		jule::Bool _104325_ok;
		std::tie(_104322_s,_104325_ok) = _1ed104555_build_id_st(&(*_self_), _104032_st.get()._field_tokens);
		if (_104325_ok) {
			return _104322_s;
		}
	}
	jule::Ptr<_1e02d9bbb_AssignSt> _104918_s;
	jule::Bool _104921_ok;
	std::tie(_104918_s,_104921_ok) = _1ed105c82_build_assign_st(&(*_self_), _104032_st.get()._field_tokens);
	if (_104921_ok) {
		return jule::Any(_104918_s);
	}
	{
		auto &_match_expr{ _104117_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(19LLU)) {
			_case_begin_201130c87:;
			{
				return _1ed106139_build_use_expr(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(38LLU) || _match_expr == static_cast<jule::U32>(9LLU) || _match_expr == static_cast<jule::U32>(34LLU) || _match_expr == static_cast<jule::U32>(36LLU)) {
			_case_begin_2011316d3:;
			{
				return _1ed0eb21c_build_var_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(4LLU)) {
			_case_begin_20113121b:;
			{
				return _1ed0eb5c4_build_ret_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(12LLU)) {
			_case_begin_201131282:;
			{
				return _1ed0ee93a_buid_iter_st(&(*_self_), _104032_st);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(13LLU)) {
			_case_begin_2011312e8:;
			{
				return _1ed0eece2_build_break_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(14LLU)) {
			_case_begin_201131903:;
			{
				return _1ed100199_build_cont_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(16LLU)) {
			_case_begin_201131969:;
			{
				return _1ed100cb0_build_if_else_chain(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(26LLU)) {
			_case_begin_2011319d0:;
			{
				return _1ed101167_build_co_call_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(22LLU)) {
			_case_begin_201131a46:;
			{
				return _1ed10151e_build_goto_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(32LLU)) {
			_case_begin_201131aac:;
			{
				return _1ed1018c6_build_fall_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(10LLU)) {
			_case_begin_201131b23:;
			{
				return _1ed101c7d_build_type_alias_st(&(*_self_), _104032_st.get()._field_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(27LLU)) {
			_case_begin_201131b9a:;
			{
				return jule::Any(_1ed10393e_build_match_case(&(*_self_), _104032_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(35LLU) || _match_expr == static_cast<jule::U32>(37LLU)) {
			_case_begin_201131c22:;
			{
				return jule::Any(_1ed103ce6_build_scope_st(&(*_self_), _104032_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_201131c99:;
			{
				if ((_104117_token._field_kind == jule::Str("{", 1))) {
					return jule::Any(_1ed103ce6_build_scope_st(&(*_self_), _104032_st.get()._field_tokens));
				}
			}
		}
		_match_end_201131419:;
	}
	jule::Ptr<_1e0181a63_Expr> _109017_expr = _1ed11bc87_build_expr((*_self_)._field_p, _104032_st.get()._field_tokens);
	if ((_109017_expr != nullptr)) {
		return jule::Any(_109017_expr);
	}
	_1ed0e9ddb_push_err(&(*_self_), _104117_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _1ed1068dc_build(_1ed0e8967_ScopeParser* _self_,jule::Slice<_1e02c1d07_Token>& _109829_tokens,jule::Ptr<_1e02d9ddb_ScopeTree>& _109851_s) {
	if ((_109851_s == nullptr)) {
		return;
	}
	(*_self_)._field_stmts=_1ed0e83c3_split_stmts(_109829_tokens);
	(*_self_)._field_pos=-1LL;
	(*_self_)._field_s=_109851_s;
	while ((!(_1ed0e99e0_is_last_st(&(*_self_)))) && (!(_1ed0e9715_finished(&(*_self_))))) {
		{
			jule::Ptr<_1ed0e7eb6_Stmt> _110721_st = _1ed0ea8d1_next(&(*_self_));
			jule::Any _110821_data = _1ed1064e1_build_st(&(*_self_), _110721_st);
			if (_110821_data != jule::Any(jule::Any(nullptr))) {
				(*_self_)._field_s.get()._field_stmts = jule::alloc_for_append((*_self_)._field_s.get()._field_stmts,1);(*_self_)._field_s.get()._field_stmts.__push(_1e01be3a8_Node(_110721_st.get()._field_tokens[0LL],_110821_data));
			}
			if (_1ed0e943a_stopped(&(*_self_))) {
				goto _iter_end_20113c524;
			}
		}
	_iter_next_20113c524:;
	}
	_iter_end_20113c524:;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed0e8967_ScopeParser _Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed107888_CallData _Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _1ed1099de_push_err(_1ed1090d7_ExprBuilder* _self_,_1e02c1d07_Token _22327_token,jule::Str _22341_fmt,jule::Slice<jule::Any> _22354_args) {
	_1ed11b4d4_push_err((*_self_)._field_p.ptr(), _22327_token,_22341_fmt,_22354_args);
}



inline void _1ed109dda_push_suggestion(_1ed1090d7_ExprBuilder* _self_,jule::Str _22834_fmt,jule::Slice<jule::Any> _22847_args) {
	_1ed11b8d0_push_suggestion((*_self_)._field_p.ptr(), _22834_fmt,_22847_args);
}



inline jule::Ptr<_1e0181ea3_TupleExpr> _1ed10a292_build_tuple(_1ed1090d7_ExprBuilder* _self_,jule::Slice<jule::Slice<_1e02c1d07_Token>>& _23235_parts) {
	jule::Ptr<_1e0181ea3_TupleExpr> _23317_tuple = jule::new_ptr<_1e0181ea3_TupleExpr>(_1e0181ea3_TupleExpr(jule::Slice<jule::Ptr<_1e0181a63_Expr>>::alloc(0LL,static_cast<jule::I32>(_23235_parts.len()))));
	{
		auto &expr = _23235_parts;
		auto it = expr.begin();
		_iter_begin_201144075:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _20114474b_part = *it;
			{
				_23317_tuple.get()._field_expr = jule::alloc_for_append(_23317_tuple.get()._field_expr,1);_23317_tuple.get()._field_expr.__push(_1ed115a72_build_from_tokens(&(*_self_), _20114474b_part));
			}
			_iter_next_201144075:;
			++it;
			goto _iter_begin_201144075;
		}
		_iter_end_201144075:;
	}
	return _23317_tuple;
}



inline jule::Ptr<_1e0182404_LitExpr> _1ed10a649_build_lit(_1ed1090d7_ExprBuilder* _self_,_1e02c1d07_Token _24228_token) {
	return jule::new_ptr<_1e0182404_LitExpr>(_1e0182404_LitExpr(_24228_token,_24228_token._field_kind));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed10aa01_build_primitive_type(_1ed1090d7_ExprBuilder* _self_,_1e02c1d07_Token& _24940_token) {
	return _1ed12e481_build_prim_type(_24940_token);
}



inline jule::Any _1ed10ada8_build_single(_1ed1090d7_ExprBuilder* _self_,_1e02c1d07_Token _25335_token) {
	{
		auto &_match_expr{ _25335_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(6LLU)) {
			_case_begin_201147771:;
			{
				return jule::Any(_1ed10a649_build_lit(&(*_self_), _25335_token));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_201147aa1:;
			{
				if ((_25335_token._field_kind == jule::Str("...", 3))) {
					return jule::Any(jule::new_ptr<_1e0182ea4_VariadicExpr>(_1e0182ea4_VariadicExpr(_25335_token,jule::Ptr<_1e0181a63_Expr>())));
				}
			}
		}
		else if (_match_expr == static_cast<jule::U32>(2LLU) || _match_expr == static_cast<jule::U32>(28LLU) || _match_expr == static_cast<jule::U32>(40LLU)) {
			_case_begin_201147b17:;
			{
				return jule::Any(_1ed108a32_build_ident_expr(_25335_token));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(1LLU)) {
			_case_begin_201147b8e:;
			{
				return jule::Any(_1ed10aa01_build_primitive_type(&(*_self_), _25335_token));
			}
		}
		_match_end_2011479d5:;
	}
	_1ed1099de_push_err(&(*_self_), _25335_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1e0182a64_IdentExpr> _1ed10b260_build_cpp_linked_ident(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _27446_tokens) {
	if (_27446_tokens[0LL]._field_id != static_cast<jule::U32>(31LLU)) {
		return nullptr;
	} else if (_27446_tokens[1LL]._field_id != static_cast<jule::U32>(20LLU)) {
		_1ed1099de_push_err(&(*_self_), _27446_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1e02c1d07_Token _28217_token = _27446_tokens[2LL];
	if (_28217_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed1099de_push_err(&(*_self_), _27446_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e0182a64_IdentExpr> _28817_expr = _1ed108a32_build_ident_expr(_28217_token);
	_28817_expr.get()._field_cpp_linked=true;
	return _28817_expr;
}



inline jule::Ptr<_1e0182c84_UnaryExpr> _1ed10b617_build_unary(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _29334_tokens) {
	_1e02c1d07_Token _29417_op = _29334_tokens[0LL];
	if ((_29334_tokens.len() == 1LL)) {
		_1ed1099de_push_err(&(*_self_), _29417_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_1e02c2621_is_unary_op(_29417_op._field_kind)))) {
		_1ed1099de_push_err(&(*_self_), _29417_op,jule::Str("invalid unary operator: @", 25),jule::Slice<jule::Any>({jule::Any(_29417_op._field_kind)}));
		return nullptr;
	}
	_29334_tokens=_29334_tokens.slice(1LL);
	return jule::new_ptr<_1e0182c84_UnaryExpr>(_1e0182c84_UnaryExpr(_29417_op,_1ed115a72_build_from_tokens(&(*_self_), _29334_tokens)));
}



inline jule::Ptr<_1e02d7768_SubIdentExpr> _1ed10b9be_build_obj_sub_ident(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _31442_tokens) {
	jule::I32 _31517_i = (_31442_tokens.len() - 1LL);
	_1e02c1d07_Token _31617_ident_token = _31442_tokens[_31517_i];
	(_31517_i)--;
	_31442_tokens=_31442_tokens.slice(0LL,_31517_i);
	if ((_31442_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _31617_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1e02d7768_SubIdentExpr>(_1e02d7768_SubIdentExpr(jule::Bool(),_1ed115a72_build_from_tokens(&(*_self_), _31442_tokens),_31617_ident_token));
}



inline jule::Ptr<_1e02d7548_NsSelectionExpr> _1ed10bd76_build_ns_sub_ident(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _32942_tokens) {
	jule::Ptr<_1e02d7548_NsSelectionExpr> _33017_ns = jule::new_ptr<_1e02d7548_NsSelectionExpr>(_1e02d7548_NsSelectionExpr());
	{
		auto &expr = _32942_tokens;
		auto it = expr.begin();
		_iter_begin_20115795c:;
		if (it != expr.end()) {
			jule::I32 _201157a6c_i = it - expr.begin();
			_1e02c1d07_Token _201157ce2_token = *it;
			{
				if (((_201157a6c_i & 1LL) == 0LL)) {
					if (_201157ce2_token._field_id != static_cast<jule::U32>(2LLU)) {
						_1ed1099de_push_err(&(*_self_), _201157ce2_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						_1ed109dda_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					}
					_33017_ns.get()._field_ns = jule::alloc_for_append(_33017_ns.get()._field_ns,1);_33017_ns.get()._field_ns.__push(_201157ce2_token);
				} else if (_201157ce2_token._field_id != static_cast<jule::U32>(23LLU)) {
					_1ed1099de_push_err(&(*_self_), _201157ce2_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					_1ed109dda_push_suggestion(&(*_self_), jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				}
			}
			_iter_next_20115795c:;
			++it;
			_201157a6c_i++;
			goto _iter_begin_20115795c;
		}
		_iter_end_20115795c:;
	}
	_33017_ns.get()._field_ident=_33017_ns.get()._field_ns[(_33017_ns.get()._field_ns.len() - 1LL)];
	_33017_ns.get()._field_ns=_33017_ns.get()._field_ns.slice(0LL,(_33017_ns.get()._field_ns.len() - 1LL));
	return _33017_ns;
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed10c22d_build_type(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _34834_tokens) {
	jule::I32 _34917_i = 0LL;
	jule::Ptr<_1e01c3db3_TypeDecl> _35018_t;
	jule::Bool _35021_ok;
	std::tie(_35018_t,_35021_ok) = _1ed11d4b4_build_type((*_self_)._field_p, _34834_tokens,(&(_34917_i)),false);
	if ((!(_35021_ok))) {
		_1ed1099de_push_err(&(*_self_), _34834_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_34917_i < static_cast<jule::I32>(static_cast<jule::I32>(_34834_tokens.len()))) {
		_1ed1099de_push_err(&(*_self_), _34834_tokens[_34917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _35018_t;
}



inline jule::Any _1ed10c5d5_build_sub_ident(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _36239_tokens) {
	jule::I32 _36313_i = (_36239_tokens.len() - 2LL);
	_1e02c1d07_Token _36413_token = _36239_tokens[_36313_i];
	{
		auto &_match_expr{ _36413_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(20LLU)) {
			_case_begin_201161a76:;
			{
				return jule::Any(_1ed10b9be_build_obj_sub_ident(&(*_self_), _36239_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(23LLU)) {
			_case_begin_2011622d5:;
			{
				return jule::Any(_1ed10bd76_build_ns_sub_ident(&(*_self_), _36239_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_20116234b:;
			{
				if ((_36413_token._field_kind == jule::Str("]", 1))) {
					return jule::Any(_1ed10c22d_build_type(&(*_self_), _36239_tokens));
				}
			}
		}
		_match_end_2011621d6:;
	}
	_1ed1099de_push_err(&(*_self_), _36413_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1e0182ea4_VariadicExpr> _1ed10c98c_build_variadic(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _38037_tokens) {
	_1e02c1d07_Token _38117_token = _38037_tokens[(_38037_tokens.len() - 1LL)];
	_38037_tokens=_38037_tokens.slice(0LL,(_38037_tokens.len() - 1LL));
	return jule::new_ptr<_1e0182ea4_VariadicExpr>(_1e0182ea4_VariadicExpr(_38117_token,_1ed115a72_build_from_tokens(&(*_self_), _38037_tokens)));
}



inline jule::Any _1ed10cd44_build_op_right(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _38938_tokens) {
	_1e02c1d07_Token _39017_token = _38938_tokens[(_38938_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _39017_token._field_kind };
		
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_2011671ec:;
			{
				_38938_tokens=_38938_tokens.slice(0LL,(_38938_tokens.len() - 1LL));
				jule::Any _39421_d = _1ed115313_build(&(*_self_), _38938_tokens);
				if (_39421_d == jule::Any(jule::Any(nullptr))) {
					return jule::Any(nullptr);
				}
				{
					auto &_match_expr{ _39421_d };
					
					if (_match_expr.type_is<jule::Ptr<_1e02d7ba8_FnCallExpr>>()) {
						_case_begin_201169562:;
						{
							_39421_d.operator jule::Ptr<_1e02d7ba8_FnCallExpr>().get()._field_exception=jule::new_ptr<_1e02d9ddb_ScopeTree>(_1e02d9ddb_ScopeTree(jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Bool(),true,jule::Slice<_1e01be3a8_Node>(),_1e02c1d07_Token()));
							return _39421_d;
						}
					}
					_match_end_201169793:;
				}
			}
		}
		else if (_match_expr == jule::Str("...", 3)) {
			_case_begin_201167ae3:;
			{
				return jule::Any(_1ed10c98c_build_variadic(&(*_self_), _38938_tokens));
			}
		}
		_match_end_201167a6b:;
	}
	_1ed1099de_push_err(&(*_self_), _39017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1e0181a63_Expr> _1ed10d240_build_between_parentheses(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _41248_tokens) {
	_1e02c1d07_Token _41313_token = _41248_tokens[0LL];
	_41248_tokens=_41248_tokens.slice(1LL,(_41248_tokens.len() - 1LL));
	if ((_41248_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _41313_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e0181a63_Expr> _42017_expr = _1ed115a72_build_from_tokens(&(*_self_), _41248_tokens);
	_42017_expr.get()._field_range=true;
	return _42017_expr;
}



inline jule::Ptr<_1e02d7328_CastExpr> _1ed10d5d6_try_build_cast(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _42538_tokens) {
	jule::I32 _42617_range_n = 0LL;
	{
		auto &expr = _42538_tokens;
		auto it = expr.begin();
		_iter_begin_201170458:;
		if (it != expr.end()) {
			jule::I32 _201170502_i = it - expr.begin();
			_1e02c1d07_Token _201170777_token = *it;
			{
				if (_201170777_token._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _201170777_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_201171745:;
							{
								(_42617_range_n)++;
								goto _iter_next_201170458;
							}
						}
						else {
							_case_begin_2011710d5:;
							{
								(_42617_range_n)--;
							}
						}
						_match_end_201171415:;
					}
				}
				if ((_42617_range_n > 0LL)) {
					goto _iter_next_201170458;
				} else if ((_201170502_i + 1LL) == static_cast<jule::I32>(static_cast<jule::I32>(_42538_tokens.len()))) {
					return nullptr;
				}
				jule::Slice<_1e02c1d07_Token> _44621_type_tokens = _42538_tokens.slice(0LL,(_201170502_i + 1LL));
				jule::Slice<_1e02c1d07_Token> _44721_expr_tokens = _42538_tokens.slice((_201170502_i + 1LL));
				if ((_44721_expr_tokens.len() == 0LL)) {
					return nullptr;
				}
				_1e02c1d07_Token _45417_tok = _44721_expr_tokens[0LL];
				if ((_45417_tok._field_id != static_cast<jule::U32>(3LLU)) || (_45417_tok._field_kind != jule::Str("(", 1))) {
					return nullptr;
				}
				jule::Ptr<_1e02d7328_CastExpr> _45921_cast = jule::new_ptr<_1e02d7328_CastExpr>(_1e02d7328_CastExpr());
				if ((_44721_expr_tokens.len() == 2LL)) {
					_1ed1099de_push_err(&(*_self_), _44721_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					_1ed109dda_push_suggestion(&(*_self_), jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				}
				if ((_44621_type_tokens.len() == 2LL)) {
					_1ed1099de_push_err(&(*_self_), _44621_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					_1ed109dda_push_suggestion(&(*_self_), jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_44621_type_tokens=_44621_type_tokens.slice(1LL,(_44621_type_tokens.len() - 1LL));
					jule::I32 _47325_type_index = 0LL;
					jule::Ptr<_1e01c3db3_TypeDecl> _47426_t;
					jule::Bool _47429_ok;
					std::tie(_47426_t,_47429_ok) = _1ed11d4b4_build_type((*_self_)._field_p, _44621_type_tokens,(&(_47325_type_index)),true);
					if (_47429_ok && (_47325_type_index < static_cast<jule::I32>(static_cast<jule::I32>(_44621_type_tokens.len())))) {
						_1ed1099de_push_err(&(*_self_), _44621_type_tokens[_47325_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_47429_ok))) {
						return _45921_cast;
					}
					_45921_cast.get()._field_kind=_47426_t;
					if ((_44721_expr_tokens.len() > 2LL)) {
						jule::I32 _48429_j = 0LL;
						_1ed1189ed_range(_48429_j,jule::Str("(", 1),jule::Str(")", 1),_44721_expr_tokens);
						if (_48429_j < static_cast<jule::I32>(static_cast<jule::I32>(_44721_expr_tokens.len()))) {
							return nullptr;
						}
						_44721_expr_tokens=_44721_expr_tokens.slice(0LL,_48429_j);
						_45921_cast.get()._field_expr=_1ed115a72_build_from_tokens(&(*_self_), _44721_expr_tokens);
					}
				}
				return _45921_cast;
			}
			_iter_next_201170458:;
			++it;
			_201170502_i++;
			goto _iter_begin_201170458;
		}
		_iter_end_201170458:;
	}
	return nullptr;
}



inline void _1ed10daae_push_arg(_1ed1090d7_ExprBuilder* _self_,jule::Slice<jule::Ptr<_1e0181a63_Expr>>& _49932_args,jule::Slice<_1e02c1d07_Token> _49951_tokens,_1e02c1d07_Token _49968_err_token) {
	if ((_49951_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _49968_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_49932_args = jule::alloc_for_append(_49932_args,1);_49932_args.__push(_1ed115a72_build_from_tokens(&(*_self_), _49951_tokens));
}



inline jule::Slice<jule::Ptr<_1e0181a63_Expr>> _1ed10de66_build_args(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _50833_tokens) {
	if ((_50833_tokens.len() < 2LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _51417_args = nullptr;
	jule::I32 _51517_last = 0LL;
	jule::I32 _51617_range_n = 0LL;
	_50833_tokens=_50833_tokens.slice(1LL,(_50833_tokens.len() - 1LL));
	{
		auto &expr = _50833_tokens;
		auto it = expr.begin();
		_iter_begin_201181a0d:;
		if (it != expr.end()) {
			jule::I32 _2011823c1_i = it - expr.begin();
			_1e02c1d07_Token _2011824e2_token = *it;
			{
				if (_2011824e2_token._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _2011824e2_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_201183416:;
							{
								(_51617_range_n)++;
							}
						}
						else {
							_case_begin_201182ca6:;
							{
								(_51617_range_n)--;
							}
						}
						_match_end_2011830d6:;
					}
				}
				if ((_51617_range_n > 0LL) || (_2011824e2_token._field_id != static_cast<jule::U32>(8LLU))) {
					goto _iter_next_201181a0d;
				}
				_1ed10daae_push_arg(&(*_self_), _51417_args,_50833_tokens.slice(_51517_last,_2011823c1_i),_2011824e2_token);
				_51517_last=static_cast<jule::I32>((_2011823c1_i + 1LL));
			}
			_iter_next_201181a0d:;
			++it;
			_2011823c1_i++;
			goto _iter_begin_201181a0d;
		}
		_iter_end_201181a0d:;
	}
	if (_51517_last < static_cast<jule::I32>(static_cast<jule::I32>(_50833_tokens.len()))) {
		if ((_51517_last == 0LL)) {
			if ((_50833_tokens.len() > 0LL)) {
				_1ed10daae_push_arg(&(*_self_), _51417_args,_50833_tokens.slice(_51517_last),_50833_tokens[_51517_last]);
			}
		} else {
			_1ed10daae_push_arg(&(*_self_), _51417_args,_50833_tokens.slice(_51517_last),_50833_tokens[(_51517_last - 1LL)]);
		}
	}
	return _51417_args;
}



inline jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _1ed10e31d_build_call_generics(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _55042_tokens) {
	if ((_55042_tokens.len() == 0LL)) {
		return nullptr;
	}
	_55042_tokens=_55042_tokens.slice(1LL,(_55042_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _55618_parts;
	jule::Slice<_208de2238_Log> _55625_errs;
	std::tie(_55618_parts,_55625_errs) = _1ed119317_parts(_55042_tokens,static_cast<jule::U32>(8LLU),true);
	jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _55717_generics = jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>::alloc(0LL,static_cast<jule::I32>(_55618_parts.len()));
	(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_55625_errs);
	{
		auto &expr = _55618_parts;
		auto it = expr.begin();
		_iter_begin_20118931d:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _201189cd0_part = *it;
			{
				if ((_201189cd0_part.len() == 0LL)) {
					goto _iter_next_20118931d;
				}
				jule::I32 _56321_j = 0LL;
				jule::Ptr<_1e01c3db3_TypeDecl> _56422_generic;
				std::tie(_56422_generic,std::ignore) = _1ed11d4b4_build_type((*_self_)._field_p, _201189cd0_part,(&(_56321_j)),true);
				if (_56321_j < static_cast<jule::I32>(static_cast<jule::I32>(_201189cd0_part.len()))) {
					_1ed1099de_push_err(&(*_self_), _201189cd0_part[_56321_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_55717_generics = jule::alloc_for_append(_55717_generics,1);_55717_generics.__push(_56422_generic);
			}
			_iter_next_20118931d:;
			++it;
			goto _iter_begin_20118931d;
		}
		_iter_end_20118931d:;
	}
	return _55717_generics;
}



inline jule::Ptr<_1e02d7ba8_FnCallExpr> _1ed10e7a2_build_fn_call(_1ed1090d7_ExprBuilder* _self_,_1e02c1d07_Token& _57437_token,jule::Ptr<_1ed107888_CallData>& _57456_data) {
	return jule::new_ptr<_1e02d7ba8_FnCallExpr>(_1e02d7ba8_FnCallExpr(_57437_token,_1ed115a72_build_from_tokens(&(*_self_), _57456_data.get()._field_expr_tokens),_1ed10e31d_build_call_generics(&(*_self_), _57456_data.get()._field_generics_tokens),_1ed10de66_build_args(&(*_self_), _57456_data.get()._field_args_tokens),jule::Ptr<_1e02d9ddb_ScopeTree>()));
}



inline jule::Any _1ed10eb9d_build_parentheses_range(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _58347_tokens) {
	_1e02c1d07_Token _58417_token = _58347_tokens[0LL];
	{
		auto &_match_expr{ _58417_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_201190555:;
			{
				{
					auto &_match_expr{ _58417_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_2011912ae:;
						{
							jule::Ptr<_1e02d7328_CastExpr> _58925_expr = _1ed10d5d6_try_build_cast(&(*_self_), _58347_tokens);
							if ((_58925_expr != nullptr)) {
								return jule::Any(_58925_expr);
							}
						}
					}
					_match_end_201191501:;
				}
			}
		}
		_match_end_201190be8:;
	}
	jule::Ptr<_1ed107888_CallData> _59617_data = _1ed107c62_get_call_data(_58347_tokens);
	if ((_59617_data.get()._field_expr_tokens.len() == 0LL)) {
		return jule::Any(_1ed10d240_build_between_parentheses(&(*_self_), _59617_data.get()._field_args_tokens));
	}
	return jule::Any(_1ed10e7a2_build_fn_call(&(*_self_), _58417_token,_59617_data));
}



inline jule::Ptr<_1e0182624_UnsafeExpr> _1ed110044_build_unsafe_expr(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _60740_tokens) {
	_1e02c1d07_Token _60817_token = _60740_tokens[0LL];
	_60740_tokens=_60740_tokens.slice(1LL);
	jule::I32 _61017_i = 0LL;
	jule::Slice<_1e02c1d07_Token> _61117_range_tokens = _1ed1189ed_range(_61017_i,jule::Str("{", 1),jule::Str("}", 1),_60740_tokens);
	if ((_61117_range_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _60740_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1e0182624_UnsafeExpr>(_1e0182624_UnsafeExpr(_60817_token,_1ed115a72_build_from_tokens(&(*_self_), _61117_range_tokens)));
}



inline jule::Ptr<_1e02da32b_FnDecl> _1ed1103eb_build_anon_fn(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _62237_tokens) {
	jule::Ptr<_1e02da32b_FnDecl> _62317_f = _1ed12370b_build_fn((*_self_)._field_p, _62237_tokens,false,false);
	if ((!(_1e02da54b_is_anon(_62317_f.ptr())))) {
		_1ed1099de_push_err(&(*_self_), _62317_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	}
	return _62317_f;
}



inline jule::Any _1ed1107a3_build_unsafe(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _63136_tokens) {
	{
		auto &_match_expr{ _63136_tokens[1LL]._field_id };
		
		if (_match_expr == static_cast<jule::U32>(33LLU)) {
			_case_begin_20119b2a8:;
			{
				return jule::Any(_1ed1103eb_build_anon_fn(&(*_self_), _63136_tokens));
			}
		}
		else {
			_case_begin_20119a719:;
			{
				return jule::Any(_1ed110044_build_unsafe_expr(&(*_self_), _63136_tokens));
			}
		}
		_match_end_20119abc0:;
	}
}



inline void _1ed110c7b_push_range_lit_part(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _64142_part,_1e02c1d07_Token _6429_error_token,jule::Slice<jule::Slice<_1e02c1d07_Token>>& _64234_parts) {
	if ((_64142_part.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _6429_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_64234_parts = jule::alloc_for_append(_64234_parts,1);_64234_parts.__push(_64142_part);
}



inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed111177_get_brace_range_lit_expr_parts(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _65253_tokens) {
	if ((_65253_tokens.len() < 2LL)) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _65817_parts = nullptr;
	jule::I32 _66017_last = 0LL;
	jule::I32 _66117_range_n = 0LL;
	_65253_tokens=_65253_tokens.slice(1LL,(_65253_tokens.len() - 1LL));
	{
		auto &expr = _65253_tokens;
		auto it = expr.begin();
		_iter_begin_2011a105a:;
		if (it != expr.end()) {
			jule::I32 _2011a191d_i = it - expr.begin();
			_1e02c1d07_Token _2011a1a3e_token = *it;
			{
				if (_2011a1a3e_token._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _2011a1a3e_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_2011a2963:;
							{
								(_66117_range_n)++;
							}
						}
						else {
							_case_begin_2011a2303:;
							{
								(_66117_range_n)--;
							}
						}
						_match_end_2011a2633:;
					}
				}
				if ((_66117_range_n > 0LL) || (_2011a1a3e_token._field_id != static_cast<jule::U32>(8LLU))) {
					goto _iter_next_2011a105a;
				}
				_1ed110c7b_push_range_lit_part(&(*_self_), _65253_tokens.slice(_66017_last,_2011a191d_i),_2011a1a3e_token,_65817_parts);
				_66017_last=static_cast<jule::I32>((_2011a191d_i + 1LL));
			}
			_iter_next_2011a105a:;
			++it;
			_2011a191d_i++;
			goto _iter_begin_2011a105a;
		}
		_iter_end_2011a105a:;
	}
	if (_66017_last < static_cast<jule::I32>(static_cast<jule::I32>(_65253_tokens.len()))) {
		if ((_66017_last == 0LL)) {
			if ((_65253_tokens.len() > 0LL)) {
				_1ed110c7b_push_range_lit_part(&(*_self_), _65253_tokens.slice(_66017_last),_65253_tokens[_66017_last],_65817_parts);
			}
		} else {
			_1ed110c7b_push_range_lit_part(&(*_self_), _65253_tokens.slice(_66017_last),_65253_tokens[(_66017_last - 1LL)],_65817_parts);
		}
	}
	return _65817_parts;
}



inline jule::Ptr<_1e02d7dc8_FieldExprPair> _1ed11151d_build_field_expr_pair(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _69444_tokens) {
	if (((_69444_tokens.len() - 2LL) == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _69444_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e02d7dc8_FieldExprPair> _69917_pair = jule::new_ptr<_1e02d7dc8_FieldExprPair>(_1e02d7dc8_FieldExprPair(_69444_tokens[0LL],jule::Ptr<_1e0181a63_Expr>()));
	_69444_tokens=_69444_tokens.slice(2LL);
	_69917_pair.get()._field_expr=_1ed115a72_build_from_tokens(&(*_self_), _69444_tokens);
	return _69917_pair;
}



inline jule::Ptr<_1e0181a63_Expr> _1ed1118c5_build_struct_lit_expr(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _70745_tokens) {
	_1e02c1d07_Token _70817_token = _70745_tokens[0LL];
	if ((_70817_token._field_id == static_cast<jule::U32>(2LLU)) && (_70745_tokens.len() > 1LL)) {
		_70817_token=_70745_tokens[1LL];
		if (_70817_token._field_id == static_cast<jule::U32>(11LLU)) {
			return jule::new_ptr<_1e0181a63_Expr>(_1e0181a63_Expr(_70817_token,_1e02c1d07_Token(),jule::Bool(),jule::Any(jule::Any(_1ed11151d_build_field_expr_pair(&(*_self_), _70745_tokens)))));
		}
	}
	return _1ed115a72_build_from_tokens(&(*_self_), _70745_tokens);
}



inline jule::Slice<jule::Ptr<_1e0181a63_Expr>> _1ed111c7c_build_struct_lit_exprs(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _72146_tokens) {
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _72217_parts = _1ed111177_get_brace_range_lit_expr_parts(&(*_self_), _72146_tokens);
	if ((_72217_parts.len() == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e0181a63_Expr>> _72717_pairs = jule::Slice<jule::Ptr<_1e0181a63_Expr>>::alloc(0LL,static_cast<jule::I32>(_72217_parts.len()));
	{
		auto &expr = _72217_parts;
		auto it = expr.begin();
		_iter_begin_2011ae19a:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2011ae376_part = *it;
			{
				_72717_pairs = jule::alloc_for_append(_72717_pairs,1);_72717_pairs.__push(_1ed1118c5_build_struct_lit_expr(&(*_self_), _2011ae376_part));
			}
			_iter_next_2011ae19a:;
			++it;
			goto _iter_begin_2011ae19a;
		}
		_iter_end_2011ae19a:;
	}
	return _72717_pairs;
}



inline jule::Ptr<_1e02d80e8_StructLit> _1ed112178_build_typed_struct_literal(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _73449_tokens) {
	jule::I32 _73517_i = 0LL;
	jule::Ptr<_1e01c3db3_TypeDecl> _73618_t;
	jule::Bool _73621_ok;
	std::tie(_73618_t,_73621_ok) = _1ed11d4b4_build_type((*_self_)._field_p, _73449_tokens,(&(_73517_i)),true);
	if ((!(_73621_ok))) {
		return nullptr;
	} else if (_73517_i >= static_cast<jule::I32>(static_cast<jule::I32>(_73449_tokens.len()))) {
		_1ed1099de_push_err(&(*_self_), _73449_tokens[_73517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_73449_tokens=_73449_tokens.slice(_73517_i);
	_1e02c1d07_Token _74513_token = _73449_tokens[0LL];
	if ((_74513_token._field_id != static_cast<jule::U32>(3LLU)) || (_74513_token._field_kind != jule::Str("{", 1))) {
		_1ed1099de_push_err(&(*_self_), _74513_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1e02d80e8_StructLit>(_1e02d80e8_StructLit(_73449_tokens[(_73449_tokens.len() - 1LL)],_73618_t,_1ed111c7c_build_struct_lit_exprs(&(*_self_), _73449_tokens)));
}



inline jule::Ptr<_1e0181a63_Expr> _1ed11251e_build_brace_lit_part(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _75844_tokens) {
	jule::Slice<_1e02c1d07_Token> _75918_l;
	jule::Slice<_1e02c1d07_Token> _75925_r;
	std::tie(_75918_l,_75925_r) = _1ed1083c2_split_colon(_75844_tokens);
	if ((_75918_l != nullptr)) {
		return jule::new_ptr<_1e0181a63_Expr>(_1e0181a63_Expr(_75844_tokens[0LL],_1e02c1d07_Token(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1e02d8538_KeyValPair>(_1e02d8538_KeyValPair(_1ed115a72_build_from_tokens(&(*_self_), _75918_l),_1ed115a72_build_from_tokens(&(*_self_), _75925_r),_75844_tokens[_75918_l.len()]))))));
	}
	return _1ed115a72_build_from_tokens(&(*_self_), _75844_tokens);
}



inline jule::Ptr<_1e02d8318_BraceLit> _1ed1128c6_build_brace_lit(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _77439_tokens) {
	jule::Ptr<_1e02d8318_BraceLit> _77517_lit = jule::new_ptr<_1e02d8318_BraceLit>(_1e02d8318_BraceLit(_77439_tokens[0LL],_77439_tokens[(_77439_tokens.len() - 1LL)],jule::Slice<jule::Ptr<_1e0181a63_Expr>>()));
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _78017_parts = _1ed111177_get_brace_range_lit_expr_parts(&(*_self_), _77439_tokens);
	if ((_78017_parts == nullptr)) {
		return _77517_lit;
	}
	_77517_lit.get()._field_exprs=jule::Slice<jule::Ptr<_1e0181a63_Expr>>::alloc(0LL,static_cast<jule::I32>(_78017_parts.len()));
	{
		auto &expr = _78017_parts;
		auto it = expr.begin();
		_iter_begin_2011ba904:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2011ba948_part = *it;
			{
				_77517_lit.get()._field_exprs = jule::alloc_for_append(_77517_lit.get()._field_exprs,1);_77517_lit.get()._field_exprs.__push(_1ed11251e_build_brace_lit_part(&(*_self_), _2011ba948_part));
			}
			_iter_next_2011ba904:;
			++it;
			goto _iter_begin_2011ba904;
		}
		_iter_end_2011ba904:;
	}
	return _77517_lit;
}



inline jule::Any _1ed112c7d_build_brace_range(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _79341_tokens) {
	jule::Slice<_1e02c1d07_Token> _79418_expr_tokens;
	jule::I32 _79431_range_n;
	std::tie(_79418_expr_tokens,_79431_range_n) = _1ed108d40_get_range_expr_tokens(_79341_tokens);
	{
		
		if ((_79418_expr_tokens.len() == 0LL)) {
			_case_begin_2011bc74c:;
			{
				return jule::Any(_1ed1128c6_build_brace_lit(&(*_self_), _79341_tokens));
			}
		}
		else if ((_79431_range_n > 0LL)) {
			_case_begin_2011bc7c4:;
			{
				_1ed1099de_push_err(&(*_self_), _79341_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_2011bc6d6:;
	}
	_1e02c1d07_Token _80513_else_token = _79418_expr_tokens[(_79418_expr_tokens.len() - 1LL)];
	if (_79418_expr_tokens[(_79418_expr_tokens.len() - 1LL)]._field_id == static_cast<jule::U32>(17LLU)) {
		_79418_expr_tokens=_79418_expr_tokens.slice(0LL,(_79418_expr_tokens.len() - 1LL));
		jule::Any _80821_d = _1ed115313_build(&(*_self_), _79418_expr_tokens);
		if (_80821_d == jule::Any(jule::Any(nullptr))) {
			return jule::Any(nullptr);
		}
		{
			auto &_match_expr{ _80821_d };
			
			if (_match_expr.type_is<jule::Ptr<_1e02d7ba8_FnCallExpr>>()) {
				_case_begin_2011c2334:;
				{
					_79341_tokens=_79341_tokens.slice((_79418_expr_tokens.len() + 1LL));
					jule::I32 _81525_i = 0LL;
					jule::Slice<_1e02c1d07_Token> _81625_range_tokens = _1ed1189ed_range(_81525_i,jule::Str("{", 1),jule::Str("}", 1),_79341_tokens);
					jule::Ptr<_1e02d7ba8_FnCallExpr> _81725_model = _80821_d.operator jule::Ptr<_1e02d7ba8_FnCallExpr>();
					if (_1e01831c4_ignored(_81725_model.ptr())) {
						_1ed1099de_push_err(&(*_self_), _80513_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						_1ed109dda_push_suggestion(&(*_self_), jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					}
					_81725_model.get()._field_exception=_1ed11c8e2_build_scope((*_self_)._field_p, _81625_range_tokens,_79341_tokens[(_81525_i - 1LL)]);
					return _80821_d;
				}
			}
			else {
				_case_begin_2011c0bc3:;
				{
					_1ed1099de_push_err(&(*_self_), _79418_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return jule::Any(nullptr);
				}
			}
			_match_end_2011c1003:;
		}
	}
	{
		auto &_match_expr{ _79418_expr_tokens[0LL]._field_id };
		
		if (_match_expr == static_cast<jule::U32>(35LLU)) {
			_case_begin_2011c6965:;
			{
				return _1ed1107a3_build_unsafe(&(*_self_), _79341_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(33LLU)) {
			_case_begin_2011c69cb:;
			{
				return jule::Any(_1ed1103eb_build_anon_fn(&(*_self_), _79341_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(2LLU) || _match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_2011c6a42:;
			{
				return jule::Any(_1ed112178_build_typed_struct_literal(&(*_self_), _79341_tokens));
			}
		}
		else {
			_case_begin_2011bc609:;
			{
				_1ed1099de_push_err(&(*_self_), _79418_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_2011c67bc:;
	}
}



inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed113135_get_enumerable_parts(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _84543_tokens) {
	_84543_tokens=_84543_tokens.slice(1LL,(_84543_tokens.len() - 1LL));
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _84718_parts;
	jule::Slice<_208de2238_Log> _84725_errors;
	std::tie(_84718_parts,_84725_errors) = _1ed119317_parts(_84543_tokens,static_cast<jule::U32>(8LLU),true);
	(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_84725_errors);
	return _84718_parts;
}



inline jule::Ptr<_1e02d8758_SliceExpr> _1ed1134dc_build_slice(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _85234_tokens) {
	jule::Ptr<_1e02d8758_SliceExpr> _85317_slc = jule::new_ptr<_1e02d8758_SliceExpr>(_1e02d8758_SliceExpr(_85234_tokens[0LL],_85234_tokens[(_85234_tokens.len() - 1LL)],jule::Slice<jule::Ptr<_1e0181a63_Expr>>()));
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _85817_parts = _1ed113135_get_enumerable_parts(&(*_self_), _85234_tokens);
	if ((_85817_parts.len() == 0LL)) {
		return _85317_slc;
	}
	_85317_slc.get()._field_exprs=jule::Slice<jule::Ptr<_1e0181a63_Expr>>::alloc(0LL,static_cast<jule::I32>(_85817_parts.len()));
	{
		auto &expr = _85817_parts;
		auto it = expr.begin();
		_iter_begin_2011cd5e8:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2011ce297_p = *it;
			{
				if ((_2011ce297_p.len() == 0LL)) {
					goto _iter_next_2011cd5e8;
				}
				_85317_slc.get()._field_exprs = jule::alloc_for_append(_85317_slc.get()._field_exprs,1);_85317_slc.get()._field_exprs.__push(_1ed115a72_build_from_tokens(&(*_self_), _2011ce297_p));
			}
			_iter_next_2011cd5e8:;
			++it;
			goto _iter_begin_2011cd5e8;
		}
		_iter_end_2011cd5e8:;
	}
	return _85317_slc;
}



inline jule::Ptr<_1e01821c3_IndexingExpr> _1ed113a4d_build_indexing(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _87437_expr_tokens,jule::Slice<_1e02c1d07_Token> _87513_tokens,_1e02c1d07_Token _87534_error_token) {
	_1e02c1d07_Token _87617_end = _87513_tokens[(_87513_tokens.len() - 1LL)];
	_87513_tokens=_87513_tokens.slice(1LL,(_87513_tokens.len() - 1LL));
	if ((_87513_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _87534_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e0181a63_Expr> _88217_expr = _1ed115a72_build_from_tokens(&(*_self_), _87437_expr_tokens);
	if ((_88217_expr == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1e0181a63_Expr> _88617_index = _1ed115a72_build_from_tokens(&(*_self_), _87513_tokens);
	if ((_88617_index == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1e01821c3_IndexingExpr>(_1e01821c3_IndexingExpr(_87534_error_token,_87617_end,_88217_expr,_88617_index));
}



inline jule::Ptr<_1e02d8deb_SlicingExpr> _1ed114268_build_slicing(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _89837_expr_tokens,jule::Slice<_1e02c1d07_Token>& _89864_slicing_tokens,jule::I32& _89910_colon,_1e02c1d07_Token& _89927_error_token,_1e02c1d07_Token _89951_end) {
	jule::Ptr<_1e02d8deb_SlicingExpr> _90017_slc = jule::new_ptr<_1e02d8deb_SlicingExpr>(_1e02d8deb_SlicingExpr(_89927_error_token,_89951_end,_1ed115a72_build_from_tokens(&(*_self_), _89837_expr_tokens),jule::Ptr<_1e0181a63_Expr>(),jule::Ptr<_1e0181a63_Expr>()));
	jule::Slice<_1e02c1d07_Token> _90617_start_expr_tokens = _89864_slicing_tokens.slice(0LL,_89910_colon);
	if ((_90617_start_expr_tokens.len() > 0LL)) {
		_90017_slc.get()._field_start=_1ed115a72_build_from_tokens(&(*_self_), _90617_start_expr_tokens);
	}
	jule::Slice<_1e02c1d07_Token> _91117_to_expr_tokens = _89864_slicing_tokens.slice((_89910_colon + 1LL));
	if ((_91117_to_expr_tokens.len() > 0LL)) {
		_90017_slc.get()._field_to=_1ed115a72_build_from_tokens(&(*_self_), _91117_to_expr_tokens);
	}
	return _90017_slc;
}



inline jule::Any _1ed114620_build_bracket_range(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _91942_tokens) {
	_1e02c1d07_Token _92017_error_token = _91942_tokens[0LL];
	jule::Slice<_1e02c1d07_Token> _92118_expr_tokens;
	jule::I32 _92131_range_n;
	std::tie(_92118_expr_tokens,_92131_range_n) = _1ed108d40_get_range_expr_tokens(_91942_tokens);
	{
		
		if ((_92118_expr_tokens.len() == 0LL)) {
			_case_begin_2011da01c:;
			{
				return jule::Any(_1ed1134dc_build_slice(&(*_self_), _91942_tokens));
			}
		}
		else if ((_92118_expr_tokens.len() == 0LL) || (_92131_range_n > 0LL)) {
			_case_begin_2011da094:;
			{
				_1ed1099de_push_err(&(*_self_), _92017_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_2011d9e51:;
	}
	_91942_tokens=_91942_tokens.slice(_92118_expr_tokens.len());
	jule::I32 _93917_i = 0LL;
	jule::Slice<_1e02c1d07_Token> _94018_slicing_tokens;
	jule::I32 _94034_colon;
	std::tie(_94018_slicing_tokens,_94034_colon) = _1ed12e86b_split_map_range(_91942_tokens,_93917_i);
	if ((_94034_colon != -1LL)) {
		return jule::Any(_1ed114268_build_slicing(&(*_self_), _92118_expr_tokens,_94018_slicing_tokens,_94034_colon,_92017_error_token,_91942_tokens[(_91942_tokens.len() - 1LL)]));
	}
	return jule::Any(_1ed113a4d_build_indexing(&(*_self_), _92118_expr_tokens,_91942_tokens,_92017_error_token));
}



inline jule::Any _1ed1149c7_build_data(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _94734_tokens) {
	{
		auto _match_expr{ _94734_tokens.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_2011e00bb:;
			{
				return jule::Any(nullptr);
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_2011e0132:;
			{
				return _1ed10ada8_build_single(&(*_self_), _94734_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_2011e0198:;
			{
				if (_94734_tokens[0LL]._field_id == static_cast<jule::U32>(31LLU)) {
					return jule::Any(_1ed10b260_build_cpp_linked_ident(&(*_self_), _94734_tokens));
				}
			}
		}
		_match_end_2011dedac:;
	}
	_1e02c1d07_Token _95917_token = _94734_tokens[0LL];
	{
		auto &_match_expr{ _95917_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_2011e020e:;
			{
				if ((_94734_tokens.len() > 1LL) && (_95917_token._field_kind == jule::Str("*", 1))) {
					_95917_token=_94734_tokens[1LL];
					if ((_95917_token._field_id == static_cast<jule::U32>(1LLU)) || (_95917_token._field_id == static_cast<jule::U32>(35LLU))) {
						return jule::Any(_1ed10c22d_build_type(&(*_self_), _94734_tokens));
					}
				}
				return jule::Any(_1ed10b617_build_unary(&(*_self_), _94734_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_2011e271c:;
			{
				if ((_94734_tokens.len() < 3LL)) {
					goto _match_end_2011e260c;
				}
				if ((_94734_tokens.len() > 3LL)) {
					_1e02c1d07_Token _97821_t = _94734_tokens[(_94734_tokens.len() - 1LL)];
					if ((_97821_t._field_id == static_cast<jule::U32>(3LLU)) && (_97821_t._field_kind == jule::Str(")", 1))) {
						goto _match_end_2011e260c;
					}
				}
				_1e02c1d07_Token _98417_next = _94734_tokens[1LL];
				if ((_98417_next._field_id != static_cast<jule::U32>(3LLU)) || (_98417_next._field_kind != jule::Str("]", 1))) {
					goto _match_end_2011e260c;
				}
				return jule::Any(_1ed10c22d_build_type(&(*_self_), _94734_tokens));
			}
		}
		_match_end_2011e260c:;
	}
	_95917_token=_94734_tokens[(_94734_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _95917_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(2LLU)) {
			_case_begin_2011e2783:;
			{
				return _1ed10c5d5_build_sub_ident(&(*_self_), _94734_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(1LLU)) {
			_case_begin_2011e8c1d:;
			{
				return jule::Any(_1ed10c22d_build_type(&(*_self_), _94734_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_2011e8c84:;
			{
				return _1ed10cd44_build_op_right(&(*_self_), _94734_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_2011e8cea:;
			{
				{
					auto &_match_expr{ _95917_token._field_kind };
					
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_2011eac0e:;
						{
							return _1ed10eb9d_build_parentheses_range(&(*_self_), _94734_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_2011eac97:;
						{
							return _1ed112c7d_build_brace_range(&(*_self_), _94734_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_2011ead0d:;
						{
							return _1ed114620_build_bracket_range(&(*_self_), _94734_tokens);
						}
					}
					_match_end_2011eab76:;
				}
			}
		}
		_match_end_2011e8b52:;
	}
	_1ed1099de_push_err(&(*_self_), _95917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1e02d7988_BinopExpr> _1ed114e5b_build_binop(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _101535_tokens,jule::I32 _101552_i) {
	jule::Slice<_1e02c1d07_Token> _101617_left_tokens = _101535_tokens.slice(0LL,_101552_i);
	jule::Slice<_1e02c1d07_Token> _101717_right_tokens = _101535_tokens.slice((_101552_i + 1LL));
	if ((_101617_left_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _101535_tokens[_101552_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((_101717_right_tokens.len() == 0LL)) {
		_1ed1099de_push_err(&(*_self_), _101535_tokens[_101552_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed109dda_push_suggestion(&(*_self_), jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1e02d7988_BinopExpr>(_1e02d7988_BinopExpr(_1ed115a72_build_from_tokens(&(*_self_), _101617_left_tokens),_1ed115a72_build_from_tokens(&(*_self_), _101717_right_tokens),_101535_tokens[_101552_i]));
}



inline jule::Any _1ed115313_build(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _103529_tokens) {
	jule::I32 _103613_i = _1ed108724_find_lowest_prec_op(_103529_tokens);
	if ((_103613_i == -1LL)) {
		return _1ed1149c7_build_data(&(*_self_), _103529_tokens);
	}
	return jule::Any(_1ed114e5b_build_binop(&(*_self_), _103529_tokens,_103613_i));
}



inline jule::Any _1ed1156ba_build_kind(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token>& _104334_tokens) {
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _104418_parts;
	jule::Slice<_208de2238_Log> _104425_errors;
	std::tie(_104418_parts,_104425_errors) = _1ed119317_parts(_104334_tokens,static_cast<jule::U32>(8LLU),true);
	if ((_104425_errors != nullptr)) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_104425_errors);
		return jule::Any(nullptr);
	} else if ((_104418_parts.len() > 1LL)) {
		return jule::Any(_1ed10a292_build_tuple(&(*_self_), _104418_parts));
	}
	return _1ed115313_build(&(*_self_), _104334_tokens);
}



inline jule::Ptr<_1e0181a63_Expr> _1ed115a72_build_from_tokens(_1ed1090d7_ExprBuilder* _self_,jule::Slice<_1e02c1d07_Token> _105440_tokens) {
	if ((_105440_tokens.len() == 0LL)) {
		return nullptr;
	}
	return jule::new_ptr<_1e0181a63_Expr>(_1e0181a63_Expr(_105440_tokens[0LL],_105440_tokens[(_105440_tokens.len() - 1LL)],jule::Bool(),_1ed1156ba_build_kind(&(*_self_), _105440_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, _1ed1090d7_ExprBuilder _Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _1ed11ac31_stop(_1ed11a88a_Parser* _self_) {
	(*_self_)._field_ast=nullptr;
}



inline jule::Bool _1ed11b00b_stopped(_1ed11a88a_Parser* _self_) {
	return ((*_self_)._field_ast == nullptr);
}



inline void _1ed11b4d4_push_err(_1ed11a88a_Parser* _self_,_1e02c1d07_Token _22827_token,jule::Str _22841_fmt,jule::Slice<jule::Any> _22854_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_1ed119b20_compiler_err(_22827_token,_22841_fmt,_22854_args));
}



inline void _1ed11b8d0_push_suggestion(_1ed11a88a_Parser* _self_,jule::Str _23334_fmt,jule::Slice<jule::Any> _23347_args) {
	{
		_1ed11a04e_push_suggestion((&((*_self_)._field_errors[((*_self_)._field_errors.len() - 1LL)])),_23334_fmt,_23347_args);
	}
}



inline jule::Ptr<_1e0181a63_Expr> _1ed11bc87_build_expr(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _23735_tokens) {
	jule::Ptr<_1ed1090d7_ExprBuilder> _23817_ep = jule::new_ptr<_1ed1090d7_ExprBuilder>(_1ed1090d7_ExprBuilder(_self_));
	jule::Ptr<_1e0181a63_Expr> _23917_expr = _1ed115a72_build_from_tokens(_23817_ep.ptr(), _23735_tokens);
	return _23917_expr;
}



inline jule::Ptr<_1e02812b1_Directive> _1ed11c13e_build_directive(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token> _24338_tokens) {
	if ((_24338_tokens.len() == 1LL)) {
		_1ed11b4d4_push_err(&(*_self_), _24338_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_24338_tokens[1LL]._field_column != static_cast<jule::I32>(static_cast<jule::I32>((_24338_tokens[0LL]._field_column + 1LL)))) {
		_1ed11b4d4_push_err(&(*_self_), _24338_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1e02812b1_Directive>(_1e02812b1_Directive(_24338_tokens[1LL],_24338_tokens.slice(2LL)));
}



inline void _1ed11c45d_push_directive(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02812b1_Directive> _26037_d) {
	if ((_26037_d == nullptr)) {
		return;
	}
	{
		auto &expr = (*_self_)._field_directives;
		auto it = expr.begin();
		_iter_begin_2012126a4:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _201212d14_pd = *it;
			{
				if (_26037_d.get()._field_tag._field_kind == _201212d14_pd.get()._field_tag._field_kind) {
					return;
				}
			}
			_iter_next_2012126a4:;
			++it;
			goto _iter_begin_2012126a4;
		}
		_iter_end_2012126a4:;
	}
	(*_self_)._field_directives = jule::alloc_for_append((*_self_)._field_directives,1);(*_self_)._field_directives.__push(_26037_d);
}



inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed11c8e2_build_scope(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _27436_tokens,_1e02c1d07_Token _27457_end) {
	jule::Ptr<_1e02d9ddb_ScopeTree> _27517_s = _1ed0e6bda_new_scope();
	_27517_s.get()._field_end=_27457_end;
	_1ed0e8967_ScopeParser _27717_sp = _1ed0e8967_ScopeParser(_self_,jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>>(),jule::I32());
	_1ed1068dc_build(&_27717_sp, _27436_tokens,_27517_s);
	return _27517_s;
}



inline std::tuple<jule::Ptr<_1e01c3db3_TypeDecl>,jule::Bool> _1ed11ce53___build_type(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _28444_tokens,jule::I32* _28513_i,jule::Bool _28522_err) {
	_1ed12ee54_TypeBuilder _28617_tb = _1ed12ee54_TypeBuilder(_self_,_28444_tokens,_28513_i,_28522_err);
	jule::Ptr<_1e01c3db3_TypeDecl> _29218_decl;
	jule::Bool _29224_ok;
	std::tie(_29218_decl,_29224_ok) = _1ed133c38_build(&_28617_tb);
	return std::make_tuple(_29218_decl,_29224_ok);
}



inline std::tuple<jule::Ptr<_1e01c3db3_TypeDecl>,jule::Bool> _1ed11d4b4_build_type(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _29742_tokens,jule::I32* _29813_i,jule::Bool _29822_err) {
	_1e02c1d07_Token _29913_token = _29742_tokens[(*(_29813_i))];
	jule::Ptr<_1e01c3db3_TypeDecl> _30018_t;
	jule::Bool _30021_ok;
	std::tie(_30018_t,_30021_ok) = _1ed11ce53___build_type(_self_, _29742_tokens,_29813_i,_29822_err);
	if (_29822_err && (!(_30021_ok))) {
		_1ed11b4d4_push_err(_self_.ptr(), _29913_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	}
	return std::make_tuple(_30018_t,_30021_ok);
}



inline jule::Ptr<_1e02dde01_TypeAliasDecl> _1ed11d86b_build_type_alias_decl(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _30746_tokens) {
	jule::I32 _30817_i = 1LL;
	if (_30817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_30746_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _30746_tokens[(_30817_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e02dde01_TypeAliasDecl> _31317_tad = jule::new_ptr<_1e02dde01_TypeAliasDecl>(_1e02dde01_TypeAliasDecl(jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Bool(),jule::Bool(),_30746_tokens[1LL],_30746_tokens[1LL]._field_kind,jule::Ptr<_1e01c3db3_TypeDecl>()));
	_1e02c1d07_Token _31717_token = _30746_tokens[_30817_i];
	if (_31717_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _31717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_30817_i)++;
	if (_30817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_30746_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _30746_tokens[(_30817_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _31317_tad;
	}
	_31717_token=_30746_tokens[_30817_i];
	if (_31717_token._field_id != static_cast<jule::U32>(11LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _30746_tokens[(_30817_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _31317_tad;
	}
	(_30817_i)++;
	if (_30817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_30746_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _30746_tokens[(_30817_i - 1LL)],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _31317_tad;
	}
	jule::Ptr<_1e01c3db3_TypeDecl> _33818_t;
	jule::Bool _33821_ok;
	std::tie(_33818_t,_33821_ok) = _1ed11d4b4_build_type(_self_, _30746_tokens,(&(_30817_i)),true);
	_31317_tad.get()._field_kind=_33818_t;
	if (_33821_ok && (_30817_i < static_cast<jule::I32>(static_cast<jule::I32>(_30746_tokens.len())))) {
		_1ed11b4d4_push_err(_self_.ptr(), _30746_tokens[_30817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _31317_tad;
}



inline void _1ed11dcab_build_var_type_and_expr(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<_1e02daea8_VarDecl>& _34648_v,jule::Slice<_1e02c1d07_Token>& _34666_tokens) {
	jule::I32 _34717_i = 0LL;
	_1e02c1d07_Token _34817_tok = _34666_tokens[_34717_i];
	if (_34817_tok._field_id == static_cast<jule::U32>(11LLU)) {
		(_34717_i)++;
		if ((_34717_i >= static_cast<jule::I32>(static_cast<jule::I32>(_34666_tokens.len()))) || ((_34666_tokens[_34717_i]._field_id == static_cast<jule::U32>(7LLU)) && (_34666_tokens[_34717_i]._field_kind == jule::Str("=", 1)))) {
			_1ed11b4d4_push_err(_self_.ptr(), _34817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;
		}
		jule::Ptr<_1e01c3db3_TypeDecl> _35622_t;
		jule::Bool _35625_ok;
		std::tie(_35622_t,_35625_ok) = _1ed11d4b4_build_type(_self_, _34666_tokens,(&(_34717_i)),true);
		if (_35625_ok) {
			_34648_v.get()._field_kind=_35622_t;
			if (_34717_i >= static_cast<jule::I32>(static_cast<jule::I32>(_34666_tokens.len()))) {
				return;
			}
			_34817_tok=_34666_tokens[_34717_i];
		}
	}
	if (_34817_tok._field_id == static_cast<jule::U32>(7LLU)) {
		if ((_34817_tok._field_kind != jule::Str("=", 1))) {
			_1ed11b4d4_push_err(_self_.ptr(), _34817_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;
		}
		jule::Slice<_1e02c1d07_Token> _37121_expr_tokens = _34666_tokens.slice((_34717_i + 1LL));
		if ((_37121_expr_tokens.len() == 0LL)) {
			_1ed11b4d4_push_err(_self_.ptr(), _34817_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;
		}
		_34648_v.get()._field_expr=_1ed11bc87_build_expr(_self_, _37121_expr_tokens);
	} else {
		_1ed11b4d4_push_err(_self_.ptr(), _34817_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1ed11e196_build_var_common(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<_1e02daea8_VarDecl>& _38241_v,jule::Slice<_1e02c1d07_Token> _38258_tokens) {
	_38241_v.get()._field_token=_38258_tokens[0LL];
	if (_38241_v.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _38241_v.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	_38241_v.get()._field_ident=_38241_v.get()._field_token._field_kind;
	_38241_v.get()._field_kind=nullptr;
	if ((_38258_tokens.len() > 1LL)) {
		_38258_tokens=_38258_tokens.slice(1LL);
		_1ed11dcab_build_var_type_and_expr(_self_, _38241_v,_38258_tokens);
	}
}



inline void _1ed11e66e_build_var_begin(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02daea8_VarDecl>& _39739_v,jule::Ptr<jule::I32> _39756_i,jule::Slice<_1e02c1d07_Token>& _39766_tokens) {
	_1e02c1d07_Token _39813_tok = _39766_tokens[(*(_39756_i))];
	{
		auto &_match_expr{ _39813_tok._field_id };
		
		if (_match_expr == static_cast<jule::U32>(38LLU)) {
			_case_begin_201234709:;
			{
				_39739_v.get()._field_statically=true;
				goto _case_begin_201233b6a;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(34LLU)) {
			_case_begin_201233b6a:;
			{
				((*(_39756_i)))++;
				if ((*(_39756_i)) >= static_cast<jule::I32>(static_cast<jule::I32>(_39766_tokens.len()))) {
					_1ed11b4d4_push_err(&(*_self_), _39813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				if (_39766_tokens[(*(_39756_i))]._field_id == static_cast<jule::U32>(36LLU)) {
					_39739_v.get()._field_mutable=true;
					((*(_39756_i)))++;
				}
			}
		}
		else if (_match_expr == static_cast<jule::U32>(9LLU)) {
			_case_begin_201233bd1:;
			{
				((*(_39756_i)))++;
				_39739_v.get()._field_constant=true;
			}
		}
		else {
			_case_begin_2012334d8:;
			{
				_1ed11b4d4_push_err(&(*_self_), _39813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_201233ae3:;
	}
	if ((*(_39756_i)) >= static_cast<jule::I32>(static_cast<jule::I32>(_39766_tokens.len()))) {
		_1ed11b4d4_push_err(&(*_self_), _39813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1e02daea8_VarDecl> _1ed11ea26_build_var(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _43133_tokens) {
	jule::Ptr<jule::I32> _43217_i = jule::new_ptr<jule::I32>(0LL);
	jule::Ptr<_1e02daea8_VarDecl> _43317_v = jule::new_ptr<_1e02daea8_VarDecl>(_1e02daea8_VarDecl(jule::Ptr<_1e02d9ddb_ScopeTree>(),_43133_tokens[(*(_43217_i))],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1e01c3db3_TypeDecl>(),jule::Ptr<_1e0181a63_Expr>()));
	_1ed11e66e_build_var_begin(_self_.ptr(), _43317_v,_43217_i,_43133_tokens);
	if ((*(_43217_i)) >= static_cast<jule::I32>(static_cast<jule::I32>(_43133_tokens.len()))) {
		return nullptr;
	}
	_43133_tokens=_43133_tokens.slice((*(_43217_i)));
	if ((_43133_tokens[0LL]._field_id == static_cast<jule::U32>(7LLU)) && (_43133_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		_43317_v.get()._field_reference=true;
		if ((_43133_tokens.len() == 1LL)) {
			return nullptr;
		}
		_43133_tokens=_43133_tokens.slice(1LL);
	}
	_1ed11e196_build_var_common(_self_, _43317_v,_43133_tokens);
	return _43317_v;
}



inline jule::Ptr<_1e02d911b_GenericDecl> _1ed11edcd_build_generic(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token>& _45337_tokens) {
	if ((_45337_tokens.len() > 1LL)) {
		_1ed11b4d4_push_err(&(*_self_), _45337_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1e02d911b_GenericDecl> _45717_g = jule::new_ptr<_1e02d911b_GenericDecl>(_1e02d911b_GenericDecl(_45337_tokens[0LL],jule::Str()));
	if (_45717_g.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(&(*_self_), _45717_g.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	_45717_g.get()._field_ident=_45717_g.get()._field_token._field_kind;
	return _45717_g;
}



inline jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _1ed120362_build_generics(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token>& _46838_tokens,_1e02c1d07_Token& _46856_error_token) {
	if ((_46838_tokens.len() == 0LL)) {
		_1ed11b4d4_push_err(&(*_self_), _46856_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _47418_parts;
	jule::Slice<_208de2238_Log> _47425_errors;
	std::tie(_47418_parts,_47425_errors) = _1ed119317_parts(_46838_tokens,static_cast<jule::U32>(8LLU),true);
	if ((_47425_errors.len() > 0LL)) {
		(*_self_)._field_errors=jule::append((*_self_)._field_errors,_47425_errors);
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _48017_generics = jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>::alloc(0LL,static_cast<jule::I32>(_47418_parts.len()));
	{
		auto &expr = _47418_parts;
		auto it = expr.begin();
		_iter_begin_201244d57:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _201244d9b_part = *it;
			{
				_48017_generics = jule::alloc_for_append(_48017_generics,1);_48017_generics.__push(_1ed11edcd_build_generic(&(*_self_), _201244d9b_part));
			}
			_iter_next_201244d57:;
			++it;
			goto _iter_begin_201244d57;
		}
		_iter_end_201244d57:;
	}
	return _48017_generics;
}



inline jule::Ptr<_1e02da10b_ParamDecl> _1ed120719_build_self_param(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token> _48839_tokens) {
	if ((_48839_tokens.len() == 0LL)) {
		return nullptr;
	}
	jule::Ptr<_1e02da10b_ParamDecl> _49317_param = jule::new_ptr<_1e02da10b_ParamDecl>(_1e02da10b_ParamDecl());
	jule::I32 _49617_i = 0LL;
	if (_48839_tokens[_49617_i]._field_id == static_cast<jule::U32>(36LLU)) {
		_49317_param.get()._field_mutable=true;
		(_49617_i)++;
		if (_49617_i >= static_cast<jule::I32>(static_cast<jule::I32>(_48839_tokens.len()))) {
			_1ed11b4d4_push_err(&(*_self_), _48839_tokens[(_49617_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if ((_48839_tokens[_49617_i]._field_kind == jule::Str("&", 1))) {
		_49317_param.get()._field_ident=jule::Str("&", 1);
		(_49617_i)++;
		if (_49617_i >= static_cast<jule::I32>(static_cast<jule::I32>(_48839_tokens.len()))) {
			_1ed11b4d4_push_err(&(*_self_), _48839_tokens[(_49617_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_48839_tokens[_49617_i]._field_id == static_cast<jule::U32>(28LLU)) {
		_49317_param.get()._field_ident+=jule::Str("self", 4);
		_49317_param.get()._field_token=_48839_tokens[_49617_i];
		(_49617_i)++;
		if (_49617_i < static_cast<jule::I32>(static_cast<jule::I32>(_48839_tokens.len()))) {
			_1ed11b4d4_push_err(&(*_self_), _48839_tokens[_49617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	}
	return _49317_param;
}



inline void _1ed120be2_param_type_begin(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02da10b_ParamDecl>& _52740_param,jule::I32& _52764_i,jule::Slice<_1e02c1d07_Token>& _52773_tokens) {
	for (; _52764_i < static_cast<jule::I32>(static_cast<jule::I32>(_52773_tokens.len())); (_52764_i)++) {
		{
			_1e02c1d07_Token _52917_token = _52773_tokens[_52764_i];
			if (_52917_token._field_id != static_cast<jule::U32>(7LLU)) {
				return;
			} else if ((_52917_token._field_kind != jule::Str("...", 3))) {
				return;
			}
			if (_52740_param.get()._field_variadic) {
				_1ed11b4d4_push_err(&(*_self_), _52917_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_20124d48c;
			}
			_52740_param.get()._field_variadic=true;
		}
	_iter_next_20124d48c:;
	}
	_iter_end_20124d48c:;
}



inline void _1ed1210dd_build_param_type(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<_1e02da10b_ParamDecl>& _54441_param,jule::Slice<_1e02c1d07_Token>& _54465_tokens) {
	jule::I32 _54517_i = 0LL;
	_1ed120be2_param_type_begin(_self_.ptr(), _54441_param,_54517_i,_54465_tokens);
	if (_54517_i >= static_cast<jule::I32>(static_cast<jule::I32>(_54465_tokens.len()))) {
		return;
	}
	std::tie(_54441_param.get()._field_kind,std::ignore) = _1ed11d4b4_build_type(_self_, _54465_tokens,(&(_54517_i)),true);
	if (_54517_i < static_cast<jule::I32>(static_cast<jule::I32>(_54465_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _54465_tokens[_54517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1ed1215b6_build_param_body(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<_1e02da10b_ParamDecl>& _55741_param,jule::Ptr<jule::I32> _55764_i,jule::Slice<_1e02c1d07_Token> _55777_tokens) {
	_1e02c1d07_Token _55817_tok = _55777_tokens[(*(_55764_i))];
	_55741_param.get()._field_ident=_55817_tok._field_kind;
	if (((*(_55764_i)) + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_55777_tokens.len()))) {
		return;
	} else if ((((_55777_tokens.len() - (*(_55764_i))) - 1LL) < 2LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _55817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;
	}
	_55817_tok=_55777_tokens[((*(_55764_i)) + 1LL)];
	if (_55817_tok._field_id != static_cast<jule::U32>(11LLU)) {
		_1ed1210dd_build_param_type(_self_, _55741_param,_55777_tokens);
		return;
	}
	_55777_tokens=_55777_tokens.slice(((*(_55764_i)) + 2LL));
	_1ed1210dd_build_param_type(_self_, _55741_param,_55777_tokens);
}



inline jule::Ptr<_1e02da10b_ParamDecl> _1ed12196d_build_param(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _57835_tokens) {
	jule::Ptr<_1e02da10b_ParamDecl> _57917_param = jule::new_ptr<_1e02da10b_ParamDecl>(_1e02da10b_ParamDecl(_57835_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1e01c3db3_TypeDecl>(),jule::Str()));
	if (_57917_param.get()._field_token._field_id == static_cast<jule::U32>(36LLU)) {
		_57917_param.get()._field_mutable=true;
		if ((_57835_tokens.len() == 1LL)) {
			_1ed11b4d4_push_err(_self_.ptr(), _57835_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_57835_tokens=_57835_tokens.slice(1LL);
		_57917_param.get()._field_token=_57835_tokens[0LL];
	}
	if ((_57835_tokens.len() >= 3LL)) {
		if ((_57917_param.get()._field_token._field_id == static_cast<jule::U32>(7LLU)) && (_57917_param.get()._field_token._field_kind == jule::Str("&", 1))) {
			if ((_57835_tokens.len() == 1LL)) {
				_1ed11b4d4_push_err(_self_.ptr(), _57835_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
			if ((_57835_tokens[1LL]._field_id == static_cast<jule::U32>(2LLU)) && (_57835_tokens[2LL]._field_id == static_cast<jule::U32>(11LLU))) {
				_57917_param.get()._field_reference=true;
				_57835_tokens=_57835_tokens.slice(1LL);
				_57917_param.get()._field_token=_57835_tokens[0LL];
			}
		}
	}
	if (_57917_param.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_57917_param.get()._field_ident=jule::Str("<anonymous>", 11);
		_1ed1210dd_build_param_type(_self_, _57917_param,_57835_tokens);
	} else {
		jule::Ptr<jule::I32> _61521_i = jule::new_ptr<jule::I32>(0LL);
		_1ed1215b6_build_param_body(_self_, _57917_param,_61521_i,_57835_tokens);
	}
	return _57917_param;
}



inline void _1ed121c8c_check_params(_1ed11a88a_Parser* _self_,jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>>& _62236_params) {
	{
		auto &expr = _62236_params;
		auto it = expr.begin();
		_iter_begin_20126342a:;
		if (it != expr.end()) {
			jule::Ptr<_1e02da10b_ParamDecl> _201263507_param = *it;
			{
				if (_1e01a6060_is_self(_201263507_param.ptr()) || (_201263507_param.get()._field_kind != nullptr)) {
					goto _iter_next_20126342a;
				}
				if (_201263507_param.get()._field_token._field_id == static_cast<jule::U32>(0LLU)) {
					_1ed11b4d4_push_err(&(*_self_), _201263507_param.get()._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					_201263507_param.get()._field_kind=jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_201263507_param.get()._field_token,jule::Any(jule::Any(jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_201263507_param.get()._field_token,_201263507_param.get()._field_token._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>()))))));
					_201263507_param.get()._field_ident=jule::Str("<anonymous>", 11);
				}
			}
			_iter_next_20126342a:;
			++it;
			goto _iter_begin_20126342a;
		}
		_iter_end_20126342a:;
	}
}



inline jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>> _1ed122221_build_params(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _64237_tokens,jule::Bool _64254_method) {
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _64318_parts;
	jule::Slice<_208de2238_Log> _64325_errs;
	std::tie(_64318_parts,_64325_errs) = _1ed119317_parts(_64237_tokens,static_cast<jule::U32>(8LLU),true);
	_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_64325_errs);
	if ((_64318_parts.len() == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>> _64917_params = nullptr;
	if (_64254_method && (_64318_parts.len() > 0LL)) {
		jule::Ptr<_1e02da10b_ParamDecl> _65121_param = _1ed120719_build_self_param(_self_.ptr(), _64318_parts[0LL]);
		if ((_65121_param != nullptr) && _1e01a6060_is_self(_65121_param.ptr())) {
			_64917_params = jule::alloc_for_append(_64917_params,1);_64917_params.__push(_65121_param);
			_64318_parts=_64318_parts.slice(1LL);
		}
	}
	{
		auto &expr = _64318_parts;
		auto it = expr.begin();
		_iter_begin_20126abd5:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _20126ac29_part = *it;
			{
				jule::Ptr<_1e02da10b_ParamDecl> _65921_param = _1ed12196d_build_param(_self_, _20126ac29_part);
				if ((_65921_param != nullptr)) {
					_64917_params = jule::alloc_for_append(_64917_params,1);_64917_params.__push(_65921_param);
				}
			}
			_iter_next_20126abd5:;
			++it;
			goto _iter_begin_20126abd5;
		}
		_iter_end_20126abd5:;
	}
	_1ed121c8c_check_params(_self_.ptr(), _64917_params);
	return _64917_params;
}



inline std::tuple<jule::Ptr<_1e0181843_RetTypeDecl>,jule::Bool> _1ed1226a5_build_multi_ret_type(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _66945_tokens,jule::I32& _66967_i) {
	jule::Ptr<_1e0181843_RetTypeDecl> _66977_t = jule::Ptr<_1e0181843_RetTypeDecl>();
	jule::Bool _66994_ok = jule::Bool();
	_66977_t=jule::new_ptr<_1e0181843_RetTypeDecl>(_1e0181843_RetTypeDecl());
	(_66967_i)++;
	if (_66967_i >= static_cast<jule::I32>(static_cast<jule::I32>(_66945_tokens.len()))) {
		(_66967_i)--;
		std::tie(_66977_t.get()._field_kind,_66994_ok) = _1ed11d4b4_build_type(_self_, _66945_tokens,(&(_66967_i)),false);
		return std::make_tuple(_66977_t,_66994_ok);
	}
	(_66967_i)--;
	jule::Slice<_1e02c1d07_Token> _67917_range_tokens = _1ed1189ed_range(_66967_i,jule::Str("(", 1),jule::Str(")", 1),_66945_tokens);
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _68118_parts;
	jule::Slice<_208de2238_Log> _68125_errs;
	std::tie(_68118_parts,_68125_errs) = _1ed119317_parts(_67917_range_tokens,static_cast<jule::U32>(8LLU),true);
	_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_68125_errs);
	if ((_68118_parts.len() == 0LL)) {
		return std::make_tuple(_66977_t,_66994_ok);
	}
	jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _68717_types = jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>::alloc(0LL,static_cast<jule::I32>(_68118_parts.len()));
	_66977_t.get()._field_idents=jule::Slice<_1e02c1d07_Token>::alloc(0LL,static_cast<jule::I32>(_68118_parts.len()));
	{
		auto &expr = _68118_parts;
		auto it = expr.begin();
		_iter_begin_201272626:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _20127277a_part = *it;
			{
				_1e02c1d07_Token _69021_token = _20127277a_part[0LL];
				jule::I32 _69121_offset = 0LL;
				if ((_20127277a_part.len() > 1LL)) {
					_69021_token=_20127277a_part[1LL];
					if (_69021_token._field_id == static_cast<jule::U32>(11LLU)) {
						_69121_offset=2LL;
						if ((_20127277a_part.len() < 3LL)) {
							_1ed11b4d4_push_err(_self_.ptr(), _69021_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_201272626;
						}
					}
				}
				_69021_token=_20127277a_part[0LL];
				if ((_69121_offset == 2LL)) {
					if (_69021_token._field_id != static_cast<jule::U32>(2LLU)) {
					}
					_66977_t.get()._field_idents = jule::alloc_for_append(_66977_t.get()._field_idents,1);_66977_t.get()._field_idents.__push(_69021_token);
				} else {
					_69021_token._field_kind=jule::Str("<anonymous>", 11);
					_66977_t.get()._field_idents = jule::alloc_for_append(_66977_t.get()._field_idents,1);_66977_t.get()._field_idents.__push(_69021_token);
				}
				jule::Ptr<_1e01c3db3_TypeDecl> _71622_tk;
				std::tie(_71622_tk,std::ignore) = _1ed11d4b4_build_type(_self_, _20127277a_part,(&(_69121_offset)),true);
				if (_69121_offset < static_cast<jule::I32>(static_cast<jule::I32>(_20127277a_part.len()))) {
					_1ed11b4d4_push_err(_self_.ptr(), _20127277a_part[_69121_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_68717_types = jule::alloc_for_append(_68717_types,1);_68717_types.__push(_71622_tk);
			}
			_iter_next_201272626:;
			++it;
			goto _iter_begin_201272626;
		}
		_iter_end_201272626:;
	}
	if ((_68717_types.len() > 1LL)) {
		_66977_t.get()._field_kind=jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_66945_tokens[0LL],jule::Any(jule::Any(jule::new_ptr<_1e01aebb2_TupleTypeDecl>(_1e01aebb2_TupleTypeDecl(_68717_types))))));
	} else {
		_66977_t.get()._field_kind=_68717_types[0LL];
	}
	_66994_ok=true;
	return std::make_tuple(_66977_t,_66994_ok);
}



inline std::tuple<jule::Ptr<_1e0181843_RetTypeDecl>,jule::Bool> _1ed122b39_build_ret_type(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _73939_tokens,jule::I32& _73961_i) {
	jule::Ptr<_1e0181843_RetTypeDecl> _73971_t = jule::Ptr<_1e0181843_RetTypeDecl>();
	jule::Bool _73988_ok = jule::Bool();
	_73971_t=jule::new_ptr<_1e0181843_RetTypeDecl>(_1e0181843_RetTypeDecl());
	if (_73961_i >= static_cast<jule::I32>(static_cast<jule::I32>(_73939_tokens.len()))) {
		return std::make_tuple(_73971_t,_73988_ok);
	}
	_1e02c1d07_Token _74517_token = _73939_tokens[_73961_i];
	{
		auto &_match_expr{ _74517_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_20128278a:;
			{
				if ((_74517_token._field_kind == jule::Str("{", 1))) {
					return std::make_tuple(_73971_t,_73988_ok);
				}
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_201282801:;
			{
				if ((_74517_token._field_kind == jule::Str("=", 1))) {
					return std::make_tuple(_73971_t,_73988_ok);
				}
			}
		}
		else if (_match_expr == static_cast<jule::U32>(11LLU)) {
			_case_begin_201282867:;
			{
				if ((_73961_i + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_73939_tokens.len()))) {
					_1ed11b4d4_push_err(_self_.ptr(), _74517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_73971_t,_73988_ok);
				}
				(_73961_i)++;
				_74517_token=_73939_tokens[_73961_i];
				if (_74517_token._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _74517_token._field_kind };
						
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_201284baa:;
							{
								std::tie(_73971_t,_73988_ok) = _1ed1226a5_build_multi_ret_type(_self_, _73939_tokens,_73961_i);
								return std::make_tuple(_73971_t,_73988_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_20128598b:;
							{
								_1ed11b4d4_push_err(_self_.ptr(), _74517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_73971_t,_73988_ok);
							}
						}
						_match_end_20128589d:;
					}
				}
				std::tie(_73971_t.get()._field_kind,_73988_ok) = _1ed11d4b4_build_type(_self_, _73939_tokens,(&(_73961_i)),true);
				return std::make_tuple(_73971_t,_73988_ok);
			}
		}
		_match_end_201282713:;
	}
	(_73961_i)++;
	_1ed11b4d4_push_err(_self_.ptr(), _74517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_73971_t,_73988_ok);
}



inline jule::Ptr<_1e02da32b_FnDecl> _1ed12319a_build_fn_prototype(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _78443_tokens,jule::I32& _78465_i,jule::Bool _78473_method) {
	jule::Ptr<_1e02da32b_FnDecl> _78517_f = jule::new_ptr<_1e02da32b_FnDecl>(_1e02da32b_FnDecl(_78443_tokens[_78465_i],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),jule::Ptr<_1e0181843_RetTypeDecl>(),jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>>()));
	if (_78517_f.get()._field_token._field_id == static_cast<jule::U32>(38LLU)) {
		_78517_f.get()._field_statically=true;
		(_78465_i)++;
		if (_78465_i >= static_cast<jule::I32>(static_cast<jule::I32>(_78443_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _78517_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_78517_f.get()._field_token=_78443_tokens[_78465_i];
	}
	if (_78517_f.get()._field_token._field_id == static_cast<jule::U32>(35LLU)) {
		_78517_f.get()._field_unsafety=true;
		(_78465_i)++;
		if (_78465_i >= static_cast<jule::I32>(static_cast<jule::I32>(_78443_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _78517_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_78517_f.get()._field_token=_78443_tokens[_78465_i];
	}
	(_78465_i)++;
	if (_78465_i >= static_cast<jule::I32>(static_cast<jule::I32>(_78443_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _78517_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1e02c1d07_Token _81813_tok = _78443_tokens[_78465_i];
	if (_81813_tok._field_id == static_cast<jule::U32>(2LLU)) {
		(_78465_i)++;
		if (_78465_i >= static_cast<jule::I32>(static_cast<jule::I32>(_78443_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _78517_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_78517_f.get()._field_ident=_81813_tok._field_kind;
	} else {
		_78517_f.get()._field_ident=jule::Str("<anonymous>", 11);
	}
	_1e02c1d07_Token _83013_error_token = _78443_tokens[_78465_i];
	jule::Slice<_1e02c1d07_Token> _83117_generics_tokens = _1ed1189ed_range(_78465_i,jule::Str("[", 1),jule::Str("]", 1),_78443_tokens);
	if ((_83117_generics_tokens != nullptr)) {
		_78517_f.get()._field_generics=_1ed120362_build_generics(_self_.ptr(), _83117_generics_tokens,_83013_error_token);
	}
	if ((_78443_tokens[_78465_i]._field_kind != jule::Str("(", 1))) {
		_1ed11b4d4_push_err(_self_.ptr(), _78443_tokens[_78465_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_1e02c1d07_Token> _84117_params_toks = _1ed1189ed_range(_78465_i,jule::Str("(", 1),jule::Str(")", 1),_78443_tokens);
	if ((_84117_params_toks.len() > 0LL)) {
		_78517_f.get()._field_params=_1ed122221_build_params(_self_, _84117_params_toks,_78473_method);
	}
	if (_78465_i < static_cast<jule::I32>(static_cast<jule::I32>(_78443_tokens.len()))) {
		_1e02c1d07_Token _84717_token = _78443_tokens[_78465_i];
		if ((_84717_token._field_id == static_cast<jule::U32>(7LLU)) && (_84717_token._field_kind == jule::Str("!", 1))) {
			_78517_f.get()._field_exceptional=true;
			(_78465_i)++;
		}
	}
	std::tie(_78517_f.get()._field_result,std::ignore) = _1ed122b39_build_ret_type(_self_, _78443_tokens,_78465_i);
	return _78517_f;
}



inline jule::Ptr<_1e02da32b_FnDecl> _1ed12370b_build_fn(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _86033_tokens,jule::Bool _86050_method,jule::Bool _86064_prototype) {
	jule::I32 _86117_i = 0LL;
	jule::Ptr<_1e02da32b_FnDecl> _86217_f = _1ed12319a_build_fn_prototype(_self_, _86033_tokens,_86117_i,_86050_method);
	if (_86064_prototype) {
		if (_86117_i < static_cast<jule::I32>(static_cast<jule::I32>(_86033_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _86033_tokens[(_86117_i + 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		return _86217_f;
	} else if ((_86217_f == nullptr)) {
		return _86217_f;
	}
	if (_86117_i >= static_cast<jule::I32>(static_cast<jule::I32>(_86033_tokens.len()))) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _86217_f.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_1e02c1d07_Token> _87817_block_tokens = _1ed1189ed_range(_86117_i,jule::Str("{", 1),jule::Str("}", 1),_86033_tokens);
	if ((_87817_block_tokens != nullptr)) {
		_86217_f.get()._field_scope=_1ed11c8e2_build_scope(_self_, _87817_block_tokens,_86033_tokens[(_86117_i - 1LL)]);
		_86217_f.get()._field_scope.get()._field_unsafety=_86217_f.get()._field_unsafety;
		if (_86117_i < static_cast<jule::I32>(static_cast<jule::I32>(_86033_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _86033_tokens[_86117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	} else {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _86217_f.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _86217_f;
}



inline jule::Slice<_1e02c1d07_Token> _1ed123ab3_get_use_decl_selectors(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token> _89445_tokens) {
	jule::I32 _89517_i = 0LL;
	_89445_tokens=_1ed1189ed_range(_89517_i,jule::Str("{", 1),jule::Str("}", 1),_89445_tokens);
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _89718_parts;
	jule::Slice<_208de2238_Log> _89725_errs;
	std::tie(_89718_parts,_89725_errs) = _1ed119317_parts(_89445_tokens,static_cast<jule::U32>(8LLU),true);
	if ((_89725_errs.len() > 0LL)) {
		(*_self_)._field_errors=jule::append((*_self_)._field_errors,_89725_errs);
		return nullptr;
	}
	jule::Slice<_1e02c1d07_Token> _90317_selectors = jule::Slice<_1e02c1d07_Token>::alloc(0LL,static_cast<jule::I32>(_89718_parts.len()));
	{
		auto &expr = _89718_parts;
		auto it = expr.begin();
		_iter_begin_2012a30d5:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2012a3503_part = *it;
			{
				if ((_2012a3503_part.len() > 1LL)) {
					_1ed11b4d4_push_err(&(*_self_), _2012a3503_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_1e02c1d07_Token _90821_tok = _2012a3503_part[0LL];
				if ((_90821_tok._field_id != static_cast<jule::U32>(2LLU)) && (_90821_tok._field_id != static_cast<jule::U32>(28LLU))) {
					_1ed11b4d4_push_err(&(*_self_), _90821_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					_1ed11b8d0_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_2012a30d5;
				}
				_90317_selectors = jule::alloc_for_append(_90317_selectors,1);_90317_selectors.__push(_90821_tok);
			}
			_iter_next_2012a30d5:;
			++it;
			goto _iter_begin_2012a30d5;
		}
		_iter_end_2012a30d5:;
	}
	return _90317_selectors;
}



inline void _1ed123eae_build_cpp_use_decl(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02e009a_UseDecl>& _91942_decl,jule::Slice<_1e02c1d07_Token>& _91959_tokens) {
	if ((_91959_tokens.len() > 1LL)) {
		_1ed11b4d4_push_err(&(*_self_), _91959_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_1e02c1d07_Token _92313_token = _91959_tokens[0LL];
	if ((_92313_token._field_id != static_cast<jule::U32>(6LLU)) || ((_92313_token._field_kind[0LL] != '`') && (_92313_token._field_kind[0LL] != '\"'))) {
		_1ed11b4d4_push_err(&(*_self_), _92313_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	_91942_decl.get()._field_cpp_linked=true;
	_91942_decl.get()._field_link_path=_92313_token._field_kind.slice(1LL,(_92313_token._field_kind.len() - 1LL));
	if ((!(_208dd1348_is_std_header_path(_91942_decl.get()._field_link_path)))) {
		_91942_decl.get()._field_link_path=_208c750aa_join(jule::Slice<jule::Str>({_1e02c89bd_dir(_92313_token._field_file.ptr()),_91942_decl.get()._field_link_path}));
	}
}



inline void _1ed1243aa_build_std_use_decl(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02e009a_UseDecl>& _93542_decl,jule::Slice<_1e02c1d07_Token> _93562_tokens) {
	_93542_decl.get()._field_std=true;
	_1e02c1d07_Token _93817_token = _93562_tokens[0LL];
	if ((_93562_tokens.len() < 3LL)) {
		_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_93562_tokens=_93562_tokens.slice(2LL);
	_93817_token=_93562_tokens[(_93562_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _93817_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(23LLU)) {
			_case_begin_2012ae377:;
			{
				_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_2012aee8d:;
			{
				if ((_93817_token._field_kind != jule::Str("}", 1))) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_1e02c1d07_Token> _95621_selectors = nullptr;
				std::tie(_93562_tokens,_95621_selectors) = _1ed118d0b_range_last(_93562_tokens);
				_93542_decl.get()._field_selected=_1ed123ab3_get_use_decl_selectors(&(*_self_), _95621_selectors);
				if ((_93562_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_93817_token=_93562_tokens[(_93562_tokens.len() - 1LL)];
				if (_93817_token._field_id != static_cast<jule::U32>(23LLU)) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_93562_tokens=_93562_tokens.slice(0LL,(_93562_tokens.len() - 1LL));
				if ((_93562_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_2012b0004:;
			{
				if ((_93817_token._field_kind != jule::Str("*", 1))) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_93562_tokens=_93562_tokens.slice(0LL,(_93562_tokens.len() - 1LL));
				if ((_93562_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_93817_token=_93562_tokens[(_93562_tokens.len() - 1LL)];
				if (_93817_token._field_id != static_cast<jule::U32>(23LLU)) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_93562_tokens=_93562_tokens.slice(0LL,(_93562_tokens.len() - 1LL));
				if ((_93562_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _93817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_93542_decl.get()._field_full=true;
			}
		}
		_match_end_2012aedc2:;
	}
	_93542_decl.get()._field_link_path=jule::Str("std::", 5) + _1ed11a3e5_tokstoa(_93562_tokens);
}



inline void _1ed1247a6_build_ident_use_decl(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02e009a_UseDecl>& _99944_decl,jule::Slice<_1e02c1d07_Token> _99964_tokens) {
	_99944_decl.get()._field_std=false;
	_1e02c1d07_Token _100217_token = _99964_tokens[(_99964_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _100217_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(23LLU)) {
			_case_begin_2012bc3a7:;
			{
				_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_2012bc41d:;
			{
				if ((_100217_token._field_kind != jule::Str("}", 1))) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_1e02c1d07_Token> _101421_selectors = nullptr;
				std::tie(_99964_tokens,_101421_selectors) = _1ed118d0b_range_last(_99964_tokens);
				_99944_decl.get()._field_selected=_1ed123ab3_get_use_decl_selectors(&(*_self_), _101421_selectors);
				if ((_99964_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_100217_token=_99964_tokens[(_99964_tokens.len() - 1LL)];
				if (_100217_token._field_id != static_cast<jule::U32>(23LLU)) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_99964_tokens=_99964_tokens.slice(0LL,(_99964_tokens.len() - 1LL));
				if ((_99964_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_2012bc484:;
			{
				if ((_100217_token._field_kind != jule::Str("*", 1))) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_99964_tokens=_99964_tokens.slice(0LL,(_99964_tokens.len() - 1LL));
				if ((_99964_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_100217_token=_99964_tokens[(_99964_tokens.len() - 1LL)];
				if (_100217_token._field_id != static_cast<jule::U32>(23LLU)) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_99964_tokens=_99964_tokens.slice(0LL,(_99964_tokens.len() - 1LL));
				if ((_99964_tokens.len() == 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), _100217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_99944_decl.get()._field_full=true;
			}
		}
		_match_end_2012bc2b9:;
	}
	_99944_decl.get()._field_link_path=_1ed11a3e5_tokstoa(_99964_tokens);
}



inline void _1ed124ba2_parse_use_decl(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02e009a_UseDecl>& _106438_decl,jule::Slice<_1e02c1d07_Token> _106458_tokens) {
	if (_106438_decl.get()._field_cpp_linked) {
		_1ed123eae_build_cpp_use_decl(&(*_self_), _106438_decl,_106458_tokens);
		return;
	}
	_1e02c1d07_Token _107017_token = _106458_tokens[0LL];
	if (_107017_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	if ((_106458_tokens.len() > 2LL) && (_106458_tokens[1LL]._field_id == static_cast<jule::U32>(12LLU))) {
		_106438_decl.get()._field_alias=_107017_token._field_kind;
		if (_106458_tokens[2LL]._field_id != static_cast<jule::U32>(2LLU)) {
			_1ed11b4d4_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			_1ed11b8d0_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;
		}
		_106458_tokens=_106458_tokens.slice(2LL);
		_107017_token=_106458_tokens[0LL];
	}
	
	{
		
		if ((_107017_token._field_kind == jule::Str("std", 3))) {
			_case_begin_2012ce232:;
			{
				_1ed1243aa_build_std_use_decl(&(*_self_), _106438_decl,_106458_tokens);
			}
		}
		else {
			_case_begin_2012cd8a2:;
			{
				_1ed1247a6_build_ident_use_decl(&(*_self_), _106438_decl,_106458_tokens);
			}
		}
		_match_end_2012cd84c:;
	}
}



inline jule::Ptr<_1e02e009a_UseDecl> _1ed125136_build_use_decl(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token> _109937_tokens,jule::Bool _109954_cpp_linked) {
	jule::Ptr<_1e02e009a_UseDecl> _110017_decl = jule::new_ptr<_1e02e009a_UseDecl>(_1e02e009a_UseDecl(_109937_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_1e02c1d07_Token>(),_109954_cpp_linked,jule::Bool()));
	if ((_109937_tokens.len() < 2LL)) {
		_1ed11b4d4_push_err(&(*_self_), _110017_decl.get()._field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	}
	_109937_tokens=_109937_tokens.slice(1LL);
	_1ed124ba2_parse_use_decl(&(*_self_), _110017_decl,_109937_tokens);
	return _110017_decl;
}



inline jule::Ptr<_1e0181a63_Expr> _1ed1255ba_build_enum_item_expr(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<jule::I32> _111344_i,jule::Slice<_1e02c1d07_Token>& _111358_tokens) {
	jule::I32 _111417_brace_n = 0LL;
	jule::I32 _111513_expr_start = (*(_111344_i));
	for (; (*(_111344_i)) < static_cast<jule::I32>(static_cast<jule::I32>(_111358_tokens.len())); ((*(_111344_i)))++) {
		{
			_1e02c1d07_Token _111717_t = _111358_tokens[(*(_111344_i))];
			if (_111717_t._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _111717_t._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_2012d5359:;
						{
							(_111417_brace_n)++;
							goto _iter_next_2012d3d6e;
						}
					}
					else {
						_case_begin_2012d4be9:;
						{
							(_111417_brace_n)--;
						}
					}
					_match_end_2012d5029:;
				}
			}
			if ((_111417_brace_n > 0LL)) {
				goto _iter_next_2012d3d6e;
			}
			if ((_111717_t._field_id == static_cast<jule::U32>(8LLU)) || (((*(_111344_i)) + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_111358_tokens.len())))) {
				jule::Slice<_1e02c1d07_Token> _113625_expr_tokens = nullptr;
				if (_111717_t._field_id == static_cast<jule::U32>(8LLU)) {
					_113625_expr_tokens=_111358_tokens.slice(_111513_expr_start,(*(_111344_i)));
				} else {
					_113625_expr_tokens=_111358_tokens.slice(_111513_expr_start);
				}
				return _1ed11bc87_build_expr(_self_, _113625_expr_tokens);
			}
		}
	_iter_next_2012d3d6e:;
	}
	_iter_end_2012d3d6e:;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>> _1ed125972_build_enum_items(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _114841_tokens) {
	jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>> _114917_items = jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>>::alloc(0LL,1LL);
	jule::Ptr<jule::I32> _115017_i = jule::new_ptr<jule::I32>(0LL);
	for (; (*(_115017_i)) < static_cast<jule::I32>(static_cast<jule::I32>(_114841_tokens.len())); ((*(_115017_i)))++) {
		{
			_1e02c1d07_Token _115221_t = _114841_tokens[(*(_115017_i))];
			jule::Ptr<_1e02e04a7_EnumItemDecl> _115321_item = jule::new_ptr<_1e02e04a7_EnumItemDecl>(_1e02e04a7_EnumItemDecl());
			_115321_item.get()._field_token=_115221_t;
			if (_115321_item.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
				_1ed11b4d4_push_err(_self_.ptr(), _115321_item.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			}
			_115321_item.get()._field_ident=_115321_item.get()._field_token._field_kind;
			if ((((*(_115017_i)) + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_114841_tokens.len()))) || (_114841_tokens[((*(_115017_i)) + 1LL)]._field_id == static_cast<jule::U32>(8LLU))) {
				if (((*(_115017_i)) + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_114841_tokens.len()))) {
					((*(_115017_i)))++;
				}
				_114917_items = jule::alloc_for_append(_114917_items,1);_114917_items.__push(_115321_item);
				goto _iter_next_2012d9b22;
			}
			((*(_115017_i)))++;
			_115221_t=_114841_tokens[(*(_115017_i))];
			((*(_115017_i)))++;
			if ((_115221_t._field_id != static_cast<jule::U32>(7LLU)) || (_115221_t._field_kind != jule::Str("=", 1))) {
				_1ed11b4d4_push_err(_self_.ptr(), _115221_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>());
				goto _iter_next_2012d9b22;
			}
			if (((*(_115017_i)) >= static_cast<jule::I32>(static_cast<jule::I32>(_114841_tokens.len()))) || (_114841_tokens[(*(_115017_i))]._field_id == static_cast<jule::U32>(8LLU))) {
				_1ed11b4d4_push_err(_self_.ptr(), _115221_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_2012d9b22;
			}
			_115321_item.get()._field_expr=_1ed1255ba_build_enum_item_expr(_self_, _115017_i,_114841_tokens);
			_114917_items = jule::alloc_for_append(_114917_items,1);_114917_items.__push(_115321_item);
		}
	_iter_next_2012d9b22:;
	}
	_iter_end_2012d9b22:;
	return _114917_items;
}



inline jule::Ptr<_1e02e0d9d_EnumDecl> _1ed125d29_build_enum_decl(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _118540_tokens) {
	if ((_118540_tokens.len() < 2LL) || (_118540_tokens.len() < 3LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _118540_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e02e0d9d_EnumDecl> _119017_e = jule::new_ptr<_1e02e0d9d_EnumDecl>(_1e02e0d9d_EnumDecl(_118540_tokens[1LL],jule::Bool(),jule::Str(),jule::Ptr<_1e01c3db3_TypeDecl>(),jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>>(),_1e02c1d07_Token()));
	if (_119017_e.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _119017_e.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	_119017_e.get()._field_ident=_119017_e.get()._field_token._field_kind;
	jule::I32 _119817_i = 2LL;
	if (_118540_tokens[_119817_i]._field_id == static_cast<jule::U32>(11LLU)) {
		(_119817_i)++;
		if (_119817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_118540_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _118540_tokens[(_119817_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _119017_e;
		}
		std::tie(_119017_e.get()._field_kind,std::ignore) = _1ed11d4b4_build_type(_self_, _118540_tokens,(&(_119817_i)),true);
		if (_119817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_118540_tokens.len()))) {
			_1ed11ac31_stop(_self_.ptr());
			_1ed11b4d4_push_err(_self_.ptr(), _119017_e.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _119017_e;
		}
	} else {
		_119017_e.get()._field_kind=nullptr;
	}
	jule::Slice<_1e02c1d07_Token> _121517_item_tokens = _1ed1189ed_range(_119817_i,jule::Str("{", 1),jule::Str("}", 1),_118540_tokens);
	if ((_121517_item_tokens == nullptr)) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _119017_e.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _119017_e;
	} else if (_119817_i < static_cast<jule::I32>(static_cast<jule::I32>(_118540_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _118540_tokens[_119817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_119017_e.get()._field_end=_118540_tokens[(_119817_i - 1LL)];
	_119017_e.get()._field_items=_1ed125972_build_enum_items(_self_, _121517_item_tokens);
	return _119017_e;
}



inline jule::Ptr<_1e02e160c_FieldDecl> _1ed1261d1_build_field(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _122935_tokens) {
	jule::Ptr<_1e02e160c_FieldDecl> _123017_f = jule::new_ptr<_1e02e160c_FieldDecl>(_1e02e160c_FieldDecl());
	_123017_f.get()._field_public=_122935_tokens[0LL]._field_id == static_cast<jule::U32>(21LLU);
	if (_123017_f.get()._field_public) {
		if ((_122935_tokens.len() == 1LL)) {
			_1ed11b4d4_push_err(_self_.ptr(), _122935_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_122935_tokens=_122935_tokens.slice(1LL);
	}
	_123017_f.get()._field_mutable=_122935_tokens[0LL]._field_id == static_cast<jule::U32>(36LLU);
	if (_123017_f.get()._field_mutable) {
		if ((_122935_tokens.len() == 1LL)) {
			_1ed11b4d4_push_err(_self_.ptr(), _122935_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_122935_tokens=_122935_tokens.slice(1LL);
	}
	_123017_f.get()._field_token=_122935_tokens[0LL];
	if (_123017_f.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _123017_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	_123017_f.get()._field_ident=_123017_f.get()._field_token._field_kind;
	if ((_122935_tokens.len() == 1LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _122935_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_122935_tokens[1LL]._field_id != static_cast<jule::U32>(11LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _122935_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_122935_tokens=_122935_tokens.slice(2LL);
	jule::I32 _126717_i = 0LL;
	std::tie(_123017_f.get()._field_kind,std::ignore) = _1ed11d4b4_build_type(_self_, _122935_tokens,(&(_126717_i)),true);
	if (_126717_i < static_cast<jule::I32>(static_cast<jule::I32>(_122935_tokens.len()))) {
		_1e02c1d07_Token _127017_token = _122935_tokens[_126717_i];
		if ((_127017_token._field_id != static_cast<jule::U32>(7LLU)) || (_127017_token._field_kind != jule::Str("=", 1))) {
			_1ed11b4d4_push_err(_self_.ptr(), _122935_tokens[_126717_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_126717_i)++;
		if (_126717_i >= static_cast<jule::I32>(static_cast<jule::I32>(_122935_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _127017_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		}
		_122935_tokens=_122935_tokens.slice(_126717_i);
		_123017_f.get()._field_default=_1ed11bc87_build_expr(_self_, _122935_tokens);
	}
	return _123017_f;
}



inline jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>> _1ed1265cc_build_struct_decl_fields(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _128748_tokens) {
	jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>> _128817_fields = nullptr;
	jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _128917_stmts = _1ed0e83c3_split_stmts(_128748_tokens);
	{
		auto &expr = _128917_stmts;
		auto it = expr.begin();
		_iter_begin_20130eb69:;
		if (it != expr.end()) {
			jule::Ptr<_1ed0e7eb6_Stmt> _20130ecac_stmt = *it;
			{
				_128748_tokens=_20130ecac_stmt.get()._field_tokens;
				jule::Ptr<_1e02e160c_FieldDecl> _129221_f = _1ed1261d1_build_field(_self_, _128748_tokens);
				_128817_fields = jule::alloc_for_append(_128817_fields,1);_128817_fields.__push(_129221_f);
			}
			_iter_next_20130eb69:;
			++it;
			goto _iter_begin_20130eb69;
		}
		_iter_end_20130eb69:;
	}
	return _128817_fields;
}



inline jule::Ptr<_1e02e1de3_StructDecl> _1ed126973_build_struct_decl(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _129842_tokens) {
	if ((_129842_tokens.len() < 3LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _129842_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::I32 _130417_i = 1LL;
	jule::Ptr<_1e02e1de3_StructDecl> _130517_s = jule::new_ptr<_1e02e1de3_StructDecl>(_1e02e1de3_StructDecl(_129842_tokens[_130417_i],_1e02c1d07_Token(),jule::Str(),jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>()));
	if (_130517_s.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _130517_s.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_130417_i)++;
	if (_130417_i >= static_cast<jule::I32>(static_cast<jule::I32>(_129842_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _129842_tokens[_130417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _130517_s;
	}
	_130517_s.get()._field_ident=_130517_s.get()._field_token._field_kind;
	_1e02c1d07_Token _131913_error_token = _129842_tokens[_130417_i];
	jule::Slice<_1e02c1d07_Token> _132017_generics_tokens = _1ed1189ed_range(_130417_i,jule::Str("[", 1),jule::Str("]", 1),_129842_tokens);
	if ((_132017_generics_tokens != nullptr)) {
		_130517_s.get()._field_generics=_1ed120362_build_generics(_self_.ptr(), _132017_generics_tokens,_131913_error_token);
	}
	if (_130417_i >= static_cast<jule::I32>(static_cast<jule::I32>(_129842_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _129842_tokens[(_130417_i - 1LL)],jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _130517_s;
	}
	jule::Slice<_1e02c1d07_Token> _133017_body_tokens = _1ed1189ed_range(_130417_i,jule::Str("{", 1),jule::Str("}", 1),_129842_tokens);
	if ((_133017_body_tokens == nullptr)) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _130517_s.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _130517_s;
	}
	if (_130417_i < static_cast<jule::I32>(static_cast<jule::I32>(_129842_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _129842_tokens[_130417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_130517_s.get()._field_fields=_1ed1265cc_build_struct_decl_fields(_self_, _133017_body_tokens);
	_130517_s.get()._field_end=_129842_tokens[(_130417_i - 1LL)];
	return _130517_s;
}



inline void _1ed126c92_check_method_receiver(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02da32b_FnDecl>& _134541_f) {
	if (_134541_f.get()._field_statically) {
		if ((_134541_f.get()._field_params.len() > 0LL) && _1e01a6060_is_self(_134541_f.get()._field_params[0LL].ptr())) {
			_1ed11b4d4_push_err(&(*_self_), _134541_f.get()._field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((_134541_f.get()._field_params.len() == 0LL)) {
		_1ed11b4d4_push_err(&(*_self_), _134541_f.get()._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1e02da10b_ParamDecl> _135813_param = _134541_f.get()._field_params[0LL];
	if ((!(_1e01a6060_is_self(_135813_param.ptr())))) {
		_1ed11b4d4_push_err(&(*_self_), _134541_f.get()._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
}



inline jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> _1ed127149_build_trait_methods(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _136543_tokens) {
	jule::Slice<jule::Ptr<_1e02da32b_FnDecl>> _136617_methods = nullptr;
	jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _136717_stmts = _1ed0e83c3_split_stmts(_136543_tokens);
	{
		auto &expr = _136717_stmts;
		auto it = expr.begin();
		_iter_begin_201323342:;
		if (it != expr.end()) {
			jule::Ptr<_1ed0e7eb6_Stmt> _201323485_stmt = *it;
			{
				_136543_tokens=_201323485_stmt.get()._field_tokens;
				if ((_136543_tokens.len() == 0LL)) {
					goto _iter_next_201323342;
				}
				jule::Bool _137421_is_pub = false;
				if (_136543_tokens[0LL]._field_id == static_cast<jule::U32>(21LLU)) {
					_137421_is_pub=true;
					if ((_136543_tokens.len() == 1LL)) {
						_1ed11b4d4_push_err(_self_.ptr(), _136543_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_201323342;
					}
					_136543_tokens=_136543_tokens.slice(1LL);
				}
				jule::Ptr<_1e02da32b_FnDecl> _138421_f = _1ed12370b_build_fn(_self_, _136543_tokens,true,true);
				if ((_138421_f != nullptr)) {
					if (_1e02da54b_is_anon(_138421_f.ptr())) {
						_1ed11b4d4_push_err(_self_.ptr(), _138421_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
					_1ed126c92_check_method_receiver(_self_.ptr(), _138421_f);
					if ((_138421_f.get()._field_generics.len() > 0LL)) {
						_1ed11b4d4_push_err(_self_.ptr(), _138421_f.get()._field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					}
					_138421_f.get()._field_public=_137421_is_pub;
					_136617_methods = jule::alloc_for_append(_136617_methods,1);_136617_methods.__push(_138421_f);
				}
			}
			_iter_next_201323342:;
			++it;
			goto _iter_begin_201323342;
		}
		_iter_end_201323342:;
	}
	return _136617_methods;
}



inline jule::Ptr<_1e02e2443_TraitDecl> _1ed127501_build_trait_decl(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _140041_tokens) {
	if ((_140041_tokens.len() < 3LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _140041_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e02e2443_TraitDecl> _140517_t = jule::new_ptr<_1e02e2443_TraitDecl>(_1e02e2443_TraitDecl(_140041_tokens[1LL],_1e02c1d07_Token(),jule::Str(),jule::Bool(),jule::Slice<jule::Ptr<_1e02da32b_FnDecl>>()));
	if (_140517_t.get()._field_token._field_id != static_cast<jule::U32>(2LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _140517_t.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	_140517_t.get()._field_ident=_140517_t.get()._field_token._field_kind;
	jule::I32 _141317_i = 2LL;
	jule::Slice<_1e02c1d07_Token> _141417_body_tokens = _1ed1189ed_range(_141317_i,jule::Str("{", 1),jule::Str("}", 1),_140041_tokens);
	if ((_141417_body_tokens == nullptr)) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _140517_t.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_141317_i < static_cast<jule::I32>(static_cast<jule::I32>(_140041_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _140041_tokens[_141317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_140517_t.get()._field_methods=_1ed127149_build_trait_methods(_self_, _141417_body_tokens);
	_140517_t.get()._field_end=_140041_tokens[(_141317_i - 1LL)];
	return _140517_t;
}



inline jule::Ptr<_1e02da32b_FnDecl> _1ed1278a8_build_cpp_link_fn(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _142941_tokens) {
	_142941_tokens=_142941_tokens.slice(1LL);
	jule::Ptr<_1e02da32b_FnDecl> _143117_f = _1ed12370b_build_fn(_self_, _142941_tokens,false,true);
	if ((_143117_f != nullptr)) {
		if (_1e02da54b_is_anon(_143117_f.ptr())) {
			_1ed11b4d4_push_err(_self_.ptr(), _143117_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		_143117_f.get()._field_cpp_linked=true;
	}
	return _143117_f;
}



inline jule::Ptr<_1e02daea8_VarDecl> _1ed127c60_build_cpp_link_var(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _144142_tokens) {
	_144142_tokens=_144142_tokens.slice(1LL);
	jule::Ptr<_1e02daea8_VarDecl> _144317_v = _1ed11ea26_build_var(_self_, _144142_tokens);
	if ((_144317_v != nullptr)) {
		_144317_v.get()._field_cpp_linked=true;
		if ((_144317_v.get()._field_expr != nullptr)) {
			_1ed11b4d4_push_err(_self_.ptr(), _144317_v.get()._field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		}
	}
	return _144317_v;
}



inline jule::Ptr<_1e02e1de3_StructDecl> _1ed128117_build_cpp_link_struct(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _145345_tokens) {
	_145345_tokens=_145345_tokens.slice(1LL);
	jule::Ptr<_1e02e1de3_StructDecl> _145517_s = _1ed126973_build_struct_decl(_self_, _145345_tokens);
	if ((_145517_s != nullptr)) {
		_145517_s.get()._field_cpp_linked=true;
	}
	return _145517_s;
}



inline jule::Ptr<_1e02dde01_TypeAliasDecl> _1ed128513_build_cpp_link_type_alias(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _146249_tokens) {
	_146249_tokens=_146249_tokens.slice(1LL);
	jule::Ptr<_1e02dde01_TypeAliasDecl> _146417_t = _1ed11d86b_build_type_alias_decl(_self_, _146249_tokens);
	if ((_146417_t != nullptr)) {
		_146417_t.get()._field_cpp_linked=true;
	}
	return _146417_t;
}



inline jule::Ptr<_1e02e009a_UseDecl> _1ed1288a9_build_cpp_link_use(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _147142_tokens) {
	if ((_147142_tokens.len() == 1LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _147142_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_147142_tokens=_147142_tokens.slice(1LL);
	
	return _1ed125136_build_use_decl(_self_.ptr(), _147142_tokens,true);
}



inline jule::Any _1ed128c61_build_cpp_link(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _148239_tokens) {
	_1e02c1d07_Token _148317_token = _148239_tokens[0LL];
	if ((_148239_tokens.len() == 1LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _148317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	_148317_token=_148239_tokens[1LL];
	{
		auto &_match_expr{ _148317_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(19LLU)) {
			_case_begin_2013400a6:;
			{
				return jule::Any(_1ed1288a9_build_cpp_link_use(_self_, _148239_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(33LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
			_case_begin_20134011c:;
			{
				return jule::Any(_1ed1278a8_build_cpp_link_fn(_self_, _148239_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(9LLU) || _match_expr == static_cast<jule::U32>(34LLU)) {
			_case_begin_201340183:;
			{
				return jule::Any(_1ed127c60_build_cpp_link_var(_self_, _148239_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(25LLU)) {
			_case_begin_2013401e9:;
			{
				return jule::Any(_1ed128117_build_cpp_link_struct(_self_, _148239_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(10LLU)) {
			_case_begin_201340aac:;
			{
				return jule::Any(_1ed128513_build_cpp_link_type_alias(_self_, _148239_tokens));
			}
		}
		else {
			_case_begin_201340040:;
			{
				_1ed11b4d4_push_err(_self_.ptr(), _148317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_20133eeda:;
	}
	return jule::Any(nullptr);
}



inline jule::Ptr<_1e02da32b_FnDecl> _1ed129118_get_method(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _151335_tokens) {
	jule::I32 _151417_i = 0LL;
	_1e02c1d07_Token _151517_token = _151335_tokens[_151417_i];
	if (_151517_token._field_id == static_cast<jule::U32>(38LLU)) {
		if ((_151417_i + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_151335_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _151517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_151417_i)++;
		_151517_token=_151335_tokens[_151417_i];
	}
	if (_151517_token._field_id == static_cast<jule::U32>(35LLU)) {
		if ((_151417_i + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_151335_tokens.len()))) {
			_1ed11b4d4_push_err(_self_.ptr(), _151517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_151417_i)++;
		_151517_token=_151335_tokens[_151417_i];
	}
	if (_151517_token._field_id != static_cast<jule::U32>(33LLU)) {
		_1ed11b4d4_push_err(_self_.ptr(), _151517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e02da32b_FnDecl> _153917_f = _1ed12370b_build_fn(_self_, _151335_tokens,true,false);
	if ((_153917_f != nullptr) && _1e02da54b_is_anon(_153917_f.ptr())) {
		_1ed11b4d4_push_err(_self_.ptr(), _153917_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _153917_f;
}



inline void _1ed129514_parse_impl_body(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<_1e02e2993_Impl>& _154640_ipl,jule::Slice<_1e02c1d07_Token>& _154657_tokens) {
	jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _154717_stmts = _1ed0e83c3_split_stmts(_154657_tokens);
	{
		auto &expr = _154717_stmts;
		auto it = expr.begin();
		_iter_begin_20134b6ab:;
		if (it != expr.end()) {
			jule::Ptr<_1ed0e7eb6_Stmt> _20134b7dd_stmt = *it;
			{
				_154657_tokens=_20134b7dd_stmt.get()._field_tokens;
				_1e02c1d07_Token _155021_token = _154657_tokens[0LL];
				jule::Bool _155121_is_pub = false;
				{
					auto &_match_expr{ _155021_token._field_id };
					
					if (_match_expr == static_cast<jule::U32>(39LLU)) {
						_case_begin_20134cb41:;
						{
							_1ed11c45d_push_directive(_self_.ptr(), _1ed11c13e_build_directive(_self_.ptr(), _154657_tokens));
							goto _iter_next_20134b6ab;
						}
					}
					else if (_match_expr == static_cast<jule::U32>(21LLU)) {
						_case_begin_20134cba7:;
						{
							_155121_is_pub=true;
							if ((_154657_tokens.len() == 1LL)) {
								_1ed11b4d4_push_err(_self_.ptr(), _154657_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_20134b6ab;
							}
							_154657_tokens=_154657_tokens.slice(1LL);
							if ((_154657_tokens.len() > 0LL)) {
								_155021_token=_154657_tokens[0LL];
							}
						}
					}
					_match_end_20134cab9:;
				}
				{
					auto &_match_expr{ _155021_token._field_id };
					
					if (_match_expr == static_cast<jule::U32>(9LLU)) {
						_case_begin_20134dc52:;
						{
							jule::Ptr<_1e02daea8_VarDecl> _157025_v = _1ed11ea26_build_var(_self_, _154657_tokens);
							if ((_157025_v != nullptr)) {
								_157025_v.get()._field_public=_155121_is_pub;
								_154640_ipl.get()._field_statics = jule::alloc_for_append(_154640_ipl.get()._field_statics,1);_154640_ipl.get()._field_statics.__push(_157025_v);
							}
						}
					}
					else if (_match_expr == static_cast<jule::U32>(38LLU) || _match_expr == static_cast<jule::U32>(33LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
						_case_begin_20134dcb8:;
						{
							jule::Ptr<_1e02da32b_FnDecl> _157825_f = _1ed129118_get_method(_self_, _154657_tokens);
							if ((_157825_f != nullptr)) {
								_1ed126c92_check_method_receiver(_self_.ptr(), _157825_f);
								_1ed12a48d_apply_fn_meta(_self_.ptr(), _157825_f,_155121_is_pub);
								_154640_ipl.get()._field_methods = jule::alloc_for_append(_154640_ipl.get()._field_methods,1);_154640_ipl.get()._field_methods.__push(_157825_f);
							}
						}
					}
					else {
						_case_begin_20134d180:;
						{
							_1ed11b4d4_push_err(_self_.ptr(), _155021_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_20134b6ab;
						}
					}
					_match_end_20134d12a:;
				}
			}
			_iter_next_20134b6ab:;
			++it;
			goto _iter_begin_20134b6ab;
		}
		_iter_end_20134b6ab:;
	}
}



inline jule::Ptr<_1e02e2993_Impl> _1ed1298bb_build_impl(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _159134_tokens) {
	_1e02c1d07_Token _159217_token = _159134_tokens[0LL];
	if ((_159134_tokens.len() < 2LL)) {
		_1ed11b4d4_push_err(_self_.ptr(), _159217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::I32 _159817_i = 1LL;
	jule::Ptr<_1e01c3db3_TypeDecl> _160018_base;
	jule::Bool _160028_ok;
	std::tie(_160018_base,_160028_ok) = _1ed11d4b4_build_type(_self_, _159134_tokens,(&(_159817_i)),true);
	if ((!(_160028_ok))) {
		return nullptr;
	}
	if (_159817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_159134_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _159217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e02e2993_Impl> _160917_ipl = jule::new_ptr<_1e02e2993_Impl>(_1e02e2993_Impl(_1e02c1d07_Token(),_160018_base,jule::Ptr<_1e01c3db3_TypeDecl>(),jule::Slice<jule::Ptr<_1e02da32b_FnDecl>>(),jule::Slice<jule::Ptr<_1e02daea8_VarDecl>>()));
	_159217_token=_159134_tokens[_159817_i];
	if (_159217_token._field_id != static_cast<jule::U32>(12LLU)) {
		if ((_159217_token._field_id == static_cast<jule::U32>(3LLU)) && (_159217_token._field_kind == jule::Str("{", 1))) {
			std::tie(_160917_ipl.get()._field_base,_160917_ipl.get()._field_dest) = std::make_tuple(_160917_ipl.get()._field_dest,_160917_ipl.get()._field_base);
			goto _julec_label_body;
		}
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _159217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	(_159817_i)++;
	if (_159817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_159134_tokens.len()))) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _159217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie(_160917_ipl.get()._field_dest,_160028_ok) = _1ed11d4b4_build_type(_self_, _159134_tokens,(&(_159817_i)),true);
	if ((!(_160028_ok))) {
		return nullptr;
	}
	if (_159817_i >= static_cast<jule::I32>(static_cast<jule::I32>(_159134_tokens.len()))) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _159217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_body:;
	jule::Slice<_1e02c1d07_Token> _164917_body_tokens = _1ed1189ed_range(_159817_i,jule::Str("{", 1),jule::Str("}", 1),_159134_tokens);
	if ((_164917_body_tokens == nullptr)) {
		_1ed11ac31_stop(_self_.ptr());
		_1ed11b4d4_push_err(_self_.ptr(), _159217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_159817_i < static_cast<jule::I32>(static_cast<jule::I32>(_159134_tokens.len()))) {
		_1ed11b4d4_push_err(_self_.ptr(), _159134_tokens[_159817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_160917_ipl.get()._field_end=_159134_tokens[(_159817_i - 1LL)];
	_1ed129514_parse_impl_body(_self_, _160917_ipl,_164917_body_tokens);
	return _160917_ipl;
}



inline jule::Any _1ed129c73_build_node_data(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _166440_tokens) {
	_1e02c1d07_Token _166517_token = _166440_tokens[0LL];
	{
		auto &_match_expr{ _166517_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(19LLU)) {
			_case_begin_201366a7d:;
			{
				
				return jule::Any(_1ed125136_build_use_decl(_self_.ptr(), _166440_tokens,false));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(33LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
			_case_begin_201365dac:;
			{
				jule::Ptr<_1e02da32b_FnDecl> _167221_f = _1ed12370b_build_fn(_self_, _166440_tokens,false,false);
				if ((_167221_f != nullptr)) {
					_167221_f.get()._field_global=true;
					if (_1e02da54b_is_anon(_167221_f.ptr())) {
						_1ed11b4d4_push_err(_self_.ptr(), _167221_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
				}
				return jule::Any(_167221_f);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(34LLU) || _match_expr == static_cast<jule::U32>(9LLU) || _match_expr == static_cast<jule::U32>(36LLU) || _match_expr == static_cast<jule::U32>(38LLU)) {
			_case_begin_201365e23:;
			{
				return jule::Any(_1ed11ea26_build_var(_self_, _166440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(10LLU)) {
			_case_begin_201366808:;
			{
				return jule::Any(_1ed11d86b_build_type_alias_decl(_self_, _166440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(24LLU)) {
			_case_begin_20136686e:;
			{
				return jule::Any(_1ed125d29_build_enum_decl(_self_, _166440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(25LLU)) {
			_case_begin_2013668d5:;
			{
				return jule::Any(_1ed126973_build_struct_decl(_self_, _166440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(29LLU)) {
			_case_begin_20136694b:;
			{
				return jule::Any(_1ed127501_build_trait_decl(_self_, _166440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(30LLU)) {
			_case_begin_201366bd2:;
			{
				return jule::Any(_1ed1298bb_build_impl(_self_, _166440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_201366c48:;
			{
				return _1ed128c61_build_cpp_link(_self_, _166440_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(39LLU)) {
			_case_begin_201366cae:;
			{
				return jule::Any(_1ed11c13e_build_directive(_self_.ptr(), _166440_tokens));
			}
		}
		else {
			_case_begin_2013655e8:;
			{
				_1ed11b4d4_push_err(_self_.ptr(), _166517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_201365c8b:;
	}
}



inline void _1ed12a092_check_directive(_1ed11a88a_Parser* _self_,_1e01be3a8_Node& _170535_node) {
	if (((*_self_)._field_directives == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ _170535_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02812b1_Directive>>()) {
			_case_begin_2013704d2:;
			{
				goto _match_end_20136e811;
			}
		}
		else {
			_case_begin_20136edb6:;
			{
				if (((*_self_)._field_directives.len() != 0LL)) {
					_1ed11b4d4_push_err(&(*_self_), (*_self_)._field_directives[0LL].get()._field_tag,jule::Str("this directive is out of scope, cant assign to any define", 57),jule::Slice<jule::Any>());
				}
				(*_self_)._field_directives=nullptr;
			}
		}
		_match_end_20136e811:;
	}
}



inline void _1ed12a48d_apply_fn_meta(_1ed11a88a_Parser* _self_,jule::Ptr<_1e02da32b_FnDecl>& _172237_f,jule::Bool _172249_is_pub) {
	_172237_f.get()._field_public=_172249_is_pub;
	_172237_f.get()._field_directives=(*_self_)._field_directives;
	(*_self_)._field_directives=nullptr;
}



inline void _1ed12a889_apply_meta(_1ed11a88a_Parser* _self_,_1e01be3a8_Node& _172834_node,jule::Bool _172846_is_pub) {
	{
		auto &_match_expr{ _172834_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02daea8_VarDecl>>()) {
			_case_begin_20137366c:;
			{
				jule::Ptr<_1e02daea8_VarDecl> _173121_v = _172834_node._field_data.operator jule::Ptr<_1e02daea8_VarDecl>();
				if ((_173121_v == nullptr)) {
					return;
				}
				_173121_v.get()._field_public=_172846_is_pub;
				_173121_v.get()._field_directives=(*_self_)._field_directives;
				(*_self_)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02da32b_FnDecl>>()) {
			_case_begin_2013736d3:;
			{
				jule::Ptr<_1e02da32b_FnDecl> _173921_f = _172834_node._field_data.operator jule::Ptr<_1e02da32b_FnDecl>();
				if ((_173921_f == nullptr)) {
					return;
				}
				_1ed12a48d_apply_fn_meta(&(*_self_), _173921_f,_172846_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dde01_TypeAliasDecl>>()) {
			_case_begin_201373749:;
			{
				jule::Ptr<_1e02dde01_TypeAliasDecl> _174521_tad = _172834_node._field_data.operator jule::Ptr<_1e02dde01_TypeAliasDecl>();
				if ((_174521_tad == nullptr)) {
					return;
				}
				_174521_tad.get()._field_public=_172846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02e0d9d_EnumDecl>>()) {
			_case_begin_2013737b0:;
			{
				jule::Ptr<_1e02e0d9d_EnumDecl> _175121_ed = _172834_node._field_data.operator jule::Ptr<_1e02e0d9d_EnumDecl>();
				if ((_175121_ed == nullptr)) {
					return;
				}
				_175121_ed.get()._field_public=_172846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02e1de3_StructDecl>>()) {
			_case_begin_201373a35:;
			{
				jule::Ptr<_1e02e1de3_StructDecl> _175721_sd = _172834_node._field_data.operator jule::Ptr<_1e02e1de3_StructDecl>();
				if ((_175721_sd == nullptr)) {
					return;
				}
				_175721_sd.get()._field_directives=(*_self_)._field_directives;
				(*_self_)._field_directives=nullptr;
				_175721_sd.get()._field_public=_172846_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02e2443_TraitDecl>>()) {
			_case_begin_201373a9b:;
			{
				jule::Ptr<_1e02e2443_TraitDecl> _176521_td = _172834_node._field_data.operator jule::Ptr<_1e02e2443_TraitDecl>();
				if ((_176521_td == nullptr)) {
					return;
				}
				_176521_td.get()._field_public=_172846_is_pub;
			}
		}
		else {
			_case_begin_201373606:;
			{
				if (_172846_is_pub) {
					_1ed11b4d4_push_err(&(*_self_), _172834_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_2013735a1:;
	}
}



inline void _1ed12aba8_check_use_decl(_1ed11a88a_Parser* _self_,_1e01be3a8_Node& _177734_node) {
	{
		auto &_match_expr{ _177734_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02e009a_UseDecl>>()) {
			_case_begin_20137b7eb:;
			{
				goto _match_end_20137ba60;
			}
		}
		else {
			_case_begin_20137bab5:;
			{
				return;
			}
		}
		_match_end_20137ba60:;
	}
	if (((*_self_)._field_ast.get()._field_nodes.len() > 0LL)) {
		_1ed11b4d4_push_err(&(*_self_), _177734_node._field_token,jule::Str("use declarations must declared top of source code", 49),jule::Slice<jule::Any>());
		_1ed11b8d0_push_suggestion(&(*_self_), jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	}
}



inline std::tuple<jule::Bool,jule::Any> _1ed12b0a4_build_general_scope_node_data(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token> _179253_st) {
	jule::Bool _179268_is_pub = jule::Bool();
	jule::Any _179282_data = jule::Any();
	if (_179253_st[0LL]._field_id == static_cast<jule::U32>(21LLU)) {
		_179268_is_pub=true;
		_179253_st=_179253_st.slice(1LL);
		if ((_179253_st.len() == 0LL)) {
			_1ed11b4d4_push_err(_self_.ptr(), _179253_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_179268_is_pub,_179282_data);
		}
	}
	_179282_data=_1ed129c73_build_node_data(_self_, _179253_st);
	return std::make_tuple(_179268_is_pub,_179282_data);
}



inline _1e01be3a8_Node _1ed12b44a_parse_node(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _180735_st) {
	_1e01be3a8_Node _180817_node = _1e01be3a8_Node(_180735_st[0LL],jule::Any());
	jule::Bool _181214_is_pub;
	jule::Any _181226_data;
	std::tie(_181214_is_pub,_181226_data) = _1ed12b0a4_build_general_scope_node_data(_self_, _180735_st);
	if (_181226_data == jule::Any(jule::Any(nullptr))) {
		return _180817_node;
	}
	_180817_node._field_data=_181226_data;
	_1ed12a889_apply_meta(_self_.ptr(), _180817_node,_181214_is_pub);
	_1ed12a092_check_directive(_self_.ptr(), _180817_node);
	_1ed12aba8_check_use_decl(_self_.ptr(), _180817_node);
	return _180817_node;
}



inline void _1ed12b769_append_node(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Slice<_1e02c1d07_Token>& _182536_st) {
	if ((_182536_st.len() == 0LL)) {
		return;
	}
	_1e01be3a8_Node _183017_node = _1ed12b44a_parse_node(_self_, _182536_st);
	if ((_183017_node._field_data == jule::Any(jule::Any(nullptr))) || _1ed11b00b_stopped(_self_.ptr())) {
		return;
	}
	{
		
		if (_1e025331b_is_directive(&_183017_node)) {
			_case_begin_20138776e:;
			{
				_1ed11c45d_push_directive(_self_.ptr(), _183017_node._field_data.operator jule::Ptr<_1e02812b1_Directive>());
			}
		}
		else if (_1e027644e_is_use_decl(&_183017_node)) {
			_case_begin_20138742d:;
			{
				_self_.get()._field_ast.get()._field_use_decls = jule::alloc_for_append(_self_.get()._field_ast.get()._field_use_decls,1);_self_.get()._field_ast.get()._field_use_decls.__push(_183017_node._field_data.operator jule::Ptr<_1e02e009a_UseDecl>());
			}
		}
		else if (_1e01e9c96_is_decl(&_183017_node) || _1e026a465_is_impl(&_183017_node)) {
			_case_begin_201387494:;
			{
				_self_.get()._field_ast.get()._field_nodes = jule::alloc_for_append(_self_.get()._field_ast.get()._field_nodes,1);_self_.get()._field_ast.get()._field_nodes.__push(_183017_node);
			}
		}
		else {
			_case_begin_2013873b7:;
			{
				_1ed11b4d4_push_err(_self_.ptr(), _183017_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_201386a9d:;
	}
}



inline void _1ed12bd1e_remove_range(_1ed11a88a_Parser* _self_,jule::I32 _184831_i,jule::Str _184839_kind,jule::Slice<_1e02c1d07_Token>& _184851_tokens,jule::Slice<jule::I32>& _184873_ranges) {
	jule::Str _184913_close = _1ed119669_get_close_kind_of_brace(_184839_kind);
	for (; (_184831_i >= 0LL); (_184831_i)--) {
		{
			_1e02c1d07_Token _185117_tok = _184851_tokens[_184873_ranges[_184831_i]];
			if (_185117_tok._field_kind != _184913_close) {
				goto _iter_next_20138c09d;
			}
			_184873_ranges=jule::append(_184873_ranges.slice(0LL,_184831_i),_184873_ranges.slice((_184831_i + 1LL)));
			goto _iter_end_20138c09d;
		}
	_iter_next_20138c09d:;
	}
	_iter_end_20138c09d:;
}



inline void _1ed12c33b_push_wrong_order_close_err(_1ed11a88a_Parser* _self_,_1e02c1d07_Token& _186046_t,jule::Slice<_1e02c1d07_Token>& _186057_tokens,jule::Slice<jule::I32>& _186075_ranges) {
	{
		auto &_match_expr{ _186057_tokens[_186075_ranges[_186075_ranges.len() - 1LL]]._field_kind };
		
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_20138eeb3:;
			{
				_1ed11b4d4_push_err(&(*_self_), _186046_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_201390029:;
			{
				_1ed11b4d4_push_err(&(*_self_), _186046_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_201390090:;
			{
				_1ed11b4d4_push_err(&(*_self_), _186046_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_20138ee2a:;
	}
}



inline void _1ed12c8d0_push_range_close(_1ed11a88a_Parser* _self_,_1e02c1d07_Token _187135_t,jule::Str _187145_left,jule::Slice<_1e02c1d07_Token>& _187157_tokens,jule::Slice<jule::I32>& _187179_ranges) {
	jule::I32 _187213_n = _187179_ranges.len();
	if ((_187213_n == 0LL)) {
		{
			auto &_match_expr{ _187135_t._field_kind };
			
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_201393a44:;
				{
					_1ed11b4d4_push_err(&(*_self_), _187135_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_201393aaa:;
				{
					_1ed11b4d4_push_err(&(*_self_), _187135_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_201393b21:;
				{
					_1ed11b4d4_push_err(&(*_self_), _187135_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_201393978:;
		}
		return;
	} else if (_187157_tokens[_187179_ranges[(_187213_n - 1LL)]]._field_kind != _187145_left) {
		_1ed12c33b_push_wrong_order_close_err(&(*_self_), _187135_t,_187157_tokens,_187179_ranges);
	}
	_1ed12bd1e_remove_range(&(*_self_), static_cast<jule::I32>((_187213_n - 1LL)),_187135_t._field_kind,_187157_tokens,_187179_ranges);
}



inline void _1ed12cbee_check_ranges(_1ed11a88a_Parser* _self_,jule::Slice<_1e02c1d07_Token>& _188932_tokens) {
	jule::Slice<jule::I32> _189017_ranges = nullptr;
	{
		auto &expr = _188932_tokens;
		auto it = expr.begin();
		_iter_begin_201397e22:;
		if (it != expr.end()) {
			jule::I32 _201398054_i = it - expr.begin();
			_1e02c1d07_Token &_2013982a7_token = *it;
			{
				if (_2013982a7_token._field_id != static_cast<jule::U32>(3LLU)) {
					goto _iter_next_201397e22;
				}
				{
					auto &_match_expr{ _2013982a7_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_2013990ee:;
						{
							_189017_ranges = jule::alloc_for_append(_189017_ranges,1);_189017_ranges.__push(_201398054_i);
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_201399165:;
						{
							_1ed12c8d0_push_range_close(&(*_self_), _2013982a7_token,jule::Str("(", 1),_188932_tokens,_189017_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_2013991dc:;
						{
							_1ed12c8d0_push_range_close(&(*_self_), _2013982a7_token,jule::Str("{", 1),_188932_tokens,_189017_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_201399253:;
						{
							_1ed12c8d0_push_range_close(&(*_self_), _2013982a7_token,jule::Str("[", 1),_188932_tokens,_189017_ranges);
						}
					}
					_match_end_201399099:;
				}
			}
			_iter_next_201397e22:;
			++it;
			_201398054_i++;
			goto _iter_begin_201397e22;
		}
		_iter_end_201397e22:;
	}
	{
		auto &expr = _189017_ranges;
		auto it = expr.begin();
		_iter_begin_20139840b:;
		if (it != expr.end()) {
			jule::I32 _20139b3ed_i = *it;
			{
				_1e02c1d07_Token _191117_token = _188932_tokens[_20139b3ed_i];
				{
					auto &_match_expr{ _191117_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_20139c3ee:;
						{
							_1ed11b4d4_push_err(&(*_self_), _191117_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_20139c465:;
						{
							_1ed11b4d4_push_err(&(*_self_), _191117_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_20139c4cb:;
						{
							_1ed11b4d4_push_err(&(*_self_), _191117_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_20139c366:;
				}
			}
			_iter_next_20139840b:;
			++it;
			goto _iter_begin_20139840b;
		}
		_iter_end_20139840b:;
	}
}



inline void _1ed12d01d_parse(jule::Ptr<_1ed11a88a_Parser> _self_,jule::Ptr<_1e02c7e51_File>& _192330_f) {
	_self_.get()._field_ast=jule::new_ptr<_1e01bcb7b_Ast>(_1e01bcb7b_Ast(_192330_f,jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Slice<jule::Ptr<_1e02e009a_UseDecl>>(),jule::Slice<_1e01be3a8_Node>()));
	_1ed12cbee_check_ranges(_self_.ptr(), _192330_f.get()._field_tokens);
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;
	}
	jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _193317_stmts = _1ed0e83c3_split_stmts(_192330_f.get()._field_tokens);
	jule::I32 _193617_i = 0LL;
	_julec_label_iter:;
	for (; _193617_i < static_cast<jule::I32>(static_cast<jule::I32>(_193317_stmts.len())); (_193617_i)++) {
		{
			jule::Ptr<_1ed0e7eb6_Stmt> _193921_stmt = _193317_stmts[_193617_i];
			if ((_193921_stmt.get()._field_tokens.len() == 0LL)) {
				return;
			}
			jule::Any _194425_data;
			std::tie(std::ignore,_194425_data) = _1ed12b0a4_build_general_scope_node_data(_self_, _193921_stmt.get()._field_tokens);
			if (_194425_data == jule::Any(jule::Any(nullptr))) {
				goto _iter_end_2013a1414;
			}
			if (_1ed11b00b_stopped(_self_.ptr())) {
				return;
			}
			{
				auto &_match_expr{ _194425_data };
				
				if (_match_expr.type_is<jule::Ptr<_1e02812b1_Directive>>()) {
					_case_begin_2013a39bb:;
					{
						jule::Ptr<_1e02812b1_Directive> _195525_d = _194425_data.operator jule::Ptr<_1e02812b1_Directive>();
						if ((_195525_d != nullptr) && _208de44c1_is_top_directive(_195525_d.get()._field_tag._field_kind)) {
							_self_.get()._field_ast.get()._field_top_directives = jule::alloc_for_append(_self_.get()._field_ast.get()._field_top_directives,1);_self_.get()._field_ast.get()._field_top_directives.__push(_195525_d);
						} else {
							goto _iter_end_2013a1414;
						}
					}
				}
				else {
					_case_begin_2013a3845:;
					{
						goto _iter_end_2013a1414;
					}
				}
				_match_end_2013a3768:;
			}
		}
	_iter_next_2013a1414:;
	}
	_iter_end_2013a1414:;
	_self_.get()._field_errors=nullptr;
	for (; _193617_i < static_cast<jule::I32>(static_cast<jule::I32>(_193317_stmts.len())); (_193617_i)++) {
		{
			jule::Ptr<_1ed0e7eb6_Stmt> _197021_stmt = _193317_stmts[_193617_i];
			_1ed12b769_append_node(_self_, _197021_stmt.get()._field_tokens);
			if (_1ed11b00b_stopped(_self_.ptr())) {
				goto _iter_end_2013a15ac;
			}
		}
	_iter_next_2013a15ac:;
	}
	_iter_end_2013a15ac:;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed11a88a_Parser _Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _1ed130608_push_err(_1ed12ee54_TypeBuilder* _self_,_1e02c1d07_Token _7827_token,jule::Str _7841_fmt) {
	if ((*_self_)._field_err) {
		_1ed11b4d4_push_err((*_self_)._field_p.ptr(), _7827_token,_7841_fmt,jule::Slice<jule::Any>());
	}
}



inline void _1ed130a04_push_suggestion(_1ed12ee54_TypeBuilder* _self_,jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*_self_)._field_err) {
		_1ed11b8d0_push_suggestion((*_self_)._field_p.ptr(), _8534_fmt,_8547_args);
	}
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed130cce_build_prim(_1ed12ee54_TypeBuilder* _self_) {
	jule::Ptr<_1e01c3db3_TypeDecl> _9217_t = _1ed12e481_build_prim_type((*_self_)._field_tokens[(*((*_self_)._field_i))]);
	((*((*_self_)._field_i)))++;
	return _9217_t;
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed1310a9_build_namespace(_1ed12ee54_TypeBuilder* _self_) {
	jule::Ptr<_1e01c3db3_TypeDecl> _9817_t = jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl((*_self_)._field_tokens[(*((*_self_)._field_i))],jule::Any()));
	jule::Ptr<_1e0275bbd_NamespaceTypeDecl> _10217_nst = jule::new_ptr<_1e0275bbd_NamespaceTypeDecl>(_1e0275bbd_NamespaceTypeDecl());
	jule::I32 _10317_n = 0LL;
	for (; (*((*_self_)._field_i)) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len())); ((*((*_self_)._field_i)))++) {
		{
			_1e02c1d07_Token _10521_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
			if (((_10317_n & 1LL) == 0LL)) {
				if (_10521_token._field_id != static_cast<jule::U32>(2LLU)) {
					_1ed130608_push_err(&(*_self_), _10521_token,jule::Str("invalid syntax", 14));
					_1ed130a04_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				}
				_10217_nst.get()._field_idents = jule::alloc_for_append(_10217_nst.get()._field_idents,1);_10217_nst.get()._field_idents.__push(_10521_token);
			} else if (_10521_token._field_id != static_cast<jule::U32>(23LLU)) {
				goto _iter_end_2013abdae;
			}
			(_10317_n)++;
		}
	_iter_next_2013abdae:;
	}
	_iter_end_2013abdae:;
	_10217_nst.get()._field_idents=_10217_nst.get()._field_idents.slice(0LL,(_10217_nst.get()._field_idents.len() - 1LL));
	((*((*_self_)._field_i)))--;
	_10217_nst.get()._field_kind=_1ed131939_build_ident(&(*_self_)).get()._field_kind.operator jule::Ptr<_1e029b2ba_IdentTypeDecl>();
	_9817_t.get()._field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _1ed131384_build_generics(_1ed12ee54_TypeBuilder* _self_) {
	if ((*((*_self_)._field_i)) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) {
		return nullptr;
	}
	_1e02c1d07_Token _13113_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	if ((_13113_token._field_id != static_cast<jule::U32>(3LLU)) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _13617_parts = _1ed13165e_ident_generics(&(*_self_));
	if ((_13617_parts.len() == 0LL)) {
		_1ed130608_push_err(&(*_self_), _13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>> _14217_types = jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>::alloc(0LL,static_cast<jule::I32>(_13617_parts.len()));
	{
		auto &expr = _13617_parts;
		auto it = expr.begin();
		_iter_begin_2013b7282:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2013b76c2_part = *it;
			{
				jule::I32 _14421_j = 0LL;
				jule::Ptr<_1e01c3db3_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = _1ed11d4b4_build_type((*_self_)._field_p, _2013b76c2_part,(&(_14421_j)),true);
				if (_14421_j < static_cast<jule::I32>(static_cast<jule::I32>(_2013b76c2_part.len()))) {
					_1ed130608_push_err(&(*_self_), _2013b76c2_part[_14421_j],jule::Str("invalid syntax", 14));
				}
				_14217_types = jule::alloc_for_append(_14217_types,1);_14217_types.__push(_14522_t);
			}
			_iter_next_2013b7282:;
			++it;
			goto _iter_begin_2013b7282;
		}
		_iter_end_2013b7282:;
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1ed13165e_ident_generics(_1ed12ee54_TypeBuilder* _self_) {
	jule::I32 _15513_first = (*((*_self_)._field_i));
	jule::I32 _15617_range_n = 0LL;
	for (; (*((*_self_)._field_i)) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len())); ((*((*_self_)._field_i)))++) {
		{
			_1e02c1d07_Token _15817_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
			if (_15817_token._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _15817_token._field_kind };
					
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_2013bb3a7:;
						{
							(_15617_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_2013bb72b:;
						{
							(_15617_range_n)--;
						}
					}
					_match_end_2013bb6c6:;
				}
			}
			if ((_15617_range_n == 0LL)) {
				((*((*_self_)._field_i)))++;
				goto _iter_end_2013b8abe;
			}
		}
	_iter_next_2013b8abe:;
	}
	_iter_end_2013b8abe:;
	jule::Slice<_1e02c1d07_Token> _17017_tokens = (*_self_)._field_tokens.slice((_15513_first + 1LL),((*((*_self_)._field_i)) - 1LL));
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _17118_parts;
	jule::Slice<_208de2238_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _1ed119317_parts(_17017_tokens,static_cast<jule::U32>(8LLU),true);
	if ((*_self_)._field_err) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed131939_build_ident(_1ed12ee54_TypeBuilder* _self_) {
	if ((((*((*_self_)._field_i)) + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) && ((*_self_)._field_tokens[((*((*_self_)._field_i)) + 1LL)]._field_id == static_cast<jule::U32>(23LLU))) {
		return _1ed1310a9_build_namespace(&(*_self_));
	}
	_1e02c1d07_Token _18217_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	jule::Ptr<_1e029b2ba_IdentTypeDecl> _18317_it = jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>()));
	((*((*_self_)._field_i)))++;
	_18317_it.get()._field_generics=_1ed131384_build_generics(&(*_self_));
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_18217_token,jule::Any(jule::Any(_18317_it))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed131c14_build_cpp_link(_1ed12ee54_TypeBuilder* _self_) {
	if ((((*((*_self_)._field_i)) + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) || ((*_self_)._field_tokens[((*((*_self_)._field_i)) + 1LL)]._field_id != static_cast<jule::U32>(20LLU))) {
		_1ed130608_push_err(&(*_self_), (*_self_)._field_tokens[(*((*_self_)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	}
	(*((*_self_)._field_i))+=2LL;
	jule::Ptr<_1e01c3db3_TypeDecl> _20217_t = _1ed131939_build_ident(&(*_self_));
	_20217_t.get()._field_kind.operator jule::Ptr<_1e029b2ba_IdentTypeDecl>().get()._field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed131ede_build_fn(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _20817_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	jule::Ptr<_1e02da32b_FnDecl> _20917_f = _1ed12319a_build_fn_prototype((*_self_)._field_p, (*_self_)._field_tokens,(*((*_self_)._field_i)),false);
	if ((_20917_f == nullptr)) {
		return nullptr;
	}
	if ((!(_1e02da54b_is_anon(_20917_f.ptr())))) {
		_1ed130608_push_err(&(*_self_), _20917_f.get()._field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_20817_token,jule::Any(jule::Any(_20917_f))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed1322b9_build_ptr(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _22317_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	if (((*((*_self_)._field_i)) + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) {
		_1ed130608_push_err(&(*_self_), _22317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*_self_)._field_i)))++;
	if ((*_self_)._field_tokens[(*((*_self_)._field_i))]._field_id == static_cast<jule::U32>(35LLU)) {
		((*((*_self_)._field_i)))++;
		return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_22317_token,jule::Any(jule::Any(jule::new_ptr<_1e01c50b2_PtrTypeDecl>(_1e01c50b2_PtrTypeDecl(nullptr))))));
	}
	jule::Ptr<_1e01c3db3_TypeDecl> _24017_elem = _1ed13395d_step(&(*_self_));
	if ((_24017_elem == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_22317_token,jule::Any(jule::Any(jule::new_ptr<_1e01c50b2_PtrTypeDecl>(_1e01c50b2_PtrTypeDecl(_24017_elem))))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed132594_build_sptr(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _25417_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	if (((*((*_self_)._field_i)) + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) {
		_1ed130608_push_err(&(*_self_), _25417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*_self_)._field_i)))++;
	jule::Ptr<_1e01c3db3_TypeDecl> _26117_elem = _1ed13395d_step(&(*_self_));
	if ((_26117_elem == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_25417_token,jule::Any(jule::Any(jule::new_ptr<_1e0176184_SptrTypeDecl>(_1e0176184_SptrTypeDecl(_26117_elem))))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed13286e_build_op(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _27517_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	{
		auto &_match_expr{ _27517_token._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_2013d9b34:;
			{
				return _1ed1322b9_build_ptr(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_2013d9370:;
			{
				return _1ed132594_build_sptr(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_2013d93d6:;
			{
				return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_1e02c1d07_Token(),jule::Any(jule::Any(jule::new_ptr<_1e0176184_SptrTypeDecl>(_1e0176184_SptrTypeDecl(_1ed132594_build_sptr(&(*_self_))))))));
			}
		}
		else {
			_case_begin_2013d8935:;
			{
				_1ed130608_push_err(&(*_self_), _27517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_2013d92e8:;
	}
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed132b49_build_slc(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _29717_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	((*((*_self_)._field_i)))++;
	jule::Ptr<_1e01c3db3_TypeDecl> _29917_elem = _1ed13395d_step(&(*_self_));
	if ((_29917_elem == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_29717_token,jule::Any(jule::Any(jule::new_ptr<_1e025099a_SlcTypeDecl>(_1e025099a_SlcTypeDecl(_29917_elem))))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed132e24_build_arr(_1ed12ee54_TypeBuilder* _self_) {
	if ((*((*_self_)._field_i)) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) {
		_1ed130608_push_err(&(*_self_), (*_self_)._field_tokens[((*((*_self_)._field_i)) - 1LL)],jule::Str("type missing", 12));
		return nullptr;
	}
	jule::I32 _32013_expr_delta = (*((*_self_)._field_i));
	jule::Ptr<_1e01c3db3_TypeDecl> _32217_elem = _1ed13395d_step(&(*_self_));
	if ((_32217_elem == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1e0134b15_ArrTypeDecl> _32717_arrt = jule::new_ptr<_1e0134b15_ArrTypeDecl>(_1e0134b15_ArrTypeDecl(_32217_elem,jule::Ptr<_1e0181a63_Expr>()));
	jule::Slice<_1e02c1d07_Token> _33117_expr_tokens = (*_self_)._field_tokens.slice(0LL,_32013_expr_delta);
	std::tie(std::ignore,_33117_expr_tokens) = _1ed118d0b_range_last(_33117_expr_tokens);
	_33117_expr_tokens=_33117_expr_tokens.slice(1LL,(_33117_expr_tokens.len() - 1LL));
	_1e02c1d07_Token _33417_token = _33117_expr_tokens[0LL];
	if (((_33117_expr_tokens.len() == 1LL) && (_33417_token._field_id == static_cast<jule::U32>(7LLU))) && (_33417_token._field_kind == jule::Str("...", 3))) {
	} else {
		_32717_arrt.get()._field_size=_1ed11bc87_build_expr((*_self_)._field_p, _33117_expr_tokens);
	}
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_33417_token,jule::Any(jule::Any(_32717_arrt))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed1333a8_build_map(_1ed12ee54_TypeBuilder* _self_,jule::I32 _34728_colon,jule::Slice<_1e02c1d07_Token>& _34745_tokens) {
	_1e02c1d07_Token _34817_colon_token = (*_self_)._field_tokens[_34728_colon];
	if ((_34728_colon == 0LL) || ((_34728_colon + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_34745_tokens.len())))) {
		_1ed130608_push_err(&(*_self_), _34817_colon_token,jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Slice<_1e02c1d07_Token> _35317_key_tokens = _34745_tokens.slice(0LL,_34728_colon);
	jule::Slice<_1e02c1d07_Token> _35417_val_tokens = _34745_tokens.slice((_34728_colon + 1LL));
	jule::Ptr<_1e0181623_MapTypeDecl> _35517_mapt = jule::new_ptr<_1e0181623_MapTypeDecl>(_1e0181623_MapTypeDecl());
	jule::I32 _35717_j = 0LL;
	jule::Ptr<_1e01c3db3_TypeDecl> _35818_keyt;
	jule::Bool _35828_ok;
	std::tie(_35818_keyt,_35828_ok) = _1ed11d4b4_build_type((*_self_)._field_p, _35317_key_tokens,(&(_35717_j)),(*_self_)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < static_cast<jule::I32>(static_cast<jule::I32>(_35317_key_tokens.len()))) {
		_1ed130608_push_err(&(*_self_), _35317_key_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	_35517_mapt.get()._field_key=_35818_keyt;
	_35717_j=0LL;
	jule::Ptr<_1e01c3db3_TypeDecl> _36718_valt;
	std::tie(_36718_valt,_35828_ok) = _1ed11d4b4_build_type((*_self_)._field_p, _35417_val_tokens,(&(_35717_j)),(*_self_)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < static_cast<jule::I32>(static_cast<jule::I32>(_35417_val_tokens.len()))) {
		_1ed130608_push_err(&(*_self_), _35417_val_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	_35517_mapt.get()._field_val=_36718_valt;
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_34817_colon_token,jule::Any(jule::Any(_35517_mapt))));
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed133683_build_enumerable(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _38217_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	if (((((*((*_self_)._field_i)) + 2LL) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_tokens.len()))) || (_38217_token._field_id != static_cast<jule::U32>(3LLU))) || (_38217_token._field_kind != jule::Str("[", 1))) {
		_1ed130608_push_err(&(*_self_), _38217_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*_self_)._field_i)))++;
	_38217_token=(*_self_)._field_tokens[(*((*_self_)._field_i))];
	if ((_38217_token._field_id == static_cast<jule::U32>(3LLU)) && (_38217_token._field_kind == jule::Str("]", 1))) {
		return _1ed132b49_build_slc(&(*_self_));
	}
	((*((*_self_)._field_i)))--;
	jule::Slice<_1e02c1d07_Token> _39618_map_tokens;
	jule::I32 _39630_colon;
	std::tie(_39618_map_tokens,_39630_colon) = _1ed12e86b_split_map_range((*_self_)._field_tokens,(*((*_self_)._field_i)));
	((*((*_self_)._field_i)))++;
	if ((_39630_colon == -1LL)) {
		return _1ed132e24_build_arr(&(*_self_));
	}
	return _1ed1333a8_build_map(&(*_self_), _39630_colon,_39618_map_tokens);
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed13395d_step(_1ed12ee54_TypeBuilder* _self_) {
	_1e02c1d07_Token _40513_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];
	{
		auto &_match_expr{ _40513_token._field_id };
		
		if (_match_expr == static_cast<jule::U32>(1LLU)) {
			_case_begin_2014043e0:;
			{
				return _1ed130cce_build_prim(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(2LLU)) {
			_case_begin_201404456:;
			{
				return _1ed131939_build_ident(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_2014044bc:;
			{
				return _1ed131c14_build_cpp_link(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(33LLU)) {
			_case_begin_201404533:;
			{
				return _1ed131ede_build_fn(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_2014051b0:;
			{
				return _1ed13286e_build_op(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_201405226:;
			{
				return _1ed133683_build_enumerable(&(*_self_));
			}
		}
		else {
			_case_begin_201402542:;
			{
				((*((*_self_)._field_i)))++;
				_1ed130608_push_err(&(*_self_), _40513_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_201404368:;
	}
}



inline std::tuple<jule::Ptr<_1e01c3db3_TypeDecl>,jule::Bool> _1ed133c38_build(_1ed12ee54_TypeBuilder* _self_) {
	jule::Bool _43444_ok = jule::Bool();
	jule::Ptr<_1e01c3db3_TypeDecl> _43517_root = _1ed13395d_step(&(*_self_));
	if ((_43517_root == nullptr)) {
		_43444_ok = false;
		return std::make_tuple(_1ed12e22d_build_void_type(),_43444_ok);
	}
	_43444_ok = true;
	return std::make_tuple(_43517_root,_43444_ok);
}







std::ostream &operator<<(std::ostream &_Stream, _1ed12ee54_TypeBuilder _Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ecda7acd_FloatInfo _Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed45d6e4_DecimalSlice _Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eec7e893_LeftCheat _Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eec7ac68_set(_1eec80366_Decimal* _self_,jule::Str _23422_s) {
	jule::Bool _23432_ok = jule::Bool();
	jule::I32 _23517_i = 0LL;
	(*_self_)._field_neg=false;
	(*_self_)._field_trunc=false;
	if (_23517_i >= static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len()))) {
		return _23432_ok;
	}
	{
		
		if (_23422_s[_23517_i] == '+') {
			_case_begin_2025cab6a:;
			{
				(_23517_i)++;
			}
		}
		else if (_23422_s[_23517_i] == '-') {
			_case_begin_2025cb352:;
			{
				(*_self_)._field_neg=true;
				(_23517_i)++;
			}
		}
		_match_end_2025cadac:;
	}
	jule::Bool _25217_sawdot = false;
	jule::Bool _25317_sawdigits = false;
	for (; _23517_i < static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len())); (_23517_i)++) {
		{
			{
				
				if (_23422_s[_23517_i] == '_') {
					_case_begin_200c6ba16:;
					{
						goto _iter_next_200c6adcd;
					}
				}
				else if (_23422_s[_23517_i] == '.') {
					_case_begin_200c6ba8d:;
					{
						if (_25217_sawdot) {
							return _23432_ok;
						}
						_25217_sawdot=true;
						(*_self_)._field_dp=(*_self_)._field_nd;
						goto _iter_next_200c6adcd;
					}
				}
				else if (('0' <= _23422_s[_23517_i]) && (_23422_s[_23517_i] <= '9')) {
					_case_begin_200c6bb15:;
					{
						_25317_sawdigits=true;
						if ((_23422_s[_23517_i] == '0') && ((*_self_)._field_nd == 0LL)) {
							((*_self_)._field_dp)--;
							goto _iter_next_200c6adcd;
						}
						if (((*_self_)._field_nd < 800LL)) {
							(*_self_)._field_d[(*_self_)._field_nd]=_23422_s[_23517_i];
							((*_self_)._field_nd)++;
						} else if (_23422_s[_23517_i] != '0') {
							(*_self_)._field_trunc=true;
						}
						goto _iter_next_200c6adcd;
					}
				}
				_match_end_200c6b8e5:;
			}
			goto _iter_end_200c6adcd;
		}
	_iter_next_200c6adcd:;
	}
	_iter_end_200c6adcd:;
	if ((!(_25317_sawdigits))) {
		return _23432_ok;
	}
	if ((!(_25217_sawdot))) {
		(*_self_)._field_dp=(*_self_)._field_nd;
	}
	if ((_23517_i < static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len()))) && (_1ed42d7a2_lower(_23422_s[_23517_i]) == 'e')) {
		(_23517_i)++;
		if (_23517_i >= static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len()))) {
			return _23432_ok;
		}
		jule::I32 _29821_esign = 1LL;
		if (_23422_s[_23517_i] == '+') {
			(_23517_i)++;
		} else if (_23422_s[_23517_i] == '-') {
			(_23517_i)++;
			_29821_esign=-1LL;
		}
		if (((_23517_i >= static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len()))) || (_23422_s[_23517_i] < '0')) || (_23422_s[_23517_i] > '9')) {
			return _23432_ok;
		}
		jule::I32 _30821_e = 0LL;
		for (; (_23517_i < static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len()))) && ((('0' <= _23422_s[_23517_i]) && (_23422_s[_23517_i] <= '9')) || (_23422_s[_23517_i] == '_')); (_23517_i)++) {
			{
				if (_23422_s[_23517_i] == '_') {
					goto _iter_next_200c75624;
				}
				if ((_30821_e < 10000LL)) {
					_30821_e=static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_30821_e * 10LL))) + static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_23422_s[_23517_i]))))) - '0');
				}
			}
		_iter_next_200c75624:;
		}
		_iter_end_200c75624:;
		(*_self_)._field_dp+=static_cast<jule::I32>(_30821_e * _29821_esign);
	}
	if (_23517_i != static_cast<jule::I32>(static_cast<jule::I32>(_23422_s.len()))) {
		return _23432_ok;
	}
	_23432_ok=true;
	return _23432_ok;
}



inline std::tuple<jule::U64,jule::Bool> _1eec7adcd_float_bits(_1eec80366_Decimal* _self_,_1ecda7acd_FloatInfo& _32830_flt) {
	jule::U64 _32848_b = jule::U64();
	jule::Bool _32856_overflow = jule::Bool();
	jule::I32 _32917_exp = 0LL;
	jule::U64 _33017_mant = 0LLU;
	if (((*_self_)._field_nd == 0LL)) {
		_33017_mant=0LLU;
		_32917_exp=_32830_flt._field_bias;
		goto _julec_label_out;
	}
	if (((*_self_)._field_dp > 310LL)) {
		goto _julec_label_overflow;
	}
	if (((*_self_)._field_dp < -330LL)) {
		_33017_mant=0LLU;
		_32917_exp=_32830_flt._field_bias;
		goto _julec_label_out;
	}
	_32917_exp=0LL;
	while (((*_self_)._field_dp > 0LL)) {
		{
			jule::I32 _35521_n = 0LL;
			if ((*_self_)._field_dp >= static_cast<jule::I32>(static_cast<jule::I32>(_1eeabed32_POWTAB.len()))) {
				_35521_n=27LL;
			} else {
				_35521_n=_1eeabed32_POWTAB[(*_self_)._field_dp];
			}
			_1eec80b3b_shift(&(*_self_), static_cast<jule::I32>((-(_35521_n))));
			_32917_exp+=_35521_n;
		}
	_iter_next_200c7e012:;
	}
	_iter_end_200c7e012:;
	while (((*_self_)._field_dp < 0LL) || (((*_self_)._field_dp == 0LL) && ((*_self_)._field_d[0LL] < '5'))) {
		{
			jule::I32 _36521_n = 0LL;
			if ((-((*_self_)._field_dp)) >= static_cast<jule::I32>(static_cast<jule::I32>(_1eeabed32_POWTAB.len()))) {
				_36521_n=27LL;
			} else {
				_36521_n=_1eeabed32_POWTAB[(-((*_self_)._field_dp))];
			}
			_1eec80b3b_shift(&(*_self_), _36521_n);
			_32917_exp-=_36521_n;
		}
	_iter_next_200c7e6a5:;
	}
	_iter_end_200c7e6a5:;
	(_32917_exp)--;
	if (_32917_exp < static_cast<jule::I32>(static_cast<jule::I32>((_32830_flt._field_bias + 1LL)))) {
		jule::I32 _38217_n = (_32830_flt._field_bias + 1LL) - _32917_exp;
		_1eec80b3b_shift(&(*_self_), static_cast<jule::I32>((-(_38217_n))));
		_32917_exp+=_38217_n;
	}
	if ((_32917_exp - _32830_flt._field_bias) >= static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(((1LL << _32830_flt._field_expbits) - 1LL))))) {
		goto _julec_label_overflow;
	}
	_1eec80b3b_shift(&(*_self_), static_cast<jule::I32>(static_cast<jule::I32>(1LL + _32830_flt._field_mantbits)));
	_33017_mant=static_cast<jule::U64>(_1eec81873_rounded_integer(&(*_self_)));
	if (_33017_mant == static_cast<jule::U64>(static_cast<jule::U64>(2LLU << _32830_flt._field_mantbits))) {
		_33017_mant>>=1LLU;
		(_32917_exp)++;
		if ((_32917_exp - _32830_flt._field_bias) >= static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(((1LL << _32830_flt._field_expbits) - 1LL))))) {
			goto _julec_label_overflow;
		}
	}
	if (((_33017_mant & static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _32830_flt._field_mantbits)))) == 0LLU)) {
		_32917_exp=_32830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_33017_mant=0LLU;
	_32917_exp=static_cast<jule::I32>(static_cast<jule::I32>(((static_cast<jule::U32>(1LLU) << _32830_flt._field_expbits) - 1LLU) + static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_32830_flt._field_bias)))));
	_32856_overflow=true;
	_julec_label_out:;
	jule::U64 _41817_bits = _33017_mant & static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _32830_flt._field_mantbits)) - 1LLU))));
	_41817_bits|=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_32917_exp - _32830_flt._field_bias) & static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(((1LL << _32830_flt._field_expbits) - 1LL))))))) << _32830_flt._field_mantbits);
	if ((*_self_)._field_neg) {
		_41817_bits|=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _32830_flt._field_mantbits)) << _32830_flt._field_expbits);
	}
	_32848_b = _41817_bits;
	return std::make_tuple(_32848_b,_32856_overflow);
}



inline void _1eec8081c_assign(_1eec80366_Decimal* _self_,jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>();
	jule::I32 _15617_n = 0LL;
	while ((_15229_v > 0LLU)) {
		{
			jule::U64 _15817_v1 = (_15229_v / 10LLU);
			_15229_v-=static_cast<jule::U64>(10LLU * _15817_v1);
			_15317_buf[_15617_n]=static_cast<jule::U8>(static_cast<jule::U8>(_15229_v + '0'));
			(_15617_n)++;
			_15229_v=_15817_v1;
		}
	_iter_next_200c90a3a:;
	}
	_iter_end_200c90a3a:;
	(*_self_)._field_nd=0LL;
	(_15617_n)--;
	for (; (_15617_n >= 0LL); (_15617_n)--) {
		{
			(*_self_)._field_d[(*_self_)._field_nd]=_15317_buf[_15617_n];
			((*_self_)._field_nd)++;
		}
	_iter_next_200c922cd:;
	}
	_iter_end_200c922cd:;
	(*_self_)._field_dp=(*_self_)._field_nd;
	_1eec82005_trim((*_self_));
}



inline void _1eec80b3b_shift(_1eec80366_Decimal* _self_,jule::I32 _17728_k) {
	{
		
		if (((*_self_)._field_nd == 0LL)) {
			_case_begin_200c93d18:;
		}
		else if ((_17728_k > 0LL)) {
			_case_begin_200c93d90:;
			{
				while ((_17728_k > 60LL)) {
					{
						_1eec82bb5_left_shift((*_self_),60LLU);
						_17728_k-=60LL;
					}
				_iter_next_200c94610:;
				}
				_iter_end_200c94610:;
				_1eec82bb5_left_shift((*_self_),static_cast<jule::U32>(static_cast<jule::U32>(_17728_k)));
			}
		}
		else if ((_17728_k < 0LL)) {
			_case_begin_200c93e17:;
			{
				while ((_17728_k < -60LL)) {
					{
						_1eec82357_right_shift((*_self_),60LLU);
						_17728_k+=60LL;
					}
				_iter_next_200c94b60:;
				}
				_iter_end_200c94b60:;
				_1eec82357_right_shift((*_self_),static_cast<jule::U32>(static_cast<jule::U32>((-(_17728_k)))));
			}
		}
		_match_end_200c93c19:;
	}
}



inline void _1eec80e5a_round_down(_1eec80366_Decimal* _self_,jule::I32 _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*_self_)._field_nd)) {
		return;
	}
	(*_self_)._field_nd=_19729_nd;
	_1eec82005_trim((*_self_));
}



inline void _1eec81279_round_up(_1eec80366_Decimal* _self_,jule::I32 _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*_self_)._field_nd)) {
		return;
	}
	jule::I32 _21217_i = (_20627_nd - 1LL);
	for (; (_21217_i >= 0LL); (_21217_i)--) {
		{
			jule::U8 _21417_c = (*_self_)._field_d[_21217_i];
			if (_21417_c < '9') {
				((*_self_)._field_d[_21217_i])++;
				(*_self_)._field_nd=static_cast<jule::I32>((_21217_i + 1LL));
				return;
			}
		}
	_iter_next_1ee686784:;
	}
	_iter_end_1ee686784:;
	(*_self_)._field_d[0LL]='1';
	(*_self_)._field_nd=1LL;
	((*_self_)._field_dp)++;
}



inline void _1eec81598_round(_1eec80366_Decimal* _self_,jule::I32 _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*_self_)._field_nd)) {
		return;
	}
	if (_1eec830a0_should_round_up((*_self_),_23324_nd)) {
		_1eec81279_round_up(&(*_self_), _23324_nd);
	} else {
		_1eec80e5a_round_down(&(*_self_), _23324_nd);
	}
}



inline jule::U64 _1eec81873_rounded_integer(_1eec80366_Decimal* _self_) {
	if (((*_self_)._field_dp > 20LL)) {
		return jule::MAX_U64;
	}
	jule::I32 _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	for (; (_25017_i < (*_self_)._field_dp) && (_25017_i < (*_self_)._field_nd); (_25017_i)++) {
		{
			_25117_n=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_25117_n * 10LLU))) + static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((*_self_)._field_d[_25017_i] - '0'))));
		}
	_iter_next_20158b7db:;
	}
	_iter_end_20158b7db:;
	for (; _25017_i < (*_self_)._field_dp; (_25017_i)++) {
		{
			_25117_n*=10LLU;
		}
	_iter_next_20159038e:;
	}
	_iter_end_20159038e:;
	if (_1eec830a0_should_round_up((*_self_),(*_self_)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, _1eec80366_Decimal _Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eed1e24b_Const> static__1eed1e46b_new_i64(jule::I64 _1327_x) {
	return jule::new_ptr<_1eed1e24b_Const>(_1eed1e24b_Const(jule::Any(jule::Any(_1327_x))));
}



inline jule::Ptr<_1eed1e24b_Const> static__1eed1e5d1_new_u64(jule::U64 _1527_x) {
	return jule::new_ptr<_1eed1e24b_Const>(_1eed1e24b_Const(jule::Any(jule::Any(_1527_x))));
}



inline jule::Ptr<_1eed1e24b_Const> static__1eed1e834_new_bool(jule::Bool _1728_x) {
	return jule::new_ptr<_1eed1e24b_Const>(_1eed1e24b_Const(jule::Any(jule::Any(_1728_x))));
}



inline jule::Ptr<_1eed1e24b_Const> static__1eed1eb42_new_str(jule::Str _1927_x) {
	return jule::new_ptr<_1eed1e24b_Const>(_1eed1e24b_Const(jule::Any(jule::Any(_1927_x))));
}



inline jule::Ptr<_1eed1e24b_Const> static__1eed1ee50_new_f64(jule::F64 _2127_x) {
	return jule::new_ptr<_1eed1e24b_Const>(_1eed1e24b_Const(jule::Any(jule::Any(_2127_x))));
}



inline jule::Ptr<_1eed1e24b_Const> static__1eed20181_new_nil(void) {
	return jule::new_ptr<_1eed1e24b_Const>(_1eed1e24b_Const(jule::Any(jule::Any(nullptr))));
}



inline jule::I64 _1eed207e1_read_i64(_1eed1e24b_Const* _self_) {
	if ((!(_1eed23393_is_i64(&(*_self_))))) {
		return 0LL;
	}
	return static_cast<jule::I64>((*_self_)._field_data.operator jule::I64());
}



inline jule::U64 _1eed20abb_read_u64(_1eed1e24b_Const* _self_) {
	if ((!(_1eed2366d_is_u64(&(*_self_))))) {
		return 0LLU;
	}
	return static_cast<jule::U64>((*_self_)._field_data.operator jule::U64());
}



inline jule::Bool _1eed20d96_read_bool(_1eed1e24b_Const* _self_) {
	if ((!(_1eed23948_is_bool(&(*_self_))))) {
		return false;
	}
	return (*_self_)._field_data.operator jule::Bool();
}



inline jule::Str _1eed21171_read_str(_1eed1e24b_Const* _self_) {
	if ((!(_1eed23c23_is_str(&(*_self_))))) {
		return jule::Str();
	}
	return (*_self_)._field_data.operator jule::Str();
}



inline jule::F64 _1eed2144b_read_f64(_1eed1e24b_Const* _self_) {
	if ((!(_1eed23eed_is_f64(&(*_self_))))) {
		return 0LL;
	}
	return static_cast<jule::F64>((*_self_)._field_data.operator jule::F64());
}



inline jule::I64 _1eed21726_as_i64(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_2027a0933:;
			{
				return static_cast<jule::I64>((*_self_)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_2027a0999:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*_self_)._field_data.operator jule::U64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_2027a035b:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*_self_)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_2027a024b:;
			{
				return 0LL;
			}
		}
		_match_end_2027a002b:;
	}
}



inline jule::U64 _1eed21a01_as_u64(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_2027a2abc:;
			{
				return static_cast<jule::U64>((*_self_)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_2027a2b33:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*_self_)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_2027a24d4:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*_self_)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_2027a243a:;
			{
				return 0LLU;
			}
		}
		_match_end_2027a23d5:;
	}
}



inline jule::F64 _1eed21ccb_as_f64(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1ee688c3c:;
			{
				return static_cast<jule::F64>((*_self_)._field_data.operator jule::F64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1ee688ca3:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*_self_)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1ee688665:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*_self_)._field_data.operator jule::U64()));
			}
		}
		else {
			_case_begin_1ee688555:;
			{
				return 0LL;
			}
		}
		_match_end_1ee67ce95:;
	}
}



inline void _1eed220ea_set_i64(_1eed1e24b_Const* _self_,jule::I64 _13030_x) {
	(*_self_)._field_data=jule::Any(_13030_x);
}



inline void _1eed22419_set_u64(_1eed1e24b_Const* _self_,jule::U64 _13230_x) {
	(*_self_)._field_data=jule::Any(_13230_x);
}



inline void _1eed22738_set_bool(_1eed1e24b_Const* _self_,jule::Bool _13431_x) {
	(*_self_)._field_data=jule::Any(_13431_x);
}



inline void _1eed22a57_set_str(_1eed1e24b_Const* _self_,jule::Str _13630_x) {
	(*_self_)._field_data=jule::Any(_13630_x);
}



inline void _1eed22d76_set_f64(_1eed1e24b_Const* _self_,jule::F64 _13830_x) {
	(*_self_)._field_data=jule::Any(_13830_x);
}



inline void _1eed230b8_set_nil(_1eed1e24b_Const* _self_) {
	(*_self_)._field_data=jule::Any(nullptr);
}



inline jule::Bool _1eed23393_is_i64(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1ee690194:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee68ea78:;
			{
				return false;
			}
		}
		_match_end_1ee68ea23:;
	}
}



inline jule::Bool _1eed2366d_is_u64(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1ee690bde:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee6903e7:;
			{
				return false;
			}
		}
		_match_end_1ee690529:;
	}
}



inline jule::Bool _1eed23948_is_bool(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_1ee691739:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee690e42:;
			{
				return false;
			}
		}
		_match_end_1ee691074:;
	}
}



inline jule::Bool _1eed23c23_is_str(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_1ee692284:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee69198c:;
			{
				return false;
			}
		}
		_match_end_1ee691abe:;
	}
}



inline jule::Bool _1eed23eed_is_f64(_1eed1e24b_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1ee692cce:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee6924d7:;
			{
				return false;
			}
		}
		_match_end_1ee692619:;
	}
}



inline jule::Bool _1eed242c8_is_nil(_1eed1e24b_Const* _self_) {
	return (*_self_)._field_data == jule::Any(jule::Any(nullptr));
}



inline jule::Bool _1eed24680_are_same_types(_1eed1e24b_Const* _self_,_1eed1e24b_Const _19033_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_)) == _1eed23393_is_i64(&_19033_x)) {
			_case_begin_1ee6949e5:;
			{
				return true;
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_)) == _1eed2366d_is_u64(&_19033_x)) {
			_case_begin_1ee694aa0:;
			{
				return true;
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_)) == _1eed23eed_is_f64(&_19033_x)) {
			_case_begin_1ee694b27:;
			{
				return true;
			}
		}
		else if (_1eed23948_is_bool(&(*_self_)) == _1eed23948_is_bool(&_19033_x)) {
			_case_begin_1ee6947c5:;
			{
				return true;
			}
		}
		else if (_1eed23c23_is_str(&(*_self_)) == _1eed23c23_is_str(&_19033_x)) {
			_case_begin_1ee69483b:;
			{
				return true;
			}
		}
		else if (_1eed242c8_is_nil(&(*_self_)) == _1eed242c8_is_nil(&_19033_x)) {
			_case_begin_1ee6948a2:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee694363:;
			{
				return false;
			}
		}
		_match_end_1ee6942b9:;
	}
}



inline jule::Bool _1eed24a37_and(_1eed1e24b_Const* _self_,_1eed1e24b_Const _21522_x) {
	{
		
		if (_1eed23948_is_bool(&(*_self_)) && _1eed23948_is_bool(&_21522_x)) {
			_case_begin_1ee698b70:;
			{
				return _1eed20d96_read_bool(&(*_self_)) && _1eed20d96_read_bool(&_21522_x);
			}
		}
		else {
			_case_begin_1ee698543:;
			{
				return false;
			}
		}
		_match_end_1ee698499:;
	}
}



inline jule::Bool _1eed24dde_or(_1eed1e24b_Const* _self_,_1eed1e24b_Const _22621_x) {
	{
		
		if (_1eed23948_is_bool(&(*_self_)) && _1eed23948_is_bool(&_22621_x)) {
			_case_begin_1ee69a875:;
			{
				return _1eed20d96_read_bool(&(*_self_)) || _1eed20d96_read_bool(&_22621_x);
			}
		}
		else {
			_case_begin_1ee69a248:;
			{
				return false;
			}
		}
		_match_end_1ee69a19e:;
	}
}



inline jule::Bool _1eed25296_eq(_1eed1e24b_Const* _self_,_1eed1e24b_Const _23721_x) {
	{
		
		if (_1eed242c8_is_nil(&(*_self_))) {
			_case_begin_1ee69c091:;
			{
				return _1eed242c8_is_nil(&_23721_x);
			}
		}
		else if (_1eed23948_is_bool(&(*_self_))) {
			_case_begin_1ee69c14b:;
			{
				return _1eed23948_is_bool(&_23721_x) && (_1eed20d96_read_bool(&(*_self_)) == _1eed20d96_read_bool(&_23721_x));
			}
		}
		else if (_1eed23c23_is_str(&(*_self_))) {
			_case_begin_1ee69c1b2:;
			{
				return _1eed23c23_is_str(&_23721_x) && (_1eed21171_read_str(&(*_self_)) == _1eed21171_read_str(&_23721_x));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee69bd71:;
			{
				return _1eed207e1_read_i64(&(*_self_)) == static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_23721_x)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee69bdd7:;
			{
				return _1eed20abb_read_u64(&(*_self_)) == static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_23721_x)));
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee69be4d:;
			{
				return _1eed2144b_read_f64(&(*_self_)) == static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_23721_x)));
			}
		}
		else {
			_case_begin_1ee69ae4c:;
			{
				return false;
			}
		}
		_match_end_1ee69adc5:;
	}
}



inline jule::Bool _1eed2564d_lt(_1eed1e24b_Const* _self_,_1eed1e24b_Const _26421_x) {
	{
		
		if (_1eed23c23_is_str(&(*_self_))) {
			_case_begin_1ee6a2717:;
			{
				return _1eed23c23_is_str(&_26421_x) && (_1eed21171_read_str(&(*_self_)) < _1eed21171_read_str(&_26421_x));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6a27e4:;
			{
				return _1eed207e1_read_i64(&(*_self_)) < static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_26421_x)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6a285a:;
			{
				return _1eed20abb_read_u64(&(*_self_)) < static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_26421_x)));
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6a2519:;
			{
				return _1eed2144b_read_f64(&(*_self_)) < static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_26421_x)));
			}
		}
		else {
			_case_begin_1ee6a164a:;
			{
				return false;
			}
		}
		_match_end_1ee6a0979:;
	}
}



inline jule::Bool _1eed25a05_lt_eq(_1eed1e24b_Const* _self_,_1eed1e24b_Const _28724_x) {
	{
		
		if (_1eed23c23_is_str(&(*_self_))) {
			_case_begin_1ee6a6331:;
			{
				return _1eed23c23_is_str(&_28724_x) && (_1eed21171_read_str(&(*_self_)) <= _1eed21171_read_str(&_28724_x));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6a640d:;
			{
				return _1eed207e1_read_i64(&(*_self_)) <= static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_28724_x)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6a6474:;
			{
				return _1eed20abb_read_u64(&(*_self_)) <= static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_28724_x)));
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6a6133:;
			{
				return _1eed2144b_read_f64(&(*_self_)) <= static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_28724_x)));
			}
		}
		else {
			_case_begin_1ee6a2a47:;
			{
				return false;
			}
		}
		_match_end_1ee6a57e7:;
	}
}



inline jule::Bool _1eed25dac_gt(_1eed1e24b_Const* _self_,_1eed1e24b_Const _31021_x) {
	{
		
		if (_1eed23c23_is_str(&(*_self_))) {
			_case_begin_1ee6aa148:;
			{
				return _1eed23c23_is_str(&_31021_x) && (_1eed21171_read_str(&(*_self_)) > _1eed21171_read_str(&_31021_x));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6aa225:;
			{
				return _1eed207e1_read_i64(&(*_self_)) > static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_31021_x)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6aa28b:;
			{
				return _1eed20abb_read_u64(&(*_self_)) > static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_31021_x)));
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6a9e4a:;
			{
				return _1eed2144b_read_f64(&(*_self_)) > static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_31021_x)));
			}
		}
		else {
			_case_begin_1ee6a6661:;
			{
				return false;
			}
		}
		_match_end_1ee6a8531:;
	}
}



inline jule::Bool _1eed26264_gt_eq(_1eed1e24b_Const* _self_,_1eed1e24b_Const _33324_x) {
	{
		
		if (_1eed23c23_is_str(&(*_self_))) {
			_case_begin_1ee6adc62:;
			{
				return _1eed23c23_is_str(&_33324_x) && (_1eed21171_read_str(&(*_self_)) >= _1eed21171_read_str(&_33324_x));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6add3e:;
			{
				return _1eed207e1_read_i64(&(*_self_)) >= static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_33324_x)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6adda5:;
			{
				return _1eed20abb_read_u64(&(*_self_)) >= static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_33324_x)));
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6ada64:;
			{
				return _1eed2144b_read_f64(&(*_self_)) >= static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_33324_x)));
			}
		}
		else {
			_case_begin_1ee6aa478:;
			{
				return false;
			}
		}
		_match_end_1ee6ad228:;
	}
}



inline jule::Bool _1eed2661b_add(_1eed1e24b_Const* _self_,_1eed1e24b_Const _35426_x) {
	{
		
		if (_1eed23c23_is_str(&(*_self_))) {
			_case_begin_1ee6b2abd:;
			{
				if ((!(_1eed23c23_is_str(&_35426_x)))) {
					return false;
				}
				_1eed22a57_set_str(&(*_self_), _1eed21171_read_str(&(*_self_)) + _1eed21171_read_str(&_35426_x));
			}
		}
		else if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6b2b9a:;
			{
				_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&(*_self_)))) + static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_35426_x)))));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6b2c11:;
			{
				if (_1eed23eed_is_f64(&_35426_x)) {
					_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))) + static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&_35426_x)))));
				} else {
					_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))) + static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_35426_x)))));
				}
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6b28c0:;
			{
				if (_1eed23eed_is_f64(&_35426_x)) {
					_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))) + static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&_35426_x)))));
				} else {
					_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))) + static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_35426_x)))));
				}
			}
		}
		else {
			_case_begin_1ee6b1ade:;
			{
				return false;
			}
		}
		_match_end_1ee6b2084:;
	}
	return true;
}



inline jule::Bool _1eed269c3_sub(_1eed1e24b_Const* _self_,_1eed1e24b_Const _38326_x) {
	{
		
		if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6ba4ee:;
			{
				_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&(*_self_)))) - static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_38326_x)))));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6ba5dc:;
			{
				if (_1eed23eed_is_f64(&_38326_x)) {
					_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))) - static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&_38326_x)))));
				} else {
					_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))) - static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_38326_x)))));
				}
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6ba653:;
			{
				if (_1eed23eed_is_f64(&_38326_x)) {
					_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))) - static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&_38326_x)))));
				} else {
					_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))) - static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_38326_x)))));
				}
			}
		}
		else {
			_case_begin_1ee6b9dc2:;
			{
				return false;
			}
		}
		_match_end_1ee6b8e6a:;
	}
	return true;
}



inline jule::Bool _1eed26d7a_mul(_1eed1e24b_Const* _self_,_1eed1e24b_Const _40726_x) {
	{
		
		if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6c1c20:;
			{
				_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&(*_self_)))) * static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&_40726_x)))));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6c1d0d:;
			{
				if (_1eed23eed_is_f64(&_40726_x)) {
					_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))) * static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&_40726_x)))));
				} else {
					_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))) * static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_40726_x)))));
				}
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6c1d74:;
			{
				if (_1eed23eed_is_f64(&_40726_x)) {
					_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))) * static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&_40726_x)))));
				} else {
					_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))) * static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_40726_x)))));
				}
			}
		}
		else {
			_case_begin_1ee6c15e3:;
			{
				return false;
			}
		}
		_match_end_1ee6c05d1:;
	}
	return true;
}



inline jule::Bool _1eed27232_div(_1eed1e24b_Const* _self_,_1eed1e24b_Const _43526_x) {
	{
		
		if (_1eed23eed_is_f64(&(*_self_))) {
			_case_begin_1ee6c81aa:;
			{
				jule::F64 _43817_l = _1eed21ccb_as_f64(&_43526_x);
				if ((_43817_l == 0LL)) {
					return false;
				}
				_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(jule::div(static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64(&(*_self_)))),_43817_l)));
			}
		}
		else if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6c8298:;
			{
				jule::F64 _44417_l = _1eed21ccb_as_f64(&_43526_x);
				if ((_44417_l == 0LL)) {
					return false;
				}
				_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(jule::div(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))),_44417_l)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6c830e:;
			{
				jule::F64 _45017_l = _1eed21ccb_as_f64(&_43526_x);
				if ((_45017_l == 0LL)) {
					return false;
				}
				_1eed22d76_set_f64(&(*_self_), static_cast<jule::F64>(jule::div(static_cast<jule::F64>(static_cast<jule::F64>(_1eed21ccb_as_f64(&(*_self_)))),_45017_l)));
			}
		}
		else {
			_case_begin_1ee6c7a7d:;
			{
				return false;
			}
		}
		_match_end_1ee6c6b48:;
	}
	return true;
}



inline jule::Bool _1eed275d9_mod(_1eed1e24b_Const* _self_,_1eed1e24b_Const _46426_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6cd3be:;
			{
				jule::I64 _46717_l = _1eed21726_as_i64(&_46426_x);
				if ((_46717_l == 0LL)) {
					return false;
				}
				_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(jule::mod(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))),_46717_l)));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6cd4bd:;
			{
				jule::U64 _47317_l = _1eed21a01_as_u64(&_46426_x);
				if ((_47317_l == 0LLU)) {
					return false;
				}
				_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(jule::mod(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))),_47317_l)));
			}
		}
		else {
			_case_begin_1ee6ccc81:;
			{
				return false;
			}
		}
		_match_end_1ee6ccbd7:;
	}
	return true;
}



inline jule::Bool _1eed27991_bitwise_and(_1eed1e24b_Const* _self_,_1eed1e24b_Const _48634_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6d22d5:;
			{
				_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))) & static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_48634_x)))));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6d23d4:;
			{
				_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))) & static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_48634_x)))));
			}
		}
		else {
			_case_begin_1ee6d1b97:;
			{
				return false;
			}
		}
		_match_end_1ee6d1aed:;
	}
	return true;
}



inline jule::Bool _1eed27d48_bitwise_or(_1eed1e24b_Const* _self_,_1eed1e24b_Const _50033_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6d552a:;
			{
				_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))) | static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_50033_x)))));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6d5629:;
			{
				_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))) | static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_50033_x)))));
			}
		}
		else {
			_case_begin_1ee6d4ddc:;
			{
				return false;
			}
		}
		_match_end_1ee6d4d43:;
	}
	return true;
}



inline jule::Bool _1eed2d05c_xor(_1eed1e24b_Const* _self_,_1eed1e24b_Const _51426_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6d8770:;
			{
				_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64(&(*_self_)))) ^ static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64(&_51426_x)))));
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6d886e:;
			{
				_1eed22419_set_u64(&(*_self_), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64(&(*_self_)))) ^ static_cast<jule::U64>(static_cast<jule::U64>(_1eed21a01_as_u64(&_51426_x)))));
			}
		}
		else {
			_case_begin_1ee6d8132:;
			{
				return false;
			}
		}
		_match_end_1ee6d8088:;
	}
	return true;
}



inline jule::Bool _1eed2d414_lshift(_1eed1e24b_Const* _self_,_1eed1e24b_Const _52829_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6dbd28:;
			{
				jule::I64 _53117_l = _1eed21726_as_i64(&(*_self_));
				if ((_53117_l < 0LL)) {
					jule::U64 _53321_r = _1eed21a01_as_u64(&_52829_x);
					_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(_53117_l << _53321_r));
				} else {
					_1eed2dbc8_lshift_unsig((*_self_),_52829_x);
				}
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6dbe27:;
			{
				_1eed2dbc8_lshift_unsig((*_self_),_52829_x);
			}
		}
		else {
			_case_begin_1ee6db6da:;
			{
				return false;
			}
		}
		_match_end_1ee6db641:;
	}
	return true;
}



inline jule::Bool _1eed2d7bb_rshift(_1eed1e24b_Const* _self_,_1eed1e24b_Const _54829_x) {
	{
		
		if (_1eed23393_is_i64(&(*_self_))) {
			_case_begin_1ee6e027c:;
			{
				jule::I64 _55117_l = _1eed21726_as_i64(&(*_self_));
				if ((_55117_l < 0LL)) {
					jule::U64 _55321_r = _1eed21a01_as_u64(&_54829_x);
					_1eed220ea_set_i64(&(*_self_), static_cast<jule::I64>(_55117_l >> _55321_r));
				} else {
					_1eed2e06e_rshift_unsig((*_self_),_54829_x);
				}
			}
		}
		else if (_1eed2366d_is_u64(&(*_self_))) {
			_case_begin_1ee6e037b:;
			{
				_1eed2e06e_rshift_unsig((*_self_),_54829_x);
			}
		}
		else {
			_case_begin_1ee6deb3e:;
			{
				return false;
			}
		}
		_match_end_1ee6dea95:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _1eed1e24b_Const _Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2000089b8_FileStream> static__200008bd8_new(jule::Ptr<_222416733_File> _1527_f) {
	return jule::new_ptr<_2000089b8_FileStream>(_2000089b8_FileStream(_1527_f));
}



inline jule::Exceptional<jule::I32> _200008e4c_read(_2000089b8_FileStream* _self_,jule::Slice<jule::U8> _2831_buff) {
	jule::I32 _2848_n = jule::I32();
	_2848_n = static_cast<jule::I32>(({
		auto except = _2225040a1_read((*_self_)._field_buff.ptr(), _2831_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I32>(except.error);
			return jule::Exceptional<jule::I32>(except.error);
		} jule::I32();});
	}));
	return jule::Exceptional<jule::I32>(jule::Any(),_2848_n);
}



inline jule::Exceptional<jule::I32> _200009249_write(_2000089b8_FileStream* _self_,jule::Slice<jule::U8> _3428_buff) {
	jule::I32 _3445_n = jule::I32();
	_3445_n = static_cast<jule::I32>(({
		auto except = _2224eb86d_write((*_self_)._field_buff.ptr(), _3428_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I32>(except.error);
			return jule::Exceptional<jule::I32>(except.error);
		} jule::I32();});
	}));
	return jule::Exceptional<jule::I32>(jule::Any(),_3445_n);
}



inline jule::Exceptional<jule::Slice<jule::U8>> _200009612_read_line(_2000089b8_FileStream* _self_) {
	
	jule::Slice<jule::U8> _4617_buff = jule::Slice<jule::U8>::alloc(0LL,1024LL);
	jule::Slice<jule::U8> _4717_part = jule::Slice<jule::U8>::alloc(1LL);
	for (;;) {
		{
			jule::I32 _4917_n = ({
				auto except = _2225040a1_read((*_self_)._field_buff.ptr(), _4717_part);
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
					return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
				} jule::I32();});
			});
			if ((_4917_n == 0LL)) {
				goto _iter_end_1ee7674e1;
			}
			jule::U8 _5417_b = _4717_part[0LL];
			_4617_buff = jule::alloc_for_append(_4617_buff,1);_4617_buff.__push(_5417_b);
			if ((_5417_b == 10LLU)) {
				goto _iter_end_1ee7674e1;
			}
		}
	_iter_next_1ee7674e1:;
	}
	_iter_end_1ee7674e1:;
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_4617_buff);
}







std::ostream &operator<<(std::ostream &_Stream, _2000089b8_FileStream _Src) {
	_Stream << "FileStream{";
	_Stream << "buff:" << _Src._field_buff;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::I32> _20000c13c_read(_20000b900_ByteStream* _self_,jule::Slice<jule::U8> _2131_buff) {
	jule::I32 _2148_n = jule::I32();
	if ((!(_20000cb10_data(&(*_self_))))) {
		_2148_n = 0LL;
		return jule::Exceptional<jule::I32>(jule::Any(),_2148_n);
	}
	_2148_n=static_cast<jule::I32>(copy(_2131_buff,(*_self_)._field_buff));
	(*_self_)._field_buff=(*_self_)._field_buff.slice(_2148_n);
	return jule::Exceptional<jule::I32>(jule::Any(), _2148_n);
}



inline jule::Exceptional<jule::I32> _20000c4e4_write(_20000b900_ByteStream* _self_,jule::Slice<jule::U8> _3228_buff) {
	jule::I32 _3245_n = jule::I32();
	_3245_n=static_cast<jule::I32>(_3228_buff.len());
	(*_self_)._field_buff=jule::append((*_self_)._field_buff,_3228_buff);
	return jule::Exceptional<jule::I32>(jule::Any(), _3245_n);
}



inline jule::Ptr<_20000b900_ByteStream> static__20000c835_new(void) {
	return jule::new_ptr<_20000b900_ByteStream>();
}



inline jule::Bool _20000cb10_data(_20000b900_ByteStream* _self_) {
	return ((*_self_)._field_buff.len() != 0LL);
}



inline void _20000cd52_fit(_20000b900_ByteStream* _self_) {
	if ((!(_20000cb10_data(&(*_self_))))) {
		(*_self_)._field_buff=nullptr;
		return;
	}
	jule::Slice<jule::U8> _5717_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::I32>((*_self_)._field_buff.len()));
	copy(_5717_buff,(*_self_)._field_buff);
	(*_self_)._field_buff=_5717_buff;
}







std::ostream &operator<<(std::ostream &_Stream, _20000b900_ByteStream _Src) {
	_Stream << "ByteStream{";
	_Stream << "buff:" << _Src._field_buff;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20000e4b3_Scanner> static__20000e958_new(jule::Trait<_200009e3c_Reader> _1627_r) {
	return jule::new_ptr<_20000e4b3_Scanner>(_20000e4b3_Scanner(_1627_r,jule::Slice<jule::U8>()));
}



inline jule::Ptr<_20000e4b3_Scanner> static__20000ec66_newf(jule::Ptr<_222416733_File> _2428_f) {
	return jule::new_ptr<_20000e4b3_Scanner>(_20000e4b3_Scanner(jule::Trait<_200009e3c_Reader>(static__200008bd8_new(_2428_f), 0),jule::Slice<jule::U8>()));
}



inline void _2000100c9_reset(_20000e4b3_Scanner* _self_) {
	(*_self_)._field_b=nullptr;
}



inline jule::Slice<jule::U8> _2000103a4_bytes(_20000e4b3_Scanner* _self_) {
	return (*_self_)._field_b;
}



inline jule::Str _20001067e_text(_20000e4b3_Scanner* _self_) {
	return static_cast<jule::Str>((*_self_)._field_b);
}



inline jule::Exceptional<jule::Bool> _200010959_scan(_20000e4b3_Scanner* _self_) {
	
	_2000100c9_reset(&(*_self_));
	jule::Slice<jule::U8> _5117_buff = jule::Slice<jule::U8>::alloc(0LL,1024LL);
	jule::Slice<jule::U8> _5217_part = jule::Slice<jule::U8>::alloc(1LL);
	for (;;) {
		{
			jule::I32 _5417_n = ({
				auto except = _200009e3c_Reader_mptr_data[((*_self_)._field_r).type_offset]._200009cb6_read((*_self_)._field_r, _5217_part);
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Bool>(jule::Any(),false);
					return jule::Exceptional<jule::Bool>(jule::Any(),false);
				} jule::I32();});
			});
			if ((_5417_n == 0LL)) {
				goto _iter_end_1ee77629c;
			}
			jule::U8 _6117_b = _5217_part[0LL];
			if ((_6117_b == 10LLU)) {
				goto _iter_end_1ee77629c;
			}
			_5117_buff = jule::alloc_for_append(_5117_buff,1);_5117_buff.__push(_6117_b);
		}
	_iter_next_1ee77629c:;
	}
	_iter_end_1ee77629c:;
	(*_self_)._field_b=_5117_buff;
	return jule::Exceptional<jule::Bool>(jule::Any(),(_5217_part[0LL] != 0LLU));
}







std::ostream &operator<<(std::ostream &_Stream, _20000e4b3_Scanner _Src) {
	_Stream << "Scanner{";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "b:" << _Src._field_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee240ddd_Operators _Src) {
	_Stream << "Operators{";
	_Stream << "eq:" << _Src._field_eq << ", ";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "gt_eq:" << _Src._field_gt_eq << ", ";
	_Stream << "lt:" << _Src._field_lt << ", ";
	_Stream << "lt_eq:" << _Src._field_lt_eq << ", ";
	_Stream << "shl:" << _Src._field_shl << ", ";
	_Stream << "shr:" << _Src._field_shr << ", ";
	_Stream << "add:" << _Src._field_add << ", ";
	_Stream << "sub:" << _Src._field_sub << ", ";
	_Stream << "div:" << _Src._field_div << ", ";
	_Stream << "mul:" << _Src._field_mul << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "bit_and:" << _Src._field_bit_and << ", ";
	_Stream << "bit_or:" << _Src._field_bit_or << ", ";
	_Stream << "bit_xor:" << _Src._field_bit_xor << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "bit_not:" << _Src._field_bit_not << ", ";
	_Stream << "add_assign:" << _Src._field_add_assign << ", ";
	_Stream << "sub_assign:" << _Src._field_sub_assign << ", ";
	_Stream << "div_assign:" << _Src._field_div_assign << ", ";
	_Stream << "mul_assign:" << _Src._field_mul_assign << ", ";
	_Stream << "mod_assign:" << _Src._field_mod_assign << ", ";
	_Stream << "shl_assign:" << _Src._field_shl_assign << ", ";
	_Stream << "shr_assign:" << _Src._field_shr_assign << ", ";
	_Stream << "bit_or_assign:" << _Src._field_bit_or_assign << ", ";
	_Stream << "bit_and_assign:" << _Src._field_bit_and_assign << ", ";
	_Stream << "bit_xor_assign:" << _Src._field_bit_xor_assign;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2449b3_FieldIns _Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee247620_OperandExprModel _Src) {
	_Stream << "OperandExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2485aa_StructArgExprModel _Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee248a0b_StructLitExprModel _Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee248de6_AllocStructLitExprModel _Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24a458_SliceExprModel _Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24ae09_AnonFnExprModel _Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24b35a_KeyValPairExprModel _Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24b8aa_MapExprModel _Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24d626_StructStaticIdentExprModel _Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24da55_ArrayExprModel _Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24dda7_CommonIdentExprModel _Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24e8be_TupleExprModel _Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24eda8_BuiltinOutCallExprModel _Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee250370_BuiltinOutlnCallExprModel _Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee250738_BuiltinCloneCallExprModel _Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee250c00_BuiltinNewCallExprModel _Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee251d44_BuiltinMakeCallExprModel _Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee25230b_BuiltinAppendCallExprModel _Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2527c3_BuiltinErrorCallExprModel _Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee252b03_SizeofExprModel _Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2532a7_AlignofExprModel _Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee253571_RuneExprModel _Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2538d4_IntegratedToStrExprModel _Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee253d13_BackendEmitExprModel _Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee254165_FreeExprModel _Src) {
	_Stream << "FreeExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee255342_RetType _Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ee25a798_to_str(_1ee25a358_ParamIns* _self_) {
	jule::Str _19217_s = jule::Str();
	if ((*_self_)._field_decl.get()._field_mutable) {
		_19217_s+=jule::Str("mut ", 4);
	}
	if ((*_self_)._field_decl.get()._field_reference) {
		_19217_s+=jule::Str("&_:", 3);
	}
	if (_1ee256398_is_self((*_self_)._field_decl.ptr())) {
		if (_1ee256673_is_ref((*_self_)._field_decl.ptr())) {
			_19217_s+=jule::Str("&", 1);
		}
		_19217_s+=jule::Str("self", 4);
		return _19217_s;
	}
	if ((*_self_)._field_decl.get()._field_variadic) {
		_19217_s+=jule::Str("...", 3);
	}
	if (((*_self_)._field_kind != nullptr)) {
		_19217_s+=_1eee77063_to_str((*_self_)._field_kind.ptr());
	}
	return _19217_s;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee25a358_ParamIns _Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ee25b887_to_str(_1ee25b4ad_FnIns* _self_) {
	
	return _1ee25cb74_get_kind_str(&(*_self_), false);
}



inline jule::Bool _1ee25bc3e_equals(jule::Ptr<_1ee25b4ad_FnIns> _self_,jule::Ptr<_1eee76b45_TypeKind> _24326_other) {
	jule::Ptr<_1ee25b4ad_FnIns> _24413_f = _1eee7a3eb_fnc(_24326_other.ptr());
	if ((_24413_f == nullptr)) {
		return false;
	}
	if (_self_.get()._field_decl.get()._field_exceptional != _24413_f.get()._field_decl.get()._field_exceptional) {
		return false;
	}
	if (_self_.get()._field_decl.get()._field_unsafety != _24413_f.get()._field_decl.get()._field_unsafety) {
		return false;
	}
	if (_self_.get()._field_generics.len() != static_cast<jule::I32>(static_cast<jule::I32>(_24413_f.get()._field_generics.len()))) {
		return false;
	}
	if (_1ee257e7c_is_void(_self_.get()._field_decl.ptr()) != _1ee257e7c_is_void(_24413_f.get()._field_decl.ptr())) {
		return false;
	}
	jule::I32 _26517_i = 0LL;
	for (; _26517_i < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_generics.len())); (_26517_i)++) {
		{
			if ((!(_1eee7741a_equals(_self_.get()._field_generics[_26517_i], _24413_f.get()._field_generics[_26517_i])))) {
				return false;
			}
		}
	_iter_next_202983286:;
	}
	_iter_end_202983286:;
	jule::Fn<jule::Bool(jule::Ptr<_1ee25a358_ParamIns>,jule::Ptr<_1ee25a358_ParamIns>)> _27213_check_params = jule::Fn<jule::Bool(jule::Ptr<_1ee25a358_ParamIns>,jule::Ptr<_1ee25a358_ParamIns>)>([=](jule::Ptr<_1ee25a358_ParamIns> _27231_p1,jule::Ptr<_1ee25a358_ParamIns> _27246_p2) mutable -> jule::Bool {
		if (_27231_p1.get()._field_decl.get()._field_mutable != _27246_p2.get()._field_decl.get()._field_mutable) {
			return false;
		}
		if (_1ee256398_is_self(_27231_p1.get()._field_decl.ptr())) {
			if ((!(_1ee256398_is_self(_27246_p2.get()._field_decl.ptr())))) {
				return false;
			}
			if (_1ee256673_is_ref(_27231_p1.get()._field_decl.ptr()) != _1ee256673_is_ref(_27246_p2.get()._field_decl.ptr())) {
				return false;
			}
			return true;
		}
		if (_27231_p1.get()._field_decl.get()._field_reference != _27246_p2.get()._field_decl.get()._field_reference) {
			return false;
		}
		if (_27231_p1.get()._field_decl.get()._field_variadic != _27246_p2.get()._field_decl.get()._field_variadic) {
			return false;
		}
		return _1eee7741a_equals(_27231_p1.get()._field_kind, _27246_p2.get()._field_kind);
	});
	if (_24413_f.get()._field_params.len() != static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_params.len()))) {
		return false;
	}
	_26517_i=0LL;
	for (; _26517_i < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_params.len())); (_26517_i)++) {
		{
			if ((!(_27213_check_params(_self_.get()._field_params[_26517_i],_24413_f.get()._field_params[_26517_i])))) {
				return false;
			}
		}
	_iter_next_20298c2b2:;
	}
	_iter_end_20298c2b2:;
	if ((!(_1ee257e7c_is_void(_self_.get()._field_decl.ptr())))) {
		if ((!(_1eee7741a_equals(_self_.get()._field_result, _24413_f.get()._field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _1ee25c13a_is_builtin(_1ee25b4ad_FnIns* _self_) {
	return ((*_self_)._field_caller != nullptr);
}



inline jule::Bool _1ee25c415_is_anon(_1ee25b4ad_FnIns* _self_) {
	return (*_self_)._field_anon || (((*_self_)._field_decl != nullptr) && _1ee258ad7_is_anon((*_self_)._field_decl.ptr()));
}



inline jule::Bool _1ee25c7bc_same(_1ee25b4ad_FnIns* _self_,jule::Ptr<_1ee25b4ad_FnIns> _33523_f) {
	if (((*_self_)._field_decl != _33523_f.get()._field_decl) || (_33523_f.get()._field_generics.len() != static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_generics.len())))) {
		return false;
	}
	{
		auto &expr = (*_self_)._field_generics;
		auto it = expr.begin();
		_iter_begin_20299692b:;
		if (it != expr.end()) {
			jule::I32 _202997b4c_i = it - expr.begin();
			jule::Ptr<_1eee76b45_TypeKind> &_202997cd4_g = *it;
			{
				if ((!(_1eee7741a_equals(_202997cd4_g, _33523_f.get()._field_generics[_202997b4c_i])))) {
					return false;
				}
			}
			_iter_next_20299692b:;
			++it;
			_202997b4c_i++;
			goto _iter_begin_20299692b;
		}
		_iter_end_20299692b:;
	}
	return true;
}



inline jule::Str _1ee25cb74_get_kind_str(_1ee25b4ad_FnIns* _self_,jule::Bool _35131_ident) {
	jule::Str _35217_s = jule::Str();
	if ((*_self_)._field_decl.get()._field_unsafety) {
		_35217_s+=jule::Str("unsafe ", 7);
	}
	_35217_s+=jule::Str("fn", 2);
	if (_35131_ident && ((*_self_)._field_decl != nullptr)) {
		_35217_s+=jule::Str(" ", 1) + (*_self_)._field_decl.get()._field_ident;
	}
	if (((*_self_)._field_generics.len() > 0LL)) {
		_35217_s+=jule::Str("[", 1);
		{
			auto &expr = (*_self_)._field_generics;
			auto it = expr.begin();
			_iter_begin_20299ad4d:;
			if (it != expr.end()) {
				jule::I32 _20299b36a_i = it - expr.begin();
				jule::Ptr<_1eee76b45_TypeKind> &_20299b4be_t = *it;
				{
					_35217_s+=_1eee77063_to_str(_20299b4be_t.ptr());
					if ((_20299b36a_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_generics.len()))) {
						_35217_s+=jule::Str(",", 1);
					}
				}
				_iter_next_20299ad4d:;
				++it;
				_20299b36a_i++;
				goto _iter_begin_20299ad4d;
			}
			_iter_end_20299ad4d:;
		}
		_35217_s+=jule::Str("]", 1);
	} else if (((*_self_)._field_decl.get()._field_generics.len() > 0LL)) {
		_35217_s+=jule::Str("[", 1);
		{
			auto &expr = (*_self_)._field_decl.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_20299d1e6:;
			if (it != expr.end()) {
				jule::I32 _20299d45a_i = it - expr.begin();
				jule::Ptr<_1e02d911b_GenericDecl> &_20299d69c_g = *it;
				{
					_35217_s+=_20299d69c_g.get()._field_ident;
					if ((_20299d45a_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_decl.get()._field_generics.len()))) {
						_35217_s+=jule::Str(",", 1);
					}
				}
				_iter_next_20299d1e6:;
				++it;
				_20299d45a_i++;
				goto _iter_begin_20299d1e6;
			}
			_iter_end_20299d1e6:;
		}
		_35217_s+=jule::Str("]", 1);
	}
	_35217_s+=jule::Str("(", 1);
	jule::I32 _38513_n = (*_self_)._field_params.len();
	if ((_38513_n > 0LL)) {
		{
			auto &expr = (*_self_)._field_params;
			auto it = expr.begin();
			_iter_begin_2029a0b88:;
			if (it != expr.end()) {
				jule::Ptr<_1ee25a358_ParamIns> &_2029a0c54_p = *it;
				{
					_35217_s+=_1ee25a798_to_str(_2029a0c54_p.ptr());
					_35217_s+=jule::Str(",", 1);
				}
				_iter_next_2029a0b88:;
				++it;
				goto _iter_begin_2029a0b88;
			}
			_iter_end_2029a0b88:;
		}
		(_35217_s).mut_slice(0LL,_35217_s.len() - 1LL);
	}
	_35217_s+=jule::Str(")", 1);
	if ((*_self_)._field_decl.get()._field_exceptional) {
		_35217_s+=jule::Str("!", 1);
	}
	if ((!(_1ee257e7c_is_void((*_self_)._field_decl.ptr())))) {
		_35217_s+=jule::Str(":", 1);
		_35217_s+=_1eee77063_to_str((*_self_)._field_result.ptr());
	}
	return _35217_s;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee25b4ad_FnIns _Src) {
	_Stream << _1ee25b887_to_str(&_Src);
	return _Stream;
}



inline jule::Ptr<_1ee25edda_ReferenceStack> static__1ee26013d_new(void) {
	return jule::new_ptr<_1ee25edda_ReferenceStack>();
}



inline jule::I32 _1ee260539_len(_1ee25edda_ReferenceStack* _self_) {
	return static_cast<jule::I32>((*_self_)._field_buffer.len());
}



inline jule::Any _1ee2608e1_at(_1ee25edda_ReferenceStack* _self_,jule::I32 _5825_i) {
	return (*_self_)._field_buffer[_5825_i];
}



inline void _1ee260c10_push(_1ee25edda_ReferenceStack* _self_,jule::Any _6331_ref) {
	(*_self_)._field_buffer = jule::alloc_for_append((*_self_)._field_buffer,1);(*_self_)._field_buffer.__push(_6331_ref);
}



inline jule::Bool _1ee2610b7_exist_0(_1ee25edda_ReferenceStack* _self_,jule::Ptr<_1eedeb24b_Var> _6827_t) {
	{
		auto &expr = (*_self_)._field_buffer;
		auto it = expr.begin();
		_iter_begin_202c378d1:;
		if (it != expr.end()) {
			jule::Any &_202c37abd_ref = *it;
			{
				if (_202c37abd_ref == jule::Any(jule::Any(_6827_t))) {
					return true;
				}
			}
			_iter_next_202c378d1:;
			++it;
			goto _iter_begin_202c378d1;
		}
		_iter_end_202c378d1:;
	}
	return false;
}

inline jule::Bool _1ee2610b7_exist_1(_1ee25edda_ReferenceStack* _self_,jule::Ptr<_1ee25b4ad_FnIns> _6827_t) {
	{
		auto &expr = (*_self_)._field_buffer;
		auto it = expr.begin();
		_iter_begin_202c3a9d3:;
		if (it != expr.end()) {
			jule::Any &_202c3abc0_ref = *it;
			{
				if (_202c3abc0_ref == jule::Any(jule::Any(_6827_t))) {
					return true;
				}
			}
			_iter_next_202c3a9d3:;
			++it;
			goto _iter_begin_202c3a9d3;
		}
		_iter_end_202c3a9d3:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee25edda_ReferenceStack _Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ee2659b2_SymbolBuilder> _1ee2660de_get_root(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_) {
	jule::Ptr<_1ee2659b2_SymbolBuilder> _28117_root = _self_;
	while ((_28117_root.get()._field_owner != nullptr)) {
		{
			_28117_root=_28117_root.get()._field_owner;
		}
	_iter_next_2029a6232:;
	}
	_iter_end_2029a6232:;
	return _28117_root;
}



inline void _1ee2665b7_push_err(_1ee2659b2_SymbolBuilder* _self_,_1e02c1d07_Token& _28828_token,jule::Str _28842_fmt,jule::Slice<jule::Any> _28855_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_1eedc828e_compiler_err(_28828_token,true,_28842_fmt,_28855_args));
}



inline void _1ee266a90_push_err_text(_1ee2659b2_SymbolBuilder* _self_,_1e02c1d07_Token& _29233_token,jule::Str _29247_fmt,jule::Slice<jule::Any> _29260_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_1eedc828e_compiler_err(_29233_token,false,_29247_fmt,_29260_args));
}



inline void _1ee266e8b_push_suggestion(_1ee2659b2_SymbolBuilder* _self_,jule::Str _29734_fmt,jule::Slice<jule::Any> _29747_args) {
	{
		_1eedc99cc_push_suggestion((&((*_self_)._field_errors[((*_self_)._field_errors.len() - 1LL)])),_29734_fmt,_29747_args);
	}
}



inline jule::Bool _1ee267354_check_cpp_use_decl_path(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1e02e009a_UseDecl>& _30143_decl) {
	jule::Bool _30161_ok = jule::Bool();
	if (_208dd1348_is_std_header_path(_30143_decl.get()._field_link_path)) {
		_30161_ok = true;
		return _30161_ok;
	}
	jule::Str _30613_ext = _208c75220_ext(_30143_decl.get()._field_link_path);
	if ((!(_208dd1634_is_valid_header_ext(_30613_ext))) && (!(_208dd1942_is_valid_cpp_ext(_30613_ext)))) {
		_1ee2665b7_push_err(&(*_self_), _30143_decl.get()._field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_30613_ext)}));
		_30161_ok = false;
		return _30161_ok;
	}
	jule::Ptr<_222424a2c_Status> _31313_info = ({
		auto except = static__208c76034_of(_30143_decl.get()._field_link_path);
		(except.ok()) ? (except.result) : ({{
			_1ee2665b7_push_err(&(*_self_), _30143_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_30143_decl.get()._field_link_path)}));
			_30161_ok = false;
			return _30161_ok;
			_30161_ok = false;
			return _30161_ok;
		} jule::Ptr<_222424a2c_Status>();});
	});
	if (_22243c6d2_is_dir(_31313_info.ptr())) {
		_1ee2665b7_push_err(&(*_self_), _30143_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_30143_decl.get()._field_link_path)}));
		_30161_ok = false;
		return _30161_ok;
	}
	_30161_ok = true;
	return _30161_ok;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee26773e_build_cpp_header_import(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1e02e009a_UseDecl>& _32547_decl) {
	jule::Str _32617_path = _32547_decl.get()._field_link_path;
	if ((!(_208dd1348_is_std_header_path(_32547_decl.get()._field_link_path)))) {
		jule::Bool _32921_ok = _1ee267354_check_cpp_use_decl_path(&(*_self_), _32547_decl);
		if ((!(_32921_ok))) {
			return nullptr;
		}
		std::tie(_32617_path,_32921_ok) = _208c75385_abs(_32547_decl.get()._field_link_path);
		if ((!(_32921_ok))) {
			_1ee2665b7_push_err(&(*_self_), _32547_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_32547_decl.get()._field_link_path)}));
		}
	}
	return jule::new_ptr<_1eedc08c4_ImportInfo>(_1eedc08c4_ImportInfo(_32547_decl.get()._field_token,_32617_path,_32547_decl.get()._field_link_path,jule::Str(),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_1e02c1d07_Token>(),nullptr,jule::I32()));
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee267ad5_build_std_import(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1e02e009a_UseDecl>& _35240_decl) {
	jule::Str _35317_path = _35240_decl.get()._field_link_path.slice(5LL);
	_35317_path=_208c732b7_replace(_35317_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_35317_path=_208c750aa_join(jule::Slice<jule::Str>({_208e02831_PATH_STDLIB,_35317_path}));
	jule::Bool _35620_ok;
	std::tie(_35317_path,_35620_ok) = _208c75385_abs(_35317_path);
	if ((!(_35620_ok))) {
		_1ee2665b7_push_err(&(*_self_), _35240_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_35240_decl.get()._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_222424a2c_Status> _36313_info = ({
		auto except = static__208c76034_of(_35317_path);
		(except.ok()) ? (except.result) : ({{
			_1ee2665b7_push_err(&(*_self_), _35240_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_35240_decl.get()._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_222424a2c_Status>();});
	});
	if ((!(_22243c6d2_is_dir(_36313_info.ptr())))) {
		_1ee2665b7_push_err(&(*_self_), _35240_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_35240_decl.get()._field_link_path)}));
		return nullptr;
	}
	jule::I32 _37313_i = (_2308c10a8_find_last(_35240_decl.get()._field_link_path,jule::Str("::", 2)) + 1LL);
	jule::Str _37413_ident = _35240_decl.get()._field_link_path.slice(_37313_i);
	return jule::new_ptr<_1eedc08c4_ImportInfo>(_1eedc08c4_ImportInfo(_35240_decl.get()._field_token,_35317_path,_35240_decl.get()._field_link_path,_37413_ident,_35240_decl.get()._field_alias,jule::Bool(),false,true,_35240_decl.get()._field_full,jule::Slice<_1e02c1d07_Token>(),jule::new_ptr<_1eedc3da0_Package>(_1eedc3da0_Package(nullptr)),jule::I32()));
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee267e8c_build_ident_import(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1e02e009a_UseDecl>& _39143_decl) {
	jule::Str _39213_mod_path = _1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbbb56_get_mod_path(_self_.get()._field_importer);
	if ((_39213_mod_path.len() == 0LL)) {
		_1ee2665b7_push_err(_self_.ptr(), _39143_decl.get()._field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		_1ee266e8b_push_suggestion(_self_.ptr(), jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Str _39917_path = _39143_decl.get()._field_link_path;
	_39917_path=_208c732b7_replace(_39917_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_39917_path=_208c750aa_join(jule::Slice<jule::Str>({_39213_mod_path,_39917_path}));
	jule::Bool _40320_ok;
	std::tie(_39917_path,_40320_ok) = _208c75385_abs(_39917_path);
	if ((!(_40320_ok))) {
		_1ee2665b7_push_err(_self_.ptr(), _39143_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_39143_decl.get()._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_222424a2c_Status> _41013_info = ({
		auto except = static__208c76034_of(_39917_path);
		(except.ok()) ? (except.result) : ({{
			_1ee2665b7_push_err(_self_.ptr(), _39143_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_39143_decl.get()._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_222424a2c_Status>();});
	});
	if ((!(_22243c6d2_is_dir(_41013_info.ptr())))) {
		_1ee2665b7_push_err(_self_.ptr(), _39143_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any(_39143_decl.get()._field_link_path)}));
		return nullptr;
	}
	jule::I32 _42013_i = (_2308c10a8_find_last(_39143_decl.get()._field_link_path,jule::Str("::", 2)) + 1LL);
	jule::Str _42113_ident = _39143_decl.get()._field_link_path.slice(_42013_i);
	return jule::new_ptr<_1eedc08c4_ImportInfo>(_1eedc08c4_ImportInfo(_39143_decl.get()._field_token,_39917_path,_39143_decl.get()._field_link_path,_42113_ident,_39143_decl.get()._field_alias,jule::Bool(),false,false,_39143_decl.get()._field_full,jule::Slice<_1e02c1d07_Token>(),jule::new_ptr<_1eedc3da0_Package>(_1eedc3da0_Package(nullptr)),jule::I32()));
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee268344_build_import(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1e02e009a_UseDecl>& _43837_decl) {
	{
		
		if (_43837_decl.get()._field_cpp_linked) {
			_case_begin_2029c7b38:;
			{
				return _1ee26773e_build_cpp_header_import(_self_.ptr(), _43837_decl);
			}
		}
		else if (_43837_decl.get()._field_std) {
			_case_begin_2029c75d8:;
			{
				return _1ee267ad5_build_std_import(_self_.ptr(), _43837_decl);
			}
		}
		else {
			_case_begin_2029c6ecd:;
			{
				return _1ee267e8c_build_ident_import(_self_, _43837_decl);
			}
		}
		_match_end_2029c6e34:;
	}
}



inline jule::Bool _1ee268740_check_duplicate_use_decl(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1eedc08c4_ImportInfo>& _44644_pkg) {
	jule::Bool _44664_ok = jule::Bool();
	jule::Ptr<_1eedc08c4_ImportInfo> _44813_lpkg = _1eee3d29e_select_package((*_self_)._field_table.ptr(), jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>([=](jule::Ptr<_1eedc08c4_ImportInfo> _44849_spkg) mutable -> jule::Bool {
		return _44644_pkg.get()._field_path == _44849_spkg.get()._field_path;
	}));
	if ((_44813_lpkg == nullptr)) {
		_44664_ok = true;
		return _44664_ok;
	}
	_1ee2665b7_push_err(&(*_self_), _44644_pkg.get()._field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>({jule::Any(_44644_pkg.get()._field_link_path)}));
	_1ee266e8b_push_suggestion(&(*_self_), jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_44664_ok = false;
	return _44664_ok;
}



inline void _1ee268b2a_impl_import_selections(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1eedc08c4_ImportInfo>& _46046_imp,jule::Ptr<_1e02e009a_UseDecl>& _46069_decl) {
	{
		auto &expr = _46069_decl.get()._field_selected;
		auto it = expr.begin();
		_iter_begin_2029cd90d:;
		if (it != expr.end()) {
			_1e02c1d07_Token _2029cd9c9_ident = *it;
			{
				if (_1eedc3740_exist_ident(_46046_imp.ptr(), _2029cd9c9_ident._field_kind)) {
					_1ee2665b7_push_err(&(*_self_), _2029cd9c9_ident,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>({jule::Any(_2029cd9c9_ident._field_kind)}));
					_1ee266e8b_push_suggestion(&(*_self_), jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
					goto _iter_next_2029cd90d;
				}
				_46046_imp.get()._field_selected = jule::alloc_for_append(_46046_imp.get()._field_selected,1);_46046_imp.get()._field_selected.__push(_2029cd9c9_ident);
			}
			_iter_next_2029cd90d:;
			++it;
			goto _iter_begin_2029cd90d;
		}
		_iter_end_2029cd90d:;
	}
}



inline jule::Str _1ee268ed2_get_as_link_path(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Str _47240_path) {
	if (_208be3dd6_has_prefix(_47240_path,_208e02831_PATH_STDLIB)) {
		(_47240_path).mut_slice(_208e02831_PATH_STDLIB.len());
		return jule::Str("std", 3) + _208c732b7_replace(_47240_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _47814_root;
	std::tie(_47814_root,std::ignore) = _208c75385_abs(_1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbbb56_get_mod_path(_self_.get()._field_importer));
	(_47240_path).mut_slice(_47814_root.len());
	if ((_47240_path[0LL] == 92LLU)) {
		(_47240_path).mut_slice(1LL);
	}
	return _208c732b7_replace(_47240_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
}



inline void _1ee2694aa_push_cycle_error(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1ee2659b2_SymbolBuilder>& _48637_sb,jule::Str _48657_path,jule::Str& _48673_message) {
	
	jule::Str _48913_refers_to = _208de2722_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_1ee268ed2_get_as_link_path(_self_, _1e02c89bd_dir(_48637_sb.get()._field_table.get()._field_file.ptr()))),jule::Any(_1ee268ed2_get_as_link_path(_self_, _48657_path))}));
	(_48673_message).buffer.insert(0, (((_208bde08a_repeat(jule::Str(" ", 1),4LL) + _48913_refers_to) + jule::Str("\n", 1))));
}



inline void _1ee269983_push_cross_cycle_error(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1ee2659b2_SymbolBuilder>& _49643_target,jule::Ptr<_1eedc08c4_ImportInfo>& _49668_imp,_1e02c1d07_Token& _49687_error_token) {
	jule::Str _49717_message = jule::Str();
	_1ee2694aa_push_cycle_error(_self_, _self_,_49668_imp.get()._field_path,_49717_message);
	jule::Ptr<_1ee2659b2_SymbolBuilder> _50117_owner = _self_.get()._field_owner;
	jule::Ptr<_1ee2659b2_SymbolBuilder> _50217_old = _self_;
	while ((_50117_owner.get()._field_owner != nullptr)) {
		{
			_1ee2694aa_push_cycle_error(_self_, _50217_old.get()._field_owner,_1e02c89bd_dir(_50217_old.get()._field_table.get()._field_file.ptr()),_49717_message);
			if (_50117_owner.get()._field_owner == _49643_target) {
				_1ee2694aa_push_cycle_error(_self_, _49643_target,_1e02c89bd_dir(_50117_owner.get()._field_table.get()._field_file.ptr()),_49717_message);
				goto _iter_end_2029d9ba0;
			}
			_50217_old=_50117_owner;
			_50117_owner=_50117_owner.get()._field_owner;
		}
	_iter_next_2029d9ba0:;
	}
	_iter_end_2029d9ba0:;
	_1ee2665b7_push_err(_self_.ptr(), _49687_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_49717_message)}));
}



inline jule::Bool _1ee269e17_check_import_cycles(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1eedc08c4_ImportInfo> _51939_imp,jule::Ptr<_1e02e009a_UseDecl>& _51958_decl) {
	if (_51939_imp.get()._field_path == _1e02c89bd_dir(_self_.get()._field_table.get()._field_file.ptr())) {
		_1ee2665b7_push_err(_self_.ptr(), _51958_decl.get()._field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any(_1ee268ed2_get_as_link_path(_self_, _51939_imp.get()._field_path))}));
		return false;
	}
	if ((_self_.get()._field_owner == nullptr)) {
		return true;
	}
	if (_1e02c89bd_dir(_self_.get()._field_owner.get()._field_table.get()._field_file.ptr()) == _51939_imp.get()._field_path) {
		_1ee269983_push_cross_cycle_error(_self_, _self_.get()._field_owner,_51939_imp,_51958_decl.get()._field_token);
		return false;
	}
	jule::Ptr<_1ee2659b2_SymbolBuilder> _53417_owner = _self_.get()._field_owner;
	_julec_label_iter:;
	if (_1e02c89bd_dir(_53417_owner.get()._field_table.get()._field_file.ptr()) == _51939_imp.get()._field_path) {
		_1ee269983_push_cross_cycle_error(_self_, _53417_owner,_51939_imp,_51958_decl.get()._field_token);
		return false;
	}
	if ((_53417_owner.get()._field_owner != nullptr)) {
		_53417_owner=_53417_owner.get()._field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline void _1ee26a434_check_package_accessibility(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1e02e009a_UseDecl>& _55547_decl,jule::Str& _55564_mod,jule::Str& _55575_path) {
	if ((_1eedbccde_Importer_mptr_data[((*_self_)._field_importer).type_offset]._1eedbbb56_get_mod_path((*_self_)._field_importer) != _55564_mod) && _208c72a9c_contains(_55575_path,jule::Str("internal", 8))) {
		_1ee2665b7_push_err(&(*_self_), _55547_decl.get()._field_token,jule::Str("you cannot access to internal packages", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _1ee26a8a7_import_package(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1eedc08c4_ImportInfo>& _56139_imp,jule::Ptr<_1e02e009a_UseDecl>& _56162_decl) {
	jule::Bool _56180_ok = jule::Bool();
	if (_56139_imp.get()._field_cpp_linked) {
		_56180_ok = true;
		return _56180_ok;
	}
	jule::Ptr<_1eedc08c4_ImportInfo> _56617_port = _1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbc3b5_get_import(_self_.get()._field_importer, _56139_imp.get()._field_path);
	if ((_56617_port != nullptr)) {
		_56139_imp.get()._field_package=_56617_port.get()._field_package;
		_56139_imp.get()._field_duplicate=true;
		jule::Str _57117_old_mod = _1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbbb56_get_mod_path(_self_.get()._field_importer);
		_1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbb8c0_set_mod_path(_self_.get()._field_importer, _1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbc00d_mod_by_id(_self_.get()._field_importer, _56139_imp.get()._field_mod_id));
		_1ee26a434_check_package_accessibility(_self_.ptr(), _56162_decl,_57117_old_mod,_56617_port.get()._field_path);
		_1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbb8c0_set_mod_path(_self_.get()._field_importer, _57117_old_mod);
	} else {
		if ((!(_1ee269e17_check_import_cycles(_self_, _56139_imp,_56162_decl)))) {
			_56180_ok = false;
			return _56180_ok;
		}
		jule::Str _58017_old_mod = _1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbbb56_get_mod_path(_self_.get()._field_importer);
		__JULE_DEFER({
			_1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbb8c0_set_mod_path(_self_.get()._field_importer, _58017_old_mod);
		});
		if (_56139_imp.get()._field_std) {
			_1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbb8c0_set_mod_path(_self_.get()._field_importer, _208e02831_PATH_STDLIB);
		}
		jule::Slice<jule::Ptr<_1e01bcb7b_Ast>> _58522_asts;
		jule::Slice<_208de2238_Log> _58532_errors;
		std::tie(_58522_asts,_58532_errors) = _1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbc849_import_package(_self_.get()._field_importer, _56139_imp.get()._field_path,(!(_56139_imp.get()._field_std)));
		if ((_58532_errors.len() > 0LL)) {
			_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_58532_errors);
			_56180_ok = false;
			return _56180_ok;
		}
		_1ee26a434_check_package_accessibility(_self_.ptr(), _56162_decl,_58017_old_mod,_56139_imp.get()._field_path);
		{
			auto &expr = _58522_asts;
			auto it = expr.begin();
			_iter_begin_2029ee3e0:;
			if (it != expr.end()) {
				jule::Ptr<_1e01bcb7b_Ast> _2029eec1a_ast = *it;
				{
					jule::Ptr<_1eee3c842_SymbolTable> _59425_table = nullptr;
					std::tie(_59425_table,_58532_errors) = _1eee9a163_build_symbols(_2029eec1a_ast,_self_.get()._field_importer,_self_);
					if ((_58532_errors.len() > 0LL)) {
						_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_58532_errors);
						_1ee266a90_push_err_text(_self_.ptr(), _56139_imp.get()._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_56139_imp.get()._field_link_path)}));
						_56180_ok = false;
						return _56180_ok;
					}
					_56139_imp.get()._field_package.get()._field_files = jule::alloc_for_append(_56139_imp.get()._field_package.get()._field_files,1);_56139_imp.get()._field_package.get()._field_files.__push(_59425_table);
				}
				_iter_next_2029ee3e0:;
				++it;
				goto _iter_begin_2029ee3e0;
			}
			_iter_end_2029ee3e0:;
		}
	}
	_1ee268b2a_impl_import_selections(_self_.ptr(), _56139_imp,_56162_decl);
	_56180_ok = true;
	return _56180_ok;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1ee26ac5e_import_use_decl(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_,jule::Ptr<_1e02e009a_UseDecl>& _61340_decl) {
	jule::Ptr<_1eedc08c4_ImportInfo> _61417_imp = _1ee268344_build_import(_self_, _61340_decl);
	if ((_61417_imp == nullptr)) {
		return nullptr;
	}
	jule::Bool _62017_ok = _1ee268740_check_duplicate_use_decl(_self_.ptr(), _61417_imp);
	if ((!(_62017_ok))) {
		return nullptr;
	}
	_62017_ok=_1ee26a8a7_import_package(_self_, _61417_imp,_61340_decl);
	_self_.get()._field_table.get()._field_imports = jule::alloc_for_append(_self_.get()._field_table.get()._field_imports,1);_self_.get()._field_table.get()._field_imports.__push(_61417_imp);
	if (_62017_ok) {
		_1eedbccde_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._1eedbcb68_imported(_self_.get()._field_importer, _61417_imp);
		return _61417_imp;
	}
	return nullptr;
}



inline void _1ee26aea1_import_use_decls(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_) {
	{
		auto &expr = _self_.get()._field_ast.get()._field_use_decls;
		auto it = expr.begin();
		_iter_begin_202a06bcd:;
		if (it != expr.end()) {
			jule::Ptr<_1e02e009a_UseDecl> _202a06c55_decl = *it;
			{
				_1ee26ac5e_import_use_decl(_self_, _202a06c55_decl);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					goto _iter_end_202a06bcd;
				}
			}
			_iter_next_202a06bcd:;
			++it;
			goto _iter_begin_202a06bcd;
		}
		_iter_end_202a06bcd:;
	}
}



inline void _1ee26b2c0_append_node(_1ee2659b2_SymbolBuilder* _self_,_1e01be3a8_Node& _64535_node) {
	{
		auto &_match_expr{ _64535_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02e2993_Impl>>()) {
			_case_begin_202a08619:;
			{
				(*_self_)._field_table.get()._field_impls = jule::alloc_for_append((*_self_)._field_table.get()._field_impls,1);(*_self_)._field_table.get()._field_impls.__push(_1ee26531e_build_impl(_64535_node._field_data.operator jule::Ptr<_1e02e2993_Impl>()));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dde01_TypeAliasDecl>>()) {
			_case_begin_202a08680:;
			{
				jule::Ptr<_1eee75baa_TypeAlias> _65021_ta = _1ee262041_build_type_alias(_64535_node._field_data.operator jule::Ptr<_1e02dde01_TypeAliasDecl>());
				(*_self_)._field_table.get()._field_type_aliases = jule::alloc_for_append((*_self_)._field_table.get()._field_type_aliases,1);(*_self_)._field_table.get()._field_type_aliases.__push(_65021_ta);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02e1de3_StructDecl>>()) {
			_case_begin_202a086e6:;
			{
				jule::Ptr<_1ee242032_Struct> _65321_srct = _1ee2629ae_build_struct(_64535_node._field_data.operator jule::Ptr<_1e02e1de3_StructDecl>());
				(*_self_)._field_table.get()._field_structs = jule::alloc_for_append((*_self_)._field_table.get()._field_structs,1);(*_self_)._field_table.get()._field_structs.__push(_65321_srct);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02da32b_FnDecl>>()) {
			_case_begin_202a0875c:;
			{
				jule::Ptr<_1ee2579b5_Fn> _65621_f = _1ee26377e_build_fn(_64535_node._field_data.operator jule::Ptr<_1e02da32b_FnDecl>());
				(*_self_)._field_table.get()._field_funcs = jule::alloc_for_append((*_self_)._field_table.get()._field_funcs,1);(*_self_)._field_table.get()._field_funcs.__push(_65621_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02e2443_TraitDecl>>()) {
			_case_begin_202a0920d:;
			{
				jule::Ptr<_1eec8627e_Trait> _65921_t = _1ee263d9a_build_trait(_64535_node._field_data.operator jule::Ptr<_1e02e2443_TraitDecl>());
				(*_self_)._field_table.get()._field_traits = jule::alloc_for_append((*_self_)._field_table.get()._field_traits,1);(*_self_)._field_table.get()._field_traits.__push(_65921_t);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02daea8_VarDecl>>()) {
			_case_begin_202a09274:;
			{
				jule::Ptr<_1eedeb24b_Var> _66221_v = _1ee264c03_build_var(_64535_node._field_data.operator jule::Ptr<_1e02daea8_VarDecl>());
				(*_self_)._field_table.get()._field_vars = jule::alloc_for_append((*_self_)._field_table.get()._field_vars,1);(*_self_)._field_table.get()._field_vars.__push(_66221_v);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02e0d9d_EnumDecl>>()) {
			_case_begin_202a092da:;
			{
				jule::Ptr<_1eec889ac_Enum> _66521_e = _1ee2647c4_build_enum(_64535_node._field_data.operator jule::Ptr<_1e02e0d9d_EnumDecl>());
				(*_self_)._field_table.get()._field_enums = jule::alloc_for_append((*_self_)._field_table.get()._field_enums,1);(*_self_)._field_table.get()._field_enums.__push(_66521_e);
			}
		}
		else {
			_case_begin_202a085a3:;
			{
				_1ee2665b7_push_err(&(*_self_), _64535_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_202a0854d:;
	}
}



inline void _1ee26b512_append_nodes(_1ee2659b2_SymbolBuilder* _self_) {
	{
		auto &expr = (*_self_)._field_ast.get()._field_nodes;
		auto it = expr.begin();
		_iter_begin_202a1239d:;
		if (it != expr.end()) {
			_1e01be3a8_Node _202a1259b_node = *it;
			{
				_1ee26b2c0_append_node(&(*_self_), _202a1259b_node);
			}
			_iter_next_202a1239d:;
			++it;
			goto _iter_begin_202a1239d;
		}
		_iter_end_202a1239d:;
	}
}



inline void _1ee26b831_push_directive_pass(_1ee2659b2_SymbolBuilder* _self_,jule::Ptr<_1e02812b1_Directive>& _67843_d) {
	if ((_67843_d.get()._field_args.len() == 0LL)) {
		_1ee2665b7_push_err(&(*_self_), _67843_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((_67843_d.get()._field_args.len() > 1LL)) {
		_1e02c1d07_Token _68317_arg = _67843_d.get()._field_args[1LL];
		_1ee2665b7_push_err(&(*_self_), _68317_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1e02c1d07_Token _68713_arg = _67843_d.get()._field_args[0LL];
	if (_68713_arg._field_id != static_cast<jule::U32>(6LLU)) {
		_1ee2665b7_push_err(&(*_self_), _68713_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_68713_arg._field_kind[0LL] != '\"') {
		_1ee2665b7_push_err(&(*_self_), _68713_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*_self_)._field_table.get()._field_passes = jule::alloc_for_append((*_self_)._field_table.get()._field_passes,1);(*_self_)._field_table.get()._field_passes.__push(_1ee261518_Pass(_67843_d.get()._field_tag,_68713_arg._field_kind.slice(1LL,(_68713_arg._field_kind.len() - 1LL))));
}



inline void _1ee26ba73_append_top_directives(_1ee2659b2_SymbolBuilder* _self_) {
	{
		auto &expr = (*_self_)._field_ast.get()._field_top_directives;
		auto it = expr.begin();
		_iter_begin_202a18a9c:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _202a19ce0_d = *it;
			{
				{
					auto &_match_expr{ _202a19ce0_d.get()._field_tag._field_kind };
					
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_202a1a1a8:;
						{
							_1ee26b831_push_directive_pass(&(*_self_), _202a19ce0_d);
						}
					}
					_match_end_202a1a5a4:;
				}
			}
			_iter_next_202a18a9c:;
			++it;
			goto _iter_begin_202a18a9c;
		}
		_iter_end_202a18a9c:;
	}
}



inline void _1ee26bcb5_build(jule::Ptr<_1ee2659b2_SymbolBuilder> _self_) {
	_self_.get()._field_table=jule::new_ptr<_1eee3c842_SymbolTable>(_1eee3c842_SymbolTable(_self_.get()._field_ast.get()._field_file,jule::Slice<_1ee261518_Pass>(),jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Slice<jule::Ptr<_1ee242032_Struct>>(),jule::Slice<jule::Ptr<_1ee2579b5_Fn>>(),jule::Slice<jule::Ptr<_1eec8627e_Trait>>(),jule::Slice<jule::Ptr<_1eec889ac_Enum>>(),jule::Slice<jule::Ptr<_1eec8a4d6_Impl>>()));
	_1ee26ba73_append_top_directives(_self_.ptr());
	_1ee26aea1_import_use_decls(_self_);
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;
	}
	_1ee26b512_append_nodes(_self_.ptr());
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2659b2_SymbolBuilder _Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eec8a915_is_trait_impl(_1eec8a4d6_Impl* _self_) {
	return ((*_self_)._field_base != nullptr);
}



inline jule::Bool _1eec8abe0_is_struct_impl(_1eec8a4d6_Impl* _self_) {
	return ((*_self_)._field_base == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1eec8a4d6_Impl _Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eed8a5a3_Scope _Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda2b92_If _Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda2db2_Else _Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda30d2_Conditional _Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda3302_InfIter _Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eed6db80_is_while_next(_1eeda3522_WhileIter* _self_) {
	return (*_self_)._field_next != jule::Any(jule::Any(nullptr));
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda3522_WhileIter _Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda3742_RangeIter _Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda3962_ContSt _Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda3b82_BreakSt _Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda3da2_Label _Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda40c2_GotoSt _Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda42e2_Postfix _Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda4732_MultiAssign _Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eed7987d_is_generic_type_match(_1eeda4952_Match* _self_) {
	return ((*_self_)._field_type_match && ((*_self_)._field_expr != nullptr)) && (*_self_)._field_expr.get()._field_kind.get()._field_generic;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda4952_Match _Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eed7a9b1_is_default(_1eeda4da3_Case* _self_) {
	return ((*_self_)._field_exprs == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda4da3_Case _Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda50c3_FallSt _Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda52e3_RetSt _Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda5733_ScopeGoto _Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eed419ee_find_package(_1eeda5953_ScopeChecker* _self_,jule::Str _41735_ident) {
	return _1eedca626_find_package((*_self_)._field_s.ptr(), _41735_ident);
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eed44309_select_package(_1eeda5953_ScopeChecker* _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _42737_selector) {
	return _1eedca9cd_select_package((*_self_)._field_s.ptr(), _42737_selector);
}



inline jule::Ptr<_1eedeb24b_Var> _1eeda5b73_find_var(_1eeda5953_ScopeChecker* _self_,jule::Str _43831_ident,jule::Bool _43843_cpp_linked) {
	
	jule::Ptr<_1eedeb24b_Var> _44117_v = _1eee404c1___find_var((*_self_)._field_table.ptr(), _43831_ident,_43843_cpp_linked,true);
	if ((_44117_v != nullptr)) {
		return _44117_v;
	}
	jule::Ptr<_1eeda5953_ScopeChecker> _44617_parent = (*_self_)._field_parent;
	while ((_44617_parent != nullptr)) {
		{
			_44117_v=_1eee404c1___find_var(_44617_parent.get()._field_table.ptr(), _43831_ident,_43843_cpp_linked,true);
			if ((_44117_v != nullptr)) {
				return _44117_v;
			}
			_44617_parent=_44617_parent.get()._field_parent;
		}
	_iter_next_202a31378:;
	}
	_iter_end_202a31378:;
	return _1eedcae62_find_var((*_self_)._field_s.ptr(), _43831_ident,_43843_cpp_linked);
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eeda5cd8_find_type_alias(_1eeda5953_ScopeChecker* _self_,jule::Str _46538_ident,jule::Bool _46550_cpp_linked) {
	
	jule::Ptr<_1eee75baa_TypeAlias> _46817_ta = _1eee40a32___find_type_alias((*_self_)._field_table.ptr(), _46538_ident,_46550_cpp_linked,true);
	if ((_46817_ta != nullptr)) {
		return _46817_ta;
	}
	jule::Ptr<_1eeda5953_ScopeChecker> _47317_parent = (*_self_)._field_parent;
	while ((_47317_parent != nullptr)) {
		{
			_46817_ta=_1eee40a32___find_type_alias(_47317_parent.get()._field_table.ptr(), _46538_ident,_46550_cpp_linked,true);
			if ((_46817_ta != nullptr)) {
				return _46817_ta;
			}
			_47317_parent=_47317_parent.get()._field_parent;
		}
	_iter_next_202a35aa8:;
	}
	_iter_end_202a35aa8:;
	return _1eedcb3e6_find_type_alias((*_self_)._field_s.ptr(), _46538_ident,_46550_cpp_linked);
}



inline jule::Ptr<_1ee242032_Struct> _1eeda5e5e_find_struct(_1eeda5953_ScopeChecker* _self_,jule::Str _49034_ident,jule::Bool _49046_cpp_linked) {
	return _1eedcb87a_find_struct((*_self_)._field_s.ptr(), _49034_ident,_49046_cpp_linked);
}



inline jule::Ptr<_1ee2579b5_Fn> _1eeda63e3_find_fn(_1eeda5953_ScopeChecker* _self_,jule::Str _49930_ident,jule::Bool _49942_cpp_linked) {
	return _1eedcbd0e_find_fn((*_self_)._field_s.ptr(), _49930_ident,_49942_cpp_linked);
}



inline jule::Ptr<_1eec8627e_Trait> _1eeda679a_find_trait(_1eeda5953_ScopeChecker* _self_,jule::Str _50833_ident) {
	return _1eedcc1b6_find_trait((*_self_)._field_s.ptr(), _50833_ident);
}



inline jule::Ptr<_1eec889ac_Enum> _1eeda6b52_find_enum(_1eeda5953_ScopeChecker* _self_,jule::Str _51732_ident) {
	return _1eedcc56d_find_enum((*_self_)._field_s.ptr(), _51732_ident);
}



inline jule::Bool _1eeda6ee8_is_unsafe(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	jule::Ptr<_1eeda5953_ScopeChecker> _52517_scope = _self_;
	_julec_label_iter:;
	if (_52517_scope.get()._field_scope.get()._field_unsafety) {
		return true;
	}
	if ((_52517_scope.get()._field_parent != nullptr)) {
		_52517_scope=_52517_scope.get()._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1eeda72c3_is_root(_1eeda5953_ScopeChecker* _self_) {
	return ((*_self_)._field_parent == nullptr) || ((*_self_)._field_owner != nullptr);
}



inline void _1eeda7515_stop(_1eeda5953_ScopeChecker* _self_) {
	(*_self_)._field_i=-1LL;
}



inline jule::Bool _1eeda77e0_stopped(_1eeda5953_ScopeChecker* _self_) {
	return ((*_self_)._field_i == -1LL);
}



inline jule::Bool _1eeda7aba_is_deferred(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	jule::Ptr<_1eeda5953_ScopeChecker> _55817_scope = _self_;
	_julec_label_iter:;
	if (_55817_scope.get()._field_scope.get()._field_deferred) {
		return true;
	}
	if ((_55817_scope.get()._field_parent != nullptr)) {
		_55817_scope=_55817_scope.get()._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1eeda5953_ScopeChecker> _1eeda7d95_get_root(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	jule::Ptr<_1eeda5953_ScopeChecker> _57617_root = _self_;
	while ((_57617_root.get()._field_parent != nullptr) && (_57617_root.get()._field_owner == nullptr)) {
		{
			_57617_root=_57617_root.get()._field_parent;
		}
	_iter_next_202a45513:;
	}
	_iter_end_202a45513:;
	return _57617_root;
}



inline jule::Ptr<_1eeda5953_ScopeChecker> _1eeda8170_get_hard_root(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	jule::Ptr<_1eeda5953_ScopeChecker> _58617_root = _self_;
	while ((_58617_root.get()._field_parent != nullptr)) {
		{
			_58617_root=_58617_root.get()._field_parent;
		}
	_iter_next_202a46cb7:;
	}
	_iter_end_202a46cb7:;
	return _58617_root;
}



inline jule::Ptr<_1eeda3da2_Label> _1eeda8527_find_label(_1eeda5953_ScopeChecker* _self_,jule::Str _59629_ident) {
	{
		auto &expr = (*_self_)._field_scope.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_202a4844a:;
		if (it != expr.end()) {
			jule::Any _202a484c2_st = *it;
			{
				{
					auto &_match_expr{ _202a484c2_st };
					
					if (_match_expr.type_is<jule::Ptr<_1eeda3da2_Label>>()) {
						_case_begin_202a48b76:;
						{
							jule::Ptr<_1eeda3da2_Label> _60025_label = _202a484c2_st.operator jule::Ptr<_1eeda3da2_Label>();
							if (_60025_label.get()._field_ident == _59629_ident) {
								return _60025_label;
							}
						}
					}
					_match_end_202a48b21:;
				}
			}
			_iter_next_202a4844a:;
			++it;
			goto _iter_begin_202a4844a;
		}
		_iter_end_202a4844a:;
	}
	return nullptr;
}



inline jule::Ptr<_1eeda5513_ScopeLabel> _1eeda88ce_find_label_scope(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Str _61236_ident) {
	jule::Ptr<_1eeda5513_ScopeLabel> _61317_label = _1eeda8c86_find_label_all(_self_.ptr(), _61236_ident);
	if ((_61317_label != nullptr) && (_61317_label.get()._field_scope == _self_)) {
		return _61317_label;
	}
	return nullptr;
}



inline jule::Ptr<_1eeda5513_ScopeLabel> _1eeda8c86_find_label_all(_1eeda5953_ScopeChecker* _self_,jule::Str _62433_ident) {
	{
		auto &expr = (*((*_self_)._field_labels));
		auto it = expr.begin();
		_iter_begin_202a4b9ae:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda5513_ScopeLabel> _202a4c075_lbl = *it;
			{
				if (_202a4c075_lbl.get()._field_label.get()._field_ident == _62433_ident) {
					return _202a4c075_lbl;
				}
			}
			_iter_next_202a4b9ae:;
			++it;
			goto _iter_begin_202a4b9ae;
		}
		_iter_end_202a4b9ae:;
	}
	return nullptr;
}



inline jule::Bool _1eeda921a_is_duplicated_ident(_1eeda5953_ScopeChecker* _self_,jule::U32 _63638_itself,jule::Str _63655_ident) {
	jule::Ptr<_1eedeb24b_Var> _63713_v = _1eeda5b73_find_var(&(*_self_), _63655_ident,false);
	if ((_63713_v != nullptr) && (static_cast<jule::U32>(_63713_v) != _63638_itself)) {
		if ((_63713_v.get()._field_scope == nullptr)) {
			return false;
		}
		return (_63713_v.get()._field_scope == (*_self_)._field_scope) || (!(_1eedcc9e1_is_flag((*_self_)._field_s.ptr(), static_cast<jule::I32>(1LL))));
	}
	jule::Ptr<_1eee75baa_TypeAlias> _64513_ta = _1eeda5cd8_find_type_alias(&(*_self_), _63655_ident,false);
	if ((_64513_ta != nullptr) && (static_cast<jule::U32>(_64513_ta) != _63638_itself)) {
		if ((_64513_ta.get()._field_scope == nullptr)) {
			return false;
		}
		return (_64513_ta.get()._field_scope == (*_self_)._field_tree) || (!(_1eedcc9e1_is_flag((*_self_)._field_s.ptr(), static_cast<jule::I32>(1LL))));
	}
	return false;
}



inline void _1eeda9539_check_var_decl(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02daea8_VarDecl> _65638_decl) {
	jule::Ptr<_1eedeb24b_Var> _65717_v = _1ee264c03_build_var(_65638_decl);
	_65717_v.get()._field_scope=_self_.get()._field_scope;
	__JULE_DEFER({
		_self_.get()._field_table.get()._field_vars = jule::alloc_for_append(_self_.get()._field_table.get()._field_vars,1);_self_.get()._field_table.get()._field_vars.__push(_65717_v);
		_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_65717_v));
	});
	if (_1eeda921a_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_65717_v)),_65717_v.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _65717_v.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_65717_v.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		_1eeda7515_stop(_self_.ptr());
		return;
	}
	_1eeddc616_check_var_decl(_self_.get()._field_s, _65717_v,jule::Trait<_1eee992c7_Lookup>(_self_, 0));
	if ((!(_1eedeb944_is_type_inferred(_65717_v.ptr()))) && ((_65717_v.get()._field_kind == nullptr) || (_65717_v.get()._field_kind.get()._field_kind == nullptr))) {
		return;
	}
	_1eede2770_check_type_var(_self_.get()._field_s, _65717_v,jule::Trait<_1eee992c7_Lookup>(_self_, 0));
}



inline void _1eeda9858_check_type_alias_decl(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dde01_TypeAliasDecl> _68045_decl) {
	jule::Ptr<_1eee75baa_TypeAlias> _68117_ta = _1ee262041_build_type_alias(_68045_decl);
	if (_1eeda921a_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_68117_ta)),_68117_ta.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _68117_ta.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_68117_ta.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		_1eeda7515_stop(_self_.ptr());
		return;
	}
	_1eedd7633_check_type_alias_decl(_self_.get()._field_s, _68117_ta,jule::Trait<_1eee992c7_Lookup>(_self_, 0));
	_self_.get()._field_table.get()._field_type_aliases = jule::alloc_for_append(_self_.get()._field_table.get()._field_type_aliases,1);_self_.get()._field_table.get()._field_type_aliases.__push(_68117_ta);
	if ((_68117_ta.get()._field_kind.get()._field_kind == nullptr)) {
		_1eeda7515_stop(_self_.ptr());
	}
}



inline jule::Ptr<_1eed8a5a3_Scope> _1eeda9b33_get_child(_1eeda5953_ScopeChecker* _self_) {
	return jule::new_ptr<_1eed8a5a3_Scope>(_1eed8a5a3_Scope((*_self_)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _1eedaa10b_check_child_ssc(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9ddb_ScopeTree>& _70440_tree,jule::Ptr<_1eed8a5a3_Scope>& _70463_s,jule::Ptr<_1eeda5953_ScopeChecker>& _70479_ssc) {
	_70479_ssc.get()._field_parent=_self_;
	_1eedb7965_check(_70479_ssc, _70440_tree,_70463_s);
}



inline jule::Ptr<_1eed8a5a3_Scope> _1eedaa590_check_child_sc(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9ddb_ScopeTree>& _70939_tree,jule::Ptr<_1eeda5953_ScopeChecker>& _70962_ssc) {
	jule::Ptr<_1eed8a5a3_Scope> _71017_s = _1eeda9b33_get_child(_self_.ptr());
	_1eedaa10b_check_child_ssc(_self_, _70939_tree,_71017_s,_70962_ssc);
	return _71017_s;
}



inline jule::Ptr<_1eed8a5a3_Scope> _1eedaa947_check_child(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9ddb_ScopeTree>& _71536_tree) {
	jule::Ptr<_1eeda5953_ScopeChecker> _71617_ssc = _1eedb7c40_new_child_checker(_self_);
	return _1eedaa590_check_child_sc(_self_, _71536_tree,_71617_ssc);
}



inline void _1eedaac66_check_anon_scope(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9ddb_ScopeTree> _72040_tree) {
	jule::Ptr<_1eed8a5a3_Scope> _72117_s = _1eedaa947_check_child(_self_, _72040_tree);
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_72117_s));
}



inline void _1eedab162_process_error_call(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>& _72543_m,_1e02c1d07_Token _72574_err) {
	if (_1eeda7aba_is_deferred(_self_)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _72574_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eeda5953_ScopeChecker> _73017_root = _1eeda7d95_get_root(_self_);
	if ((!(_73017_root.get()._field_owner.get()._field_decl.get()._field_exceptional))) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _72574_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	}
	_72543_m.get()._field_func=_73017_root.get()._field_owner;
}



inline void _1eedab481_check_expr(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e0181a63_Expr> _73834_expr) {
	jule::Ptr<_1eee45be1_Eval> _73917_eval = _1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0));
	_73917_eval.get()._field_ignored=true;
	jule::Ptr<_1eee43b89_Data> _74117_d = _1eee65e97_eval_expr(_73917_eval, _73834_expr);
	if ((_74117_d == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ _74117_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>()) {
			_case_begin_202a7065e:;
			{
				jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel> _74821_m = _74117_d.get()._field_model.operator jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>();
				_1eedab162_process_error_call(_self_, _74821_m,_73834_expr.get()._field_token);
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_74117_d));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee253d13_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee254165_FreeExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>()) {
			_case_begin_202a706c5:;
			{
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_74117_d));
			}
		}
		else {
			_case_begin_202a701ca:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _73834_expr.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_202a705d7:;
	}
}



inline void _1eedab7a0_check_co_expr(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e0182844_CoExpr> _76637_expr) {
	jule::Ptr<_1eee45be1_Eval> _76717_eval = _1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0));
	_76717_eval.get()._field_ignored=true;
	jule::Ptr<_1eee43b89_Data> _76917_d = _1eee65e97_eval_expr(_76717_eval, _76637_expr.get()._field_expr);
	if ((_76917_d == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ _76917_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>()) {
			_case_begin_202a774ac:;
			{
				jule::Ptr<_1ee24a007_FnCallExprModel> _77621_model = _76917_d.get()._field_model.operator jule::Ptr<_1ee24a007_FnCallExprModel>();
				if (_77621_model.get()._field_func.get()._field_decl.get()._field_exceptional) {
					_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _76637_expr.get()._field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				}
				_77621_model.get()._field_is_co=true;
				_1eee5b5ca_check_fn_of_concurrent_call(_76717_eval.ptr(), _77621_model.get()._field_func,_76637_expr.get()._field_expr.get()._field_token);
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_76917_d));
			}
		}
		else {
			_case_begin_202a762be:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _76637_expr.get()._field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_202a76731:;
	}
}



inline jule::Ptr<_1eeda2b92_If> _1eedabb57_check_if(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dd087_If> _79132_i) {
	jule::Ptr<_1eed8a5a3_Scope> _79217_s = _1eedaa947_check_child(_self_, _79132_i.get()._field_scope);
	jule::Ptr<_1eee43b89_Data> _79417_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _79132_i.get()._field_expr);
	if ((_79417_d == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1eee7bead_Prim> _79917_prim = _1eee791db_prim(_79417_d.get()._field_kind.ptr());
	if ((_79917_prim == nullptr) || (!(_1eee80412_is_bool(_79917_prim.ptr())))) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _79132_i.get()._field_expr.get()._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1eeda2b92_If>(_1eeda2b92_If(_79417_d.get()._field_model,_79217_s));
}



inline jule::Ptr<_1eeda2db2_Else> _1eedac00e_check_else(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dd3ea_Else> _81134_e) {
	return jule::new_ptr<_1eeda2db2_Else>(_1eeda2db2_Else(_1eedaa947_check_child(_self_, _81134_e.get()._field_scope)));
}



inline void _1eedac32d_check_conditional(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dd807_Conditional> _81741_conditional) {
	jule::Ptr<_1eeda30d2_Conditional> _81817_c = jule::new_ptr<_1eeda30d2_Conditional>(_1eeda30d2_Conditional());
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_81817_c));
	_81817_c.get()._field_elifs=jule::Slice<jule::Ptr<_1eeda2b92_If>>::alloc(0LL,static_cast<jule::I32>((_81741_conditional.get()._field_tail.len() + 1LL)));
	_81817_c.get()._field_elifs = jule::alloc_for_append(_81817_c.get()._field_elifs,1);_81817_c.get()._field_elifs.__push(_1eedabb57_check_if(_self_, _81741_conditional.get()._field_head));
	{
		auto &expr = _81741_conditional.get()._field_tail;
		auto it = expr.begin();
		_iter_begin_202a84d16:;
		if (it != expr.end()) {
			jule::Ptr<_1e02dd087_If> _202a83ed0_elif = *it;
			{
				_81817_c.get()._field_elifs = jule::alloc_for_append(_81817_c.get()._field_elifs,1);_81817_c.get()._field_elifs.__push(_1eedabb57_check_if(_self_, _202a83ed0_elif));
			}
			_iter_next_202a84d16:;
			++it;
			goto _iter_begin_202a84d16;
		}
		_iter_end_202a84d16:;
	}
	if ((_81741_conditional.get()._field_default != nullptr)) {
		_81817_c.get()._field_default=_1eedac00e_check_else(_self_, _81741_conditional.get()._field_default);
	}
}



inline jule::Ptr<_1eed8a5a3_Scope> _1eedac88e_check_iter_scope_sc(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::U32 _83339_it,jule::Ptr<_1e02d9ddb_ScopeTree> _83356_tree,jule::Ptr<_1eeda5953_ScopeChecker> _83378_ssc) {
	_83378_ssc.get()._field_it=_83339_it;
	return _1eedaa590_check_child_sc(_self_, _83356_tree,_83378_ssc);
}



inline jule::Ptr<_1eed8a5a3_Scope> _1eedacd23_check_iter_scope(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::U32 _83836_it,jule::Ptr<_1e02d9ddb_ScopeTree>& _83854_tree) {
	jule::Ptr<_1eeda5953_ScopeChecker> _83917_ssc = _1eedb7c40_new_child_checker(_self_);
	return _1eedac88e_check_iter_scope_sc(_self_, _83836_it,_83854_tree,_83917_ssc);
}



inline void _1eedad142_check_inf_iter(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02db816_Iter>& _84339_it) {
	jule::Ptr<_1eeda3302_InfIter> _84417_kind = jule::new_ptr<_1eeda3302_InfIter>(_1eeda3302_InfIter());
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_84417_kind));
	_84417_kind.get()._field_scope=_1eedacd23_check_iter_scope(_self_, static_cast<jule::U32>(static_cast<jule::U32>(_84417_kind)),_84339_it.get()._field_scope);
}



inline void _1eedad461_check_while_iter(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02db816_Iter>& _85141_it) {
	jule::Ptr<_1e02dbd88_WhileKind> _85217_wh = _85141_it.get()._field_kind.operator jule::Ptr<_1e02dbd88_WhileKind>();
	if ((_85217_wh.get()._field_expr == nullptr) && (_85217_wh.get()._field_next == jule::Any(jule::Any(nullptr)))) {
		_1eedad142_check_inf_iter(_self_, _85141_it);
		return;
	}
	jule::Ptr<_1eeda3522_WhileIter> _85817_kind = jule::new_ptr<_1eeda3522_WhileIter>(_1eeda3522_WhileIter());
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_85817_kind));
	_85817_kind.get()._field_scope=_1eedacd23_check_iter_scope(_self_, static_cast<jule::U32>(static_cast<jule::U32>(_85817_kind)),_85141_it.get()._field_scope);
	if ((_85217_wh.get()._field_expr != nullptr)) {
		jule::Ptr<_1eee43b89_Data> _86521_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _85217_wh.get()._field_expr);
		if ((_86521_d == nullptr)) {
			return;
		}
		jule::Ptr<_1eee7bead_Prim> _87017_prim = _1eee791db_prim(_86521_d.get()._field_kind.ptr());
		if ((_87017_prim == nullptr)) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _85141_it.get()._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		if ((!(_1eee80412_is_bool(_87017_prim.ptr())))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _85141_it.get()._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		_85817_kind.get()._field_expr=_86521_d.get()._field_model;
	}
	if (_1e02dc0a8_is_while_next(_85217_wh.ptr())) {
		if ((!(_1eed69384_is_valid_ast_st_for_next_st(_85217_wh.get()._field_next)))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _85217_wh.get()._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;
		}
		jule::I32 _89017_n = _self_.get()._field_scope.get()._field_stmts.len();
		_1eedb62c1_check_node(_self_, _85217_wh.get()._field_next);
		if (_89017_n < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_scope.get()._field_stmts.len()))) {
			jule::Any _89325_st = _self_.get()._field_scope.get()._field_stmts[_89017_n];
			_self_.get()._field_scope.get()._field_stmts=_self_.get()._field_scope.get()._field_stmts.slice(0LL,_89017_n);
			if ((!(_1eed6c4b9_is_valid_st_for_next_st(_89325_st)))) {
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _85217_wh.get()._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			}
			_85817_kind.get()._field_next=_89325_st;
		}
	}
}



inline void _1eedad780_check_range_iter(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02db816_Iter>& _90441_it) {
	jule::Ptr<_1e02dc4a4_RangeKind> _90517_rang = _90441_it.get()._field_kind.operator jule::Ptr<_1e02dc4a4_RangeKind>();
	jule::Ptr<_1eee43b89_Data> _90717_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _90517_rang.get()._field_expr);
	if ((_90717_d == nullptr)) {
		return;
	}
	jule::Ptr<_1eeda3742_RangeIter> _91217_kind = jule::new_ptr<_1eeda3742_RangeIter>(_1eeda3742_RangeIter(_90717_d,jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1eedeb24b_Var>(),jule::Ptr<_1eedeb24b_Var>()));
	_1eee37c6b_RangeChecker _91617_rc = _1eee37c6b_RangeChecker(_self_,_90517_rang,_91217_kind,_90717_d);
	jule::Bool _92213_ok = _1eee39b80_check(&_91617_rc);
	if ((!(_92213_ok))) {
		return;
	}
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_91217_kind));
	jule::Ptr<_1eeda5953_ScopeChecker> _92917_ssc = _1eedb7c40_new_child_checker(_self_);
	if ((_91217_kind.get()._field_key_a != nullptr)) {
		if ((!(_1eedcc9e1_is_flag(_self_.get()._field_s.ptr(), static_cast<jule::I32>(1LL)))) && _1eeda921a_is_duplicated_ident(_self_.ptr(), 0LLU,_91217_kind.get()._field_key_a.get()._field_ident)) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _91217_kind.get()._field_key_a.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_91217_kind.get()._field_key_a.get()._field_ident)}));
			_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		_92917_ssc.get()._field_table.get()._field_vars = jule::alloc_for_append(_92917_ssc.get()._field_table.get()._field_vars,1);_92917_ssc.get()._field_table.get()._field_vars.__push(_91217_kind.get()._field_key_a);
	}
	if ((_91217_kind.get()._field_key_b != nullptr)) {
		if ((!(_1eedcc9e1_is_flag(_self_.get()._field_s.ptr(), static_cast<jule::I32>(1LL)))) && _1eeda921a_is_duplicated_ident(_self_.ptr(), 0LLU,_91217_kind.get()._field_key_b.get()._field_ident)) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _91217_kind.get()._field_key_b.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_91217_kind.get()._field_key_b.get()._field_ident)}));
			_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		_92917_ssc.get()._field_table.get()._field_vars = jule::alloc_for_append(_92917_ssc.get()._field_table.get()._field_vars,1);_92917_ssc.get()._field_table.get()._field_vars.__push(_91217_kind.get()._field_key_b);
	}
	_91217_kind.get()._field_scope=_1eedac88e_check_iter_scope_sc(_self_, static_cast<jule::U32>(static_cast<jule::U32>(_91217_kind)),_90441_it.get()._field_scope,_92917_ssc);
}



inline void _1eedada9e_check_iter(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02db816_Iter> _95034_it) {
	if (_1e02dba36_is_inf(_95034_it.ptr())) {
		_1eedad142_check_inf_iter(_self_, _95034_it);
		return;
	}
	{
		auto &_match_expr{ _95034_it.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e02dbd88_WhileKind>>()) {
			_case_begin_202aa6123:;
			{
				_1eedad461_check_while_iter(_self_, _95034_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dc4a4_RangeKind>>()) {
			_case_begin_202aa6e6a:;
			{
				_1eedad780_check_range_iter(_self_, _95034_it);
			}
		}
		else {
			_case_begin_202aa6a2a:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_202aa69c5:;
	}
}



inline jule::Bool _1eedade56_check_valid_cont_label(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::U32 _96642_it) {
	jule::Ptr<_1eeda5953_ScopeChecker> _96717_scope = _self_;
	_julec_label_iter:;
	if (_96717_scope.get()._field_it == _96642_it) {
		return true;
	}
	if ((_96717_scope.get()._field_parent != nullptr)) {
		_96717_scope=_96717_scope.get()._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1eedae352_check_valid_break_label(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::U32 _98243_ptr) {
	jule::Ptr<_1eeda5953_ScopeChecker> _98317_scope = _self_;
	_julec_label_iter:;
	if (_98317_scope.get()._field_it == _98243_ptr) {
		return true;
	}
	if ((_98317_scope.get()._field_cse != 0LLU)) {
		jule::U32 _99117_mtch = static_cast<jule::U32>(((_1eeda4da3_Case*)(_98317_scope.get()._field_cse))->_field_owner);
		if (_99117_mtch == _98243_ptr) {
			return true;
		}
	}
	if ((_98317_scope.get()._field_parent != nullptr)) {
		_98317_scope=_98317_scope.get()._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1eeda3962_ContSt> _1eedae6e8_check_cont_valid_scope(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dcb7a_ContSt> _100542_c) {
	if (_1eeda7aba_is_deferred(_self_)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _100542_c.get()._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_100542_c.get()._field_label._field_id != static_cast<jule::U32>(0LLU)) {
		return jule::new_ptr<_1eeda3962_ContSt>(_1eeda3962_ContSt());
	}
	jule::Ptr<_1eeda5953_ScopeChecker> _101517_scope = _self_;
	_julec_label_iter:;
	{
		
		if (((_101517_scope.get()._field_it == 0LLU) && (_101517_scope.get()._field_parent != nullptr)) && (_101517_scope.get()._field_owner == nullptr)) {
			_case_begin_202ab0e52:;
			{
				_101517_scope=_101517_scope.get()._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((_101517_scope.get()._field_it != 0LLU)) {
			_case_begin_202ab0ec9:;
			{
				return jule::new_ptr<_1eeda3962_ContSt>(_1eeda3962_ContSt(_101517_scope.get()._field_it));
			}
		}
		_match_end_202ab0da8:;
	}
	_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _100542_c.get()._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1eedaea17_check_cont(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dcb7a_ContSt> _102930_c) {
	jule::Ptr<_1eeda3962_ContSt> _103017_cont = _1eedae6e8_check_cont_valid_scope(_self_, _102930_c);
	if ((_103017_cont == nullptr)) {
		return;
	}
	if (_102930_c.get()._field_label._field_id != static_cast<jule::U32>(0LLU)) {
		jule::Ptr<_1eeda5513_ScopeLabel> _103621_label = _1eed30856_find_label_parent(_102930_c.get()._field_label._field_kind,_self_.get()._field_parent);
		if ((_103621_label == nullptr)) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _102930_c.get()._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_102930_c.get()._field_label._field_kind)}));
			return;
		}
		_103621_label.get()._field_used=true;
		if ((_103621_label.get()._field_pos + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_103621_label.get()._field_scope.get()._field_scope.get()._field_stmts.len()))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _102930_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_102930_c.get()._field_label._field_kind)}));
			return;
		}
		jule::I32 _104917_i = (_103621_label.get()._field_pos + 1LL);
		if (_104917_i >= static_cast<jule::I32>(static_cast<jule::I32>(_103621_label.get()._field_scope.get()._field_scope.get()._field_stmts.len()))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _102930_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _105325_st = _103621_label.get()._field_scope.get()._field_scope.get()._field_stmts[_104917_i];
			{
				auto &_match_expr{ _105325_st };
				
				if (_match_expr.type_is<jule::Ptr<_1eeda3302_InfIter>>()) {
					_case_begin_202abb512:;
					{
						_103017_cont.get()._field_it=static_cast<jule::U32>(static_cast<jule::U32>(_105325_st.operator jule::Ptr<_1eeda3302_InfIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1eeda3742_RangeIter>>()) {
					_case_begin_202abb578:;
					{
						_103017_cont.get()._field_it=static_cast<jule::U32>(static_cast<jule::U32>(_105325_st.operator jule::Ptr<_1eeda3742_RangeIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1eeda3522_WhileIter>>()) {
					_case_begin_202abb5de:;
					{
						_103017_cont.get()._field_it=static_cast<jule::U32>(static_cast<jule::U32>(_105325_st.operator jule::Ptr<_1eeda3522_WhileIter>()));
					}
				}
				else {
					_case_begin_202abb424:;
					{
						_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _102930_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_102930_c.get()._field_label._field_kind)}));
					}
				}
				_match_end_202abb3be:;
			}
		}
	}
	if ((_103017_cont.get()._field_it != 0LLU)) {
		if ((!(_1eedade56_check_valid_cont_label(_self_, _103017_cont.get()._field_it)))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _102930_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_102930_c.get()._field_label._field_kind)}));
		}
	}
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_103017_cont));
}



inline void _1eedaed36_check_label(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d933b_LabelSt> _107635_l) {
	if ((_1eeda8527_find_label(_self_.ptr(), _107635_l.get()._field_ident) != nullptr)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _107635_l.get()._field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any(_107635_l.get()._field_ident)}));
		return;
	}
	jule::Ptr<_1eeda3da2_Label> _108217_label = jule::new_ptr<_1eeda3da2_Label>(_1eeda3da2_Label(_107635_l.get()._field_ident));
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_108217_label));
	(*(_self_.get()._field_labels))=jule::append((*(_self_.get()._field_labels)),jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>({jule::new_ptr<_1eeda5513_ScopeLabel>(_1eeda5513_ScopeLabel(_107635_l.get()._field_token,_108217_label,static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_scope.get()._field_stmts.len())) - 1LL))),_self_,jule::Bool()))}));
}



inline void _1eedb0155_push_goto(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d955b_GotoSt> _109533_gt) {
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(jule::new_ptr<_1eeda40c2_GotoSt>(_1eeda40c2_GotoSt(_109533_gt.get()._field_label._field_kind))));
	(*(_self_.get()._field_gotos))=jule::append((*(_self_.get()._field_gotos)),jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>({jule::new_ptr<_1eeda5733_ScopeGoto>(_1eeda5733_ScopeGoto(_109533_gt,_self_,static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_scope.get()._field_stmts.len())) - 1LL)))))}));
}



inline void _1eedb0474_check_postfix(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9bbb_AssignSt> _110737_a) {
	if ((_110737_a.get()._field_left.len() > 1LL)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _110737_a.get()._field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1e0181a63_Expr> _111317_expr = _110737_a.get()._field_left[0LL].get()._field_expr;
	jule::Ptr<_1eee43b89_Data> _111417_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _111317_expr);
	if ((_111417_d == nullptr)) {
		return;
	}
	_1eed68251_check_assign(_self_.get()._field_s,_111417_d,nullptr,_110737_a.get()._field_setter);
	if ((_1eee79791_ptr(_111417_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eee89a04_Ptr> _112221_ptr = _1eee79791_ptr(_111417_d.get()._field_kind.ptr());
		if (_1eee8a64d_is_unsafe(_112221_ptr.ptr())) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _110737_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any(_110737_a.get()._field_setter._field_kind),jule::Any(_1eee77063_to_str(_111417_d.get()._field_kind.ptr()))}));
			return;
		}
	} else {
		if ((_1eee791db_prim(_111417_d.get()._field_kind.ptr()) == nullptr) || (!(_1eeda271e_is_num(_1eee791db_prim(_111417_d.get()._field_kind.ptr()).get()._field_kind)))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _110737_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any(_110737_a.get()._field_setter._field_kind),jule::Any(_1eee77063_to_str(_111417_d.get()._field_kind.ptr()))}));
			return;
		}
	}
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(jule::new_ptr<_1eeda42e2_Postfix>(_1eeda42e2_Postfix(_111417_d.get()._field_model,_110737_a.get()._field_setter._field_kind))));
}



inline jule::Bool _1eedb082b_is_new_assign_ident(_1eeda5953_ScopeChecker* _self_,jule::Str _114038_ident) {
	if (_1e02c4ada_is_ignore_ident(_114038_ident) || _114038_ident.empty()) {
		return false;
	}
	return _1eee40eb6_def_by_ident((*_self_)._field_table.ptr(), _114038_ident,false) == jule::Any(jule::Any(nullptr));
}



inline jule::Bool _1eedb0dd1_check_structure_assign_op(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1ee24550d_StructIns>& _114850_s,jule::Ptr<_1e02d9bbb_AssignSt>& _114870_a,jule::Ptr<_1eee43b89_Data>& _114889_r) {
	jule::Ptr<_1ee25b4ad_FnIns> _115117_overload = nullptr;
	{
		auto &_match_expr{ _114870_a.get()._field_setter._field_kind };
		
		if (_match_expr == jule::Str("+=", 2)) {
			_case_begin_202ad6076:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_add_assign;
			}
		}
		else if (_match_expr == jule::Str("-=", 2)) {
			_case_begin_202ad60dc:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_sub_assign;
			}
		}
		else if (_match_expr == jule::Str("/=", 2)) {
			_case_begin_202ad6153:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_div_assign;
			}
		}
		else if (_match_expr == jule::Str("*=", 2)) {
			_case_begin_202ad61b9:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_mul_assign;
			}
		}
		else if (_match_expr == jule::Str("%=", 2)) {
			_case_begin_202ad750b:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_mod_assign;
			}
		}
		else if (_match_expr == jule::Str("<<=", 3)) {
			_case_begin_202ad7572:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_shl_assign;
			}
		}
		else if (_match_expr == jule::Str(">>=", 3)) {
			_case_begin_202ad75d8:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_shr_assign;
			}
		}
		else if (_match_expr == jule::Str("|=", 2)) {
			_case_begin_202ad764e:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_bit_or_assign;
			}
		}
		else if (_match_expr == jule::Str("&=", 2)) {
			_case_begin_202ad786e:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_bit_and_assign;
			}
		}
		else if (_match_expr == jule::Str("^=", 2)) {
			_case_begin_202ad78d5:;
			{
				_115117_overload=_114850_s.get()._field_operators._field_bit_xor_assign;
			}
		}
		else {
			_case_begin_202ad5a26:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _114870_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any(_114870_a.get()._field_setter._field_kind),jule::Any(_1ee24592b_to_str(_114850_s.ptr()))}));
				return false;
			}
		}
		_match_end_202ad5e77:;
	}
	if ((_115117_overload == nullptr)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _114870_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any(_114870_a.get()._field_setter._field_kind),jule::Any(_1ee24592b_to_str(_114850_s.ptr()))}));
		return false;
	}
	jule::Ptr<_1ee25a358_ParamIns> _118317_p = _115117_overload.get()._field_params[1LL];
	return _1eedd482d_check_assign_type(_self_.get()._field_s, _118317_p.get()._field_decl.get()._field_reference,_118317_p.get()._field_kind,_114889_r,_114870_a.get()._field_setter);
}



inline void _1eedb11de_check_single_assign(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9bbb_AssignSt>& _118744_a) {
	jule::Ptr<_1eee43b89_Data> _118817_l = nullptr;
	if ((!(_1e02c4ada_is_ignore_ident(_118744_a.get()._field_left[0LL].get()._field_ident)))) {
		jule::Ptr<_1e0181a63_Expr> _119121_expr = _118744_a.get()._field_left[0LL].get()._field_expr;
		_118817_l=_1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _119121_expr);
		if ((_118817_l == nullptr)) {
			return;
		}
	}
	jule::Ptr<_1eee45be1_Eval> _119817_eval = nullptr;
	if ((_118817_l != nullptr)) {
		_119817_eval=_1eedd3d38_evalp(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0),_118817_l.get()._field_kind);
	} else {
		_119817_eval=_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0));
	}
	_119817_eval.get()._field_unsafety=_1eeda6ee8_is_unsafe(_self_);
	jule::Ptr<_1eee43b89_Data> _120517_r = _1eee65e97_eval_expr(_119817_eval, _118744_a.get()._field_right);
	if ((_120517_r == nullptr)) {
		return;
	}
	if ((_118817_l == nullptr)) {
		if (_1eee77ecb_void(_120517_r.get()._field_kind.ptr())) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _118744_a.get()._field_right.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_120517_r));
		return;
	}
	if ((!(_1eed68251_check_assign(_self_.get()._field_s,_118817_l,_120517_r,_118744_a.get()._field_setter)))) {
		return;
	}
	if ((_1eee7b056_tup(_120517_r.get()._field_kind.ptr()) != nullptr)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _118744_a.get()._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ee247620_OperandExprModel> _122717_lm = jule::new_ptr<_1ee247620_OperandExprModel>(_1ee247620_OperandExprModel(_118817_l.get()._field_kind,_118817_l.get()._field_model));
	jule::Ptr<_1ee247620_OperandExprModel> _123117_rm = jule::new_ptr<_1ee247620_OperandExprModel>(_1ee247620_OperandExprModel(_120517_r.get()._field_kind,_120517_r.get()._field_model));
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(jule::new_ptr<_1eeda4512_Assign>(_1eeda4512_Assign(_122717_lm,_123117_rm,_118744_a.get()._field_setter))));
	if ((_118744_a.get()._field_setter._field_kind != jule::Str("=", 1))) {
		jule::Ptr<_1ee24550d_StructIns> _123821_strct = _1eee7a6c6_strct(_118817_l.get()._field_kind.ptr());
		if ((_123821_strct != nullptr)) {
			_1eedb0dd1_check_structure_assign_op(_self_, _123821_strct,_118744_a,_120517_r);
			return;
		}
		_118744_a.get()._field_setter._field_kind=_118744_a.get()._field_setter._field_kind.slice(0LL,(_118744_a.get()._field_setter._field_kind.len() - 1LL));
		_1eee68818_BinaryEval _124521_solver = static__1eee6931e_new(_119817_eval,_118744_a.get()._field_setter);
		_120517_r=_1eee6eb82_solve_explicit(&_124521_solver, _118817_l,_120517_r);
		if ((_120517_r == nullptr)) {
			return;
		}
		_118744_a.get()._field_setter._field_kind+=jule::Str("=", 1);
		return;
	}
	_1eee2c3ae_AssignTypeChecker _125417_checker = _1eee2c3ae_AssignTypeChecker(_self_.get()._field_s,_118817_l.get()._field_kind,_120517_r,_118744_a.get()._field_setter);
	if (_1eee2d833_check(&_125417_checker)) {
		_123117_rm.get()._field_model=_120517_r.get()._field_model;
		_122717_lm.get()._field_model=_118817_l.get()._field_model;
	}
}



inline void _1eedb18d7___process_end_part_of_multi_assign(_1eeda5953_ScopeChecker* _self_,jule::Ptr<_1eeda4732_MultiAssign> _126657_st,jule::Ptr<_1e02d9bbb_AssignSt> _126713_a,jule::Ptr<_1e02d999b_AssignLeft> _126731_lexpr,jule::Ptr<_1eee43b89_Data> _126755_l,jule::Ptr<_1eee43b89_Data> _126769_r) {
	if (_1e02c4ada_is_ignore_ident(_126731_lexpr.get()._field_ident)) {
		if (_1eee77ecb_void(_126769_r.get()._field_kind.ptr())) {
			_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _126713_a.get()._field_right.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		_126657_st.get()._field_l = jule::alloc_for_append(_126657_st.get()._field_l,1);_126657_st.get()._field_l.__push(jule::Any(nullptr));
		return;
	}
	if (_126713_a.get()._field_declarative && _1eedb082b_is_new_assign_ident(&(*_self_), _126731_lexpr.get()._field_ident)) {
		if (_1eeda921a_is_duplicated_ident(&(*_self_), 0LLU,_126731_lexpr.get()._field_ident)) {
			_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _126731_lexpr.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_126731_lexpr.get()._field_ident)}));
			_1eedcd6d4_push_suggestion((*_self_)._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
			_1eeda7515_stop(&(*_self_));
			return;
		}
		jule::Ptr<_1eedeb24b_Var> _128621_v = jule::new_ptr<_1eedeb24b_Var>(_1eedeb24b_Var((*_self_)._field_scope,_126731_lexpr.get()._field_token,_126731_lexpr.get()._field_ident,jule::Bool(),jule::Bool(),_126731_lexpr.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),_126731_lexpr.get()._field_reference,jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(_126713_a.get()._field_right,_126769_r)),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1eede9e3c_IterRelation>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>()));
		_1eede2374_check_var((*_self_)._field_s, _128621_v);
		_126657_st.get()._field_l = jule::alloc_for_append(_126657_st.get()._field_l,1);_126657_st.get()._field_l.__push(jule::Any(_128621_v));
		(*_self_)._field_table.get()._field_vars = jule::alloc_for_append((*_self_)._field_table.get()._field_vars,1);(*_self_)._field_table.get()._field_vars.__push(_128621_v);
		(*_self_)._field_scope.get()._field_stmts = jule::alloc_for_append((*_self_)._field_scope.get()._field_stmts,1);(*_self_)._field_scope.get()._field_stmts.__push(jule::Any(_128621_v));
		return;
	}
	if (_126731_lexpr.get()._field_mutable || _126731_lexpr.get()._field_reference) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _126731_lexpr.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_126731_lexpr.get()._field_ident)}));
		_1eedcd6d4_push_suggestion((*_self_)._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((!(_1eed68251_check_assign((*_self_)._field_s,_126755_l,_126769_r,_126713_a.get()._field_setter)))) {
		return;
	}
	
	_1eedd6cb4_check_validity_for_init_expr((*_self_)._field_s, _126755_l.get()._field_mutable,false,_126755_l.get()._field_kind,_126769_r,_126713_a.get()._field_setter);
	_1eee2c3ae_AssignTypeChecker _132117_checker = _1eee2c3ae_AssignTypeChecker((*_self_)._field_s,_126755_l.get()._field_kind,_126769_r,_126713_a.get()._field_setter);
	_1eee2d833_check(&_132117_checker);
	_126657_st.get()._field_l = jule::alloc_for_append(_126657_st.get()._field_l,1);_126657_st.get()._field_l.__push(_126755_l.get()._field_model);
}



inline void _1eedb1bc3_check_ret_multi_assign(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9bbb_AssignSt>& _133247_a) {
	jule::Ptr<_1eee43b89_Data> _133317_rd = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _133247_a.get()._field_right);
	if ((_133317_rd == nullptr)) {
		return;
	}
	jule::Slice<jule::Ptr<_1eee43b89_Data>> _133817_r = _1eed8aedd_get_datas_from_tuple_data(_133317_rd);
	{
		
		if (_133247_a.get()._field_left.len() > static_cast<jule::I32>(static_cast<jule::I32>(_133817_r.len()))) {
			_case_begin_202b180ec:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _133247_a.get()._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_133247_a.get()._field_left.len() < static_cast<jule::I32>(static_cast<jule::I32>(_133817_r.len()))) {
			_case_begin_202b18174:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _133247_a.get()._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_202b18097:;
	}
	jule::Ptr<_1eeda4732_MultiAssign> _135017_st = jule::new_ptr<_1eeda4732_MultiAssign>(_1eeda4732_MultiAssign(jule::Slice<jule::Any>(),_133317_rd.get()._field_model));
	if ((_1eee7b056_tup(_133317_rd.get()._field_kind.ptr()) == nullptr)) {
		_135017_st.get()._field_r=jule::Any(jule::new_ptr<_1ee24e8be_TupleExprModel>(_1ee24e8be_TupleExprModel(_133817_r)));
	}
	{
		auto &expr = _133247_a.get()._field_left;
		auto it = expr.begin();
		_iter_begin_202b1bdd1:;
		if (it != expr.end()) {
			jule::I32 _202b1be25_i = it - expr.begin();
			{
				jule::Ptr<_1e02d999b_AssignLeft> _135921_lexpr = _133247_a.get()._field_left[_202b1be25_i];
				jule::Ptr<_1eee43b89_Data> _136021_l = nullptr;
				if ((!(_1e02c4ada_is_ignore_ident(_135921_lexpr.get()._field_ident))) && ((!(_133247_a.get()._field_declarative)) || (!(_1eedb082b_is_new_assign_ident(_self_.ptr(), _135921_lexpr.get()._field_ident))))) {
					_136021_l=_1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _135921_lexpr.get()._field_expr);
					if ((_136021_l == nullptr)) {
						goto _iter_next_202b1bdd1;
					}
				}
				_1eedb18d7___process_end_part_of_multi_assign(_self_.ptr(), _135017_st,_133247_a,_135921_lexpr,_136021_l,_133817_r[_202b1be25_i]);
			}
			_iter_next_202b1bdd1:;
			++it;
			_202b1be25_i++;
			goto _iter_begin_202b1bdd1;
		}
		_iter_end_202b1bdd1:;
	}
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_135017_st));
}



inline void _1eedb1ee2_check_multi_assign(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9bbb_AssignSt>& _137643_a) {
	{
		auto &_match_expr{ _137643_a.get()._field_right.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e02d7ba8_FnCallExpr>>()) {
			_case_begin_202b21a2e:;
			{
				_1eedb1bc3_check_ret_multi_assign(_self_, _137643_a);
				return;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182624_UnsafeExpr>>()) {
			_case_begin_202b21a95:;
			{
				{
					auto &_match_expr{ _137643_a.get()._field_right.get()._field_kind.operator jule::Ptr<_1e0182624_UnsafeExpr>().get()._field_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_1e02d7ba8_FnCallExpr>>()) {
						_case_begin_202b2316d:;
						{
							_1eedb1bc3_check_ret_multi_assign(_self_, _137643_a);
							return;
						}
					}
					_match_end_202b23118:;
				}
			}
		}
		_match_end_202b21930:;
	}
	jule::Slice<jule::Any> _138917_right = _1eed63b42_get_expr_models(_137643_a.get()._field_right.get()._field_kind);
	{
		
		if (_137643_a.get()._field_left.len() > static_cast<jule::I32>(static_cast<jule::I32>(_138917_right.len()))) {
			_case_begin_202b2403c:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _137643_a.get()._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_137643_a.get()._field_left.len() < static_cast<jule::I32>(static_cast<jule::I32>(_138917_right.len()))) {
			_case_begin_202b240a3:;
			{
				_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _137643_a.get()._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_202b23e60:;
	}
	jule::Ptr<_1ee24e8be_TupleExprModel> _140017_right_tuple = jule::new_ptr<_1ee24e8be_TupleExprModel>(_1ee24e8be_TupleExprModel());
	jule::Ptr<_1eeda4732_MultiAssign> _140217_st = jule::new_ptr<_1eeda4732_MultiAssign>(_1eeda4732_MultiAssign(jule::Slice<jule::Any>(),jule::Any(jule::Any(_140017_right_tuple))));
	{
		auto &expr = _137643_a.get()._field_left;
		auto it = expr.begin();
		_iter_begin_202b2742a:;
		if (it != expr.end()) {
			jule::I32 _202b2754b_i = it - expr.begin();
			{
				jule::Ptr<_1e02d999b_AssignLeft> _140721_lexpr = _137643_a.get()._field_left[_202b2754b_i];
				jule::Ptr<_1eee43b89_Data> _140821_l = nullptr;
				if ((!(_1e02c4ada_is_ignore_ident(_140721_lexpr.get()._field_ident))) && ((!(_137643_a.get()._field_declarative)) || (!(_1eedb082b_is_new_assign_ident(_self_.ptr(), _140721_lexpr.get()._field_ident))))) {
					_140821_l=_1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _140721_lexpr.get()._field_expr);
					if ((_140821_l == nullptr)) {
						goto _iter_next_202b2742a;
					}
				}
				jule::Ptr<_1e0181a63_Expr> _141821_expr = jule::new_ptr<_1e0181a63_Expr>(_1e0181a63_Expr(_137643_a.get()._field_right.get()._field_token,_1e02c1d07_Token(),jule::Bool(),_138917_right[_202b2754b_i]));
				jule::Ptr<_1eee45be1_Eval> _142221_eval = nullptr;
				if ((_140821_l != nullptr)) {
					_142221_eval=_1eedd3d38_evalp(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0),_140821_l.get()._field_kind);
				} else {
					_142221_eval=_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0));
				}
				jule::Ptr<_1eee43b89_Data> _142821_r = _1eee65e97_eval_expr(_142221_eval, _141821_expr);
				if ((_142821_r == nullptr)) {
					goto _iter_next_202b2742a;
				}
				_140017_right_tuple.get()._field_datas = jule::alloc_for_append(_140017_right_tuple.get()._field_datas,1);_140017_right_tuple.get()._field_datas.__push(_142821_r);
				_1eedb18d7___process_end_part_of_multi_assign(_self_.ptr(), _140217_st,_137643_a,_140721_lexpr,_140821_l,_142821_r);
			}
			_iter_next_202b2742a:;
			++it;
			_202b2754b_i++;
			goto _iter_begin_202b2742a;
		}
		_iter_end_202b2742a:;
	}
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_140217_st));
}



inline void _1eedb2311_check_assign_st(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9bbb_AssignSt> _144139_a) {
	{
		
		if (_1e02c70a4_is_postfix_op(_144139_a.get()._field_setter._field_kind)) {
			_case_begin_202b30697:;
			{
				_1eedb0474_check_postfix(_self_, _144139_a);
			}
		}
		else if ((_144139_a.get()._field_left.len() == 1LL) && (!(_144139_a.get()._field_declarative))) {
			_case_begin_202b30224:;
			{
				_1eedb11de_check_single_assign(_self_, _144139_a);
			}
		}
		else {
			_case_begin_202b2eda0:;
			{
				_1eedb1ee2_check_multi_assign(_self_, _144139_a);
			}
		}
		_match_end_202b2ed06:;
	}
}



inline jule::Ptr<_1eed8a5a3_Scope> _1eedb2795_check_case_scope(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1eeda4da3_Case>& _145237_c,jule::Ptr<_1e02d9ddb_ScopeTree>& _145252_tree) {
	jule::Ptr<_1eeda5953_ScopeChecker> _145317_ssc = _1eedb7c40_new_child_checker(_self_);
	_145317_ssc.get()._field_cse=static_cast<jule::U32>(static_cast<jule::U32>(_145237_c));
	return _1eedaa590_check_child_sc(_self_, _145252_tree,_145317_ssc);
}



inline jule::Ptr<_1eeda4da3_Case> _1eedb2dd3_check_case(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1eeda4952_Match> _145834_m,jule::I32 _145845_i,jule::Ptr<_1e02de30d_Case> _145857_c,jule::Ptr<_1eee43b89_Data> _145887_expr) {
	jule::Ptr<_1eeda4da3_Case> _145917__case = _145834_m.get()._field_cases[_145845_i];
	_145917__case.get()._field_exprs=jule::Slice<jule::Ptr<_1eee43b89_Data>>::alloc(0LL,static_cast<jule::I32>(_145857_c.get()._field_exprs.len()));
	jule::Bool _146117_generic_matched = false;
	jule::Ptr<_1eee45be1_Eval> _146217_eval = _1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0));
	{
		auto &expr = _145857_c.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_202b37171:;
		if (it != expr.end()) {
			jule::Ptr<_1e0181a63_Expr> _202b37281_e = *it;
			{
				jule::Ptr<_1eee43b89_Data> _146421_d = _1eee65738_eval_expr_kind(_146217_eval, _202b37281_e.get()._field_kind);
				if ((_146421_d == nullptr)) {
					goto _iter_next_202b37171;
				}
				if (_145834_m.get()._field_type_match) {
					_145917__case.get()._field_exprs = jule::alloc_for_append(_145917__case.get()._field_exprs,1);_145917__case.get()._field_exprs.__push(_146421_d);
					if ((_1eed629ed_count_match_type(_145834_m,_146421_d.get()._field_kind) > 1LL)) {
						_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _202b37281_e.get()._field_token,jule::Str("duplicated pattern: type @ is already matched", 45),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_146421_d.get()._field_kind.ptr()))}));
					}
					if (_145887_expr.get()._field_kind.get()._field_generic) {
						_146117_generic_matched=_146117_generic_matched || _1eee7741a_equals(_145887_expr.get()._field_kind, _146421_d.get()._field_kind);
					} else {
						jule::Ptr<_1eec8627e_Trait> _147625_trt = _1eee7a9a1_trt(_145887_expr.get()._field_kind.ptr());
						if ((_147625_trt != nullptr)) {
							_1eedd4dd3_check_type_compatibility(_self_.get()._field_s, _145887_expr.get()._field_kind,_146421_d.get()._field_kind,_202b37281_e.get()._field_token);
						}
					}
					goto _iter_next_202b37171;
				}
				if (_146421_d.get()._field_decl) {
					_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _202b37281_e.get()._field_token,jule::Str("expecting expression, found type declaration", 44),jule::Slice<jule::Any>());
					_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("you can use type-match if you want to match types", 49),jule::Slice<jule::Any>());
					goto _iter_next_202b37171;
				}
				_145917__case.get()._field_exprs = jule::alloc_for_append(_145917__case.get()._field_exprs,1);_145917__case.get()._field_exprs.__push(_146421_d);
				_1eee2c3ae_AssignTypeChecker _149321_checker = _1eee2c3ae_AssignTypeChecker(_self_.get()._field_s,_145887_expr.get()._field_kind,_146421_d,_202b37281_e.get()._field_token);
				_1eee2d833_check(&_149321_checker);
			}
			_iter_next_202b37171:;
			++it;
			goto _iter_begin_202b37171;
		}
		_iter_end_202b37171:;
	}
	if (((!(_145834_m.get()._field_type_match)) || (!(_145887_expr.get()._field_kind.get()._field_generic))) || _146117_generic_matched) {
		_145917__case.get()._field_scope=_1eedb2795_check_case_scope(_self_, _145917__case,_145857_c.get()._field_scope);
	}
	return _145917__case;
}



inline void _1eedb33ab_check_cases(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02de907_MatchCase>& _150736_m,jule::Ptr<_1eeda4952_Match> _150755_rm,jule::Ptr<_1eee43b89_Data> _150771_expr) {
	_150755_rm.get()._field_cases=jule::Slice<jule::Ptr<_1eeda4da3_Case>>::alloc(0LL,static_cast<jule::I32>(_150736_m.get()._field_cases.len()));
	{
		auto &expr = _150736_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_202b41de5:;
		if (it != expr.end()) {
			jule::I32 _202b43556_i = it - expr.begin();
			{
				jule::Ptr<_1eeda4da3_Case> _151021__case = jule::new_ptr<_1eeda4da3_Case>(_1eeda4da3_Case(_150755_rm,jule::Ptr<_1eed8a5a3_Scope>(),jule::Slice<jule::Ptr<_1eee43b89_Data>>(),jule::Ptr<_1eeda4da3_Case>()));
				if ((_202b43556_i > 0LL)) {
					_150755_rm.get()._field_cases[(_202b43556_i - 1LL)].get()._field_next=_151021__case;
				}
				_150755_rm.get()._field_cases = jule::alloc_for_append(_150755_rm.get()._field_cases,1);_150755_rm.get()._field_cases.__push(_151021__case);
			}
			_iter_next_202b41de5:;
			++it;
			_202b43556_i++;
			goto _iter_begin_202b41de5;
		}
		_iter_end_202b41de5:;
	}
	if ((_150755_rm.get()._field_default != nullptr) && (_150736_m.get()._field_cases.len() > 0LL)) {
		_150755_rm.get()._field_cases[(_150755_rm.get()._field_cases.len() - 1LL)].get()._field_next=_150755_rm.get()._field_default;
	}
	{
		auto &expr = _150736_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_202b463c2:;
		if (it != expr.end()) {
			jule::I32 _202b46757_i = it - expr.begin();
			jule::Ptr<_1e02de30d_Case> _202b468de_c = *it;
			{
				_1eedb2dd3_check_case(_self_, _150755_rm,_202b46757_i,_202b468de_c,_150771_expr);
			}
			_iter_next_202b463c2:;
			++it;
			_202b46757_i++;
			goto _iter_begin_202b463c2;
		}
		_iter_end_202b463c2:;
	}
}



inline jule::Ptr<_1eeda4da3_Case> _1eedb3840_check_default(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1eeda4952_Match> _152837_m,jule::Ptr<_1e02dd3ea_Else> _152852_d) {
	jule::Ptr<_1eeda4da3_Case> _152917_def = jule::new_ptr<_1eeda4da3_Case>(_1eeda4da3_Case(_152837_m,jule::Ptr<_1eed8a5a3_Scope>(),jule::Slice<jule::Ptr<_1eee43b89_Data>>(),jule::Ptr<_1eeda4da3_Case>()));
	_152917_def.get()._field_scope=_1eedb2795_check_case_scope(_self_, _152917_def,_152852_d.get()._field_scope);
	return _152917_def;
}



inline void _1eedb3b5e_check_comptime_panic(_1eeda5953_ScopeChecker* _self_,jule::Ptr<_1eed8a5a3_Scope>& _153640_s) {
	if ((_153640_s.get()._field_stmts.len() != 1LL)) {
		return;
	}
	jule::Any _154113_stmt = _153640_s.get()._field_stmts[0LL];
	{
		auto &_match_expr{ _154113_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_202b4a77d:;
			{
				jule::Ptr<_1eee43b89_Data> _154417_d = _154113_stmt.operator jule::Ptr<_1eee43b89_Data>();
				{
					auto &_match_expr{ _154417_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>>()) {
						_case_begin_202b4b608:;
						{
							jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel> _154721_m = _154417_d.get()._field_model.operator jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>();
							{
								auto &_match_expr{ _154721_m.get()._field_expr };
								
								if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
									_case_begin_202b4c571:;
									{
										jule::Ptr<_1eed1e24b_Const> _155025_c = _154721_m.get()._field_expr.operator jule::Ptr<_1eed1e24b_Const>();
										if (_1eed23c23_is_str(_155025_c.ptr())) {
											_1eedcd2d8_push_err((*_self_)._field_s.ptr(), (*((*_self_)._field_called_from)),jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>({jule::Any(_1eed21171_read_str(_155025_c.ptr()))}));
										}
									}
								}
								_match_end_202b4c51b:;
							}
						}
					}
					_match_end_202b4b5a3:;
				}
			}
		}
		_match_end_202b4a728:;
	}
}



inline void _1eedb405a_push_type_match(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1eeda4952_Match> _155939_tm,jule::Ptr<_1e02de907_MatchCase>& _155956_m) {
	if (_155939_tm.get()._field_expr.get()._field_kind.get()._field_generic) {
		{
			auto &expr = _155939_tm.get()._field_cases;
			auto it = expr.begin();
			_iter_begin_202b4ec9e:;
			if (it != expr.end()) {
				jule::Ptr<_1eeda4da3_Case> _202b4ed6a_c = *it;
				{
					if ((_202b4ed6a_c.get()._field_scope != nullptr)) {
						_1eedb3b5e_check_comptime_panic(_self_.ptr(), _202b4ed6a_c.get()._field_scope);
						_155939_tm.get()._field_default=_202b4ed6a_c;
						_155939_tm.get()._field_cases=nullptr;
						goto _julec_label_push;
					}
				}
				_iter_next_202b4ec9e:;
				++it;
				goto _iter_begin_202b4ec9e;
			}
			_iter_end_202b4ec9e:;
		}
		if ((_155956_m.get()._field_default != nullptr)) {
			_155939_tm.get()._field_cases=nullptr;
			_155939_tm.get()._field_default=_1eedb3840_check_default(_self_, _155939_tm,_155956_m.get()._field_default);
			if ((_155939_tm.get()._field_default != nullptr)) {
				_1eedb3b5e_check_comptime_panic(_self_.ptr(), _155939_tm.get()._field_default.get()._field_scope);
			}
		}
		return;
	}
	_julec_label_push:;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_155939_tm));
}



inline void _1eedb4379_check_type_match(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02de907_MatchCase>& _158441_m) {
	jule::Ptr<_1eee43b89_Data> _158517_d = _1eee65ae0_eval(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _158441_m.get()._field_expr);
	if ((_158517_d == nullptr)) {
		return;
	}
	if ((!(_158517_d.get()._field_kind.get()._field_generic)) && (!(((_1eee791db_prim(_158517_d.get()._field_kind.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim(_158517_d.get()._field_kind.ptr()).ptr())) || (_1eee7a9a1_trt(_158517_d.get()._field_kind.ptr()) != nullptr)))) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _158441_m.get()._field_expr.get()._field_token,jule::Str("type-match must be have <any>, <trait> or <generic> typed expression", 68),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1eeda4952_Match> _159617_tm = jule::new_ptr<_1eeda4952_Match>(_1eeda4952_Match(_158517_d,true,jule::Slice<jule::Ptr<_1eeda4da3_Case>>(),jule::Ptr<_1eeda4da3_Case>()));
	if ((!(_159617_tm.get()._field_expr.get()._field_kind.get()._field_generic)) && (_158441_m.get()._field_default != nullptr)) {
		_159617_tm.get()._field_default=_1eedb3840_check_default(_self_, _159617_tm,_158441_m.get()._field_default);
	}
	_1eedb33ab_check_cases(_self_, _158441_m,_159617_tm,_158517_d);
	_1eedb405a_push_type_match(_self_, _159617_tm,_158441_m);
}



inline void _1eedb4698_check_common_match(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02de907_MatchCase>& _160943_m) {
	jule::Ptr<_1eee43b89_Data> _161017_d = nullptr;
	if ((_160943_m.get()._field_expr == nullptr)) {
		_161017_d=jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),static__1eed1e834_new_bool(true)));
		_161017_d.get()._field_model=jule::Any(_161017_d.get()._field_constant);
	} else {
		_161017_d=_1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _160943_m.get()._field_expr);
		if ((_161017_d == nullptr)) {
			return;
		}
	}
	jule::Ptr<_1eeda4952_Match> _162417_mc = jule::new_ptr<_1eeda4952_Match>(_1eeda4952_Match(_161017_d,jule::Bool(),jule::Slice<jule::Ptr<_1eeda4da3_Case>>(),jule::Ptr<_1eeda4da3_Case>()));
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_162417_mc));
	if ((_160943_m.get()._field_default != nullptr)) {
		_162417_mc.get()._field_default=_1eedb3840_check_default(_self_, _162417_mc,_160943_m.get()._field_default);
	}
	_1eedb33ab_check_cases(_self_, _160943_m,_162417_mc,_161017_d);
}



inline void _1eedb49b7_check_match(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02de907_MatchCase> _163635_m) {
	if (_163635_m.get()._field_type_match) {
		_1eedb4379_check_type_match(_self_, _163635_m);
		return;
	}
	_1eedb4698_check_common_match(_self_, _163635_m);
}



inline void _1eedb4cd6_check_fall(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d977b_FallSt> _164430_f) {
	if (((_self_.get()._field_cse == 0LLU) || ((_self_.get()._field_scope.get()._field_stmts.len() + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_scope.get()._field_stmts.len())))) || _1eeda7aba_is_deferred(_self_)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _164430_f.get()._field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;
	}
	_1eeda4da3_Case* _165217__case = ((_1eeda4da3_Case*)(_self_.get()._field_cse));
	if ((_165217__case->_field_next == nullptr)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _164430_f.get()._field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;
	}
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(jule::new_ptr<_1eeda50c3_FallSt>(_1eeda50c3_FallSt(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_165217__case->_field_next)))))))));
}



inline jule::Ptr<_1eeda3b82_BreakSt> _1eedb518d_check_break_with_label(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dc817_BreakSt> _166442_b) {
	jule::Ptr<_1eeda3b82_BreakSt> _166517_brk = _1eedb5545_check_plain_break(_self_, _166442_b);
	if ((_166517_brk == nullptr)) {
		return nullptr;
	}
	_166517_brk.get()._field_it=0LLU;
	_166517_brk.get()._field_mtch=0LLU;
	jule::Ptr<_1eeda5513_ScopeLabel> _167517_label = _1eed30856_find_label_parent(_166442_b.get()._field_label._field_kind,_self_.get()._field_parent);
	if ((_167517_label == nullptr)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _166442_b.get()._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_166442_b.get()._field_label._field_kind)}));
		return nullptr;
	}
	_167517_label.get()._field_used=true;
	if ((_167517_label.get()._field_pos + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>(_167517_label.get()._field_scope.get()._field_scope.get()._field_stmts.len()))) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _166442_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_166442_b.get()._field_label._field_kind)}));
		return nullptr;
	}
	jule::I32 _168813_i = (_167517_label.get()._field_pos + 1LL);
	if (_168813_i >= static_cast<jule::I32>(static_cast<jule::I32>(_167517_label.get()._field_scope.get()._field_scope.get()._field_stmts.len()))) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _166442_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_166442_b.get()._field_label._field_kind)}));
	} else {
		jule::Any _169221_st = _167517_label.get()._field_scope.get()._field_scope.get()._field_stmts[_168813_i];
		{
			auto &_match_expr{ _169221_st };
			
			if (_match_expr.type_is<jule::Ptr<_1eeda3302_InfIter>>()) {
				_case_begin_202b72310:;
				{
					_166517_brk.get()._field_it=static_cast<jule::U32>(static_cast<jule::U32>(_169221_st.operator jule::Ptr<_1eeda3302_InfIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eeda3742_RangeIter>>()) {
				_case_begin_202b72376:;
				{
					_166517_brk.get()._field_it=static_cast<jule::U32>(static_cast<jule::U32>(_169221_st.operator jule::Ptr<_1eeda3742_RangeIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eeda3522_WhileIter>>()) {
				_case_begin_202b723dc:;
				{
					_166517_brk.get()._field_it=static_cast<jule::U32>(static_cast<jule::U32>(_169221_st.operator jule::Ptr<_1eeda3522_WhileIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eeda4952_Match>>()) {
				_case_begin_202b72453:;
				{
					_166517_brk.get()._field_mtch=static_cast<jule::U32>(static_cast<jule::U32>(_169221_st.operator jule::Ptr<_1eeda4952_Match>()));
				}
			}
			else {
				_case_begin_202b72222:;
				{
					_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _166442_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_166442_b.get()._field_label._field_kind)}));
				}
			}
			_match_end_202b721bc:;
		}
	}
	if ((_166517_brk.get()._field_it != 0LLU)) {
		if ((!(_1eedae352_check_valid_break_label(_self_, _166517_brk.get()._field_it)))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _166442_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_166442_b.get()._field_label._field_kind)}));
		}
	}
	if ((_166517_brk.get()._field_mtch != 0LLU)) {
		if ((!(_1eedae352_check_valid_break_label(_self_, _166517_brk.get()._field_mtch)))) {
			_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _166442_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_166442_b.get()._field_label._field_kind)}));
		}
	}
	return _166517_brk;
}



inline jule::Ptr<_1eeda3b82_BreakSt> _1eedb5545_check_plain_break(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dc817_BreakSt> _171737_b) {
	if (_1eeda7aba_is_deferred(_self_)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _171737_b.get()._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eeda5953_ScopeChecker> _172317_scope = _self_;
	_julec_label_iter:;
	{
		
		if ((((_172317_scope.get()._field_it == 0LLU) && (_172317_scope.get()._field_cse == 0LLU)) && (_172317_scope.get()._field_parent != nullptr)) && (_172317_scope.get()._field_owner == nullptr)) {
			_case_begin_202b79c52:;
			{
				_172317_scope=_172317_scope.get()._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((_172317_scope.get()._field_it != 0LLU)) {
			_case_begin_202b79cc9:;
			{
				return jule::new_ptr<_1eeda3b82_BreakSt>(_1eeda3b82_BreakSt(_172317_scope.get()._field_it,jule::U32()));
			}
		}
		else if ((_172317_scope.get()._field_cse != 0LLU)) {
			_case_begin_202b79d51:;
			{
				return jule::new_ptr<_1eeda3b82_BreakSt>(_1eeda3b82_BreakSt(jule::U32(),static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(((_1eeda4da3_Case*)(_172317_scope.get()._field_cse))->_field_owner)))))));
			}
		}
		_match_end_202b79b86:;
	}
	_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _171737_b.get()._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1eedb5864_check_break(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02dc817_BreakSt> _174131_b) {
	if (_174131_b.get()._field_label._field_id != static_cast<jule::U32>(0LLU)) {
		jule::Ptr<_1eeda3b82_BreakSt> _174321_brk = _1eedb518d_check_break_with_label(_self_, _174131_b);
		_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_174321_brk));
		return;
	}
	jule::Ptr<_1eeda3b82_BreakSt> _174817_brk = _1eedb5545_check_plain_break(_self_, _174131_b);
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_174817_brk));
}



inline void _1eedb5b83_check_ret(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02db31b_RetSt> _175233_r) {
	if (_1eeda7aba_is_deferred(_self_)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _175233_r.get()._field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eeda52e3_RetSt> _175717_rt = jule::new_ptr<_1eeda52e3_RetSt>(_1eeda52e3_RetSt(_1eeda7d95_get_root(_self_).get()._field_owner,jule::Slice<jule::Ptr<_1eedeb24b_Var>>(),jule::Any()));
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_175717_rt));
	jule::Ptr<_1eee3a5cb_RetTypeChecker> _176217_rtc = jule::new_ptr<_1eee3a5cb_RetTypeChecker>(_1eee3a5cb_RetTypeChecker(_self_,_175717_rt.get()._field_func,jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1e0181a63_Expr>>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>(),_175233_r.get()._field_token,jule::Any()));
	jule::Bool _176713_ok = _1eee3b6cb_check(_176217_rtc.ptr(), _175233_r.get()._field_expr);
	if ((!(_176713_ok))) {
		return;
	}
	if ((_175233_r.get()._field_expr == nullptr) && (_176217_rtc.get()._field_vars.len() == 0LL)) {
		return;
	}
	_175717_rt.get()._field_vars=_176217_rtc.get()._field_vars;
	if ((_175233_r.get()._field_expr != nullptr)) {
		_175717_rt.get()._field_expr=_176217_rtc.get()._field_model;
	}
}



inline void _1eedb5ea2_check_use_expr(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e0181c83_UseExpr> _178334_ue) {
	if ((_self_.get()._field_result == nullptr)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _178334_ue.get()._field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;
	}
	if (_1eeda7aba_is_deferred(_self_)) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _178334_ue.get()._field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	}
	if ((_self_.get()._field_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_tree.get()._field_stmts.len()))) {
		_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _178334_ue.get()._field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	}
}



inline void _1eedb62c1_check_node(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Any& _180035_node) {
	{
		auto &_match_expr{ _180035_node };
		
		if (_match_expr.type_is<jule::Ptr<_1e02d9ddb_ScopeTree>>()) {
			_case_begin_2027a50db:;
			{
				_1eedaac66_check_anon_scope(_self_, _180035_node.operator jule::Ptr<_1e02d9ddb_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02daea8_VarDecl>>()) {
			_case_begin_2027a4cab:;
			{
				_1eeda9539_check_var_decl(_self_, _180035_node.operator jule::Ptr<_1e02daea8_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dde01_TypeAliasDecl>>()) {
			_case_begin_2027a5240:;
			{
				_1eeda9858_check_type_alias_decl(_self_, _180035_node.operator jule::Ptr<_1e02dde01_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0181a63_Expr>>()) {
			_case_begin_2027a52a6:;
			{
				_1eedab481_check_expr(_self_, _180035_node.operator jule::Ptr<_1e0181a63_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182844_CoExpr>>()) {
			_case_begin_2027a5471:;
			{
				_1eedab7a0_check_co_expr(_self_, _180035_node.operator jule::Ptr<_1e0182844_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dd807_Conditional>>()) {
			_case_begin_2027a54d7:;
			{
				_1eedac32d_check_conditional(_self_, _180035_node.operator jule::Ptr<_1e02dd807_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02db816_Iter>>()) {
			_case_begin_2027a554d:;
			{
				_1eedada9e_check_iter(_self_, _180035_node.operator jule::Ptr<_1e02db816_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dcb7a_ContSt>>()) {
			_case_begin_2027a55b4:;
			{
				_1eedaea17_check_cont(_self_, _180035_node.operator jule::Ptr<_1e02dcb7a_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d933b_LabelSt>>()) {
			_case_begin_2027a562a:;
			{
				_1eedaed36_check_label(_self_, _180035_node.operator jule::Ptr<_1e02d933b_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d955b_GotoSt>>()) {
			_case_begin_2027a5691:;
			{
				_1eedb0155_push_goto(_self_, _180035_node.operator jule::Ptr<_1e02d955b_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d9bbb_AssignSt>>()) {
			_case_begin_2027a5707:;
			{
				_1eedb2311_check_assign_st(_self_, _180035_node.operator jule::Ptr<_1e02d9bbb_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02de907_MatchCase>>()) {
			_case_begin_2027a576d:;
			{
				_1eedb49b7_check_match(_self_, _180035_node.operator jule::Ptr<_1e02de907_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d977b_FallSt>>()) {
			_case_begin_2027a57d4:;
			{
				_1eedb4cd6_check_fall(_self_, _180035_node.operator jule::Ptr<_1e02d977b_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02dc817_BreakSt>>()) {
			_case_begin_2027a584a:;
			{
				_1eedb5864_check_break(_self_, _180035_node.operator jule::Ptr<_1e02dc817_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02db31b_RetSt>>()) {
			_case_begin_2027a58b1:;
			{
				_1eedb5b83_check_ret(_self_, _180035_node.operator jule::Ptr<_1e02db31b_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0181c83_UseExpr>>()) {
			_case_begin_2027a5927:;
			{
				_1eedb5ea2_check_use_expr(_self_, _180035_node.operator jule::Ptr<_1e0181c83_UseExpr>());
			}
		}
		else {
			_case_begin_2027a4dee:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_2027a4d99:;
	}
}



inline void _1eedb6513_check_result(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	_1e01be3a8_Node _184017_stmt = _self_.get()._field_tree.get()._field_stmts[(_self_.get()._field_tree.get()._field_stmts.len() - 1LL)];
	{
		auto &_match_expr{ _184017_stmt._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e0181c83_UseExpr>>()) {
			_case_begin_2027b1a87:;
			{
				jule::Ptr<_1e0181c83_UseExpr> _184321_ue = _184017_stmt._field_data.operator jule::Ptr<_1e0181c83_UseExpr>();
				jule::Ptr<_1eee43b89_Data> _184421_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _184321_ue.get()._field_expr);
				if ((_184421_d == nullptr)) {
					return;
				}
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_184421_d));
				jule::Ptr<_1eee3a5cb_RetTypeChecker> _184921_rtc = jule::new_ptr<_1eee3a5cb_RetTypeChecker>(_1eee3a5cb_RetTypeChecker(_self_,jule::Ptr<_1ee25b4ad_FnIns>(),_1eee06564_get_result_types(_self_.get()._field_result),jule::Slice<jule::Ptr<_1e0181a63_Expr>>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>(),_184321_ue.get()._field_expr.get()._field_token,jule::Any()));
				_1eee3b6cb_check(_184921_rtc.ptr(), _184321_ue.get()._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0181a63_Expr>>()) {
			_case_begin_2027b1aed:;
			{
				jule::Ptr<_1e0181a63_Expr> _185621_expr = _184017_stmt._field_data.operator jule::Ptr<_1e0181a63_Expr>();
				jule::Ptr<_1eee43b89_Data> _185721_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_.get()._field_s, jule::Trait<_1eee992c7_Lookup>(_self_, 0)), _185621_expr);
				if ((_185721_d == nullptr)) {
					return;
				}
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(jule::Any(_185721_d));
				{
					auto &_match_expr{ _185721_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>()) {
						_case_begin_2027b68a0:;
						{
							jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel> _186425_m = _185721_d.get()._field_model.operator jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>();
							_1eedab162_process_error_call(_self_, _186425_m,_185621_expr.get()._field_token);
						}
					}
					else {
						_case_begin_2027b6cce:;
						{
							return;
						}
					}
					_match_end_2027b6c79:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d955b_GotoSt>>() || _match_expr.type_is<jule::Ptr<_1e02dc817_BreakSt>>() || _match_expr.type_is<jule::Ptr<_1e02dcb7a_ContSt>>() || _match_expr.type_is<jule::Ptr<_1e02db31b_RetSt>>()) {
			_case_begin_2027b10e7:;
			{
				_1eedb62c1_check_node(_self_, _184017_stmt._field_data);
			}
		}
		else {
			_case_begin_2027b1081:;
			{
				_1eedb62c1_check_node(_self_, _184017_stmt._field_data);
				return;
			}
		}
		_match_end_2027b1009:;
	}
	_self_.get()._field_result=nullptr;
}



inline void _1eedb6755_check_tree(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	_self_.get()._field_i=0LL;
	for (; _self_.get()._field_i < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_tree.get()._field_stmts.len())); (_self_.get()._field_i)++) {
		{
			_1e01be3a8_Node _188621_stmt = _self_.get()._field_tree.get()._field_stmts[_self_.get()._field_i];
			_1eedb62c1_check_node(_self_, _188621_stmt._field_data);
			if (_1eeda77e0_stopped(_self_.ptr())) {
				return;
			}
		}
	_iter_next_2027b996e:;
	}
	_iter_end_2027b996e:;
	if ((_self_.get()._field_result != nullptr) && (_self_.get()._field_tree.get()._field_stmts.len() != 0LL)) {
		_1eedb6513_check_result(_self_);
	}
}



inline void _1eedb6b51_check_goto(_1eeda5953_ScopeChecker* _self_,jule::Ptr<_1eeda5733_ScopeGoto>& _189734_gt,jule::Ptr<_1eeda5513_ScopeLabel>& _189755_label) {
	jule::Ptr<_1eeda5953_ScopeChecker> _189817_gtsc = _189734_gt.get()._field_scope;
	while ((_189817_gtsc.get()._field_child_index - 1LL) > _189755_label.get()._field_scope.get()._field_child_index) {
		{
			_189817_gtsc=_189817_gtsc.get()._field_parent;
		}
	_iter_next_2027bda0b:;
	}
	_iter_end_2027bda0b:;
	jule::I32 _190317_n = 0LL;
	if (_189817_gtsc.get()._field_scope == _189755_label.get()._field_scope.get()._field_scope) {
		if (_189734_gt.get()._field_pos > _189755_label.get()._field_pos) {
			return;
		}
		_190317_n=_189734_gt.get()._field_pos;
	}
	jule::I32 _191617_i = (_189755_label.get()._field_pos - 1LL);
	if ((_190317_n == 0LL)) {
		{
			auto &expr = _189755_label.get()._field_scope.get()._field_scope.get()._field_stmts;
			auto it = expr.begin();
			_iter_begin_2027c16ac:;
			if (it != expr.end()) {
				jule::I32 _2027c18cc_j = it - expr.begin();
				jule::Any _2027c1b1e_stmt = *it;
				{
					if (_1eed4ab18_stmt_is_goto_scope(_2027c1b1e_stmt,_189817_gtsc.get()._field_scope)) {
						_190317_n=_2027c18cc_j;
						goto _iter_end_2027c16ac;
					}
				}
				_iter_next_2027c16ac:;
				++it;
				_2027c18cc_j++;
				goto _iter_begin_2027c16ac;
			}
			_iter_end_2027c16ac:;
		}
	}
	for (; _191617_i >= _190317_n; (_191617_i)--) {
		{
			jule::Any _192921_stmt = _189755_label.get()._field_scope.get()._field_scope.get()._field_stmts[_191617_i];
			if (_1eed6d09c_st_is_def(_192921_stmt)) {
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _189734_gt.get()._field_gt.get()._field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any(_189734_gt.get()._field_gt.get()._field_label._field_kind)}));
				return;
			}
		}
	_iter_next_2027c13d2:;
	}
	_iter_end_2027c13d2:;
}



inline void _1eedb6d93_check_gotos(_1eeda5953_ScopeChecker* _self_) {
	{
		auto &expr = (*((*_self_)._field_gotos));
		auto it = expr.begin();
		_iter_begin_2027c4dca:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda5733_ScopeGoto> _2027c4e1e_gt = *it;
			{
				jule::Ptr<_1eeda5513_ScopeLabel> _193921_label = _1eeda8c86_find_label_all(&(*_self_), _2027c4e1e_gt.get()._field_gt.get()._field_label._field_kind);
				if ((_193921_label == nullptr)) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _2027c4e1e_gt.get()._field_gt.get()._field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any(_2027c4e1e_gt.get()._field_gt.get()._field_label._field_kind)}));
					goto _iter_next_2027c4dca;
				}
				_193921_label.get()._field_used=true;
				_1eedb6b51_check_goto(&(*_self_), _2027c4e1e_gt,_193921_label);
			}
			_iter_next_2027c4dca:;
			++it;
			goto _iter_begin_2027c4dca;
		}
		_iter_end_2027c4dca:;
	}
}



inline void _1eedb70d5_check_labels(_1eeda5953_ScopeChecker* _self_) {
	{
		auto &expr = (*((*_self_)._field_labels));
		auto it = expr.begin();
		_iter_begin_2027c8043:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda5513_ScopeLabel> _2027c80dc_l = *it;
			{
				if ((!(_2027c80dc_l.get()._field_used))) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _2027c80dc_l.get()._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_2027c80dc_l.get()._field_label.get()._field_ident)}));
				}
			}
			_iter_next_2027c8043:;
			++it;
			goto _iter_begin_2027c8043;
		}
		_iter_end_2027c8043:;
	}
}



inline void _1eedb7327_check_vars(_1eeda5953_ScopeChecker* _self_) {
	{
		auto &expr = (*_self_)._field_table.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_2027c9aa0:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _2027c9cd1_v = *it;
			{
				if ((((!(_2027c9cd1_v.get()._field_used)) && (!(_1e02c4ada_is_ignore_ident(_2027c9cd1_v.get()._field_ident)))) && (!(_1e02c4de8_is_anon_ident(_2027c9cd1_v.get()._field_ident)))) && (_2027c9cd1_v.get()._field_ident != jule::Str("self", 4))) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _2027c9cd1_v.get()._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_2027c9cd1_v.get()._field_ident)}));
				}
			}
			_iter_next_2027c9aa0:;
			++it;
			goto _iter_begin_2027c9aa0;
		}
		_iter_end_2027c9aa0:;
	}
}



inline void _1eedb7569_check_aliases(_1eeda5953_ScopeChecker* _self_) {
	{
		auto &expr = (*_self_)._field_table.get()._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_2027cc7d9:;
		if (it != expr.end()) {
			jule::Ptr<_1eee75baa_TypeAlias> _2027cc861_a = *it;
			{
				if (((!(_2027cc861_a.get()._field_used)) && (!(_1e02c4ada_is_ignore_ident(_2027cc861_a.get()._field_ident)))) && (!(_1e02c4de8_is_anon_ident(_2027cc861_a.get()._field_ident)))) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _2027cc861_a.get()._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any(_2027cc861_a.get()._field_ident)}));
				}
			}
			_iter_next_2027cc7d9:;
			++it;
			goto _iter_begin_2027cc7d9;
		}
		_iter_end_2027cc7d9:;
	}
}



inline void _1eedb7965_check(jule::Ptr<_1eeda5953_ScopeChecker> _self_,jule::Ptr<_1e02d9ddb_ScopeTree>& _197530_tree,jule::Ptr<_1eed8a5a3_Scope>& _197553_s) {
	_197553_s.get()._field_deferred=_197530_tree.get()._field_deferred;
	_197553_s.get()._field_unsafety=_197530_tree.get()._field_unsafety;
	jule::I32 _197913_errors = _self_.get()._field_s.get()._field_errors.len();
	_self_.get()._field_tree=_197530_tree;
	_self_.get()._field_scope=_197553_s;
	_1eedb6755_check_tree(_self_);
	if (_197913_errors == static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_s.get()._field_errors.len()))) {
		_1eedb7327_check_vars(_self_.ptr());
		_1eedb7569_check_aliases(_self_.ptr());
		if (_1eeda72c3_is_root(_self_.ptr())) {
			_1eedb6d93_check_gotos(_self_.ptr());
			_1eedb70d5_check_labels(_self_.ptr());
		}
	}
}



inline jule::Ptr<_1eeda5953_ScopeChecker> _1eedb7c40_new_child_checker(jule::Ptr<_1eeda5953_ScopeChecker> _self_) {
	jule::Ptr<_1eeda5953_ScopeChecker> _199917_base = _1eed7cc27_new_scope_checker_base(_self_.get()._field_s,nullptr);
	_199917_base.get()._field_parent=_self_;
	_199917_base.get()._field_labels=_self_.get()._field_labels;
	_199917_base.get()._field_gotos=_self_.get()._field_gotos;
	_199917_base.get()._field_child_index=static_cast<jule::I32>((_self_.get()._field_child_index + 1LL));
	return _199917_base;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda5953_ScopeChecker _Src) {
	_Stream << "ScopeChecker{";
	_Stream << "called_from:" << _Src._field_called_from << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _1eedb91b4_check_cdef(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee2579b5_Fn>>()) {
			_case_begin_2027d599b:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_1ee2579b5_Fn>().get()._field_cpp_linked) {
					goto _match_end_2027d5a34;
				}
				goto _case_begin_2027d5c54;
			}
		}
		else {
			_case_begin_2027d5c54:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _1630_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_1630_d.get()._field_tag._field_kind)}));
			}
		}
		_match_end_2027d5a34:;
	}
	if ((_1630_d.get()._field_args.len() > 0LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _1630_d.get()._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eedb94d3_check_typedef(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2027d9cd0:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_1ee242032_Struct>().get()._field_cpp_linked) {
					goto _match_end_2027d964d;
				}
				goto _case_begin_2027d986d;
			}
		}
		else {
			_case_begin_2027d986d:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _3233_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_3233_d.get()._field_tag._field_kind)}));
			}
		}
		_match_end_2027d964d:;
	}
	if ((_3233_d.get()._field_args.len() > 0LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _3233_d.get()._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eedb9802_check_derive(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2027dd29a:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_1ee242032_Struct>().get()._field_cpp_linked))) {
					goto _match_end_2027dcb18;
				}
				goto _case_begin_2027dcd38;
			}
		}
		else {
			_case_begin_2027dcd38:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_2027dcb18:;
	}
	if ((_4832_d.get()._field_args.len() == 0LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion((*_self_)._field_s.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	} else if ((_4832_d.get()._field_args.len() > 1LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	{
		auto &_match_expr{ _4832_d.get()._field_args[0LL]._field_kind };
		
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_2027e2502:;
		}
		else {
			_case_begin_2027e0c1a:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_4832_d.get()._field_args[0LL]._field_kind)}));
			}
		}
		_match_end_2027e2139:;
	}
}



inline void _1eedb9b21_check_namespace(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2027e405e:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_1ee242032_Struct>().get()._field_cpp_linked))) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d.get()._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2579b5_Fn>>()) {
			_case_begin_2027e4427:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_1ee2579b5_Fn>().get()._field_cpp_linked))) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d.get()._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_2027e448d:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_1eedeb24b_Var>().get()._field_cpp_linked))) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d.get()._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_2027e4317:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_7439_d.get()._field_tag._field_kind)}));
			}
		}
		_match_end_2027e40e7:;
	}
	if ((_7439_d.get()._field_args.len() == 0LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((_7439_d.get()._field_args.len() > 1LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1e02c1d07_Token _10213_arg = _7439_d.get()._field_args[0LL];
	if (_10213_arg._field_id != static_cast<jule::U32>(6LLU)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_10213_arg._field_kind[0LL] != '\"') {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_7439_d.get()._field_args[0LL]._field_kind=_10213_arg._field_kind.slice(1LL,(_10213_arg._field_kind.len() - 1LL));
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2027eea92:;
			{
				if ((_1eee704ce_find_directive((*((*_self_)._field_d)),jule::Str("typedef", 7)) == nullptr)) {
					jule::Ptr<_1e02812b1_Directive> _11925_typedef = jule::new_ptr<_1e02812b1_Directive>(_1e02812b1_Directive(_7439_d.get()._field_tag,jule::Slice<_1e02c1d07_Token>()));
					_11925_typedef.get()._field_tag._field_kind=jule::Str("typedef", 7);
					(*((*_self_)._field_d))=jule::append((*((*_self_)._field_d)),jule::Slice<jule::Ptr<_1e02812b1_Directive>>({_11925_typedef}));
				}
			}
		}
		_match_end_2027ee168:;
	}
}



inline void _1eedb9e40_check_deprecated(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _12840_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2028023be:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_1ee242032_Struct>().get()._field_cpp_linked) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _12840_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_12840_d.get()._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2579b5_Fn>>()) {
			_case_begin_202802699:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_1ee2579b5_Fn>().get()._field_cpp_linked) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _12840_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_12840_d.get()._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_202802710:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_1eedeb24b_Var>().get()._field_cpp_linked) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _12840_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_12840_d.get()._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_2028025de:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _12840_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_12840_d.get()._field_tag._field_kind)}));
			}
		}
		_match_end_202802589:;
	}
	if ((_12840_d.get()._field_args.len() == 0LL)) {
		return;
	}
	if ((_12840_d.get()._field_args.len() > 1LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _12840_d.get()._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1e02c1d07_Token _15613_arg = _12840_d.get()._field_args[0LL];
	if (_15613_arg._field_id != static_cast<jule::U32>(6LLU)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _15613_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_15613_arg._field_kind[0LL] != '\"') {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _15613_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_12840_d.get()._field_args[0LL]._field_kind=_15613_arg._field_kind.slice(1LL,(_15613_arg._field_kind.len() - 1LL));
}



inline void _1eedba25e_check_test(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _17031_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1ee2579b5_Fn>>()) {
			_case_begin_20280d09a:;
			{
				jule::Ptr<_1ee2579b5_Fn> _17317_f = (*_self_)._field_o.operator jule::Ptr<_1ee2579b5_Fn>();
				if (((!(_17317_f.get()._field_cpp_linked)) && (!(_1ee25880c_is_init(_17317_f.ptr())))) && (!(_1ee258532_is_entry_point(_17317_f.ptr())))) {
					goto _match_end_20280c918;
				}
				if (_1ee258257_is_method(_17317_f.ptr())) {
					_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _17317_f.get()._field_token,jule::Str("you cannot declare test methods", 31),jule::Slice<jule::Any>());
					goto _match_end_20280c918;
				}
				goto _case_begin_20280cb38;
			}
		}
		else {
			_case_begin_20280cb38:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _17031_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_17031_d.get()._field_tag._field_kind)}));
			}
		}
		_match_end_20280c918:;
	}
	if ((_17031_d.get()._field_args.len() > 0LL)) {
		_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _17031_d.get()._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1eedba57d_check_directive(_1eedb8bca_DirectiveChecker* _self_,jule::Ptr<_1e02812b1_Directive>& _19139_d) {
	{
		auto &_match_expr{ _19139_d.get()._field_tag._field_kind };
		
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_202812d2a:;
			{
				_1eedb91b4_check_cdef(&(*_self_), _19139_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_202812d91:;
			{
				_1eedb94d3_check_typedef(&(*_self_), _19139_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_202812e07:;
			{
				_1eedb9802_check_derive(&(*_self_), _19139_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_202812e6d:;
			{
				_1eedb9b21_check_namespace(&(*_self_), _19139_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_202813e4c:;
			{
				_1eedb9e40_check_deprecated(&(*_self_), _19139_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_202813eb3:;
			{
				_1eedba25e_check_test(&(*_self_), _19139_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_202814029:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _19139_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any(_19139_d.get()._field_tag._field_kind)}));
			}
		}
		else {
			_case_begin_202812940:;
			{
				_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _19139_d.get()._field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any(_19139_d.get()._field_tag._field_kind)}));
			}
		}
		_match_end_202812c2b:;
	}
}



inline void _1eedba7c0_check(_1eedb8bca_DirectiveChecker* _self_) {
	{
		auto &expr = (*((*_self_)._field_d));
		auto it = expr.begin();
		_iter_begin_20281823c:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _20281846d_d = *it;
			{
				_1eedba57d_check_directive(&(*_self_), _20281846d_d);
			}
			_iter_next_20281823c:;
			++it;
			goto _iter_begin_20281823c;
		}
		_iter_end_20281823c:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1eedb8bca_DirectiveChecker _Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc4411_find_package(_1eedc3da0_Package* _self_,jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc47b8_select_package(_1eedc3da0_Package* _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1eedeb24b_Var> _1eedc4c4c_find_var(_1eedc3da0_Package* _self_,jule::Str _28731_ident,jule::Bool _28743_cpp_linked) {
	return _1eedbd251_find_var_in_package((*_self_)._field_files,_28731_ident,_28743_cpp_linked);
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eedc51d1_find_type_alias(_1eedc3da0_Package* _self_,jule::Str _29338_ident,jule::Bool _29350_cpp_linked) {
	return _1eedbd7a1_find_type_alias_in_package((*_self_)._field_files,_29338_ident,_29350_cpp_linked);
}



inline jule::Ptr<_1ee242032_Struct> _1eedc5665_find_struct(_1eedc3da0_Package* _self_,jule::Str _29934_ident,jule::Bool _29946_cpp_linked) {
	return _1eedbdc57_find_struct_in_package((*_self_)._field_files,_29934_ident,_29946_cpp_linked);
}



inline jule::Ptr<_1ee2579b5_Fn> _1eedc5ae9_find_fn(_1eedc3da0_Package* _self_,jule::Str _30530_ident,jule::Bool _30542_cpp_linked) {
	return _1eedbe263_find_fn_in_package((*_self_)._field_files,_30530_ident,_30542_cpp_linked);
}



inline jule::Ptr<_1eec8627e_Trait> _1eedc5ea1_find_trait(_1eedc3da0_Package* _self_,jule::Str _31133_ident) {
	return _1eedbe64d_find_trait_in_package((*_self_)._field_files,_31133_ident);
}



inline jule::Ptr<_1eec889ac_Enum> _1eedc6358_find_enum(_1eedc3da0_Package* _self_,jule::Str _31732_ident) {
	return _1eedbea38_find_enum_in_package((*_self_)._field_files,_31732_ident);
}







std::ostream &operator<<(std::ostream &_Stream, _1eedc3da0_Package _Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedca626_find_package(_1eedca071_Sema* _self_,jule::Str _23635_ident) {
	return _1eee3cde7_find_package((*_self_)._field_file.ptr(), _23635_ident);
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedca9cd_select_package(_1eedca071_Sema* _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _24637_selector) {
	return _1eee3d29e_select_package((*_self_)._field_file.ptr(), _24637_selector);
}



inline jule::Ptr<_1eedeb24b_Var> _1eedcae62_find_var(_1eedca071_Sema* _self_,jule::Str _25631_ident,jule::Bool _25643_cpp_linked) {
	jule::Ptr<_1eedeb24b_Var> _25817_v = _1eedbd251_find_var_in_package((*_self_)._field_files,_25631_ident,_25643_cpp_linked);
	if ((_25817_v != nullptr)) {
		return _25817_v;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c5c0ba:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c5bc68_imp = *it;
			{
				if ((!(_1eedc8679_imp_is_lookupable(_202c5bc68_imp,_25631_ident)))) {
					goto _iter_next_202c5c0ba;
				}
				_25817_v=_1eedc17b5_find_var(_202c5bc68_imp.ptr(), _25631_ident,_25643_cpp_linked);
				if ((_25817_v != nullptr) && _1eedcdb68_is_accessible_define(&(*_self_), _25817_v.get()._field_public,_25817_v.get()._field_token)) {
					return _25817_v;
				}
			}
			_iter_next_202c5c0ba:;
			++it;
			goto _iter_begin_202c5c0ba;
		}
		_iter_end_202c5c0ba:;
	}
	return nullptr;
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eedcb3e6_find_type_alias(_1eedca071_Sema* _self_,jule::Str _28338_ident,jule::Bool _28350_cpp_linked) {
	jule::Ptr<_1eee75baa_TypeAlias> _28517_ta = _1eedbd7a1_find_type_alias_in_package((*_self_)._field_files,_28338_ident,_28350_cpp_linked);
	if ((_28517_ta != nullptr)) {
		return _28517_ta;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c60871:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c605c9_imp = *it;
			{
				if ((!(_1eedc8679_imp_is_lookupable(_202c605c9_imp,_28338_ident)))) {
					goto _iter_next_202c60871;
				}
				_28517_ta=_1eedc1c49_find_type_alias(_202c605c9_imp.ptr(), _28338_ident,_28350_cpp_linked);
				if ((_28517_ta != nullptr) && _1eedcdb68_is_accessible_define(&(*_self_), _28517_ta.get()._field_public,_28517_ta.get()._field_token)) {
					return _28517_ta;
				}
			}
			_iter_next_202c60871:;
			++it;
			goto _iter_begin_202c60871;
		}
		_iter_end_202c60871:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee242032_Struct> _1eedcb87a_find_struct(_1eedca071_Sema* _self_,jule::Str _31034_ident,jule::Bool _31046_cpp_linked) {
	jule::Ptr<_1ee242032_Struct> _31217_s = _1eedbdc57_find_struct_in_package((*_self_)._field_files,_31034_ident,_31046_cpp_linked);
	if ((_31217_s != nullptr)) {
		return _31217_s;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c63ae9:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c63797_imp = *it;
			{
				if ((!(_1eedc8679_imp_is_lookupable(_202c63797_imp,_31034_ident)))) {
					goto _iter_next_202c63ae9;
				}
				_31217_s=_1eedc21cd_find_struct(_202c63797_imp.ptr(), _31034_ident,_31046_cpp_linked);
				if ((_31217_s != nullptr) && _1eedcdb68_is_accessible_define(&(*_self_), _31217_s.get()._field_public,_31217_s.get()._field_token)) {
					return _31217_s;
				}
			}
			_iter_next_202c63ae9:;
			++it;
			goto _iter_begin_202c63ae9;
		}
		_iter_end_202c63ae9:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee2579b5_Fn> _1eedcbd0e_find_fn(_1eedca071_Sema* _self_,jule::Str _33730_ident,jule::Bool _33742_cpp_linked) {
	jule::Ptr<_1ee2579b5_Fn> _33917_f = _1eedbe263_find_fn_in_package((*_self_)._field_files,_33730_ident,_33742_cpp_linked);
	if ((_33917_f != nullptr)) {
		return _33917_f;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c66d72:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c66a20_imp = *it;
			{
				if ((!(_1eedc8679_imp_is_lookupable(_202c66a20_imp,_33730_ident)))) {
					goto _iter_next_202c66d72;
				}
				_33917_f=_1eedc2662_find_fn(_202c66a20_imp.ptr(), _33730_ident,_33742_cpp_linked);
				if ((_33917_f != nullptr) && _1eedcdb68_is_accessible_define(&(*_self_), _33917_f.get()._field_public,_33917_f.get()._field_token)) {
					return _33917_f;
				}
			}
			_iter_next_202c66d72:;
			++it;
			goto _iter_begin_202c66d72;
		}
		_iter_end_202c66d72:;
	}
	return nullptr;
}



inline jule::Ptr<_1eec8627e_Trait> _1eedcc1b6_find_trait(_1eedca071_Sema* _self_,jule::Str _36433_ident) {
	jule::Ptr<_1eec8627e_Trait> _36617_t = _1eedbe64d_find_trait_in_package((*_self_)._field_files,_36433_ident);
	if ((_36617_t != nullptr)) {
		return _36617_t;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c69b55:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c6a095_imp = *it;
			{
				if ((!(_1eedc8679_imp_is_lookupable(_202c6a095_imp,_36433_ident)))) {
					goto _iter_next_202c69b55;
				}
				_36617_t=_1eedc2a19_find_trait(_202c6a095_imp.ptr(), _36433_ident);
				if ((_36617_t != nullptr) && _1eedcdb68_is_accessible_define(&(*_self_), _36617_t.get()._field_public,_36617_t.get()._field_token)) {
					return _36617_t;
				}
			}
			_iter_next_202c69b55:;
			++it;
			goto _iter_begin_202c69b55;
		}
		_iter_end_202c69b55:;
	}
	return nullptr;
}



inline jule::Ptr<_1eec889ac_Enum> _1eedcc56d_find_enum(_1eedca071_Sema* _self_,jule::Str _39132_ident) {
	jule::Ptr<_1eec889ac_Enum> _39317_e = _1eedbea38_find_enum_in_package((*_self_)._field_files,_39132_ident);
	if ((_39317_e != nullptr)) {
		return _39317_e;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c6c9c1:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c6ce11_imp = *it;
			{
				if ((!(_1eedc8679_imp_is_lookupable(_202c6ce11_imp,_39132_ident)))) {
					goto _iter_next_202c6c9c1;
				}
				_39317_e=_1eedc2dc1_find_enum(_202c6ce11_imp.ptr(), _39132_ident);
				if ((_39317_e != nullptr) && _1eedcdb68_is_accessible_define(&(*_self_), _39317_e.get()._field_public,_39317_e.get()._field_token)) {
					return _39317_e;
				}
			}
			_iter_next_202c6c9c1:;
			++it;
			goto _iter_begin_202c6c9c1;
		}
		_iter_end_202c6c9c1:;
	}
	return nullptr;
}



inline jule::Bool _1eedcc9e1_is_flag(_1eedca071_Sema* _self_,jule::I32 _41522_flags) {
	return ((*_self_)._field_flags & _41522_flags) == _41522_flags;
}



inline void _1eedccd10_set_current_file(_1eedca071_Sema* _self_,jule::Ptr<_1eee3c842_SymbolTable> _41739_f) {
	(*_self_)._field_file=_41739_f;
}



inline void _1eedcd2d8_push_err(_1eedca071_Sema* _self_,_1e02c1d07_Token _41927_token,jule::Str _41941_fmt,jule::Slice<jule::Any> _41954_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_1eedc828e_compiler_err(_41927_token,true,_41941_fmt,_41954_args));
}



inline void _1eedcd6d4_push_suggestion(_1eedca071_Sema* _self_,jule::Str _42434_fmt,jule::Slice<jule::Any> _42447_args) {
	{
		_1eedc99cc_push_suggestion((&((*_self_)._field_errors[((*_self_)._field_errors.len() - 1LL)])),_42434_fmt,_42447_args);
	}
}



inline jule::Bool _1eedcdb68_is_accessible_define(_1eedca071_Sema* _self_,jule::Bool _42935_public,_1e02c1d07_Token _42949_token) {
	return (_42935_public || (_42949_token._field_file == nullptr)) || (_1e02c89bd_dir((*_self_)._field_file.get()._field_file.ptr()) == _1e02c89bd_dir(_42949_token._field_file.ptr()));
}



inline jule::Bool _1eedce1c9_is_duplicated_ident(_1eedca071_Sema* _self_,jule::U32 _43634_itself,jule::Str _43651_ident,jule::Bool _43663_cpp_linked) {
	{
		auto &expr = (*_self_)._field_files;
		auto it = expr.begin();
		_iter_begin_202c76414:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> &_202c76612_f = *it;
			{
				if (_1eee41527_is_duplicated_ident(_202c76612_f.ptr(), _43634_itself,_43651_ident,_43663_cpp_linked)) {
					return true;
				}
				{
					auto &expr = _202c76612_f.get()._field_imports;
					auto it = expr.begin();
					_iter_begin_202c76d3d:;
					if (it != expr.end()) {
						jule::Ptr<_1eedc08c4_ImportInfo> &_202c77c95_imp = *it;
						{
							{
								auto &expr = _202c77c95_imp.get()._field_selected;
								auto it = expr.begin();
								_iter_begin_202c78427:;
								if (it != expr.end()) {
									_1e02c1d07_Token &_202c7846b_selected = *it;
									{
										if (_202c7846b_selected._field_kind == _43651_ident) {
											return true;
										}
									}
									_iter_next_202c78427:;
									++it;
									goto _iter_begin_202c78427;
								}
								_iter_end_202c78427:;
							}
						}
						_iter_next_202c76d3d:;
						++it;
						goto _iter_begin_202c76d3d;
					}
					_iter_end_202c76d3d:;
				}
			}
			_iter_next_202c76414:;
			++it;
			goto _iter_begin_202c76414;
		}
		_iter_end_202c76414:;
	}
	return false;
}



inline void _1eedce5c5_check_directives(jule::Ptr<_1eedca071_Sema> _self_,jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _45341_d,jule::Any _45367_o) {
	_1eedb8bca_DirectiveChecker _45417_dc = _1eedb8bca_DirectiveChecker(_self_,((jule::Ptr<jule::Slice<jule::Ptr<_1e02812b1_Directive>>>)((&(_45341_d)))),_45367_o);
	_1eedba7c0_check(&_45417_dc);
}



inline jule::Bool _1eedceb36_check_generic_quantity(_1eedca071_Sema* _self_,jule::I32 _46241_required,jule::I32 _46256_given,_1e02c1d07_Token _46268_token) {
	jule::Bool _46284_ok = jule::Bool();
	{
		
		if ((_46241_required == 0LL) && (_46256_given > 0LL)) {
			_case_begin_202c7be31:;
			{
				_1eedcd2d8_push_err(&(*_self_), _46268_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else if ((_46241_required > 0LL) && (_46256_given == 0LL)) {
			_case_begin_202c7bedb:;
			{
				_1eedcd2d8_push_err(&(*_self_), _46268_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else if (_46241_required < _46256_given) {
			_case_begin_202c7c052:;
			{
				_1eedcd2d8_push_err(&(*_self_), _46268_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else if (_46241_required > _46256_given) {
			_case_begin_202c7bbcd:;
			{
				_1eedcd2d8_push_err(&(*_self_), _46268_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_46284_ok = false;
				return _46284_ok;
			}
		}
		else {
			_case_begin_202c7b76b:;
			{
				_46284_ok = true;
				return _46284_ok;
			}
		}
		_match_end_202c7b6a0:;
	}
}



inline jule::Bool _1eedd010e_is_duplicated_import_selection(_1eedca071_Sema* _self_,jule::U32 _48145_itself,jule::Str _48162_ident) {
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c80e79:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> &_202c811aa_imp = *it;
			{
				if (static_cast<jule::U32>(_202c811aa_imp) == _48145_itself) {
					goto _iter_end_202c80e79;
				}
				if (_1eedc3740_exist_ident(_202c811aa_imp.ptr(), _48162_ident)) {
					return true;
				}
			}
			_iter_next_202c80e79:;
			++it;
			goto _iter_begin_202c80e79;
		}
		_iter_end_202c80e79:;
	}
	return false;
}



inline jule::Any _1eedd0582_get_import_def(_1eedca071_Sema* _self_,jule::Str _49629_ident,jule::Ptr<_1eedc08c4_ImportInfo>& _49646_imp) {
	if (_1eeec6a85_find_package_builtin_def(_49646_imp.get()._field_link_path,_49629_ident) != jule::Any(jule::Any(nullptr))) {
		return jule::Any(true);
	}
	{
		auto &expr = _49646_imp.get()._field_package.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202c83ad6:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202c83b6e_f = *it;
			{
				
				jule::Any _50321_def = _1eee40eb6_def_by_ident(_202c83b6e_f.ptr(), _49629_ident,false);
				if (_50321_def != jule::Any(jule::Any(nullptr))) {
					return _50321_def;
				}
			}
			_iter_next_202c83ad6:;
			++it;
			goto _iter_begin_202c83ad6;
		}
		_iter_end_202c83ad6:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1eedd097d_check_import_selections(_1eedca071_Sema* _self_,jule::Ptr<_1eedc08c4_ImportInfo>& _51247_imp) {
	jule::Bool _51267_ok = jule::Bool();
	_51267_ok=true;
	{
		auto &expr = _51247_imp.get()._field_selected;
		auto it = expr.begin();
		_iter_begin_202c85c70:;
		if (it != expr.end()) {
			_1e02c1d07_Token _202c86116_ident = *it;
			{
				if ((_202c86116_ident._field_kind == jule::Str("self", 4))) {
					goto _iter_next_202c85c70;
				}
				if (_1eedd010e_is_duplicated_import_selection(&(*_self_), static_cast<jule::U32>(static_cast<jule::U32>(_51247_imp)),_202c86116_ident._field_kind)) {
					_1eedcd2d8_push_err(&(*_self_), _202c86116_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_202c86116_ident._field_kind)}));
					_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					_51267_ok=false;
					goto _iter_next_202c85c70;
				}
				jule::Any _52621_def = _1eedd0582_get_import_def(&(*_self_), _202c86116_ident._field_kind,_51247_imp);
				{
					auto &_match_expr{ _52621_def };
					
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_202c891c4:;
						{
							goto _iter_next_202c85c70;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
						_case_begin_202c8923a:;
						{
							jule::Ptr<_1eedeb24b_Var> _53225_v = _52621_def.operator jule::Ptr<_1eedeb24b_Var>();
							if (_1eedcdb68_is_accessible_define(&(*_self_), _53225_v.get()._field_public,_53225_v.get()._field_token)) {
								goto _iter_next_202c85c70;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eee75baa_TypeAlias>>()) {
						_case_begin_202c892a1:;
						{
							jule::Ptr<_1eee75baa_TypeAlias> _53725_ta = _52621_def.operator jule::Ptr<_1eee75baa_TypeAlias>();
							if (_1eedcdb68_is_accessible_define(&(*_self_), _53725_ta.get()._field_public,_53725_ta.get()._field_token)) {
								goto _iter_next_202c85c70;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
						_case_begin_202c89317:;
						{
							jule::Ptr<_1ee242032_Struct> _54225_strct = _52621_def.operator jule::Ptr<_1ee242032_Struct>();
							if (_1eedcdb68_is_accessible_define(&(*_self_), _54225_strct.get()._field_public,_54225_strct.get()._field_token)) {
								goto _iter_next_202c85c70;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eec8627e_Trait>>()) {
						_case_begin_202c8a0a4:;
						{
							jule::Ptr<_1eec8627e_Trait> _54725_t = _52621_def.operator jule::Ptr<_1eec8627e_Trait>();
							if (_1eedcdb68_is_accessible_define(&(*_self_), _54725_t.get()._field_public,_54725_t.get()._field_token)) {
								goto _iter_next_202c85c70;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eec889ac_Enum>>()) {
						_case_begin_202c8a11a:;
						{
							jule::Ptr<_1eec889ac_Enum> _55225_e = _52621_def.operator jule::Ptr<_1eec889ac_Enum>();
							if (_1eedcdb68_is_accessible_define(&(*_self_), _55225_e.get()._field_public,_55225_e.get()._field_token)) {
								goto _iter_next_202c85c70;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1ee2579b5_Fn>>()) {
						_case_begin_202c8a181:;
						{
							jule::Ptr<_1ee2579b5_Fn> _55725_f = _52621_def.operator jule::Ptr<_1ee2579b5_Fn>();
							if (_1eedcdb68_is_accessible_define(&(*_self_), _55725_f.get()._field_public,_55725_f.get()._field_token)) {
								goto _iter_next_202c85c70;
							}
						}
					}
					else {
						_case_begin_202c89081:;
						{
							_1eedcd2d8_push_err(&(*_self_), _202c86116_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_202c86116_ident._field_kind)}));
							_51267_ok=false;
							goto _iter_next_202c85c70;
						}
					}
					_match_end_202c8902b:;
				}
				_1eedcd2d8_push_err(&(*_self_), _202c86116_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_202c86116_ident._field_kind)}));
				_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
				_51267_ok=false;
			}
			_iter_next_202c85c70:;
			++it;
			goto _iter_begin_202c85c70;
		}
		_iter_end_202c85c70:;
	}
	return _51267_ok;
}



inline jule::Bool _1eedd0d68_is_use_alias_duplication(_1eedca071_Sema* _self_,jule::Ptr<_1eedc08c4_ImportInfo>& _57444_imp) {
	if ((_57444_imp.get()._field_alias.len() == 0LL)) {
		return false;
	}
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_202c9292a:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202c93453_imp2 = *it;
			{
				if (_202c93453_imp2 == _57444_imp) {
					goto _iter_end_202c9292a;
				}
				if (_202c93453_imp2.get()._field_alias == _57444_imp.get()._field_alias) {
					return true;
				}
				if ((_202c93453_imp2.get()._field_ident == _202c93453_imp2.get()._field_link_path) && (_202c93453_imp2.get()._field_ident == _57444_imp.get()._field_alias)) {
					return true;
				}
			}
			_iter_next_202c9292a:;
			++it;
			goto _iter_begin_202c9292a;
		}
		_iter_end_202c9292a:;
	}
	return false;
}



inline jule::Bool _1eedd120e_check_import(_1eedca071_Sema* _self_,jule::Ptr<_1eedc08c4_ImportInfo>& _59536_imp) {
	if (_59536_imp.get()._field_cpp_linked || (_59536_imp.get()._field_package.get()._field_files.len() == 0LL)) {
		return true;
	}
	if (_1eedd0d68_is_use_alias_duplication(&(*_self_), _59536_imp)) {
		_1eedcd2d8_push_err(&(*_self_), _59536_imp.get()._field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>({jule::Any(_59536_imp.get()._field_alias)}));
		_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	}
	if ((!(_59536_imp.get()._field_duplicate))) {
		jule::Ptr<_1eedca071_Sema> _60621_sema = jule::new_ptr<_1eedca071_Sema>(_1eedca071_Sema(jule::Slice<_208de2238_Log>(),jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>(),jule::Ptr<_1eee3c842_SymbolTable>(),(*_self_)._field_flags));
		_1eede7797_check(_60621_sema, _59536_imp.get()._field_package.get()._field_files);
		if ((_60621_sema.get()._field_errors.len() != 0LL)) {
			(*_self_)._field_errors=jule::append((*_self_)._field_errors,_60621_sema.get()._field_errors);
			_60621_sema.get()._field_errors=nullptr;
			return false;
		}
	}
	return _1eedd097d_check_import_selections(&(*_self_), _59536_imp);
}



inline void _1eedd1451_check_imports(_1eedca071_Sema* _self_) {
	{
		auto &expr = (*_self_)._field_files;
		auto it = expr.begin();
		_iter_begin_202c9ad40:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202c9b02c_file = *it;
			{
				_1eedccd10_set_current_file(&(*_self_), _202c9b02c_file);
				{
					auto &expr = _202c9b02c_file.get()._field_imports;
					auto it = expr.begin();
					_iter_begin_202c9b846:;
					if (it != expr.end()) {
						jule::Ptr<_1eedc08c4_ImportInfo> _202c9bc64_imp = *it;
						{
							jule::Bool _62421_ok = _1eedd120e_check_import(&(*_self_), _202c9bc64_imp);
							if ((!(_62421_ok))) {
								_1eedcd2d8_push_err(&(*_self_), _202c9bc64_imp.get()._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any(_202c9bc64_imp.get()._field_link_path)}));
								return;
							}
						}
						_iter_next_202c9b846:;
						++it;
						goto _iter_begin_202c9b846;
					}
					_iter_end_202c9b846:;
				}
			}
			_iter_next_202c9ad40:;
			++it;
			goto _iter_begin_202c9ad40;
		}
		_iter_end_202c9ad40:;
	}
}



inline void _1eedd1693_impl_file_impls(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_impls;
		auto it = expr.begin();
		_iter_begin_202c9d9be:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8a4d6_Impl> _202c9da13_imp = *it;
			{
				_1eeddc21a_impl_impl(_self_, _202c9da13_imp);
			}
			_iter_next_202c9d9be:;
			++it;
			goto _iter_begin_202c9d9be;
		}
		_iter_end_202c9d9be:;
	}
}



inline void _1eedd18d5_impl_impls(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202ca0031:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202ca021d_file = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202ca021d_file);
				_1eedd1693_impl_file_impls(_self_);
			}
			_iter_next_202ca0031:;
			++it;
			goto _iter_begin_202ca0031;
		}
		_iter_end_202ca0031:;
	}
}



inline void _1eedd1b27_check_enums(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202ca14a5:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202ca1692_file = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202ca1692_file);
				_1eedd8cb6_check_enum_decls(_self_);
			}
			_iter_next_202ca14a5:;
			++it;
			goto _iter_begin_202ca14a5;
		}
		_iter_end_202ca14a5:;
	}
}



inline jule::Bool _1eedd2188_check_type_with_refers(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eee7b4a7_TypeSymbol>& _65747_t,jule::Trait<_1eee992c7_Lookup> _65813_l,jule::Ptr<_1eee8c760_Referencer> _65828_referencer) {
	jule::Bool _65855_ok = jule::Bool();
	if (_1eee7b919_checked(_65747_t.ptr())) {
		_65855_ok = true;
		return _65855_ok;
	}
	_1eee8d6a6_TypeChecker _66217_tc = _1eee8d6a6_TypeChecker(_self_,_65813_l,_65828_referencer,_1e02c1d07_Token(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool());
	if ((_65828_referencer != nullptr) && (_65828_referencer.get()._field_refs != nullptr)) {
		_66217_tc._field_owner_alias=_65828_referencer.get()._field_owner.operator jule::Ptr<_1eee75baa_TypeAlias>();
	}
	_1eee966c0_check(&_66217_tc, _65747_t);
	_65855_ok = _1eee7b919_checked(_65747_t.ptr());
	return _65855_ok;
}



inline jule::Bool _1eedd261c_check_type(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eee7b4a7_TypeSymbol>& _68135_t,jule::Trait<_1eee992c7_Lookup> _68155_l) {
	return _1eedd2188_check_type_with_refers(_self_, _68135_t,_68155_l,nullptr);
}



inline jule::Ptr<_1eee76b45_TypeKind> _1eedd2ae5_build_type_with_generics(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1e01c3db3_TypeDecl>& _68749_t,jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _68813_generics) {
	jule::Ptr<_1eee8d6a6_TypeChecker> _68917_tc = jule::new_ptr<_1eee8d6a6_TypeChecker>(_1eee8d6a6_TypeChecker(_self_,jule::Trait<_1eee992c7_Lookup>(_self_, 3),jule::Ptr<_1eee8c760_Referencer>(),_1e02c1d07_Token(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),_68813_generics,jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool()));
	return _1eee963a1_check_decl(_68917_tc.ptr(), _68749_t);
}



inline jule::Ptr<_1eee76b45_TypeKind> _1eedd2e8b_build_type(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1e01c3db3_TypeDecl>& _69835_t) {
	return _1eedd2ae5_build_type_with_generics(_self_, _69835_t,nullptr);
}



inline jule::Ptr<_1eee76b45_TypeKind> _1eedd3343_select_type(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1e01c3db3_TypeDecl>& _70336_t) {
	jule::Ptr<_1eee8d6a6_TypeChecker> _70417_tc = jule::new_ptr<_1eee8d6a6_TypeChecker>(_1eee8d6a6_TypeChecker(_self_,jule::Trait<_1eee992c7_Lookup>(_self_, 3),jule::Ptr<_1eee8c760_Referencer>(),_1e02c1d07_Token(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool(),jule::Bool(),true,jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool()));
	return _1eee963a1_check_decl(_70417_tc.ptr(), _70336_t);
}



inline jule::Ptr<_1eee45be1_Eval> _1eedd38a4_evalpd(jule::Ptr<_1eedca071_Sema> _self_,jule::Trait<_1eee992c7_Lookup> _71430_l,jule::Ptr<_1eee76b45_TypeKind> _71445_p,jule::Ptr<_1eedeb24b_Var> _71463_owner) {
	jule::Ptr<_1eee45be1_Eval> _71517_e = jule::new_ptr<_1eee45be1_Eval>(_1eee45be1_Eval(_self_,_71430_l,jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_71463_owner,jule::Ptr<_1ee2449b3_FieldIns>(),jule::Bool()));
	{
		auto &_match_expr{ _71430_l };
		
		if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
			_case_begin_202cadc10:;
			{
				_71517_e.get()._field_unsafety=_1eeda6ee8_is_unsafe(_71430_l.operator jule::Ptr<_1eeda5953_ScopeChecker>());
			}
		}
		_match_end_202cadbaa:;
	}
	_71517_e.get()._field_prefix=_71445_p;
	return _71517_e;
}



inline jule::Ptr<_1eee45be1_Eval> _1eedd3d38_evalp(jule::Ptr<_1eedca071_Sema> _self_,jule::Trait<_1eee992c7_Lookup> _73229_l,jule::Ptr<_1eee76b45_TypeKind> _73244_p) {
	return _1eedd38a4_evalpd(_self_, _73229_l,_73244_p,nullptr);
}



inline jule::Ptr<_1eee45be1_Eval> _1eedd41e0_eval(jule::Ptr<_1eedca071_Sema> _self_,jule::Trait<_1eee992c7_Lookup> _73728_l) {
	return _1eedd3d38_evalp(_self_, _73728_l,nullptr);
}



inline jule::Bool _1eedd482d_check_assign_type(jule::Ptr<_1eedca071_Sema> _self_,jule::Bool _74137_dest_is_ref,jule::Ptr<_1eee76b45_TypeKind>& _74161_dest,jule::Ptr<_1eee43b89_Data>& _74214_d,_1e02c1d07_Token _74228_error_token) {
	if (_74214_d.get()._field_decl) {
		_1eedcd2d8_push_err(_self_.ptr(), _74228_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return false;
	}
	if (_74137_dest_is_ref) {
		if ((!(_1eee7741a_equals(_74161_dest, _74214_d.get()._field_kind)))) {
			_1eedcd2d8_push_err(_self_.ptr(), _74228_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_74161_dest.ptr())),jule::Any(_1eee77063_to_str(_74214_d.get()._field_kind.ptr()))}));
			return false;
		}
	} else {
		jule::Ptr<_1eee2c3ae_AssignTypeChecker> _75321_atc = jule::new_ptr<_1eee2c3ae_AssignTypeChecker>(_1eee2c3ae_AssignTypeChecker(_self_,_74161_dest,_74214_d,_74228_error_token));
		jule::Bool _75917_ok = _1eee2d833_check(_75321_atc.ptr());
		if ((!(_75917_ok))) {
			return false;
		}
	}
	if ((!(_1eee44690_is_const(_74214_d.ptr()))) || (_1eee791db_prim(_74161_dest.ptr()) == nullptr)) {
		return true;
	}
	jule::Str _76917_kind = _1eee791db_prim(_74161_dest.ptr()).get()._field_kind;
	{
		
		if (_1eeda194e_is_sig_int(_76917_kind)) {
			_case_begin_202cb6d06:;
			{
				_1eed220ea_set_i64(_74214_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_74214_d.get()._field_constant.ptr())));
			}
		}
		else if (_1eeda1ca1_is_unsig_int(_76917_kind)) {
			_case_begin_202cb6d7d:;
			{
				_1eed22419_set_u64(_74214_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_74214_d.get()._field_constant.ptr())));
			}
		}
		else if (_1eeda2411_is_float(_76917_kind)) {
			_case_begin_202cb6e05:;
			{
				_1eed22d76_set_f64(_74214_d.get()._field_constant.ptr(), static_cast<jule::F64>(_1eed21ccb_as_f64(_74214_d.get()._field_constant.ptr())));
			}
		}
		_match_end_202cb6c29:;
	}
	return true;
}



inline jule::Bool _1eedd4dd3_check_type_compatibility(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eee76b45_TypeKind>& _78349_dest,jule::Ptr<_1eee76b45_TypeKind>& _78414_src,_1e02c1d07_Token& _78435_error_token) {
	if ((_78414_src == nullptr)) {
		_1eedcd2d8_push_err(_self_.ptr(), _78435_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_78349_dest.ptr())),jule::Any(_1eee77063_to_str(_78414_src.ptr()))}));
		return false;
	}
	if ((_1eee7b056_tup(_78414_src.ptr()) != nullptr)) {
		_1eedcd2d8_push_err(_self_.ptr(), _78435_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_78349_dest.ptr())),jule::Any(_1eee77063_to_str(_78414_src.ptr()))}));
		return false;
	}
	_1eee2aa61_TypeCompatibilityChecker _79817_tcc = _1eee2aa61_TypeCompatibilityChecker(_self_,_78349_dest,_78414_src,_78435_error_token);
	if (_1eee2bc60_check(&_79817_tcc)) {
		return true;
	}
	_1eedcd2d8_push_err(_self_.ptr(), _78435_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_78349_dest.ptr())),jule::Any(_1eee77063_to_str(_78414_src.ptr()))}));
	return false;
}



inline jule::Ptr<_1eee76b45_TypeKind> _1eedd539a_build_non_generic_type_kind(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1e01c3db3_TypeDecl>& _81952_ast,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>& _82014_generics) {
	jule::Ptr<_1eee8d6a6_TypeChecker> _82117_tc = jule::new_ptr<_1eee8d6a6_TypeChecker>(_1eee8d6a6_TypeChecker(_self_,jule::Trait<_1eee992c7_Lookup>(_self_, 3),jule::Ptr<_1eee8c760_Referencer>(),_1e02c1d07_Token(),_82014_generics,jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool()));
	return _1eee963a1_check_decl(_82117_tc.ptr(), _81952_ast);
}



inline void _1eedd56ec_build_fn_non_generic_type_kinds(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee25b4ad_FnIns>& _82956_f) {
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _83017_generics = nullptr;
	if (_1ee258257_is_method(_82956_f.get()._field_decl.ptr())) {
		_83017_generics=jule::append(_82956_f.get()._field_decl.get()._field_generics,_82956_f.get()._field_decl.get()._field_owner.get()._field_generics);
	} else {
		_83017_generics=_82956_f.get()._field_decl.get()._field_generics;
	}
	{
		auto &expr = _82956_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_202cc3010:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> _202cc3054_p = *it;
			{
				if ((!(_1ee256398_is_self(_202cc3054_p.get()._field_decl.ptr())))) {
					_202cc3054_p.get()._field_kind=_1eedd539a_build_non_generic_type_kind(_self_, _202cc3054_p.get()._field_decl.get()._field_kind.get()._field_decl,_83017_generics);
				}
			}
			_iter_next_202cc3010:;
			++it;
			goto _iter_begin_202cc3010;
		}
		_iter_end_202cc3010:;
	}
	if ((!(_1ee257e7c_is_void(_82956_f.get()._field_decl.ptr())))) {
		_82956_f.get()._field_result=_1eedd539a_build_non_generic_type_kind(_self_, _82956_f.get()._field_decl.get()._field_result.get()._field_kind.get()._field_decl,_83017_generics);
	}
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1eedd5ad7_get_trait_check_fn_kind(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _84748_f) {
	jule::Ptr<_1ee25b4ad_FnIns> _84817_ins = _1ee259775_instance_force(_84748_f);
	_1eedd56ec_build_fn_non_generic_type_kinds(_self_, _84817_ins);
	return _84817_ins;
}



inline jule::Bool _1eedd5e7d_reload_fn_ins_types(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee25b4ad_FnIns>& _85344_f) {
	jule::Bool _85357_ok = jule::Bool();
	if (_1ee25c13a_is_builtin(_85344_f.ptr()) || _1ee25c415_is_anon(_85344_f.ptr())) {
		_85357_ok = true;
		return _85357_ok;
	}
	jule::Ptr<_1eedca071_Sema> _85817_sema = _85344_f.get()._field_decl.get()._field_sema;
	jule::Ptr<_1eee3c842_SymbolTable> _86017_old = _85344_f.get()._field_decl.get()._field_sema.get()._field_file;
	__JULE_DEFER({
		_1eedccd10_set_current_file(_85344_f.get()._field_decl.get()._field_sema.ptr(), _86017_old);
	});
	jule::Ptr<_1eee3c842_SymbolTable> _86217_file = _1eedc9515_find_file(_85344_f.get()._field_decl.get()._field_sema.get()._field_files,_85344_f.get()._field_decl.get()._field_token._field_file);
	if ((_86217_file != nullptr)) {
		_1eedccd10_set_current_file(_85344_f.get()._field_decl.get()._field_sema.ptr(), _86217_file);
	}
	jule::I32 _86717_size = _85344_f.get()._field_generics.len();
	if ((_85344_f.get()._field_decl != nullptr) && (_85344_f.get()._field_decl.get()._field_owner != nullptr)) {
		_86717_size+=static_cast<jule::I32>(_85344_f.get()._field_decl.get()._field_owner.get()._field_generics.len());
	}
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _87217_generics = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>::alloc(0LL,_86717_size);
	{
		auto &expr = _85344_f.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_202ccde1c:;
		if (it != expr.end()) {
			jule::I32 _202ccdec7_i = it - expr.begin();
			jule::Ptr<_1eee76b45_TypeKind> _202cce1b4_g = *it;
			{
				_87217_generics = jule::alloc_for_append(_87217_generics,1);_87217_generics.__push(jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1e02c1d07_Token(),_85344_f.get()._field_decl.get()._field_generics[_202ccdec7_i].get()._field_ident,jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_202cce1b4_g)),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>())));
			}
			_iter_next_202ccde1c:;
			++it;
			_202ccdec7_i++;
			goto _iter_begin_202ccde1c;
		}
		_iter_end_202ccde1c:;
	}
	if ((_85344_f.get()._field_decl != nullptr) && (_85344_f.get()._field_decl.get()._field_owner != nullptr)) {
		jule::Ptr<_1ee24550d_StructIns> _88421_owner = _85344_f.get()._field_owner;
		{
			auto &expr = _88421_owner.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_202cceb32:;
			if (it != expr.end()) {
				jule::I32 _202cd0b66_i = it - expr.begin();
				jule::Ptr<_1eee76b45_TypeKind> _202cd0d86_g = *it;
				{
					_87217_generics = jule::alloc_for_append(_87217_generics,1);_87217_generics.__push(jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1e02c1d07_Token(),_88421_owner.get()._field_decl.get()._field_generics[_202cd0b66_i].get()._field_ident,jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_202cd0d86_g)),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>())));
				}
				_iter_next_202cceb32:;
				++it;
				_202cd0b66_i++;
				goto _iter_begin_202cceb32;
			}
			_iter_end_202cceb32:;
		}
	}
	_85357_ok=true;
	{
		auto &expr = _85344_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_202cd26b2:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> _202cd277d_p = *it;
			{
				if (_1ee256398_is_self(_202cd277d_p.get()._field_decl.ptr())) {
					if (_1ee256673_is_ref(_202cd277d_p.get()._field_decl.ptr())) {
						_202cd277d_p.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee80d19_Sptr>(_1eee80d19_Sptr(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_85344_f.get()._field_owner, 0))))), 6)));
					} else {
						_202cd277d_p.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_85344_f.get()._field_owner, 0)));
					}
				} else {
					_202cd277d_p.get()._field_kind=_1eedd2ae5_build_type_with_generics(_85817_sema, _202cd277d_p.get()._field_decl.get()._field_kind.get()._field_decl,_87217_generics);
					if ((_202cd277d_p.get()._field_kind != nullptr)) {
						_202cd277d_p.get()._field_kind.get()._field_variadic=_202cd277d_p.get()._field_decl.get()._field_variadic;
						if (_202cd277d_p.get()._field_decl.get()._field_reference && (!(_1eee8b176_is_valid_for_ref(_202cd277d_p.get()._field_kind)))) {
							_1eedcd2d8_push_err(_self_.ptr(), _202cd277d_p.get()._field_decl.get()._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_202cd277d_p.get()._field_kind.ptr()))}));
						}
					} else {
						_85357_ok=false;
					}
				}
			}
			_iter_next_202cd26b2:;
			++it;
			goto _iter_begin_202cd26b2;
		}
		_iter_end_202cd26b2:;
	}
	if ((!(_1ee257e7c_is_void(_85344_f.get()._field_decl.ptr())))) {
		_85344_f.get()._field_result=_1eedd2ae5_build_type_with_generics(_85817_sema, _85344_f.get()._field_decl.get()._field_result.get()._field_kind.get()._field_decl,_87217_generics);
		_85357_ok=(_85344_f.get()._field_result != nullptr) && _85357_ok;
	}
	if (_85817_sema != _self_) {
		_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_85817_sema.get()._field_errors);
		_85817_sema.get()._field_errors=nullptr;
	}
	return _85357_ok;
}



inline jule::Bool _1eedd6555_check_ref_validity_for_init_expr(jule::Ptr<_1eedca071_Sema> _self_,jule::Bool _93752_left_mut,jule::Ptr<_1eee43b89_Data>& _93773_d,_1e02c1d07_Token& _93788_error_token) {
	{
		auto &_match_expr{ _93773_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_202cdbcb5:;
			{
				goto _match_end_202cdae4b;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24c658_TraitSubIdentExprModel>>()) {
			_case_begin_202cdbd2b:;
			{
				jule::Ptr<_1ee24c658_TraitSubIdentExprModel> _94221_model = _93773_d.get()._field_model.operator jule::Ptr<_1ee24c658_TraitSubIdentExprModel>();
				if ((!(_1eedc7c3e_is_valid_model_for_ref(_94221_model.get()._field_expr)))) {
					_1eedcd2d8_push_err(_self_.ptr(), _93788_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(_94221_model.get()._field_method.get()._field_ident)}));
					return false;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
			_case_begin_202cdb04a:;
			{
				jule::Ptr<_1ee24d060_StructSubIdentExprModel> _94821_model = _93773_d.get()._field_model.operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>();
				if ((!(_1eedc7c3e_is_valid_model_for_ref(_94821_model.get()._field_expr.get()._field_model)))) {
					_1eedcd2d8_push_err(_self_.ptr(), _93788_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(_94821_model.get()._field_field.get()._field_decl.get()._field_ident)}));
					return false;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24dda7_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>>()) {
			_case_begin_202cdb0b1:;
			{
				_1eedcd2d8_push_err(_self_.ptr(), _93788_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
				return false;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248115_UnaryExprModel>>()) {
			_case_begin_202cdb127:;
			{
				jule::Ptr<_1ee248115_UnaryExprModel> _95821_unary = _93773_d.get()._field_model.operator jule::Ptr<_1ee248115_UnaryExprModel>();
				if ((_95821_unary.get()._field_op._field_kind == jule::Str("*", 1))) {
					if ((!(_1eedc7c3e_is_valid_model_for_ref(_93773_d.get()._field_model)))) {
						_1eedcd2d8_push_err(_self_.ptr(), _93788_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(jule::Str("address from * &T", 17))}));
						return false;
					}
					goto _match_end_202cdae4b;
				}
				goto _case_begin_202cdaea1;
			}
		}
		else {
			_case_begin_202cdaea1:;
			{
				_1eedcd2d8_push_err(_self_.ptr(), _93788_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
				return false;
			}
		}
		_match_end_202cdae4b:;
	}
	if (_93752_left_mut && (!(_93773_d.get()._field_mutable))) {
		_1eedcd2d8_push_err(_self_.ptr(), _93788_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
		return false;
	}
	return true;
}



inline jule::Bool _1eedd6cb4_check_validity_for_init_expr(jule::Ptr<_1eedca071_Sema> _self_,jule::Bool _97948_left_mut,jule::Bool _97964_left_ref,jule::Ptr<_1eee76b45_TypeKind>& _98010_left_kind,jule::Ptr<_1eee43b89_Data>& _98037_d,_1e02c1d07_Token& _98052_error_token) {
	if ((_97948_left_mut && (!(_98037_d.get()._field_mutable))) && _1eee782a6_mutable(_98037_d.get()._field_kind.ptr())) {
		_1eedcd2d8_push_err(_self_.ptr(), _98052_error_token,jule::Str("immutable data cannot assign to mutable storage because of @ type which is mutable", 82),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_98037_d.get()._field_kind.ptr()))}));
		return false;
	}
	if (_97964_left_ref) {
		if ((!(_1eedd6555_check_ref_validity_for_init_expr(_self_, _97948_left_mut,_98037_d,_98052_error_token)))) {
			return false;
		}
	}
	jule::Ptr<_1eee2c3ae_AssignTypeChecker> _99117_atc = jule::new_ptr<_1eee2c3ae_AssignTypeChecker>(_1eee2c3ae_AssignTypeChecker(_self_,jule::Ptr<_1eee76b45_TypeKind>(),_98037_d,_98052_error_token));
	return _1eee2cbc8_check_validity(_99117_atc.ptr());
}



inline jule::Bool _1eedd7248_check_type_alias_decl_kind(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eee75baa_TypeAlias>& _99951_ta,jule::Trait<_1eee992c7_Lookup> _99971_l) {
	jule::Bool _99984_ok = jule::Bool();
	jule::Ptr<_1eee3c842_SymbolTable> _100017_old = _self_.get()._field_file;
	__JULE_DEFER({
		_1eedccd10_set_current_file(_self_.ptr(), _100017_old);
	});
	jule::Ptr<_1eee3c842_SymbolTable> _100417_file = _1eedc9515_find_file(_self_.get()._field_files,_99951_ta.get()._field_token._field_file);
	if ((_100417_file != nullptr)) {
		_1eedccd10_set_current_file(_self_.ptr(), _100417_file);
	}
	_99984_ok=_1eedd2188_check_type_with_refers(_self_, _99951_ta.get()._field_kind,_99971_l,jule::new_ptr<_1eee8c760_Referencer>(_1eee8c760_Referencer(_99951_ta.get()._field_ident,jule::Any(jule::Any(_99951_ta)),(&(_99951_ta.get()._field_refers)))));
	if ((_99984_ok && (_1eee79d46_arr(_99951_ta.get()._field_kind.get()._field_kind.ptr()) != nullptr)) && _1eee79d46_arr(_99951_ta.get()._field_kind.get()._field_kind.ptr()).get()._field_auto) {
		_1eedcd2d8_push_err(_self_.ptr(), _99951_ta.get()._field_kind.get()._field_decl.get()._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_99984_ok=false;
	}
	return _99984_ok;
}



inline void _1eedd7633_check_type_alias_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eee75baa_TypeAlias>& _102046_ta,jule::Trait<_1eee992c7_Lookup> _102066_l) {
	if (_1e02c4ada_is_ignore_ident(_102046_ta.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _102046_ta.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	_1eedd7248_check_type_alias_decl_kind(_self_, _102046_ta,_102066_l);
}



inline void _1eedd7996_check_type_alias_decl_dup(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eee75baa_TypeAlias>& _102850_ta) {
	if (_1eedce1c9_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_102850_ta)),_102850_ta.get()._field_ident,_102850_ta.get()._field_cpp_linked)) {
		_1eedcd2d8_push_err(_self_.ptr(), _102850_ta.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_102850_ta.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	_1eedd7248_check_type_alias_decl_kind(_self_, _102850_ta,jule::Trait<_1eee992c7_Lookup>(_self_, 3));
}



inline jule::Bool _1eedd7c60_check_type_alias_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	jule::Bool _103744_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_200ca3333:;
		if (it != expr.end()) {
			jule::Ptr<_1eee75baa_TypeAlias> _200ca33aa_ta = *it;
			{
				_1eedd7996_check_type_alias_decl_dup(_self_, _200ca33aa_ta);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_103744_ok = false;
					return _103744_ok;
				}
			}
			_iter_next_200ca3333:;
			++it;
			goto _iter_begin_200ca3333;
		}
		_iter_end_200ca3333:;
	}
	_103744_ok = true;
	return _103744_ok;
}



inline void _1eedd807e_check_enum_items_dup(_1eedca071_Sema* _self_,jule::Ptr<_1eec889ac_Enum> _104939_e) {
	{
		auto &expr = _104939_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_200ca4ed3:;
		if (it != expr.end()) {
			jule::Ptr<_1eec87d0d_EnumItem> &_200ca509e_item = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_200ca509e_item.get()._field_ident)) {
					_1eedcd2d8_push_err(&(*_self_), _200ca509e_item.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = _104939_e.get()._field_items;
						auto it = expr.begin();
						_iter_begin_200ca6820:;
						if (it != expr.end()) {
							jule::Ptr<_1eec87d0d_EnumItem> &_200ca68ec_citem = *it;
							{
								if (_200ca509e_item == _200ca68ec_citem) {
									goto _iter_end_200ca6820;
								} else if (_200ca509e_item.get()._field_ident == _200ca68ec_citem.get()._field_ident) {
									_1eedcd2d8_push_err(&(*_self_), _200ca509e_item.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200ca509e_item.get()._field_ident)}));
									_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_200ca6820;
								}
							}
							_iter_next_200ca6820:;
							++it;
							goto _iter_begin_200ca6820;
						}
						_iter_end_200ca6820:;
					}
				}
			}
			_iter_next_200ca4ed3:;
			++it;
			goto _iter_begin_200ca4ed3;
		}
		_iter_end_200ca4ed3:;
	}
}



inline void _1eedd839d_check_enum_items_str(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec889ac_Enum>& _106745_e) {
	{
		auto &expr = _106745_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_200ca5467:;
		if (it != expr.end()) {
			jule::Ptr<_1eec87d0d_EnumItem> _200ca8b41_item = *it;
			{
				if (_1eec8825e_auto_expr(_200ca8b41_item.ptr())) {
					_200ca8b41_item.get()._field_value=jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(jule::Ptr<_1e0181a63_Expr>(),jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),static__1eed1eb42_new_str(_200ca8b41_item.get()._field_ident)))));
					_200ca8b41_item.get()._field_value.get()._field_data.get()._field_model=jule::Any(_200ca8b41_item.get()._field_value.get()._field_data.get()._field_constant);
				} else {
					jule::Ptr<_1eee43b89_Data> _107725_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_, jule::Trait<_1eee992c7_Lookup>(_self_, 3)), _200ca8b41_item.get()._field_value.get()._field_expr);
					if ((_107725_d == nullptr)) {
						goto _iter_next_200ca5467;
					}
					if ((!(_1eee44690_is_const(_107725_d.ptr())))) {
						_1eedcd2d8_push_err(_self_.ptr(), _200ca8b41_item.get()._field_value.get()._field_expr.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					_1eedd482d_check_assign_type(_self_, false,_106745_e.get()._field_kind.get()._field_kind,_107725_d,_200ca8b41_item.get()._field_token);
					_200ca8b41_item.get()._field_value.get()._field_data=_107725_d;
				}
			}
			_iter_next_200ca5467:;
			++it;
			goto _iter_begin_200ca5467;
		}
		_iter_end_200ca5467:;
	}
}



inline void _1eedd86bc_check_enum_items_int(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec889ac_Enum>& _109245_e) {
	jule::Ptr<_1eee7bead_Prim> _109313_prim = _1eee791db_prim(_109245_e.get()._field_kind.get()._field_kind.ptr());
	jule::U64 _109417_max = static_cast<jule::U64>(_1eed9ac34_max(_1eee7c387_to_str(_109313_prim.ptr())));
	{
		auto &expr = _109245_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_200cb0593:;
		if (it != expr.end()) {
			jule::I32 _200cb0791_i = it - expr.begin();
			jule::Ptr<_1eec87d0d_EnumItem> _200cb094a_item = *it;
			{
				if ((_109417_max == 0LLU)) {
					_1eedcd2d8_push_err(_self_.ptr(), _200cb094a_item.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_109417_max)--;
				}
				if (_1eec8825e_auto_expr(_200cb094a_item.ptr())) {
					_200cb094a_item.get()._field_value=jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(jule::Ptr<_1e0181a63_Expr>(),jule::new_ptr<_1eee43b89_Data>()));
					{
						
						if (_1eeda194e_is_sig_int(_1eee7c387_to_str(_109313_prim.ptr()))) {
							_case_begin_200cb2d7b:;
							{
								_200cb094a_item.get()._field_value.get()._field_data.get()._field_constant=static__1eed1e46b_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_109417_max - static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_109417_max - static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_200cb0791_i)))))))));
							}
						}
						else {
							_case_begin_200cb28a3:;
							{
								_200cb094a_item.get()._field_value.get()._field_data.get()._field_constant=static__1eed1e5d1_new_u64(static_cast<jule::U64>(_109417_max - static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_109417_max - static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_200cb0791_i))))))));
							}
						}
						_match_end_200cb284d:;
					}
					_200cb094a_item.get()._field_value.get()._field_data.get()._field_model=jule::Any(_200cb094a_item.get()._field_value.get()._field_data.get()._field_constant);
				} else {
					jule::Ptr<_1eee43b89_Data> _111325_d = _1eee65e97_eval_expr(_1eedd41e0_eval(_self_, jule::Trait<_1eee992c7_Lookup>(_self_, 3)), _200cb094a_item.get()._field_value.get()._field_expr);
					if ((_111325_d == nullptr)) {
						goto _iter_next_200cb0593;
					}
					if ((!(_1eee44690_is_const(_111325_d.ptr())))) {
						_1eedcd2d8_push_err(_self_.ptr(), _200cb094a_item.get()._field_value.get()._field_expr.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					_1eedd482d_check_assign_type(_self_, false,_109245_e.get()._field_kind.get()._field_kind,_111325_d,_200cb094a_item.get()._field_token);
					_200cb094a_item.get()._field_value.get()._field_data=_111325_d;
				}
			}
			_iter_next_200cb0593:;
			++it;
			_200cb0791_i++;
			goto _iter_begin_200cb0593;
		}
		_iter_end_200cb0593:;
	}
}



inline void _1eedd89db_check_enum_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec889ac_Enum>& _112840_e) {
	if (_1e02c4ada_is_ignore_ident(_112840_e.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _112840_e.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_1eedce1c9_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_112840_e)),_112840_e.get()._field_ident,false)) {
		_1eedcd2d8_push_err(_self_.ptr(), _112840_e.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_112840_e.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((_112840_e.get()._field_items.len() == 0LL)) {
		_1eedcd2d8_push_err(_self_.ptr(), _112840_e.get()._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>({jule::Any(_112840_e.get()._field_ident)}));
	}
	_1eedd807e_check_enum_items_dup(_self_.ptr(), _112840_e);
	if ((_112840_e.get()._field_kind != nullptr)) {
		if ((!(_1eedd261c_check_type(_self_, _112840_e.get()._field_kind,jule::Trait<_1eee992c7_Lookup>(_self_, 3))))) {
			return;
		}
	} else {
		_112840_e.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5)))));
	}
	jule::Ptr<_1eee7bead_Prim> _115517_t = _1eee791db_prim(_112840_e.get()._field_kind.get()._field_kind.ptr());
	if ((_115517_t == nullptr)) {
		_1eedcd2d8_push_err(_self_.ptr(), _112840_e.get()._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if (_1eee806dc_is_str(_115517_t.ptr())) {
			_case_begin_200cc1384:;
			{
				_1eedd839d_check_enum_items_str(_self_, _112840_e);
			}
		}
		else if (_1eeda20ae_is_int(_1eee7c387_to_str(_115517_t.ptr()))) {
			_case_begin_200cc13ea:;
			{
				_1eedd86bc_check_enum_items_int(_self_, _112840_e);
			}
		}
		else {
			_case_begin_200cbd13e:;
			{
				_1eedcd2d8_push_err(_self_.ptr(), _112840_e.get()._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_200cc05d6:;
	}
}



inline jule::Bool _1eedd8cb6_check_enum_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	jule::Bool _117538_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_enums;
		auto it = expr.begin();
		_iter_begin_200cc3d48:;
		if (it != expr.end()) {
			jule::Ptr<_1eec889ac_Enum> _200cc3dc0_e = *it;
			{
				_1eedd89db_check_enum_decl(_self_, _200cc3dc0_e);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_117538_ok = false;
					return _117538_ok;
				}
			}
			_iter_next_200cc3d48:;
			++it;
			goto _iter_begin_200cc3d48;
		}
		_iter_end_200cc3d48:;
	}
	_117538_ok = true;
	return _117538_ok;
}



inline jule::Bool _1eedd916d_check_decl_generics(_1eedca071_Sema* _self_,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>& _118739_generics) {
	jule::Bool _118772_ok = jule::Bool();
	_118772_ok=true;
	{
		auto &expr = _118739_generics;
		auto it = expr.begin();
		_iter_begin_200cc5c3a:;
		if (it != expr.end()) {
			jule::I32 _200cc6004_i = it - expr.begin();
			jule::Ptr<_1e02d911b_GenericDecl> &_200cc6246_g = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_200cc6246_g.get()._field_ident)) {
					_1eedcd2d8_push_err(&(*_self_), _200cc6246_g.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_118772_ok=false;
					goto _iter_next_200cc5c3a;
				}
				_julec_label_duplication_lookup:;
				{
					auto &expr = _118739_generics;
					auto it = expr.begin();
					_iter_begin_200cc791d:;
					if (it != expr.end()) {
						jule::I32 _200cc79b7_j = it - expr.begin();
						jule::Ptr<_1e02d911b_GenericDecl> &_200cc7c3c_ct = *it;
						{
							{
								
								if (_200cc79b7_j >= _200cc6004_i) {
									_case_begin_200cc8446:;
									{
										goto _iter_end_200cc791d;
									}
								}
								else if (_200cc6246_g.get()._field_ident == _200cc7c3c_ct.get()._field_ident) {
									_case_begin_200cc84bd:;
									{
										_1eedcd2d8_push_err(&(*_self_), _200cc6246_g.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200cc6246_g.get()._field_ident)}));
										_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_118772_ok=false;
										goto _iter_end_200cc791d;
									}
								}
								_match_end_200cc8336:;
							}
						}
						_iter_next_200cc791d:;
						++it;
						_200cc79b7_j++;
						goto _iter_begin_200cc791d;
					}
					_iter_end_200cc791d:;
				}
			}
			_iter_next_200cc5c3a:;
			++it;
			_200cc6004_i++;
			goto _iter_begin_200cc5c3a;
		}
		_iter_end_200cc5c3a:;
	}
	return _118772_ok;
}



inline jule::Bool _1eedd9569_check_fn_decl_params_dup(_1eedca071_Sema* _self_,jule::Ptr<_1ee2579b5_Fn>& _121544_f) {
	jule::Bool _121554_ok = jule::Bool();
	_121554_ok=true;
	_julec_label_check:;
	{
		auto &expr = _121544_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_200ccb8ab:;
		if (it != expr.end()) {
			jule::I32 _200ccbaa9_i = it - expr.begin();
			jule::Ptr<_1ee255b8e_Param> &_200ccbc85_p = *it;
			{
				{
					auto &expr = _121544_f.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_200ccc48e:;
					if (it != expr.end()) {
						jule::Ptr<_1e02d911b_GenericDecl> &_200ccc55a_g = *it;
						{
							if (_200ccbc85_p.get()._field_ident == _200ccc55a_g.get()._field_ident) {
								_121554_ok=false;
								_1eedcd2d8_push_err(&(*_self_), _200ccbc85_p.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200ccbc85_p.get()._field_ident)}));
								_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_200ccb8ab;
							}
						}
						_iter_next_200ccc48e:;
						++it;
						goto _iter_begin_200ccc48e;
					}
					_iter_end_200ccc48e:;
				}
				_julec_label_params_lookup:;
				{
					auto &expr = _121544_f.get()._field_params;
					auto it = expr.begin();
					_iter_begin_200ccccb9:;
					if (it != expr.end()) {
						jule::I32 _200ccc7ad_j = it - expr.begin();
						jule::Ptr<_1ee255b8e_Param> &_200cce66c_jp = *it;
						{
							{
								
								if (_200ccc7ad_j >= _200ccbaa9_i) {
									_case_begin_200cced76:;
									{
										goto _iter_end_200ccccb9;
									}
								}
								else if (_1e02c4de8_is_anon_ident(_200ccbc85_p.get()._field_ident) || _1e02c4de8_is_anon_ident(_200cce66c_jp.get()._field_ident)) {
									_case_begin_200cceded:;
									{
										goto _iter_end_200ccccb9;
									}
								}
								else if (_200ccbc85_p.get()._field_ident == _200cce66c_jp.get()._field_ident) {
									_case_begin_200ccee75:;
									{
										_121554_ok=false;
										_1eedcd2d8_push_err(&(*_self_), _200ccbc85_p.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200ccbc85_p.get()._field_ident)}));
										_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_200ccb8ab;
									}
								}
								_match_end_200ccec55:;
							}
						}
						_iter_next_200ccccb9:;
						++it;
						_200ccc7ad_j++;
						goto _iter_begin_200ccccb9;
					}
					_iter_end_200ccccb9:;
				}
			}
			_iter_next_200ccb8ab:;
			++it;
			_200ccbaa9_i++;
			goto _iter_begin_200ccb8ab;
		}
		_iter_end_200ccb8ab:;
	}
	return _121554_ok;
}



inline jule::Bool _1eedd9954_check_fn_decl_result_dup(_1eedca071_Sema* _self_,jule::Ptr<_1ee2579b5_Fn>& _124944_f) {
	jule::Bool _124954_ok = jule::Bool();
	_124954_ok=true;
	if (_1ee257e7c_is_void(_124944_f.ptr())) {
		return _124954_ok;
	}
	{
		auto &expr = _124944_f.get()._field_result.get()._field_idents;
		auto it = expr.begin();
		_iter_begin_200cd3819:;
		if (it != expr.end()) {
			jule::I32 _200cd3eac_i = it - expr.begin();
			_1e02c1d07_Token &_200cd41ee_v = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_200cd41ee_v._field_kind) || _1e02c4de8_is_anon_ident(_200cd41ee_v._field_kind)) {
					goto _iter_next_200cd3819;
				}
				{
					auto &expr = _124944_f.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_200cd5178:;
					if (it != expr.end()) {
						jule::Ptr<_1e02d911b_GenericDecl> &_200cd54a8_g = *it;
						{
							if (_200cd41ee_v._field_kind == _200cd54a8_g.get()._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_200cd5178:;
						++it;
						goto _iter_begin_200cd5178;
					}
					_iter_end_200cd5178:;
				}
				{
					auto &expr = _124944_f.get()._field_params;
					auto it = expr.begin();
					_iter_begin_200cd6520:;
					if (it != expr.end()) {
						jule::Ptr<_1ee255b8e_Param> &_200cd6652_p = *it;
						{
							if (_200cd41ee_v._field_kind == _200cd6652_p.get()._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_200cd6520:;
						++it;
						goto _iter_begin_200cd6520;
					}
					_iter_end_200cd6520:;
				}
				_julec_label_itself_lookup:;
				{
					auto &expr = _124944_f.get()._field_result.get()._field_idents;
					auto it = expr.begin();
					_iter_begin_200cd77a7:;
					if (it != expr.end()) {
						jule::I32 _200cd78a6_j = it - expr.begin();
						_1e02c1d07_Token &_200cd7ae8_jv = *it;
						{
							{
								
								if (_200cd78a6_j >= _200cd3eac_i) {
									_case_begin_200cd82ad:;
									{
										goto _iter_end_200cd77a7;
									}
								}
								else if (_200cd7ae8_jv._field_kind == _200cd41ee_v._field_kind) {
									_case_begin_200cd8335:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_200cd819d:;
							}
						}
						_iter_next_200cd77a7:;
						++it;
						_200cd78a6_j++;
						goto _iter_begin_200cd77a7;
					}
					_iter_end_200cd77a7:;
				}
				goto _iter_next_200cd3819;
				_julec_label_exist:;
				_1eedcd2d8_push_err(&(*_self_), _200cd41ee_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200cd41ee_v._field_kind)}));
				_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_124954_ok=false;
			}
			_iter_next_200cd3819:;
			++it;
			_200cd3eac_i++;
			goto _iter_begin_200cd3819;
		}
		_iter_end_200cd3819:;
	}
	return _124954_ok;
}



inline void _1eedd9c62_check_fn_decl_types(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _129444_f) {
	jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>> _129517_generics = _129444_f.get()._field_generics;
	if ((_129444_f.get()._field_owner != nullptr) && (_129444_f.get()._field_owner.get()._field_generics.len() != 0LL)) {
		_129517_generics=jule::append(_129517_generics,_129444_f.get()._field_owner.get()._field_generics);
	}
	{
		auto &expr = _129444_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_200cdcc74:;
		if (it != expr.end()) {
			jule::Ptr<_1ee255b8e_Param> _200cdcd84_p = *it;
			{
				if ((!(_1ee256398_is_self(_200cdcd84_p.ptr())))) {
					jule::Ptr<_1eee76b45_TypeKind> _130225_kind = _1eedd539a_build_non_generic_type_kind(_self_, _200cdcd84_p.get()._field_kind.get()._field_decl,_129517_generics);
					_200cdcd84_p.get()._field_kind.get()._field_kind=_130225_kind;
				}
			}
			_iter_next_200cdcc74:;
			++it;
			goto _iter_begin_200cdcc74;
		}
		_iter_end_200cdcc74:;
	}
	if ((!(_1ee257e7c_is_void(_129444_f.ptr())))) {
		jule::Ptr<_1eee76b45_TypeKind> _130821_kind = _1eedd539a_build_non_generic_type_kind(_self_, _129444_f.get()._field_result.get()._field_kind.get()._field_decl,_129517_generics);
		_129444_f.get()._field_result.get()._field_kind.get()._field_kind=_130821_kind;
	}
}



inline void _1eedda0c5_check_fn_decl_prototype(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _131548_f) {
	if (_131548_f.get()._field_exceptional && _131548_f.get()._field_cpp_linked) {
		_1eedcd2d8_push_err(_self_.ptr(), _131548_f.get()._field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		return;
	}
	if (_131548_f.get()._field_exceptional) {
		if (_1ee258532_is_entry_point(_131548_f.ptr())) {
			_1eedcd2d8_push_err(_self_.ptr(), _131548_f.get()._field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if (_1ee25880c_is_init(_131548_f.ptr())) {
			_1eedcd2d8_push_err(_self_.ptr(), _131548_f.get()._field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		}
	}
	{
		
		if ((!(_1eedd916d_check_decl_generics(_self_.ptr(), _131548_f.get()._field_generics)))) {
			_case_begin_200ce23d8:;
		}
		else if ((!(_1eedd9569_check_fn_decl_params_dup(_self_.ptr(), _131548_f)))) {
			_case_begin_200ce3e23:;
		}
		else if ((!(_1eedd9954_check_fn_decl_result_dup(_self_.ptr(), _131548_f)))) {
			_case_begin_200ce3e89:;
		}
		_match_end_200ce22b7:;
	}
	_1eedd9c62_check_fn_decl_types(_self_, _131548_f);
}



inline void _1eedda427_check_trait_decl_method(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _133848_f) {
	if (_1e02c4ada_is_ignore_ident(_133848_f.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _133848_f.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	_1eedda0c5_check_fn_decl_prototype(_self_, _133848_f);
	_133848_f.get()._field_sema=_self_;
}



inline void _1eedda779_check_trait_decl_methods(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec8627e_Trait>& _134749_t) {
	{
		auto &expr = _134749_t.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_200ce8455:;
		if (it != expr.end()) {
			jule::I32 _200ce8521_i = it - expr.begin();
			jule::Ptr<_1ee2579b5_Fn> _200ce86db_f = *it;
			{
				_1eedda427_check_trait_decl_method(_self_, _200ce86db_f);
				_134749_t.get()._field_mutable=_134749_t.get()._field_mutable || _200ce86db_f.get()._field_params[0LL].get()._field_mutable;
				if ((_self_.get()._field_errors.len() > 0LL)) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto &expr = _134749_t.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_200cea666:;
					if (it != expr.end()) {
						jule::I32 _200cea732_j = it - expr.begin();
						jule::Ptr<_1ee2579b5_Fn> _200cea8ec_jf = *it;
						{
							{
								
								if (_200cea732_j >= _200ce8521_i) {
									_case_begin_200ceb0b2:;
									{
										goto _iter_end_200cea666;
									}
								}
								else if (_200ce86db_f.get()._field_ident == _200cea8ec_jf.get()._field_ident) {
									_case_begin_200ceb139:;
									{
										_1eedcd2d8_push_err(_self_.ptr(), _200ce86db_f.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200ce86db_f.get()._field_ident)}));
										_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_200cea666;
									}
								}
								_match_end_200ceaea2:;
							}
						}
						_iter_next_200cea666:;
						++it;
						_200cea732_j++;
						goto _iter_begin_200cea666;
					}
					_iter_end_200cea666:;
				}
			}
			_iter_next_200ce8455:;
			++it;
			_200ce8521_i++;
			goto _iter_begin_200ce8455;
		}
		_iter_end_200ce8455:;
	}
}



inline void _1eeddaa87_check_trait_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec8627e_Trait>& _137841_t) {
	if (_1e02c4ada_is_ignore_ident(_137841_t.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _137841_t.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_1eedce1c9_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_137841_t)),_137841_t.get()._field_ident,false)) {
		_1eedcd2d8_push_err(_self_.ptr(), _137841_t.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_137841_t.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	_1eedda779_check_trait_decl_methods(_self_, _137841_t);
}



inline jule::Bool _1eeddad62_check_trait_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	jule::Bool _139039_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_traits;
		auto it = expr.begin();
		_iter_begin_200d022a5:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> _200d0232c_t = *it;
			{
				_1eeddaa87_check_trait_decl(_self_, _200d0232c_t);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_139039_ok = false;
					return _139039_ok;
				}
			}
			_iter_next_200d022a5:;
			++it;
			goto _iter_begin_200d022a5;
		}
		_iter_end_200d022a5:;
	}
	_139039_ok = true;
	return _139039_ok;
}



inline jule::Bool _1eeddb33a_check_trait_impl_methods(_1eedca071_Sema* _self_,jule::Ptr<_1eec8627e_Trait>& _140248_base,jule::Ptr<_1eec8a4d6_Impl>& _140263_ipl) {
	jule::Bool _140277_ok = jule::Bool();
	_140277_ok=true;
	{
		auto &expr = _140263_ipl.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_200d04472:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> &_200d04906_f = *it;
			{
				if ((_1eec872e6_find_method(_140248_base.ptr(), _200d04906_f.get()._field_ident) == nullptr)) {
					_1eedcd2d8_push_err(&(*_self_), _200d04906_f.get()._field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>({jule::Any(_140248_base.get()._field_ident),jule::Any(_200d04906_f.get()._field_ident)}));
					_140277_ok=false;
				}
			}
			_iter_next_200d04472:;
			++it;
			goto _iter_begin_200d04472;
		}
		_iter_end_200d04472:;
	}
	return _140277_ok;
}



inline jule::Bool _1eeddb7ad_impl_to_struct(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _141339_dest,jule::Ptr<_1eec8a4d6_Impl>& _141359_ipl) {
	jule::Bool _141373_ok = jule::Bool();
	_141373_ok=true;
	{
		auto &expr = _141359_ipl.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_200d074a8:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _200d0793c_f = *it;
			{
				if ((_1ee242d13_find_method(_141339_dest.ptr(), _200d0793c_f.get()._field_ident,_200d0793c_f.get()._field_statically) != nullptr) || (_1ee243572_find_field(_141339_dest.ptr(), _200d0793c_f.get()._field_ident) != nullptr)) {
					_1eedcd2d8_push_err(_self_.ptr(), _200d0793c_f.get()._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any(_141339_dest.get()._field_ident),jule::Any(_200d0793c_f.get()._field_ident)}));
					_141373_ok=false;
					goto _iter_next_200d074a8;
				}
				if ((_141339_dest.get()._field_generics.len() > 0LL) && (_200d0793c_f.get()._field_generics.len() > 0LL)) {
					{
						auto &expr = _200d0793c_f.get()._field_generics;
						auto it = expr.begin();
						_iter_begin_200d0a6ba:;
						if (it != expr.end()) {
							jule::Ptr<_1e02d911b_GenericDecl> _200d0a786_fg = *it;
							{
								{
									auto &expr = _141339_dest.get()._field_generics;
									auto it = expr.begin();
									_iter_begin_200d0ae29:;
									if (it != expr.end()) {
										jule::Ptr<_1e02d911b_GenericDecl> _200d0aee5_dg = *it;
										{
											if (_200d0a786_fg.get()._field_ident == _200d0aee5_dg.get()._field_ident) {
												_1eedcd2d8_push_err(_self_.ptr(), _200d0a786_fg.get()._field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_141373_ok=false;
											}
										}
										_iter_next_200d0ae29:;
										++it;
										goto _iter_begin_200d0ae29;
									}
									_iter_end_200d0ae29:;
								}
							}
							_iter_next_200d0a6ba:;
							++it;
							goto _iter_begin_200d0a6ba;
						}
						_iter_end_200d0a6ba:;
					}
				}
				_1eedce5c5_check_directives(_self_, _200d0793c_f.get()._field_directives,jule::Any(_200d0793c_f));
				_200d0793c_f.get()._field_sema=_self_;
				_200d0793c_f.get()._field_owner=_141339_dest;
				_141339_dest.get()._field_methods = jule::alloc_for_append(_141339_dest.get()._field_methods,1);_141339_dest.get()._field_methods.__push(_200d0793c_f);
			}
			_iter_next_200d074a8:;
			++it;
			goto _iter_begin_200d074a8;
		}
		_iter_end_200d074a8:;
	}
	{
		auto &expr = _141359_ipl.get()._field_statics;
		auto it = expr.begin();
		_iter_begin_200d07a5d:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _200d07aa2_v = *it;
			{
				
				if ((_1ee242d13_find_method(_141339_dest.ptr(), _200d07aa2_v.get()._field_ident,true) != nullptr) || (_1ee2431ba_find_static(_141339_dest.ptr(), _200d07aa2_v.get()._field_ident) != nullptr)) {
					_1eedcd2d8_push_err(_self_.ptr(), _200d07aa2_v.get()._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any(_141339_dest.get()._field_ident),jule::Any(_200d07aa2_v.get()._field_ident)}));
					_141373_ok=false;
					goto _iter_next_200d07a5d;
				}
				_1eeddc616_check_var_decl(_self_, _200d07aa2_v,jule::Trait<_1eee992c7_Lookup>(_self_, 3));
				_1eede2770_check_type_var(_self_, _200d07aa2_v,jule::Trait<_1eee992c7_Lookup>(_self_, 3));
				_141339_dest.get()._field_statics = jule::alloc_for_append(_141339_dest.get()._field_statics,1);_141339_dest.get()._field_statics.__push(_200d07aa2_v);
			}
			_iter_next_200d07a5d:;
			++it;
			goto _iter_begin_200d07a5d;
		}
		_iter_end_200d07a5d:;
	}
	return _141373_ok;
}



inline void _1eeddbacc_impl_trait(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec8a4d6_Impl>& _145835_decl) {
	jule::Ptr<_1eee76b45_TypeKind> _145917_base_t = _1eedd3343_select_type(_self_, _145835_decl.get()._field_base);
	if ((_145917_base_t == nullptr)) {
		return;
	}
	jule::Ptr<_1eec8627e_Trait> _146317_base = _1eee7a9a1_trt(_145917_base_t.ptr());
	if ((_146317_base == nullptr)) {
		_1eedcd2d8_push_err(_self_.ptr(), _145835_decl.get()._field_base.get()._field_token,jule::Str("invalid base type for impl: @", 29),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_145917_base_t.ptr()))}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("expected trait, use a trait", 27),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1eee76b45_TypeKind> _147017_dest_t = _1eedd3343_select_type(_self_, _145835_decl.get()._field_dest);
	if ((_147017_dest_t == nullptr)) {
		return;
	}
	jule::Ptr<_1ee24550d_StructIns> _147417_dest_s = _1eee7a6c6_strct(_147017_dest_t.ptr());
	if ((_147417_dest_s == nullptr)) {
		_1eedcd2d8_push_err(_self_.ptr(), _145835_decl.get()._field_dest.get()._field_token,jule::Str("invalid destination type for impl: @", 36),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_147017_dest_t.ptr()))}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ee242032_Struct> _148117_dest = _147417_dest_s.get()._field_decl;
	if (_1e02c89bd_dir(_148117_dest.get()._field_token._field_file.ptr()) != _1e02c89bd_dir(_self_.get()._field_file.get()._field_file.ptr())) {
		_1eedcd2d8_push_err(_self_.ptr(), _145835_decl.get()._field_dest.get()._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	_146317_base.get()._field_implemented = jule::alloc_for_append(_146317_base.get()._field_implemented,1);_146317_base.get()._field_implemented.__push(_148117_dest);
	_148117_dest.get()._field_implements = jule::alloc_for_append(_148117_dest.get()._field_implements,1);_148117_dest.get()._field_implements.__push(_146317_base);
	if ((_145835_decl.get()._field_statics.len() > 0LL)) {
		_1eedcd2d8_push_err(_self_.ptr(), _145835_decl.get()._field_statics[0LL].get()._field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	}
	{
		
		if ((!(_1eeddb33a_check_trait_impl_methods(_self_.ptr(), _146317_base,_145835_decl)))) {
			_case_begin_200d1b7a8:;
			{
				return;
			}
		}
		else if ((!(_1eeddb7ad_impl_to_struct(_self_, _148117_dest,_145835_decl)))) {
			_case_begin_200d1ba94:;
			{
				return;
			}
		}
		_match_end_200d193bb:;
	}
}



inline void _1eeddbdeb_impl_struct(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec8a4d6_Impl>& _150136_decl) {
	jule::Ptr<_1eee76b45_TypeKind> _150217_dest_t = _1eedd3343_select_type(_self_, _150136_decl.get()._field_dest);
	if ((_150217_dest_t == nullptr)) {
		return;
	}
	jule::Ptr<_1ee24550d_StructIns> _150617_dest_s = _1eee7a6c6_strct(_150217_dest_t.ptr());
	if ((_150617_dest_s == nullptr)) {
		_1eedcd2d8_push_err(_self_.ptr(), _150136_decl.get()._field_dest.get()._field_token,jule::Str("invalid destination type for impl: @", 36),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_150217_dest_t.ptr()))}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ee242032_Struct> _151317_dest = _150617_dest_s.get()._field_decl;
	if (_1e02c89bd_dir(_151317_dest.get()._field_token._field_file.ptr()) != _1e02c89bd_dir(_self_.get()._field_file.get()._field_file.ptr())) {
		_1eedcd2d8_push_err(_self_.ptr(), _150136_decl.get()._field_dest.get()._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((!(_1eeddb7ad_impl_to_struct(_self_, _151317_dest,_150136_decl)))) {
			_case_begin_200d21e62:;
			{
				return;
			}
		}
		_match_end_200d224c3:;
	}
}



inline void _1eeddc21a_impl_impl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eec8a4d6_Impl>& _152634_decl) {
	{
		
		if (_1eec8a915_is_trait_impl(_152634_decl.ptr())) {
			_case_begin_200d2398b:;
			{
				_1eeddbacc_impl_trait(_self_, _152634_decl);
			}
		}
		else if (_1eec8abe0_is_struct_impl(_152634_decl.ptr())) {
			_case_begin_200d23a13:;
			{
				_1eeddbdeb_impl_struct(_self_, _152634_decl);
			}
		}
		_match_end_200d2389d:;
	}
}



inline void _1eeddc616_check_var_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eedeb24b_Var>& _153739_decl,jule::Trait<_1eee992c7_Lookup> _153755_l) {
	if (_1e02c4ada_is_ignore_ident(_153739_decl.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _153739_decl.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	if (_1eedeb944_is_type_inferred(_153739_decl.ptr())) {
		if ((!(_1eedeb669_is_initialized(_153739_decl.ptr())))) {
			_1eedcd2d8_push_err(_self_.ptr(), _153739_decl.get()._field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		}
	} else {
		_1eedd261c_check_type(_self_, _153739_decl.get()._field_kind,_153755_l);
	}
	if (_153739_decl.get()._field_constant && _153739_decl.get()._field_reference) {
		_1eedcd2d8_push_err(_self_.ptr(), _153739_decl.get()._field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	}
	if ((!(_1eedeb669_is_initialized(_153739_decl.ptr())))) {
		if (_153739_decl.get()._field_constant) {
			_1eedcd2d8_push_err(_self_.ptr(), _153739_decl.get()._field_token,jule::Str("missing expression for constant variable initialization", 55),jule::Slice<jule::Any>());
		}
		if (_153739_decl.get()._field_statically) {
			_1eedcd2d8_push_err(_self_.ptr(), _153739_decl.get()._field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		}
		if (_153739_decl.get()._field_reference) {
			_1eedcd2d8_push_err(_self_.ptr(), _153739_decl.get()._field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		}
	}
}



inline void _1eeddc935_check_global_var_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eedeb24b_Var>& _157146_decl) {
	if (_1eedce1c9_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_157146_decl)),_157146_decl.get()._field_ident,_157146_decl.get()._field_cpp_linked)) {
		_1eedcd2d8_push_err(_self_.ptr(), _157146_decl.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_157146_decl.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if (_157146_decl.get()._field_cpp_linked && _157146_decl.get()._field_constant) {
		_1eedcd2d8_push_err(_self_.ptr(), _157146_decl.get()._field_token,jule::Str("cpp linked variables cannot be constant", 39),jule::Slice<jule::Any>());
	}
	if (((!(_157146_decl.get()._field_cpp_linked)) && (!(_157146_decl.get()._field_constant))) && (!(_157146_decl.get()._field_statically))) {
		_1eedcd2d8_push_err(_self_.ptr(), _157146_decl.get()._field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	}
	_1eedce5c5_check_directives(_self_, _157146_decl.get()._field_directives,jule::Any(_157146_decl));
	_1eeddc616_check_var_decl(_self_, _157146_decl,jule::Trait<_1eee992c7_Lookup>(_self_, 3));
}



inline jule::Bool _1eeddcc10_check_global_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	jule::Bool _159040_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_202cea3ab:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _202cea433_decl = *it;
			{
				_1eeddc935_check_global_var_decl(_self_, _202cea433_decl);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_159040_ok = false;
					return _159040_ok;
				}
			}
			_iter_next_202cea3ab:;
			++it;
			goto _iter_begin_202cea3ab;
		}
		_iter_end_202cea3ab:;
	}
	_159040_ok = true;
	return _159040_ok;
}



inline jule::Bool _1eeddd1d8_check_struct_trait_impl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _160248_strct,jule::Ptr<_1eec8627e_Trait>& _160269_trt) {
	jule::Bool _160284_ok = jule::Bool();
	{
		auto &expr = _160269_trt.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_202ae103c:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _1ee6bd9db_tf = *it;
			{
				jule::Bool _160421_exist = false;
				jule::Ptr<_1ee2579b5_Fn> _160521_sf = _1ee242d13_find_method(_160248_strct.ptr(), _1ee6bd9db_tf.get()._field_ident,_1ee6bd9db_tf.get()._field_statically);
				jule::Ptr<_1ee25b4ad_FnIns> _160617_tf_k = _1eedd5ad7_get_trait_check_fn_kind(_self_, _1ee6bd9db_tf);
				if ((_160521_sf != nullptr)) {
					jule::Ptr<_1ee25b4ad_FnIns> _160825_sf_k = _1eedd5ad7_get_trait_check_fn_kind(_self_, _160521_sf);
					_160421_exist=((_160617_tf_k.get()._field_decl.get()._field_public == _160825_sf_k.get()._field_decl.get()._field_public) && (_160617_tf_k.get()._field_decl.get()._field_ident == _160825_sf_k.get()._field_decl.get()._field_ident)) && _1ee25bc3e_equals(_160617_tf_k, jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_160825_sf_k, 1))));
				}
				if (_160421_exist) {
					jule::Ptr<_1e02812b1_Directive> _161621_d = _1eee704ce_find_directive(_160521_sf.get()._field_directives,jule::Str("deprecated", 10));
					if ((_161621_d != nullptr)) {
						_1eedcd2d8_push_err(_self_.ptr(), _161621_d.get()._field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					}
					_160284_ok=false;
				} else {
					
					jule::Str _162325_s = _1ee25cb74_get_kind_str(_160617_tf_k.ptr(), true);
					if (_1ee6bd9db_tf.get()._field_public) {
						(_162325_s).buffer.insert(0, (jule::Str("pub ", 4)));
					}
					_1eedcd2d8_push_err(_self_.ptr(), _160248_strct.get()._field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>({jule::Any(_160269_trt.get()._field_ident),jule::Any(_162325_s)}));
					_160284_ok=false;
				}
			}
			_iter_next_202ae103c:;
			++it;
			goto _iter_begin_202ae103c;
		}
		_iter_end_202ae103c:;
	}
	return _160284_ok;
}



inline jule::Bool _1eeddd57e_check_struct_impls(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _163443_s) {
	jule::Bool _163457_ok = jule::Bool();
	_163457_ok=true;
	{
		auto &expr = _163443_s.get()._field_implements;
		auto it = expr.begin();
		_iter_begin_200d30bc9:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> _200d31070_trt = *it;
			{
				_163457_ok=_1eeddd1d8_check_struct_trait_impl(_self_, _163443_s,_200d31070_trt) && _163457_ok;
			}
			_iter_next_200d30bc9:;
			++it;
			goto _iter_begin_200d30bc9;
		}
		_iter_end_200d30bc9:;
	}
	return _163457_ok;
}



inline jule::Bool _1eeddd936_check_struct_fields(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _164244_st) {
	jule::Bool _164259_ok = jule::Bool();
	_164259_ok=true;
	jule::Ptr<_1eee8d6a6_TypeChecker> _164517_tc = jule::new_ptr<_1eee8d6a6_TypeChecker>(_1eee8d6a6_TypeChecker(_self_,jule::Trait<_1eee992c7_Lookup>(_self_, 3),jule::new_ptr<_1eee8c760_Referencer>(_1eee8c760_Referencer(_164244_st.get()._field_ident,jule::Any(jule::Any(_164244_st)),nullptr)),_1e02c1d07_Token(),_164244_st.get()._field_generics,jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool()));
	jule::I32 _165513_n = _164244_st.get()._field_instances.len();
	{
		auto &expr = _164244_st.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_200d329ab:;
		if (it != expr.end()) {
			jule::Ptr<_1ee23da34_Field> _200d33dec_f = *it;
			{
				_200d33dec_f.get()._field_owner=_164244_st;
				_200d33dec_f.get()._field_kind.get()._field_kind=_1eee963a1_check_decl(_164517_tc.ptr(), _200d33dec_f.get()._field_kind.get()._field_decl);
				_164259_ok=(_200d33dec_f.get()._field_kind.get()._field_kind != nullptr) && _164259_ok;
				{
					auto &expr = _164244_st.get()._field_fields;
					auto it = expr.begin();
					_iter_begin_200d3596a:;
					if (it != expr.end()) {
						jule::Ptr<_1ee23da34_Field> _200d35a58_cf = *it;
						{
							if (_200d33dec_f == _200d35a58_cf) {
								goto _iter_end_200d3596a;
							} else if (_200d33dec_f.get()._field_ident == _200d35a58_cf.get()._field_ident) {
								_1eedcd2d8_push_err(_self_.ptr(), _200d33dec_f.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_200d33dec_f.get()._field_ident)}));
								_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_164259_ok=false;
							}
						}
						_iter_next_200d3596a:;
						++it;
						goto _iter_begin_200d3596a;
					}
					_iter_end_200d3596a:;
				}
			}
			_iter_next_200d329ab:;
			++it;
			goto _iter_begin_200d329ab;
		}
		_iter_end_200d329ab:;
	}
	if (_164259_ok && (_165513_n != static_cast<jule::I32>(static_cast<jule::I32>(_164244_st.get()._field_instances.len())))) {
		_164517_tc.get()._field_referencer=nullptr;
		_164244_st.get()._field_instances=_164244_st.get()._field_instances.slice(0LL,_165513_n);
		{
			auto &expr = _164244_st.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_200d35e21:;
			if (it != expr.end()) {
				jule::Ptr<_1ee23da34_Field> _200d383c9_f = *it;
				{
					_200d383c9_f.get()._field_kind.get()._field_kind=_1eee963a1_check_decl(_164517_tc.ptr(), _200d383c9_f.get()._field_kind.get()._field_decl);
				}
				_iter_next_200d35e21:;
				++it;
				goto _iter_begin_200d35e21;
			}
			_iter_end_200d35e21:;
		}
	}
	return _164259_ok;
}



inline jule::Bool _1eedddd32_check_struct_decl_methods(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _168450_s) {
	jule::Bool _168464_ok = jule::Bool();
	{
		auto &expr = _168450_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_200d3a3ed:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _200d3a4b9_m = *it;
			{
				_1eedd9c62_check_fn_decl_types(_self_, _200d3a4b9_m);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_168464_ok = false;
					return _168464_ok;
				}
			}
			_iter_next_200d3a3ed:;
			++it;
			goto _iter_begin_200d3a3ed;
		}
		_iter_end_200d3a3ed:;
	}
	_168464_ok = true;
	return _168464_ok;
}



inline void _1eedde140_check_struct_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _169442_s) {
	if (_1e02c4ada_is_ignore_ident(_169442_s.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _169442_s.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_1eedce1c9_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_169442_s)),_169442_s.get()._field_ident,_169442_s.get()._field_cpp_linked)) {
		_1eedcd2d8_push_err(_self_.ptr(), _169442_s.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_169442_s.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	_1eedce5c5_check_directives(_self_, _169442_s.get()._field_directives,jule::Any(_169442_s));
	_169442_s.get()._field_sema=_self_;
	{
		
		if ((!(_1eedd916d_check_decl_generics(_self_.ptr(), _169442_s.get()._field_generics)))) {
			_case_begin_200d40216:;
		}
		else if ((!(_1eeddd936_check_struct_fields(_self_, _169442_s)))) {
			_case_begin_200d4028d:;
		}
		else if ((!(_1eedddd32_check_struct_decl_methods(_self_, _169442_s)))) {
			_case_begin_200d40315:;
		}
		else if ((!(_1eeddd57e_check_struct_impls(_self_, _169442_s)))) {
			_case_begin_200d4038c:;
		}
		_match_end_200d401b1:;
	}
}



inline jule::Bool _1eedde41a_check_struct_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	jule::Bool _171440_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_200d42977:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _200d429ee_s = *it;
			{
				_1eedde140_check_struct_decl(_self_, _200d429ee_s);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_171440_ok = false;
					return _171440_ok;
				}
			}
			_iter_next_200d42977:;
			++it;
			goto _iter_begin_200d42977;
		}
		_iter_end_200d42977:;
	}
	_171440_ok = true;
	return _171440_ok;
}



inline void _1eedde739_check_fn_decl(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _172738_f) {
	if (_1e02c4ada_is_ignore_ident(_172738_f.get()._field_ident)) {
		_1eedcd2d8_push_err(_self_.ptr(), _172738_f.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	_1eedce5c5_check_directives(_self_, _172738_f.get()._field_directives,jule::Any(_172738_f));
	_172738_f.get()._field_sema=_self_;
	_1eedda0c5_check_fn_decl_prototype(_self_, _172738_f);
	if (_1eedce1c9_is_duplicated_ident(_self_.ptr(), static_cast<jule::U32>(static_cast<jule::U32>(_172738_f)),_172738_f.get()._field_ident,_172738_f.get()._field_cpp_linked)) {
		if ((_172738_f.get()._field_ident == jule::Str("init", 4))) {
			jule::Ptr<_1ee2579b5_Fn> _173921_init = _1eedcbd0e_find_fn(_self_.ptr(), jule::Str("init", 4),false);
			if ((_173921_init != nullptr)) {
				return;
			}
		}
		_1eedcd2d8_push_err(_self_.ptr(), _172738_f.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_172738_f.get()._field_ident)}));
		_1eedcd6d4_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _1eeddea14_check_fn_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	jule::Bool _175036_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_200d4995c:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _200d499d4_f = *it;
			{
				_1eedde739_check_fn_decl(_self_, _200d499d4_f);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_175036_ok = false;
					return _175036_ok;
				}
			}
			_iter_next_200d4995c:;
			++it;
			goto _iter_begin_200d4995c;
		}
		_iter_end_200d4995c:;
	}
	_175036_ok = true;
	return _175036_ok;
}



inline void _1eeddeedc_push_cycle_error(_1eedca071_Sema* _self_,jule::Ptr<_1ee242032_Struct>& _176232_st1,jule::Ptr<_1ee242032_Struct>& _176247_st2,jule::Str& _176266_message) {
	
	jule::Str _176513_refers_to = _208de2722_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_176232_st1.get()._field_ident),jule::Any(_176247_st2.get()._field_ident)}));
	(_176266_message).buffer.insert(0, (((_208bde08a_repeat(jule::Str(" ", 1),4LL) + _176513_refers_to) + jule::Str("\n", 1))));
}



inline jule::Bool _1eede054d_check_cross_cycle(_1eedca071_Sema* _self_,jule::Ptr<_1ee242032_Struct>& _176933_st1,jule::Ptr<_1ee242032_Struct>& _176948_st2,jule::Str& _176967_message) {
	{
		auto &expr = _176948_st2.get()._field_uses;
		auto it = expr.begin();
		_iter_begin_200d4e3ac:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> &_200d4e4ab_u = *it;
			{
				if (_200d4e4ab_u == _176933_st1) {
					_1eeddeedc_push_cycle_error(&(*_self_), _176948_st2,_200d4e4ab_u,_176967_message);
					return false;
				}
				if ((!(_1eede054d_check_cross_cycle(&(*_self_), _176933_st1,_200d4e4ab_u,_176967_message)))) {
					_1eeddeedc_push_cycle_error(&(*_self_), _176948_st2,_200d4e4ab_u,_176967_message);
					return false;
				}
			}
			_iter_next_200d4e3ac:;
			++it;
			goto _iter_begin_200d4e3ac;
		}
		_iter_end_200d4e3ac:;
	}
	return true;
}



inline jule::Bool _1eede0b25_check_struct_derive_illegal_cycles(_1eedca071_Sema* _self_,jule::Str _178553_derive,jule::Ptr<_1ee242032_Struct>& _178567_st1,jule::Ptr<_1eee76b45_TypeKind>& _178586_k) {
	jule::Bool _1785102_ok = jule::Bool();
	jule::Ptr<_1ee242032_Struct> _178617_st2 = _1eee8beac_get_struct_from_kind(_178586_k);
	if ((_178617_st2 == nullptr)) {
		_1785102_ok = true;
		return _1785102_ok;
	}
	if (_178567_st1 == _178617_st2) {
		_1eedcd2d8_push_err(&(*_self_), _178567_st1.get()._field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>({jule::Any(_178553_derive),jule::Any(_178567_st1.get()._field_ident)}));
		_1785102_ok = false;
		return _1785102_ok;
	}
	jule::Str _179817_message = jule::Str();
	if ((!(_1eede054d_check_cross_cycle(&(*_self_), _178567_st1,_178617_st2,_179817_message)))) {
		jule::Str _180121_err_msg = _179817_message;
		_179817_message=jule::Str();
		_1eeddeedc_push_cycle_error(&(*_self_), _178567_st1,_178617_st2,_179817_message);
		_180121_err_msg=_180121_err_msg + _179817_message;
		_1eedcd2d8_push_err(&(*_self_), _178567_st1.get()._field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>({jule::Any(_178553_derive),jule::Any(_180121_err_msg)}));
		_1785102_ok = false;
		return _1785102_ok;
	}
	_1785102_ok = true;
	return _1785102_ok;
}



inline jule::Bool _1eede0edd_check_struct_ins_derive_clone(_1eedca071_Sema* _self_,jule::Ptr<_1ee24550d_StructIns> _181252_st) {
	jule::Bool _181270_ok = jule::Bool();
	if ((!(_1ee243cd1_is_derives(_181252_st.get()._field_decl.ptr(), jule::Str("Clone", 5))))) {
		_181270_ok = true;
		return _181270_ok;
	}
	{
		auto &expr = _181252_st.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_202db7852:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2449b3_FieldIns> _202db7c1a_f = *it;
			{
				if ((_202db7c1a_f.get()._field_kind == nullptr)) {
					goto _iter_next_202db7852;
				}
				if ((!(_1eee78b36_supports_cloning(_202db7c1a_f.get()._field_kind.ptr())))) {
					_1eedcd2d8_push_err(&(*_self_), _181252_st.get()._field_decl.get()._field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_202db7c1a_f.get()._field_kind.ptr())),jule::Any(jule::Str("Clone", 5))}));
					_181270_ok = false;
					return _181270_ok;
				}
				if ((!(_1eede0b25_check_struct_derive_illegal_cycles(&(*_self_), jule::Str("Clone", 5),_181252_st.get()._field_decl,_202db7c1a_f.get()._field_kind)))) {
					_181270_ok = false;
					return _181270_ok;
				}
			}
			_iter_next_202db7852:;
			++it;
			goto _iter_begin_202db7852;
		}
		_iter_end_202db7852:;
	}
	_181270_ok = true;
	return _181270_ok;
}



inline jule::Bool _1eede13c8_check_struct_derive_clone(_1eedca071_Sema* _self_,jule::Ptr<_1ee242032_Struct>& _183549_st) {
	return _1eede0edd_check_struct_ins_derive_clone(&(*_self_), _1ee2424c7_instance(_183549_st));
}



inline jule::Bool _1eede1692_check_file_derives(_1eedca071_Sema* _self_) {
	jule::Bool _183939_ok = jule::Bool();
	{
		auto &expr = (*_self_)._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_202dbc8ac:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _202dbc934_st = *it;
			{
				_183939_ok=_1eede13c8_check_struct_derive_clone(&(*_self_), _202dbc934_st);
				if ((!(_183939_ok))) {
					goto _iter_end_202dbc8ac;
				}
			}
			_iter_next_202dbc8ac:;
			++it;
			goto _iter_begin_202dbc8ac;
		}
		_iter_end_202dbc8ac:;
	}
	return _183939_ok;
}



inline void _1eede18d4_check_package_derives(_1eedca071_Sema* _self_) {
	{
		auto &expr = (*_self_)._field_files;
		auto it = expr.begin();
		_iter_begin_202dbdbbb:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202dbdccb_f = *it;
			{
				_1eedccd10_set_current_file(&(*_self_), _202dbdccb_f);
				jule::Bool _185417_ok = _1eede1692_check_file_derives(&(*_self_));
				if ((!(_185417_ok))) {
					return;
				}
			}
			_iter_next_202dbdbbb:;
			++it;
			goto _iter_begin_202dbdbbb;
		}
		_iter_end_202dbdbbb:;
	}
}



inline void _1eede1b26_check_package_decls(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202dc0629:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202dc0816_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202dc0816_f);
				if ((!(_1eedd7c60_check_type_alias_decls(_self_)))) {
					return;
				}
			}
			_iter_next_202dc0629:;
			++it;
			goto _iter_begin_202dc0629;
		}
		_iter_end_202dc0629:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202dc098c:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202dc0a9c_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202dc0a9c_f);
				if ((!(_1eeddad62_check_trait_decls(_self_)))) {
					return;
				}
			}
			_iter_next_202dc098c:;
			++it;
			goto _iter_begin_202dc098c;
		}
		_iter_end_202dc098c:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202dc1a15:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202dc1b58_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202dc1b58_f);
				if ((!(_1eeddcc10_check_global_decls(_self_)))) {
					return;
				}
			}
			_iter_next_202dc1a15:;
			++it;
			goto _iter_begin_202dc1a15;
		}
		_iter_end_202dc1a15:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202dc29e4:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202dc2b04_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202dc2b04_f);
				if ((!(_1eeddea14_check_fn_decls(_self_)))) {
					return;
				}
			}
			_iter_next_202dc29e4:;
			++it;
			goto _iter_begin_202dc29e4;
		}
		_iter_end_202dc29e4:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202dc393a:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202dc3a7d_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202dc3a7d_f);
				if ((!(_1eedde41a_check_struct_decls(_self_)))) {
					return;
				}
			}
			_iter_next_202dc393a:;
			++it;
			goto _iter_begin_202dc393a;
		}
		_iter_end_202dc393a:;
	}
	_1eede18d4_check_package_derives(_self_.ptr());
}



inline void _1eede2066_check_data_for_type_inference(_1eedca071_Sema* _self_,jule::Ptr<_1eee43b89_Data>& _190249_d,_1e02c1d07_Token& _190260_err_token) {
	{
		
		if (_1eee440da_is_nil(_190249_d.ptr())) {
			_case_begin_202dc6685:;
			{
				_1eedcd2d8_push_err(&(*_self_), _190260_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if (_1eee443b5_is_void(_190249_d.ptr())) {
			_case_begin_202dc670c:;
			{
				_1eedcd2d8_push_err(&(*_self_), _190260_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if (_190249_d.get()._field_kind.get()._field_variadic) {
			_case_begin_202dc6784:;
			{
				_1eedcd2d8_push_err(&(*_self_), _190260_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_202dc6597:;
	}
}



inline void _1eede2374_check_var(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eedeb24b_Var>& _191334_v) {
	if (_191334_v.get()._field_cpp_linked) {
		return;
	}
	if (_1eedeb944_is_type_inferred(_191334_v.ptr())) {
		_191334_v.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_191334_v.get()._field_value.get()._field_data.get()._field_kind));
		_1eede2066_check_data_for_type_inference(_self_.ptr(), _191334_v.get()._field_value.get()._field_data,_191334_v.get()._field_value.get()._field_expr.get()._field_token);
	} else {
		jule::Ptr<_1eee88e21_Arr> _192421_arr = _1eee79d46_arr(_191334_v.get()._field_kind.get()._field_kind.ptr());
		if ((_192421_arr != nullptr)) {
			if (_192421_arr.get()._field_auto) {
				jule::Ptr<_1eee88e21_Arr> _192725_data_arr = _1eee79d46_arr(_191334_v.get()._field_value.get()._field_data.get()._field_kind.ptr());
				if ((_192725_data_arr != nullptr)) {
					_192421_arr.get()._field_n=_192725_data_arr.get()._field_n;
				}
			}
		}
		_1eedd482d_check_assign_type(_self_, _191334_v.get()._field_reference,_191334_v.get()._field_kind.get()._field_kind,_191334_v.get()._field_value.get()._field_data,_191334_v.get()._field_value.get()._field_expr.get()._field_token);
	}
	if (_191334_v.get()._field_reference && (!(_1eee8b176_is_valid_for_ref(_191334_v.get()._field_kind.get()._field_kind)))) {
		_1eedcd2d8_push_err(_self_.ptr(), _191334_v.get()._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_191334_v.get()._field_kind.get()._field_kind.ptr()))}));
	}
	_1eedd6cb4_check_validity_for_init_expr(_self_, _191334_v.get()._field_mutable,_191334_v.get()._field_reference,_191334_v.get()._field_kind.get()._field_kind,_191334_v.get()._field_value.get()._field_data,_191334_v.get()._field_value.get()._field_expr.get()._field_token);
	if (_191334_v.get()._field_constant) {
		if ((!(_1eee44690_is_const(_191334_v.get()._field_value.get()._field_data.ptr())))) {
			_1eedcd2d8_push_err(_self_.ptr(), _191334_v.get()._field_value.get()._field_expr.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		}
	} else {
		_191334_v.get()._field_value.get()._field_data.get()._field_constant=nullptr;
	}
	if ((_1eee7b056_tup(_191334_v.get()._field_kind.get()._field_kind.ptr()) != nullptr)) {
		_191334_v.get()._field_kind.get()._field_kind=nullptr;
	}
}



inline void _1eede2770_check_type_var(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1eedeb24b_Var>& _196239_decl,jule::Trait<_1eee992c7_Lookup> _196255_l) {
	if (_196239_decl.get()._field_cpp_linked || (!(_1eedeb669_is_initialized(_196239_decl.ptr())))) {
		return;
	}
	jule::Ptr<_1eee45be1_Eval> _196717_eval = nullptr;
	if ((_196239_decl.get()._field_kind != nullptr)) {
		_196717_eval=_1eedd38a4_evalpd(_self_, _196255_l,_196239_decl.get()._field_kind.get()._field_kind,_196239_decl);
	} else {
		_196717_eval=_1eedd38a4_evalpd(_self_, _196255_l,nullptr,_196239_decl);
	}
	_196717_eval.get()._field_immutable=(!(_196239_decl.get()._field_mutable));
	_196239_decl.get()._field_value.get()._field_data=_1eee65e97_eval_expr(_196717_eval, _196239_decl.get()._field_value.get()._field_expr);
	if ((_196239_decl.get()._field_value.get()._field_data == nullptr)) {
		return;
	}
	_1eede2374_check_var(_self_, _196239_decl);
}



inline void _1eede29b2_check_global_types(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_202dd9038:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _202dd90b0_decl = *it;
			{
				if ((_1eedeb669_is_initialized(_202dd90b0_decl.ptr()) && (_202dd90b0_decl.get()._field_value.get()._field_data == nullptr)) || (_1eedeb944_is_type_inferred(_202dd90b0_decl.ptr()) && (_202dd90b0_decl.get()._field_kind.get()._field_kind == nullptr))) {
					_1eede2770_check_type_var(_self_, _202dd90b0_decl,jule::Trait<_1eee992c7_Lookup>(_self_, 3));
				}
			}
			_iter_next_202dd9038:;
			++it;
			goto _iter_begin_202dd9038;
		}
		_iter_end_202dd9038:;
	}
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1eede2e46_ready_to_check_fn(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee24550d_StructIns>& _199442_s,jule::Ptr<_1ee2579b5_Fn>& _199462_f) {
	jule::Ptr<_1ee25b4ad_FnIns> _199517_ins = _1ee259a50_instance(_199462_f);
	if ((_199462_f.get()._field_instances.len() != 0LL)) {
		return _199517_ins;
	}
	_199517_ins.get()._field_owner=_199442_s;
	_1ee259e07_append_instance(_199462_f.ptr(), _199517_ins);
	_1eedd5e7d_reload_fn_ins_types(_self_, _199517_ins);
	_199517_ins.get()._field_reloaded=true;
	return _199517_ins;
}



inline void _1eede3342_check_type_method(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee24550d_StructIns>& _200642_s,jule::Ptr<_1ee2579b5_Fn>& _200662_f) {
	if (_200662_f.get()._field_cpp_linked) {
		return;
	}
	if ((_200662_f.get()._field_generics.len() > 0LL)) {
		return;
	}
	_1eede2e46_ready_to_check_fn(_self_, _200642_s,_200662_f);
	{
		auto &expr = _200662_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_202dde725:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25b4ad_FnIns> _202de09ce_ins = *it;
			{
				if ((_202de09ce_ins.get()._field_scope.get()._field_stmts.len() > 0LL)) {
					goto _iter_next_202dde725;
				}
				_1eede5db1_check_fn_ins(_self_, _202de09ce_ins);
			}
			_iter_next_202dde725:;
			++it;
			goto _iter_begin_202dde725;
		}
		_iter_end_202dde725:;
	}
}



inline void _1eede3661_check_field_defaults(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee24550d_StructIns>& _202645_ins) {
	jule::Ptr<_1eee45be1_Eval> _202717_eval = _1eedd41e0_eval(_self_, jule::Trait<_1eee992c7_Lookup>(_self_, 3));
	{
		auto &expr = _202645_ins.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_202de30ec:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2449b3_FieldIns> _202de3251_f = *it;
			{
				if ((_202de3251_f.get()._field_decl.get()._field_default == nullptr)) {
					goto _iter_next_202de30ec;
				}
				_202717_eval.get()._field_prefix=_202de3251_f.get()._field_kind;
				_202717_eval.get()._field_field=_202de3251_f;
				_202de3251_f.get()._field_default=_1eee65e97_eval_expr(_202717_eval, _202de3251_f.get()._field_decl.get()._field_default);
				if ((_202de3251_f.get()._field_default == nullptr)) {
					goto _iter_next_202de30ec;
				}
				
				_1eedd482d_check_assign_type(_self_, false,_202de3251_f.get()._field_kind,_202de3251_f.get()._field_default,_202de3251_f.get()._field_decl.get()._field_default.get()._field_token);
			}
			_iter_next_202de30ec:;
			++it;
			goto _iter_begin_202de30ec;
		}
		_iter_end_202de30ec:;
	}
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1eede3bc2_check_struct_ins_op(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee24550d_StructIns>& _204844_s,jule::Ptr<_1ee2579b5_Fn>& _204864_f,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)> _204872_p) {
	if ((_204864_f == nullptr) || (_204864_f.get()._field_generics.len() > 0LL)) {
		return nullptr;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _205217_ins = _1eede2e46_ready_to_check_fn(_self_, _204844_s,_204864_f);
	if (_204872_p(_204864_f)) {
		return _205217_ins;
	}
	return nullptr;
}



inline void _1eede3ee1_check_struct_ins(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee24550d_StructIns>& _205941_s) {
	_1eede3661_check_field_defaults(_self_, _205941_s);
	{
		auto &expr = _205941_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_202de9e28:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202dea5dd_f = *it;
			{
				_1eede3342_check_type_method(_self_, _205941_s,_202dea5dd_f);
			}
			_iter_next_202de9e28:;
			++it;
			goto _iter_begin_202de9e28;
		}
		_iter_end_202de9e28:;
	}
}



inline void _1eede4310_check_type_struct(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _206642_s) {
	if (_206642_s.get()._field_cpp_linked) {
		return;
	}
	if ((_206642_s.get()._field_generics.len() > 0LL)) {
		return;
	}
	if ((_206642_s.get()._field_instances.len() == 0LL)) {
		jule::Ptr<_1ee24550d_StructIns> _207721_ins = _1ee2424c7_instance(_206642_s);
		_207721_ins.get()._field_checked=true;
		_1ee24287e_append_instance(_206642_s.ptr(), _207721_ins);
	}
	{
		auto &expr = _206642_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_202ded877:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _202ded8dd_ins = *it;
			{
				_1eede3ee1_check_struct_ins(_self_, _202ded8dd_ins);
			}
			_iter_next_202ded877:;
			++it;
			goto _iter_begin_202ded877;
		}
		_iter_end_202ded877:;
	}
}



inline void _1eede4552_check_struct_types(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_202dee977:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _202dee9ee_s = *it;
			{
				_1eede4310_check_type_struct(_self_, _202dee9ee_s);
			}
			_iter_next_202dee977:;
			++it;
			goto _iter_begin_202dee977;
		}
		_iter_end_202dee977:;
	}
}



inline void _1eede48b5_check_struct_ins_operators(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee24550d_StructIns> _209350_s) {
	{
		auto &expr = _209350_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_202e00e51:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202e0101c_m = *it;
			{
				{
					auto &_match_expr{ _202e0101c_m.get()._field_ident };
					
					if (_match_expr == jule::Str("eq", 2)) {
						_case_begin_202e0144b:;
						{
							_209350_s.get()._field_operators._field_eq=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _209768_f) mutable -> jule::Bool {
								return static__1eeded050_eq(_209768_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("gt", 2)) {
						_case_begin_202e019bd:;
						{
							_209350_s.get()._field_operators._field_gt=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _209968_f) mutable -> jule::Bool {
								return static__1eeded35d_gt(_209968_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("gt_eq", 5)) {
						_case_begin_202e01a34:;
						{
							_209350_s.get()._field_operators._field_gt_eq=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _210171_f) mutable -> jule::Bool {
								return static__1eeded66b_gt_eq(_210171_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("lt", 2)) {
						_case_begin_202e01a9a:;
						{
							_209350_s.get()._field_operators._field_lt=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _210368_f) mutable -> jule::Bool {
								return static__1eeded979_lt(_210368_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("lt_eq", 5)) {
						_case_begin_202e01b11:;
						{
							_209350_s.get()._field_operators._field_lt_eq=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _210571_f) mutable -> jule::Bool {
								return static__1eededc87_lt_eq(_210571_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shl", 3)) {
						_case_begin_202e01b88:;
						{
							_209350_s.get()._field_operators._field_shl=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _210769_f) mutable -> jule::Bool {
								return static__1eedee480_shl(_210769_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shr", 3)) {
						_case_begin_202e01c10:;
						{
							_209350_s.get()._field_operators._field_shr=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _210969_f) mutable -> jule::Bool {
								return static__1eedee78d_shr(_210969_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("add", 3)) {
						_case_begin_202e01c87:;
						{
							_209350_s.get()._field_operators._field_add=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _211169_f) mutable -> jule::Bool {
								return static__1eedeea9b_add(_211169_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("sub", 3)) {
						_case_begin_202e01d0e:;
						{
							_209350_s.get()._field_operators._field_sub=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _211369_f) mutable -> jule::Bool {
								return static__1eedeeda9_sub(_211369_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("div", 3)) {
						_case_begin_202e01d86:;
						{
							_209350_s.get()._field_operators._field_div=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _211569_f) mutable -> jule::Bool {
								return static__1eee001b7_div(_211569_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mul", 3)) {
						_case_begin_202e01e0d:;
						{
							_209350_s.get()._field_operators._field_mul=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _211769_f) mutable -> jule::Bool {
								return static__1eee004c5_mul(_211769_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mod", 3)) {
						_case_begin_202e01e85:;
						{
							_209350_s.get()._field_operators._field_mod=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _211969_f) mutable -> jule::Bool {
								return static__1eee007d3_mod(_211969_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_and", 7)) {
						_case_begin_202e0200c:;
						{
							_209350_s.get()._field_operators._field_bit_and=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _212173_f) mutable -> jule::Bool {
								return static__1eee00ae1_bit_and(_212173_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_or", 6)) {
						_case_begin_202e02084:;
						{
							_209350_s.get()._field_operators._field_bit_or=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _212372_f) mutable -> jule::Bool {
								return static__1eee00dee_bit_or(_212372_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_xor", 7)) {
						_case_begin_202e0210b:;
						{
							_209350_s.get()._field_operators._field_bit_xor=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _212573_f) mutable -> jule::Bool {
								return static__1eee0120c_bit_xor(_212573_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("neg", 3)) {
						_case_begin_202e02183:;
						{
							_209350_s.get()._field_operators._field_neg=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _212769_f) mutable -> jule::Bool {
								return static__1eee01905_neg(_212769_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("pos", 3)) {
						_case_begin_202e0220a:;
						{
							_209350_s.get()._field_operators._field_pos=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _212969_f) mutable -> jule::Bool {
								return static__1eee01c13_pos(_212969_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_not", 7)) {
						_case_begin_202e02282:;
						{
							_209350_s.get()._field_operators._field_bit_not=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _213173_f) mutable -> jule::Bool {
								return static__1eee02021_bit_not(_213173_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("add_assign", 10)) {
						_case_begin_202e02309:;
						{
							_209350_s.get()._field_operators._field_add_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _213376_f) mutable -> jule::Bool {
								return static__1eee02719_add_assign(_213376_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("sub_assign", 10)) {
						_case_begin_202e02381:;
						{
							_209350_s.get()._field_operators._field_sub_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _213576_f) mutable -> jule::Bool {
								return static__1eee02a27_sub_assign(_213576_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("div_assign", 10)) {
						_case_begin_202e02408:;
						{
							_209350_s.get()._field_operators._field_div_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _213776_f) mutable -> jule::Bool {
								return static__1eee02d35_div_assign(_213776_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mul_assign", 10)) {
						_case_begin_202e02480:;
						{
							_209350_s.get()._field_operators._field_mul_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _213976_f) mutable -> jule::Bool {
								return static__1eee03143_mul_assign(_213976_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mod_assign", 10)) {
						_case_begin_202e02507:;
						{
							_209350_s.get()._field_operators._field_mod_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _214176_f) mutable -> jule::Bool {
								return static__1eee03451_mod_assign(_214176_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shl_assign", 10)) {
						_case_begin_202e0257e:;
						{
							_209350_s.get()._field_operators._field_shl_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _214376_f) mutable -> jule::Bool {
								return static__1eee0375e_shl_assign(_214376_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shr_assign", 10)) {
						_case_begin_202e02606:;
						{
							_209350_s.get()._field_operators._field_shr_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _214576_f) mutable -> jule::Bool {
								return static__1eee03a6c_shr_assign(_214576_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_or_assign", 13)) {
						_case_begin_202e0267d:;
						{
							_209350_s.get()._field_operators._field_bit_or_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _214779_f) mutable -> jule::Bool {
								return static__1eee03d7a_bit_or_assign(_214779_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_and_assign", 14)) {
						_case_begin_202e02705:;
						{
							_209350_s.get()._field_operators._field_bit_and_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _214980_f) mutable -> jule::Bool {
								return static__1eee04188_bit_and_assign(_214980_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_xor_assign", 14)) {
						_case_begin_202e0277c:;
						{
							_209350_s.get()._field_operators._field_bit_xor_assign=_1eede3bc2_check_struct_ins_op(_self_, _209350_s,_202e0101c_m,jule::Fn<jule::Bool(jule::Ptr<_1ee2579b5_Fn>)>([=](jule::Ptr<_1ee2579b5_Fn> _215180_f) mutable -> jule::Bool {
								return static__1eee04496_bit_xor_assign(_215180_f);
							}));
						}
					}
					_match_end_202e01759:;
				}
			}
			_iter_next_202e00e51:;
			++it;
			goto _iter_begin_202e00e51;
		}
		_iter_end_202e00e51:;
	}
}



inline void _1eede4c17_check_type_struct_operators(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee242032_Struct>& _215652_s) {
	if (_215652_s.get()._field_cpp_linked) {
		return;
	}
	if ((_215652_s.get()._field_generics.len() > 0LL)) {
		return;
	}
	if ((_215652_s.get()._field_instances.len() == 0LL)) {
		jule::Ptr<_1ee24550d_StructIns> _216721_ins = _1ee2424c7_instance(_215652_s);
		_216721_ins.get()._field_checked=true;
		_1ee24287e_append_instance(_215652_s.ptr(), _216721_ins);
	}
	_1eede48b5_check_struct_ins_operators(_self_, _215652_s.get()._field_instances[0LL]);
}



inline void _1eede4e8c_check_struct_types_operators(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_202e33e95:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _202e3401c_s = *it;
			{
				_1eede4c17_check_type_struct_operators(_self_, _202e3401c_s);
			}
			_iter_next_202e33e95:;
			++it;
			goto _iter_begin_202e33e95;
		}
		_iter_end_202e33e95:;
	}
}



inline void _1eede529a_check_rets(_1eedca071_Sema* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _218134_f) {
	if (_1ee257e7c_is_void(_218134_f.get()._field_decl.ptr())) {
		return;
	}
	_1eede7be8_MissingRetChecker _218513_mrc = static__1eede80e4_new();
	jule::Bool _218613_ok = _1eede9436_check(&_218513_mrc, _218134_f.get()._field_scope);
	if ((!(_218613_ok))) {
		_1eedcd2d8_push_err(&(*_self_), _218134_f.get()._field_decl.get()._field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	}
}



inline void _1eede5696_check_fn_ins_sc(_1eedca071_Sema* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _219239_f,jule::Ptr<_1eeda5953_ScopeChecker>& _219255_sc) {
	if (_219239_f.get()._field_decl.get()._field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _219717_vars = _1eedc89cb_build_ret_vars(_219239_f);
	_219255_sc.get()._field_table.get()._field_vars=jule::append(_219255_sc.get()._field_table.get()._field_vars,_219717_vars);
	_219255_sc.get()._field_table.get()._field_vars=jule::append(_219255_sc.get()._field_table.get()._field_vars,_1eedc8cd9_build_param_vars(_219239_f));
	_219255_sc.get()._field_table.get()._field_type_aliases=jule::append(_219255_sc.get()._field_table.get()._field_type_aliases,_1eedc913b_build_generic_type_aliases(_219239_f));
	_1eedb7965_check(_219255_sc, _219239_f.get()._field_decl.get()._field_scope,_219239_f.get()._field_scope);
	if ((_219717_vars.len() > 0LL)) {
		jule::Slice<jule::Any> _220721_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I32>(_219239_f.get()._field_scope.get()._field_stmts.len() + static_cast<jule::I32>(static_cast<jule::I32>(_219717_vars.len()))));
		{
			auto &expr = _219717_vars;
			auto it = expr.begin();
			_iter_begin_202e3c0ad:;
			if (it != expr.end()) {
				jule::Ptr<_1eedeb24b_Var> _202e3ca81_v = *it;
				{
					_220721_stmts = jule::alloc_for_append(_220721_stmts,1);_220721_stmts.__push(jule::Any(_202e3ca81_v));
				}
				_iter_next_202e3c0ad:;
				++it;
				goto _iter_begin_202e3c0ad;
			}
			_iter_end_202e3c0ad:;
		}
		_220721_stmts=jule::append(_220721_stmts,_219239_f.get()._field_scope.get()._field_stmts);
		_219239_f.get()._field_scope.get()._field_stmts=_220721_stmts;
	}
	if ((!(_1eeda77e0_stopped(_219255_sc.ptr())))) {
		_1eede529a_check_rets(&(*_self_), _219239_f);
	}
}



inline void _1eede5a92_check_fn_ins_caller(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee25b4ad_FnIns>& _222244_f,jule::Ptr<_1e02c1d07_Token> _222259_caller) {
	if (_222244_f.get()._field_decl.get()._field_cpp_linked) {
		return;
	}
	jule::Ptr<_1eee3c842_SymbolTable> _222717_old = _222244_f.get()._field_decl.get()._field_sema.get()._field_file;
	__JULE_DEFER({
		_1eedccd10_set_current_file(_222244_f.get()._field_decl.get()._field_sema.ptr(), _222717_old);
	});
	jule::Ptr<_1eee3c842_SymbolTable> _222917_file = _1eedc9515_find_file(_222244_f.get()._field_decl.get()._field_sema.get()._field_files,_222244_f.get()._field_decl.get()._field_token._field_file);
	if ((_222917_file != nullptr)) {
		_1eedccd10_set_current_file(_222244_f.get()._field_decl.get()._field_sema.ptr(), _222917_file);
	}
	jule::Ptr<_1eeda5953_ScopeChecker> _223417_sc = _1eed57ae2_new_scope_checker(_222244_f.get()._field_decl.get()._field_sema,_222244_f);
	_223417_sc.get()._field_called_from=_222259_caller;
	_1eede5696_check_fn_ins_sc(_self_.ptr(), _222244_f,_223417_sc);
	if (_222244_f.get()._field_decl.get()._field_sema != _self_) {
		_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_222244_f.get()._field_decl.get()._field_sema.get()._field_errors);
		_222244_f.get()._field_decl.get()._field_sema.get()._field_errors=nullptr;
	}
}



inline void _1eede5db1_check_fn_ins(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee25b4ad_FnIns>& _224437_f) {
	_1eede5a92_check_fn_ins_caller(_self_, _224437_f,nullptr);
}



inline void _1eede61d0_check_type_fn(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _224838_f) {
	if (_224838_f.get()._field_cpp_linked) {
		return;
	}
	if ((_224838_f.get()._field_generics.len() > 0LL)) {
		return;
	}
	{
		auto &expr = _224838_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_202e4744d:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25b4ad_FnIns> _202e47591_ins = *it;
			{
				_1eede5db1_check_fn_ins(_self_, _202e47591_ins);
			}
			_iter_next_202e4744d:;
			++it;
			goto _iter_begin_202e4744d;
		}
		_iter_end_202e4744d:;
	}
}



inline void _1eede64ee_check_test_fn(_1eedca071_Sema* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _226337_f) {
	if (_226337_f.get()._field_decl.get()._field_public) {
		_1eedcd2d8_push_err(&(*_self_), _226337_f.get()._field_decl.get()._field_token,jule::Str("test function cannot be public", 30),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("remove \"pub\" modifier", 21),jule::Slice<jule::Any>());
		return;
	}
	if ((_226337_f.get()._field_params.len() != 1LL) || (_226337_f.get()._field_result != nullptr)) {
		_1eedcd2d8_push_err(&(*_self_), _226337_f.get()._field_decl.get()._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1eee80d19_Sptr> _227617_sptr = _1eee794b6_sptr(_226337_f.get()._field_params[0LL].get()._field_kind.ptr());
	if ((_227617_sptr == nullptr)) {
		_1eedcd2d8_push_err(&(*_self_), _226337_f.get()._field_decl.get()._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1ee24550d_StructIns> _228313_s = _1eee7a6c6_strct(_227617_sptr.get()._field_elem.ptr());
	if ((_228313_s == nullptr) || (!(_1eedc67ed_is_std_package(_228313_s.get()._field_decl.get()._field_token._field_file.get()._field_path,jule::Str("testing", 7))))) {
		_1eedcd2d8_push_err(&(*_self_), _226337_f.get()._field_decl.get()._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		_1eedcd6d4_push_suggestion(&(*_self_), jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
}



inline void _1eede681d_precheck_type_fn(jule::Ptr<_1eedca071_Sema> _self_,jule::Ptr<_1ee2579b5_Fn>& _229141_f) {
	if (_229141_f.get()._field_cpp_linked) {
		return;
	}
	if ((_229141_f.get()._field_generics.len() > 0LL)) {
		return;
	}
	if ((_229141_f.get()._field_instances.len() == 0LL)) {
		jule::Ptr<_1ee25b4ad_FnIns> _230221_ins = _1ee259a50_instance(_229141_f);
		_229141_f.get()._field_instances = jule::alloc_for_append(_229141_f.get()._field_instances,1);_229141_f.get()._field_instances.__push(_230221_ins);
		_1eedd5e7d_reload_fn_ins_types(_self_, _230221_ins);
		_230221_ins.get()._field_reloaded=true;
		if (_1eee74ec8_has_directive(_229141_f.get()._field_directives,jule::Str("test", 4))) {
			_1eede64ee_check_test_fn(_self_.ptr(), _230221_ins);
		}
	}
}



inline void _1eede6a60_precheck_fn_types(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_traits;
		auto it = expr.begin();
		_iter_begin_202e5502c:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> _202e550a4_decl = *it;
			{
				{
					auto &expr = _202e550a4_decl.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_202e55824:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _202e55868_m = *it;
						{
							_1eede681d_precheck_type_fn(_self_, _202e55868_m);
						}
						_iter_next_202e55824:;
						++it;
						goto _iter_begin_202e55824;
					}
					_iter_end_202e55824:;
				}
			}
			_iter_next_202e5502c:;
			++it;
			goto _iter_begin_202e5502c;
		}
		_iter_end_202e5502c:;
	}
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_202e55318:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202e55add_decl = *it;
			{
				_1eede681d_precheck_type_fn(_self_, _202e55add_decl);
			}
			_iter_next_202e55318:;
			++it;
			goto _iter_begin_202e55318;
		}
		_iter_end_202e55318:;
	}
}



inline void _1eede6ca2_check_fn_types(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_202e5723d:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202e572b5_decl = *it;
			{
				_1eede61d0_check_type_fn(_self_, _202e572b5_decl);
			}
			_iter_next_202e5723d:;
			++it;
			goto _iter_begin_202e5723d;
		}
		_iter_end_202e5723d:;
	}
}



inline void _1eede6ee4_check_package_types(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202e582e9:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202e584d6_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202e584d6_f);
				_1eede29b2_check_global_types(_self_);
			}
			_iter_next_202e582e9:;
			++it;
			goto _iter_begin_202e582e9;
		}
		_iter_end_202e582e9:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202e58690:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202e587a0_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202e587a0_f);
				_1eede6a60_precheck_fn_types(_self_);
			}
			_iter_next_202e58690:;
			++it;
			goto _iter_begin_202e58690;
		}
		_iter_end_202e58690:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202e59493:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202e5a10e_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202e5a10e_f);
				_1eede4e8c_check_struct_types_operators(_self_);
			}
			_iter_next_202e59493:;
			++it;
			goto _iter_begin_202e59493;
		}
		_iter_end_202e59493:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202e5a85c:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202e5a373_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202e5a373_f);
				_1eede4552_check_struct_types(_self_);
			}
			_iter_next_202e5a85c:;
			++it;
			goto _iter_begin_202e5a85c;
		}
		_iter_end_202e5a85c:;
	}
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202e5b077:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202e5b154_f = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202e5b154_f);
				_1eede6ca2_check_fn_types(_self_);
			}
			_iter_next_202e5b077:;
			++it;
			goto _iter_begin_202e5b077;
		}
		_iter_end_202e5b077:;
	}
}



inline void _1eede7236_set_file_sema_fields(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_202e5d024:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202e5d09b_f = *it;
			{
				_202e5d09b_f.get()._field_sema=_self_;
			}
			_iter_next_202e5d024:;
			++it;
			goto _iter_begin_202e5d024;
		}
		_iter_end_202e5d024:;
	}
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_202e5d277:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _202e5d475_st = *it;
			{
				_202e5d475_st.get()._field_sema=_self_;
			}
			_iter_next_202e5d277:;
			++it;
			goto _iter_begin_202e5d277;
		}
		_iter_end_202e5d277:;
	}
}



inline void _1eede7478_set_sema_fields(jule::Ptr<_1eedca071_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_202e5e6a7:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _202e5e894_file = *it;
			{
				_1eedccd10_set_current_file(_self_.ptr(), _202e5e894_file);
				_1eede7236_set_file_sema_fields(_self_);
			}
			_iter_next_202e5e6a7:;
			++it;
			goto _iter_begin_202e5e6a7;
		}
		_iter_end_202e5e6a7:;
	}
}



inline void _1eede7797_check(jule::Ptr<_1eedca071_Sema> _self_,jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _237930_files) {
	_self_.get()._field_files=_237930_files;
	_1eedd1451_check_imports(_self_.ptr());
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;
	}
	_1eedd1b27_check_enums(_self_);
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;
	}
	_1eede7478_set_sema_fields(_self_);
	_1eedd18d5_impl_impls(_self_);
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;
	}
	_1eede1b26_check_package_decls(_self_);
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;
	}
	_1eede6ee4_check_package_types(_self_);
}







std::ostream &operator<<(std::ostream &_Stream, _1eedca071_Sema _Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}



inline _1eede7be8_MissingRetChecker static__1eede80e4_new(void) {
	return _1eede7be8_MissingRetChecker(jule::Slice<jule::U32>::alloc(16LL),jule::Bool());
}



inline jule::Bool _1eede8468_check_conditional(_1eede7be8_MissingRetChecker* _self_,jule::Ptr<_1eeda30d2_Conditional> _242536_c) {
	{
		auto &expr = _242536_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_202e65009:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda2b92_If> _202e650c5_elif = *it;
			{
				if ((_202e650c5_elif == nullptr)) {
					return false;
				}
				if ((!(_1eede907e_check_scope(&(*_self_), _202e650c5_elif.get()._field_scope)))) {
					return false;
				}
			}
			_iter_next_202e65009:;
			++it;
			goto _iter_begin_202e65009;
		}
		_iter_end_202e65009:;
	}
	return (_242536_c.get()._field_default != nullptr) && _1eede907e_check_scope(&(*_self_), _242536_c.get()._field_default.get()._field_scope);
}



inline jule::Bool _1eede8820_check_match(_1eede7be8_MissingRetChecker* _self_,jule::Ptr<_1eeda4952_Match> _243730_m) {
	{
		auto &expr = _243730_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_202e67b55:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda4da3_Case> _202e67c21_c = *it;
			{
				if ((_202e67c21_c == nullptr)) {
					return false;
				}
				jule::I32 _244217_n = (*_self_)._field_breaked.len();
				jule::Bool _244317_ok = _1eede907e_check_scope(&(*_self_), _202e67c21_c.get()._field_scope);
				{
					
					if (_244217_n != static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_breaked.len()))) {
						_case_begin_202e6952a:;
						{
							return false;
						}
					}
					else if ((!(_244317_ok))) {
						_case_begin_202e695a2:;
						{
							if ((!((*_self_)._field_falled))) {
								return false;
							}
							goto _case_begin_202e69629;
						}
					}
					else if ((*_self_)._field_falled) {
						_case_begin_202e69629:;
						{
							(*_self_)._field_falled=false;
							if ((_202e67c21_c.get()._field_next == nullptr)) {
								return false;
							}
							goto _iter_next_202e67b55;
						}
					}
					_match_end_202e69481:;
				}
			}
			_iter_next_202e67b55:;
			++it;
			goto _iter_begin_202e67b55;
		}
		_iter_end_202e67b55:;
	}
	return (_243730_m.get()._field_default != nullptr) && _1eede907e_check_scope(&(*_self_), _243730_m.get()._field_default.get()._field_scope);
}



inline jule::Bool _1eede8bc7_check_inf_iter(_1eede7be8_MissingRetChecker* _self_,jule::Ptr<_1eeda3302_InfIter> _246333_it) {
	jule::I32 _246413_n = (*_self_)._field_breaked.len();
	if (_1eede907e_check_scope(&(*_self_), _246333_it.get()._field_scope)) {
		(*_self_)._field_breaked=(*_self_)._field_breaked.slice(0LL,_246413_n);
		return true;
	}
	if (_246413_n != static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_breaked.len()))) {
		jule::U32 _247017_itaddr = static_cast<jule::U32>(_246333_it);
		{
			auto expr = (*_self_)._field_breaked.slice(_246413_n);
			auto it = expr.begin();
			_iter_begin_202e6e288:;
			if (it != expr.end()) {
				jule::U32 _202e6e365_addr = *it;
				{
					if (_247017_itaddr == _202e6e365_addr) {
						(*_self_)._field_breaked=(*_self_)._field_breaked.slice(0LL,_246413_n);
						return false;
					}
				}
				_iter_next_202e6e288:;
				++it;
				goto _iter_begin_202e6e288;
			}
			_iter_end_202e6e288:;
		}
		(*_self_)._field_breaked=(*_self_)._field_breaked.slice(0LL,_246413_n);
	}
	return true;
}



inline jule::Bool _1eede907e_check_scope(_1eede7be8_MissingRetChecker* _self_,jule::Ptr<_1eed8a5a3_Scope> _248230_s) {
	if ((_248230_s == nullptr)) {
		return false;
	}
	{
		auto &expr = _248230_s.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_202e71235:;
		if (it != expr.end()) {
			jule::Any _202e70ca1_st = *it;
			{
				{
					auto &_match_expr{ _202e70ca1_st };
					
					if (_match_expr.type_is<jule::Ptr<_1eeda50c3_FallSt>>()) {
						_case_begin_202e71972:;
						{
							(*_self_)._field_falled=true;
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eeda3b82_BreakSt>>()) {
						_case_begin_202e71a1b:;
						{
							jule::U32 _249221_addr = _202e70ca1_st.operator jule::Ptr<_1eeda3b82_BreakSt>().get()._field_it;
							if ((_249221_addr != 0LLU)) {
								(*_self_)._field_breaked = jule::alloc_for_append((*_self_)._field_breaked,1);(*_self_)._field_breaked.__push(_249221_addr);
							}
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eeda3962_ContSt>>()) {
						_case_begin_202e71a82:;
						{
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eeda3302_InfIter>>()) {
						_case_begin_202e71ae8:;
						{
							if (_1eede8bc7_check_inf_iter(&(*_self_), _202e70ca1_st.operator jule::Ptr<_1eeda3302_InfIter>())) {
								return true;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eeda52e3_RetSt>>()) {
						_case_begin_202e71b70:;
						{
							return true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eed8a5a3_Scope>>()) {
						_case_begin_202e71be7:;
						{
							if (_1eede907e_check_scope(&(*_self_), _202e70ca1_st.operator jule::Ptr<_1eed8a5a3_Scope>())) {
								return true;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
						_case_begin_202e71c6e:;
						{
							{
								auto &_match_expr{ _202e70ca1_st.operator jule::Ptr<_1eee43b89_Data>().get()._field_model };
								
								if (_match_expr.type_is<jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>()) {
									_case_begin_202e75d3e:;
									{
										return true;
									}
								}
								_match_end_202e75cd9:;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eeda30d2_Conditional>>()) {
						_case_begin_202e71ce6:;
						{
							if (_1eede8468_check_conditional(&(*_self_), _202e70ca1_st.operator jule::Ptr<_1eeda30d2_Conditional>())) {
								return true;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1eeda4952_Match>>()) {
						_case_begin_202e71d6d:;
						{
							if (_1eede8820_check_match(&(*_self_), _202e70ca1_st.operator jule::Ptr<_1eeda4952_Match>())) {
								return true;
							}
						}
					}
					_match_end_202e71389:;
				}
			}
			_iter_next_202e71235:;
			++it;
			goto _iter_begin_202e71235;
		}
		_iter_end_202e71235:;
	}
	return false;
}



inline jule::Bool _1eede9436_check(_1eede7be8_MissingRetChecker* _self_,jule::Ptr<_1eed8a5a3_Scope> _252824_s) {
	return _1eede907e_check_scope(&(*_self_), _252824_s);
}







std::ostream &operator<<(std::ostream &_Stream, _1eede7be8_MissingRetChecker _Src) {
	_Stream << "MissingRetChecker{";
	_Stream << "breaked:" << _Src._field_breaked << ", ";
	_Stream << "falled:" << _Src._field_falled;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eede9e3c_IterRelation _Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool static__1eedec549_dispose(jule::Ptr<_1ee2579b5_Fn> _1027_f) {
	return ((((((((((_1027_f != nullptr) && (_1027_f.get()._field_owner != nullptr)) && (_1027_f.get()._field_ident == jule::Str("dispose", 7))) && (!(_1027_f.get()._field_statically))) && (!(_1027_f.get()._field_unsafety))) && _1027_f.get()._field_public) && _1ee257e7c_is_void(_1027_f.ptr())) && (_1027_f.get()._field_generics.len() == 0LL)) && (_1027_f.get()._field_params.len() == 1LL)) && _1027_f.get()._field_params[0LL].get()._field_mutable) && (!(_1ee256673_is_ref(_1027_f.get()._field_params[0LL].ptr())));
}



inline jule::Bool static__1eedec857_to_str(jule::Ptr<_1ee2579b5_Fn> _2526_f) {
	if (((((((((((_2526_f == nullptr) || (_2526_f.get()._field_owner == nullptr)) || (_2526_f.get()._field_ident != jule::Str("to_str", 6))) || _2526_f.get()._field_statically) || _2526_f.get()._field_unsafety) || (!(_2526_f.get()._field_public))) || _1ee257e7c_is_void(_2526_f.ptr())) || (_2526_f.get()._field_generics.len() != 0LL)) || (_2526_f.get()._field_params.len() != 1LL)) || _2526_f.get()._field_params[0LL].get()._field_mutable) || _1ee256673_is_ref(_2526_f.get()._field_params[0LL].ptr())) {
		return false;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _4017_ins = _2526_f.get()._field_instances[0LL];
	jule::Ptr<_1eee7bead_Prim> _4113_prim = _1eee791db_prim(_4017_ins.get()._field_result.ptr());
	if ((_4113_prim == nullptr)) {
		return false;
	}
	return _1eee806dc_is_str(_4113_prim.ptr());
}



inline jule::Bool static__1eedecc42_logical(jule::Ptr<_1ee2579b5_Fn>& _4824_f,jule::Str _4832_ident) {
	if ((((((((((((((_4824_f == nullptr) || (_4824_f.get()._field_ident != _4832_ident)) || (_4824_f.get()._field_owner == nullptr)) || (_4824_f.get()._field_instances.len() == 0LL)) || _4824_f.get()._field_statically) || _4824_f.get()._field_unsafety) || (!(_4824_f.get()._field_public))) || _1ee257e7c_is_void(_4824_f.ptr())) || (_4824_f.get()._field_generics.len() != 0LL)) || (_4824_f.get()._field_params.len() != 2LL)) || _4824_f.get()._field_params[0LL].get()._field_mutable) || _1ee256673_is_ref(_4824_f.get()._field_params[0LL].ptr())) || _4824_f.get()._field_params[1LL].get()._field_mutable) || _4824_f.get()._field_params[1LL].get()._field_reference) {
		return false;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _6617_ins = _4824_f.get()._field_instances[0LL];
	jule::Ptr<_1eee7bead_Prim> _6713_prim = _1eee791db_prim(_6617_ins.get()._field_result.ptr());
	if ((_6713_prim == nullptr) || (!(_1eee80412_is_bool(_6713_prim.ptr())))) {
		return false;
	}
	return _6617_ins.get()._field_owner == _1eee7a6c6_strct(_6617_ins.get()._field_params[1LL].get()._field_kind.ptr());
}



inline jule::Bool static__1eeded050_eq(jule::Ptr<_1ee2579b5_Fn> _7522_f) {
	return static__1eedecc42_logical(_7522_f,jule::Str("eq", 2));
}



inline jule::Bool static__1eeded35d_gt(jule::Ptr<_1ee2579b5_Fn> _8022_f) {
	return static__1eedecc42_logical(_8022_f,jule::Str("gt", 2));
}



inline jule::Bool static__1eeded66b_gt_eq(jule::Ptr<_1ee2579b5_Fn> _8525_f) {
	return static__1eedecc42_logical(_8525_f,jule::Str("gt_eq", 5));
}



inline jule::Bool static__1eeded979_lt(jule::Ptr<_1ee2579b5_Fn> _9022_f) {
	return static__1eedecc42_logical(_9022_f,jule::Str("lt", 2));
}



inline jule::Bool static__1eededc87_lt_eq(jule::Ptr<_1ee2579b5_Fn> _9525_f) {
	return static__1eedecc42_logical(_9525_f,jule::Str("lt_eq", 5));
}



inline jule::Bool static__1eedee172_result(jule::Ptr<_1ee2579b5_Fn>& _9923_f,jule::Str _9931_ident) {
	if ((((((((((((((_9923_f == nullptr) || (_9923_f.get()._field_ident != _9931_ident)) || (_9923_f.get()._field_owner == nullptr)) || (_9923_f.get()._field_instances.len() == 0LL)) || _9923_f.get()._field_statically) || _9923_f.get()._field_unsafety) || (!(_9923_f.get()._field_public))) || _1ee257e7c_is_void(_9923_f.ptr())) || (_9923_f.get()._field_generics.len() != 0LL)) || (_9923_f.get()._field_params.len() != 2LL)) || _9923_f.get()._field_params[0LL].get()._field_mutable) || _1ee256673_is_ref(_9923_f.get()._field_params[0LL].ptr())) || _9923_f.get()._field_params[1LL].get()._field_mutable) || _9923_f.get()._field_params[1LL].get()._field_reference) {
		return false;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _11717_ins = _9923_f.get()._field_instances[0LL];
	return _1eee7a6c6_strct(_11717_ins.get()._field_result.ptr()) == _11717_ins.get()._field_owner;
}



inline jule::Bool static__1eedee480_shl(jule::Ptr<_1ee2579b5_Fn> _12223_f) {
	return static__1eedee172_result(_12223_f,jule::Str("shl", 3));
}



inline jule::Bool static__1eedee78d_shr(jule::Ptr<_1ee2579b5_Fn> _12723_f) {
	return static__1eedee172_result(_12723_f,jule::Str("shr", 3));
}



inline jule::Bool static__1eedeea9b_add(jule::Ptr<_1ee2579b5_Fn> _13223_f) {
	return static__1eedee172_result(_13223_f,jule::Str("add", 3));
}



inline jule::Bool static__1eedeeda9_sub(jule::Ptr<_1ee2579b5_Fn> _13723_f) {
	return static__1eedee172_result(_13723_f,jule::Str("sub", 3));
}



inline jule::Bool static__1eee001b7_div(jule::Ptr<_1ee2579b5_Fn> _14223_f) {
	return static__1eedee172_result(_14223_f,jule::Str("div", 3));
}



inline jule::Bool static__1eee004c5_mul(jule::Ptr<_1ee2579b5_Fn> _14723_f) {
	return static__1eedee172_result(_14723_f,jule::Str("mul", 3));
}



inline jule::Bool static__1eee007d3_mod(jule::Ptr<_1ee2579b5_Fn> _15223_f) {
	return static__1eedee172_result(_15223_f,jule::Str("mod", 3));
}



inline jule::Bool static__1eee00ae1_bit_and(jule::Ptr<_1ee2579b5_Fn> _15727_f) {
	return static__1eedee172_result(_15727_f,jule::Str("bit_and", 7));
}



inline jule::Bool static__1eee00dee_bit_or(jule::Ptr<_1ee2579b5_Fn> _16226_f) {
	return static__1eedee172_result(_16226_f,jule::Str("bit_or", 6));
}



inline jule::Bool static__1eee0120c_bit_xor(jule::Ptr<_1ee2579b5_Fn> _16727_f) {
	return static__1eedee172_result(_16727_f,jule::Str("bit_xor", 7));
}



inline jule::Bool static__1eee015e7_unary(jule::Ptr<_1ee2579b5_Fn>& _17122_f,jule::Str _17130_ident) {
	if ((((((((((((_17122_f == nullptr) || (_17122_f.get()._field_ident != _17130_ident)) || (_17122_f.get()._field_owner == nullptr)) || (_17122_f.get()._field_instances.len() == 0LL)) || _17122_f.get()._field_statically) || _17122_f.get()._field_unsafety) || (!(_17122_f.get()._field_public))) || _1ee257e7c_is_void(_17122_f.ptr())) || (_17122_f.get()._field_generics.len() != 0LL)) || (_17122_f.get()._field_params.len() != 1LL)) || _17122_f.get()._field_params[0LL].get()._field_mutable) || _1ee256673_is_ref(_17122_f.get()._field_params[0LL].ptr())) {
		return false;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _18717_ins = _17122_f.get()._field_instances[0LL];
	return _1eee7a6c6_strct(_18717_ins.get()._field_result.ptr()) == _18717_ins.get()._field_owner;
}



inline jule::Bool static__1eee01905_neg(jule::Ptr<_1ee2579b5_Fn> _19223_f) {
	return static__1eee015e7_unary(_19223_f,jule::Str("neg", 3));
}



inline jule::Bool static__1eee01c13_pos(jule::Ptr<_1ee2579b5_Fn> _19723_f) {
	return static__1eee015e7_unary(_19723_f,jule::Str("pos", 3));
}



inline jule::Bool static__1eee02021_bit_not(jule::Ptr<_1ee2579b5_Fn> _20227_f) {
	return static__1eee015e7_unary(_20227_f,jule::Str("bit_not", 7));
}



inline jule::Bool static__1eee0240b_assign(jule::Ptr<_1ee2579b5_Fn>& _20623_f,jule::Str _20631_ident) {
	if ((((((((((((((_20623_f == nullptr) || (_20623_f.get()._field_ident != _20631_ident)) || (_20623_f.get()._field_owner == nullptr)) || (_20623_f.get()._field_instances.len() == 0LL)) || _20623_f.get()._field_statically) || _20623_f.get()._field_unsafety) || (!(_20623_f.get()._field_public))) || (!(_1ee257e7c_is_void(_20623_f.ptr())))) || (_20623_f.get()._field_generics.len() != 0LL)) || (_20623_f.get()._field_params.len() != 2LL)) || (!(_20623_f.get()._field_params[0LL].get()._field_mutable))) || _1ee256673_is_ref(_20623_f.get()._field_params[0LL].ptr())) || _20623_f.get()._field_params[1LL].get()._field_mutable) || _20623_f.get()._field_params[1LL].get()._field_reference) {
		return false;
	}
	return true;
}



inline jule::Bool static__1eee02719_add_assign(jule::Ptr<_1ee2579b5_Fn> _22730_f) {
	return static__1eee0240b_assign(_22730_f,jule::Str("add_assign", 10));
}



inline jule::Bool static__1eee02a27_sub_assign(jule::Ptr<_1ee2579b5_Fn> _23230_f) {
	return static__1eee0240b_assign(_23230_f,jule::Str("sub_assign", 10));
}



inline jule::Bool static__1eee02d35_div_assign(jule::Ptr<_1ee2579b5_Fn> _23730_f) {
	return static__1eee0240b_assign(_23730_f,jule::Str("div_assign", 10));
}



inline jule::Bool static__1eee03143_mul_assign(jule::Ptr<_1ee2579b5_Fn> _24230_f) {
	return static__1eee0240b_assign(_24230_f,jule::Str("mul_assign", 10));
}



inline jule::Bool static__1eee03451_mod_assign(jule::Ptr<_1ee2579b5_Fn> _24730_f) {
	return static__1eee0240b_assign(_24730_f,jule::Str("mod_assign", 10));
}



inline jule::Bool static__1eee0375e_shl_assign(jule::Ptr<_1ee2579b5_Fn> _25230_f) {
	return static__1eee0240b_assign(_25230_f,jule::Str("shl_assign", 10));
}



inline jule::Bool static__1eee03a6c_shr_assign(jule::Ptr<_1ee2579b5_Fn> _25730_f) {
	return static__1eee0240b_assign(_25730_f,jule::Str("shr_assign", 10));
}



inline jule::Bool static__1eee03d7a_bit_or_assign(jule::Ptr<_1ee2579b5_Fn> _26233_f) {
	return static__1eee0240b_assign(_26233_f,jule::Str("bit_or_assign", 13));
}



inline jule::Bool static__1eee04188_bit_and_assign(jule::Ptr<_1ee2579b5_Fn> _26734_f) {
	return static__1eee0240b_assign(_26734_f,jule::Str("bit_and_assign", 14));
}



inline jule::Bool static__1eee04496_bit_xor_assign(jule::Ptr<_1ee2579b5_Fn> _27234_f) {
	return static__1eee0240b_assign(_27234_f,jule::Str("bit_xor_assign", 14));
}







std::ostream &operator<<(std::ostream &_Stream, _1eedebd62_FuncPattern _Src) {
	_Stream << "FuncPattern{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eedeb24b_Var> _1eee382aa_build_var(_1eee37c6b_RangeChecker* _self_,jule::Ptr<_1e02daea8_VarDecl>& _91429_decl) {
	jule::Ptr<_1eedeb24b_Var> _91517_v = _1ee264c03_build_var(_91429_decl);
	return _91517_v;
}



inline void _1eee384ec_set_size_key(_1eee37c6b_RangeChecker* _self_) {
	if (((*_self_)._field_rang.get()._field_key_a == nullptr) || _1e02c4ada_is_ignore_ident((*_self_)._field_rang.get()._field_key_a.get()._field_ident)) {
		return;
	}
	(*_self_)._field_kind.get()._field_key_a=_1eee382aa_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_a);
	(*_self_)._field_kind.get()._field_key_a.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5)))));
	{
		auto &_match_expr{ (*_self_)._field_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_202b8ec01:;
			{
				(*_self_)._field_kind.get()._field_key_a.get()._field_iter_relation=jule::new_ptr<_1eede9e3c_IterRelation>(_1eede9e3c_IterRelation((*_self_)._field_d.get()._field_model.operator jule::Ptr<_1eedeb24b_Var>()));
			}
		}
		_match_end_202b8eb9b:;
	}
}



inline void _1eee38a19_check_range_expr_validity(_1eee37c6b_RangeChecker* _self_,jule::Ptr<_1eee43b89_Data>& _94549_d,jule::Ptr<_1eedeb24b_Var>& _94560_key,jule::Ptr<_1eee76b45_TypeKind>& _94576_k) {
	jule::Bool _94617__mut = _94560_key.get()._field_mutable;
	if (_94617__mut && (!(_1eee782a6_mutable(_94576_k.ptr())))) {
		_94617__mut=false;
	}
	_1eedd6cb4_check_validity_for_init_expr((*_self_)._field_sc.get()._field_s, _94617__mut,_94560_key.get()._field_reference,_94560_key.get()._field_kind.get()._field_kind,_94549_d,(*_self_)._field_rang.get()._field_in_token);
}



inline void _1eee38c4a_check_slice(_1eee37c6b_RangeChecker* _self_) {
	_1eee384ec_set_size_key(&(*_self_));
	if (((*_self_)._field_rang.get()._field_key_b == nullptr) || _1e02c4ada_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident)) {
		return;
	}
	jule::Ptr<_1eee818ec_Slc> _96417_slc = _1eee7a121_slc((*_self_)._field_d.get()._field_kind.ptr());
	(*_self_)._field_kind.get()._field_key_b=_1eee382aa_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_96417_slc.get()._field_elem));
	_1eee38a19_check_range_expr_validity(&(*_self_), (*_self_)._field_d,(*_self_)._field_kind.get()._field_key_b,_96417_slc.get()._field_elem);
}



inline void _1eee38e8c_check_array(_1eee37c6b_RangeChecker* _self_) {
	_1eee384ec_set_size_key(&(*_self_));
	if (((*_self_)._field_rang.get()._field_key_b == nullptr) || _1e02c4ada_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident)) {
		return;
	}
	jule::Ptr<_1eee88e21_Arr> _97717_arr = _1eee79d46_arr((*_self_)._field_d.get()._field_kind.ptr());
	(*_self_)._field_kind.get()._field_key_b=_1eee382aa_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_97717_arr.get()._field_elem));
	_1eee38a19_check_range_expr_validity(&(*_self_), (*_self_)._field_d,(*_self_)._field_kind.get()._field_key_b,_97717_arr.get()._field_elem);
}



inline void _1eee391ce_check_map_key_a(_1eee37c6b_RangeChecker* _self_) {
	if (((*_self_)._field_rang.get()._field_key_a == nullptr) || _1e02c4ada_is_ignore_ident((*_self_)._field_rang.get()._field_key_a.get()._field_ident)) {
		return;
	}
	jule::Ptr<_1eee832d3_Map> _98917_m = _1eee7ac7b_map((*_self_)._field_d.get()._field_kind.ptr());
	(*_self_)._field_kind.get()._field_key_a=_1eee382aa_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_a);
	(*_self_)._field_kind.get()._field_key_a.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_98917_m.get()._field_key));
	jule::Ptr<_1eee43b89_Data> _99317_d = jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d)));
	_99317_d.get()._field_kind=_98917_m.get()._field_key;
	_1eee38a19_check_range_expr_validity(&(*_self_), _99317_d,(*_self_)._field_kind.get()._field_key_a,_98917_m.get()._field_key);
}



inline void _1eee39421_check_map_key_b(_1eee37c6b_RangeChecker* _self_) {
	if (((*_self_)._field_rang.get()._field_key_b == nullptr) || _1e02c4ada_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident)) {
		return;
	}
	jule::Ptr<_1eee832d3_Map> _100417_m = _1eee7ac7b_map((*_self_)._field_d.get()._field_kind.ptr());
	(*_self_)._field_kind.get()._field_key_b=_1eee382aa_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_100417_m.get()._field_val));
	jule::Ptr<_1eee43b89_Data> _100817_d = jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d)));
	_100817_d.get()._field_kind=_100417_m.get()._field_val;
	_1eee38a19_check_range_expr_validity(&(*_self_), _100817_d,(*_self_)._field_kind.get()._field_key_b,_100417_m.get()._field_val);
}



inline void _1eee39663_check_map(_1eee37c6b_RangeChecker* _self_) {
	_1eee391ce_check_map_key_a(&(*_self_));
	_1eee39421_check_map_key_b(&(*_self_));
}



inline void _1eee398a5_check_str(_1eee37c6b_RangeChecker* _self_) {
	_1eee384ec_set_size_key(&(*_self_));
	if (((*_self_)._field_rang.get()._field_key_b == nullptr) || _1e02c4ada_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident)) {
		return;
	}
	(*_self_)._field_kind.get()._field_key_b=_1eee382aa_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u8", 2)), 5)))));
}



inline jule::Bool _1eee39b80_check(_1eee37c6b_RangeChecker* _self_) {
	{
		
		if ((*_self_)._field_d.get()._field_kind.get()._field_variadic) {
			_case_begin_202baa337:;
		}
		else if ((_1eee7a121_slc((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202ba8b3d:;
			{
				_1eee38c4a_check_slice(&(*_self_));
				return true;
			}
		}
		else if ((_1eee79d46_arr((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202ba8ba4:;
			{
				_1eee38e8c_check_array(&(*_self_));
				return true;
			}
		}
		else if ((_1eee7ac7b_map((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202ba8c1a:;
			{
				_1eee39663_check_map(&(*_self_));
				return true;
			}
		}
		else {
			_case_begin_202ba8ac7:;
			{
				jule::Ptr<_1eee7bead_Prim> _104717_prim = _1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr());
				if ((_104717_prim != nullptr) && _1eee806dc_is_str(_104717_prim.ptr())) {
					_1eee398a5_check_str(&(*_self_));
					return true;
				}
			}
		}
		_match_end_202ba8a0b:;
	}
	_1eedcd2d8_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_rang.get()._field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee37c6b_RangeChecker _Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee3cde7_find_package(_1eee3c842_SymbolTable* _self_,jule::Str _2535_ident) {
	{
		auto &expr = (*_self_)._field_imports;
		auto it = expr.begin();
		_iter_begin_202bc8223:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202bc82de_pkg = *it;
			{
				if (_202bc82de_pkg.get()._field_ident == _2535_ident) {
					return _202bc82de_pkg;
				}
			}
			_iter_next_202bc8223:;
			++it;
			goto _iter_begin_202bc8223;
		}
		_iter_end_202bc8223:;
	}
	return nullptr;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eee3d29e_select_package(_1eee3c842_SymbolTable* _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> _3737_selector) {
	if ((_3737_selector == nullptr)) {
		return nullptr;
	}
	{
		auto &expr = (*_self_)._field_imports;
		auto it = expr.begin();
		_iter_begin_202bc970d:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _202bc9224_pkg = *it;
			{
				if (_3737_selector(_202bc9224_pkg)) {
					return _202bc9224_pkg;
				}
			}
			_iter_next_202bc970d:;
			++it;
			goto _iter_begin_202bc970d;
		}
		_iter_end_202bc970d:;
	}
	return nullptr;
}



inline jule::Ptr<_1eedeb24b_Var> _1eee3d733_find_var(_1eee3c842_SymbolTable* _self_,jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return _1eee404c1___find_var(&(*_self_), _5231_ident,_5243_cpp_linked,false);
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eee3dbb7_find_type_alias(_1eee3c842_SymbolTable* _self_,jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return _1eee40a32___find_type_alias(&(*_self_), _5838_ident,_5850_cpp_linked,false);
}



inline jule::Ptr<_1ee242032_Struct> _1eee3e14b_find_struct(_1eee3c842_SymbolTable* _self_,jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto &expr = (*_self_)._field_structs;
		auto it = expr.begin();
		_iter_begin_202bcd569:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _202bcd635_s = *it;
			{
				if ((_202bcd635_s.get()._field_ident == _6434_ident) && (_202bcd635_s.get()._field_cpp_linked == _6446_cpp_linked)) {
					return _202bcd635_s;
				}
			}
			_iter_next_202bcd569:;
			++it;
			goto _iter_begin_202bcd569;
		}
		_iter_end_202bcd569:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee2579b5_Fn> _1eee3e5d0_find_fn(_1eee3c842_SymbolTable* _self_,jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto &expr = (*_self_)._field_funcs;
		auto it = expr.begin();
		_iter_begin_202bd01d6:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202bd02a2_f = *it;
			{
				if ((_202bd02a2_f.get()._field_ident == _7530_ident) && (_202bd02a2_f.get()._field_cpp_linked == _7542_cpp_linked)) {
					return _202bd02a2_f;
				}
			}
			_iter_next_202bd01d6:;
			++it;
			goto _iter_begin_202bd01d6;
		}
		_iter_end_202bd01d6:;
	}
	return nullptr;
}



inline jule::Ptr<_1eec8627e_Trait> _1eee3e987_find_trait(_1eee3c842_SymbolTable* _self_,jule::Str _8633_ident) {
	{
		auto &expr = (*_self_)._field_traits;
		auto it = expr.begin();
		_iter_begin_202bd1a67:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> _202bd1b33_t = *it;
			{
				if (_202bd1b33_t.get()._field_ident == _8633_ident) {
					return _202bd1b33_t;
				}
			}
			_iter_next_202bd1a67:;
			++it;
			goto _iter_begin_202bd1a67;
		}
		_iter_end_202bd1a67:;
	}
	return nullptr;
}



inline jule::Ptr<_1eec889ac_Enum> _1eee3ed3e_find_enum(_1eee3c842_SymbolTable* _self_,jule::Str _9732_ident) {
	{
		auto &expr = (*_self_)._field_enums;
		auto it = expr.begin();
		_iter_begin_202bd2eec:;
		if (it != expr.end()) {
			jule::Ptr<_1eec889ac_Enum> _202bd30b8_e = *it;
			{
				if (_202bd30b8_e.get()._field_ident == _9732_ident) {
					return _202bd30b8_e;
				}
			}
			_iter_next_202bd2eec:;
			++it;
			goto _iter_begin_202bd2eec;
		}
		_iter_end_202bd2eec:;
	}
	return nullptr;
}



inline jule::Ptr<_1eedeb24b_Var> _1eee404c1___find_var(_1eee3c842_SymbolTable* _self_,jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I32 _11021_i = ((*_self_)._field_vars.len() - 1LL);
		for (; (_11021_i >= 0LL); (_11021_i)--) {
			{
				jule::Ptr<_1eedeb24b_Var> _11225_v = (*_self_)._field_vars[_11021_i];
				if ((_11225_v.get()._field_ident == _10829_ident) && (_11225_v.get()._field_cpp_linked == _10841_cpp_linked)) {
					return _11225_v;
				}
			}
		_iter_next_202bd4d78:;
		}
		_iter_end_202bd4d78:;
	} else {
		{
			auto &expr = (*_self_)._field_vars;
			auto it = expr.begin();
			_iter_begin_202bd63eb:;
			if (it != expr.end()) {
				jule::Ptr<_1eedeb24b_Var> _202bd6440_v = *it;
				{
					if ((_202bd6440_v.get()._field_ident == _10829_ident) && (_202bd6440_v.get()._field_cpp_linked == _10841_cpp_linked)) {
						return _202bd6440_v;
					}
				}
				_iter_next_202bd63eb:;
				++it;
				goto _iter_begin_202bd63eb;
			}
			_iter_end_202bd63eb:;
		}
	}
	return nullptr;
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eee40a32___find_type_alias(_1eee3c842_SymbolTable* _self_,jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I32 _12921_i = ((*_self_)._field_type_aliases.len() - 1LL);
		for (; (_12921_i >= 0LL); (_12921_i)--) {
			{
				jule::Ptr<_1eee75baa_TypeAlias> _13125_ta = (*_self_)._field_type_aliases[_12921_i];
				if ((_13125_ta.get()._field_ident == _12736_ident) && (_13125_ta.get()._field_cpp_linked == _12748_cpp_linked)) {
					return _13125_ta;
				}
			}
		_iter_next_202bd82cc:;
		}
		_iter_end_202bd82cc:;
	} else {
		{
			auto &expr = (*_self_)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_202bd9850:;
			if (it != expr.end()) {
				jule::Ptr<_1eee75baa_TypeAlias> _202bd9894_ta = *it;
				{
					if ((_202bd9894_ta.get()._field_ident == _12736_ident) && (_202bd9894_ta.get()._field_cpp_linked == _12748_cpp_linked)) {
						return _202bd9894_ta;
					}
				}
				_iter_next_202bd9850:;
				++it;
				goto _iter_begin_202bd9850;
			}
			_iter_end_202bd9850:;
		}
	}
	return nullptr;
}



inline jule::Any _1eee40eb6_def_by_ident(_1eee3c842_SymbolTable* _self_,jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto &expr = (*_self_)._field_vars;
		auto it = expr.begin();
		_iter_begin_202bdaa4e:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _202bdab1a_v = *it;
			{
				if ((_202bdab1a_v.get()._field_ident == _14831_ident) && (_202bdab1a_v.get()._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_202bdab1a_v);
				}
			}
			_iter_next_202bdaa4e:;
			++it;
			goto _iter_begin_202bdaa4e;
		}
		_iter_end_202bdaa4e:;
	}
	{
		auto &expr = (*_self_)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_202bda8a6:;
		if (it != expr.end()) {
			jule::Ptr<_1eee75baa_TypeAlias> _202bdad3a_ta = *it;
			{
				if ((_202bdad3a_ta.get()._field_ident == _14831_ident) && (_202bdad3a_ta.get()._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_202bdad3a_ta);
				}
			}
			_iter_next_202bda8a6:;
			++it;
			goto _iter_begin_202bda8a6;
		}
		_iter_end_202bda8a6:;
	}
	{
		auto &expr = (*_self_)._field_structs;
		auto it = expr.begin();
		_iter_begin_202bdb962:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _202bdbc1a_s = *it;
			{
				if ((_202bdbc1a_s.get()._field_ident == _14831_ident) && (_202bdbc1a_s.get()._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_202bdbc1a_s);
				}
			}
			_iter_next_202bdb962:;
			++it;
			goto _iter_begin_202bdb962;
		}
		_iter_end_202bdb962:;
	}
	{
		auto &expr = (*_self_)._field_funcs;
		auto it = expr.begin();
		_iter_begin_202bda862:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202bdcb50_f = *it;
			{
				if ((_202bdcb50_f.get()._field_ident == _14831_ident) && (_202bdcb50_f.get()._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_202bdcb50_f);
				}
			}
			_iter_next_202bda862:;
			++it;
			goto _iter_begin_202bda862;
		}
		_iter_end_202bda862:;
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto &expr = (*_self_)._field_traits;
		auto it = expr.begin();
		_iter_begin_202bdda41:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> _202bde844_t = *it;
			{
				if (_202bde844_t.get()._field_ident == _14831_ident) {
					return jule::Any(_202bde844_t);
				}
			}
			_iter_next_202bdda41:;
			++it;
			goto _iter_begin_202bdda41;
		}
		_iter_end_202bdda41:;
	}
	{
		auto &expr = (*_self_)._field_enums;
		auto it = expr.begin();
		_iter_begin_202bddb1d:;
		if (it != expr.end()) {
			jule::Ptr<_1eec889ac_Enum> _202be00c5_e = *it;
			{
				if (_202be00c5_e.get()._field_ident == _14831_ident) {
					return jule::Any(_202be00c5_e);
				}
			}
			_iter_next_202bddb1d:;
			++it;
			goto _iter_begin_202bddb1d;
		}
		_iter_end_202bddb1d:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1eee41527_is_duplicated_ident(_1eee3c842_SymbolTable* _self_,jule::U32 _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto &expr = (*_self_)._field_vars;
		auto it = expr.begin();
		_iter_begin_202be1956:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> &_202be1a55_v = *it;
			{
				if (((static_cast<jule::U32>(_202be1a55_v) != _19534_itself) && (_202be1a55_v.get()._field_ident == _19551_ident)) && (_202be1a55_v.get()._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_202be1956:;
			++it;
			goto _iter_begin_202be1956;
		}
		_iter_end_202be1956:;
	}
	{
		auto &expr = (*_self_)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_202be20d8:;
		if (it != expr.end()) {
			jule::Ptr<_1eee75baa_TypeAlias> &_202be1c86_ta = *it;
			{
				if (((static_cast<jule::U32>(_202be1c86_ta) != _19534_itself) && (_202be1c86_ta.get()._field_ident == _19551_ident)) && (_202be1c86_ta.get()._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_202be20d8:;
			++it;
			goto _iter_begin_202be20d8;
		}
		_iter_end_202be20d8:;
	}
	{
		auto &expr = (*_self_)._field_structs;
		auto it = expr.begin();
		_iter_begin_202be4195:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> &_202be302e_s = *it;
			{
				if (((static_cast<jule::U32>(_202be302e_s) != _19534_itself) && (_202be302e_s.get()._field_ident == _19551_ident)) && (_202be302e_s.get()._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_202be4195:;
			++it;
			goto _iter_begin_202be4195;
		}
		_iter_end_202be4195:;
	}
	{
		auto &expr = (*_self_)._field_funcs;
		auto it = expr.begin();
		_iter_begin_202be542c:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> &_202be4272_f = *it;
			{
				if (((static_cast<jule::U32>(_202be4272_f) != _19534_itself) && (_202be4272_f.get()._field_ident == _19551_ident)) && (_202be4272_f.get()._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_202be542c:;
			++it;
			goto _iter_begin_202be542c;
		}
		_iter_end_202be542c:;
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto &expr = (*_self_)._field_traits;
		auto it = expr.begin();
		_iter_begin_202be66b4:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> &_202be5471_t = *it;
			{
				if ((static_cast<jule::U32>(_202be5471_t) != _19534_itself) && (_202be5471_t.get()._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_202be66b4:;
			++it;
			goto _iter_begin_202be66b4;
		}
		_iter_end_202be66b4:;
	}
	{
		auto &expr = (*_self_)._field_enums;
		auto it = expr.begin();
		_iter_begin_202be562a:;
		if (it != expr.end()) {
			jule::Ptr<_1eec889ac_Enum> &_202be6a38_e = *it;
			{
				if ((static_cast<jule::U32>(_202be6a38_e) != _19534_itself) && (_202be6a38_e.get()._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_202be562a:;
			++it;
			goto _iter_begin_202be562a;
		}
		_iter_end_202be562a:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee3c842_SymbolTable _Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1eee440da_is_nil(_1eee43b89_Data* _self_) {
	return _1eee77c01_is_nil((*_self_)._field_kind.ptr());
}



inline jule::Bool _1eee443b5_is_void(_1eee43b89_Data* _self_) {
	return _1eee77ecb_void((*_self_)._field_kind.ptr());
}



inline jule::Bool _1eee44690_is_const(_1eee43b89_Data* _self_) {
	return ((*_self_)._field_constant != nullptr);
}



inline jule::Bool _1eee44a47_good_operand(_1eee43b89_Data* _self_,jule::Ptr<_1eee43b89_Data>& _9736_other) {
	return (((_1eee791db_prim(_9736_other.get()._field_kind.ptr()) == nullptr) || (!(_1eee809b7_is_any(_1eee791db_prim(_9736_other.get()._field_kind.ptr()).ptr())))) && (_1eee7a9a1_trt(_9736_other.get()._field_kind.ptr()) == nullptr)) && (!(_1eee77c01_is_nil((*_self_)._field_kind.ptr())));
}







std::ostream &operator<<(std::ostream &_Stream, _1eee43b89_Data _Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee44e98_Value _Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1eee462c9_push_err(_1eee45be1_Eval* _self_,_1e02c1d07_Token _12527_token,jule::Str _12541_fmt,jule::Slice<jule::Any> _12554_args) {
	_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _12527_token,_12541_fmt,_12554_args);
}



inline void _1eee466c5_push_suggestion(_1eee45be1_Eval* _self_,jule::Str _13034_fmt,jule::Slice<jule::Any> _13047_args) {
	_1eedcd6d4_push_suggestion((*_self_)._field_s.ptr(), _13034_fmt,_13047_args);
}



inline void _1eee46917_allow_builtin(_1eee45be1_Eval* _self_) {
	(*_self_)._field_dis_builtin=false;
}



inline void _1eee46b59_disallow_builtin(_1eee45be1_Eval* _self_) {
	(*_self_)._field_dis_builtin=true;
}



inline jule::Bool _1eee46e34_is_unsafe(_1eee45be1_Eval* _self_) {
	return (*_self_)._field_unsafety;
}



inline jule::Bool _1eee4720e_is_global(_1eee45be1_Eval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1eedca071_Sema>>()) {
			_case_begin_202c011d5:;
			{
				return true;
			}
		}
		else {
			_case_begin_202c0148d:;
			{
				return false;
			}
		}
		_match_end_202c0126d:;
	}
}



inline jule::Bool _1eee475b6_apply_numeric_prefix(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _15544_d) {
	if (((((_15544_d == nullptr) || (_15544_d.get()._field_cast_kind != nullptr)) || (!(_1eee44690_is_const(_15544_d.ptr())))) || (_1eee791db_prim(_15544_d.get()._field_kind.ptr()) == nullptr)) || ((*_self_)._field_prefix == nullptr)) {
		return false;
	}
	jule::Ptr<_1eee7bead_Prim> _16313_prim = _1eee791db_prim((*_self_)._field_prefix.ptr());
	if ((_16313_prim == nullptr)) {
		return false;
	}
	{
		
		if (_1eeda2411_is_float(_1eee7c387_to_str(_16313_prim.ptr()))) {
			_case_begin_202c04a79:;
			{
				_15544_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>((*((*_self_)._field_prefix)));
				_1eed22d76_set_f64(_15544_d.get()._field_constant.ptr(), static_cast<jule::F64>(_1eed21ccb_as_f64(_15544_d.get()._field_constant.ptr())));
			}
		}
		else if (_1eeda194e_is_sig_int(_1eee7c387_to_str(_16313_prim.ptr()))) {
			_case_begin_202c0478d:;
			{
				if ((!(_1eee19e07_sig_assignable(_1eee7c387_to_str(_16313_prim.ptr()),_15544_d)))) {
					return false;
				}
				_15544_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>((*((*_self_)._field_prefix)));
				_1eed220ea_set_i64(_15544_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_15544_d.get()._field_constant.ptr())));
			}
		}
		else if (_1eeda1ca1_is_unsig_int(_1eee7c387_to_str(_16313_prim.ptr()))) {
			_case_begin_202c04804:;
			{
				if ((!(_1eee2a0b0_unsig_assignable(_1eee7c387_to_str(_16313_prim.ptr()),_15544_d)))) {
					return false;
				}
				_15544_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>((*((*_self_)._field_prefix)));
				_1eed22419_set_u64(_15544_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_15544_d.get()._field_constant.ptr())));
			}
		}
		_match_end_202c049be:;
	}
	return true;
}



inline jule::Ptr<_1eee43b89_Data> _1eee47891_lit_nil(_1eee45be1_Eval* _self_) {
	jule::Ptr<_1eed1e24b_Const> _19217_constant = static__1eed20181_new_nil();
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),nullptr)),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(_19217_constant)),false,_19217_constant));
}



inline jule::Ptr<_1eee43b89_Data> _1eee47c48_lit_str(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr>& _20323_l) {
	jule::Str _20417_s = _20323_l.get()._field_value.slice(1LL,(_20323_l.get()._field_value.len() - 1LL));
	if (_1e02c33e1_is_raw_str(_20323_l.get()._field_value)) {
		_20417_s=_1eee28de4_to_raw_str(static_cast<jule::Slice<jule::U8>>(_20417_s));
	} else {
		_20417_s=_1eee29246_to_str(static_cast<jule::Slice<jule::U8>>(_20417_s));
	}
	jule::Ptr<_1eed1e24b_Const> _21017_constant = static__1eed1eb42_new_str(_20417_s);
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("str", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(_21017_constant)),false,_21017_constant));
}



inline jule::Ptr<_1eee43b89_Data> _1eee48100_lit_bool(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr>& _22424_l) {
	jule::Ptr<_1eed1e24b_Const> _22517_constant = static__1eed1e834_new_bool((_22424_l.get()._field_value == jule::Str("true", 4)));
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(_22517_constant)),false,_22517_constant));
}



inline jule::Ptr<_1eee43b89_Data> _1eee484a7_lit_rune(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr>& _23824_l) {
	
	
	jule::Str _24213_lt = _23824_l.get()._field_value.slice(1LL,(_23824_l.get()._field_value.len() - 1LL));
	jule::I32 _24313_r = _1eee0607a_to_rune(static_cast<jule::Slice<jule::U8>>(_24213_lt));
	jule::Ptr<_1eee43b89_Data> _24417_data = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,static__1eed1e46b_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_24313_r)))));
	jule::Bool _25113_is_ascii = _1eee05a91_is_ascii(_24313_r);
	if (_25113_is_ascii) {
		_24417_data.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u8", 2)), 5)));
	} else {
		_24417_data.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i32", 3)), 5)));
	}
	_24417_data.get()._field_model=jule::Any(jule::new_ptr<_1ee253571_RuneExprModel>(_1ee253571_RuneExprModel(_24313_r)));
	_24417_data.get()._field_is_rune=true;
	return _24417_data;
}



inline jule::Ptr<_1eee43b89_Data> _1eee4885e_lit_float(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr>& _26725_l) {
	
	jule::F64 _27013_f = ({
		auto except = _1eec7ba38_parse_float(_26725_l.get()._field_value,64LL);
		(except.ok()) ? (except.result) : ({
			jule::MAX_F64;
		});
	});
	jule::Ptr<_1eed1e24b_Const> _27117_constant = static__1eed1ee50_new_f64(_27013_f);
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(_27117_constant)),false,_27117_constant));
}



inline jule::Ptr<_1eee43b89_Data> _1eee48c16_lit_int(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr>& _28527_l) {
	
	jule::Str _28817_lit = _28527_l.get()._field_value;
	jule::I32 _28917_base = 0LL;
	{
		
		if (_208be3dd6_has_prefix(_28817_lit,jule::Str("0x", 2))) {
			_case_begin_202c1a4b8:;
			{
				(_28817_lit).mut_slice(2LL);
				_28917_base=16LL;
			}
		}
		else if (_208be3dd6_has_prefix(_28817_lit,jule::Str("0b", 2))) {
			_case_begin_202c1a661:;
			{
				(_28817_lit).mut_slice(2LL);
				_28917_base=2LL;
			}
		}
		else if (_208be3dd6_has_prefix(_28817_lit,jule::Str("0o", 2))) {
			_case_begin_202c1a1aa:;
			{
				(_28817_lit).mut_slice(2LL);
				_28917_base=8LL;
			}
		}
		else if ((_28817_lit[0LL] == '0') && (_28817_lit.len() > 1LL)) {
			_case_begin_202c1a221:;
			{
				(_28817_lit).mut_slice(1LL);
				_28917_base=8LL;
			}
		}
		else {
			_case_begin_202c1a144:;
			{
				_28917_base=10LL;
			}
		}
		_match_end_202c1a0de:;
	}
	jule::Ptr<_1eee43b89_Data> _30817_d = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1eed1e24b_Const>()));
	jule::Bool _31417_ok = true;
	jule::I64 _31513_sig = ({
		auto except = _1eec79c56_parse_int(_28817_lit,_28917_base,64LL);
		(except.ok()) ? (except.result) : ({
			_31417_ok=false;
			0LL;
		});
	});
	if (_31417_ok) {
		_30817_d.get()._field_constant=static__1eed1e46b_new_i64(_31513_sig);
		_30817_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5)));
	} else {
		jule::U64 _32517_unsig = ({
			auto except = _1eec79ae1_parse_uint(_28817_lit,_28917_base,64LL);
			(except.ok()) ? (except.result) : ({
				_1eee462c9_push_err(&(*_self_), _28527_l.get()._field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
				_1eee466c5_push_suggestion(&(*_self_), jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
				jule::MAX_U64;
			});
		});
		_30817_d.get()._field_constant=static__1eed1e5d1_new_u64(_32517_unsig);
		_30817_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("uint", 4)), 5)));
	}
	_30817_d.get()._field_model=jule::Any(_30817_d.get()._field_constant);
	if ((!(_1eee475b6_apply_numeric_prefix(&(*_self_), _30817_d)))) {
		_1eee70b83_fit_bitsize(_30817_d);
	}
	return _30817_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee490bd_lit_num(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr>& _34627_l) {
	{
		
		if (_1e02c41b1_is_float(_34627_l.get()._field_value)) {
			_case_begin_202c2578c:;
			{
				return _1eee4885e_lit_float(&(*_self_), _34627_l);
			}
		}
		else {
			_case_begin_202c24b32:;
			{
				return _1eee48c16_lit_int(&(*_self_), _34627_l);
			}
		}
		_match_end_202c24a88:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee49475_eval_lit(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182404_LitExpr> _35527_lit) {
	{
		
		if (_1e018e8c8_is_nil(_35527_lit.ptr())) {
			_case_begin_202c26e0e:;
			{
				return _1eee47891_lit_nil(&(*_self_));
			}
		}
		else if (_1e02c30d3_is_str(_35527_lit.get()._field_value)) {
			_case_begin_202c26ea8:;
			{
				return _1eee47c48_lit_str(&(*_self_), _35527_lit);
			}
		}
		else if (_1e02c3da3_is_bool(_35527_lit.get()._field_value)) {
			_case_begin_202c27030:;
			{
				return _1eee48100_lit_bool(&(*_self_), _35527_lit);
			}
		}
		else if (_1e02c36ee_is_rune(_35527_lit.get()._field_value)) {
			_case_begin_202c26c00:;
			{
				return _1eee484a7_lit_rune(&(*_self_), _35527_lit);
			}
		}
		else if (_1e02c44be_is_num(_35527_lit.get()._field_value)) {
			_case_begin_202c26c77:;
			{
				return _1eee490bd_lit_num(&(*_self_), _35527_lit);
			}
		}
		else {
			_case_begin_202c2678d:;
			{
				return nullptr;
			}
		}
		_match_end_202c266e4:;
	}
}



inline jule::Any _1eee4982c_find_builtins(_1eee45be1_Eval* _self_,jule::Str _37232_ident) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1eedc08c4_ImportInfo>>()) {
			_case_begin_202c2a53e:;
			{
				jule::Any _37521_def = _1eee7090d_find_builtins_import(_37232_ident,(*_self_)._field_lookup.operator jule::Ptr<_1eedc08c4_ImportInfo>());
				if (_37521_def != jule::Any(jule::Any(nullptr))) {
					return _37521_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedca071_Sema>>()) {
			_case_begin_202c2a5b6:;
			{
				jule::Any _38021_def = _1eee717ee_find_builtins_sema(_37232_ident,(*_self_)._field_lookup.operator jule::Ptr<_1eedca071_Sema>());
				if (_38021_def != jule::Any(jule::Any(nullptr))) {
					return _38021_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
			_case_begin_202c2a63d:;
			{
				jule::Any _38521_def = _1eee717ee_find_builtins_sema(_37232_ident,(*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>().get()._field_s);
				if (_38521_def != jule::Any(jule::Any(nullptr))) {
					return _38521_def;
				}
			}
		}
		_match_end_202c2a30d:;
	}
	if ((*_self_)._field_dis_builtin) {
		return jule::Any(nullptr);
	}
	return _1eeea40d4_find_builtin_def(_37232_ident);
}



inline jule::Any _1eee49cb1_get_def(_1eee45be1_Eval* _self_,jule::Str _39626_ident,jule::Bool _39638_cpp_linked) {
	if ((!(_39638_cpp_linked))) {
		jule::Ptr<_1eec889ac_Enum> _39821_enm = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee99151_find_enum((*_self_)._field_lookup, _39626_ident);
		if ((_39821_enm != nullptr)) {
			return jule::Any(_39821_enm);
		}
	}
	jule::Ptr<_1eedeb24b_Var> _40417_v = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee97a45_find_var((*_self_)._field_lookup, _39626_ident,_39638_cpp_linked);
	if ((_40417_v != nullptr)) {
		return jule::Any(_40417_v);
	}
	jule::Ptr<_1ee2579b5_Fn> _40917_f = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee988e2_find_fn((*_self_)._field_lookup, _39626_ident,_39638_cpp_linked);
	if ((_40917_f != nullptr)) {
		return jule::Any(_40917_f);
	}
	jule::Ptr<_1ee242032_Struct> _41417_s = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee9845d_find_struct((*_self_)._field_lookup, _39626_ident,_39638_cpp_linked);
	if ((_41417_s != nullptr)) {
		return jule::Any(_41417_s);
	}
	jule::Ptr<_1eee75baa_TypeAlias> _41917_ta = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee97ec9_find_type_alias((*_self_)._field_lookup, _39626_ident,_39638_cpp_linked);
	if ((_41917_ta != nullptr)) {
		return jule::Any(_41917_ta);
	}
	return _1eee4982c_find_builtins(&(*_self_), _39626_ident);
}



inline void _1eee4a0d0_push_reference(_1eee45be1_Eval* _self_,jule::Ptr<_1ee25edda_ReferenceStack>& _42738_references) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
			_case_begin_202c35703:;
			{
				jule::Ptr<_1eeda5953_ScopeChecker> _43021_sc = _1eeda7d95_get_root((*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>());
				if ((!(_1ee2610b7_exist_1(_42738_references.ptr(), _43021_sc.get()._field_owner)))) {
					_1ee260c10_push(_42738_references.ptr(), jule::Any(_43021_sc.get()._field_owner));
				}
			}
		}
		else {
			_case_begin_202c35109:;
			{
				if (((*_self_)._field_owner != nullptr) && (!(_1ee2610b7_exist_0(_42738_references.ptr(), (*_self_)._field_owner)))) {
					_1ee260c10_push(_42738_references.ptr(), jule::Any((*_self_)._field_owner));
				}
			}
		}
		_match_end_202c34dd9:;
	}
}



inline void _1eee4a3ee_push_reference_to_fn(_1eee45be1_Eval* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _44144_f) {
	_1eee4a0d0_push_reference(&(*_self_), _44144_f.get()._field_references);
}



inline void _1eee4a71d_push_reference_to_var(_1eee45be1_Eval* _self_,jule::Ptr<_1eedeb24b_Var>& _44545_v) {
	if ((_44545_v.get()._field_references != nullptr)) {
		_1eee4a0d0_push_reference(&(*_self_), _44545_v.get()._field_references);
	}
}



inline void _1eee4aa81_push_reference_to_struct(_1eee45be1_Eval* _self_,jule::Ptr<_1ee24550d_StructIns>& _45148_s) {
	_1eee4a0d0_push_reference(&(*_self_), _45148_s.get()._field_references);
}



inline jule::Ptr<_1eee43b89_Data> _1eee4ae27___eval_enum(_1eee45be1_Eval* _self_,jule::Ptr<_1eec889ac_Enum> _45530_enm) {
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_45530_enm, 3))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),true,nullptr));
}



inline jule::Ptr<_1eee43b89_Data> _1eee4b3ab_eval_enum(_1eee45be1_Eval* _self_,jule::Ptr<_1eec889ac_Enum> _46732_enm,_1e02c1d07_Token _46744_error_token) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _46732_enm.get()._field_public,_46732_enm.get()._field_token)))) {
		_1eee462c9_push_err(&(*_self_), _46744_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_46732_enm.get()._field_ident)}));
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _1eee4ae27___eval_enum(&(*_self_), _46732_enm);
}



inline jule::Ptr<_1eee43b89_Data> _1eee4b763___eval_struct(_1eee45be1_Eval* _self_,jule::Ptr<_1ee24550d_StructIns> _47732_s) {
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_47732_s, 0))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(_47732_s)),true,nullptr));
}



inline jule::Ptr<_1eee43b89_Data> _1eee4bbe7_eval_struct(_1eee45be1_Eval* _self_,jule::Ptr<_1ee24550d_StructIns> _49034_s,_1e02c1d07_Token _49049_error_token) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _49034_s.get()._field_decl.get()._field_public,_49034_s.get()._field_decl.get()._field_token)))) {
		_1eee462c9_push_err(&(*_self_), _49049_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_49034_s.get()._field_decl.get()._field_ident)}));
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1eee4c49a_check_deprecated(&(*_self_), _49034_s.get()._field_decl.get()._field_directives,_49049_error_token);
	return _1eee4b763___eval_struct(&(*_self_), _49034_s);
}



inline jule::Ptr<_1eee43b89_Data> _1eee4c09e_eval_fn_ins(_1eee45be1_Eval* _self_,jule::Ptr<_1ee25b4ad_FnIns> _50230_f) {
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_50230_f, 1))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(_50230_f)),false,nullptr));
}



inline void _1eee4c49a_check_deprecated(_1eee45be1_Eval* _self_,jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _51540_directives,_1e02c1d07_Token _51582_tok) {
	if (_1eee46e34_is_unsafe(&(*_self_))) {
		return;
	}
	jule::Ptr<_1e02812b1_Directive> _52013_d = _1eee704ce_find_directive(_51540_directives,jule::Str("deprecated", 10));
	if ((_52013_d != nullptr)) {
		if ((_52013_d.get()._field_args.len() == 0LL)) {
			_1eee462c9_push_err(&(*_self_), _51582_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			_1eee462c9_push_err(&(*_self_), _51582_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(_52013_d.get()._field_args[0LL]._field_kind)}));
		}
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee4c92e_eval_fn(_1eee45be1_Eval* _self_,jule::Ptr<_1ee2579b5_Fn> _53130_f,_1e02c1d07_Token _53138_error_token) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _53130_f.get()._field_public,_53130_f.get()._field_token)))) {
		_1eee462c9_push_err(&(*_self_), _53138_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_53130_f.get()._field_ident)}));
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1eee4c49a_check_deprecated(&(*_self_), _53130_f.get()._field_directives,_53138_error_token);
	jule::Ptr<_1ee25b4ad_FnIns> _54017_ins = _1ee259a50_instance(_53130_f);
	_1eee4a3ee_push_reference_to_fn(&(*_self_), _54017_ins);
	return _1eee4c09e_eval_fn_ins(&(*_self_), _54017_ins);
}



inline void _1eee4ce4b_push_illegal_cycle_error(_1eee45be1_Eval* _self_,jule::Ptr<_1eedeb24b_Var>& _54544_v1,jule::Ptr<_1eedeb24b_Var>& _54555_v2,jule::Str& _54570_message) {
	
	jule::Str _54813_refers_to = _208de2722_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_54544_v1.get()._field_ident),jule::Any(_54555_v2.get()._field_ident)}));
	(_54570_message).buffer.insert(0, (((_208bde08a_repeat(jule::Str(" ", 1),4LL) + _54813_refers_to) + jule::Str("\n", 1))));
}



inline jule::Bool _1eee4d3be_check_cross_cycle(_1eee45be1_Eval* _self_,jule::Ptr<_1eedeb24b_Var>& _55237_v,jule::Str& _55251_message) {
	{
		auto &expr = _55237_v.get()._field_depends;
		auto it = expr.begin();
		_iter_begin_202c546ab:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> &_202c54777_d = *it;
			{
				if (_202c54777_d == (*_self_)._field_owner) {
					_1eee4ce4b_push_illegal_cycle_error(&(*_self_), _55237_v,_202c54777_d,_55251_message);
					return false;
				}
				if ((!(_1eee4d3be_check_cross_cycle(&(*_self_), _202c54777_d,_55251_message)))) {
					_1eee4ce4b_push_illegal_cycle_error(&(*_self_), _55237_v,_202c54777_d,_55251_message);
					return false;
				}
			}
			_iter_next_202c546ab:;
			++it;
			goto _iter_begin_202c546ab;
		}
		_iter_end_202c546ab:;
	}
	return true;
}



inline jule::Bool _1eee4d853_check_illegal_cycles(_1eee45be1_Eval* _self_,jule::Ptr<_1eedeb24b_Var>& _57144_v,_1e02c1d07_Token _57153_decl_token) {
	jule::Bool _57174_ok = jule::Bool();
	if (((*_self_)._field_owner == nullptr)) {
		_57174_ok = true;
		return _57174_ok;
	}
	if ((*_self_)._field_owner == _57144_v) {
		_1eee462c9_push_err(&(*_self_), (*_self_)._field_owner.get()._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*_self_)._field_owner.get()._field_ident)}));
		_57174_ok = false;
		return _57174_ok;
	}
	jule::Str _58317_message = jule::Str();
	if ((!(_1eee4d3be_check_cross_cycle(&(*_self_), _57144_v,_58317_message)))) {
		jule::Str _58621_err_msg = _58317_message;
		_58317_message=jule::Str();
		_1eee4ce4b_push_illegal_cycle_error(&(*_self_), (*_self_)._field_owner,_57144_v,_58317_message);
		_58621_err_msg=_58621_err_msg + _58317_message;
		_1eee462c9_push_err(&(*_self_), _57153_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_58621_err_msg)}));
		_57174_ok = false;
		return _57174_ok;
	}
	(*_self_)._field_owner.get()._field_depends = jule::alloc_for_append((*_self_)._field_owner.get()._field_depends,1);(*_self_)._field_owner.get()._field_depends.__push(_57144_v);
	_57174_ok = true;
	return _57174_ok;
}



inline jule::Ptr<_1eee43b89_Data> _1eee4dcd7_eval_var(_1eee45be1_Eval* _self_,jule::Ptr<_1eedeb24b_Var> _59831_v,_1e02c1d07_Token _59840_error_token) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _59831_v.get()._field_public,_59831_v.get()._field_token)))) {
		_1eee462c9_push_err(&(*_self_), _59840_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_59831_v.get()._field_ident)}));
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1eee4c49a_check_deprecated(&(*_self_), _59831_v.get()._field_directives,_59840_error_token);
	_59831_v.get()._field_used=true;
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1eedca071_Sema>>()) {
			_case_begin_203186c20:;
			{
				jule::Bool _61217_ok = _1eee4d853_check_illegal_cycles(&(*_self_), _59831_v,_59840_error_token);
				if ((!(_61217_ok))) {
					return nullptr;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
			_case_begin_203186cdb:;
			{
				if ((!(_59831_v.get()._field_reference)) || _1eee46e34_is_unsafe(&(*_self_))) {
					goto _match_end_203186bba;
				}
				jule::Ptr<_1eeda5953_ScopeChecker> _62021_s = (*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>();
				while ((_62021_s.get()._field_owner == nullptr) && (_62021_s.get()._field_parent != nullptr)) {
					{
						_62021_s=_62021_s.get()._field_parent;
					}
				_iter_next_203188b23:;
				}
				_iter_end_203188b23:;
				if (((_62021_s.get()._field_owner != nullptr) && _62021_s.get()._field_owner.get()._field_anon) && (_59831_v.get()._field_scope != _62021_s.get()._field_owner.get()._field_scope)) {
					_1eee462c9_push_err(&(*_self_), _59840_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>({jule::Any(_59831_v.get()._field_ident)}));
				}
			}
		}
		_match_end_203186bba:;
	}
	_1eee4a71d_push_reference_to_var(&(*_self_), _59831_v);
	if ((!(_59831_v.get()._field_cpp_linked)) && ((_59831_v.get()._field_value == nullptr) || (_59831_v.get()._field_value.get()._field_data == nullptr))) {
		if (_59831_v.get()._field_constant) {
			_1eede2770_check_type_var((*_self_)._field_s, _59831_v,jule::Trait<_1eee992c7_Lookup>((*_self_)._field_s, 3));
			if ((_59831_v.get()._field_value.get()._field_data == nullptr)) {
				return nullptr;
			}
		}
	}
	if ((_59831_v.get()._field_kind == nullptr) || (_59831_v.get()._field_kind.get()._field_kind == nullptr)) {
		if ((_59831_v.get()._field_scope != nullptr)) {
			return nullptr;
		}
		_1eede2770_check_type_var((*_self_)._field_s, _59831_v,(*_self_)._field_lookup);
		if ((_59831_v.get()._field_kind == nullptr) || (_59831_v.get()._field_kind.get()._field_kind == nullptr)) {
			return nullptr;
		}
	}
	jule::Ptr<_1eee43b89_Data> _66017_d = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(_59831_v.get()._field_kind.get()._field_kind,jule::Ptr<_1eee76b45_TypeKind>(),_59831_v.get()._field_mutable,_59831_v.get()._field_reference,(!(_59831_v.get()._field_constant)),jule::Bool(),jule::Any(jule::Any(_59831_v)),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
	if (((!(_59831_v.get()._field_cpp_linked)) && _1eedeb669_is_initialized(_59831_v.ptr())) && (_59831_v.get()._field_value.get()._field_data != nullptr)) {
		_66017_d.get()._field_is_rune=_59831_v.get()._field_value.get()._field_data.get()._field_is_rune;
	}
	if (_59831_v.get()._field_constant && (_59831_v.get()._field_value.get()._field_data.get()._field_constant != nullptr)) {
		_66017_d.get()._field_constant=jule::new_ptr<_1eed1e24b_Const>((*(_59831_v.get()._field_value.get()._field_data.get()._field_constant)));
		_66017_d.get()._field_model=jule::Any(_66017_d.get()._field_constant);
	}
	if (_1eee44690_is_const(_66017_d.ptr())) {
		_1eee475b6_apply_numeric_prefix(&(*_self_), _66017_d);
	}
	return _66017_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee4e26b_eval_type_alias(_1eee45be1_Eval* _self_,jule::Ptr<_1eee75baa_TypeAlias> _68438_ta,_1e02c1d07_Token _68454_error_token) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _68438_ta.get()._field_public,_68438_ta.get()._field_token)))) {
		_1eee462c9_push_err(&(*_self_), _68454_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_68438_ta.get()._field_ident)}));
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_68438_ta.get()._field_used=true;
	jule::Trait<_1eee76606_Kind> _69317_kind = _68438_ta.get()._field_kind.get()._field_kind.get()._field_kind;
	jule::Ptr<_1eee43b89_Data> _69417_d = nullptr;
	{
		auto &_match_expr{ _69317_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24550d_StructIns>>()) {
			_case_begin_2025e27ca:;
			{
				_69417_d=_1eee4b763___eval_struct(&(*_self_), _69317_kind.operator jule::Ptr<_1ee24550d_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eec889ac_Enum>>()) {
			_case_begin_2025e1455:;
			{
				_69417_d=_1eee4ae27___eval_enum(&(*_self_), _69317_kind.operator jule::Ptr<_1eec889ac_Enum>());
			}
		}
		else {
			_case_begin_2025e17b8:;
			{
				_69417_d=jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_68438_ta.get()._field_kind.get()._field_kind.get()._field_kind)),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ptr<_1eed1e24b_Const>()));
				if (_68438_ta.get()._field_cpp_linked) {
					_69417_d.get()._field_kind.get()._field_cpp_ident=_68438_ta.get()._field_ident;
				} else {
					_69417_d.get()._field_kind.get()._field_cpp_ident=_68438_ta.get()._field_kind.get()._field_kind.get()._field_cpp_ident;
				}
				_69417_d.get()._field_model=jule::Any(_69417_d.get()._field_kind);
			}
		}
		_match_end_2025e1763:;
	}
	_69417_d.get()._field_kind.get()._field_generic=_68438_ta.get()._field_generic;
	return _69417_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee4e700_eval_def(_1eee45be1_Eval* _self_,jule::Any _71831_def,_1e02c1d07_Token _71841_ident) {
	{
		auto &_match_expr{ _71831_def };
		
		if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_2025e5e82:;
			{
				return _1eee4dcd7_eval_var(&(*_self_), _71831_def.operator jule::Ptr<_1eedeb24b_Var>(),_71841_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eec889ac_Enum>>()) {
			_case_begin_2025e5ee8:;
			{
				return _1eee4b3ab_eval_enum(&(*_self_), _71831_def.operator jule::Ptr<_1eec889ac_Enum>(),_71841_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2025e605e:;
			{
				return _1eee4bbe7_eval_struct(&(*_self_), _1ee2424c7_instance(_71831_def.operator jule::Ptr<_1ee242032_Struct>()),_71841_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2579b5_Fn>>()) {
			_case_begin_2025e60d6:;
			{
				jule::Ptr<_1ee2579b5_Fn> _72721_f = _71831_def.operator jule::Ptr<_1ee2579b5_Fn>();
				if ((_72721_f.get()._field_ident != jule::Str("init", 4))) {
					return _1eee4c92e_eval_fn(&(*_self_), _72721_f,_71841_ident);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee25b4ad_FnIns>>()) {
			_case_begin_2025e615d:;
			{
				return _1eee4c09e_eval_fn_ins(&(*_self_), _71831_def.operator jule::Ptr<_1ee25b4ad_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee75baa_TypeAlias>>()) {
			_case_begin_2025e61d5:;
			{
				return _1eee4e26b_eval_type_alias(&(*_self_), _71831_def.operator jule::Ptr<_1eee75baa_TypeAlias>(),_71841_ident);
			}
		}
		_match_end_2025e5d2d:;
	}
	_1eee462c9_push_err(&(*_self_), _71841_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_71841_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_1eee43b89_Data> _1eee4eaa7_eval_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1e0182a64_IdentExpr> _74029_ident) {
	jule::Any _74117_def = _1eee49cb1_get_def(&(*_self_), _74029_ident.get()._field_ident,_74029_ident.get()._field_cpp_linked);
	return _1eee4e700_eval_def(&(*_self_), _74117_def,_74029_ident.get()._field_token);
}



inline jule::Ptr<_1eee43b89_Data> _1eee4ee5e_eval_unary(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e0182c84_UnaryExpr> _74534_u) {
	_1eee664e7_UnaryEval _74617_unary = static__1eee66a14_new(_self_);
	return _1eee681b9_eval(&_74617_unary, _74534_u);
}



inline jule::Ptr<_1eee43b89_Data> _1eee50316_eval_variadic(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e0182ea4_VariadicExpr> _75037_v) {
	if ((_75037_v.get()._field_expr == nullptr)) {
		_1eee462c9_push_err(_self_.ptr(), _75037_v.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eee76b45_TypeKind> _75617_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_75617_prefix;
	});
	jule::Ptr<_1eee43b89_Data> _76017_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_75037_v.get()._field_expr));
	if ((_76017_d == nullptr)) {
		return nullptr;
	}
	if ((!(_1eee78e11_variadicable(_76017_d.get()._field_kind.ptr())))) {
		_1eee462c9_push_err(_self_.ptr(), _75037_v.get()._field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_76017_d.get()._field_kind.ptr()))}));
		return nullptr;
	}
	jule::Ptr<_1eee818ec_Slc> _77013_slc = _1eee7a121_slc(_76017_d.get()._field_kind.ptr());
	_76017_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(_77013_slc.get()._field_elem.get()._field_cpp_ident,_77013_slc.get()._field_elem.get()._field_generic,true,_77013_slc.get()._field_elem.get()._field_kind));
	return _76017_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee506bd_eval_unsafe(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e0182624_UnsafeExpr> _78035_u) {
	jule::Bool _78113_unsafety = _self_.get()._field_unsafety;
	_self_.get()._field_unsafety=true;
	jule::Ptr<_1eee43b89_Data> _78417_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_78035_u.get()._field_expr));
	_self_.get()._field_unsafety=_78113_unsafety;
	return _78417_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee50a75_eval_arr(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d8758_SliceExpr> _79132_s) {
	jule::Ptr<_1eee88e21_Arr> _79317_pt = _1eee79d46_arr(_self_.get()._field_prefix.ptr());
	jule::Ptr<_1eee88e21_Arr> _79517_arr = jule::new_ptr<_1eee88e21_Arr>(_1eee88e21_Arr(false,0LL,_79317_pt.get()._field_elem));
	jule::Bool _80117_filled = false;
	if ((_79132_s.get()._field_exprs.len() == 2LL)) {
		{
			auto &_match_expr{ _79132_s.get()._field_exprs[1LL].get()._field_kind };
			
			if (_match_expr.type_is<jule::Ptr<_1e0182ea4_VariadicExpr>>()) {
				_case_begin_202609ced:;
				{
					if ((_79132_s.get()._field_exprs[1LL].get()._field_kind.operator jule::Ptr<_1e0182ea4_VariadicExpr>().get()._field_expr != nullptr)) {
						goto _match_end_202609c76;
					}
					if (_79317_pt.get()._field_auto) {
						_1eee462c9_push_err(_self_.ptr(), _79132_s.get()._field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					}
					_80117_filled=true;
					_79132_s.get()._field_exprs=_79132_s.get()._field_exprs.slice(0LL,1LL);
				}
			}
			_match_end_202609c76:;
		}
	}
	_79517_arr.get()._field_n=static_cast<jule::I32>(_79132_s.get()._field_exprs.len());
	if ((!(_79317_pt.get()._field_auto))) {
		if (_79517_arr.get()._field_n > _79317_pt.get()._field_n) {
			_1eee462c9_push_err(_self_.ptr(), _79132_s.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if (_79517_arr.get()._field_n < _79317_pt.get()._field_n) {
			_79517_arr.get()._field_n=_79317_pt.get()._field_n;
		}
	}
	jule::Ptr<_1ee24da55_ArrayExprModel> _83017_model = jule::new_ptr<_1ee24da55_ArrayExprModel>(_1ee24da55_ArrayExprModel(_79517_arr,jule::Slice<jule::Any>()));
	if (_80117_filled) {
		_83017_model.get()._field_elems=jule::Slice<jule::Any>::alloc(0LL,2LL);
	} else {
		_83017_model.get()._field_elems=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I32>(_79132_s.get()._field_exprs.len()));
	}
	jule::Ptr<_1eee76b45_TypeKind> _83917_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=_79517_arr.get()._field_elem;
	{
		auto &expr = _79132_s.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_202610c27:;
		if (it != expr.end()) {
			jule::Ptr<_1e0181a63_Expr> _2026110bd_elem = *it;
			{
				jule::Ptr<_1eee43b89_Data> _84221_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_2026110bd_elem));
				if ((_84221_d == nullptr)) {
					goto _iter_next_202610c27;
				}
				_1eedd482d_check_assign_type(_self_.get()._field_s, false,_79517_arr.get()._field_elem,_84221_d,_79132_s.get()._field_token);
				_83017_model.get()._field_elems = jule::alloc_for_append(_83017_model.get()._field_elems,1);_83017_model.get()._field_elems.__push(_84221_d.get()._field_model);
			}
			_iter_next_202610c27:;
			++it;
			goto _iter_begin_202610c27;
		}
		_iter_end_202610c27:;
	}
	_self_.get()._field_prefix=_83917_prefix;
	if (_80117_filled) {
		_83017_model.get()._field_elems = jule::alloc_for_append(_83017_model.get()._field_elems,1);_83017_model.get()._field_elems.__push(jule::Any(nullptr));
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_79517_arr, 10))),jule::Ptr<_1eee76b45_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_83017_model)),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee51009_eval_exp_slc(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d8758_SliceExpr> _86636_s,jule::Ptr<_1eee76b45_TypeKind> _86655_elem_type) {
	jule::Ptr<_1eee818ec_Slc> _86717_slc = jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(_86655_elem_type));
	jule::Ptr<_1ee24a458_SliceExprModel> _87117_model = jule::new_ptr<_1ee24a458_SliceExprModel>(_1ee24a458_SliceExprModel(_86655_elem_type,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I32>(_86636_s.get()._field_exprs.len()))));
	jule::Ptr<_1eee76b45_TypeKind> _87617_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=_86717_slc.get()._field_elem;
	{
		auto &expr = _86636_s.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_2026169ca:;
		if (it != expr.end()) {
			jule::Ptr<_1e0181a63_Expr> _202616aeb_elem = *it;
			{
				jule::Ptr<_1eee43b89_Data> _87921_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_202616aeb_elem));
				if ((_87921_d == nullptr)) {
					goto _iter_next_2026169ca;
				}
				_1eedd482d_check_assign_type(_self_.get()._field_s, false,_86717_slc.get()._field_elem,_87921_d,_86636_s.get()._field_token);
				_87117_model.get()._field_elems = jule::alloc_for_append(_87117_model.get()._field_elems,1);_87117_model.get()._field_elems.__push(_87921_d.get()._field_model);
			}
			_iter_next_2026169ca:;
			++it;
			goto _iter_begin_2026169ca;
		}
		_iter_end_2026169ca:;
	}
	_self_.get()._field_prefix=_87617_prefix;
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_86717_slc, 7))),jule::Ptr<_1eee76b45_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_87117_model)),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee513b1_eval_slice_expr(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d8758_SliceExpr> _89739_s) {
	if ((_self_.get()._field_prefix != nullptr)) {
		{
			
			if ((_1eee79d46_arr(_self_.get()._field_prefix.ptr()) != nullptr)) {
				_case_begin_20261a7d1:;
				{
					return _1eee50a75_eval_arr(_self_, _89739_s);
				}
			}
			else if ((_1eee7a121_slc(_self_.get()._field_prefix.ptr()) != nullptr)) {
				_case_begin_20261a858:;
				{
					jule::Ptr<_1eee818ec_Slc> _90425_pt = _1eee7a121_slc(_self_.get()._field_prefix.ptr());
					return _1eee51009_eval_exp_slc(_self_, _89739_s,_90425_pt.get()._field_elem);
				}
			}
			_match_end_20261a6c1:;
		}
	}
	jule::Ptr<_1eee76b45_TypeKind> _90917_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	if ((_89739_s.get()._field_exprs.len() == 0LL)) {
		_1eee462c9_push_err(_self_.ptr(), _89739_s.get()._field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _91717_first_elem = _1eee65738_eval_expr_kind(_self_, jule::Any(_89739_s.get()._field_exprs[0LL]));
	if ((_91717_first_elem == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _92217_d = _1eee51009_eval_exp_slc(_self_, _89739_s,_91717_first_elem.get()._field_kind);
	_self_.get()._field_prefix=_90917_prefix;
	return _92217_d;
}



inline void _1eee51801_check_integer_indexing_by_data(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _92854_d,_1e02c1d07_Token _92864_token) {
	jule::Str _92913_err_key = _1eee72d72_check_data_for_integer_indexing(_92854_d);
	{
		auto &_match_expr{ _92913_err_key };
		
		if (_match_expr == jule::Str()) {
			_case_begin_202622167:;
			{
				return;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_202621e69:;
			{
				_1eee462c9_push_err(&(*_self_), _92864_token,_92913_err_key,jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_92854_d.get()._field_kind.ptr()))}));
			}
		}
		else {
			_case_begin_20262181a:;
			{
				_1eee462c9_push_err(&(*_self_), _92864_token,_92913_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_202621d37:;
	}
}



inline void _1eee51cb8_indexing_ptr(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _94236_d,jule::Ptr<_1eee43b89_Data>& _94251_index,jule::Ptr<_1e01821c3_IndexingExpr>& _94266_i) {
	_1eee51801_check_integer_indexing_by_data(&(*_self_), _94251_index,_94266_i.get()._field_token);
	jule::Ptr<_1eee89a04_Ptr> _94517_ptr = _1eee79791_ptr(_94236_d.get()._field_kind.ptr());
	{
		
		if (_1eee8a64d_is_unsafe(_94517_ptr.ptr())) {
			_case_begin_2026255dd:;
			{
				_1eee462c9_push_err(&(*_self_), _94266_i.get()._field_token,jule::Str("unsafe pointers are not supports indexing", 41),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((!(_1eee46e34_is_unsafe(&(*_self_))))) {
			_case_begin_202625665:;
			{
				_1eee462c9_push_err(&(*_self_), _94266_i.get()._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_202625500:;
	}
	_94236_d.get()._field_kind=_94517_ptr.get()._field_elem;
}



inline void _1eee52291_indexing_arr(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _95836_d,jule::Ptr<_1eee43b89_Data>& _95851_index,jule::Ptr<_1e01821c3_IndexingExpr>& _95866_i) {
	jule::Ptr<_1eee88e21_Arr> _95917_arr = _1eee79d46_arr(_95836_d.get()._field_kind.ptr());
	_95836_d.get()._field_kind=_95917_arr.get()._field_elem;
	_1eee51801_check_integer_indexing_by_data(&(*_self_), _95851_index,_95866_i.get()._field_token);
	if (_1eee44690_is_const(_95851_index.ptr()) && (_1eed21ccb_as_f64(_95851_index.get()._field_constant.ptr()) >= static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_95917_arr.get()._field_n))))) {
		_1eee462c9_push_err(&(*_self_), _95866_i.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	}
}



inline void _1eee52769_indexing_slc(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _96736_d,jule::Ptr<_1eee43b89_Data>& _96751_index,jule::Ptr<_1e01821c3_IndexingExpr>& _96766_i) {
	jule::Ptr<_1eee818ec_Slc> _96817_slc = _1eee7a121_slc(_96736_d.get()._field_kind.ptr());
	_96736_d.get()._field_kind=_96817_slc.get()._field_elem;
	_1eee51801_check_integer_indexing_by_data(&(*_self_), _96751_index,_96766_i.get()._field_token);
	if ((!(_1eee44690_is_const(_96751_index.ptr())))) {
		return;
	}
	{
		auto &_match_expr{ _96736_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24a458_SliceExprModel>>()) {
			_case_begin_20262de76:;
			{
				jule::Ptr<_1ee24a458_SliceExprModel> _97821_m = _96736_d.get()._field_model.operator jule::Ptr<_1ee24a458_SliceExprModel>();
				jule::F64 _97917_indx = _1eed21ccb_as_f64(_96751_index.get()._field_constant.ptr());
				if (_97917_indx >= static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_97821_m.get()._field_elems.len())))) {
					_1eee462c9_push_err(&(*_self_), _96766_i.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					_96736_d.get()._field_model=_97821_m.get()._field_elems[static_cast<jule::I32>(static_cast<jule::U64>(_97917_indx))];
					_96736_d.get()._field_decl=true;
				}
			}
		}
		_match_end_20262de10:;
	}
}



inline void _1eee52c42_indexing_map(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _98936_d,jule::Ptr<_1eee43b89_Data>& _98951_index,jule::Ptr<_1e01821c3_IndexingExpr>& _98970_i) {
	if ((_98951_index == nullptr)) {
		return;
	}
	jule::Ptr<_1eee832d3_Map> _99417_m = _1eee7ac7b_map(_98936_d.get()._field_kind.ptr());
	_1eee2c3ae_AssignTypeChecker _99517_atc = _1eee2c3ae_AssignTypeChecker((*_self_)._field_s,_99417_m.get()._field_key,_98951_index,_98970_i.get()._field_token);
	_1eee2d833_check(&_99517_atc);
	_98936_d.get()._field_kind=_99417_m.get()._field_val;
}



inline void _1eee5321a_indexing_str(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _100636_d,jule::Ptr<_1eee43b89_Data>& _100651_index,jule::Ptr<_1e01821c3_IndexingExpr>& _100666_i) {
	
	_100636_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u8", 2)), 5)));
	if ((_100651_index == nullptr)) {
		return;
	}
	_1eee51801_check_integer_indexing_by_data(&(*_self_), _100651_index,_100666_i.get()._field_token);
	if ((!(_1eee44690_is_const(_100651_index.ptr())))) {
		_100636_d.get()._field_constant=nullptr;
		return;
	}
	if (_1eee44690_is_const(_100636_d.ptr())) {
		_1e02c1d07_Token _102217_error_token = _100666_i.get()._field_token;
		jule::I64 _102317_j = _1eed21726_as_i64(_100651_index.get()._field_constant.ptr());
		jule::Str _102417_s = _1eed21171_read_str(_100636_d.get()._field_constant.ptr());
		if (static_cast<jule::I32>(_102317_j) >= static_cast<jule::I32>(static_cast<jule::I32>(_102417_s.len()))) {
			_1eee462c9_push_err(&(*_self_), _102217_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			_1eed22419_set_u64(_100636_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(_102417_s[static_cast<jule::I32>(_102317_j)])));
		}
	}
}



inline void _1eee536e3_to_indexing(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _103335_d,jule::Ptr<_1eee43b89_Data>& _103350_index,jule::Ptr<_1e01821c3_IndexingExpr>& _103369_i) {
	{
		
		if ((_1eee79791_ptr(_103335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20263bacc:;
			{
				_1eee51cb8_indexing_ptr(&(*_self_), _103335_d,_103350_index,_103369_i);
				return;
			}
		}
		else if ((_1eee79d46_arr(_103335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20263bb54:;
			{
				_1eee52291_indexing_arr(&(*_self_), _103335_d,_103350_index,_103369_i);
				return;
			}
		}
		else if ((_1eee7a121_slc(_103335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20263bbcb:;
			{
				_1eee52769_indexing_slc(&(*_self_), _103335_d,_103350_index,_103369_i);
				return;
			}
		}
		else if ((_1eee7ac7b_map(_103335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20263bc53:;
			{
				_1eee52c42_indexing_map(&(*_self_), _103335_d,_103350_index,_103369_i);
				return;
			}
		}
		else if ((_1eee791db_prim(_103335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20263bcca:;
			{
				jule::Ptr<_1eee7bead_Prim> _105217_prim = _1eee791db_prim(_103335_d.get()._field_kind.ptr());
				{
					
					if (_1eee806dc_is_str(_105217_prim.ptr())) {
						_case_begin_202641d8a:;
						{
							_1eee5321a_indexing_str(&(*_self_), _103335_d,_103350_index,_103369_i);
							return;
						}
					}
					_match_end_202641cd0:;
				}
			}
		}
		_match_end_20263b989:;
	}
	_1eee462c9_push_err(&(*_self_), _103369_i.get()._field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_103335_d.get()._field_kind.ptr()))}));
}



inline jule::Bool _1eee53bbb_push_generics_from_index_data(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _106354_decl,jule::Ptr<_1e01821c3_IndexingExpr>& _106381_i) {
	{
		auto &_match_expr{ _106381_i.get()._field_index.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e0182c84_UnaryExpr>>()) {
			_case_begin_202645498:;
			{
				jule::Ptr<_1eee43b89_Data> _106821_d = _1eee4ee5e_eval_unary(_self_, _106381_i.get()._field_index.get()._field_kind.operator jule::Ptr<_1e0182c84_UnaryExpr>());
				if ((!(_106821_d.get()._field_decl))) {
					_1eee462c9_push_err(_self_.ptr(), _106381_i.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return false;
				}
				_106354_decl.get()._field_generics = jule::alloc_for_append(_106354_decl.get()._field_generics,1);_106354_decl.get()._field_generics.__push(jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_1e02c1d07_Token(),jule::Any(jule::Any(_106821_d.get()._field_kind)))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e01c3db3_TypeDecl>>()) {
			_case_begin_2026445c9:;
			{
				_106354_decl.get()._field_generics = jule::alloc_for_append(_106354_decl.get()._field_generics,1);_106354_decl.get()._field_generics.__push(_106381_i.get()._field_index.get()._field_kind.operator jule::Ptr<_1e01c3db3_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182a64_IdentExpr>>()) {
			_case_begin_202644640:;
			{
				jule::Ptr<_1e0182a64_IdentExpr> _107921_expr = _106381_i.get()._field_index.get()._field_kind.operator jule::Ptr<_1e0182a64_IdentExpr>();
				_106354_decl.get()._field_generics = jule::alloc_for_append(_106354_decl.get()._field_generics,1);_106354_decl.get()._field_generics.__push(jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_1e02c1d07_Token(),jule::Any(jule::Any(jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_107921_expr.get()._field_token,_107921_expr.get()._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>())))))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0181ea3_TupleExpr>>()) {
			_case_begin_2026446a6:;
			{
				{
					auto &expr = _106381_i.get()._field_index.get()._field_kind.operator jule::Ptr<_1e0181ea3_TupleExpr>().get()._field_expr;
					auto it = expr.begin();
					_iter_begin_202649645:;
					if (it != expr.end()) {
						jule::Ptr<_1e0181a63_Expr> _20264a437_expr = *it;
						{
							{
								auto &_match_expr{ _20264a437_expr.get()._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_1e01c3db3_TypeDecl>>()) {
									_case_begin_20264ac62:;
									{
										_106354_decl.get()._field_generics = jule::alloc_for_append(_106354_decl.get()._field_generics,1);_106354_decl.get()._field_generics.__push(_20264a437_expr.get()._field_kind.operator jule::Ptr<_1e01c3db3_TypeDecl>());
									}
								}
								else if (_match_expr.type_is<jule::Ptr<_1e0182a64_IdentExpr>>()) {
									_case_begin_20264acc8:;
									{
										jule::Ptr<_1e0182a64_IdentExpr> _109229_expr = _20264a437_expr.get()._field_kind.operator jule::Ptr<_1e0182a64_IdentExpr>();
										_106354_decl.get()._field_generics = jule::alloc_for_append(_106354_decl.get()._field_generics,1);_106354_decl.get()._field_generics.__push(jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_1e02c1d07_Token(),jule::Any(jule::Any(jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_109229_expr.get()._field_token,_109229_expr.get()._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>())))))));
									}
								}
								_match_end_20264ac0c:;
							}
						}
						_iter_next_202649645:;
						++it;
						goto _iter_begin_202649645;
					}
					_iter_end_202649645:;
				}
			}
		}
		else {
			_case_begin_202644563:;
			{
				_1eee462c9_push_err(_self_.ptr(), _106381_i.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return false;
			}
		}
		_match_end_202644464:;
	}
	return true;
}



inline jule::Ptr<_1eee43b89_Data> _1eee54183_eval_ident_decl_from_indexing(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1eee43b89_Data>& _110854_d,jule::Ptr<_1e01821c3_IndexingExpr>& _110869_i) {
	jule::Ptr<_1e01c3db3_TypeDecl> _110917_tdecl = jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl());
	jule::Ptr<_1e029b2ba_IdentTypeDecl> _111017_decl = nullptr;
	{
		auto &_match_expr{ _110869_i.get()._field_expr.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e0182a64_IdentExpr>>()) {
			_case_begin_2026502a5:;
			{
				jule::Ptr<_1e0182a64_IdentExpr> _111321_expr = _110869_i.get()._field_expr.get()._field_kind.operator jule::Ptr<_1e0182a64_IdentExpr>();
				_111017_decl=jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_111321_expr.get()._field_token,_111321_expr.get()._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>()));
				_110917_tdecl.get()._field_kind=jule::Any(_111017_decl);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7548_NsSelectionExpr>>()) {
			_case_begin_20265031b:;
			{
				jule::Ptr<_1e02d7548_NsSelectionExpr> _112021_expr = _110869_i.get()._field_expr.get()._field_kind.operator jule::Ptr<_1e02d7548_NsSelectionExpr>();
				_111017_decl=jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_112021_expr.get()._field_ident,_112021_expr.get()._field_ident._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>()));
				_110917_tdecl.get()._field_kind=jule::Any(jule::new_ptr<_1e0275bbd_NamespaceTypeDecl>(_1e0275bbd_NamespaceTypeDecl(_112021_expr.get()._field_ns,_111017_decl)));
			}
		}
		else {
			_case_begin_20264e42a:;
			{
				_1eee462c9_push_err(_self_.ptr(), _110869_i.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_20264e32b:;
	}
	if ((!(_1eee53bbb_push_generics_from_index_data(_self_, _111017_decl,_110869_i)))) {
		return nullptr;
	}
	return _1eee5a40e_eval_type(_self_.ptr(), _110917_tdecl);
}



inline jule::Ptr<_1eee43b89_Data> _1eee54529_eval_indexing(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e01821c3_IndexingExpr> _113937_i) {
	jule::Ptr<_1eee76b45_TypeKind> _114017_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_114017_prefix;
	});
	jule::Ptr<_1eee43b89_Data> _114417_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_113937_i.get()._field_expr));
	if ((_114417_d == nullptr)) {
		return nullptr;
	}
	if (_114417_d.get()._field_decl) {
		return _1eee54183_eval_ident_decl_from_indexing(_self_, _114417_d,_113937_i);
	}
	_1eee43b89_Data _115417_old_d = (*(_114417_d));
	jule::Ptr<_1eee43b89_Data> _115617_index = _1eee65738_eval_expr_kind(_self_, jule::Any(_113937_i.get()._field_index));
	if ((_115617_index == nullptr)) {
		return nullptr;
	}
	_114417_d.get()._field_decl=false;
	_1eee536e3_to_indexing(_self_.ptr(), _114417_d,_115617_index,_113937_i);
	if (_1eee44690_is_const(_114417_d.ptr())) {
		_114417_d.get()._field_decl=false;
		_114417_d.get()._field_model=jule::Any(_114417_d.get()._field_constant);
	} else if (_114417_d.get()._field_decl) {
		_114417_d.get()._field_decl=false;
	} else {
		_114417_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24a9a8_IndexingExprModel>(_1ee24a9a8_IndexingExprModel(_113937_i.get()._field_token,jule::new_ptr<_1eee43b89_Data>(_115417_old_d),_115617_index)));
	}
	return _114417_d;
}



inline std::tuple<jule::Ptr<_1eee43b89_Data>,jule::Ptr<_1eee43b89_Data>> _1eee548d1_eval_slicing_exprs(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d8deb_SlicingExpr>& _118743_s) {
	jule::Ptr<_1eee76b45_TypeKind> _118817_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_118817_prefix;
	});
	jule::Ptr<_1eee43b89_Data> _119217_l = nullptr;
	jule::Ptr<_1eee43b89_Data> _119317_r = nullptr;
	if ((_118743_s.get()._field_start != nullptr)) {
		_119217_l=_1eee65738_eval_expr_kind(_self_, jule::Any(_118743_s.get()._field_start));
		if ((_119217_l != nullptr)) {
			_1eee51801_check_integer_indexing_by_data(_self_.ptr(), _119217_l,_118743_s.get()._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	} else {
		_119217_l=jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),static__1eed1e46b_new_i64(0LL)));
		_119217_l.get()._field_model=jule::Any(_119217_l.get()._field_constant);
	}
	if ((_118743_s.get()._field_to != nullptr)) {
		_119317_r=_1eee65738_eval_expr_kind(_self_, jule::Any(_118743_s.get()._field_to));
		if ((_119317_r != nullptr)) {
			_1eee51801_check_integer_indexing_by_data(_self_.ptr(), _119317_r,_118743_s.get()._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	}
	return std::make_tuple(_119217_l,_119317_r);
}



inline void _1eee54c00_slicing_arr(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _122231_d) {
	jule::Ptr<_1eee76b45_TypeKind> _122317_elem_type = _1eee79d46_arr(_122231_d.get()._field_kind.ptr()).get()._field_elem;
	_122231_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(_122317_elem_type)), 7)));
	_122231_d.get()._field_lvalue=false;
	_122231_d.get()._field_mutable=_122231_d.get()._field_mutable || (!(_1eee782a6_mutable(_122317_elem_type.ptr())));
}



inline void _1eee551c8_slicing_str(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _123731_d,jule::Ptr<_1eee43b89_Data>& _123742_l,jule::Ptr<_1eee43b89_Data>& _123753_r) {
	_123731_d.get()._field_lvalue=false;
	_123731_d.get()._field_mutable=true;
	if ((!(_1eee44690_is_const(_123731_d.ptr())))) {
		return;
	}
	if ((_123742_l == nullptr) || (_123753_r == nullptr)) {
		_123731_d.get()._field_constant=nullptr;
		return;
	}
	if (_1eee44690_is_const(_123742_l.ptr()) && _1eee44690_is_const(_123753_r.ptr())) {
		jule::I64 _125017_left = _1eed21726_as_i64(_123742_l.get()._field_constant.ptr());
		if ((_125017_left < 0LL)) {
			return;
		}
		jule::Str _125517_s = _1eed21171_read_str(_123731_d.get()._field_constant.ptr());
		jule::I64 _125621_right = 0LL;
		if ((_123753_r == nullptr)) {
			_125621_right=static_cast<jule::I64>(static_cast<jule::I64>(_125517_s.len()));
		} else {
			_125621_right=static_cast<jule::I64>(_1eed21726_as_i64(_123753_r.get()._field_constant.ptr()));
		}
		if (_125017_left > _125621_right) {
			return;
		}
		_1eed22a57_set_str(_123731_d.get()._field_constant.ptr(), _125517_s.slice(static_cast<jule::I32>(_125017_left),static_cast<jule::I32>(_125621_right)));
		_123731_d.get()._field_decl=true;
	} else {
		_123731_d.get()._field_constant=nullptr;
	}
}



inline void _1eee5577d_check_slicing(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data>& _127337_d,jule::Ptr<_1eee43b89_Data>& _127348_l,jule::Ptr<_1eee43b89_Data>& _127359_r,jule::Ptr<_1e02d8deb_SlicingExpr>& _127370_s) {
	{
		
		if ((_1eee79d46_arr(_127337_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20266b315:;
			{
				_1eee54c00_slicing_arr(&(*_self_), _127337_d);
				return;
			}
		}
		else if ((_1eee7a121_slc(_127337_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20266b38c:;
			{
				return;
			}
		}
		else if ((_1eee791db_prim(_127337_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20266b414:;
			{
				jule::Ptr<_1eee7bead_Prim> _128117_prim = _1eee791db_prim(_127337_d.get()._field_kind.ptr());
				{
					
					if (_1eee806dc_is_str(_128117_prim.ptr())) {
						_case_begin_20266dc52:;
						{
							_1eee551c8_slicing_str(&(*_self_), _127337_d,_127348_l,_127359_r);
							return;
						}
					}
					_match_end_20266db97:;
				}
			}
		}
		_match_end_20266b1e4:;
	}
	_1eee462c9_push_err(&(*_self_), _127370_s.get()._field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_127337_d.get()._field_kind.ptr()))}));
}



inline jule::Ptr<_1eee43b89_Data> _1eee55b35_eval_slicing(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d8deb_SlicingExpr> _129236_s) {
	jule::Ptr<_1eee43b89_Data> _129317_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_129236_s.get()._field_expr));
	if ((_129317_d == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _129818_l;
	jule::Ptr<_1eee43b89_Data> _129825_r;
	std::tie(_129818_l,_129825_r) = _1eee548d1_eval_slicing_exprs(_self_, _129236_s);
	if ((_129818_l == nullptr)) {
		return _129317_d;
	}
	_129317_d.get()._field_decl=false;
	_1eee5577d_check_slicing(_self_.ptr(), _129317_d,_129818_l,_129825_r,_129236_s);
	_129317_d.get()._field_cast_kind=nullptr;
	if (_1eee44690_is_const(_129317_d.ptr())) {
		_129317_d.get()._field_decl=false;
		_129317_d.get()._field_model=jule::Any(_129317_d.get()._field_constant);
	} else if (_129317_d.get()._field_decl) {
		_129317_d.get()._field_decl=false;
	} else {
		jule::Ptr<_1ee24c009_SlicingExprModel> _131721_model = jule::new_ptr<_1ee24c009_SlicingExprModel>(_1ee24c009_SlicingExprModel(_129236_s.get()._field_token,_129317_d.get()._field_model,_129818_l.get()._field_model,jule::Any()));
		if ((_129825_r != nullptr)) {
			_131721_model.get()._field_right=_129825_r.get()._field_model;
		}
		_129317_d.get()._field_model=jule::Any(_131721_model);
	}
	return _129317_d;
}



inline void _1eee5610d_cast_ptr(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _133031_t,jule::Ptr<_1eee43b89_Data> _133049_d,_1e02c1d07_Token _133059_error_token) {
	jule::Ptr<_1eee80d19_Sptr> _133113_sptr = _1eee794b6_sptr(_133049_d.get()._field_kind.ptr());
	if ((_133113_sptr != nullptr)) {
		if ((!(_1eee7741a_equals(_1eee79791_ptr(_133031_t.ptr()).get()._field_elem, _133113_sptr.get()._field_elem)))) {
			_1eee462c9_push_err(&(*_self_), _133059_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_133049_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_133031_t.ptr()))}));
		}
		return;
	}
	if ((!(_1eee46e34_is_unsafe(&(*_self_))))) {
		_1eee462c9_push_err(&(*_self_), _133059_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1eee7bead_Prim> _134413_prim = _1eee791db_prim(_133049_d.get()._field_kind.ptr());
	if ((_1eee79791_ptr(_133049_d.get()._field_kind.ptr()) == nullptr) && ((_134413_prim == nullptr) || (!(_1eeda20ae_is_int(_1eee7c387_to_str(_134413_prim.ptr())))))) {
		_1eee462c9_push_err(&(*_self_), _133059_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_133049_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_133031_t.ptr()))}));
	}
	_133049_d.get()._field_constant=nullptr;
}



inline void _1eee565d6_cast_struct(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _135234_t,jule::Ptr<_1eee43b89_Data> _135252_d,_1e02c1d07_Token _135262_error_token) {
	jule::Ptr<_1eec8627e_Trait> _135317_tr = _1eee7a9a1_trt(_135252_d.get()._field_kind.ptr());
	if ((_135317_tr == nullptr)) {
		_1eee462c9_push_err(&(*_self_), _135262_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_135252_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_135234_t.ptr()))}));
		return;
	}
	jule::Ptr<_1ee24550d_StructIns> _135917_s = _1eee7a6c6_strct(_135234_t.ptr());
	_1eee4aa81_push_reference_to_struct(&(*_self_), _135917_s);
	if ((!(_1ee243929_is_implements(_135917_s.get()._field_decl.ptr(), _135317_tr)))) {
		_1eee462c9_push_err(&(*_self_), _135262_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_135252_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_135234_t.ptr()))}));
	}
}



inline void _1eee56aae_cast_ref(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _136731_t,jule::Ptr<_1eee43b89_Data> _136749_d,_1e02c1d07_Token _136759_error_token) {
	jule::Ptr<_1eee80d19_Sptr> _136817_sptr = _1eee794b6_sptr(_136731_t.ptr());
	jule::Ptr<_1eee89a04_Ptr> _137017_ptr = _1eee79791_ptr(_136749_d.get()._field_kind.ptr());
	if ((_137017_ptr != nullptr) && _1eee7741a_equals(_136817_sptr.get()._field_elem, _137017_ptr.get()._field_elem)) {
		if ((!(_1eee46e34_is_unsafe(&(*_self_))))) {
			_1eee462c9_push_err(&(*_self_), _136759_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((_1eee7a6c6_strct(_136817_sptr.get()._field_elem.ptr()) != nullptr)) {
		_1eee565d6_cast_struct(&(*_self_), _136817_sptr.get()._field_elem,_136749_d,_136759_error_token);
		return;
	}
	_1eee462c9_push_err(&(*_self_), _136759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_136749_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_136731_t.ptr()))}));
}



inline void _1eee57087_cast_slc(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _138931_t,jule::Ptr<_1eee43b89_Data> _138949_d,_1e02c1d07_Token _138959_error_token) {
	if ((_1eee79a6b_enm(_138949_d.get()._field_kind.ptr()) != nullptr)) {
		if ((_1eee791db_prim(_1eee79a6b_enm(_138949_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind.ptr()) == nullptr) || (!(_1eee806dc_is_str(_1eee791db_prim(_1eee79a6b_enm(_138949_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind.ptr()).ptr())))) {
			_1eee462c9_push_err(&(*_self_), _138959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_138949_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_138931_t.ptr()))}));
			return;
		}
	} else if ((_1eee791db_prim(_138949_d.get()._field_kind.ptr()) == nullptr) || (!(_1eee806dc_is_str(_1eee791db_prim(_138949_d.get()._field_kind.ptr()).ptr())))) {
		_1eee462c9_push_err(&(*_self_), _138959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_138949_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_138931_t.ptr()))}));
		return;
	}
	_138931_t=_1eee7a121_slc(_138931_t.ptr()).get()._field_elem;
	jule::Ptr<_1eee7bead_Prim> _140113_prim = _1eee791db_prim(_138931_t.ptr());
	if ((_140113_prim == nullptr) || ((!(_1eee7d872_is_u8(_140113_prim.ptr()))) && (!(_1eee7d2bc_is_i32(_140113_prim.ptr()))))) {
		_1eee462c9_push_err(&(*_self_), _138959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_138949_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_138931_t.ptr()))}));
	}
}



inline void _1eee57483_cast_str(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _140731_d,_1e02c1d07_Token _140741_error_token) {
	if ((_1eee79a6b_enm(_140731_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eec889ac_Enum> _140921_e = _1eee79a6b_enm(_140731_d.get()._field_kind.ptr());
		if ((_1eee791db_prim(_140921_e.get()._field_kind.get()._field_kind.ptr()) != nullptr) && _1eee806dc_is_str(_1eee791db_prim(_140921_e.get()._field_kind.get()._field_kind.ptr()).ptr())) {
			return;
		}
	}
	if ((_1eee791db_prim(_140731_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eee7bead_Prim> _141617_prim = _1eee791db_prim(_140731_d.get()._field_kind.ptr());
		if ((!(_1eee7d872_is_u8(_141617_prim.ptr()))) && (!(_1eee7d2bc_is_i32(_141617_prim.ptr())))) {
			_1eee462c9_push_err(&(*_self_), _140741_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_1eee77063_to_str(_140731_d.get()._field_kind.ptr()))}));
		}
		return;
	}
	if ((_1eee7a121_slc(_140731_d.get()._field_kind.ptr()) == nullptr)) {
		_1eee462c9_push_err(&(*_self_), _140741_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_1eee77063_to_str(_140731_d.get()._field_kind.ptr()))}));
		return;
	}
	jule::Ptr<_1eee76b45_TypeKind> _142817_t = _1eee7a121_slc(_140731_d.get()._field_kind.ptr()).get()._field_elem;
	jule::Ptr<_1eee7bead_Prim> _142913_prim = _1eee791db_prim(_142817_t.ptr());
	if ((_142913_prim == nullptr) || ((!(_1eee7d872_is_u8(_142913_prim.ptr()))) && (!(_1eee7d2bc_is_i32(_142913_prim.ptr()))))) {
		_1eee462c9_push_err(&(*_self_), _140741_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_1eee77063_to_str(_140731_d.get()._field_kind.ptr()))}));
	}
}



inline void _1eee5795b_cast_int(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _143531_t,jule::Ptr<_1eee43b89_Data> _143549_d,_1e02c1d07_Token _143559_error_token) {
	if (_1eee44690_is_const(_143549_d.ptr())) {
		jule::Ptr<_1eee7bead_Prim> _143717_prim = _1eee791db_prim(_143531_t.ptr());
		{
			
			if (_1eeda194e_is_sig_int(_143717_prim.get()._field_kind)) {
				_case_begin_20269b257:;
				{
					_1eed220ea_set_i64(_143549_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_143549_d.get()._field_constant.ptr())));
				}
			}
			else if (_1eeda1ca1_is_unsig_int(_143717_prim.get()._field_kind)) {
				_case_begin_20269b2ce:;
				{
					_1eed22419_set_u64(_143549_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_143549_d.get()._field_constant.ptr())));
				}
			}
			_match_end_20269b19c:;
		}
	}
	if ((_1eee79a6b_enm(_143549_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eec889ac_Enum> _144817_e = _1eee79a6b_enm(_143549_d.get()._field_kind.ptr());
		if (_1eeda271e_is_num(_1eee77063_to_str(_144817_e.get()._field_kind.get()._field_kind.ptr()))) {
			return;
		}
	}
	if ((_1eee794b6_sptr(_143549_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eee7bead_Prim> _145517_prim = _1eee791db_prim(_143531_t.ptr());
		if ((!(_1eee80137_is_uintptr(_145517_prim.ptr())))) {
			_1eee462c9_push_err(&(*_self_), _143559_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_143549_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_143531_t.ptr()))}));
		}
		return;
	}
	if ((_1eee79791_ptr(_143549_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eee7bead_Prim> _146217_prim = _1eee791db_prim(_143531_t.ptr());
		if (_1eee80137_is_uintptr(_146217_prim.ptr())) {
		} else if ((!(_1eee46e34_is_unsafe(&(*_self_))))) {
			_1eee462c9_push_err(&(*_self_), _143559_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if (((((!(_1eee7d2bc_is_i32(_146217_prim.ptr()))) && (!(_1eee7d597_is_i64(_146217_prim.ptr())))) && (!(_1eee7db4c_is_u16(_146217_prim.ptr())))) && (!(_1eee7de27_is_u32(_146217_prim.ptr())))) && (!(_1eee7e202_is_u64(_146217_prim.ptr())))) {
			_1eee462c9_push_err(&(*_self_), _143559_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_143549_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_143531_t.ptr()))}));
		}
		return;
	}
	jule::Ptr<_1eee7bead_Prim> _147313_prim = _1eee791db_prim(_143549_d.get()._field_kind.ptr());
	if ((_147313_prim != nullptr) && _1eeda271e_is_num(_1eee7c387_to_str(_147313_prim.ptr()))) {
		return;
	}
	_1eee462c9_push_err(&(*_self_), _143559_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_143549_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_143531_t.ptr()))}));
}



inline void _1eee57e34_cast_num(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _148131_t,jule::Ptr<_1eee43b89_Data> _148149_d,_1e02c1d07_Token _148159_error_token) {
	if (_1eee44690_is_const(_148149_d.ptr())) {
		jule::Ptr<_1eee7bead_Prim> _148317_prim = _1eee791db_prim(_148131_t.ptr());
		{
			
			if (_1eeda2411_is_float(_148317_prim.get()._field_kind)) {
				_case_begin_2026aab07:;
				{
					_1eed22d76_set_f64(_148149_d.get()._field_constant.ptr(), static_cast<jule::F64>(_1eed21ccb_as_f64(_148149_d.get()._field_constant.ptr())));
				}
			}
			else if (_1eeda194e_is_sig_int(_148317_prim.get()._field_kind)) {
				_case_begin_2026aab7e:;
				{
					_1eed220ea_set_i64(_148149_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_148149_d.get()._field_constant.ptr())));
				}
			}
			else if (_1eeda1ca1_is_unsig_int(_148317_prim.get()._field_kind)) {
				_case_begin_2026aac06:;
				{
					_1eed22419_set_u64(_148149_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_148149_d.get()._field_constant.ptr())));
				}
			}
			_match_end_2026aaa3b:;
		}
	}
	if ((_1eee79a6b_enm(_148149_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1eec889ac_Enum> _149517_e = _1eee79a6b_enm(_148149_d.get()._field_kind.ptr());
		if (_1eeda271e_is_num(_1eee77063_to_str(_149517_e.get()._field_kind.get()._field_kind.ptr()))) {
			return;
		}
	}
	jule::Ptr<_1eee7bead_Prim> _150113_prim = _1eee791db_prim(_148149_d.get()._field_kind.ptr());
	if ((_150113_prim != nullptr) && _1eeda271e_is_num(_1eee7c387_to_str(_150113_prim.ptr()))) {
		return;
	}
	_1eee462c9_push_err(&(*_self_), _148159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_148149_d.get()._field_kind.ptr())),jule::Any(_1eee77063_to_str(_148131_t.ptr()))}));
}



inline void _1eee5840c_cast_prim(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _150932_t,jule::Ptr<_1eee43b89_Data> _150950_d,_1e02c1d07_Token _150960_error_token) {
	jule::Ptr<_1eee7bead_Prim> _151013_prim = _1eee791db_prim(_150932_t.ptr());
	{
		
		if (_1eee809b7_is_any(_151013_prim.ptr())) {
			_case_begin_2026b37be:;
		}
		else if (_1eee806dc_is_str(_151013_prim.ptr())) {
			_case_begin_2026b3835:;
			{
				_1eee57483_cast_str(&(*_self_), _150950_d,_150960_error_token);
			}
		}
		else if (_1eeda20ae_is_int(_1eee7c387_to_str(_151013_prim.ptr()))) {
			_case_begin_2026b389b:;
			{
				_1eee5795b_cast_int(&(*_self_), _150932_t,_150950_d,_150960_error_token);
			}
		}
		else if (_1eeda271e_is_num(_1eee7c387_to_str(_151013_prim.ptr()))) {
			_case_begin_2026b3912:;
			{
				_1eee57e34_cast_num(&(*_self_), _150932_t,_150950_d,_150960_error_token);
			}
		}
		else {
			_case_begin_2026b3758:;
			{
				_1eee462c9_push_err(&(*_self_), _150960_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_150932_t.ptr()))}));
			}
		}
		_match_end_2026b36e2:;
	}
}



inline void _1eee58808_cast_constant(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind>& _152537_t,jule::Ptr<_1eee43b89_Data>& _152556_d) {
	if ((_152556_d == nullptr) || (!(_1eee44690_is_const(_152556_d.ptr())))) {
		return;
	}
	jule::Ptr<_1eee7bead_Prim> _152913_prim = _1eee791db_prim(_152537_t.ptr());
	_1eee73548_cast_const_by_type(_152913_prim.get()._field_kind,_152556_d);
	_152556_d.get()._field_model=jule::Any(_152556_d.get()._field_constant);
}



inline jule::Ptr<_1eee43b89_Data> _1eee58dad_eval_cast_by_type_n_data(_1eee45be1_Eval* _self_,jule::Ptr<_1eee76b45_TypeKind> _153447_t,jule::Ptr<_1eee43b89_Data> _153465_d,_1e02c1d07_Token _153479_error_token) {
	if ((_153465_d != nullptr) && _153465_d.get()._field_decl) {
		_1eee462c9_push_err(&(*_self_), _153479_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	{
		
		if ((_1eee791db_prim(_153465_d.get()._field_kind.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim(_153465_d.get()._field_kind.ptr()).ptr())) {
			_case_begin_2026bb376:;
			{
				if ((_1eee79a6b_enm(_153447_t.ptr()) != nullptr)) {
					_1eee462c9_push_err(&(*_self_), _153479_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					_1eee466c5_push_suggestion(&(*_self_), jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				}
			}
		}
		else if ((_1eee79791_ptr(_153447_t.ptr()) != nullptr)) {
			_case_begin_2026bb3dc:;
			{
				_1eee5610d_cast_ptr(&(*_self_), _153447_t,_153465_d,_153479_error_token);
			}
		}
		else if ((_1eee794b6_sptr(_153447_t.ptr()) != nullptr)) {
			_case_begin_2026bb453:;
			{
				_1eee56aae_cast_ref(&(*_self_), _153447_t,_153465_d,_153479_error_token);
			}
		}
		else if ((_1eee7a121_slc(_153447_t.ptr()) != nullptr)) {
			_case_begin_2026bb4b9:;
			{
				_1eee57087_cast_slc(&(*_self_), _153447_t,_153465_d,_153479_error_token);
			}
		}
		else if ((_1eee7a6c6_strct(_153447_t.ptr()) != nullptr)) {
			_case_begin_2026bc4a9:;
			{
				_1eee565d6_cast_struct(&(*_self_), _153447_t,_153465_d,_153479_error_token);
			}
		}
		else if ((_1eee791db_prim(_153447_t.ptr()) != nullptr)) {
			_case_begin_2026bc520:;
			{
				_1eee5840c_cast_prim(&(*_self_), _153447_t,_153465_d,_153479_error_token);
				_1eee58808_cast_constant(&(*_self_), _153447_t,_153465_d);
			}
		}
		else {
			_case_begin_2026bb310:;
			{
				_1eee462c9_push_err(&(*_self_), _153479_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_153447_t.ptr()))}));
				_153465_d=nullptr;
			}
		}
		_match_end_2026bb2aa:;
	}
	if ((_153465_d == nullptr)) {
		return nullptr;
	}
	_153465_d.get()._field_mutable=_153465_d.get()._field_mutable || ((!(_1eee782a6_mutable(_153465_d.get()._field_kind.ptr()))) && _1eee782a6_mutable(_153447_t.ptr()));
	_153465_d.get()._field_lvalue=false;
	_153465_d.get()._field_decl=false;
	if ((_1eee79a6b_enm(_153465_d.get()._field_kind.ptr()) == nullptr) || (!(_1eee7741a_equals(_1eee79a6b_enm(_153465_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind, _153447_t)))) {
		_153465_d.get()._field_cast_kind=_153447_t;
		_1eee727de_apply_cast_kind(_153465_d);
		_153465_d.get()._field_model.operator jule::Ptr<_1ee249523_CastingExprModel>().get()._field_token=_153479_error_token;
	} else {
		_153465_d.get()._field_kind=_153447_t;
	}
	return _153465_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee59254_eval_cast(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7328_CastExpr> _158433_c) {
	jule::Ptr<_1eee7b4a7_TypeSymbol> _158517_t = _1ee2618d1_build_type(_158433_c.get()._field_kind);
	jule::Bool _158613_ok = _1eedd261c_check_type(_self_.get()._field_s, _158517_t,_self_.get()._field_lookup);
	if ((!(_158613_ok))) {
		return nullptr;
	}
	jule::Ptr<_1eee76b45_TypeKind> _159117_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_159117_prefix;
	});
	jule::Ptr<_1eee43b89_Data> _159517_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_158433_c.get()._field_expr));
	if ((_159517_d == nullptr)) {
		return nullptr;
	}
	return _1eee58dad_eval_cast_by_type_n_data(_self_.ptr(), _158517_t.get()._field_kind,_159517_d,_158433_c.get()._field_kind.get()._field_token);
}



inline jule::Ptr<_1eee43b89_Data> _1eee5960b_eval_ns_selection(_1eee45be1_Eval* _self_,jule::Ptr<_1e02d7548_NsSelectionExpr> _160336_s) {
	jule::Str _160413_path = _1eee8b819_build_link_path_by_tokens(_160336_s.get()._field_ns);
	jule::Ptr<_1eedc08c4_ImportInfo> _160517_imp = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee975b1_select_package((*_self_)._field_lookup, jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>([=](jule::Ptr<_1eedc08c4_ImportInfo> _160553_imp) mutable -> jule::Bool {
		if ((_160336_s.get()._field_ns.len() == 1LL) && (_160553_imp.get()._field_alias == _160413_path)) {
			return true;
		}
		return (_160553_imp.get()._field_link_path == _160413_path) && _1eedc3a5e_is_accessible_via_selection(_160553_imp.ptr());
	}));
	if ((_160517_imp == nullptr)) {
		_1eee462c9_push_err(&(*_self_), _160336_s.get()._field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_160413_path)}));
		return nullptr;
	}
	jule::Trait<_1eee992c7_Lookup> _161717_lookup = (*_self_)._field_lookup;
	(*_self_)._field_lookup=jule::Trait<_1eee992c7_Lookup>(_160517_imp, 1);
	
	_1eee46b59_disallow_builtin(&(*_self_));
	jule::Any _162217_def = _1eee49cb1_get_def(&(*_self_), _160336_s.get()._field_ident._field_kind,false);
	_1eee46917_allow_builtin(&(*_self_));
	(*_self_)._field_lookup=_161717_lookup;
	jule::Ptr<_1eee43b89_Data> _162617_d = _1eee4e700_eval_def(&(*_self_), _162217_def,_160336_s.get()._field_ident);
	return _162617_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee59bb1_eval_struct_lit_explicit(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1ee24550d_StructIns> _163148_s,jule::Slice<jule::Ptr<_1e0181a63_Expr>> _163213_exprs,_1e02c1d07_Token _163233_error_token) {
	jule::Bool _163313_ok = _1eedceb36_check_generic_quantity(_self_.get()._field_s.ptr(), static_cast<jule::I32>(_163148_s.get()._field_decl.get()._field_generics.len()),static_cast<jule::I32>(_163148_s.get()._field_generics.len()),_163233_error_token);
	if ((!(_163313_ok))) {
		return nullptr;
	}
	if ((_self_.get()._field_field != nullptr) && (_self_.get()._field_field.get()._field_decl.get()._field_owner == _163148_s.get()._field_decl)) {
		_1eee462c9_push_err(_self_.ptr(), _163233_error_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any(_163148_s.get()._field_decl.get()._field_ident)}));
	}
	_1eee4aa81_push_reference_to_struct(_self_.ptr(), _163148_s);
	_1eee4c49a_check_deprecated(_self_.ptr(), _163148_s.get()._field_decl.get()._field_directives,_163233_error_token);
	_1eee35a5a_StructLitChecker _164617_slc = _1eee35a5a_StructLitChecker(_self_,_163233_error_token,_163148_s,jule::Slice<jule::Ptr<_1ee2485aa_StructArgExprModel>>());
	_1eee3761c_check(&_164617_slc, _163213_exprs);
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_163148_s, 0))),jule::Ptr<_1eee76b45_TypeKind>(),(!(_self_.get()._field_immutable)),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee248a0b_StructLitExprModel>(_1ee248a0b_StructLitExprModel(_163148_s,_164617_slc._field_args)))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee5a057_eval_struct_lit(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d80e8_StructLit> _166539_lit) {
	jule::Ptr<_1eee7b4a7_TypeSymbol> _166617_t = _1ee2618d1_build_type(_166539_lit.get()._field_kind);
	jule::Bool _166713_ok = _1eedd261c_check_type(_self_.get()._field_s, _166617_t,_self_.get()._field_lookup);
	if ((!(_166713_ok))) {
		return nullptr;
	}
	jule::Ptr<_1ee24550d_StructIns> _167217_s = _1eee7a6c6_strct(_166617_t.get()._field_kind.ptr());
	if ((_167217_s == nullptr)) {
		if ((_1eee794b6_sptr(_166617_t.get()._field_kind.ptr()) != nullptr)) {
			_167217_s=_1eee7a6c6_strct(_1eee794b6_sptr(_166617_t.get()._field_kind.ptr()).get()._field_elem.ptr());
			if ((_167217_s != nullptr)) {
				goto _julec_label_eval;
			}
		}
		_1eee462c9_push_err(_self_.ptr(), _166539_lit.get()._field_kind.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_eval:;
	jule::Ptr<_1eee43b89_Data> _168517_d = _1eee59bb1_eval_struct_lit_explicit(_self_, _167217_s,_166539_lit.get()._field_exprs,_166539_lit.get()._field_kind.get()._field_token);
	if ((_1eee794b6_sptr(_166617_t.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_1ee248a0b_StructLitExprModel> _168721_model = _168517_d.get()._field_model.operator jule::Ptr<_1ee248a0b_StructLitExprModel>();
		_1eee71029_make_struct_lit_alloc(_168517_d,_168721_model);
	}
	return _168517_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee5a40e_eval_type(_1eee45be1_Eval* _self_,jule::Ptr<_1e01c3db3_TypeDecl> _169332_t) {
	jule::Ptr<_1eee7b4a7_TypeSymbol> _169417_tk = _1ee2618d1_build_type(_169332_t);
	jule::Bool _169513_ok = _1eedd261c_check_type((*_self_)._field_s, _169417_tk,(*_self_)._field_lookup);
	if ((!(_169513_ok))) {
		return nullptr;
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(_169417_tk.get()._field_kind,jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_169417_tk.get()._field_kind)),true,jule::Ptr<_1eed1e24b_Const>()));
}



inline void _1eee5a80a_call_type_fn(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7ba8_FnCallExpr>& _170637_fc,jule::Ptr<_1eee43b89_Data>& _170659_d) {
	if ((_170637_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_self_.ptr(), _170637_fc.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_170659_d.get()._field_kind.ptr()))}));
	} else if ((_170637_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_self_.ptr(), _170637_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if ((_170637_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_self_.ptr(), _170637_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	if ((_170637_fc.get()._field_args.len() > 0LL)) {
		jule::Ptr<_1eee76b45_TypeKind> _171621_prefix = _self_.get()._field_prefix;
		_self_.get()._field_prefix=nullptr;
		jule::Ptr<_1eee43b89_Data> _171821_arg = _1eee65738_eval_expr_kind(_self_, _170637_fc.get()._field_args[0LL].get()._field_kind);
		_self_.get()._field_prefix=_171621_prefix;
		if ((_171821_arg != nullptr)) {
			_170659_d=_1eee58dad_eval_cast_by_type_n_data(_self_.ptr(), _170659_d.get()._field_kind,_171821_arg,_170637_fc.get()._field_args[0LL].get()._field_token);
		}
	}
	if ((_170659_d != nullptr)) {
		_170659_d.get()._field_decl=false;
	}
}



inline std::tuple<jule::Bool,jule::Bool> _1eee5ac8e_check_fn_call_generics(_1eee45be1_Eval* _self_,jule::Ptr<_1ee25b4ad_FnIns> _173045_f,jule::Ptr<_1e02d7ba8_FnCallExpr> _173113_fc) {
	jule::Bool _173132_ok = jule::Bool();
	jule::Bool _173142_dynamic_annotation = jule::Bool();
	{
		
		if (((_173045_f.get()._field_decl.get()._field_generics.len() > 0LL) && (_173113_fc.get()._field_generics.len() == 0LL)) && (_173045_f.get()._field_params.len() > 0LL)) {
			_case_begin_2033112a6:;
			{
				_173142_dynamic_annotation=true;
				_173045_f.get()._field_generics=jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>::alloc(static_cast<jule::I32>(_173045_f.get()._field_decl.get()._field_generics.len()));
				_173132_ok = true;
				_173142_dynamic_annotation = true;
				return std::make_tuple(_173132_ok,_173142_dynamic_annotation);
			}
		}
		else if ((!(_1eedceb36_check_generic_quantity((*_self_)._field_s.ptr(), static_cast<jule::I32>(_173045_f.get()._field_decl.get()._field_generics.len()),static_cast<jule::I32>(_173113_fc.get()._field_generics.len()),_173113_fc.get()._field_token)))) {
			_case_begin_20331131c:;
			{
				_173132_ok = false;
				_173142_dynamic_annotation = false;
				return std::make_tuple(_173132_ok,_173142_dynamic_annotation);
			}
		}
		else {
			_case_begin_20330cacc:;
			{
				_173045_f.get()._field_generics=jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>::alloc(0LL,static_cast<jule::I32>(_173045_f.get()._field_decl.get()._field_generics.len()));
				{
					auto &expr = _173113_fc.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_20330d0e9:;
					if (it != expr.end()) {
						jule::Ptr<_1e01c3db3_TypeDecl> _20330dc54_g = *it;
						{
							jule::Ptr<_1eee7b4a7_TypeSymbol> _174425_k = _1ee2618d1_build_type(_20330dc54_g);
							_173132_ok=_1eedd261c_check_type((*_self_)._field_s, _174425_k,(*_self_)._field_lookup);
							if ((!(_173132_ok))) {
								_173132_ok = false;
								_173142_dynamic_annotation = false;
								return std::make_tuple(_173132_ok,_173142_dynamic_annotation);
							}
							_173045_f.get()._field_generics = jule::alloc_for_append(_173045_f.get()._field_generics,1);_173045_f.get()._field_generics.__push(_174425_k.get()._field_kind);
						}
						_iter_next_20330d0e9:;
						++it;
						goto _iter_begin_20330d0e9;
					}
					_iter_end_20330d0e9:;
				}
				_173132_ok = true;
				_173142_dynamic_annotation = false;
				return std::make_tuple(_173132_ok,_173142_dynamic_annotation);
			}
		}
		_match_end_20330ca11:;
	}
}



inline void _1eee5b18a_call_builtin_fn(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7ba8_FnCallExpr>& _175640_fc,jule::Ptr<_1eee43b89_Data>& _175662_d) {
	_175662_d=_1eee7a3eb_fnc(_175662_d.get()._field_kind.ptr()).get()._field_caller(_self_,_175640_fc,_175662_d);
	if ((_175662_d == nullptr)) {
		return;
	}
	_175662_d.get()._field_mutable=true;
}



inline void _1eee5b5ca_check_fn_of_concurrent_call(_1eee45be1_Eval* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _176447_f,_1e02c1d07_Token _176458_error_token) {
	if (_1eee46e34_is_unsafe(&(*_self_))) {
		return;
	}
	{
		auto &expr = _176447_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_203317411:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> &_2033174dd_p = *it;
			{
				if (_2033174dd_p.get()._field_decl.get()._field_reference) {
					_1eee462c9_push_err(&(*_self_), _176458_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;
				}
			}
			_iter_next_203317411:;
			++it;
			goto _iter_begin_203317411;
		}
		_iter_end_203317411:;
	}
}



inline void _1eee5bad6_process_exceptional_handler(_1eee45be1_Eval* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _177751_f,jule::Ptr<_1e02d7ba8_FnCallExpr>& _177767_fc,jule::Ptr<_1eee43b89_Data>& _177789_d) {
	jule::Bool _177813_result_needed = (!(_1ee257e7c_is_void(_177751_f.get()._field_decl.ptr()))) && ((*_self_)._field_arg || (!((*_self_)._field_ignored)));
	jule::Ptr<_1eeda5953_ScopeChecker> _177917_csc = nullptr;
	jule::Ptr<_1eed8a5a3_Scope> _178017_ch = nullptr;
	jule::Ptr<_1ee24a007_FnCallExprModel> _178217_model = _177789_d.get()._field_model.operator jule::Ptr<_1ee24a007_FnCallExprModel>();
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1eedca071_Sema>>()) {
			_case_begin_20331b24a:;
			{
				jule::Ptr<_1eedca071_Sema> _178621_s = (*_self_)._field_lookup.operator jule::Ptr<_1eedca071_Sema>();
				_177917_csc=_1eed57ae2_new_scope_checker(_178621_s,nullptr);
				if (_177813_result_needed) {
					_177917_csc.get()._field_result=_177751_f.get()._field_result;
				}
				_178017_ch=jule::new_ptr<_1eed8a5a3_Scope>();
				_177917_csc.get()._field_table.get()._field_vars = jule::alloc_for_append(_177917_csc.get()._field_table.get()._field_vars,1);_177917_csc.get()._field_table.get()._field_vars.__push(_1eee71414_build_error_var(_178017_ch,_177767_fc));
				_1eedb7965_check(_177917_csc, _177767_fc.get()._field_exception,_178017_ch);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
			_case_begin_20331b2b1:;
			{
				jule::Ptr<_1eeda5953_ScopeChecker> _179521_sc = (*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>();
				_177917_csc=_1eedb7c40_new_child_checker(_179521_sc);
				if (_177813_result_needed) {
					_177917_csc.get()._field_result=_177751_f.get()._field_result;
				}
				_178017_ch=_1eeda9b33_get_child(_179521_sc.ptr());
				_177917_csc.get()._field_table.get()._field_vars = jule::alloc_for_append(_177917_csc.get()._field_table.get()._field_vars,1);_177917_csc.get()._field_table.get()._field_vars.__push(_1eee71414_build_error_var(_178017_ch,_177767_fc));
				_1eedaa10b_check_child_ssc(_179521_sc, _177767_fc.get()._field_exception,_178017_ch,_177917_csc);
			}
		}
		_match_end_20331b1e5:;
	}
	_178217_model.get()._field_assigned=_177813_result_needed;
	_178217_model.get()._field_except=_178017_ch;
	if (_177813_result_needed && (_177917_csc.get()._field_result != nullptr)) {
		_1eee462c9_push_err(&(*_self_), _177767_fc.get()._field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	}
}



inline void _1eee5bec1_call_fn(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7ba8_FnCallExpr>& _181332_fc,jule::Ptr<_1eee43b89_Data>& _181354_d) {
	jule::Ptr<_1ee25b4ad_FnIns> _181417_f = _1eee7a3eb_fnc(_181354_d.get()._field_kind.ptr());
	if (_1ee25c13a_is_builtin(_181417_f.ptr())) {
		_1eee5b18a_call_builtin_fn(_self_, _181332_fc,_181354_d);
		return;
	}
	if ((!(_1ee258257_is_method(_181417_f.get()._field_decl.ptr()))) && _1eee74ec8_has_directive(_181417_f.get()._field_decl.get()._field_directives,jule::Str("test", 4))) {
		_1eee462c9_push_err(_self_.ptr(), _181332_fc.get()._field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_181354_d=nullptr;
		return;
	}
	if ((((!(_181354_d.get()._field_mutable)) && _1ee258257_is_method(_181417_f.get()._field_decl.ptr())) && (!(_181417_f.get()._field_decl.get()._field_statically))) && _181417_f.get()._field_decl.get()._field_params[0LL].get()._field_mutable) {
		_1eee462c9_push_err(_self_.ptr(), _181332_fc.get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	} else if ((!(_1eee46e34_is_unsafe(_self_.ptr()))) && _181417_f.get()._field_decl.get()._field_unsafety) {
		_1eee462c9_push_err(_self_.ptr(), _181332_fc.get()._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	jule::Bool _183218_ok;
	jule::Bool _183222_dynamic_annotation;
	std::tie(_183218_ok,_183222_dynamic_annotation) = _1eee5ac8e_check_fn_call_generics(_self_.ptr(), _181417_f,_181332_fc);
	if ((!(_183218_ok))) {
		_181354_d=nullptr;
		return;
	}
	jule::Ptr<_1eedca071_Sema> _183817_old = _self_.get()._field_s;
	if ((_181417_f.get()._field_decl.get()._field_owner != nullptr)) {
		_self_.get()._field_s=_181417_f.get()._field_decl.get()._field_owner.get()._field_sema;
	}
	__JULE_DEFER({
		if (_183817_old != _self_.get()._field_s) {
			_183817_old.get()._field_errors=jule::append(_183817_old.get()._field_errors,_self_.get()._field_s.get()._field_errors);
			_self_.get()._field_s.get()._field_errors=nullptr;
		}
		_self_.get()._field_s=_183817_old;
	});
	if ((!(_183222_dynamic_annotation))) {
		if ((!(_181417_f.get()._field_reloaded))) {
			_183218_ok=_1eedd5e7d_reload_fn_ins_types(_self_.get()._field_s, _181417_f);
			if ((!(_183218_ok))) {
				_181354_d=nullptr;
				return;
			}
			_181417_f.get()._field_reloaded=true;
		}
	} else {
		_1eedd56ec_build_fn_non_generic_type_kinds(_self_.get()._field_s, _181417_f);
	}
	_1eee32804_FnCallArgChecker _186417_fcac = _1eee32804_FnCallArgChecker(_self_,_181332_fc.get()._field_args,_181332_fc.get()._field_token,_181417_f,_183222_dynamic_annotation,jule::Slice<jule::Any>());
	if ((_181417_f.get()._field_decl.get()._field_owner != nullptr)) {
		std::tie(_183817_old,_self_.get()._field_s) = std::make_tuple(_self_.get()._field_s,_183817_old);
		_183218_ok=_1eee3540b_check(&_186417_fcac);
		std::tie(_183817_old,_self_.get()._field_s) = std::make_tuple(_self_.get()._field_s,_183817_old);
	} else {
		_183218_ok=_1eee3540b_check(&_186417_fcac);
	}
	if ((!(_183218_ok)) && _183222_dynamic_annotation) {
		_181354_d=nullptr;
		return;
	}
	jule::Bool _188414_is_unique_ins;
	jule::I32 _188429_pos;
	std::tie(_188414_is_unique_ins,_188429_pos) = _1ee259e07_append_instance(_181417_f.get()._field_decl.ptr(), _181417_f);
	if ((!(_188414_is_unique_ins))) {
		_181417_f=_181417_f.get()._field_decl.get()._field_instances[_188429_pos];
	}
	jule::Any _188917_call_model = _181354_d.get()._field_model;
	if (_1ee257e7c_is_void(_181417_f.get()._field_decl.ptr())) {
		_181354_d=_1eee72a20_build_void_data();
	} else {
		if (_183222_dynamic_annotation) {
			_183218_ok=_1eedd5e7d_reload_fn_ins_types(_self_.get()._field_s, _181417_f);
			if ((!(_183218_ok))) {
				_181354_d=nullptr;
				return;
			}
			_181417_f.get()._field_reloaded=true;
		}
		_181354_d.get()._field_kind=_181417_f.get()._field_result;
		_181354_d.get()._field_lvalue=false;
	}
	_181354_d.get()._field_mutable=true;
	_181354_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24a007_FnCallExprModel>(_1ee24a007_FnCallExprModel(_181332_fc.get()._field_token,_181417_f,jule::Bool(),_188917_call_model,_186417_fcac._field_arg_models,jule::Ptr<_1eed8a5a3_Scope>(),jule::Bool())));
	if (_181417_f.get()._field_decl.get()._field_exceptional) {
		{
			
			if (_1e01c46ee_unhandled(_181332_fc.ptr())) {
				_case_begin_2033368d6:;
				{
					_1eee462c9_push_err(_self_.ptr(), _181332_fc.get()._field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					_1eee466c5_push_suggestion(_self_.ptr(), jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if (_1e01831c4_ignored(_181332_fc.ptr())) {
				_case_begin_2033367a4:;
				{
					goto _match_end_203335c15;
				}
			}
			else {
				_case_begin_203335cd1:;
				{
					_1eee5bad6_process_exceptional_handler(_self_.ptr(), _181417_f,_181332_fc,_181354_d);
				}
			}
			_match_end_203335c15:;
		}
	} else if ((!(_1e01c46ee_unhandled(_181332_fc.ptr())))) {
		_1eee462c9_push_err(_self_.ptr(), _181332_fc.get()._field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	}
	if ((_181417_f.get()._field_generics.len() > 0LL) && _188414_is_unique_ins) {
		_1eede5a92_check_fn_ins_caller(_self_.get()._field_s, _181417_f,((jule::Ptr<_1e02c1d07_Token>)((&(_181332_fc.get()._field_token)))));
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee5c378_eval_fn_call(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7ba8_FnCallExpr> _193636_fc) {
	jule::Ptr<_1eee76b45_TypeKind> _193717_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_193717_prefix;
	});
	{
		auto &_match_expr{ _193636_fc.get()._field_expr.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e0182a64_IdentExpr>>()) {
			_case_begin_20333b1e3:;
			{
				if ((_193636_fc.get()._field_expr.get()._field_token._field_kind == jule::Str("error", 5))) {
					return _1eee9c31e_builtin_caller_error(_self_,_193636_fc);
				}
			}
		}
		_match_end_20333b18d:;
	}
	jule::Ptr<_1eee43b89_Data> _195017_d = _1eee65738_eval_expr_kind(_self_, _193636_fc.get()._field_expr.get()._field_kind);
	if ((_195017_d == nullptr)) {
		return nullptr;
	}
	if (_195017_d.get()._field_decl) {
		_1eee5a80a_call_type_fn(_self_, _193636_fc,_195017_d);
		return _195017_d;
	}
	if ((_1eee7a3eb_fnc(_195017_d.get()._field_kind.ptr()) == nullptr)) {
		_1eee462c9_push_err(_self_.ptr(), _193636_fc.get()._field_token,jule::Str("attempting to call a non-function", 33),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1eee5bec1_call_fn(_self_, _193636_fc,_195017_d);
	return _195017_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee5c80c_eval_enum_static(_1eee45be1_Eval* _self_,jule::Ptr<_1eec889ac_Enum> _196939_enm,_1e02c1d07_Token _196951_ident) {
	jule::Ptr<_1eee43b89_Data> _197017_d = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_196939_enm, 3))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1eed1e24b_Const>()));
	jule::Ptr<_1eec87d0d_EnumItem> _197917_item = _1eec89727_find_item(_196939_enm.ptr(), _196951_ident._field_kind);
	if ((_197917_item == nullptr)) {
		_1eee462c9_push_err(&(*_self_), _196951_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_196939_enm.get()._field_ident),jule::Any(_196951_ident._field_kind)}));
	} else {
		_197017_d.get()._field_constant=jule::new_ptr<_1eed1e24b_Const>((*(_197917_item.get()._field_value.get()._field_data.get()._field_constant)));
		_197017_d.get()._field_model=jule::Any(_197017_d.get()._field_constant);
		_1eee73207_apply_cast_model_by_enum(_197017_d,_196939_enm);
	}
	return _197017_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee5cc91_eval_struct_static(_1eee45be1_Eval* _self_,jule::Ptr<_1ee24550d_StructIns> _199141_s,_1e02c1d07_Token _199156_ident) {
	jule::Ptr<_1eee43b89_Data> _199217_d = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1eed1e24b_Const>()));
	
	jule::Ptr<_1ee2579b5_Fn> _200017_method = _1ee24672e_find_method(_199141_s.ptr(), _199156_ident._field_kind,true);
	if ((_200017_method != nullptr)) {
		if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _200017_method.get()._field_public,_200017_method.get()._field_token)))) {
			_1eee462c9_push_err(&(*_self_), _199156_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_199156_ident._field_kind)}));
			_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1ee25b4ad_FnIns> _200721_ins = _1ee259a50_instance(_200017_method);
		_200721_ins.get()._field_owner=_199141_s;
		_1eee4a3ee_push_reference_to_fn(&(*_self_), _200721_ins);
		_199217_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24d626_StructStaticIdentExprModel>(_1ee24d626_StructStaticIdentExprModel(_199141_s,_199217_d.get()._field_model,_200721_ins)));
		_199217_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_200721_ins, 1)));
		return _199217_d;
	}
	jule::Ptr<_1eedeb24b_Var> _202117_sttc = _1ee2431ba_find_static(_199141_s.get()._field_decl.ptr(), _199156_ident._field_kind);
	if ((_202117_sttc != nullptr)) {
		return _1eee4dcd7_eval_var(&(*_self_), _202117_sttc,_199156_ident);
	}
	_1eee462c9_push_err(&(*_self_), _199156_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_199141_s.get()._field_decl.get()._field_ident),jule::Any(_199156_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_1eee43b89_Data> _1eee5d302_eval_trait_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _203043_d,jule::Ptr<_1eec8627e_Trait> _203057_trt,_1e02c1d07_Token _203074_ident) {
	jule::Ptr<_1ee2579b5_Fn> _203117_f = _1eec872e6_find_method(_203057_trt.ptr(), _203074_ident._field_kind);
	if ((_203117_f == nullptr)) {
		_1eee462c9_push_err(&(*_self_), _203074_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_203057_trt.get()._field_ident),jule::Any(_203074_ident._field_kind)}));
		return nullptr;
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1ee259a50_instance(_203117_f), 1))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24c658_TraitSubIdentExprModel>(_1ee24c658_TraitSubIdentExprModel(_203074_ident,_203043_d.get()._field_model,_203117_f,_203057_trt)))),false,jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee5d940_eval_struct_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _205344_d,jule::Ptr<_1ee24550d_StructIns> _205358_s,jule::Ptr<_1e02d7768_SubIdentExpr> _205377_si,jule::Bool _205396_ref) {
	jule::Ptr<_1ee2449b3_FieldIns> _205417_f = _1ee246ad6_find_field(_205358_s.ptr(), _205377_si.get()._field_ident._field_kind);
	if ((_205417_f != nullptr)) {
		if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _205417_f.get()._field_decl.get()._field_public,_205417_f.get()._field_decl.get()._field_token)))) {
			_1eee462c9_push_err(&(*_self_), _205377_si.get()._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_205417_f.get()._field_decl.get()._field_ident)}));
			_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1ee24d060_StructSubIdentExprModel> _206121_model = jule::new_ptr<_1ee24d060_StructSubIdentExprModel>(_1ee24d060_StructSubIdentExprModel(_205377_si.get()._field_ident,jule::new_ptr<_1eee43b89_Data>((*(_205344_d))),_205344_d.get()._field_kind,jule::Ptr<_1ee25b4ad_FnIns>(),_205417_f));
		_205344_d.get()._field_model=jule::Any(_206121_model);
		_205344_d.get()._field_kind=_205417_f.get()._field_kind;
		_205344_d.get()._field_lvalue=true;
		if (_205417_f.get()._field_decl.get()._field_mutable && (!(_205344_d.get()._field_mutable))) {
			{
				auto &_match_expr{ (*_self_)._field_lookup };
				
				if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
					_case_begin_203356296:;
					{
						jule::Ptr<_1eeda5953_ScopeChecker> _207525_scope = _1eeda7d95_get_root((*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>());
						_205344_d.get()._field_mutable=(_207525_scope.get()._field_owner != nullptr) && (_207525_scope.get()._field_owner.get()._field_owner == _205358_s);
					}
				}
				_match_end_203356241:;
			}
		}
		return _205344_d;
	}
	
	jule::Ptr<_1ee2579b5_Fn> _208417_m = _1ee24672e_find_method(_205358_s.ptr(), _205377_si.get()._field_ident._field_kind,false);
	if ((_208417_m == nullptr)) {
		_1eee462c9_push_err(&(*_self_), _205377_si.get()._field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_205358_s.get()._field_decl.get()._field_ident),jule::Any(_205377_si.get()._field_ident._field_kind)}));
		return nullptr;
	}
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _208417_m.get()._field_public,_208417_m.get()._field_token)))) {
		_1eee462c9_push_err(&(*_self_), _205377_si.get()._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_208417_m.get()._field_ident)}));
		_1eee466c5_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	if (_1ee256673_is_ref(_208417_m.get()._field_params[0LL].ptr()) && (!(_205396_ref))) {
		_1eee462c9_push_err(&(*_self_), _205377_si.get()._field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	}
	_1eee4c49a_check_deprecated(&(*_self_), _208417_m.get()._field_directives,_205377_si.get()._field_ident);
	jule::Ptr<_1ee25b4ad_FnIns> _210017_ins = _1ee259a50_instance(_208417_m);
	_210017_ins.get()._field_owner=_205358_s;
	_1eee4a3ee_push_reference_to_fn(&(*_self_), _210017_ins);
	jule::Ptr<_1eee43b89_Data> _210317_model = jule::new_ptr<_1eee43b89_Data>((*(_205344_d)));
	_205344_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24d060_StructSubIdentExprModel>(_1ee24d060_StructSubIdentExprModel(_205377_si.get()._field_ident,_210317_model,_205344_d.get()._field_kind,_210017_ins,jule::Ptr<_1ee2449b3_FieldIns>())));
	_205344_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_210017_ins, 1)));
	return _205344_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee5ddc4_eval_slice_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _211443_d,_1e02c1d07_Token _211457_ident) {
	{
		auto &_match_expr{ _211457_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_2033627be:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_211443_d.get()._field_kind,_211443_d.get()._field_model,_211457_ident,jule::Str("len()", 5))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_203362835:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_211443_d.get()._field_kind,_211443_d.get()._field_model,_211457_ident,jule::Str("cap()", 5))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_2033613e4:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>({jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("i", 1))),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))))),jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("j", 1))),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5)))))}),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed969_builtin_caller_common_mut),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_211443_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_211443_d.get()._field_kind,_211443_d.get()._field_model,_211457_ident,jule::Str("swap", 4))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_203361108:;
			{
				_1eee462c9_push_err(&(*_self_), _211457_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_211443_d.get()._field_kind.ptr())),jule::Any(_211457_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_203361328:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee5e358_eval_array_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _217443_d,_1e02c1d07_Token _217457_ident) {
	{
		auto &_match_expr{ _217457_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_202cea697:;
			{
				jule::Ptr<_1eed1e24b_Const> _217721_c = static__1eed1e46b_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1eee79d46_arr(_217443_d.get()._field_kind.ptr()).get()._field_n)));
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_217721_c)),jule::Bool(),_217721_c));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_202cbb3c1:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>({jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("i", 1))),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))))),jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("j", 1))),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5)))))}),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed969_builtin_caller_common_mut),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_217443_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_217443_d.get()._field_kind,_217443_d.get()._field_model,_217457_ident,jule::Str("swap", 4))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_202cc44ea:;
			{
				_1eee462c9_push_err(&(*_self_), _217457_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_217443_d.get()._field_kind.ptr())),jule::Any(_217457_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_201454a6c:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee5e7dc_eval_map_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _222041_d,_1e02c1d07_Token _222055_ident) {
	jule::Ptr<_1eee832d3_Map> _222117_map_kind = _1eee7ac7b_map(_222041_d.get()._field_kind.ptr());
	{
		auto &_match_expr{ _222055_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_202d0477d:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_222041_d.get()._field_kind,_222041_d.get()._field_model,_222055_ident,jule::Str("len()", 5))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_202d03051:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed969_builtin_caller_common_mut),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_222041_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_222041_d.get()._field_kind,_222041_d.get()._field_model,_222055_ident,jule::Str("clear", 5))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_202d030b7:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(_222117_map_kind.get()._field_key)), 7))),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed969_builtin_caller_common_mut),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_222041_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_222041_d.get()._field_kind,_222041_d.get()._field_model,_222055_ident,jule::Str("keys", 4))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_202d0312d:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(_222117_map_kind.get()._field_val)), 7))),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed969_builtin_caller_common_mut),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_222041_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_222041_d.get()._field_kind,_222041_d.get()._field_model,_222055_ident,jule::Str("values", 6))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_202d03194:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>({jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("key", 3))),_222117_map_kind.get()._field_key))}),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed804_builtin_caller_common),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_222041_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_222041_d.get()._field_kind,_222041_d.get()._field_model,_222055_ident,jule::Str("has", 3))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_202d044e7:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>({jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("key", 3))),_222117_map_kind.get()._field_key))}),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeeed969_builtin_caller_common_mut),jule::Bool())), 1))),jule::Ptr<_1eee76b45_TypeKind>(),_222041_d.get()._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_222041_d.get()._field_kind,_222041_d.get()._field_model,_222055_ident,jule::Str("del", 3))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_202d02eda:;
			{
				_1eee462c9_push_err(&(*_self_), _222055_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_1eee836ac_to_str(_222117_map_kind.ptr())),jule::Any(_222055_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d02e85:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee5ec71_eval_str_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _234341_d,_1e02c1d07_Token _234355_ident) {
	jule::Ptr<_1eee76b45_TypeKind> _234417_str_kind = jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("str", 3)), 5)));
	{
		auto &_match_expr{ _234355_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_202d10415:;
			{
				jule::Ptr<_1eee43b89_Data> _234721_sd = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
				if (_1eee44690_is_const(_234341_d.ptr())) {
					_234721_sd.get()._field_constant=static__1eed1e46b_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1eed21171_read_str(_234341_d.get()._field_constant.ptr()).len())));
					_234721_sd.get()._field_model=jule::Any(_234721_sd.get()._field_constant);
				} else {
					_234721_sd.get()._field_model=jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_234341_d.get()._field_kind,_234341_d.get()._field_model,_234355_ident,jule::Str("len()", 5))));
				}
				return _234721_sd;
			}
		}
		else {
			_case_begin_202d0e3e2:;
			{
				_1eee462c9_push_err(&(*_self_), _234355_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_234417_str_kind.ptr())),jule::Any(_234355_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d100e6:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee60128_eval_int_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _236839_ident) {
	
	{
		auto &_match_expr{ _236839_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d15cab:;
			{
				jule::Ptr<_1eed1e24b_Const> _237321_c = static__1eed1e46b_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1eed9ac34_max(jule::Str("int", 3)))));
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_237321_c)),jule::Bool(),_237321_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d15d22:;
			{
				jule::Ptr<_1eed1e24b_Const> _238021_c = static__1eed1e46b_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1eed9a8d2_min(jule::Str("int", 3)))));
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_238021_c)),jule::Bool(),_238021_c));
			}
		}
		else {
			_case_begin_202d14b78:;
			{
				_1eee462c9_push_err(&(*_self_), _236839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_236839_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d14b23:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee604d0_eval_uint_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _239240_ident) {
	
	{
		auto &_match_expr{ _239240_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d1a5eb:;
			{
				jule::Ptr<_1eed1e24b_Const> _239721_c = static__1eed1e5d1_new_u64(static_cast<jule::U64>(static_cast<jule::U64>(_1eed9ac34_max(jule::Str("uint", 4)))));
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("uint", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_239721_c)),jule::Bool(),_239721_c));
			}
		}
		else {
			_case_begin_202d194b8:;
			{
				_1eee462c9_push_err(&(*_self_), _239240_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_239240_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d19463:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee60887_eval_i8_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _240938_ident) {
	
	
	
	{
		auto &_match_expr{ _240938_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d1e215:;
			{
				jule::Ptr<_1eed1e24b_Const> _241621_c = static__1eed1e46b_new_i64(127LL);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i8", 2)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_241621_c)),jule::Bool(),_241621_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d1e27b:;
			{
				jule::Ptr<_1eed1e24b_Const> _242321_c = static__1eed1e46b_new_i64(-128LL);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i8", 2)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_242321_c)),jule::Bool(),_242321_c));
			}
		}
		else {
			_case_begin_202d1d0e3:;
			{
				_1eee462c9_push_err(&(*_self_), _240938_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_240938_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d1d08d:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee60c3e_eval_i16_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _243539_ident) {
	
	
	
	{
		auto &_match_expr{ _243539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d23978:;
			{
				jule::Ptr<_1eed1e24b_Const> _244221_c = static__1eed1e46b_new_i64(32767LL);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i16", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_244221_c)),jule::Bool(),_244221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d239de:;
			{
				jule::Ptr<_1eed1e24b_Const> _244921_c = static__1eed1e46b_new_i64(-32768LL);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i16", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_244921_c)),jule::Bool(),_244921_c));
			}
		}
		else {
			_case_begin_202d22856:;
			{
				_1eee462c9_push_err(&(*_self_), _243539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_243539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d22801:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee610e6_eval_i32_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _246139_ident) {
	
	
	
	{
		auto &_match_expr{ _246139_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d281db:;
			{
				jule::Ptr<_1eed1e24b_Const> _246821_c = static__1eed1e46b_new_i64(2147483647LL);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i32", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_246821_c)),jule::Bool(),_246821_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d28252:;
			{
				jule::Ptr<_1eed1e24b_Const> _247521_c = static__1eed1e46b_new_i64(-2147483648LL);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i32", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_247521_c)),jule::Bool(),_247521_c));
			}
		}
		else {
			_case_begin_202d270b9:;
			{
				_1eee462c9_push_err(&(*_self_), _246139_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_246139_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d27064:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6149d_eval_i64_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _248739_ident) {
	
	
	
	{
		auto &_match_expr{ _248739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d2c7d9:;
			{
				jule::Ptr<_1eed1e24b_Const> _249421_c = static__1eed1e46b_new_i64(jule::MAX_I64);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_249421_c)),jule::Bool(),_249421_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d2c850:;
			{
				jule::Ptr<_1eed1e24b_Const> _250121_c = static__1eed1e46b_new_i64(jule::MIN_I64);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_250121_c)),jule::Bool(),_250121_c));
			}
		}
		else {
			_case_begin_202d2b464:;
			{
				_1eee462c9_push_err(&(*_self_), _248739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_248739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d2b684:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee61855_eval_u8_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _251338_ident) {
	
	
	{
		auto &_match_expr{ _251338_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d3227d:;
			{
				jule::Ptr<_1eed1e24b_Const> _251921_c = static__1eed1e5d1_new_u64(255LLU);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u8", 2)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_251921_c)),jule::Bool(),_251921_c));
			}
		}
		else {
			_case_begin_202d310d4:;
			{
				_1eee462c9_push_err(&(*_self_), _251338_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_251338_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d3107e:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee61c0c_eval_u16_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _253139_ident) {
	
	
	{
		auto &_match_expr{ _253139_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d35528:;
			{
				jule::Ptr<_1eed1e24b_Const> _253721_c = static__1eed1e5d1_new_u64(65535LLU);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u16", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_253721_c)),jule::Bool(),_253721_c));
			}
		}
		else {
			_case_begin_202d3437e:;
			{
				_1eee462c9_push_err(&(*_self_), _253139_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_253139_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d34329:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee620b4_eval_u32_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _254939_ident) {
	
	
	{
		auto &_match_expr{ _254939_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d387c3:;
			{
				jule::Ptr<_1eed1e24b_Const> _255521_c = static__1eed1e5d1_new_u64(4294967295LLU);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u32", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_255521_c)),jule::Bool(),_255521_c));
			}
		}
		else {
			_case_begin_202d37629:;
			{
				_1eee462c9_push_err(&(*_self_), _254939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_254939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d375c4:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6246b_eval_u64_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _256739_ident) {
	
	
	{
		auto &_match_expr{ _256739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d3b9b3:;
			{
				jule::Ptr<_1eed1e24b_Const> _257321_c = static__1eed1e5d1_new_u64(jule::MAX_U64);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_257321_c)),jule::Bool(),_257321_c));
			}
		}
		else {
			_case_begin_202d3a275:;
			{
				_1eee462c9_push_err(&(*_self_), _256739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_256739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d3a7b4:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee62823_eval_f32_type_tatic(_1eee45be1_Eval* _self_,_1e02c1d07_Token _258538_ident) {
	
	
	
	
	{
		auto &_match_expr{ _258538_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d40445:;
			{
				jule::Ptr<_1eed1e24b_Const> _259321_c = static__1eed1ee50_new_f64(340282346638528860000000000000000000000.0);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f32", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_259321_c)),jule::Bool(),_259321_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d404ab:;
			{
				jule::Ptr<_1eed1e24b_Const> _260021_c = static__1eed1ee50_new_f64(-340282346638528860000000000000000000000.0);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f32", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_260021_c)),jule::Bool(),_260021_c));
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_202d4027a:;
			{
				jule::Ptr<_1eed1e24b_Const> _260721_c = static__1eed1ee50_new_f64(0.000000000000000000000000000000000000000000001401298464324817);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f32", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_260721_c)),jule::Bool(),_260721_c));
			}
		}
		else {
			_case_begin_202d3e312:;
			{
				_1eee462c9_push_err(&(*_self_), _258538_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_258538_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d3e2ac:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee62bca_eval_f64_type_static(_1eee45be1_Eval* _self_,_1e02c1d07_Token _261939_ident) {
	
	
	
	
	{
		auto &_match_expr{ _261939_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_202d45e1d:;
			{
				jule::Ptr<_1eed1e24b_Const> _262721_c = static__1eed1ee50_new_f64(jule::MAX_F64);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_262721_c)),jule::Bool(),_262721_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_202d45e84:;
			{
				jule::Ptr<_1eed1e24b_Const> _263421_c = static__1eed1ee50_new_f64(jule::MIN_F64);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_263421_c)),jule::Bool(),_263421_c));
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_202d45c53:;
			{
				jule::Ptr<_1eed1e24b_Const> _264121_c = static__1eed1ee50_new_f64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005);
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("f64", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_264121_c)),jule::Bool(),_264121_c));
			}
		}
		else {
			_case_begin_202d44cda:;
			{
				_1eee462c9_push_err(&(*_self_), _261939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_261939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d44c85:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6315e_eval_prim_static(_1eee45be1_Eval* _self_,jule::Str _265335_kind,_1e02c1d07_Token _265346_ident) {
	{
		auto &_match_expr{ _265335_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_202d4ab59:;
			{
				return _1eee60128_eval_int_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_202d4abc0:;
			{
				return _1eee604d0_eval_uint_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_202d4ac36:;
			{
				return _1eee60887_eval_i8_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_202d4ac9c:;
			{
				return _1eee60c3e_eval_i16_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_202d49dab:;
			{
				return _1eee610e6_eval_i32_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_202d49e22:;
			{
				return _1eee6149d_eval_i64_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_202d49e88:;
			{
				return _1eee61855_eval_u8_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_202d49eee:;
			{
				return _1eee61c0c_eval_u16_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_202d4a076:;
			{
				return _1eee620b4_eval_u32_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_202d4ae67:;
			{
				return _1eee6246b_eval_u64_type_static(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_202d4aede:;
			{
				return _1eee62823_eval_f32_type_tatic(&(*_self_), _265346_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_202d4b066:;
			{
				return _1eee62bca_eval_f64_type_static(&(*_self_), _265346_ident);
			}
		}
		else {
			_case_begin_202d49ae2:;
			{
				_1eee462c9_push_err(&(*_self_), _265346_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_265335_kind),jule::Any(_265346_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_202d49b7a:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee635e3_eval_type_static(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _268539_d,jule::Ptr<_1e02d7768_SubIdentExpr> _268553_si) {
	{
		
		if ((_1eee791db_prim(_268539_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d531b1:;
			{
				return _1eee6315e_eval_prim_static(&(*_self_), _1eee7c387_to_str(_1eee791db_prim(_268539_d.get()._field_kind.ptr()).ptr()),_268553_si.get()._field_ident);
			}
		}
		else if ((_1eee79a6b_enm(_268539_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d53227:;
			{
				return _1eee5c80c_eval_enum_static(&(*_self_), _1eee79a6b_enm(_268539_d.get()._field_kind.ptr()),_268553_si.get()._field_ident);
			}
		}
		else if ((_1eee7a6c6_strct(_268539_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d51d4c:;
			{
				return _1eee5cc91_eval_struct_static(&(*_self_), _1eee7a6c6_strct(_268539_d.get()._field_kind.ptr()),_268553_si.get()._field_ident);
			}
		}
		else {
			_case_begin_202d51cd6:;
			{
				_1eee462c9_push_err(&(*_self_), _268553_si.get()._field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_268539_d.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_202d51c4d:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee63a77_eval_obj_sub_ident(_1eee45be1_Eval* _self_,jule::Ptr<_1eee43b89_Data> _269941_d,jule::Ptr<_1e02d7768_SubIdentExpr> _269955_si) {
	if (_1e02c4ada_is_ignore_ident(_269955_si.get()._field_ident._field_kind)) {
		_1eee462c9_push_err(&(*_self_), _269955_si.get()._field_ident,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eee76b45_TypeKind> _270517_kind = _269941_d.get()._field_kind;
	{
		
		if ((_1eee79791_ptr(_269941_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d586a0:;
			{
				jule::Ptr<_1eee89a04_Ptr> _270817_ptr = _1eee79791_ptr(_269941_d.get()._field_kind.ptr());
				if (_1eee8a64d_is_unsafe(_270817_ptr.ptr())) {
					goto _match_end_202d585b2;
				}
				if ((!(_269955_si.get()._field_is_self)) && (!(_1eee46e34_is_unsafe(&(*_self_))))) {
					_1eee462c9_push_err(&(*_self_), _269955_si.get()._field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				_270517_kind=_1eee79791_ptr(_269941_d.get()._field_kind.ptr()).get()._field_elem;
			}
		}
		else if ((_1eee794b6_sptr(_269941_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d58727:;
			{
				_270517_kind=_1eee794b6_sptr(_269941_d.get()._field_kind.ptr()).get()._field_elem;
			}
		}
		_match_end_202d585b2:;
	}
	{
		
		if ((_1eee7a9a1_trt(_269941_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d5ba8d:;
			{
				return _1eee5d302_eval_trait_sub_ident(&(*_self_), _269941_d,_1eee7a9a1_trt(_269941_d.get()._field_kind.ptr()),_269955_si.get()._field_ident);
			}
		}
		else if ((_1eee7a6c6_strct(_270517_kind.ptr()) != nullptr)) {
			_case_begin_202d5bb04:;
			{
				jule::Ptr<_1ee24550d_StructIns> _272417_s = _1eee7a6c6_strct(_270517_kind.ptr());
				if (_1eee71ea3_is_instanced_struct(_272417_s)) {
					jule::Bool _272625_used_reference_elem = (_1eee794b6_sptr(_269941_d.get()._field_kind.ptr()) != nullptr);
					return _1eee5d940_eval_struct_sub_ident(&(*_self_), _269941_d,_1eee7a6c6_strct(_270517_kind.ptr()),_269955_si,_272625_used_reference_elem);
				}
			}
		}
		else if ((_1eee7a121_slc(_270517_kind.ptr()) != nullptr)) {
			_case_begin_202d5bb6a:;
			{
				return _1eee5ddc4_eval_slice_sub_ident(&(*_self_), _269941_d,_269955_si.get()._field_ident);
			}
		}
		else if ((_1eee79d46_arr(_270517_kind.ptr()) != nullptr)) {
			_case_begin_202d5bbd1:;
			{
				return _1eee5e358_eval_array_sub_ident(&(*_self_), _269941_d,_269955_si.get()._field_ident);
			}
		}
		else if ((_1eee7ac7b_map(_270517_kind.ptr()) != nullptr)) {
			_case_begin_202d5bc47:;
			{
				return _1eee5e7dc_eval_map_sub_ident(&(*_self_), _269941_d,_269955_si.get()._field_ident);
			}
		}
		else if ((_1eee791db_prim(_270517_kind.ptr()) != nullptr)) {
			_case_begin_202d5c3da:;
			{
				jule::Ptr<_1eee7bead_Prim> _273617_p = _1eee791db_prim(_270517_kind.ptr());
				{
					auto &_match_expr{ _273617_p.get()._field_kind };
					
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_202d63a62:;
						{
							return _1eee5ec71_eval_str_sub_ident(&(*_self_), _269941_d,_269955_si.get()._field_ident);
						}
					}
					_match_end_202d6416c:;
				}
			}
		}
		_match_end_202d5b9b1:;
	}
	_1eee462c9_push_err(&(*_self_), _269955_si.get()._field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_269941_d.get()._field_kind.ptr()))}));
	return nullptr;
}



inline jule::Ptr<_1eee43b89_Data> _1eee63e2e_eval_sub_ident(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7768_SubIdentExpr> _274638_si) {
	jule::Ptr<_1eee76b45_TypeKind> _274717_prefix = _self_.get()._field_prefix;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_274717_prefix;
	});
	jule::Ptr<_1eee43b89_Data> _275117_d = _1eee65738_eval_expr_kind(_self_, jule::Any(_274638_si.get()._field_expr));
	if ((_275117_d == nullptr)) {
		return nullptr;
	}
	if (_275117_d.get()._field_decl) {
		return _1eee635e3_eval_type_static(_self_.ptr(), _275117_d,_274638_si);
	}
	return _1eee63a77_eval_obj_sub_ident(_self_.ptr(), _275117_d,_274638_si);
}



inline jule::Ptr<_1eee43b89_Data> _1eee642d6_eval_tuple(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e0181ea3_TupleExpr> _276334_tup) {
	jule::Ptr<_1eee82568_Tuple> _276417_tup_t = jule::new_ptr<_1eee82568_Tuple>(_1eee82568_Tuple());
	_276417_tup_t.get()._field_types=jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>::alloc(0LL,static_cast<jule::I32>(_276334_tup.get()._field_expr.len()));
	jule::Ptr<_1ee24e8be_TupleExprModel> _276717_model = jule::new_ptr<_1ee24e8be_TupleExprModel>(_1ee24e8be_TupleExprModel(jule::Slice<jule::Ptr<_1eee43b89_Data>>::alloc(0LL,static_cast<jule::I32>(_276334_tup.get()._field_expr.len()))));
	jule::Bool _277117_ok = true;
	{
		auto &expr = _276334_tup.get()._field_expr;
		auto it = expr.begin();
		_iter_begin_202d6ac9a:;
		if (it != expr.end()) {
			jule::Ptr<_1e0181a63_Expr> _202d6ae98_expr = *it;
			{
				jule::Ptr<_1eee43b89_Data> _277321_d = _1eee65738_eval_expr_kind(_self_, _202d6ae98_expr.get()._field_kind);
				if ((_277321_d == nullptr)) {
					_277117_ok=false;
					goto _iter_next_202d6ac9a;
				}
				_276417_tup_t.get()._field_types = jule::alloc_for_append(_276417_tup_t.get()._field_types,1);_276417_tup_t.get()._field_types.__push(_277321_d.get()._field_kind);
				_276717_model.get()._field_datas = jule::alloc_for_append(_276717_model.get()._field_datas,1);_276717_model.get()._field_datas.__push(_277321_d);
			}
			_iter_next_202d6ac9a:;
			++it;
			goto _iter_begin_202d6ac9a;
		}
		_iter_end_202d6ac9a:;
	}
	if ((!(_277117_ok))) {
		return nullptr;
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_276417_tup_t, 8))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_276717_model)),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee6476a_eval_map(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1eee832d3_Map> _279232_m,jule::Ptr<_1e02d8318_BraceLit> _279245_lit) {
	jule::Ptr<_1ee24b8aa_MapExprModel> _279317_model = jule::new_ptr<_1ee24b8aa_MapExprModel>(_1ee24b8aa_MapExprModel(_279232_m.get()._field_key,_279232_m.get()._field_val,jule::Slice<jule::Ptr<_1ee24b35a_KeyValPairExprModel>>()));
	{
		auto &expr = _279245_lit.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_202d6ec9e:;
		if (it != expr.end()) {
			jule::Ptr<_1e0181a63_Expr> _202d6eead_expr = *it;
			{
				{
					auto &_match_expr{ _202d6eead_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_1e02d8538_KeyValPair>>()) {
						_case_begin_202d703dc:;
						{
							goto _match_end_202d70662;
						}
					}
					else {
						_case_begin_202d706b7:;
						{
							_1eee462c9_push_err(_self_.ptr(), _279245_lit.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_202d70662:;
				}
				jule::Ptr<_1e02d8538_KeyValPair> _280821_pair = _202d6eead_expr.get()._field_kind.operator jule::Ptr<_1e02d8538_KeyValPair>();
				jule::Ptr<_1eee43b89_Data> _281021_key = _1eee65738_eval_expr_kind(_self_, jule::Any(_280821_pair.get()._field_key));
				if ((_281021_key == nullptr)) {
					return nullptr;
				}
				jule::Ptr<_1eee43b89_Data> _281521_val = _1eee65738_eval_expr_kind(_self_, jule::Any(_280821_pair.get()._field_val));
				if ((_281521_val == nullptr)) {
					return nullptr;
				}
				_1eedd482d_check_assign_type(_self_.get()._field_s, false,_279232_m.get()._field_key,_281021_key,_280821_pair.get()._field_colon);
				_1eedd482d_check_assign_type(_self_.get()._field_s, false,_279232_m.get()._field_val,_281521_val,_280821_pair.get()._field_colon);
				_279317_model.get()._field_entries = jule::alloc_for_append(_279317_model.get()._field_entries,1);_279317_model.get()._field_entries.__push(jule::new_ptr<_1ee24b35a_KeyValPairExprModel>(_1ee24b35a_KeyValPairExprModel(_281021_key.get()._field_model,_281521_val.get()._field_model)));
			}
			_iter_next_202d6ec9e:;
			++it;
			goto _iter_begin_202d6ec9e;
		}
		_iter_end_202d6ec9e:;
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_279232_m, 9))),jule::Ptr<_1eee76b45_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(_279317_model)),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee64b22_eval_brace_lit(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d8318_BraceLit> _283638_lit) {
	{
		
		if ((_self_.get()._field_prefix == nullptr)) {
			_case_begin_202d775d1:;
			{
				_1eee462c9_push_err(_self_.ptr(), _283638_lit.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if ((_1eee7ac7b_map(_self_.get()._field_prefix.ptr()) != nullptr)) {
			_case_begin_202d77647:;
			{
				return _1eee6476a_eval_map(_self_, _1eee7ac7b_map(_self_.get()._field_prefix.ptr()),_283638_lit);
			}
		}
		else if ((_1eee7a6c6_strct(_self_.get()._field_prefix.ptr()) != nullptr)) {
			_case_begin_202d766e0:;
			{
				return _1eee59bb1_eval_struct_lit_explicit(_self_, _1eee7a6c6_strct(_self_.get()._field_prefix.ptr()),_283638_lit.get()._field_exprs,_283638_lit.get()._field_token);
			}
		}
		else {
			_case_begin_202d76679:;
			{
				_1eee462c9_push_err(_self_.ptr(), _283638_lit.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_202d765d0:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee64ec9_eval_anon_fn(_1eee45be1_Eval* _self_,jule::Ptr<_1e02da32b_FnDecl> _285135_decl) {
	_1eee8d6a6_TypeChecker _285217_tc = _1eee8d6a6_TypeChecker((*_self_)._field_s,(*_self_)._field_lookup,jule::Ptr<_1eee8c760_Referencer>(),_1e02c1d07_Token(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool());
	jule::Ptr<_1ee25b4ad_FnIns> _285617_ins = _1eee9578a_build_fn(&_285217_tc, _285135_decl);
	_285617_ins.get()._field_anon=true;
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
			_case_begin_202d7d0cb:;
			{
				jule::Ptr<_1eeda5953_ScopeChecker> _286121_sc = (*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>();
				jule::Ptr<_1eeda5953_ScopeChecker> _286221_scc = _1eedb7c40_new_child_checker(_286121_sc);
				_286221_scc.get()._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>>(nullptr);
				_286221_scc.get()._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>>(nullptr);
				_286221_scc.get()._field_owner=nullptr;
				_286221_scc.get()._field_child_index=0LL;
				_286221_scc.get()._field_it=0LLU;
				_286221_scc.get()._field_cse=0LLU;
				_286221_scc.get()._field_owner=_285617_ins;
				_1eede5696_check_fn_ins_sc((*_self_)._field_s.ptr(), _285617_ins,_286221_scc);
			}
		}
		else {
			_case_begin_202d7c77e:;
			{
				_1eede5db1_check_fn_ins((*_self_)._field_s, _285617_ins);
			}
		}
		_match_end_202d7c729:;
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_285617_ins, 1))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24ae09_AnonFnExprModel>(_1ee24ae09_AnonFnExprModel(_285617_ins,_1eee4720e_is_global(&(*_self_)))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _1eee65381_eval_binop(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e02d7988_BinopExpr> _288534_op) {
	_1eee68818_BinaryEval _288617_bs = static__1eee68e34_new_plain(_self_);
	if ((_self_.get()._field_prefix != nullptr)) {
		jule::Ptr<_1eee7bead_Prim> _289017_prim = _1eee791db_prim(_self_.get()._field_prefix.ptr());
		if ((_289017_prim == nullptr) || (!(_1eeda271e_is_num(_1eee7c387_to_str(_289017_prim.ptr()))))) {
			jule::Ptr<_1eee76b45_TypeKind> _289225_prefix = _self_.get()._field_prefix;
			_self_.get()._field_prefix=nullptr;
			__JULE_DEFER({
				_self_.get()._field_prefix=_289225_prefix;
			});
			return _1eee70039_eval(&_288617_bs, _288534_op);
		}
	}
	return _1eee70039_eval(&_288617_bs, _288534_op);
}



inline jule::Ptr<_1eee43b89_Data> _1eee65738_eval_expr_kind(jule::Ptr<_1eee45be1_Eval> _self_,jule::Any _290238_kind) {
	jule::Ptr<_1eee43b89_Data> _290317_d = nullptr;
	{
		auto &_match_expr{ _290238_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e0181a63_Expr>>()) {
			_case_begin_202d8725b:;
			{
				_290317_d=_1eee65738_eval_expr_kind(_self_, _290238_kind.operator jule::Ptr<_1e0181a63_Expr>().get()._field_kind);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182404_LitExpr>>()) {
			_case_begin_202d872c2:;
			{
				_290317_d=_1eee49475_eval_lit(_self_.ptr(), _290238_kind.operator jule::Ptr<_1e0182404_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182a64_IdentExpr>>()) {
			_case_begin_202d87338:;
			{
				_290317_d=_1eee4eaa7_eval_ident(_self_.ptr(), _290238_kind.operator jule::Ptr<_1e0182a64_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182c84_UnaryExpr>>()) {
			_case_begin_202d87525:;
			{
				_290317_d=_1eee4ee5e_eval_unary(_self_, _290238_kind.operator jule::Ptr<_1e0182c84_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182ea4_VariadicExpr>>()) {
			_case_begin_202d8758b:;
			{
				_290317_d=_1eee50316_eval_variadic(_self_, _290238_kind.operator jule::Ptr<_1e0182ea4_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0182624_UnsafeExpr>>()) {
			_case_begin_202d87602:;
			{
				_290317_d=_1eee506bd_eval_unsafe(_self_, _290238_kind.operator jule::Ptr<_1e0182624_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d8758_SliceExpr>>()) {
			_case_begin_202d87679:;
			{
				_290317_d=_1eee513b1_eval_slice_expr(_self_, _290238_kind.operator jule::Ptr<_1e02d8758_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e01821c3_IndexingExpr>>()) {
			_case_begin_202d87701:;
			{
				_290317_d=_1eee54529_eval_indexing(_self_, _290238_kind.operator jule::Ptr<_1e01821c3_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d8deb_SlicingExpr>>()) {
			_case_begin_202d87778:;
			{
				_290317_d=_1eee55b35_eval_slicing(_self_, _290238_kind.operator jule::Ptr<_1e02d8deb_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7328_CastExpr>>()) {
			_case_begin_202d87800:;
			{
				_290317_d=_1eee59254_eval_cast(_self_, _290238_kind.operator jule::Ptr<_1e02d7328_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7548_NsSelectionExpr>>()) {
			_case_begin_202d87877:;
			{
				_290317_d=_1eee5960b_eval_ns_selection(_self_.ptr(), _290238_kind.operator jule::Ptr<_1e02d7548_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d80e8_StructLit>>()) {
			_case_begin_202d878ee:;
			{
				_290317_d=_1eee5a057_eval_struct_lit(_self_, _290238_kind.operator jule::Ptr<_1e02d80e8_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e01c3db3_TypeDecl>>()) {
			_case_begin_202d87976:;
			{
				_290317_d=_1eee5a40e_eval_type(_self_.ptr(), _290238_kind.operator jule::Ptr<_1e01c3db3_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7ba8_FnCallExpr>>()) {
			_case_begin_202d879ed:;
			{
				_290317_d=_1eee5c378_eval_fn_call(_self_, _290238_kind.operator jule::Ptr<_1e02d7ba8_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7768_SubIdentExpr>>()) {
			_case_begin_202d87a75:;
			{
				_290317_d=_1eee63e2e_eval_sub_ident(_self_, _290238_kind.operator jule::Ptr<_1e02d7768_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0181ea3_TupleExpr>>()) {
			_case_begin_202d87aec:;
			{
				_290317_d=_1eee642d6_eval_tuple(_self_, _290238_kind.operator jule::Ptr<_1e0181ea3_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d8318_BraceLit>>()) {
			_case_begin_202d87b74:;
			{
				_290317_d=_1eee64b22_eval_brace_lit(_self_, _290238_kind.operator jule::Ptr<_1e02d8318_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02da32b_FnDecl>>()) {
			_case_begin_202d87beb:;
			{
				_290317_d=_1eee64ec9_eval_anon_fn(_self_.ptr(), _290238_kind.operator jule::Ptr<_1e02da32b_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7988_BinopExpr>>()) {
			_case_begin_202d87c73:;
			{
				_290317_d=_1eee65381_eval_binop(_self_, _290238_kind.operator jule::Ptr<_1e02d7988_BinopExpr>());
			}
		}
		_match_end_202d87190:;
	}
	if ((_290317_d == nullptr)) {
		return nullptr;
	}
	if ((_290317_d.get()._field_kind == nullptr)) {
		return _290317_d;
	}
	if ((!(_290317_d.get()._field_decl)) && (_self_.get()._field_prefix != nullptr)) {
		if (((((((!(_1eee77926_cpp_linked(_290317_d.get()._field_kind.ptr()))) && (_290317_d.get()._field_cast_kind == nullptr)) && (!(_290317_d.get()._field_kind.get()._field_variadic))) && (!(_290317_d.get()._field_lvalue))) && (!(_1eee44690_is_const(_290317_d.ptr())))) && (_1eee791db_prim(_290317_d.get()._field_kind.ptr()) != nullptr)) && _1eeda271e_is_num(_1eee791db_prim(_290317_d.get()._field_kind.ptr()).get()._field_kind)) {
			_290317_d.get()._field_cast_kind=_290317_d.get()._field_kind;
		}
		_1eee727de_apply_cast_kind(_290317_d);
		if ((_1eee791db_prim(_290317_d.get()._field_kind.ptr()) == nullptr) || (!(_1eee809b7_is_any(_1eee791db_prim(_290317_d.get()._field_kind.ptr()).ptr())))) {
			if ((_1eee791db_prim(_self_.get()._field_prefix.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim(_self_.get()._field_prefix.ptr()).ptr())) {
				_290317_d.get()._field_cast_kind=_self_.get()._field_prefix;
				_1eee72569_apply_cast_kind_model(_290317_d);
				_290317_d.get()._field_cast_kind=nullptr;
			}
		}
	}
	return _290317_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee65ae0_eval(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e0181a63_Expr> _297928_expr) {
	jule::Ptr<_1eee43b89_Data> _298017_d = _1eee65738_eval_expr_kind(_self_, _297928_expr.get()._field_kind);
	if ((_298017_d == nullptr) || (_298017_d.get()._field_kind == nullptr)) {
		return nullptr;
	}
	{
		
		if ((_1eee7a3eb_fnc(_298017_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202d9c282:;
			{
				jule::Ptr<_1ee25b4ad_FnIns> _298721_f = _1eee7a3eb_fnc(_298017_d.get()._field_kind.ptr());
				if (_1ee25c13a_is_builtin(_298721_f.ptr())) {
					goto _match_end_202d9c1a5;
				}
				if (_298721_f.get()._field_generics.len() != static_cast<jule::I32>(static_cast<jule::I32>(_298721_f.get()._field_decl.get()._field_generics.len()))) {
					_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _297928_expr.get()._field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				}
				if (_1ee258257_is_method(_298721_f.get()._field_decl.ptr())) {
					_1eedcd2d8_push_err(_self_.get()._field_s.ptr(), _297928_expr.get()._field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_202d9c1a5:;
	}
	return _298017_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee65e97_eval_expr(jule::Ptr<_1eee45be1_Eval> _self_,jule::Ptr<_1e0181a63_Expr> _300533_expr) {
	jule::Ptr<_1eee43b89_Data> _300617_d = _1eee65ae0_eval(_self_, _300533_expr);
	{
		
		if ((_300617_d == nullptr)) {
			_case_begin_202da1c8c:;
			{
				return nullptr;
			}
		}
		else if (_300617_d.get()._field_decl) {
			_case_begin_202da1d03:;
			{
				_1eee462c9_push_err(_self_.ptr(), _300533_expr.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_202da1693:;
			{
				return _300617_d;
			}
		}
		_match_end_202da163d:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1eee45be1_Eval _Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "arg:" << _Src._field_arg;
	_Stream << "}";
	return _Stream;
}



inline _1eee664e7_UnaryEval static__1eee66a14_new(jule::Ptr<_1eee45be1_Eval> _302623_e) {
	return _1eee664e7_UnaryEval(_302623_e,jule::Ptr<_1eee43b89_Data>(),jule::Ptr<_1e0182c84_UnaryExpr>());
}



inline void _1eee66c56_minus(_1eee664e7_UnaryEval* _self_) {
	{
		
		if (((*_self_)._field_d.get()._field_kind == nullptr)) {
			_case_begin_202da39d6:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		else if ((_1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202da3ec0:;
			{
				if ((!(_1eeda271e_is_num(_1eee77063_to_str((*_self_)._field_d.get()._field_kind.ptr()))))) {
					(*_self_)._field_d=nullptr;
					return;
				}
			}
		}
		else if ((_1eee7a6c6_strct((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202da4036:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_d.get()._field_kind.ptr()).get()._field_operators._field_neg == nullptr)) {
					(*_self_)._field_d=nullptr;
					return;
				}
			}
		}
		else {
			_case_begin_202da3662:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		_match_end_202da3596:;
	}
	if (_1eee44690_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_1eed23eed_is_f64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_202da7985:;
				{
					_1eed22d76_set_f64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::F64>((-(static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			else if (_1eed23393_is_i64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_202da7a0c:;
				{
					_1eed220ea_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((-(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			else if (_1eed2366d_is_u64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_202da7a84:;
				{
					_1eed220ea_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((-(static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			_match_end_202da76ee:;
		}
	}
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d))),(*_self_)._field_u.get()._field_op)));
}



inline void _1eee66e98_plus(_1eee664e7_UnaryEval* _self_) {
	{
		
		if (((*_self_)._field_d.get()._field_kind == nullptr)) {
			_case_begin_202dad89d:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		else if ((_1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202dadd87:;
			{
				if ((!(_1eeda271e_is_num(_1eee77063_to_str((*_self_)._field_d.get()._field_kind.ptr()))))) {
					(*_self_)._field_d=nullptr;
					return;
				}
			}
		}
		else if ((_1eee7a6c6_strct((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202dadded:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_d.get()._field_kind.ptr()).get()._field_operators._field_pos == nullptr)) {
					(*_self_)._field_d=nullptr;
					return;
				}
			}
		}
		else {
			_case_begin_202dad529:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		_match_end_202dad45d:;
	}
	if (_1eee44690_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_1eed23eed_is_f64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_20344530d:;
				{
					_1eed22d76_set_f64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::F64>((+(static_cast<jule::F64>(static_cast<jule::F64>(_1eed2144b_read_f64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			else if (_1eed23393_is_i64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_203445385:;
				{
					_1eed220ea_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((+(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			else if (_1eed2366d_is_u64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_20344540c:;
				{
					_1eed220ea_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((+(static_cast<jule::I64>(static_cast<jule::I64>(_1eed21726_as_i64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			_match_end_203445077:;
		}
	}
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d))),(*_self_)._field_u.get()._field_op)));
}



inline void _1eee671da_caret(_1eee664e7_UnaryEval* _self_) {
	{
		
		if (((*_self_)._field_d.get()._field_kind == nullptr)) {
			_case_begin_20344b3d0:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		else if ((_1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20344b8b9:;
			{
				if ((!(_1eeda20ae_is_int(_1eee77063_to_str((*_self_)._field_d.get()._field_kind.ptr()))))) {
					(*_self_)._field_d=nullptr;
					return;
				}
			}
		}
		else if ((_1eee7a6c6_strct((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20344b930:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_d.get()._field_kind.ptr()).get()._field_operators._field_bit_not == nullptr)) {
					(*_self_)._field_d=nullptr;
					return;
				}
			}
		}
		else {
			_case_begin_20344b05b:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		_match_end_20344ae90:;
	}
	if (_1eee44690_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_1eed23393_is_i64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_2034503a1:;
				{
					_1eed220ea_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((~(static_cast<jule::I64>(static_cast<jule::I64>(_1eed207e1_read_i64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			else if (_1eed2366d_is_u64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_203450417:;
				{
					_1eed22419_set_u64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::U64>((~(static_cast<jule::U64>(static_cast<jule::U64>(_1eed20abb_read_u64((*_self_)._field_d.get()._field_constant.ptr())))))));
				}
			}
			_match_end_20345011a:;
		}
	}
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d))),(*_self_)._field_u.get()._field_op)));
}



inline void _1eee6742c_excl(_1eee664e7_UnaryEval* _self_) {
	jule::Ptr<_1eee7bead_Prim> _314513_t = _1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr());
	if ((_314513_t == nullptr) || (!(_1eee80412_is_bool(_314513_t.ptr())))) {
		(*_self_)._field_d=nullptr;
		return;
	}
	if (_1eee44690_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_1eed23948_is_bool((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_203456808:;
				{
					_1eed22738_set_bool((*_self_)._field_d.get()._field_constant.ptr(), (!(_1eed20d96_read_bool((*_self_)._field_d.get()._field_constant.ptr()))));
				}
			}
			_match_end_203456709:;
		}
	}
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d))),(*_self_)._field_u.get()._field_op)));
}



inline void _1eee6766e_star(_1eee664e7_UnaryEval* _self_) {
	(*_self_)._field_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d))),(*_self_)._field_u.get()._field_op)));
	{
		
		if ((_1eee79791_ptr((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20345a5cb:;
			{
				if ((!(_1eee46e34_is_unsafe((*_self_)._field_e.ptr())))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_u.get()._field_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				jule::Ptr<_1eee89a04_Ptr> _317721_t = _1eee79791_ptr((*_self_)._field_d.get()._field_kind.ptr());
				if (_1eee8a64d_is_unsafe(_317721_t.ptr())) {
					(*_self_)._field_d=nullptr;
					return;
				}
				(*_self_)._field_d.get()._field_kind=_317721_t.get()._field_elem;
			}
		}
		else if ((_1eee794b6_sptr((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20345aab5:;
			{
				(*_self_)._field_d.get()._field_kind=_1eee794b6_sptr((*_self_)._field_d.get()._field_kind.ptr()).get()._field_elem;
			}
		}
		else {
			_case_begin_20345a279:;
			{
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		_match_end_20345a224:;
	}
	(*_self_)._field_d.get()._field_constant=nullptr;
	(*_self_)._field_d.get()._field_lvalue=true;
}



inline void _1eee678b1_amper(_1eee664e7_UnaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee248a0b_StructLitExprModel>>()) {
			_case_begin_203461109:;
			{
				jule::Ptr<_1ee248a0b_StructLitExprModel> _319721_lit = (*_self_)._field_d.get()._field_model.operator jule::Ptr<_1ee248a0b_StructLitExprModel>();
				_1eee71029_make_struct_lit_alloc((*_self_)._field_d,_319721_lit);
			}
		}
		else {
			_case_begin_203460aa9:;
			{
				{
					
					if (_1eee8aa16_can_get_ptr((*_self_)._field_d)) {
						_case_begin_203461417:;
						{
							(*_self_)._field_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee89a04_Ptr>(_1eee89a04_Ptr((*_self_)._field_d.get()._field_kind)), 11)));
							(*_self_)._field_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>((*((*_self_)._field_d))),(*_self_)._field_u.get()._field_op)));
						}
					}
					else {
						_case_begin_203461093:;
						{
							(*_self_)._field_d=nullptr;
						}
					}
					_match_end_203460ee9:;
				}
			}
		}
		_match_end_203460a32:;
	}
	if (((*_self_)._field_d != nullptr)) {
		(*_self_)._field_d.get()._field_constant=nullptr;
		(*_self_)._field_d.get()._field_lvalue=false;
	}
}



inline void _1eee67b03_type_decl(_1eee664e7_UnaryEval* _self_) {
	_1eee8d6a6_TypeChecker _322217_tc = _1eee8d6a6_TypeChecker((*_self_)._field_e.get()._field_s,(*_self_)._field_e.get()._field_lookup,jule::Ptr<_1eee8c760_Referencer>(),(*_self_)._field_u.get()._field_op,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool());
	{
		auto &_match_expr{ (*_self_)._field_u.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_2034682ba:;
			{
				(*_self_)._field_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee93ba6_build_ptr_from_type(&_322217_tc, (*_self_)._field_d.get()._field_kind), 11)));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_203468331:;
			{
				(*_self_)._field_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee93447_build_sptr_from_type(&_322217_tc, (*_self_)._field_d.get()._field_kind), 6)));
			}
		}
		else {
			_case_begin_2034654a4:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_u.get()._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*_self_)._field_u.get()._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_d.get()._field_kind.ptr()))}));
				(*_self_)._field_d=nullptr;
				return;
			}
		}
		_match_end_2034665c6:;
	}
	(*_self_)._field_d.get()._field_decl=true;
}



inline void _1eee67d45_eval_data(_1eee664e7_UnaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_u.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("&", 1)) {
			_case_begin_20346bbd6:;
			{
				jule::Ptr<_1eee76b45_TypeKind> _324421_prefix = (*_self_)._field_e.get()._field_prefix;
				(*_self_)._field_e.get()._field_prefix=nullptr;
				(*_self_)._field_d=_1eee65738_eval_expr_kind((*_self_)._field_e, jule::Any((*_self_)._field_u.get()._field_expr));
				(*_self_)._field_e.get()._field_prefix=_324421_prefix;
			}
		}
		else {
			_case_begin_20346b3cd:;
			{
				(*_self_)._field_d=_1eee65738_eval_expr_kind((*_self_)._field_e, jule::Any((*_self_)._field_u.get()._field_expr));
			}
		}
		_match_end_20346b873:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee681b9_eval(_1eee664e7_UnaryEval* _self_,jule::Ptr<_1e0182c84_UnaryExpr> _325327_u) {
	(*_self_)._field_u=_325327_u;
	_1eee67d45_eval_data(&(*_self_));
	if (((*_self_)._field_d == nullptr)) {
		return nullptr;
	}
	if ((*_self_)._field_d.get()._field_decl) {
		_1eee67b03_type_decl(&(*_self_));
		return (*_self_)._field_d;
	}
	jule::Ptr<_1eee76b45_TypeKind> _326417_cast_kind = (*_self_)._field_d.get()._field_cast_kind;
	jule::Ptr<_1eee76b45_TypeKind> _326513_kind = (*_self_)._field_d.get()._field_kind;
	{
		auto &_match_expr{ (*_self_)._field_u.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_203471b86:;
			{
				_1eee66c56_minus(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_203471bec:;
			{
				_1eee66e98_plus(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_203471c63:;
			{
				_1eee671da_caret(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_203471cc9:;
			{
				_1eee6742c_excl(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_20347237e:;
			{
				_1eee6766e_star(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_2034723e5:;
			{
				_1eee678b1_amper(&(*_self_));
			}
		}
		else {
			_case_begin_20346e546:;
			{
				(*_self_)._field_d=nullptr;
			}
		}
		_match_end_2034719dd:;
	}
	{
		
		if (((*_self_)._field_d == nullptr)) {
			_case_begin_20347464a:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_u.get()._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*_self_)._field_u.get()._field_op._field_kind),jule::Any(_1eee77063_to_str(_326513_kind.ptr()))}));
				return nullptr;
			}
		}
		else if (_1eee44690_is_const((*_self_)._field_d.ptr())) {
			_case_begin_2034746b1:;
			{
				(*_self_)._field_d.get()._field_model=jule::Any((*_self_)._field_d.get()._field_constant);
			}
		}
		else if ((_326417_cast_kind != nullptr)) {
			_case_begin_203474727:;
			{
				(*_self_)._field_d.get()._field_cast_kind=_326417_cast_kind;
				_1eee727de_apply_cast_kind((*_self_)._field_d);
			}
		}
		_match_end_2034740d9:;
	}
	(*_self_)._field_d.get()._field_mutable=true;
	return (*_self_)._field_d;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee664e7_UnaryEval _Src) {
	_Stream << "UnaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "u:" << _Src._field_u;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eee77063_to_str(_1eee76b45_TypeKind* _self_) {
	if (_1eee77c01_is_nil(&(*_self_))) {
		return jule::Str("nil", 3);
	}
	jule::Str _7717_kind = jule::Str();
	if ((*_self_)._field_variadic) {
		_7717_kind+=jule::Str("...", 3);
	}
	if (_1eee77926_cpp_linked(&(*_self_))) {
		_7717_kind+=jule::Str("cpp.", 4);
		_7717_kind+=(*_self_)._field_cpp_ident;
	} else {
		_7717_kind+=_1eee76606_Kind_mptr_data[((*_self_)._field_kind).type_offset]._1eee760c8_to_str((*_self_)._field_kind);
	}
	return _7717_kind;
}



inline jule::Bool _1eee7741a_equals(jule::Ptr<_1eee76b45_TypeKind> _self_,jule::Ptr<_1eee76b45_TypeKind> _9326_other) {
	if (_1eee77c01_is_nil(_self_.ptr())) {
		return _1eee77c01_is_nil(_9326_other.ptr());
	}
	if (_1eee77926_cpp_linked(_self_.ptr())) {
		return _1eee77926_cpp_linked(_9326_other.ptr()) && (_self_.get()._field_cpp_ident == _9326_other.get()._field_cpp_ident);
	}
	return _1eee76606_Kind_mptr_data[(_self_.get()._field_kind).type_offset]._1eee76480_equals(_self_.get()._field_kind, _9326_other);
}



inline jule::Bool _1eee77926_cpp_linked(_1eee76b45_TypeKind* _self_) {
	return ((*_self_)._field_cpp_ident.len() != 0LL);
}



inline jule::Bool _1eee77c01_is_nil(_1eee76b45_TypeKind* _self_) {
	return ((*_self_)._field_kind == nullptr);
}



inline jule::Bool _1eee77ecb_void(_1eee76b45_TypeKind* _self_) {
	jule::Ptr<_1eee7bead_Prim> _11613_prim = _1eee791db_prim(&(*_self_));
	return (_11613_prim != nullptr) && (_11613_prim.get()._field_kind == jule::Str("void", 4));
}



inline jule::Bool _1eee782a6_mutable(_1eee76b45_TypeKind* _self_) {
	{
		_1eee76b45_TypeKind* _12321__self = (&((*_self_)));
		if ((_1eee7a6c6_strct(_12321__self) != nullptr)) {
			return _1eee7a6c6_strct(_12321__self).get()._field_mutable;
		}
		if ((_1eee7a9a1_trt(_12321__self) != nullptr)) {
			return _1eee7a9a1_trt(_12321__self).get()._field_mutable;
		}
		if ((_1eee791db_prim(_12321__self) != nullptr)) {
			jule::Ptr<_1eee7bead_Prim> _13221_p = _1eee791db_prim(_12321__self);
			return _1eee809b7_is_any(_13221_p.ptr());
		}
		if ((_1eee79d46_arr(_12321__self) != nullptr)) {
			return _1eee782a6_mutable(_1eee79d46_arr(_12321__self).get()._field_elem.ptr());
		}
		return ((_1eee7a121_slc(_12321__self) != nullptr) || (_1eee79791_ptr(_12321__self) != nullptr)) || (_1eee794b6_sptr(_12321__self) != nullptr);
	}
}



inline jule::Bool _1eee78581_nil_compatible(_1eee76b45_TypeKind* _self_) {
	{
		_1eee76b45_TypeKind* _14721__self = (&((*_self_)));
		jule::Ptr<_1eee7bead_Prim> _14917_prim = _1eee791db_prim(_14721__self);
		if ((_14917_prim != nullptr) && _1eee809b7_is_any(_14917_prim.ptr())) {
			return true;
		}
		return (((((_1eee77c01_is_nil(_14721__self) || (_1eee7a3eb_fnc(_14721__self) != nullptr)) || (_1eee794b6_sptr(_14721__self) != nullptr)) || (_1eee79791_ptr(_14721__self) != nullptr)) || (_1eee7a9a1_trt(_14721__self) != nullptr)) || (_1eee7a121_slc(_14721__self) != nullptr)) || (_1eee7ac7b_map(_14721__self) != nullptr);
	}
}



inline jule::Bool _1eee7885b_performs_rc(_1eee76b45_TypeKind* _self_) {
	{
		_1eee76b45_TypeKind* _16721__self = (&((*_self_)));
		return ((_1eee794b6_sptr(_16721__self) != nullptr) || (_1eee7a121_slc(_16721__self) != nullptr)) || (_1eee7a9a1_trt(_16721__self) != nullptr);
	}
}



inline jule::Bool _1eee78b36_supports_cloning(_1eee76b45_TypeKind* _self_) {
	{
		_1eee76b45_TypeKind* _17521__self = (&((*_self_)));
		{
			
			if ((_1eee791db_prim(_17521__self) != nullptr)) {
				_case_begin_20355edd9:;
				{
					return (!(_1eee809b7_is_any(_1eee791db_prim(_17521__self).ptr())));
				}
			}
			else if ((_1eee79a6b_enm(_17521__self) != nullptr)) {
				_case_begin_20355ee50:;
				{
					return true;
				}
			}
			else if ((_1eee7a3eb_fnc(_17521__self) != nullptr)) {
				_case_begin_20355eb0e:;
				{
					return true;
				}
			}
			else if ((_1eee79791_ptr(_17521__self) != nullptr)) {
				_case_begin_20355eb75:;
				{
					return true;
				}
			}
			else if ((_1eee7a121_slc(_17521__self) != nullptr)) {
				_case_begin_20355ebdb:;
				{
					return _1eee78b36_supports_cloning(_1eee7a121_slc(_17521__self).get()._field_elem.ptr());
				}
			}
			else if ((_1eee7ac7b_map(_17521__self) != nullptr)) {
				_case_begin_20355e713:;
				{
					jule::Ptr<_1eee832d3_Map> _18521_m = _1eee7ac7b_map(_17521__self);
					return _1eee78b36_supports_cloning(_18521_m.get()._field_key.ptr()) && _1eee78b36_supports_cloning(_18521_m.get()._field_val.ptr());
				}
			}
			else if ((_1eee79d46_arr(_17521__self) != nullptr)) {
				_case_begin_20355e779:;
				{
					return _1eee78b36_supports_cloning(_1eee79d46_arr(_17521__self).get()._field_elem.ptr());
				}
			}
			else if ((_1eee794b6_sptr(_17521__self) != nullptr)) {
				_case_begin_20355e7e0:;
				{
					return _1eee78b36_supports_cloning(_1eee794b6_sptr(_17521__self).get()._field_elem.ptr());
				}
			}
			else if ((_1eee7a6c6_strct(_17521__self) != nullptr)) {
				_case_begin_20355e856:;
				{
					jule::Ptr<_1ee24550d_StructIns> _19225_s = _1eee7a6c6_strct(_17521__self);
					return ((_19225_s.get()._field_decl != nullptr) && (!(_19225_s.get()._field_decl.get()._field_cpp_linked))) && _1ee243cd1_is_derives(_19225_s.get()._field_decl.ptr(), jule::Str("Clone", 5));
				}
			}
			else {
				_case_begin_20355e69c:;
				{
					return false;
				}
			}
			_match_end_20355e625:;
		}
	}
}



inline jule::Bool _1eee78e11_variadicable(_1eee76b45_TypeKind* _self_) {
	{
		_1eee76b45_TypeKind* _20521__self = (&((*_self_)));
		return (_1eee7a121_slc(_20521__self) != nullptr);
	}
}



inline jule::Ptr<_1eee7bead_Prim> _1eee791db_prim(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee7bead_Prim>>()) {
			_case_begin_203568ce4:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee7bead_Prim>();
			}
		}
		else {
			_case_begin_20355c15b:;
			{
				return nullptr;
			}
		}
		_match_end_20355c106:;
	}
}



inline jule::Ptr<_1eee80d19_Sptr> _1eee794b6_sptr(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee80d19_Sptr>>()) {
			_case_begin_2035688e8:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee80d19_Sptr>();
			}
		}
		else {
			_case_begin_203568bd4:;
			{
				return nullptr;
			}
		}
		_match_end_203568b7e:;
	}
}



inline jule::Ptr<_1eee89a04_Ptr> _1eee79791_ptr(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee89a04_Ptr>>()) {
			_case_begin_20356a9c7:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee89a04_Ptr>();
			}
		}
		else {
			_case_begin_203569d8e:;
			{
				return nullptr;
			}
		}
		_match_end_20356a06a:;
	}
}



inline jule::Ptr<_1eec889ac_Enum> _1eee79a6b_enm(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eec889ac_Enum>>()) {
			_case_begin_20356a598:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eec889ac_Enum>();
			}
		}
		else {
			_case_begin_20356a8a6:;
			{
				return nullptr;
			}
		}
		_match_end_20356a851:;
	}
}



inline jule::Ptr<_1eee88e21_Arr> _1eee79d46_arr(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee88e21_Arr>>()) {
			_case_begin_20356b4bc:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee88e21_Arr>();
			}
		}
		else {
			_case_begin_20356b6ed:;
			{
				return nullptr;
			}
		}
		_match_end_20356b698:;
	}
}



inline jule::Ptr<_1eee818ec_Slc> _1eee7a121_slc(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee818ec_Slc>>()) {
			_case_begin_20356c325:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee818ec_Slc>();
			}
		}
		else {
			_case_begin_20356c556:;
			{
				return nullptr;
			}
		}
		_match_end_20356c501:;
	}
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1eee7a3eb_fnc(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ee25b4ad_FnIns>>()) {
			_case_begin_20356e305:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1ee25b4ad_FnIns>();
			}
		}
		else {
			_case_begin_20356d6bc:;
			{
				return nullptr;
			}
		}
		_match_end_20356d898:;
	}
}



inline jule::Ptr<_1ee24550d_StructIns> _1eee7a6c6_strct(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24550d_StructIns>>()) {
			_case_begin_20356ddc6:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1ee24550d_StructIns>();
			}
		}
		else {
			_case_begin_20356e1d4:;
			{
				return nullptr;
			}
		}
		_match_end_20356e17e:;
	}
}



inline jule::Ptr<_1eec8627e_Trait> _1eee7a9a1_trt(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eec8627e_Trait>>()) {
			_case_begin_20357104e:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eec8627e_Trait>();
			}
		}
		else {
			_case_begin_20357002b:;
			{
				return nullptr;
			}
		}
		_match_end_20356eec6:;
	}
}



inline jule::Ptr<_1eee832d3_Map> _1eee7ac7b_map(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee832d3_Map>>()) {
			_case_begin_203571deb:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee832d3_Map>();
			}
		}
		else {
			_case_begin_203570e3e:;
			{
				return nullptr;
			}
		}
		_match_end_203570dd9:;
	}
}



inline jule::Ptr<_1eee82568_Tuple> _1eee7b056_tup(_1eee76b45_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee82568_Tuple>>()) {
			_case_begin_203572c76:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_1eee82568_Tuple>();
			}
		}
		else {
			_case_begin_20357214e:;
			{
				return nullptr;
			}
		}
		_match_end_2035720e9:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1eee76b45_TypeKind _Src) {
	_Stream << _1eee77063_to_str(&_Src);
	return _Stream;
}



inline jule::Bool _1eee7b919_checked(_1eee7b4a7_TypeSymbol* _self_) {
	return ((*_self_)._field_kind != nullptr);
}



inline void _1eee7bb5b_remove_kind(_1eee7b4a7_TypeSymbol* _self_) {
	(*_self_)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee7b4a7_TypeSymbol _Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eee7c387_to_str(_1eee7bead_Prim* _self_) {
	return (*_self_)._field_kind;
}



inline jule::Bool _1eee7c73e_equals(jule::Ptr<_1eee7bead_Prim> _self_,jule::Ptr<_1eee76b45_TypeKind> _32626_other) {
	jule::Ptr<_1eee7bead_Prim> _32713_prim = _1eee791db_prim(_32626_other.ptr());
	if ((_32713_prim == nullptr)) {
		return false;
	}
	return _self_.get()._field_kind == _32713_prim.get()._field_kind;
}



inline jule::Bool _1eee7cc17_is_i8(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i8", 2));
}



inline jule::Bool _1eee7cee2_is_i16(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i16", 3));
}



inline jule::Bool _1eee7d2bc_is_i32(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i32", 3));
}



inline jule::Bool _1eee7d597_is_i64(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i64", 3));
}



inline jule::Bool _1eee7d872_is_u8(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u8", 2));
}



inline jule::Bool _1eee7db4c_is_u16(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u16", 3));
}



inline jule::Bool _1eee7de27_is_u32(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u32", 3));
}



inline jule::Bool _1eee7e202_is_u64(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u64", 3));
}



inline jule::Bool _1eee7e4cc_is_f32(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("f32", 3));
}



inline jule::Bool _1eee7e7a7_is_f64(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("f64", 3));
}



inline jule::Bool _1eee7ea82_is_int(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("int", 3));
}



inline jule::Bool _1eee7ed5c_is_uint(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("uint", 4));
}



inline jule::Bool _1eee80137_is_uintptr(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("uintptr", 7));
}



inline jule::Bool _1eee80412_is_bool(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("bool", 4));
}



inline jule::Bool _1eee806dc_is_str(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("str", 3));
}



inline jule::Bool _1eee809b7_is_any(_1eee7bead_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("any", 3));
}







std::ostream &operator<<(std::ostream &_Stream, _1eee7bead_Prim _Src) {
	_Stream << _1eee7c387_to_str(&_Src);
	return _Stream;
}



inline jule::Str _1eee811e3_to_str(_1eee80d19_Sptr* _self_) {
	return jule::Str("&", 1) + _1eee77063_to_str((*_self_)._field_elem.ptr());
}



inline jule::Bool _1eee8159a_equals(jule::Ptr<_1eee80d19_Sptr> _self_,jule::Ptr<_1eee76b45_TypeKind> _39526_other) {
	jule::Ptr<_1eee80d19_Sptr> _39613_sptr = _1eee794b6_sptr(_39526_other.ptr());
	if ((_39613_sptr == nullptr)) {
		return false;
	}
	return _1eee7741a_equals(_self_.get()._field_elem, _39613_sptr.get()._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, _1eee80d19_Sptr _Src) {
	_Stream << _1eee811e3_to_str(&_Src);
	return _Stream;
}



inline jule::Str _1eee81d5e_to_str(_1eee818ec_Slc* _self_) {
	return jule::Str("[]", 2) + _1eee77063_to_str((*_self_)._field_elem.ptr());
}



inline jule::Bool _1eee82216_equals(jule::Ptr<_1eee818ec_Slc> _self_,jule::Ptr<_1eee76b45_TypeKind> _41426_other) {
	jule::Ptr<_1eee818ec_Slc> _41513_slc = _1eee7a121_slc(_41426_other.ptr());
	if ((_41513_slc == nullptr)) {
		return false;
	}
	return _1eee7741a_equals(_self_.get()._field_elem, _41513_slc.get()._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, _1eee818ec_Slc _Src) {
	_Stream << _1eee81d5e_to_str(&_Src);
	return _Stream;
}



inline jule::Str _1eee829ca_to_str(_1eee82568_Tuple* _self_) {
	jule::Str _43117_s = jule::Str("(", 1);
	_43117_s+=_1eee77063_to_str((*_self_)._field_types[0LL].ptr());
	{
		auto expr = (*_self_)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_203585b02:;
		if (it != expr.end()) {
			jule::Ptr<_1eee76b45_TypeKind> &_203585cab_t = *it;
			{
				_43117_s+=jule::Str(",", 1);
				_43117_s+=_1eee77063_to_str(_203585cab_t.ptr());
			}
			_iter_next_203585b02:;
			++it;
			goto _iter_begin_203585b02;
		}
		_iter_end_203585b02:;
	}
	_43117_s+=jule::Str(")", 1);
	return _43117_s;
}



inline jule::Bool _1eee82d82_equals(jule::Ptr<_1eee82568_Tuple> _self_,jule::Ptr<_1eee76b45_TypeKind> _44226_other) {
	jule::Ptr<_1eee82568_Tuple> _44313_tup = _1eee7b056_tup(_44226_other.ptr());
	if ((_44313_tup == nullptr)) {
		return false;
	}
	if (_self_.get()._field_types.len() != static_cast<jule::I32>(static_cast<jule::I32>(_44313_tup.get()._field_types.len()))) {
		return false;
	}
	jule::I32 _45217_i = 0LL;
	for (; _45217_i < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_types.len())); (_45217_i)++) {
		{
			if ((!(_1eee7741a_equals(_self_.get()._field_types[_45217_i], _44313_tup.get()._field_types[_45217_i])))) {
				return false;
			}
		}
	_iter_next_203588d47:;
	}
	_iter_end_203588d47:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee82568_Tuple _Src) {
	_Stream << _1eee829ca_to_str(&_Src);
	return _Stream;
}



inline jule::Str _1eee836ac_to_str(_1eee832d3_Map* _self_) {
	jule::Str _47217_s = jule::Str("[", 1);
	_47217_s+=_1eee77063_to_str((*_self_)._field_key.ptr());
	_47217_s+=jule::Str(":", 1);
	_47217_s+=_1eee77063_to_str((*_self_)._field_val.ptr());
	_47217_s+=jule::Str("]", 1);
	return _47217_s;
}



inline jule::Bool _1eee8896a_equals(jule::Ptr<_1eee832d3_Map> _self_,jule::Ptr<_1eee76b45_TypeKind> _48126_other) {
	jule::Ptr<_1eee832d3_Map> _48213_map = _1eee7ac7b_map(_48126_other.ptr());
	if ((_48213_map == nullptr)) {
		return false;
	}
	return _1eee7741a_equals(_self_.get()._field_key, _48213_map.get()._field_key) && _1eee7741a_equals(_self_.get()._field_val, _48213_map.get()._field_val);
}







std::ostream &operator<<(std::ostream &_Stream, _1eee832d3_Map _Src) {
	_Stream << _1eee836ac_to_str(&_Src);
	return _Stream;
}



inline jule::Str _1eee892ea_to_str(_1eee88e21_Arr* _self_) {
	jule::Str _50017_s = jule::Str("[", 1);
	_50017_s+=_1eec84964_itoa((*_self_)._field_n);
	_50017_s+=jule::Str("]", 1);
	_50017_s+=_1eee77063_to_str((*_self_)._field_elem.ptr());
	return _50017_s;
}



inline jule::Bool _1eee896a2_equals(jule::Ptr<_1eee88e21_Arr> _self_,jule::Ptr<_1eee76b45_TypeKind> _50826_other) {
	jule::Ptr<_1eee88e21_Arr> _50913_arr = _1eee79d46_arr(_50826_other.ptr());
	if ((_50913_arr == nullptr)) {
		return false;
	}
	return (_self_.get()._field_n == _50913_arr.get()._field_n) && _1eee7741a_equals(_self_.get()._field_elem, _50913_arr.get()._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, _1eee88e21_Arr _Src) {
	_Stream << _1eee892ea_to_str(&_Src);
	return _Stream;
}



inline jule::Str _1eee89dcd_to_str(_1eee89a04_Ptr* _self_) {
	if (_1eee8a64d_is_unsafe(&(*_self_))) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + _1eee77063_to_str((*_self_)._field_elem.ptr());
}



inline jule::Bool _1eee8a285_equals(jule::Ptr<_1eee89a04_Ptr> _self_,jule::Ptr<_1eee76b45_TypeKind> _53226_other) {
	jule::Ptr<_1eee89a04_Ptr> _53313_ptr = _1eee79791_ptr(_53226_other.ptr());
	if ((_53313_ptr == nullptr)) {
		return false;
	}
	return _1eee7741a_equals(_self_.get()._field_elem, _53313_ptr.get()._field_elem);
}



inline jule::Bool _1eee8a64d_is_unsafe(_1eee89a04_Ptr* _self_) {
	return ((*_self_)._field_elem == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1eee89a04_Ptr _Src) {
	_Stream << _1eee89dcd_to_str(&_Src);
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee8c760_Referencer _Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0131271_CompileInfo _Src) {
	_Stream << "CompileInfo{";
	_Stream << "prod:" << _Src._field_prod << ", ";
	_Stream << "test:" << _Src._field_test << ", ";
	_Stream << "compiler:" << _Src._field_compiler << ", ";
	_Stream << "cpp_std:" << _Src._field_cpp_std;
	_Stream << "}";
	return _Stream;
}



inline void _1e013929b_push_err(_1e0164716_DirectiveEval* _self_,_1e02c1d07_Token _2127_t,jule::Str _2137_fmt,jule::Slice<jule::Any> _2150_args) {
	(*_self_)._field_logs = jule::alloc_for_append((*_self_)._field_logs,1);(*_self_)._field_logs.__push(_208de2238_Log(static_cast<jule::I32>(1LL),_2127_t._field_row,_2127_t._field_column,_2127_t._field_file.get()._field_path,_208de2722_logf(_2137_fmt,_2150_args),jule::Str(),jule::Str()));
}



inline jule::Slice<jule::Slice<_1e02c1d07_Token>> _1e013a533_split_operans(_1e0164716_DirectiveEval* _self_,jule::Str _3332_op,jule::Slice<_1e02c1d07_Token>& _3352_tokens) {
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _3417_parts = jule::Slice<jule::Slice<_1e02c1d07_Token>>::alloc(0LL,10LL);
	jule::I32 _3617_i = 0LL;
	jule::I32 _3717_range_n = 0LL;
	jule::I32 _3817_last = 0LL;
	for (; _3617_i < static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_3352_tokens.len())) - 1LL))); (_3617_i)++) {
		{
			_1e02c1d07_Token _4017_b = _3352_tokens[_3617_i];
			if (_4017_b._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _4017_b._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_2037d535c:;
						{
							(_3717_range_n)++;
							goto _iter_next_2037d42d4;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_2037d53c3:;
						{
							(_3717_range_n)--;
						}
					}
					_match_end_2037d52c4:;
				}
			}
			if ((_3717_range_n > 0LL) || (_4017_b._field_id != static_cast<jule::U32>(7LLU))) {
				goto _iter_next_2037d42d4;
			}
			if (_4017_b._field_kind == _3332_op) {
				_3417_parts = jule::alloc_for_append(_3417_parts,1);_3417_parts.__push(_3352_tokens.slice(_3817_last,_3617_i));
				_3817_last=static_cast<jule::I32>((_3617_i + 1LL));
			}
		}
	_iter_next_2037d42d4:;
	}
	_iter_end_2037d42d4:;
	if (_3817_last < static_cast<jule::I32>(static_cast<jule::I32>(_3352_tokens.len()))) {
		_3417_parts = jule::alloc_for_append(_3417_parts,1);_3417_parts.__push(_3352_tokens.slice(_3817_last));
	} else {
		_1e013929b_push_err(&(*_self_), _3352_tokens[(_3817_last - 1LL)],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _3417_parts;
}



inline jule::Bool _1e013663e_eval_directive_ident(_1e0164716_DirectiveEval* _self_,jule::Str _7435_ident) {
	if (_7435_ident.empty()) {
		return false;
	}
	{
		auto &expr = (*_self_)._field_vars;
		auto it = expr.begin();
		_iter_begin_2037d9a7b:;
		if (it != expr.end()) {
			jule::Str &_2037d9dde_var = *it;
			{
				if (_2037d9dde_var == _7435_ident) {
					return true;
				}
			}
			_iter_next_2037d9a7b:;
			++it;
			goto _iter_begin_2037d9a7b;
		}
		_iter_end_2037d9a7b:;
	}
	return false;
}



inline jule::Bool _1e014ba2d_eval_directive_part(_1e0164716_DirectiveEval* _self_,jule::Slice<_1e02c1d07_Token> _8842_part) {
	jule::Bool _8913_logical_not = (_8842_part[0LL]._field_id == static_cast<jule::U32>(7LLU)) && (_8842_part[0LL]._field_kind == jule::Str("!", 1));
	if (_8913_logical_not) {
		_8842_part=_8842_part.slice(1LL);
	}
	if ((_8842_part.len() > 1LL)) {
		_1e013929b_push_err(&(*_self_), _8842_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _9917_result = _1e013663e_eval_directive_ident(&(*_self_), _8842_part[0LL]._field_kind);
	if (_8913_logical_not) {
		_9917_result=(!(_9917_result));
	}
	return _9917_result;
}



inline jule::Bool _1e013eda6_eval(_1e0164716_DirectiveEval* _self_) {
	if (((*_self_)._field_d.get()._field_args.len() == 0LL)) {
		_1e013929b_push_err(&(*_self_), (*_self_)._field_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _11217_result = false;
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _11417_logical_or_parts = _1e013a533_split_operans(&(*_self_), jule::Str("||", 2),(*_self_)._field_d.get()._field_args);
	if ((_11417_logical_or_parts == nullptr)) {
		return false;
	}
	{
		auto &expr = _11417_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_2037e1c1a:;
		if (it != expr.end()) {
			jule::Slice<_1e02c1d07_Token> _2037e19d9_part = *it;
			{
				jule::Bool _12021_and = true;
				jule::Slice<jule::Slice<_1e02c1d07_Token>> _12121_logical_and_parts = _1e013a533_split_operans(&(*_self_), jule::Str("&&", 2),_2037e19d9_part);
				if ((_12121_logical_and_parts == nullptr)) {
					return false;
				}
				{
					auto &expr = _12121_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_2037e33ae:;
					if (it != expr.end()) {
						jule::Slice<_1e02c1d07_Token> _2037e318e_and_part = *it;
						{
							_1e02c1d07_Token _12721_first = _2037e318e_and_part[0LL];
							if ((_12721_first._field_id == static_cast<jule::U32>(3LLU)) && (_12721_first._field_kind == jule::Str("(", 1))) {
								_1e02c1d07_Token _12925_end = _2037e318e_and_part[(_2037e318e_and_part.len() - 1LL)];
								if ((_12925_end._field_id != static_cast<jule::U32>(3LLU)) || (_12925_end._field_kind != jule::Str(")", 1))) {
									_1e013929b_push_err(&(*_self_), _12721_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								}
								_2037e318e_and_part=_2037e318e_and_part.slice(1LL,(_2037e318e_and_part.len() - 1LL));
							}
							_12021_and=_12021_and && _1e014ba2d_eval_directive_part(&(*_self_), _2037e318e_and_part);
						}
						_iter_next_2037e33ae:;
						++it;
						goto _iter_begin_2037e33ae;
					}
					_iter_end_2037e33ae:;
				}
				_11217_result=_11217_result || _12021_and;
			}
			_iter_next_2037e1c1a:;
			++it;
			goto _iter_begin_2037e1c1a;
		}
		_iter_end_2037e1c1a:;
	}
	return _11217_result;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0164716_DirectiveEval _Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "vars:" << _Src._field_vars;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ed1dc40c_JuleImporter> static__1ed160aab_new(_1e0131271_CompileInfo _5823_info) {
	jule::Ptr<_1ed1dc40c_JuleImporter> _5917_imp = jule::new_ptr<_1ed1dc40c_JuleImporter>(_1ed1dc40c_JuleImporter(jule::Slice<jule::Str>({_208e02831_PATH_STDLIB}),jule::Str(),jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>>(),jule::Slice<jule::Str>()));
	_1e0131c11_init_vars(_5917_imp.get()._field_vars,_5823_info);
	return _5917_imp;
}



inline jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> _1ed1d7281_all_packages(_1ed1dc40c_JuleImporter* _self_) {
	return (*_self_)._field_pkgs;
}



inline void _1ed1d8e64_set_mod_path(_1ed1dc40c_JuleImporter* _self_,jule::Str _7535_path) {
	(*_self_)._field_mod=_7535_path;
}



inline jule::Str _1ed1daa8c_get_mod_path(_1ed1dc40c_JuleImporter* _self_) {
	return (*_self_)._field_mod;
}



inline jule::Str _1ed224e17_mod_by_id(_1ed1dc40c_JuleImporter* _self_,jule::I32 _8328_id) {
	return (*_self_)._field_mods[_8328_id];
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1ed2283c1_get_import(_1ed1dc40c_JuleImporter* _self_,jule::Str _8733_path) {
	{
		auto &expr = (*_self_)._field_pkgs;
		auto it = expr.begin();
		_iter_begin_2037eb8b2:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _2037ebbd1_p = *it;
			{
				if (_2037ebbd1_p.get()._field_path == _8733_path) {
					return _2037ebbd1_p;
				}
			}
			_iter_next_2037eb8b2:;
			++it;
			goto _iter_begin_2037eb8b2;
		}
		_iter_end_2037eb8b2:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>,jule::Slice<_208de2238_Log>> _1ed22dd11_import_package(_1ed1dc40c_JuleImporter* _self_,jule::Str _9637_path,jule::Bool _9648_update_mod) {
	jule::Slice<jule::Ptr<_2223e8825_DirEntry>> _9717_dirents = ({
		auto except = static__208c7593a_read(_9637_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_208de2238_Log>({_1ed14cc41_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _9637_path)}));
			return std::make_tuple(nullptr,jule::Slice<_208de2238_Log>({_1ed14cc41_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _9637_path)}));
		} jule::Slice<jule::Ptr<_2223e8825_DirEntry>>();});
	});
	if (_9648_update_mod) {
		jule::Str _10217_new_mod = _1e014231a_find_module_file_deep(_9637_path);
		if (_10217_new_mod != (*_self_)._field_mod) {
			(*_self_)._field_mod=_10217_new_mod;
			jule::Slice<_208de2238_Log> _10525_errs = _1e014363a_check_module_file((*_self_)._field_mod);
			if ((_10525_errs.len() != 0LL)) {
				return std::make_tuple(nullptr,_10525_errs);
			}
		}
	}
	jule::Slice<jule::Ptr<_1e01bcb7b_Ast>> _11217_asts = jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>::alloc(0LL,static_cast<jule::I32>(_9717_dirents.len()));
	{
		auto &expr = _9717_dirents;
		auto it = expr.begin();
		_iter_begin_2038020c1:;
		if (it != expr.end()) {
			jule::Ptr<_2223e8825_DirEntry> _203802258_dirent = *it;
			{
				if (_22243c6d2_is_dir(_203802258_dirent.get()._field_stat.ptr()) || (!(_208be3556_has_suffix(_203802258_dirent.get()._field_name,jule::Str(".jule", 5))))) {
					goto _iter_next_2038020c1;
				}
				jule::Str _11917__path = _208c750aa_join(jule::Slice<jule::Str>({_9637_path,_203802258_dirent.get()._field_name}));
				jule::Ptr<_1e02c7e51_File> _12021_file = _1e02c97e3_new_file_set(_11917__path);
				_1e02c86e3_fill(_12021_file.ptr(), _1ed149820_read_buff(_12021_file.get()._field_path));
				jule::Slice<_208de2238_Log> _12221_errors = _1e02d713b_lex(_12021_file,static_cast<jule::I32>(0LL));
				if ((_12221_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_12221_errors);
				}
				jule::Ptr<_1ed0e56de_FileInfo> _12721_finfo = _1ed0e5ba6_parse_file(_12021_file);
				if ((_12721_finfo.get()._field_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_12721_finfo.get()._field_errors);
				}
				if ((!(_1e0130490_is_pass_file_annotation(_203802258_dirent.get()._field_name)))) {
					goto _iter_next_2038020c1;
				}
				jule::Bool _13718_r;
				jule::Slice<_208de2238_Log> _13725_logs;
				std::tie(_13718_r,_13725_logs) = _1ed2b3e2e_is_pass_build_directives(&(*_self_), _12721_finfo.get()._field_ast);
				if ((_13725_logs.len() > 0LL)) {
					return std::make_tuple(nullptr,_13725_logs);
				}
				if ((!(_13718_r))) {
					goto _iter_next_2038020c1;
				}
				_11217_asts = jule::alloc_for_append(_11217_asts,1);_11217_asts.__push(_12721_finfo.get()._field_ast);
			}
			_iter_next_2038020c1:;
			++it;
			goto _iter_begin_2038020c1;
		}
		_iter_end_2038020c1:;
	}
	return std::make_tuple(_11217_asts,nullptr);
}



inline void _1ed25c416_imported(_1ed1dc40c_JuleImporter* _self_,jule::Ptr<_1eedc08c4_ImportInfo> _15335_imp) {
	{
		auto &expr = (*_self_)._field_pkgs;
		auto it = expr.begin();
		_iter_begin_20380979e:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203809abd_p = *it;
			{
				if ((_203809abd_p.get()._field_cpp_linked == _15335_imp.get()._field_cpp_linked) && (_203809abd_p.get()._field_link_path == _15335_imp.get()._field_link_path)) {
					return;
				}
			}
			_iter_next_20380979e:;
			++it;
			goto _iter_begin_20380979e;
		}
		_iter_end_20380979e:;
	}
	if (((*_self_)._field_mod.len() != 0LL)) {
		{
			auto &expr = (*_self_)._field_mods;
			auto it = expr.begin();
			_iter_begin_20380ad11:;
			if (it != expr.end()) {
				jule::I32 _20380b042_i = it - expr.begin();
				jule::Str _20380b163_mod = *it;
				{
					if ((*_self_)._field_mod == _20380b163_mod) {
						_15335_imp.get()._field_mod_id=_20380b042_i;
						goto _julec_label_setted;
					}
				}
				_iter_next_20380ad11:;
				++it;
				_20380b042_i++;
				goto _iter_begin_20380ad11;
			}
			_iter_end_20380ad11:;
		}
		_15335_imp.get()._field_mod_id=static_cast<jule::I32>((*_self_)._field_mods.len());
		(*_self_)._field_mods = jule::alloc_for_append((*_self_)._field_mods,1);(*_self_)._field_mods.__push((*_self_)._field_mod);
		_julec_label_setted:;
	}
	(*_self_)._field_pkgs = jule::alloc_for_append((*_self_)._field_pkgs,1);(*_self_)._field_pkgs.__push(_15335_imp);
}



inline std::tuple<jule::Bool,jule::Slice<_208de2238_Log>> _1ed2b3e2e_is_pass_build_directives(_1ed1dc40c_JuleImporter* _self_,jule::Ptr<_1e01bcb7b_Ast>& _17948_file) {
	{
		auto &expr = _17948_file.get()._field_top_directives;
		auto it = expr.begin();
		_iter_begin_20380e4c9:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _20380e5ea_td = *it;
			{
				if ((_20380e5ea_td.get()._field_tag._field_kind != jule::Str("build", 5))) {
					goto _iter_next_20380e4c9;
				}
				_1e0164716_DirectiveEval _18421_de = _1e0164716_DirectiveEval(jule::Slice<_208de2238_Log>(),_20380e5ea_td,(*_self_)._field_vars);
				jule::Bool _18817_result = _1e013eda6_eval(&_18421_de);
				if ((_18421_de._field_logs.len() > 0LL)) {
					return std::make_tuple(false,_18421_de._field_logs);
				}
				if ((!(_18817_result))) {
					return std::make_tuple(false,nullptr);
				}
			}
			_iter_next_20380e4c9:;
			++it;
			goto _iter_begin_20380e4c9;
		}
		_iter_end_20380e4c9:;
	}
	return std::make_tuple(true,nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1ed1dc40c_JuleImporter _Src) {
	_Stream << "JuleImporter{";
	_Stream << "mods:" << _Src._field_mods << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "pkgs:" << _Src._field_pkgs << ", ";
	_Stream << "vars:" << _Src._field_vars;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed280cca_OrderedDefines _Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool static__1ed30ceab_is_common_ordered_0(jule::Slice<jule::Ptr<_1ee242032_Struct>>& _1737_s,jule::Ptr<_1ee242032_Struct> _1746_t) {
	jule::Ptr<_1ee242032_Struct>* _1817_p = (&(_1746_t.get()._field_depends[0LL]));
	jule::Ptr<_1ee242032_Struct>* _1913_end = _1817_p + static_cast<jule::I32>(static_cast<jule::I32>(_1746_t.get()._field_depends.len()));
	{
		auto &expr = _1737_s;
		auto it = expr.begin();
		_iter_begin_20384031d:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> &_2038404c7_tt = *it;
			{
				{
					if (_2038404c7_tt == _1746_t) {
						goto _iter_end_20384031d;
					}
					if (((*(_1817_p)).get()._field_cpp_linked || ((*(_1817_p)).get()._field_depends.len() == 0LL)) || (_2038404c7_tt == (*(_1817_p)))) {
						(_1817_p)++;
						if (_1817_p == _1913_end) {
							return true;
						}
					}
				}
			}
			_iter_next_20384031d:;
			++it;
			goto _iter_begin_20384031d;
		}
		_iter_end_20384031d:;
	}
	return false;
}



inline void static__1ed35b207_order_common_0(jule::Slice<jule::Ptr<_1ee242032_Struct>>& _3840_s) {
	jule::I32 _3917_i = 0LL;
	{
		auto &expr = _3840_s;
		auto it = expr.begin();
		_iter_begin_20383968b:;
		if (it != expr.end()) {
			jule::I32 _203839735_j = it - expr.begin();
			jule::Ptr<_1ee242032_Struct> _2038399aa_t = *it;
			{
				if (_2038399aa_t.get()._field_cpp_linked || (_2038399aa_t.get()._field_depends.len() == 0LL)) {
					_3840_s.swap(_3917_i,_203839735_j);
					(_3917_i)++;
				}
			}
			_iter_next_20383968b:;
			++it;
			_203839735_j++;
			goto _iter_begin_20383968b;
		}
		_iter_end_20383968b:;
	}
	jule::I32 _4717_j = _3917_i;
	for (; _4717_j < static_cast<jule::I32>(static_cast<jule::I32>(_3840_s.len())); (_4717_j)++) {
		{
			jule::I32 _4921_k = _3917_i;
			for (; _4921_k < static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_3840_s.len())) - 1LL))); (_4921_k)++) {
				{
					if ((!(static__1ed30ceab_is_common_ordered_0(_3840_s,_3840_s[_4921_k])))) {
						_3840_s.swap(_4921_k,static_cast<jule::I32>((_4921_k + 1LL)));
					}
				}
			_iter_next_20383b814:;
			}
			_iter_end_20383b814:;
		}
	_iter_next_20383902b:;
	}
	_iter_end_20383902b:;
}



inline void static__208ebcbd7_order_structures(jule::Slice<jule::Ptr<_1ee242032_Struct>>& _6041_structs) {
	static__1ed35b207_order_common_0(_6041_structs);
}







std::ostream &operator<<(std::ostream &_Stream, _1ed2ccee2_DefineOrderer _Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}



inline void _1ed2b3835_optimize_child(jule::Ptr<_1ed2dd19a_ScopeDeadCode> _self_,jule::Ptr<_1eed8a5a3_Scope>& _2739_s) {
	jule::Ptr<_1ed2dd19a_ScopeDeadCode> _2817_sdc = jule::new_ptr<_1ed2dd19a_ScopeDeadCode>(_1ed2dd19a_ScopeDeadCode(_self_,_2739_s,(&(_2739_s.get()._field_stmts)),jule::I32()));
	{
		_1e00d3311_optimize_stmts(_2817_sdc);
	}
}



inline void _1ed2b9033_eliminate_followed(_1ed2dd19a_ScopeDeadCode* _self_) {
	(*((*_self_)._field_stmts))=(*((*_self_)._field_stmts)).slice(0LL,((*_self_)._field_i + 1LL));
	jule::Ptr<_1ed2dd19a_ScopeDeadCode> _3817_parent = (*_self_)._field_parent;
	while ((_3817_parent != nullptr)) {
		{
			(*(_3817_parent.get()._field_stmts))=(*(_3817_parent.get()._field_stmts)).slice(0LL,(_3817_parent.get()._field_i + 1LL));
			_3817_parent=_3817_parent.get()._field_parent;
		}
	_iter_next_2038565ed:;
	}
	_iter_end_2038565ed:;
}



inline void _1ed2baae5_optimize_stmt(jule::Ptr<_1ed2dd19a_ScopeDeadCode> _self_,jule::Any _4544_st) {
	{
		auto &_match_expr{ _4544_st };
		
		if (_match_expr.type_is<jule::Ptr<_1eed8a5a3_Scope>>()) {
			_case_begin_203859018:;
			{
				jule::Ptr<_1eed8a5a3_Scope> _4821_scope = _4544_st.operator jule::Ptr<_1eed8a5a3_Scope>();
				if (_4821_scope.get()._field_deferred) {
					_1e00ea16e_eliminate_dead_code_of_scope(_4821_scope);
				} else {
					_1ed2b3835_optimize_child(_self_, _4821_scope);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_20385907e:;
			{
				{
					auto &_match_expr{ _4544_st.operator jule::Ptr<_1eee43b89_Data>().get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>>()) {
						_case_begin_20385aeb5:;
						{
							_1ed2b9033_eliminate_followed(_self_.ptr());
						}
					}
					_match_end_20385ae1b:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda52e3_RetSt>>()) {
			_case_begin_2038590e5:;
			{
				_1ed2b9033_eliminate_followed(_self_.ptr());
			}
		}
		_match_end_203858e6e:;
	}
}



inline void _1e00d3311_optimize_stmts(jule::Ptr<_1ed2dd19a_ScopeDeadCode> _self_) {
	_self_.get()._field_i=0LL;
	for (; _self_.get()._field_i < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_stmts->len())); (_self_.get()._field_i)++) {
		{
			_1ed2baae5_optimize_stmt(_self_, (*(_self_.get()._field_stmts))[_self_.get()._field_i]);
		}
	_iter_next_20385b537:;
	}
	_iter_end_20385b537:;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed2dd19a_ScopeDeadCode _Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void static__208e73b7c_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void static__208e72274_print(jule::Str _2025_escape,jule::Str _2038_text) {
	jule::out(_2025_escape);
	jule::out(_2038_text);
	static__208e73b7c_reset();
}







std::ostream &operator<<(std::ostream &_Stream, _1ed14a546_AnsiEscape _Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void static__208de9042_log_flat(_208de2238_Log& _1429_l) {
	jule::outln(_1429_l._field_text);
}



inline void static__208e40330_log_error(_208de2238_Log& _1930_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_1930_l._field_text);
	static__208e73b7c_reset();
	if ((_1930_l._field_path.len() != 0LL)) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_1930_l._field_path);
	}
	if ((_1930_l._field_row != 0LL) && (_1930_l._field_column != 0LL)) {
		jule::out(jule::Str(":", 1));
		jule::out(_1eec84964_itoa(_1930_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_1eec84964_itoa(_1930_l._field_column));
	}
	if ((_1930_l._field_line.len() != 0LL)) {
		jule::Str _3621_line = _208c73ce0_trim_left(_1930_l._field_line,jule::Str("\r\n\v\b ", 5));
		jule::I32 _3721_offset = ((_1930_l._field_line.len() - static_cast<jule::I32>(static_cast<jule::I32>(_3621_line.len()))) + 1LL);
		jule::I32 _3821_old_len = _3621_line.len();
		_3621_line=_208c73ce0_trim_left(_3621_line,jule::Str("\t", 1));
		if (_3821_old_len != static_cast<jule::I32>(static_cast<jule::I32>(_3621_line.len()))) {
			_3721_offset+=static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_3821_old_len - static_cast<jule::I32>(static_cast<jule::I32>(_3621_line.len()))))) << 3LLU);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _4417_row = _1eec84964_itoa(_1930_l._field_row);
		jule::out(_4417_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_3621_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_208bde08a_repeat(jule::Str(" ", 1),static_cast<jule::I32>(_4417_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_208bde08a_repeat(jule::Str(" ", 1),static_cast<jule::I32>(_1930_l._field_column - _3721_offset)));
		jule::out(jule::Str("^", 1));
		if ((_1930_l._field_suggestion.len() != 0LL)) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_208bde08a_repeat(jule::Str(" ", 1),static_cast<jule::I32>(_4417_row.len())));
			jule::out(jule::Str(" | ", 3));
			static__208e72274_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_1930_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void static__208e47854_log(_208de2238_Log& _6524_l) {
	{
		auto &_match_expr{ _6524_l._field_kind };
		
		if (_match_expr == static_cast<jule::I32>(0LL)) {
			_case_begin_20389c930:;
			{
				static__208de9042_log_flat(_6524_l);
			}
		}
		else if (_match_expr == static_cast<jule::I32>(1LL)) {
			_case_begin_2038a82ed:;
			{
				static__208e40330_log_error(_6524_l);
			}
		}
		_match_end_2038a8232:;
	}
}



inline void static__208e4903c_print_logs(jule::Slice<_208de2238_Log>& _7531_logs) {
	{
		auto &expr = _7531_logs;
		auto it = expr.begin();
		_iter_begin_2038a97a5:;
		if (it != expr.end()) {
			_208de2238_Log &_2038a9871_l = *it;
			{
				static__208e47854_log(_2038a9871_l);
			}
			_iter_next_2038a97a5:;
			++it;
			goto _iter_begin_2038a97a5;
		}
		_iter_end_2038a97a5:;
	}
	jule::out(jule::Str("=== ", 4));
	jule::out(_1eec84964_itoa(static_cast<jule::I32>(_7531_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, _1ed1edbd2_Logger _Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _200563819_UnsafeBinopExprModel _Src) {
	_Stream << "UnsafeBinopExprModel{";
	_Stream << "node:" << _Src._field_node;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _200563ad3_UnsafeIndexingExprModel _Src) {
	_Stream << "UnsafeIndexingExprModel{";
	_Stream << "node:" << _Src._field_node;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _200563e46_PushToSliceExprModel _Src) {
	_Stream << "PushToSliceExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _200564919_StrInsertBeginExprModel _Src) {
	_Stream << "StrInsertBeginExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_200565e6a_ScopeOptimizer> static__200566487_new(jule::Ptr<_1eed8a5a3_Scope> _4527_scope) {
	return jule::new_ptr<_200565e6a_ScopeOptimizer>(_200565e6a_ScopeOptimizer(jule::I32(),_4527_scope));
}



inline void _2005667a6_set_current_stmt(_200565e6a_ScopeOptimizer* _self_,jule::Any _5139_stmt) {
	(*_self_)._field_scope.get()._field_stmts[(*_self_)._field_i]=_5139_stmt;
}



inline void _200566ac5_optimize_data(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eee43b89_Data> _5536_d) {
	{
		auto &_match_expr{ _5536_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>()) {
			_case_begin_2038b9375:;
			{
				jule::Ptr<_1ee24a007_FnCallExprModel> _5821_m = _5536_d.get()._field_model.operator jule::Ptr<_1ee24a007_FnCallExprModel>();
				if (_22237d18e_PRODUCTION) {
					if ((!(_1ee25c13a_is_builtin(_5821_m.get()._field_func.ptr()))) && _20056a018_is_std_package(_5821_m.get()._field_func.get()._field_decl.get()._field_token._field_file.get()._field_path,jule::Str("debug", 5))) {
						_2005667a6_set_current_stmt(&(*_self_), jule::Any(nullptr));
						return;
					}
				}
			}
		}
		_match_end_2038b9320:;
	}
	static__20056caa9_optimize(_5536_d.get()._field_model);
}



inline void _200566de4_optimize_var(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eedeb24b_Var> _7035_v) {
	if ((_7035_v.get()._field_value != nullptr)) {
		static__20056caa9_optimize(_7035_v.get()._field_value.get()._field_data.get()._field_model);
	}
}



inline void _200567213_optimize_conditional(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda30d2_Conditional> _7643_c) {
	{
		auto &expr = _7643_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_2038bdc70:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda2b92_If> _2038bdd91_elif = *it;
			{
				static__20056caa9_optimize(_2038bdd91_elif.get()._field_expr);
				_200569831_optimize_child(&(*_self_), _2038bdd91_elif.get()._field_scope);
			}
			_iter_next_2038bdc70:;
			++it;
			goto _iter_begin_2038bdc70;
		}
		_iter_end_2038bdc70:;
	}
	if ((_7643_c.get()._field_default != nullptr)) {
		_200569831_optimize_child(&(*_self_), _7643_c.get()._field_default.get()._field_scope);
	}
	if ((!(_22237dc3e_OPT_COND))) {
		return;
	}
	jule::Bool _8917_const_case = false;
	{
		auto &expr = _7643_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_2038c1459:;
		if (it != expr.end()) {
			jule::I32 _2038c159c_i = it - expr.begin();
			jule::Ptr<_1eeda2b92_If> _2038c1745_elif = *it;
			{
				if ((!(_20056a3d1_is_constant_valid_conditional_case(_2038c1745_elif)))) {
					goto _iter_next_2038c1459;
				}
				_8917_const_case=true;
				_7643_c.get()._field_elifs=_7643_c.get()._field_elifs.slice(0LL,_2038c159c_i);
				_7643_c.get()._field_default=jule::new_ptr<_1eeda2db2_Else>(_1eeda2db2_Else(_2038c1745_elif.get()._field_scope));
				goto _iter_end_2038c1459;
			}
			_iter_next_2038c1459:;
			++it;
			_2038c159c_i++;
			goto _iter_begin_2038c1459;
		}
		_iter_end_2038c1459:;
	}
	if ((_7643_c.get()._field_elifs.len() == 0LL)) {
		return;
	}
	jule::Ptr<_1eeda2b92_If>* _10917_i = (&(_7643_c.get()._field_elifs[0LL]));
	jule::Ptr<_1eeda2b92_If>* _11013_end = (&(_7643_c.get()._field_elifs[(_7643_c.get()._field_elifs.len() - 1LL)]));
	for (; _10917_i <= _11013_end; (_10917_i)++) {
		{
			{
				if (_20056ad93_is_unreachable_conditional_case((*(_10917_i)))) {
					(*(_10917_i))=nullptr;
				}
			}
		}
	_iter_next_2038bd9b7:;
	}
	_iter_end_2038bd9b7:;
	if ((_7643_c.get()._field_elifs.len() == 0LL)) {
		return;
	}
	if ((!(_8917_const_case))) {
		return;
	}
	jule::I32 _12817_only = -1LL;
	{
		auto &expr = _7643_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_2038c64a3:;
		if (it != expr.end()) {
			jule::I32 _2038c65d5_j = it - expr.begin();
			jule::Ptr<_1eeda2b92_If> _2038c678e_elif = *it;
			{
				if ((_2038c678e_elif != nullptr)) {
					if ((_12817_only != -1LL)) {
						return;
					}
					_12817_only=_2038c65d5_j;
				}
			}
			_iter_next_2038c64a3:;
			++it;
			_2038c65d5_j++;
			goto _iter_begin_2038c64a3;
		}
		_iter_end_2038c64a3:;
	}
	if ((_12817_only != -1LL)) {
		_2005667a6_set_current_stmt(&(*_self_), jule::Any(_7643_c.get()._field_elifs[_12817_only].get()._field_scope));
	}
}



inline void _200567532_optimize_match(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda4952_Match> _14537_m) {
	{
		auto &expr = _14537_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_2038c8ae3:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda4da3_Case> _2038c8c14_case = *it;
			{
				{
					auto &expr = _2038c8c14_case.get()._field_exprs;
					auto it = expr.begin();
					_iter_begin_2038c93b8:;
					if (it != expr.end()) {
						jule::Ptr<_1eee43b89_Data> _2038c9451_expr = *it;
						{
							static__20056caa9_optimize(_2038c9451_expr.get()._field_model);
						}
						_iter_next_2038c93b8:;
						++it;
						goto _iter_begin_2038c93b8;
					}
					_iter_end_2038c93b8:;
				}
				_200569831_optimize_child(&(*_self_), _2038c8c14_case.get()._field_scope);
			}
			_iter_next_2038c8ae3:;
			++it;
			goto _iter_begin_2038c8ae3;
		}
		_iter_end_2038c8ae3:;
	}
	if ((_14537_m.get()._field_default != nullptr)) {
		_200569831_optimize_child(&(*_self_), _14537_m.get()._field_default.get()._field_scope);
	}
	if ((!(_22237dc3e_OPT_COND))) {
		return;
	}
	jule::Bool _16017_const_case = false;
	{
		auto &expr = _14537_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_2038cb365:;
		if (it != expr.end()) {
			jule::I32 _2038cb4a8_i = it - expr.begin();
			jule::Ptr<_1eeda4da3_Case> _2038cb651_case = *it;
			{
				if ((!(_20056aa52_is_constant_valid_match_case(_2038cb651_case)))) {
					goto _iter_next_2038cb365;
				}
				_16017_const_case=true;
				_14537_m.get()._field_cases=_14537_m.get()._field_cases.slice(0LL,_2038cb4a8_i);
				_2038cb651_case.get()._field_exprs=nullptr;
				_14537_m.get()._field_default=_2038cb651_case;
				goto _iter_end_2038cb365;
			}
			_iter_next_2038cb365:;
			++it;
			_2038cb4a8_i++;
			goto _iter_begin_2038cb365;
		}
		_iter_end_2038cb365:;
	}
	if ((_14537_m.get()._field_cases.len() == 0LL)) {
		return;
	}
	jule::Ptr<_1eeda4da3_Case>* _17917_i = (&(_14537_m.get()._field_cases[0LL]));
	jule::Ptr<_1eeda4da3_Case>* _18013_end = (&(_14537_m.get()._field_cases[(_14537_m.get()._field_cases.len() - 1LL)]));
	for (; _17917_i <= _18013_end; (_17917_i)++) {
		{
			{
				if (_20056b1d4_is_unreachable_match_case((*(_17917_i)))) {
					(*(_17917_i))=nullptr;
				}
			}
		}
	_iter_next_2038c883a:;
	}
	_iter_end_2038c883a:;
	if ((!(_16017_const_case))) {
		return;
	}
	jule::I32 _19417_only = -1LL;
	{
		auto &expr = _14537_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_2038d0bd8:;
		if (it != expr.end()) {
			jule::I32 _2038d0d1a_j = it - expr.begin();
			jule::Ptr<_1eeda4da3_Case> _2038d0ec4_case = *it;
			{
				if ((_2038d0ec4_case != nullptr)) {
					if ((_19417_only != -1LL)) {
						return;
					}
					_19417_only=_2038d0d1a_j;
				}
			}
			_iter_next_2038d0bd8:;
			++it;
			_2038d0d1a_j++;
			goto _iter_begin_2038d0bd8;
		}
		_iter_end_2038d0bd8:;
	}
	if ((_19417_only != -1LL)) {
		_2005667a6_set_current_stmt(&(*_self_), jule::Any(_14537_m.get()._field_cases[_19417_only].get()._field_scope));
	}
}



inline void _200567851_optimize_range_iter(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda3742_RangeIter> _21142_it) {
	static__20056caa9_optimize(_21142_it.get()._field_expr.get()._field_model);
	_200569831_optimize_child(&(*_self_), _21142_it.get()._field_scope);
}



inline void _200567b70_optimize_while_iter(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda3522_WhileIter> _21642_it) {
	static__20056caa9_optimize(_21642_it.get()._field_expr);
	_200569512_optimize_stmt(&(*_self_), _21642_it.get()._field_next);
	_200569831_optimize_child(&(*_self_), _21642_it.get()._field_scope);
}



inline jule::Bool _200568027_substr(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda4512_Assign> _22229_a) {
	{
		auto &_match_expr{ _22229_a.get()._field_r.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24c009_SlicingExprModel>>()) {
			_case_begin_2038d6947:;
			{
				jule::Ptr<_1ee24c009_SlicingExprModel> _22521_sem = _22229_a.get()._field_r.get()._field_model.operator jule::Ptr<_1ee24c009_SlicingExprModel>();
				if (_22521_sem.get()._field_expr == _22229_a.get()._field_l.get()._field_model) {
					_2005667a6_set_current_stmt(&(*_self_), jule::Any(jule::new_ptr<_200564430_MutSlicingExprModel>(_200564430_MutSlicingExprModel(_22521_sem.get()._field_token,_22521_sem.get()._field_expr,_22521_sem.get()._field_left,_22521_sem.get()._field_right))));
					return true;
				}
			}
		}
		_match_end_2038d68e2:;
	}
	return false;
}



inline jule::Bool _2005683ce_str_insert(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda4512_Assign> _23933_a) {
	{
		auto &_match_expr{ _23933_a.get()._field_r.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee247bb4_BinopExprModel>>()) {
			_case_begin_2038d97a2:;
			{
				jule::Ptr<_1ee247bb4_BinopExprModel> _24221_m = _23933_a.get()._field_r.get()._field_model.operator jule::Ptr<_1ee247bb4_BinopExprModel>();
				if (_24221_m.get()._field_right.get()._field_model == _23933_a.get()._field_l.get()._field_model) {
					_2005667a6_set_current_stmt(&(*_self_), jule::Any(jule::new_ptr<_200564919_StrInsertBeginExprModel>(_200564919_StrInsertBeginExprModel(_23933_a.get()._field_l.get()._field_model,_24221_m.get()._field_left.get()._field_model))));
					return true;
				}
			}
		}
		_match_end_2038d974c:;
	}
	return false;
}



inline jule::Bool _200568786_str_assign(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda4512_Assign> _25433_a) {
	if ((_25433_a.get()._field_op._field_kind != jule::Str("=", 1))) {
		return false;
	}
	jule::Ptr<_1eee7bead_Prim> _25813_lp = _1eee791db_prim(_25433_a.get()._field_l.get()._field_kind.ptr());
	if ((_25813_lp == nullptr) || (!(_1eee806dc_is_str(_25813_lp.ptr())))) {
		return false;
	}
	{
		
		if (_200568027_substr(&(*_self_), _25433_a) || _2005683ce_str_insert(&(*_self_), _25433_a)) {
			_case_begin_2038ddc3a:;
			{
				return true;
			}
		}
		_match_end_2038ddbd5:;
	}
	return false;
}



inline void _200568aa5_optimize_assign(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda4512_Assign> _27038_assign) {
	if (_22237d2b0_OPT_COPY && _200568786_str_assign(&(*_self_), _27038_assign)) {
		return;
	}
	static__20056caa9_optimize(_27038_assign.get()._field_l.get()._field_model);
	static__20056caa9_optimize(_27038_assign.get()._field_r.get()._field_model);
	{
		auto &_match_expr{ _27038_assign.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_2038e0687:;
			{
				if (_22237d69a_OPT_MATH && (_1eee7a6c6_strct(_27038_assign.get()._field_l.get()._field_kind.ptr()) == nullptr)) {
					_27038_assign.get()._field_op._field_kind=_27038_assign.get()._field_op._field_kind.slice(0LL,(_27038_assign.get()._field_op._field_kind.len() - 1LL));
					jule::Any _28325_model = jule::Any(jule::new_ptr<_1ee247bb4_BinopExprModel>(_1ee247bb4_BinopExprModel(_27038_assign.get()._field_l,_27038_assign.get()._field_r,_27038_assign.get()._field_op)));
					static__20056caa9_optimize(_28325_model);
					{
						auto &_match_expr{ _28325_model };
						
						if (_match_expr.type_is<jule::Ptr<_1ee247bb4_BinopExprModel>>()) {
							_case_begin_2038e43c2:;
							{
								_27038_assign.get()._field_r=jule::new_ptr<_1ee247620_OperandExprModel>((*(_27038_assign.get()._field_r)));
								_27038_assign.get()._field_op._field_kind=jule::Str("=", 1);
								_27038_assign.get()._field_r.get()._field_model=_28325_model;
								return;
							}
						}
						_match_end_2038e436c:;
					}
					_27038_assign.get()._field_op._field_kind+=jule::Str("=", 1);
					return;
				}
			}
		}
		_match_end_2038e1952:;
	}
	if (_22237d579_OPT_APPEND) {
		{
			auto &_match_expr{ _27038_assign.get()._field_r.get()._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>>()) {
				_case_begin_2038e6407:;
				{
					jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel> _30425_m = _27038_assign.get()._field_r.get()._field_model.operator jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>();
					{
						auto &_match_expr{ _30425_m.get()._field_elements };
						
						if (_match_expr.type_is<jule::Ptr<_1ee24a458_SliceExprModel>>()) {
							_case_begin_2038e74c4:;
							{
								{
									auto &_match_expr{ _30425_m.get()._field_dest };
									
									if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>() || _match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
										_case_begin_2038e7ccc:;
										{
											_2005667a6_set_current_stmt(&(*_self_), jule::Any(jule::new_ptr<_200563e46_PushToSliceExprModel>(_200563e46_PushToSliceExprModel(_30425_m.get()._field_dest,_30425_m.get()._field_elements.operator jule::Ptr<_1ee24a458_SliceExprModel>()))));
										}
									}
									_match_end_2038e7c44:;
								}
							}
						}
						_match_end_2038e743b:;
					}
				}
			}
			_match_end_2038e6391:;
		}
	}
}



inline void _200568dc4_optimize_multi_assign(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda4732_MultiAssign> _32044_assign) {
	{
		auto &expr = _32044_assign.get()._field_l;
		auto it = expr.begin();
		_iter_begin_2038e834e:;
		if (it != expr.end()) {
			jule::I32 _2038e83c6_i = it - expr.begin();
			jule::Any _2038e9372_l = *it;
			{
				static__20056caa9_optimize(_2038e9372_l);
				_32044_assign.get()._field_l[_2038e83c6_i]=_2038e9372_l;
			}
			_iter_next_2038e834e:;
			++it;
			_2038e83c6_i++;
			goto _iter_begin_2038e834e;
		}
		_iter_end_2038e834e:;
	}
	static__20056caa9_optimize(_32044_assign.get()._field_r);
}



inline void _2005691e3_optimize_ret(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eeda52e3_RetSt> _32835_r) {
	static__20056caa9_optimize(_32835_r.get()._field_expr);
}



inline void _200569512_optimize_stmt(_200565e6a_ScopeOptimizer* _self_,jule::Any _33236_stmt) {
	{
		auto &_match_expr{ _33236_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1eed8a5a3_Scope>>()) {
			_case_begin_2038eb341:;
			{
				_200569831_optimize_child(&(*_self_), _33236_stmt.operator jule::Ptr<_1eed8a5a3_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_2038eb3a7:;
			{
				_200566ac5_optimize_data(&(*_self_), _33236_stmt.operator jule::Ptr<_1eee43b89_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_2038eb42e:;
			{
				_200566de4_optimize_var(&(*_self_), _33236_stmt.operator jule::Ptr<_1eedeb24b_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda30d2_Conditional>>()) {
			_case_begin_2038eb495:;
			{
				_200567213_optimize_conditional(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda30d2_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3742_RangeIter>>()) {
			_case_begin_2038eb50b:;
			{
				_200567851_optimize_range_iter(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda3742_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3522_WhileIter>>()) {
			_case_begin_2038eb572:;
			{
				_200567b70_optimize_while_iter(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda3522_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3302_InfIter>>()) {
			_case_begin_2038eb5d8:;
			{
				_200569831_optimize_child(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda3302_InfIter>().get()._field_scope);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4512_Assign>>()) {
			_case_begin_2038eb660:;
			{
				_200568aa5_optimize_assign(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda4512_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4732_MultiAssign>>()) {
			_case_begin_2038eb6d7:;
			{
				_200568dc4_optimize_multi_assign(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda4732_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4952_Match>>()) {
			_case_begin_2038eb75e:;
			{
				_200567532_optimize_match(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda4952_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda52e3_RetSt>>()) {
			_case_begin_2038eb7d6:;
			{
				_2005691e3_optimize_ret(&(*_self_), _33236_stmt.operator jule::Ptr<_1eeda52e3_RetSt>());
			}
		}
		_match_end_2038eb20e:;
	}
}



inline void _200569831_optimize_child(_200565e6a_ScopeOptimizer* _self_,jule::Ptr<_1eed8a5a3_Scope> _35937_child) {
	jule::Ptr<_200565e6a_ScopeOptimizer> _36017_so = static__200566487_new(_35937_child);
	_200569a73_optimize(_36017_so.ptr());
}



inline void _200569a73_optimize(_200565e6a_ScopeOptimizer* _self_) {
	{
		auto &expr = (*_self_)._field_scope.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_20390436b:;
		if (it != expr.end()) {
			jule::I32 _203904404_i = it - expr.begin();
			jule::Any _203904613_stmt = *it;
			{
				(*_self_)._field_i=_203904404_i;
				_200569512_optimize_stmt(&(*_self_), _203904613_stmt);
			}
			_iter_next_20390436b:;
			++it;
			_203904404_i++;
			goto _iter_begin_20390436b;
		}
		_iter_end_20390436b:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _200565e6a_ScopeOptimizer _Src) {
	_Stream << "ScopeOptimizer{";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline void static__20056caa9_optimize(jule::Any& _5433_model) {
	{
		
		if (_22237db1d_OPT_PTR || _22237d69a_OPT_MATH || _22237d7bb_OPT_ACCESS || _22237dc3e_OPT_COND) {
			_case_begin_203904a75:;
			{
				jule::Ptr<_20056c548_ExprOptimizer> _6121_exop = jule::new_ptr<_20056c548_ExprOptimizer>(_20056c548_ExprOptimizer(((jule::Ptr<jule::Any>)((&(_5433_model))))));
				_200574583_do(_6121_exop.ptr());
			}
		}
		_match_end_2039049a9:;
	}
}



inline jule::Bool _20056ce61_str_cond(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee247bb4_BinopExprModel> _6827_m) {
	jule::Ptr<_1eee7bead_Prim> _6913_lp = _1eee791db_prim(_6827_m.get()._field_left.get()._field_kind.ptr());
	if ((_6913_lp == nullptr) || (!(_1eee806dc_is_str(_6913_lp.ptr())))) {
		return false;
	}
	if ((_6827_m.get()._field_op._field_kind != jule::Str("==", 2)) && (_6827_m.get()._field_op._field_kind != jule::Str("!=", 2))) {
		return false;
	}
	{
		auto &_match_expr{ _6827_m.get()._field_left.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_203909a03:;
			{
				std::tie(_6827_m.get()._field_left,_6827_m.get()._field_right) = std::make_tuple(_6827_m.get()._field_right,_6827_m.get()._field_left);
				goto _julec_label_opt;
			}
		}
		_match_end_2039098e3:;
	}
	{
		auto &_match_expr{ _6827_m.get()._field_right.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_203908e31:;
			{
				goto _match_end_20390ab8b;
			}
		}
		else {
			_case_begin_20390abe1:;
			{
				return true;
			}
		}
		_match_end_20390ab8b:;
	}
	_julec_label_opt:;
	jule::Ptr<_1eed1e24b_Const> _8813_c = _6827_m.get()._field_right.get()._field_model.operator jule::Ptr<_1eed1e24b_Const>();
	if ((!(_1eed21171_read_str(_8813_c.ptr()).empty()))) {
		return false;
	}
	{
		auto &_match_expr{ _6827_m.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_20390c099:;
			{
				(*((*_self_)._field_model))=jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_6827_m.get()._field_left.get()._field_kind,_6827_m.get()._field_left.get()._field_model,_1e02c1d07_Token(),jule::Str("empty()", 7))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_20390c594:;
			{
				_1e02c1d07_Token _10021_op = _6827_m.get()._field_op;
				_10021_op._field_kind=jule::Str("!", 1);
				(*((*_self_)._field_model))=jule::Any(jule::new_ptr<_1ee248115_UnaryExprModel>(_1ee248115_UnaryExprModel(jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee24e58e_CommonSubIdentExprModel>(_1ee24e58e_CommonSubIdentExprModel(_6827_m.get()._field_left.get()._field_kind,_6827_m.get()._field_left.get()._field_model,_1e02c1d07_Token(),jule::Str("empty()", 7))))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>())),_10021_op)));
			}
		}
		_match_end_20390c53e:;
	}
	return true;
}



inline void _20056d280_binary(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee247bb4_BinopExprModel> _11625_m) {
	static__20056caa9_optimize(_11625_m.get()._field_left.get()._field_model);
	static__20056caa9_optimize(_11625_m.get()._field_right.get()._field_model);
	{
		auto &_match_expr{ _11625_m.get()._field_right.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_203911433:;
			{
				goto _match_end_203911e28;
			}
		}
		else {
			_case_begin_203911e7d:;
			{
				return;
			}
		}
		_match_end_203911e28:;
	}
	if (_22237dc3e_OPT_COND && _20056ce61_str_cond(&(*_self_), _11625_m)) {
		return;
	}
	if ((!(_22237d69a_OPT_MATH))) {
		return;
	}
	{
		auto &_match_expr{ _11625_m.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_20391329d:;
			{
				jule::Bool _13618_ok;
				jule::U64 _13622_x;
				std::tie(_13618_ok,_13622_x) = _200574a6c_check_for_bit_shift_opt(_11625_m.get()._field_left,_11625_m.get()._field_right);
				if (_13618_ok) {
					_11625_m.get()._field_op._field_kind=jule::Str("<<", 2);
					jule::Ptr<_1eed1e24b_Const> _13925_c = _11625_m.get()._field_right.get()._field_model.operator jule::Ptr<_1eed1e24b_Const>();
					_1eed22419_set_u64(_13925_c.ptr(), _13622_x);
					return;
				}
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_203913314:;
			{
				jule::Bool _14418_ok;
				jule::U64 _14422_x;
				std::tie(_14418_ok,_14422_x) = _200574a6c_check_for_bit_shift_opt(_11625_m.get()._field_left,_11625_m.get()._field_right);
				if (_14418_ok) {
					_11625_m.get()._field_op._field_kind=jule::Str(">>", 2);
					jule::Ptr<_1eed1e24b_Const> _14725_c = _11625_m.get()._field_right.get()._field_model.operator jule::Ptr<_1eed1e24b_Const>();
					_1eed22419_set_u64(_14725_c.ptr(), _14422_x);
					return;
				}
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_20391337a:;
			{
				jule::Ptr<_1eed1e24b_Const> _15221_c = _11625_m.get()._field_right.get()._field_model.operator jule::Ptr<_1eed1e24b_Const>();
				jule::F64 _15317_d = _1eed21ccb_as_f64(_15221_c.ptr());
				if ((_15317_d == 2LL)) {
					_11625_m.get()._field_op._field_kind=jule::Str("&", 1);
					_1eed220ea_set_i64(_15221_c.ptr(), 1LL);
				}
			}
		}
		_match_end_203913248:;
	}
	(*((*_self_)._field_model))=jule::Any(jule::new_ptr<_200563819_UnsafeBinopExprModel>(_200563819_UnsafeBinopExprModel(_11625_m)));
}



inline void _20056d59e_unary(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee248115_UnaryExprModel> _16424_m) {
	static__20056caa9_optimize(_16424_m.get()._field_expr.get()._field_model);
	if (_22237db1d_OPT_PTR && (_16424_m.get()._field_op._field_kind == jule::Str("*", 1))) {
		{
			auto &_match_expr{ _16424_m.get()._field_expr.get()._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1ee248115_UnaryExprModel>>()) {
				_case_begin_20391ae54:;
				{
					jule::Ptr<_1ee248115_UnaryExprModel> _16925_um = _16424_m.get()._field_expr.get()._field_model.operator jule::Ptr<_1ee248115_UnaryExprModel>();
					if ((_16925_um.get()._field_op._field_kind == jule::Str("&", 1))) {
						(*((*_self_)._field_model))=_16925_um.get()._field_expr.get()._field_model;
					}
				}
			}
			_match_end_20391addd:;
		}
	}
}



inline void _20056d8bd_structure_lit(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee248a0b_StructLitExprModel> _17732_m) {
	{
		auto &expr = _17732_m.get()._field_args;
		auto it = expr.begin();
		_iter_begin_20391d4ea:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2485aa_StructArgExprModel> _20391d61b_arg = *it;
			{
				static__20056caa9_optimize(_20391d61b_arg.get()._field_expr);
			}
			_iter_next_20391d4ea:;
			++it;
			goto _iter_begin_20391d4ea;
		}
		_iter_end_20391d4ea:;
	}
}



inline void _20056dbdc_alloc_structure(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee248de6_AllocStructLitExprModel> _18334_m) {
	_20056d8bd_structure_lit(&(*_self_), _18334_m.get()._field_lit);
}



inline void _20056e00b_casting(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee249523_CastingExprModel> _18726_m) {
	static__20056caa9_optimize(_18726_m.get()._field_expr);
}



inline void _20056e32a_args(_20056c548_ExprOptimizer* _self_,jule::Slice<jule::Any> _19123_args) {
	{
		auto &expr = _19123_args;
		auto it = expr.begin();
		_iter_begin_203921047:;
		if (it != expr.end()) {
			jule::I32 _20392108b_i = it - expr.begin();
			jule::Any _203921311_arg = *it;
			{
				static__20056caa9_optimize(_203921311_arg);
				_19123_args[_20392108b_i]=_203921311_arg;
			}
			_iter_next_203921047:;
			++it;
			_20392108b_i++;
			goto _iter_begin_203921047;
		}
		_iter_end_203921047:;
	}
}



inline void _20056e649_scope(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1eed8a5a3_Scope>& _19825_s) {
	jule::Ptr<_200565e6a_ScopeOptimizer> _19917_scopt = static__200566487_new(_19825_s);
	_200569a73_optimize(_19917_scopt.ptr());
}



inline void _20056e968_func_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24a007_FnCallExprModel> _20328_m) {
	static__20056caa9_optimize(_20328_m.get()._field_expr);
	_20056e32a_args(&(*_self_), _20328_m.get()._field_args);
	if ((_20328_m.get()._field_except != nullptr)) {
		_20056e649_scope(&(*_self_), _20328_m.get()._field_except);
	}
}



inline void _20056ec87_slice(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24a458_SliceExprModel> _21124_m) {
	_20056e32a_args(&(*_self_), _21124_m.get()._field_elems);
}



inline void _2005700a6_array(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24da55_ArrayExprModel> _21524_m) {
	if ((_21524_m.get()._field_elems.len() == 2LL) && (_21524_m.get()._field_elems[1LL] == jule::Any(jule::Any(nullptr)))) {
		jule::Any _21721_elem = _21524_m.get()._field_elems[0LL];
		static__20056caa9_optimize(_21721_elem);
		_21524_m.get()._field_elems[0LL]=_21721_elem;
	}
	_20056e32a_args(&(*_self_), _21524_m.get()._field_elems);
}



inline void _2005703c5_indexing(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24a9a8_IndexingExprModel> _22427_m) {
	static__20056caa9_optimize(_22427_m.get()._field_expr.get()._field_model);
	static__20056caa9_optimize(_22427_m.get()._field_index.get()._field_model);
	if ((!(_22237d7bb_OPT_ACCESS))) {
		return;
	}
	jule::Bool _23013_array = (_1eee79d46_arr(_22427_m.get()._field_expr.get()._field_kind.ptr()) != nullptr);
	if (_23013_array && _1eee44690_is_const(_22427_m.get()._field_index.ptr())) {
		(*((*_self_)._field_model))=jule::Any(jule::new_ptr<_200563ad3_UnsafeIndexingExprModel>(_200563ad3_UnsafeIndexingExprModel(_22427_m)));
		return;
	}
	{
		auto &_match_expr{ _22427_m.get()._field_index.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_20392bd00:;
			{
				jule::Ptr<_1eedeb24b_Var> _24017_i = _22427_m.get()._field_index.get()._field_model.operator jule::Ptr<_1eedeb24b_Var>();
				if (_24017_i.get()._field_mutable || (_24017_i.get()._field_iter_relation == nullptr)) {
					goto _match_end_20392bc89;
				}
				{
					auto &_match_expr{ _22427_m.get()._field_expr.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
						_case_begin_20392d73b:;
						{
							jule::Ptr<_1eedeb24b_Var> _24621_r = _22427_m.get()._field_expr.get()._field_model.operator jule::Ptr<_1eedeb24b_Var>();
							if (_24017_i.get()._field_iter_relation.get()._field_range == _24621_r) {
								(*((*_self_)._field_model))=jule::Any(jule::new_ptr<_200563ad3_UnsafeIndexingExprModel>(_200563ad3_UnsafeIndexingExprModel(_22427_m)));
							}
						}
					}
					_match_end_20392d62b:;
				}
			}
		}
		_match_end_20392bc89:;
	}
}



inline void _2005706e4_anon_func(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24ae09_AnonFnExprModel> _25728_m) {
	_20056e649_scope(&(*_self_), _25728_m.get()._field_func.get()._field_scope);
}



inline void _200570a13_map(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24b8aa_MapExprModel> _26122_m) {
	{
		auto &expr = _26122_m.get()._field_entries;
		auto it = expr.begin();
		_iter_begin_203931541:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24b35a_KeyValPairExprModel> _203931662_pair = *it;
			{
				static__20056caa9_optimize(_203931662_pair.get()._field_key);
				static__20056caa9_optimize(_203931662_pair.get()._field_val);
			}
			_iter_next_203931541:;
			++it;
			goto _iter_begin_203931541;
		}
		_iter_end_203931541:;
	}
}



inline void _200570d32_slicing(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24c009_SlicingExprModel> _26826_m) {
	static__20056caa9_optimize(_26826_m.get()._field_expr);
	static__20056caa9_optimize(_26826_m.get()._field_left);
	if (_26826_m.get()._field_right != jule::Any(jule::Any(nullptr))) {
		static__20056caa9_optimize(_26826_m.get()._field_right);
	}
}



inline void _200571151_trait_sub(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24c658_TraitSubIdentExprModel> _27628_m) {
	static__20056caa9_optimize(_27628_m.get()._field_expr);
}



inline void _200571470_structure_sub(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24d060_StructSubIdentExprModel> _28032_m) {
	static__20056caa9_optimize(_28032_m.get()._field_expr.get()._field_model);
}



inline void _20057178e_common_sub(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24e58e_CommonSubIdentExprModel> _28429_m) {
	static__20056caa9_optimize(_28429_m.get()._field_expr);
}



inline void _200571aad_tuple(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24e8be_TupleExprModel> _28824_m) {
	{
		auto &expr = _28824_m.get()._field_datas;
		auto it = expr.begin();
		_iter_begin_203936a0d:;
		if (it != expr.end()) {
			jule::Ptr<_1eee43b89_Data> _203936b2e_d = *it;
			{
				static__20056caa9_optimize(_203936b2e_d.get()._field_model);
			}
			_iter_next_203936a0d:;
			++it;
			goto _iter_begin_203936a0d;
		}
		_iter_end_203936a0d:;
	}
}



inline void _200571dcc_new_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee250c00_BuiltinNewCallExprModel> _29427_m) {
	if (_29427_m.get()._field_init != jule::Any(jule::Any(nullptr))) {
		static__20056caa9_optimize(_29427_m.get()._field_init);
	}
}



inline void _2005721eb_out_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel> _30027_m) {
	static__20056caa9_optimize(_30027_m.get()._field_expr);
}



inline void _20057251a_outln_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel> _30429_m) {
	static__20056caa9_optimize(_30429_m.get()._field_expr);
}



inline void _200572839_panic_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel> _30829_m) {
	static__20056caa9_optimize(_30829_m.get()._field_expr);
}



inline void _200572b58_assert_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel> _31230_m) {
	static__20056caa9_optimize(_31230_m.get()._field_expr);
}



inline void _200572e77_error_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel> _31629_m) {
	static__20056caa9_optimize(_31629_m.get()._field_err);
}



inline void _200573296_make_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel> _32028_m) {
	if (_32028_m.get()._field_len != jule::Any(jule::Any(nullptr))) {
		static__20056caa9_optimize(_32028_m.get()._field_len);
	}
	if (_32028_m.get()._field_cap != jule::Any(jule::Any(nullptr))) {
		static__20056caa9_optimize(_32028_m.get()._field_cap);
	}
}



inline void _2005735b5_append_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel> _32930_m) {
	static__20056caa9_optimize(_32930_m.get()._field_dest);
	static__20056caa9_optimize(_32930_m.get()._field_elements);
}



inline void _2005738d4_clone_call(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee250738_BuiltinCloneCallExprModel> _33429_m) {
	static__20056caa9_optimize(_33429_m.get()._field_expr);
}



inline void _200573c03_sizeof(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee252b03_SizeofExprModel> _33825_m) {
	static__20056caa9_optimize(_33825_m.get()._field_expr);
}



inline void _200574022_alignof(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee2532a7_AlignofExprModel> _34226_m) {
	static__20056caa9_optimize(_34226_m.get()._field_expr);
}



inline void _200574341_integrated_to_str(_20056c548_ExprOptimizer* _self_,jule::Ptr<_1ee2538d4_IntegratedToStrExprModel> _34636_m) {
	static__20056caa9_optimize(_34636_m.get()._field_expr);
}



inline void _200574583_do(_20056c548_ExprOptimizer* _self_) {
	{
		auto &_match_expr{ (*((*_self_)._field_model)) };
		
		if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_203943047:;
			{
				(*((*_self_)._field_model))=(*((*_self_)._field_model)).operator jule::Ptr<_1eee43b89_Data>().get()._field_model;
				_200574583_do(&(*_self_));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee247bb4_BinopExprModel>>()) {
			_case_begin_2039432cd:;
			{
				_20056d280_binary(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee247bb4_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248115_UnaryExprModel>>()) {
			_case_begin_203943344:;
			{
				_20056d59e_unary(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee248115_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248a0b_StructLitExprModel>>()) {
			_case_begin_2039433aa:;
			{
				_20056d8bd_structure_lit(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee248a0b_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248de6_AllocStructLitExprModel>>()) {
			_case_begin_203943421:;
			{
				_20056dbdc_alloc_structure(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee248de6_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee249523_CastingExprModel>>()) {
			_case_begin_203943487:;
			{
				_20056e00b_casting(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee249523_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>()) {
			_case_begin_20394350e:;
			{
				_20056e968_func_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24a007_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24a458_SliceExprModel>>()) {
			_case_begin_203943586:;
			{
				_20056ec87_slice(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24a458_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24da55_ArrayExprModel>>()) {
			_case_begin_20394360d:;
			{
				_2005700a6_array(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24da55_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24a9a8_IndexingExprModel>>()) {
			_case_begin_203943685:;
			{
				_2005703c5_indexing(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24a9a8_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24ae09_AnonFnExprModel>>()) {
			_case_begin_20394370c:;
			{
				_2005706e4_anon_func(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24ae09_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24b8aa_MapExprModel>>()) {
			_case_begin_203943784:;
			{
				_200570a13_map(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24b8aa_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24c009_SlicingExprModel>>()) {
			_case_begin_20394380b:;
			{
				_200570d32_slicing(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24c009_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24c658_TraitSubIdentExprModel>>()) {
			_case_begin_203943883:;
			{
				_200571151_trait_sub(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24c658_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
			_case_begin_20394390a:;
			{
				_200571470_structure_sub(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>>()) {
			_case_begin_203943982:;
			{
				_20057178e_common_sub(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24e8be_TupleExprModel>>()) {
			_case_begin_203943a09:;
			{
				_200571aad_tuple(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24e8be_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>>()) {
			_case_begin_203943a81:;
			{
				_2005721eb_out_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>>()) {
			_case_begin_203943b08:;
			{
				_20057251a_outln_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee250c00_BuiltinNewCallExprModel>>()) {
			_case_begin_203943b80:;
			{
				_200571dcc_new_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee250c00_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>>()) {
			_case_begin_203943c07:;
			{
				_200572839_panic_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>>()) {
			_case_begin_203943c7e:;
			{
				_200572b58_assert_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>()) {
			_case_begin_203943d06:;
			{
				_200572e77_error_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel>>()) {
			_case_begin_203943d7d:;
			{
				_200573296_make_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>>()) {
			_case_begin_203943e05:;
			{
				_2005735b5_append_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>>()) {
			_case_begin_203943e7c:;
			{
				_2005738d4_clone_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee252b03_SizeofExprModel>>()) {
			_case_begin_203944004:;
			{
				_200573c03_sizeof(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee252b03_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2532a7_AlignofExprModel>>()) {
			_case_begin_20394407b:;
			{
				_200574022_alignof(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee2532a7_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2538d4_IntegratedToStrExprModel>>()) {
			_case_begin_203944103:;
			{
				_200574341_integrated_to_str(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_1ee2538d4_IntegratedToStrExprModel>());
			}
		}
		_match_end_203942ee2:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _20056c548_ExprOptimizer _Src) {
	_Stream << "ExprOptimizer{";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_200575919_Optimizer> static__200575cd2_new(jule::Ptr<_1ed25d4b1_IR>& _2228_ir) {
	return jule::new_ptr<_200575919_Optimizer>(_200575919_Optimizer(_2228_ir));
}



inline void _200576101_optimize_global(_200575919_Optimizer* _self_,jule::Ptr<_1eedeb24b_Var>& _2839_v) {
	if ((!(_2839_v.get()._field_cpp_linked))) {
		static__20056caa9_optimize(_2839_v.get()._field_value.get()._field_data.get()._field_model);
	}
}



inline void _200576420_optimize_function(_200575919_Optimizer* _self_,jule::Ptr<_1ee2579b5_Fn>& _3441_func) {
	if (_3441_func.get()._field_cpp_linked) {
		return;
	}
	{
		auto &expr = _3441_func.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_20395c87a:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25b4ad_FnIns> _20395c9ac_ins = *it;
			{
				jule::Ptr<_200565e6a_ScopeOptimizer> _3921_so = static__200566487_new(_20395c9ac_ins.get()._field_scope);
				_200569a73_optimize(_3921_so.ptr());
			}
			_iter_next_20395c87a:;
			++it;
			goto _iter_begin_20395c87a;
		}
		_iter_end_20395c87a:;
	}
}



inline void _20057673e_optimize_struct(_200575919_Optimizer* _self_,jule::Ptr<_1ee242032_Struct>& _4439_s) {
	if (_4439_s.get()._field_cpp_linked) {
		return;
	}
	{
		auto &expr = _4439_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_20395e2e9:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _20395e42b_ins = *it;
			{
				{
					auto &expr = _20395e42b_ins.get()._field_fields;
					auto it = expr.begin();
					_iter_begin_20395ea9c:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2449b3_FieldIns> _20395eb35_f = *it;
						{
							if ((_20395eb35_f.get()._field_default != nullptr)) {
								static__20056caa9_optimize(_20395eb35_f.get()._field_default.get()._field_model);
							}
						}
						_iter_next_20395ea9c:;
						++it;
						goto _iter_begin_20395ea9c;
					}
					_iter_end_20395ea9c:;
				}
				{
					auto &expr = _20395e42b_ins.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_203960361:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _20395ecde_m = *it;
						{
							_200576420_optimize_function(&(*_self_), _20395ecde_m);
						}
						_iter_next_203960361:;
						++it;
						goto _iter_begin_203960361;
					}
					_iter_end_203960361:;
				}
			}
			_iter_next_20395e2e9:;
			++it;
			goto _iter_begin_20395e2e9;
		}
		_iter_end_20395e2e9:;
	}
}



inline void _200576a5d_optimize_globals(_200575919_Optimizer* _self_,jule::Ptr<_1eedc3da0_Package>& _6040_p) {
	{
		auto &expr = _6040_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203961a9e:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203961bc0_f = *it;
			{
				{
					auto &expr = _203961bc0_f.get()._field_vars;
					auto it = expr.begin();
					_iter_begin_203962374:;
					if (it != expr.end()) {
						jule::Ptr<_1eedeb24b_Var> _20396240c_v = *it;
						{
							_200576101_optimize_global(&(*_self_), _20396240c_v);
						}
						_iter_next_203962374:;
						++it;
						goto _iter_begin_203962374;
					}
					_iter_end_203962374:;
				}
			}
			_iter_next_203961a9e:;
			++it;
			goto _iter_begin_203961a9e;
		}
		_iter_end_203961a9e:;
	}
}



inline void _200576d7c_optimize_functions(_200575919_Optimizer* _self_,jule::Ptr<_1eedc3da0_Package>& _6842_p) {
	{
		auto &expr = _6842_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2039633b9:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _2039634da_f = *it;
			{
				{
					auto &expr = _2039634da_f.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_203963b8e:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _203963c27_func = *it;
						{
							_200576420_optimize_function(&(*_self_), _203963c27_func);
						}
						_iter_next_203963b8e:;
						++it;
						goto _iter_begin_203963b8e;
					}
					_iter_end_203963b8e:;
				}
			}
			_iter_next_2039633b9:;
			++it;
			goto _iter_begin_2039633b9;
		}
		_iter_end_2039633b9:;
	}
}



inline void _20057719b_optimize_structs(_200575919_Optimizer* _self_,jule::Ptr<_1eedc3da0_Package>& _7640_p) {
	{
		auto &expr = _7640_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203964b6d:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203964c8e_f = *it;
			{
				{
					auto &expr = _203964c8e_f.get()._field_structs;
					auto it = expr.begin();
					_iter_begin_203965443:;
					if (it != expr.end()) {
						jule::Ptr<_1ee242032_Struct> _2039654cb_s = *it;
						{
							_20057673e_optimize_struct(&(*_self_), _2039654cb_s);
						}
						_iter_next_203965443:;
						++it;
						goto _iter_begin_203965443;
					}
					_iter_end_203965443:;
				}
			}
			_iter_next_203964b6d:;
			++it;
			goto _iter_begin_203964b6d;
		}
		_iter_end_203964b6d:;
	}
}



inline void _2005774ba_optimize_package(_200575919_Optimizer* _self_,jule::Ptr<_1eedc3da0_Package>& _8440_p) {
	_200576a5d_optimize_globals(&(*_self_), _8440_p);
	_200576d7c_optimize_functions(&(*_self_), _8440_p);
	_20057719b_optimize_structs(&(*_self_), _8440_p);
}



inline void _20057770c_optimize(_200575919_Optimizer* _self_) {
	{
		
		if (_22237dc3e_OPT_COND || _22237d579_OPT_APPEND || _22237d2b0_OPT_COPY) {
			_case_begin_203967d5d:;
			{
				goto _match_end_20396780d;
			}
		}
		else {
			_case_begin_2039678c9:;
			{
				return;
			}
		}
		_match_end_20396780d:;
	}
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_20396827b:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _20396849b_u = *it;
			{
				if ((!(_20396849b_u.get()._field_cpp_linked))) {
					_2005774ba_optimize_package(&(*_self_), _20396849b_u.get()._field_package);
				}
			}
			_iter_next_20396827b:;
			++it;
			goto _iter_begin_20396827b;
		}
		_iter_end_20396827b:;
	}
	_2005774ba_optimize_package(&(*_self_), (*_self_)._field_ir.get()._field_main);
}







std::ostream &operator<<(std::ostream &_Stream, _200575919_Optimizer _Src) {
	_Stream << "Optimizer{";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _2005d90ed_unix(_2005d8b9c_AbsTime* _self_) {
	jule::Bool _5417_leap = false;
	jule::U64 _5517_y = ((*_self_)._field_year - 1900LLU);
	jule::U64 _5617_m = ((*_self_)._field_month - 1LLU);
	if ((_5617_m >= 12LLU) || (_5617_m < 0LLU)) {
		jule::U64 _5821_adj = (_5617_m / 12LLU);
		_5617_m%=12LL;
		if ((_5617_m < 0LLU)) {
			(_5821_adj)--;
			_5617_m+=12LLU;
		}
		_5517_y+=_5821_adj;
	}
	jule::U64 _6617_t = _2005de246_unix_year_to_seconds(_5517_y,_5417_leap);
	_6617_t+=static_cast<jule::U64>(_2005de675_unix_month_to_seconds(_5617_m,_5417_leap));
	_6617_t+=static_cast<jule::U64>(86400LLU * static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(((*_self_)._field_day - 1LLU)))));
	_6617_t+=static_cast<jule::U64>(3600LLU * (*_self_)._field_hour);
	_6617_t+=static_cast<jule::U64>(60LLU * (*_self_)._field_minute);
	_6617_t+=(*_self_)._field_second;
	return _6617_t;
}







std::ostream &operator<<(std::ostream &_Stream, _2005d8b9c_AbsTime _Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _2005d9450_Time static__2005d985c_unix(jule::U64 _8924_sec) {
	return _2005d9450_Time(_8924_sec);
}



inline _2005d9450_Time static__2005d9a8d_now(void) {
	return static__2005d985c_unix(static_cast<jule::U64>(_2005ddd5b_unix()));
}



inline jule::U64 _2005da055_unix(_2005d9450_Time* _self_) {
	return (*_self_)._field_sec;
}



inline jule::U64 _2005da330_day(_2005d9450_Time* _self_) {
	return _2005db540_abs(&(*_self_))._field_day;
}



inline jule::U64 _2005da60a_month(_2005d9450_Time* _self_) {
	return _2005db540_abs(&(*_self_))._field_month;
}



inline jule::U64 _2005da8d5_year(_2005d9450_Time* _self_) {
	return _2005db540_abs(&(*_self_))._field_year;
}



inline jule::U64 _2005dabb0_second(_2005d9450_Time* _self_) {
	return _2005db540_abs(&(*_self_))._field_second;
}



inline jule::U64 _2005dae8a_minute(_2005d9450_Time* _self_) {
	return _2005db540_abs(&(*_self_))._field_minute;
}



inline jule::U64 _2005db265_hour(_2005d9450_Time* _self_) {
	return _2005db540_abs(&(*_self_))._field_hour;
}



inline _2005d8b9c_AbsTime _2005db540_abs(_2005d9450_Time* _self_) {
	jule::U64 _12513_secs = ((*_self_)._field_sec - 951868800LLU);
	jule::U64 _12617_days = (_12513_secs / 86400LLU);
	jule::U64 _12717_rem_secs = (_12513_secs % 86400LL);
	if ((_12717_rem_secs < 0LLU)) {
		_12717_rem_secs+=86400LLU;
		(_12617_days)--;
	}
	jule::U64 _13317_qc_cycles = (_12617_days / 146097LLU);
	jule::U64 _13417_rem_days = (_12617_days % 146097LL);
	if ((_13417_rem_days < 0LLU)) {
		_13417_rem_days+=146097LLU;
		(_13317_qc_cycles)--;
	}
	jule::U64 _14017_c_cycles = (_13417_rem_days / 36524LLU);
	if ((_14017_c_cycles == 4LLU)) {
		(_14017_c_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>((_14017_c_cycles * 36524LLU));
	jule::U64 _14617_q_cycles = (_13417_rem_days / 1461LLU);
	if ((_14617_q_cycles == 25LLU)) {
		(_14617_q_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>((_14617_q_cycles * 1461LLU));
	jule::U64 _15217_rem_years = (_13417_rem_days / 365LLU);
	if ((_15217_rem_years == 4LLU)) {
		(_15217_rem_years)--;
	}
	_13417_rem_days-=static_cast<jule::U64>((_15217_rem_years * 365LLU));
	jule::U64 _15817_leap = static_cast<jule::U64>(0LLU);
	if ((_15217_rem_years == 0LLU) && ((_14617_q_cycles > 0LLU) || (_14017_c_cycles == 0LLU))) {
		_15817_leap=1LLU;
	}
	jule::U64 _16217_y_day = ((_13417_rem_days + 31LLU) + 28LLU) + _15817_leap;
	if (_16217_y_day >= static_cast<jule::U64>(static_cast<jule::U64>(365LLU + _15817_leap))) {
		_16217_y_day-=static_cast<jule::U64>(365LLU + _15817_leap);
	}
	jule::U64 _16717_months = 0LLU;
	for (; _2005d7e98_MDAYS[static_cast<jule::I32>(_16717_months)] <= _13417_rem_days; (_16717_months)++) {
		{
			_13417_rem_days-=_2005d7e98_MDAYS[static_cast<jule::I32>(_16717_months)];
		}
	_iter_next_2039925d5:;
	}
	_iter_end_2039925d5:;
	_2005d8b9c_AbsTime _17217_t = _2005d8b9c_AbsTime();
	_17217_t._field_year=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_15217_rem_years + static_cast<jule::U64>(static_cast<jule::U64>(4LLU * _14617_q_cycles)))) + static_cast<jule::U64>(static_cast<jule::U64>(100LLU * _14017_c_cycles)))) + static_cast<jule::U64>(static_cast<jule::U64>(400LLU * _13317_qc_cycles)))) + 100LLU));
	_17217_t._field_month=static_cast<jule::U64>((_16717_months + 2LLU));
	if ((_17217_t._field_month >= 12LLU)) {
		_17217_t._field_month-=12LLU;
		(_17217_t._field_year)++;
	}
	_17217_t._field_month+=1LLU;
	_17217_t._field_year+=1900LLU;
	_17217_t._field_day=static_cast<jule::U64>((_13417_rem_days + 1LLU));
	_17217_t._field_week_day=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(3LLU + _12617_days))) % 7LL));
	if ((_17217_t._field_week_day < 0LLU)) {
		_17217_t._field_week_day+=7LLU;
	}
	_17217_t._field_year_day=_16217_y_day;
	_17217_t._field_hour=static_cast<jule::U64>((_12717_rem_secs / 3600LLU));
	_17217_t._field_minute=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>((_12717_rem_secs / 60LLU))) % 60LL));
	_17217_t._field_second=static_cast<jule::U64>((_12717_rem_secs % 60LL));
	return _17217_t;
}







std::ostream &operator<<(std::ostream &_Stream, _2005d9450_Time _Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::I64 static__2005dbd37_nanoseconds(jule::I64 _22531_d) {
	return static_cast<jule::I64>((_22531_d * 1LL));
}



inline jule::I64 static__2005dc145_microseconds(jule::I64 _23032_d) {
	return static_cast<jule::I64>((_23032_d * 1000LL));
}



inline jule::I64 static__2005dc453_milliseconds(jule::I64 _23532_d) {
	return static_cast<jule::I64>((_23532_d * 1000000LL));
}



inline jule::I64 static__2005dc761_seconds(jule::I64 _24027_d) {
	return static_cast<jule::I64>((_24027_d * 1000000000LL));
}



inline jule::I64 static__2005dca6e_minutes(jule::I64 _24527_d) {
	return static_cast<jule::I64>((_24527_d * 60000000000LL));
}



inline jule::I64 static__2005dcd7c_hours(jule::I64 _25025_d) {
	return static_cast<jule::I64>((_25025_d * 3600000000000LL));
}







std::ostream &operator<<(std::ostream &_Stream, _2005db892_Duration _Src) {
	_Stream << "Duration{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20041aeb8_TestCoder> static__200464a8e_new(jule::Ptr<_2005a036c_ObjectCoder>& _2928_oc) {
	return jule::new_ptr<_20041aeb8_TestCoder>(_20041aeb8_TestCoder(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Ptr<_1ee2579b5_Fn>(),_2928_oc));
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _200464c04_find_testing_package(_20041aeb8_TestCoder* _self_) {
	{
		auto &expr = (*_self_)._field_oc.get()._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_2039d741b:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _2039d74b5_imp = *it;
			{
				if ((_2039d74b5_imp.get()._field_link_path == jule::Str("std::testing", 12))) {
					return _2039d74b5_imp;
				}
			}
			_iter_next_2039d741b:;
			++it;
			goto _iter_begin_2039d741b;
		}
		_iter_end_2039d741b:;
	}
	return nullptr;
}



inline void _200464ee0_append_test(_20041aeb8_TestCoder* _self_,jule::Str& _4435_obj,jule::Ptr<_1ee25b4ad_FnIns> _4449_f) {
	_4435_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_4435_obj+=_2004656e9_call_tm_reset(&(*_self_));
	_4435_obj+=jule::Str(";\n", 2);
	_4435_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_4435_obj+=jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35);
	_4435_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_4435_obj+=jule::Str("jule::outln(", 12);
	_4435_obj+=_200582bce_cstr_lit(static_cast<jule::Slice<jule::U8>>(_4449_f.get()._field_decl.get()._field_ident));
	_4435_obj+=jule::Str(");\n", 3);
	_4435_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_4435_obj+=static__200587b7e_func_ins(_4449_f);
	_4435_obj+=jule::Str("(_t);\n", 6);
	_4435_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_4435_obj+=jule::Str("post_test();\n", 13);
}



inline void _2004652cb_append_package_tests(_20041aeb8_TestCoder* _self_,jule::Str& _6144_obj,jule::Ptr<_1eedc3da0_Package>& _6159_p) {
	{
		auto &expr = _6159_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2039dda82:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _2039ddb81_file = *it;
			{
				{
					auto &expr = _2039ddb81_file.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_2039de368:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _2039de401_f = *it;
						{
							if (_2005e9350_has_directive(_2039de401_f.get()._field_directives,jule::Str("test", 4))) {
								_200464ee0_append_test(&(*_self_), _6144_obj,_2039de401_f.get()._field_instances[0LL]);
							}
						}
						_iter_next_2039de368:;
						++it;
						goto _iter_begin_2039de368;
					}
					_iter_end_2039de368:;
				}
			}
			_iter_next_2039dda82:;
			++it;
			goto _iter_begin_2039dda82;
		}
		_iter_end_2039dda82:;
	}
}



inline jule::Bool _2004654b8_ready_testing_package(_20041aeb8_TestCoder* _self_) {
	jule::Ptr<_1eedc08c4_ImportInfo> _7217_p = _200464c04_find_testing_package(&(*_self_));
	if ((_7217_p == nullptr)) {
		return false;
	}
	(*_self_)._field_t=_1eedc21cd_find_struct(_7217_p.ptr(), jule::Str("T", 1),false).get()._field_instances[0LL];
	(*_self_)._field_tm_reset=_1ee24672e_find_method((*_self_)._field_t.ptr(), jule::Str("reset", 5),false);
	(*_self_)._field_tm_failed=_1ee24672e_find_method((*_self_)._field_t.ptr(), jule::Str("failed", 6),false);
	(*_self_)._field_tm_skipped=_1ee24672e_find_method((*_self_)._field_t.ptr(), jule::Str("skipped", 7),false);
	return true;
}



inline jule::Str _2004656e9_call_tm_reset(_20041aeb8_TestCoder* _self_) {
	jule::Str _8817_obj = static__200587871_func((*_self_)._field_tm_reset);
	_8817_obj+=jule::Str("(_t)", 4);
	return _8817_obj;
}



inline jule::Str _200465991_call_tm_failed(_20041aeb8_TestCoder* _self_) {
	jule::Str _9417_obj = static__200587871_func((*_self_)._field_tm_failed);
	_9417_obj+=jule::Str("(_t)", 4);
	return _9417_obj;
}



inline jule::Str _200465c6b_call_tm_skipped(_20041aeb8_TestCoder* _self_) {
	jule::Str _10017_obj = static__200587871_func((*_self_)._field_tm_skipped);
	_10017_obj+=jule::Str("(_t)", 4);
	return _10017_obj;
}



inline void _20046608a_serialize(_20041aeb8_TestCoder* _self_,jule::Str& _10737_obj) {
	_10737_obj+=jule::Str("\nvoid test_point(void) {\n", 25);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	if ((!(_2004654b8_ready_testing_package(&(*_self_))))) {
		_10737_obj+=jule::Str("}", 1);
		_2005953ea_done_indent((*_self_)._field_oc.ptr());
		return;
	}
	_10737_obj+=static__2005eb0ee_as_sptr(static__2005ed497_structure_ins((*_self_)._field_t));
	_10737_obj+=jule::Str(" _t = jule::new_ptr<", 20);
	_10737_obj+=static__2005ed497_structure_ins((*_self_)._field_t);
	_10737_obj+=jule::Str(">(); _t.ref = nullptr;\n", 23);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("auto post_test = [&](void) {\n", 29);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("++total;\n", 9);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("if (", 4);
	_10737_obj+=_200465991_call_tm_failed(&(*_self_));
	_10737_obj+=jule::Str(") { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 60);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("else if (", 9);
	_10737_obj+=_200465c6b_call_tm_skipped(&(*_self_));
	_10737_obj+=jule::Str(") { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 62);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("};\n", 3);
	_2004652cb_append_package_tests(&(*_self_), _10737_obj,(*_self_)._field_oc.get()._field_ir.get()._field_main);
	_10737_obj+=jule::Str("\n\n", 2);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("std::cout << std::endl << \"total tests: \" << total << \" skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 154);
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("if (failed != 0) std::exit(1);\n", 31);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_10737_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_10737_obj+=jule::Str("}\n", 2);
}







std::ostream &operator<<(std::ostream &_Stream, _20041aeb8_TestCoder _Src) {
	_Stream << "TestCoder{";
	_Stream << "t:" << _Src._field_t << ", ";
	_Stream << "tm_reset:" << _Src._field_tm_reset << ", ";
	_Stream << "tm_failed:" << _Src._field_tm_failed << ", ";
	_Stream << "tm_skipped:" << _Src._field_tm_skipped << ", ";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2004729c0_ScopeCoder> static__2004b8eab_new(jule::Ptr<_2005a036c_ObjectCoder>& _4824_oc) {
	return jule::new_ptr<_2004729c0_ScopeCoder>(_2004729c0_ScopeCoder(_4824_oc));
}



inline jule::Str _200469962_range_index_iter(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3742_RangeIter>& _5440_it) {
	jule::Str _5513_begin = static__2005892e0_iter_begin(static_cast<jule::U32>(static_cast<jule::U32>(_5440_it)));
	jule::Str _5613_next = static__20058990b_iter_next(static_cast<jule::U32>(static_cast<jule::U32>(_5440_it)));
	jule::Str _5817_obj = jule::Str("{\n", 2);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=jule::Str("auto ", 5);
	if (_22237d2b0_OPT_COPY && _20051b926_is_copy_optimizable(_5440_it.get()._field_expr)) {
		_5817_obj+=jule::Str("&", 1);
	}
	_5817_obj+=jule::Str("expr = ", 7);
	_5817_obj+=_200580e30_model((*_self_)._field_oc.get()._field_ec.ptr(), _5440_it.get()._field_expr.get()._field_model);
	_5817_obj+=jule::Str(";\n", 2);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=_5513_begin;
	_5817_obj+=jule::Str(":;\n", 3);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	if ((_5440_it.get()._field_key_a != nullptr)) {
		_5817_obj+=_2005e0e07_var_init_expr((*_self_)._field_oc.ptr(), _5440_it.get()._field_key_a,jule::Str("it - expr.begin()", 17));
		_5817_obj+=jule::Str("\n", 1);
		_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	}
	if ((_5440_it.get()._field_key_b != nullptr)) {
		if (_22237d2b0_OPT_COPY) {
			_5440_it.get()._field_key_b.get()._field_reference=_20051da9e_is_iter_copy_optimizable(_5440_it.get()._field_expr,_5440_it.get()._field_key_b);
		}
		_5817_obj+=_2005e0e07_var_init_expr((*_self_)._field_oc.ptr(), _5440_it.get()._field_key_b,jule::Str("*it", 3));
		_5817_obj+=jule::Str("\n", 1);
		_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	}
	_5817_obj+=_20051977b_scope(&(*_self_), _5440_it.get()._field_scope);
	_5817_obj+=jule::Str("\n", 1);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=_5613_next;
	_5817_obj+=jule::Str(":;\n", 3);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=jule::Str("++it;\n", 6);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	if ((_5440_it.get()._field_key_a != nullptr)) {
		_5817_obj+=static__200588ed2_var(_5440_it.get()._field_key_a);
		_5817_obj+=jule::Str("++;\n", 4);
		_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	}
	_5817_obj+=jule::Str("goto ", 5);
	_5817_obj+=_5513_begin;
	_5817_obj+=jule::Str(";\n", 2);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=jule::Str("}\n", 2);
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=static__2005895ed_iter_end(static_cast<jule::U32>(static_cast<jule::U32>(_5440_it)));
	_5817_obj+=jule::Str(":;\n", 3);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_5817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_5817_obj+=jule::Str("}", 1);
	return _5817_obj;
}



inline jule::Str _2004c84e8_range_hashmap_iter(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3742_RangeIter>& _12442_it) {
	jule::Str _12513_begin = static__2005892e0_iter_begin(static_cast<jule::U32>(static_cast<jule::U32>(_12442_it)));
	jule::Str _12613_next = static__20058990b_iter_next(static_cast<jule::U32>(static_cast<jule::U32>(_12442_it)));
	jule::Str _12817_obj = jule::Str("{\n", 2);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("auto ", 5);
	if (_22237d2b0_OPT_COPY && _20051b926_is_copy_optimizable(_12442_it.get()._field_expr)) {
		_12817_obj+=jule::Str("&", 1);
	}
	_12817_obj+=jule::Str("expr = ", 7);
	_12817_obj+=_200580e30_model((*_self_)._field_oc.get()._field_ec.ptr(), _12442_it.get()._field_expr.get()._field_model);
	_12817_obj+=jule::Str(";\n", 2);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=_12513_begin;
	_12817_obj+=jule::Str(":;\n", 3);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	if ((_12442_it.get()._field_key_a != nullptr)) {
		if (_22237d2b0_OPT_COPY) {
			_12442_it.get()._field_key_a.get()._field_reference=_20051da9e_is_iter_copy_optimizable(_12442_it.get()._field_expr,_12442_it.get()._field_key_a);
		}
		_12817_obj+=_2005e0e07_var_init_expr((*_self_)._field_oc.ptr(), _12442_it.get()._field_key_a,jule::Str("it->first", 9));
		_12817_obj+=jule::Str("\n", 1);
		_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	}
	if ((_12442_it.get()._field_key_b != nullptr)) {
		if (_22237d2b0_OPT_COPY) {
			_12442_it.get()._field_key_b.get()._field_reference=_20051da9e_is_iter_copy_optimizable(_12442_it.get()._field_expr,_12442_it.get()._field_key_b);
		}
		_12817_obj+=_2005e0e07_var_init_expr((*_self_)._field_oc.ptr(), _12442_it.get()._field_key_b,jule::Str("it->second", 10));
		_12817_obj+=jule::Str("\n", 1);
		_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	}
	_12817_obj+=_20051977b_scope(&(*_self_), _12442_it.get()._field_scope);
	_12817_obj+=jule::Str("\n", 1);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=_12613_next;
	_12817_obj+=jule::Str(":;\n", 3);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("++it;\n", 6);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("goto ", 5);
	_12817_obj+=_12513_begin;
	_12817_obj+=jule::Str(";\n", 2);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("}\n", 2);
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=static__2005895ed_iter_end(static_cast<jule::U32>(static_cast<jule::U32>(_12442_it)));
	_12817_obj+=jule::Str(":;\n", 3);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_12817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_12817_obj+=jule::Str("}", 1);
	return _12817_obj;
}



inline jule::Str _20046b821_if_case(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda2b92_If> _19230_i) {
	jule::Str _19317_obj = jule::Str();
	if (_19230_i.get()._field_expr != jule::Any(jule::Any(nullptr))) {
		_19317_obj+=jule::Str("if (", 4);
		_19317_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _19230_i.get()._field_expr);
		_19317_obj+=jule::Str(") ", 2);
	}
	_19317_obj+=_20051977b_scope(&(*_self_), _19230_i.get()._field_scope);
	return _19317_obj;
}



inline jule::Str _20046e071_conditional(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda30d2_Conditional> _20334_c) {
	jule::Str _20417_obj = jule::Str();
	{
		auto &expr = _20334_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_203a28e0d:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda2b92_If> _203a28ec9_elif = *it;
			{
				if ((_203a28ec9_elif == nullptr)) {
					goto _iter_next_203a28e0d;
				}
				if ((_20417_obj.len() != 0LL)) {
					_20417_obj+=jule::Str(" else ", 6);
				}
				_20417_obj+=_20046b821_if_case(&(*_self_), _203a28ec9_elif);
			}
			_iter_next_203a28e0d:;
			++it;
			goto _iter_begin_203a28e0d;
		}
		_iter_end_203a28e0d:;
	}
	if ((_20334_c.get()._field_default != nullptr)) {
		if ((_20417_obj.len() != 0LL)) {
			_20417_obj+=jule::Str(" else ", 6);
		}
		_20417_obj+=_20051977b_scope(&(*_self_), _20334_c.get()._field_default.get()._field_scope);
	}
	return _20417_obj;
}



inline jule::Str _2004bd444_inf_iter(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3302_InfIter> _22331_it) {
	jule::Str _22417_obj = jule::Str("for (;;) {\n", 11);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_22417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_22417_obj+=_20051977b_scope(&(*_self_), _22331_it.get()._field_scope);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_22417_obj+=jule::Str("\n", 1);
	_22417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_22417_obj+=static__20058990b_iter_next(static_cast<jule::U32>(static_cast<jule::U32>(_22331_it)));
	_22417_obj+=jule::Str(":;\n", 3);
	_22417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_22417_obj+=jule::Str("}\n", 2);
	_22417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_22417_obj+=static__2005895ed_iter_end(static_cast<jule::U32>(static_cast<jule::U32>(_22331_it)));
	_22417_obj+=jule::Str(":;", 2);
	return _22417_obj;
}



inline jule::Str _2004c2558_while_iter(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3522_WhileIter> _24433_it) {
	jule::Str _24517_obj = jule::Str();
	if ((_24433_it.get()._field_expr != jule::Any(jule::Any(nullptr))) && (_24433_it.get()._field_next == jule::Any(jule::Any(nullptr)))) {
		_24517_obj+=jule::Str("while (", 7);
		_24517_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _24433_it.get()._field_expr);
		_24517_obj+=jule::Str(") {\n", 4);
	} else {
		_24517_obj+=jule::Str("for (; ", 7);
		if (_24433_it.get()._field_expr != jule::Any(jule::Any(nullptr))) {
			_24517_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _24433_it.get()._field_expr);
		}
		_24517_obj+=jule::Str("; ", 2);
		if (_24433_it.get()._field_next != jule::Any(jule::Any(nullptr))) {
			jule::Str _25721_st = _2005188ac_st(&(*_self_), _24433_it.get()._field_next);
			_24517_obj+=_25721_st.slice(0LL,(_25721_st.len() - 1LL));
		}
		_24517_obj+=jule::Str(") {\n", 4);
	}
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_24517_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_24517_obj+=_20051977b_scope(&(*_self_), _24433_it.get()._field_scope);
	_24517_obj+=jule::Str("\n", 1);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_24517_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_24517_obj+=static__20058990b_iter_next(static_cast<jule::U32>(static_cast<jule::U32>(_24433_it)));
	_24517_obj+=jule::Str(":;\n", 3);
	_24517_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_24517_obj+=jule::Str("}\n", 2);
	_24517_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_24517_obj+=static__2005895ed_iter_end(static_cast<jule::U32>(static_cast<jule::U32>(_24433_it)));
	_24517_obj+=jule::Str(":;", 2);
	return _24517_obj;
}



inline jule::Str _2004c4967_range_iter(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3742_RangeIter> _28033_it) {
	{
		
		if ((_1eee7a121_slc(_28033_it.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203a3b272:;
			{
				return _200469962_range_index_iter(&(*_self_), _28033_it);
			}
		}
		else if ((_1eee79d46_arr(_28033_it.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203a3ac22:;
			{
				return _200469962_range_index_iter(&(*_self_), _28033_it);
			}
		}
		else if ((_1eee7ac7b_map(_28033_it.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203a3ac88:;
			{
				return _2004c84e8_range_hashmap_iter(&(*_self_), _28033_it);
			}
		}
		else {
			_case_begin_203a3a617:;
			{
				return _200469962_range_index_iter(&(*_self_), _28033_it);
			}
		}
		_match_end_203a3a56d:;
	}
}



inline jule::Str _2004d86a1_cont(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3962_ContSt> _29319_c) {
	jule::Str _29417_obj = jule::Str("goto ", 5);
	_29417_obj+=static__20058990b_iter_next(_29319_c.get()._field_it);
	_29417_obj+=jule::Str(";", 1);
	return _29417_obj;
}



inline jule::Str _2004e8caa_label(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3da2_Label> _30020_l) {
	return (static__200589c19_label(_30020_l.get()._field_ident) + jule::Str(":;", 2));
}



inline jule::Str _2004ee3cb_goto_st(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda40c2_GotoSt> _30422_gt) {
	jule::Str _30517_obj = jule::Str("goto ", 5);
	_30517_obj+=static__200589c19_label(_30422_gt.get()._field_ident);
	_30517_obj+=jule::Str(";", 1);
	return _30517_obj;
}



inline jule::Str _20050539e_postfix(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda42e2_Postfix> _31130_p) {
	jule::Str _31217_obj = jule::Str("(", 1);
	_31217_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _31130_p.get()._field_expr);
	_31217_obj+=jule::Str(")", 1);
	_31217_obj+=_31130_p.get()._field_op;
	_31217_obj+=jule::Str(";", 1);
	return _31217_obj;
}



inline jule::Str _200556169_assign(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda4512_Assign> _32029_a) {
	jule::Str _32117_obj = _2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _32029_a.get()._field_l.get()._field_model);
	_32117_obj+=_32029_a.get()._field_op._field_kind;
	_32117_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _32029_a.get()._field_r.get()._field_model);
	_32117_obj+=jule::Str(";", 1);
	return _32117_obj;
}



inline jule::Str _2005595bd_multi_assign(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda4732_MultiAssign> _32835_a) {
	jule::Str _32917_obj = jule::Str("std::tie(", 9);
	{
		auto &expr = _32835_a.get()._field_l;
		auto it = expr.begin();
		_iter_begin_203a47327:;
		if (it != expr.end()) {
			jule::Any _203a473e3_l = *it;
			{
				if (_203a473e3_l == jule::Any(jule::Any(nullptr))) {
					_32917_obj+=jule::Str("std::ignore", 11);
				} else {
					_32917_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a473e3_l);
				}
				_32917_obj+=jule::Str(",", 1);
			}
			_iter_next_203a47327:;
			++it;
			goto _iter_begin_203a47327;
		}
		_iter_end_203a47327:;
	}
	(_32917_obj).mut_slice(0LL,_32917_obj.len() - 1LL);
	_32917_obj+=jule::Str(") = ", 4);
	_32917_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _32835_a.get()._field_r);
	_32917_obj+=jule::Str(";", 1);
	return _32917_obj;
}



inline jule::Str _2004cbba0_match_expr(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda4952_Match>& _34734_m) {
	if ((!(_1eee44690_is_const(_34734_m.get()._field_expr.ptr())))) {
		return jule::Str("_match_expr", 11);
	}
	if ((!(_1eed23948_is_bool(_34734_m.get()._field_expr.get()._field_constant.ptr()))) || (!(_1eed20d96_read_bool(_34734_m.get()._field_expr.get()._field_constant.ptr())))) {
		return _200580e30_model((*_self_)._field_oc.get()._field_ec.ptr(), _34734_m.get()._field_expr.get()._field_model);
	}
	return jule::Str();
}



inline jule::Str _2004ebb26_case(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda4952_Match> _35727_m,jule::Ptr<_1eeda4da3_Case> _35742_c) {
	jule::Str _35817_obj = jule::Str();
	if ((_35742_c.get()._field_exprs.len() != 0LL) && (!(_1eed7987d_is_generic_type_match(_35727_m.ptr())))) {
		if ((_35727_m.get()._field_cases.len() > 0LL) && (_35727_m.get()._field_cases[0LL] == _35742_c)) {
			_35817_obj+=jule::Str("if (", 4);
		} else {
			_35817_obj+=jule::Str("else if (", 9);
		}
		{
			auto &expr = _35742_c.get()._field_exprs;
			auto it = expr.begin();
			_iter_begin_203a502a8:;
			if (it != expr.end()) {
				jule::I32 _203a4ebd1_i = it - expr.begin();
				jule::Ptr<_1eee43b89_Data> _203a5031e_expr = *it;
				{
					{
						
						if ((!(_35727_m.get()._field_type_match))) {
							_case_begin_203a51c05:;
							{
								jule::Str _36925_case_expr = _2004cbba0_match_expr(&(*_self_), _35727_m);
								if (_1eee44a47_good_operand(_35727_m.get()._field_expr.ptr(), _203a5031e_expr)) {
									if ((_36925_case_expr.len() != 0LL)) {
										_35817_obj+=_36925_case_expr;
										_35817_obj+=jule::Str(" == ", 4);
									}
									_35817_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a5031e_expr.get()._field_model);
								} else {
									_35817_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a5031e_expr.get()._field_model);
									if ((_36925_case_expr.len() != 0LL)) {
										_35817_obj+=jule::Str(" == ", 4);
										_35817_obj+=_36925_case_expr;
									}
								}
							}
						}
						else {
							_case_begin_203a50929:;
							{
								_35817_obj+=jule::Str("_match_expr", 11);
								_35817_obj+=jule::Str(".type_is<", 9);
								_35817_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a5031e_expr.get()._field_model);
								_35817_obj+=jule::Str(">()", 3);
							}
						}
						_match_end_203a5085d:;
					}
					if ((_203a4ebd1_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_35742_c.get()._field_exprs.len()))) {
						_35817_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_203a502a8:;
				++it;
				_203a4ebd1_i++;
				goto _iter_begin_203a502a8;
			}
			_iter_end_203a502a8:;
		}
		_35817_obj+=jule::Str(") ", 2);
	} else if ((_35727_m.get()._field_default == _35742_c) && (_35727_m.get()._field_cases.len() != 0LL)) {
		_35817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
		_35817_obj+=jule::Str("else ", 5);
	}
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_35817_obj+=jule::Str("{\n", 2);
	_35817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_35817_obj+=static__20058a335_case_begin(static_cast<jule::U32>(static_cast<jule::U32>(_35742_c)));
	_35817_obj+=jule::Str(":;\n", 3);
	if ((_35742_c.get()._field_scope.get()._field_stmts.len() > 0LL)) {
		_35817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
		_35817_obj+=_20051977b_scope(&(*_self_), _35742_c.get()._field_scope);
		_35817_obj+=jule::Str("\n", 1);
	}
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_35817_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_35817_obj+=jule::Str("}", 1);
	return _35817_obj;
}



inline jule::Str _200525765_match_st(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda4952_Match> _41931_m) {
	if ((_41931_m.get()._field_cases.len() == 0LL) && (_41931_m.get()._field_default == nullptr)) {
		return jule::Str();
	}
	jule::Bool _42413_generic_type_match = _1eed7987d_is_generic_type_match(_41931_m.ptr());
	if (_42413_generic_type_match && ((_41931_m.get()._field_default == nullptr) || (_41931_m.get()._field_default.get()._field_scope.get()._field_stmts.len() == 0LL))) {
		return jule::Str();
	}
	jule::Str _42917_obj = jule::Str("{\n", 2);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_42917_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	if ((!(_42413_generic_type_match)) && (!(_1eee44690_is_const(_41931_m.get()._field_expr.ptr())))) {
		if (_22237d2b0_OPT_COPY && _20051b926_is_copy_optimizable(_41931_m.get()._field_expr)) {
			_42917_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_42917_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_42917_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _41931_m.get()._field_expr.get()._field_model);
		_42917_obj+=jule::Str(" };\n", 4);
		_42917_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	}
	if ((_41931_m.get()._field_cases.len() > 0LL)) {
		{
			auto &expr = _41931_m.get()._field_cases;
			auto it = expr.begin();
			_iter_begin_203a61de1:;
			if (it != expr.end()) {
				jule::Ptr<_1eeda4da3_Case> _203a620de_c = *it;
				{
					if ((_203a620de_c == nullptr)) {
						goto _iter_next_203a61de1;
					}
					_42917_obj+=jule::Str("\n", 1);
					_42917_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
					_42917_obj+=_2004ebb26_case(&(*_self_), _41931_m,_203a620de_c);
				}
				_iter_next_203a61de1:;
				++it;
				goto _iter_begin_203a61de1;
			}
			_iter_end_203a61de1:;
		}
	}
	if ((_41931_m.get()._field_default != nullptr)) {
		_42917_obj+=jule::Str("\n", 1);
		_42917_obj+=_2004ebb26_case(&(*_self_), _41931_m,_41931_m.get()._field_default);
	}
	_42917_obj+=jule::Str("\n", 1);
	_42917_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_42917_obj+=static__20058a027_match_end(static_cast<jule::U32>(static_cast<jule::U32>(_41931_m)));
	_42917_obj+=jule::Str(":;", 2);
	_42917_obj+=jule::Str("\n", 1);
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_42917_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_42917_obj+=jule::Str("}", 1);
	return _42917_obj;
}



inline jule::Str _200474a38_fall_st(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda50c3_FallSt> _47722_f) {
	jule::Str _47817_obj = jule::Str("goto ", 5);
	_47817_obj+=static__20058a335_case_begin(_47722_f.get()._field_dest_case);
	_47817_obj+=jule::Str(";", 1);
	return _47817_obj;
}



inline jule::Str _200498bc2_break_st(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda3b82_BreakSt> _48423_b) {
	jule::Str _48517_obj = jule::Str("goto ", 5);
	if ((_48423_b.get()._field_it != 0LLU)) {
		_48517_obj+=static__2005895ed_iter_end(_48423_b.get()._field_it);
	} else {
		_48517_obj+=static__20058a027_match_end(_48423_b.get()._field_mtch);
	}
	_48517_obj+=jule::Str(";", 1);
	return _48517_obj;
}



inline jule::Str _2004ac235_ret_with_vars(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda52e3_RetSt> _49536_r) {
	jule::Str _49617_obj = jule::Str();
	{
		auto &expr = _49536_r.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_203a6a625:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _203a6a6e1_v = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_203a6a6e1_v.get()._field_ident)) {
					_49617_obj+=_200581a46_init_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a6a6e1_v.get()._field_kind.get()._field_kind);
				} else {
					_49617_obj+=static__200588ed2_var(_203a6a6e1_v);
				}
				_49617_obj+=jule::Str(",", 1);
			}
			_iter_next_203a6a625:;
			++it;
			goto _iter_begin_203a6a625;
		}
		_iter_end_203a6a625:;
	}
	(_49617_obj).mut_slice(0LL,_49617_obj.len() - 1LL);
	jule::Str _50817_oobj = jule::Str("return ", 7);
	if (_49536_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_50817_oobj+=jule::Str("jule::Exceptional<", 18);
		_50817_oobj+=static__2005eee16_kind(_49536_r.get()._field_func.get()._field_result);
		_50817_oobj+=jule::Str(">(jule::Any(), ", 15);
	}
	if ((_49536_r.get()._field_vars.len() > 1LL)) {
		_50817_oobj+=jule::Str("std::make_tuple(", 16);
		_50817_oobj+=_49617_obj;
		_50817_oobj+=jule::Str(")", 1);
	} else {
		_50817_oobj+=_49617_obj;
	}
	if (_49536_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_50817_oobj+=jule::Str(")", 1);
	}
	_50817_oobj+=jule::Str(";", 1);
	return _50817_oobj;
}



inline jule::Str _2004acde5_ret_tuple(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda52e3_RetSt> _53232_r) {
	jule::Slice<jule::Ptr<_1eee43b89_Data>> _53317_datas = _53232_r.get()._field_expr.operator jule::Ptr<_1ee24e8be_TupleExprModel>().get()._field_datas;
	jule::Str _53417_obj = jule::Str();
	{
		auto &expr = _53232_r.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_203a72143:;
		if (it != expr.end()) {
			jule::I32 _203a72341_i = it - expr.begin();
			jule::Ptr<_1eedeb24b_Var> _203a7251c_v = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_203a7251c_v.get()._field_ident)) {
					goto _iter_next_203a72143;
				}
				jule::Any _54021_model = _53317_datas[_203a72341_i].get()._field_model;
				if (_54021_model == jule::Any(jule::Any(_203a7251c_v))) {
					goto _iter_next_203a72143;
				}
				jule::Str _54517_ident = static__200588ed2_var(_203a7251c_v);
				_53417_obj+=_54517_ident;
				_53417_obj+=jule::Str(" = ", 3);
				_53417_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _54021_model);
				_53417_obj+=jule::Str(";\n", 2);
				_53417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
			}
			_iter_next_203a72143:;
			++it;
			_203a72341_i++;
			goto _iter_begin_203a72143;
		}
		_iter_end_203a72143:;
	}
	jule::Str _55317_oobj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _53317_datas;
		auto it = expr.begin();
		_iter_begin_203a71483:;
		if (it != expr.end()) {
			jule::I32 _203a7282a_i = it - expr.begin();
			jule::Ptr<_1eee43b89_Data> _203a757ea_d = *it;
			{
				jule::Ptr<_1eedeb24b_Var> _55521_v = _53232_r.get()._field_vars[_203a7282a_i];
				if (_1e02c4ada_is_ignore_ident(_55521_v.get()._field_ident)) {
					_55317_oobj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a757ea_d.get()._field_model);
				} else {
					_55317_oobj+=static__200588ed2_var(_55521_v);
				}
				_55317_oobj+=jule::Str(",", 1);
			}
			_iter_next_203a71483:;
			++it;
			_203a7282a_i++;
			goto _iter_begin_203a71483;
		}
		_iter_end_203a71483:;
	}
	(_55317_oobj).mut_slice(0LL,_55317_oobj.len() - 1LL);
	_55317_oobj+=jule::Str(")", 1);
	if (_53232_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_53417_obj+=jule::Str("return jule::Exceptional<", 25);
		_53417_obj+=static__2005eee16_kind(_53232_r.get()._field_func.get()._field_result);
		_53417_obj+=jule::Str(">(jule::Any(),", 14);
		_53417_obj+=_55317_oobj;
		_53417_obj+=jule::Str(")", 1);
	} else {
		_53417_obj+=jule::Str("return ", 7);
		_53417_obj+=_55317_oobj;
	}
	_53417_obj+=jule::Str(";", 1);
	return _53417_obj;
}



inline jule::Str _2004ea0b9_ret_with_exprs(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda52e3_RetSt> _58237_r) {
	if ((_58237_r.get()._field_vars.len() > 1LL)) {
		return _2004acde5_ret_tuple(&(*_self_), _58237_r);
	}
	if ((_58237_r.get()._field_vars.len() > 0LL)) {
		jule::Ptr<_1eedeb24b_Var> _58921_v = _58237_r.get()._field_vars[0LL];
		if ((!(_1e02c4ada_is_ignore_ident(_58921_v.get()._field_ident))) && (_58237_r.get()._field_expr != jule::Any(jule::Any(_58921_v)))) {
			jule::Str _59121_ident = static__200588ed2_var(_58921_v);
			jule::Str _59225_obj = _59121_ident;
			_59225_obj+=jule::Str(" = ", 3);
			_59225_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _58237_r.get()._field_expr);
			_59225_obj+=jule::Str(";\n", 2);
			_59225_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
			if (_58237_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
				_59225_obj+=jule::Str("return jule::Exceptional<", 25);
				_59225_obj+=static__2005eee16_kind(_58237_r.get()._field_func.get()._field_result);
				_59225_obj+=jule::Str(">(jule::Any(),", 14);
				_59225_obj+=_59121_ident;
				_59225_obj+=jule::Str(")", 1);
			} else {
				_59225_obj+=jule::Str("return ", 7);
				_59225_obj+=_59121_ident;
			}
			_59225_obj+=jule::Str(";", 1);
			return _59225_obj;
		}
	}
	if (_58237_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		jule::Str _61321_obj = jule::Str("return jule::Exceptional<", 25);
		_61321_obj+=static__2005eee16_kind(_58237_r.get()._field_func.get()._field_result);
		_61321_obj+=jule::Str(">(jule::Any(),", 14);
		_61321_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _58237_r.get()._field_expr);
		_61321_obj+=jule::Str(")", 1);
		_61321_obj+=jule::Str(";", 1);
		return _61321_obj;
	}
	jule::Str _62217_obj = jule::Str("return ", 7);
	_62217_obj+=_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), _58237_r.get()._field_expr);
	_62217_obj+=jule::Str(";", 1);
	return _62217_obj;
}



inline jule::Str _2004ead12_ret_st(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eeda52e3_RetSt> _62829_r) {
	if ((_62829_r.get()._field_expr == jule::Any(jule::Any(nullptr))) && (_62829_r.get()._field_vars.len() == 0LL)) {
		if (_62829_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
			return jule::Str("return jule::VoidExceptional();", 31);
		}
		return jule::Str("return;", 7);
	}
	if (_62829_r.get()._field_expr == jule::Any(jule::Any(nullptr))) {
		return _2004ac235_ret_with_vars(&(*_self_), _62829_r);
	}
	return _2004ea0b9_ret_with_exprs(&(*_self_), _62829_r);
}



inline jule::Str _20050229c_ret_with_defaults(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eee76b45_TypeKind> _64340_result) {
	jule::Str _64417_obj = jule::Str("return ", 7);
	if ((_1eee7b056_tup(_64340_result.ptr()) != nullptr)) {
		_64417_obj+=jule::Str("std::make_tuple(", 16);
		{
			auto &expr = _1eee7b056_tup(_64340_result.ptr()).get()._field_types;
			auto it = expr.begin();
			_iter_begin_203a87d90:;
			if (it != expr.end()) {
				jule::Ptr<_1eee76b45_TypeKind> _203a88038_t = *it;
				{
					_64417_obj+=_200581a46_init_expr((*_self_)._field_oc.get()._field_ec.ptr(), _203a88038_t);
					_64417_obj+=jule::Str(",", 1);
				}
				_iter_next_203a87d90:;
				++it;
				goto _iter_begin_203a87d90;
			}
			_iter_end_203a87d90:;
		}
		(_64417_obj).mut_slice(0LL,_64417_obj.len() - 1LL);
		_64417_obj+=jule::Str(")", 1);
	} else {
		_64417_obj+=_200581a46_init_expr((*_self_)._field_oc.get()._field_ec.ptr(), _64340_result);
	}
	_64417_obj+=jule::Str(";", 1);
	return _64417_obj;
}



inline jule::Str _20050e078_var(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eedeb24b_Var> _66026_v) {
	if (_66026_v.get()._field_constant) {
		return jule::Str();
	}
	return _2005e106c_var((*_self_)._field_oc.ptr(), _66026_v);
}



inline jule::Str _2005188ac_st(_2004729c0_ScopeCoder* _self_,jule::Any _66825_st) {
	if (_66825_st == jule::Any(jule::Any(nullptr))) {
		return jule::Str();
	}
	{
		auto &_match_expr{ _66825_st };
		
		if (_match_expr.type_is<jule::Ptr<_1eed8a5a3_Scope>>()) {
			_case_begin_203a8bdb6:;
			{
				return _20051977b_scope(&(*_self_), _66825_st.operator jule::Ptr<_1eed8a5a3_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_203a8c070:;
			{
				return _20050e078_var(&(*_self_), _66825_st.operator jule::Ptr<_1eedeb24b_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_203a8caba:;
			{
				return (_2005812d7_expr((*_self_)._field_oc.get()._field_ec.ptr(), jule::Any(_66825_st.operator jule::Ptr<_1eee43b89_Data>())) + jule::Str(";", 1));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda30d2_Conditional>>()) {
			_case_begin_203a8cb31:;
			{
				return _20046e071_conditional(&(*_self_), _66825_st.operator jule::Ptr<_1eeda30d2_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3302_InfIter>>()) {
			_case_begin_203a8c8bc:;
			{
				return _2004bd444_inf_iter(&(*_self_), _66825_st.operator jule::Ptr<_1eeda3302_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3522_WhileIter>>()) {
			_case_begin_203a8c933:;
			{
				return _2004c2558_while_iter(&(*_self_), _66825_st.operator jule::Ptr<_1eeda3522_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3742_RangeIter>>()) {
			_case_begin_203a8c999:;
			{
				return _2004c4967_range_iter(&(*_self_), _66825_st.operator jule::Ptr<_1eeda3742_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3962_ContSt>>()) {
			_case_begin_203a8ca10:;
			{
				return _2004d86a1_cont(&(*_self_), _66825_st.operator jule::Ptr<_1eeda3962_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3da2_Label>>()) {
			_case_begin_203a8cbb9:;
			{
				return _2004e8caa_label(&(*_self_), _66825_st.operator jule::Ptr<_1eeda3da2_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda40c2_GotoSt>>()) {
			_case_begin_203a8cc30:;
			{
				return _2004ee3cb_goto_st(&(*_self_), _66825_st.operator jule::Ptr<_1eeda40c2_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda42e2_Postfix>>()) {
			_case_begin_203a8cca7:;
			{
				return _20050539e_postfix(&(*_self_), _66825_st.operator jule::Ptr<_1eeda42e2_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4512_Assign>>()) {
			_case_begin_203a8cd2e:;
			{
				return _200556169_assign(&(*_self_), _66825_st.operator jule::Ptr<_1eeda4512_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4732_MultiAssign>>()) {
			_case_begin_203a8cda6:;
			{
				return _2005595bd_multi_assign(&(*_self_), _66825_st.operator jule::Ptr<_1eeda4732_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4952_Match>>()) {
			_case_begin_203a8ce2d:;
			{
				return _200525765_match_st(&(*_self_), _66825_st.operator jule::Ptr<_1eeda4952_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda50c3_FallSt>>()) {
			_case_begin_203a8cea5:;
			{
				return _200474a38_fall_st(&(*_self_), _66825_st.operator jule::Ptr<_1eeda50c3_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3b82_BreakSt>>()) {
			_case_begin_203a8d02c:;
			{
				return _200498bc2_break_st(&(*_self_), _66825_st.operator jule::Ptr<_1eeda3b82_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda52e3_RetSt>>()) {
			_case_begin_203a8d0a4:;
			{
				return _2004ead12_ret_st(&(*_self_), _66825_st.operator jule::Ptr<_1eeda52e3_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200563e46_PushToSliceExprModel>>()) {
			_case_begin_203a8d12b:;
			{
				return _20057cec6_push_to_slice((*_self_)._field_oc.get()._field_ec.ptr(), _66825_st.operator jule::Ptr<_200563e46_PushToSliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200564430_MutSlicingExprModel>>()) {
			_case_begin_203a8d1a3:;
			{
				return _2005806c1_mut_slicing((*_self_)._field_oc.get()._field_ec.ptr(), _66825_st.operator jule::Ptr<_200564430_MutSlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200564919_StrInsertBeginExprModel>>()) {
			_case_begin_203a8d22a:;
			{
				return _200580a78_str_insert_begin((*_self_)._field_oc.get()._field_ec.ptr(), _66825_st.operator jule::Ptr<_200564919_StrInsertBeginExprModel>());
			}
		}
		else {
			_case_begin_203a8c59d:;
			{
				return jule::Str("<unimplemented_stmt>", 20);
			}
		}
		_match_end_203a8c4d2:;
	}
}



inline jule::Str _20051977b_scope(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1eed8a5a3_Scope> _71928_s) {
	jule::Str _72017_obj = jule::Str("{\n", 2);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	{
		auto &expr = _71928_s.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_203a9b579:;
		if (it != expr.end()) {
			jule::Any _203a9b777_st = *it;
			{
				_72017_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
				_72017_obj+=_2005188ac_st(&(*_self_), _203a9b777_st);
				_72017_obj+=jule::Str("\n", 1);
			}
			_iter_next_203a9b579:;
			++it;
			goto _iter_begin_203a9b579;
		}
		_iter_end_203a9b579:;
	}
	_2005953ea_done_indent((*_self_)._field_oc.ptr());
	_72017_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_72017_obj+=jule::Str("}", 1);
	if (_71928_s.get()._field_deferred) {
		_72017_obj=((jule::Str("__JULE_DEFER(", 13) + _72017_obj) + jule::Str(");", 2));
	}
	return _72017_obj;
}



inline jule::Str _20051a53a_func_scope(_2004729c0_ScopeCoder* _self_,jule::Ptr<_1ee25b4ad_FnIns> _74133_f) {
	if ((_74133_f.get()._field_scope == nullptr)) {
		return jule::Str();
	}
	jule::Str _74517_obj = _20051977b_scope(&(*_self_), _74133_f.get()._field_scope);
	if (_74133_f.get()._field_decl.get()._field_exceptional && _1ee257e7c_is_void(_74133_f.get()._field_decl.ptr())) {
		_74517_obj=(_74517_obj.slice(0LL,(_74517_obj.len() - 2LL)) + jule::Str(" return jule::VoidExceptional(); }", 34));
	}
	return _74517_obj;
}







std::ostream &operator<<(std::ostream &_Stream, _2004729c0_ScopeCoder _Src) {
	_Stream << "ScopeCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2005213cb_ExprCoder> static__200467cb2_new(jule::Ptr<_2005a036c_ObjectCoder>& _9024_oc) {
	return jule::new_ptr<_2005213cb_ExprCoder>(_2005213cb_ExprCoder(_9024_oc));
}



inline jule::Str _20052218a_string(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eed1e24b_Const>& _9622_c) {
	jule::Str _9713_content = _1eed21171_read_str(_9622_c.ptr());
	if ((_9713_content.len() == 0LL)) {
		return jule::Str("jule::Str()", 11);
	}
	jule::Slice<jule::U8> _10113_bytes = static_cast<jule::Slice<jule::U8>>(_9713_content);
	jule::Str _10213_len = _1eec84656_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_10113_bytes.len())),10LL);
	jule::Str _10313_lit = _200582bce_cstr_lit(_10113_bytes);
	return ((((jule::Str("jule::Str(", 10) + _10313_lit) + jule::Str(", ", 2)) + _10213_len) + jule::Str(")", 1));
}



inline jule::Str _2005264be_boolean(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eed1e24b_Const>& _10723_c) {
	if (_1eed20d96_read_bool(_10723_c.ptr())) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _2005271d4_nil_lit(_2005213cb_ExprCoder* _self_) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _20055add8_ftoa_special_cases(_2005213cb_ExprCoder* _self_,jule::F64& _11834_x) {
	{
		
		if (_1eeb98614_is_nan(_11834_x)) {
			_case_begin_203aa7068:;
			{
				return jule::Str("NAN", 3);
			}
		}
		else if (_1eeba0440_is_inf(_11834_x,1LL)) {
			_case_begin_203aa71cd:;
			{
				return jule::Str("INFINITY", 8);
			}
		}
		else if (_1eeba0440_is_inf(_11834_x,-1LL)) {
			_case_begin_203aa7244:;
			{
				return jule::Str("-INFINITY", 9);
			}
		}
		else {
			_case_begin_203aa695d:;
			{
				return jule::Str();
			}
		}
		_match_end_203aa68b4:;
	}
}



inline jule::Str _20055c7ad_float32(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eed1e24b_Const>& _13123_c) {
	jule::F64 _13213_x = _1eed21ccb_as_f64(_13123_c.ptr());
	jule::Str _13513_f = _20055add8_ftoa_special_cases(&(*_self_), _13213_x);
	if ((!(_13513_f.empty()))) {
		return _13513_f;
	}
	{
		
		if ((_13213_x == 340282346638528860000000000000000000000.0)) {
			_case_begin_203aaa3e0:;
			{
				return jule::Str("jule::MAX_F32", 13);
			}
		}
		else if ((_13213_x == -340282346638528860000000000000000000000.0)) {
			_case_begin_203aa9da1:;
			{
				return jule::Str("jule::MIN_F32", 13);
			}
		}
		else {
			_case_begin_203aa9785:;
			{
				return (_2005830b9_ftoa(_13213_x,32LL) + jule::Str("f", 1));
			}
		}
		_match_end_203aa96ca:;
	}
}



inline jule::Str _2004c8d56_float64(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eed1e24b_Const>& _15023_c) {
	jule::F64 _15113_x = _1eed21ccb_as_f64(_15023_c.ptr());
	jule::Str _15413_f = _20055add8_ftoa_special_cases(&(*_self_), _15113_x);
	if ((!(_15413_f.empty()))) {
		return _15413_f;
	}
	{
		
		if ((_15113_x == jule::MAX_F64)) {
			_case_begin_203aad217:;
			{
				return jule::Str("jule::MAX_F64", 13);
			}
		}
		else if ((_15113_x == jule::MIN_F64)) {
			_case_begin_203aaceb4:;
			{
				return jule::Str("jule::MIN_F64", 13);
			}
		}
		else {
			_case_begin_203aac6de:;
			{
				return _2005830b9_ftoa(_15113_x,64LL);
			}
		}
		_match_end_203aac634:;
	}
}



inline jule::Str _200528dea_constant(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eed1e24b_Const> _17027_c,jule::Bool _17038_fx32) {
	{
		
		if (_1eed23c23_is_str(_17027_c.ptr())) {
			_case_begin_203aaec85:;
			{
				return _20052218a_string(&(*_self_), _17027_c);
			}
		}
		else if (_1eed23948_is_bool(_17027_c.ptr())) {
			_case_begin_203aaeceb:;
			{
				return _2005264be_boolean(&(*_self_), _17027_c);
			}
		}
		else if (_1eed23eed_is_f64(_17027_c.ptr())) {
			_case_begin_203aaed73:;
			{
				{
					
					if (_17038_fx32) {
						_case_begin_203ab23e7:;
						{
							return _20055c7ad_float32(&(*_self_), _17027_c);
						}
					}
					else {
						_case_begin_203ab178c:;
						{
							return _2004c8d56_float64(&(*_self_), _17027_c);
						}
					}
					_match_end_203ab16c1:;
				}
			}
		}
		else if (_1eed23393_is_i64(_17027_c.ptr())) {
			_case_begin_203aae889:;
			{
				return _2005833c7_itoa(static_cast<jule::I64>(_1eed207e1_read_i64(_17027_c.ptr())));
			}
		}
		else if (_1eed2366d_is_u64(_17027_c.ptr())) {
			_case_begin_203aae900:;
			{
				return _20058376d_utoa(static_cast<jule::U64>(_1eed20abb_read_u64(_17027_c.ptr())));
			}
		}
		else if (_1eed242c8_is_nil(_17027_c.ptr())) {
			_case_begin_203aae966:;
			{
				return _2005271d4_nil_lit(&(*_self_));
			}
		}
		else {
			_case_begin_203aae823:;
			{
				return jule::Str("<unimplemented_constant_expression>", 35);
			}
		}
		_match_end_203aae78a:;
	}
}



inline jule::Str _200551395_div_by_zero_binary(_2005213cb_ExprCoder* _self_,_1e02c1d07_Token& _19438_op,jule::Ptr<_1ee247620_OperandExprModel>& _19454_l,jule::Ptr<_1ee247620_OperandExprModel>& _19481_r) {
	jule::Str _19517_op_func = jule::Str();
	{
		auto &_match_expr{ _19438_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("/=", 2)) {
			_case_begin_203ab51b9:;
			{
				_19517_op_func=jule::Str("div", 3);
			}
		}
		else if (_match_expr == jule::Str("%", 1) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_203ab5692:;
			{
				_19517_op_func=jule::Str("mod", 3);
			}
		}
		_match_end_203ab55c6:;
	}
	jule::Str _20517_obj = jule::Str("jule::", 6);
	_20517_obj+=_19517_op_func;
	_20517_obj+=jule::Str("(", 1);
	if ((!(_22237d18e_PRODUCTION))) {
		_20517_obj+=jule::Str("\"", 1);
		_20517_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _19438_op);
		_20517_obj+=jule::Str("\",", 2);
	}
	_20517_obj+=_2005812d7_expr(&(*_self_), _19454_l.get()._field_model);
	_20517_obj+=jule::Str(",", 1);
	_20517_obj+=_2005812d7_expr(&(*_self_), _19481_r.get()._field_model);
	_20517_obj+=jule::Str(")", 1);
	return _20517_obj;
}



inline jule::Str _20046a776_unsafe_binary(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee247bb4_BinopExprModel> _22036_m) {
	jule::Str _22117_obj = jule::Str("(", 1);
	_22117_obj+=_200580e30_model(&(*_self_), _22036_m.get()._field_left.get()._field_model);
	_22117_obj+=jule::Str(" ", 1);
	_22117_obj+=_22036_m.get()._field_op._field_kind;
	_22117_obj+=jule::Str(" ", 1);
	_22117_obj+=_200580e30_model(&(*_self_), _22036_m.get()._field_right.get()._field_model);
	_22117_obj+=jule::Str(")", 1);
	return _22117_obj;
}



inline jule::Str _20055e183_binary(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee247bb4_BinopExprModel> _23129_m) {
	{
		auto &_match_expr{ _23129_m.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_203abc358:;
			{
				if ((_1eee7a6c6_strct(_23129_m.get()._field_left.get()._field_kind.ptr()) == nullptr)) {
					return _200551395_div_by_zero_binary(&(*_self_), _23129_m.get()._field_op,_23129_m.get()._field_left,_23129_m.get()._field_right);
				}
			}
		}
		_match_end_203abc259:;
	}
	return _20046a776_unsafe_binary(&(*_self_), _23129_m);
}



inline jule::Str _200510ac4_var(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eedeb24b_Var> _24222_m) {
	if (_24222_m.get()._field_cpp_linked) {
		jule::Ptr<_1e02812b1_Directive> _24417_d = _2005e8e10_find_directive(_24222_m.get()._field_directives,jule::Str("namespace", 9));
		if ((_24417_d != nullptr)) {
			jule::Str _24625_obj = _200581e0e_concat_all_parts(_24417_d.get()._field_args);
			_24625_obj+=jule::Str("::", 2);
			_24625_obj+=static__200588ed2_var(_24222_m);
			return _24625_obj;
		}
	}
	return static__200588ed2_var(_24222_m);
}



inline jule::Str _200510c39_structure(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee242032_Struct> _25524_m) {
	return static__2005ed189_structure(_25524_m);
}



inline jule::Str _200551021_structure_ins(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24550d_StructIns> _25932_m) {
	return static__2005ed497_structure_ins(_25932_m);
}



inline jule::Str _200551186_unary(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee248115_UnaryExprModel> _26328_m) {
	{
		auto &_match_expr{ _26328_m.get()._field_op._field_kind };
		
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_203ac3ace:;
			{
				jule::Str _26621_obj = jule::Str("(~(", 3);
				_26621_obj+=_2005812d7_expr(&(*_self_), _26328_m.get()._field_expr.get()._field_model);
				_26621_obj+=jule::Str("))", 2);
				return _26621_obj;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_203ac3b45:;
			{
				if (_22237d18e_PRODUCTION || (_1eee794b6_sptr(_26328_m.get()._field_expr.get()._field_kind.ptr()) == nullptr)) {
					goto _match_end_203ac39d0;
				}
				jule::Str _27421_obj = _2005812d7_expr(&(*_self_), _26328_m.get()._field_expr.get()._field_model);
				_27421_obj+=jule::Str(".get(\"", 6);
				_27421_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _26328_m.get()._field_op);
				_27421_obj+=jule::Str("\")", 2);
				return _27421_obj;
			}
		}
		_match_end_203ac39d0:;
	}
	jule::Str _28117_obj = jule::Str("(", 1);
	_28117_obj+=_26328_m.get()._field_op._field_kind;
	_28117_obj+=jule::Str("(", 1);
	_28117_obj+=_2005812d7_expr(&(*_self_), _26328_m.get()._field_expr.get()._field_model);
	_28117_obj+=jule::Str("))", 2);
	return _28117_obj;
}



inline jule::Str _2004b7d89_cpp_structure_lit(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee248a0b_StructLitExprModel> _28940_m) {
	jule::Str _29017_obj = jule::Str("(", 1) + static__2005ed497_structure_ins(_28940_m.get()._field_strct);
	_29017_obj+=jule::Str("){", 2);
	if ((_28940_m.get()._field_args.len() > 0LL)) {
		_julec_label_iter:;
		{
			auto &expr = _28940_m.get()._field_strct.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203aca047:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203aca179_f = *it;
				{
					if (_28940_m.get()._field_strct.get()._field_decl.get()._field_cpp_linked) {
						{
							auto &expr = _28940_m.get()._field_args;
							auto it = expr.begin();
							_iter_begin_203acac29:;
							if (it != expr.end()) {
								jule::Ptr<_1ee2485aa_StructArgExprModel> _203acace5_arg = *it;
								{
									if (_203acace5_arg.get()._field_field == _203aca179_f) {
										_29017_obj+=jule::Str(".", 1);
										_29017_obj+=static__200588bc4_field(_203aca179_f.get()._field_decl);
										_29017_obj+=jule::Str("=", 1);
										_29017_obj+=_2005812d7_expr(&(*_self_), _203acace5_arg.get()._field_expr);
										_29017_obj+=jule::Str(",", 1);
										goto _iter_next_203aca047;
									}
								}
								_iter_next_203acac29:;
								++it;
								goto _iter_begin_203acac29;
							}
							_iter_end_203acac29:;
						}
						goto _iter_next_203aca047;
					}
					_29017_obj+=static__200588bc4_field(_203aca179_f.get()._field_decl);
					_29017_obj+=jule::Str(": ", 2);
					{
						auto &expr = _28940_m.get()._field_args;
						auto it = expr.begin();
						_iter_begin_203acd545:;
						if (it != expr.end()) {
							jule::Ptr<_1ee2485aa_StructArgExprModel> _203acd622_arg = *it;
							{
								if (_203acd622_arg.get()._field_field == _203aca179_f) {
									_29017_obj+=_2005812d7_expr(&(*_self_), _203acd622_arg.get()._field_expr);
									_29017_obj+=jule::Str(",", 1);
									goto _iter_next_203aca047;
								}
							}
							_iter_next_203acd545:;
							++it;
							goto _iter_begin_203acd545;
						}
						_iter_end_203acd545:;
					}
					_29017_obj+=_200581a46_init_expr(&(*_self_), _203aca179_f.get()._field_kind);
					_29017_obj+=jule::Str(",", 1);
				}
				_iter_next_203aca047:;
				++it;
				goto _iter_begin_203aca047;
			}
			_iter_end_203aca047:;
		}
		(_29017_obj).mut_slice(0LL,_29017_obj.len() - 1LL);
	}
	_29017_obj+=jule::Str("}", 1);
	return _29017_obj;
}



inline jule::Str _2004b7eee_structure_lit(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee248a0b_StructLitExprModel> _32636_m) {
	if (_32636_m.get()._field_strct.get()._field_decl.get()._field_cpp_linked) {
		return _2004b7d89_cpp_structure_lit(&(*_self_), _32636_m);
	}
	jule::Str _33117_obj = static__2005888b6_structure_ins(_32636_m.get()._field_strct);
	_33117_obj+=jule::Str("(", 1);
	if ((_32636_m.get()._field_args.len() > 0LL)) {
		_julec_label_iter:;
		{
			auto &expr = _32636_m.get()._field_strct.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203ad343a:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203ad356c_f = *it;
				{
					{
						auto &expr = _32636_m.get()._field_args;
						auto it = expr.begin();
						_iter_begin_203ad3c10:;
						if (it != expr.end()) {
							jule::Ptr<_1ee2485aa_StructArgExprModel> _203ad3ccb_arg = *it;
							{
								if (_203ad3ccb_arg.get()._field_field == _203ad356c_f) {
									_33117_obj+=_2005812d7_expr(&(*_self_), _203ad3ccb_arg.get()._field_expr);
									_33117_obj+=jule::Str(",", 1);
									goto _iter_next_203ad343a;
								}
							}
							_iter_next_203ad3c10:;
							++it;
							goto _iter_begin_203ad3c10;
						}
						_iter_end_203ad3c10:;
					}
					_33117_obj+=_200581a46_init_expr(&(*_self_), _203ad356c_f.get()._field_kind);
					_33117_obj+=jule::Str(",", 1);
				}
				_iter_next_203ad343a:;
				++it;
				goto _iter_begin_203ad343a;
			}
			_iter_end_203ad343a:;
		}
		(_33117_obj).mut_slice(0LL,_33117_obj.len() - 1LL);
	}
	_33117_obj+=jule::Str(")", 1);
	return _33117_obj;
}



inline jule::Str _200468cc4_alloc_structure(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee248de6_AllocStructLitExprModel> _35238_m) {
	jule::Str _35317_obj = jule::Str("jule::new_ptr<", 14);
	_35317_obj+=static__2005888b6_structure_ins(_35238_m.get()._field_lit.get()._field_strct);
	_35317_obj+=jule::Str(">(", 2);
	_35317_obj+=_2004b7eee_structure_lit(&(*_self_), _35238_m.get()._field_lit);
	_35317_obj+=jule::Str(")", 1);
	return _35317_obj;
}



inline jule::Str _200468e39_casting(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee249523_CastingExprModel> _36130_m) {
	jule::Str _36217_obj = jule::Str();
	{
		
		if ((_1eee791db_prim(_36130_m.get()._field_kind.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim(_36130_m.get()._field_kind.ptr()).ptr())) {
			_case_begin_203ada882:;
			{
				_36217_obj+=static__2005eee16_kind(_36130_m.get()._field_kind);
				_36217_obj+=jule::Str("(", 1);
				_36217_obj+=_200580e30_model(&(*_self_), _36130_m.get()._field_expr);
				_36217_obj+=jule::Str(")", 1);
			}
		}
		else if ((_1eee79791_ptr(_36130_m.get()._field_expr_kind.ptr()) != nullptr) || (_1eee79791_ptr(_36130_m.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203ad9551:;
			{
				_36217_obj+=jule::Str("((", 2);
				_36217_obj+=static__2005eee16_kind(_36130_m.get()._field_kind);
				_36217_obj+=jule::Str(")(", 2);
				_36217_obj+=_2005812d7_expr(&(*_self_), _36130_m.get()._field_expr);
				_36217_obj+=jule::Str("))", 2);
			}
		}
		else if ((_1eee7a9a1_trt(_36130_m.get()._field_expr_kind.ptr()) != nullptr) || (_1eee791db_prim(_36130_m.get()._field_expr_kind.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim(_36130_m.get()._field_expr_kind.ptr()).ptr())) {
			_case_begin_203adaa4c:;
			{
				_36217_obj+=_200580e30_model(&(*_self_), _36130_m.get()._field_expr);
				_36217_obj+=jule::Str(".", 1);
				if (_22237d18e_PRODUCTION) {
					_36217_obj+=jule::Str("operator ", 9);
					_36217_obj+=static__2005eee16_kind(_36130_m.get()._field_kind);
					_36217_obj+=jule::Str("()", 2);
				} else {
					if ((_1eee7a9a1_trt(_36130_m.get()._field_expr_kind.ptr()) != nullptr) && (_1eee794b6_sptr(_36130_m.get()._field_kind.ptr()) != nullptr)) {
						_36217_obj+=jule::Str("cast_ptr<", 9);
						_36217_obj+=static__2005eee16_kind(_1eee794b6_sptr(_36130_m.get()._field_kind.ptr()).get()._field_elem);
					} else {
						_36217_obj+=jule::Str("cast<", 5);
						_36217_obj+=static__2005eee16_kind(_36130_m.get()._field_kind);
					}
					_36217_obj+=jule::Str(">(\"", 3);
					_36217_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _36130_m.get()._field_token);
					_36217_obj+=jule::Str("\")", 2);
				}
			}
		}
		else if ((_1eee7a9a1_trt(_36130_m.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203adaab3:;
			{
				_36217_obj+=static__2005eee16_kind(_36130_m.get()._field_kind);
				_36217_obj+=jule::Str("(", 1);
				_36217_obj+=_2005812d7_expr(&(*_self_), _36130_m.get()._field_expr);
				_36217_obj+=jule::Str(", ", 2);
				_36217_obj+=_1eec84964_itoa(static_cast<jule::I32>(_2005be435_find_type_offset((*_self_)._field_oc.ptr(), _1eee7a9a1_trt(_36130_m.get()._field_kind.ptr()),_36130_m.get()._field_expr_kind)));
				_36217_obj+=jule::Str(")", 1);
			}
		}
		else {
			_case_begin_203ad91cc:;
			{
				_36217_obj+=jule::Str("static_cast<", 12);
				_36217_obj+=static__2005eee16_kind(_36130_m.get()._field_kind);
				_36217_obj+=jule::Str(">(", 2);
				_36217_obj+=_2005812d7_expr(&(*_self_), _36130_m.get()._field_expr);
				_36217_obj+=jule::Str(")", 1);
			}
		}
		_match_end_203ad9155:;
	}
	return _36217_obj;
}



inline jule::Str _20046aa51_args(_2005213cb_ExprCoder* _self_,jule::Slice<jule::Any> _41327_args) {
	if ((_41327_args.len() == 0LL)) {
		return jule::Str();
	}
	jule::Str _41717_obj = jule::Str();
	{
		auto &expr = _41327_args;
		auto it = expr.begin();
		_iter_begin_203ae8b26:;
		if (it != expr.end()) {
			jule::Any _203ae8c14_a = *it;
			{
				_41717_obj+=_2005812d7_expr(&(*_self_), _203ae8c14_a);
				_41717_obj+=jule::Str(",", 1);
			}
			_iter_next_203ae8b26:;
			++it;
			goto _iter_begin_203ae8b26;
		}
		_iter_end_203ae8b26:;
	}
	(_41717_obj).mut_slice(0LL,_41717_obj.len() - 1LL);
	return _41717_obj;
}



inline jule::Str _20046ad4d_model_for_call(_2005213cb_ExprCoder* _self_,jule::Any _42637_expr) {
	{
		auto &_match_expr{ _42637_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1ee25b4ad_FnIns>>()) {
			_case_begin_203aea6e9:;
			{
				return _20057ab83_func_ins(&(*_self_), _42637_expr.operator jule::Ptr<_1ee25b4ad_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
			_case_begin_203aea760:;
			{
				jule::Ptr<_1ee24d060_StructSubIdentExprModel> _43121_ssie = _42637_expr.operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>();
				if ((_43121_ssie.get()._field_method != nullptr)) {
					return _20057ab83_func_ins(&(*_self_), _43121_ssie.get()._field_method);
				}
			}
		}
		_match_end_203aea61c:;
	}
	return _200580e30_model(&(*_self_), _42637_expr);
}



inline void _2004c7b35_push_call_inf(_2005213cb_ExprCoder* _self_,jule::Str& _43937_obj,jule::Ptr<_1ee24a007_FnCallExprModel>& _43948_m) {
	if (_22237d18e_PRODUCTION || ((!(_43948_m.get()._field_func.get()._field_anon)) && (!(_200583dcd_is_builtin_call_has_debuginf(_43948_m))))) {
		_43937_obj+=jule::Str("(", 1);
		return;
	}
	if (_43948_m.get()._field_func.get()._field_anon) {
		{
			auto &_match_expr{ _43948_m.get()._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
				_case_begin_203b0015a:;
				{
					if (_43948_m.get()._field_expr.operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>().get()._field_field.get()._field_decl.get()._field_owner.get()._field_cpp_linked) {
						_43937_obj+=jule::Str("(", 1);
						return;
					}
					goto _case_begin_203aeeb3d;
				}
			}
			else {
				_case_begin_203aeeb3d:;
				{
					_43937_obj+=jule::Str(".call", 5);
				}
			}
			_match_end_203aeead8:;
		}
	}
	_43937_obj+=jule::Str("(\"", 2);
	_43937_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _43948_m.get()._field_token);
	_43937_obj+=jule::Str("\"", 1);
	if ((_43948_m.get()._field_args.len() != 0LL)) {
		_43937_obj+=jule::Str(",", 1);
	}
}



inline jule::Str _2004c7edc_pure_func_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24a007_FnCallExprModel>& _46438_m) {
	jule::Str _46517_obj = _20046ad4d_model_for_call(&(*_self_), _46438_m.get()._field_expr);
	if ((!(_1ee25c13a_is_builtin(_46438_m.get()._field_func.ptr())))) {
		if (_46438_m.get()._field_func.get()._field_decl.get()._field_cpp_linked && (_46438_m.get()._field_func.get()._field_generics.len() > 0LL)) {
			if ((!(_2005e9350_has_directive(_46438_m.get()._field_func.get()._field_decl.get()._field_directives,jule::Str("cdef", 4))))) {
				_46517_obj+=jule::Str("<", 1);
				{
					auto &expr = _46438_m.get()._field_func.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_203b044e4:;
					if (it != expr.end()) {
						jule::Ptr<_1eee76b45_TypeKind> _203b04758_g = *it;
						{
							_46517_obj+=static__2005eee16_kind(_203b04758_g);
							_46517_obj+=jule::Str(",", 1);
						}
						_iter_next_203b044e4:;
						++it;
						goto _iter_begin_203b044e4;
					}
					_iter_end_203b044e4:;
				}
				(_46517_obj).mut_slice(0LL,_46517_obj.len() - 1LL);
				_46517_obj+=jule::Str(">", 1);
			}
		}
	}
	_2004c7b35_push_call_inf(&(*_self_), _46517_obj,_46438_m);
	jule::Bool _48017_locinfo = false;
	jule::Str _48117_wrap_receiver = jule::Str();
	if (((!(_1ee25c13a_is_builtin(_46438_m.get()._field_func.ptr()))) && (_46438_m.get()._field_func.get()._field_decl.get()._field_params.len() > 0LL)) && _1ee256398_is_self(_46438_m.get()._field_func.get()._field_decl.get()._field_params[0LL].ptr())) {
		{
			auto &_match_expr{ _46438_m.get()._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
				_case_begin_203b07b57:;
				{
					jule::Ptr<_1ee24d060_StructSubIdentExprModel> _48525_ssie = _46438_m.get()._field_expr.operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>();
					{
						
						if (_1ee256673_is_ref(_46438_m.get()._field_func.get()._field_decl.get()._field_params[0LL].ptr())) {
							_case_begin_203b09230:;
							{
								_46517_obj+=_200580e30_model(&(*_self_), jule::Any(_48525_ssie.get()._field_expr));
							}
						}
						else if ((_1eee794b6_sptr(_48525_ssie.get()._field_expr_kind.ptr()) != nullptr)) {
							_case_begin_203b0b6a5:;
							{
								_46517_obj+=_200580e30_model(&(*_self_), jule::Any(_48525_ssie.get()._field_expr));
								_46517_obj+=jule::Str(".ptr(", 5);
								if ((!(_22237d18e_PRODUCTION))) {
									_46517_obj+=jule::Str("\"", 1);
									_46517_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _46438_m.get()._field_token);
									_46517_obj+=jule::Str("\"", 1);
								}
								_46517_obj+=jule::Str(")", 1);
							}
						}
						else {
							_case_begin_203b089b0:;
							{
								if ((_1eee7a6c6_strct(_48525_ssie.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
									_46517_obj+=jule::Str("&", 1);
									if ((!(_48525_ssie.get()._field_expr.get()._field_lvalue))) {
										_48117_wrap_receiver=_200580e30_model(&(*_self_), jule::Any(_48525_ssie.get()._field_expr));
									}
								}
								if ((!(_48117_wrap_receiver.empty()))) {
									_46517_obj+=jule::Str("_wrap_copy", 10);
								} else {
									_46517_obj+=_200580e30_model(&(*_self_), jule::Any(_48525_ssie.get()._field_expr));
								}
							}
						}
						_match_end_203b0895a:;
					}
					if ((_46438_m.get()._field_args.len() > 0LL)) {
						_46517_obj+=jule::Str(", ", 2);
					}
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1ee24c658_TraitSubIdentExprModel>>()) {
				_case_begin_203b07bbd:;
				{
					_46517_obj+=_200580e30_model(&(*_self_), _46438_m.get()._field_expr.operator jule::Ptr<_1ee24c658_TraitSubIdentExprModel>().get()._field_expr);
					if ((!(_22237d18e_PRODUCTION))) {
						_48017_locinfo=true;
					}
					if ((_46438_m.get()._field_args.len() > 0LL)) {
						_46517_obj+=jule::Str(", ", 2);
					}
				}
			}
			_match_end_203b07ae1:;
		}
	}
	_46517_obj+=_20046aa51_args(&(*_self_), _46438_m.get()._field_args);
	if (_48017_locinfo) {
		_46517_obj+=jule::Str(", \"", 3);
		_46517_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _46438_m.get()._field_token);
		_46517_obj+=jule::Str("\"", 1);
	}
	_46517_obj+=jule::Str(")", 1);
	if ((!(_48117_wrap_receiver.empty()))) {
		(_46517_obj).buffer.insert(0, (((jule::Str("({ auto _wrap_copy = ", 21) + _48117_wrap_receiver) + jule::Str("; ", 2))));
		_46517_obj+=jule::Str("; })", 4);
	}
	if (_46438_m.get()._field_is_co) {
		(_46517_obj).buffer.insert(0, (jule::Str("__JULE_CO(", 10)));
		_46517_obj+=jule::Str(")", 1);
	}
	return _46517_obj;
}



inline jule::Str _20057792c_func_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24a007_FnCallExprModel> _54632_m) {
	if ((_1ee25c13a_is_builtin(_54632_m.get()._field_func.ptr()) || (!(_54632_m.get()._field_func.get()._field_decl.get()._field_exceptional))) || ((_54632_m.get()._field_except != nullptr) && (_54632_m.get()._field_except.get()._field_stmts.len() == 0LL))) {
		return _2004c7edc_pure_func_call(&(*_self_), _54632_m);
	}
	jule::Str _55417_obj = jule::Str("({\n", 3);
	_2005922d7_add_indent((*_self_)._field_oc.ptr());
	_55417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_55417_obj+=jule::Str("auto except = ", 14);
	_55417_obj+=_2004c7edc_pure_func_call(&(*_self_), _54632_m);
	_55417_obj+=jule::Str(";\n", 2);
	_55417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	if ((_54632_m.get()._field_except != nullptr)) {
		if ((_54632_m.get()._field_func.get()._field_result == nullptr) || (!(_54632_m.get()._field_assigned))) {
			_55417_obj+=jule::Str("if (!except.ok()) ", 18);
			_55417_obj+=_20051977b_scope((*_self_)._field_oc.get()._field_sc.ptr(), _54632_m.get()._field_except);
			_55417_obj+=jule::Str("\n", 1);
		} else {
			jule::Bool _56721_forwarded = _200583a7b_is_forwarded(_54632_m.get()._field_except);
			_55417_obj+=jule::Str("(except.ok()) ? (except.result) : (", 35);
			if (_56721_forwarded) {
				_55417_obj+=jule::Str("{", 1);
			}
			_55417_obj+=_20051977b_scope((*_self_)._field_oc.get()._field_sc.ptr(), _54632_m.get()._field_except);
			if (_56721_forwarded) {
				_55417_obj+=jule::Str(" ", 1);
				_55417_obj+=_200581a46_init_expr(&(*_self_), _54632_m.get()._field_func.get()._field_result);
				_55417_obj+=jule::Str(";}", 2);
			}
			_55417_obj+=jule::Str(");\n", 3);
		}
		_2005953ea_done_indent((*_self_)._field_oc.ptr());
	} else {
		_55417_obj+=jule::Str("if (!except.ok()) jule::panic(jule::Str(\"", 41);
		_55417_obj+=jule::Str("unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 98);
		_55417_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _54632_m.get()._field_token);
		_55417_obj+=jule::Str("\"));\n", 5);
		if ((!(_1ee257e7c_is_void(_54632_m.get()._field_func.get()._field_decl.ptr())))) {
			_55417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
			_55417_obj+=jule::Str("(except.result);\n", 17);
		}
		_2005953ea_done_indent((*_self_)._field_oc.ptr());
	}
	_55417_obj+=_200594c57_indent((*_self_)._field_oc.ptr());
	_55417_obj+=jule::Str("})", 2);
	return _55417_obj;
}



inline jule::Str _200577c29_slice(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24a458_SliceExprModel> _59828_m) {
	if ((_59828_m.get()._field_elems.len() == 0LL)) {
		return (static__2005ec144_as_slice(_59828_m.get()._field_elem_kind) + jule::Str("()", 2));
	}
	jule::Str _60217_obj = static__2005ec144_as_slice(_59828_m.get()._field_elem_kind);
	_60217_obj+=jule::Str("({", 2);
	_60217_obj+=_20046aa51_args(&(*_self_), _59828_m.get()._field_elems);
	_60217_obj+=jule::Str("})", 2);
	return _60217_obj;
}



inline jule::Str _2005780d1_indexing(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24a9a8_IndexingExprModel> _60931_m) {
	jule::Str _61017_obj = _200580e30_model(&(*_self_), _60931_m.get()._field_expr.get()._field_model);
	{
		
		if (_22237d18e_PRODUCTION || (_1eee79791_ptr(_60931_m.get()._field_expr.get()._field_kind.ptr()) != nullptr) || (_1eee7ac7b_map(_60931_m.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203b262e6:;
			{
				_61017_obj+=jule::Str("[", 1);
				_61017_obj+=_2005812d7_expr(&(*_self_), _60931_m.get()._field_index.get()._field_model);
				_61017_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_203b2526d:;
			{
				_61017_obj+=jule::Str(".at(\"", 5);
				_61017_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _60931_m.get()._field_token);
				_61017_obj+=jule::Str("\",", 2);
				_61017_obj+=_2005812d7_expr(&(*_self_), _60931_m.get()._field_index.get()._field_model);
				_61017_obj+=jule::Str(")", 1);
			}
		}
		_match_end_203b25218:;
	}
	return _61017_obj;
}



inline jule::Str _200578488_unsafe_indexing(_2005213cb_ExprCoder* _self_,jule::Ptr<_200563ad3_UnsafeIndexingExprModel> _62938_m) {
	jule::Str _63017_obj = _200580e30_model(&(*_self_), _62938_m.get()._field_node.get()._field_expr.get()._field_model);
	{
		
		if (_22237d18e_PRODUCTION || (_1eee79791_ptr(_62938_m.get()._field_node.get()._field_expr.get()._field_kind.ptr()) != nullptr) || (_1eee7ac7b_map(_62938_m.get()._field_node.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203b30bc4:;
			{
				_63017_obj+=jule::Str("[", 1);
				_63017_obj+=_2005812d7_expr(&(*_self_), _62938_m.get()._field_node.get()._field_index.get()._field_model);
				_63017_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_203b2eaa2:;
			{
				_63017_obj+=jule::Str(".__at(", 6);
				_63017_obj+=_2005812d7_expr(&(*_self_), _62938_m.get()._field_node.get()._field_index.get()._field_model);
				_63017_obj+=jule::Str(")", 1);
			}
		}
		_match_end_203b2ea3b:;
	}
	return _63017_obj;
}



inline jule::Str _200578840_anon_func(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24ae09_AnonFnExprModel> _64732_m) {
	jule::Str _64817_obj = static__2005eeb08_func(_64732_m.get()._field_func);
	_64817_obj+=jule::Str("([=]", 4);
	_64817_obj+=_2005e0137_params_ins((*_self_)._field_oc.ptr(), _64732_m.get()._field_func.get()._field_params);
	_64817_obj+=jule::Str(" mutable -> ", 12);
	_64817_obj+=static__2005ee4dc_func_ins_result(_64732_m.get()._field_func);
	_64817_obj+=jule::Str(" ", 1);
	_64817_obj+=_20051a53a_func_scope((*_self_)._field_oc.get()._field_sc.ptr(), _64732_m.get()._field_func);
	_64817_obj+=jule::Str(")", 1);
	return _64817_obj;
}



inline jule::Str _200578be7_map(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24b8aa_MapExprModel> _65926_m) {
	jule::Str _66017_obj = jule::Str("jule::Map<", 10);
	_66017_obj+=static__2005eee16_kind(_65926_m.get()._field_key_kind);
	_66017_obj+=jule::Str(",", 1);
	_66017_obj+=static__2005eee16_kind(_65926_m.get()._field_val_kind);
	_66017_obj+=jule::Str(">({", 3);
	if ((_65926_m.get()._field_entries.len() > 0LL)) {
		{
			auto &expr = _65926_m.get()._field_entries;
			auto it = expr.begin();
			_iter_begin_203b38bee:;
			if (it != expr.end()) {
				jule::Ptr<_1ee24b35a_KeyValPairExprModel> _203b38dec_pair = *it;
				{
					jule::Str _66725_pair_obj = jule::Str("{", 1);
					_66725_pair_obj+=_2005812d7_expr(&(*_self_), _203b38dec_pair.get()._field_key);
					_66725_pair_obj+=jule::Str(",", 1);
					_66725_pair_obj+=_2005812d7_expr(&(*_self_), _203b38dec_pair.get()._field_val);
					_66725_pair_obj+=jule::Str("}", 1);
					_66017_obj+=_66725_pair_obj;
					_66017_obj+=jule::Str(",", 1);
				}
				_iter_next_203b38bee:;
				++it;
				goto _iter_begin_203b38bee;
			}
			_iter_end_203b38bee:;
		}
		(_66017_obj).mut_slice(0LL,_66017_obj.len() - 1LL);
	}
	_66017_obj+=jule::Str("})", 2);
	return _66017_obj;
}



inline jule::Str _20057909e_slicing(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24c009_SlicingExprModel> _68130_m) {
	jule::Str _68217_obj = _200580e30_model(&(*_self_), _68130_m.get()._field_expr);
	_68217_obj+=jule::Str(".slice(", 7);
	if ((!(_22237d18e_PRODUCTION))) {
		_68217_obj+=jule::Str("\"", 1);
		_68217_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _68130_m.get()._field_token);
		_68217_obj+=jule::Str("\",", 2);
	}
	_68217_obj+=_2005812d7_expr(&(*_self_), _68130_m.get()._field_left);
	if (_68130_m.get()._field_right != jule::Any(jule::Any(nullptr))) {
		_68217_obj+=jule::Str(",", 1);
		_68217_obj+=_2005812d7_expr(&(*_self_), _68130_m.get()._field_right);
	}
	_68217_obj+=jule::Str(")", 1);
	return _68217_obj;
}



inline jule::Str _200579456_trait_sub(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24c658_TraitSubIdentExprModel> _69832_m) {
	jule::Str _69917_obj = static__200587e8c_trait_decl(_69832_m.get()._field_trt);
	_69917_obj+=jule::Str("_mptr_data", 10);
	_69917_obj+=jule::Str("[(", 2);
	_69917_obj+=_200580e30_model(&(*_self_), _69832_m.get()._field_expr);
	_69917_obj+=jule::Str(").type_offset].", 15);
	_69917_obj+=static__200587871_func(_69832_m.get()._field_method);
	return _69917_obj;
}



inline jule::Str _20057980d_structure_sub(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24d060_StructSubIdentExprModel> _70836_m) {
	jule::Str _70917_obj = _200580e30_model(&(*_self_), jule::Any(_70836_m.get()._field_expr));
	if ((_70836_m.get()._field_field != nullptr)) {
		if ((_1eee79791_ptr(_70836_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_70917_obj+=jule::Str("->", 2);
		} else if ((_1eee794b6_sptr(_70836_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_70917_obj+=jule::Str(".get(", 5);
			if ((!(_22237d18e_PRODUCTION))) {
				_70917_obj+=jule::Str("\"", 1);
				_70917_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _70836_m.get()._field_token);
				_70917_obj+=jule::Str("\"", 1);
			}
			_70917_obj+=jule::Str(").", 2);
		} else {
			_70917_obj+=jule::Str(".", 1);
		}
		_70917_obj+=static__200588bc4_field(_70836_m.get()._field_field.get()._field_decl);
	}
	return _70917_obj;
}



inline jule::Str _200579bb5_common_ident(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24dda7_CommonIdentExprModel> _72927_m) {
	return _72927_m.get()._field_ident;
}



inline jule::Str _20057a06c_common_sub(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24e58e_CommonSubIdentExprModel> _73333_m) {
	jule::Str _73417_obj = _200580e30_model(&(*_self_), _73333_m.get()._field_expr);
	{
		
		if ((_1eee79791_ptr(_73333_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_case_begin_203b48a77:;
			{
				_73417_obj+=jule::Str("->", 2);
			}
		}
		else if ((_1eee794b6_sptr(_73333_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_case_begin_203b487be:;
			{
				_73417_obj+=jule::Str(".get(", 5);
				if ((!(_22237d18e_PRODUCTION))) {
					_73417_obj+=jule::Str("\n", 1);
					_73417_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _73333_m.get()._field_token);
					_73417_obj+=jule::Str("\n", 1);
				}
				_73417_obj+=jule::Str(").", 2);
			}
		}
		else {
			_case_begin_203b4844a:;
			{
				_73417_obj+=jule::Str(".", 1);
			}
		}
		_match_end_203b483e5:;
	}
	_73417_obj+=_73333_m.get()._field_ident;
	return _73417_obj;
}



inline jule::Str _20057a424_array(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24da55_ArrayExprModel> _75328_m) {
	jule::Str _75417_obj = static__2005ed7a5_array(_75328_m.get()._field_kind);
	if ((_75328_m.get()._field_elems.len() == 0LL)) {
		_75417_obj+=jule::Str("()", 2);
		return _75417_obj;
	}
	if ((_75328_m.get()._field_elems.len() == 2LL) && (_75328_m.get()._field_elems[1LL] == jule::Any(jule::Any(nullptr)))) {
		_75417_obj+=jule::Str("(", 1);
		_75417_obj+=_2005812d7_expr(&(*_self_), _75328_m.get()._field_elems[0LL]);
		_75417_obj+=jule::Str(")", 1);
		return _75417_obj;
	}
	_75417_obj+=jule::Str("({", 2);
	_75417_obj+=_20046aa51_args(&(*_self_), _75328_m.get()._field_elems);
	_75417_obj+=jule::Str("})", 2);
	return _75417_obj;
}



inline jule::Str _20057a7cb_func_ins_common(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee25b4ad_FnIns> _77634_m) {
	jule::Str _77717_obj = static__2005eeb08_func(_77634_m);
	_77717_obj+=jule::Str("(", 1);
	_77717_obj+=_20057ab83_func_ins(&(*_self_), _77634_m);
	_77717_obj+=jule::Str(")", 1);
	return _77717_obj;
}



inline jule::Str _20057ab83_func_ins(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee25b4ad_FnIns> _78527_m) {
	if ((_78527_m.get()._field_decl != nullptr) && _78527_m.get()._field_decl.get()._field_cpp_linked) {
		jule::Ptr<_1e02812b1_Directive> _78717_d = _2005e8e10_find_directive(_78527_m.get()._field_decl.get()._field_directives,jule::Str("namespace", 9));
		if ((_78717_d != nullptr)) {
			jule::Str _78925_obj = _200581e0e_concat_all_parts(_78717_d.get()._field_args);
			_78925_obj+=jule::Str("::", 2);
			_78925_obj+=static__200587b7e_func_ins(_78527_m);
			return _78925_obj;
		}
	}
	return static__200587b7e_func_ins(_78527_m);
}



inline jule::Str _20057b03a_tuple(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24e8be_TupleExprModel> _79828_m) {
	jule::Str _79917_obj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _79828_m.get()._field_datas;
		auto it = expr.begin();
		_iter_begin_203b558ec:;
		if (it != expr.end()) {
			jule::Ptr<_1eee43b89_Data> _203b559b8_d = *it;
			{
				_79917_obj+=_2005812d7_expr(&(*_self_), _203b559b8_d.get()._field_model);
				_79917_obj+=jule::Str(",", 1);
			}
			_iter_next_203b558ec:;
			++it;
			goto _iter_begin_203b558ec;
		}
		_iter_end_203b558ec:;
	}
	(_79917_obj).mut_slice(0LL,_79917_obj.len() - 1LL);
	_79917_obj+=jule::Str(")", 1);
	return _79917_obj;
}



inline jule::Str _20057b3e2_new_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee250c00_BuiltinNewCallExprModel> _80931_m) {
	jule::Str _81017_obj = jule::Str("jule::new_ptr<", 14);
	_81017_obj+=static__2005eee16_kind(_80931_m.get()._field_kind);
	_81017_obj+=jule::Str(">(", 2);
	if (_80931_m.get()._field_init != jule::Any(jule::Any(nullptr))) {
		_81017_obj+=_2005812d7_expr(&(*_self_), _80931_m.get()._field_init);
	}
	_81017_obj+=jule::Str(")", 1);
	return _81017_obj;
}



inline jule::Str _20057b799_out_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel> _82031_m) {
	if (_82031_m.get()._field_debug && _22237d18e_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _82417_obj = jule::Str("jule::out(", 10);
	_82417_obj+=_2005812d7_expr(&(*_self_), _82031_m.get()._field_expr);
	_82417_obj+=jule::Str(")", 1);
	return _82417_obj;
}



inline jule::Str _20057bb51_outln_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel> _83033_m) {
	if (_83033_m.get()._field_debug && _22237d18e_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _83417_obj = jule::Str("jule::outln(", 12);
	_83417_obj+=_2005812d7_expr(&(*_self_), _83033_m.get()._field_expr);
	_83417_obj+=jule::Str(")", 1);
	return _83417_obj;
}



inline jule::Str _20057c008_panic_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel> _84033_m) {
	jule::Str _84117_obj = jule::Str("jule::panic(", 12);
	_84117_obj+=_2005812d7_expr(&(*_self_), _84033_m.get()._field_expr);
	_84117_obj+=jule::Str(" + jule::Str(\"\\nlocation: ", 26);
	_84117_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _84033_m.get()._field_token);
	_84117_obj+=jule::Str("\"));", 4);
	return _84117_obj;
}



inline jule::Str _20057c3b0_assert_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel> _84934_m) {
	if (_22237d18e_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _85317_obj = jule::Str("if (!(", 6);
	_85317_obj+=_2005812d7_expr(&(*_self_), _84934_m.get()._field_expr);
	_85317_obj+=jule::Str(")) jule::panic(jule::Str(", 25);
	_85317_obj+=_200582bce_cstr_lit(static_cast<jule::Slice<jule::U8>>(_84934_m.get()._field_log));
	_85317_obj+=jule::Str(") + jule::Str(\"\\nlocation: ", 27);
	_85317_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _84934_m.get()._field_token);
	_85317_obj+=jule::Str("\"));", 4);
	return _85317_obj;
}



inline jule::Str _20057c767_error_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel> _86333_m) {
	jule::Str _86417_obj = jule::Str("return ", 7);
	if (_1ee257e7c_is_void(_86333_m.get()._field_func.get()._field_decl.ptr())) {
		_86417_obj+=jule::Str("jule::VoidExceptional(", 22);
	} else {
		_86417_obj+=jule::Str("jule::Exceptional<", 18);
		_86417_obj+=static__2005eee16_kind(_86333_m.get()._field_func.get()._field_result);
		_86417_obj+=jule::Str(">(", 2);
	}
	_86417_obj+=_2005812d7_expr(&(*_self_), _86333_m.get()._field_err);
	_86417_obj+=jule::Str(")", 1);
	return _86417_obj;
}



inline jule::Str _20057cb1e_make_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel> _87732_m) {
	jule::Str _87817_obj = jule::Str();
	if (_87732_m.get()._field_len != jule::Any(jule::Any(nullptr))) {
		_87817_obj+=_2005812d7_expr(&(*_self_), _87732_m.get()._field_len);
	} else {
		_87817_obj+=jule::Str("0", 1);
	}
	if (_87732_m.get()._field_cap != jule::Any(jule::Any(nullptr))) {
		_87817_obj+=jule::Str(",", 1) + _2005812d7_expr(&(*_self_), _87732_m.get()._field_cap);
	}
	if ((_1eee79a6b_enm(_1eee7a121_slc(_87732_m.get()._field_kind.ptr()).get()._field_elem.ptr()) != nullptr)) {
		_87817_obj+=jule::Str(",", 1);
		_87817_obj+=_200581a46_init_expr(&(*_self_), _1eee7a121_slc(_87732_m.get()._field_kind.ptr()).get()._field_elem);
		if (_87732_m.get()._field_cap != jule::Any(jule::Any(nullptr))) {
			(_87817_obj).buffer.insert(0, ((static__2005eee16_kind(_87732_m.get()._field_kind) + jule::Str("::alloc(", 8))));
		} else {
			(_87817_obj).buffer.insert(0, ((static__2005eee16_kind(_87732_m.get()._field_kind) + jule::Str("::alloc_def(", 12))));
		}
	} else {
		(_87817_obj).buffer.insert(0, ((static__2005eee16_kind(_87732_m.get()._field_kind) + jule::Str("::alloc(", 8))));
	}
	_87817_obj+=jule::Str(")", 1);
	return _87817_obj;
}



inline jule::Str _20057cec6_push_to_slice(_2005213cb_ExprCoder* _self_,jule::Ptr<_200563e46_PushToSliceExprModel> _90436_m) {
	jule::Str _90513_dest = _200580e30_model(&(*_self_), _90436_m.get()._field_dest);
	jule::Str _90617_obj = _90513_dest;
	_90617_obj+=jule::Str(" = jule::alloc_for_append(", 26);
	_90617_obj+=_90513_dest;
	_90617_obj+=jule::Str(",", 1);
	_90617_obj+=_1eec84964_itoa(static_cast<jule::I32>(_90436_m.get()._field_elems.get()._field_elems.len()));
	_90617_obj+=jule::Str(");", 2);
	{
		auto &expr = _90436_m.get()._field_elems.get()._field_elems;
		auto it = expr.begin();
		_iter_begin_203b6db79:;
		if (it != expr.end()) {
			jule::Any _203b6dc01_e = *it;
			{
				_90617_obj+=_90513_dest;
				_90617_obj+=jule::Str(".__push(", 8);
				_90617_obj+=_200580e30_model(&(*_self_), _203b6dc01_e);
				_90617_obj+=jule::Str(");", 2);
			}
			_iter_next_203b6db79:;
			++it;
			goto _iter_begin_203b6db79;
		}
		_iter_end_203b6db79:;
	}
	return _90617_obj;
}



inline jule::Str _20057d37d_append_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel> _92234_m) {
	jule::Str _92317_obj = jule::Str("jule::append(", 13);
	_92317_obj+=_200580e30_model(&(*_self_), _92234_m.get()._field_dest);
	_92317_obj+=jule::Str(",", 1);
	_92317_obj+=_200580e30_model(&(*_self_), _92234_m.get()._field_elements);
	_92317_obj+=jule::Str(")", 1);
	return _92317_obj;
}



inline jule::Str _20057d735_clone_call(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee250738_BuiltinCloneCallExprModel> _93133_m) {
	jule::Str _93217_obj = jule::Str("jule::clone(", 12);
	_93217_obj+=_200580e30_model(&(*_self_), _93133_m.get()._field_expr);
	_93217_obj+=jule::Str(")", 1);
	return _93217_obj;
}



inline jule::Str _20057dadc_sizeof(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee252b03_SizeofExprModel> _93829_m) {
	jule::Str _93917_obj = jule::Str("sizeof(", 7);
	_93917_obj+=_2005812d7_expr(&(*_self_), _93829_m.get()._field_expr);
	_93917_obj+=jule::Str(")", 1);
	return _93917_obj;
}



inline jule::Str _20057de94_alignof(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee2532a7_AlignofExprModel> _94530_m) {
	jule::Str _94617_obj = jule::Str("alignof(", 8);
	_94617_obj+=_2005812d7_expr(&(*_self_), _94530_m.get()._field_expr);
	_94617_obj+=jule::Str(")", 1);
	return _94617_obj;
}



inline jule::Str _20057e34b_rune_lit(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee253571_RuneExprModel> _95223_m) {
	if ((_95223_m.get()._field_code <= 127LL)) {
		jule::Str _95421_b = _20058256e_sbtoa(static_cast<jule::U8>(static_cast<jule::U8>(_95223_m.get()._field_code)));
		if ((_95421_b == jule::Str("'", 1))) {
			_95421_b=jule::Str("\\'", 2);
		}
		return ((jule::Str("'", 1) + _95421_b) + jule::Str("'", 1));
	}
	return _2005833c7_itoa(static_cast<jule::I64>(static_cast<jule::I64>(_95223_m.get()._field_code)));
}



inline jule::Str _20057e703_structure_static(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee24d626_StructStaticIdentExprModel> _96335_m) {
	return static__200587b7e_func_ins(_96335_m.get()._field_method);
}



inline jule::Str _20057eaaa_integrated_to_str(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee2538d4_IntegratedToStrExprModel> _96740_m) {
	jule::Str _96817_obj = jule::Str("jule::to_str(", 13);
	_96817_obj+=_200580e30_model(&(*_self_), _96740_m.get()._field_expr);
	_96817_obj+=jule::Str(")", 1);
	return _96817_obj;
}



inline jule::Str _20057ee62_backend_emit(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee253d13_BackendEmitExprModel> _97435_m) {
	if ((_97435_m.get()._field_exprs.len() == 0LL)) {
		return _97435_m.get()._field_code;
	}
	{
		auto &expr = _97435_m.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_203b7b45b:;
		if (it != expr.end()) {
			jule::I32 _203b7bec8_i = it - expr.begin();
			jule::Any _203b7c14e_expr = *it;
			{
				_97435_m.get()._field_exprs[_203b7bec8_i]=jule::Any(_2005812d7_expr(&(*_self_), _203b7c14e_expr));
			}
			_iter_next_203b7b45b:;
			++it;
			_203b7bec8_i++;
			goto _iter_begin_203b7b45b;
		}
		_iter_end_203b7b45b:;
	}
	return _1eeedc408_format(_97435_m.get()._field_code,_97435_m.get()._field_exprs);
}



inline jule::Str _200580319_free(_2005213cb_ExprCoder* _self_,jule::Ptr<_1ee254165_FreeExprModel> _98427_m) {
	if (_22237ee82_RC) {
		return (_2005812d7_expr(&(*_self_), _98427_m.get()._field_expr) + jule::Str(".dealloc()", 10));
	}
	return (_2005812d7_expr(&(*_self_), _98427_m.get()._field_expr) + jule::Str(".__free()", 9));
}



inline jule::Str _2005806c1_mut_slicing(_2005213cb_ExprCoder* _self_,jule::Ptr<_200564430_MutSlicingExprModel> _99134_m) {
	jule::Str _99217_obj = jule::Str("(", 1);
	_99217_obj+=_200580e30_model(&(*_self_), _99134_m.get()._field_expr);
	_99217_obj+=jule::Str(").mut_slice(", 12);
	if ((!(_22237d18e_PRODUCTION))) {
		_99217_obj+=jule::Str("\"", 1);
		_99217_obj+=_2005beb61_loc_info((*_self_)._field_oc.ptr(), _99134_m.get()._field_token);
		_99217_obj+=jule::Str("\",", 2);
	}
	_99217_obj+=_2005812d7_expr(&(*_self_), _99134_m.get()._field_left);
	if (_99134_m.get()._field_right != jule::Any(jule::Any(nullptr))) {
		_99217_obj+=jule::Str(",", 1);
		_99217_obj+=_2005812d7_expr(&(*_self_), _99134_m.get()._field_right);
	}
	_99217_obj+=jule::Str(");", 2);
	return _99217_obj;
}



inline jule::Str _200580a78_str_insert_begin(_2005213cb_ExprCoder* _self_,jule::Ptr<_200564919_StrInsertBeginExprModel> _100939_m) {
	jule::Str _101017_obj = jule::Str("(", 1);
	_101017_obj+=_200580e30_model(&(*_self_), _100939_m.get()._field_dest);
	_101017_obj+=jule::Str(").buffer.insert(0, (", 20);
	_101017_obj+=_200580e30_model(&(*_self_), _100939_m.get()._field_expr);
	_101017_obj+=jule::Str("));", 3);
	return _101017_obj;
}



inline jule::Str _200580e30_model(_2005213cb_ExprCoder* _self_,jule::Any _101828_m) {
	{
		auto &_match_expr{ _101828_m };
		
		if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_203b85201:;
			{
				return _200580e30_model(&(*_self_), _101828_m.operator jule::Ptr<_1eee43b89_Data>().get()._field_model);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee76b45_TypeKind>>()) {
			_case_begin_203b85b2a:;
			{
				return static__2005eee16_kind(_101828_m.operator jule::Ptr<_1eee76b45_TypeKind>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_203b854ed:;
			{
				return _200528dea_constant(&(*_self_), _101828_m.operator jule::Ptr<_1eed1e24b_Const>(),false);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_203b85564:;
			{
				return _200510ac4_var(&(*_self_), _101828_m.operator jule::Ptr<_1eedeb24b_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eec8627e_Trait>>()) {
			_case_begin_203b855ca:;
			{
				return static__200587e8c_trait_decl(_101828_m.operator jule::Ptr<_1eec8627e_Trait>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_203b85641:;
			{
				return _200510c39_structure(&(*_self_), _101828_m.operator jule::Ptr<_1ee242032_Struct>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24550d_StructIns>>()) {
			_case_begin_203b85795:;
			{
				return _200551021_structure_ins(&(*_self_), _101828_m.operator jule::Ptr<_1ee24550d_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee25b4ad_FnIns>>()) {
			_case_begin_203b8580b:;
			{
				return _20057a7cb_func_ins_common(&(*_self_), _101828_m.operator jule::Ptr<_1ee25b4ad_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200563819_UnsafeBinopExprModel>>()) {
			_case_begin_203b85872:;
			{
				return _20046a776_unsafe_binary(&(*_self_), _101828_m.operator jule::Ptr<_200563819_UnsafeBinopExprModel>().get()._field_node);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee247bb4_BinopExprModel>>()) {
			_case_begin_203b858e9:;
			{
				return _20055e183_binary(&(*_self_), _101828_m.operator jule::Ptr<_1ee247bb4_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248115_UnaryExprModel>>()) {
			_case_begin_203b85971:;
			{
				return _200551186_unary(&(*_self_), _101828_m.operator jule::Ptr<_1ee248115_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248a0b_StructLitExprModel>>()) {
			_case_begin_203b859e8:;
			{
				return _2004b7eee_structure_lit(&(*_self_), _101828_m.operator jule::Ptr<_1ee248a0b_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248de6_AllocStructLitExprModel>>()) {
			_case_begin_203b86004:;
			{
				return _200468cc4_alloc_structure(&(*_self_), _101828_m.operator jule::Ptr<_1ee248de6_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee249523_CastingExprModel>>()) {
			_case_begin_203b8607b:;
			{
				return _200468e39_casting(&(*_self_), _101828_m.operator jule::Ptr<_1ee249523_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>()) {
			_case_begin_203b86103:;
			{
				return _20057792c_func_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee24a007_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24a458_SliceExprModel>>()) {
			_case_begin_203b8617a:;
			{
				return _200577c29_slice(&(*_self_), _101828_m.operator jule::Ptr<_1ee24a458_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24da55_ArrayExprModel>>()) {
			_case_begin_203b86202:;
			{
				return _20057a424_array(&(*_self_), _101828_m.operator jule::Ptr<_1ee24da55_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200563ad3_UnsafeIndexingExprModel>>()) {
			_case_begin_203b86279:;
			{
				return _200578488_unsafe_indexing(&(*_self_), _101828_m.operator jule::Ptr<_200563ad3_UnsafeIndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24a9a8_IndexingExprModel>>()) {
			_case_begin_203b86301:;
			{
				return _2005780d1_indexing(&(*_self_), _101828_m.operator jule::Ptr<_1ee24a9a8_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24ae09_AnonFnExprModel>>()) {
			_case_begin_203b86378:;
			{
				return _200578840_anon_func(&(*_self_), _101828_m.operator jule::Ptr<_1ee24ae09_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24b8aa_MapExprModel>>()) {
			_case_begin_203b86400:;
			{
				return _200578be7_map(&(*_self_), _101828_m.operator jule::Ptr<_1ee24b8aa_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24c009_SlicingExprModel>>()) {
			_case_begin_203b86477:;
			{
				return _20057909e_slicing(&(*_self_), _101828_m.operator jule::Ptr<_1ee24c009_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24c658_TraitSubIdentExprModel>>()) {
			_case_begin_203b864ee:;
			{
				return _200579456_trait_sub(&(*_self_), _101828_m.operator jule::Ptr<_1ee24c658_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
			_case_begin_203b86576:;
			{
				return _20057980d_structure_sub(&(*_self_), _101828_m.operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24dda7_CommonIdentExprModel>>()) {
			_case_begin_203b865ed:;
			{
				return _200579bb5_common_ident(&(*_self_), _101828_m.operator jule::Ptr<_1ee24dda7_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>>()) {
			_case_begin_203b86675:;
			{
				return _20057a06c_common_sub(&(*_self_), _101828_m.operator jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24e8be_TupleExprModel>>()) {
			_case_begin_203b866ec:;
			{
				return _20057b03a_tuple(&(*_self_), _101828_m.operator jule::Ptr<_1ee24e8be_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>>()) {
			_case_begin_203b86774:;
			{
				return _20057b799_out_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>>()) {
			_case_begin_203b867eb:;
			{
				return _20057bb51_outln_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee250c00_BuiltinNewCallExprModel>>()) {
			_case_begin_203b86873:;
			{
				return _20057b3e2_new_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee250c00_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>>()) {
			_case_begin_203b868ea:;
			{
				return _20057c008_panic_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee2511b7_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>>()) {
			_case_begin_203b86972:;
			{
				return _20057c3b0_assert_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>()) {
			_case_begin_203b869e9:;
			{
				return _20057c767_error_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel>>()) {
			_case_begin_203b86a71:;
			{
				return _20057cb1e_make_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee251d44_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>>()) {
			_case_begin_203b86ae8:;
			{
				return _20057d37d_append_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee25230b_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>>()) {
			_case_begin_203b86b70:;
			{
				return _20057d735_clone_call(&(*_self_), _101828_m.operator jule::Ptr<_1ee250738_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee252b03_SizeofExprModel>>()) {
			_case_begin_203b86be7:;
			{
				return _20057dadc_sizeof(&(*_self_), _101828_m.operator jule::Ptr<_1ee252b03_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2532a7_AlignofExprModel>>()) {
			_case_begin_203b86c6e:;
			{
				return _20057de94_alignof(&(*_self_), _101828_m.operator jule::Ptr<_1ee2532a7_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee253571_RuneExprModel>>()) {
			_case_begin_203b86ce6:;
			{
				return _20057e34b_rune_lit(&(*_self_), _101828_m.operator jule::Ptr<_1ee253571_RuneExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24d626_StructStaticIdentExprModel>>()) {
			_case_begin_203b86d6d:;
			{
				return _20057e703_structure_static(&(*_self_), _101828_m.operator jule::Ptr<_1ee24d626_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee2538d4_IntegratedToStrExprModel>>()) {
			_case_begin_203b86de5:;
			{
				return _20057eaaa_integrated_to_str(&(*_self_), _101828_m.operator jule::Ptr<_1ee2538d4_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee253d13_BackendEmitExprModel>>()) {
			_case_begin_203b86e6c:;
			{
				return _20057ee62_backend_emit(&(*_self_), _101828_m.operator jule::Ptr<_1ee253d13_BackendEmitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee254165_FreeExprModel>>()) {
			_case_begin_203b86ee4:;
			{
				return _200580319_free(&(*_self_), _101828_m.operator jule::Ptr<_1ee254165_FreeExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200564430_MutSlicingExprModel>>()) {
			_case_begin_203b8706b:;
			{
				return _2005806c1_mut_slicing(&(*_self_), _101828_m.operator jule::Ptr<_200564430_MutSlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_200564919_StrInsertBeginExprModel>>()) {
			_case_begin_203b870e3:;
			{
				return _200580a78_str_insert_begin(&(*_self_), _101828_m.operator jule::Ptr<_200564919_StrInsertBeginExprModel>());
			}
		}
		else {
			_case_begin_203b85399:;
			{
				return jule::Str("<unimplemented_expression_model>", 32);
			}
		}
		_match_end_203b852bc:;
	}
}



inline jule::Str _2005812d7_expr(_2005213cb_ExprCoder* _self_,jule::Any _111527_e) {
	jule::Str _111617_obj = _200580e30_model(&(*_self_), _111527_e);
	if ((_111617_obj.len() == 0LL) || (_111617_obj[0LL] != '(')) {
		return _111617_obj;
	}
	{
		auto &_match_expr{ _111527_e };
		
		if (_match_expr.type_is<jule::Ptr<_1ee247bb4_BinopExprModel>>()) {
			_case_begin_203ba285b:;
			{
				(_111617_obj).mut_slice(1LL,_111617_obj.len() - 1LL);
			}
		}
		_match_end_203ba2680:;
	}
	return _111617_obj;
}



inline jule::Str _20058168e_val(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eee44e98_Value> _112726_v) {
	if (_1eee44690_is_const(_112726_v.get()._field_data.ptr())) {
		return _200528dea_constant(&(*_self_), _112726_v.get()._field_data.get()._field_constant,(_112726_v.get()._field_data.get()._field_kind != nullptr) && _1eee7e4cc_is_f32(_1eee791db_prim(_112726_v.get()._field_data.get()._field_kind.ptr()).ptr()));
	}
	return _2005812d7_expr(&(*_self_), _112726_v.get()._field_data.get()._field_model);
}



inline jule::Str _200581a46_init_expr(_2005213cb_ExprCoder* _self_,jule::Ptr<_1eee76b45_TypeKind> _113432_t) {
	if ((_1eee79791_ptr(_113432_t.ptr()) != nullptr)) {
		return jule::Str("nullptr", 7);
	}
	jule::Ptr<_1eec889ac_Enum> _113817_enm = _1eee79a6b_enm(_113432_t.ptr());
	if ((_113817_enm != nullptr)) {
		return _20058168e_val(&(*_self_), _113817_enm.get()._field_items[0LL].get()._field_value);
	}
	return (static__2005eee16_kind(_113432_t) + jule::Str("()", 2));
}







std::ostream &operator<<(std::ostream &_Stream, _2005213cb_ExprCoder _Src) {
	_Stream << "ExprCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Str static__20058497d_clone_func_decl(jule::Ptr<_1ee242032_Struct>& _1032_s) {
	jule::Str _1117_obj = static__2005ed189_structure(_1032_s);
	_1117_obj+=jule::Str(" clone(void) const ", 19);
	return _1117_obj;
}



inline jule::Str static__200584c8b_clone_func_def(jule::Ptr<_1ee242032_Struct>& _1631_s) {
	jule::Str _1717_obj = static__2005ed189_structure(_1631_s);
	_1717_obj+=jule::Str(" ", 1) + _1717_obj;
	_1717_obj+=jule::Str("::clone(void) const ", 20);
	return _1717_obj;
}







std::ostream &operator<<(std::ostream &_Stream, _2005845d7_DeriveCoder _Src) {
	_Stream << "DeriveCoder{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str static__2005868a3_to_ident(jule::Str _3124_ident) {
	return jule::Str("_", 1) + _3124_ident;
}



inline jule::Str static__200586bb1_addr(jule::U32 _3620_addr) {
	return jule::Str("_", 1) + _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_3620_addr)),15LL);
}



inline jule::Str static__20058709b_to_out(jule::Str _4522_ident,jule::U32 _4534_addr) {
	if ((_4534_addr != 0LLU)) {
		jule::Str _4721_obj = static__200586bb1_addr(_4534_addr);
		_4721_obj+=jule::Str("_", 1);
		_4721_obj+=_4522_ident;
		return _4721_obj;
	}
	return static__2005868a3_to_ident(_4522_ident);
}



inline jule::Str static__200587563_to_local(jule::I32 _6124_row,jule::I32 _6134_col,jule::Str _6144_ident) {
	jule::Str _6217_obj = _1eec84964_itoa(_6124_row);
	_6217_obj+=_1eec84964_itoa(_6134_col);
	_6217_obj+=jule::Str("_", 1);
	_6217_obj+=_6144_ident;
	return static__2005868a3_to_ident(_6217_obj);
}



inline jule::Str static__200587871_func(jule::Ptr<_1ee2579b5_Fn>& _7021_f) {
	{
		
		if (_7021_f.get()._field_cpp_linked) {
			_case_begin_203bb0b33:;
			{
				return _7021_f.get()._field_ident;
			}
		}
		else if ((_7021_f.get()._field_ident == jule::Str("main", 4))) {
			_case_begin_203bb0b99:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if (_1ee258257_is_method(_7021_f.ptr())) {
			_case_begin_203bb0308:;
			{
				jule::Str _7721_obj = static__20058709b_to_out(_7021_f.get()._field_ident,static_cast<jule::U32>(static_cast<jule::U32>(_7021_f)));
				if (_7021_f.get()._field_statically) {
					(_7721_obj).buffer.insert(0, (jule::Str("static_", 7)));
					return _7721_obj;
				}
				return _7721_obj;
			}
		}
		else {
			_case_begin_203bb0292:;
			{
				return static__20058709b_to_out(_7021_f.get()._field_ident,static_cast<jule::U32>(static_cast<jule::U32>(_7021_f)));
			}
		}
		_match_end_203bb010a:;
	}
}



inline jule::Str static__200587b7e_func_ins(jule::Ptr<_1ee25b4ad_FnIns>& _8929_f) {
	if (_1ee25c13a_is_builtin(_8929_f.ptr())) {
		return jule::Str("jule::", 6) + _8929_f.get()._field_decl.get()._field_ident;
	}
	if (_8929_f.get()._field_decl.get()._field_cpp_linked || (_8929_f.get()._field_generics.len() == 0LL)) {
		return static__200587871_func(_8929_f.get()._field_decl);
	}
	{
		auto &expr = _8929_f.get()._field_decl.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203bb4a38:;
		if (it != expr.end()) {
			jule::I32 _203bb4b48_i = it - expr.begin();
			jule::Ptr<_1ee25b4ad_FnIns> _203bb4d68_ins = *it;
			{
				if (_1ee25c7bc_same(_203bb4d68_ins.ptr(), _8929_f)) {
					jule::Str _9825_obj = static__200587871_func(_8929_f.get()._field_decl);
					_9825_obj+=jule::Str("_", 1);
					_9825_obj+=_1eec84964_itoa(_203bb4b48_i);
					return _9825_obj;
				}
			}
			_iter_next_203bb4a38:;
			++it;
			_203bb4b48_i++;
			goto _iter_begin_203bb4a38;
		}
		_iter_end_203bb4a38:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str static__200587e8c_trait_decl(jule::Ptr<_1eec8627e_Trait> _10826_t) {
	if (_1eec86e3e_is_builtin(_10826_t.ptr())) {
		return jule::Str("jule::", 6) + _10826_t.get()._field_ident;
	}
	return static__20058709b_to_out(_10826_t.get()._field_ident,static_cast<jule::U32>(static_cast<jule::U32>(_10826_t)));
}



inline jule::Str static__20058829a_param(jule::Ptr<_1ee255b8e_Param>& _11622_p) {
	if (_1e02c4de8_is_anon_ident(_11622_p.get()._field_ident) || _1e02c4ada_is_ignore_ident(_11622_p.get()._field_ident)) {
		return jule::Str();
	}
	if (_1ee256398_is_self(_11622_p.ptr())) {
		return jule::Str("_self_", 6);
	}
	return static__200587563_to_local(_11622_p.get()._field_token._field_row,_11622_p.get()._field_token._field_column,_11622_p.get()._field_ident);
}



inline jule::Str static__2005885a8_structure(jule::Ptr<_1ee242032_Struct>& _12726_s) {
	if (_12726_s.get()._field_cpp_linked) {
		if (_2005e9350_has_directive(_12726_s.get()._field_directives,jule::Str("typedef", 7))) {
			return _12726_s.get()._field_ident;
		}
		return jule::Str("struct ", 7) + _12726_s.get()._field_ident;
	}
	return static__20058709b_to_out(_12726_s.get()._field_ident,static_cast<jule::U32>(static_cast<jule::U32>(_12726_s)));
}



inline jule::Str static__2005888b6_structure_ins(jule::Ptr<_1ee24550d_StructIns>& _13834_s) {
	if (_13834_s.get()._field_decl.get()._field_cpp_linked || (_13834_s.get()._field_generics.len() == 0LL)) {
		return static__2005885a8_structure(_13834_s.get()._field_decl);
	}
	{
		auto &expr = _13834_s.get()._field_decl.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203bbceb4:;
		if (it != expr.end()) {
			jule::I32 _203bbd0e6_i = it - expr.begin();
			jule::Ptr<_1ee24550d_StructIns> _203bbd305_ins = *it;
			{
				if (_1ee24629a_same(_203bbd305_ins.ptr(), _13834_s)) {
					jule::Str _14425_obj = static__2005885a8_structure(_13834_s.get()._field_decl);
					_14425_obj+=jule::Str("_", 1);
					_14425_obj+=_1eec84964_itoa(_203bbd0e6_i);
					return _14425_obj;
				}
			}
			_iter_next_203bbceb4:;
			++it;
			_203bbd0e6_i++;
			goto _iter_begin_203bbceb4;
		}
		_iter_end_203bbceb4:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str static__200588bc4_field(jule::Ptr<_1ee23da34_Field>& _15422_f) {
	if (_15422_f.get()._field_owner.get()._field_cpp_linked) {
		return _15422_f.get()._field_ident;
	}
	return jule::Str("_field_", 7) + _15422_f.get()._field_ident;
}



inline jule::Str static__200588ed2_var(jule::Ptr<_1eedeb24b_Var> _16223_v) {
	{
		
		if (_16223_v.get()._field_cpp_linked) {
			_case_begin_203bc1270:;
			{
				return _16223_v.get()._field_ident;
			}
		}
		else if ((_16223_v.get()._field_ident == jule::Str("error", 5))) {
			_case_begin_203bc0945:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if ((_16223_v.get()._field_ident == jule::Str("self", 4))) {
			_case_begin_203bc09ab:;
			{
				if ((_1eee794b6_sptr(_16223_v.get()._field_kind.get()._field_kind.ptr()) == nullptr)) {
					return jule::Str("(*_self_)", 9);
				}
				return jule::Str("_self_", 6);
			}
		}
		else if ((_16223_v.get()._field_scope != nullptr)) {
			_case_begin_203bc0a22:;
			{
				return static__200587563_to_local(_16223_v.get()._field_token._field_row,_16223_v.get()._field_token._field_column,_16223_v.get()._field_ident);
			}
		}
		else {
			_case_begin_203bc08ce:;
			{
				return static__20058709b_to_out(_16223_v.get()._field_ident,static_cast<jule::U32>(static_cast<jule::U32>(_16223_v)));
			}
		}
		_match_end_203bc0538:;
	}
}



inline jule::Str static__2005892e0_iter_begin(jule::U32 _18126_it) {
	return jule::Str("_iter_begin_", 12) + _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_18126_it)),15LL);
}



inline jule::Str static__2005895ed_iter_end(jule::U32 _18624_it) {
	return jule::Str("_iter_end_", 10) + _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_18624_it)),15LL);
}



inline jule::Str static__20058990b_iter_next(jule::U32 _19125_it) {
	return jule::Str("_iter_next_", 11) + _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_19125_it)),15LL);
}



inline jule::Str static__200589c19_label(jule::Str _19621_ident) {
	return jule::Str("_julec_label_", 13) + _19621_ident;
}



inline jule::Str static__20058a027_match_end(jule::U32 _20125_m) {
	return jule::Str("_match_end_", 11) + _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_20125_m)),15LL);
}



inline jule::Str static__20058a335_case_begin(jule::U32 _20626_c) {
	return jule::Str("_case_begin_", 12) + _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_20626_c)),15LL);
}







std::ostream &operator<<(std::ostream &_Stream, _200586496_IdentCoder _Src) {
	_Stream << "IdentCoder{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2005bb872_SerializationInfo _Src) {
	_Stream << "SerializationInfo{";
	_Stream << "compiler:" << _Src._field_compiler << ", ";
	_Stream << "compiler_command:" << _Src._field_compiler_command;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _20059b775_TraitHash _Src) {
	_Stream << "TraitHash{";
	_Stream << "t:" << _Src._field_t << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _2005e9a37_to_str(_2005e95c5_CustomType* _self_) {
	return (*_self_)._field_kind;
}



inline jule::Bool _2005e9dde_equals(jule::Ptr<_2005e95c5_CustomType> _self_,jule::Ptr<_1eee76b45_TypeKind> _5326_k) {
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _2005e95c5_CustomType _Src) {
	_Stream << _2005e9a37_to_str(&_Src);
	return _Stream;
}



inline jule::Str static__2005ea6c5_to_type(jule::Str _7327_id) {
	_7327_id=_1eed95910_real_kind_of(_7327_id);
	if ((97LL <= _7327_id[0LL]) && (_7327_id[0LL] <= 122LLU)) {
		_7327_id[0LL]-=32LLU;
	}
	return jule::Str("jule::", 6) + _7327_id;
}



inline jule::Str static__2005ea9d3_prim(jule::Ptr<_1eee7bead_Prim> _8220_p) {
	return static__2005ea6c5_to_type(_1eee7c387_to_str(_8220_p.ptr()));
}



inline jule::Str static__2005eace1_tuple(jule::Ptr<_1eee82568_Tuple> _8725_t) {
	jule::Str _8817_obj = jule::Str("std::tuple<", 11);
	{
		auto &expr = _8725_t.get()._field_types;
		auto it = expr.begin();
		_iter_begin_203cc03e6:;
		if (it != expr.end()) {
			jule::Ptr<_1eee76b45_TypeKind> _203cc04b2_tk = *it;
			{
				_8817_obj+=static__2005eee16_kind(_203cc04b2_tk);
				_8817_obj+=jule::Str(",", 1);
			}
			_iter_next_203cc03e6:;
			++it;
			goto _iter_begin_203cc03e6;
		}
		_iter_end_203cc03e6:;
	}
	(_8817_obj).mut_slice(0LL,_8817_obj.len() - 1LL);
	_8817_obj+=jule::Str(">", 1);
	return _8817_obj;
}



inline jule::Str static__2005eb0ee_as_sptr(jule::Str _9923_elem) {
	jule::Str _10017_obj = jule::Str("jule::Ptr<", 10);
	_10017_obj+=_9923_elem;
	_10017_obj+=jule::Str(">", 1);
	return _10017_obj;
}



inline jule::Str static__2005eb40c_as_ptr(jule::Str _10722_elem) {
	return (_10722_elem + jule::Str("*", 1));
}



inline jule::Str static__2005eb71a_sptr(jule::Ptr<_1eee80d19_Sptr> _11224_sptr) {
	return static__2005eb0ee_as_sptr(static__2005eee16_kind(_11224_sptr.get()._field_elem));
}



inline jule::Str static__2005eba28_ptr(jule::Ptr<_1eee89a04_Ptr> _11723_p) {
	
	if (_1eee8a64d_is_unsafe(_11723_p.ptr())) {
		return jule::Str("void*", 5);
	}
	jule::Str _12217_elem = static__2005eee16_kind(_11723_p.get()._field_elem);
	_12217_elem+=jule::Str("*", 1);
	return _12217_elem;
}



inline jule::Str static__2005ebd36_enum_decl(jule::Ptr<_1eec889ac_Enum> _12829_e) {
	return static__2005eee16_kind(_12829_e.get()._field_kind.get()._field_kind);
}



inline jule::Str static__2005ec144_as_slice(jule::Ptr<_1eee76b45_TypeKind> _13228_elem) {
	jule::Str _13317_obj = jule::Str("jule::Slice<", 12);
	_13317_obj+=static__2005eee16_kind(_13228_elem);
	_13317_obj+=jule::Str(">", 1);
	return _13317_obj;
}



inline jule::Str static__2005ec452_slice(jule::Ptr<_1eee818ec_Slc> _14025_s) {
	return static__2005ec144_as_slice(_14025_s.get()._field_elem);
}



inline jule::Str static__2005ec760_map(jule::Ptr<_1eee832d3_Map> _14523_m) {
	jule::Str _14617_obj = jule::Str("jule::Map<", 10);
	_14617_obj+=static__2005eee16_kind(_14523_m.get()._field_key);
	_14617_obj+=jule::Str(",", 1);
	_14617_obj+=static__2005eee16_kind(_14523_m.get()._field_val);
	_14617_obj+=jule::Str(">", 1);
	return _14617_obj;
}



inline jule::Str static__2005eca6d_trait_ident(jule::Str _15427_ident) {
	jule::Str _15517_obj = jule::Str("jule::Trait<", 12);
	_15517_obj+=_15427_ident;
	_15517_obj+=jule::Str(">", 1);
	return _15517_obj;
}



inline jule::Str static__2005ecd7b_trait_decl(jule::Ptr<_1eec8627e_Trait> _16226_t) {
	return static__2005eca6d_trait_ident(static__200587e8c_trait_decl(_16226_t));
}



inline jule::Str static__2005ed189_structure(jule::Ptr<_1ee242032_Struct> _16725_s) {
	jule::Str _16817_rep = jule::Str();
	if (_16725_s.get()._field_cpp_linked && (!(_2005e9350_has_directive(_16725_s.get()._field_directives,jule::Str("typedef", 7))))) {
		_16817_rep+=jule::Str("struct ", 7);
	}
	_16817_rep+=static__2005885a8_structure(_16725_s);
	return _16817_rep;
}



inline jule::Str static__2005ed497_structure_ins(jule::Ptr<_1ee24550d_StructIns> _17733_s) {
	if (_17733_s.get()._field_decl.get()._field_cpp_linked) {
		jule::Str _17921_ident = static__2005888b6_structure_ins(_17733_s);
		if ((_17733_s.get()._field_generics.len() > 0LL)) {
			_17921_ident+=jule::Str("<", 1);
			{
				auto &expr = _17733_s.get()._field_generics;
				auto it = expr.begin();
				_iter_begin_203ccca63:;
				if (it != expr.end()) {
					jule::Ptr<_1eee76b45_TypeKind> _203ccd06e_g = *it;
					{
						_17921_ident+=static__2005eee16_kind(_203ccd06e_g);
						_17921_ident+=jule::Str(",", 1);
					}
					_iter_next_203ccca63:;
					++it;
					goto _iter_begin_203ccca63;
				}
				_iter_end_203ccca63:;
			}
			(_17921_ident).mut_slice(0LL,_17921_ident.len() - 1LL);
			_17921_ident+=jule::Str(">", 1);
		}
		jule::Ptr<_1e02812b1_Directive> _18917_d = _2005e8e10_find_directive(_17733_s.get()._field_decl.get()._field_directives,jule::Str("namespace", 9));
		if ((_18917_d != nullptr)) {
			(_17921_ident).buffer.insert(0, ((_200581e0e_concat_all_parts(_18917_d.get()._field_args) + jule::Str("::", 2))));
		}
		return _17921_ident;
	}
	return static__2005888b6_structure_ins(_17733_s);
}



inline jule::Str static__2005ed7a5_array(jule::Ptr<_1eee88e21_Arr> _19925_a) {
	jule::Str _20017_obj = jule::Str("jule::Array<", 12);
	_20017_obj+=static__2005eee16_kind(_19925_a.get()._field_elem);
	_20017_obj+=jule::Str(",", 1);
	_20017_obj+=_1eec84964_itoa(_19925_a.get()._field_n);
	_20017_obj+=jule::Str(">", 1);
	return _20017_obj;
}



inline jule::Str static__2005edab3_param(jule::Ptr<_1ee255b8e_Param>& _20926_p) {
	jule::Str _21017_obj = jule::Str();
	if (_20926_p.get()._field_variadic) {
		_21017_obj+=jule::Str("jule::Slice<", 12);
		_21017_obj+=static__2005eee16_kind(_20926_p.get()._field_kind.get()._field_kind);
		_21017_obj+=jule::Str(">", 1);
	} else {
		_21017_obj+=static__2005eee16_kind(_20926_p.get()._field_kind.get()._field_kind);
	}
	if (_20926_p.get()._field_reference) {
		_21017_obj+=jule::Str("&", 1);
	}
	return _21017_obj;
}



inline jule::Str static__2005eddc1_param_ins(jule::Ptr<_1ee25a358_ParamIns>& _22530_p) {
	jule::Str _22617_obj = jule::Str();
	if (_22530_p.get()._field_decl.get()._field_variadic) {
		_22617_obj+=jule::Str("jule::Slice<", 12);
		_22617_obj+=static__2005eee16_kind(_22530_p.get()._field_kind);
		_22617_obj+=jule::Str(">", 1);
	} else {
		_22617_obj+=static__2005eee16_kind(_22530_p.get()._field_kind);
	}
	if (_22530_p.get()._field_decl.get()._field_reference) {
		_22617_obj+=jule::Str("&", 1);
	}
	return _22617_obj;
}



inline jule::Str static__2005ee1ce_func_result(jule::Ptr<_1ee2579b5_Fn>& _24132_f) {
	if (_1ee257e7c_is_void(_24132_f.ptr())) {
		if (_24132_f.get()._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if (_24132_f.get()._field_exceptional) {
		return ((jule::Str("jule::Exceptional<", 18) + static__2005eee16_kind(_24132_f.get()._field_result.get()._field_kind.get()._field_kind)) + jule::Str(">", 1));
	}
	return static__2005eee16_kind(_24132_f.get()._field_result.get()._field_kind.get()._field_kind);
}



inline jule::Str static__2005ee4dc_func_ins_result(jule::Ptr<_1ee25b4ad_FnIns>& _25536_f) {
	if (_1ee257e7c_is_void(_25536_f.get()._field_decl.ptr())) {
		if (_25536_f.get()._field_decl.get()._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if (_25536_f.get()._field_decl.get()._field_exceptional) {
		return ((jule::Str("jule::Exceptional<", 18) + static__2005eee16_kind(_25536_f.get()._field_result)) + jule::Str(">", 1));
	}
	return static__2005eee16_kind(_25536_f.get()._field_result);
}



inline jule::Str static__2005ee7ea_anon_func(jule::Ptr<_1ee25b4ad_FnIns> _26829_f) {
	jule::Str _26917_decl = static__2005ee4dc_func_ins_result(_26829_f);
	_26917_decl+=jule::Str("(", 1);
	if ((_26829_f.get()._field_params.len() > 0LL)) {
		{
			auto &expr = _26829_f.get()._field_params;
			auto it = expr.begin();
			_iter_begin_203cdb599:;
			if (it != expr.end()) {
				jule::Ptr<_1ee25a358_ParamIns> _203cdb665_param = *it;
				{
					if (_1ee256398_is_self(_203cdb665_param.get()._field_decl.ptr())) {
						goto _iter_next_203cdb599;
					}
					_26917_decl+=static__2005eddc1_param_ins(_203cdb665_param);
					_26917_decl+=jule::Str(",", 1);
				}
				_iter_next_203cdb599:;
				++it;
				goto _iter_begin_203cdb599;
			}
			_iter_end_203cdb599:;
		}
		(_26917_decl).mut_slice(0LL,_26917_decl.len() - 1LL);
	} else {
		_26917_decl+=jule::Str("void", 4);
	}
	_26917_decl+=jule::Str(")", 1);
	return _26917_decl;
}



inline jule::Str static__2005eeb08_func(jule::Ptr<_1ee25b4ad_FnIns> _28824_f) {
	jule::Str _28917_obj = jule::Str("jule::Fn<", 9);
	_28917_obj+=static__2005ee7ea_anon_func(_28824_f);
	_28917_obj+=jule::Str(">", 1);
	return _28917_obj;
}



inline jule::Str static__2005eee16_kind(jule::Ptr<_1eee76b45_TypeKind> _29624_k) {
	{
		
		if (_1eee77926_cpp_linked(_29624_k.ptr())) {
			_case_begin_203cde5d0:;
			{
				return _29624_k.get()._field_cpp_ident;
			}
		}
		else if ((_1eee791db_prim(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cde767:;
			{
				return static__2005ea9d3_prim(_1eee791db_prim(_29624_k.ptr()));
			}
		}
		else if ((_1eee7b056_tup(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cde7cd:;
			{
				return static__2005eace1_tuple(_1eee7b056_tup(_29624_k.ptr()));
			}
		}
		else if ((_1eee794b6_sptr(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cde844:;
			{
				return static__2005eb71a_sptr(_1eee794b6_sptr(_29624_k.ptr()));
			}
		}
		else if ((_1eee79791_ptr(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cde8bb:;
			{
				return static__2005eba28_ptr(_1eee79791_ptr(_29624_k.ptr()));
			}
		}
		else if ((_1eee79a6b_enm(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cde943:;
			{
				return static__2005ebd36_enum_decl(_1eee79a6b_enm(_29624_k.ptr()));
			}
		}
		else if ((_1eee7a121_slc(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cde9ba:;
			{
				return static__2005ec452_slice(_1eee7a121_slc(_29624_k.ptr()));
			}
		}
		else if ((_1eee7ac7b_map(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cdea42:;
			{
				return static__2005ec760_map(_1eee7ac7b_map(_29624_k.ptr()));
			}
		}
		else if ((_1eee7a9a1_trt(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cdeab9:;
			{
				return static__2005ecd7b_trait_decl(_1eee7a9a1_trt(_29624_k.ptr()));
			}
		}
		else if ((_1eee7a6c6_strct(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cdeb41:;
			{
				return static__2005ed497_structure_ins(_1eee7a6c6_strct(_29624_k.ptr()));
			}
		}
		else if ((_1eee79d46_arr(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cdebb8:;
			{
				return static__2005ed7a5_array(_1eee79d46_arr(_29624_k.ptr()));
			}
		}
		else if ((_1eee7a3eb_fnc(_29624_k.ptr()) != nullptr)) {
			_case_begin_203cdec40:;
			{
				return static__2005eeb08_func(_1eee7a3eb_fnc(_29624_k.ptr()));
			}
		}
		_match_end_203cde503:;
	}
	{
		auto &_match_expr{ _29624_k.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2005e95c5_CustomType>>()) {
			_case_begin_203ce885e:;
			{
				return _29624_k.get()._field_kind.operator jule::Ptr<_2005e95c5_CustomType>().get()._field_kind;
			}
		}
		else {
			_case_begin_203ce8463:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_203ce82ba:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _2005ea142_TypeCoder _Src) {
	_Stream << "TypeCoder{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _203d133a1_name(_2006127b9_Flag_0* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _203d13516_what(_2006127b9_Flag_0* _self_) {
	return (*_self_)._field__what;
}



inline void _203d1367b_reset(_2006127b9_Flag_0* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _203d137e1_short(_2006127b9_Flag_0* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _2006127b9_Flag_0 _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _203d166d4_name(_2006127b9_Flag_1* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _203d13967_what(_2006127b9_Flag_1* _self_) {
	return (*_self_)._field__what;
}



inline void _203d150ea_reset(_2006127b9_Flag_1* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _203d1643c_short(_2006127b9_Flag_1* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _2006127b9_Flag_1 _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _203d19be3_name(_2006127b9_Flag_2* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _203d16e76_what(_2006127b9_Flag_2* _self_) {
	return (*_self_)._field__what;
}



inline void _203d18609_reset(_2006127b9_Flag_2* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _203d1994b_short(_2006127b9_Flag_2* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _2006127b9_Flag_2 _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _203d1a4eb_name(_2006127b9_Flag_3* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _203d1d246_what(_2006127b9_Flag_3* _self_) {
	return (*_self_)._field__what;
}



inline void _203d1bb5c_reset(_2006127b9_Flag_3* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _203d1ce9e_short(_2006127b9_Flag_3* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _2006127b9_Flag_3 _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _203d21755_name(_2006127b9_Flag_4* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _203d1d9d8_what(_2006127b9_Flag_4* _self_) {
	return (*_self_)._field__what;
}



inline void _203d2016b_reset(_2006127b9_Flag_4* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _203d214ad_short(_2006127b9_Flag_4* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _2006127b9_Flag_4 _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_200613ba5_FlagSet> static__200613ec4_new(void) {
	return jule::new_ptr<_200613ba5_FlagSet>(_200613ba5_FlagSet(jule::Slice<jule::Trait<_2006123bd_CommonFlag>>::alloc(0LL,20LL)));
}



inline jule::Trait<_2006123bd_CommonFlag> _200614535_find_flag(_200613ba5_FlagSet* _self_,jule::Str _6732_name) {
	{
		auto &expr = (*_self_)._field__flags;
		auto it = expr.begin();
		_iter_begin_203d2a61b:;
		if (it != expr.end()) {
			jule::Trait<_2006123bd_CommonFlag> _203d2a6d7_flag = *it;
			{
				if (_2006123bd_CommonFlag_mptr_data[(_203d2a6d7_flag).type_offset]._200611c91_name(_203d2a6d7_flag) == _6732_name) {
					return _203d2a6d7_flag;
				}
			}
			_iter_next_203d2a61b:;
			++it;
			goto _iter_begin_203d2a61b;
		}
		_iter_end_203d2a61b:;
	}
	return nullptr;
}



inline jule::Trait<_2006123bd_CommonFlag> _2006148dc_find_flag_short(_200613ba5_FlagSet* _self_,jule::I32 _7738_name) {
	{
		auto &expr = (*_self_)._field__flags;
		auto it = expr.begin();
		_iter_begin_203d2ba4b:;
		if (it != expr.end()) {
			jule::Trait<_2006123bd_CommonFlag> _203d2bb17_flag = *it;
			{
				if (_2006123bd_CommonFlag_mptr_data[(_203d2bb17_flag).type_offset]._200611e06_short(_203d2bb17_flag) == _7738_name) {
					return _203d2bb17_flag;
				}
			}
			_iter_next_203d2ba4b:;
			++it;
			goto _iter_begin_203d2ba4b;
		}
		_iter_end_203d2ba4b:;
	}
	return nullptr;
}



inline jule::Slice<jule::Trait<_2006123bd_CommonFlag>> _200614bb7_flags(_200613ba5_FlagSet* _self_) {
	return (*_self_)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _20061506e_parse(_200613ba5_FlagSet* _self_,jule::Slice<jule::Str> _11128_args) {
	_200616b64_ArgParser _11217_ap = _200616b64_ArgParser((*_self_),_11128_args,jule::Slice<jule::Str>(),jule::I32());
	({
		auto except = _20061845c_parse(&_11217_ap);
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional<jule::Slice<jule::Str>>(jule::Any(),_11217_ap._field_content);
}



inline void _2006152b1_reset(_200613ba5_FlagSet* _self_) {
	{
		auto &expr = (*_self_)._field__flags;
		auto it = expr.begin();
		_iter_begin_203d303e0:;
		if (it != expr.end()) {
			jule::Trait<_2006123bd_CommonFlag> _203d30665_f = *it;
			{
				_2006123bd_CommonFlag_mptr_data[(_203d30665_f).type_offset]._200612258_reset(_203d30665_f);
			}
			_iter_next_203d303e0:;
			++it;
			goto _iter_begin_203d303e0;
		}
		_iter_end_203d303e0:;
	}
}



inline jule::Ptr<_2006127b9_Flag_4> _200615822_add_flag_common_0(_200613ba5_FlagSet* _self_,jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	{
		
{
			_case_begin_203da5d39:;
			{
				goto _match_end_203da5cd4;
			}
		}
		_match_end_203da5cd4:;
	}
	if ((_200614535_find_flag(&(*_self_), _12741_name) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && (_2006148dc_find_flag_short(&(*_self_), _12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_2006127b9_Flag_4> _14417_flag = jule::new_ptr<_2006127b9_Flag_4>(_2006127b9_Flag_4(_12741_name,_12752_short,jule::Str(),_12765_what,jule::Ptr<jule::Str>()));
	(*_self_)._field__flags = jule::alloc_for_append((*_self_)._field__flags,1);(*_self_)._field__flags.__push(jule::Trait<_2006123bd_CommonFlag>(_14417_flag, 4));
	return _14417_flag;
}

inline jule::Ptr<_2006127b9_Flag_3> _200615822_add_flag_common_1(_200613ba5_FlagSet* _self_,jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	{
		
{
			_case_begin_203db0a14:;
			{
				goto _match_end_203db09ae;
			}
		}
		_match_end_203db09ae:;
	}
	if ((_200614535_find_flag(&(*_self_), _12741_name) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && (_2006148dc_find_flag_short(&(*_self_), _12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_2006127b9_Flag_3> _14417_flag = jule::new_ptr<_2006127b9_Flag_3>(_2006127b9_Flag_3(_12741_name,_12752_short,jule::Bool(),_12765_what,jule::Ptr<jule::Bool>()));
	(*_self_)._field__flags = jule::alloc_for_append((*_self_)._field__flags,1);(*_self_)._field__flags.__push(jule::Trait<_2006123bd_CommonFlag>(_14417_flag, 3));
	return _14417_flag;
}





inline void _200616515_add_var_0(_200613ba5_FlagSet* _self_,jule::Ptr<jule::Str> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_2006127b9_Flag_4> _17217_flag = _200615822_add_flag_common_0(&(*_self_), _17146_name,_17157_short,_17170_what);
	_17217_flag.get()._field__default=(*(_17137_var));
	_17217_flag.get()._field__data=_17137_var;
}

inline void _200616515_add_var_1(_200613ba5_FlagSet* _self_,jule::Ptr<jule::Bool> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_2006127b9_Flag_3> _17217_flag = _200615822_add_flag_common_1(&(*_self_), _17146_name,_17157_short,_17170_what);
	_17217_flag.get()._field__default=(*(_17137_var));
	_17217_flag.get()._field__data=_17137_var;
}







std::ostream &operator<<(std::ostream &_Stream, _200613ba5_FlagSet _Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eec88d86_to_str(_1eec889ac_Enum* _self_) {
	return (*_self_)._field_ident;
}



inline jule::Bool _1eec8923d_equals(jule::Ptr<_1eec889ac_Enum> _self_,jule::Ptr<_1eee76b45_TypeKind> _3826_other) {
	jule::Ptr<_1eec889ac_Enum> _3913_enm = _1eee79a6b_enm(_3826_other.ptr());
	return _self_ == _3913_enm;
}



inline jule::Ptr<_1eec87d0d_EnumItem> _1eec89727_find_item(_1eec889ac_Enum* _self_,jule::Str _4732_ident) {
	{
		auto &expr = (*_self_)._field_items;
		auto it = expr.begin();
		_iter_begin_202a25e0b:;
		if (it != expr.end()) {
			jule::Ptr<_1eec87d0d_EnumItem> _202a25ec7_item = *it;
			{
				if (_202a25ec7_item.get()._field_ident == _4732_ident) {
					return _202a25ec7_item;
				}
			}
			_iter_next_202a25e0b:;
			++it;
			goto _iter_begin_202a25e0b;
		}
		_iter_end_202a25e0b:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _1eec889ac_Enum _Src) {
	_Stream << _1eec88d86_to_str(&_Src);
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e1de3_StructDecl _Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e2443_TraitDecl _Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02e2bb3_is_trait_impl(_1e02e2993_Impl* _self_) {
	return ((*_self_)._field_base != nullptr);
}



inline jule::Bool _1e02e2d28_is_struct_impl(_1e02e2993_Impl* _self_) {
	return ((*_self_)._field_base == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e2993_Impl _Src) {
	_Stream << "Impl{";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e0286bac_is_prim(_1e029b2ba_IdentTypeDecl* _self_) {
	return (*_self_)._field_token._field_id == static_cast<jule::U32>(1LLU);
}







std::ostream &operator<<(std::ostream &_Stream, _1e029b2ba_IdentTypeDecl _Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0181a63_Expr _Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "range:" << _Src._field_range << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0181c83_UseExpr _Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e01e9c96_is_decl(_1e01be3a8_Node* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02e0d9d_EnumDecl>>() || _match_expr.type_is<jule::Ptr<_1e02da32b_FnDecl>>() || _match_expr.type_is<jule::Ptr<_1e02e1de3_StructDecl>>() || _match_expr.type_is<jule::Ptr<_1e02e2443_TraitDecl>>() || _match_expr.type_is<jule::Ptr<_1e02dde01_TypeAliasDecl>>() || _match_expr.type_is<jule::Ptr<_1e02e160c_FieldDecl>>() || _match_expr.type_is<jule::Ptr<_1e02e009a_UseDecl>>() || _match_expr.type_is<jule::Ptr<_1e02daea8_VarDecl>>() || _match_expr.type_is<jule::Ptr<_1e01c3db3_TypeDecl>>()) {
			_case_begin_201005310:;
			{
				return true;
			}
		}
		else {
			_case_begin_2010055b8:;
			{
				return false;
			}
		}
		_match_end_201005563:;
	}
}



inline jule::Bool _1e025331b_is_directive(_1e01be3a8_Node* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02812b1_Directive>>()) {
			_case_begin_201006a4d:;
			{
				return true;
			}
		}
		else {
			_case_begin_201007301:;
			{
				return false;
			}
		}
		_match_end_20100729b:;
	}
}



inline jule::Bool _1e026a465_is_impl(_1e01be3a8_Node* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02e2993_Impl>>()) {
			_case_begin_201007d18:;
			{
				return true;
			}
		}
		else {
			_case_begin_201008225:;
			{
				return false;
			}
		}
		_match_end_2010081c0:;
	}
}



inline jule::Bool _1e027644e_is_use_decl(_1e01be3a8_Node* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1e02e009a_UseDecl>>()) {
			_case_begin_201008b0a:;
			{
				return true;
			}
		}
		else {
			_case_begin_20100916b:;
			{
				return false;
			}
		}
		_match_end_201009116:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1e01be3a8_Node _Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e018e8c8_is_nil(_1e0182404_LitExpr* _self_) {
	return ((*_self_)._field_value == jule::Str("nil", 3));
}







std::ostream &operator<<(std::ostream &_Stream, _1e0182404_LitExpr _Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0182624_UnsafeExpr _Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ed116754_AssignInfo _Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0182844_CoExpr _Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e0221196_is_self(_1e0182a64_IdentExpr* _self_) {
	return ((*_self_)._field_ident == jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, _1e0182a64_IdentExpr _Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0182c84_UnaryExpr _Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda4512_Assign _Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e0182ea4_VariadicExpr _Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02812b1_Directive _Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d7548_NsSelectionExpr _Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d7768_SubIdentExpr _Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d7988_BinopExpr _Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eeda5513_ScopeLabel _Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e01c46ee_unhandled(_1e02d7ba8_FnCallExpr* _self_) {
	return ((*_self_)._field_exception == nullptr);
}



inline jule::Bool _1e01831c4_ignored(_1e02d7ba8_FnCallExpr* _self_) {
	return ((*_self_)._field_exception != nullptr) && (*_self_)._field_exception.get()._field_deferred;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d7ba8_FnCallExpr _Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e0196616_is_targeted(_1e02d7dc8_FieldExprPair* _self_) {
	return (*_self_)._field_field._field_id != static_cast<jule::U32>(0LLU);
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d7dc8_FieldExprPair _Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ee2449b3_FieldIns> _1ee23dda8_instance(jule::Ptr<_1ee23da34_Field> _self_) {
	return jule::new_ptr<_1ee2449b3_FieldIns>(_1ee2449b3_FieldIns(_self_,_self_.get()._field_kind.get()._field_kind,jule::Ptr<_1eee43b89_Data>()));
}







std::ostream &operator<<(std::ostream &_Stream, _1ee23da34_Field _Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc0e79_find_package(_1eedc08c4_ImportInfo* _self_,jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1eedc08c4_ImportInfo> _1eedc1331_select_package(_1eedc08c4_ImportInfo* _self_,jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1eedeb24b_Var> _1eedc17b5_find_var(_1eedc08c4_ImportInfo* _self_,jule::Str _16431_ident,jule::Bool _16443_cpp_linked) {
	if ((!(_1eedc3388_is_lookupable(&(*_self_), _16431_ident)))) {
		return nullptr;
	}
	return _1eedbd251_find_var_in_package((*_self_)._field_package.get()._field_files,_16431_ident,false);
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eedc1c49_find_type_alias(_1eedc08c4_ImportInfo* _self_,jule::Str _17738_ident,jule::Bool _17750_cpp_linked) {
	if ((!(_1eedc3388_is_lookupable(&(*_self_), _17738_ident)))) {
		return nullptr;
	}
	return _1eedbd7a1_find_type_alias_in_package((*_self_)._field_package.get()._field_files,_17738_ident,false);
}



inline jule::Ptr<_1ee242032_Struct> _1eedc21cd_find_struct(_1eedc08c4_ImportInfo* _self_,jule::Str _19034_ident,jule::Bool _19046_cpp_linked) {
	if ((!(_1eedc3388_is_lookupable(&(*_self_), _19034_ident)))) {
		return nullptr;
	}
	return _1eedbdc57_find_struct_in_package((*_self_)._field_package.get()._field_files,_19034_ident,false);
}



inline jule::Ptr<_1ee2579b5_Fn> _1eedc2662_find_fn(_1eedc08c4_ImportInfo* _self_,jule::Str _20330_ident,jule::Bool _20342_cpp_linked) {
	if ((!(_1eedc3388_is_lookupable(&(*_self_), _20330_ident)))) {
		return nullptr;
	}
	return _1eedbe263_find_fn_in_package((*_self_)._field_package.get()._field_files,_20330_ident,false);
}



inline jule::Ptr<_1eec8627e_Trait> _1eedc2a19_find_trait(_1eedc08c4_ImportInfo* _self_,jule::Str _21533_ident) {
	if ((!(_1eedc3388_is_lookupable(&(*_self_), _21533_ident)))) {
		return nullptr;
	}
	return _1eedbe64d_find_trait_in_package((*_self_)._field_package.get()._field_files,_21533_ident);
}



inline jule::Ptr<_1eec889ac_Enum> _1eedc2dc1_find_enum(_1eedc08c4_ImportInfo* _self_,jule::Str _22732_ident) {
	if ((!(_1eedc3388_is_lookupable(&(*_self_), _22732_ident)))) {
		return nullptr;
	}
	return _1eedbea38_find_enum_in_package((*_self_)._field_package.get()._field_files,_22732_ident);
}



inline jule::Bool _1eedc3388_is_lookupable(_1eedc08c4_ImportInfo* _self_,jule::Str _23728_ident) {
	if ((*_self_)._field_cpp_linked) {
		return false;
	}
	if ((!((*_self_)._field_import_all))) {
		if (((*_self_)._field_alias.len() != 0LL) || _1eedc3740_exist_ident(&(*_self_), jule::Str("self", 4))) {
			return true;
		}
		if (((*_self_)._field_selected.len() > 0LL)) {
			if ((!(_1eedc3740_exist_ident(&(*_self_), _23728_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _1eedc3740_exist_ident(_1eedc08c4_ImportInfo* _self_,jule::Str _25726_ident) {
	{
		auto &expr = (*_self_)._field_selected;
		auto it = expr.begin();
		_iter_begin_202827878:;
		if (it != expr.end()) {
			_1e02c1d07_Token &_202827944_sident = *it;
			{
				if (_202827944_sident._field_kind == _25726_ident) {
					return true;
				}
			}
			_iter_next_202827878:;
			++it;
			goto _iter_begin_202827878;
		}
		_iter_end_202827878:;
	}
	return false;
}



inline jule::Bool _1eedc3a5e_is_accessible_via_selection(_1eedc08c4_ImportInfo* _self_) {
	return ((*_self_)._field_import_all || ((*_self_)._field_selected.len() == 0LL)) || _1eedc3740_exist_ident(&(*_self_), jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, _1eedc08c4_ImportInfo _Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package << ", ";
	_Stream << "mod_id:" << _Src._field_mod_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d80e8_StructLit _Src) {
	_Stream << "StructLit{";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ee24550d_StructIns> _1ee2424c7_instance(jule::Ptr<_1ee242032_Struct> _self_) {
	if ((_self_.get()._field_generics.len() == 0LL) && (_self_.get()._field_instances.len() == 1LL)) {
		return _self_.get()._field_instances[0LL];
	}
	jule::Ptr<_1ee24550d_StructIns> _10017_ins = jule::new_ptr<_1ee24550d_StructIns>(_1ee24550d_StructIns(jule::Bool(),_self_,jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee2449b3_FieldIns>>::alloc(0LL,static_cast<jule::I32>(_self_.get()._field_fields.len())),jule::Slice<jule::Ptr<_1ee2579b5_Fn>>(),jule::Bool(),static__1ee26013d_new(),_1ee240ddd_Operators()));
	{
		auto &expr = _self_.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_202942454:;
		if (it != expr.end()) {
			jule::Ptr<_1ee23da34_Field> _202943488_f = *it;
			{
				_10017_ins.get()._field_fields = jule::alloc_for_append(_10017_ins.get()._field_fields,1);_10017_ins.get()._field_fields.__push(_1ee23dda8_instance(_202943488_f));
				if (((!(_202943488_f.get()._field_mutable)) && (_202943488_f.get()._field_kind.get()._field_kind != nullptr)) && _1eee782a6_mutable(_202943488_f.get()._field_kind.get()._field_kind.ptr())) {
					_10017_ins.get()._field_mutable=true;
				}
			}
			_iter_next_202942454:;
			++it;
			goto _iter_begin_202942454;
		}
		_iter_end_202942454:;
	}
	if ((_self_.get()._field_generics.len() == 0LL)) {
		_10017_ins.get()._field_methods=_self_.get()._field_methods;
	} else {
		_10017_ins.get()._field_methods=jule::Slice<jule::Ptr<_1ee2579b5_Fn>>::alloc(0LL,static_cast<jule::I32>(_self_.get()._field_methods.len()));
		{
			auto &expr = _self_.get()._field_methods;
			auto it = expr.begin();
			_iter_begin_202946601:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2579b5_Fn> _202946ea3_f = *it;
				{
					jule::Ptr<_1ee2579b5_Fn> _11825_fins = jule::new_ptr<_1ee2579b5_Fn>((*(_202946ea3_f)));
					_11825_fins.get()._field_instances=nullptr;
					_10017_ins.get()._field_methods = jule::alloc_for_append(_10017_ins.get()._field_methods,1);_10017_ins.get()._field_methods.__push(_11825_fins);
				}
				_iter_next_202946601:;
				++it;
				goto _iter_begin_202946601;
			}
			_iter_end_202946601:;
		}
	}
	return _10017_ins;
}



inline jule::Ptr<_1ee24550d_StructIns> _1ee24287e_append_instance(_1ee242032_Struct* _self_,jule::Ptr<_1ee24550d_StructIns>& _12939_ins) {
	if (((*_self_)._field_generics.len() == 0LL) && ((*_self_)._field_instances.len() == 1LL)) {
		return (*_self_)._field_instances[0LL];
	}
	{
		auto &expr = (*_self_)._field_instances;
		auto it = expr.begin();
		_iter_begin_20294947d:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _202949bba_ains = *it;
			{
				if (_1ee24629a_same(_202949bba_ains.ptr(), _12939_ins)) {
					return _202949bba_ains;
				}
			}
			_iter_next_20294947d:;
			++it;
			goto _iter_begin_20294947d;
		}
		_iter_end_20294947d:;
	}
	(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_12939_ins);
	return nullptr;
}



inline jule::Ptr<_1ee2579b5_Fn> _1ee242d13_find_method(_1ee242032_Struct* _self_,jule::Str _14734_ident,jule::Bool _14746_statically) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_20294be0e:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _20294beca_f = *it;
			{
				if ((_20294beca_f.get()._field_statically == _14746_statically) && (_20294beca_f.get()._field_ident == _14734_ident)) {
					return _20294beca_f;
				}
			}
			_iter_next_20294be0e:;
			++it;
			goto _iter_begin_20294be0e;
		}
		_iter_end_20294be0e:;
	}
	return nullptr;
}



inline jule::Ptr<_1eedeb24b_Var> _1ee2431ba_find_static(_1ee242032_Struct* _self_,jule::Str _15834_ident) {
	{
		auto &expr = (*_self_)._field_statics;
		auto it = expr.begin();
		_iter_begin_20294d76d:;
		if (it != expr.end()) {
			jule::Ptr<_1eedeb24b_Var> _20294d839_v = *it;
			{
				if (_20294d839_v.get()._field_ident == _15834_ident) {
					return _20294d839_v;
				}
			}
			_iter_next_20294d76d:;
			++it;
			goto _iter_begin_20294d76d;
		}
		_iter_end_20294d76d:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee23da34_Field> _1ee243572_find_field(_1ee242032_Struct* _self_,jule::Str _16933_ident) {
	{
		auto &expr = (*_self_)._field_fields;
		auto it = expr.begin();
		_iter_begin_20294ebd1:;
		if (it != expr.end()) {
			jule::Ptr<_1ee23da34_Field> _20294ec9c_f = *it;
			{
				if (_20294ec9c_f.get()._field_ident == _16933_ident) {
					return _20294ec9c_f;
				}
			}
			_iter_next_20294ebd1:;
			++it;
			goto _iter_begin_20294ebd1;
		}
		_iter_end_20294ebd1:;
	}
	return nullptr;
}



inline jule::Bool _1ee243929_is_implements(_1ee242032_Struct* _self_,jule::Ptr<_1eec8627e_Trait> _17932_t) {
	{
		auto &expr = (*_self_)._field_implements;
		auto it = expr.begin();
		_iter_begin_202951144:;
		if (it != expr.end()) {
			jule::Ptr<_1eec8627e_Trait> &_202951210_it = *it;
			{
				if (_17932_t == _202951210_it) {
					return true;
				}
			}
			_iter_next_202951144:;
			++it;
			goto _iter_begin_202951144;
		}
		_iter_end_202951144:;
	}
	return false;
}



inline jule::Bool _1ee243cd1_is_derives(_1ee242032_Struct* _self_,jule::Str _18929_ident) {
	{
		auto &expr = (*_self_)._field_directives;
		auto it = expr.begin();
		_iter_begin_202952475:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> &_202952541_d = *it;
			{
				if ((_202952541_d.get()._field_tag._field_kind == jule::Str("derive", 6))) {
					if ((_202952541_d.get()._field_args.len() == 1LL) && (_202952541_d.get()._field_args[0LL]._field_kind == _18929_ident)) {
						return true;
					}
				}
			}
			_iter_next_202952475:;
			++it;
			goto _iter_begin_202952475;
		}
		_iter_end_202952475:;
	}
	return false;
}



inline jule::Bool _1ee244188_is_uses(_1ee242032_Struct* _self_,jule::Ptr<_1ee242032_Struct> _20126_s) {
	{
		auto &expr = (*_self_)._field_uses;
		auto it = expr.begin();
		_iter_begin_2029549c7:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> &_202954a93_u = *it;
			{
				while (_20126_s == _202954a93_u) {
					{
						return true;
					}
				_iter_next_202954ec2:;
				}
				_iter_end_202954ec2:;
			}
			_iter_next_2029549c7:;
			++it;
			goto _iter_begin_2029549c7;
		}
		_iter_end_2029549c7:;
	}
	return false;
}



inline jule::Bool _1ee244463_has_ref_accessible(_1ee242032_Struct* _self_) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_202955830:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> &_202955a2d_m = *it;
			{
				if ((_202955a2d_m.get()._field_params.len() > 0LL) && _1ee256673_is_ref(_202955a2d_m.get()._field_params[0LL].ptr())) {
					return true;
				}
			}
			_iter_next_202955830:;
			++it;
			goto _iter_begin_202955830;
		}
		_iter_end_202955830:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee242032_Struct _Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e0197b12_is_empty(_1e02d8318_BraceLit* _self_) {
	return ((*_self_)._field_exprs.len() == 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d8318_BraceLit _Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1ee24592b_to_str(_1ee24550d_StructIns* _self_) {
	jule::Str _24417_kind = jule::Str();
	_24417_kind+=(*_self_)._field_decl.get()._field_ident;
	if (((*_self_)._field_generics.len() > 0LL)) {
		_24417_kind+=jule::Str("[", 1);
		{
			auto &expr = (*_self_)._field_generics;
			auto it = expr.begin();
			_iter_begin_202958778:;
			if (it != expr.end()) {
				jule::Ptr<_1eee76b45_TypeKind> &_202958910_g = *it;
				{
					_24417_kind+=_1eee77063_to_str(_202958910_g.ptr());
					_24417_kind+=jule::Str(",", 1);
				}
				_iter_next_202958778:;
				++it;
				goto _iter_begin_202958778;
			}
			_iter_end_202958778:;
		}
		(_24417_kind).mut_slice(0LL,_24417_kind.len() - 1LL);
		_24417_kind+=jule::Str("]", 1);
	}
	return _24417_kind;
}



inline jule::Bool _1ee245cd3_equals(jule::Ptr<_1ee24550d_StructIns> _self_,jule::Ptr<_1eee76b45_TypeKind> _25926_other) {
	jule::Ptr<_1ee24550d_StructIns> _26013_s = _1eee7a6c6_strct(_25926_other.ptr());
	if ((_26013_s == nullptr)) {
		return false;
	}
	if (_self_.get()._field_decl != _26013_s.get()._field_decl) {
		return false;
	}
	if (_self_.get()._field_generics.len() != static_cast<jule::I32>(static_cast<jule::I32>(_26013_s.get()._field_generics.len()))) {
		return false;
	}
	jule::I32 _27317_i = 0LL;
	for (; _27317_i < static_cast<jule::I32>(static_cast<jule::I32>(_self_.get()._field_generics.len())); (_27317_i)++) {
		{
			if ((!(_1eee7741a_equals(_self_.get()._field_generics[_27317_i], _26013_s.get()._field_generics[_27317_i])))) {
				return false;
			}
		}
	_iter_next_20295d030:;
	}
	_iter_end_20295d030:;
	return true;
}



inline jule::Bool _1ee24629a_same(_1ee24550d_StructIns* _self_,jule::Ptr<_1ee24550d_StructIns> _28723_s) {
	if (((*_self_)._field_decl != _28723_s.get()._field_decl) || (_28723_s.get()._field_generics.len() != static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_generics.len())))) {
		return false;
	}
	{
		auto &expr = (*_self_)._field_generics;
		auto it = expr.begin();
		_iter_begin_202960186:;
		if (it != expr.end()) {
			jule::I32 _2029613a7_i = it - expr.begin();
			jule::Ptr<_1eee76b45_TypeKind> &_20296153e_g = *it;
			{
				if ((!(_1eee7741a_equals(_20296153e_g, _28723_s.get()._field_generics[_2029613a7_i])))) {
					return false;
				}
			}
			_iter_next_202960186:;
			++it;
			_2029613a7_i++;
			goto _iter_begin_202960186;
		}
		_iter_end_202960186:;
	}
	return true;
}



inline jule::Ptr<_1ee2579b5_Fn> _1ee24672e_find_method(_1ee24550d_StructIns* _self_,jule::Str _30234_ident,jule::Bool _30246_statically) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_202963255:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202963321_f = *it;
			{
				if ((_202963321_f.get()._field_statically == _30246_statically) && (_202963321_f.get()._field_ident == _30234_ident)) {
					return _202963321_f;
				}
			}
			_iter_next_202963255:;
			++it;
			goto _iter_begin_202963255;
		}
		_iter_end_202963255:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee2449b3_FieldIns> _1ee246ad6_find_field(_1ee24550d_StructIns* _self_,jule::Str _31333_ident) {
	{
		auto &expr = (*_self_)._field_fields;
		auto it = expr.begin();
		_iter_begin_202964ab4:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2449b3_FieldIns> _202964b80_f = *it;
			{
				if (_202964b80_f.get()._field_decl.get()._field_ident == _31333_ident) {
					return _202964b80_f;
				}
			}
			_iter_next_202964ab4:;
			++it;
			goto _iter_begin_202964ab4;
		}
		_iter_end_202964ab4:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24550d_StructIns _Src) {
	_Stream << _1ee24592b_to_str(&_Src);
	return _Stream;
}



inline jule::Bool _1eedeb669_is_initialized(_1eedeb24b_Var* _self_) {
	return ((*_self_)._field_value != nullptr);
}



inline jule::Bool _1eedeb944_is_type_inferred(_1eedeb24b_Var* _self_) {
	return ((*_self_)._field_kind == nullptr) || ((*_self_)._field_kind.get()._field_decl == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1eedeb24b_Var _Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d8538_KeyValPair _Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline void _1eee2b105_push_err(_1eee2aa61_TypeCompatibilityChecker* _self_,jule::Str _13027_fmt,jule::Slice<jule::Any> _13040_args) {
	_1eedcd2d8_push_err((*_self_)._field_s.ptr(), (*_self_)._field_error_token,_13027_fmt,_13040_args);
}



inline jule::Bool _1eee2b3d0_check_trait(_1eee2aa61_TypeCompatibilityChecker* _self_) {
	jule::Bool _13432_ok = jule::Bool();
	if (_1eee77c01_is_nil((*_self_)._field_src.ptr())) {
		_13432_ok = true;
		return _13432_ok;
	}
	jule::Ptr<_1eec8627e_Trait> _13913_trt = _1eee7a9a1_trt((*_self_)._field_dest.ptr());
	jule::Bool _14017_ref = false;
	{
		
		if ((_1eee794b6_sptr((*_self_)._field_src.ptr()) != nullptr)) {
			_case_begin_202eacc33:;
			{
				_14017_ref=true;
				(*_self_)._field_src=_1eee794b6_sptr((*_self_)._field_src.ptr()).get()._field_elem;
				if ((_1eee7a6c6_strct((*_self_)._field_src.ptr()) == nullptr)) {
					_13432_ok = false;
					return _13432_ok;
				}
				goto _case_begin_202eaccee;
			}
		}
		else if ((_1eee7a6c6_strct((*_self_)._field_src.ptr()) != nullptr)) {
			_case_begin_202eaccee:;
			{
				jule::Ptr<_1ee24550d_StructIns> _15117_s = _1eee7a6c6_strct((*_self_)._field_src.ptr());
				if ((!(_1ee243929_is_implements(_15117_s.get()._field_decl.ptr(), _13913_trt)))) {
					_13432_ok = false;
					return _13432_ok;
				}
				if ((!(_14017_ref)) && _1eee07741_trait_has_reference_receiver(_13913_trt)) {
					_1eee2b105_push_err(&(*_self_), jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_13432_ok = false;
					return _13432_ok;
				}
				_13432_ok = true;
				return _13432_ok;
			}
		}
		else if ((_1eee7a9a1_trt((*_self_)._field_src.ptr()) != nullptr)) {
			_case_begin_202eacd65:;
			{
				_13432_ok = _13913_trt == _1eee7a9a1_trt((*_self_)._field_src.ptr());
				return _13432_ok;
			}
		}
		else {
			_case_begin_202eac57e:;
			{
				_13432_ok = false;
				return _13432_ok;
			}
		}
		_match_end_202eac507:;
	}
}



inline jule::Bool _1eee2b6aa_check_ptr(_1eee2aa61_TypeCompatibilityChecker* _self_) {
	jule::Bool _17130_ok = jule::Bool();
	if (_1eee77c01_is_nil((*_self_)._field_src.ptr())) {
		_17130_ok = true;
		return _17130_ok;
	}
	jule::Ptr<_1eee89a04_Ptr> _17617_dest = _1eee79791_ptr((*_self_)._field_dest.ptr());
	if (_1eee8a64d_is_unsafe(_17617_dest.ptr())) {
		_17130_ok = true;
		return _17130_ok;
	}
	_17130_ok = _1eee7741a_equals((*_self_)._field_dest, (*_self_)._field_src);
	return _17130_ok;
}



inline jule::Bool _1eee2b985_check_prim(_1eee2aa61_TypeCompatibilityChecker* _self_) {
	jule::Bool _18531_ok = jule::Bool();
	if ((!((*_self_)._field_dest.get()._field_variadic))) {
		jule::Ptr<_1eee7bead_Prim> _18717_prim = _1eee791db_prim((*_self_)._field_dest.ptr());
		if ((_18717_prim != nullptr) && _1eee809b7_is_any(_18717_prim.ptr())) {
			_18531_ok = true;
			return _18531_ok;
		}
	}
	_18531_ok = _1eee7741a_equals((*_self_)._field_dest, (*_self_)._field_src);
	return _18531_ok;
}



inline jule::Bool _1eee2bc60_check(_1eee2aa61_TypeCompatibilityChecker* _self_) {
	jule::Bool _19526_ok = jule::Bool();
	if ((_1eee79791_ptr((*_self_)._field_dest.ptr()) != nullptr)) {
		_19526_ok = _1eee2b6aa_check_ptr(&(*_self_));
		return _19526_ok;
	}
	if (_1eee78581_nil_compatible((*_self_)._field_dest.ptr())) {
		if (_1eee77c01_is_nil((*_self_)._field_src.ptr())) {
			_19526_ok = true;
			return _19526_ok;
		}
	}
	{
		
		if ((_1eee791db_prim((*_self_)._field_dest.ptr()) != nullptr)) {
			_case_begin_202eb9844:;
			{
				_19526_ok = _1eee2b985_check_prim(&(*_self_));
				return _19526_ok;
			}
		}
		else if ((_1eee7a9a1_trt((*_self_)._field_dest.ptr()) != nullptr)) {
			_case_begin_202eb949d:;
			{
				_19526_ok = _1eee2b3d0_check_trait(&(*_self_));
				return _19526_ok;
			}
		}
		else {
			_case_begin_202eb8d82:;
			{
				_19526_ok = _1eee7741a_equals((*_self_)._field_dest, (*_self_)._field_src);
				return _19526_ok;
			}
		}
		_match_end_202eb8ca5:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1eee2aa61_TypeCompatibilityChecker _Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1eee2c8ed_push_err(_1eee2c3ae_AssignTypeChecker* _self_,jule::Str _22527_fmt,jule::Slice<jule::Any> _22540_args) {
	_1eedcd2d8_push_err((*_self_)._field_s.ptr(), (*_self_)._field_error_token,_22527_fmt,_22540_args);
}



inline jule::Bool _1eee2cbc8_check_validity(_1eee2c3ae_AssignTypeChecker* _self_) {
	jule::Bool _23017_valid = true;
	{
		
		if ((_1eee7a3eb_fnc((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202ebcabc:;
			{
				jule::Ptr<_1ee25b4ad_FnIns> _23317_f = _1eee7a3eb_fnc((*_self_)._field_d.get()._field_kind.ptr());
				{
					
					if (_1ee25c13a_is_builtin(_23317_f.ptr())) {
						_case_begin_202ebe2b6:;
						{
							_1eee2c8ed_push_err(&(*_self_), jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if (_23317_f.get()._field_decl.get()._field_cpp_linked) {
						_case_begin_202ebe33d:;
						{
							_1eee2c8ed_push_err(&(*_self_), jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if (_1ee258257_is_method(_23317_f.get()._field_decl.ptr())) {
						_case_begin_202ebe3b5:;
						{
							_1eee2c8ed_push_err(&(*_self_), jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((_23317_f.get()._field_decl.get()._field_generics.len() > 0LL)) {
						_case_begin_202ebe43c:;
						{
							_1eee2c8ed_push_err(&(*_self_), jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					_match_end_202ebe1c8:;
				}
			}
		}
		else if ((_1eee7b056_tup((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202ebcb44:;
			{
				_1eee2c8ed_push_err(&(*_self_), jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23017_valid=false;
			}
		}
		_match_end_202ebca01:;
	}
	return _23017_valid;
}



inline jule::Bool _1eee2cea3_check_const(_1eee2c3ae_AssignTypeChecker* _self_) {
	if ((((!(_1eee44690_is_const((*_self_)._field_d.ptr()))) || (_1eee791db_prim((*_self_)._field_dest.ptr()) == nullptr)) || (_1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr()) == nullptr)) || (!(_1eeda271e_is_num(_1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr()).get()._field_kind)))) {
		return false;
	}
	if ((*_self_)._field_d.get()._field_model != (*_self_)._field_d.get()._field_constant) {
		return false;
	}
	jule::Str _26913_kind = _1eee791db_prim((*_self_)._field_dest.ptr()).get()._field_kind;
	{
		
		if (_1eeda2411_is_float(_26913_kind)) {
			_case_begin_202ec7874:;
			{
				if ((!(_1eee0c49e_float_assignable(_26913_kind,(*_self_)._field_d)))) {
					_1eee2c8ed_push_err(&(*_self_), jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else if (_1eeda20ae_is_int(_26913_kind)) {
			_case_begin_202ec7973:;
			{
				if ((!(_1eee2a434_int_assignable(_26913_kind,(*_self_)._field_d)))) {
					_1eee2c8ed_push_err(&(*_self_), jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else {
			_case_begin_202ec7258:;
			{
				return false;
			}
		}
		_match_end_202ec7203:;
	}
	return true;
}



inline jule::Bool _1eee2d27d_is_prim(_1eee2c3ae_AssignTypeChecker* _self_) {
	if ((*_self_)._field_dest.get()._field_variadic || (*_self_)._field_d.get()._field_kind.get()._field_variadic) {
		return false;
	}
	if (_1eee77926_cpp_linked((*_self_)._field_dest.ptr()) || _1eee77926_cpp_linked((*_self_)._field_d.get()._field_kind.ptr())) {
		return false;
	}
	return (_1eee791db_prim((*_self_)._field_dest.ptr()) != nullptr) && (_1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr);
}



inline jule::Bool _1eee2d558_check_compatibility(_1eee2c3ae_AssignTypeChecker* _self_) {
	{
		
		if (((*_self_)._field_d == nullptr)) {
			_case_begin_202ecd23c:;
			{
				return false;
			}
		}
		else if ((!(_1eee2cbc8_check_validity(&(*_self_))))) {
			_case_begin_202ecd2b4:;
			{
				return false;
			}
		}
		else if (_1eee2cea3_check_const(&(*_self_))) {
			_case_begin_202ecd33b:;
			{
				return true;
			}
		}
		else if ((_1eee79a6b_enm((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_202ecd3b3:;
			{
				jule::Ptr<_1eee76b45_TypeKind> _31121_dkind = (*_self_)._field_dest;
				if ((_1eee79a6b_enm((*_self_)._field_dest.ptr()) != nullptr)) {
					_31121_dkind=_1eee79a6b_enm((*_self_)._field_dest.ptr()).get()._field_kind.get()._field_kind;
				} else if ((_1eee791db_prim((*_self_)._field_dest.ptr()) == nullptr)) {
					goto _match_end_202ecd0e9;
				}
				if (_1eed9d495_types_are_compatible(_1eee791db_prim(_1eee79a6b_enm((*_self_)._field_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind.ptr()).get()._field_kind,_1eee791db_prim(_31121_dkind.ptr()).get()._field_kind)) {
					return true;
				}
			}
		}
		else if (_1eee2d27d_is_prim(&(*_self_))) {
			_case_begin_202ecd43a:;
			{
				jule::Ptr<_1eee7bead_Prim> _32117_dest = _1eee791db_prim((*_self_)._field_dest.ptr());
				if (_1eee809b7_is_any(_32117_dest.ptr())) {
					return true;
				}
				jule::Ptr<_1eee7bead_Prim> _32521_src = _1eee791db_prim((*_self_)._field_d.get()._field_kind.ptr());
				if (_1eed9d495_types_are_compatible(_32117_dest.get()._field_kind,_32521_src.get()._field_kind)) {
					return true;
				}
			}
		}
		_match_end_202ecd0e9:;
	}
	return _1eedd4dd3_check_type_compatibility((*_self_)._field_s, (*_self_)._field_dest,(*_self_)._field_d.get()._field_kind,(*_self_)._field_error_token);
}



inline jule::Bool _1eee2d833_check(_1eee2c3ae_AssignTypeChecker* _self_) {
	jule::Bool _33413_ok = _1eee2d558_check_compatibility(&(*_self_));
	if (_33413_ok) {
		_1eee96acc_apply_implicit_cast((*_self_)._field_dest,(*_self_)._field_d);
	}
	return _33413_ok;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee2c3ae_AssignTypeChecker _Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1eee2e7e0_push_generic(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _35236_k,jule::I32 _35250_i) {
	(*_self_)._field_f.get()._field_generics[_35250_i]=_35236_k;
}



inline jule::Bool _1eee2eb64_annotate_prim(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _35644_k) {
	jule::Bool _35660_ok = jule::Bool();
	jule::Str _35713_kind = _1eee77063_to_str((*((*_self_)._field_k)).ptr());
	{
		auto &expr = (*_self_)._field_f.get()._field_decl.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_202ed92c0:;
		if (it != expr.end()) {
			jule::I32 _202ed9347_i = it - expr.begin();
			jule::Ptr<_1e02d911b_GenericDecl> _202ed959a_g = *it;
			{
				if (_35713_kind != _202ed959a_g.get()._field_ident) {
					goto _iter_next_202ed92c0;
				}
				jule::Ptr<_1eee76b45_TypeKind> _36317_t = (*_self_)._field_f.get()._field_generics[_202ed9347_i];
				{
					
					if ((_36317_t == nullptr)) {
						_case_begin_202eda942:;
						{
							_1eee2e7e0_push_generic(&(*_self_), _35644_k,_202ed9347_i);
						}
					}
					else if ((!(_1eee7741a_equals(_36317_t, _35644_k)))) {
						_case_begin_202eda9b9:;
						{
							_35660_ok = false;
							return _35660_ok;
						}
					}
					_match_end_202eda843:;
				}
				(*((*_self_)._field_k)).get()._field_kind=_35644_k.get()._field_kind;
				_35660_ok = true;
				return _35660_ok;
			}
			_iter_next_202ed92c0:;
			++it;
			_202ed9347_i++;
			goto _iter_begin_202ed92c0;
		}
		_iter_end_202ed92c0:;
	}
	_35660_ok = false;
	return _35660_ok;
}



inline jule::Bool _1eee3001b_annotate_slc(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _38043_k) {
	jule::Bool _38059_ok = jule::Bool();
	jule::Ptr<_1eee818ec_Slc> _38117_pslc = _1eee7a121_slc((*((*_self_)._field_k)).ptr());
	if ((_38117_pslc == nullptr)) {
		_38059_ok = false;
		return _38059_ok;
	}
	jule::Ptr<_1eee818ec_Slc> _38617_slc = _1eee7a121_slc(_38043_k.ptr());
	(*_self_)._field_k=(&(_38117_pslc.get()._field_elem));
	_38059_ok = _1eee31bcc_annotate_kind(&(*_self_), _38617_slc.get()._field_elem);
	return _38059_ok;
}



inline jule::Bool _1eee304a0_check_map_key(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>* _39143_k,jule::Ptr<_1eee76b45_TypeKind>& _39163_ck) {
	jule::Bool _39180_ok = jule::Bool();
	jule::Ptr<_1eee76b45_TypeKind>* _39217_old = (*_self_)._field_k;
	(*_self_)._field_k=_39143_k;
	_39180_ok=_1eee31bcc_annotate_kind(&(*_self_), _39163_ck);
	(*_self_)._field_k=_39217_old;
	return _39180_ok;
}



inline jule::Bool _1eee30857_annotate_map(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _39943_k) {
	jule::Bool _39959_ok = jule::Bool();
	jule::Ptr<_1eee832d3_Map> _40017_pmap = _1eee7ac7b_map((*((*_self_)._field_k)).ptr());
	if ((_40017_pmap == nullptr)) {
		_39959_ok = false;
		return _39959_ok;
	}
	jule::Ptr<_1eee832d3_Map> _40517_m = _1eee7ac7b_map(_39943_k.ptr());
	_39959_ok = _1eee304a0_check_map_key(&(*_self_), (&(_40017_pmap.get()._field_key)),_40517_m.get()._field_key) && _1eee304a0_check_map_key(&(*_self_), (&(_40017_pmap.get()._field_val)),_40517_m.get()._field_val);
	return _39959_ok;
}



inline jule::Bool _1eee30c0e_annotate_fn(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _41142_k) {
	jule::Bool _41158_ok = jule::Bool();
	jule::Ptr<_1ee25b4ad_FnIns> _41217_pf = _1eee7a3eb_fnc((*((*_self_)._field_k)).ptr());
	if ((_41217_pf == nullptr)) {
		_41158_ok = false;
		return _41158_ok;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _41617_f = _1eee7a3eb_fnc(_41142_k.ptr());
	{
		
		if (_41217_pf.get()._field_params.len() != static_cast<jule::I32>(static_cast<jule::I32>(_41617_f.get()._field_params.len()))) {
			_case_begin_202ee76c9:;
			{
				_41158_ok = false;
				return _41158_ok;
			}
		}
		else if (_1ee257e7c_is_void(_41217_pf.get()._field_decl.ptr()) != _1ee257e7c_is_void(_41617_f.get()._field_decl.ptr())) {
			_case_begin_202ee7751:;
			{
				_41158_ok = false;
				return _41158_ok;
			}
		}
		_match_end_202ee760d:;
	}
	_41158_ok=true;
	jule::Ptr<_1eee76b45_TypeKind>* _42617_old = (*_self_)._field_k;
	{
		auto &expr = _41617_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_202ee9775:;
		if (it != expr.end()) {
			jule::I32 _202ee9852_i = it - expr.begin();
			jule::Ptr<_1ee25a358_ParamIns> _202ee9a50_fp = *it;
			{
				(*_self_)._field_k=(&(_41217_pf.get()._field_params[_202ee9852_i].get()._field_kind));
				_41158_ok=_1eee31bcc_annotate_kind(&(*_self_), _202ee9a50_fp.get()._field_kind) && _41158_ok;
			}
			_iter_next_202ee9775:;
			++it;
			_202ee9852_i++;
			goto _iter_begin_202ee9775;
		}
		_iter_end_202ee9775:;
	}
	if ((!(_1ee257e7c_is_void(_41217_pf.get()._field_decl.ptr())))) {
		(*_self_)._field_k=(&(_41217_pf.get()._field_result));
		_41158_ok=_1eee31bcc_annotate_kind(&(*_self_), _41617_f.get()._field_result) && _41158_ok;
	}
	(*_self_)._field_k=_42617_old;
	return _41158_ok;
}



inline jule::Bool _1eee310b6_annotate_ptr(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _44143_k) {
	jule::Bool _44159_ok = jule::Bool();
	jule::Ptr<_1eee89a04_Ptr> _44217_pptr = _1eee79791_ptr((*((*_self_)._field_k)).ptr());
	if ((_44217_pptr == nullptr)) {
		_44159_ok = false;
		return _44159_ok;
	}
	jule::Ptr<_1eee89a04_Ptr> _44717_ptr = _1eee79791_ptr(_44143_k.ptr());
	(*_self_)._field_k=(&(_44217_pptr.get()._field_elem));
	_44159_ok = _1eee31bcc_annotate_kind(&(*_self_), _44717_ptr.get()._field_elem);
	return _44159_ok;
}



inline jule::Bool _1eee3146d_annotate_sptr(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _45244_k) {
	jule::Bool _45260_ok = jule::Bool();
	jule::Ptr<_1eee80d19_Sptr> _45317_ssptr = _1eee794b6_sptr((*((*_self_)._field_k)).ptr());
	if ((_45317_ssptr == nullptr)) {
		_45260_ok = false;
		return _45260_ok;
	}
	jule::Ptr<_1eee80d19_Sptr> _45817_sptr = _1eee794b6_sptr(_45244_k.ptr());
	(*_self_)._field_k=(&(_45317_ssptr.get()._field_elem));
	_45260_ok = _1eee31bcc_annotate_kind(&(*_self_), _45817_sptr.get()._field_elem);
	return _45260_ok;
}



inline jule::Bool _1eee31825_annotate_any(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _46343_k) {
	jule::Bool _46359_ok = jule::Bool();
	jule::Str _46413_kind = _1eee77063_to_str((*((*_self_)._field_k)).ptr());
	{
		auto &expr = (*_self_)._field_f.get()._field_decl.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_203003e88:;
		if (it != expr.end()) {
			jule::I32 _203004010_i = it - expr.begin();
			jule::Ptr<_1e02d911b_GenericDecl> _203004263_g = *it;
			{
				if (_46413_kind != _203004263_g.get()._field_ident) {
					goto _iter_next_203003e88;
				}
				jule::Ptr<_1eee76b45_TypeKind> _47017_t = (*_self_)._field_f.get()._field_generics[_203004010_i];
				{
					
					if ((_47017_t == nullptr)) {
						_case_begin_20300560a:;
						{
							_1eee2e7e0_push_generic(&(*_self_), _46343_k,_203004010_i);
						}
					}
					else if ((!(_1eee7741a_equals(_47017_t, _46343_k)))) {
						_case_begin_203005682:;
						{
							_46359_ok = false;
							return _46359_ok;
						}
					}
					_match_end_20300550b:;
				}
				(*((*_self_)._field_k)).get()._field_kind=_46343_k.get()._field_kind;
				_46359_ok = true;
				return _46359_ok;
			}
			_iter_next_203003e88:;
			++it;
			_203004010_i++;
			goto _iter_begin_203003e88;
		}
		_iter_end_203003e88:;
	}
	_46359_ok = false;
	return _46359_ok;
}



inline jule::Bool _1eee31bcc_annotate_kind(_1eee2e180_DynamicTypeAnnotation* _self_,jule::Ptr<_1eee76b45_TypeKind>& _48744_k) {
	jule::Bool _48760_ok = jule::Bool();
	if (((*_self_)._field_k == nullptr) || ((*((*_self_)._field_k)) == nullptr)) {
		return _48760_ok;
	}
	{
		
		if (_1eee31825_annotate_any(&(*_self_), _48744_k)) {
			_case_begin_2030088a5:;
			{
				_48760_ok = true;
				return _48760_ok;
			}
		}
		else if ((_1eee791db_prim(_48744_k.ptr()) != nullptr)) {
			_case_begin_20300891b:;
			{
				_48760_ok = _1eee2eb64_annotate_prim(&(*_self_), _48744_k);
				return _48760_ok;
			}
		}
		else if ((_1eee7a121_slc(_48744_k.ptr()) != nullptr)) {
			_case_begin_203008597:;
			{
				_48760_ok = _1eee3001b_annotate_slc(&(*_self_), _48744_k);
				return _48760_ok;
			}
		}
		else if ((_1eee7ac7b_map(_48744_k.ptr()) != nullptr)) {
			_case_begin_20300860d:;
			{
				_48760_ok = _1eee30857_annotate_map(&(*_self_), _48744_k);
				return _48760_ok;
			}
		}
		else if ((_1eee7a3eb_fnc(_48744_k.ptr()) != nullptr)) {
			_case_begin_203008674:;
			{
				_48760_ok = _1eee30c0e_annotate_fn(&(*_self_), _48744_k);
				return _48760_ok;
			}
		}
		else if ((_1eee79791_ptr(_48744_k.ptr()) != nullptr)) {
			_case_begin_203008201:;
			{
				_48760_ok = _1eee310b6_annotate_ptr(&(*_self_), _48744_k);
				return _48760_ok;
			}
		}
		else if ((_1eee794b6_sptr(_48744_k.ptr()) != nullptr)) {
			_case_begin_203008267:;
			{
				_48760_ok = _1eee3146d_annotate_sptr(&(*_self_), _48744_k);
				return _48760_ok;
			}
		}
		else {
			_case_begin_20300818a:;
			{
				_48760_ok = false;
				return _48760_ok;
			}
		}
		_match_end_2030077c7:;
	}
}



inline jule::Bool _1eee31ea7_annotate(_1eee2e180_DynamicTypeAnnotation* _self_) {
	jule::Bool _50436_ok = jule::Bool();
	(*_self_)._field_k=(&((*_self_)._field_p.get()._field_kind));
	_50436_ok = _1eee31bcc_annotate_kind(&(*_self_), (*_self_)._field_a.get()._field_kind);
	return _50436_ok;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee2e180_DynamicTypeAnnotation _Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1eee32e64_push_err_token(_1eee32804_FnCallArgChecker* _self_,_1e02c1d07_Token _52033_token,jule::Str _52047_fmt,jule::Slice<jule::Any> _52060_args) {
	_1eedcd2d8_push_err((*_self_)._field_e.get()._field_s.ptr(), _52033_token,_52047_fmt,_52060_args);
}



inline void _1eee33360_push_err(_1eee32804_FnCallArgChecker* _self_,jule::Str _52427_fmt,jule::Slice<jule::Any> _52440_args) {
	_1eee32e64_push_err_token(&(*_self_), (*_self_)._field_error_token,_52427_fmt,_52440_args);
}



inline jule::Slice<jule::Ptr<_1ee25a358_ParamIns>> _1eee3363a_get_params(_1eee32804_FnCallArgChecker* _self_) {
	if ((((*_self_)._field_f.get()._field_params.len() > 0LL) && ((*_self_)._field_f.get()._field_params[0LL].get()._field_decl != nullptr)) && _1ee256398_is_self((*_self_)._field_f.get()._field_params[0LL].get()._field_decl.ptr())) {
		return (*_self_)._field_f.get()._field_params.slice(1LL);
	}
	return (*_self_)._field_f.get()._field_params;
}



inline jule::Bool _1eee339e2_check_counts(_1eee32804_FnCallArgChecker* _self_,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>& _53732_params) {
	jule::Bool _53755_ok = jule::Bool();
	jule::I32 _53817_n = _53732_params.len();
	if ((_53817_n > 0LL) && _1ee256398_is_self(_53732_params[0LL].get()._field_decl.ptr())) {
		(_53817_n)--;
	}
	jule::I32 _54317_diff = _53817_n - static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_args.len()));
	{
		
		if ((_54317_diff == 0LL)) {
			_case_begin_203017672:;
			{
				_53755_ok = true;
				return _53755_ok;
			}
		}
		else if ((_53817_n > 0LL) && _53732_params[(_53817_n - 1LL)].get()._field_decl.get()._field_variadic) {
			_case_begin_2030176e9:;
			{
				_53755_ok = true;
				return _53755_ok;
			}
		}
		else if ((_54317_diff < 0LL) || (_54317_diff > static_cast<jule::I32>(static_cast<jule::I32>(_53732_params.len())))) {
			_case_begin_203017771:;
			{
				_1eee33360_push_err(&(*_self_), jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_53755_ok = false;
				return _53755_ok;
			}
		}
		_match_end_203017595:;
	}
	jule::Str _55417_idents = jule::Str();
	for (; (_54317_diff > 0LL); (_54317_diff)--) {
		{
			_55417_idents+=jule::Str(", ", 2) + _53732_params[_53817_n - _54317_diff].get()._field_decl.get()._field_ident;
		}
	_iter_next_20301a048:;
	}
	_iter_end_20301a048:;
	(_55417_idents).mut_slice(2LL);
	_1eee33360_push_err(&(*_self_), jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_55417_idents)}));
	_53755_ok = false;
	return _53755_ok;
}



inline jule::Bool _1eee34053_check_arg(_1eee32804_FnCallArgChecker* _self_,jule::Ptr<_1ee25a358_ParamIns>& _56433_p,jule::Ptr<_1eee43b89_Data>& _56452_arg,_1e02c1d07_Token& _56469_error_token) {
	jule::Bool _56491_ok = jule::Bool();
	if ((*_self_)._field_dynamic_annotation && _1ee25d58c_parameter_uses_generics(_56433_p.get()._field_decl,(*_self_)._field_f.get()._field_decl.get()._field_generics)) {
		_56491_ok=(!(_56433_p.get()._field_decl.get()._field_variadic));
		if (_56491_ok) {
			_1eee2e180_DynamicTypeAnnotation _56825_dta = _1eee2e180_DynamicTypeAnnotation((*_self_)._field_e,(*_self_)._field_f,_56433_p,_56452_arg,_56469_error_token,nullptr);
			_56491_ok=_1eee31ea7_annotate(&_56825_dta);
		}
		if ((!(_56491_ok))) {
			_1eee32e64_push_err_token(&(*_self_), _56469_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_56491_ok = false;
			return _56491_ok;
		}
	}
	if (_1eedd6cb4_check_validity_for_init_expr((*_self_)._field_e.get()._field_s, _56433_p.get()._field_decl.get()._field_mutable,_56433_p.get()._field_decl.get()._field_reference,_56433_p.get()._field_kind,_56452_arg,_56469_error_token)) {
		_1eedd482d_check_assign_type((*_self_)._field_e.get()._field_s, _56433_p.get()._field_decl.get()._field_reference,_56433_p.get()._field_kind,_56452_arg,_56469_error_token);
	}
	_56491_ok = true;
	return _56491_ok;
}



inline jule::Bool _1eee344d7_push(_1eee32804_FnCallArgChecker* _self_,jule::Ptr<_1ee25a358_ParamIns>& _59128_p,jule::Ptr<_1e0181a63_Expr> _59146_arg) {
	jule::Bool _59160_ok = jule::Bool();
	jule::Ptr<_1eee76b45_TypeKind> _59217_old = (*_self_)._field_e.get()._field_prefix;
	jule::Bool _59313_old_immut = (*_self_)._field_e.get()._field_immutable;
	jule::Ptr<_1eee43b89_Data> _59417_d = nullptr;
	(*_self_)._field_e.get()._field_immutable=(!(_59128_p.get()._field_decl.get()._field_mutable));
	if ((!((*_self_)._field_dynamic_annotation)) && (!(_59128_p.get()._field_decl.get()._field_variadic))) {
		(*_self_)._field_e.get()._field_prefix=_59128_p.get()._field_kind;
	} else {
		(*_self_)._field_e.get()._field_prefix=nullptr;
	}
	_59417_d=_1eee65738_eval_expr_kind((*_self_)._field_e, _59146_arg.get()._field_kind);
	(*_self_)._field_e.get()._field_prefix=_59217_old;
	(*_self_)._field_e.get()._field_immutable=_59313_old_immut;
	if ((_59417_d == nullptr)) {
		_59160_ok = false;
		return _59160_ok;
	}
	(*_self_)._field_arg_models = jule::alloc_for_append((*_self_)._field_arg_models,1);(*_self_)._field_arg_models.__push(jule::Any(_59417_d));
	_59160_ok = _1eee34053_check_arg(&(*_self_), _59128_p,_59417_d,_59146_arg.get()._field_token);
	return _59160_ok;
}



inline jule::Bool _1eee3496b_push_variadic(_1eee32804_FnCallArgChecker* _self_,jule::Ptr<_1ee25a358_ParamIns>& _61537_p,jule::I32 _61555_i) {
	jule::Bool _61565_ok = jule::Bool();
	_61565_ok=true;
	jule::Bool _61717_variadiced = false;
	jule::Bool _61813_more = (_61555_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_args.len()));
	jule::Ptr<_1ee24a458_SliceExprModel> _61917_model = jule::new_ptr<_1ee24a458_SliceExprModel>(_1ee24a458_SliceExprModel(_61537_p.get()._field_kind,jule::Slice<jule::Any>()));
	jule::Ptr<_1eee76b45_TypeKind> _62317_old = (*_self_)._field_e.get()._field_prefix;
	jule::Bool _62813_variadic = _61537_p.get()._field_kind.get()._field_variadic;
	_61537_p.get()._field_kind.get()._field_variadic=false;
	__JULE_DEFER({
		_61537_p.get()._field_kind.get()._field_variadic=_62813_variadic;
	});
	for (; _61555_i < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_args.len())); (_61555_i)++) {
		{
			jule::Ptr<_1e0181a63_Expr> _63521_arg = (*_self_)._field_args[_61555_i];
			{
				auto &_match_expr{ _63521_arg.get()._field_kind };
				
				if (_match_expr.type_is<jule::Ptr<_1e0182ea4_VariadicExpr>>()) {
					_case_begin_203030569:;
					{
						(*_self_)._field_e.get()._field_prefix=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(_61537_p.get()._field_kind)), 7)));
					}
				}
				else {
					_case_begin_2030321a3:;
					{
						(*_self_)._field_e.get()._field_prefix=_61537_p.get()._field_kind;
					}
				}
				_match_end_20303212b:;
			}
			jule::Ptr<_1eee43b89_Data> _64821_d = _1eee65ae0_eval((*_self_)._field_e, _63521_arg);
			if ((_64821_d == nullptr)) {
				_61565_ok=false;
				goto _iter_next_2030316e1;
			}
			if (_64821_d.get()._field_kind.get()._field_variadic) {
				_61717_variadiced=true;
				{
					auto &_match_expr{ _64821_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ee24a458_SliceExprModel>>()) {
						_case_begin_203035184:;
						{
							_61917_model=_64821_d.get()._field_model.operator jule::Ptr<_1ee24a458_SliceExprModel>();
							_61917_model.get()._field_elem_kind=_61537_p.get()._field_kind;
						}
					}
					else {
						_case_begin_203034b89:;
						{
							_61917_model=nullptr;
							(*_self_)._field_arg_models = jule::alloc_for_append((*_self_)._field_arg_models,1);(*_self_)._field_arg_models.__push(jule::Any(_64821_d));
						}
					}
					_match_end_203034b34:;
				}
				_61537_p.get()._field_kind.get()._field_variadic=true;
				_61565_ok=_61565_ok && _1eee34053_check_arg(&(*_self_), _61537_p,_64821_d,_63521_arg.get()._field_token);
				(_61555_i)++;
				goto _iter_end_2030316e1;
			}
			_61565_ok=_61565_ok && _1eee34053_check_arg(&(*_self_), _61537_p,_64821_d,_63521_arg.get()._field_token);
			_61917_model.get()._field_elems = jule::alloc_for_append(_61917_model.get()._field_elems,1);_61917_model.get()._field_elems.__push(_64821_d.get()._field_model);
		}
	_iter_next_2030316e1:;
	}
	_iter_end_2030316e1:;
	(*_self_)._field_e.get()._field_prefix=_62317_old;
	if (_61717_variadiced && _61813_more) {
		_1eee32e64_push_err_token(&(*_self_), (*_self_)._field_args[_61555_i].get()._field_token,jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	}
	if ((_61917_model != nullptr)) {
		(*_self_)._field_arg_models = jule::alloc_for_append((*_self_)._field_arg_models,1);(*_self_)._field_arg_models.__push(jule::Any(_61917_model));
	}
	return _61565_ok;
}



inline jule::Bool _1eee34d23_check_args(_1eee32804_FnCallArgChecker* _self_,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>& _69434_params) {
	jule::Bool _69457_ok = jule::Bool();
	jule::Bool _69513_arg = (*_self_)._field_e.get()._field_arg;
	(*_self_)._field_e.get()._field_arg=true;
	_69457_ok=true;
	jule::I32 _69917_i = 0LL;
	_julec_label_iter:;
	while (_69917_i < static_cast<jule::I32>(static_cast<jule::I32>(_69434_params.len()))) {
		{
			jule::Ptr<_1ee25a358_ParamIns> _70221_p = _69434_params[_69917_i];
			{
				
				if (_1ee256398_is_self(_70221_p.get()._field_decl.ptr())) {
					_case_begin_20303c71e:;
					{
						goto _match_end_20303c323;
					}
				}
				else if (_70221_p.get()._field_decl.get()._field_variadic) {
					_case_begin_20303c411:;
					{
						_69457_ok=_1eee3496b_push_variadic(&(*_self_), _70221_p,_69917_i) && _69457_ok;
						goto _iter_end_20303b883;
					}
				}
				else if ((*_self_)._field_args.len() <= _69917_i) {
					_case_begin_20303c477:;
					{
						_69457_ok=false;
						goto _iter_end_20303b883;
					}
				}
				else {
					_case_begin_20303c39a:;
					{
						_69457_ok=_1eee344d7_push(&(*_self_), _70221_p,(*_self_)._field_args[_69917_i]) && _69457_ok;
					}
				}
				_match_end_20303c323:;
			}
			(_69917_i)++;
		}
	_iter_next_20303b883:;
	}
	_iter_end_20303b883:;
	(*_self_)._field_e.get()._field_arg=_69513_arg;
	return _69457_ok;
}



inline jule::Bool _1eee35142_check_dynamic_type_annotation(_1eee32804_FnCallArgChecker* _self_) {
	jule::Bool _72450_ok = jule::Bool();
	{
		auto &expr = (*_self_)._field_f.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_203040ec5:;
		if (it != expr.end()) {
			jule::Ptr<_1eee76b45_TypeKind> _20304104c_g = *it;
			{
				if ((_20304104c_g == nullptr)) {
					_1eee33360_push_err(&(*_self_), jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_72450_ok = false;
					return _72450_ok;
				}
			}
			_iter_next_203040ec5:;
			++it;
			goto _iter_begin_203040ec5;
		}
		_iter_end_203040ec5:;
	}
	_72450_ok = true;
	return _72450_ok;
}



inline jule::Bool _1eee3540b_check(_1eee32804_FnCallArgChecker* _self_) {
	jule::Bool _73426_ok = jule::Bool();
	jule::Slice<jule::Ptr<_1ee25a358_ParamIns>> _73517_params = _1eee3363a_get_params(&(*_self_));
	_73426_ok=_1eee339e2_check_counts(&(*_self_), _73517_params);
	if ((!(_73426_ok))) {
		_73426_ok = false;
		return _73426_ok;
	}
	_73426_ok=_1eee34d23_check_args(&(*_self_), _73517_params);
	if (_73426_ok && (*_self_)._field_dynamic_annotation) {
		_73426_ok=_1eee35142_check_dynamic_type_annotation(&(*_self_));
	}
	return _73426_ok;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee32804_FnCallArgChecker _Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1eee36176_push_err(_1eee35a5a_StructLitChecker* _self_,_1e02c1d07_Token _75827_token,jule::Str _75841_fmt,jule::Slice<jule::Any> _75854_args) {
	_1eee462c9_push_err((*_self_)._field_e.ptr(), _75827_token,_75841_fmt,_75854_args);
}



inline void _1eee36572_push_suggestion(_1eee35a5a_StructLitChecker* _self_,jule::Str _76334_fmt,jule::Slice<jule::Any> _76347_args) {
	_1eee466c5_push_suggestion((*_self_)._field_e.ptr(), _76334_fmt,_76347_args);
}



inline void _1eee36a4a_push_match(_1eee35a5a_StructLitChecker* _self_,jule::Ptr<_1ee2449b3_FieldIns>& _76734_f,jule::Ptr<_1eee43b89_Data>& _76753_d,_1e02c1d07_Token& _76768_error_token) {
	
	if (_1eedd6cb4_check_validity_for_init_expr((*_self_)._field_e.get()._field_s, (!((*_self_)._field_e.get()._field_immutable)),false,_76734_f.get()._field_kind,_76753_d,_76768_error_token)) {
		_1eedd482d_check_assign_type((*_self_)._field_e.get()._field_s, false,_76734_f.get()._field_kind,_76753_d,_76768_error_token);
	}
	(*_self_)._field_args = jule::alloc_for_append((*_self_)._field_args,1);(*_self_)._field_args.__push(jule::new_ptr<_1ee2485aa_StructArgExprModel>(_1ee2485aa_StructArgExprModel(_76734_f,_76753_d.get()._field_model)));
}



inline void _1eee36e46_check_pair(_1eee35a5a_StructLitChecker* _self_,jule::Ptr<_1e02d7dc8_FieldExprPair>& _78034_pair,jule::Slice<jule::Ptr<_1e0181a63_Expr>>& _78061_exprs) {
	jule::Ptr<_1ee2449b3_FieldIns> _78217_f = _1ee246ad6_find_field((*_self_)._field_s.ptr(), _78034_pair.get()._field_field._field_kind);
	if ((_78217_f == nullptr)) {
		_1eee36176_push_err(&(*_self_), _78034_pair.get()._field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_78034_pair.get()._field_field._field_kind)}));
		return;
	}
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_e.get()._field_s.ptr(), _78217_f.get()._field_decl.get()._field_public,_78217_f.get()._field_decl.get()._field_token)))) {
		_1eee36176_push_err(&(*_self_), _78034_pair.get()._field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_78034_pair.get()._field_field._field_kind)}));
		_1eee36572_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	_julec_label_dup_lookup:;
	{
		auto &expr = _78061_exprs;
		auto it = expr.begin();
		_iter_begin_203050b94:;
		if (it != expr.end()) {
			jule::Ptr<_1e0181a63_Expr> _203050c71_expr = *it;
			{
				{
					auto &_match_expr{ _203050c71_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_1e02d7dc8_FieldExprPair>>()) {
						_case_begin_203051524:;
						{
							jule::Ptr<_1e02d7dc8_FieldExprPair> _79725_dpair = _203050c71_expr.get()._field_kind.operator jule::Ptr<_1e02d7dc8_FieldExprPair>();
							{
								
								if (_78034_pair == _79725_dpair) {
									_case_begin_203052327:;
									{
										goto _iter_end_203050b94;
									}
								}
								else if (_78034_pair.get()._field_field._field_kind == _79725_dpair.get()._field_field._field_kind) {
									_case_begin_20305239e:;
									{
										_1eee36176_push_err(&(*_self_), _78034_pair.get()._field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any(_78034_pair.get()._field_field._field_kind)}));
										goto _iter_end_203050b94;
									}
								}
								_match_end_20305225b:;
							}
						}
					}
					_match_end_2030514be:;
				}
			}
			_iter_next_203050b94:;
			++it;
			goto _iter_begin_203050b94;
		}
		_iter_end_203050b94:;
	}
	jule::Ptr<_1eee76b45_TypeKind> _80817_prefix = (*_self_)._field_e.get()._field_prefix;
	__JULE_DEFER({
		(*_self_)._field_e.get()._field_prefix=_80817_prefix;
	});
	(*_self_)._field_e.get()._field_prefix=_78217_f.get()._field_kind;
	jule::Ptr<_1eee43b89_Data> _81217_d = _1eee65738_eval_expr_kind((*_self_)._field_e, jule::Any(_78034_pair.get()._field_expr));
	if ((_81217_d == nullptr)) {
		return;
	}
	_1eee36a4a_push_match(&(*_self_), _78217_f,_81217_d,_78034_pair.get()._field_field);
}



inline jule::Bool _1eee372ed_ready_exprs(_1eee35a5a_StructLitChecker* _self_,jule::Slice<jule::Ptr<_1e0181a63_Expr>>& _81935_exprs) {
	jule::Bool _82017_ok = true;
	{
		auto &expr = _81935_exprs;
		auto it = expr.begin();
		_iter_begin_203056ccc:;
		if (it != expr.end()) {
			jule::I32 _203056d76_i = it - expr.begin();
			jule::Ptr<_1e0181a63_Expr> _2030570eb_expr = *it;
			{
				{
					auto &_match_expr{ _2030570eb_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_1e02d8538_KeyValPair>>()) {
						_case_begin_2030578d2:;
						{
							jule::Ptr<_1e02d8538_KeyValPair> _82425_pair = _2030570eb_expr.get()._field_kind.operator jule::Ptr<_1e02d8538_KeyValPair>();
							{
								auto &_match_expr{ _82425_pair.get()._field_key.get()._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_1e0182a64_IdentExpr>>()) {
									_case_begin_2030580b9:;
									{
										goto _match_end_203058927;
									}
								}
								else {
									_case_begin_20305897c:;
									{
										_1eee36176_push_err(&(*_self_), _82425_pair.get()._field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_82017_ok=false;
										goto _iter_next_203056ccc;
									}
								}
								_match_end_203058927:;
							}
							_81935_exprs[_203056d76_i].get()._field_kind=jule::Any(jule::new_ptr<_1e02d7dc8_FieldExprPair>(_1e02d7dc8_FieldExprPair(_82425_pair.get()._field_key.get()._field_token,_82425_pair.get()._field_val)));
						}
					}
					_match_end_20305787c:;
				}
			}
			_iter_next_203056ccc:;
			++it;
			_203056d76_i++;
			goto _iter_begin_203056ccc;
		}
		_iter_end_203056ccc:;
	}
	return _82017_ok;
}



inline void _1eee3761c_check(_1eee35a5a_StructLitChecker* _self_,jule::Slice<jule::Ptr<_1e0181a63_Expr>>& _84329_exprs) {
	if ((_84329_exprs.len() == 0LL)) {
		return;
	}
	if ((!(_1eee372ed_ready_exprs(&(*_self_), _84329_exprs)))) {
		return;
	}
	jule::Bool _85217_paired = false;
	{
		auto &expr = _84329_exprs;
		auto it = expr.begin();
		_iter_begin_20305b94c:;
		if (it != expr.end()) {
			jule::I32 _20305ba07_i = it - expr.begin();
			jule::Ptr<_1e0181a63_Expr> _20305bc6b_expr = *it;
			{
				{
					auto &_match_expr{ _20305bc6b_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_1e02d7dc8_FieldExprPair>>()) {
						_case_begin_202b85026:;
						{
							jule::Ptr<_1e02d7dc8_FieldExprPair> _85625_pair = _20305bc6b_expr.get()._field_kind.operator jule::Ptr<_1e02d7dc8_FieldExprPair>();
							if ((_20305ba07_i > 0LL) && (!(_85217_paired))) {
								_1eee36176_push_err(&(*_self_), _85625_pair.get()._field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							}
							_85217_paired=true;
							_1eee36e46_check_pair(&(*_self_), _85625_pair,_84329_exprs);
						}
					}
					else {
						_case_begin_20305c552:;
						{
							if (_85217_paired) {
								_1eee36176_push_err(&(*_self_), _20305bc6b_expr.get()._field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							}
							if (_20305ba07_i >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_s.get()._field_fields.len()))) {
								_1eee36176_push_err(&(*_self_), _20305bc6b_expr.get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_20305b94c;
							}
							jule::Ptr<_1ee2449b3_FieldIns> _87125_field = (*_self_)._field_s.get()._field_fields[_20305ba07_i];
							jule::Ptr<_1eee76b45_TypeKind> _87325_prefix = (*_self_)._field_e.get()._field_prefix;
							__JULE_DEFER({
								(*_self_)._field_e.get()._field_prefix=_87325_prefix;
							});
							(*_self_)._field_e.get()._field_prefix=_87125_field.get()._field_kind;
							jule::Ptr<_1eee43b89_Data> _87725_d = _1eee65738_eval_expr_kind((*_self_)._field_e, _20305bc6b_expr.get()._field_kind);
							if ((_87725_d == nullptr)) {
								goto _iter_next_20305b94c;
							}
							_1eee36a4a_push_match(&(*_self_), _87125_field,_87725_d,_20305bc6b_expr.get()._field_token);
						}
					}
					_match_end_20305c4ec:;
				}
			}
			_iter_next_20305b94c:;
			++it;
			_20305ba07_i++;
			goto _iter_begin_20305b94c;
		}
		_iter_end_20305b94c:;
	}
	if ((!(_85217_paired))) {
		jule::I32 _88817_n = (*_self_)._field_s.get()._field_fields.len();
		jule::I32 _88921_diff = _88817_n - static_cast<jule::I32>(static_cast<jule::I32>(_84329_exprs.len()));
		{
			
			if ((_88921_diff <= 0LL)) {
				_case_begin_202b88964:;
				{
					return;
				}
			}
			_match_end_202b88887:;
		}
		jule::Str _89521_idents = jule::Str();
		for (; (_88921_diff > 0LL); (_88921_diff)--) {
			{
				_89521_idents+=jule::Str(", ", 2) + (*_self_)._field_s.get()._field_fields[_88817_n - _88921_diff].get()._field_decl.get()._field_ident;
			}
		_iter_next_202b87c2c:;
		}
		_iter_end_202b87c2c:;
		(_89521_idents).mut_slice(2LL);
		_1eee36176_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_89521_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, _1eee35a5a_StructLitChecker _Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee247bb4_BinopExprModel _Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline void _1eee3aa71_prepare_types(_1eee3a5cb_RetTypeChecker* _self_) {
	if (((*_self_)._field_f != nullptr)) {
		(*_self_)._field_types=_1eee06564_get_result_types((*_self_)._field_f.get()._field_result);
	}
}



inline void _1eee3ad90_prepare_exprs(_1eee3a5cb_RetTypeChecker* _self_,jule::Ptr<_1e0181a63_Expr>& _107637_e) {
	if ((_107637_e == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ _107637_e.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e0181ea3_TupleExpr>>()) {
			_case_begin_202bb153b:;
			{
				(*_self_)._field_exprs=_107637_e.get()._field_kind.operator jule::Ptr<_1e0181ea3_TupleExpr>().get()._field_expr;
			}
		}
		else {
			_case_begin_202bb1184:;
			{
				(*_self_)._field_exprs = jule::alloc_for_append((*_self_)._field_exprs,1);(*_self_)._field_exprs.__push(_107637_e);
			}
		}
		_match_end_202bb0b9a:;
	}
}



inline void _1eee3b0d2_ret_vars(_1eee3a5cb_RetTypeChecker* _self_) {
	if (((*_self_)._field_f == nullptr) || _1ee257e7c_is_void((*_self_)._field_f.get()._field_decl.ptr())) {
		return;
	}
	(*_self_)._field_vars=jule::Slice<jule::Ptr<_1eedeb24b_Var>>::alloc(0LL,static_cast<jule::I32>((*_self_)._field_f.get()._field_decl.get()._field_result.get()._field_idents.len()));
	jule::Ptr<_1eeda5953_ScopeChecker> _109417_root_scope = _1eeda7d95_get_root((*_self_)._field_sc);
	jule::I32 _109617_j = 0LL;
	{
		auto &expr = (*_self_)._field_f.get()._field_decl.get()._field_result.get()._field_idents;
		auto it = expr.begin();
		_iter_begin_202bb4e24:;
		if (it != expr.end()) {
			jule::I32 _202bb4e9b_i = it - expr.begin();
			_1e02c1d07_Token _202bb51ee_ident = *it;
			{
				if ((!(_1e02c4ada_is_ignore_ident(_202bb51ee_ident._field_kind))) && (!(_1e02c4de8_is_anon_ident(_202bb51ee_ident._field_kind)))) {
					(*_self_)._field_vars = jule::alloc_for_append((*_self_)._field_vars,1);(*_self_)._field_vars.__push(_109417_root_scope.get()._field_table.get()._field_vars[_109617_j]);
					(_109617_j)++;
				} else {
					(*_self_)._field_vars = jule::alloc_for_append((*_self_)._field_vars,1);(*_self_)._field_vars.__push(jule::new_ptr<_1eedeb24b_Var>(_1eedeb24b_Var(jule::Ptr<_1eed8a5a3_Scope>(),_1e02c1d07_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),(*_self_)._field_types[_202bb4e9b_i])),jule::Ptr<_1eee44e98_Value>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1eede9e3c_IterRelation>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>())));
				}
			}
			_iter_next_202bb4e24:;
			++it;
			_202bb4e9b_i++;
			goto _iter_begin_202bb4e24;
		}
		_iter_end_202bb4e24:;
	}
	if ((_109617_j == 0LL)) {
		(*_self_)._field_vars=nullptr;
	}
}



inline void _1eee3b324_check_exprs(_1eee3a5cb_RetTypeChecker* _self_) {
	if (((*_self_)._field_exprs.len() == 0LL)) {
		return;
	}
	jule::Slice<jule::Ptr<_1eee43b89_Data>> _112017_datas = jule::Slice<jule::Ptr<_1eee43b89_Data>>::alloc(0LL,static_cast<jule::I32>((*_self_)._field_exprs.len()));
	{
		auto &expr = (*_self_)._field_exprs;
		auto it = expr.begin();
		_iter_begin_202bb93e0:;
		if (it != expr.end()) {
			jule::I32 _202bb8dd4_i = it - expr.begin();
			jule::Ptr<_1e0181a63_Expr> _202bb96a9_expr = *it;
			{
				if (_202bb8dd4_i >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_types.len()))) {
					goto _iter_end_202bb93e0;
				}
				jule::Ptr<_1eee76b45_TypeKind> _112721_t = (*_self_)._field_types[_202bb8dd4_i];
				jule::Ptr<_1eee43b89_Data> _112921_d = _1eee65e97_eval_expr(_1eedd3d38_evalp((*_self_)._field_sc.get()._field_s, jule::Trait<_1eee992c7_Lookup>((*_self_)._field_sc, 0),_112721_t), _202bb96a9_expr);
				if ((_112921_d == nullptr)) {
					goto _iter_next_202bb93e0;
				}
				_112017_datas = jule::alloc_for_append(_112017_datas,1);_112017_datas.__push(_112921_d);
				if ((!(_112921_d.get()._field_mutable)) && _1eee782a6_mutable(_112921_d.get()._field_kind.ptr())) {
					_1eedcd2d8_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;
				}
				_1eee2c3ae_AssignTypeChecker _114121_ac = _1eee2c3ae_AssignTypeChecker((*_self_)._field_sc.get()._field_s,_112721_t,_112921_d,(*_self_)._field_error_token);
				_1eee2d833_check(&_114121_ac);
			}
			_iter_next_202bb93e0:;
			++it;
			_202bb8dd4_i++;
			goto _iter_begin_202bb93e0;
		}
		_iter_end_202bb93e0:;
	}
	if ((_112017_datas.len() > 1LL)) {
		(*_self_)._field_model=jule::Any(jule::new_ptr<_1ee24e8be_TupleExprModel>(_1ee24e8be_TupleExprModel(_112017_datas)));
	} else if ((_112017_datas.len() == 1LL)) {
		(*_self_)._field_model=_112017_datas[0LL].get()._field_model;
	}
}



inline jule::Bool _1eee3b6cb_check(_1eee3a5cb_RetTypeChecker* _self_,jule::Ptr<_1e0181a63_Expr>& _116029_e) {
	_1eee3aa71_prepare_types(&(*_self_));
	_1eee3ad90_prepare_exprs(&(*_self_), _116029_e);
	_1eee3b0d2_ret_vars(&(*_self_));
	jule::I32 _116513_n = (*_self_)._field_exprs.len();
	if ((_116513_n == 0LL) && ((*_self_)._field_types.len() > 0LL)) {
		if ((!(_1ee258db2_any_var((*_self_)._field_f.get()._field_decl.ptr())))) {
			_1eedcd2d8_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		}
		return true;
	}
	if (((_116513_n > 0LL) && ((*_self_)._field_f != nullptr)) && _1ee257e7c_is_void((*_self_)._field_f.get()._field_decl.ptr())) {
		_1eedcd2d8_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	}
	if (_116513_n > static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_types.len()))) {
		_1eedcd2d8_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if (_116513_n < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_types.len()))) {
		_1eedcd2d8_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	}
	_1eee3b324_check_exprs(&(*_self_));
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee3a5cb_RetTypeChecker _Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee248115_UnaryExprModel _Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e01a81e9_is_empty(_1e02d8758_SliceExpr* _self_) {
	return ((*_self_)._field_exprs.len() == 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d8758_SliceExpr _Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e01821c3_IndexingExpr _Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d8deb_SlicingExpr _Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee249523_CastingExprModel _Src) {
	_Stream << "CastingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}



inline _1eee68818_BinaryEval static__1eee68e34_new_plain(jule::Ptr<_1eee45be1_Eval> _330629_e) {
	return _1eee68818_BinaryEval(_330629_e,jule::Ptr<_1eee43b89_Data>(),jule::Ptr<_1eee43b89_Data>(),_1e02c1d07_Token());
}



inline _1eee68818_BinaryEval static__1eee6931e_new(jule::Ptr<_1eee45be1_Eval> _331223_e,_1e02c1d07_Token _331237_op) {
	return _1eee68818_BinaryEval(_331223_e,jule::Ptr<_1eee43b89_Data>(),jule::Ptr<_1eee43b89_Data>(),_331237_op);
}



inline jule::Bool _1eee6963d_check_type_compatibility(_1eee68818_BinaryEval* _self_) {
	return _1eedd4dd3_check_type_compatibility((*_self_)._field_e.get()._field_s, (*_self_)._field_l.get()._field_kind,(*_self_)._field_r.get()._field_kind,(*_self_)._field_op);
}



inline jule::Bool _1eee6996d_check_struct_common_operator_compatibility(_1eee68818_BinaryEval* _self_) {
	jule::Ptr<_1ee25b4ad_FnIns> _332617_overload = nullptr;
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_20347b333:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_shl;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_20347b399:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_shr;
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_20347b410:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_add;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_20347b476:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_sub;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_20347c994:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_div;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_20347ca0a:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_mul;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_20347ca71:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_mod;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_20347cad7:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_bit_and;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_20347cd07:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_bit_or;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_20347cd6d:;
			{
				_332617_overload=_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_bit_xor;
			}
		}
		else {
			_case_begin_20347acd3:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return false;
			}
		}
		_match_end_20347b2bc:;
	}
	if ((_332617_overload == nullptr)) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
		return false;
	}
	jule::Ptr<_1ee25a358_ParamIns> _335817_p = _332617_overload.get()._field_params[1LL];
	return _1eedd482d_check_assign_type((*_self_)._field_e.get()._field_s, _335817_p.get()._field_decl.get()._field_reference,_335817_p.get()._field_kind,(*_self_)._field_r,(*_self_)._field_op);
}



inline jule::Ptr<_1eee43b89_Data> _1eee69c48_eval_nil(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee78581_nil_compatible((*_self_)._field_r.get()._field_kind.ptr())))) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any(_1eee77063_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_20348aa6d:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_203489143:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_203489583:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6a023_eval_enum(_1eee68818_BinaryEval* _self_) {
	jule::Ptr<_1eec889ac_Enum> _338317_enm = _1eee79a6b_enm((*_self_)._field_l.get()._field_kind.ptr());
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_20348b8c6:;
			{
				jule::Ptr<_1eee76b45_TypeKind> _338721_rkind = (*_self_)._field_r.get()._field_kind;
				if ((_1eee79a6b_enm((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
					_338721_rkind=_1eee79a6b_enm((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind.get()._field_kind;
				}
				if ((!(_1eedd4dd3_check_type_compatibility((*_self_)._field_e.get()._field_s, _338317_enm.get()._field_kind.get()._field_kind,_338721_rkind,(*_self_)._field_op)))) {
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		_match_end_20348c278:;
	}
	if ((_1eee79a6b_enm((*_self_)._field_r.get()._field_kind.ptr()) == nullptr) || (_338317_enm != _1eee79a6b_enm((*_self_)._field_r.get()._field_kind.ptr()))) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_338317_enm.get()._field_ident),jule::Any(_1eee77063_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_203492c84:;
			{
				if ((!(_1eeda271e_is_num(_1eee77063_to_str(_338317_enm.get()._field_kind.get()._field_kind.ptr()))))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_338317_enm.get()._field_ident)}));
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_203492855:;
			{
				if ((_1eee791db_prim(_338317_enm.get()._field_kind.get()._field_kind.ptr()) == nullptr) || (!(_1eeda20ae_is_int(_1eee7c387_to_str(_1eee791db_prim(_338317_enm.get()._field_kind.get()._field_kind.ptr()).ptr()))))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_338317_enm.get()._field_ident)}));
				}
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_203491a30:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_338317_enm.get()._field_ident)}));
				return nullptr;
			}
		}
		_match_end_2034927de:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6a2ed_eval_sptr(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_20349b40d:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034996d6:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_203499a9e:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6a5c8_eval_ptr(_1eee68818_BinaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_20349dce5:;
			{
				if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_20349dd5b:;
			{
				if ((_1eee79791_ptr((*_self_)._field_l.get()._field_kind.ptr()) == nullptr)) {
					std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				}
				if (_1eee8a64d_is_unsafe(_1eee79791_ptr((*_self_)._field_l.get()._field_kind.ptr()).ptr())) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				}
				if ((!(_1eee72327_is_ptr_arithmetic_compatible_int((*_self_)._field_r)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
					return nullptr;
				}
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_20349b7a4:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_20349c420:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6a8a3_eval_arr(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_2034a71e9:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034a54e4:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_2034a5857:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6ab7d_eval_slc(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_2034aa164:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034a84a3:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_2034a87c2:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6ae58_eval_fn(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_2034ad0ce:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034ab41d:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_2034ab73c:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6b233_eval_struct(_1eee68818_BinaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1)) {
			_case_begin_2034ae146:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_gt == nullptr)) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_2034ae1ac:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_gt_eq == nullptr)) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_2034ae223:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_lt == nullptr)) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_2034ae29a:;
			{
				if ((_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_lt_eq == nullptr)) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_2034ae322:;
			{
				if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
					return nullptr;
				}
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		_match_end_2034ae0e1:;
	}
	if ((!(_1eee6996d_check_struct_common_operator_compatibility(&(*_self_))))) {
		return nullptr;
	}
	return (*_self_)._field_l;
}



inline jule::Ptr<_1eee43b89_Data> _1eee6b50d_eval_trait(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_2034bcd36:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034bb0dc:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_2034bb4a5:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6b7d8_eval_any(_1eee68818_BinaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_2034beed1:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034bd1cc:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_2034bdd48:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6bab3_eval_bool(_1eee68818_BinaryEval* _self_) {
	if ((!(_1eee6963d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_2034c32d1:;
			{
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_2034c1620:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(_1eee77063_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_2034c193e:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6bd8d_eval_str(_1eee68818_BinaryEval* _self_) {
	jule::Str _365617_rk = _1eee77063_to_str((*_self_)._field_r.get()._field_kind.ptr());
	if ((_365617_rk != jule::Str("str", 3))) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_365617_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_2034c6a54:;
			{
				return (*_self_)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_2034c59a9:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		else {
			_case_begin_2034c45ac:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_2034c58cc:;
	}
}



inline void _1eee6c0d0_set_type_to_greater(_1eee68818_BinaryEval* _self_) {
	if (_1eee44690_is_const((*_self_)._field_l.ptr())) {
		if ((!(_1eee44690_is_const((*_self_)._field_r.ptr())))) {
			(*_self_)._field_l.get()._field_kind=(*_self_)._field_r.get()._field_kind;
			return;
		}
		goto _julec_label_set;
	}
	if (_1eee44690_is_const((*_self_)._field_r.ptr())) {
		return;
	}
	_julec_label_set:;
	if (_1eeda0420_is_greater(_1eee791db_prim((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind,_1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr()).get()._field_kind)) {
		(*_self_)._field_l.get()._field_kind=(*_self_)._field_r.get()._field_kind;
	}
}



inline void _1eee6c3bb_check_mod_data(_1eee68818_BinaryEval* _self_,jule::Ptr<_1eee43b89_Data>& _369938_d) {
	if ((!(_1eee44690_is_const(_369938_d.ptr())))) {
		if ((_1eee791db_prim(_369938_d.get()._field_kind.ptr()) == nullptr) || (!(_1eeda20ae_is_int(_1eee791db_prim(_369938_d.get()._field_kind.ptr()).get()._field_kind)))) {
			_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		}
		return;
	}
	{
		
		if (_1eee19e07_sig_assignable(jule::Str("i64", 3),_369938_d)) {
			_case_begin_2034ce908:;
			{
				_1eed220ea_set_i64(_369938_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_369938_d.get()._field_constant.ptr())));
			}
		}
		else if (_1eee2a0b0_unsig_assignable(jule::Str("u64", 3),_369938_d)) {
			_case_begin_2034ce62d:;
			{
				_1eed22419_set_u64(_369938_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_369938_d.get()._field_constant.ptr())));
			}
		}
		else {
			_case_begin_2034ce5b7:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_2034ce562:;
	}
}



inline void _1eee6c60d_mod(_1eee68818_BinaryEval* _self_) {
	_1eee6c3bb_check_mod_data(&(*_self_), (*_self_)._field_l);
	_1eee6c3bb_check_mod_data(&(*_self_), (*_self_)._field_r);
}



inline jule::Bool _1eee6cad6_numbers_are_compatibile(_1eee68818_BinaryEval* _self_,jule::Str& _372139_lk,jule::Str& _372149_rk) {
	if ((!(_1eeda271e_is_num(_372149_rk)))) {
		return false;
	}
	if (_1eee44690_is_const((*_self_)._field_l.ptr())) {
		return true;
	}
	if ((_372139_lk == jule::Str("f32", 3))) {
		if (_1eee44690_is_const((*_self_)._field_r.ptr())) {
			return true;
		}
		return (_372149_rk == jule::Str("f32", 3));
	}
	if ((_372139_lk == jule::Str("f64", 3))) {
		if (_1eee44690_is_const((*_self_)._field_r.ptr())) {
			return true;
		}
		return (_372149_rk == jule::Str("f64", 3));
	}
	if (_1eee44690_is_const((*_self_)._field_r.ptr())) {
		return true;
	}
	return _372139_lk == _372149_rk;
}



inline jule::Ptr<_1eee43b89_Data> _1eee6cda0_eval_float(_1eee68818_BinaryEval* _self_) {
	jule::Str _375113_lk = _1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr()).get()._field_kind;
	jule::Str _375213_rk = _1eee791db_prim((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind;
	if ((!(_1eee6cad6_numbers_are_compatibile(&(*_self_), _375113_lk,_375213_rk)))) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_375113_lk),jule::Any(_375213_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_2034d9281:;
			{
				if ((!(_1eee44690_is_const((*_self_)._field_l.ptr()))) || (!(_1eee2a434_int_assignable(jule::Str("i64", 3),(*_self_)._field_l)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_375113_lk),jule::Any(_375213_rk)}));
					return nullptr;
				}
				if ((!(_1eee44690_is_const((*_self_)._field_r.ptr()))) || (!(_1eee2a434_int_assignable(jule::Str("u64", 3),(*_self_)._field_r)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_375113_lk),jule::Any(_375213_rk)}));
					return nullptr;
				}
				_1eed220ea_set_i64((*_self_)._field_l.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64((*_self_)._field_l.get()._field_constant.ptr())));
				_1eed22419_set_u64((*_self_)._field_r.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64((*_self_)._field_r.get()._field_constant.ptr())));
				if ((!(_1eee71b0c_is_ok_for_shifting((*_self_)._field_r)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				return (*_self_)._field_l;
			}
		}
		_match_end_2034d9649:;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_2034d96d2:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		_match_end_2034e0a3a:;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_2034e3213:;
			{
				_1eee6c0d0_set_type_to_greater(&(*_self_));
				return (*_self_)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_2034e3279:;
			{
				if ((!(_1eeda20ae_is_int(_375213_rk)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_375113_lk),jule::Any(_375213_rk)}));
					return nullptr;
				}
				_1eee6c60d_mod(&(*_self_));
				return (*_self_)._field_r;
			}
		}
		else {
			_case_begin_2034d9ade:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_2034e15c9:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6d17a_eval_int(_1eee68818_BinaryEval* _self_) {
	jule::Str _381513_lk = _1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr()).get()._field_kind;
	jule::Str _381613_rk = _1eee791db_prim((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind;
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_2034e6425:;
			{
				if ((!(_1eeda20ae_is_int(_381513_lk))) || (!(_1eeda20ae_is_int(_381613_rk)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_381513_lk),jule::Any(_381613_rk)}));
					return nullptr;
				}
				if ((!(_1eee71b0c_is_ok_for_shifting((*_self_)._field_r)))) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				return (*_self_)._field_l;
			}
		}
		_match_end_2034e6e3c:;
	}
	if ((!(_1eee6cad6_numbers_are_compatibile(&(*_self_), _381513_lk,_381613_rk)))) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_381513_lk),jule::Any(_381613_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_2034e9d1e:;
			{
				return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("bool", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
			}
		}
		_match_end_2034eb0b7:;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_2034ed790:;
			{
				_1eee6c0d0_set_type_to_greater(&(*_self_));
				return (*_self_)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_2034ed806:;
			{
				_1eee6c60d_mod(&(*_self_));
				_1eee6c0d0_set_type_to_greater(&(*_self_));
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_2034eb194:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_2034ebb67:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6d455_eval_prim(_1eee68818_BinaryEval* _self_) {
	jule::Ptr<_1eee7bead_Prim> _387413_prim = _1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr());
	{
		
		if (_1eee80412_is_bool(_387413_prim.ptr())) {
			_case_begin_203500e79:;
			{
				return _1eee6bab3_eval_bool(&(*_self_));
			}
		}
		else if (_1eee806dc_is_str(_387413_prim.ptr())) {
			_case_begin_203501001:;
			{
				return _1eee6bd8d_eval_str(&(*_self_));
			}
		}
		_match_end_203500de1:;
	}
	if ((_1eee791db_prim((*_self_)._field_r.get()._field_kind.ptr()) == nullptr)) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_1eee7c387_to_str(_387413_prim.ptr())),jule::Any(_1eee77063_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
		return nullptr;
	}
	{
		
		if (_1eeda2411_is_float(_387413_prim.get()._field_kind)) {
			_case_begin_2035042bd:;
			{
				return _1eee6cda0_eval_float(&(*_self_));
			}
		}
		else if (_1eeda20ae_is_int(_387413_prim.get()._field_kind)) {
			_case_begin_203504389:;
			{
				return _1eee6d17a_eval_int(&(*_self_));
			}
		}
		else {
			_case_begin_203503a70:;
			{
				return nullptr;
			}
		}
		_match_end_203503894:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee6d730_eval_op(_1eee68818_BinaryEval* _self_) {
	{
		
		if (_1eee77ecb_void((*_self_)._field_l.get()._field_kind.ptr())) {
			_case_begin_203506006:;
			{
				_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*_self_)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if ((_1eee791db_prim((*_self_)._field_r.get()._field_kind.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim((*_self_)._field_r.get()._field_kind.ptr()).ptr())) {
			_case_begin_20350606c:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_203506105;
			}
		}
		else if ((_1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr()) != nullptr) && _1eee809b7_is_any(_1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr()).ptr())) {
			_case_begin_203506105:;
			{
				return _1eee6b7d8_eval_any(&(*_self_));
			}
		}
		else if (_1eee77c01_is_nil((*_self_)._field_l.get()._field_kind.ptr())) {
			_case_begin_20350616b:;
			{
				return _1eee69c48_eval_nil(&(*_self_));
			}
		}
		else if ((_1eee79a6b_enm((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203505962:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_2035059c8;
			}
		}
		else if ((_1eee79a6b_enm((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_2035059c8:;
			{
				return _1eee6a023_eval_enum(&(*_self_));
			}
		}
		else if ((_1eee794b6_sptr((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203505a3e:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_203505aa5;
			}
		}
		else if ((_1eee794b6_sptr((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203505aa5:;
			{
				return _1eee6a2ed_eval_sptr(&(*_self_));
			}
		}
		else if ((_1eee79791_ptr((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506215:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_20350627b;
			}
		}
		else if ((_1eee79791_ptr((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20350627b:;
			{
				return _1eee6a5c8_eval_ptr(&(*_self_));
			}
		}
		else if ((_1eee79d46_arr((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506303:;
			{
				return _1eee6a8a3_eval_arr(&(*_self_));
			}
		}
		else if ((_1eee7a121_slc((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_20350637a:;
			{
				return _1eee6ab7d_eval_slc(&(*_self_));
			}
		}
		else if ((_1eee7a3eb_fnc((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506402:;
			{
				return _1eee6ae58_eval_fn(&(*_self_));
			}
		}
		else if ((_1eee7a9a1_trt((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506479:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_203506501;
			}
		}
		else if ((_1eee7a9a1_trt((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506501:;
			{
				return _1eee6b50d_eval_trait(&(*_self_));
			}
		}
		else if ((_1eee7a6c6_strct((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506578:;
			{
				return _1eee6b233_eval_struct(&(*_self_));
			}
		}
		else if ((_1eee791db_prim((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203506600:;
			{
				return _1eee6d455_eval_prim(&(*_self_));
			}
		}
		else {
			_case_begin_2035058eb:;
			{
				return nullptr;
			}
		}
		_match_end_203505830:;
	}
}



inline void _1eee6da4e_eval_const(_1eee68818_BinaryEval* _self_,jule::Ptr<_1eee43b89_Data>& _394434_d) {
	{
		
		if ((_394434_d == nullptr)) {
			_case_begin_203517bc7:;
			{
				return;
			}
		}
		else if ((!(_1eee44690_is_const((*_self_)._field_l.ptr()))) || (!(_1eee44690_is_const((*_self_)._field_r.ptr())))) {
			_case_begin_203517c4e:;
			{
				_394434_d.get()._field_constant=nullptr;
				return;
			}
		}
		_match_end_203517ad9:;
	}
	{
		auto &_match_expr{ (*_self_)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_203517d09:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool((*((*_self_)._field_l.get()._field_constant)) == (*((*_self_)._field_r.get()._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_203518dd7:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool((*((*_self_)._field_l.get()._field_constant)) != (*((*_self_)._field_r.get()._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_203518e4d:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool(_1eed24dde_or((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_203519778:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool(_1eed24a37_and((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_2035197de:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool((*((*_self_)._field_l.get()._field_constant)) > (*((*_self_)._field_r.get()._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_203519855:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool((*((*_self_)._field_l.get()._field_constant)) < (*((*_self_)._field_r.get()._field_constant)));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_2035198bb:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool((*((*_self_)._field_l.get()._field_constant)) >= (*((*_self_)._field_r.get()._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_203519932:;
			{
				_394434_d.get()._field_constant=static__1eed1e834_new_bool((*((*_self_)._field_l.get()._field_constant)) <= (*((*_self_)._field_r.get()._field_constant)));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_203519998:;
			{
				_1eed2661b_add((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_203519a0e:;
			{
				_1eed269c3_sub((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_203519a75:;
			{
				_1eed26d7a_mul((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_203519adb:;
			{
				jule::Bool _398117_ok = _1eed27232_div((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				if ((!(_398117_ok)) && (_1eed21ccb_as_f64((*_self_)._field_r.get()._field_constant.ptr()) == 0LL)) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
				jule::Ptr<_1eee7bead_Prim> _398621_prim = _1eee791db_prim(_394434_d.get()._field_kind.ptr());
				{
					
					if (_1eeda194e_is_sig_int(_398621_prim.get()._field_kind)) {
						_case_begin_203529843:;
						{
							_1eed220ea_set_i64(_394434_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_394434_d.get()._field_constant.ptr())));
						}
					}
					else if (_1eeda1ca1_is_unsig_int(_398621_prim.get()._field_kind)) {
						_case_begin_2035298ba:;
						{
							_1eed22419_set_u64(_394434_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_394434_d.get()._field_constant.ptr())));
						}
					}
					_match_end_203529799:;
				}
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_203519b52:;
			{
				jule::Bool _399417_ok = _1eed275d9_mod((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				if ((!(_399417_ok)) && (_1eed21ccb_as_f64((*_self_)._field_r.get()._field_constant.ptr()) == 0LL)) {
					_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_203519bb8:;
			{
				_1eed27d48_bitwise_or((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_203519c2e:;
			{
				_1eed27991_bitwise_and((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_203519ca6:;
			{
				_1eed2d05c_xor((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_203519d2d:;
			{
				_1eed2d414_lshift((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_203519da5:;
			{
				_1eed2d7bb_rshift((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_394434_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		_match_end_203518d82:;
	}
	_1eee73207_apply_cast_model_by_enum(_394434_d,_1eee79a6b_enm(_394434_d.get()._field_kind.ptr()));
	jule::Ptr<_1eee7bead_Prim> _401817_prim = _1eee791db_prim(_394434_d.get()._field_kind.ptr());
	if ((_401817_prim == nullptr) || (!(_1eeda271e_is_num(_1eee7c387_to_str(_401817_prim.ptr()))))) {
		_394434_d.get()._field_model=jule::Any(_394434_d.get()._field_constant);
		return;
	}
	if (((*_self_)._field_op._field_kind != jule::Str("<<", 2)) && ((*_self_)._field_op._field_kind != jule::Str(">>", 2))) {
		if (((*_self_)._field_l.get()._field_model == (*_self_)._field_l.get()._field_constant) && ((*_self_)._field_r.get()._field_model != (*_self_)._field_r.get()._field_constant)) {
			_394434_d.get()._field_kind=(*_self_)._field_r.get()._field_kind;
			_401817_prim=_1eee791db_prim(_394434_d.get()._field_kind.ptr());
		}
	}
	_1eee70b83_fit_bitsize(_394434_d);
	_1eee73548_cast_const_by_type(_401817_prim.get()._field_kind,_394434_d);
}



inline void _1eee6dd6d_check_data(_1eee68818_BinaryEval* _self_,jule::Ptr<_1eee43b89_Data>& _403434_d) {
	jule::Ptr<_1ee25b4ad_FnIns> _403513_f = _1eee7a3eb_fnc(_403434_d.get()._field_kind.ptr());
	if (((_403513_f != nullptr) && (_403513_f.get()._field_decl != nullptr)) && _1ee258257_is_method(_403513_f.get()._field_decl.ptr())) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	}
}



inline void _1eee6e0b0_check_datas(_1eee68818_BinaryEval* _self_) {
	_1eee6dd6d_check_data(&(*_self_), (*_self_)._field_l);
	_1eee6dd6d_check_data(&(*_self_), (*_self_)._field_r);
}



inline void _1eee6e3ce_set_model(_1eee68818_BinaryEval* _self_,jule::Ptr<_1eee43b89_Data>& _404633_d) {
	if (_1eee44690_is_const(_404633_d.ptr())) {
		if (((*_self_)._field_l.get()._field_model == (*_self_)._field_l.get()._field_constant) && ((*_self_)._field_r.get()._field_model == (*_self_)._field_r.get()._field_constant)) {
			return;
		}
	}
	jule::Ptr<_1eee43b89_Data> _405418_l = (*_self_)._field_l;
	jule::Ptr<_1eee43b89_Data> _405425_r = (*_self_)._field_r;
	std::tie(_405418_l,_405425_r) = std::make_tuple((*_self_)._field_l,(*_self_)._field_r);
	if ((!(_1eee44a47_good_operand(_405418_l.ptr(), _405425_r)))) {
		std::tie(_405418_l,_405425_r) = std::make_tuple(_405425_r,_405418_l);
	}
	_404633_d.get()._field_model=jule::Any(jule::new_ptr<_1ee247bb4_BinopExprModel>(_1ee247bb4_BinopExprModel(jule::new_ptr<_1ee247620_OperandExprModel>(_1ee247620_OperandExprModel(_405418_l.get()._field_kind,_405418_l.get()._field_model)),jule::new_ptr<_1ee247620_OperandExprModel>(_1ee247620_OperandExprModel(_405425_r.get()._field_kind,_405425_r.get()._field_model)),(*_self_)._field_op)));
}



inline void _1eee6e6ed_post_eval(_1eee68818_BinaryEval* _self_,jule::Ptr<_1eee43b89_Data>& _407233_d) {
	_407233_d.get()._field_lvalue=false;
	_1eee6e3ce_set_model(&(*_self_), _407233_d);
}



inline jule::Ptr<_1eee43b89_Data> _1eee6eb82_solve_explicit(_1eee68818_BinaryEval* _self_,jule::Ptr<_1eee43b89_Data>& _407738_l,jule::Ptr<_1eee43b89_Data>& _407753_r) {
	std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple(_407738_l,_407753_r);
	_1eee6e0b0_check_datas(&(*_self_));
	jule::Ptr<_1eee43b89_Data> _408217_d = _1eee6d730_eval_op(&(*_self_));
	std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple(_407738_l,_407753_r);
	_1eee6da4e_eval_const(&(*_self_), _408217_d);
	if ((_408217_d != nullptr)) {
		_408217_d.get()._field_mutable=true;
		_1eee6e6ed_post_eval(&(*_self_), _408217_d);
	}
	return _408217_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee70039_eval(_1eee68818_BinaryEval* _self_,jule::Ptr<_1e02d7988_BinopExpr>& _409728_op) {
	if ((_409728_op.get()._field_op._field_kind == jule::Str("=", 1))) {
		_1eee462c9_push_err((*_self_)._field_e.ptr(), _409728_op.get()._field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		_1eee466c5_push_suggestion((*_self_)._field_e.ptr(), jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _410417_l = _1eee65738_eval_expr_kind((*_self_)._field_e, jule::Any(_409728_op.get()._field_left));
	if ((_410417_l == nullptr) || (_410417_l.get()._field_kind == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1eee76b45_TypeKind> _410917_prefix = (*_self_)._field_e.get()._field_prefix;
	(*_self_)._field_e.get()._field_prefix=_410417_l.get()._field_kind;
	__JULE_DEFER({
		(*_self_)._field_e.get()._field_prefix=_410917_prefix;
	});
	jule::Ptr<_1eee43b89_Data> _411217_r = _1eee65738_eval_expr_kind((*_self_)._field_e, jule::Any(_409728_op.get()._field_right));
	if ((_411217_r == nullptr) || (_411217_r.get()._field_kind == nullptr)) {
		return nullptr;
	}
	(*_self_)._field_op=_409728_op.get()._field_op;
	jule::Ptr<_1eee43b89_Data> _411917_d = _1eee6eb82_solve_explicit(&(*_self_), _410417_l,_411217_r);
	if (((_411917_d != nullptr) && _410417_l.get()._field_is_rune) && _411217_r.get()._field_is_rune) {
		_411917_d.get()._field_is_rune=true;
	}
	return _411917_d;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee68818_BinaryEval _Src) {
	_Stream << "BinaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee75baa_TypeAlias _Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24a007_FnCallExprModel _Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d911b_GenericDecl _Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24a9a8_IndexingExprModel _Src) {
	_Stream << "IndexingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d933b_LabelSt _Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d955b_GotoSt _Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d977b_FallSt _Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24c009_SlicingExprModel _Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24c658_TraitSubIdentExprModel _Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "trt:" << _Src._field_trt;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24d060_StructSubIdentExprModel _Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d999b_AssignLeft _Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline void _1eee8de7b_push_err(_1eee8d6a6_TypeChecker* _self_,_1e02c1d07_Token _70127_token,jule::Str _70141_fmt,jule::Slice<jule::Any> _70154_args) {
	_1eedcd2d8_push_err((*_self_)._field_s.ptr(), _70127_token,_70141_fmt,_70154_args);
}



inline void _1eee8e1bd_allow_builtin(_1eee8d6a6_TypeChecker* _self_) {
	(*_self_)._field_dis_builtin=false;
}



inline void _1eee8e410_disallow_builtin(_1eee8d6a6_TypeChecker* _self_) {
	(*_self_)._field_dis_builtin=true;
}



inline jule::Ptr<_1eee7bead_Prim> _1eee8e7b7_build_prim(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _71330_decl) {
	if ((!(_1eee8c2ba_is_prim(_71330_decl.get()._field_ident)))) {
		_1eee8de7b_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((_71330_decl.get()._field_generics.len() > 0LL)) {
		_1eee8de7b_push_err(&(*_self_), _71330_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_71330_decl.get()._field_ident)}));
		return nullptr;
	}
	return _1eee8bb16_build_prim_type(_71330_decl.get()._field_ident);
}



inline void _1eee8ec90_push_cycle_error(_1eee8d6a6_TypeChecker* _self_,jule::Any _72731_def1,jule::Any _72742_def2,jule::Str& _72758_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _73013_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _73029_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _73029_def };
			
			if (_match_expr.type_is<jule::Ptr<_1eee75baa_TypeAlias>>()) {
				_case_begin_2035a3966:;
				{
					return _73029_def.operator jule::Ptr<_1eee75baa_TypeAlias>().get()._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
				_case_begin_2035a42a2:;
				{
					return _73029_def.operator jule::Ptr<_1ee242032_Struct>().get()._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1eec889ac_Enum>>()) {
				_case_begin_2035a4318:;
				{
					return _73029_def.operator jule::Ptr<_1eec889ac_Enum>().get()._field_ident;
				}
			}
			else {
				_case_begin_2035a3b20:;
				{
					return jule::Str();
				}
			}
			_match_end_2035a3a54:;
		}
	});
	jule::Str _74313_def1_ident = _73013_get_ident(_72731_def1);
	jule::Str _74413_def2_ident = _73013_get_ident(_72742_def2);
	jule::Str _74513_refers_to = _208de2722_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_74313_def1_ident),jule::Any(_74413_def2_ident)}));
	(_72758_message).buffer.insert(0, (((_208bde08a_repeat(jule::Str(" ", 1),4LL) + _74513_refers_to) + jule::Str("\n", 1))));
}



inline jule::Bool _1eee90224_check_cross_cycle(_1eee8d6a6_TypeChecker* _self_,jule::Any _74932_decl,jule::Str& _74948_message) {
	{
		auto &_match_expr{ _74932_decl };
		
		if (_match_expr.type_is<jule::Ptr<_1eee75baa_TypeAlias>>()) {
			_case_begin_2035a77c2:;
			{
				jule::Ptr<_1eee75baa_TypeAlias> _75217_ta = _74932_decl.operator jule::Ptr<_1eee75baa_TypeAlias>();
				{
					auto &expr = _75217_ta.get()._field_refers;
					auto it = expr.begin();
					_iter_begin_2035a862a:;
					if (it != expr.end()) {
						jule::Any &_2035a866e_d = *it;
						{
							{
								
								if (_2035a866e_d == (*_self_)._field_referencer.get()._field_owner) {
									_case_begin_2035a8d34:;
									{
										_1eee8ec90_push_cycle_error(&(*_self_), jule::Any(_75217_ta),_2035a866e_d,_74948_message);
										return false;
									}
								}
								else if ((!(_1eee90224_check_cross_cycle(&(*_self_), _2035a866e_d,_74948_message)))) {
									_case_begin_2035a8dab:;
									{
										_1eee8ec90_push_cycle_error(&(*_self_), jule::Any(_75217_ta),_2035a866e_d,_74948_message);
										return false;
									}
								}
								_match_end_2035a8c24:;
							}
						}
						_iter_next_2035a862a:;
						++it;
						goto _iter_begin_2035a862a;
					}
					_iter_end_2035a862a:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2035a7838:;
			{
				jule::Ptr<_1ee242032_Struct> _76417_s = _74932_decl.operator jule::Ptr<_1ee242032_Struct>();
				{
					auto &expr = _76417_s.get()._field_depends;
					auto it = expr.begin();
					_iter_begin_2035a8a15:;
					if (it != expr.end()) {
						jule::Ptr<_1ee242032_Struct> &_2035ab2a9_d = *it;
						{
							{
								
								if ((*_self_)._field_referencer.get()._field_owner == jule::Any(jule::Any(_2035ab2a9_d))) {
									_case_begin_2035ab8e7:;
									{
										_1eee8ec90_push_cycle_error(&(*_self_), jule::Any(_76417_s),jule::Any(_2035ab2a9_d),_74948_message);
										return false;
									}
								}
								else if ((!(_1eee90224_check_cross_cycle(&(*_self_), jule::Any(_2035ab2a9_d),_74948_message)))) {
									_case_begin_2035ab96e:;
									{
										_1eee8ec90_push_cycle_error(&(*_self_), jule::Any(_76417_s),jule::Any(_2035ab2a9_d),_74948_message);
										return false;
									}
								}
								_match_end_2035ab7d7:;
							}
						}
						_iter_next_2035a8a15:;
						++it;
						goto _iter_begin_2035a8a15;
					}
					_iter_end_2035a8a15:;
				}
			}
		}
		_match_end_2035a76b2:;
	}
	return true;
}



inline jule::Bool _1eee906a8_check_illegal_cycles(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _78340_ident,jule::Any _78367_decl) {
	jule::Bool _78380_ok = jule::Bool();
	if (((*_self_)._field_referencer == nullptr)) {
		_78380_ok = true;
		return _78380_ok;
	}
	{
		auto &_match_expr{ _78367_decl };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2035ae389:;
			{
				if ((*_self_)._field_not_plain || _78367_decl.operator jule::Ptr<_1ee242032_Struct>().get()._field_cpp_linked) {
					_78380_ok = true;
					return _78380_ok;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee75baa_TypeAlias>>()) {
			_case_begin_2035ae400:;
			{
				if (_78367_decl.operator jule::Ptr<_1eee75baa_TypeAlias>().get()._field_cpp_linked) {
					_78380_ok = true;
					return _78380_ok;
				}
			}
		}
		_match_end_2035ae587:;
	}
	if (_78367_decl == (*_self_)._field_referencer.get()._field_owner) {
		_1eee8de7b_push_err(&(*_self_), _78340_ident.get()._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*_self_)._field_referencer.get()._field_ident)}));
		_78380_ok = false;
		return _78380_ok;
	}
	jule::Str _80617_message = jule::Str();
	if ((!(_1eee90224_check_cross_cycle(&(*_self_), _78367_decl,_80617_message)))) {
		jule::Str _80921_err_msg = _80617_message;
		_80617_message=jule::Str();
		_1eee8ec90_push_cycle_error(&(*_self_), (*_self_)._field_referencer.get()._field_owner,_78367_decl,_80617_message);
		_80921_err_msg=_80921_err_msg + _80617_message;
		_1eee8de7b_push_err(&(*_self_), _78340_ident.get()._field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_80921_err_msg)}));
		_78380_ok = false;
		return _78380_ok;
	}
	{
		auto &_match_expr{ (*_self_)._field_referencer.get()._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_1eee75baa_TypeAlias>>()) {
			_case_begin_2035b4944:;
			{
				{
					(*((*_self_)._field_referencer.get()._field_refs))=jule::append((*((*_self_)._field_referencer.get()._field_refs)),jule::Slice<jule::Any>({_78367_decl}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2035b49dd:;
			{
				{
					auto &_match_expr{ _78367_decl };
					
					if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
						_case_begin_2035b51c5:;
						{
							jule::Ptr<_1ee242032_Struct> _82525_s = (*_self_)._field_referencer.get()._field_owner.operator jule::Ptr<_1ee242032_Struct>();
							_82525_s.get()._field_depends = jule::alloc_for_append(_82525_s.get()._field_depends,1);_82525_s.get()._field_depends.__push(_78367_decl.operator jule::Ptr<_1ee242032_Struct>());
						}
					}
					_match_end_2035b5170:;
				}
			}
		}
		_match_end_2035b48de:;
	}
	_78380_ok = true;
	return _78380_ok;
}



inline jule::Trait<_1eee76606_Kind> _1eee90b3c_from_type_alias(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _83335_decl,jule::Ptr<_1eee75baa_TypeAlias>& _83362_ta) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _83362_ta.get()._field_public,_83362_ta.get()._field_token)))) {
		_1eee8de7b_push_err(&(*_self_), _83335_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_83335_decl.get()._field_ident)}));
		return nullptr;
	}
	_83362_ta.get()._field_used=true;
	if ((_83335_decl.get()._field_generics.len() > 0LL)) {
		_1eee8de7b_push_err(&(*_self_), _83335_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_83335_decl.get()._field_ident)}));
		return nullptr;
	}
	if ((!((*_self_)._field_inscatch)) && ((*_self_)._field_banned_generics != nullptr)) {
		(*_self_)._field_inscatch=true;
		{
			auto &expr = (*_self_)._field_banned_generics;
			auto it = expr.begin();
			_iter_begin_2035ba9c2:;
			if (it != expr.end()) {
				jule::Ptr<_1eee75baa_TypeAlias> _2035bb055_bg = *it;
				{
					if ((_2035bb055_bg == _83362_ta) || ((_83362_ta.get()._field_kind.get()._field_kind != nullptr) && _1eee7741a_equals(_83362_ta.get()._field_kind.get()._field_kind, _2035bb055_bg.get()._field_kind.get()._field_kind))) {
						(*_self_)._field_inscatch=false;
						goto _iter_end_2035ba9c2;
					}
				}
				_iter_next_2035ba9c2:;
				++it;
				goto _iter_begin_2035ba9c2;
			}
			_iter_end_2035ba9c2:;
		}
	}
	if ((*_self_)._field_inscatch) {
		{
			auto &expr = (*_self_)._field_banned_generics;
			auto it = expr.begin();
			_iter_begin_2035bd0ac:;
			if (it != expr.end()) {
				jule::Ptr<_1eee75baa_TypeAlias> _2035bd3dc_bg = *it;
				{
					if (_2035bd3dc_bg == _83362_ta) {
						_1eee8de7b_push_err(&(*_self_), _83335_decl.get()._field_token,jule::Str("type declaration causes initiation cycle", 40),jule::Slice<jule::Any>({jule::Any(_83335_decl.get()._field_ident)}));
						return nullptr;
					}
					{
						auto &expr = _83362_ta.get()._field_generics;
						auto it = expr.begin();
						_iter_begin_2035be9a4:;
						if (it != expr.end()) {
							jule::Ptr<_1eee75baa_TypeAlias> _2035bd9d6_dg = *it;
							{
								if (_2035bd3dc_bg == _2035bd9d6_dg) {
									_1eee8de7b_push_err(&(*_self_), _83335_decl.get()._field_token,jule::Str("type declaration causes initiation cycle", 40),jule::Slice<jule::Any>({jule::Any(_83335_decl.get()._field_ident)}));
									return nullptr;
								}
							}
							_iter_next_2035be9a4:;
							++it;
							goto _iter_begin_2035be9a4;
						}
						_iter_end_2035be9a4:;
					}
				}
				_iter_next_2035bd0ac:;
				++it;
				goto _iter_begin_2035bd0ac;
			}
			_iter_end_2035bd0ac:;
		}
	}
	jule::Bool _87517_ok = _1eee906a8_check_illegal_cycles(&(*_self_), _83335_decl,jule::Any(_83362_ta));
	if ((!(_87517_ok))) {
		return nullptr;
	}
	_87517_ok=_1eedd7248_check_type_alias_decl_kind((*_self_)._field_s, _83362_ta,(*_self_)._field_lookup);
	if ((!(_87517_ok))) {
		return nullptr;
	}
	if (_83362_ta.get()._field_generic && ((*_self_)._field_owner_alias != nullptr)) {
		(*_self_)._field_owner_alias.get()._field_generics = jule::alloc_for_append((*_self_)._field_owner_alias.get()._field_generics,1);(*_self_)._field_owner_alias.get()._field_generics.__push(_83362_ta);
	}
	jule::Ptr<_1eee76b45_TypeKind> _89217_tk = jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),_83362_ta.get()._field_generic,jule::Bool(),_83362_ta.get()._field_kind.get()._field_kind.get()._field_kind));
	if (_83362_ta.get()._field_cpp_linked) {
		_89217_tk.get()._field_cpp_ident=_83362_ta.get()._field_ident;
	} else {
		_89217_tk.get()._field_cpp_ident=_83362_ta.get()._field_kind.get()._field_kind.get()._field_cpp_ident;
	}
	return jule::Trait<_1eee76606_Kind>(_89217_tk, 4);
}



inline jule::Ptr<_1eec889ac_Enum> _1eee910c1_from_enum(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _90429_decl,jule::Ptr<_1eec889ac_Enum>& _90456_e) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _90456_e.get()._field_public,_90456_e.get()._field_token)))) {
		_1eee8de7b_push_err(&(*_self_), _90429_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_90429_decl.get()._field_ident)}));
		return nullptr;
	}
	if ((_90429_decl.get()._field_generics.len() > 0LL)) {
		_1eee8de7b_push_err(&(*_self_), _90429_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_90429_decl.get()._field_ident)}));
		return nullptr;
	}
	return _90456_e;
}



inline jule::Ptr<_1eec8627e_Trait> _1eee91555_from_trait(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _91630_decl,jule::Ptr<_1eec8627e_Trait>& _91657_t) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _91657_t.get()._field_public,_91657_t.get()._field_token)))) {
		_1eee8de7b_push_err(&(*_self_), _91630_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_91630_decl.get()._field_ident)}));
		return nullptr;
	}
	if ((_91630_decl.get()._field_generics.len() > 0LL)) {
		_1eee8de7b_push_err(&(*_self_), _91630_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any(_91630_decl.get()._field_ident)}));
		return nullptr;
	}
	return _91657_t;
}



inline jule::Bool _1eee919d9_check_struct_ins(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1ee24550d_StructIns>& _92840_ins,_1e02c1d07_Token& _92858_error_token) {
	jule::Bool _92880_ok = jule::Bool();
	if (_92840_ins.get()._field_checked) {
		_92880_ok = true;
		return _92880_ok;
	}
	_92840_ins.get()._field_checked=true;
	if (((*_self_)._field_referencer != nullptr) && ((*_self_)._field_referencer.get()._field_owner == jule::Any(jule::Any(_92840_ins.get()._field_decl)))) {
		_92880_ok = true;
		return _92880_ok;
	}
	jule::Ptr<_1eee3c842_SymbolTable> _93917_old_file = (*_self_)._field_s.get()._field_file;
	__JULE_DEFER({
		_1eedccd10_set_current_file((*_self_)._field_s.ptr(), _93917_old_file);
	});
	jule::Ptr<_1eee3c842_SymbolTable> _94217_file = _1eedc9515_find_file((*_self_)._field_s.get()._field_files,_92840_ins.get()._field_decl.get()._field_token._field_file);
	if ((_94217_file != nullptr)) {
		_1eedccd10_set_current_file((*_self_)._field_s.ptr(), _94217_file);
	}
	jule::Ptr<_1eee8c760_Referencer> _94717_referencer = jule::new_ptr<_1eee8c760_Referencer>(_1eee8c760_Referencer(_92840_ins.get()._field_decl.get()._field_ident,jule::Any(jule::Any(_92840_ins.get()._field_decl)),nullptr));
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _95217_generics = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>::alloc(0LL,static_cast<jule::I32>(_92840_ins.get()._field_generics.len()));
	{
		auto &expr = _92840_ins.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2035d13bc:;
		if (it != expr.end()) {
			jule::I32 _2035d19b6_i = it - expr.begin();
			jule::Ptr<_1eee76b45_TypeKind> _2035d1ae8_g = *it;
			{
				_95217_generics = jule::alloc_for_append(_95217_generics,1);_95217_generics.__push(jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1e02c1d07_Token(),_92840_ins.get()._field_decl.get()._field_generics[_2035d19b6_i].get()._field_ident,jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_2035d1ae8_g)),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>())));
			}
			_iter_next_2035d13bc:;
			++it;
			_2035d19b6_i++;
			goto _iter_begin_2035d13bc;
		}
		_iter_end_2035d13bc:;
	}
	jule::Ptr<_1eee3c842_SymbolTable> _96217_old_sema_file = _92840_ins.get()._field_decl.get()._field_sema.get()._field_file;
	__JULE_DEFER({
		_1eedccd10_set_current_file(_92840_ins.get()._field_decl.get()._field_sema.ptr(), _96217_old_sema_file);
	});
	_1eee8d6a6_TypeChecker _96717_tc = _1eee8d6a6_TypeChecker(_92840_ins.get()._field_decl.get()._field_sema,jule::Trait<_1eee992c7_Lookup>(_92840_ins.get()._field_decl.get()._field_sema, 3),_94717_referencer,_1e02c1d07_Token(),jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>(),_95217_generics,jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee75baa_TypeAlias>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>(),jule::Bool());
	{
		auto &expr = _92840_ins.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_2035d3c71:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2449b3_FieldIns> _2035d4711_field = *it;
			{
				jule::Ptr<_1eee76b45_TypeKind> _97621_kind = _1eee963a1_check_decl(&_96717_tc, _2035d4711_field.get()._field_decl.get()._field_kind.get()._field_decl);
				_92880_ok=(_97621_kind != nullptr);
				if (((_92840_ins.get()._field_decl.get()._field_sema != nullptr) && ((*_self_)._field_s != _92840_ins.get()._field_decl.get()._field_sema)) && (_92840_ins.get()._field_decl.get()._field_sema.get()._field_errors.len() > 0LL)) {
					(*_self_)._field_s.get()._field_errors=jule::append((*_self_)._field_s.get()._field_errors,_92840_ins.get()._field_decl.get()._field_sema.get()._field_errors);
					_92840_ins.get()._field_decl.get()._field_sema.get()._field_errors=nullptr;
				}
				if (_92880_ok) {
					_2035d4711_field.get()._field_kind=_97621_kind;
					_92840_ins.get()._field_mutable=_92840_ins.get()._field_mutable || ((!(_2035d4711_field.get()._field_decl.get()._field_mutable)) && _1eee782a6_mutable(_2035d4711_field.get()._field_kind.ptr()));
					_1eede0edd_check_struct_ins_derive_clone((*_self_)._field_s.ptr(), _92840_ins);
				}
			}
			_iter_next_2035d3c71:;
			++it;
			goto _iter_begin_2035d3c71;
		}
		_iter_end_2035d3c71:;
	}
	if ((_92840_ins.get()._field_generics.len() > 0LL)) {
		_1eede48b5_check_struct_ins_operators((*_self_)._field_s, _92840_ins);
		_1eede3ee1_check_struct_ins((*_self_)._field_s, _92840_ins);
	}
	_92880_ok = true;
	return _92880_ok;
}



inline void _1eee91d4c_append_used_struct_reference(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1ee242032_Struct>& _99852_s) {
	if (((*_self_)._field_referencer == nullptr)) {
		return;
	}
	{
		auto &_match_expr{ (*_self_)._field_referencer.get()._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_1ee242032_Struct>>()) {
			_case_begin_2035db7c3:;
			{
				jule::Ptr<_1ee242032_Struct> _100521_ref_s = (*_self_)._field_referencer.get()._field_owner.operator jule::Ptr<_1ee242032_Struct>();
				if ((!(_1ee244188_is_uses(_100521_ref_s.ptr(), _99852_s)))) {
					_100521_ref_s.get()._field_uses = jule::alloc_for_append(_100521_ref_s.get()._field_uses,1);_100521_ref_s.get()._field_uses.__push(_99852_s);
				}
			}
		}
		_match_end_2035db76d:;
	}
}



inline jule::Ptr<_1ee24550d_StructIns> _1eee922c0_build_struct_instance(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _101245_decl,jule::Ptr<_1ee242032_Struct>& _101272_s) {
	jule::Ptr<_1eee8c760_Referencer> _101417_referencer = (*_self_)._field_referencer;
	(*_self_)._field_referencer=nullptr;
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _101617_banned_generics = (*_self_)._field_banned_generics;
	if (((*_self_)._field_banned_generics == nullptr)) {
		{
			auto &_match_expr{ (*_self_)._field_lookup };
			
			if (_match_expr.type_is<jule::Ptr<_1eeda5953_ScopeChecker>>()) {
				_case_begin_2035dec7c:;
				{
					jule::Ptr<_1eeda5953_ScopeChecker> _102325_sc = (*_self_)._field_lookup.operator jule::Ptr<_1eeda5953_ScopeChecker>();
					jule::Ptr<_1eeda5953_ScopeChecker> _102425_hard = _1eeda8170_get_hard_root(_102325_sc);
					if ((_102425_hard.get()._field_owner.get()._field_owner == nullptr) || (_102425_hard.get()._field_owner.get()._field_owner.get()._field_decl != _101272_s)) {
						goto _match_end_2035dea3a;
					}
					jule::I32 _102821_n = _102425_hard.get()._field_owner.get()._field_generics.len() + static_cast<jule::I32>(static_cast<jule::I32>(_102425_hard.get()._field_owner.get()._field_owner.get()._field_generics.len()));
					(*_self_)._field_banned_generics=_102425_hard.get()._field_table.get()._field_type_aliases.slice(0LL,_102821_n);
				}
			}
			_match_end_2035dea3a:;
		}
	} else {
		(*_self_)._field_inscatch=true;
	}
	jule::Ptr<_1ee24550d_StructIns> _103817_ins = _1ee2424c7_instance(_101272_s);
	_103817_ins.get()._field_generics=jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>::alloc(0LL,static_cast<jule::I32>(_101245_decl.get()._field_generics.len()));
	{
		auto &expr = _101245_decl.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2035e3984:;
		if (it != expr.end()) {
			jule::Ptr<_1e01c3db3_TypeDecl> _2035e4347_g = *it;
			{
				jule::Ptr<_1eee76b45_TypeKind> _104121_kind = _1eee95ee9_build(&(*_self_), _2035e4347_g.get()._field_kind);
				if ((_104121_kind == nullptr)) {
					return nullptr;
				}
				_103817_ins.get()._field_generics = jule::alloc_for_append(_103817_ins.get()._field_generics,1);_103817_ins.get()._field_generics.__push(_104121_kind);
			}
			_iter_next_2035e3984:;
			++it;
			goto _iter_begin_2035e3984;
		}
		_iter_end_2035e3984:;
	}
	(*_self_)._field_banned_generics=_101617_banned_generics;
	(*_self_)._field_referencer=_101417_referencer;
	return _103817_ins;
}



inline jule::Ptr<_1ee24550d_StructIns> _1eee92754_from_struct(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _105535_decl,jule::Ptr<_1ee242032_Struct>& _105562_s) {
	if ((!(_1eedcdb68_is_accessible_define((*_self_)._field_s.ptr(), _105562_s.get()._field_public,_105562_s.get()._field_token)))) {
		_1eee8de7b_push_err(&(*_self_), _105535_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_105535_decl.get()._field_ident)}));
		return nullptr;
	}
	if ((*_self_)._field_selection) {
		if ((_105535_decl.get()._field_generics.len() > 0LL)) {
			_1eee8de7b_push_err(&(*_self_), _105535_decl.get()._field_token,jule::Str("generics are not allowed in this scope", 38),jule::Slice<jule::Any>());
			return nullptr;
		}
		return jule::new_ptr<_1ee24550d_StructIns>(_1ee24550d_StructIns(jule::Bool(),_105562_s,jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee2449b3_FieldIns>>(),jule::Slice<jule::Ptr<_1ee2579b5_Fn>>(),jule::Bool(),jule::Ptr<_1ee25edda_ReferenceStack>(),_1ee240ddd_Operators()));
	}
	if ((_105562_s.get()._field_generics.len() > 0LL) && ((*_self_)._field_ignore_generics.len() > 0LL)) {
		return nullptr;
	}
	jule::Bool _107817_ok = (*_self_)._field_not_plain || _1eee906a8_check_illegal_cycles(&(*_self_), _105535_decl,jule::Any(_105562_s));
	if ((!(_107817_ok))) {
		return nullptr;
	}
	_1eee91d4c_append_used_struct_reference(&(*_self_), _105562_s);
	jule::Ptr<_1ee24550d_StructIns> _108417_ins = _1eee922c0_build_struct_instance(&(*_self_), _105535_decl,_105562_s);
	if ((_108417_ins == nullptr)) {
		return nullptr;
	}
	_107817_ok=_1eedceb36_check_generic_quantity((*_self_)._field_s.ptr(), static_cast<jule::I32>(_108417_ins.get()._field_decl.get()._field_generics.len()),static_cast<jule::I32>(_108417_ins.get()._field_generics.len()),_105535_decl.get()._field_token);
	if ((!(_107817_ok))) {
		return nullptr;
	}
	jule::Ptr<_1ee24550d_StructIns> _109417_exist_instance = _1ee24287e_append_instance(_105562_s.ptr(), _108417_ins);
	if ((_109417_exist_instance != nullptr)) {
		return _109417_exist_instance;
	}
	_107817_ok=_1eee919d9_check_struct_ins(&(*_self_), _108417_ins,_105535_decl.get()._field_token);
	if ((!(_107817_ok))) {
		return nullptr;
	}
	return _108417_ins;
}



inline jule::Trait<_1eee76606_Kind> _1eee92bd8_get_def(_1eee8d6a6_TypeChecker* _self_,jule::Trait<_1eee992c7_Lookup> _111626_l,jule::Ptr<_1e029b2ba_IdentTypeDecl>& _111642_decl) {
	{
		auto &expr = (*_self_)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_203600ead:;
		if (it != expr.end()) {
			jule::Ptr<_1e02d911b_GenericDecl> _2036010bd_g = *it;
			{
				if (_2036010bd_g.get()._field_ident == _111642_decl.get()._field_ident) {
					return jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(_2036010bd_g.get()._field_ident), 5);
				}
			}
			_iter_next_203600ead:;
			++it;
			goto _iter_begin_203600ead;
		}
		_iter_end_203600ead:;
	}
	{
		auto &expr = (*_self_)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_20360171c:;
		if (it != expr.end()) {
			jule::Ptr<_1eee75baa_TypeAlias> _203601332_g = *it;
			{
				if (_203601332_g.get()._field_ident == _111642_decl.get()._field_ident) {
					jule::Ptr<_1ee24550d_StructIns> _112525_st = _1eee7a6c6_strct(_203601332_g.get()._field_kind.get()._field_kind.ptr());
					if ((_112525_st != nullptr)) {
						jule::Bool _112725_ok = _1eee906a8_check_illegal_cycles(&(*_self_), _111642_decl,jule::Any(_112525_st.get()._field_decl));
						if ((!(_112725_ok))) {
							return nullptr;
						}
					}
					return _203601332_g.get()._field_kind.get()._field_kind.get()._field_kind;
				}
			}
			_iter_next_20360171c:;
			++it;
			goto _iter_begin_20360171c;
		}
		_iter_end_20360171c:;
	}
	if ((!(_111642_decl.get()._field_cpp_linked))) {
		jule::Ptr<_1eec889ac_Enum> _113721_e = _1eee992c7_Lookup_mptr_data[(_111626_l).type_offset]._1eee99151_find_enum(_111626_l, _111642_decl.get()._field_ident);
		if ((_113721_e != nullptr)) {
			return jule::Trait<_1eee76606_Kind>(_1eee910c1_from_enum(&(*_self_), _111642_decl,_113721_e), 3);
		}
		jule::Ptr<_1eec8627e_Trait> _114221_t = _1eee992c7_Lookup_mptr_data[(_111626_l).type_offset]._1eee98c99_find_trait(_111626_l, _111642_decl.get()._field_ident);
		if ((_114221_t == nullptr) && (!((*_self_)._field_dis_builtin))) {
			_114221_t=_1eeea32c0_find_builtin_trait(_111642_decl.get()._field_ident);
		}
		if ((_114221_t != nullptr)) {
			return jule::Trait<_1eee76606_Kind>(_1eee91555_from_trait(&(*_self_), _111642_decl,_114221_t), 2);
		}
	} else if ((*_self_)._field_selection) {
		_1eee8de7b_push_err(&(*_self_), _111642_decl.get()._field_token,jule::Str("cpp-linked definitions are not allowed in this scope", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ee242032_Struct> _115417_s = _1eee992c7_Lookup_mptr_data[(_111626_l).type_offset]._1eee9845d_find_struct(_111626_l, _111642_decl.get()._field_ident,_111642_decl.get()._field_cpp_linked);
	if ((_115417_s != nullptr)) {
		return jule::Trait<_1eee76606_Kind>(_1eee92754_from_struct(&(*_self_), _111642_decl,_115417_s), 0);
	}
	jule::Ptr<_1eee75baa_TypeAlias> _115917_ta = _1eee992c7_Lookup_mptr_data[(_111626_l).type_offset]._1eee97ec9_find_type_alias(_111626_l, _111642_decl.get()._field_ident,_111642_decl.get()._field_cpp_linked);
	if ((_115917_ta == nullptr) && (!((*_self_)._field_dis_builtin))) {
		_115917_ta=_1eeec32bd_find_builtin_type_alias(_111642_decl.get()._field_ident);
	}
	if ((_115917_ta != nullptr)) {
		return _1eee90b3c_from_type_alias(&(*_self_), _111642_decl,_115917_ta);
	}
	_1eee8de7b_push_err(&(*_self_), _111642_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_111642_decl.get()._field_ident)}));
	return nullptr;
}



inline jule::Trait<_1eee76606_Kind> _1eee93090_build_ident(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e029b2ba_IdentTypeDecl> _117134_decl) {
	{
		
		if (_1eee8c2ba_is_prim(_117134_decl.get()._field_ident)) {
			_case_begin_20360cc12:;
			{
				return jule::Trait<_1eee76606_Kind>(_1eee8e7b7_build_prim(&(*_self_), _117134_decl), 5);
			}
		}
		else {
			_case_begin_20360c607:;
			{
				return _1eee92bd8_get_def(&(*_self_), (*_self_)._field_lookup,_117134_decl);
			}
		}
		_match_end_20360c55d:;
	}
}



inline jule::Ptr<_1eee80d19_Sptr> _1eee93447_build_sptr_from_type(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1eee76b45_TypeKind>& _118044_elem) {
	{
		
		if ((_118044_elem == nullptr)) {
			_case_begin_20360de88:;
			{
				return nullptr;
			}
		}
		else if ((_1eee7a6c6_strct(_118044_elem.ptr()) != nullptr)) {
			_case_begin_20360e010:;
			{
				jule::Ptr<_1ee24550d_StructIns> _118617_s = _1eee7a6c6_strct(_118044_elem.ptr());
				if ((_118617_s.get()._field_decl != nullptr) && _118617_s.get()._field_decl.get()._field_cpp_linked) {
					_1eee8de7b_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
		}
		else if ((_1eee79d46_arr(_118044_elem.ptr()) != nullptr) && _1eee79d46_arr(_118044_elem.ptr()).get()._field_auto) {
			_case_begin_20360e087:;
			{
				_1eee8de7b_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_20360d86c:;
	}
	return jule::new_ptr<_1eee80d19_Sptr>(_1eee80d19_Sptr(_118044_elem));
}



inline jule::Ptr<_1eee80d19_Sptr> _1eee937ee_build_sptr(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e0176184_SptrTypeDecl> _120033_decl) {
	jule::Bool _120113_not_plain = (*_self_)._field_not_plain;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_120113_not_plain;
	});
	jule::Ptr<_1eee76b45_TypeKind> _120517_elem = _1eee963a1_check_decl(&(*_self_), _120033_decl.get()._field_elem);
	return _1eee93447_build_sptr_from_type(&(*_self_), _120517_elem);
}



inline jule::Ptr<_1eee89a04_Ptr> _1eee93ba6_build_ptr_from_type(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1eee76b45_TypeKind>& _120943_elem) {
	{
		
		if ((_120943_elem == nullptr)) {
			_case_begin_2036150d2:;
			{
				return nullptr;
			}
		}
		else if ((_1eee79d46_arr(_120943_elem.ptr()) != nullptr) && _1eee79d46_arr(_120943_elem.ptr()).get()._field_auto) {
			_case_begin_203615159:;
			{
				_1eee8de7b_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_1eee89a04_Ptr>();
			}
		}
		_match_end_203614ee4:;
	}
	return jule::new_ptr<_1eee89a04_Ptr>(_1eee89a04_Ptr(_120943_elem));
}



inline jule::Ptr<_1eee89a04_Ptr> _1eee9405d_build_ptr(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e01c50b2_PtrTypeDecl> _122532_decl) {
	jule::Bool _122613_not_plain = (*_self_)._field_not_plain;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_122613_not_plain;
	});
	jule::Ptr<_1eee76b45_TypeKind> _123017_elem = nullptr;
	if ((!(_1e029d388_is_unsafe(_122532_decl.ptr())))) {
		_123017_elem=_1eee963a1_check_decl(&(*_self_), _122532_decl.get()._field_elem);
		return _1eee93ba6_build_ptr_from_type(&(*_self_), _123017_elem);
	}
	return jule::new_ptr<_1eee89a04_Ptr>(_1eee89a04_Ptr(_123017_elem));
}



inline jule::Ptr<_1eee818ec_Slc> _1eee94415_build_slc(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e025099a_SlcTypeDecl> _124232_decl) {
	jule::Bool _124313_not_plain = (*_self_)._field_not_plain;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_124313_not_plain;
	});
	jule::Ptr<_1eee76b45_TypeKind> _124717_elem = _1eee963a1_check_decl(&(*_self_), _124232_decl.get()._field_elem);
	{
		
		if ((_124717_elem == nullptr)) {
			_case_begin_20361b748:;
			{
				return nullptr;
			}
		}
		else if ((_1eee79d46_arr(_124717_elem.ptr()) != nullptr) && _1eee79d46_arr(_124717_elem.ptr()).get()._field_auto) {
			_case_begin_20361b7c0:;
			{
				_1eee8de7b_push_err(&(*_self_), _124232_decl.get()._field_elem.get()._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_20361b6e3:;
	}
	return jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(_124717_elem));
}



inline jule::Ptr<_1eee88e21_Arr> _1eee947bc_build_arr(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e0134b15_ArrTypeDecl> _126432_decl) {
	jule::Bool _126513_not_plain = (*_self_)._field_not_plain;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_126513_not_plain;
	});
	jule::I32 _126917_n = 0LL;
	if ((!(_1e02a0a2d_auto_sized(_126432_decl.ptr())))) {
		jule::Ptr<_1eee43b89_Data> _127221_size = _1eee65e97_eval_expr(_1eedd41e0_eval((*_self_)._field_s, (*_self_)._field_lookup), _126432_decl.get()._field_size);
		if ((_127221_size == nullptr)) {
			return nullptr;
		}
		if ((!(_1eee44690_is_const(_127221_size.ptr())))) {
			_1eee8de7b_push_err(&(*_self_), _126432_decl.get()._field_size.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if ((_1eee791db_prim(_127221_size.get()._field_kind.ptr()) == nullptr) || (!(_1eeda20ae_is_int(_1eee791db_prim(_127221_size.get()._field_kind.ptr()).get()._field_kind)))) {
			_1eee8de7b_push_err(&(*_self_), _126432_decl.get()._field_size.get()._field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		}
		_126917_n=static_cast<jule::I32>(static_cast<jule::I32>(_1eed21726_as_i64(_127221_size.get()._field_constant.ptr())));
		if ((_126917_n < 0LL)) {
			_1eee8de7b_push_err(&(*_self_), _126432_decl.get()._field_elem.get()._field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		} else if ((_1eed952b1_BIT_SIZE != 64LL) && (static_cast<jule::F64>(_126917_n) > static_cast<jule::F64>(static_cast<jule::F64>(_1eed9ac34_max(jule::Str("int", 3)))))) {
			_1eee8de7b_push_err(&(*_self_), _126432_decl.get()._field_size.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	jule::Ptr<_1eee76b45_TypeKind> _129517_elem = _1eee963a1_check_decl(&(*_self_), _126432_decl.get()._field_elem);
	{
		
		if ((_129517_elem == nullptr)) {
			_case_begin_20362739c:;
			{
				return nullptr;
			}
		}
		else if ((_1eee79d46_arr(_129517_elem.ptr()) != nullptr) && _1eee79d46_arr(_129517_elem.ptr()).get()._field_auto) {
			_case_begin_203627413:;
			{
				_1eee8de7b_push_err(&(*_self_), _126432_decl.get()._field_elem.get()._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_203627226:;
	}
	return jule::new_ptr<_1eee88e21_Arr>(_1eee88e21_Arr(_1e02a0a2d_auto_sized(_126432_decl.ptr()),_126917_n,_129517_elem));
}



inline jule::Ptr<_1eee832d3_Map> _1eee94b74_build_map(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e0181623_MapTypeDecl> _131332_decl) {
	jule::Bool _131413_not_plain = (*_self_)._field_not_plain;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_131413_not_plain;
	});
	jule::Ptr<_1eee76b45_TypeKind> _131817_key = _1eee963a1_check_decl(&(*_self_), _131332_decl.get()._field_key);
	if ((_131817_key == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1eee76b45_TypeKind> _132317_val = _1eee963a1_check_decl(&(*_self_), _131332_decl.get()._field_val);
	if ((_132317_val == nullptr)) {
		return nullptr;
	}
	if ((_1eee79a6b_enm(_132317_val.ptr()) != nullptr)) {
		_1eee8de7b_push_err(&(*_self_), _131332_decl.get()._field_val.get()._field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	}
	return jule::new_ptr<_1eee832d3_Map>(_1eee832d3_Map(_131817_key,_132317_val));
}



inline jule::Ptr<_1eee82568_Tuple> _1eee9502b_build_tuple(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e01aebb2_TupleTypeDecl> _133734_decl) {
	jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _133817_types = jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>::alloc(0LL,static_cast<jule::I32>(_133734_decl.get()._field_types.len()));
	{
		auto &expr = _133734_decl.get()._field_types;
		auto it = expr.begin();
		_iter_begin_20362e31b:;
		if (it != expr.end()) {
			jule::Ptr<_1e01c3db3_TypeDecl> _20362e849_t = *it;
			{
				jule::Ptr<_1eee76b45_TypeKind> _134021_kind = _1eee963a1_check_decl(&(*_self_), _20362e849_t);
				if ((_134021_kind == nullptr)) {
					return nullptr;
				}
				_133817_types = jule::alloc_for_append(_133817_types,1);_133817_types.__push(_134021_kind);
			}
			_iter_next_20362e31b:;
			++it;
			goto _iter_begin_20362e31b;
		}
		_iter_end_20362e31b:;
	}
	return jule::new_ptr<_1eee82568_Tuple>(_1eee82568_Tuple(_133817_types));
}



inline jule::Bool _1eee953d3_check_fn_types(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _135038_f) {
	jule::Bool _135051_ok = jule::Bool();
	{
		auto &expr = _135038_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_203631928:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> _2036319e4_p = *it;
			{
				_2036319e4_p.get()._field_kind=_1eee95ee9_build(&(*_self_), _2036319e4_p.get()._field_decl.get()._field_kind.get()._field_decl.get()._field_kind);
				_135051_ok=(_2036319e4_p.get()._field_kind != nullptr);
				if ((!(_135051_ok))) {
					_135051_ok = false;
					return _135051_ok;
				}
			}
			_iter_next_203631928:;
			++it;
			goto _iter_begin_203631928;
		}
		_iter_end_203631928:;
	}
	if ((!(_1ee257e7c_is_void(_135038_f.get()._field_decl.ptr())))) {
		_135038_f.get()._field_result=_1eee95ee9_build(&(*_self_), _135038_f.get()._field_decl.get()._field_result.get()._field_kind.get()._field_decl.get()._field_kind);
		_135051_ok = (_135038_f.get()._field_result != nullptr);
		return _135051_ok;
	}
	_135051_ok = true;
	return _135051_ok;
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1eee9578a_build_fn(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e02da32b_FnDecl> _136731_decl) {
	if ((_136731_decl.get()._field_generics.len() > 0LL)) {
		_1eee8de7b_push_err(&(*_self_), _136731_decl.get()._field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ee2579b5_Fn> _137317_f = _1ee26377e_build_fn(_136731_decl);
	jule::Ptr<_1ee25b4ad_FnIns> _137417_ins = _1ee259775_instance_force(_137317_f);
	_137417_ins.get()._field_anon=true;
	jule::Bool _137713_ok = _1eee953d3_check_fn_types(&(*_self_), _137417_ins);
	if ((!(_137713_ok))) {
		return nullptr;
	}
	return _137417_ins;
}



inline jule::Trait<_1eee76606_Kind> _1eee95b42_build_by_namespace(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e0275bbd_NamespaceTypeDecl> _138541_decl) {
	jule::Str _138613_path = _1eee8b819_build_link_path_by_tokens(_138541_decl.get()._field_idents);
	jule::Ptr<_1eedc08c4_ImportInfo> _138717_imp = _1eee992c7_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._1eee975b1_select_package((*_self_)._field_lookup, jule::Fn<jule::Bool(jule::Ptr<_1eedc08c4_ImportInfo>)>([=](jule::Ptr<_1eedc08c4_ImportInfo> _138753_imp) mutable -> jule::Bool {
		if ((_138541_decl.get()._field_idents.len() == 1LL) && (_138753_imp.get()._field_alias == _138613_path)) {
			return true;
		}
		return (_138753_imp.get()._field_link_path == _138613_path) && _1eedc3a5e_is_accessible_via_selection(_138753_imp.ptr());
	}));
	if ((_138717_imp == nullptr) || (!(_1eedc3388_is_lookupable(_138717_imp.ptr(), jule::Str("self", 4))))) {
		_1eee8de7b_push_err(&(*_self_), _138541_decl.get()._field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_138613_path)}));
		return nullptr;
	}
	_1eee8e410_disallow_builtin(&(*_self_));
	jule::Trait<_1eee76606_Kind> _140017_kind = _1eee92bd8_get_def(&(*_self_), jule::Trait<_1eee992c7_Lookup>(_138717_imp, 1),_138541_decl.get()._field_kind);
	_1eee8e1bd_allow_builtin(&(*_self_));
	return _140017_kind;
}



inline jule::Ptr<_1eee76b45_TypeKind> _1eee95ee9_build(_1eee8d6a6_TypeChecker* _self_,jule::Any& _140629_decl_kind) {
	jule::Trait<_1eee76606_Kind> _140717_kind = nullptr;
	{
		auto &_match_expr{ _140629_decl_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee76b45_TypeKind>>()) {
			_case_begin_20363dea7:;
			{
				_140717_kind=jule::Trait<_1eee76606_Kind>(_140629_decl_kind.operator jule::Ptr<_1eee76b45_TypeKind>(), 4);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e029b2ba_IdentTypeDecl>>()) {
			_case_begin_20363e01d:;
			{
				jule::Trait<_1eee76606_Kind> _141221_t = _1eee93090_build_ident(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e029b2ba_IdentTypeDecl>());
				if ((_141221_t != nullptr)) {
					_140717_kind=_141221_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0176184_SptrTypeDecl>>()) {
			_case_begin_20363e084:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1eee80d19_Sptr> _141821_t = _1eee937ee_build_sptr(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e0176184_SptrTypeDecl>());
				if ((_141821_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_141821_t, 6);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e01c50b2_PtrTypeDecl>>()) {
			_case_begin_20363e0ea:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1eee89a04_Ptr> _142421_t = _1eee9405d_build_ptr(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e01c50b2_PtrTypeDecl>());
				if ((_142421_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_142421_t, 11);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e025099a_SlcTypeDecl>>()) {
			_case_begin_20363eace:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1eee818ec_Slc> _143021_t = _1eee94415_build_slc(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e025099a_SlcTypeDecl>());
				if ((_143021_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_143021_t, 7);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0134b15_ArrTypeDecl>>()) {
			_case_begin_20363eb45:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1eee88e21_Arr> _143621_t = _1eee947bc_build_arr(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e0134b15_ArrTypeDecl>());
				if ((_143621_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_143621_t, 10);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0181623_MapTypeDecl>>()) {
			_case_begin_20363ebab:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1eee832d3_Map> _144221_t = _1eee94b74_build_map(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e0181623_MapTypeDecl>());
				if ((_144221_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_144221_t, 9);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e01aebb2_TupleTypeDecl>>()) {
			_case_begin_20363ec22:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1eee82568_Tuple> _144821_t = _1eee9502b_build_tuple(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e01aebb2_TupleTypeDecl>());
				if ((_144821_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_144821_t, 8);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02da32b_FnDecl>>()) {
			_case_begin_20363eded:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_1ee25b4ad_FnIns> _145421_t = _1eee9578a_build_fn(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e02da32b_FnDecl>());
				if ((_145421_t != nullptr)) {
					_140717_kind=jule::Trait<_1eee76606_Kind>(_145421_t, 1);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e0275bbd_NamespaceTypeDecl>>()) {
			_case_begin_20363ee64:;
			{
				(*_self_)._field_inscatch=true;
				jule::Trait<_1eee76606_Kind> _146021_t = _1eee95b42_build_by_namespace(&(*_self_), _140629_decl_kind.operator jule::Ptr<_1e0275bbd_NamespaceTypeDecl>());
				if ((_146021_t != nullptr)) {
					_140717_kind=_146021_t;
				}
			}
		}
		else {
			_case_begin_20363dd53:;
			{
				_1eee8de7b_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_20363dc87:;
	}
	if ((_140717_kind == nullptr)) {
		return nullptr;
	}
	{
		auto &_match_expr{ _140717_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1eee76b45_TypeKind>>()) {
			_case_begin_20364c092:;
			{
				return _140717_kind.operator jule::Ptr<_1eee76b45_TypeKind>();
			}
		}
		else {
			_case_begin_20364b2c2:;
			{
				return jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_140717_kind));
			}
		}
		_match_end_203648a94:;
	}
}



inline jule::Ptr<_1eee76b45_TypeKind> _1eee963a1_check_decl(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1e01c3db3_TypeDecl>& _148134_decl) {
	_1e02c1d07_Token _148317_error_token = (*_self_)._field_error_token;
	(*_self_)._field_error_token=_148134_decl.get()._field_token;
	jule::Ptr<_1eee76b45_TypeKind> _148617_kind = _1eee95ee9_build(&(*_self_), _148134_decl.get()._field_kind);
	(*_self_)._field_error_token=_148317_error_token;
	return _148617_kind;
}



inline void _1eee966c0_check(_1eee8d6a6_TypeChecker* _self_,jule::Ptr<_1eee7b4a7_TypeSymbol>& _149229_t) {
	if ((_149229_t.get()._field_decl == nullptr)) {
		return;
	}
	jule::Ptr<_1eee76b45_TypeKind> _149617_kind = _1eee963a1_check_decl(&(*_self_), _149229_t.get()._field_decl);
	if ((_149617_kind == nullptr)) {
		_1eee7bb5b_remove_kind(_149229_t.ptr());
		return;
	}
	_149229_t.get()._field_kind=_149617_kind;
}







std::ostream &operator<<(std::ostream &_Stream, _1eee8d6a6_TypeChecker _Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "selection:" << _Src._field_selection << ", ";
	_Stream << "owner_alias:" << _Src._field_owner_alias << ", ";
	_Stream << "banned_generics:" << _Src._field_banned_generics << ", ";
	_Stream << "inscatch:" << _Src._field_inscatch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d9bbb_AssignSt _Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02d9ddb_ScopeTree _Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "end:" << _Src._field_end;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee24e58e_CommonSubIdentExprModel _Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_1ed25d4b1_IR>,jule::Slice<_208de2238_Log>> static__1e00de075_build(jule::Str _2825_path,jule::I32 _2836_flags) {
	jule::Ptr<_1ed1dc40c_JuleImporter> _2917_importer = static__1ed160aab_new(_1ed308649_build_compile_info());
	jule::Slice<jule::Ptr<_1e01bcb7b_Ast>> _3018_files;
	jule::Slice<_208de2238_Log> _3029_logs;
	std::tie(_3018_files,_3029_logs) = _1ed22dd11_import_package(_2917_importer.ptr(), _2825_path,true);
	if ((_3029_logs.len() > 0LL)) {
		return std::make_tuple(nullptr,_3029_logs);
	}
	jule::Str _3413_root = _2825_path;
	if ((_3018_files.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1eedc3da0_Package> _4018_pkg;
	std::tie(_4018_pkg,_3029_logs) = _1eee9ab36_analyze_package(_3018_files,jule::Trait<_1eedbccde_Importer>(_2917_importer, 0),_2836_flags);
	if ((_3029_logs.len() > 0LL)) {
		return std::make_tuple(nullptr,_3029_logs);
	}
	jule::Ptr<_1ed25d4b1_IR> _4517_ir = jule::new_ptr<_1ed25d4b1_IR>(_1ed25d4b1_IR(_3413_root,jule::Slice<jule::Str>(),_4018_pkg,_1ed1d7281_all_packages(_2917_importer.ptr()),_1ed280cca_OrderedDefines()));
	_4517_ir.get()._field_passes=_1ed2d4acb_get_all_unique_passes(_4517_ir.get()._field_main,_4517_ir.get()._field_used);
	return std::make_tuple(_4517_ir,nullptr);
}



inline void _1e01136e8_append_structs(_1ed25d4b1_IR* _self_,jule::Ptr<_1eedc3da0_Package>& _5734_p,jule::Slice<jule::Ptr<_1ee242032_Struct>>& _5758_buffer) {
	{
		auto &expr = _5734_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203833784:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203833850_f = *it;
			{
				{
					auto &expr = _203833850_f.get()._field_structs;
					auto it = expr.begin();
					_iter_begin_20383407b:;
					if (it != expr.end()) {
						jule::Ptr<_1ee242032_Struct> _2038340c0_s = *it;
						{
							if ((!(_2038340c0_s.get()._field_cpp_linked))) {
								_5758_buffer = jule::alloc_for_append(_5758_buffer,1);_5758_buffer.__push(_2038340c0_s);
							}
						}
						_iter_next_20383407b:;
						++it;
						goto _iter_begin_20383407b;
					}
					_iter_end_20383407b:;
				}
			}
			_iter_next_203833784:;
			++it;
			goto _iter_begin_203833784;
		}
		_iter_end_203833784:;
	}
}



inline jule::Slice<jule::Ptr<_1ee242032_Struct>> _1ed2c632b_get_all_structures(_1ed25d4b1_IR* _self_) {
	jule::Slice<jule::Ptr<_1ee242032_Struct>> _7017_buffer = nullptr;
	_1e01136e8_append_structs(&(*_self_), (*_self_)._field_main,_7017_buffer);
	{
		auto &expr = (*_self_)._field_used;
		auto it = expr.begin();
		_iter_begin_203835995:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203835a72_u = *it;
			{
				if ((!(_203835a72_u.get()._field_cpp_linked))) {
					_1e01136e8_append_structs(&(*_self_), _203835a72_u.get()._field_package,_7017_buffer);
				}
			}
			_iter_next_203835995:;
			++it;
			goto _iter_begin_203835995;
		}
		_iter_end_203835995:;
	}
	return _7017_buffer;
}



inline void _1ed2cad03_order(_1ed25d4b1_IR* _self_) {
	(*_self_)._field_ordered._field_structs=_1ed2c632b_get_all_structures(&(*_self_));
	static__208ebcbd7_order_structures((*_self_)._field_ordered._field_structs);
}







std::ostream &operator<<(std::ostream &_Stream, _1ed25d4b1_IR _Src) {
	_Stream << "IR{";
	_Stream << "root:" << _Src._field_root << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e01a6060_is_self(_1e02da10b_ParamDecl* _self_) {
	return _208be3556_has_suffix((*_self_)._field_ident,jule::Str("self", 4));
}



inline jule::Bool _1e01a6b43_is_ref(_1e02da10b_ParamDecl* _self_) {
	return (!((*_self_)._field_ident.empty())) && ((*_self_)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, _1e02da10b_ParamDecl _Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02da54b_is_anon(_1e02da32b_FnDecl* _self_) {
	return ((*_self_)._field_ident == jule::Str("<anonymous>", 11));
}







std::ostream &operator<<(std::ostream &_Stream, _1e02da32b_FnDecl _Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02daea8_VarDecl _Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02db31b_RetSt _Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02dba36_is_inf(_1e02db816_Iter* _self_) {
	return (*_self_)._field_kind == jule::Any(jule::Any(nullptr));
}







std::ostream &operator<<(std::ostream &_Stream, _1e02db816_Iter _Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2511b7_BuiltinPanicCallExprModel _Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee25177d_BuiltinAssertCallExprModel _Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02dc0a8_is_while_next(_1e02dbd88_WhileKind* _self_) {
	return (*_self_)._field_next != jule::Any(jule::Any(nullptr));
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dbd88_WhileKind _Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _200564430_MutSlicingExprModel _Src) {
	_Stream << "MutSlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dc4a4_RangeKind _Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dc817_BreakSt _Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dcb7a_ContSt _Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dd087_If _Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dd3ea_Else _Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e01c3db3_TypeDecl _Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02dde01_TypeAliasDecl _Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02de30d_Case _Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02de907_MatchCase _Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1ee25a358_ParamIns> _1ee2560bd_instance(jule::Ptr<_1ee255b8e_Param> _self_) {
	return jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(_self_,jule::Ptr<_1eee76b45_TypeKind>()));
}



inline jule::Bool _1ee256398_is_self(_1ee255b8e_Param* _self_) {
	return ((*_self_)._field_ident == jule::Str("&self", 5)) || ((*_self_)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _1ee256673_is_ref(_1ee255b8e_Param* _self_) {
	return (!((*_self_)._field_ident.empty())) && ((*_self_)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, _1ee255b8e_Param _Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1ee257e7c_is_void(_1ee2579b5_Fn* _self_) {
	return ((*_self_)._field_result == nullptr);
}



inline jule::Bool _1ee258257_is_method(_1ee2579b5_Fn* _self_) {
	return ((*_self_)._field_owner != nullptr);
}



inline jule::Bool _1ee258532_is_entry_point(_1ee2579b5_Fn* _self_) {
	return ((*_self_)._field_ident == jule::Str("main", 4));
}



inline jule::Bool _1ee25880c_is_init(_1ee2579b5_Fn* _self_) {
	return ((*_self_)._field_ident == jule::Str("init", 4));
}



inline jule::Bool _1ee258ad7_is_anon(_1ee2579b5_Fn* _self_) {
	return _1e02c4de8_is_anon_ident((*_self_)._field_ident);
}



inline jule::Bool _1ee258db2_any_var(_1ee2579b5_Fn* _self_) {
	return ((*_self_)._field_result != nullptr) && ((*_self_)._field_result.get()._field_idents.len() > 0LL);
}



inline jule::Bool _1ee2591d1_parameters_uses_generics(_1ee2579b5_Fn* _self_) {
	if (((*_self_)._field_generics.len() == 0LL)) {
		return false;
	}
	{
		auto &expr = (*_self_)._field_params;
		auto it = expr.begin();
		_iter_begin_20296d5b2:;
		if (it != expr.end()) {
			jule::Ptr<_1ee255b8e_Param> &_20296d705_p = *it;
			{
				if (_1ee25d58c_parameter_uses_generics(_20296d705_p,(*_self_)._field_generics)) {
					return true;
				}
			}
			_iter_next_20296d5b2:;
			++it;
			goto _iter_begin_20296d5b2;
		}
		_iter_end_20296d5b2:;
	}
	return false;
}



inline jule::Bool _1ee25949a_result_uses_generics(_1ee2579b5_Fn* _self_) {
	if (_1ee257e7c_is_void(&(*_self_))) {
		return false;
	} else if (((*_self_)._field_result.get()._field_kind == nullptr) || ((*_self_)._field_result.get()._field_kind.get()._field_kind == nullptr)) {
		return false;
	}
	return _1ee25d119_kind_uses_generics((*_self_)._field_result.get()._field_kind.get()._field_kind,(*_self_)._field_generics);
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1ee259775_instance_force(jule::Ptr<_1ee2579b5_Fn> _self_) {
	jule::Ptr<_1ee25b4ad_FnIns> _12717_ins = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),_self_,jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::new_ptr<_1eed8a5a3_Scope>(_1eed8a5a3_Scope()),static__1ee26013d_new(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(),jule::Bool()));
	_12717_ins.get()._field_params=jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>::alloc(0LL,static_cast<jule::I32>(_self_.get()._field_params.len()));
	{
		auto &expr = _self_.get()._field_params;
		auto it = expr.begin();
		_iter_begin_2029726a4:;
		if (it != expr.end()) {
			jule::Ptr<_1ee255b8e_Param> _202973012_p = *it;
			{
				_12717_ins.get()._field_params = jule::alloc_for_append(_12717_ins.get()._field_params,1);_12717_ins.get()._field_params.__push(_1ee2560bd_instance(_202973012_p));
			}
			_iter_next_2029726a4:;
			++it;
			goto _iter_begin_2029726a4;
		}
		_iter_end_2029726a4:;
	}
	if ((_12717_ins.get()._field_decl.get()._field_result != nullptr)) {
		_12717_ins.get()._field_result=_12717_ins.get()._field_decl.get()._field_result.get()._field_kind.get()._field_kind;
	}
	return _12717_ins;
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1ee259a50_instance(jule::Ptr<_1ee2579b5_Fn> _self_) {
	if ((_self_.get()._field_generics.len() == 0LL) && (_self_.get()._field_instances.len() == 1LL)) {
		return _self_.get()._field_instances[0LL];
	}
	return _1ee259775_instance_force(_self_);
}



inline std::tuple<jule::Bool,jule::I32> _1ee259e07_append_instance(_1ee2579b5_Fn* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _15439_ins) {
	if (((*_self_)._field_generics.len() == 0LL)) {
		if (((*_self_)._field_instances.len() == 1LL)) {
			return std::make_tuple(false,0LL);
		}
		(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_15439_ins);
		return std::make_tuple(true,-1LL);
	}
	if (((*_self_)._field_instances.len() == 0LL)) {
		(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_15439_ins);
		return std::make_tuple(true,-1LL);
	}
	{
		auto &expr = (*_self_)._field_instances;
		auto it = expr.begin();
		_iter_begin_20297918e:;
		if (it != expr.end()) {
			jule::I32 _202979ca5_j = it - expr.begin();
			jule::Ptr<_1ee25b4ad_FnIns> _202979dd7_ains = *it;
			{
				if (_1ee25c7bc_same(_202979dd7_ains.ptr(), _15439_ins)) {
					return std::make_tuple(false,_202979ca5_j);
				}
			}
			_iter_next_20297918e:;
			++it;
			_202979ca5_j++;
			goto _iter_begin_20297918e;
		}
		_iter_end_20297918e:;
	}
	(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_15439_ins);
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, _1ee2579b5_Fn _Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e009a_UseDecl _Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02e0908_auto_expr(_1e02e04a7_EnumItemDecl* _self_) {
	return ((*_self_)._field_expr == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e04a7_EnumItemDecl _Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e02e10bd_default_typed(_1e02e0d9d_EnumDecl* _self_) {
	return ((*_self_)._field_kind == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e0d9d_EnumDecl _Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "end:" << _Src._field_end;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2005a036c_ObjectCoder> static__20059d535_new(jule::Ptr<_1ed25d4b1_IR>& _7628_ir,_2005bb872_SerializationInfo _7637_info) {
	jule::Ptr<_2005a036c_ObjectCoder> _7717_oc = jule::new_ptr<_2005a036c_ObjectCoder>(_2005a036c_ObjectCoder(_7628_ir,_7637_info,jule::Str(),jule::Str(),jule::Str(),jule::Str(),jule::Str(),jule::Slice<jule::Ptr<_20059b775_TraitHash>>(),jule::Ptr<_2005213cb_ExprCoder>(),jule::Ptr<_2004729c0_ScopeCoder>()));
	_7717_oc.get()._field_ec=static__200467cb2_new(_7717_oc);
	_7717_oc.get()._field_sc=static__2004b8eab_new(_7717_oc);
	return _7717_oc;
}



inline void _2005922d7_add_indent(_2005a036c_ObjectCoder* _self_) {
	
	(*_self_)._field_indent_buffer+=jule::Str("\t", 1);
}



inline void _2005953ea_done_indent(_2005a036c_ObjectCoder* _self_) {
	(*_self_)._field_indent_buffer=(*_self_)._field_indent_buffer.slice(0LL,((*_self_)._field_indent_buffer.len() - 1LL));
}



inline jule::Str _200594c57_indent(_2005a036c_ObjectCoder* _self_) {
	return (*_self_)._field_indent_buffer;
}



inline jule::I32 _2005be435_find_type_offset(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eec8627e_Trait> _10231_t,jule::Ptr<_1eee76b45_TypeKind> _10246_k) {
	jule::Ptr<_1ee24550d_StructIns> _10317_s = nullptr;
	if ((_1eee794b6_sptr(_10246_k.ptr()) != nullptr)) {
		_10246_k=_1eee794b6_sptr(_10246_k.ptr()).get()._field_elem;
	}
	if ((_1eee7a6c6_strct(_10246_k.ptr()) == nullptr)) {
		return -1LL;
	}
	_10317_s=_1eee7a6c6_strct(_10246_k.ptr());
	{
		auto &expr = (*_self_)._field_trait_map;
		auto it = expr.begin();
		_iter_begin_203bccc3d:;
		if (it != expr.end()) {
			jule::Ptr<_20059b775_TraitHash> &_203bcd25a_hash = *it;
			{
				if ((_203bcd25a_hash.get()._field_t == _10231_t) && (_203bcd25a_hash.get()._field_s == _10317_s)) {
					return _203bcd25a_hash.get()._field_i;
				}
			}
			_iter_next_203bccc3d:;
			++it;
			goto _iter_begin_203bccc3d;
		}
		_iter_end_203bccc3d:;
	}
	return -1LL;
}



inline jule::Str _2005beb61_loc_info(_2005a036c_ObjectCoder* _self_,_1e02c1d07_Token& _12024_t) {
	jule::Str _12117_loc = _12024_t._field_file.get()._field_path;
	if (_22237d18e_PRODUCTION) {
		{
			
			if (_208be3dd6_has_prefix(_12117_loc,_208e02831_PATH_STDLIB)) {
				_case_begin_203bd00b4:;
				{
					(_12117_loc).mut_slice(_208c75660_dir(_208e02831_PATH_STDLIB).len() + 1LL);
				}
			}
			else if (_208be3dd6_has_prefix(_12117_loc,(*_self_)._field_ir.get()._field_root)) {
				_case_begin_203bd013b:;
				{
					(_12117_loc).mut_slice(_208c75660_dir((*_self_)._field_ir.get()._field_root).len() + 1LL);
				}
			}
			_match_end_203bceea4:;
		}
	}
	_12117_loc+=jule::Str(":", 1);
	_12117_loc+=_1eec84964_itoa(_12024_t._field_row);
	_12117_loc+=jule::Str(":", 1);
	_12117_loc+=_1eec84964_itoa(_12024_t._field_column);
	return _2005828c1_cstr_bytes(static_cast<jule::Slice<jule::U8>>(_12117_loc));
}



inline jule::Str _2005a2d86_links(_2005a036c_ObjectCoder* _self_) {
	jule::Str _14517_obj = jule::Str();
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203bd3abd:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203bd3b67_pkg = *it;
			{
				{
					
					if ((!(_203bd3b67_pkg.get()._field_cpp_linked))) {
						_case_begin_203bd431b:;
						{
							goto _iter_next_203bd3abd;
						}
					}
					else if (_208dd1348_is_std_header_path(_203bd3b67_pkg.get()._field_path)) {
						_case_begin_203bd4393:;
						{
							_14517_obj+=jule::Str("#include ", 9);
							_14517_obj+=_203bd3b67_pkg.get()._field_path;
							_14517_obj+=jule::Str("\n", 1);
						}
					}
					_match_end_203bd420b:;
				}
			}
			_iter_next_203bd3abd:;
			++it;
			goto _iter_begin_203bd3abd;
		}
		_iter_end_203bd3abd:;
	}
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203bd58e4:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203bd3dba_pkg = *it;
			{
				{
					
					if ((!(_203bd3dba_pkg.get()._field_cpp_linked))) {
						_case_begin_203bd5c8a:;
						{
							goto _iter_next_203bd58e4;
						}
					}
					else if (_2005e7ea8_is_cpp_header_file(_203bd3dba_pkg.get()._field_path)) {
						_case_begin_203bd5d12:;
						{
							_14517_obj+=jule::Str("#include \"", 10);
							_14517_obj+=_203bd3dba_pkg.get()._field_path;
							_14517_obj+=jule::Str("\"\n", 2);
						}
					}
					_match_end_203bd5b7a:;
				}
			}
			_iter_next_203bd58e4:;
			++it;
			goto _iter_begin_203bd58e4;
		}
		_iter_end_203bd58e4:;
	}
	return _14517_obj;
}



inline jule::Str _2005debe7_param_ins(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee25a358_ParamIns>& _17129_p) {
	jule::Str _17217_obj = static__2005eddc1_param_ins(_17129_p);
	_17217_obj+=jule::Str(" ", 1);
	_17217_obj+=static__20058829a_param(_17129_p.get()._field_decl);
	return _17217_obj;
}



inline jule::Str _2005ded5c_param(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee255b8e_Param>& _17929_p) {
	jule::Str _18017_obj = static__2005edab3_param(_17929_p);
	if (((!(_17929_p.get()._field_ident.empty())) && (!(_1e02c4ada_is_ignore_ident(_17929_p.get()._field_ident)))) && (!(_1e02c4de8_is_anon_ident(_17929_p.get()._field_ident)))) {
		_18017_obj+=jule::Str(" ", 1);
		_18017_obj+=static__20058829a_param(_17929_p);
	}
	return _18017_obj;
}



inline jule::Str _2005deec2_params(_2005a036c_ObjectCoder* _self_,jule::Slice<jule::Ptr<_1ee255b8e_Param>>& _18930_params) {
	if ((_18930_params.len() == 0LL)) {
		return jule::Str("(void)", 6);
	}
	jule::Str _19317_obj = jule::Str("(", 1);
	{
		auto &expr = _18930_params;
		auto it = expr.begin();
		_iter_begin_203bdc478:;
		if (it != expr.end()) {
			jule::Ptr<_1ee255b8e_Param> _203bdc4bc_p = *it;
			{
				if (_1ee256398_is_self(_203bdc4bc_p.ptr())) {
					if (_1ee256673_is_ref(_203bdc4bc_p.ptr())) {
						_19317_obj+=_2005ded5c_param(&(*_self_), _203bdc4bc_p);
					}
				} else {
					_19317_obj+=_2005ded5c_param(&(*_self_), _203bdc4bc_p);
				}
				_19317_obj+=jule::Str(",", 1);
			}
			_iter_next_203bdc478:;
			++it;
			goto _iter_begin_203bdc478;
		}
		_iter_end_203bdc478:;
	}
	(_19317_obj).mut_slice(0LL,_19317_obj.len() - 1LL);
	return (_19317_obj + jule::Str(")", 1));
}



inline jule::Str _2005e0137_params_ins(_2005a036c_ObjectCoder* _self_,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>& _21034_params) {
	{
		
		if ((_21034_params.len() == 0LL)) {
			_case_begin_203bdedd7:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_203bded0a:;
	}
	jule::Str _21617_obj = jule::Str("(", 1);
	{
		auto &expr = _21034_params;
		auto it = expr.begin();
		_iter_begin_203be079a:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> _203be07de_p = *it;
			{
				_21617_obj+=_2005debe7_param_ins(&(*_self_), _203be07de_p);
				_21617_obj+=jule::Str(",", 1);
			}
			_iter_next_203be079a:;
			++it;
			goto _iter_begin_203be079a;
		}
		_iter_end_203be079a:;
	}
	(_21617_obj).mut_slice(0LL,_21617_obj.len() - 1LL);
	return (_21617_obj + jule::Str(")", 1));
}



inline jule::Str _2005e029c_params_decls(_2005a036c_ObjectCoder* _self_,jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>& _22836_params) {
	if ((_22836_params.len() == 0LL)) {
		return jule::Str("(void)", 6);
	}
	jule::Str _23317_obj = jule::Str("(", 1);
	{
		auto &expr = _22836_params;
		auto it = expr.begin();
		_iter_begin_203be32c5:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> _203be3319_p = *it;
			{
				_23317_obj+=static__2005eddc1_param_ins(_203be3319_p);
				_23317_obj+=jule::Str(",", 1);
			}
			_iter_next_203be32c5:;
			++it;
			goto _iter_begin_203be32c5;
		}
		_iter_end_203be32c5:;
	}
	(_23317_obj).mut_slice(0LL,_23317_obj.len() - 1LL);
	return (_23317_obj + jule::Str(")", 1));
}



inline void _2005e0412_prepare_structure(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee242032_Struct>& _24441_s) {
	{
		auto &expr = _24441_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203be4c66:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _203be4d87_ins = *it;
			{
				{
					auto &expr = _203be4d87_ins.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_203be553b:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _203be55c4_m = *it;
						{
							if (_203be55c4_m.get()._field_statically) {
								goto _iter_next_203be553b;
							}
							{
								auto &expr = _203be55c4_m.get()._field_instances;
								auto it = expr.begin();
								_iter_begin_203be5c01:;
								if (it != expr.end()) {
									jule::Ptr<_1ee25b4ad_FnIns> _203be6284_ins = *it;
									{
										jule::Ptr<_1ee25a358_ParamIns> _25129_p = _203be6284_ins.get()._field_params[0LL];
										if ((!(_1ee256673_is_ref(_25129_p.get()._field_decl.ptr())))) {
											_25129_p.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_2005e95c5_CustomType>(_2005e95c5_CustomType(static__2005eb40c_as_ptr(static__2005eee16_kind(_25129_p.get()._field_kind)))), 12)));
										} else {
											_25129_p.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_2005e95c5_CustomType>(_2005e95c5_CustomType(static__2005eee16_kind(_25129_p.get()._field_kind))), 12)));
										}
									}
									_iter_next_203be5c01:;
									++it;
									goto _iter_begin_203be5c01;
								}
								_iter_end_203be5c01:;
							}
						}
						_iter_next_203be553b:;
						++it;
						goto _iter_begin_203be553b;
					}
					_iter_end_203be553b:;
				}
			}
			_iter_next_203be4c66:;
			++it;
			goto _iter_begin_203be4c66;
		}
		_iter_end_203be4c66:;
	}
}



inline void _2005e0577_prepare_structures(_2005a036c_ObjectCoder* _self_) {
	{
		auto &expr = (*_self_)._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_203be59d1:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _203be882a_s = *it;
			{
				if ((!(_203be882a_s.get()._field_cpp_linked)) && (_203be882a_s.get()._field_token._field_id != static_cast<jule::U32>(0LLU))) {
					_2005e0412_prepare_structure(&(*_self_), _203be882a_s);
				}
			}
			_iter_next_203be59d1:;
			++it;
			goto _iter_begin_203be59d1;
		}
		_iter_end_203be59d1:;
	}
}



inline void _2005e06dc_build_trait_wrapper(_2005a036c_ObjectCoder* _self_,jule::Ptr<_20059b775_TraitHash>& _27843_hash) {
	{
		auto &expr = _27843_hash.get()._field_t.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_203beae7b:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _203beb025_m = *it;
			{
				jule::Str _28017_ident = _203beb025_m.get()._field_ident;
				_203beb025_m.get()._field_instances[0LL].get()._field_scope=nullptr;
				jule::Bool _28217_ptr = (!(_1ee256673_is_ref(_203beb025_m.get()._field_params[0LL].ptr())));
				jule::Ptr<_1ee2579b5_Fn> _28421_sm = _1ee24672e_find_method(_27843_hash.get()._field_s.ptr(), _203beb025_m.get()._field_ident,false);
				if ((_28421_sm == nullptr) || (_28421_sm.get()._field_instances.len() == 0LL)) {
					goto _iter_next_203beae7b;
				}
				_203beb025_m.get()._field_ident=(_28017_ident + jule::Str("_", 1)) + _1eec84964_itoa(_27843_hash.get()._field_i);
				(*_self_)._field_trait_wrappers+=_2005e4e61_func(&(*_self_), _203beb025_m);
				_203beb025_m.get()._field_ident=_28017_ident;
				_2005922d7_add_indent(&(*_self_));
				(*_self_)._field_trait_wrappers+=jule::Str("{\n", 2);
				(*_self_)._field_trait_wrappers+=_200594c57_indent(&(*_self_));
				if ((!(_1ee257e7c_is_void(_28421_sm.ptr())))) {
					(*_self_)._field_trait_wrappers+=jule::Str("return ", 7);
				}
				(*_self_)._field_trait_wrappers+=static__200587871_func(_28421_sm);
				(*_self_)._field_trait_wrappers+=jule::Str("(", 1);
				if (_28217_ptr) {
					(*_self_)._field_trait_wrappers+=jule::Str("_self_.safe_ptr<", 16);
					(*_self_)._field_trait_wrappers+=static__2005ed497_structure_ins(_27843_hash.get()._field_s);
					(*_self_)._field_trait_wrappers+=jule::Str(">(", 2);
					if ((!(_22237d18e_PRODUCTION))) {
						(*_self_)._field_trait_wrappers+=jule::Str("_00___file", 10);
					}
					(*_self_)._field_trait_wrappers+=jule::Str(")", 1);
				} else {
					(*_self_)._field_trait_wrappers+=jule::Str("_self_.data.as<", 15);
					(*_self_)._field_trait_wrappers+=static__2005ed189_structure(_28421_sm.get()._field_owner);
					(*_self_)._field_trait_wrappers+=jule::Str(">()", 3);
				}
				{
					auto expr = _203beb025_m.get()._field_params.slice(1LL);
					auto it = expr.begin();
					_iter_begin_203c00557:;
					if (it != expr.end()) {
						jule::Ptr<_1ee255b8e_Param> _203c05095_mp = *it;
						{
							(*_self_)._field_trait_wrappers+=jule::Str(", ", 2);
							(*_self_)._field_trait_wrappers+=static__20058829a_param(_203c05095_mp);
						}
						_iter_next_203c00557:;
						++it;
						goto _iter_begin_203c00557;
					}
					_iter_end_203c00557:;
				}
				(*_self_)._field_trait_wrappers+=jule::Str(");\n}\n", 5);
				_2005953ea_done_indent(&(*_self_));
			}
			_iter_next_203beae7b:;
			++it;
			goto _iter_begin_203beae7b;
		}
		_iter_end_203beae7b:;
	}
}



inline void _2005e0852_trait_decl(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eec8627e_Trait>& _32234_t) {
	jule::Str _32313_ident = static__200587e8c_trait_decl(_32234_t);
	jule::Str _32513_type_data = (_32313_ident + jule::Str("MptrData", 8));
	(*_self_)._field_trait_data_t+=jule::Str("struct ", 7);
	(*_self_)._field_trait_data_t+=_32513_type_data;
	(*_self_)._field_trait_data_t+=jule::Str(" {\n", 3);
	{
		auto &expr = _32234_t.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_203c07c13:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _203c07d9a_m = *it;
			{
				jule::Ptr<_1ee25b4ad_FnIns> _33121_ins = _203c07d9a_m.get()._field_instances[0LL];
				jule::Ptr<_1ee25a358_ParamIns> _33221_p = _33121_ins.get()._field_params[0LL];
				_33221_p.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_32234_t, 2)));
				{
					auto expr = _33121_ins.get()._field_params.slice(1LL);
					auto it = expr.begin();
					_iter_begin_203c098a2:;
					if (it != expr.end()) {
						jule::I32 _203c09a7d_i = it - expr.begin();
						jule::Ptr<_1ee25a358_ParamIns> _203c09c04_ip = *it;
						{
							if (_1e02c4de8_is_anon_ident(_203c09c04_ip.get()._field_decl.get()._field_ident)) {
								_203c09c04_ip.get()._field_decl.get()._field_ident=jule::Str("_", 1) + _1eec84964_itoa(_203c09a7d_i);
							}
						}
						_iter_next_203c098a2:;
						++it;
						_203c09a7d_i++;
						goto _iter_begin_203c098a2;
					}
					_iter_end_203c098a2:;
				}
				if ((!(_22237d18e_PRODUCTION))) {
					_33121_ins.get()._field_params = jule::alloc_for_append(_33121_ins.get()._field_params,1);_33121_ins.get()._field_params.__push(jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str("__file", 6))),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_2005e95c5_CustomType>(_2005e95c5_CustomType(jule::Str("const char*", 11))), 12))))));
				}
				_2005922d7_add_indent(&(*_self_));
				(*_self_)._field_trait_data_t+=_2005e3657_func_decl(&(*_self_), _203c07d9a_m,true);
				_2005953ea_done_indent(&(*_self_));
			}
			_iter_next_203c07c13:;
			++it;
			goto _iter_begin_203c07c13;
		}
		_iter_end_203c07c13:;
	}
	(*_self_)._field_trait_data_t+=_200594c57_indent(&(*_self_));
	(*_self_)._field_trait_data_t+=jule::Str("};", 2);
	(*_self_)._field_trait_data_t+=jule::Str("\n\n", 2);
	jule::I32 _36213_n = (*_self_)._field_trait_map.len();
	jule::I32 _36317_i = 0LL;
	{
		auto &expr = _32234_t.get()._field_implemented;
		auto it = expr.begin();
		_iter_begin_203c0e665:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _203c0e7a8_s = *it;
			{
				{
					auto &expr = _203c0e7a8_s.get()._field_instances;
					auto it = expr.begin();
					_iter_begin_203c0ee29:;
					if (it != expr.end()) {
						jule::Ptr<_1ee24550d_StructIns> _203c0eeb2_ins = *it;
						{
							jule::Ptr<_20059b775_TraitHash> _36625_hash = jule::new_ptr<_20059b775_TraitHash>(_20059b775_TraitHash(_32234_t,_203c0eeb2_ins,_36317_i));
							(_36317_i)++;
							_2005e06dc_build_trait_wrapper(&(*_self_), _36625_hash);
							(*_self_)._field_trait_map = jule::alloc_for_append((*_self_)._field_trait_map,1);(*_self_)._field_trait_map.__push(_36625_hash);
						}
						_iter_next_203c0ee29:;
						++it;
						goto _iter_begin_203c0ee29;
					}
					_iter_end_203c0ee29:;
				}
			}
			_iter_next_203c0e665:;
			++it;
			goto _iter_begin_203c0e665;
		}
		_iter_end_203c0e665:;
	}
	(*_self_)._field_trait_declarations+=jule::Str("struct ", 7);
	(*_self_)._field_trait_declarations+=_32313_ident;
	(*_self_)._field_trait_declarations+=jule::Str(" {};\n", 5);
	_2005922d7_add_indent(&(*_self_));
	(*_self_)._field_trait_data+=jule::Str("static ", 7);
	(*_self_)._field_trait_data+=_32513_type_data;
	(*_self_)._field_trait_data+=jule::Str(" ", 1);
	(*_self_)._field_trait_data+=_32313_ident;
	(*_self_)._field_trait_data+=jule::Str("_mptr_data[] = {\n", 17);
	{
		auto expr = (*_self_)._field_trait_map.slice(_36213_n);
		auto it = expr.begin();
		_iter_begin_203c130a3:;
		if (it != expr.end()) {
			jule::Ptr<_20059b775_TraitHash> _203c131c4_hash = *it;
			{
				(*_self_)._field_trait_data+=_200594c57_indent(&(*_self_));
				(*_self_)._field_trait_data+=jule::Str("{\n", 2);
				_2005922d7_add_indent(&(*_self_));
				{
					auto &expr = _203c131c4_hash.get()._field_t.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_203c1468c:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _203c14725_m = *it;
						{
							jule::Str _39321_m_ident = static__200587871_func(_203c14725_m);
							(*_self_)._field_trait_data+=_200594c57_indent(&(*_self_));
							(*_self_)._field_trait_data+=jule::Str(".", 1);
							(*_self_)._field_trait_data+=_39321_m_ident;
							(*_self_)._field_trait_data+=jule::Str("=", 1);
							(*_self_)._field_trait_data+=_39321_m_ident;
							(*_self_)._field_trait_data+=jule::Str("_", 1);
							(*_self_)._field_trait_data+=_1eec84964_itoa(_203c131c4_hash.get()._field_i);
							(*_self_)._field_trait_data+=jule::Str(",\n", 2);
						}
						_iter_next_203c1468c:;
						++it;
						goto _iter_begin_203c1468c;
					}
					_iter_end_203c1468c:;
				}
				_2005953ea_done_indent(&(*_self_));
				(*_self_)._field_trait_data+=_200594c57_indent(&(*_self_));
				(*_self_)._field_trait_data+=jule::Str("},\n", 3);
			}
			_iter_next_203c130a3:;
			++it;
			goto _iter_begin_203c130a3;
		}
		_iter_end_203c130a3:;
	}
	_2005953ea_done_indent(&(*_self_));
	(*_self_)._field_trait_data+=_200594c57_indent(&(*_self_));
	(*_self_)._field_trait_data+=jule::Str("};", 2);
}



inline void _2005e09b7_trait_decls(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedc3da0_Package>& _41335_p) {
	{
		auto &expr = _41335_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203c18bad:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203c18cce_f = *it;
			{
				{
					auto &expr = _203c18cce_f.get()._field_traits;
					auto it = expr.begin();
					_iter_begin_203c19483:;
					if (it != expr.end()) {
						jule::Ptr<_1eec8627e_Trait> _203c1951b_t = *it;
						{
							if (_203c1951b_t.get()._field_token._field_id != static_cast<jule::U32>(0LLU)) {
								_2005e0852_trait_decl(&(*_self_), _203c1951b_t);
							}
						}
						_iter_next_203c19483:;
						++it;
						goto _iter_begin_203c19483;
					}
					_iter_end_203c19483:;
				}
			}
			_iter_next_203c18bad:;
			++it;
			goto _iter_begin_203c18bad;
		}
		_iter_end_203c18bad:;
	}
}



inline jule::Str _2005e0b2c_structure_plain_decl(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee242032_Struct>& _42444_s) {
	jule::Str _42517_obj = jule::Str();
	{
		auto &expr = _42444_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203c1b023:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _203c1b144_ins = *it;
			{
				_42517_obj+=jule::Str("\nstruct ", 8);
				_42517_obj+=static__2005888b6_structure_ins(_203c1b144_ins);
				_42517_obj+=jule::Str(";\n", 2);
			}
			_iter_next_203c1b023:;
			++it;
			goto _iter_begin_203c1b023;
		}
		_iter_end_203c1b023:;
	}
	return _42517_obj;
}



inline jule::Str _2005e0c92_structure_plain_decls(_2005a036c_ObjectCoder* _self_) {
	jule::Str _43617_obj = jule::Str();
	{
		auto &expr = (*_self_)._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_203c1c871:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _203c1c8e8_s = *it;
			{
				if ((!(_203c1c8e8_s.get()._field_cpp_linked)) && (_203c1c8e8_s.get()._field_token._field_id != static_cast<jule::U32>(0LLU))) {
					_43617_obj+=_2005e0b2c_structure_plain_decl(&(*_self_), _203c1c8e8_s);
					_43617_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_203c1c871:;
			++it;
			goto _iter_begin_203c1c871;
		}
		_iter_end_203c1c871:;
	}
	return _43617_obj;
}



inline jule::Str _2005e0e07_var_init_expr(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedeb24b_Var>& _44737_v,jule::Str _44746_init) {
	jule::Str _44817_obj = jule::Str();
	if (_44737_v.get()._field_statically) {
		_44817_obj+=jule::Str("static ", 7);
	}
	_44817_obj+=static__2005eee16_kind(_44737_v.get()._field_kind.get()._field_kind);
	_44817_obj+=jule::Str(" ", 1);
	if (_44737_v.get()._field_reference) {
		_44817_obj+=jule::Str("&", 1);
	}
	_44817_obj+=static__200588ed2_var(_44737_v);
	if ((!(_44746_init.empty()))) {
		_44817_obj+=jule::Str(" = ", 3);
		_44817_obj+=_44746_init;
	}
	_44817_obj+=jule::Str(";", 1);
	return _44817_obj;
}



inline jule::Str _2005e106c_var(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedeb24b_Var> _46826_v) {
	if (_1e02c4ada_is_ignore_ident(_46826_v.get()._field_ident)) {
		return jule::Str();
	}
	if ((_46826_v.get()._field_value != nullptr) && (_46826_v.get()._field_value.get()._field_expr != nullptr)) {
		if (_46826_v.get()._field_value.get()._field_data.get()._field_model != jule::Any(jule::Any(nullptr))) {
			return _2005e0e07_var_init_expr(&(*_self_), _46826_v,_20058168e_val((*_self_)._field_ec.ptr(), _46826_v.get()._field_value));
		}
		return _2005e0e07_var_init_expr(&(*_self_), _46826_v,jule::Str());
	}
	return _2005e0e07_var_init_expr(&(*_self_), _46826_v,_200581a46_init_expr((*_self_)._field_ec.ptr(), _46826_v.get()._field_kind.get()._field_kind));
}



inline jule::Str _2005e11d2_field_decl(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee2449b3_FieldIns>& _48234_f) {
	jule::Str _48317_obj = static__2005eee16_kind(_48234_f.get()._field_kind);
	_48317_obj+=jule::Str(" ", 1);
	_48317_obj+=static__200588bc4_field(_48234_f.get()._field_decl);
	_48317_obj+=jule::Str(" = ", 3);
	if ((_48234_f.get()._field_default == nullptr)) {
		_48317_obj+=_200581a46_init_expr((*_self_)._field_ec.ptr(), _48234_f.get()._field_kind);
	} else {
		_48317_obj+=_2005812d7_expr((*_self_)._field_ec.ptr(), _48234_f.get()._field_default.get()._field_model);
	}
	_48317_obj+=jule::Str(";", 1);
	return _48317_obj;
}



inline jule::Str _2005e1347_structure_constructor(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _49845_s) {
	jule::Str _49917_obj = static__2005888b6_structure_ins(_49845_s);
	_49917_obj+=jule::Str("(", 1);
	if ((_49845_s.get()._field_fields.len() > 0LL)) {
		{
			auto &expr = _49845_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203c29c57:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203c29d78_f = *it;
				{
					_49917_obj+=static__2005eee16_kind(_203c29d78_f.get()._field_kind);
					_49917_obj+=jule::Str(" __param_", 9);
					_49917_obj+=_203c29d78_f.get()._field_decl.get()._field_ident;
					_49917_obj+=jule::Str(", ", 2);
				}
				_iter_next_203c29c57:;
				++it;
				goto _iter_begin_203c29c57;
			}
			_iter_end_203c29c57:;
		}
		(_49917_obj).mut_slice(0LL,_49917_obj.len() - 2LL);
	} else {
		_49917_obj+=jule::Str("void", 4);
	}
	_49917_obj+=jule::Str(")", 1);
	if ((_49845_s.get()._field_fields.len() > 0LL)) {
		_49917_obj+=jule::Str(": ", 2);
		{
			auto &expr = _49845_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203c2c3a8:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203c2c540_f = *it;
				{
					_49917_obj+=static__200588bc4_field(_203c2c540_f.get()._field_decl);
					_49917_obj+=jule::Str("(", 1);
					_49917_obj+=jule::Str("__param_", 8);
					_49917_obj+=_203c2c540_f.get()._field_decl.get()._field_ident;
					_49917_obj+=jule::Str("), ", 3);
				}
				_iter_next_203c2c3a8:;
				++it;
				goto _iter_begin_203c2c3a8;
			}
			_iter_end_203c2c3a8:;
		}
		(_49917_obj).mut_slice(0LL,_49917_obj.len() - 2LL);
	}
	_49917_obj+=jule::Str(" {}", 3);
	return _49917_obj;
}



inline jule::Str _2005e14ac_structure_destructor(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _53144_s) {
	
	jule::Ptr<_1ee2579b5_Fn> _53313_dispose_method = _1ee24672e_find_method(_53144_s.ptr(), jule::Str("dispose", 7),false);
	jule::Bool _53417_disposed = static__1eedec549_dispose(_53313_dispose_method);
	if ((!(_53417_disposed))) {
		return jule::Str();
	}
	jule::Str _53917_obj = jule::Str("~", 1);
	_53917_obj+=static__2005888b6_structure_ins(_53144_s);
	_53917_obj+=jule::Str("(void) { ", 9);
	_53917_obj+=static__200587871_func(_53313_dispose_method);
	_53917_obj+=jule::Str("(this); }", 9);
	return _53917_obj;
}



inline void _2005e1622_structure_operator_eq(_2005a036c_ObjectCoder* _self_,jule::Str& _54745_obj,jule::Str& _54756_ident,jule::Ptr<_1ee24550d_StructIns>& _54773_s) {
	if ((_54773_s.get()._field_operators._field_eq != nullptr)) {
		_2005e1974_structure_operator(&(*_self_), _54745_obj,_54756_ident,_54773_s.get()._field_operators._field_eq,jule::Str("==", 2));
		return;
	}
	_54745_obj+=_200594c57_indent(&(*_self_));
	if (_22237d8dc_OPT_INLINE) {
		_54745_obj+=jule::Str("inline ", 7);
	}
	_54745_obj+=jule::Str("bool operator==(", 16);
	_54745_obj+=_54756_ident;
	_54745_obj+=jule::Str(" _other) {", 10);
	if ((_54773_s.get()._field_fields.len() > 0LL)) {
		_2005922d7_add_indent(&(*_self_));
		_54745_obj+=jule::Str("\n", 1);
		_54745_obj+=_200594c57_indent(&(*_self_));
		_54745_obj+=jule::Str("return ", 7);
		_2005922d7_add_indent(&(*_self_));
		jule::I32 _56721_n = 0LL;
		{
			auto &expr = _54773_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203c36c97:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203c36db8_f = *it;
				{
					jule::Ptr<_1ee24550d_StructIns> _57021_strct = _1eee7a6c6_strct(_203c36db8_f.get()._field_kind.ptr());
					if (((_57021_strct != nullptr) && (_57021_strct.get()._field_decl != nullptr)) && _57021_strct.get()._field_decl.get()._field_cpp_linked) {
						goto _iter_next_203c36c97;
					}
					(_56721_n)++;
					_54745_obj+=jule::Str("\n", 1);
					_54745_obj+=_200594c57_indent(&(*_self_));
					_54745_obj+=jule::Str("this->", 6);
					jule::Str _57921_f_ident = static__200588bc4_field(_203c36db8_f.get()._field_decl);
					_54745_obj+=_57921_f_ident;
					_54745_obj+=jule::Str(" == _other.", 11);
					_54745_obj+=_57921_f_ident;
					_54745_obj+=jule::Str(" &&", 3);
				}
				_iter_next_203c36c97:;
				++it;
				goto _iter_begin_203c36c97;
			}
			_iter_end_203c36c97:;
		}
		_2005953ea_done_indent(&(*_self_));
		if ((_56721_n > 0LL)) {
			(_54745_obj).mut_slice(0LL,_54745_obj.len() - 3LL);
		} else {
			_54745_obj+=jule::Str("true", 4);
		}
		_54745_obj+=jule::Str(";\n", 2);
		_2005953ea_done_indent(&(*_self_));
		_54745_obj+=_200594c57_indent(&(*_self_));
		_54745_obj+=jule::Str("}", 1);
	} else {
		_54745_obj+=jule::Str(" return true; }", 15);
	}
	_54745_obj+=jule::Str("\n\n", 2);
}



inline void _2005e1787_structure_operator_not_eq(_2005a036c_ObjectCoder* _self_,jule::Str& _60149_obj,jule::Str& _60160_ident,jule::Ptr<_1ee24550d_StructIns>& _60177_s) {
	_60149_obj+=_200594c57_indent(&(*_self_));
	if (_22237d8dc_OPT_INLINE) {
		_60149_obj+=jule::Str("inline ", 7);
	}
	_60149_obj+=jule::Str("bool operator!=(", 16);
	_60149_obj+=_60160_ident;
	_60149_obj+=jule::Str(" _other) { return !this->operator==(_other); }\n\n", 48);
}



inline void _2005e1974_structure_operator(_2005a036c_ObjectCoder* _self_,jule::Str& _61242_obj,jule::Str& _61253_ident,jule::Ptr<_1ee25b4ad_FnIns>& _61270_f,jule::Str _61281_op) {
	if ((_61270_f == nullptr)) {
		return;
	}
	jule::Bool _61713_unary = (_61270_f.get()._field_params.len() == 1LL);
	jule::Bool _61813_assignment = _1ee257e7c_is_void(_61270_f.get()._field_decl.ptr());
	_61242_obj+=_200594c57_indent(&(*_self_));
	if (_22237d8dc_OPT_INLINE) {
		_61242_obj+=jule::Str("inline ", 7);
	}
	if (_61813_assignment) {
		_61242_obj+=_61253_ident;
		_61242_obj+=jule::Str("&", 1);
	} else {
		if ((_1eee791db_prim(_61270_f.get()._field_result.ptr()) == nullptr)) {
			_61242_obj+=_61253_ident;
		} else {
			_61242_obj+=jule::Str("jule::Bool", 10);
		}
	}
	_61242_obj+=jule::Str(" operator", 9);
	_61242_obj+=_61281_op;
	_61242_obj+=jule::Str("(", 1);
	if ((!(_61713_unary))) {
		jule::Ptr<_1ee25a358_ParamIns> _64021_p = _61270_f.get()._field_params[1LL];
		_61242_obj+=static__2005eddc1_param_ins(_64021_p);
		_61242_obj+=jule::Str(" _other", 7);
	}
	_61242_obj+=jule::Str(") { ", 4);
	if ((!(_61813_assignment))) {
		_61242_obj+=jule::Str("return ", 7);
	}
	_61242_obj+=static__200587b7e_func_ins(_61270_f);
	if ((!(_61713_unary))) {
		_61242_obj+=jule::Str("(this, _other); ", 16);
		if (_61813_assignment) {
			_61242_obj+=jule::Str("return *this; ", 14);
		}
		_61242_obj+=jule::Str("}", 1);
	} else {
		_61242_obj+=jule::Str("(this); }", 9);
	}
	_61242_obj+=jule::Str("\n\n", 2);
}



inline jule::Str _2005e1d1a_structure_operators(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _66143_s) {
	jule::Str _66213_ident = static__2005888b6_structure_ins(_66143_s);
	jule::Str _66317_obj = jule::Str();
	_2005e1622_structure_operator_eq(&(*_self_), _66317_obj,_66213_ident,_66143_s);
	_2005e1787_structure_operator_not_eq(&(*_self_), _66317_obj,_66213_ident,_66143_s);
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_gt,jule::Str(">", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_gt_eq,jule::Str(">=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_lt,jule::Str("<", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_lt_eq,jule::Str("<=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_shl,jule::Str("<<", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_shr,jule::Str(">>", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_add,jule::Str("+", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_sub,jule::Str("-", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_div,jule::Str("/", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_mul,jule::Str("*", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_mod,jule::Str("%", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_and,jule::Str("&", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_or,jule::Str("|", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_xor,jule::Str("^", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_neg,jule::Str("-", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_pos,jule::Str("+", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_not,jule::Str("~", 1));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_add_assign,jule::Str("+=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_sub_assign,jule::Str("-=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_div_assign,jule::Str("/=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_mul_assign,jule::Str("*=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_mod_assign,jule::Str("%=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_shl_assign,jule::Str("<<=", 3));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_shr_assign,jule::Str(">>=", 3));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_or_assign,jule::Str("|=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_and_assign,jule::Str("&=", 2));
	_2005e1974_structure_operator(&(*_self_), _66317_obj,_66213_ident,_66143_s.get()._field_operators._field_bit_xor_assign,jule::Str("^=", 2));
	return _66317_obj;
}



inline jule::Str _2005e2216_structure_derive_defs_decls(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _70247_s) {
	jule::Str _70317_obj = jule::Str();
	if (_1ee243cd1_is_derives(_70247_s.get()._field_decl.ptr(), jule::Str("Clone", 5))) {
		_70317_obj+=_200594c57_indent(&(*_self_));
		_70317_obj+=static__20058497d_clone_func_decl(_70247_s.get()._field_decl);
		_70317_obj+=jule::Str(";\n\n", 3);
	}
	return _70317_obj;
}



inline jule::Str _2005e25ac_structure_ins_decl(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _71242_s) {
	jule::Str _71317_obj = jule::Str();
	if ((_71242_s.get()._field_methods.len() > 0LL)) {
		{
			auto &expr = _71242_s.get()._field_methods;
			auto it = expr.begin();
			_iter_begin_203c5c916:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2579b5_Fn> _203c5ca37_m = *it;
				{
					_71317_obj+=_2005e3657_func_decl(&(*_self_), _203c5ca37_m,false);
				}
				_iter_next_203c5c916:;
				++it;
				goto _iter_begin_203c5c916;
			}
			_iter_end_203c5c916:;
		}
	}
	_71317_obj+=jule::Str("struct ", 7);
	jule::Str _72213_out_ident = static__2005888b6_structure_ins(_71242_s);
	_71317_obj+=_72213_out_ident;
	_71317_obj+=jule::Str(" {\n", 3);
	_2005922d7_add_indent(&(*_self_));
	if ((_71242_s.get()._field_fields.len() > 0LL)) {
		{
			auto &expr = _71242_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203c5eab1:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203c5eb9e_f = *it;
				{
					_71317_obj+=_200594c57_indent(&(*_self_));
					_71317_obj+=_2005e11d2_field_decl(&(*_self_), _203c5eb9e_f);
					_71317_obj+=jule::Str("\n", 1);
				}
				_iter_next_203c5eab1:;
				++it;
				goto _iter_begin_203c5eab1;
			}
			_iter_end_203c5eab1:;
		}
		_71317_obj+=jule::Str("\n\n", 2);
		_71317_obj+=_200594c57_indent(&(*_self_));
		_71317_obj+=_2005e1347_structure_constructor(&(*_self_), _71242_s);
		_71317_obj+=jule::Str("\n\n", 2);
	}
	_71317_obj+=_200594c57_indent(&(*_self_));
	_71317_obj+=_2005e14ac_structure_destructor(&(*_self_), _71242_s);
	_71317_obj+=jule::Str("\n\n", 2);
	_71317_obj+=_200594c57_indent(&(*_self_));
	_71317_obj+=_72213_out_ident;
	_71317_obj+=jule::Str("(void) = default;\n\n", 19);
	_71317_obj+=_2005e2216_structure_derive_defs_decls(&(*_self_), _71242_s);
	_71317_obj+=_2005e1d1a_structure_operators(&(*_self_), _71242_s);
	_71317_obj+=jule::Str("\n", 1);
	_2005953ea_done_indent(&(*_self_));
	_71317_obj+=(_200594c57_indent(&(*_self_)) + jule::Str("};", 2));
	return _71317_obj;
}



inline jule::Str _2005e2964_structure_decl(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee242032_Struct>& _76238_s) {
	jule::Str _76317_obj = jule::Str();
	{
		auto &expr = _76238_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203c6506c:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _203c6518d_ins = *it;
			{
				_76317_obj+=_2005e25ac_structure_ins_decl(&(*_self_), _203c6518d_ins);
			}
			_iter_next_203c6506c:;
			++it;
			goto _iter_begin_203c6506c;
		}
		_iter_end_203c6506c:;
	}
	return _76317_obj;
}



inline jule::Str _2005e2c3e_structure_decls(_2005a036c_ObjectCoder* _self_) {
	jule::Str _77217_obj = jule::Str();
	{
		auto &expr = (*_self_)._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_203c667cc:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _203c66854_s = *it;
			{
				if ((!(_203c66854_s.get()._field_cpp_linked)) && (_203c66854_s.get()._field_token._field_id != static_cast<jule::U32>(0LLU))) {
					_77217_obj+=_2005e2964_structure_decl(&(*_self_), _203c66854_s);
					_77217_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_203c667cc:;
			++it;
			goto _iter_begin_203c667cc;
		}
		_iter_end_203c667cc:;
	}
	return _77217_obj;
}



inline jule::Str _2005e31c3_func_head(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee25b4ad_FnIns>& _78233_f,jule::Bool _78244_ptr) {
	jule::Str _78317_obj = jule::Str();
	if (((!(_78244_ptr)) && _22237d8dc_OPT_INLINE) && (!(_1ee258532_is_entry_point(_78233_f.get()._field_decl.ptr())))) {
		_78317_obj+=jule::Str("inline ", 7);
	}
	_78317_obj+=static__2005ee4dc_func_ins_result(_78233_f);
	if (_78244_ptr) {
		_78317_obj+=jule::Str("(*", 2);
		_78317_obj+=static__200587b7e_func_ins(_78233_f);
		_78317_obj+=jule::Str(")", 1);
	} else {
		_78317_obj+=jule::Str(" ", 1);
		_78317_obj+=static__200587b7e_func_ins(_78233_f);
	}
	return _78317_obj;
}



inline jule::Str _2005e3657_func_decl(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee2579b5_Fn>& _80033_f,jule::Bool _80041_ptr) {
	jule::Str _80117_obj = jule::Str();
	{
		auto &expr = _80033_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203c6ba24:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25b4ad_FnIns> _203c6bb45_c = *it;
			{
				_80117_obj+=_200594c57_indent(&(*_self_));
				_80117_obj+=_2005e31c3_func_head(&(*_self_), _203c6bb45_c,_80041_ptr);
				_80117_obj+=_2005e029c_params_decls(&(*_self_), _203c6bb45_c.get()._field_params);
				_80117_obj+=jule::Str(";\n", 2);
			}
			_iter_next_203c6ba24:;
			++it;
			goto _iter_begin_203c6ba24;
		}
		_iter_end_203c6ba24:;
	}
	return _80117_obj;
}



inline jule::Str _2005e3a0e_func_decls(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedc3da0_Package>& _81234_pkg) {
	jule::Str _81317_obj = jule::Str();
	{
		auto &expr = _81234_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203c6e065:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203c6e186_file = *it;
			{
				{
					auto &expr = _203c6e186_file.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_203c6e829:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _203c6e8c3_f = *it;
						{
							if ((!(_203c6e8c3_f.get()._field_cpp_linked)) && (_203c6e8c3_f.get()._field_token._field_id != static_cast<jule::U32>(0LLU))) {
								_81317_obj+=_2005e3657_func_decl(&(*_self_), _203c6e8c3_f,false);
							}
						}
						_iter_next_203c6e829:;
						++it;
						goto _iter_begin_203c6e829;
					}
					_iter_end_203c6e829:;
				}
			}
			_iter_next_203c6e065:;
			++it;
			goto _iter_begin_203c6e065;
		}
		_iter_end_203c6e065:;
	}
	return _81317_obj;
}



inline void _2005e3c51_build_trait_map(_2005a036c_ObjectCoder* _self_) {
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203c71342:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203c713ca_u = *it;
			{
				if ((!(_203c713ca_u.get()._field_cpp_linked))) {
					_2005e09b7_trait_decls(&(*_self_), _203c713ca_u.get()._field_package);
				}
			}
			_iter_next_203c71342:;
			++it;
			goto _iter_begin_203c71342;
		}
		_iter_end_203c71342:;
	}
	_2005e09b7_trait_decls(&(*_self_), (*_self_)._field_ir.get()._field_main);
}



inline void _2005e3e93_process_traits(_2005a036c_ObjectCoder* _self_) {
	_2005e3c51_build_trait_map(&(*_self_));
}



inline jule::Str _2005e426d_decls(_2005a036c_ObjectCoder* _self_) {
	jule::Str _83917_obj = jule::Str();
	_83917_obj+=(*_self_)._field_trait_declarations;
	_83917_obj+=_2005e0c92_structure_plain_decls(&(*_self_));
	_83917_obj+=_2005e2c3e_structure_decls(&(*_self_));
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203c74994:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203c74a3d_u = *it;
			{
				if ((!(_203c74a3d_u.get()._field_cpp_linked))) {
					_83917_obj+=_2005e3a0e_func_decls(&(*_self_), _203c74a3d_u.get()._field_package);
				}
			}
			_iter_next_203c74994:;
			++it;
			goto _iter_begin_203c74994;
		}
		_iter_end_203c74994:;
	}
	_83917_obj+=_2005e3a0e_func_decls(&(*_self_), (*_self_)._field_ir.get()._field_main);
	if (((*_self_)._field_trait_map.len() > 0LL)) {
		_83917_obj+=jule::Str("\n\n", 2);
		_83917_obj+=(*_self_)._field_trait_data_t;
		_83917_obj+=jule::Str("\n\n", 2);
		_83917_obj+=(*_self_)._field_trait_wrappers;
		_83917_obj+=jule::Str("\n\n", 2);
		_83917_obj+=(*_self_)._field_trait_data;
	}
	return _83917_obj;
}



inline jule::Str _2005e4702_pkg_globals(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedc3da0_Package>& _86535_p,jule::Str& _86553_global_initializers) {
	jule::Str _86617_obj = jule::Str();
	{
		auto &expr = _86535_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203c78679:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203c7879a_f = *it;
			{
				{
					auto &expr = _203c7879a_f.get()._field_vars;
					auto it = expr.begin();
					_iter_begin_203c78e3d:;
					if (it != expr.end()) {
						jule::Ptr<_1eedeb24b_Var> _203c78ed7_v = *it;
						{
							if (((_203c78ed7_v.get()._field_token._field_id != static_cast<jule::U32>(0LLU)) && (!(_203c78ed7_v.get()._field_cpp_linked))) && (!(_203c78ed7_v.get()._field_constant))) {
								_86617_obj+=static__2005eee16_kind(_203c78ed7_v.get()._field_kind.get()._field_kind);
								_86617_obj+=jule::Str(" ", 1);
								if (_203c78ed7_v.get()._field_reference) {
									_86617_obj+=jule::Str("&", 1);
								}
								_86617_obj+=static__200588ed2_var(_203c78ed7_v);
								_86617_obj+=jule::Str(";\n", 2);
								_86553_global_initializers+=_200594c57_indent(&(*_self_));
								_86553_global_initializers+=static__200588ed2_var(_203c78ed7_v);
								if ((_203c78ed7_v.get()._field_value != nullptr) && (_203c78ed7_v.get()._field_value.get()._field_expr != nullptr)) {
									if (_203c78ed7_v.get()._field_value.get()._field_data.get()._field_model != jule::Any(jule::Any(nullptr))) {
										_86553_global_initializers+=jule::Str(" = ", 3);
										_86553_global_initializers+=_20058168e_val((*_self_)._field_ec.ptr(), _203c78ed7_v.get()._field_value);
									}
								} else {
									_86553_global_initializers+=jule::Str(" = ", 3);
									_86553_global_initializers+=_200581a46_init_expr((*_self_)._field_ec.ptr(), _203c78ed7_v.get()._field_kind.get()._field_kind);
								}
								_86553_global_initializers+=jule::Str(";\n", 2);
							}
						}
						_iter_next_203c78e3d:;
						++it;
						goto _iter_begin_203c78e3d;
					}
					_iter_end_203c78e3d:;
				}
			}
			_iter_next_203c78679:;
			++it;
			goto _iter_begin_203c78679;
		}
		_iter_end_203c78679:;
	}
	return _86617_obj;
}



inline jule::Str _2005e4aa9_globals(_2005a036c_ObjectCoder* _self_,jule::Str& _89731_global_initializers) {
	jule::Str _89817_obj = jule::Str();
	_2005922d7_add_indent(&(*_self_));
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203c80791:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203c80829_u = *it;
			{
				if ((!(_203c80829_u.get()._field_cpp_linked))) {
					_89817_obj+=_2005e4702_pkg_globals(&(*_self_), _203c80829_u.get()._field_package,_89731_global_initializers);
				}
			}
			_iter_next_203c80791:;
			++it;
			goto _iter_begin_203c80791;
		}
		_iter_end_203c80791:;
	}
	_89817_obj+=_2005e4702_pkg_globals(&(*_self_), (*_self_)._field_ir.get()._field_main,_89731_global_initializers);
	_2005953ea_done_indent(&(*_self_));
	return _89817_obj;
}



inline jule::Str _2005e4e61_func(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee2579b5_Fn>& _91128_f) {
	jule::Str _91217_obj = jule::Str();
	{
		auto &expr = _91128_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203c87a51:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25b4ad_FnIns> _203c87b94_ins = *it;
			{
				_91217_obj+=_2005e31c3_func_head(&(*_self_), _203c87b94_ins,false);
				_91217_obj+=_2005e0137_params_ins(&(*_self_), _203c87b94_ins.get()._field_params);
				_91217_obj+=jule::Str(" ", 1);
				_91217_obj+=_20051a53a_func_scope((*_self_)._field_sc.ptr(), _203c87b94_ins);
				if ((_203c87b94_ins.get()._field_scope != nullptr)) {
					_91217_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_203c87a51:;
			++it;
			goto _iter_begin_203c87a51;
		}
		_iter_end_203c87a51:;
	}
	return _91217_obj;
}



inline jule::Str _2005e5318_pkg_funcs(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedc3da0_Package>& _92633_p) {
	jule::Str _92717_obj = jule::Str();
	{
		auto &expr = _92633_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203c8a922:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203c8aa43_f = *it;
			{
				{
					auto &expr = _203c8aa43_f.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_203c8b1d6:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> _203c8b280_f = *it;
						{
							if ((!(_22237ecc8_TEST)) && _2005e9350_has_directive(_203c8b280_f.get()._field_directives,jule::Str("test", 4))) {
								goto _iter_next_203c8b1d6;
							}
							if ((!(_203c8b280_f.get()._field_cpp_linked)) && (_203c8b280_f.get()._field_token._field_id != static_cast<jule::U32>(0LLU))) {
								_92717_obj+=_2005e4e61_func(&(*_self_), _203c8b280_f);
								_92717_obj+=jule::Str("\n\n", 2);
							}
						}
						_iter_next_203c8b1d6:;
						++it;
						goto _iter_begin_203c8b1d6;
					}
					_iter_end_203c8b1d6:;
				}
			}
			_iter_next_203c8a922:;
			++it;
			goto _iter_begin_203c8a922;
		}
		_iter_end_203c8a922:;
	}
	return _92717_obj;
}



inline jule::Str _2005e56c0_structure_methods(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _94341_s) {
	jule::Str _94417_obj = jule::Str();
	{
		auto &expr = _94341_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_203c8dc66:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _203c8dd87_f = *it;
			{
				_94417_obj+=_200594c57_indent(&(*_self_));
				_94417_obj+=_2005e4e61_func(&(*_self_), _203c8dd87_f);
				_94417_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_203c8dc66:;
			++it;
			goto _iter_begin_203c8dc66;
		}
		_iter_end_203c8dc66:;
	}
	return _94417_obj;
}



inline jule::Str _2005e5a77_structure_ostream(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _95441_s) {
	jule::Str _95517_obj = jule::Str();
	_95517_obj+=_200594c57_indent(&(*_self_));
	_95517_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, ", 48);
	_95517_obj+=static__2005888b6_structure_ins(_95441_s);
	_95517_obj+=jule::Str(" _Src) {\n", 9);
	_2005922d7_add_indent(&(*_self_));
	_95517_obj+=_200594c57_indent(&(*_self_));
	jule::Ptr<_1ee2579b5_Fn> _96317_fts = _1ee24672e_find_method(_95441_s.ptr(), jule::Str("to_str", 6),false);
	if (static__1eedec857_to_str(_96317_fts)) {
		_95517_obj+=jule::Str("_Stream << ", 11);
		_95517_obj+=static__200587871_func(_96317_fts);
		_95517_obj+=jule::Str("(&_Src);\n", 9);
	} else {
		_95517_obj+=jule::Str("_Stream << \"", 12);
		_95517_obj+=_95441_s.get()._field_decl.get()._field_ident;
		_95517_obj+=jule::Str("{\";\n", 4);
		{
			auto &expr = _95441_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203c94123:;
			if (it != expr.end()) {
				jule::I32 _203c943ba_i = it - expr.begin();
				jule::Ptr<_1ee2449b3_FieldIns> _203c94563_f = *it;
				{
					_95517_obj+=_200594c57_indent(&(*_self_));
					_95517_obj+=jule::Str("_Stream << \"", 12);
					_95517_obj+=_203c94563_f.get()._field_decl.get()._field_ident;
					_95517_obj+=jule::Str(":", 1);
					jule::Ptr<_1ee24550d_StructIns> _98021_strct = _1eee7a6c6_strct(_203c94563_f.get()._field_kind.ptr());
					if (((_98021_strct != nullptr) && (_98021_strct.get()._field_decl != nullptr)) && _98021_strct.get()._field_decl.get()._field_cpp_linked) {
						_95517_obj+=jule::Str(" cpp.", 5);
						_95517_obj+=static__200588bc4_field(_203c94563_f.get()._field_decl);
						_95517_obj+=jule::Str("\"", 1);
					} else {
						_95517_obj+=jule::Str("\" << _Src.", 10);
						_95517_obj+=static__200588bc4_field(_203c94563_f.get()._field_decl);
					}
					if ((_203c943ba_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_95441_s.get()._field_fields.len()))) {
						_95517_obj+=jule::Str(" << \", \"", 8);
					}
					_95517_obj+=jule::Str(";\n", 2);
				}
				_iter_next_203c94123:;
				++it;
				_203c943ba_i++;
				goto _iter_begin_203c94123;
			}
			_iter_end_203c94123:;
		}
		_95517_obj+=_200594c57_indent(&(*_self_));
		_95517_obj+=jule::Str("_Stream << \"}\";\n", 16);
	}
	_95517_obj+=_200594c57_indent(&(*_self_));
	_95517_obj+=jule::Str("return _Stream;\n", 16);
	_2005953ea_done_indent(&(*_self_));
	_95517_obj+=_200594c57_indent(&(*_self_));
	_95517_obj+=jule::Str("}", 1);
	return _95517_obj;
}



inline jule::Str _2005e5e2e_structure_derive_defs(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _100845_s) {
	jule::Str _100917_obj = jule::Str();
	if (_1ee243cd1_is_derives(_100845_s.get()._field_decl.ptr(), jule::Str("Clone", 5))) {
		_100917_obj+=_200594c57_indent(&(*_self_));
		_100917_obj+=static__200584c8b_clone_func_def(_100845_s.get()._field_decl);
		_100917_obj+=jule::Str("{\n", 2);
		_2005922d7_add_indent(&(*_self_));
		_100917_obj+=_200594c57_indent(&(*_self_));
		_100917_obj+=static__2005ed497_structure_ins(_100845_s);
		_100917_obj+=jule::Str(" clone;\n", 8);
		{
			auto &expr = _100845_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_203c9b8ab:;
			if (it != expr.end()) {
				jule::Ptr<_1ee2449b3_FieldIns> _203c9c8bd_f = *it;
				{
					jule::Str _101921_ident = static__200588bc4_field(_203c9c8bd_f.get()._field_decl);
					_100917_obj+=_200594c57_indent(&(*_self_));
					_100917_obj+=jule::Str("clone.", 6);
					_100917_obj+=_101921_ident;
					_100917_obj+=jule::Str(" = jule::clone(this->", 21);
					_100917_obj+=_101921_ident;
					_100917_obj+=jule::Str(");\n", 3);
				}
				_iter_next_203c9b8ab:;
				++it;
				goto _iter_begin_203c9b8ab;
			}
			_iter_end_203c9b8ab:;
		}
		_100917_obj+=_200594c57_indent(&(*_self_));
		_100917_obj+=jule::Str("return clone;\n", 14);
		_2005953ea_done_indent(&(*_self_));
		_100917_obj+=_200594c57_indent(&(*_self_));
		_100917_obj+=jule::Str("}", 1);
	}
	return _100917_obj;
}



inline jule::Str _2005e62d6_structure_ins(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee24550d_StructIns>& _103737_s) {
	jule::Str _103817_obj = _2005e56c0_structure_methods(&(*_self_), _103737_s);
	_103817_obj+=jule::Str("\n\n", 2);
	_103817_obj+=_2005e5e2e_structure_derive_defs(&(*_self_), _103737_s);
	_103817_obj+=jule::Str("\n\n", 2);
	_103817_obj+=_2005e5a77_structure_ostream(&(*_self_), _103737_s);
	return _103817_obj;
}



inline jule::Str _2005e668d_structure(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1ee242032_Struct>& _104733_s) {
	jule::Str _104817_obj = jule::Str();
	{
		auto &expr = _104733_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_203ca3132:;
		if (it != expr.end()) {
			jule::Ptr<_1ee24550d_StructIns> _203ca3253_ins = *it;
			{
				_104817_obj+=_2005e62d6_structure_ins(&(*_self_), _203ca3253_ins);
				_104817_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_203ca3132:;
			++it;
			goto _iter_begin_203ca3132;
		}
		_iter_end_203ca3132:;
	}
	return _104817_obj;
}



inline jule::Str _2005e6968_structures(_2005a036c_ObjectCoder* _self_) {
	jule::Str _105817_obj = jule::Str();
	{
		auto &expr = (*_self_)._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_203ca4aa1:;
		if (it != expr.end()) {
			jule::Ptr<_1ee242032_Struct> _203ca4b28_s = *it;
			{
				if ((!(_203ca4b28_s.get()._field_cpp_linked)) && (_203ca4b28_s.get()._field_token._field_id != static_cast<jule::U32>(0LLU))) {
					_105817_obj+=_2005e668d_structure(&(*_self_), _203ca4b28_s);
					_105817_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_203ca4aa1:;
			++it;
			goto _iter_begin_203ca4aa1;
		}
		_iter_end_203ca4aa1:;
	}
	return _105817_obj;
}



inline jule::Str _2005e6c43_funcs(_2005a036c_ObjectCoder* _self_) {
	jule::Str _107017_obj = jule::Str();
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203ca6de4:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203ca6e8d_u = *it;
			{
				if ((!(_203ca6e8d_u.get()._field_cpp_linked))) {
					_107017_obj+=_2005e5318_pkg_funcs(&(*_self_), _203ca6e8d_u.get()._field_package);
				}
			}
			_iter_next_203ca6de4:;
			++it;
			goto _iter_begin_203ca6de4;
		}
		_iter_end_203ca6de4:;
	}
	_107017_obj+=_2005e5318_pkg_funcs(&(*_self_), (*_self_)._field_ir.get()._field_main);
	return _107017_obj;
}



inline void _2005e713e_push_init(_2005a036c_ObjectCoder* _self_,jule::Ptr<_1eedc3da0_Package>& _108029_pkg,jule::Str& _108049_obj) {
	
	{
		auto &expr = _108029_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203ca9633:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203ca9754_file = *it;
			{
				{
					auto &expr = _203ca9754_file.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_203ca9de7:;
					if (it != expr.end()) {
						jule::Ptr<_1ee2579b5_Fn> &_203ca9e91_f = *it;
						{
							if ((_203ca9e91_f.get()._field_ident == jule::Str("init", 4))) {
								_108049_obj+=jule::Str("\n\t", 2);
								_108049_obj+=static__200587871_func(_203ca9e91_f);
								_108049_obj+=jule::Str("();", 3);
							}
						}
						_iter_next_203ca9de7:;
						++it;
						goto _iter_begin_203ca9de7;
					}
					_iter_end_203ca9de7:;
				}
			}
			_iter_next_203ca9633:;
			++it;
			goto _iter_begin_203ca9633;
		}
		_iter_end_203ca9633:;
	}
}



inline jule::Str _2005e74e6_init_caller(_2005a036c_ObjectCoder* _self_,jule::Str& _109431_global_initializers) {
	jule::Str _109517_obj = jule::Str("void ", 5);
	_109517_obj+=jule::Str("__jule_call_initializers", 24);
	_109517_obj+=jule::Str("(void) {\n", 9);
	_109517_obj+=_109431_global_initializers;
	{
		auto &expr = (*_self_)._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203cabed7:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203cac092_u = *it;
			{
				if ((!(_203cac092_u.get()._field_cpp_linked))) {
					_2005e713e_push_init(&(*_self_), _203cac092_u.get()._field_package,_109517_obj);
				}
			}
			_iter_next_203cabed7:;
			++it;
			goto _iter_begin_203cabed7;
		}
		_iter_end_203cabed7:;
	}
	_2005e713e_push_init(&(*_self_), (*_self_)._field_ir.get()._field_main,_109517_obj);
	_109517_obj+=jule::Str("\n}", 2);
	return _109517_obj;
}



inline void _2005e7815_append_standard(_2005a036c_ObjectCoder* _self_,jule::Str& _111339_obj_code) {
	_2005d9450_Time _111413_time = static__2005d9a8d_now();
	_2005d8b9c_AbsTime _111513_abs = _2005db540_abs(&_111413_time);
	jule::Str _111717_time_str = jule::Str();
	_111717_time_str+=_1eec84227_fmt_uint(_111513_abs._field_day,10LL);
	_111717_time_str+=jule::Str("/", 1);
	_111717_time_str+=_1eec84227_fmt_uint(_111513_abs._field_month,10LL);
	_111717_time_str+=jule::Str("/", 1);
	_111717_time_str+=_1eec84227_fmt_uint(_111513_abs._field_year,10LL);
	_111717_time_str+=jule::Str(" ", 1);
	_111717_time_str+=_1eec84227_fmt_uint(_111513_abs._field_hour,10LL);
	_111717_time_str+=jule::Str(".", 1);
	_111717_time_str+=_1eec84227_fmt_uint(_111513_abs._field_minute,10LL);
	_111717_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM) UTC", 25);
	jule::Str _112917_s = jule::Str();
	_112917_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_112917_s+=jule::Str("// JuleC version: ", 18);
	_112917_s+=jule::Str("jule0.0.10 @master", 18);
	_112917_s+=jule::Str("\n", 1);
	_112917_s+=jule::Str("// Date: ", 9);
	_112917_s+=_111717_time_str;
	_112917_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_112917_s+=(*_self_)._field_info._field_compiler;
	_112917_s+=jule::Str(" ", 1);
	_112917_s+=(*_self_)._field_info._field_compiler_command;
	_112917_s+=jule::Str("\n\n", 2);
	if (_22237d18e_PRODUCTION) {
		_112917_s+=jule::Str("#define __JULE_ENABLE__PRODUCTION\n", 34);
	}
	if ((!(_22237ee82_RC))) {
		_112917_s+=jule::Str("#define __JULE_DISABLE__REFERENCE_COUNTING\n", 43);
	}
	if ((!(_2223801c4_SAFETY))) {
		_112917_s+=jule::Str("#define __JULE_DISABLE__SAFETY\n", 31);
	}
	_112917_s+=jule::Str("\n\n#include \"", 12);
	_112917_s+=_208e073b3_PATH_API;
	_112917_s+=jule::Str("\"\n\n", 3);
	_112917_s+=_111339_obj_code;
	_112917_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 149);
	if (_22237ecc8_TEST) {
		_112917_s+=jule::Str("test_point();", 13);
	} else {
		_112917_s+=jule::Str("entry_point();", 14);
	}
	_112917_s+=jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28);
	_111339_obj_code=_112917_s;
}



inline jule::Str _2005e7ae0_serialize(_2005a036c_ObjectCoder* _self_) {
	_2005e0577_prepare_structures(&(*_self_));
	_2005e3e93_process_traits(&(*_self_));
	jule::Str _118217_global_initializers = jule::Str();
	jule::Str _118317_obj = jule::Str();
	_118317_obj+=_2005a2d86_links(&(*_self_));
	_118317_obj+=jule::Str("\n", 1);
	_118317_obj+=_2005e426d_decls(&(*_self_));
	_118317_obj+=jule::Str("\n\n", 2);
	_118317_obj+=_2005e4aa9_globals(&(*_self_), _118217_global_initializers);
	_118317_obj+=jule::Str("\n", 1);
	_118317_obj+=_2005e6968_structures(&(*_self_));
	_118317_obj+=_2005e6c43_funcs(&(*_self_));
	_118317_obj+=jule::Str("\n", 1);
	_118317_obj+=_2005e74e6_init_caller(&(*_self_), _118217_global_initializers);
	_118317_obj+=jule::Str("\n", 1);
	return _118317_obj;
}







std::ostream &operator<<(std::ostream &_Stream, _2005a036c_ObjectCoder _Src) {
	_Stream << "ObjectCoder{";
	_Stream << "ir:" << _Src._field_ir << ", ";
	_Stream << "info:" << _Src._field_info << ", ";
	_Stream << "indent_buffer:" << _Src._field_indent_buffer << ", ";
	_Stream << "trait_declarations:" << _Src._field_trait_declarations << ", ";
	_Stream << "trait_wrappers:" << _Src._field_trait_wrappers << ", ";
	_Stream << "trait_data:" << _Src._field_trait_data << ", ";
	_Stream << "trait_data_t:" << _Src._field_trait_data_t << ", ";
	_Stream << "trait_map:" << _Src._field_trait_map << ", ";
	_Stream << "ec:" << _Src._field_ec << ", ";
	_Stream << "sc:" << _Src._field_sc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1ee261518_Pass _Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _1e02e160c_FieldDecl _Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1eec866ad_to_str(_1eec8627e_Trait* _self_) {
	return (*_self_)._field_ident;
}



inline jule::Bool _1eec86a65_equals(jule::Ptr<_1eec8627e_Trait> _self_,jule::Ptr<_1eee76b45_TypeKind> _2626_other) {
	jule::Ptr<_1eec8627e_Trait> _2713_trt = _1eee7a9a1_trt(_2626_other.ptr());
	return _self_ == _2713_trt;
}



inline jule::Bool _1eec86e3e_is_builtin(_1eec8627e_Trait* _self_) {
	return (*_self_)._field_token._field_id == static_cast<jule::U32>(0LLU);
}



inline jule::Ptr<_1ee2579b5_Fn> _1eec872e6_find_method(_1eec8627e_Trait* _self_,jule::Str _4034_ident) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_202a21d08:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _202a21dc4_f = *it;
			{
				if (_202a21dc4_f.get()._field_ident == _4034_ident) {
					return _202a21dc4_f;
				}
			}
			_iter_next_202a21d08:;
			++it;
			goto _iter_begin_202a21d08;
		}
		_iter_end_202a21d08:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _1eec8627e_Trait _Src) {
	_Stream << _1eec866ad_to_str(&_Src);
	return _Stream;
}



inline jule::Bool _1eec8825e_auto_expr(_1eec87d0d_EnumItem* _self_) {
	return ((*_self_)._field_value == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _1eec87d0d_EnumItem _Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::I64,jule::Bool> _200617291_parse_integer_0(_200616b64_ArgParser* _self_,jule::Str& _18632_s,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I32)> _18640_parser) {
	jule::I64 _18684_x = jule::I64();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s.empty()) {
			_case_begin_203d3aa6b:;
			{
				_18684_x = 0LL;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_208be3dd6_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_203d3b1cb:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_208be3dd6_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_203d3b242:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_208be3dd6_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_203d3b2a8:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_203d3a75d:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_203d3a6e7:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_203d3a62b:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}

inline std::tuple<jule::U64,jule::Bool> _200617291_parse_integer_1(_200616b64_ArgParser* _self_,jule::Str& _18632_s,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I32)> _18640_parser) {
	jule::U64 _18684_x = jule::U64();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s.empty()) {
			_case_begin_203d450b4:;
			{
				_18684_x = 0LLU;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_208be3dd6_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_203d45724:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_208be3dd6_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_203d4578a:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_208be3dd6_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_203d45801:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_203d44ca6:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_203d44c40:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_203d44b74:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}



inline jule::Str _20061756b_get_data(_200616b64_ArgParser* _self_) {
	if (((*_self_)._field_i + 1LL) >= static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_args.len()))) {
		return jule::Str();
	}
	((*_self_)._field_i)++;
	return (*_self_)._field_args[(*_self_)._field_i];
}



inline jule::VoidExceptional _20061788a_process_flag(_200616b64_ArgParser* _self_,jule::Trait<_2006123bd_CommonFlag>& _21236_flag) {
	{
		auto &_match_expr{ _21236_flag };
		
		if (_match_expr.type_is<jule::Ptr<_2006127b9_Flag_3>>()) {
			_case_begin_203d32da4:;
			{
				jule::Ptr<_2006127b9_Flag_3> _21521_bf = _21236_flag.operator jule::Ptr<_2006127b9_Flag_3>();
				(*(_21521_bf.get()._field__data))=(!(_21521_bf.get()._field__default));
				return jule::VoidExceptional();
			}
		}
		_match_end_203d32cb6:;
	}
	jule::Str _22013_data = _20061756b_get_data(&(*_self_));
	if (_22013_data.empty()) {
		return jule::VoidExceptional(((jule::Str("--", 2) + _2006123bd_CommonFlag_mptr_data[(_21236_flag).type_offset]._200611c91_name(_21236_flag)) + jule::Str(": expression missing", 20)));
	}
	{
		auto &_match_expr{ _21236_flag };
		
		if (_match_expr.type_is<jule::Ptr<_2006127b9_Flag_0>>()) {
			_case_begin_203d344e3:;
			{
				jule::Ptr<_2006127b9_Flag_0> _22721_intf = _21236_flag.operator jule::Ptr<_2006127b9_Flag_0>();
				jule::Bool _22833_ok;
				std::tie((*(_22721_intf.get()._field__data)),_22833_ok) = _200617291_parse_integer_0(&(*_self_), _22013_data,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I32)>([=](jule::Str _22872_s,jule::I32 _22880_base) mutable -> std::tuple<jule::I64,jule::Bool> {
					return std::make_tuple(static_cast<jule::I64>(({
						auto except = _1eec79c56_parse_int(_22872_s,_22880_base,64LL);
						(except.ok()) ? (except.result) : ({{
							return std::make_tuple(0LL,false);
							return std::make_tuple(0LL,false);
						} jule::I64();});
					})),true);
				}));
				if ((!(_22833_ok))) {
					return jule::VoidExceptional(((jule::Str("--", 2) + _2006123bd_CommonFlag_mptr_data[(_21236_flag).type_offset]._200611c91_name(_21236_flag)) + jule::Str(": expression must be valid signed integer", 41)));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2006127b9_Flag_1>>()) {
			_case_begin_203d35060:;
			{
				jule::Ptr<_2006127b9_Flag_1> _23521_uintf = _21236_flag.operator jule::Ptr<_2006127b9_Flag_1>();
				jule::Bool _23634_ok;
				std::tie((*(_23521_uintf.get()._field__data)),_23634_ok) = _200617291_parse_integer_1(&(*_self_), _22013_data,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I32)>([=](jule::Str _23673_s,jule::I32 _23681_base) mutable -> std::tuple<jule::U64,jule::Bool> {
					return std::make_tuple(static_cast<jule::U64>(({
						auto except = _1eec79ae1_parse_uint(_23673_s,_23681_base,64LL);
						(except.ok()) ? (except.result) : ({{
							return std::make_tuple(0LLU,false);
							return std::make_tuple(0LLU,false);
						} jule::U64();});
					})),true);
				}));
				if ((!(_23634_ok))) {
					return jule::VoidExceptional(((jule::Str("--", 2) + _2006123bd_CommonFlag_mptr_data[(_21236_flag).type_offset]._200611c91_name(_21236_flag)) + jule::Str(": expression must be valid unsigned integer", 43)));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2006127b9_Flag_2>>()) {
			_case_begin_203d350c6:;
			{
				jule::Ptr<_2006127b9_Flag_2> _24321_ff = _21236_flag.operator jule::Ptr<_2006127b9_Flag_2>();
				(*(_24321_ff.get()._field__data))=static_cast<jule::F64>(({
					auto except = _1eec7ba38_parse_float(_22013_data,64LL);
					(except.ok()) ? (except.result) : ({{
						return jule::VoidExceptional(((jule::Str("--", 2) + _2006123bd_CommonFlag_mptr_data[(_21236_flag).type_offset]._200611c91_name(_21236_flag)) + jule::Str(": expression must be valid floating-point", 41)));
						return jule::VoidExceptional(((jule::Str("--", 2) + _2006123bd_CommonFlag_mptr_data[(_21236_flag).type_offset]._200611c91_name(_21236_flag)) + jule::Str(": expression must be valid floating-point", 41)));
					} jule::F64();});
				}));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2006127b9_Flag_4>>()) {
			_case_begin_203d3513c:;
			{
				(*(_21236_flag.operator jule::Ptr<_2006127b9_Flag_4>().get()._field__data))=_22013_data;
			}
		}
		_match_end_203d34306:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _200617ba9_single_dash(_200616b64_ArgParser* _self_,jule::Str& _25231_arg) {
	jule::Slice<jule::I32> _25313_rarg = static_cast<jule::Slice<jule::I32>>(_25231_arg).slice(1LL);
	{
		auto &expr = _25313_rarg;
		auto it = expr.begin();
		_iter_begin_203d4c31e:;
		if (it != expr.end()) {
			jule::I32 &_203d4c3eb_r = *it;
			{
				jule::Trait<_2006123bd_CommonFlag> _25521_flag = _2006148dc_find_flag_short(&(*_self_)._field_set, _203d4c3eb_r);
				if ((_25521_flag == nullptr)) {
					return jule::VoidExceptional((_25231_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_203d4c3eb_r));
				}
				({
					auto except = _20061788a_process_flag(&(*_self_), _25521_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_203d4c31e:;
			++it;
			goto _iter_begin_203d4c31e;
		}
		_iter_end_203d4c31e:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _200617ec8_double_dash(_200616b64_ArgParser* _self_,jule::Str& _26431_arg) {
	jule::Trait<_2006123bd_CommonFlag> _26517_flag = _200614535_find_flag(&(*_self_)._field_set, _26431_arg.slice(2LL));
	if ((_26517_flag == nullptr)) {
		return jule::VoidExceptional((_26431_arg + jule::Str(": flag is not exist", 19)));
	}
	({
		auto except = _20061788a_process_flag(&(*_self_), _26517_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::VoidExceptional _20061821a_try_arg(_200616b64_ArgParser* _self_) {
	jule::Str _27413_arg = (*_self_)._field_args[(*_self_)._field_i];
	if (((*_self_)._field_args.len() == 0LL)) {
		return jule::VoidExceptional();
	}
	if (_27413_arg[0LL] == '-') {
		if (((*_self_)._field_args.len() > 1LL) && (_27413_arg[1LL] == '-')) {
			({
				auto except = _200617ec8_double_dash(&(*_self_), _27413_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();
		}
		({
			auto except = _200617ba9_single_dash(&(*_self_), _27413_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();
	}
	(*_self_)._field_content = jule::alloc_for_append((*_self_)._field_content,1);(*_self_)._field_content.__push(_27413_arg); return jule::VoidExceptional(); }



inline jule::VoidExceptional _20061845c_parse(_200616b64_ArgParser* _self_) {
	for (; (*_self_)._field_i < static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_args.len())); ((*_self_)._field_i)++) {
		{
			({
				auto except = _20061821a_try_arg(&(*_self_));
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_203d4e321:;
	}
	_iter_end_203d4e321:; return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, _200616b64_ArgParser _Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _22237de5e_push_opt_level(jule::I32 _3323_level) {
	_22237d2b0_OPT_COPY=_3323_level >= static_cast<jule::I32>(1LL);
	_22237d3d1_OPT_DEADCODE=_3323_level >= static_cast<jule::I32>(1LL);
	_22237d579_OPT_APPEND=_3323_level >= static_cast<jule::I32>(1LL);
	_22237d69a_OPT_MATH=_3323_level >= static_cast<jule::I32>(1LL);
	_22237d7bb_OPT_ACCESS=_3323_level >= static_cast<jule::I32>(1LL);
	_22237d8dc_OPT_INLINE=_3323_level >= static_cast<jule::I32>(1LL);
	_22237db1d_OPT_PTR=_3323_level >= static_cast<jule::I32>(1LL);
	_22237dc3e_OPT_COND=_3323_level >= static_cast<jule::I32>(1LL);
}



inline jule::I32 _22249ea96_decode_rune(jule::I32 _6720_r1,jule::I32 _6730_r2) {
	if ((((55296LL <= _6720_r1) && (_6720_r1 < 56320LL)) && (56320LL <= _6730_r2)) && (_6730_r2 < 57344LL)) {
		return static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_6720_r1 - 55296LL)))) << 10LL))) | static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_6730_r2 - 56320LL)))))) + 65536LL));
	}
	return 65533LL;
}



inline std::tuple<jule::I32,jule::I32> _22249eda4_encode_rune(jule::I32 _7724_r) {
	jule::I32 _7735_r1 = jule::I32();
	jule::I32 _7745_r2 = jule::I32();
	if ((_7724_r < 65536LL) || (_7724_r > 1114111LL)) {
		_7735_r1 = 65533LL;
		_7745_r2 = 65533LL;
		return std::make_tuple(_7735_r1,_7745_r2);
	}
	_7724_r-=65536LL;
	_7735_r1 = static_cast<jule::I32>(55296LL + static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_7724_r >> 10LL)))) & 1023LL))));
	_7745_r2 = static_cast<jule::I32>(56320LL + static_cast<jule::I32>(static_cast<jule::I32>((_7724_r & 1023LL))));
	return std::make_tuple(_7735_r1,_7745_r2);
}



inline jule::Slice<jule::I32> _2224a0514_decode(jule::Slice<jule::U16> _11815_s) {
	jule::Slice<jule::I32> _11913_a = jule::Slice<jule::I32>::alloc(static_cast<jule::I32>(_11815_s.len()));
	jule::I32 _12013_n = 0LL;
	jule::I32 _12113_i = 0LL;
	for (; _12113_i < static_cast<jule::I32>(static_cast<jule::I32>(_11815_s.len())); (_12113_i)++) {
		{
			jule::U16 _12313_r = _11815_s[_12113_i];
			{
				
				if ((_12313_r < 55296LLU) || 57344LL <= _12313_r) {
					_case_begin_20062e918:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(static_cast<jule::I32>(_12313_r));
					}
				}
				else if ((((_12313_r < 56320LLU) && ((_12113_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_11815_s.len())))) && (56320LL <= _11815_s[(_12113_i + 1LL)])) && (_11815_s[(_12113_i + 1LL)] < 57344LLU)) {
					_case_begin_20062e53e:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(_22249ea96_decode_rune(static_cast<jule::I32>(static_cast<jule::I32>(_12313_r)),static_cast<jule::I32>(static_cast<jule::I32>(_11815_s[(_12113_i + 1LL)]))));
						(_12113_i)++;
					}
				}
				else {
					_case_begin_20062e1ba:;
					{
						_11913_a[_12013_n]=65533LL;
					}
				}
				_match_end_20062e143:;
			}
			(_12013_n)++;
		}
	_iter_next_20062b492:;
	}
	_iter_end_20062b492:;
	return _11913_a.slice(0LL,_12013_n);
}



inline jule::Slice<jule::U16> _2224a08ee_append_rune(jule::Slice<jule::U16> _14924_a,jule::I32 _14934_r) {
	{
		
		if ((0LL <= _14934_r) && (_14934_r < 55296LL) || (57344LL <= _14934_r) && (_14934_r < 65536LL)) {
			_case_begin_200633631:;
			{
				return jule::append(_14924_a,jule::Slice<jule::U16>({static_cast<jule::U16>(static_cast<jule::U16>(_14934_r))}));
			}
		}
		else if ((65536LL <= _14934_r) && (_14934_r <= 1114111LL)) {
			_case_begin_2006336a8:;
			{
				jule::I32 _15614_r1;
				jule::I32 _15618_r2;
				std::tie(_15614_r1,_15618_r2) = _22249eda4_encode_rune(_14934_r);
				return jule::append(_14924_a,jule::Slice<jule::U16>({static_cast<jule::U16>(static_cast<jule::U16>(_15614_r1)),static_cast<jule::U16>(static_cast<jule::U16>(_15618_r2))}));
			}
		}
		_match_end_2006332ce:;
	}
	return jule::append(_14924_a,jule::Slice<jule::U16>({65533LLU}));
}



inline jule::Slice<jule::U16> _2224846d5_utf16_from_str(jule::Str _1423_s) {
	
	jule::Slice<jule::I32> _209_runes = static_cast<jule::Slice<jule::I32>>(_1423_s);
	jule::Slice<jule::U16> _2113_buff = jule::Slice<jule::U16>::alloc(0LL,static_cast<jule::I32>(_209_runes.len()));
	{
		auto &expr = _209_runes;
		auto it = expr.begin();
		_iter_begin_2006424db:;
		if (it != expr.end()) {
			jule::I32 &_200642530_r = *it;
			{
				if ((_200642530_r == 0LL)) {
					goto _iter_end_2006424db;
				}
				_2113_buff=_2224a08ee_append_rune(_2113_buff,_200642530_r);
			}
			_iter_next_2006424db:;
			++it;
			goto _iter_begin_2006424db;
		}
		_iter_end_2006424db:;
	}
	return _2224a08ee_append_rune(_2113_buff,0LL);
}



inline jule::Str _2224a0a97_utf16_to_str(jule::Slice<jule::U16> _3421_s) {
	if ((_3421_s == nullptr)) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _3813_code_page = _3421_s;
	{
		auto &expr = _3421_s;
		auto it = expr.begin();
		_iter_begin_200643e6b:;
		if (it != expr.end()) {
			jule::I32 _200643eb0_i = it - expr.begin();
			jule::U16 &_200644235_v = *it;
			{
				if ((_200644235_v == 0LLU)) {
					_3813_code_page=_3813_code_page.slice(0LL,_200643eb0_i);
					goto _iter_end_200643e6b;
				}
			}
			_iter_next_200643e6b:;
			++it;
			_200643eb0_i++;
			goto _iter_begin_200643e6b;
		}
		_iter_end_200643e6b:;
	}
	return static_cast<jule::Str>(_2224a0514_decode(_3813_code_page));
}



inline jule::Str _2224a0c0c_u16_ptr_to_str(jule::U16* _5030_s) {
	if ((_5030_s == nullptr)) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _5513_code_page = nullptr;
	jule::I32 _5613_i = 0LL;
	for (; ; (_5613_i)++) {
		{
			jule::U16 _5813_r = _5030_s[_5613_i];
			if ((_5813_r == 0LLU)) {
				return static_cast<jule::Str>(_2224a0514_decode(_5513_code_page));
			}
			_5513_code_page = jule::alloc_for_append(_5513_code_page,1);_5513_code_page.__push(_5813_r);
		}
	_iter_next_2006445ba:;
	}
	_iter_end_2006445ba:;
	return jule::Str();
}



inline jule::I32 _222450690_get_last_errno(void) {
	return errno;
}



inline jule::U32 _2224a1c52_get_std_handle(jule::U32 _5523_stdh) {
	return static_cast<jule::U32>(((jule::U32)(GetStdHandle(_5523_stdh))));
}



inline jule::I32 _2224a202c_wstat(jule::U16* _5921_path,struct stat* _5937_stat) {
	return static_cast<jule::I32>(wstat(((wchar_t*)(_5921_path)),_5937_stat));
}



inline jule::I32 _2224a2192__wopen(jule::U16* _6422_path,jule::I32 _6434_flag,jule::I32 _6445_mode) {
	return static_cast<jule::I32>(_wopen(((wchar_t*)((&(_6422_path[0LL])))),_6434_flag,_6445_mode));
}



inline jule::U32 _2224a2307_get_last_error(void) {
	return static_cast<jule::U32>(GetLastError());
}



inline jule::U32 _2224a246c_get_current_directory(jule::U32 _7337_bufflen,jule::U16* _7355_buff) {
	return static_cast<jule::U32>(GetCurrentDirectoryW(_7337_bufflen,((wchar_t*)(_7355_buff))));
}



inline jule::Bool _2224a2934_delete_file(jule::U16* _8427_path) {
	return DeleteFileW(((wchar_t*)(_8427_path)));
}



inline jule::Bool _2224a2c42_create_directory(jule::U16* _8932_path) {
	return CreateDirectoryW(((wchar_t*)(_8932_path)),nullptr);
}



inline jule::Bool _2224a3050_remove_directory(jule::U16* _9432_path) {
	return RemoveDirectoryW(((wchar_t*)(_9432_path)));
}



inline _WDIR* _2224a335d__wopendir(jule::U16* _9925_path) {
	return _wopendir(((wchar_t*)(_9925_path)));
}



inline struct _wdirent* _2224a366b__wreaddir(_WDIR* _10229_dir) {
	return _wreaddir(_10229_dir);
}



inline jule::I32 _2224a3979__wclosedir(_WDIR* _10530_dir) {
	return static_cast<jule::I32>(_wclosedir(_10530_dir));
}



inline jule::U32 _2224a4260_get_full_path_name(jule::U16* _10834_path,jule::U32 _10846_bufflen,jule::U16* _1095_buff,jule::U16** _10917_fname) {
	return static_cast<jule::U32>(GetFullPathNameW(((wchar_t*)(_10834_path)),_10846_bufflen,((wchar_t*)(_1095_buff)),((wchar_t**)(_10917_fname))));
}



inline jule::Bool _2224a464a_get_console_mode(jule::U32 _11425_handle,jule::I32& _11446_mode) {
	return GetConsoleMode(((HANDLE)(_11425_handle)),((DWORD*)((&(_11446_mode)))));
}



inline jule::Bool _2224a4a35_set_console_mode(jule::U32 _11925_handle,jule::I32 _11941_mode) {
	return SetConsoleMode(((HANDLE)(_11925_handle)),static_cast<DWORD>(_11941_mode));
}



inline jule::Bool _2224a51a6_write_console(jule::U32 _12429_handle,jule::U16* _12445_buffer,jule::I32 _12459_to_write,jule::I32& _12510_written,void* _12524_reserved) {
	return WriteConsoleW(((HANDLE)(_12429_handle)),((void*)(_12445_buffer)),static_cast<DWORD>(_12459_to_write),((DWORD*)(_12510_written)),_12524_reserved);
}



inline jule::Bool _2224a5827_read_console(jule::U32 _13128_handle,jule::U16* _13148_buffer,jule::I32 _13162_to_read,jule::I32& _13210_readed,void* _13223_input_control) {
	return ReadConsoleW(((HANDLE)(_13128_handle)),((void*)(_13148_buffer)),static_cast<DWORD>(_13162_to_read),((DWORD*)((&(_13210_readed)))),_13223_input_control);
}



inline jule::I32 _2224a8253_seek(jule::I32 _2613_handle,jule::I32 _2626_offset,jule::I32 _2639_origin) {
	return static_cast<jule::I32>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::I32 _2224a871a_read(jule::I32 _3120_handle,void* _3137_buff,jule::U32 _3152_n) {
	return static_cast<jule::I32>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::I32 _2224a8ab1_close(jule::I32 _3614_handle) {
	return static_cast<jule::I32>(close(_3614_handle));
}



inline jule::I32 _2224a9078_write(jule::I32 _3921_handle,void* _3934_buff,jule::U32 _3949_n) {
	return static_cast<jule::I32>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _2224a92ed_exit(jule::I32 _4413_code) {
	exit(_4413_code);
}



inline std::tuple<jule::I32,jule::I32> _222567dc3_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::I32 _18242_size = jule::I32();
	if ((_18220_p.len() < 1LL)) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _222566d28_FIRST[static_cast<jule::I32>(_1869_p0)];
	if ((_1879_x >= 240LLU)) {
		jule::I32 _19213_mask = static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>((_1879_x << 31LLU))) >> 31LLU));
		_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_18220_p[0LL]))) & static_cast<jule::I32>(static_cast<jule::I32>((~(_19213_mask)))))) | static_cast<jule::I32>(static_cast<jule::I32>(65533LL & _19213_mask)));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::I32 _1959_sz = static_cast<jule::I32>((_1879_x & 7LLU));
	_2225658d7_accept_range _1969_accept = _222567499_ACCEPT_RANGES[static_cast<jule::I32>((_1879_x >> 4LLU))];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if ((_1959_sz <= 2LL)) {
		_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_1869_p0 & 31LLU)))) << 6LL))) | static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_2009_b1 & 63LLU)))));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LLU) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if ((_1959_sz <= 3LL)) {
		_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_1869_p0 & 15LLU)))) << 12LL))) | static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_2009_b1 & 63LLU)))) << 6LL))))) | static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_2079_b2 & 63LLU)))));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LLU) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_1869_p0 & 7LLU)))) << 18LL))) | static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_2009_b1 & 63LLU)))) << 12LL))))) | static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_2079_b2 & 63LLU)))) << 6LL))))) | static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_2149_b3 & 63LLU)))));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::I32> _222568533_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::I32 _27638_r = jule::I32();
	jule::I32 _27647_size = jule::I32();
	if ((_27625_p.len() == 0LL)) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I32 _2809_end = _27625_p.len();
	jule::I32 _28113_start = (_2809_end - 1LL);
	_27638_r=static_cast<jule::I32>(static_cast<jule::I32>(_27625_p[_28113_start]));
	if ((_27638_r < 128LL)) {
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I32 _28913_lim = (_2809_end - 4LL);
	if ((_28913_lim < 0LL)) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	for (; _28113_start >= _28913_lim; (_28113_start)--) {
		{
			if (_22256a2c1_rune_start(_27625_p[_28113_start])) {
				goto _iter_end_2006c896d;
			}
		}
	_iter_next_2006c896d:;
	}
	_iter_end_2006c896d:;
	if ((_28113_start < 0LL)) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _222567dc3_decode_rune(_27625_p.slice(_28113_start,_2809_end));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	return std::make_tuple(_27638_r,_27647_size);
}



inline jule::I32 _222568b4e_rune_len(jule::I32 _35217_r) {
	{
		
		if ((_35217_r < 0LL)) {
			_case_begin_2006d147b:;
			{
				return -1LL;
			}
		}
		else if ((_35217_r <= 127LL)) {
			_case_begin_2006d14e2:;
			{
				return 1LL;
			}
		}
		else if ((_35217_r <= 2047LL)) {
			_case_begin_2006d1091:;
			{
				return 2LL;
			}
		}
		else if ((55296LL <= _35217_r) && (_35217_r <= 57343LL)) {
			_case_begin_2006d1118:;
			{
				return -1LL;
			}
		}
		else if ((_35217_r <= 65535LL)) {
			_case_begin_2006d1190:;
			{
				return 3LL;
			}
		}
		else if ((_35217_r <= 1114111LL)) {
			_case_begin_2006d1239:;
			{
				return 4LL;
			}
		}
		else {
			_case_begin_2006d0810:;
			{
				return -1LL;
			}
		}
		_match_end_2006cd5dd:;
	}
}



inline jule::I32 _2225690c2_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		
		if ((_3699_i <= 127LLU)) {
			_case_begin_2006d425e:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(static_cast<jule::U8>(_36739_r));
				return 1LL;
			}
		}
		else if ((_3699_i <= 2047LLU)) {
			_case_begin_2006d77e5:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(192LLU | static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 6LL)))));
				_36724_p[1LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_36739_r))) & 63LLU))));
				return 2LL;
			}
		}
		else if ((_3699_i > 1114111LLU) || (55296LL <= _3699_i) && (_3699_i <= 57343LLU)) {
			_case_begin_2006d785b:;
			{
				_36739_r=65533LL;
				goto _case_begin_2006d3e84;
			}
		}
		else if ((_3699_i <= 65535LLU)) {
			_case_begin_2006d3e84:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(224LLU | static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 12LL)))));
				_36724_p[1LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 6LL)))) & 63LLU))));
				_36724_p[2LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_36739_r))) & 63LLU))));
				return 3LL;
			}
		}
		else {
			_case_begin_2006d3e1d:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(240LLU | static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 18LL)))));
				_36724_p[1LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 12LL)))) & 63LLU))));
				_36724_p[2LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_36739_r >> 6LL)))) & 63LLU))));
				_36724_p[3LL]=static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_36739_r))) & 63LLU))));
				return 4LL;
			}
		}
		_match_end_2006d3d52:;
	}
}



inline jule::Slice<jule::U8> _2225694ac_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if ((_39835_r <= 127LL)) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_39835_r))}));
	}
	return _222569897_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _222569897_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		
		if ((_4079_i <= 2047LLU)) {
			_case_begin_2006e2b96:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LLU | static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 6LL))))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_40545_r))) & 63LLU))))}));
			}
		}
		else if ((_4079_i > 1114111LLU) || (55296LL <= _4079_i) && (_4079_i <= 57343LLU)) {
			_case_begin_2006e2c0c:;
			{
				_40545_r=65533LL;
				goto _case_begin_2006e2c73;
			}
		}
		else if ((_4079_i <= 65535LLU)) {
			_case_begin_2006e2c73:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LLU | static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 12LL))))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 6LL)))) & 63LLU)))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_40545_r))) & 63LLU))))}));
			}
		}
		else {
			_case_begin_2006dea61:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LLU | static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 18LL))))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 12LL)))) & 63LLU)))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_40545_r >> 6LL)))) & 63LLU)))),static_cast<jule::U8>(128LLU | static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_40545_r))) & 63LLU))))}));
			}
		}
		_match_end_2006de995:;
	}
}



inline jule::I32 _222569eb3_rune_count_str(jule::Str _46623_s) {
	jule::I32 _46633_n = jule::I32();
	jule::I32 _46713_i = 0LL;
	for (; _46713_i < static_cast<jule::I32>(static_cast<jule::I32>(_46623_s.len())); (_46633_n)++) {
		{
			jule::U8 _46917_c = _46623_s[_46713_i];
			if ((_46917_c < 128LLU)) {
				(_46713_i)++;
				goto _iter_next_2006ece15;
			}
			jule::U8 _47513_x = _222566d28_FIRST[static_cast<jule::I32>(_46917_c)];
			if ((_47513_x == 241LLU)) {
				(_46713_i)++;
				goto _iter_next_2006ece15;
			}
			jule::I32 _48017_size = static_cast<jule::I32>((_47513_x & 7LLU));
			if ((_46713_i + _48017_size) > static_cast<jule::I32>(static_cast<jule::I32>(_46623_s.len()))) {
				(_46713_i)++;
				goto _iter_next_2006ece15;
			}
			_2225658d7_accept_range _48513_accept = _222567499_ACCEPT_RANGES[static_cast<jule::I32>((_47513_x >> 4LLU))];
			_46917_c=_46623_s[(_46713_i + 1LL)];
			if ((_46917_c < _48513_accept._field_lo) || (_48513_accept._field_hi < _46917_c)) {
				_48017_size=1LL;
			} else if ((_48017_size == 2LL)) {
			} else {
				_46917_c=_46623_s[(_46713_i + 2LL)];
				if ((_46917_c < 128LLU) || (191LL < _46917_c)) {
					_48017_size=1LL;
				} else if ((_48017_size == 3LL)) {
				} else {
					_46917_c=_46623_s[(_46713_i + 3LL)];
					if ((_46917_c < 128LLU) || (191LL < _46917_c)) {
						_48017_size=1LL;
					}
				}
			}
			_46713_i+=_48017_size;
		}
	_iter_next_2006ece15:;
	}
	_iter_end_2006ece15:;
	return _46633_n;
}



inline jule::Bool _22256a2c1_rune_start(jule::U8 _51019_b) {
	return ((_51019_b & 192LLU) != 128LLU);
}



inline jule::I32 _22edc2db3_get_last_os_error_windows(void) {
	jule::U32 _169_err = _2224a2307_get_last_error();
	{
		auto &_match_expr{ _169_err };
		
		if (_match_expr == 5LL) {
			_case_begin_200728061:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_2007280c7:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_200727a11:;
			{
				return static_cast<jule::I32>(7LL);
			}
		}
		else if (_match_expr == 123LL) {
			_case_begin_200727a77:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else {
			_case_begin_2007254d1:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		_match_end_200724733:;
	}
}



inline jule::Slice<jule::Str> _22edc40d4_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _22edc458a_working_dir(void) {
	return jule::Exceptional<jule::Str>(jule::Any(),({
		auto except = _22edc52c2___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _22edc52c2___getwd(void) {
	jule::Array<jule::U16,261> _1513_buff = jule::Array<jule::U16,261>();
	jule::U32 _169_n = _2224a246c_get_current_directory(261LLU,(&(_1513_buff[0LL])));
	if ((_169_n == 0LLU)) {
		return jule::Exceptional<jule::Str>(_22edc2db3_get_last_os_error_windows());
	}
	return jule::Exceptional<jule::Str>(jule::Any(),_2224a0c0c_u16_ptr_to_str((&(_1513_buff[0LL]))));
}



inline jule::Slice<jule::U8> _22ee40d65_stobs(jule::Str& _915_s) {
	{
		jule::Slice<jule::U8> slice;;
		slice.data.alloc = _915_s.begin();;
		slice.data.ref = nullptr;;
		slice._slice = slice.data.alloc;;
		slice._len = slice._cap = _915_s.len();;
		return slice;
	}
}



inline jule::Bool _208c2d86b_is_letter(jule::I32 _7618_r) {
	if ((static_cast<jule::U32>(_7618_r) <= 255LLU)) {
		return ((_208c699ea__PROPERTIES[static_cast<jule::I32>(static_cast<jule::U8>(_7618_r))] & 96LLU) != 0LLU);
	}
	return _208c71c66_is_excluding_latin(_208c34a1a_LETTER,_7618_r);
}



inline jule::Bool _208c7101d_is16(jule::Slice<_208c6de2d_Range16> _1919_ranges,jule::U16 _19128_r) {
	if ((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LLU)) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_2305b2096:;
			if (it != expr.end()) {
				jule::I32 _2305b2cde_i = it - expr.begin();
				{
					_208c6de2d_Range16* _19417_range = (&(_1919_ranges[_2305b2cde_i]));
					{
						if (_19128_r < _19417_range->_field_lo) {
							return false;
						}
						if (_19128_r <= _19417_range->_field_hi) {
							return (_19417_range->_field_stride == 1LLU) || (jule::mod(_19128_r - _19417_range->_field_lo,_19417_range->_field_stride) == 0LLU);
						}
					}
				}
				_iter_next_2305b2096:;
				++it;
				_2305b2cde_i++;
				goto _iter_begin_2305b2096;
			}
			_iter_end_2305b2096:;
		}
		return false;
	}
	jule::I32 _20813_lo = 0LL;
	jule::I32 _20913_hi = _1919_ranges.len();
	while (_20813_lo < _20913_hi) {
		{
			jule::I32 _21113_m = _20813_lo + static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_20913_hi - _20813_lo))) >> 1LLU));
			_208c6de2d_Range16* _21213_range = (&(_1919_ranges[_21113_m]));
			{
				if ((_21213_range->_field_lo <= _19128_r) && (_19128_r <= _21213_range->_field_hi)) {
					return (_21213_range->_field_stride == 1LLU) || (jule::mod(_19128_r - _21213_range->_field_lo,_21213_range->_field_stride) == 0LLU);
				}
				if (_19128_r < _21213_range->_field_lo) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::I32>((_21113_m + 1LL));
				}
			}
		}
	_iter_next_2305b14e6:;
	}
	_iter_end_2305b14e6:;
	return false;
}



inline jule::Bool _208c71408_is32(jule::Slice<_208c6e4c2_Range32> _2289_ranges,jule::U32 _22828_r) {
	if ((_2289_ranges.len() <= 18LL)) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_2305b98d9:;
			if (it != expr.end()) {
				jule::I32 _2305b9b09_i = it - expr.begin();
				{
					_208c6e4c2_Range32* _23117_range = (&(_2289_ranges[_2305b9b09_i]));
					{
						if (_22828_r < _23117_range->_field_lo) {
							return false;
						}
						if (_22828_r <= _23117_range->_field_hi) {
							return (_23117_range->_field_stride == 1LLU) || (jule::mod(_22828_r - _23117_range->_field_lo,_23117_range->_field_stride) == 0LLU);
						}
					}
				}
				_iter_next_2305b98d9:;
				++it;
				_2305b9b09_i++;
				goto _iter_begin_2305b98d9;
			}
			_iter_end_2305b98d9:;
		}
		return false;
	}
	jule::I32 _24513_lo = 0LL;
	jule::I32 _24613_hi = _2289_ranges.len();
	while (_24513_lo < _24613_hi) {
		{
			jule::I32 _24813_m = _24513_lo + static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_24613_hi - _24513_lo))) >> 1LLU));
			_208c6e4c2_Range32* _24913_range = (&(_2289_ranges[_24813_m]));
			{
				if ((_24913_range->_field_lo <= _22828_r) && (_22828_r <= _24913_range->_field_hi)) {
					return (_24913_range->_field_stride == 1LLU) || (jule::mod(_22828_r - _24913_range->_field_lo,_24913_range->_field_stride) == 0LLU);
				}
				if (_22828_r < _24913_range->_field_lo) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::I32>((_24813_m + 1LL));
				}
			}
		}
	_iter_next_2305b6a4b:;
	}
	_iter_end_2305b6a4b:;
	return false;
}



inline jule::Bool _208c71c66_is_excluding_latin(jule::Ptr<_208c6ea22_RangeTable> _27823_range_tab,jule::I32 _27847_r) {
	{
		jule::Slice<_208c6de2d_Range16> &_28014_r16 = _27823_range_tab.get()._field_r16;
		jule::I32 _28213_off = _27823_range_tab.get()._field_latin_offset;
		if ((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_28014_r16[(_28014_r16.len() - 1LL)]._field_hi))))) {
			return _208c7101d_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(static_cast<jule::U16>(_27847_r)));
		}
	}
	jule::Slice<_208c6e4c2_Range32> &_28710_r32 = _27823_range_tab.get()._field_r32;
	if ((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_28710_r32[0LL]._field_lo))))) {
		return _208c71408_is32(_28710_r32,static_cast<jule::U32>(static_cast<jule::U32>(_27847_r)));
	}
	return false;
}



inline jule::Str _208bde08a_repeat(jule::Str _1415_s,jule::I32 _1427_n) {
	if ((_1427_n <= 0LL)) {
		return jule::Str();
	}
	jule::Str _1913_ss = _1415_s;
	for (; (_1427_n > 1LL); (_1427_n)--) {
		{
			_1913_ss+=_1415_s;
		}
	_iter_next_2305e2703:;
	}
	_iter_end_2305e2703:;
	return _1913_ss;
}



inline jule::Bool _208a4164b__has_prefix(jule::Str& _2617_s,jule::Str& _2626_sub,jule::I32 _2640_start) {
	if ((_2626_sub.len() == 0LL) || ((_2617_s.len() - _2640_start) < static_cast<jule::I32>(static_cast<jule::I32>(_2626_sub.len())))) {
		return false;
	}
	jule::I32 _3113_i = 0LL;
	for (; _3113_i < static_cast<jule::I32>(static_cast<jule::I32>(_2626_sub.len())); std::tie(_3113_i,_2640_start) = std::make_tuple(static_cast<jule::I32>((_3113_i + 1LL)),static_cast<jule::I32>((_2640_start + 1LL)))) {
		{
			if (_2617_s[_2640_start] != _2626_sub[_3113_i]) {
				return false;
			}
		}
	_iter_next_2305e47e3:;
	}
	_iter_end_2305e47e3:;
	return true;
}



inline jule::Bool _208be3dd6_has_prefix(jule::Str _4119_s,jule::Str _4127_sub) {
	return _208a4164b__has_prefix(_4119_s,_4127_sub,0LL);
}



inline jule::Bool _208bee93b__has_suffix(jule::Str& _4517_s,jule::Str& _4526_sub,jule::I32 _4540_start) {
	if ((_4526_sub.len() == 0LL) || ((_4517_s.len() - _4540_start) < static_cast<jule::I32>(static_cast<jule::I32>(_4526_sub.len())))) {
		return false;
	}
	_4540_start=static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_4517_s.len())) - _4540_start);
	jule::I32 _5113_i = 0LL;
	for (; _5113_i < static_cast<jule::I32>(static_cast<jule::I32>(_4526_sub.len())); (_5113_i)++) {
		{
			if (_4517_s[((_4540_start - _5113_i) - 1LL)] != _4526_sub[((_4526_sub.len() - _5113_i) - 1LL)]) {
				return false;
			}
		}
	_iter_next_2305e654d:;
	}
	_iter_end_2305e654d:;
	return true;
}



inline jule::Bool _208be3556_has_suffix(jule::Str _6119_s,jule::Str _6127_sub) {
	return _208bee93b__has_suffix(_6119_s,_6127_sub,0LL);
}



inline jule::I32 _208be25cc_find_at(jule::Str _6916_s,jule::Str _6924_sub,jule::I32 _6938_i) {
	if (((_6938_i < 0LL) || (_6916_s.len() < static_cast<jule::I32>(static_cast<jule::I32>(_6924_sub.len())))) || (_6924_sub.len() == 0LL)) {
		return -1LL;
	}
	for (; _6938_i < static_cast<jule::I32>(static_cast<jule::I32>(_6916_s.len())); (_6938_i)++) {
		{
			if (_208a4164b__has_prefix(_6916_s,_6924_sub,_6938_i)) {
				return _6938_i;
			}
		}
	_iter_next_2305eb311:;
	}
	_iter_end_2305eb311:;
	return -1LL;
}



inline jule::I32 _2308c0e43_find_last_at(jule::Str _9221_s,jule::Str _9229_sub,jule::I32 _9239_i) {
	jule::I32 _9313_j = ((_9239_i - static_cast<jule::I32>(static_cast<jule::I32>(_9229_sub.len()))) + 1LL);
	if ((((_9229_sub.len() == 0LL) || (_9239_i < 0LL)) || (_9239_i >= static_cast<jule::I32>(static_cast<jule::I32>(_9221_s.len())))) || (_9313_j < 0LL)) {
		return -1LL;
	}
	_julec_label_loop:;
	for (; (_9313_j >= 0LL); (_9313_j)--) {
		{
			jule::I32 _9917_k = _9313_j;
			jule::I32 _10017_z = 0LL;
			for (; _10017_z < static_cast<jule::I32>(static_cast<jule::I32>(_9229_sub.len())); std::tie(_9917_k,_10017_z) = std::make_tuple(static_cast<jule::I32>((_9917_k + 1LL)),static_cast<jule::I32>((_10017_z + 1LL)))) {
				{
					if (_9221_s[_9917_k] != _9229_sub[_10017_z]) {
						goto _iter_next_2305ee1d2;
					}
				}
			_iter_next_2306015ad:;
			}
			_iter_end_2306015ad:;
			return _9313_j;
		}
	_iter_next_2305ee1d2:;
	}
	_iter_end_2305ee1d2:;
	return -1LL;
}



inline jule::I32 _2308c10a8_find_last(jule::Str _11418_s,jule::Str _11426_sub) {
	return static_cast<jule::I32>(_2308c0e43_find_last_at(_11418_s,_11426_sub,static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_11418_s.len())) - 1LL))));
}



inline jule::I32 _2308c17c3__find_rune(jule::Slice<jule::U8>& _17016_s,jule::I32 _17027_r) {
	jule::I32 _17113_i = 0LL;
	while (_17113_i < static_cast<jule::I32>(static_cast<jule::I32>(_17016_s.len()))) {
		{
			jule::I32 _17314_br;
			jule::I32 _17318_n;
			std::tie(_17314_br,_17318_n) = _222567dc3_decode_rune(_17016_s.slice(_17113_i));
			if (_17027_r == _17314_br) {
				return _17113_i;
			}
			_17113_i+=_17318_n;
		}
	_iter_next_23060b112:;
	}
	_iter_end_23060b112:;
	return -1LL;
}



inline jule::I32 _2308c1cce_find_last_byte(jule::Str _19723_s,jule::U8 _19731_b) {
	jule::I32 _19813_i = (_19723_s.len() - 1LL);
	for (; (_19813_i >= 0LL); (_19813_i)--) {
		{
			if (_19723_s[_19813_i] == _19731_b) {
				return _19813_i;
			}
		}
	_iter_next_23060dc4c:;
	}
	_iter_end_23060dc4c:;
	return -1LL;
}



inline jule::I32 _208c7265c_find_any(jule::Str _23817_s,jule::Str _23825_runes) {
	jule::Slice<jule::U8> _2399_sb = _22ee40d65_stobs(_23817_s);
	jule::Slice<jule::U8> _24013_rb = _22ee40d65_stobs(_23825_runes);
	jule::I32 _24113_i = 0LL;
	while (_24113_i < static_cast<jule::I32>(static_cast<jule::I32>(_2399_sb.len()))) {
		{
			jule::I32 _24314_r;
			jule::I32 _24317_n;
			std::tie(_24314_r,_24317_n) = _222567dc3_decode_rune(_2399_sb.slice(_24113_i));
			if ((_2308c17c3__find_rune(_24013_rb,_24314_r) != -1LL)) {
				return _24113_i;
			}
			_24113_i+=_24317_n;
		}
	_iter_next_230613bca:;
	}
	_iter_end_230613bca:;
	return -1LL;
}



inline jule::Slice<jule::Str> _208c72937_split(jule::Str _27214_s,jule::Str _27222_sub,jule::I32 _27236_n) {
	jule::I32 _27313_cap = _27236_n;
	if ((_27236_n < 0LL)) {
		_27313_cap=16LL;
	}
	jule::Slice<jule::Str> _27713_parts = jule::Slice<jule::Str>::alloc(0LL,_27313_cap);
	if ((_27236_n == 0LL)) {
		return _27713_parts;
	}
	if ((_27236_n < 0LL)) {
		_27236_n=static_cast<jule::I32>(_27214_s.len());
	}
	jule::I32 _28413_i = 0LL;
	for (; (_27236_n > 0LL); (_27236_n)--) {
		{
			jule::I32 _28613_j = _208be25cc_find_at(_27214_s,_27222_sub,_28413_i);
			if ((_28613_j == -1LL)) {
				goto _iter_end_23061a165;
			}
			_27713_parts = jule::alloc_for_append(_27713_parts,1);_27713_parts.__push(_27214_s.slice(_28413_i,_28613_j));
			_28413_i=static_cast<jule::I32>(_28613_j + static_cast<jule::I32>(static_cast<jule::I32>(_27222_sub.len())));
		}
	_iter_next_23061a165:;
	}
	_iter_end_23061a165:;
	if ((_27236_n > 0LL) && (_28413_i < static_cast<jule::I32>(static_cast<jule::I32>(_27214_s.len())))) {
		_27713_parts = jule::alloc_for_append(_27713_parts,1);_27713_parts.__push(_27214_s.slice(_28413_i));
	}
	return _27713_parts;
}



inline jule::Bool _208c72a9c_contains(jule::Str _30017_s,jule::Str _30025_sub) {
	return (_208be25cc_find_at(_30017_s,_30025_sub,0LL) != -1LL);
}



inline jule::Bool _208c72edc_contains_any(jule::Str _31621_s,jule::Str _31629_runes) {
	return (_208c7265c_find_any(_31621_s,_31629_runes) != -1LL);
}



inline jule::Str _208c732b7_replace(jule::Str _34216_s,jule::Str _34224_sub,jule::Str _34234_new,jule::I32 _34248_n) {
	if ((_34248_n == 0LL) || (_34224_sub == _34234_new)) {
		return _34216_s;
	}
	if ((_34248_n < 0LL)) {
		_34248_n=static_cast<jule::I32>(_34216_s.len());
	}
	jule::Str _35113_ss = jule::Str();
	jule::I32 _35213_i = 0LL;
	for (; (_34248_n > 0LL); (_34248_n)--) {
		{
			jule::I32 _35413_j = _208be25cc_find_at(_34216_s,_34224_sub,_35213_i);
			if ((_35413_j == -1LL)) {
				goto _iter_end_23062588a;
			}
			_35113_ss+=_34216_s.slice(_35213_i,_35413_j);
			_35113_ss+=_34234_new;
			_35213_i=static_cast<jule::I32>(_35413_j + static_cast<jule::I32>(static_cast<jule::I32>(_34224_sub.len())));
		}
	_iter_next_23062588a:;
	}
	_iter_end_23062588a:;
	_35113_ss+=_34216_s.slice(_35213_i);
	return _35113_ss;
}



inline void _2308c1a9d__trim_left(jule::Slice<jule::U8>& _39420_s,jule::Slice<jule::U8>& _39432_cutset) {
	jule::I32 _39513_i = 0LL;
	while (_39513_i < static_cast<jule::I32>(static_cast<jule::I32>(_39420_s.len()))) {
		{
			jule::I32 _39714_r;
			jule::I32 _39717_n;
			std::tie(_39714_r,_39717_n) = _222567dc3_decode_rune(_39420_s.slice(_39513_i));
			if ((_2308c17c3__find_rune(_39432_cutset,_39714_r) == -1LL)) {
				_39420_s=_39420_s.slice(_39513_i);
				return;
			}
			_39513_i+=_39717_n;
		}
	_iter_next_23062b51c:;
	}
	_iter_end_23062b51c:;
	_39420_s=nullptr;
}



inline jule::Str _208c73ce0_trim_left(jule::Str _40918_s,jule::Str _40926_cutset) {
	jule::Slice<jule::U8> _41013_bytes = _22ee40d65_stobs(_40918_s);
	jule::Slice<jule::U8> _4119_bcutset = _22ee40d65_stobs(_40926_cutset);
	_2308c1a9d__trim_left(_41013_bytes,_4119_bcutset);
	return static_cast<jule::Str>(_41013_bytes);
}



inline void _208c73e55__trim_right(jule::Slice<jule::U8>& _41621_s,jule::Slice<jule::U8>& _41633_cutset) {
	jule::I32 _41713_i = _41621_s.len();
	while ((_41713_i > 0LL)) {
		{
			jule::I32 _41914_r;
			jule::I32 _41917_n;
			std::tie(_41914_r,_41917_n) = _222568533_decode_last_rune(_41621_s.slice(0LL,_41713_i));
			if ((_2308c17c3__find_rune(_41633_cutset,_41914_r) == -1LL)) {
				_41621_s=_41621_s.slice(0LL,_41713_i);
				return;
			}
			_41713_i-=_41917_n;
		}
	_iter_next_23062ec07:;
	}
	_iter_end_23062ec07:;
	_41621_s=nullptr;
}



inline jule::Str _208c74230_trim(jule::Str _44013_s,jule::Str _44021_cutset) {
	jule::Slice<jule::U8> _44113_bytes = _22ee40d65_stobs(_44013_s);
	jule::Slice<jule::U8> _4429_bcutset = _22ee40d65_stobs(_44021_cutset);
	_2308c1a9d__trim_left(_44113_bytes,_4429_bcutset);
	_208c73e55__trim_right(_44113_bytes,_4429_bcutset);
	return static_cast<jule::Str>(_44113_bytes);
}



inline jule::Bool _22ed9de49_is_path_sep(jule::U8 _4820_c) {
	return (_4820_c == 92LLU) || (_4820_c == '/');
}



inline jule::Bool _22ed9e0ae_is_slash(jule::U8 _5213_c) {
	return (_5213_c == '\\') || (_5213_c == '/');
}



inline jule::U8 _22ed9e224_to_upper(jule::U8 _5413_c) {
	if (('a' <= _5413_c) && (_5413_c <= 'z')) {
		return static_cast<jule::U8>(_5413_c - ('a' - 'A'));
	}
	return _5413_c;
}



inline jule::I32 _22ed9e664_volume_name_len(jule::Str _8220_path) {
	if ((_8220_path.len() < 2LL)) {
		return 0LL;
	}
	jule::U8 _879_c = _8220_path[0LL];
	if ((_8220_path[1LL] == ':') && ((('a' <= _879_c) && (_879_c <= 'z')) || (('A' <= _879_c) && (_879_c <= 'Z')))) {
		return 2LL;
	}
	if ((!(_22ed9e0ae_is_slash(_8220_path[0LL]))) || (!(_22ed9e0ae_is_slash(_8220_path[1LL])))) {
		return 0LL;
	}
	jule::Str _9510_p1;
	jule::Str _9518_rest;
	std::tie(_9510_p1,_9518_rest,std::ignore) = _22ed9e8a6_cut_path(_8220_path.slice(2LL));
	jule::Str _9613_p2 = jule::Str();
	jule::Bool _9713_ok = false;
	std::tie(_9613_p2,_9518_rest,_9713_ok) = _22ed9e8a6_cut_path(_9518_rest);
	if ((!(_9713_ok))) {
		return static_cast<jule::I32>(_8220_path.len());
	}
	if ((_9510_p1 != jule::Str(".", 1)) && (_9510_p1 != jule::Str("?", 1))) {
		return static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_8220_path.len())) - static_cast<jule::I32>(static_cast<jule::I32>(_9518_rest.len())))) - 1LL));
	}
	if ((((_9613_p2.len() == 3LL) && (_22ed9e224_to_upper(_9613_p2[0LL]) == 'U')) && (_22ed9e224_to_upper(_9613_p2[1LL]) == 'N')) && (_22ed9e224_to_upper(_9613_p2[2LL]) == 'C')) {
		std::tie(std::ignore,_9518_rest,std::ignore) = _22ed9e8a6_cut_path(_9518_rest);
		std::tie(std::ignore,_9518_rest,_9713_ok) = _22ed9e8a6_cut_path(_9518_rest);
		if ((!(_9713_ok))) {
			return static_cast<jule::I32>(_8220_path.len());
		}
	}
	return static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_8220_path.len())) - static_cast<jule::I32>(static_cast<jule::I32>(_9518_rest.len())))) - 1LL));
}



inline std::tuple<jule::Str,jule::Str,jule::Bool> _22ed9e8a6_cut_path(jule::Str _11913_path) {
	jule::Str _11926_before = jule::Str();
	jule::Str _11939_after = jule::Str();
	jule::Bool _11951_found = jule::Bool();
	{
		auto &expr = _11913_path;
		auto it = expr.begin();
		_iter_begin_230655a30:;
		if (it != expr.end()) {
			jule::I32 _230655a74_i = it - expr.begin();
			{
				if (_22ed9e0ae_is_slash(_11913_path[_230655a74_i])) {
					_11926_before = _11913_path.slice(0LL,_230655a74_i);
					_11939_after = _11913_path.slice((_230655a74_i + 1LL));
					_11951_found = true;
					return std::make_tuple(_11926_before,_11939_after,_11951_found);
				}
			}
			_iter_next_230655a30:;
			++it;
			_230655a74_i++;
			goto _iter_begin_230655a30;
		}
		_iter_end_230655a30:;
	}
	_11926_before = _11913_path;
	_11939_after = jule::Str();
	_11951_found = false;
	return std::make_tuple(_11926_before,_11939_after,_11951_found);
}



inline std::tuple<jule::Str,jule::Bool> _22ed9ebb4_full_path(jule::Str _12814_name) {
	jule::Str _12827_path = jule::Str();
	jule::Bool _12838_ok = jule::Bool();
	jule::Slice<jule::U16> _1299_utf16_name = _2224846d5_utf16_from_str(_12814_name);
	jule::U16* _1309_p = (&(_1299_utf16_name[0LL]));
	jule::U32 _13113_n = 100LLU;
	for (;;) {
		{
			jule::Slice<jule::U16> _13317_buff = jule::Slice<jule::U16>::alloc(static_cast<jule::I32>(_13113_n));
			_13113_n=static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_2224a4260_get_full_path_name(_1309_p,static_cast<jule::U32>(static_cast<jule::U32>(_13317_buff.len())),(&(_13317_buff[0LL])),nullptr))));
			if ((_13113_n == 0LLU)) {
				_12827_path = jule::Str();
				_12838_ok = false;
				return std::make_tuple(_12827_path,_12838_ok);
			}
			if (_13113_n <= static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_13317_buff.len())))) {
				_12827_path = _2224a0a97_utf16_to_str(_13317_buff.slice(0LL,static_cast<jule::I32>(_13113_n)));
				_12838_ok = true;
				return std::make_tuple(_12827_path,_12838_ok);
			}
		}
	_iter_next_230658835:;
	}
	_iter_end_230658835:;
	_12827_path = jule::Str();
	_12838_ok = false;
	return std::make_tuple(_12827_path,_12838_ok);
}



inline std::tuple<jule::Str,jule::Bool> _22eda005a___abs(jule::Str _14514_path) {
	jule::Bool _14532_ok = jule::Bool();
	if (_14514_path.empty()) {
		_14514_path=jule::Str(".", 1);
	}
	std::tie(_14514_path,_14532_ok) = _22ed9ebb4_full_path(_14514_path);
	if ((!(_14532_ok))) {
		_14532_ok = false;
		return std::make_tuple(jule::Str(),_14532_ok);
	}
	_14532_ok = true;
	return std::make_tuple(_208c74b6a_clean(_14514_path),_14532_ok);
}



inline jule::Str _22eda0368___join(jule::Slice<jule::Str> _15915_elem) {
	jule::Str _16013_s = jule::Str();
	jule::U8 _16113_last_char = 0LLU;
	{
		auto &expr = _15915_elem;
		auto it = expr.begin();
		_iter_begin_23065ce11:;
		if (it != expr.end()) {
			jule::Str _23065e75e_e = *it;
			{
				{
					
					if ((_16013_s.len() == 0LL)) {
						_case_begin_230660298:;
					}
					else if (_22ed9e0ae_is_slash(_16113_last_char)) {
						_case_begin_23065ee8a:;
						{
							while ((_23065e75e_e.len() > 0LL) && _22ed9e0ae_is_slash(_23065e75e_e[0LL])) {
								{
									(_23065e75e_e).mut_slice(1LL);
								}
							_iter_next_230661057:;
							}
							_iter_end_230661057:;
						}
					}
					else if (_16113_last_char == ':') {
						_case_begin_230660001:;
					}
					else {
						_case_begin_23065ee24:;
						{
							_16013_s+=jule::Str("\\", 1);
							_16113_last_char='\\';
						}
					}
					_match_end_23065ed58:;
				}
				if ((_23065e75e_e.len() > 0LL)) {
					_16013_s+=_23065e75e_e;
					_16113_last_char=_23065e75e_e[(_23065e75e_e.len() - 1LL)];
				}
			}
			_iter_next_23065ce11:;
			++it;
			goto _iter_begin_23065ce11;
		}
		_iter_end_23065ce11:;
	}
	if ((_16013_s.len() == 0LL)) {
		return jule::Str();
	}
	return _208c74b6a_clean(_16013_s);
}



inline jule::Str _208c74b6a_clean(jule::Str _10818_path) {
	jule::Str _1099_original_path = _10818_path;
	jule::I32 _1109_vol_len = _22ed9e664_volume_name_len(_10818_path);
	(_10818_path).mut_slice(_1109_vol_len);
	if (_10818_path.empty()) {
		if (((_1109_vol_len > 1LL) && _22ed9de49_is_path_sep(_1099_original_path[0LL])) && _22ed9de49_is_path_sep(_1099_original_path[1LL])) {
			return _208c74e45_from_slash(_1099_original_path);
		}
		return (_1099_original_path + jule::Str(".", 1));
	}
	jule::Bool _1199_rooted = _22ed9de49_is_path_sep(_10818_path[0LL]);
	jule::I32 _1269_n = _10818_path.len();
	_208c7450a_LazyBuff _12713_out = _208c7450a_LazyBuff(_10818_path,jule::Slice<jule::U8>(),jule::I32(),_1099_original_path,_1109_vol_len);
	jule::I32 _13214_r = 0LL;
	jule::I32 _13221_dotdot = 0LL;
	std::tie(_13214_r,_13221_dotdot) = std::make_tuple(0LL,0LL);
	if (_1199_rooted) {
		_208c74890_append(&_12713_out, 92LLU);
		std::tie(_13214_r,_13221_dotdot) = std::make_tuple(1LL,1LL);
	}
	while (_13214_r < _1269_n) {
		{
			{
				
				if (_22ed9de49_is_path_sep(_10818_path[_13214_r])) {
					_case_begin_23066d1c9:;
					{
						(_13214_r)++;
					}
				}
				else if ((_10818_path[_13214_r] == '.') && (((_13214_r + 1LL) == _1269_n) || _22ed9de49_is_path_sep(_10818_path[(_13214_r + 1LL)]))) {
					_case_begin_23066de99:;
					{
						(_13214_r)++;
					}
				}
				else if (((_10818_path[_13214_r] == '.') && (_10818_path[(_13214_r + 1LL)] == '.')) && (((_13214_r + 2LL) == _1269_n) || _22ed9de49_is_path_sep(_10818_path[(_13214_r + 2LL)]))) {
					_case_begin_23066e010:;
					{
						_13214_r+=2LL;
						{
							
							if (_12713_out._field_w > _13221_dotdot) {
								_case_begin_230672783:;
								{
									(_12713_out._field_w)--;
									while ((_12713_out._field_w > _13221_dotdot) && (!(_22ed9de49_is_path_sep(static_cast<jule::U8>(_208c7472a_index(&_12713_out, _12713_out._field_w)))))) {
										{
											(_12713_out._field_w)--;
										}
									_iter_next_230673234:;
									}
									_iter_end_230673234:;
								}
							}
							else if ((!(_1199_rooted))) {
								_case_begin_23067284e:;
								{
									if ((_12713_out._field_w > 0LL)) {
										_208c74890_append(&_12713_out, 92LLU);
									}
									_208c74890_append(&_12713_out, '.');
									_208c74890_append(&_12713_out, '.');
									_13221_dotdot=_12713_out._field_w;
								}
							}
							_match_end_2306726ea:;
						}
					}
				}
				else {
					_case_begin_230668757:;
					{
						if ((_1199_rooted && (_12713_out._field_w != 1LL)) || ((!(_1199_rooted)) && (_12713_out._field_w != 0LL))) {
							_208c74890_append(&_12713_out, 92LLU);
						}
						if (((true && (_12713_out._field_w == 0LL)) && (_12713_out._field_vol_len == 0LL)) && (_13214_r != 0LL)) {
							jule::I32 _17525_i = _13214_r;
							for (; (_17525_i < _1269_n) && (!(_22ed9de49_is_path_sep(_10818_path[_17525_i]))); (_17525_i)++) {
								{
									if (_10818_path[_17525_i] == ':') {
										_208c74890_append(&_12713_out, '.');
										_208c74890_append(&_12713_out, 92LLU);
										goto _iter_end_23066a429;
									}
								}
							_iter_next_23066a429:;
							}
							_iter_end_23066a429:;
						}
						for (; (_13214_r < _1269_n) && (!(_22ed9de49_is_path_sep(_10818_path[_13214_r]))); (_13214_r)++) {
							{
								_208c74890_append(&_12713_out, _10818_path[_13214_r]);
							}
						_iter_next_23066a209:;
						}
						_iter_end_23066a209:;
					}
				}
				_match_end_2306641e2:;
			}
		}
	_iter_next_2306685c0:;
	}
	_iter_end_2306685c0:;
	if ((_12713_out._field_w == 0LL)) {
		_208c74890_append(&_12713_out, '.');
	}
	return _208c74e45_from_slash(_208c74a05_string(&_12713_out));
}



inline jule::Str _208c74e45_from_slash(jule::Str _21119_path) {
	if (92LL == '/') {
		return _21119_path;
	}
	return _208c732b7_replace(_21119_path,jule::Str("/", 1),static_cast<jule::Str>(92LL),-1LL);
}



inline jule::Str _208c750aa_join(jule::Slice<jule::Str> _22513_elem) {
	return _22eda0368___join(_22513_elem);
}



inline jule::Str _208c75220_ext(jule::Str _23012_path) {
	jule::I32 _23113_i = (_23012_path.len() - 1LL);
	for (; (_23113_i >= 0LL) && (!(_22ed9de49_is_path_sep(_23012_path[_23113_i]))); (_23113_i)--) {
		{
			if (_23012_path[_23113_i] == '.') {
				return _23012_path.slice(_23113_i);
			}
		}
	_iter_next_230678789:;
	}
	_iter_end_230678789:;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _208c75385_abs(jule::Str _24512_path) {
	jule::Str _24610_abs_path;
	jule::Bool _24620_ok;
	std::tie(_24610_abs_path,_24620_ok) = _22eda005a___abs(_24512_path);
	return std::make_tuple(_24610_abs_path,_24620_ok);
}



inline jule::Str _208c754ea_base(jule::Str _25417_path) {
	if (_25417_path.empty()) {
		return jule::Str(".", 1);
	}
	while ((_25417_path.len() > 0LL) && _22ed9de49_is_path_sep(_25417_path[(_25417_path.len() - 1LL)])) {
		{
			(_25417_path).mut_slice(0LL,_25417_path.len() - 1LL);
		}
	_iter_next_23067b9ac:;
	}
	_iter_end_23067b9ac:;
	(_25417_path).mut_slice(_208c757c5_volume_name(_25417_path).len());
	jule::I32 _26513_i = (_25417_path.len() - 1LL);
	while ((_26513_i >= 0LL) && (!(_22ed9de49_is_path_sep(_25417_path[_26513_i])))) {
		{
			(_26513_i)--;
		}
	_iter_next_23067c45d:;
	}
	_iter_end_23067c45d:;
	if ((_26513_i >= 0LL)) {
		(_25417_path).mut_slice(_26513_i + 1LL);
	}
	if (_25417_path.empty()) {
		return static_cast<jule::Str>(92LL);
	}
	return _25417_path;
}



inline jule::Str _208c75660_dir(jule::Str _28512_path) {
	jule::Str _2869_vol = _208c757c5_volume_name(_28512_path);
	jule::I32 _28713_i = (_28512_path.len() - 1LL);
	while ((_28713_i >= static_cast<jule::I32>(static_cast<jule::I32>(_2869_vol.len()))) && (!(_22ed9de49_is_path_sep(_28512_path[_28713_i])))) {
		{
			(_28713_i)--;
		}
	_iter_next_23067ee55:;
	}
	_iter_end_23067ee55:;
	jule::Str _2919_dir = _208c74b6a_clean(_28512_path.slice(_2869_vol.len(),(_28713_i + 1LL)));
	if ((_2919_dir == jule::Str(".", 1)) && (_2869_vol.len() > 2LL)) {
		return _2869_vol;
	}
	return _2869_vol + _2919_dir;
}



inline jule::Str _208c757c5_volume_name(jule::Str _30320_path) {
	return _208c74e45_from_slash(_30320_path.slice(0LL,_22ed9e664_volume_name_len(_30320_path)));
}



inline jule::I32 _2223dddc0_get_last_fs_error(void) {
	jule::I32 _729_err = _222450690_get_last_errno();
	{
		auto &_match_expr{ _729_err };
		
		if (_match_expr == 13LL) {
			_case_begin_200d6c8e7:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_200d6c9a2:;
			{
				return static_cast<jule::I32>(1LL);
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_200d6ca18:;
			{
				return static_cast<jule::I32>(2LL);
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_200d6c3db:;
			{
				return static_cast<jule::I32>(3LL);
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_200d6c452:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_200d6c4b8:;
			{
				return static_cast<jule::I32>(5LL);
			}
		}
		else if (_match_expr == 132LL) {
			_case_begin_200d6c52e:;
			{
				return static_cast<jule::I32>(6LL);
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_200d6cc38:;
			{
				return static_cast<jule::I32>(7LL);
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_200d6cc9e:;
			{
				return static_cast<jule::I32>(8LL);
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_200d6cd15:;
			{
				return static_cast<jule::I32>(9LL);
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_200d6cd7b:;
			{
				return static_cast<jule::I32>(10LL);
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_200d6cde2:;
			{
				return static_cast<jule::I32>(11LL);
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_200d6ce69:;
			{
				return static_cast<jule::I32>(12LL);
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_200d6cee1:;
			{
				return static_cast<jule::I32>(13LL);
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_200d6d068:;
			{
				return static_cast<jule::I32>(14LL);
			}
		}
		else if (_match_expr == 124LL) {
			_case_begin_200d6d0e0:;
			{
				return static_cast<jule::I32>(15LL);
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_200d6d167:;
			{
				return static_cast<jule::I32>(16LL);
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_200d6d1de:;
			{
				return static_cast<jule::I32>(17LL);
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_200d6d266:;
			{
				return static_cast<jule::I32>(18LL);
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_200d6d2dd:;
			{
				return static_cast<jule::I32>(19LL);
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_200d6d365:;
			{
				return static_cast<jule::I32>(20LL);
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_200d6d3dc:;
			{
				return static_cast<jule::I32>(21LL);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_200d6d464:;
			{
				return static_cast<jule::I32>(22LL);
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_200d6d4db:;
			{
				return static_cast<jule::I32>(23LL);
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_200d6d563:;
			{
				return static_cast<jule::I32>(24LL);
			}
		}
		else if (_match_expr == 119LL) {
			_case_begin_200d6d5da:;
			{
				return static_cast<jule::I32>(25LL);
			}
		}
		else if (_match_expr == 104LL) {
			_case_begin_200d6d662:;
			{
				return static_cast<jule::I32>(26LL);
			}
		}
		else if (_match_expr == 41LL) {
			_case_begin_200d6d6d9:;
			{
				return static_cast<jule::I32>(27LL);
			}
		}
		else {
			_case_begin_200d6c375:;
			{
				return static_cast<jule::I32>(1LL);
			}
		}
		_match_end_200d6c320:;
	}
}



inline jule::Bool _2225400cb_is_console_handle(jule::U32 _11822_handle) {
	return ((_11822_handle == _2224805b0_STDIN) || (_11822_handle == _2224875d9_STDOUT)) || (_11822_handle == _222487a3a_STDERR);
}



inline jule::I32 _208e1c791_get_last_process_error(void) {
	jule::I32 _429_err = _222450690_get_last_errno();
	{
		auto &_match_expr{ _429_err };
		
		if (_match_expr == 13LL) {
			_case_begin_200d83b1c:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_200d83b83:;
			{
				return static_cast<jule::I32>(1LL);
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_200d83545:;
			{
				return static_cast<jule::I32>(2LL);
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_200d835ab:;
			{
				return static_cast<jule::I32>(3LL);
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_200d83622:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_200d83688:;
			{
				return static_cast<jule::I32>(5LL);
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_200d83853:;
			{
				return static_cast<jule::I32>(6LL);
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_200d838b9:;
			{
				return static_cast<jule::I32>(7LL);
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_200d83930:;
			{
				return static_cast<jule::I32>(9LL);
			}
		}
		else if (_match_expr == 121LL) {
			_case_begin_200d83996:;
			{
				return static_cast<jule::I32>(10LL);
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_200d83a0c:;
			{
				return static_cast<jule::I32>(11LL);
			}
		}
		else {
			_case_begin_200d834ce:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		_match_end_200d83479:;
	}
}



inline jule::Slice<wchar_t*> _208e324dc_ustr_slice_to_wcstr_slice(jule::Slice<jule::Slice<jule::U16>> _1830_us) {
	jule::Slice<wchar_t*> _1913_wcs = jule::Slice<wchar_t*>::alloc(0LL,static_cast<jule::I32>((_1830_us.len() + 1LL)));
	{
		auto &expr = _1830_us;
		auto it = expr.begin();
		_iter_begin_200d87538:;
		if (it != expr.end()) {
			jule::I32 _200d87a77_i = it - expr.begin();
			{
				_1913_wcs = jule::alloc_for_append(_1913_wcs,1);_1913_wcs.__push(((wchar_t*)((&(_1830_us[_200d87a77_i][0LL])))));
			}
			_iter_next_200d87538:;
			++it;
			_200d87a77_i++;
			goto _iter_begin_200d87538;
		}
		_iter_end_200d87538:;
	}
	_1913_wcs = jule::alloc_for_append(_1913_wcs,1);_1913_wcs.__push(nullptr);
	return _1913_wcs;
}



inline jule::Slice<jule::Slice<jule::U16>> _208e327ea_str_slice_to_ustr_slice(jule::Slice<jule::Str> _2728_s) {
	jule::Slice<jule::Slice<jule::U16>> _2813_us = jule::Slice<jule::Slice<jule::U16>>::alloc(0LL,static_cast<jule::I32>(_2728_s.len()));
	{
		auto &expr = _2728_s;
		auto it = expr.begin();
		_iter_begin_200d896c2:;
		if (it != expr.end()) {
			jule::Str &_200d892c6_p = *it;
			{
				_2813_us = jule::alloc_for_append(_2813_us,1);_2813_us.__push(_2224846d5_utf16_from_str(_200d892c6_p));
			}
			_iter_next_200d896c2:;
			++it;
			goto _iter_begin_200d896c2;
		}
		_iter_end_200d896c2:;
	}
	return _2813_us;
}



inline jule::I32 _208e32bc4_execvp(jule::Str _3511_file,jule::Slice<jule::Str> _3522_argv) {
	jule::Slice<jule::U16> _369_utf16_file = _2224846d5_utf16_from_str(_3511_file);
	jule::Slice<jule::Slice<jule::U16>> _379_ucargv = _208e327ea_str_slice_to_ustr_slice(_3522_argv);
	jule::Slice<wchar_t*> _389_cargv = _208e324dc_ustr_slice_to_wcstr_slice(_379_ucargv);
	return static_cast<jule::I32>(_wspawnvp(P_NOWAIT,((wchar_t*)((&(_369_utf16_file[0LL])))),(&(_389_cargv[0LL]))));
}



inline jule::I32 _208e3318b_execve(jule::Str _4211_file,jule::Slice<jule::Str> _4222_argv,jule::Slice<jule::Str> _4235_env) {
	jule::Slice<jule::Slice<jule::U16>> _439_ucargv = _208e327ea_str_slice_to_ustr_slice(_4222_argv);
	jule::Slice<wchar_t*> _449_cargv = _208e324dc_ustr_slice_to_wcstr_slice(_439_ucargv);
	jule::Slice<jule::Slice<jule::U16>> _459_ucenv = _208e327ea_str_slice_to_ustr_slice(_4235_env);
	jule::Slice<wchar_t*> _469_cenv = _208e324dc_ustr_slice_to_wcstr_slice(_459_ucenv);
	jule::Slice<jule::U16> _479_utf16_file = _2224846d5_utf16_from_str(_4211_file);
	return static_cast<jule::I32>(_wspawnvpe(P_NOWAIT,((wchar_t*)((&(_479_utf16_file[0LL])))),(&(_449_cargv[0LL])),(&(_469_cenv[0LL]))));
}



inline void _208e33ed3_exit(jule::I32 _1213_code) {
	_2224a92ed_exit(_1213_code);
}



inline jule::Str _208e34214_executable(void) {
	return jule::executable();
}



inline jule::Bool _208dd1348_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[(_2627_p.len() - 1LL)] == '>');
}



inline jule::Bool _208dd1634_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _208dd0ed5_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_200dbcdcb:;
		if (it != expr.end()) {
			jule::Str &_200dbe54d_valid_ext = *it;
			{
				if (_3128_ext == _200dbe54d_valid_ext) {
					return true;
				}
			}
			_iter_next_200dbcdcb:;
			++it;
			goto _iter_begin_200dbcdcb;
		}
		_iter_end_200dbcdcb:;
	}
	return false;
}



inline jule::Bool _208dd1942_is_valid_cpp_ext(jule::Str _4225_ext) {
	if ((_4225_ext == jule::Str(".c", 2))) {
		return true;
	}
	{
		auto &expr = _208dd1106_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_200dc041c:;
		if (it != expr.end()) {
			jule::Str &_200dbe85b_e = *it;
			{
				if (_4225_ext == _200dbe85b_e) {
					return true;
				}
			}
			_iter_next_200dc041c:;
			++it;
			goto _iter_begin_200dc041c;
		}
		_iter_end_200dc041c:;
	}
	{
		auto &expr = _208dd1227_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_200dc1198:;
		if (it != expr.end()) {
			jule::Str &_200dc0b59_e = *it;
			{
				if (_4225_ext == _200dc0b59_e) {
					return true;
				}
			}
			_iter_next_200dc1198:;
			++it;
			goto _iter_begin_200dc1198;
		}
		_iter_end_200dc1198:;
	}
	return false;
}



inline jule::Str _208de2722_logf(jule::Str _28713_fmt,jule::Slice<jule::Any> _28726_args) {
	return _208de32b1_apply_fmt(_28713_fmt,_28726_args);
}



inline jule::Str _208de2a74_arg_to_str(jule::Any _29115_arg) {
	{
		auto &_match_expr{ _29115_arg };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_200dc1dad:;
			{
				return _29115_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_200dc28e7:;
			{
				return static_cast<jule::Str>(_29115_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_200dc295d:;
			{
				return static_cast<jule::Str>(_29115_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_200dbcb56:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_200dbcb01:;
	}
}



inline jule::I32 _208de2d82_find_next_fmt(jule::Str _30018_fmt) {
	{
		auto &expr = _30018_fmt;
		auto it = expr.begin();
		_iter_begin_200dc34ca:;
		if (it != expr.end()) {
			jule::I32 _200dc30ce_i = it - expr.begin();
			jule::U8 &_200dc3bb2_b = *it;
			{
				if (_200dc3bb2_b == '@') {
					return _200dc30ce_i;
				}
			}
			_iter_next_200dc34ca:;
			++it;
			_200dc30ce_i++;
			goto _iter_begin_200dc34ca;
		}
		_iter_end_200dc34ca:;
	}
	return -1LL;
}



inline jule::Str _208de32b1_apply_fmt(jule::Str _30918_fmt,jule::Slice<jule::Any> _30928_args) {
	jule::Str _31013_s = jule::Str();
	{
		auto &expr = _30928_args;
		auto it = expr.begin();
		_iter_begin_200dc4d28:;
		if (it != expr.end()) {
			jule::Any &_200dc4dc2_arg = *it;
			{
				jule::I32 _31313_i = _208de2d82_find_next_fmt(_30918_fmt);
				if ((_31313_i == -1LL)) {
					goto _iter_end_200dc4d28;
				}
				_31013_s+=_30918_fmt.slice(0LL,_31313_i);
				_31013_s+=_208de2a74_arg_to_str(_200dc4dc2_arg);
				(_30918_fmt).mut_slice(_31313_i + 1LL);
			}
			_iter_next_200dc4d28:;
			++it;
			goto _iter_begin_200dc4d28;
		}
		_iter_end_200dc4d28:;
	}
	_31013_s+=_30918_fmt;
	return _31013_s;
}



inline jule::Bool _208de44c1_is_top_directive(jule::Str _2825_directive) {
	return (_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5));
}



inline jule::Bool _208de623c_is_windows(jule::Str _5119_os) {
	return (_5119_os == jule::Str("windows", 7));
}



inline jule::Bool _208de658e_is_darwin(jule::Str _5318_os) {
	return (_5318_os == jule::Str("darwin", 6));
}



inline jule::Bool _208de689c_is_linux(jule::Str _5517_os) {
	return (_5517_os == jule::Str("linux", 5));
}



inline jule::Bool _208de6bee_is_i386(jule::Str _5716_arch) {
	return (_5716_arch == jule::Str("i386", 4));
}



inline jule::Bool _208de700c_is_amd64(jule::Str _5917_arch) {
	return (_5917_arch == jule::Str("amd64", 5));
}



inline jule::Bool _208de731a_is_arm64(jule::Str _6117_arch) {
	return (_6117_arch == jule::Str("arm64", 5));
}



inline jule::Bool _208de7628_is_unix(jule::Str _6316_os) {
	return _208de658e_is_darwin(_6316_os) || _208de689c_is_linux(_6316_os);
}



inline jule::Bool _208de79be_is_32bit(jule::Str _6517_arch) {
	return _208de6bee_is_i386(_6517_arch);
}



inline jule::Bool _208de7ccc_is_64bit(jule::Str _6717_arch) {
	return _208de700c_is_amd64(_6717_arch) || _208de731a_is_arm64(_6717_arch);
}



inline void _208e05724_init(void) {
	jule::Str _2513_path = _208e34214_executable();
	if (_2513_path.empty()) {
		jule::panic(jule::Str("std::jule::build: executable file cannot found", 46) + jule::Str("\nlocation: std/jule/build/env.jule:27:9"));;
	}
	jule::Str _309_pwd = ({
		auto except = _22edc458a_working_dir();
		(except.ok()) ? (except.result) : ({{
			jule::panic(jule::Str("std::jule::build: working directory path cannot found", 53) + jule::Str("\nlocation: std/jule/build/env.jule:31:9"));;
			return;
			return;
		} jule::Str();});
	});
	jule::Str _359_path_exec = _208c75660_dir(_2513_path);
	_2513_path=_208c750aa_join(jule::Slice<jule::Str>({_359_path_exec,jule::Str("..", 2)}));
	{
		_208e06813_PATH_WD=_309_pwd;
		_208e0446a_PATH_EXEC=_359_path_exec;
		_208e02831_PATH_STDLIB=_208c750aa_join(jule::Slice<jule::Str>({_2513_path,jule::Str("std", 3)}));
		_208e073b3_PATH_API=_208c750aa_join(jule::Slice<jule::Str>({_208e0446a_PATH_EXEC,jule::Str("..", 2)}));
		_208e073b3_PATH_API=_208c750aa_join(jule::Slice<jule::Str>({_208e073b3_PATH_API,jule::Str("api", 3)}));
		_208e073b3_PATH_API=_208c750aa_join(jule::Slice<jule::Str>({_208e073b3_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Bool _1e02c2621_is_unary_op(jule::Str _31820_kind) {
	{
		auto &expr = _1e01c4204_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_200e753c3:;
		if (it != expr.end()) {
			jule::Str &_200e75417_op = *it;
			{
				if (_31820_kind == _200e75417_op) {
					return true;
				}
			}
			_iter_next_200e753c3:;
			++it;
			goto _iter_begin_200e753c3;
		}
		_iter_end_200e753c3:;
	}
	return false;
}



inline jule::Bool _1e02c2973_is_bin_op(jule::Str _32918_kind) {
	{
		auto &expr = _1e01c4325_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_200e75e0c:;
		if (it != expr.end()) {
			jule::Str &_200e75604_op = *it;
			{
				if (_32918_kind == _200e75604_op) {
					return true;
				}
			}
			_iter_next_200e75e0c:;
			++it;
			goto _iter_begin_200e75e0c;
		}
		_iter_end_200e75e0c:;
	}
	return false;
}



inline jule::Bool _1e02c30d3_is_str(jule::Str _35115_k) {
	return (!(_35115_k.empty())) && ((_35115_k[0LL] == '\"') || _1e02c33e1_is_raw_str(_35115_k));
}



inline jule::Bool _1e02c33e1_is_raw_str(jule::Str _35319_k) {
	return (!(_35319_k.empty())) && (_35319_k[0LL] == '`');
}



inline jule::Bool _1e02c36ee_is_rune(jule::Str _35616_k) {
	return (!(_35616_k.empty())) && (_35616_k[0LL] == '\'');
}



inline jule::Bool _1e02c3da3_is_bool(jule::Str _36016_k) {
	return (_36016_k == jule::Str("true", 4)) || (_36016_k == jule::Str("false", 5));
}



inline jule::Bool _1e02c41b1_is_float(jule::Str _36317_k) {
	if (_208be3dd6_has_prefix(_36317_k,jule::Str("0x", 2))) {
		return _208c72edc_contains_any(_36317_k,jule::Str(".pP", 3));
	}
	return _208c72edc_contains_any(_36317_k,jule::Str(".eE", 3));
}



inline jule::Bool _1e02c44be_is_num(jule::Str _37115_k) {
	if (_37115_k.empty()) {
		return false;
	}
	jule::U8 _3769_b = _37115_k[0LL];
	return (_3769_b == '.') || (('0' <= _3769_b) && (_3769_b <= '9'));
}



inline jule::Bool _1e02c4ada_is_ignore_ident(jule::Str _38624_ident) {
	return (_38624_ident == jule::Str("_", 1));
}



inline jule::Bool _1e02c4de8_is_anon_ident(jule::Str _38822_ident) {
	return (_38822_ident == jule::Str("<anonymous>", 11));
}



inline jule::Bool _1e02c5514_is_space(jule::I32 _40217_r) {
	{
		auto &expr = _1e01c4dc5_SPACES;
		auto it = expr.begin();
		_iter_begin_200e8107c:;
		if (it != expr.end()) {
			jule::I32 &_200e80774_cr = *it;
			{
				if (_40217_r == _200e80774_cr) {
					return true;
				}
			}
			_iter_next_200e8107c:;
			++it;
			goto _iter_begin_200e8107c;
		}
		_iter_end_200e8107c:;
	}
	return false;
}



inline jule::Bool _1e02c5943_is_letter(jule::I32 _41318_r) {
	return _208c2d86b_is_letter(_41318_r);
}



inline jule::Bool _1e02c605e_is_decimal(jule::U8 _43519_b) {
	return ('0' <= _43519_b) && (_43519_b <= '9');
}



inline jule::Bool _1e02c636c_is_binary(jule::U8 _43718_b) {
	return (_43718_b == '0') || (_43718_b == '1');
}



inline jule::Bool _1e02c667a_is_octal(jule::U8 _43917_b) {
	return ('0' <= _43917_b) && (_43917_b <= '7');
}



inline jule::Bool _1e02c6988_is_hex(jule::U8 _44215_b) {
	{
		
		if (('0' <= _44215_b) && (_44215_b <= '9')) {
			_case_begin_200e85e94:;
			{
				return true;
			}
		}
		else if (('a' <= _44215_b) && (_44215_b <= 'f')) {
			_case_begin_200e86082:;
			{
				return true;
			}
		}
		else if (('A' <= _44215_b) && (_44215_b <= 'F')) {
			_case_begin_200e860e8:;
			{
				return true;
			}
		}
		else {
			_case_begin_200e85845:;
			{
				return false;
			}
		}
		_match_end_200e83c0b:;
	}
}



inline jule::Bool _1e02c6c96_is_assign(jule::U32 _45418_id) {
	return ((((((_45418_id == static_cast<jule::U32>(2LLU)) || (_45418_id == static_cast<jule::U32>(31LLU))) || (_45418_id == static_cast<jule::U32>(34LLU))) || (_45418_id == static_cast<jule::U32>(20LLU))) || (_45418_id == static_cast<jule::U32>(28LLU))) || (_45418_id == static_cast<jule::U32>(3LLU))) || (_45418_id == static_cast<jule::U32>(7LLU));
}



inline jule::Bool _1e02c70a4_is_postfix_op(jule::Str _46722_kind) {
	{
		auto &expr = _1e01c4567_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_200e87924:;
		if (it != expr.end()) {
			jule::Str &_200e89b24_op = *it;
			{
				if (_46722_kind == _200e89b24_op) {
					return true;
				}
			}
			_iter_next_200e87924:;
			++it;
			goto _iter_begin_200e87924;
		}
		_iter_end_200e87924:;
	}
	return false;
}



inline jule::Bool _1e02c73b2_is_assign_op(jule::Str _47821_kind) {
	if (_1e02c70a4_is_postfix_op(_47821_kind)) {
		return true;
	}
	{
		auto &expr = _1e02b9629_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_200e89d44:;
		if (it != expr.end()) {
			jule::Str &_200e89d88_op = *it;
			{
				if (_47821_kind == _200e89d88_op) {
					return true;
				}
			}
			_iter_next_200e89d44:;
			++it;
			goto _iter_begin_200e89d44;
		}
		_iter_end_200e89d44:;
	}
	return false;
}



inline jule::Ptr<_1e02c7e51_File> _1e02c97e3_new_file_set(jule::Str _6321_path) {
	return jule::new_ptr<_1e02c7e51_File>(_1e02c7e51_File(_6321_path,jule::Slice<jule::U8>(),jule::Slice<_1e02c1d07_Token>()));
}



inline _208de2238_Log _1e02cb31c_make_err(jule::I32 _11113_row,jule::I32 _11123_col,jule::Ptr<_1e02c7e51_File>& _11134_f,jule::Str _11144_fmt,jule::Slice<jule::Any> _11157_args) {
	return _208de2238_Log(static_cast<jule::I32>(1LL),_11113_row,_11123_col,_11134_f.get()._field_path,_208de2722_logf(_11144_fmt,_11157_args),jule::Str(),jule::Str());
}



inline jule::Bool _1e02cb74b_bytes_has_prefix(jule::Slice<jule::U8>& _12122_bytes,jule::Str _12137_prefix) {
	if (_12122_bytes.len() < static_cast<jule::I32>(static_cast<jule::I32>(_12137_prefix.len()))) {
		return false;
	}
	{
		auto &expr = _12137_prefix;
		auto it = expr.begin();
		_iter_begin_200e8d8b4:;
		if (it != expr.end()) {
			jule::I32 _200e8dd26_i = it - expr.begin();
			{
				if (_12122_bytes[_200e8dd26_i] != _12137_prefix[_200e8dd26_i]) {
					return false;
				}
			}
			_iter_next_200e8d8b4:;
			++it;
			_200e8dd26_i++;
			goto _iter_begin_200e8d8b4;
		}
		_iter_end_200e8d8b4:;
	}
	return true;
}



inline jule::Str _1e02cbb36_float_fmt_e(jule::Slice<jule::U8>& _13317_txt,jule::I32 _13334_i) {
	jule::Str _13344_lit = jule::Str();
	(_13334_i)++;
	if (_13334_i >= static_cast<jule::I32>(static_cast<jule::I32>(_13317_txt.len()))) {
		return _13344_lit;
	}
	jule::U8 _13913_b = _13317_txt[_13334_i];
	if (_13913_b == '_') {
		return _13344_lit;
	}
	if ((_13913_b == '+') || (_13913_b == '-')) {
		(_13334_i)++;
		if (_13334_i >= static_cast<jule::I32>(static_cast<jule::I32>(_13317_txt.len()))) {
			return _13344_lit;
		}
		if (_13317_txt[_13334_i] == '_') {
			return _13344_lit;
		}
	}
	jule::I32 _1539_first = _13334_i;
	for (; _13334_i < static_cast<jule::I32>(static_cast<jule::I32>(_13317_txt.len())); (_13334_i)++) {
		{
			_13913_b=_13317_txt[_13334_i];
			if ((_13913_b != '_') && (!(_1e02c605e_is_decimal(_13913_b)))) {
				goto _iter_end_200e91de5;
			}
		}
	_iter_next_200e91de5:;
	}
	_iter_end_200e91de5:;
	if (_13334_i == _1539_first) {
		_13344_lit = jule::Str();
		return _13344_lit;
	}
	_13344_lit = static_cast<jule::Str>(_13317_txt.slice(0LL,_13334_i));
	return _13344_lit;
}



inline jule::Str _1e02cc065_float_fmt_p(jule::Slice<jule::U8>& _16717_txt,jule::I32 _16730_i) {
	return _1e02cbb36_float_fmt_e(_16717_txt,_16730_i);
}



inline jule::Str _1e02cc450_float_fmt_dotnp(jule::Slice<jule::U8>& _17121_txt,jule::I32 _17138_i) {
	if (_17121_txt[_17138_i] != '.') {
		return jule::Str();
	}
	(_17138_i)++;
	_julec_label_loop:;
	for (; _17138_i < static_cast<jule::I32>(static_cast<jule::I32>(_17121_txt.len())); (_17138_i)++) {
		{
			jule::U8 _17913_b = _17121_txt[_17138_i];
			{
				
				if (_17913_b == '_' || _1e02c605e_is_decimal(_17913_b)) {
					_case_begin_200e95ee8:;
					{
						goto _iter_next_200e9514b;
					}
				}
				else if (_1e02ce089_is_float_fmt_p(_17913_b,_17138_i)) {
					_case_begin_200e9605e:;
					{
						return _1e02cc065_float_fmt_p(_17121_txt,_17138_i);
					}
				}
				else {
					_case_begin_200e95e4e:;
					{
						goto _iter_end_200e9514b;
					}
				}
				_match_end_200e95de9:;
			}
		}
	_iter_next_200e9514b:;
	}
	_iter_end_200e9514b:;
	return jule::Str();
}



inline jule::Str _1e02cc83a_float_fmt_dotfp(jule::Slice<jule::U8>& _19421_txt,jule::I32 _19438_i) {
	_19438_i+=2LL;
	return _1e02cbb36_float_fmt_e(_19421_txt,_19438_i);
}



inline jule::Str _1e02ccc25_float_fmt_dotp(jule::Slice<jule::U8>& _19920_txt,jule::I32 _19937_i) {
	(_19937_i)++;
	return _1e02cbb36_float_fmt_e(_19920_txt,_19937_i);
}



inline jule::Str _1e02cd198_float_num(jule::Slice<jule::U8>& _20415_txt,jule::I32 _20432_i) {
	jule::Str _20442_lit = jule::Str();
	(_20432_i)++;
	if (_20432_i >= static_cast<jule::I32>(static_cast<jule::I32>(_20415_txt.len()))) {
		_20442_lit = static_cast<jule::Str>(_20415_txt);
		return _20442_lit;
	}
	if (_20415_txt[_20432_i] == '_') {
		(_20432_i)--;
		_20442_lit = static_cast<jule::Str>(_20415_txt.slice(0LL,_20432_i));
		return _20442_lit;
	}
	for (; _20432_i < static_cast<jule::I32>(static_cast<jule::I32>(_20415_txt.len())); (_20432_i)++) {
		{
			jule::U8 _21413_b = _20415_txt[_20432_i];
			if ((_20432_i > 1LL) && ((_21413_b == 'e') || (_21413_b == 'E'))) {
				_20442_lit = _1e02cbb36_float_fmt_e(_20415_txt,_20432_i);
				return _20442_lit;
			}
			if ((_21413_b != '_') && (!(_1e02c605e_is_decimal(_21413_b)))) {
				goto _iter_end_200e9a3c6;
			}
		}
	_iter_next_200e9a3c6:;
	}
	_iter_end_200e9a3c6:;
	if ((_20432_i == 1LL)) {
		return _20442_lit;
	}
	_20442_lit = static_cast<jule::Str>(_20415_txt.slice(0LL,_20432_i));
	return _20442_lit;
}



inline jule::Str _1e02cd4a6_common_num(jule::Slice<jule::U8>& _22916_txt) {
	jule::Str _22931_lit = jule::Str();
	jule::I32 _23013_i = 0LL;
	_julec_label_loop:;
	for (; _23013_i < static_cast<jule::I32>(static_cast<jule::I32>(_22916_txt.len())); (_23013_i)++) {
		{
			jule::U8 _23313_b = _22916_txt[_23013_i];
			{
				
				if (_23313_b == '.') {
					_case_begin_200e9e210:;
					{
						_22931_lit = _1e02cd198_float_num(_22916_txt,_23013_i);
						return _22931_lit;
					}
				}
				else if (_23313_b == '_') {
					_case_begin_200e9e287:;
					{
						goto _iter_next_200e9d63d;
					}
				}
				else if (_1e02cdb9e_is_float_fmt_e(_23313_b,_23013_i)) {
					_case_begin_200e9e30e:;
					{
						_22931_lit = _1e02cbb36_float_fmt_e(_22916_txt,_23013_i);
						return _22931_lit;
					}
				}
				else if ((!(_1e02c605e_is_decimal(_23313_b)))) {
					_case_begin_200e9e386:;
					{
						goto _iter_end_200e9d63d;
					}
				}
				_match_end_200e9e122:;
			}
		}
	_iter_next_200e9d63d:;
	}
	_iter_end_200e9d63d:;
	if ((_23013_i == 0LL)) {
		return _22931_lit;
	}
	_22931_lit = static_cast<jule::Str>(_22916_txt.slice(0LL,_23013_i));
	return _22931_lit;
}



inline jule::Str _1e02cd7b4_binary_num(jule::Slice<jule::U8>& _25216_txt) {
	jule::Str _25231_lit = jule::Str();
	if ((!(_1e02cb74b_bytes_has_prefix(_25216_txt,jule::Str("0b", 2))))) {
		_25231_lit = jule::Str();
		return _25231_lit;
	}
	if ((_25216_txt.len() < 2LL)) {
		return _25231_lit;
	}
	
	jule::I32 _26113_i = 2LL;
	for (; _26113_i < static_cast<jule::I32>(static_cast<jule::I32>(_25216_txt.len())); (_26113_i)++) {
		{
			if ((_25216_txt[_26113_i] != '_') && (!(_1e02c636c_is_binary(_25216_txt[_26113_i])))) {
				goto _iter_end_200ea3203;
			}
		}
	_iter_next_200ea3203:;
	}
	_iter_end_200ea3203:;
	if ((_26113_i == 2LL)) {
		return _25231_lit;
	}
	_25231_lit = static_cast<jule::Str>(_25216_txt.slice(0LL,_26113_i));
	return _25231_lit;
}



inline jule::Bool _1e02cdb9e_is_float_fmt_e(jule::U8 _27419_b,jule::I32 _27428_i) {
	return (_27428_i > 0LL) && ((_27419_b == 'e') || (_27419_b == 'E'));
}



inline jule::Bool _1e02ce089_is_float_fmt_p(jule::U8 _27819_b,jule::I32 _27828_i) {
	return (_27828_i > 0LL) && ((_27819_b == 'p') || (_27819_b == 'P'));
}



inline jule::Bool _1e02ce474_is_float_fmt_dotnp(jule::Slice<jule::U8>& _28224_txt,jule::I32 _28241_i) {
	if (_28224_txt[_28241_i] != '.') {
		return false;
	}
	(_28241_i)++;
	_julec_label_loop:;
	for (; _28241_i < static_cast<jule::I32>(static_cast<jule::I32>(_28224_txt.len())); (_28241_i)++) {
		{
			jule::U8 _28913_b = _28224_txt[_28241_i];
			{
				
				if (_28913_b == '_' || _1e02c605e_is_decimal(_28913_b)) {
					_case_begin_200ea83a1:;
					{
						goto _iter_next_200ea7625;
					}
				}
				else if (_1e02ce089_is_float_fmt_p(_28913_b,_28241_i)) {
					_case_begin_200ea8417:;
					{
						return true;
					}
				}
				else {
					_case_begin_200ea8307:;
					{
						goto _iter_end_200ea7625;
					}
				}
				_match_end_200ea82a2:;
			}
		}
	_iter_next_200ea7625:;
	}
	_iter_end_200ea7625:;
	return false;
}



inline jule::Bool _1e02ce85e_is_float_fmt_dotp(jule::Slice<jule::U8>& _30323_txt,jule::I32 _30336_i) {
	{
		
		if ((_30323_txt.len() < 3LL)) {
			_case_begin_200eaa529:;
			{
				goto _case_begin_200eaa617;
			}
		}
		else if (_30323_txt[_30336_i] != '.') {
			_case_begin_200eaa617:;
			{
				goto _case_begin_200eaa67d;
			}
		}
		else if ((_30323_txt[(_30336_i + 1LL)] != 'p') && (_30323_txt[(_30336_i + 1LL)] != 'P')) {
			_case_begin_200eaa67d:;
			{
				return false;
			}
		}
		else {
			_case_begin_200ea9dca:;
			{
				return true;
			}
		}
		_match_end_200ea9d31:;
	}
}



inline jule::Bool _1e02cec49_is_float_fmt_dotfp(jule::Slice<jule::U8>& _31624_txt,jule::I32 _31637_i) {
	{
		
		if ((_31624_txt.len() < 4LL)) {
			_case_begin_200eaca9d:;
			{
				goto _case_begin_200eacb7a;
			}
		}
		else if (_31624_txt[_31637_i] != '.') {
			_case_begin_200eacb7a:;
			{
				goto _case_begin_200eacbe1;
			}
		}
		else if ((_31624_txt[(_31637_i + 1LL)] != 'f') && (_31624_txt[(_31637_i + 1LL)] != 'F')) {
			_case_begin_200eacbe1:;
			{
				goto _case_begin_200eac8a0;
			}
		}
		else if ((_31624_txt[(_31637_i + 2LL)] != 'p') && (_31624_txt[(_31637_i + 1LL)] != 'P')) {
			_case_begin_200eac8a0:;
			{
				return false;
			}
		}
		else {
			_case_begin_200eac1c9:;
			{
				return true;
			}
		}
		_match_end_200eac130:;
	}
}



inline jule::Str _1e02d0178_octal_num(jule::Slice<jule::U8>& _33115_txt) {
	jule::Str _33130_lit = jule::Str();
	if (_33115_txt[0LL] != '0') {
		_33130_lit = jule::Str();
		return _33130_lit;
	}
	if ((_33115_txt.len() < 2LL)) {
		return _33130_lit;
	}
	jule::I32 _33913_octal_start = 1LL;
	jule::Bool _34113_o = false;
	if (_33115_txt[1LL] == 'o') {
		if ((_33115_txt.len() < 3LL)) {
			return _33130_lit;
		}
		(_33913_octal_start)++;
		_34113_o=true;
	}
	jule::I32 _35013_i = _33913_octal_start;
	for (; _35013_i < static_cast<jule::I32>(static_cast<jule::I32>(_33115_txt.len())); (_35013_i)++) {
		{
			jule::U8 _35213_b = _33115_txt[_35013_i];
			if (_35213_b == '.') {
				if (_34113_o) {
					_33130_lit = jule::Str();
					return _33130_lit;
				}
				_33130_lit = _1e02cd198_float_num(_33115_txt,_35013_i);
				return _33130_lit;
			}
			if (_1e02cdb9e_is_float_fmt_e(_35213_b,_35013_i)) {
				_33130_lit = _1e02cbb36_float_fmt_e(_33115_txt,_35013_i);
				return _33130_lit;
			}
			if ((_35213_b != '_') && (!(_1e02c667a_is_octal(_35213_b)))) {
				goto _iter_end_200eb71e5;
			}
		}
	_iter_next_200eb71e5:;
	}
	_iter_end_200eb71e5:;
	if (_35013_i == _33913_octal_start) {
		return _33130_lit;
	}
	_33130_lit = static_cast<jule::Str>(_33115_txt.slice(0LL,_35013_i));
	return _33130_lit;
}



inline jule::Str _1e02d0486_hex_num(jule::Slice<jule::U8>& _37313_txt) {
	jule::Str _37328_lit = jule::Str();
	if ((_37313_txt.len() < 3LL)) {
		return _37328_lit;
	}
	if ((_37313_txt[0LL] != '0') || ((_37313_txt[1LL] != 'x') && (_37313_txt[1LL] != 'X'))) {
		return _37328_lit;
	}
	
	jule::I32 _38213_i = 2LL;
	_julec_label_loop:;
	for (; _38213_i < static_cast<jule::I32>(static_cast<jule::I32>(_37313_txt.len())); (_38213_i)++) {
		{
			jule::U8 _38513_b = _37313_txt[_38213_i];
			{
				
				if (_1e02ce85e_is_float_fmt_dotp(_37313_txt,_38213_i)) {
					_case_begin_200ebdb69:;
					{
						_37328_lit = _1e02ccc25_float_fmt_dotp(_37313_txt,_38213_i);
						return _37328_lit;
					}
				}
				else if (_1e02cec49_is_float_fmt_dotfp(_37313_txt,_38213_i)) {
					_case_begin_200ebdbe1:;
					{
						_37328_lit = _1e02cc83a_float_fmt_dotfp(_37313_txt,_38213_i);
						return _37328_lit;
					}
				}
				else if (_1e02ce089_is_float_fmt_p(_38513_b,_38213_i)) {
					_case_begin_200ebdc68:;
					{
						_37328_lit = _1e02cc065_float_fmt_p(_37313_txt,_38213_i);
						return _37328_lit;
					}
				}
				else if (_1e02ce474_is_float_fmt_dotnp(_37313_txt,_38213_i)) {
					_case_begin_200ebdce0:;
					{
						_37328_lit = _1e02cc450_float_fmt_dotnp(_37313_txt,_38213_i);
						return _37328_lit;
					}
				}
				else if ((_38513_b != '_') && (!(_1e02c6988_is_hex(_38513_b)))) {
					_case_begin_200ebdd67:;
					{
						goto _iter_end_200ebd0ca;
					}
				}
				_match_end_200ebda6a:;
			}
		}
	_iter_next_200ebd0ca:;
	}
	_iter_end_200ebd0ca:;
	if ((_38213_i == 2LL)) {
		return _37328_lit;
	}
	_37328_lit = static_cast<jule::Str>(_37313_txt.slice(0LL,_38213_i));
	return _37328_lit;
}



inline jule::Str _1e02d0871_hex_escape(jule::Slice<jule::U8>& _40616_txt,jule::I32 _40629_n) {
	jule::Str _40639_seq = jule::Str();
	if (_40616_txt.len() < _40629_n) {
		return _40639_seq;
	}
	
	jule::I32 _41213_i = 2LL;
	for (; _41213_i < _40629_n; (_41213_i)++) {
		{
			if ((!(_1e02c6988_is_hex(_40616_txt[_41213_i])))) {
				return _40639_seq;
			}
		}
	_iter_next_200ec1d26:;
	}
	_iter_end_200ec1d26:;
	_40639_seq=static_cast<jule::Str>(_40616_txt.slice(0LL,_40629_n));
	return _40639_seq;
}



inline jule::Str _1e02d0bc3_big_unicode_point_escape(jule::Slice<jule::U8>& _42430_txt) {
	return _1e02d0871_hex_escape(_42430_txt,10LL);
}



inline jule::Str _1e02d1014_little_unicode_point_escape(jule::Slice<jule::U8>& _42933_txt) {
	return _1e02d0871_hex_escape(_42933_txt,6LL);
}



inline jule::Str _1e02d1311_hex_byte_escape(jule::Slice<jule::U8>& _43421_txt) {
	return _1e02d0871_hex_escape(_43421_txt,4LL);
}



inline jule::Str _1e02d161e_byte_escape(jule::Slice<jule::U8>& _43917_txt) {
	jule::Str _43932_seq = jule::Str();
	if ((_43917_txt.len() < 4LL)) {
		return _43932_seq;
	}
	if (((!(_1e02c667a_is_octal(_43917_txt[1LL]))) || (!(_1e02c667a_is_octal(_43917_txt[2LL])))) || (!(_1e02c667a_is_octal(_43917_txt[3LL])))) {
		return _43932_seq;
	}
	_43932_seq = static_cast<jule::Str>(_43917_txt.slice(0LL,4LL));
	return _43932_seq;
}



inline jule::Slice<_208de2238_Log> _1e02d713b_lex(jule::Ptr<_1e02c7e51_File> _83216_f,jule::I32 _83226_mode) {
	if ((_83216_f == nullptr)) {
		return nullptr;
	}
	_1e02d1eb0_Lex _83713_lex = _1e02d1eb0_Lex(_83226_mode,jule::Slice<_1e02c1d07_Token>(),_83216_f,0LL,jule::I32(),-1LL,jule::Slice<_208de2238_Log>());
	_1e02d53d1_new_line(&_83713_lex);
	_1e02d2c6e_lex(&_83713_lex);
	if ((_83713_lex._field_errors.len() > 0LL)) {
		return _83713_lex._field_errors;
	}
	_83216_f.get()._field_tokens=_83713_lex._field_tokens;
	return nullptr;
}



inline jule::Bool _1e0140505_find_module_file(jule::Slice<jule::Ptr<_2223e8825_DirEntry>>& _1226_dirents) {
	{
		auto &expr = _1226_dirents;
		auto it = expr.begin();
		_iter_begin_2010199c8:;
		if (it != expr.end()) {
			jule::Ptr<_2223e8825_DirEntry> &_201019a1c_d = *it;
			{
				if ((!(_22243c6d2_is_dir(_201019a1c_d.get()._field_stat.ptr()))) && (_201019a1c_d.get()._field_name == jule::Str("jule.mod", 8))) {
					return true;
				}
			}
			_iter_next_2010199c8:;
			++it;
			goto _iter_begin_2010199c8;
		}
		_iter_end_2010199c8:;
	}
	return false;
}



inline jule::Str _1e014231a_find_module_file_deep(jule::Str _2434_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_2223e8825_DirEntry>> _2617_dirents = ({
				auto except = static__208c7593a_read(_2434_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_201019ea1;
					goto _iter_end_201019ea1;
				} jule::Slice<jule::Ptr<_2223e8825_DirEntry>>();});
			});
			jule::Bool _3013_exist = _1e0140505_find_module_file(_2617_dirents);
			if (_3013_exist) {
				return _2434_path;
			}
			jule::I32 _3513_n = _2434_path.len();
			_2434_path=_208c75660_dir(_2434_path);
			if (_2434_path.len() == _3513_n) {
				goto _iter_end_201019ea1;
			}
		}
	_iter_next_201019ea1:;
	}
	_iter_end_201019ea1:;
	return jule::Str();
}



inline jule::Slice<_208de2238_Log> _1e014363a_check_module_file(jule::Str _4626_path) {
	jule::Slice<jule::U8> _479_bytes = ({
		auto except = static__222422563_read(_208c750aa_join(jule::Slice<jule::Str>({_4626_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_208de2238_Log>({_208de2238_Log(static_cast<jule::I32>(0LL),jule::I32(),jule::I32(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
			return jule::Slice<_208de2238_Log>({_208de2238_Log(static_cast<jule::I32>(0LL),jule::I32(),jule::I32(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
		} jule::Slice<jule::U8>();});
	});
	jule::Str _549_s = _208c74230_trim(static_cast<jule::Str>(_479_bytes),jule::Str(" \n\r\t\v", 5));
	if ((_549_s.len() != 0LL)) {
		return jule::Slice<_208de2238_Log>({_208de2238_Log(static_cast<jule::I32>(0LL),jule::I32(),jule::I32(),jule::Str(),jule::Str("module file has syntax error(s)", 31),jule::Str(),jule::Str())});
	}
	return nullptr;
}



inline jule::Ptr<_1ed0e56de_FileInfo> _1ed0e5ba6_parse_file(jule::Ptr<_1e02c7e51_File> _2323_f) {
	if ((_2323_f == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1ed0e56de_FileInfo> _2813_finf = jule::new_ptr<_1ed0e56de_FileInfo>(_1ed0e56de_FileInfo());
	std::tie(_2813_finf.get()._field_ast,_2813_finf.get()._field_errors) = _1ed0e6080_parse_fileset(_2323_f);
	if ((_2813_finf.get()._field_errors.len() > 0LL)) {
		_2813_finf.get()._field_ast=nullptr;
	}
	return _2813_finf;
}



inline std::tuple<jule::Ptr<_1e01bcb7b_Ast>,jule::Slice<_208de2238_Log>> _1ed0e6080_parse_fileset(jule::Ptr<_1e02c7e51_File> _6022_f) {
	jule::Ptr<_1ed11a88a_Parser> _6113_p = jule::new_ptr<_1ed11a88a_Parser>(_1ed11a88a_Parser());
	_1ed12d01d_parse(_6113_p, _6022_f);
	return std::make_tuple(_6113_p.get()._field_ast,_6113_p.get()._field_errors);
}



inline jule::Ptr<_1e02d9ddb_ScopeTree> _1ed0e6bda_new_scope(void) {
	return jule::new_ptr<_1e02d9ddb_ScopeTree>();
}



inline std::tuple<jule::Bool,jule::Bool> _1ed0e6dd8_is_st(_1e02c1d07_Token _4710_current,_1e02c1d07_Token _4726_prev) {
	jule::Bool _4741_ok = jule::Bool();
	jule::Bool _4751_terminated = jule::Bool();
	_4741_ok=(_4710_current._field_id == static_cast<jule::U32>(5LLU)) || (_4726_prev._field_row < _4710_current._field_row);
	_4751_terminated=_4710_current._field_id == static_cast<jule::U32>(5LLU);
	return std::make_tuple(_4741_ok,_4751_terminated);
}



inline jule::Bool _1ed0e7317_prev_is_incomplete_expr(jule::Slice<_1e02c1d07_Token>& _5329_tokens,jule::I32& _5347_i) {
	if ((_5347_i > 1LL) && (_5329_tokens[(_5347_i - 2LL)]._field_id == static_cast<jule::U32>(23LLU))) {
		return false;
	}
	{
		_1e02c1d07_Token* _5913_prev = (&(_5329_tokens[(_5347_i - 1LL)]));
		return (_5913_prev->_field_id == static_cast<jule::U32>(20LLU)) || (((_5913_prev->_field_id == static_cast<jule::U32>(7LLU)) && _1e02c2973_is_bin_op(_5913_prev->_field_kind)) && (_5913_prev->_field_row < _5329_tokens[_5347_i]._field_row));
	}
}



inline std::tuple<jule::I32,jule::Bool> _1ed0e7735_next_st_pos(jule::Slice<_1e02c1d07_Token>& _6817_tokens,jule::I32 _6834_start) {
	jule::I32 _6913_brace_n = 0LL;
	jule::I32 _7013_i = _6834_start;
	for (; _7013_i < static_cast<jule::I32>(static_cast<jule::I32>(_6817_tokens.len())); (_7013_i)++) {
		{
			jule::Bool _7217_ok = false;
			jule::Bool _7317_terminated = false;
			_1e02c1d07_Token _7413_tok = _6817_tokens[_7013_i];
			{
				auto &_match_expr{ _7413_tok._field_id };
				
				if (_match_expr == static_cast<jule::U32>(3LLU)) {
					_case_begin_201415eb2:;
					{
						{
							auto &_match_expr{ _7413_tok._field_kind };
							
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_20141847b:;
								{
									if ((_6913_brace_n == 0LL) && (_7013_i > _6834_start)) {
										if ((!(_1ed0e7317_prev_is_incomplete_expr(_6817_tokens,_7013_i)))) {
											std::tie(_7217_ok,_7317_terminated) = _1ed0e6dd8_is_st(_7413_tok,_6817_tokens[(_7013_i - 1LL)]);
											if (_7217_ok) {
												goto _julec_label_return;
											}
										}
									}
									(_6913_brace_n)++;
								}
							}
							else {
								_case_begin_2014167ed:;
								{
									(_6913_brace_n)--;
									if ((_6913_brace_n == 0LL) && ((_7013_i + 1LL) < static_cast<jule::I32>(static_cast<jule::I32>(_6817_tokens.len())))) {
										std::tie(_7217_ok,_7317_terminated) = _1ed0e6dd8_is_st(_6817_tokens[(_7013_i + 1LL)],_7413_tok);
										if (_7217_ok) {
											(_7013_i)++;
											goto _julec_label_return;
										}
									}
								}
							}
							_match_end_201416a40:;
						}
						goto _iter_next_201414c19;
					}
				}
				_match_end_2014161d2:;
			}
			if ((_6913_brace_n != 0LL)) {
				goto _iter_next_201414c19;
			}
			if (_7013_i > _6834_start) {
				if (_1ed0e7317_prev_is_incomplete_expr(_6817_tokens,_7013_i)) {
					goto _iter_next_201414c19;
				}
				std::tie(_7217_ok,_7317_terminated) = _1ed0e6dd8_is_st(_7413_tok,_6817_tokens[(_7013_i - 1LL)]);
			} else {
				std::tie(_7217_ok,_7317_terminated) = _1ed0e6dd8_is_st(_7413_tok,_7413_tok);
			}
			if ((!(_7217_ok))) {
				goto _iter_next_201414c19;
			}
			_julec_label_return:;
			if (_7317_terminated) {
				(_7013_i)++;
			}
			return std::make_tuple(_7013_i,_7317_terminated);
		}
	_iter_next_201414c19:;
	}
	_iter_end_201414c19:;
	return std::make_tuple(_7013_i,false);
}



inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::Bool> _1ed0e7b20_skip_st(jule::I32& _13017_i,jule::Slice<_1e02c1d07_Token> _13029_tokens) {
	jule::I32 _1319_start = _13017_i;
	jule::Bool _13213_terminated = false;
	std::tie(_13017_i,_13213_terminated) = _1ed0e7735_next_st_pos(_13029_tokens,_1319_start);
	jule::Slice<_1e02c1d07_Token> _13413_st_tokens = _13029_tokens.slice(_1319_start,_13017_i);
	if (_13213_terminated) {
		if ((_13413_st_tokens.len() == 1LL)) {
			std::tie(_13413_st_tokens,_13213_terminated) = _1ed0e7b20_skip_st(_13017_i,_13029_tokens);
			return std::make_tuple(_13413_st_tokens,_13213_terminated);
		}
		_13413_st_tokens=_13413_st_tokens.slice(0LL,(_13413_st_tokens.len() - 1LL));
	}
	return std::make_tuple(_13413_st_tokens,_13213_terminated);
}



inline jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _1ed0e83c3_split_stmts(jule::Slice<_1e02c1d07_Token>& _15221_tokens) {
	jule::Slice<jule::Ptr<_1ed0e7eb6_Stmt>> _15313_stmts = nullptr;
	jule::I32 _15413_pos = 0LL;
	while (_15413_pos < static_cast<jule::I32>(static_cast<jule::I32>(_15221_tokens.len()))) {
		{
			jule::Slice<_1e02c1d07_Token> _15618_stmt;
			jule::Bool _15624_terminated;
			std::tie(_15618_stmt,_15624_terminated) = _1ed0e7b20_skip_st(_15413_pos,_15221_tokens);
			_15313_stmts = jule::alloc_for_append(_15313_stmts,1);_15313_stmts.__push(jule::new_ptr<_1ed0e7eb6_Stmt>(_1ed0e7eb6_Stmt(_15618_stmt,_15624_terminated)));
		}
	_iter_next_201421b27:;
	}
	_iter_end_201421b27:;
	return _15313_stmts;
}



inline jule::Ptr<_1ed107888_CallData> _1ed107c62_get_call_data(jule::Slice<_1e02c1d07_Token>& _4423_tokens) {
	jule::Ptr<_1ed107888_CallData> _4513_data = jule::new_ptr<_1ed107888_CallData>(_1ed107888_CallData());
	std::tie(_4513_data.get()._field_expr_tokens,_4513_data.get()._field_args_tokens) = _1ed118d0b_range_last(_4423_tokens);
	if ((_4513_data.get()._field_expr_tokens.len() == 0LL)) {
		return _4513_data;
	}
	_1e02c1d07_Token _529_token = _4513_data.get()._field_expr_tokens[(_4513_data.get()._field_expr_tokens.len() - 1LL)];
	if ((_529_token._field_id == static_cast<jule::U32>(3LLU)) && (_529_token._field_kind == jule::Str("]", 1))) {
		std::tie(_4513_data.get()._field_expr_tokens,_4513_data.get()._field_generics_tokens) = _1ed118d0b_range_last(_4513_data.get()._field_expr_tokens);
	}
	return _4513_data;
}



inline jule::Slice<_1e02c1d07_Token> _1ed1080b4_get_block_expr(jule::Slice<_1e02c1d07_Token>& _6024_tokens) {
	jule::I32 _6113_brace_n = 0LL;
	jule::I32 _6213_skip_to_next_brace_close = 0LL;
	{
		auto &expr = _6024_tokens;
		auto it = expr.begin();
		_iter_begin_201427215:;
		if (it != expr.end()) {
			jule::I32 _2014272ae_i = it - expr.begin();
			_1e02c1d07_Token _201427534_tok = *it;
			{
				{
					auto &_match_expr{ _201427534_tok._field_id };
					
					if (_match_expr == static_cast<jule::U32>(16LLU) || _match_expr == static_cast<jule::U32>(17LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
						_case_begin_2014279da:;
						{
							(_6213_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == static_cast<jule::U32>(3LLU)) {
						_case_begin_201427d5e:;
						{
							{
								auto &_match_expr{ _201427534_tok._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_2014292a0:;
									{
										if ((_6113_brace_n > 0LL) || (_6213_skip_to_next_brace_close > 0LL)) {
											if ((_6213_skip_to_next_brace_close > 0LL)) {
												(_6213_skip_to_next_brace_close)--;
											}
											(_6113_brace_n)++;
											goto _match_end_201428e09;
										}
										return _6024_tokens.slice(0LL,_2014272ae_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_201429514:;
									{
										(_6113_brace_n)++;
									}
								}
								else {
									_case_begin_201428c3e:;
									{
										(_6113_brace_n)--;
									}
								}
								_match_end_201428e09:;
							}
						}
					}
					_match_end_201427d09:;
				}
			}
			_iter_next_201427215:;
			++it;
			_2014272ae_i++;
			goto _iter_begin_201427215;
		}
		_iter_end_201427215:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::Slice<_1e02c1d07_Token>> _1ed1083c2_split_colon(jule::Slice<_1e02c1d07_Token>& _9421_tokens) {
	jule::I32 _9513_range_n = 0LL;
	{
		auto &expr = _9421_tokens;
		auto it = expr.begin();
		_iter_begin_20142a68b:;
		if (it != expr.end()) {
			jule::I32 _20142a735_i = it - expr.begin();
			_1e02c1d07_Token _201427798_token = *it;
			{
				{
					auto &_match_expr{ _201427798_token._field_id };
					
					if (_match_expr == static_cast<jule::U32>(3LLU)) {
						_case_begin_20142b0a4:;
						{
							{
								auto &_match_expr{ _201427798_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_20142c11b:;
									{
										(_9513_range_n)++;
										goto _iter_next_20142a68b;
									}
								}
								else {
									_case_begin_20142ba11:;
									{
										(_9513_range_n)--;
									}
								}
								_match_end_20142bc53:;
							}
						}
					}
					else if (_match_expr == static_cast<jule::U32>(11LLU)) {
						_case_begin_20142b3c3:;
						{
							if ((_9513_range_n < 1LL)) {
								jule::Slice<_1e02c1d07_Token> _11225_l = _9421_tokens.slice(0LL,_20142a735_i);
								jule::Slice<_1e02c1d07_Token> _11325_r = _9421_tokens.slice((_20142a735_i + 1LL));
								return std::make_tuple(_11225_l,_11325_r);
							}
						}
					}
					_match_end_20142b36d:;
				}
			}
			_iter_next_20142a68b:;
			++it;
			_20142a735_i++;
			goto _iter_begin_20142a68b;
		}
		_iter_end_20142a68b:;
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::I32 _1ed108724_find_lowest_prec_op(jule::Slice<_1e02c1d07_Token>& _12325_tokens) {
	jule::U8 _12813_prec = 255LLU;
	jule::I32 _12913_prec_pos = -1LL;
	jule::I32 _13113_brace_n = 0LL;
	jule::Bool _13213_skip_to_next_brace_open = false;
	{
		auto &expr = _12325_tokens;
		auto it = expr.begin();
		_iter_begin_20142e838:;
		if (it != expr.end()) {
			jule::I32 _20142e8d2_i = it - expr.begin();
			_1e02c1d07_Token &_20142eb57_token = *it;
			{
				{
					
					if (_20142eb57_token._field_id == static_cast<jule::U32>(3LLU)) {
						_case_begin_201430361:;
						{
							{
								auto &_match_expr{ _20142eb57_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_201431681:;
									{
										_13213_skip_to_next_brace_open=false;
										goto _case_begin_2014318a1;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_2014318a1:;
									{
										(_13113_brace_n)++;
									}
								}
								else {
									_case_begin_201431120:;
									{
										(_13113_brace_n)--;
									}
								}
								_match_end_2014312eb:;
							}
							goto _iter_next_20142e838;
						}
					}
					else if (_13213_skip_to_next_brace_open) {
						_case_begin_2014303d8:;
						{
							goto _iter_next_20142e838;
						}
					}
					else if (_20142eb57_token._field_id == static_cast<jule::U32>(16LLU)) {
						_case_begin_201430460:;
						{
							_13213_skip_to_next_brace_open=true;
							goto _iter_next_20142e838;
						}
					}
					else if ((_20142e8d2_i == 0LL)) {
						_case_begin_2014304d7:;
						{
							goto _iter_next_20142e838;
						}
					}
					else if (_20142eb57_token._field_id != static_cast<jule::U32>(7LLU)) {
						_case_begin_20143055e:;
						{
							goto _iter_next_20142e838;
						}
					}
					else if ((_13113_brace_n > 0LL)) {
						_case_begin_2014305d6:;
						{
							goto _iter_next_20142e838;
						}
					}
					_match_end_20143020c:;
				}
				_1e02c1d07_Token _16013_left = _12325_tokens[(_20142e8d2_i - 1LL)];
				if ((_16013_left._field_id == static_cast<jule::U32>(7LLU)) || (_16013_left._field_id == static_cast<jule::U32>(11LLU))) {
					goto _iter_next_20142e838;
				}
				if (((_20142e8d2_i > 1LL) && (_16013_left._field_id == static_cast<jule::U32>(3LLU))) && (_16013_left._field_kind == jule::Str("]", 1))) {
					_1e02c1d07_Token _16817_lleft = _12325_tokens[(_20142e8d2_i - 2LL)];
					if ((_16817_lleft._field_id == static_cast<jule::U32>(3LLU)) && (_16817_lleft._field_kind == jule::Str("[", 1))) {
						if ((_20142eb57_token._field_kind == jule::Str("&", 1)) || (_20142eb57_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_20142e838;
						}
					}
				}
				jule::U8 _17713_p = _1e02c2258_prec(&_20142eb57_token);
				if ((_17713_p != 0LLU) && (_17713_p <= _12813_prec)) {
					_12813_prec=_17713_p;
					_12913_prec_pos=_20142e8d2_i;
				}
			}
			_iter_next_20142e838:;
			++it;
			_20142e8d2_i++;
			goto _iter_begin_20142e838;
		}
		_iter_end_20142e838:;
	}
	return _12913_prec_pos;
}



inline jule::Ptr<_1e0182a64_IdentExpr> _1ed108a32_build_ident_expr(_1e02c1d07_Token& _18726_token) {
	return jule::new_ptr<_1e0182a64_IdentExpr>(_1e0182a64_IdentExpr(_18726_token,_18726_token._field_kind,false));
}



inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::I32> _1ed108d40_get_range_expr_tokens(jule::Slice<_1e02c1d07_Token>& _19531_tokens) {
	jule::I32 _19613_range_n = 0LL;
	jule::I32 _19713_i = (_19531_tokens.len() - 1LL);
	for (; (_19713_i >= 0LL); (_19713_i)--) {
		{
			_1e02c1d07_Token _19913_tok = _19531_tokens[_19713_i];
			if (_19913_tok._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _19913_tok._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_20143a5e1:;
						{
							(_19613_range_n)++;
						}
					}
					else {
						_case_begin_201439e81:;
						{
							(_19613_range_n)--;
						}
					}
					_match_end_20143a2b1:;
				}
			}
			if ((_19613_range_n == 0LL)) {
				return std::make_tuple(_19531_tokens.slice(0LL,_19713_i),_19613_range_n);
			}
		}
	_iter_next_201438611:;
	}
	_iter_end_201438611:;
	return std::make_tuple(nullptr,_19613_range_n);
}



inline jule::Bool _1ed116b61_check_assign_tokens(jule::Slice<_1e02c1d07_Token>& _1625_tokens) {
	if ((_1625_tokens.len() == 0LL) || (!(_1e02c6c96_is_assign(_1625_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::I32 _2013_brace_n = 0LL;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_20143c9bc:;
		if (it != expr.end()) {
			_1e02c1d07_Token &_20143ca66_t = *it;
			{
				if (_20143ca66_t._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _20143ca66_t._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_20143da78:;
							{
								(_2013_brace_n)++;
							}
						}
						else {
							_case_begin_20143d418:;
							{
								(_2013_brace_n)--;
							}
						}
						_match_end_20143d748:;
					}
				}
				if ((_2013_brace_n < 0LL)) {
					return false;
				} else if ((_2013_brace_n > 0LL)) {
					goto _iter_next_20143c9bc;
				} else if ((_20143ca66_t._field_id == static_cast<jule::U32>(7LLU)) && _1e02c73b2_is_assign_op(_20143ca66_t._field_kind)) {
					return true;
				}
			}
			_iter_next_20143c9bc:;
			++it;
			goto _iter_begin_20143c9bc;
		}
		_iter_end_20143c9bc:;
	}
	return false;
}



inline _208de2238_Log _1ed118448_make_err(jule::I32 _4913_row,jule::I32 _4923_col,jule::Ptr<_1e02c7e51_File>& _4934_f,jule::Str _4944_fmt,jule::Slice<jule::Any> _4957_args) {
	return _208de2238_Log(static_cast<jule::I32>(1LL),_4913_row,_4923_col,_4934_f.get()._field_path,_208de2722_logf(_4944_fmt,_4957_args),jule::Str(),jule::Str());
}



inline jule::Slice<_1e02c1d07_Token> _1ed1189ed_range(jule::I32& _6815_i,jule::Str _6823_open,jule::Str _6840_close,jule::Slice<_1e02c1d07_Token>& _6863_tokens) {
	if (_6815_i >= static_cast<jule::I32>(static_cast<jule::I32>(_6863_tokens.len()))) {
		return nullptr;
	}
	_1e02c1d07_Token _739_tok = _6863_tokens[_6815_i];
	if ((_739_tok._field_id != static_cast<jule::U32>(3LLU)) || (_739_tok._field_kind != _6823_open)) {
		return nullptr;
	}
	(_6815_i)++;
	jule::I32 _7913_range_n = 1LL;
	jule::I32 _809_start = _6815_i;
	for (; (_7913_range_n != 0LL) && (_6815_i < static_cast<jule::I32>(static_cast<jule::I32>(_6863_tokens.len()))); (_6815_i)++) {
		{
			_1e02c1d07_Token _8213_token = _6863_tokens[_6815_i];
			if (_8213_token._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _8213_token._field_kind };
					
					if (_match_expr == _6823_open) {
						_case_begin_2014448d6:;
						{
							(_7913_range_n)++;
						}
					}
					else if (_match_expr == _6840_close) {
						_case_begin_201444c5a:;
						{
							(_7913_range_n)--;
						}
					}
					_match_end_201444c05:;
				}
			}
		}
	_iter_next_201443b27:;
	}
	_iter_end_201443b27:;
	return _6863_tokens.slice(_809_start,(_6815_i - 1LL));
}



inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::Slice<_1e02c1d07_Token>> _1ed118d0b_range_last(jule::Slice<_1e02c1d07_Token>& _10120_tokens) {
	jule::Slice<_1e02c1d07_Token> _10139_cutted = jule::Slice<_1e02c1d07_Token>();
	jule::Slice<_1e02c1d07_Token> _10156_cut = jule::Slice<_1e02c1d07_Token>();
	if ((_10120_tokens.len() == 0LL)) {
		_10139_cutted = _10120_tokens;
		_10156_cut = nullptr;
		return std::make_tuple(_10139_cutted,_10156_cut);
	} else if (_10120_tokens[(_10120_tokens.len() - 1LL)]._field_id != static_cast<jule::U32>(3LLU)) {
		_10139_cutted = _10120_tokens;
		_10156_cut = nullptr;
		return std::make_tuple(_10139_cutted,_10156_cut);
	}
	jule::I32 _10813_brace_n = 0LL;
	jule::I32 _10913_i = (_10120_tokens.len() - 1LL);
	for (; (_10913_i >= 0LL); (_10913_i)--) {
		{
			_1e02c1d07_Token _11113_token = _10120_tokens[_10913_i];
			if (_11113_token._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _11113_token._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_20144959a:;
						{
							(_10813_brace_n)++;
							goto _iter_next_201445c7d;
						}
					}
					else {
						_case_begin_201448e3a:;
						{
							(_10813_brace_n)--;
						}
					}
					_match_end_20144926a:;
				}
			}
			if ((_10813_brace_n == 0LL)) {
				_10139_cutted = _10120_tokens.slice(0LL,_10913_i);
				_10156_cut = _10120_tokens.slice(_10913_i);
				return std::make_tuple(_10139_cutted,_10156_cut);
			}
		}
	_iter_next_201445c7d:;
	}
	_iter_end_201445c7d:;
	_10139_cutted = _10120_tokens;
	_10156_cut = nullptr;
	return std::make_tuple(_10139_cutted,_10156_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_1e02c1d07_Token>>,jule::Slice<_208de2238_Log>> _1ed119317_parts(jule::Slice<_1e02c1d07_Token>& _13915_tokens,jule::U32 _13932_id,jule::Bool _13945_expr_must) {
	if ((_13915_tokens.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_1e02c1d07_Token>> _14413_parts = nullptr;
	jule::Slice<_208de2238_Log> _14513_errors = nullptr;
	jule::I32 _14713_range_n = 0LL;
	jule::I32 _14813_last = 0LL;
	{
		auto &expr = _13915_tokens;
		auto it = expr.begin();
		_iter_begin_20144c603:;
		if (it != expr.end()) {
			jule::I32 _20144c7ce_i = it - expr.begin();
			_1e02c1d07_Token _20144ca21_token = *it;
			{
				if (_20144ca21_token._field_id == static_cast<jule::U32>(3LLU)) {
					{
						auto &_match_expr{ _20144ca21_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_20144d9de:;
							{
								(_14713_range_n)++;
								goto _iter_next_20144c603;
							}
						}
						else {
							_case_begin_20144d37e:;
							{
								(_14713_range_n)--;
							}
						}
						_match_end_20144d6ae:;
					}
				}
				if ((_14713_range_n > 0LL)) {
					goto _iter_next_20144c603;
				}
				if (_20144ca21_token._field_id == _13932_id) {
					if (_13945_expr_must && ((_20144c7ce_i - _14813_last) <= 0LL)) {
						_208de2238_Log _16821_err = _1ed118448_make_err(_20144ca21_token._field_row,_20144ca21_token._field_column,_20144ca21_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
						_14513_errors = jule::alloc_for_append(_14513_errors,1);_14513_errors.__push(_16821_err);
					}
					_14413_parts = jule::alloc_for_append(_14413_parts,1);_14413_parts.__push(_13915_tokens.slice(_14813_last,_20144c7ce_i));
					_14813_last=static_cast<jule::I32>((_20144c7ce_i + 1LL));
				}
			}
			_iter_next_20144c603:;
			++it;
			_20144c7ce_i++;
			goto _iter_begin_20144c603;
		}
		_iter_end_20144c603:;
	}
	if (_14813_last < static_cast<jule::I32>(static_cast<jule::I32>(_13915_tokens.len()))) {
		_14413_parts = jule::alloc_for_append(_14413_parts,1);_14413_parts.__push(_13915_tokens.slice(_14813_last));
	} else if ((!(_13945_expr_must))) {
		_14413_parts = jule::alloc_for_append(_14413_parts,1);_14413_parts.__push(jule::Slice<_1e02c1d07_Token>());
	}
	return std::make_tuple(_14413_parts,_14513_errors);
}



inline jule::Str _1ed119669_get_close_kind_of_brace(jule::Str _18528_left) {
	{
		auto &_match_expr{ _18528_left };
		
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_201452dbc:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_201452e33:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_201453032:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_20144c6be:;
			{
				return jule::Str();
			}
		}
		_match_end_201451be0:;
	}
}



inline _208de2238_Log _1ed119b20_compiler_err(_1e02c1d07_Token& _19418_token,jule::Str& _19433_fmt,jule::Slice<jule::Any> _19446_args) {
	return _208de2238_Log(static_cast<jule::I32>(1LL),_19418_token._field_row,_19418_token._field_column,_19418_token._field_file.get()._field_path,_208de2722_logf(_19433_fmt,_19446_args),_1e02c942a_get_row(_19418_token._field_file.ptr(), _19418_token._field_row),jule::Str());
}



inline void _1ed11a04e_push_suggestion(_208de2238_Log* _20531_log,jule::Str _20542_fmt,jule::Slice<jule::Any> _20555_args) {
	_20531_log->_field_suggestion=_208de2722_logf(_20542_fmt,_20555_args);
}



inline jule::Str _1ed11a3e5_tokstoa(jule::Slice<_1e02c1d07_Token>& _20913_tokens) {
	jule::Str _21013_s = jule::Str();
	{
		auto &expr = _20913_tokens;
		auto it = expr.begin();
		_iter_begin_20145651e:;
		if (it != expr.end()) {
			_1e02c1d07_Token &_2014565b8_token = *it;
			{
				_21013_s+=_2014565b8_token._field_kind;
			}
			_iter_next_20145651e:;
			++it;
			goto _iter_begin_20145651e;
		}
		_iter_end_20145651e:;
	}
	return _21013_s;
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed12e22d_build_void_type(void) {
	return jule::new_ptr<_1e01c3db3_TypeDecl>();
}



inline jule::Ptr<_1e01c3db3_TypeDecl> _1ed12e481_build_prim_type(_1e02c1d07_Token _2224_t) {
	return jule::new_ptr<_1e01c3db3_TypeDecl>(_1e01c3db3_TypeDecl(_2224_t,jule::Any(jule::Any(jule::new_ptr<_1e029b2ba_IdentTypeDecl>(_1e029b2ba_IdentTypeDecl(_2224_t,_2224_t._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_1e01c3db3_TypeDecl>>()))))));
}



inline std::tuple<jule::Slice<_1e02c1d07_Token>,jule::I32> _1ed12e86b_split_map_range(jule::Slice<_1e02c1d07_Token>& _3525_tokens,jule::I32& _3547_i) {
	jule::Slice<_1e02c1d07_Token> _3557_range_tokens = jule::Slice<_1e02c1d07_Token>();
	jule::I32 _3580_colon = jule::I32();
	_3580_colon=-1LL;
	jule::I32 _3713_range_n = 0LL;
	jule::I32 _389_start = _3547_i;
	for (; _3547_i < static_cast<jule::I32>(static_cast<jule::I32>(_3525_tokens.len())); (_3547_i)++) {
		{
			_1e02c1d07_Token _4013_token = _3525_tokens[_3547_i];
			if (_4013_token._field_id == static_cast<jule::U32>(3LLU)) {
				{
					auto &_match_expr{ _4013_token._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_201459c92:;
						{
							(_3713_range_n)++;
							goto _iter_next_2014583cd;
						}
					}
					else {
						_case_begin_201459632:;
						{
							(_3713_range_n)--;
						}
					}
					_match_end_201459962:;
				}
			}
			if ((_3713_range_n == 0LL)) {
				if ((_389_start + 1LL) > _3547_i) {
					return std::make_tuple(_3557_range_tokens,_3580_colon);
				}
				_3557_range_tokens=_3525_tokens.slice((_389_start + 1LL),_3547_i);
				goto _iter_end_2014583cd;
			} else if ((_3713_range_n != 1LL)) {
				goto _iter_next_2014583cd;
			}
			if ((_3580_colon == -1LL) && (_4013_token._field_id == static_cast<jule::U32>(11LLU))) {
				_3580_colon=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_3547_i - _389_start)) - 1LL));
			}
		}
	_iter_next_2014583cd:;
	}
	_iter_end_2014583cd:;
	return std::make_tuple(_3557_range_tokens,_3580_colon);
}



inline jule::I32 _1eec4a4a7_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::I32>(64LL - static_cast<jule::I32>(static_cast<jule::I32>(_1eec52d3e_len64(_6124_x))));
}



inline jule::I32 _1eec4b046_trailing_zeros(jule::U32 _8323_x) {
	
	return static_cast<jule::I32>(_1eec4bd16_trailing_zeros64(static_cast<jule::U64>(static_cast<jule::U64>(_8323_x))));
}



inline jule::I32 _1eec4ba08_trailing_zeros32(jule::U32 _10525_x) {
	if ((_10525_x == 0LLU)) {
		return 32LL;
	}
	return static_cast<jule::I32>(static_cast<jule::I32>(_1eec4a8d6_DE_BRUIJN32_TAB[static_cast<jule::I32>((((_10525_x & static_cast<jule::U32>(static_cast<jule::U32>((-(_10525_x))))) * 125613361LLU) >> 27LLU))]));
}



inline jule::I32 _1eec4bd16_trailing_zeros64(jule::U64 _11425_x) {
	if ((_11425_x == 0LLU)) {
		return 64LL;
	}
	return static_cast<jule::I32>(static_cast<jule::I32>(_1eec4ac7c_DE_BRUIJN64_TAB[static_cast<jule::I32>((((_11425_x & static_cast<jule::U64>(static_cast<jule::U64>((-(_11425_x))))) * 285870213051353865LLU) >> 58LLU))]));
}



inline jule::I32 _1eec52a31_len32(jule::U32 _35218_x) {
	jule::I32 _35228_n = jule::I32();
	if ((_35218_x >= 65536LLU)) {
		_35218_x>>=16LLU;
		_35228_n=16LL;
	}
	if ((_35218_x >= 256LLU)) {
		_35218_x>>=8LLU;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::I32>(_35228_n + static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::I32>(_35218_x)]))));
	return _35228_n;
}



inline jule::I32 _1eec52d3e_len64(jule::U64 _36618_x) {
	jule::I32 _36628_n = jule::I32();
	if ((_36618_x >= 4294967296LLU)) {
		_36618_x>>=32LLU;
		_36628_n=32LL;
	}
	if ((_36618_x >= 65536LLU)) {
		_36618_x>>=16LLU;
		_36628_n+=16LL;
	}
	if ((_36618_x >= 256LLU)) {
		_36618_x>>=8LLU;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::I32>(_36628_n + static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::I32>(_36618_x)]))));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _1eec53c85_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_41514_x + _41522_y)) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_41514_x & _41522_y))) | static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_41514_x | _41522_y))) & static_cast<jule::U64>(static_cast<jule::U64>((~(_41544_sum)))))))))) >> 63LLU));
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _1eec5588b_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	
	jule::U64 _5019_x0 = (_49914_x & 4294967295LLU);
	jule::U64 _5029_x1 = (_49914_x >> 32LLU);
	jule::U64 _5039_y0 = (_49922_y & 4294967295LLU);
	jule::U64 _5049_y1 = (_49922_y >> 32LLU);
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + static_cast<jule::U64>(static_cast<jule::U64>((_5059_w0 >> 32LLU)));
	jule::U64 _50713_w1 = (_5069_t & 4294967295LLU);
	jule::U64 _5089_w2 = (_5069_t >> 32LLU);
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_5029_x1 * _5049_y1)) + _5089_w2)) + static_cast<jule::U64>(static_cast<jule::U64>((_50713_w1 >> 32LLU))));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _1eeb7c142_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _1eeb7c494_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _1eeb7c7a2_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _1eeb7cb04_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline std::tuple<jule::F64,jule::I32> _1eeb7ed9d_frexp(jule::F64 _4718_f) {
	jule::F64 _4728_frac = jule::F64();
	jule::I32 _4739_exp = jule::I32();
	{
		
		if ((_4718_f == 0LL)) {
			_case_begin_2022ab7e6:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		else if (_1eeba0440_is_inf(_4718_f,0LL) || _1eeb98614_is_nan(_4718_f)) {
			_case_begin_2022ab86d:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		_match_end_2022ab6d6:;
	}
	std::tie(_4718_f,_4739_exp) = _1eeba2d27_normalize(_4718_f);
	jule::U64 _5613_x = _1eeb7c7a2_f64_bits(_4718_f);
	_4739_exp+=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(((_5613_x >> 52LLU) & 2047LLU)))) - 1023LL))) + 1LL));
	_5613_x=static_cast<jule::U64>((_5613_x & 9227875636482146303LLU));
	_5613_x|=4602678819172646912LLU;
	_4728_frac=static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F64 _1eeb940e3_nan(void) {
	return static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _1eeb98614_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _1eeb9dc68_inf(jule::I32 _6112_sign) {
	if ((_6112_sign >= 0LL)) {
		return static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _1eeba0440_is_inf(jule::F64 _7215_f,jule::I32 _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline std::tuple<jule::F64,jule::I32> _1eeba2d27_normalize(jule::F64 _8214_x) {
	jule::F64 _8224_y = jule::F64();
	jule::I32 _8232_exp = jule::I32();
	
	if ((_1eec58c24_abs(_8214_x) < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)) {
		_8224_y = static_cast<jule::F64>((_8214_x * 4503599627370496LL));
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	}
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline jule::F64 _1eebcc9bc_log(jule::F64 _11112_x) {
	
	
	
	
	
	
	
	
	
	{
		
		if (_1eeb98614_is_nan(_11112_x) || _1eeba0440_is_inf(_11112_x,1LL)) {
			_case_begin_202310570:;
			{
				return _11112_x;
			}
		}
		else if ((_11112_x < 0LL)) {
			_case_begin_2023105e7:;
			{
				return static_cast<jule::F64>(_1eeb940e3_nan());
			}
		}
		else if ((_11112_x == 0LL)) {
			_case_begin_20231066e:;
			{
				return static_cast<jule::F64>(_1eeb9dc68_inf(-1LL));
			}
		}
		_match_end_2023104c6:;
	}
	jule::F64 _13314_f1;
	jule::I32 _13322_ki;
	std::tie(_13314_f1,_13322_ki) = _1eeb7ed9d_frexp(_11112_x);
	if ((_13314_f1 < 0.7071067811865476)) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	}
	jule::F64 _1389_f = (_13314_f1 - 1LL);
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);
	jule::F64 _1429_s = jule::div(_1389_f,static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(2LL + _1389_f))));
	jule::F64 _1439_s2 = _1429_s * _1429_s;
	jule::F64 _1449_s4 = _1439_s2 * _1439_s2;
	jule::F64 _1459_t1 = _1439_s2 * static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(0.6666666666666735 + static_cast<jule::F64>(static_cast<jule::F64>(_1449_s4 * static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(0.2857142874366239 + static_cast<jule::F64>(static_cast<jule::F64>(_1449_s4 * static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(0.1818357216161805 + static_cast<jule::F64>(static_cast<jule::F64>((_1449_s4 * 0.14798198605116586))))))))))))))));
	jule::F64 _1469_t2 = _1449_s4 * static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(0.3999999999940942 + static_cast<jule::F64>(static_cast<jule::F64>(_1449_s4 * static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(0.22222198432149784 + static_cast<jule::F64>(static_cast<jule::F64>((_1449_s4 * 0.15313837699209373)))))))))));
	jule::F64 _1479_R = _1459_t1 + _1469_t2;
	jule::F64 _1489_hfsq = (0.5 * _1389_f) * _1389_f;
	return static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>((_1399_k * 0.6931471803691238))) - static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1489_hfsq - static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1429_s * static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_1489_hfsq + _1479_R))))) + static_cast<jule::F64>(static_cast<jule::F64>((_1399_k * 0.00000000019082149292705877))))))))) - _1389_f))));
}



inline jule::F64 _1eec58c24_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(_1eeb7c7a2_f64_bits(_4312_x))) & 9223372036854775807LLU))));
}



inline std::tuple<jule::F64,jule::F64> _1eec5a7e7_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	
	jule::F64 _469_abs_f = _1eec58c24_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if ((_469_abs_f > 4503599627370496LL)) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>((_469_abs_f + 4503599627370496LL));
		_4713_i-=4503599627370496LL;
		while (_4713_i > _469_abs_f) {
			{
				(_4713_i)--;
			}
		_iter_next_20239a110:;
		}
		_iter_end_20239a110:;
		if ((_4413_f < 0LL)) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _1eec5ac7b_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;
	jule::I32 _4516_exp;
	std::tie(_4510_frac,_4516_exp) = _1eeb7ed9d_frexp(_4413_x);
	if ((_4510_frac == 0.5)) {
		return static_cast<jule::F64>(static_cast<jule::F64>((_4516_exp - 1LL)));
	}
	return static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>((static_cast<jule::F64>(static_cast<jule::F64>(_1eebcc9bc_log(_4510_frac))) * 1.4426950408889634))) + static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(_4516_exp))));
}



inline jule::Str _1ed3c6371_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::I32 _7837_prec,jule::I32 _7848_bit_size) {
	return static_cast<jule::Str>(_1eea6cce1_generic_ftoa(jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I32>(_1eeb5a087_max(static_cast<jule::I32>((_7837_prec + 4LL)),24LL))),_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _1eea6cce1_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::I32 _8259_prec,jule::I32 _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	jule::Ptr<_1ecda7acd_FloatInfo> _8413_flt = nullptr;
	{
		auto &_match_expr{ _8270_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_2015968c3:;
			{
				_8313_bits=static_cast<jule::U64>(static_cast<jule::U64>(_1eeb7c142_f32_bits(static_cast<jule::F32>(static_cast<jule::F32>(_8234_val)))));
				_8413_flt=((jule::Ptr<_1ecda7acd_FloatInfo>)((&(_1ed3d4978_F32_INFO))));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_20159696c:;
			{
				_8313_bits=static_cast<jule::U64>(_1eeb7c7a2_f64_bits(_8234_val));
				_8413_flt=((jule::Ptr<_1ecda7acd_FloatInfo>)((&(_1ed42ca59_F64_INFO))));
			}
		}
		else {
			_case_begin_201596263:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_201596472:;
	}
	jule::Bool _969_neg = ((_8313_bits >> static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_8413_flt.get()._field_expbits + _8413_flt.get()._field_mantbits)))) != 0LLU);
	jule::I32 _9713_exp = static_cast<jule::I32>(_8313_bits >> _8413_flt.get()._field_mantbits) & static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(((1LL << _8413_flt.get()._field_expbits) - 1LL))));
	jule::U64 _9813_mant = _8313_bits & static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(1LLU) << _8413_flt.get()._field_mantbits)) - 1LLU))));
	{
		auto &_match_expr{ _9713_exp };
		
		if (_match_expr == static_cast<jule::I32>(((1LL << _8413_flt.get()._field_expbits) - 1LL))) {
			_case_begin_20159683a:;
			{
				{
					
					if ((_9813_mant != 0LLU)) {
						_case_begin_20159d8a8:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'n','a','n'}));
						}
					}
					else if (_969_neg) {
						_case_begin_20159d9b8:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'-','i','n','f'}));
						}
					}
					else {
						_case_begin_20159c632:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'+','i','n','f'}));
						}
					}
					_match_end_20159c566:;
				}
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_20159bba3:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_20159652c:;
			{
				_9813_mant|=static_cast<jule::U64>(static_cast<jule::U64>(1LLU) << _8413_flt.get()._field_mantbits);
			}
		}
		_match_end_20159ae9e:;
	}
	_9713_exp+=_8413_flt.get()._field_bias;
	if (_8244_fmt == 'b') {
		return _1ed3ce06b_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _1eea9417a_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	
	_1ed45d6e4_DecimalSlice _13213_digs = _1ed45d6e4_DecimalSlice();
	jule::Bool _13313_ok = false;
	jule::Bool _1359_shortest = (_8259_prec < 0LL);
	if (_1359_shortest) {
		_13213_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_1eec7c297_ryu_ftoa_shortest(_13213_digs,_9813_mant,static_cast<jule::I32>(_9713_exp - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_8413_flt.get()._field_mantbits)))),(*(_8413_flt)));
		_13313_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_2015a23a1:;
				{
					_8259_prec=static_cast<jule::I32>(_1eeb5a087_max(static_cast<jule::I32>((_13213_digs._field_nd - 1LL)),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_2015a38d0:;
				{
					_8259_prec=static_cast<jule::I32>(_1eeb5a087_max(static_cast<jule::I32>(_13213_digs._field_nd - _13213_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_2015a3968:;
				{
					_8259_prec=_13213_digs._field_nd;
				}
			}
			_match_end_2015a387a:;
		}
	} else if (_8244_fmt != 'f') {
		jule::I32 _15217_digits = _8259_prec;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_2015a642c:;
				{
					(_15217_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_2015a60ca:;
				{
					if ((_8259_prec == 0LL)) {
						_8259_prec=1LL;
					}
					_15217_digits=_8259_prec;
				}
			}
			else {
				_case_begin_2015a5904:;
				{
					_15217_digits=1LL;
				}
			}
			_match_end_2015a3eeb:;
		}
		if ((_8270_bit_size == 32LL) && (_15217_digits <= 9LL)) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_1eec7bd57_ryu_ftoa_fixed32(_13213_digs,static_cast<jule::U32>(static_cast<jule::U32>(_9813_mant)),static_cast<jule::I32>(_9713_exp - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_8413_flt.get()._field_mantbits)))),_15217_digits);
			_13313_ok=true;
		} else if ((_15217_digits <= 18LL)) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_1eec7bebc_ryu_ftoa_fixed64(_13213_digs,_9813_mant,static_cast<jule::I32>(_9713_exp - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_8413_flt.get()._field_mantbits)))),_15217_digits);
			_13313_ok=true;
		}
	}
	if ((!(_13313_ok))) {
		return _1ed3b01e5_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _1ed3b26c0_fmt_digits(_8221_dst,_1359_shortest,_969_neg,_13213_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _1ed3b01e5_big_ftoa(jule::Slice<jule::U8> _18217_dst,jule::I32 _18234_prec,jule::U8 _18245_fmt,jule::Bool _18256_neg,jule::U64 _18313_mant,jule::I32 _18324_exp,_1ecda7acd_FloatInfo& _18335_flt) {
	_1eec80366_Decimal _18413_d = _1eec80366_Decimal();
	_1eec8081c_assign(&_18413_d, _18313_mant);
	_1eec80b3b_shift(&_18413_d, static_cast<jule::I32>(_18324_exp - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_18335_flt._field_mantbits)))));
	_1ed45d6e4_DecimalSlice _18713_digs = _1ed45d6e4_DecimalSlice();
	jule::Bool _1889_shortest = (_18234_prec < 0LL);
	if (_1889_shortest) {
		_1ed465ad6_round_shortest(_18413_d,_18313_mant,_18324_exp,_18335_flt);
		_18713_digs=_1ed45d6e4_DecimalSlice(_18413_d._field_d.slice(0LL),_18413_d._field_nd,_18413_d._field_dp,jule::Bool());
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_2015b0546:;
				{
					_18234_prec=static_cast<jule::I32>((_18713_digs._field_nd - 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_2015b05e0:;
				{
					_18234_prec=static_cast<jule::I32>(_1eeb5a087_max(static_cast<jule::I32>(_18713_digs._field_nd - _18713_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_2015b0656:;
				{
					_18234_prec=_18713_digs._field_nd;
				}
			}
			_match_end_2015ae622:;
		}
	} else {
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_2015ae27b:;
				{
					_1eec81598_round(&_18413_d, static_cast<jule::I32>((_18234_prec + 1LL)));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_2015ae2e2:;
				{
					_1eec81598_round(&_18413_d, static_cast<jule::I32>(_18413_d._field_dp + _18234_prec));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_2015ae358:;
				{
					if ((_18234_prec == 0LL)) {
						_18234_prec=1LL;
					}
					_1eec81598_round(&_18413_d, _18234_prec);
				}
			}
			_match_end_2015b235b:;
		}
		_18713_digs=_1ed45d6e4_DecimalSlice(_18413_d._field_d.slice(0LL),_18413_d._field_nd,_18413_d._field_dp,jule::Bool());
	}
	return _1ed3b26c0_fmt_digits(_18217_dst,_1889_shortest,_18256_neg,_18713_digs,_18234_prec,_18245_fmt);
}



inline jule::Slice<jule::U8> _1ed3b26c0_fmt_digits(jule::Slice<jule::U8> _21919_dst,jule::Bool _21932_shortest,jule::Bool _21948_neg,_1ed45d6e4_DecimalSlice _22013_digs,jule::I32 _22037_prec,jule::U8 _22048_fmt) {
	{
		auto &_match_expr{ _22048_fmt };
		
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_2015b6519:;
			{
				return _1eea95038_fmt_e(_21919_dst,_21948_neg,_22013_digs,_22037_prec,_22048_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_2015b65d5:;
			{
				return _1eeb67050_fmt_f(_21919_dst,_21948_neg,_22013_digs,_22037_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_2015b664b:;
			{
				jule::I32 _22817_eprec = _22037_prec;
				if ((_22817_eprec > _22013_digs._field_nd) && (_22013_digs._field_nd >= _22013_digs._field_dp)) {
					_22817_eprec=_22013_digs._field_nd;
				}
				if (_21932_shortest) {
					_22817_eprec=6LL;
				}
				jule::I32 _23813_exp = (_22013_digs._field_dp - 1LL);
				if ((_23813_exp < -4LL) || (_23813_exp >= _22817_eprec)) {
					if (_22037_prec > _22013_digs._field_nd) {
						_22037_prec=_22013_digs._field_nd;
					}
					return _1eea95038_fmt_e(_21919_dst,_21948_neg,_22013_digs,static_cast<jule::I32>((_22037_prec - 1LL)),static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_22048_fmt + 'e')) - 'g'));
				}
				if (_22037_prec > _22013_digs._field_dp) {
					_22037_prec=_22013_digs._field_nd;
				}
				return _1eeb67050_fmt_f(_21919_dst,_21948_neg,_22013_digs,static_cast<jule::I32>(_1eeb5a087_max(static_cast<jule::I32>(_22037_prec - _22013_digs._field_dp),0LL)));
			}
		}
		_match_end_2015b64b4:;
	}
	return jule::append(_21919_dst,jule::Slice<jule::U8>({'%',_22048_fmt}));
}



inline void _1ed465ad6_round_shortest(_1eec80366_Decimal& _25724_d,jule::U64 _25736_mant,jule::I32 _25747_exp,_1ecda7acd_FloatInfo& _25758_flt) {
	if ((_25736_mant == 0LLU)) {
		_25724_d._field_nd=0LL;
		return;
	}
	jule::I32 _2789_minexp = (_25758_flt._field_bias + 1LL);
	if ((_25747_exp > _2789_minexp) && ((332LL * static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_25724_d._field_dp - _25724_d._field_nd)))) >= static_cast<jule::I32>(static_cast<jule::I32>(100LL * static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_25747_exp - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_25758_flt._field_mantbits)))))))))) {
		return;
	}
	_1eec80366_Decimal _28713_upper = _1eec80366_Decimal();
	_1eec8081c_assign(&_28713_upper, static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(_25736_mant << 1LLU)) + 1LLU)));
	_1eec80b3b_shift(&_28713_upper, static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_25747_exp - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_25758_flt._field_mantbits))))) - 1LL)));
	jule::U64 _29713_mantlo = 0LLU;
	jule::I32 _29813_explo = 0LL;
	if ((_25736_mant > static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _25758_flt._field_mantbits))) || (_25747_exp == _2789_minexp)) {
		_29713_mantlo=static_cast<jule::U64>((_25736_mant - 1LLU));
		_29813_explo=_25747_exp;
	} else {
		_29713_mantlo=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(_25736_mant << 1LLU)) - 1LLU));
		_29813_explo=static_cast<jule::I32>((_25747_exp - 1LL));
	}
	_1eec80366_Decimal _30613_lower = _1eec80366_Decimal();
	_1eec8081c_assign(&_30613_lower, static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(_29713_mantlo << 1LLU)) + 1LLU)));
	_1eec80b3b_shift(&_30613_lower, static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_29813_explo - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_25758_flt._field_mantbits))))) - 1LL)));
	jule::Bool _3139_inclusive = ((_25736_mant & 1LL) == 0LLU);
	jule::U8 _32613_upperdelta = 0LLU;
	jule::I32 _33013_ui = 0LL;
	for (; ; (_33013_ui)++) {
		{
			jule::I32 _33513_mi = (_33013_ui - _28713_upper._field_dp) + _25724_d._field_dp;
			if (_33513_mi >= _25724_d._field_nd) {
				goto _iter_end_2015c249d;
			}
			jule::I32 _33913_li = (_33013_ui - _28713_upper._field_dp) + _30613_lower._field_dp;
			jule::U8 _34017_l = static_cast<jule::U8>(48LLU);
			if ((_33913_li >= 0LL) && (_33913_li < _30613_lower._field_nd)) {
				_34017_l=_30613_lower._field_d[_33913_li];
			}
			jule::U8 _34417_m = static_cast<jule::U8>(48LLU);
			if ((_33513_mi >= 0LL)) {
				_34417_m=_25724_d._field_d[_33513_mi];
			}
			jule::U8 _34817_u = static_cast<jule::U8>(48LLU);
			if (_33013_ui < _28713_upper._field_nd) {
				_34817_u=_28713_upper._field_d[_33013_ui];
			}
			jule::Bool _35613_okdown = (_34017_l != _34417_m) || (_3139_inclusive && ((_33913_li + 1LL) == _30613_lower._field_nd));
			{
				
				if ((_32613_upperdelta == 0LLU) && ((_34417_m + 1LLU) < _34817_u)) {
					_case_begin_2015cc40e:;
					{
						_32613_upperdelta=2LLU;
					}
				}
				else if ((_32613_upperdelta == 0LLU) && (_34417_m != _34817_u)) {
					_case_begin_2015cc486:;
					{
						_32613_upperdelta=1LLU;
					}
				}
				else if ((_32613_upperdelta == 1LLU) && ((_34417_m != '9') || (_34817_u != '0'))) {
					_case_begin_2015cc50d:;
					{
						_32613_upperdelta=2LLU;
					}
				}
				_match_end_2015cc398:;
			}
			jule::Bool _37713_okup = (_32613_upperdelta > 0LLU) && ((_3139_inclusive || (_32613_upperdelta > 1LLU)) || ((_33013_ui + 1LL) < _28713_upper._field_nd));
			{
				
				if (_35613_okdown && _37713_okup) {
					_case_begin_2015d09c8:;
					{
						_1eec81598_round(&_25724_d, static_cast<jule::I32>((_33513_mi + 1LL)));
						return;
					}
				}
				else if (_35613_okdown) {
					_case_begin_2015d0a3e:;
					{
						_1eec80e5a_round_down(&_25724_d, static_cast<jule::I32>((_33513_mi + 1LL)));
						return;
					}
				}
				else if (_37713_okup) {
					_case_begin_2015d0aa5:;
					{
						_1eec81279_round_up(&_25724_d, static_cast<jule::I32>((_33513_mi + 1LL)));
						return;
					}
				}
				_match_end_2015ce8ea:;
			}
		}
	_iter_next_2015c249d:;
	}
	_iter_end_2015c249d:;
}



inline jule::Slice<jule::U8> _1eea95038_fmt_e(jule::Slice<jule::U8> _39614_dst,jule::Bool _39627_neg,_1ed45d6e4_DecimalSlice _39638_d,jule::I32 _39655_prec,jule::U8 _39666_fmt) {
	if (_39627_neg) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('-');
	}
	jule::U8 _40313_ch = '0';
	if ((_39638_d._field_nd != 0LL)) {
		_40313_ch=_39638_d._field_d[0LL];
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);
	if ((_39655_prec > 0LL)) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('.');
		jule::I32 _41217_i = 1LL;
		jule::I32 _41313_m = _1eeac24d8_min(_39638_d._field_nd,static_cast<jule::I32>((_39655_prec + 1LL)));
		if (_41217_i < _41313_m) {
			_39614_dst=jule::append(_39614_dst,_39638_d._field_d.slice(_41217_i,_41313_m));
			_41217_i=_41313_m;
		}
		for (; _41217_i <= _39655_prec; (_41217_i)++) {
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('0');
			}
		_iter_next_2015d658e:;
		}
		_iter_end_2015d658e:;
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_39666_fmt);
	jule::I32 _42513_exp = (_39638_d._field_dp - 1LL);
	if ((_39638_d._field_nd == 0LL)) {
		_42513_exp=0LL;
	}
	if ((_42513_exp < 0LL)) {
		_40313_ch='-';
		_42513_exp=static_cast<jule::I32>((-(_42513_exp)));
	} else {
		_40313_ch='+';
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);
	{
		
		if ((_42513_exp < 10LL)) {
			_case_begin_2015d88c1:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push('0');_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp))) + '0'));
			}
		}
		else if ((_42513_exp < 100LL)) {
			_case_begin_2015d8937:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp / 10LL)))) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp % 10LL)))) + '0'));
			}
		}
		else {
			_case_begin_2015d8c67:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,3);_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp / 100LL)))) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp / 10LL)))) % 10LL))) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_42513_exp % 10LL)))) + '0'));
			}
		}
		_match_end_2015d8c12:;
	}
	return _39614_dst;
}



inline jule::Slice<jule::U8> _1eeb67050_fmt_f(jule::Slice<jule::U8> _45114_dst,jule::Bool _45127_neg,_1ed45d6e4_DecimalSlice _45138_d,jule::I32 _45155_prec) {
	if (_45127_neg) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('-');
	}
	if ((_45138_d._field_dp > 0LL)) {
		jule::I32 _45917_m = _1eeac24d8_min(_45138_d._field_nd,_45138_d._field_dp);
		_45114_dst=jule::append(_45114_dst,_45138_d._field_d.slice(0LL,_45917_m));
		for (; _45917_m < _45138_d._field_dp; (_45917_m)++) {
			{
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');
			}
		_iter_next_2015de0d0:;
		}
		_iter_end_2015de0d0:;
	} else {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');
	}
	if ((_45155_prec > 0LL)) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('.');
		jule::I32 _47017_i = 0LL;
		for (; _47017_i < _45155_prec; (_47017_i)++) {
			{
				jule::U8 _47221_ch = static_cast<jule::U8>(48LLU);
				jule::I32 _47317_j = _45138_d._field_dp + _47017_i;
				if ((0LL <= _47317_j) && (_47317_j < _45138_d._field_nd)) {
					_47221_ch=_45138_d._field_d[_47317_j];
				}
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push(_47221_ch);
			}
		_iter_next_2015e0d4b:;
		}
		_iter_end_2015e0d4b:;
	}
	return _45114_dst;
}



inline jule::Slice<jule::U8> _1ed3ce06b_fmt_b(jule::Slice<jule::U8> _48414_dst,jule::Bool _48427_neg,jule::U64 _48438_mant,jule::I32 _48453_exp,_1ecda7acd_FloatInfo& _48464_flt) {
	if (_48427_neg) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('-');
	}
	std::tie(_48414_dst,std::ignore) = _1eec85745_fmt_bits(_48414_dst,_48438_mant,10LL,false,true);
	_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('p');
	_48453_exp-=static_cast<jule::I32>(static_cast<jule::I32>(_48464_flt._field_mantbits));
	if ((_48453_exp >= 0LL)) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('+');
	}
	std::tie(_48414_dst,std::ignore) = _1eec85745_fmt_bits(_48414_dst,static_cast<jule::U64>(static_cast<jule::U64>(_48453_exp)),10LL,(_48453_exp < 0LL),true);
	return _48414_dst;
}



inline jule::Slice<jule::U8> _1eea9417a_fmt_x(jule::Slice<jule::U8> _50614_dst,jule::I32 _50627_prec,jule::U8 _50638_fmt,jule::Bool _50649_neg,jule::U64 _50713_mant,jule::I32 _50728_exp,_1ecda7acd_FloatInfo& _50739_flt) {
	if ((_50713_mant == 0LLU)) {
		_50728_exp=0LL;
	}
	_50713_mant<<=static_cast<jule::U32>(60LLU - _50739_flt._field_mantbits);
	while ((_50713_mant != 0LLU) && ((_50713_mant & 1152921504606846976LLU) == 0LLU)) {
		{
			_50713_mant<<=1LLU;
			(_50728_exp)--;
		}
	_iter_next_2015e75c2:;
	}
	_iter_end_2015e75c2:;
	if ((_50627_prec >= 0LL) && (_50627_prec < 15LL)) {
		jule::U32 _52113_shift = static_cast<jule::U32>(_50627_prec << 2LLU);
		jule::U64 _52213_extra = ((_50713_mant << _52113_shift) & 1152921504606846975LLU);
		_50713_mant>>=static_cast<jule::U32>(60LLU - _52113_shift);
		if (((_52213_extra | static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_50713_mant & 1LLU))))) > 576460752303423488LLU)) {
			(_50713_mant)++;
		}
		_50713_mant<<=static_cast<jule::U32>(60LLU - _52113_shift);
		if (((_50713_mant & 2305843009213693952LLU) != 0LLU)) {
			_50713_mant>>=1LLU;
			(_50728_exp)++;
		}
	}
	jule::Str _53513_hex = jule::Str();
	if (_50638_fmt == 'X') {
		_53513_hex=jule::Str("0123456789ABCDEF", 16);
	} else {
		_53513_hex=jule::Str("0123456789abcdef", 16);
	}
	if (_50649_neg) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('-');
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push('0');_50614_dst.__push(_50638_fmt);_50614_dst.__push(static_cast<jule::U8>('0' + static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(((_50713_mant >> 60LLU) & 1LLU))))));
	_50713_mant<<=4LLU;
	if ((_50627_prec < 0LL) && (_50713_mant != 0LLU)) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');
		while ((_50713_mant != 0LLU)) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_53513_hex[static_cast<jule::I32>(((_50713_mant >> 60LLU) & 15LLU))]);
				_50713_mant<<=4LLU;
			}
		_iter_next_2015ed62d:;
		}
		_iter_end_2015ed62d:;
	} else if ((_50627_prec > 0LL)) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');
		jule::I32 _55817_i = 0LL;
		for (; _55817_i < _50627_prec; (_55817_i)++) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_53513_hex[static_cast<jule::I32>(((_50713_mant >> 60LLU) & 15LLU))]);
				_50713_mant<<=4LLU;
			}
		_iter_next_2015eb8a1:;
		}
		_iter_end_2015eb8a1:;
	}
	jule::U8 _56613_ch = static_cast<jule::U8>(80LLU);
	if (_50638_fmt == static_cast<jule::U8>(static_cast<jule::U8>(_1ed42d7a2_lower(_50638_fmt)))) {
		_56613_ch='p';
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56613_ch);
	if ((_50728_exp < 0LL)) {
		_56613_ch='-';
		_50728_exp=static_cast<jule::I32>((-(_50728_exp)));
	} else {
		_56613_ch='+';
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56613_ch);
	{
		
		if ((_50728_exp < 100LL)) {
			_case_begin_20160625c:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,2);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 10LL)))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp % 10LL)))) + '0'));
			}
		}
		else if ((_50728_exp < 1000LL)) {
			_case_begin_2016032c0:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 100LL)))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(((_50728_exp / 10LL) % 10LL)))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp % 10LL)))) + '0'));
			}
		}
		else {
			_case_begin_201603666:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,4);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 1000LL)))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp / 100LL)))) % 10LL))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(((_50728_exp / 10LL) % 10LL)))) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>((_50728_exp % 10LL)))) + '0'));
			}
		}
		_match_end_201603611:;
	}
	return _50614_dst;
}



inline jule::I32 _1eeac24d8_min(jule::I32 _5918_a,jule::I32 _59116_b) {
	if (_5918_a < _59116_b) {
		return _5918_a;
	}
	return _59116_b;
}



inline jule::I32 _1eeb5a087_max(jule::I32 _5988_a,jule::I32 _59816_b) {
	if (_5988_a > _59816_b) {
		return _5988_a;
	}
	return _59816_b;
}



inline jule::U8 _1ed42d7a2_lower(jule::U8 _4710_c) {
	return static_cast<jule::U8>(_4710_c | ('x' - 'X'));
}



inline std::tuple<jule::U64,jule::I32> _1eec7997b___parse_uint(jule::Str _5121_s,jule::I32 _5133_base,jule::I32 _5148_bit_size) {
	if (_5121_s.empty()) {
		return std::make_tuple(0LLU,static_cast<jule::I32>(2LL));
	}
	{
		
		if ((2LL <= _5133_base) && (_5133_base <= 36LL)) {
			_case_begin_20160bd45:;
		}
		else if ((_5133_base == 0LL)) {
			_case_begin_20160bbd0:;
			{
				_5133_base=10LL;
				if (_5121_s[0LL] == '0') {
					{
						
						if ((_5121_s.len() >= 3LL) && (_1ed42d7a2_lower(_5121_s[1LL]) == 'b')) {
							_case_begin_20160dd36:;
							{
								_5133_base=2LL;
								(_5121_s).mut_slice(2LL);
							}
						}
						else if ((_5121_s.len() >= 3LL) && (_1ed42d7a2_lower(_5121_s[1LL]) == 'o')) {
							_case_begin_20160d93a:;
							{
								_5133_base=8LL;
								(_5121_s).mut_slice(2LL);
							}
						}
						else if ((_5121_s.len() >= 3LL) && (_1ed42d7a2_lower(_5121_s[1LL]) == 'x')) {
							_case_begin_20160d62c:;
							{
								_5133_base=16LL;
								(_5121_s).mut_slice(2LL);
							}
						}
						else {
							_case_begin_20160d5b6:;
							{
								_5133_base=8LL;
								(_5121_s).mut_slice(1LL);
							}
						}
						_match_end_20160d4ea:;
					}
				}
			}
		}
		else {
			_case_begin_20160addd:;
			{
				return std::make_tuple(0LLU,static_cast<jule::I32>(3LL));
			}
		}
		_match_end_20160ad88:;
	}
	if ((_5148_bit_size == 0LL)) {
		_5148_bit_size=64LL;
	} else if ((_5148_bit_size < 0LL) || (_5148_bit_size > 64LL)) {
		return std::make_tuple(0LLU,static_cast<jule::I32>(4LL));
	}
	jule::U64 _9013_cutoff = 0LLU;
	{
		auto &_match_expr{ _5133_base };
		
		if (_match_expr == 10LL) {
			_case_begin_20161429d:;
			{
				_9013_cutoff=1844674407370955265LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_201613de6:;
			{
				_9013_cutoff=1152921504606846977LLU;
			}
		}
		else {
			_case_begin_201613841:;
			{
				_9013_cutoff=static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_5133_base)))))) + 1LLU));
			}
		}
		_match_end_201613a83:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto &_match_expr{ _5148_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_201613be8:;
			{
				_10013_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_20161558a:;
			{
				_10013_max_val=jule::MAX_U64;
			}
		}
		_match_end_201614ac8:;
	}
	jule::U64 _10813_n = 0LLU;
	{
		auto &expr = _5121_s;
		auto it = expr.begin();
		_iter_begin_201615a30:;
		if (it != expr.end()) {
			jule::U8 _2016166ac_c = *it;
			{
				jule::U8 _11017_d = 0LLU;
				{
					
					if (('0' <= _2016166ac_c) && (_2016166ac_c <= '9')) {
						_case_begin_201617735:;
						{
							_11017_d=static_cast<jule::U8>(_2016166ac_c - '0');
						}
					}
					else if (('a' <= static_cast<jule::U8>(static_cast<jule::U8>(_1ed42d7a2_lower(_2016166ac_c)))) && (_1ed42d7a2_lower(_2016166ac_c) <= 'z')) {
						_case_begin_2016175c0:;
						{
							_11017_d=static_cast<jule::U8>((static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_1ed42d7a2_lower(_2016166ac_c))) - 'a')) + 10LLU));
						}
					}
					else if (_2016166ac_c == '_') {
						_case_begin_201617636:;
						{
							goto _iter_next_201615a30;
						}
					}
					else {
						_case_begin_20161715d:;
						{
							return std::make_tuple(0LLU,static_cast<jule::I32>(2LL));
						}
					}
					_match_end_2016170d6:;
				}
				if (_11017_d >= static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_5133_base)))) {
					return std::make_tuple(0LLU,static_cast<jule::I32>(2LL));
				}
				if (_10813_n >= _9013_cutoff) {
					return std::make_tuple(_10013_max_val,static_cast<jule::I32>(1LL));
				}
				_10813_n*=static_cast<jule::U64>(static_cast<jule::U64>(_5133_base));
				jule::U64 _13213_n1 = _10813_n + static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_11017_d)));
				if ((_13213_n1 < _10813_n) || (_13213_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,static_cast<jule::I32>(1LL));
				}
				_10813_n=_13213_n1;
			}
			_iter_next_201615a30:;
			++it;
			goto _iter_begin_201615a30;
		}
		_iter_end_201615a30:;
	}
	return std::make_tuple(_10813_n,static_cast<jule::I32>(0LL));
}



inline jule::Exceptional<jule::U64> _1eec79ae1_parse_uint(jule::Str _14623_s,jule::I32 _14635_base,jule::I32 _14650_bit_size) {
	jule::U64 _14710_un;
	jule::I32 _14714_err;
	std::tie(_14710_un,_14714_err) = _1eec7997b___parse_uint(_14623_s,_14635_base,_14650_bit_size);
	if (_14714_err != static_cast<jule::I32>(0LL)) {
		return jule::Exceptional<jule::U64>(_14714_err);
	}
	return jule::Exceptional<jule::U64>(jule::Any(),_14710_un);
}



inline jule::Exceptional<jule::I64> _1eec79c56_parse_int(jule::Str _17222_s,jule::I32 _17230_base,jule::I32 _17245_bit_size) {
	if (_17222_s.empty()) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I32>(2LL));
	}
	jule::Bool _17813_neg = false;
	if (_17222_s[0LL] == '+') {
		(_17222_s).mut_slice(1LL);
	} else if (_17222_s[0LL] == '-') {
		_17813_neg=true;
		(_17222_s).mut_slice(1LL);
	}
	jule::U64 _18714_un;
	jule::I32 _18718_err;
	std::tie(_18714_un,_18718_err) = _1eec7997b___parse_uint(_17222_s,_17230_base,_17245_bit_size);
	if ((_18718_err != static_cast<jule::I32>(0LL)) && (_18718_err != static_cast<jule::I32>(1LL))) {
		return jule::Exceptional<jule::I64>(_18718_err);
	}
	if ((_17245_bit_size == 0LL)) {
		_17245_bit_size=64LL;
	}
	jule::U64 _1969_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_17245_bit_size - 1LL)))));
	if ((!(_17813_neg)) && (_18714_un >= _1969_cutoff)) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I32>(1LL));
	}
	if (_17813_neg && (_18714_un > _1969_cutoff)) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I32>(1LL));
	}
	jule::I64 _20313_n = static_cast<jule::I64>(_18714_un);
	if (_17813_neg) {
		_20313_n=static_cast<jule::I64>((-(_20313_n)));
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_20313_n);
}



inline std::tuple<jule::F64,jule::Bool> _1eec7a1da_eisel_lemire64(jule::U64 _4123_man,jule::I32 _4133_exp10,jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if ((_4123_man == 0LLU)) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(9223372036854775808LLU));
		}
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::I32 _579_clz = _1eec4a4a7_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::U32>(static_cast<jule::U32>(_579_clz));
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>(((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL)) - static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_579_clz)));
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _1eec5588b_mul64(_4123_man,_1ed489412_DETAILED_POWS_OF_TEN[(_4133_exp10 - -348LL)][1LL]);
	if (((_6314_x_hi & 511LLU) == 511LLU) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _1eec5588b_mul64(_4123_man,_1ed489412_DETAILED_POWS_OF_TEN[(_4133_exp10 - -348LL)][0LL]);
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LLU) == 511LLU) && ((_6829_merged_lo + 1LLU) == 0LLU)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = (_6314_x_hi >> 63LLU);
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_799_msb + 9LLU))));
	_6013_ret_exp2-=static_cast<jule::U64>(1LLU ^ _799_msb);
	if (((_6324_x_lo == 0LLU) && ((_6314_x_hi & 511LLU) == 0LLU)) && ((_8013_ret_mantissa & 3LLU) == 1LLU)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>((_8013_ret_mantissa & 1LLU));
	_8013_ret_mantissa>>=1LLU;
	if (((_8013_ret_mantissa >> 53LLU) > 0LLU)) {
		_8013_ret_mantissa>>=1LLU;
		_6013_ret_exp2+=1LLU;
	}
	if (((_6013_ret_exp2 - 1LLU) >= 2046LLU)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LLU) | static_cast<jule::U64>(static_cast<jule::U64>((_8013_ret_mantissa & 4503599627370495LLU)));
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1eec7a350_eisel_lemire32(jule::U64 _11023_man,jule::I32 _11033_exp10,jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if ((_11023_man == 0LLU)) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_1eeb7c494_f32_from_bits(2147483648LLU));
		}
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::I32 _1329_clz = _1eec4a4a7_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::U32>(static_cast<jule::U32>(_1329_clz));
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>(((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL)) - static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(_1329_clz)));
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _1eec5588b_mul64(_11023_man,_1ed489412_DETAILED_POWS_OF_TEN[(_11033_exp10 - -348LL)][1LL]);
	if (((_13814_x_hi & 274877906943LLU) == 274877906943LLU) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _1eec5588b_mul64(_11023_man,_1ed489412_DETAILED_POWS_OF_TEN[(_11033_exp10 - -348LL)][0LL]);
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LLU) == 274877906943LLU) && ((_14329_merged_lo + 1LLU) == 0LLU)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = (_13814_x_hi >> 63LLU);
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_1549_msb + 38LLU))));
	_13513_ret_exp2-=static_cast<jule::U64>(1LLU ^ _1549_msb);
	if (((_13824_x_lo == 0LLU) && ((_13814_x_hi & 274877906943LLU) == 0LLU)) && ((_15513_ret_mantissa & 3LLU) == 1LLU)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>((_15513_ret_mantissa & 1LLU));
	_15513_ret_mantissa>>=1LLU;
	if (((_15513_ret_mantissa >> 24LLU) > 0LLU)) {
		_15513_ret_mantissa>>=1LLU;
		_13513_ret_exp2+=1LLU;
	}
	if (((_13513_ret_exp2 - 1LLU) >= 254LLU)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LLU) | static_cast<jule::U64>(static_cast<jule::U64>((_15513_ret_mantissa & 8388607LLU)));
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LLU;
	}
	_11058_f = static_cast<jule::F32>(_1eeb7c494_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_17813_ret_bits))));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::I32 _1eec7a828_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I32 _4613_n = _4542_prefix.len();
	if (_4613_n > static_cast<jule::I32>(static_cast<jule::I32>(_4534_s.len()))) {
		_4613_n=static_cast<jule::I32>(_4534_s.len());
	}
	jule::I32 _5013_i = 0LL;
	for (; _5013_i < _4613_n; (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];
			if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
				_5217_c+='a' - 'A';
			}
			if (_5217_c != _4542_prefix[_5013_i]) {
				return _5013_i;
			}
		}
	_iter_next_201643dc1:;
	}
	_iter_end_201643dc1:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::I32,jule::Bool> _1eec7a98d_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::I32 _6834_n = jule::I32();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s.empty()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::I32 _7213_sign = 1LL;
	jule::I32 _7313_nsign = 0LL;
	{
		auto &_match_expr{ _6816_s[0LL] };
		
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_2016487dd:;
			{
				if (_6816_s[0LL] == '-') {
					_7213_sign=-1LL;
				}
				_7313_nsign=1LL;
				(_6816_s).mut_slice(1LL);
				goto _case_begin_201648854;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_201648854:;
			{
				jule::I32 _8317_case_n = _1eec7a828_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
				if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
					_8317_case_n=3LL;
				}
				if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
					_6826_f = static_cast<jule::F64>(_1eeb9dc68_inf(_7213_sign));
					_6834_n = static_cast<jule::I32>(_7313_nsign + _6834_n);
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_2016488ba:;
			{
				if ((_1eec7a828_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL)) {
					_6826_f = static_cast<jule::F64>(_1eeb940e3_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		_match_end_201648788:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::I32,jule::Bool,jule::Bool,jule::Bool,jule::I32,jule::Bool> _1eec7ab03_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::I32 _10340_exp = jule::I32();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10438_hex = jule::Bool();
	jule::I32 _10449_i = jule::I32();
	jule::Bool _10457_ok = jule::Bool();
	if (_10449_i >= static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len()))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		
		if (_10315_s[_10449_i] == '+') {
			_case_begin_201650284:;
			{
				(_10449_i)++;
			}
		}
		else if (_10315_s[_10449_i] == '-') {
			_case_begin_2016506d5:;
			{
				_10350_neg=true;
				(_10449_i)++;
			}
		}
		_match_end_20165022e:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::I32 _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len()))) && (_10315_s[_10449_i] == '0')) && (_1ed42d7a2_lower(_10315_s[(_10449_i + 1LL)]) == 'x')) {
		_11813_base=16LLU;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::I32 _13013_nd = 0LL;
	jule::I32 _13113_nd_mant = 0LL;
	jule::I32 _13213_dp = 0LL;
	for (; _10449_i < static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len())); (_10449_i)++) {
		{
			jule::U8 _13413_c = _10315_s[_10449_i];
			{
				
				if (_13413_c == '_') {
					_case_begin_201656521:;
					{
						goto _iter_next_2016559b5;
					}
				}
				else if (_13413_c == '.') {
					_case_begin_201656598:;
					{
						if (_12813_sawdot) {
							goto _julec_label_loop_end;
						}
						_12813_sawdot=true;
						_13213_dp=_13013_nd;
						goto _iter_next_2016559b5;
					}
				}
				else if (('0' <= _13413_c) && (_13413_c <= '9')) {
					_case_begin_201656620:;
					{
						_12913_sawdigits=true;
						if ((_13413_c == '0') && (_13013_nd == 0LL)) {
							(_13213_dp)--;
							goto _iter_next_2016559b5;
						}
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=_11813_base;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(_13413_c - '0'));
							(_13113_nd_mant)++;
						} else if (_13413_c != '0') {
							_10425_trunc=true;
						}
						goto _iter_next_2016559b5;
					}
				}
				else if (((_11813_base == 16LLU) && ('a' <= static_cast<jule::U8>(static_cast<jule::U8>(_1ed42d7a2_lower(_13413_c))))) && (_1ed42d7a2_lower(_13413_c) <= 'f')) {
					_case_begin_201656697:;
					{
						_12913_sawdigits=true;
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=16LLU;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(((_1ed42d7a2_lower(_13413_c) - 'a') + 10LLU)));
							(_13113_nd_mant)++;
						} else {
							_10425_trunc=true;
						}
						goto _iter_next_2016559b5;
					}
				}
				_match_end_201656433:;
			}
			goto _iter_end_2016559b5;
		}
	_iter_next_2016559b5:;
	}
	_iter_end_2016559b5:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if ((_11813_base == 16LLU)) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len()))) && (_1ed42d7a2_lower(_10315_s[_10449_i]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len()))) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::I32 _19717_esign = 1LL;
		if (_10315_s[_10449_i] == '+') {
			(_10449_i)++;
		} else if (_10315_s[_10449_i] == '-') {
			(_10449_i)++;
			_19717_esign=-1LL;
		}
		if (((_10449_i >= static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len()))) || (_10315_s[_10449_i] < '0')) || (_10315_s[_10449_i] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::I32 _20717_e = 0LL;
		for (; (_10449_i < static_cast<jule::I32>(static_cast<jule::I32>(_10315_s.len()))) && ((('0' <= _10315_s[_10449_i]) && (_10315_s[_10449_i] <= '9')) || (_10315_s[_10449_i] == '_')); (_10449_i)++) {
			{
				if (_10315_s[_10449_i] == '_') {
					goto _iter_next_2016622b8;
				}
				if ((_20717_e < 10000LL)) {
					_20717_e=static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_20717_e * 10LL))) + static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_10315_s[_10449_i]))))) - '0');
				}
			}
		_iter_next_2016622b8:;
		}
		_iter_end_2016622b8:;
		_13213_dp+=static_cast<jule::I32>(_20717_e * _19717_esign);
	} else if ((_11813_base == 16LLU)) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((_10325_mantissa != 0LLU)) {
		_10340_exp=static_cast<jule::I32>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _1eec7b1a8_atof64exact(jule::U64 _48216_mantissa,jule::I32 _48235_exp,jule::Bool _48245_neg) {
	jule::F64 _48258_f = jule::F64();
	jule::Bool _48266_ok = jule::Bool();
	if (((_48216_mantissa >> _1ed42ca59_F64_INFO._field_mantbits) != 0LLU)) {
		return std::make_tuple(_48258_f,_48266_ok);
	}
	_48258_f=static_cast<jule::F64>(static_cast<jule::F64>(_48216_mantissa));
	if (_48245_neg) {
		_48258_f=static_cast<jule::F64>((-(_48258_f)));
	}
	{
		
		if ((_48235_exp == 0LL)) {
			_case_begin_20166e24d:;
			{
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		else if ((_48235_exp > 0LL) && (_48235_exp <= 37LL)) {
			_case_begin_20166e2c5:;
			{
				if ((_48235_exp > 22LL)) {
					_48258_f*=_1eeb450b6_F64_POW10[(_48235_exp - 22LL)];
					_48235_exp=22LL;
				}
				if ((_48258_f > 1000000000000000LL) || (_48258_f < -1000000000000000LL)) {
					return std::make_tuple(_48258_f,_48266_ok);
				}
				_48258_f = static_cast<jule::F64>(_48258_f * _1eeb450b6_F64_POW10[_48235_exp]);
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		else if ((_48235_exp < 0LL) && (_48235_exp >= -22LL)) {
			_case_begin_20166e34c:;
			{
				_48258_f = static_cast<jule::F64>(jule::div(_48258_f,_1eeb450b6_F64_POW10[(-(_48235_exp))]));
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		_match_end_20166e171:;
	}
	return std::make_tuple(_48258_f,_48266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _1eec7b31d_atof32exact(jule::U64 _51616_mantissa,jule::I32 _51635_exp,jule::Bool _51649_neg) {
	jule::F32 _51662_f = jule::F32();
	jule::Bool _51670_ok = jule::Bool();
	if (((_51616_mantissa >> _1ed3d4978_F32_INFO._field_mantbits) != 0LLU)) {
		return std::make_tuple(_51662_f,_51670_ok);
	}
	_51662_f=static_cast<jule::F32>(static_cast<jule::F32>(_51616_mantissa));
	if (_51649_neg) {
		_51662_f=static_cast<jule::F32>((-(_51662_f)));
	}
	{
		
		if ((_51635_exp == 0LL)) {
			_case_begin_201674a8e:;
			{
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		else if ((_51635_exp > 0LL) && (_51635_exp <= 17LL)) {
			_case_begin_201674b16:;
			{
				if ((_51635_exp > 10LL)) {
					_51662_f*=_1eeb4568d_F32_POW10[(_51635_exp - 10LL)];
					_51635_exp=10LL;
				}
				if ((_51662_f > 10000000LL) || (_51662_f < -10000000LL)) {
					return std::make_tuple(_51662_f,_51670_ok);
				}
				_51662_f = static_cast<jule::F32>(_51662_f * _1eeb4568d_F32_POW10[_51635_exp]);
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		else if ((_51635_exp < 0LL) && (_51635_exp >= -10LL)) {
			_case_begin_201674b8d:;
			{
				_51662_f = static_cast<jule::F32>(jule::div(_51662_f,_1eeb4568d_F32_POW10[(-(_51635_exp))]));
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		_match_end_2016749b2:;
	}
	return std::make_tuple(_51662_f,_51670_ok);
}



inline std::tuple<jule::F64,jule::I32> _1eec7b483_atof_hex(jule::Str _55213_s,_1ecda7acd_FloatInfo& _55222_flt,jule::U64 _55242_mantissa,jule::I32 _55261_exp,jule::Bool _55271_neg,jule::Bool _55282_trunc) {
	jule::I32 _5539_max_exp = ((static_cast<jule::I32>(1LL << _55222_flt._field_expbits) + _55222_flt._field_bias) - 2LL);
	jule::I32 _5549_min_exp = (_55222_flt._field_bias + 1LL);
	_55261_exp+=static_cast<jule::I32>(static_cast<jule::I32>(_55222_flt._field_mantbits));
	while ((_55242_mantissa != 0LLU) && ((_55242_mantissa >> static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_55222_flt._field_mantbits + 2LLU))))) == 0LLU)) {
		{
			_55242_mantissa<<=1LLU;
			(_55261_exp)--;
		}
	_iter_next_20167aaea:;
	}
	_iter_end_20167aaea:;
	if (_55282_trunc) {
		_55242_mantissa|=1LLU;
	}
	while (((_55242_mantissa >> static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((static_cast<jule::U32>(static_cast<jule::U32>(1LLU + _55222_flt._field_mantbits)) + 2LLU))))) != 0LLU)) {
		{
			_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_55242_mantissa >> 1LLU))) | static_cast<jule::U64>(static_cast<jule::U64>((_55242_mantissa & 1LLU))));
			(_55261_exp)++;
		}
	_iter_next_20167c305:;
	}
	_iter_end_20167c305:;
	while ((_55242_mantissa > 1LLU) && (_55261_exp < static_cast<jule::I32>(static_cast<jule::I32>((_5549_min_exp - 2LL))))) {
		{
			_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_55242_mantissa >> 1LLU))) | static_cast<jule::U64>(static_cast<jule::U64>((_55242_mantissa & 1LLU))));
			(_55261_exp)++;
		}
	_iter_next_20167c569:;
	}
	_iter_end_20167c569:;
	jule::U64 _58413_round = (_55242_mantissa & 3LLU);
	_55242_mantissa>>=2LLU;
	_58413_round|=static_cast<jule::U64>((_55242_mantissa & 1LLU));
	_55261_exp+=2LL;
	if ((_58413_round == 3LLU)) {
		(_55242_mantissa)++;
		if (_55242_mantissa == static_cast<jule::U64>(static_cast<jule::U64>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(1LLU + _55222_flt._field_mantbits)))))) {
			_55242_mantissa>>=1LLU;
			(_55261_exp)++;
		}
	}
	if (((_55242_mantissa >> _55222_flt._field_mantbits) == 0LLU)) {
		_55261_exp=_55222_flt._field_bias;
	}
	jule::I32 _59913_err = static_cast<jule::I32>(0LL);
	if (_55261_exp > _5539_max_exp) {
		_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(1LL << _55222_flt._field_mantbits));
		_55261_exp=static_cast<jule::I32>((_5539_max_exp + 1LL));
		_59913_err=static_cast<jule::I32>(1LL);
	}
	jule::U64 _60613_bits = _55242_mantissa & static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _55222_flt._field_mantbits)) - 1LLU))));
	_60613_bits|=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_55261_exp - _55222_flt._field_bias) & static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(((1LL << _55222_flt._field_expbits) - 1LL))))))) << _55222_flt._field_mantbits);
	if (_55271_neg) {
		_60613_bits|=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _55222_flt._field_mantbits)) << _55222_flt._field_expbits);
	}
	if (_55222_flt == _1ed3d4978_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_1eeb7c494_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_60613_bits))))),_59913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(_60613_bits)),_59913_err);
}



inline std::tuple<jule::F32,jule::I32,jule::I32> _1eec7b5e8_atof32(jule::Str _61711_s) {
	jule::F32 _61721_f = jule::F32();
	jule::I32 _61729_n = jule::I32();
	jule::I32 _61737_err = 0LL;
	{
		jule::F64 _61914_val;
		jule::I32 _61919__n;
		jule::Bool _61923_ok;
		std::tie(_61914_val,_61919__n,_61923_ok) = _1eec7a98d_special(_61711_s);
		if (_61923_ok) {
			_61721_f = static_cast<jule::F32>(static_cast<jule::F32>(_61914_val));
			_61729_n = _61919__n;
			_61737_err = static_cast<jule::I32>(0LL);
			return std::make_tuple(_61721_f,_61729_n,_61737_err);
		}
	}
	jule::U64 _62510_mantissa;
	jule::I32 _62520_exp;
	jule::Bool _62525_neg;
	jule::Bool _62530_trunc;
	jule::Bool _62537_hex;
	jule::I32 _62542__n;
	jule::Bool _62550_ok;
	std::tie(_62510_mantissa,_62520_exp,_62525_neg,_62530_trunc,_62537_hex,_62542__n,_62550_ok) = _1eec7ab03_read_float(_61711_s);
	_61729_n=_62542__n;
	if ((!(_62550_ok))) {
		_61721_f = 0LL;
		_61737_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	if (_62537_hex) {
		jule::F64 _63217_ff = 0LL;
		std::tie(_63217_ff,_61737_err) = _1eec7b483_atof_hex(_61711_s.slice(0LL,_61729_n),_1ed3d4978_F32_INFO,_62510_mantissa,_62520_exp,_62525_neg,_62530_trunc);
		_61721_f = static_cast<jule::F32>(static_cast<jule::F32>(_63217_ff));
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	{
		if ((!(_62530_trunc))) {
			std::tie(_61721_f,_62550_ok) = _1eec7b31d_atof32exact(_62510_mantissa,_62520_exp,_62525_neg);
			if (_62550_ok) {
				_61737_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
		}
		std::tie(_61721_f,_62550_ok) = _1eec7a350_eisel_lemire32(_62510_mantissa,_62520_exp,_62525_neg);
		if (_62550_ok) {
			if ((!(_62530_trunc))) {
				_61737_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
			jule::F32 _65421_f_up = 0LL;
			std::tie(_65421_f_up,_62550_ok) = _1eec7a350_eisel_lemire32(static_cast<jule::U64>((_62510_mantissa + 1LLU)),_62520_exp,_62525_neg);
			if (_62550_ok && (_61721_f == _65421_f_up)) {
				_61737_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
		}
	}
	_1eec80366_Decimal _66313_d = _1eec80366_Decimal();
	if ((!(_1eec7ac68_set(&_66313_d, _61711_s.slice(0LL,_61729_n))))) {
		_61721_f = 0LL;
		_61737_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	jule::U64 _66710_b;
	jule::Bool _66713_ovf;
	std::tie(_66710_b,_66713_ovf) = _1eec7adcd_float_bits(&_66313_d, _1ed3d4978_F32_INFO);
	_61721_f=static_cast<jule::F32>(_1eeb7c494_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_66710_b))));
	if (_66713_ovf) {
		_61737_err=static_cast<jule::I32>(1LL);
	}
	return std::make_tuple(_61721_f,_61729_n,_61737_err);
}



inline std::tuple<jule::F64,jule::I32,jule::I32> _1eec7b75d_atof64(jule::Str _67511_s) {
	jule::F64 _67521_f = jule::F64();
	jule::I32 _67529_n = jule::I32();
	jule::I32 _67537_err = 0LL;
	{
		jule::F64 _67714_val;
		jule::I32 _67719__n;
		jule::Bool _67723_ok;
		std::tie(_67714_val,_67719__n,_67723_ok) = _1eec7a98d_special(_67511_s);
		if (_67723_ok) {
			_67521_f = _67714_val;
			_67529_n = _67719__n;
			_67537_err = static_cast<jule::I32>(0LL);
			return std::make_tuple(_67521_f,_67529_n,_67537_err);
		}
	}
	jule::U64 _68310_mantissa;
	jule::I32 _68320_exp;
	jule::Bool _68325_neg;
	jule::Bool _68330_trunc;
	jule::Bool _68337_hex;
	jule::I32 _68342__n;
	jule::Bool _68350_ok;
	std::tie(_68310_mantissa,_68320_exp,_68325_neg,_68330_trunc,_68337_hex,_68342__n,_68350_ok) = _1eec7ab03_read_float(_67511_s);
	_67529_n=_68342__n;
	if ((!(_68350_ok))) {
		_67521_f = 0LL;
		_67537_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	if (_68337_hex) {
		std::tie(_67521_f,_67537_err) = _1eec7b483_atof_hex(_67511_s.slice(0LL,_67529_n),_1ed42ca59_F64_INFO,_68310_mantissa,_68320_exp,_68325_neg,_68330_trunc);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	{
		if ((!(_68330_trunc))) {
			std::tie(_67521_f,_68350_ok) = _1eec7b1a8_atof64exact(_68310_mantissa,_68320_exp,_68325_neg);
			if (_68350_ok) {
				_67537_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
		}
		std::tie(_67521_f,_68350_ok) = _1eec7a1da_eisel_lemire64(_68310_mantissa,_68320_exp,_68325_neg);
		if (_68350_ok) {
			if ((!(_68330_trunc))) {
				_67537_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
			jule::F64 _71121_f_up = 0LL;
			std::tie(_71121_f_up,_68350_ok) = _1eec7a1da_eisel_lemire64(static_cast<jule::U64>((_68310_mantissa + 1LLU)),_68320_exp,_68325_neg);
			if (_68350_ok && (_67521_f == _71121_f_up)) {
				_67537_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
		}
	}
	_1eec80366_Decimal _72013_d = _1eec80366_Decimal();
	if ((!(_1eec7ac68_set(&_72013_d, _67511_s.slice(0LL,_67529_n))))) {
		_67521_f = 0LL;
		_67537_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	jule::U64 _72410_b;
	jule::Bool _72413_ovf;
	std::tie(_72410_b,_72413_ovf) = _1eec7adcd_float_bits(&_72013_d, _1ed42ca59_F64_INFO);
	_67521_f=static_cast<jule::F64>(_1eeb7cb04_f64_from_bits(_72410_b));
	if (_72413_ovf) {
		_67537_err=static_cast<jule::I32>(1LL);
	}
	return std::make_tuple(_67521_f,_67529_n,_67537_err);
}



inline std::tuple<jule::F64,jule::I32,jule::I32> _1eec7b8c3_parse_float_prefix(jule::Str _73223_s,jule::I32 _73231_bit_size) {
	if ((_73231_bit_size == 32LL)) {
		jule::F32 _73414_f;
		jule::I32 _73417_n;
		jule::I32 _73420_err;
		std::tie(_73414_f,_73417_n,_73420_err) = _1eec7b5e8_atof32(_73223_s);
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_73414_f)),_73417_n,_73420_err);
	}
	jule::F64 _73810_f;
	jule::I32 _73813_n;
	jule::I32 _73816_err;
	std::tie(_73810_f,_73813_n,_73816_err) = _1eec7b75d_atof64(_73223_s);
	return std::make_tuple(_73810_f,_73813_n,_73816_err);
}



inline jule::Exceptional<jule::F64> _1eec7ba38_parse_float(jule::Str _76620_s,jule::I32 _76628_bit_size) {
	jule::F64 _76710_f;
	jule::I32 _76713_n;
	jule::I32 _76716_err;
	std::tie(_76710_f,_76713_n,_76716_err) = _1eec7b8c3_parse_float_prefix(_76620_s,_76628_bit_size);
	if ((_76713_n != static_cast<jule::I32>(static_cast<jule::I32>(_76620_s.len()))) && ((_76716_err == static_cast<jule::I32>(0LL)) || (_76716_err != static_cast<jule::I32>(2LL)))) {
		return jule::Exceptional<jule::F64>(static_cast<jule::I32>(2LL));
	}
	if (_76716_err != static_cast<jule::I32>(0LL)) {
		return jule::Exceptional<jule::F64>(_76716_err);
	}
	return jule::Exceptional<jule::F64>(jule::Any(),_76710_f);
}



inline void _1eec7bd57_ryu_ftoa_fixed32(_1ed45d6e4_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::I32 _4958_exp,jule::I32 _4968_prec) {
	if ((_4968_prec < 0LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: std/conv/ftoaryu.jule:51:9"));;
	}
	if ((_4968_prec > 9LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: std/conv/ftoaryu.jule:54:9"));;
	}
	if ((_4947_mant == 0LLU)) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::I32 _6213_e2 = _4958_exp;
	jule::I32 _639_b = _1eec52a31_len32(_4947_mant);
	if ((_639_b < 25LL)) {
		_4947_mant<<=static_cast<jule::U32>(static_cast<jule::U32>(25LL - _639_b));
		_6213_e2+=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_639_b))) - 25LL));
	}
	jule::I32 _749_q = (((-(_1eec7c40c_mul_by_log2_log10(static_cast<jule::I32>((_6213_e2 + 24LL))))) + _4968_prec) - 1LL);
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::I32 _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _1eec7d2ba_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if ((_8118_dexp2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: std/conv/ftoaryu.jule:83:9"));;
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _1eec7db6c_divisible_by_pow5(static_cast<jule::U64>(static_cast<jule::U64>(_4947_mant)),static_cast<jule::I32>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::U32 _949_extra = static_cast<jule::U32>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>(((1LL << _949_extra) - 1LL));
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > static_cast<jule::U32>(static_cast<jule::U32>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_949_extra - 1LLU))))))) || ((_9713_dfrac == static_cast<jule::U32>(static_cast<jule::U32>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_949_extra - 1LLU))))))) && (!(_8129_d0)))) || (((_9713_dfrac == static_cast<jule::U32>(static_cast<jule::U32>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_949_extra - 1LLU))))))) && _8129_d0) && ((_8114_di & 1LLU) == 1LLU));
	} else {
		_9913_round_up=((_9713_dfrac >> static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_949_extra - 1LLU))))) == 1LLU);
	}
	if ((_9713_dfrac != 0LLU)) {
		_8129_d0=false;
	}
	_1eec7c132_format_decimal(_4926_d,static_cast<jule::U64>(static_cast<jule::U64>(_8114_di)),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _1eec7bebc_ryu_ftoa_fixed64(_1ed45d6e4_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::I32 _12358_exp,jule::I32 _12368_prec) {
	if ((_12368_prec > 18LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: std/conv/ftoaryu.jule:125:9"));;
	}
	if ((_12347_mant == 0LLU)) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::I32 _13313_e2 = _12358_exp;
	jule::I32 _1349_b = _1eec52d3e_len64(_12347_mant);
	if ((_1349_b < 55LL)) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(55LL - _1349_b))));
		_13313_e2+=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_1349_b))) - 55LL));
	}
	jule::I32 _1489_q = (((-(_1eec7c40c_mul_by_log2_log10(static_cast<jule::I32>((_13313_e2 + 54LL))))) + _12368_prec) - 1LL);
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::I32 _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _1eec7d782_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if ((_15518_dexp2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: std/conv/ftoaryu.jule:157:9"));;
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _1eec7db6c_divisible_by_pow5(_12347_mant,static_cast<jule::I32>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::U32 _1689_extra = static_cast<jule::U32>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>(((1LL << _1689_extra) - 1LL));
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > static_cast<jule::U64>(static_cast<jule::U64>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_1689_extra - 1LLU))))))) || ((_17113_dfrac == static_cast<jule::U64>(static_cast<jule::U64>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_1689_extra - 1LLU))))))) && (!(_15529_d0)))) || (((_17113_dfrac == static_cast<jule::U64>(static_cast<jule::U64>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_1689_extra - 1LLU))))))) && _15529_d0) && ((_15514_di & 1LLU) == 1LLU));
	} else {
		_17313_round_up=((_17113_dfrac >> static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_1689_extra - 1LLU))))) == 1LLU);
	}
	if ((_17113_dfrac != 0LLU)) {
		_15529_d0=false;
	}
	_1eec7c132_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _1eec7c132_format_decimal(_1ed45d6e4_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::I32 _20490_prec) {
	jule::U64 _2059_max = _1eeac021c_U64_POW10[_20490_prec];
	jule::I32 _20613_trimmed = 0LL;
	while (_20445_m >= _2059_max) {
		{
			jule::U64 _20814_a = (_20445_m / 10LLU);
			jule::U64 _20817_b = (_20445_m % 10LL);
			std::tie(_20814_a,_20817_b) = std::make_tuple((_20445_m / 10LLU),(_20445_m % 10LL));
			_20445_m=_20814_a;
			(_20613_trimmed)++;
			if ((_20817_b > 5LLU)) {
				_20474_round_up=true;
			} else if ((_20817_b < 5LLU)) {
				_20474_round_up=false;
			} else {
				_20474_round_up=_20457_trunc || ((_20445_m & 1LLU) == 1LLU);
			}
			if ((_20817_b != 0LLU)) {
				_20457_trunc=true;
			}
		}
	_iter_next_202702038:;
	}
	_iter_end_202702038:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m/=10LLU;
		(_20613_trimmed)++;
	}
	jule::U32 _23313_n = static_cast<jule::U32>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::I32>(static_cast<jule::I32>(_20490_prec));
	jule::U64 _23513_v = _20445_m;
	while ((_23513_v >= 100LLU)) {
		{
			jule::U64 _23717_v1 = 0LLU;
			jule::U64 _23817_v2 = 0LLU;
			if (((_23513_v >> 32LLU) == 0LLU)) {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U32>(_23513_v) / 100LLU))),static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U32>(_23513_v) % 100LL))));
			} else {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>((_23513_v / 100LLU)),static_cast<jule::U64>((_23513_v % 100LL)));
			}
			_23313_n-=2LLU;
			_20424_d._field_d[static_cast<jule::I32>((_23313_n + 1LLU))]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _23817_v2) + 1LLU))]);
			_20424_d._field_d[static_cast<jule::I32>((_23313_n + 0LLU))]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _23817_v2) + 0LLU))]);
			_23513_v=_23717_v1;
		}
	_iter_next_20270569b:;
	}
	_iter_end_20270569b:;
	if ((_23513_v > 0LLU)) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::I32>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _23513_v) + 1LLU))]);
	}
	if ((_23513_v >= 10LLU)) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::I32>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(2LL * _23513_v)]);
	}
	while (_20424_d._field_d[(_20424_d._field_nd - 1LL)] == '0') {
		{
			(_20424_d._field_nd)--;
			(_20613_trimmed)++;
		}
	_iter_next_20270bbbe:;
	}
	_iter_end_20270bbbe:;
	_20424_d._field_dp=static_cast<jule::I32>(_20424_d._field_nd + _20613_trimmed);
}



inline void _1eec7c297_ryu_ftoa_shortest(_1ed45d6e4_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::I32 _26559_exp,_1ecda7acd_FloatInfo& _26570_flt) {
	if ((_26548_mant == 0LLU)) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_1eec4bd16_trailing_zeros64(_26548_mant) >= static_cast<jule::I32>(static_cast<jule::I32>((-(_26559_exp)))))) {
		_26548_mant>>=static_cast<jule::U32>(static_cast<jule::U32>((-(_26559_exp))));
		_1eec7c84c_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::I32 _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _1eec7c6d7_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if ((_27726_e2 == 0LL)) {
		_1eec7c84c_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::I32 _2839_q = (_1eec7c40c_mul_by_log2_log10(static_cast<jule::I32>((-(_27726_e2)))) + 1LL);
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _1ed3d4978_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _1eec7d2ba_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27710_ml)),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _1eec7d2ba_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27714_mc)),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _1eec7d2ba_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27718_mu)),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(_29417_dl32)),static_cast<jule::U64>(static_cast<jule::U64>(_29517_dc32)),static_cast<jule::U64>(static_cast<jule::U64>(_29617_du32)));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _1eec7d782_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _1eec7d782_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _1eec7d782_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if ((_27726_e2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: std/conv/ftoaryu.jule:307:9"));;
	}
	if ((_2839_q > 55LL)) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_1eec7db6c_divisible_by_pow5(_27710_ml,static_cast<jule::I32>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_1eec7db6c_divisible_by_pow5(_27714_mc,static_cast<jule::I32>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_1eec7db6c_divisible_by_pow5(_27718_mu,static_cast<jule::I32>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::U32 _3299_extra = static_cast<jule::U32>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>(((1LL << _3299_extra) - 1LL));
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LLU);
	if (_29213_du0 && (_33613_fracu == 0LLU)) {
		_34213_uok=((_26548_mant & 1LLU) == 0LLU);
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > static_cast<jule::U64>(static_cast<jule::U64>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_3299_extra - 1LLU))))))) || ((_33413_fracc == static_cast<jule::U64>(static_cast<jule::U64>(1LLU << static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_3299_extra - 1LLU))))))) && ((_28813_dc & 1LLU) == 1LLU));
	} else {
		_35113_cup=((_33413_fracc >> static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_3299_extra - 1LLU))))) == 1LLU);
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LLU)) && ((_26548_mant & 1LLU) == 0LLU);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LLU);
	_1eec7c84c_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::I32 _1eec7c40c_mul_by_log2_log10(jule::I32 _38322_x) {
	return static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_38322_x * 78913LL)))) >> 18LL));
}



inline jule::I32 _1eec7c572_mul_by_log10_log2(jule::I32 _39322_x) {
	return static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_39322_x * 108853LL)))) >> 15LL));
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::I32> _1eec7c6d7_compute_bounds(jule::U64 _40119_mant,jule::I32 _40130_exp,_1ecda7acd_FloatInfo& _40218_flt) {
	jule::U64 _40236_lower = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40262_upper = jule::U64();
	jule::I32 _40274_e2 = jule::I32();
	if ((_40119_mant != static_cast<jule::U64>(static_cast<jule::U64>(1LLU << _40218_flt._field_mantbits))) || (_40130_exp == static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_40218_flt._field_bias + 1LL))) - static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_40218_flt._field_mantbits))))))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(2LLU * _40119_mant)) - 1LLU)),static_cast<jule::U64>(2LLU * _40119_mant),static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(2LLU * _40119_mant)) + 1LLU)));
		_40274_e2=static_cast<jule::I32>((_40130_exp - 1LL));
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(4LLU * _40119_mant)) - 1LLU)),static_cast<jule::U64>(4LLU * _40119_mant),static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(4LLU * _40119_mant)) + 2LLU)));
		_40274_e2=static_cast<jule::I32>((_40130_exp - 2LL));
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _1eec7c84c_ryu_digits(_1ed45d6e4_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _1eec7de7a_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _1eec7de7a_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _1eec7de7a_divmod1e9(_41563_upper);
	if ((_41810_uhi == 0LLU)) {
		_1eec7cd03_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if ((_41619_llo != 0LLU)) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LLU);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_1eec7cd03_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::U32 _43417_n = static_cast<jule::U32>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		while ((_43517_v > 0LLU)) {
			{
				jule::U32 _43718_v1 = (_43517_v / 10LLU);
				jule::U32 _43722_v2 = (_43517_v % 10LL);
				std::tie(_43718_v1,_43722_v2) = std::make_tuple((_43517_v / 10LLU),(_43517_v % 10LL));
				_43517_v=_43718_v1;
				(_43417_n)--;
				_41520_d._field_d[static_cast<jule::I32>(_43417_n)]=static_cast<jule::U8>(static_cast<jule::U8>(_43722_v2 + '0'));
			}
		_iter_next_202732cd3:;
		}
		_iter_end_202732cd3:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::I32>(_43417_n));
		_41520_d._field_nd=static_cast<jule::I32>(static_cast<jule::I32>(9LL - _43417_n));
		_1eec7cd03_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::I32>((_41520_d._field_nd + 8LL)));
	}
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[(_41520_d._field_nd - 1LL)] == '0')) {
		{
			(_41520_d._field_nd)--;
		}
	_iter_next_20273308b:;
	}
	_iter_end_20273308b:;
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0')) {
		{
			(_41520_d._field_nd)--;
			(_41520_d._field_dp)--;
			_41520_d._field_d=_41520_d._field_d.slice(1LL);
		}
	_iter_next_202736930:;
	}
	_iter_end_202736930:;
}



inline void _1eec7cd03_ryu_digits32(_1ed45d6e4_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::I32 _46166_endindex) {
	if ((_46121_upper == 0LLU)) {
		_46022_d._field_dp=static_cast<jule::I32>((_46166_endindex + 1LL));
		return;
	}
	jule::I32 _46613_trimmed = 0LL;
	jule::I32 _46913_c_next_digit = 0LL;
	while ((_46121_upper > 0LLU)) {
		{
			jule::U32 _47613_l = ((_46043_lower + 9LLU) / 10LLU);
			jule::U32 _47718_c = (_46059_central / 10LLU);
			jule::U32 _47725_cdigit = (_46059_central % 10LL);
			std::tie(_47718_c,_47725_cdigit) = std::make_tuple((_46059_central / 10LLU),(_46059_central % 10LL));
			jule::U32 _47813_u = (_46121_upper / 10LLU);
			if (_47613_l > _47813_u) {
				goto _iter_end_202739724;
			}
			if ((_47613_l == static_cast<jule::U32>(static_cast<jule::U32>((_47718_c + 1LLU)))) && (_47718_c < _47813_u)) {
				(_47718_c)++;
				_47725_cdigit=0LLU;
				_46151_cup=false;
			}
			(_46613_trimmed)++;
			_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
			_46913_c_next_digit=static_cast<jule::I32>(static_cast<jule::I32>(_47725_cdigit));
			std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
		}
	_iter_next_202739724:;
	}
	_iter_end_202739724:;
	if ((_46613_trimmed > 0LL)) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LLU) == 1LLU));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::I32 _51813_n = _46166_endindex;
	while (_51813_n > _46022_d._field_nd) {
		{
			jule::U32 _52014_v1 = (_51713_v / 100LLU);
			jule::U32 _52018_v2 = (_51713_v % 100LL);
			std::tie(_52014_v1,_52018_v2) = std::make_tuple((_51713_v / 100LLU),(_51713_v % 100LL));
			_46022_d._field_d[_51813_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _52018_v2) + 1LLU))]);
			_46022_d._field_d[(_51813_n - 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _52018_v2) + 0LLU))]);
			_51813_n-=2LL;
			_51713_v=_52014_v1;
		}
	_iter_next_2027411ed:;
	}
	_iter_end_2027411ed:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[_51813_n]=static_cast<jule::U8>(static_cast<jule::U8>(_51713_v + '0'));
	}
	_46022_d._field_nd=static_cast<jule::I32>((_46166_endindex + 1LL));
	_46022_d._field_dp=static_cast<jule::I32>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::I32,jule::Bool> _1eec7d2ba_mult64bit_pow10(jule::U32 _54220_m,jule::I32 _54232_e2,jule::I32 _54241_q) {
	jule::U32 _54251_resM = jule::U32();
	jule::I32 _54262_resE = jule::I32();
	jule::Bool _54273_exact = jule::Bool();
	if ((_54241_q == 0LL)) {
		_54251_resM = static_cast<jule::U32>((_54220_m << 6LLU));
		_54262_resE = static_cast<jule::I32>((_54232_e2 - 6LL));
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: std/conv/ftoaryu.jule:549:9"));;
	}
	jule::U64 _55113_pow = _1ed489412_DETAILED_POWS_OF_TEN[(_54241_q - -348LL)][1LL];
	if ((_54241_q < 0LL)) {
		_55113_pow+=1LLU;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _1eec5588b_mul64(static_cast<jule::U64>(static_cast<jule::U64>(_54220_m)),_55113_pow);
	_54232_e2+=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_1eec7c572_mul_by_log10_log2(_54241_q))) - 63LL))) + 57LL));
	_54251_resM = static_cast<jule::U32>(static_cast<jule::U32>((_55610_hi << 7LLU) | static_cast<jule::U64>(static_cast<jule::U64>((_55614_lo >> 57LLU)))));
	_54262_resE = _54232_e2;
	_54273_exact = ((_55614_lo << 7LLU) == 0LLU);
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::I32,jule::Bool> _1eec7d782_mult128bit_pow10(jule::U64 _57021_m,jule::I32 _57033_e2,jule::I32 _57042_q) {
	jule::U64 _57052_resM = jule::U64();
	jule::I32 _57063_resE = jule::I32();
	jule::Bool _57074_exact = jule::Bool();
	if ((_57042_q == 0LL)) {
		_57052_resM = static_cast<jule::U64>((_57021_m << 8LLU));
		_57063_resE = static_cast<jule::I32>((_57033_e2 - 8LL));
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: std/conv/ftoaryu.jule:577:9"));;
	}
	jule::Array<jule::U64,2> _57913_pow = _1ed489412_DETAILED_POWS_OF_TEN[(_57042_q - -348LL)];
	if ((_57042_q < 0LL)) {
		_57913_pow[0LL]+=1LLU;
	}
	_57033_e2+=static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(_1eec7c572_mul_by_log10_log2(_57042_q))) - 127LL))) + 119LL));
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _1eec5588b_mul64(_57021_m,_57913_pow[0LL]);
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _1eec5588b_mul64(_57021_m,_57913_pow[1LL]);
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _1eec53c85_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_58814_h1 << 9LLU))) | static_cast<jule::U64>(static_cast<jule::U64>((_58910_mid >> 55LLU))));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LLU) == 0LLU) && (_58714_l0 == 0LLU);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _1eec7db6c_divisible_by_pow5(jule::U64 _59426_m,jule::I32 _59434_k) {
	if ((_59426_m == 0LLU)) {
		return true;
	}
	jule::I32 _59813_i = 0LL;
	for (; _59813_i < _59434_k; (_59813_i)++) {
		{
			if (((_59426_m % 5LL) != 0LLU)) {
				return false;
			}
			_59426_m/=5LLU;
		}
	_iter_next_202753a6d:;
	}
	_iter_end_202753a6d:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _1eec7de7a_divmod1e9(jule::U64 _61014_x) {
	{
		return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>((_61014_x / 1000000000LL))),static_cast<jule::U32>(static_cast<jule::U32>((_61014_x % 1000000000LL))));
	}
	jule::U64 _61510_hi;
	std::tie(_61510_hi,std::ignore) = _1eec5588b_mul64(static_cast<jule::U64>((_61014_x >> 1LLU)),9903520314283042200LLU);
	jule::U64 _6169_q = (_61510_hi >> 28LLU);
	return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>(_6169_q)),static_cast<jule::U32>(static_cast<jule::U32>(_61014_x - static_cast<jule::U64>(static_cast<jule::U64>((_6169_q * 1000000000LL))))));
}



inline void _1eec82005_trim(_1eec80366_Decimal& _27514_a) {
	while ((_27514_a._field_nd > 0LL) && (_27514_a._field_d[(_27514_a._field_nd - 1LL)] == '0')) {
		{
			(_27514_a._field_nd)--;
		}
	_iter_next_202757d3b:;
	}
	_iter_end_202757d3b:;
	if ((_27514_a._field_nd == 0LL)) {
		_27514_a._field_dp=0LL;
	}
}



inline void _1eec82357_right_shift(_1eec80366_Decimal& _28521_a,jule::U32 _28533_k) {
	jule::I32 _28613_r = 0LL;
	jule::I32 _28713_w = 0LL;
	jule::U32 _29013_n = 0LLU;
	for (; ((_29013_n >> _28533_k) == 0LLU); (_28613_r)++) {
		{
			if (_28613_r >= _28521_a._field_nd) {
				if ((_29013_n == 0LLU)) {
					_28521_a._field_nd=0LL;
					return;
				}
				while (((_29013_n >> _28533_k) == 0LLU)) {
					{
						_29013_n=static_cast<jule::U32>((_29013_n * 10LLU));
						(_28613_r)++;
					}
				_iter_next_20275bd95:;
				}
				_iter_end_20275bd95:;
				goto _iter_end_20275a3c1;
			}
			jule::U32 _30413_c = static_cast<jule::U32>(_28521_a._field_d[_28613_r]);
			_29013_n=static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_29013_n * 10LLU))) + _30413_c)) - '0');
		}
	_iter_next_20275a3c1:;
	}
	_iter_end_20275a3c1:;
	_28521_a._field_dp-=static_cast<jule::I32>((_28613_r - 1LL));
	jule::U32 _3099_mask = static_cast<jule::U32>((static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(1LL << _28533_k))) - 1LLU));
	for (; _28613_r < _28521_a._field_nd; (_28613_r)++) {
		{
			jule::U32 _31313_c = static_cast<jule::U32>(_28521_a._field_d[_28613_r]);
			jule::U32 _31413_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_31413_dig + '0'));
			(_28713_w)++;
			_29013_n=static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>((_29013_n * 10LLU))) + _31313_c)) - '0');
		}
	_iter_next_20275e282:;
	}
	_iter_end_20275e282:;
	while ((_29013_n > 0LLU)) {
		{
			jule::U32 _32313_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			if ((_28713_w < 800LL)) {
				_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_32313_dig + '0'));
				(_28713_w)++;
			} else if ((_32313_dig > 0LLU)) {
				_28521_a._field_trunc=true;
			}
			_29013_n=static_cast<jule::U32>((_29013_n * 10LLU));
		}
	_iter_next_2027608c1:;
	}
	_iter_end_2027608c1:;
	_28521_a._field_nd=_28713_w;
	_1eec82005_trim(_28521_a);
}



inline jule::Bool _1eec82863_prefix_is_less_than(jule::Array<jule::U8,800> _33924_b,jule::I32 _33938_end,jule::Str _33948_s) {
	jule::I32 _34013_i = 0LL;
	for (; _34013_i < static_cast<jule::I32>(static_cast<jule::I32>(_33948_s.len())); (_34013_i)++) {
		{
			if (_34013_i >= _33938_end) {
				return true;
			}
			if (_33924_b[_34013_i] != _33948_s[_34013_i]) {
				return _33924_b[_34013_i] < _33948_s[_34013_i];
			}
		}
	_iter_next_20276494c:;
	}
	_iter_end_20276494c:;
	return false;
}



inline void _1eec82bb5_left_shift(_1eec80366_Decimal& _35320_a,jule::U32 _35332_k) {
	jule::I32 _35413_delta = _1eec7ebc3_LEFTCHEATS[static_cast<jule::I32>(_35332_k)]._field_delta;
	if (_1eec82863_prefix_is_less_than(_35320_a._field_d,_35320_a._field_nd,_1eec7ebc3_LEFTCHEATS[static_cast<jule::I32>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::I32 _35913_r = _35320_a._field_nd;
	jule::I32 _36013_w = _35320_a._field_nd + _35413_delta;
	jule::U32 _36313_n = 0LLU;
	(_35913_r)--;
	for (; (_35913_r >= 0LL); (_35913_r)--) {
		{
			_36313_n+=static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(static_cast<jule::U32>(_35320_a._field_d[_35913_r]))) - '0'))) << _35332_k);
			jule::U32 _36713_quo = (_36313_n / 10LLU);
			jule::U32 _36813_rem = _36313_n - static_cast<jule::U32>(static_cast<jule::U32>(10LLU * _36713_quo));
			(_36013_w)--;
			if ((_36013_w < 800LL)) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_36813_rem + '0'));
			} else if ((_36813_rem != 0LLU)) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_36713_quo;
		}
	_iter_next_202768555:;
	}
	_iter_end_202768555:;
	while ((_36313_n > 0LLU)) {
		{
			jule::U32 _38013_quo = (_36313_n / 10LLU);
			jule::U32 _38113_rem = _36313_n - static_cast<jule::U32>(static_cast<jule::U32>(10LLU * _38013_quo));
			(_36013_w)--;
			if ((_36013_w < 800LL)) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_38113_rem + '0'));
			} else if ((_38113_rem != 0LLU)) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_38013_quo;
		}
	_iter_next_20276ba75:;
	}
	_iter_end_20276ba75:;
	_35320_a._field_nd+=_35413_delta;
	if ((_35320_a._field_nd >= 800LL)) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_1eec82005_trim(_35320_a);
}



inline jule::Bool _1eec830a0_should_round_up(_1eec80366_Decimal& _40021_a,jule::I32 _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[_40033_nd] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (((_40021_a._field_d[(_40033_nd - 1LL)] - '0') & 1LL) != 0LLU);
	}
	return _40021_a._field_d[_40033_nd] >= '5';
}



inline jule::Str _1eec84227_fmt_uint(jule::U64 _6217_i,jule::I32 _6225_base) {
	if ((true && (_6217_i < 100LLU)) && (_6225_base == 10LL)) {
		return _1eec84cb6_small(static_cast<jule::I32>(static_cast<jule::I32>(_6217_i)));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _1eec85745_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _1eec84656_fmt_int(jule::I64 _7316_i,jule::I32 _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _1eec84cb6_small(static_cast<jule::I32>(static_cast<jule::I32>(_7316_i)));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _1eec85745_fmt_bits(nullptr,static_cast<jule::U64>(static_cast<jule::U64>(_7316_i)),_7324_base,(_7316_i < 0LL),false);
	return _7713_s;
}



inline jule::Str _1eec84964_itoa(jule::I32 _8213_i) {
	return _1eec84656_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_8213_i)),10LL);
}



inline jule::Str _1eec84cb6_small(jule::I32 _8710_i) {
	if ((_8710_i < 10LL)) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8710_i,(_8710_i + 1LL));
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(_8710_i << 1LLU,((_8710_i << 1LLU) + 2LL));
}



inline jule::Bool _1eec850c4_is_power_of_two(jule::I32 _9420_x) {
	return ((_9420_x & static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>((_9420_x - 1LL))))) == 0LL);
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1eec85745_fmt_bits(jule::Slice<jule::U8> _10317_dst,jule::U64 _10334_u,jule::I32 _10342_base,jule::Bool _10353_neg,jule::Bool _10364_append_) {
	jule::Slice<jule::U8> _10381_d = jule::Slice<jule::U8>();
	jule::Str _10392_s = jule::Str();
	if ((_10342_base < 2LL) || (_10342_base > 36LL)) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: std/conv/itoa.jule:105:9"));;
	}
	jule::Slice<jule::U8> _10913_a = jule::Slice<jule::U8>::alloc(65LL);
	jule::I32 _11013_i = _10913_a.len();
	if (_10353_neg) {
		_10334_u=static_cast<jule::U64>((-(_10334_u)));
	}
	if ((_10342_base == 10LL)) {
		
		jule::U32 _15117_us = static_cast<jule::U32>(_10334_u);
		while ((_15117_us >= 100LLU)) {
			{
				jule::U32 _15317_is = (_15117_us % 100LL) << 1LLU;
				_15117_us/=100LLU;
				_11013_i-=2LL;
				_10913_a[(_11013_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((_15317_is + 1LLU))]);
				_10913_a[(_11013_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((_15317_is + 0LLU))]);
			}
		_iter_next_20277cc1d:;
		}
		_iter_end_20277cc1d:;
		jule::U32 _16113_is = _15117_us << 1LLU;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((_16113_is + 1LLU))]);
		if ((_15117_us >= 10LLU)) {
			(_11013_i)--;
			_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(_16113_is)]);
		}
	} else if (_1eec850c4_is_power_of_two(_10342_base)) {
		jule::U32 _17613_shift = (static_cast<jule::U32>(_1eec4b046_trailing_zeros(static_cast<jule::U32>(static_cast<jule::U32>(_10342_base)))) & 7LLU);
		jule::U64 _17713_b = static_cast<jule::U64>(_10342_base);
		jule::U32 _17813_m = (static_cast<jule::U32>(_10342_base) - 1LLU);
		while (_10334_u >= _17713_b) {
			{
				(_11013_i)--;
				_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>(_10334_u) & _17813_m)]);
				_10334_u>>=_17613_shift;
			}
		_iter_next_20278770b:;
		}
		_iter_end_20278770b:;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>(_10334_u))]);
	} else {
		jule::U64 _18913_b = static_cast<jule::U64>(_10342_base);
		while (_10334_u >= _18913_b) {
			{
				(_11013_i)--;
				jule::U64 _19517_q = jule::div(_10334_u,_18913_b);
				_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>(_10334_u - static_cast<jule::U64>(static_cast<jule::U64>(_19517_q * _18913_b))))]);
				_10334_u=_19517_q;
			}
		_iter_next_202789e39:;
		}
		_iter_end_202789e39:;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>(_10334_u))]);
	}
	if (_10353_neg) {
		(_11013_i)--;
		_10913_a[_11013_i]='-';
	}
	if (_10364_append_) {
		_10381_d=jule::append(_10317_dst,_10913_a.slice(_11013_i));
		return std::make_tuple(_10381_d,_10392_s);
	}
	_10392_s=static_cast<jule::Str>(_10913_a.slice(_11013_i));
	return std::make_tuple(_10381_d,_10392_s);
}



inline void _1eed2dbc8_lshift_unsig(_1eed1e24b_Const& _56722_c,_1eed1e24b_Const& _56733_x) {
	jule::U64 _5689_l = _1eed21a01_as_u64(&_56722_c);
	jule::U64 _5699_r = _1eed21a01_as_u64(&_56733_x);
	_1eed22419_set_u64(&_56722_c, static_cast<jule::U64>(_5689_l << _5699_r));
}



inline void _1eed2e06e_rshift_unsig(_1eed1e24b_Const& _57322_c,_1eed1e24b_Const& _57333_x) {
	jule::U64 _5749_l = _1eed21a01_as_u64(&_57322_c);
	jule::U64 _5759_r = _1eed21a01_as_u64(&_57333_x);
	_1eed22419_set_u64(&_57322_c, static_cast<jule::U64>(_5749_l >> _5759_r));
}



inline jule::Str _1eed95910_real_kind_of(jule::Str _4521_kind) {
	{
		auto &_match_expr{ _4521_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1ee70d5a8:;
			{
				return _1eed953d2_SYS_INT;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_1ee70d61e:;
			{
				return _1eed95503_SYS_UINT;
			}
		}
		else {
			_case_begin_1ee70941c:;
			{
				return _4521_kind;
			}
		}
		_match_end_1ee709708:;
	}
}



inline jule::I32 _1eed95ba7_bitsize_of(jule::Str _5919_k) {
	{
		auto &_match_expr{ _5919_k };
		
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_1ee7103ce:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_1ee710445:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_1ee710005:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_1ee71006b:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_1ee7100e3:;
			{
				return _1eed952b1_BIT_SIZE;
			}
		}
		else {
			_case_begin_1ee708be1:;
			{
				return -1LL;
			}
		}
		_match_end_1ee70ec80:;
	}
}



inline jule::Str _1eed95ed7_int_from_bits(jule::I32 _8622_bits) {
	{
		auto &_match_expr{ _8622_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_1ee71238c:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_1ee71249c:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_1ee712513:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1ee71218e:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_1ee710be8:;
			{
				return jule::Str();
			}
		}
		_match_end_1ee711b72:;
	}
}



inline jule::Str _1eed962e5_uint_from_bits(jule::I32 _10423_bits) {
	{
		auto &_match_expr{ _10423_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_1ee713888:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_1ee713998:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_1ee713a0e:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1ee71368a:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_1ee712d82:;
			{
				return jule::Str();
			}
		}
		_match_end_1ee713426:;
	}
}



inline jule::Str _1eed96603_float_from_bits(jule::I32 _12224_bits) {
	{
		auto &_match_expr{ _12224_bits };
		
		if (_match_expr == 32LL) {
			_case_begin_1ee714d2e:;
			{
				return jule::Str("f32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_1ee714d95:;
			{
				return jule::Str("f64", 3);
			}
		}
		else {
			_case_begin_1ee71437d:;
			{
				return jule::Str();
			}
		}
		_match_end_1ee714922:;
	}
}



inline jule::Bool _1eed9734b_check_bit_float(jule::Str _15024_val,jule::I32 _15034_bit) {
	({
		auto except = _1eec7ba38_parse_float(_15024_val,_15034_bit);
		(except.ok()) ? (except.result) : ({{
			return false;
			return false;
		} jule::F64();});
	});
	return true;
}



inline jule::I32 _1eed97659_bitsize_of_float(jule::F64 _16025_x) {
	{
		
		if ((-340282346638528860000000000000000000000.0 <= _16025_x) && (_16025_x <= 340282346638528860000000000000000000000.0)) {
			_case_begin_1ee719e00:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_1ee71a7a2:;
			{
				return 64LL;
			}
		}
		_match_end_1ee71a6d6:;
	}
}



inline jule::I32 _1eed97967_bitsize_of_int(jule::I64 _17623_x) {
	{
		
		if ((-128LL <= _17623_x) && (_17623_x <= 127LL)) {
			_case_begin_1ee71bbb0:;
			{
				return 8LL;
			}
		}
		else if ((-32768LL <= _17623_x) && (_17623_x <= 32767LL)) {
			_case_begin_1ee71bc26:;
			{
				return 16LL;
			}
		}
		else if ((-2147483648LL <= _17623_x) && (_17623_x <= 2147483647LL)) {
			_case_begin_1ee71bd03:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_1ee71b352:;
			{
				return 64LL;
			}
		}
		_match_end_1ee71ba4a:;
	}
}



inline jule::I32 _1eed97c75_bitsize_of_uint(jule::U64 _19624_x) {
	{
		
		if ((_19624_x <= 255LLU)) {
			_case_begin_1ee71de37:;
			{
				return 8LL;
			}
		}
		else if ((_19624_x <= 65535LLU)) {
			_case_begin_1ee71de9d:;
			{
				return 16LL;
			}
		}
		else if ((_19624_x <= 4294967295LLU)) {
			_case_begin_1ee71e07a:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_1ee71dc06:;
			{
				return 64LL;
			}
		}
		_match_end_1ee71db07:;
	}
}



inline void _1eed97e1d_update_target(void) {
	{
		{
			auto &_match_expr{ _208e25425_ARCH };
			
			if (_match_expr == jule::Str("arm64", 5) || _match_expr == jule::Str("amd64", 5)) {
				_case_begin_1ee71e0e1:;
				{
					_1eed952b1_BIT_SIZE=64LL;
					_1eed953d2_SYS_INT=jule::Str("i64", 3);
					_1eed95503_SYS_UINT=jule::Str("u64", 3);
				}
			}
			else if (_match_expr == jule::Str("i386", 4)) {
				_case_begin_1ee7200c0:;
				{
					_1eed952b1_BIT_SIZE=32LL;
					_1eed953d2_SYS_INT=jule::Str("i32", 3);
					_1eed95503_SYS_UINT=jule::Str("u32", 3);
				}
			}
			_match_end_1ee720598:;
		}
	}
}



inline void _1eed980b6_init(void) {
	_1eed97e1d_update_target();
}



inline jule::F64 _1eed9a8d2_min(jule::Str _4716_k) {
	_4716_k=_1eed95910_real_kind_of(_4716_k);
	{
		auto &_match_expr{ _4716_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1ee723678:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1ee723458:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1ee7234be:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1ee723535:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1ee7232b0:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1ee723326:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_1ee71ec7e:;
			{
				return 0LL;
			}
		}
		_match_end_1ee72090b:;
	}
}



inline jule::F64 _1eed9ac34_max(jule::Str _6916_k) {
	_6916_k=_1eed95910_real_kind_of(_6916_k);
	{
		auto &_match_expr{ _6916_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1ee725438:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1ee72549e:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1ee725515:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1ee725290:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_1ee725306:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1ee72536c:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1ee724dd8:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1ee724e4e:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1ee724eb5:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1ee72502b:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_1ee722e3b:;
			{
				return 0LL;
			}
		}
		_match_end_1ee723e09:;
	}
}



inline jule::Bool _1eed9b20c_is_i8_compatible(jule::Str _629_k) {
	return (_629_k == jule::Str("i8", 2));
}



inline jule::Bool _1eed9b55e_is_i16_compatible(jule::Str _1130_k) {
	return (_1130_k == jule::Str("i8", 2)) || (_1130_k == jule::Str("i16", 3));
}



inline jule::Bool _1eed9b86c_is_i32_compatible(jule::Str _1730_k) {
	return (((_1730_k == jule::Str("i8", 2)) || (_1730_k == jule::Str("i16", 3))) || (_1730_k == jule::Str("i32", 3))) || (_1730_k == jule::Str("u8", 2));
}



inline jule::Bool _1eed9bbbe_is_i64_compatible(jule::Str _2530_k) {
	return (((_2530_k == jule::Str("i8", 2)) || (_2530_k == jule::Str("i16", 3))) || (_2530_k == jule::Str("i32", 3))) || (_2530_k == jule::Str("i64", 3));
}



inline jule::Bool _1eed9becc_is_u8_compatible(jule::Str _3329_k) {
	return (_3329_k == jule::Str("u8", 2));
}



inline jule::Bool _1eed9c2da_is_u16_compatible(jule::Str _3830_k) {
	return (_3830_k == jule::Str("u8", 2)) || (_3830_k == jule::Str("u16", 3));
}



inline jule::Bool _1eed9c5e8_is_u32_compatible(jule::Str _4330_k) {
	return ((_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3))) || (_4330_k == jule::Str("u32", 3));
}



inline jule::Bool _1eed9c98e_is_u64_compatible(jule::Str _5030_k) {
	return (((_5030_k == jule::Str("u8", 2)) || (_5030_k == jule::Str("u16", 3))) || (_5030_k == jule::Str("u32", 3))) || (_5030_k == jule::Str("u64", 3));
}



inline jule::Bool _1eed9cc9c_is_f32_compatible(jule::Str _5830_k) {
	return (_5830_k == jule::Str("f32", 3));
}



inline jule::Bool _1eed9d0aa_is_f64_compatible(jule::Str _6330_k) {
	return (_6330_k == jule::Str("f64", 3));
}



inline jule::Bool _1eed9d495_types_are_compatible(jule::Str _7033_k1,jule::Str _7042_k2) {
	{
		auto &_match_expr{ _7033_k1 };
		
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_1ee72e893:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1ee72e909:;
			{
				return (_7042_k2 == jule::Str("int", 3));
			}
		}
		else if (_match_expr == jule::Str("uintptr", 7)) {
			_case_begin_1ee72e9c5:;
			{
				return (_7042_k2 == jule::Str("uintptr", 7));
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_1ee72ea3b:;
			{
				return (_7042_k2 == jule::Str("uint", 4));
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_1ee72e4a8:;
			{
				return _1eed9b20c_is_i8_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1ee72e51e:;
			{
				return _1eed9b55e_is_i16_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1ee72e585:;
			{
				return _1eed9b86c_is_i32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1ee72e5eb:;
			{
				return _1eed9bbbe_is_i64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_1ee72eae6:;
			{
				return _1eed9becc_is_u8_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1ee72eb5c:;
			{
				return _1eed9c2da_is_u16_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1ee72ebc3:;
			{
				return _1eed9c5e8_is_u32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1ee72ec39:;
			{
				return _1eed9c98e_is_u64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1ee72eca0:;
			{
				return _1eed9cc9c_is_f32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1ee72ed16:;
			{
				return _1eed9d0aa_is_f64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_1ee72ed8d:;
			{
				return (_7042_k2 == jule::Str("bool", 4));
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_1ee72ee15:;
			{
				return (_7042_k2 == jule::Str("str", 3));
			}
		}
		else {
			_case_begin_1ee72812d:;
			{
				return false;
			}
		}
		_match_end_1ee728095:;
	}
}



inline jule::Bool _1eed9d7a3_is_i16_greater(jule::Str _10927_k) {
	return (_10927_k == jule::Str("i8", 2));
}



inline jule::Bool _1eed9dab1_is_i32_greater(jule::Str _11427_k) {
	return (_11427_k == jule::Str("i8", 2)) || (_11427_k == jule::Str("i16", 3));
}



inline jule::Bool _1eed9ddbe_is_i64_greater(jule::Str _11927_k) {
	return ((_11927_k == jule::Str("i8", 2)) || (_11927_k == jule::Str("i16", 3))) || (_11927_k == jule::Str("i32", 3));
}



inline jule::Bool _1eed9e1cc_is_u16_greater(jule::Str _12627_k) {
	return (_12627_k == jule::Str("u8", 2));
}



inline jule::Bool _1eed9e60b_is_u32_greater(jule::Str _13127_k) {
	return (_13127_k == jule::Str("u8", 2)) || (_13127_k == jule::Str("u16", 3));
}



inline jule::Bool _1eed9e919_is_u64_greater(jule::Str _13727_k) {
	return ((_13727_k == jule::Str("u8", 2)) || (_13727_k == jule::Str("u16", 3))) || (_13727_k == jule::Str("u32", 3));
}



inline jule::Bool _1eed9ec27_is_f32_greater(jule::Str _14423_k) {
	return (_14423_k != jule::Str("f64", 3));
}



inline jule::Bool _1eeda0035_is_f64_greater(jule::Str _14923_k) {
	return true;
}



inline jule::Bool _1eeda0420_is_greater(jule::Str _15423_k1,jule::Str _15432_k2) {
	{
		auto &_match_expr{ _15423_k1 };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_1ee7397b0:;
			{
				return _1eeda194e_is_sig_int(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_1ee739826:;
			{
				return _1eeda1ca1_is_unsig_int(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("uintptr", 7)) {
			_case_begin_1ee7394d5:;
			{
				return _1eeda1ca1_is_unsig_int(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_1ee73954b:;
			{
				return _1eed9d7a3_is_i16_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_1ee7395b2:;
			{
				return _1eed9dab1_is_i32_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_1ee7392e8:;
			{
				return _1eed9ddbe_is_i64_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_1ee73935e:;
			{
				return _1eed9e1cc_is_u16_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_1ee7393c5:;
			{
				return _1eed9e60b_is_u32_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_1ee73943b:;
			{
				return _1eed9e919_is_u64_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_1ee7398d1:;
			{
				return _1eed9ec27_is_f32_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_1ee739947:;
			{
				return _1eeda0035_is_f64_greater(_15432_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_1ee7399ad:;
			{
				return true;
			}
		}
		else {
			_case_begin_1ee738eb8:;
			{
				return false;
			}
		}
		_match_end_1ee739051:;
	}
}



inline jule::Bool _1eeda194e_is_sig_int(jule::Str _2723_k) {
	return ((((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3))) || (_2723_k == jule::Str("int", 3));
}



inline jule::Bool _1eeda1ca1_is_unsig_int(jule::Str _3625_k) {
	return (((((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3))) || (_3625_k == jule::Str("uint", 4))) || (_3625_k == jule::Str("uintptr", 7));
}



inline jule::Bool _1eeda20ae_is_int(jule::Str _4615_k) {
	return _1eeda194e_is_sig_int(_4615_k) || _1eeda1ca1_is_unsig_int(_4615_k);
}



inline jule::Bool _1eeda2411_is_float(jule::Str _5117_k) {
	return (_5117_k == jule::Str("f32", 3)) || (_5117_k == jule::Str("f64", 3));
}



inline jule::Bool _1eeda271e_is_num(jule::Str _5615_k) {
	return _1eeda20ae_is_int(_5615_k) || _1eeda2411_is_float(_5615_k);
}



inline jule::Bool _1eee05a91_is_ascii(jule::I32 _1017_r) {
	
	return (_1017_r <= 127LL);
}



inline jule::I32 _1eee0607a_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if ((_1816_bytes.len() == 0LL)) {
		return 0LL;
	}
	jule::I32 _2313_r = 0LL;
	if ((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL)) {
		jule::I32 _2517_i = 0LL;
		_2313_r=static_cast<jule::I32>(_1eee2993e_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _222567dc3_decode_rune(_1816_bytes);
	}
	return _2313_r;
}



inline jule::Str _1eee28de4_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _1eee29246_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if ((_4215_bytes.len() == 0LL)) {
		return jule::Str();
	}
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I32>(_4215_bytes.len()));
	jule::I32 _4813_i = 0LL;
	while (_4813_i < static_cast<jule::I32>(static_cast<jule::I32>(_4215_bytes.len()))) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];
			if (_5013_b == '\\') {
				_4713_s=jule::append(_4713_s,_1eee29d29_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;
				jule::I32 _5421_size;
				std::tie(_5418_r,_5421_size) = _222567dc3_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_2225694ac_append_rune(_4713_s,_5418_r);
			}
		}
	_iter_next_1ee749b44:;
	}
	_iter_end_1ee749b44:;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _1eee29554_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if ((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\')) {
		return std::make_tuple(_6241_seq,_6252_ok);
	}
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		
		if (_match_expr == '\\') {
			_case_begin_1ee74dc8b:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_1ee74e9d4:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_1ee74ea4a:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_1ee74eab1:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_1ee74eb27:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_1ee74eb9e:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_1ee74ec26:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_1ee74ec9d:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_1ee74ed25:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_1ee74ed9c:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_1ee74e8b3:;
	}
	_6252_ok=(_6241_seq != 0LLU);
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _1eee2993e_rune_from_esq_seq(jule::Slice<jule::U8> _8422_bytes,jule::I32& _8442_i) {
	jule::U8 _8510_b;
	jule::Bool _8513_ok;
	std::tie(_8510_b,_8513_ok) = _1eee29554_try_btoa_common_esq(_8422_bytes.slice(_8442_i));
	(_8442_i)++;
	if (_8513_ok) {
		(_8442_i)++;
		return static_cast<jule::I32>(static_cast<jule::I32>(_8510_b));
	}
	{
		auto &_match_expr{ _8422_bytes[_8442_i] };
		
		if (_match_expr == 'u') {
			_case_begin_1ee7559c9:;
			{
				
				jule::I32 _9513_r = static_cast<jule::I32>(({
					auto except = _1eec79ae1_parse_uint(static_cast<jule::Str>(_8422_bytes.slice((_8442_i + 1LL),(_8442_i + 5LL))),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:95:22"));
					(except.result);
				}));
				_8442_i+=5LL;
				return _9513_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_1ee755215:;
			{
				
				jule::I32 _10013_r = static_cast<jule::I32>(({
					auto except = _1eec79ae1_parse_uint(static_cast<jule::Str>(_8422_bytes.slice((_8442_i + 1LL),(_8442_i + 9LL))),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:100:22"));
					(except.result);
				}));
				_8442_i+=9LL;
				return _10013_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_1ee75507d:;
			{
				
				jule::Slice<jule::U8> _10513_seq = _8422_bytes.slice((_8442_i + 1LL),(_8442_i + 3LL));
				_8442_i+=3LL;
				return static_cast<jule::I32>(static_cast<jule::I32>(({
					auto except = _1eec79ae1_parse_uint(static_cast<jule::Str>(_10513_seq),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:107:18"));
					(except.result);
				})));
			}
		}
		else {
			_case_begin_1ee7549b7:;
			{
				
				jule::Slice<jule::U8> _11013_seq = _8422_bytes.slice(_8442_i,(_8442_i + 3LL));
				_8442_i+=3LL;
				return static_cast<jule::I32>(static_cast<jule::I32>(({
					auto except = _1eec79ae1_parse_uint(static_cast<jule::Str>(_11013_seq.slice(1LL)),8LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:112:18"));
					(except.result);
				})));
			}
		}
		_match_end_1ee75406b:;
	}
}



inline jule::Slice<jule::U8> _1eee29d29_str_esq_seq(jule::Slice<jule::U8> _11616_bytes,jule::I32& _11636_i) {
	jule::I32 _1179_r = _1eee2993e_rune_from_esq_seq(_11616_bytes,_11636_i);
	if ((_1179_r <= 255LL)) {
		return jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(static_cast<jule::U8>(_1179_r)))});
	}
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1179_r));
}



inline jule::I32 _200004e04_find_format_prefix(jule::Slice<jule::U8>& _924_bytes,jule::I32& _940_start) {
	jule::I32 _1013_i = _940_start;
	while (_1013_i < static_cast<jule::I32>(static_cast<jule::I32>(_924_bytes.len()))) {
		{
			jule::I32 _1214_r;
			jule::I32 _1217_size;
			std::tie(_1214_r,_1217_size) = _222567dc3_decode_rune(_924_bytes.slice(_1013_i));
			if (_1214_r == '{') {
				return _1013_i;
			}
			_1013_i+=_1217_size;
		}
	_iter_next_1ee7879a6:;
	}
	_iter_end_1ee7879a6:;
	return -1LL;
}



inline jule::Slice<jule::U8> _1eeed3e7c_get_format_range(jule::I32& _2630_i,jule::Slice<jule::U8>& _2643_bytes) {
	jule::I32 _279_start = _2630_i;
	jule::I32 _2813_braces = 0LL;
	while (_2630_i < static_cast<jule::I32>(static_cast<jule::I32>(_2643_bytes.len()))) {
		{
			jule::I32 _3014_r;
			jule::I32 _3017_size;
			std::tie(_3014_r,_3017_size) = _222567dc3_decode_rune(_2643_bytes.slice(_2630_i));
			_2630_i+=_3017_size;
			{
				auto &_match_expr{ _3014_r };
				
				if (_match_expr == '{') {
					_case_begin_1ee78adb6:;
					{
						(_2813_braces)++;
					}
				}
				else if (_match_expr == '}') {
					_case_begin_1ee78b081:;
					{
						(_2813_braces)--;
						if ((_2813_braces == 0LL)) {
							return _2643_bytes.slice(_279_start,_2630_i);
						}
					}
				}
				_match_end_1ee78b02b:;
			}
		}
	_iter_next_1ee78a091:;
	}
	_iter_end_1ee78a091:;
	return nullptr;
}



inline jule::Slice<jule::U8> _1eeee065e_fmt_by_default(jule::Any& _4620_arg) {
	if (_4620_arg == jule::Any(jule::Any(nullptr))) {
		return jule::Slice<jule::U8>({'n','i','l'});
	}
	{
		auto &_match_expr{ _4620_arg };
		
		if (_match_expr.type_is<jule::F32>()) {
			_case_begin_1ee78d193:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ed3c6371_fmt_float(static_cast<jule::F64>(static_cast<jule::F64>(_4620_arg.operator jule::F32())),'g',-1LL,32LL));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_1ee78c835:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1ed3c6371_fmt_float(static_cast<jule::F64>(_4620_arg.operator jule::F64()),'g',-1LL,64LL));
			}
		}
		else if (_match_expr.type_is<jule::I8>()) {
			_case_begin_1ee78d0e9:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84656_fmt_int(static_cast<jule::I8>(_4620_arg.operator jule::I8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I16>()) {
			_case_begin_1ee78d4b2:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84656_fmt_int(static_cast<jule::I16>(_4620_arg.operator jule::I16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_1ee78cbcb:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84656_fmt_int(static_cast<jule::I32>(_4620_arg.operator jule::I32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_1ee78cc42:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84656_fmt_int(static_cast<jule::I64>(_4620_arg.operator jule::I64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_1ee78cca8:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84227_fmt_uint(static_cast<jule::U8>(_4620_arg.operator jule::U8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U16>()) {
			_case_begin_1ee78cd1e:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84227_fmt_uint(static_cast<jule::U16>(_4620_arg.operator jule::U16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U32>()) {
			_case_begin_1ee78cd85:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84227_fmt_uint(static_cast<jule::U32>(_4620_arg.operator jule::U32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_1ee78cdeb:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1eec84227_fmt_uint(static_cast<jule::U64>(_4620_arg.operator jule::U64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::Str>()) {
			_case_begin_1ee78d55b:;
			{
				return static_cast<jule::Slice<jule::U8>>(_4620_arg.operator jule::Str());
			}
		}
		else if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_1ee78d5c2:;
			{
				if (_4620_arg.operator jule::Bool()) {
					return jule::Slice<jule::U8>({'t','r','u','e'});
				}
				return jule::Slice<jule::U8>({'f','a','l','s','e'});
			}
		}
		else {
			_case_begin_1ee78c5d2:;
			{
				return static_cast<jule::Slice<jule::U8>>(jule::to_str(_4620_arg));
			}
		}
		_match_end_1ee78c03d:;
	}
}



inline jule::Slice<jule::U8> _1eeeddbbd_apply_fmt_by_default(jule::I32& _7530_j,jule::Slice<jule::Any>& _7539_args) {
	jule::Any _769_arg = _7539_args[_7530_j];
	(_7530_j)++;
	return _1eeee065e_fmt_by_default(_769_arg);
}



inline jule::Slice<jule::U8> _1eeed24ca_apply_fmt(jule::Slice<jule::U8>& _8319_fmt,jule::I32& _8337_j,jule::Slice<jule::Any>& _8346_args) {
	if ((_8319_fmt.len() == 2LL)) {
		return _1eeeddbbd_apply_fmt_by_default(_8337_j,_8346_args);
	}
	if ((_8319_fmt.len() == 4LL) && (_8319_fmt == jule::Slice<jule::U8>({'{','{','}','}'}))) {
		return jule::Slice<jule::U8>({'{','}'});
	}
	return _8319_fmt;
}



inline jule::Slice<jule::U8> _1eeee94c0_format_bytes(jule::Str _9717_fmt,jule::Slice<jule::Any> _9727_args) {
	jule::Slice<jule::U8> _9813_fmt_bytes = static_cast<jule::Slice<jule::U8>>(_9717_fmt);
	if ((_9727_args.len() == 0LL)) {
		return _9813_fmt_bytes;
	}
	jule::Slice<jule::U8> _10413_bytes = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I32>(_9717_fmt.len()));
	jule::I32 _10613_j = 0LL;
	jule::I32 _10713_last = 0LL;
	jule::I32 _10813_i = _200004e04_find_format_prefix(_9813_fmt_bytes,_10713_last);
	for (; (_10813_i != -1LL); _10813_i=static_cast<jule::I32>(_200004e04_find_format_prefix(_9813_fmt_bytes,_10813_i))) {
		{
			_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10713_last,_10813_i));
			jule::Slice<jule::U8> _11117_format = _1eeed3e7c_get_format_range(_10813_i,_9813_fmt_bytes);
			if ((_11117_format == nullptr)) {
				goto _iter_next_20283879b;
			}
			_10413_bytes=jule::append(_10413_bytes,_1eeed24ca_apply_fmt(_11117_format,_10613_j,_9727_args));
			if (_10613_j >= static_cast<jule::I32>(static_cast<jule::I32>(_9727_args.len()))) {
				_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10813_i));
				_10713_last=static_cast<jule::I32>(_9813_fmt_bytes.len());
				goto _iter_end_20283879b;
			}
			_10713_last=_10813_i;
		}
	_iter_next_20283879b:;
	}
	_iter_end_20283879b:;
	if (_10713_last < static_cast<jule::I32>(static_cast<jule::I32>(_9813_fmt_bytes.len()))) {
		_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10713_last));
	}
	return _10413_bytes;
}



inline jule::Str _1eeedc408_format(jule::Str _15715_fmt,jule::Slice<jule::Any> _15725_args) {
	return static_cast<jule::Str>(_1eeee94c0_format_bytes(_15715_fmt,_15725_args));
}



inline jule::Bool _1ee25d119_kind_uses_generics(jule::Ptr<_1eee76b45_TypeKind> _40523_k,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>& _40538_generics) {
	jule::Str _4069_pk = _1eee77063_to_str(_40523_k.ptr());
	{
		auto &expr = _40538_generics;
		auto it = expr.begin();
		_iter_begin_203650eec:;
		if (it != expr.end()) {
			jule::Ptr<_1e02d911b_GenericDecl> &_2036510da_g = *it;
			{
				if (_208c72a9c_contains(_4069_pk,_2036510da_g.get()._field_ident)) {
					return true;
				}
			}
			_iter_next_203650eec:;
			++it;
			goto _iter_begin_203650eec;
		}
		_iter_end_203650eec:;
	}
	return false;
}



inline jule::Bool _1ee25d58c_parameter_uses_generics(jule::Ptr<_1ee255b8e_Param>& _41529_p,jule::Slice<jule::Ptr<_1e02d911b_GenericDecl>>& _41541_generics) {
	if (_1ee256398_is_self(_41529_p.ptr())) {
		return false;
	}
	return _1ee25d119_kind_uses_generics(_41529_p.get()._field_kind.get()._field_kind,_41541_generics);
}



inline jule::Ptr<_1eee7b4a7_TypeSymbol> _1ee2618d1_build_type(jule::Ptr<_1e01c3db3_TypeDecl> _8419_t) {
	if ((_8419_t == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(_8419_t,jule::Ptr<_1eee76b45_TypeKind>()));
}



inline jule::Ptr<_1eee44e98_Value> _1ee261c33_build_expr(jule::Ptr<_1e0181a63_Expr> _9319_expr) {
	if ((_9319_expr == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(_9319_expr,jule::Ptr<_1eee43b89_Data>()));
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1ee262041_build_type_alias(jule::Ptr<_1e02dde01_TypeAliasDecl> _10225_decl) {
	return jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(_10225_decl.get()._field_scope,_10225_decl.get()._field_public,_10225_decl.get()._field_cpp_linked,jule::Bool(),jule::Bool(),_10225_decl.get()._field_token,_10225_decl.get()._field_ident,_1ee2618d1_build_type(_10225_decl.get()._field_kind),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>()));
}



inline jule::Ptr<_1ee23da34_Field> _1ee262393_build_field(jule::Ptr<_1e02e160c_FieldDecl> _11320_decl) {
	return jule::new_ptr<_1ee23da34_Field>(_1ee23da34_Field(jule::Ptr<_1ee242032_Struct>(),_11320_decl.get()._field_token,_11320_decl.get()._field_public,_11320_decl.get()._field_mutable,_11320_decl.get()._field_ident,_1ee2618d1_build_type(_11320_decl.get()._field_kind),_11320_decl.get()._field_default));
}



inline jule::Slice<jule::Ptr<_1ee23da34_Field>> _1ee2626a1_build_fields(jule::Slice<jule::Ptr<_1e02e160c_FieldDecl>>& _12422_decls) {
	jule::Slice<jule::Ptr<_1ee23da34_Field>> _12513_fields = jule::Slice<jule::Ptr<_1ee23da34_Field>>::alloc(0LL,static_cast<jule::I32>(_12422_decls.len()));
	{
		auto &expr = _12422_decls;
		auto it = expr.begin();
		_iter_begin_20365661d:;
		if (it != expr.end()) {
			jule::Ptr<_1e02e160c_FieldDecl> _203656244_decl = *it;
			{
				_12513_fields = jule::alloc_for_append(_12513_fields,1);_12513_fields.__push(_1ee262393_build_field(_203656244_decl));
			}
			_iter_next_20365661d:;
			++it;
			goto _iter_begin_20365661d;
		}
		_iter_end_20365661d:;
	}
	return _12513_fields;
}



inline jule::Ptr<_1ee242032_Struct> _1ee2629ae_build_struct(jule::Ptr<_1e02e1de3_StructDecl> _13221_decl) {
	return jule::new_ptr<_1ee242032_Struct>(_1ee242032_Struct(jule::Ptr<_1eedca071_Sema>(),jule::Slice<jule::Ptr<_1ee242032_Struct>>(),jule::Slice<jule::Ptr<_1ee242032_Struct>>(),_13221_decl.get()._field_token,_13221_decl.get()._field_ident,_1ee2626a1_build_fields(_13221_decl.get()._field_fields),jule::Slice<jule::Ptr<_1ee2579b5_Fn>>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>(),_13221_decl.get()._field_public,_13221_decl.get()._field_cpp_linked,_13221_decl.get()._field_directives,_13221_decl.get()._field_generics,jule::Slice<jule::Ptr<_1eec8627e_Trait>>(),jule::Slice<jule::Ptr<_1ee24550d_StructIns>>()));
}



inline jule::Ptr<_1ee255b8e_Param> _1ee262cbc_build_param(jule::Ptr<_1e02da10b_ParamDecl> _14420_decl) {
	return jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_14420_decl.get()._field_token,_14420_decl.get()._field_mutable,_14420_decl.get()._field_variadic,_14420_decl.get()._field_reference,_1ee2618d1_build_type(_14420_decl.get()._field_kind),_14420_decl.get()._field_ident));
}



inline jule::Slice<jule::Ptr<_1ee255b8e_Param>> _1ee263163_build_params(jule::Slice<jule::Ptr<_1e02da10b_ParamDecl>>& _15522_decls) {
	jule::Slice<jule::Ptr<_1ee255b8e_Param>> _15613_params = jule::Slice<jule::Ptr<_1ee255b8e_Param>>::alloc(0LL,static_cast<jule::I32>(_15522_decls.len()));
	{
		auto &expr = _15522_decls;
		auto it = expr.begin();
		_iter_begin_203659ce7:;
		if (it != expr.end()) {
			jule::Ptr<_1e02da10b_ParamDecl> _20365992e_decl = *it;
			{
				_15613_params = jule::alloc_for_append(_15613_params,1);_15613_params.__push(_1ee262cbc_build_param(_20365992e_decl));
			}
			_iter_next_203659ce7:;
			++it;
			goto _iter_begin_203659ce7;
		}
		_iter_end_203659ce7:;
	}
	return _15613_params;
}



inline jule::Ptr<_1ee255342_RetType> _1ee263471_build_ret_type(jule::Ptr<_1e0181843_RetTypeDecl> _16323_decl) {
	if ((_16323_decl.get()._field_idents == nullptr) && (_16323_decl.get()._field_kind == nullptr)) {
		return nullptr;
	}
	return jule::new_ptr<_1ee255342_RetType>(_1ee255342_RetType(_1ee2618d1_build_type(_16323_decl.get()._field_kind),_16323_decl.get()._field_idents));
}



inline jule::Ptr<_1ee2579b5_Fn> _1ee26377e_build_fn(jule::Ptr<_1e02da32b_FnDecl> _17317_decl) {
	return jule::new_ptr<_1ee2579b5_Fn>(_1ee2579b5_Fn(jule::Ptr<_1eedca071_Sema>(),_17317_decl.get()._field_token,_17317_decl.get()._field_global,_17317_decl.get()._field_unsafety,_17317_decl.get()._field_public,_17317_decl.get()._field_cpp_linked,_17317_decl.get()._field_statically,_17317_decl.get()._field_exceptional,_17317_decl.get()._field_ident,_17317_decl.get()._field_directives,_17317_decl.get()._field_scope,_17317_decl.get()._field_generics,_1ee263471_build_ret_type(_17317_decl.get()._field_result),_1ee263163_build_params(_17317_decl.get()._field_params),jule::Ptr<_1ee242032_Struct>(),jule::Slice<jule::Ptr<_1ee25b4ad_FnIns>>()));
}



inline jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _1ee263a8c_build_methods(jule::Slice<jule::Ptr<_1e02da32b_FnDecl>>& _19123_decls) {
	jule::Slice<jule::Ptr<_1ee2579b5_Fn>> _19213_methods = jule::Slice<jule::Ptr<_1ee2579b5_Fn>>::alloc(0LL,static_cast<jule::I32>(_19123_decls.len()));
	{
		auto &expr = _19123_decls;
		auto it = expr.begin();
		_iter_begin_20365e3e5:;
		if (it != expr.end()) {
			jule::Ptr<_1e02da32b_FnDecl> _20365e01b_decl = *it;
			{
				_19213_methods = jule::alloc_for_append(_19213_methods,1);_19213_methods.__push(_1ee26377e_build_fn(_20365e01b_decl));
			}
			_iter_next_20365e3e5:;
			++it;
			goto _iter_begin_20365e3e5;
		}
		_iter_end_20365e3e5:;
	}
	return _19213_methods;
}



inline jule::Ptr<_1eec8627e_Trait> _1ee263d9a_build_trait(jule::Ptr<_1e02e2443_TraitDecl> _19920_decl) {
	return jule::new_ptr<_1eec8627e_Trait>(_1eec8627e_Trait(_19920_decl.get()._field_token,_19920_decl.get()._field_ident,_19920_decl.get()._field_public,jule::Bool(),_1ee263a8c_build_methods(_19920_decl.get()._field_methods),jule::Slice<jule::Ptr<_1ee242032_Struct>>()));
}



inline jule::Ptr<_1eec87d0d_EnumItem> _1ee2641a8_build_enum_item(jule::Ptr<_1e02e04a7_EnumItemDecl> _20824_decl) {
	return jule::new_ptr<_1eec87d0d_EnumItem>(_1eec87d0d_EnumItem(_20824_decl.get()._field_token,_20824_decl.get()._field_ident,_1ee261c33_build_expr(_20824_decl.get()._field_expr)));
}



inline jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>> _1ee2644b6_build_enum_items(jule::Slice<jule::Ptr<_1e02e04a7_EnumItemDecl>>& _21626_decls) {
	jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>> _21713_items = jule::Slice<jule::Ptr<_1eec87d0d_EnumItem>>::alloc(0LL,static_cast<jule::I32>(_21626_decls.len()));
	{
		auto &expr = _21626_decls;
		auto it = expr.begin();
		_iter_begin_20366210c:;
		if (it != expr.end()) {
			jule::Ptr<_1e02e04a7_EnumItemDecl> _203661c44_decl = *it;
			{
				_21713_items = jule::alloc_for_append(_21713_items,1);_21713_items.__push(_1ee2641a8_build_enum_item(_203661c44_decl));
			}
			_iter_next_20366210c:;
			++it;
			goto _iter_begin_20366210c;
		}
		_iter_end_20366210c:;
	}
	return _21713_items;
}



inline jule::Ptr<_1eec889ac_Enum> _1ee2647c4_build_enum(jule::Ptr<_1e02e0d9d_EnumDecl> _22419_decl) {
	return jule::new_ptr<_1eec889ac_Enum>(_1eec889ac_Enum(_22419_decl.get()._field_token,_22419_decl.get()._field_public,_22419_decl.get()._field_ident,_1ee2618d1_build_type(_22419_decl.get()._field_kind),_1ee2644b6_build_enum_items(_22419_decl.get()._field_items)));
}



inline jule::Ptr<_1eedeb24b_Var> _1ee264c03_build_var(jule::Ptr<_1e02daea8_VarDecl> _23418_decl) {
	return jule::new_ptr<_1eedeb24b_Var>(_1eedeb24b_Var(jule::Ptr<_1eed8a5a3_Scope>(),_23418_decl.get()._field_token,_23418_decl.get()._field_ident,_23418_decl.get()._field_cpp_linked,_23418_decl.get()._field_constant,_23418_decl.get()._field_mutable,_23418_decl.get()._field_public,jule::Bool(),_23418_decl.get()._field_statically,_23418_decl.get()._field_reference,_1ee2618d1_build_type(_23418_decl.get()._field_kind),_1ee261c33_build_expr(_23418_decl.get()._field_expr),static__1ee26013d_new(),_23418_decl.get()._field_directives,jule::Ptr<_1eede9e3c_IterRelation>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>()));
}



inline jule::Slice<jule::Ptr<_1eedeb24b_Var>> _1ee265011_build_vars(jule::Slice<jule::Ptr<_1e02daea8_VarDecl>> _25119_decls) {
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _25213_vars = jule::Slice<jule::Ptr<_1eedeb24b_Var>>::alloc(0LL,static_cast<jule::I32>(_25119_decls.len()));
	{
		auto &expr = _25119_decls;
		auto it = expr.begin();
		_iter_begin_20366630e:;
		if (it != expr.end()) {
			jule::Ptr<_1e02daea8_VarDecl> _203665e46_decl = *it;
			{
				_25213_vars = jule::alloc_for_append(_25213_vars,1);_25213_vars.__push(_1ee264c03_build_var(_203665e46_decl));
			}
			_iter_next_20366630e:;
			++it;
			goto _iter_begin_20366630e;
		}
		_iter_end_20366630e:;
	}
	return _25213_vars;
}



inline jule::Ptr<_1eec8a4d6_Impl> _1ee26531e_build_impl(jule::Ptr<_1e02e2993_Impl> _25919_decl) {
	return jule::new_ptr<_1eec8a4d6_Impl>(_1eec8a4d6_Impl(_25919_decl.get()._field_base,_25919_decl.get()._field_dest,_1ee263a8c_build_methods(_25919_decl.get()._field_methods),_1ee265011_build_vars(_25919_decl.get()._field_statics)));
}



inline jule::Ptr<_1eeda5953_ScopeChecker> _1eed7cc27_new_scope_checker_base(jule::Ptr<_1eedca071_Sema>& _4032_s,jule::Ptr<_1ee25b4ad_FnIns> _4046_owner) {
	return jule::new_ptr<_1eeda5953_ScopeChecker>(_1eeda5953_ScopeChecker(jule::Ptr<_1e02c1d07_Token>(),_4032_s,_4046_owner,jule::Ptr<_1eeda5953_ScopeChecker>(),jule::I32(),jule::new_ptr<_1eee3c842_SymbolTable>(_1eee3c842_SymbolTable()),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1e02d9ddb_ScopeTree>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::U32(),jule::U32(),jule::Ptr<jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>>(),jule::Ptr<jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>>(),jule::I32()));
}



inline jule::Ptr<_1eeda5953_ScopeChecker> _1eed57ae2_new_scope_checker(jule::Ptr<_1eedca071_Sema>& _4827_s,jule::Ptr<_1ee25b4ad_FnIns> _4841_owner) {
	jule::Ptr<_1eeda5953_ScopeChecker> _4913_base = _1eed7cc27_new_scope_checker_base(_4827_s,_4841_owner);
	_4913_base.get()._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1eeda5513_ScopeLabel>>>(nullptr);
	_4913_base.get()._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1eeda5733_ScopeGoto>>>(nullptr);
	return _4913_base;
}



inline jule::Ptr<_1eeda5513_ScopeLabel> _1eed30856_find_label_parent(jule::Str _5822_ident,jule::Ptr<_1eeda5953_ScopeChecker> _5838_scope) {
	jule::Ptr<_1eeda5513_ScopeLabel> _5913_label = _1eeda88ce_find_label_scope(_5838_scope, _5822_ident);
	while ((_5913_label == nullptr)) {
		{
			if ((_5838_scope.get()._field_parent == nullptr) || (_5838_scope.get()._field_owner != nullptr)) {
				return nullptr;
			}
			_5838_scope=_5838_scope.get()._field_parent;
			_5913_label=_1eeda88ce_find_label_scope(_5838_scope, _5822_ident);
		}
	_iter_next_203669db2:;
	}
	_iter_end_203669db2:;
	return _5913_label;
}



inline jule::Bool _1eed4ab18_stmt_is_goto_scope(jule::Any& _7224_stmt,jule::Ptr<_1eed8a5a3_Scope>& _7236_sc) {
	{
		auto &_match_expr{ _7224_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1eed8a5a3_Scope>>()) {
			_case_begin_20366c612:;
			{
				return _7224_stmt.operator jule::Ptr<_1eed8a5a3_Scope>() == _7236_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3302_InfIter>>()) {
			_case_begin_20366c678:;
			{
				return _7224_stmt.operator jule::Ptr<_1eeda3302_InfIter>().get()._field_scope == _7236_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3742_RangeIter>>()) {
			_case_begin_20366c128:;
			{
				return _7224_stmt.operator jule::Ptr<_1eeda3742_RangeIter>().get()._field_scope == _7236_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda3522_WhileIter>>()) {
			_case_begin_20366c18e:;
			{
				return _7224_stmt.operator jule::Ptr<_1eeda3522_WhileIter>().get()._field_scope == _7236_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda4952_Match>>()) {
			_case_begin_20366c205:;
			{
				jule::Ptr<_1eeda4952_Match> _8713_m = _7224_stmt.operator jule::Ptr<_1eeda4952_Match>();
				{
					auto &expr = _8713_m.get()._field_cases;
					auto it = expr.begin();
					_iter_begin_20366edea:;
					if (it != expr.end()) {
						jule::Ptr<_1eeda4da3_Case> &_20366ee3e_c = *it;
						{
							if (_20366ee3e_c.get()._field_scope == _7236_sc) {
								return true;
							}
						}
						_iter_next_20366edea:;
						++it;
						goto _iter_begin_20366edea;
					}
					_iter_end_20366edea:;
				}
				return (_8713_m.get()._field_default != nullptr) && (_8713_m.get()._field_default.get()._field_scope == _7236_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eeda30d2_Conditional>>()) {
			_case_begin_20366c26b:;
			{
				jule::Ptr<_1eeda30d2_Conditional> _9613_c = _7224_stmt.operator jule::Ptr<_1eeda30d2_Conditional>();
				{
					auto &expr = _9613_c.get()._field_elifs;
					auto it = expr.begin();
					_iter_begin_20367198a:;
					if (it != expr.end()) {
						jule::Ptr<_1eeda2b92_If> &_2036719ce_elif = *it;
						{
							if (_2036719ce_elif.get()._field_scope == _7236_sc) {
								return true;
							}
						}
						_iter_next_20367198a:;
						++it;
						goto _iter_begin_20367198a;
					}
					_iter_end_20367198a:;
				}
				return (_9613_c.get()._field_default != nullptr) && (_9613_c.get()._field_default.get()._field_scope == _7236_sc);
			}
		}
		else {
			_case_begin_20366bec4:;
			{
				return false;
			}
		}
		_match_end_20366bde7:;
	}
}



inline jule::I32 _1eed629ed_count_match_type(jule::Ptr<_1eeda4952_Match>& _10922_m,jule::Ptr<_1eee76b45_TypeKind>& _10934_t) {
	jule::I32 _11013_n = 0LL;
	jule::Str _1119_kind = _1eee77063_to_str(_10934_t.ptr());
	_julec_label_loop:;
	{
		auto &expr = _10922_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_20367374a:;
		if (it != expr.end()) {
			jule::Ptr<_1eeda4da3_Case> &_203673948_c = *it;
			{
				if ((_203673948_c == nullptr)) {
					goto _iter_next_20367374a;
				}
				{
					auto &expr = _203673948_c.get()._field_exprs;
					auto it = expr.begin();
					_iter_begin_203673ea9:;
					if (it != expr.end()) {
						jule::Ptr<_1eee43b89_Data> &_203674608_expr = *it;
						{
							if ((_203674608_expr == nullptr)) {
								goto _iter_end_20367374a;
							}
							if (_1119_kind == _1eee77063_to_str(_203674608_expr.get()._field_model.operator jule::Ptr<_1eee76b45_TypeKind>().ptr())) {
								(_11013_n)++;
							}
						}
						_iter_next_203673ea9:;
						++it;
						goto _iter_begin_203673ea9;
					}
					_iter_end_203673ea9:;
				}
			}
			_iter_next_20367374a:;
			++it;
			goto _iter_begin_20367374a;
		}
		_iter_end_20367374a:;
	}
	return _11013_n;
}



inline jule::Slice<jule::Ptr<_1eee43b89_Data>> _1eed8aedd_get_datas_from_tuple_data(jule::Ptr<_1eee43b89_Data>& _13335_d) {
	if ((_1eee7b056_tup(_13335_d.get()._field_kind.ptr()) != nullptr)) {
		{
			auto &_match_expr{ _13335_d.get()._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1ee24e8be_TupleExprModel>>()) {
				_case_begin_203675e89:;
				{
					return _13335_d.get()._field_model.operator jule::Ptr<_1ee24e8be_TupleExprModel>().get()._field_datas;
				}
			}
			else {
				_case_begin_203675e23:;
				{
					jule::Ptr<_1eee82568_Tuple> _14021_t = _1eee7b056_tup(_13335_d.get()._field_kind.ptr());
					jule::Slice<jule::Ptr<_1eee43b89_Data>> _14121_r = jule::Slice<jule::Ptr<_1eee43b89_Data>>::alloc(0LL,static_cast<jule::I32>(_14021_t.get()._field_types.len()));
					{
						auto &expr = _14021_t.get()._field_types;
						auto it = expr.begin();
						_iter_begin_203676e46:;
						if (it != expr.end()) {
							jule::Ptr<_1eee76b45_TypeKind> _2036775d9_kind = *it;
							{
								_14121_r = jule::alloc_for_append(_14121_r,1);_14121_r.__push(jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(_2036775d9_kind,jule::Ptr<_1eee76b45_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>())));
							}
							_iter_next_203676e46:;
							++it;
							goto _iter_begin_203676e46;
						}
						_iter_end_203676e46:;
					}
					return _14121_r;
				}
			}
			_match_end_203675dbd:;
		}
	} else {
		return jule::Slice<jule::Ptr<_1eee43b89_Data>>({_13335_d});
	}
}



inline jule::Slice<jule::Any> _1eed63b42_get_expr_models(jule::Any& _15525_m) {
	{
		auto &_match_expr{ _15525_m };
		
		if (_match_expr.type_is<jule::Ptr<_1e0181ea3_TupleExpr>>()) {
			_case_begin_203675a05:;
			{
				jule::Ptr<_1e0181ea3_TupleExpr> _15817_tup = _15525_m.operator jule::Ptr<_1e0181ea3_TupleExpr>();
				jule::Slice<jule::Any> _15917_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I32>(_15817_tup.get()._field_expr.len()));
				{
					auto &expr = _15817_tup.get()._field_expr;
					auto it = expr.begin();
					_iter_begin_203679d28:;
					if (it != expr.end()) {
						jule::Ptr<_1e0181a63_Expr> _20367a477_expr = *it;
						{
							_15917_models = jule::alloc_for_append(_15917_models,1);_15917_models.__push(_20367a477_expr.get()._field_kind);
						}
						_iter_next_203679d28:;
						++it;
						goto _iter_begin_203679d28;
					}
					_iter_end_203679d28:;
				}
				return _15917_models;
			}
		}
		else {
			_case_begin_203678d5a:;
			{
				return jule::Slice<jule::Any>({_15525_m});
			}
		}
		_match_end_203678c8e:;
	}
}



inline jule::Bool _1eed6766d_check_mut(jule::Ptr<_1eedca071_Sema>& _17019_s,jule::Ptr<_1eee43b89_Data>& _17030_left,jule::Ptr<_1eee43b89_Data> _17047_right,_1e02c1d07_Token _17061_op) {
	jule::Bool _17074_ok = jule::Bool();
	{
		
		if ((!(_17030_left.get()._field_mutable))) {
			_case_begin_20367bbd7:;
			{
				_1eedcd2d8_push_err(_17019_s.ptr(), _17061_op,jule::Str("cannot assign to immutable storage", 34),jule::Slice<jule::Any>());
				_17074_ok = false;
				return _17074_ok;
			}
		}
		else if (((_17047_right != nullptr) && (!(_17047_right.get()._field_mutable))) && _1eee782a6_mutable(_17047_right.get()._field_kind.ptr())) {
			_case_begin_20367bcb4:;
			{
				if ((_17061_op._field_kind != jule::Str("=", 1)) && (_1eee7a6c6_strct(_17047_right.get()._field_kind.ptr()) != nullptr)) {
					_17074_ok = true;
					return _17074_ok;
				}
				_1eedcd2d8_push_err(_17019_s.ptr(), _17061_op,jule::Str("immutable data cannot assign to mutable storage because of @ type which is mutable", 82),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_17047_right.get()._field_kind.ptr()))}));
				_17074_ok = false;
				return _17074_ok;
			}
		}
		else {
			_case_begin_20367b544:;
			{
				_17074_ok = true;
				return _17074_ok;
			}
		}
		_match_end_20367b49a:;
	}
}



inline jule::Bool _1eed68251_check_assign(jule::Ptr<_1eedca071_Sema>& _18922_s,jule::Ptr<_1eee43b89_Data>& _18937_left,jule::Ptr<_1eee43b89_Data> _18954_right,_1e02c1d07_Token _18968_op) {
	jule::Bool _18981_ok = jule::Bool();
	jule::Ptr<_1ee25b4ad_FnIns> _1909_f = _1eee7a3eb_fnc(_18937_left.get()._field_kind.ptr());
	if (((_1909_f != nullptr) && (_1909_f.get()._field_decl != nullptr)) && _1909_f.get()._field_decl.get()._field_global) {
		_1eedcd2d8_push_err(_18922_s.ptr(), _18968_op,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_18981_ok = false;
		return _18981_ok;
	}
	{
		
		if (_1eee44690_is_const(_18937_left.ptr())) {
			_case_begin_203682a12:;
			{
				_1eedcd2d8_push_err(_18922_s.ptr(), _18968_op,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				_1eedcd6d4_push_suggestion(_18922_s.ptr(), jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_18981_ok = false;
				return _18981_ok;
			}
		}
		else if ((!(_18937_left.get()._field_lvalue))) {
			_case_begin_203682acd:;
			{
				_1eedcd2d8_push_err(_18922_s.ptr(), _18968_op,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_18981_ok = false;
				return _18981_ok;
			}
		}
		else if ((!(_1eed6766d_check_mut(_18922_s,_18937_left,_18954_right,_18968_op)))) {
			_case_begin_203682b44:;
			{
				_18981_ok = false;
				return _18981_ok;
			}
		}
		else {
			_case_begin_2036823c4:;
			{
				_18981_ok = true;
				return _18981_ok;
			}
		}
		_match_end_2036822e7:;
	}
}



inline jule::Bool _1eed69384_is_valid_ast_st_for_next_st(jule::Any& _21137_n) {
	{
		auto &_match_expr{ _21137_n };
		
		if (_match_expr.type_is<jule::Ptr<_1e02d9bbb_AssignSt>>()) {
			_case_begin_203685c79:;
			{
				return (!(_21137_n.operator jule::Ptr<_1e02d9bbb_AssignSt>().get()._field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e02d7ba8_FnCallExpr>>() || _match_expr.type_is<jule::Ptr<_1e0181a63_Expr>>()) {
			_case_begin_203685ce0:;
			{
				return true;
			}
		}
		else {
			_case_begin_20368566e:;
			{
				return false;
			}
		}
		_match_end_203685817:;
	}
}



inline jule::Bool _1eed6c4b9_is_valid_st_for_next_st(jule::Any& _22329_st) {
	{
		auto &_match_expr{ _22329_st };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1eeda42e2_Postfix>>() || _match_expr.type_is<jule::Ptr<_1eeda4512_Assign>>() || _match_expr.type_is<jule::Ptr<_1eeda4732_MultiAssign>>()) {
			_case_begin_203687055:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_2036870bb:;
			{
				{
					auto &_match_expr{ _22329_st.operator jule::Ptr<_1eee43b89_Data>().get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ee24a007_FnCallExprModel>>()) {
						_case_begin_2036877c5:;
						{
							return true;
						}
					}
					else {
						_case_begin_203688023:;
						{
							return false;
						}
					}
					_match_end_203687ebd:;
				}
			}
		}
		else {
			_case_begin_2036867e6:;
			{
				return false;
			}
		}
		_match_end_2036860ba:;
	}
}



inline jule::Bool _1eed6d09c_st_is_def(jule::Any& _24015_st) {
	{
		auto &_match_expr{ _24015_st };
		
		if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_20368809a:;
			{
				return true;
			}
		}
		else {
			_case_begin_203687440:;
			{
				return false;
			}
		}
		_match_end_203688144:;
	}
}



inline jule::Ptr<_1eedeb24b_Var> _1eedbd251_find_var_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _4129_files,jule::Str _4152_ident,jule::Bool _4164_cpp_linked) {
	{
		auto &expr = _4129_files;
		auto it = expr.begin();
		_iter_begin_203689354:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203689431_f = *it;
			{
				jule::Ptr<_1eedeb24b_Var> _4317_v = _1eee3d733_find_var(_203689431_f.ptr(), _4152_ident,_4164_cpp_linked);
				if ((_4317_v != nullptr)) {
					return _4317_v;
				}
			}
			_iter_next_203689354:;
			++it;
			goto _iter_begin_203689354;
		}
		_iter_end_203689354:;
	}
	return nullptr;
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eedbd7a1_find_type_alias_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _5336_files,jule::Str _5359_ident,jule::Bool _5371_cpp_linked) {
	{
		auto &expr = _5336_files;
		auto it = expr.begin();
		_iter_begin_203689871:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _20368aa92_f = *it;
			{
				jule::Ptr<_1eee75baa_TypeAlias> _5517_ta = _1eee3dbb7_find_type_alias(_20368aa92_f.ptr(), _5359_ident,_5371_cpp_linked);
				if ((_5517_ta != nullptr)) {
					return _5517_ta;
				}
			}
			_iter_next_203689871:;
			++it;
			goto _iter_begin_203689871;
		}
		_iter_end_203689871:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee242032_Struct> _1eedbdc57_find_struct_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _6532_files,jule::Str _6555_ident,jule::Bool _6567_cpp_linked) {
	{
		auto &expr = _6532_files;
		auto it = expr.begin();
		_iter_begin_20368aed2:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _20368c203_f = *it;
			{
				jule::Ptr<_1ee242032_Struct> _6717_s = _1eee3e14b_find_struct(_20368c203_f.ptr(), _6555_ident,_6567_cpp_linked);
				if ((_6717_s != nullptr)) {
					return _6717_s;
				}
			}
			_iter_next_20368aed2:;
			++it;
			goto _iter_begin_20368aed2;
		}
		_iter_end_20368aed2:;
	}
	return nullptr;
}



inline jule::Ptr<_1ee2579b5_Fn> _1eedbe263_find_fn_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _7728_files,jule::Str _7751_ident,jule::Bool _7763_cpp_linked) {
	{
		auto &expr = _7728_files;
		auto it = expr.begin();
		_iter_begin_20368c643:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _20368d864_file = *it;
			{
				jule::Ptr<_1ee2579b5_Fn> _7917_f = _1eee3e5d0_find_fn(_20368d864_file.ptr(), _7751_ident,_7763_cpp_linked);
				if ((_7917_f != nullptr)) {
					return _7917_f;
				}
			}
			_iter_next_20368c643:;
			++it;
			goto _iter_begin_20368c643;
		}
		_iter_end_20368c643:;
	}
	return nullptr;
}



inline jule::Ptr<_1eec8627e_Trait> _1eedbe64d_find_trait_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _8931_files,jule::Str _8954_ident) {
	{
		auto &expr = _8931_files;
		auto it = expr.begin();
		_iter_begin_20368ee3c:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _20368db72_f = *it;
			{
				jule::Ptr<_1eec8627e_Trait> _9117_t = _1eee3e987_find_trait(_20368db72_f.ptr(), _8954_ident);
				if ((_9117_t != nullptr)) {
					return _9117_t;
				}
			}
			_iter_next_20368ee3c:;
			++it;
			goto _iter_begin_20368ee3c;
		}
		_iter_end_20368ee3c:;
	}
	return nullptr;
}



inline jule::Ptr<_1eec889ac_Enum> _1eedbea38_find_enum_in_package(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _10130_files,jule::Str _10153_ident) {
	{
		auto &expr = _10130_files;
		auto it = expr.begin();
		_iter_begin_203690a0e:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203690adb_f = *it;
			{
				jule::Ptr<_1eec889ac_Enum> _10317_e = _1eee3ed3e_find_enum(_203690adb_f.ptr(), _10153_ident);
				if ((_10317_e != nullptr)) {
					return _10317_e;
				}
			}
			_iter_next_203690a0e:;
			++it;
			goto _iter_begin_203690a0e;
		}
		_iter_end_203690a0e:;
	}
	return nullptr;
}



inline jule::Bool _1eedc67ed_is_std_package(jule::Str _32219_f,jule::Str _32227_p) {
	return _208be3dd6_has_prefix(_32219_f,_208c750aa_join(jule::Slice<jule::Str>({_208e02831_PATH_STDLIB,_32227_p})));
}



inline jule::Bool _1eedc7c3e_is_valid_model_for_ref(jule::Any& _1232_m) {
	{
		auto &_match_expr{ _1232_m };
		
		if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_203693506:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24d060_StructSubIdentExprModel>>()) {
			_case_begin_20369356c:;
			{
				jule::Ptr<_1ee24d060_StructSubIdentExprModel> _1717_model = _1232_m.operator jule::Ptr<_1ee24d060_StructSubIdentExprModel>();
				return _1eedc7c3e_is_valid_model_for_ref(_1717_model.get()._field_expr.get()._field_model);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24c658_TraitSubIdentExprModel>>()) {
			_case_begin_203693061:;
			{
				jule::Ptr<_1ee24c658_TraitSubIdentExprModel> _2017_model = _1232_m.operator jule::Ptr<_1ee24c658_TraitSubIdentExprModel>();
				return _1eedc7c3e_is_valid_model_for_ref(_2017_model.get()._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee248115_UnaryExprModel>>()) {
			_case_begin_2036930c7:;
			{
				jule::Ptr<_1ee248115_UnaryExprModel> _2317_unary = _1232_m.operator jule::Ptr<_1ee248115_UnaryExprModel>();
				if ((_2317_unary.get()._field_op._field_kind != jule::Str("*", 1))) {
					return false;
				}
				if ((_1eee79791_ptr(_2317_unary.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
					return true;
				}
				if ((_1eee794b6_sptr(_2317_unary.get()._field_expr.get()._field_kind.ptr()) == nullptr)) {
					return false;
				}
				return _1eedc7c3e_is_valid_model_for_ref(_2317_unary.get()._field_expr.get()._field_model);
			}
		}
		else {
			_case_begin_203692d63:;
			{
				return false;
			}
		}
		_match_end_203692ec8:;
	}
}



inline _208de2238_Log _1eedc828e_compiler_err(_1e02c1d07_Token& _4118_token,jule::Bool _4132_line,jule::Str _4144_fmt,jule::Slice<jule::Any> _4157_args) {
	_208de2238_Log _4213_log = _208de2238_Log(static_cast<jule::I32>(1LL),_4118_token._field_row,_4118_token._field_column,_4118_token._field_file.get()._field_path,_208de2722_logf(_4144_fmt,_4157_args),jule::Str(),jule::Str());
	if (_4132_line) {
		_4213_log._field_line=_1e02c942a_get_row(_4118_token._field_file.ptr(), _4118_token._field_row);
	}
	return _4213_log;
}



inline jule::Bool _1eedc8679_imp_is_lookupable(jule::Ptr<_1eedc08c4_ImportInfo>& _5523_i,jule::Str _5539_ident) {
	if (_5523_i.get()._field_cpp_linked) {
		return false;
	}
	if ((!(_5523_i.get()._field_import_all))) {
		if ((_5523_i.get()._field_selected.len() > 0LL)) {
			return _1eedc3740_exist_ident(_5523_i.ptr(), _5539_ident);
		}
	}
	return _5523_i.get()._field_import_all;
}



inline jule::Slice<jule::Ptr<_1eedeb24b_Var>> _1eedc89cb_build_ret_vars(jule::Ptr<_1ee25b4ad_FnIns>& _6824_f) {
	if (_1ee257e7c_is_void(_6824_f.get()._field_decl.ptr()) || (_6824_f.get()._field_result == nullptr)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _7313_vars = nullptr;
	jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _7413_types = _1eee06564_get_result_types(_6824_f.get()._field_result);
	{
		auto &expr = _6824_f.get()._field_decl.get()._field_result.get()._field_idents;
		auto it = expr.begin();
		_iter_begin_20369ccb3:;
		if (it != expr.end()) {
			jule::I32 _20369cd3a_i = it - expr.begin();
			_1e02c1d07_Token _20369d06b_ident = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_20369d06b_ident._field_kind) || _1e02c4de8_is_anon_ident(_20369d06b_ident._field_kind)) {
					goto _iter_next_20369ccb3;
				}
				jule::Ptr<_1eedeb24b_Var> _8017_v = jule::new_ptr<_1eedeb24b_Var>(_1eedeb24b_Var(_6824_f.get()._field_scope,_20369d06b_ident,_20369d06b_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_7413_types[_20369cd3a_i])),jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(jule::Ptr<_1e0181a63_Expr>(),jule::new_ptr<_1eee43b89_Data>())),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1eede9e3c_IterRelation>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>()));
				_7313_vars = jule::alloc_for_append(_7313_vars,1);_7313_vars.__push(_8017_v);
			}
			_iter_next_20369ccb3:;
			++it;
			_20369cd3a_i++;
			goto _iter_begin_20369ccb3;
		}
		_iter_end_20369ccb3:;
	}
	return _7313_vars;
}



inline jule::Slice<jule::Ptr<_1eedeb24b_Var>> _1eedc8cd9_build_param_vars(jule::Ptr<_1ee25b4ad_FnIns>& _9926_f) {
	if ((_9926_f.get()._field_params.len() == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1eedeb24b_Var>> _10413_vars = jule::Slice<jule::Ptr<_1eedeb24b_Var>>::alloc(0LL,static_cast<jule::I32>(_9926_f.get()._field_params.len()));
	{
		auto &expr = _9926_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_2036a1525:;
		if (it != expr.end()) {
			jule::Ptr<_1ee25a358_ParamIns> _2036a1668_p = *it;
			{
				if (_1e02c4ada_is_ignore_ident(_2036a1668_p.get()._field_decl.get()._field_ident) || _1e02c4de8_is_anon_ident(_2036a1668_p.get()._field_decl.get()._field_ident)) {
					goto _iter_next_2036a1525;
				}
				jule::Ptr<_1eedeb24b_Var> _11017_v = jule::new_ptr<_1eedeb24b_Var>(_1eedeb24b_Var(_9926_f.get()._field_scope,_2036a1668_p.get()._field_decl.get()._field_token,_2036a1668_p.get()._field_decl.get()._field_ident,jule::Bool(),jule::Bool(),_2036a1668_p.get()._field_decl.get()._field_mutable,jule::Bool(),true,jule::Bool(),_2036a1668_p.get()._field_decl.get()._field_reference,jule::new_ptr<_1eee7b4a7_TypeSymbol>(),jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(jule::Ptr<_1e0181a63_Expr>(),jule::new_ptr<_1eee43b89_Data>())),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1eede9e3c_IterRelation>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>()));
				{
					
					if (_1ee256398_is_self(_2036a1668_p.get()._field_decl.ptr())) {
						_case_begin_2036a4748:;
						{
							_11017_v.get()._field_kind.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),false,jule::Trait<_1eee76606_Kind>(_9926_f.get()._field_owner, 0)));
							_11017_v.get()._field_reference=(!(_1ee256673_is_ref(_2036a1668_p.get()._field_decl.ptr())));
							if (_1ee256673_is_ref(_2036a1668_p.get()._field_decl.ptr())) {
								_11017_v.get()._field_ident=_11017_v.get()._field_ident.slice(1LL);
								_11017_v.get()._field_kind.get()._field_kind.get()._field_kind=jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee80d19_Sptr>(_1eee80d19_Sptr(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(_11017_v.get()._field_kind.get()._field_kind.get()._field_cpp_ident,jule::Bool(),jule::Bool(),_11017_v.get()._field_kind.get()._field_kind.get()._field_kind)))), 6);
							}
						}
					}
					else if (_2036a1668_p.get()._field_decl.get()._field_variadic) {
						_case_begin_2036a42e7:;
						{
							_11017_v.get()._field_kind.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),false,jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee818ec_Slc>(_1eee818ec_Slc(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(_2036a1668_p.get()._field_kind.get()._field_cpp_ident,jule::Bool(),jule::Bool(),_2036a1668_p.get()._field_kind.get()._field_kind)))), 7)));
						}
					}
					else {
						_case_begin_2036a3ea6:;
						{
							_11017_v.get()._field_kind.get()._field_kind=_2036a1668_p.get()._field_kind;
						}
					}
					_match_end_2036a1b0d:;
				}
				_10413_vars = jule::alloc_for_append(_10413_vars,1);_10413_vars.__push(_11017_v);
			}
			_iter_next_2036a1525:;
			++it;
			goto _iter_begin_2036a1525;
		}
		_iter_end_2036a1525:;
	}
	return _10413_vars;
}



inline jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _1eedc913b_build_generic_type_aliases(jule::Ptr<_1ee25b4ad_FnIns>& _16236_f) {
	jule::I32 _16313_size = _16236_f.get()._field_generics.len();
	if ((_16236_f.get()._field_decl.get()._field_owner != nullptr)) {
		_16313_size+=static_cast<jule::I32>(_16236_f.get()._field_decl.get()._field_owner.get()._field_generics.len());
	}
	if ((_16313_size == 0LL)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>> _17213_aliases = jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>::alloc(0LL,_16313_size);
	{
		auto &expr = _16236_f.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2036aab39:;
		if (it != expr.end()) {
			jule::I32 _2036aacd2_i = it - expr.begin();
			jule::Ptr<_1eee76b45_TypeKind> _2036ab002_g = *it;
			{
				jule::Ptr<_1e02d911b_GenericDecl> _17517_decl = _16236_f.get()._field_decl.get()._field_generics[_2036aacd2_i];
				_17213_aliases = jule::alloc_for_append(_17213_aliases,1);_17213_aliases.__push(jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(_16236_f.get()._field_decl.get()._field_scope,jule::Bool(),jule::Bool(),true,true,_17517_decl.get()._field_token,_17517_decl.get()._field_ident,jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_2036ab002_g)),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>())));
			}
			_iter_next_2036aab39:;
			++it;
			_2036aacd2_i++;
			goto _iter_begin_2036aab39;
		}
		_iter_end_2036aab39:;
	}
	if ((_16236_f.get()._field_decl.get()._field_owner != nullptr)) {
		jule::Ptr<_1ee24550d_StructIns> _18917_owner = _16236_f.get()._field_owner;
		{
			auto &expr = _18917_owner.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_2036ac124:;
			if (it != expr.end()) {
				jule::I32 _2036ad246_i = it - expr.begin();
				jule::Ptr<_1eee76b45_TypeKind> _2036ad466_g = *it;
				{
					jule::Ptr<_1e02d911b_GenericDecl> _19121_decl = _18917_owner.get()._field_decl.get()._field_generics[_2036ad246_i];
					_17213_aliases = jule::alloc_for_append(_17213_aliases,1);_17213_aliases.__push(jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(_16236_f.get()._field_decl.get()._field_scope,jule::Bool(),jule::Bool(),true,true,_19121_decl.get()._field_token,_19121_decl.get()._field_ident,jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),_2036ad466_g)),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>())));
				}
				_iter_next_2036ac124:;
				++it;
				_2036ad246_i++;
				goto _iter_begin_2036ac124;
			}
			_iter_end_2036ac124:;
		}
	}
	return _17213_aliases;
}



inline jule::Ptr<_1eee3c842_SymbolTable> _1eedc9515_find_file(jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>& _20819_files,jule::Ptr<_1e02c7e51_File>& _20843_handler) {
	{
		auto &expr = _20819_files;
		auto it = expr.begin();
		_iter_begin_2036ad884:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _2036ae4bc_fl = *it;
			{
				if (_2036ae4bc_fl.get()._field_file == _20843_handler) {
					return _2036ae4bc_fl;
				}
			}
			_iter_next_2036ad884:;
			++it;
			goto _iter_begin_2036ad884;
		}
		_iter_end_2036ad884:;
	}
	return nullptr;
}



inline void _1eedc99cc_push_suggestion(_208de2238_Log* _21731_log,jule::Str _21742_fmt,jule::Slice<jule::Any> _21755_args) {
	_21731_log->_field_suggestion=_208de2722_logf(_21742_fmt,_21755_args);
}



inline jule::Slice<jule::Ptr<_1eee76b45_TypeKind>> _1eee06564_get_result_types(jule::Ptr<_1eee76b45_TypeKind>& _2626_result) {
	{
		
		if ((_2626_result == nullptr)) {
			_case_begin_2036b248c:;
			{
				return nullptr;
			}
		}
		else if ((_1eee7b056_tup(_2626_result.ptr()) == nullptr)) {
			_case_begin_2036b22b1:;
			{
				return jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>({_2626_result});
			}
		}
		else {
			_case_begin_2036b1ba6:;
			{
				return _1eee7b056_tup(_2626_result.ptr()).get()._field_types;
			}
		}
		_match_end_2036b12b0:;
	}
}



inline jule::Bool _1eee07741_trait_has_reference_receiver(jule::Ptr<_1eec8627e_Trait>& _3934_t) {
	{
		auto &expr = _3934_t.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_2036b33d3:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> &_2036b2e4e_f = *it;
			{
				if (_2036b2e4e_f.get()._field_statically) {
					goto _iter_next_2036b33d3;
				}
				jule::Ptr<_1ee255b8e_Param> _4613_p = _2036b2e4e_f.get()._field_params[0LL];
				if (_1ee256673_is_ref(_4613_p.ptr()) && _1ee256398_is_self(_4613_p.ptr())) {
					return true;
				}
			}
			_iter_next_2036b33d3:;
			++it;
			goto _iter_begin_2036b33d3;
		}
		_iter_end_2036b33d3:;
	}
	return false;
}



inline jule::Bool _1eee0c49e_float_assignable(jule::Str _5421_kind,jule::Ptr<_1eee43b89_Data>& _5433_d) {
	jule::Str _559_value = _1ed3c6371_fmt_float(static_cast<jule::F64>(_1eed21ccb_as_f64(_5433_d.get()._field_constant.ptr())),'g',-1LL,64LL);
	return _1eed9734b_check_bit_float(_559_value,static_cast<jule::I32>(_1eed95ba7_bitsize_of(_5421_kind)));
}



inline jule::Bool _1eee19e07_sig_assignable(jule::Str _5919_kind,jule::Ptr<_1eee43b89_Data>& _5931_d) {
	jule::F64 _609_min = _1eed9a8d2_min(_5919_kind);
	jule::F64 _619_max = _1eed9ac34_max(_5919_kind);
	{
		
		if (_1eed23eed_is_f64(_5931_d.get()._field_constant.ptr())) {
			_case_begin_2036b73e8:;
			{
				jule::F64 _6413_x = _1eed2144b_read_f64(_5931_d.get()._field_constant.ptr());
				jule::F64 _6514_i;
				jule::F64 _6517_frac;
				std::tie(_6514_i,_6517_frac) = _1eec5a7e7_modf(_6413_x);
				if ((_6517_frac != 0LL)) {
					return false;
				}
				return (_6514_i >= _609_min) && (_6514_i <= _619_max);
			}
		}
		else if (_1eed2366d_is_u64(_5931_d.get()._field_constant.ptr())) {
			_case_begin_2036b745e:;
			{
				jule::F64 _7113_x = _1eed21ccb_as_f64(_5931_d.get()._field_constant.ptr());
				if (_7113_x <= _619_max) {
					return true;
				}
			}
		}
		else if (_1eed23393_is_i64(_5931_d.get()._field_constant.ptr())) {
			_case_begin_2036b74c5:;
			{
				jule::F64 _7613_x = _1eed21ccb_as_f64(_5931_d.get()._field_constant.ptr());
				return (_609_min <= _7613_x) && (_7613_x <= _619_max);
			}
		}
		_match_end_2036b7294:;
	}
	return false;
}



inline jule::Bool _1eee2a0b0_unsig_assignable(jule::Str _8221_kind,jule::Ptr<_1eee43b89_Data>& _8233_d) {
	jule::F64 _839_max = _1eed9ac34_max(_8221_kind);
	if (_8233_d.get()._field_is_rune && (_8221_kind == jule::Str("u8", 2))) {
		return _1eee05a91_is_ascii(static_cast<jule::I32>(static_cast<jule::I32>(_1eed207e1_read_i64(_8233_d.get()._field_constant.ptr()))));
	}
	{
		
		if (_1eed23eed_is_f64(_8233_d.get()._field_constant.ptr())) {
			_case_begin_2036bce15:;
			{
				jule::F64 _9013_x = _1eed2144b_read_f64(_8233_d.get()._field_constant.ptr());
				if ((_9013_x < 0LL)) {
					return false;
				}
				jule::F64 _9414_i;
				jule::F64 _9417_frac;
				std::tie(_9414_i,_9417_frac) = _1eec5a7e7_modf(_9013_x);
				if ((_9417_frac != 0LL)) {
					return false;
				}
				return _9414_i <= _839_max;
			}
		}
		else if (_1eed2366d_is_u64(_8233_d.get()._field_constant.ptr())) {
			_case_begin_2036bce7b:;
			{
				jule::F64 _10013_x = _1eed21ccb_as_f64(_8233_d.get()._field_constant.ptr());
				if (_10013_x <= _839_max) {
					return true;
				}
			}
		}
		else if (_1eed23393_is_i64(_8233_d.get()._field_constant.ptr())) {
			_case_begin_2036bcee2:;
			{
				jule::F64 _10513_x = _1eed21ccb_as_f64(_8233_d.get()._field_constant.ptr());
				return (0LL <= _10513_x) && (_10513_x <= _839_max);
			}
		}
		_match_end_2036bc2dd:;
	}
	return false;
}



inline jule::Bool _1eee2a434_int_assignable(jule::Str _11119_kind,jule::Ptr<_1eee43b89_Data>& _11131_d) {
	{
		
		if (_1eeda194e_is_sig_int(_11119_kind)) {
			_case_begin_2036c32a0:;
			{
				return _1eee19e07_sig_assignable(_11119_kind,_11131_d);
			}
		}
		else if (_1eeda1ca1_is_unsig_int(_11119_kind)) {
			_case_begin_2036c339e:;
			{
				return _1eee2a0b0_unsig_assignable(_11119_kind,_11131_d);
			}
		}
		else {
			_case_begin_2036bda70:;
			{
				return false;
			}
		}
		_match_end_2036bda1a:;
	}
}



inline jule::Ptr<_1e02812b1_Directive> _1eee704ce_find_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _413124_directives,jule::Str _413166_d) {
	{
		auto &expr = _413124_directives;
		auto it = expr.begin();
		_iter_begin_2036c3745:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _2036c34c0_dr = *it;
			{
				if (_2036c34c0_dr.get()._field_tag._field_kind == _413166_d) {
					return _2036c34c0_dr;
				}
			}
			_iter_next_2036c3745:;
			++it;
			goto _iter_begin_2036c3745;
		}
		_iter_end_2036c3745:;
	}
	return nullptr;
}



inline jule::Any _1eee7090d_find_builtins_import(jule::Str _414025_ident,jule::Ptr<_1eedc08c4_ImportInfo> _414037_imp) {
	return _1eeec6a85_find_package_builtin_def(_414037_imp.get()._field_link_path,_414025_ident);
}



inline void _1eee70b83_fit_bitsize(jule::Ptr<_1eee43b89_Data>& _414721_d) {
	jule::Ptr<_1eee7bead_Prim> _414813_prim = _1eee791db_prim(_414721_d.get()._field_kind.ptr());
	jule::I32 _41499_z = _1eed95ba7_bitsize_of(_1eee7c387_to_str(_414813_prim.ptr()));
	if ((_41499_z == 64LL)) {
		return;
	}
	jule::I32 _415413_k = 0LL;
	{
		
		if (_1eed23393_is_i64(_414721_d.get()._field_constant.ptr())) {
			_case_begin_2036c713e:;
			{
				_415413_k=static_cast<jule::I32>(_1eed97967_bitsize_of_int(static_cast<jule::I64>(_1eed207e1_read_i64(_414721_d.get()._field_constant.ptr()))));
				if (_415413_k > _41499_z) {
					_414813_prim.get()._field_kind=_1eed95ed7_int_from_bits(_415413_k);
				}
			}
		}
		else if (_1eed2366d_is_u64(_414721_d.get()._field_constant.ptr())) {
			_case_begin_2036c71b6:;
			{
				_415413_k=static_cast<jule::I32>(_1eed97c75_bitsize_of_uint(static_cast<jule::U64>(_1eed20abb_read_u64(_414721_d.get()._field_constant.ptr()))));
				if (_415413_k > _41499_z) {
					_414813_prim.get()._field_kind=_1eed962e5_uint_from_bits(_415413_k);
				}
			}
		}
		else if (_1eed23eed_is_f64(_414721_d.get()._field_constant.ptr())) {
			_case_begin_2036c723d:;
			{
				_415413_k=static_cast<jule::I32>(_1eed97659_bitsize_of_float(static_cast<jule::F64>(_1eed2144b_read_f64(_414721_d.get()._field_constant.ptr()))));
				if (_415413_k > _41499_z) {
					_414813_prim.get()._field_kind=_1eed96603_float_from_bits(_415413_k);
				}
			}
		}
		_match_end_2036c7084:;
	}
}



inline void _1eee71029_make_struct_lit_alloc(jule::Ptr<_1eee43b89_Data>& _417431_d,jule::Ptr<_1ee248a0b_StructLitExprModel>& _417446_lit) {
	_417431_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee80d19_Sptr>(_1eee80d19_Sptr(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_417446_lit.get()._field_strct, 0))))), 6)));
	_417431_d.get()._field_model=jule::Any(jule::new_ptr<_1ee248de6_AllocStructLitExprModel>(_1ee248de6_AllocStructLitExprModel(_417446_lit)));
}



inline jule::Ptr<_1eedeb24b_Var> _1eee71414_build_error_var(jule::Ptr<_1eed8a5a3_Scope>& _418525_s,jule::Ptr<_1e02d7ba8_FnCallExpr>& _418541_fc) {
	return jule::new_ptr<_1eedeb24b_Var>(_1eedeb24b_Var(_418525_s,_418541_fc.get()._field_token,jule::Str("error", 5),jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),false,jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("any", 3)), 5))))),jule::new_ptr<_1eee44e98_Value>(_1eee44e98_Value(jule::Ptr<_1e0181a63_Expr>(),jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data()))),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Slice<jule::Ptr<_1e02812b1_Directive>>(),jule::Ptr<_1eede9e3c_IterRelation>(),jule::Slice<jule::Ptr<_1eedeb24b_Var>>()));
}



inline jule::Any _1eee717ee_find_builtins_sema(jule::Str _420423_ident,jule::Ptr<_1eedca071_Sema> _420439_s) {
	{
		auto &expr = _420439_s.get()._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_2036ce773:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _2036ce7ea_imp = *it;
			{
				if (_2036ce7ea_imp.get()._field_import_all || _1eedc3740_exist_ident(_2036ce7ea_imp.ptr(), _420423_ident)) {
					jule::Any _420721_def = _1eee7090d_find_builtins_import(_420423_ident,_2036ce7ea_imp);
					if (_420721_def != jule::Any(jule::Any(nullptr))) {
						return _420721_def;
					}
				}
			}
			_iter_next_2036ce773:;
			++it;
			goto _iter_begin_2036ce773;
		}
		_iter_end_2036ce773:;
	}
	jule::Str _421513_ppath = _1e02c89bd_dir(_420439_s.get()._field_file.get()._field_file.ptr());
	if (_208be3dd6_has_prefix(_421513_ppath,_208e02831_PATH_STDLIB)) {
		(_421513_ppath).mut_slice(_208e02831_PATH_STDLIB.len());
		_421513_ppath=jule::Str("std", 3) + _208c732b7_replace(_421513_ppath,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
		return _1eeec6a85_find_package_builtin_def(_421513_ppath,_420423_ident);
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1eee71b0c_is_ok_for_shifting(jule::Ptr<_1eee43b89_Data>& _422928_d) {
	if (_1eee44690_is_const(_422928_d.ptr())) {
		{
			
			if (_1eed23393_is_i64(_422928_d.get()._field_constant.ptr())) {
				_case_begin_2036d3bb7:;
				{
					return (_1eed207e1_read_i64(_422928_d.get()._field_constant.ptr()) >= 0LL);
				}
			}
			else if (_1eed2366d_is_u64(_422928_d.get()._field_constant.ptr())) {
				_case_begin_2036d3ca5:;
				{
					return true;
				}
			}
			else if (_1eed23eed_is_f64(_422928_d.get()._field_constant.ptr())) {
				_case_begin_2036d3d1b:;
				{
					return (_1eed2144b_read_f64(_422928_d.get()._field_constant.ptr()) >= 0LL);
				}
			}
			else {
				_case_begin_2036d3568:;
				{
					return false;
				}
			}
			_match_end_2036d349c:;
		}
	}
	jule::Ptr<_1eee7bead_Prim> _42429_prim = _1eee791db_prim(_422928_d.get()._field_kind.ptr());
	return (_42429_prim != nullptr) && _1eeda20ae_is_int(_1eee7c387_to_str(_42429_prim.ptr()));
}



inline jule::Bool _1eee71ea3_is_instanced_struct(jule::Ptr<_1ee24550d_StructIns> _424624_s) {
	return _424624_s.get()._field_decl.get()._field_generics.len() == static_cast<jule::I32>(static_cast<jule::I32>(_424624_s.get()._field_generics.len()));
}



inline jule::Bool _1eee72327_is_ptr_arithmetic_compatible_int(jule::Ptr<_1eee43b89_Data>& _425042_d) {
	if (_1eee44690_is_const(_425042_d.ptr())) {
		return _1eee2a434_int_assignable(jule::Str("int", 3),_425042_d);
	}
	_1eee2aa61_TypeCompatibilityChecker _425413_tcc = _1eee2aa61_TypeCompatibilityChecker(jule::Ptr<_1eedca071_Sema>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),_425042_d.get()._field_kind,_1e02c1d07_Token());
	return _1eee2bc60_check(&_425413_tcc);
}



inline void _1eee72569_apply_cast_kind_model(jule::Ptr<_1eee43b89_Data>& _426331_d) {
	_426331_d.get()._field_model=jule::Any(jule::new_ptr<_1ee249523_CastingExprModel>(_1ee249523_CastingExprModel(_1e02c1d07_Token(),_426331_d.get()._field_model,_426331_d.get()._field_cast_kind,_426331_d.get()._field_kind)));
}



inline void _1eee727de_apply_cast_kind(jule::Ptr<_1eee43b89_Data>& _427125_d) {
	if ((_427125_d.get()._field_cast_kind == nullptr)) {
		return;
	}
	_1eee72569_apply_cast_kind_model(_427125_d);
	_427125_d.get()._field_kind=_427125_d.get()._field_cast_kind;
	_427125_d.get()._field_cast_kind=nullptr;
}



inline jule::Ptr<_1eee43b89_Data> _1eee72a20_build_void_data(void) {
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("void", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Str _1eee72d72_check_data_for_integer_indexing(jule::Ptr<_1eee43b89_Data>& _429241_d) {
	jule::Str _429253_err_fmt = jule::Str();
	if ((_429241_d == nullptr)) {
		_429253_err_fmt = jule::Str();
		return _429253_err_fmt;
	}
	{
		
		if ((_1eee791db_prim(_429241_d.get()._field_kind.ptr()) == nullptr)) {
			_case_begin_2036db96c:;
			{
				_429253_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _429253_err_fmt;
			}
		}
		else if ((!(_1eeda20ae_is_int(_1eee7c387_to_str(_1eee791db_prim(_429241_d.get()._field_kind.ptr()).ptr()))))) {
			_case_begin_2036db9d3:;
			{
				_429253_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _429253_err_fmt;
			}
		}
		else if (_1eee44690_is_const(_429241_d.ptr())) {
			_case_begin_2036dba49:;
			{
				if ((_1eed21ccb_as_f64(_429241_d.get()._field_constant.ptr()) < 0LL)) {
					_429253_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _429253_err_fmt;
				}
			}
		}
		else if ((_1eee791db_prim(_429241_d.get()._field_kind.ptr()) == nullptr) || _1eee44690_is_const(_429241_d.ptr()) || _1eed95910_real_kind_of(_1eee7c387_to_str(_1eee791db_prim(_429241_d.get()._field_kind.ptr()).ptr())) != _1eed95910_real_kind_of(jule::Str("int", 3))) {
			_case_begin_2036dbab0:;
			{
				_429241_d.get()._field_cast_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5)));
				_1eee727de_apply_cast_kind(_429241_d);
			}
		}
		_match_end_2036dc000:;
	}
	_429253_err_fmt = jule::Str();
	return _429253_err_fmt;
}



inline void _1eee73207_apply_cast_model_by_enum(jule::Ptr<_1eee43b89_Data>& _431834_d,jule::Ptr<_1eec889ac_Enum> _431848_e) {
	if ((_431848_e == nullptr)) {
		return;
	}
	jule::Ptr<_1eee7bead_Prim> _43229_p = _1eee791db_prim(_431848_e.get()._field_kind.get()._field_kind.ptr());
	if (_1eee806dc_is_str(_43229_p.ptr())) {
		return;
	}
	_431834_d.get()._field_cast_kind=_431848_e.get()._field_kind.get()._field_kind;
	_1eee72569_apply_cast_kind_model(_431834_d);
	_431834_d.get()._field_cast_kind=nullptr;
}



inline void _1eee73548_cast_const_by_type(jule::Str& _433124_t,jule::Ptr<_1eee43b89_Data>& _433137_d) {
	{
		
		if (_1eeda194e_is_sig_int(_433124_t)) {
			_case_begin_2036e4128:;
			{
				{
					auto _match_expr{ _1eed95ba7_bitsize_of(_1eed95910_real_kind_of(_433124_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_2036e4667:;
						{
							_1eed220ea_set_i64(_433137_d.get()._field_constant.ptr(), static_cast<jule::I64>(_1eed21726_as_i64(_433137_d.get()._field_constant.ptr())));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_2036e505d:;
						{
							_1eed220ea_set_i64(_433137_d.get()._field_constant.ptr(), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I32>(_1eed21726_as_i64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 16LL) {
						_case_begin_2036e50c4:;
						{
							_1eed220ea_set_i64(_433137_d.get()._field_constant.ptr(), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I16>(_1eed21726_as_i64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 8LL) {
						_case_begin_2036e513a:;
						{
							_1eed220ea_set_i64(_433137_d.get()._field_constant.ptr(), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I8>(_1eed21726_as_i64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					_match_end_2036e4ab8:;
				}
			}
		}
		else if (_1eeda1ca1_is_unsig_int(_433124_t)) {
			_case_begin_2036e41a0:;
			{
				{
					auto _match_expr{ _1eed95ba7_bitsize_of(_1eed95910_real_kind_of(_433124_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_2036e933c:;
						{
							_1eed22419_set_u64(_433137_d.get()._field_constant.ptr(), static_cast<jule::U64>(_1eed21a01_as_u64(_433137_d.get()._field_constant.ptr())));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_2036e93a3:;
						{
							_1eed22419_set_u64(_433137_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U32>(_1eed21a01_as_u64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 16LL) {
						_case_begin_2036e9419:;
						{
							_1eed22419_set_u64(_433137_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U16>(_1eed21a01_as_u64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 8LL) {
						_case_begin_2036e9480:;
						{
							_1eed22419_set_u64(_433137_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U8>(_1eed21a01_as_u64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					_match_end_2036e4887:;
				}
			}
		}
		else if (_1eeda2411_is_float(_433124_t)) {
			_case_begin_2036e4227:;
			{
				{
					auto _match_expr{ _1eed95ba7_bitsize_of(_1eed95910_real_kind_of(_433124_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_2036ed671:;
						{
							_1eed22d76_set_f64(_433137_d.get()._field_constant.ptr(), static_cast<jule::F64>(_1eed21ccb_as_f64(_433137_d.get()._field_constant.ptr())));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_2036ed6d7:;
						{
							_1eed22d76_set_f64(_433137_d.get()._field_constant.ptr(), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F32>(_1eed21ccb_as_f64(_433137_d.get()._field_constant.ptr())))));
						}
					}
					_match_end_2036e559c:;
				}
			}
		}
		_match_end_2036e4029:;
	}
}



inline jule::Bool _1eee74ec8_has_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _3323_directives,jule::Str _3354_tag) {
	{
		auto &expr = _3323_directives;
		auto it = expr.begin();
		_iter_begin_2036e998b:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _2036ed9b2_dr = *it;
			{
				if (_2036ed9b2_dr.get()._field_tag._field_kind == _3354_tag) {
					return true;
				}
			}
			_iter_next_2036e998b:;
			++it;
			goto _iter_begin_2036e998b;
		}
		_iter_end_2036e998b:;
	}
	return false;
}



inline jule::Bool _1eee8aa16_can_get_ptr(jule::Ptr<_1eee43b89_Data>& _54621_d) {
	if ((!(_54621_d.get()._field_lvalue)) || _1eee44690_is_const(_54621_d.ptr())) {
		return false;
	}
	{
		
		if ((_1eee7a3eb_fnc(_54621_d.get()._field_kind.ptr()) != nullptr) || (_1eee79a6b_enm(_54621_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_203702114:;
			{
				return false;
			}
		}
		else {
			_case_begin_203701a3c:;
			{
				return true;
			}
		}
		_match_end_2037019d7:;
	}
}



inline jule::Bool _1eee8ad24_is_valid_for_sptr_type(jule::Ptr<_1eee76b45_TypeKind>& _56132_t) {
	jule::Ptr<_1ee24550d_StructIns> _56213_s = _1eee7a6c6_strct(_56132_t.ptr());
	if (((_56213_s != nullptr) && (_56213_s.get()._field_decl != nullptr)) && _56213_s.get()._field_decl.get()._field_cpp_linked) {
		return false;
	}
	return true;
}



inline jule::Bool _1eee8b176_is_valid_for_ref(jule::Ptr<_1eee76b45_TypeKind>& _57026_t) {
	return (_1eee7a3eb_fnc(_57026_t.ptr()) == nullptr);
}



inline jule::Bool _1eee8b4c8_is_builtin_str_convertable(jule::Ptr<_1eee76b45_TypeKind>& _57336_t) {
	return ((!(_1eee77ecb_void(_57336_t.ptr()))) && (_1eee7a3eb_fnc(_57336_t.ptr()) == nullptr)) && (_1eee7b056_tup(_57336_t.ptr()) == nullptr);
}



inline jule::Str _1eee8b819_build_link_path_by_tokens(jule::Slice<_1e02c1d07_Token>& _57731_tokens) {
	jule::Str _57813_s = _57731_tokens[0LL]._field_kind;
	{
		auto expr = _57731_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_20370b717:;
		if (it != expr.end()) {
			_1e02c1d07_Token &_20370b98c_token = *it;
			{
				_57813_s+=jule::Str("::", 2);
				_57813_s+=_20370b98c_token._field_kind;
			}
			_iter_next_20370b717:;
			++it;
			goto _iter_begin_20370b717;
		}
		_iter_end_20370b717:;
	}
	return _57813_s;
}



inline jule::Ptr<_1eee7bead_Prim> _1eee8bb16_build_prim_type(jule::Str _58620_kind) {
	return jule::new_ptr<_1eee7bead_Prim>(_1eee7bead_Prim(_58620_kind));
}



inline jule::Ptr<_1ee242032_Struct> _1eee8beac_get_struct_from_kind(jule::Ptr<_1eee76b45_TypeKind> _59229_k) {
	{
		
		if ((_59229_k == nullptr)) {
			_case_begin_20370d142:;
			{
				return nullptr;
			}
		}
		else if ((_1eee7a6c6_strct(_59229_k.ptr()) != nullptr)) {
			_case_begin_20370d1a8:;
			{
				return _1eee7a6c6_strct(_59229_k.ptr()).get()._field_decl;
			}
		}
		else if ((_1eee794b6_sptr(_59229_k.ptr()) != nullptr)) {
			_case_begin_20370cd9a:;
			{
				return _1eee8beac_get_struct_from_kind(_1eee794b6_sptr(_59229_k.ptr()).get()._field_elem);
			}
		}
		else if ((_1eee7a121_slc(_59229_k.ptr()) != nullptr)) {
			_case_begin_20370ce11:;
			{
				return _1eee8beac_get_struct_from_kind(_1eee7a121_slc(_59229_k.ptr()).get()._field_elem);
			}
		}
		else if ((_1eee79d46_arr(_59229_k.ptr()) != nullptr)) {
			_case_begin_20370ce77:;
			{
				return _1eee8beac_get_struct_from_kind(_1eee79d46_arr(_59229_k.ptr()).get()._field_elem);
			}
		}
		else if ((_1eee79791_ptr(_59229_k.ptr()) != nullptr)) {
			_case_begin_20370c9b0:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_20370c905:;
			{
				return nullptr;
			}
		}
		_match_end_20370c64c:;
	}
}



inline jule::Bool _1eee8c2ba_is_prim(jule::Str _62112_kind) {
	return (((((((((((((((_62112_kind == jule::Str("i8", 2)) || (_62112_kind == jule::Str("i16", 3))) || (_62112_kind == jule::Str("i32", 3))) || (_62112_kind == jule::Str("i64", 3))) || (_62112_kind == jule::Str("u8", 2))) || (_62112_kind == jule::Str("u16", 3))) || (_62112_kind == jule::Str("u32", 3))) || (_62112_kind == jule::Str("u64", 3))) || (_62112_kind == jule::Str("f32", 3))) || (_62112_kind == jule::Str("f64", 3))) || (_62112_kind == jule::Str("int", 3))) || (_62112_kind == jule::Str("uint", 4))) || (_62112_kind == jule::Str("uintptr", 7))) || (_62112_kind == jule::Str("bool", 4))) || (_62112_kind == jule::Str("str", 3))) || (_62112_kind == jule::Str("any", 3));
}



inline void _1eee96acc_apply_implicit_cast(jule::Ptr<_1eee76b45_TypeKind>& _150529_dest,jule::Ptr<_1eee43b89_Data>& _150551_d) {
	if (_1eee77c01_is_nil(_150551_d.get()._field_kind.ptr())) {
		return;
	}
	if ((_1eee7a9a1_trt(_150529_dest.ptr()) != nullptr) && (_1eee7a9a1_trt(_150551_d.get()._field_kind.ptr()) == nullptr)) {
		_150551_d.get()._field_cast_kind=_150529_dest;
		_1eee72569_apply_cast_kind_model(_150551_d);
		_150551_d.get()._field_cast_kind=nullptr;
	}
}



inline std::tuple<jule::Ptr<_1eee3c842_SymbolTable>,jule::Slice<_208de2238_Log>> _1eee9a163_build_symbols(jule::Ptr<_1e01bcb7b_Ast>& _1523_ast,jule::Trait<_1eedbccde_Importer>& _1539_importer,jule::Ptr<_1ee2659b2_SymbolBuilder> _1563_owner) {
	jule::Ptr<_1ee2659b2_SymbolBuilder> _1613_sb = jule::new_ptr<_1ee2659b2_SymbolBuilder>(_1ee2659b2_SymbolBuilder(_1563_owner,_1539_importer,jule::Slice<_208de2238_Log>(),_1523_ast,jule::Ptr<_1eee3c842_SymbolTable>()));
	_1ee26bcb5_build(_1613_sb);
	if ((_1613_sb.get()._field_errors.len() == 0LL)) {
		return std::make_tuple(_1613_sb.get()._field_table,nullptr);
	}
	return std::make_tuple(nullptr,_1613_sb.get()._field_errors);
}



inline std::tuple<jule::Ptr<_1eedc3da0_Package>,jule::Slice<_208de2238_Log>> _1eee9a66e___analyze_package(jule::Slice<jule::Ptr<_1e01bcb7b_Ast>>& _2927_files,jule::Trait<_1eedbccde_Importer>& _2947_importer,jule::I32& _2968_flags) {
	jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>::alloc(0LL,static_cast<jule::I32>(_2927_files.len()));
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_20371a814:;
		if (it != expr.end()) {
			jule::Ptr<_1e01bcb7b_Ast> _20371a43a_f = *it;
			{
				jule::Ptr<_1eee3c842_SymbolTable> _3318_table;
				jule::Slice<_208de2238_Log> _3329_errors;
				std::tie(_3318_table,_3329_errors) = _1eee9a163_build_symbols(_20371a43a_f,_2947_importer,nullptr);
				if ((_3329_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_3329_errors);
				}
				_3113_tables = jule::alloc_for_append(_3113_tables,1);_3113_tables.__push(_3318_table);
			}
			_iter_next_20371a814:;
			++it;
			goto _iter_begin_20371a814;
		}
		_iter_end_20371a814:;
	}
	jule::Ptr<_1eedca071_Sema> _4013_sema = jule::new_ptr<_1eedca071_Sema>(_1eedca071_Sema(jule::Slice<_208de2238_Log>(),jule::Slice<jule::Ptr<_1eee3c842_SymbolTable>>(),jule::Ptr<_1eee3c842_SymbolTable>(),_2968_flags));
	_1eede7797_check(_4013_sema, _3113_tables);
	if ((_4013_sema.get()._field_errors.len() > 0LL)) {
		return std::make_tuple(nullptr,_4013_sema.get()._field_errors);
	}
	jule::Ptr<_1eedc3da0_Package> _4813_pkg = jule::new_ptr<_1eedc3da0_Package>(_1eedc3da0_Package(_4013_sema.get()._field_files));
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_1eedc3da0_Package>,jule::Slice<_208de2238_Log>> _1eee9ab36_analyze_package(jule::Slice<jule::Ptr<_1e01bcb7b_Ast>> _7228_files,jule::Trait<_1eedbccde_Importer> _7247_importer,jule::I32 _7267_flags) {
	if ((_7228_files.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1eedc3da0_Package> _7714_package;
	jule::Slice<_208de2238_Log> _7727_logs;
	std::tie(_7714_package,_7727_logs) = _1eee9a66e___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Ptr<_1ee25b4ad_FnIns> _1eeea0586_find_builtin_fn(jule::Str _2120_ident) {
	{
		auto &_match_expr{ _2120_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_203723d17:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _2420_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eee9c484_builtin_caller_out),jule::Bool()));
				return _2420_f;
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_203723d7d:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _2720_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeedc6d3_builtin_caller_outln),jule::Bool()));
				return _2720_f;
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_203723a70:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _3020_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeedc848_builtin_caller_new),jule::Bool()));
				return _3020_f;
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_203723ad6:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _3320_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeedce75_builtin_caller_panic),jule::Bool()));
				return _3320_f;
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_203723b4c:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _3620_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eeedd0da_builtin_caller_make),jule::Bool()));
				return _3620_f;
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_20372382d:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _3920_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200010b79_builtin_caller_append),jule::Bool()));
				return _3920_f;
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_203723894:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _4220_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200010cde_builtin_caller_copy),jule::Bool()));
				return _4220_f;
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_20372390a:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _4520_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200010e54_builtin_caller_clone),jule::Bool()));
				return _4520_f;
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_203723971:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _4820_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200011262_builtin_caller_assert),jule::Bool()));
				return _4820_f;
			}
		}
		else {
			_case_begin_20372329a:;
			{
				return nullptr;
			}
		}
		_match_end_2037235db:;
	}
}



inline jule::Ptr<_1eee75baa_TypeAlias> _1eeec32bd_find_builtin_type_alias(jule::Str _5528_ident) {
	{
		auto &_match_expr{ _5528_ident };
		
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_2037295c0:;
			{
				static jule::Ptr<_1eee75baa_TypeAlias> _5820_t = jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(jule::Ptr<_1e02d9ddb_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_1e02c1d07_Token(),jule::Str(),jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("u8", 2)), 5))))),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>()));
				return _5820_t;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_20372968b:;
			{
				static jule::Ptr<_1eee75baa_TypeAlias> _6820_t = jule::new_ptr<_1eee75baa_TypeAlias>(_1eee75baa_TypeAlias(jule::Ptr<_1e02d9ddb_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_1e02c1d07_Token(),jule::Str(),jule::new_ptr<_1eee7b4a7_TypeSymbol>(_1eee7b4a7_TypeSymbol(jule::Ptr<_1e01c3db3_TypeDecl>(),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("i32", 3)), 5))))),jule::Slice<jule::Any>(),jule::Slice<jule::Ptr<_1eee75baa_TypeAlias>>()));
				return _6820_t;
			}
		}
		else {
			_case_begin_203729119:;
			{
				return nullptr;
			}
		}
		_match_end_2037292c3:;
	}
}



inline jule::Ptr<_1eec8627e_Trait> _1eeea32c0_find_builtin_trait(jule::Str _8223_ident) {
	return nullptr;
}



inline jule::Any _1eeea40d4_find_builtin_def(jule::Str _8621_ident) {
	jule::Ptr<_1ee25b4ad_FnIns> _8713_f = _1eeea0586_find_builtin_fn(_8621_ident);
	if ((_8713_f != nullptr)) {
		return jule::Any(_8713_f);
	}
	jule::Ptr<_1eee75baa_TypeAlias> _9213_ta = _1eeec32bd_find_builtin_type_alias(_8621_ident);
	if ((_9213_ta != nullptr)) {
		return jule::Any(_9213_ta);
	}
	jule::Ptr<_1eec8627e_Trait> _9713_t = _1eeea32c0_find_builtin_trait(_8621_ident);
	if ((_9713_t != nullptr)) {
		return jule::Any(_9713_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1eeea4de8_find_builtin_def_std_debug(jule::Str _10531_ident) {
	{
		auto &_match_expr{ _10531_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_20372dedc:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _10820_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200013253_builtin_caller_std_debug_out),jule::Bool()));
				return jule::Any(_10820_f);
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_20372dd44:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _11120_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_20001374d_builtin_caller_std_debug_outln),jule::Bool()));
				return jule::Any(_11120_f);
			}
		}
		else {
			_case_begin_20372d915:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_20372c3b4:;
	}
}



inline jule::Any _1eeea73c3_find_builtin_def_std_mem(jule::Str _11829_ident) {
	{
		auto &_match_expr{ _11829_ident };
		
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_2037308e5:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _12120_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_20001176d_builtin_caller_std_mem_size_of),jule::Bool()));
				return jule::Any(_12120_f);
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_20373095b:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _12420_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200011c68_builtin_caller_std_mem_align_of),jule::Bool()));
				return jule::Any(_12420_f);
			}
		}
		else if (_match_expr == jule::Str("free", 4)) {
			_case_begin_20373074c:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _12720_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200012263_builtin_caller_std_mem_free),jule::Bool()));
				return jule::Any(_12720_f);
			}
		}
		else {
			_case_begin_20372ed45:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_20373065e:;
	}
}



inline jule::Any _1eeec1c6c_find_builtin_def_std_jule_integrated(jule::Str _13441_ident) {
	{
		auto &_match_expr{ _13441_ident };
		
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_203733002:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _13720_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200012780_builtin_caller_std_jule_integrated_to_str),jule::Bool()));
				return jule::Any(_13720_f);
			}
		}
		else if (_match_expr == jule::Str("emit", 4)) {
			_case_begin_203732d59:;
			{
				static jule::Ptr<_1ee25b4ad_FnIns> _14020_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>(),jule::Ptr<_1eee76b45_TypeKind>(),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_200012c7a_builtin_caller_std_jule_integrated_emit),jule::Bool()));
				return jule::Any(_14020_f);
			}
		}
		else {
			_case_begin_2037307b3:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_203732ac3:;
	}
}



inline jule::Any _1eeec6a85_find_package_builtin_def(jule::Str _14729_link_path,jule::Str _14745_ident) {
	{
		auto &_match_expr{ _14729_link_path };
		
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_203734aa3:;
			{
				return _1eeea4de8_find_builtin_def_std_debug(_14745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_203734b19:;
			{
				return _1eeea73c3_find_builtin_def_std_mem(_14745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_20373490a:;
			{
				return _1eeec1c6c_find_builtin_def_std_jule_integrated(_14745_ident);
			}
		}
		else {
			_case_begin_2037343bb:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_203734366:;
	}
}



inline jule::Ptr<_1eee43b89_Data> _1eee9e420_builtin_caller_common_plain(jule::Ptr<_1eee45be1_Eval>& _16037_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _16052_fc,jule::Ptr<_1eee43b89_Data>& _16074_d) {
	jule::Ptr<_1ee25b4ad_FnIns> _16113_f = _1eee7a3eb_fnc(_16074_d.get()._field_kind.ptr());
	_1eee32804_FnCallArgChecker _16313_fcac = _1eee32804_FnCallArgChecker(_16037_e,_16052_fc.get()._field_args,_16052_fc.get()._field_token,_16113_f,false,jule::Slice<jule::Any>());
	if ((!(_1eee3540b_check(&_16313_fcac)))) {
		return nullptr;
	}
	jule::Ptr<_1ee24a007_FnCallExprModel> _17413_model = jule::new_ptr<_1ee24a007_FnCallExprModel>(_1ee24a007_FnCallExprModel(_16052_fc.get()._field_token,_16113_f,jule::Bool(),_16074_d.get()._field_model,_16313_fcac._field_arg_models,jule::Ptr<_1eed8a5a3_Scope>(),jule::Bool()));
	if ((_16113_f.get()._field_result == nullptr)) {
		_16074_d=_1eee72a20_build_void_data();
	} else {
		_16074_d=jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(_16113_f.get()._field_result,jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
	}
	_16074_d.get()._field_model=jule::Any(_17413_model);
	return _16074_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eeeed804_builtin_caller_common(jule::Ptr<_1eee45be1_Eval>& _19331_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _19346_fc,jule::Ptr<_1eee43b89_Data>& _19368_d) {
	if ((_19346_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_19331_e.ptr(), _19346_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	return _1eee9e420_builtin_caller_common_plain(_19331_e,_19346_fc,_19368_d);
}



inline jule::Ptr<_1eee43b89_Data> _1eeeed969_builtin_caller_common_mut(jule::Ptr<_1eee45be1_Eval>& _20135_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _20150_fc,jule::Ptr<_1eee43b89_Data>& _20172_d) {
	if ((!(_20172_d.get()._field_mutable))) {
		_1eee462c9_push_err(_20135_e.ptr(), _20150_fc.get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	}
	return _1eeeed804_builtin_caller_common(_20135_e,_20150_fc,_20172_d);
}



inline jule::Ptr<_1eee43b89_Data> _1eee9c31e_builtin_caller_error(jule::Ptr<_1eee45be1_Eval>& _20830_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _20845_fc) {
	if ((_20845_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_20830_e.ptr(), _20845_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_20845_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_20830_e.ptr(), _20845_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	}
	if ((_20845_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_20830_e.ptr(), _20845_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _21913_expr = _1eee65e97_eval_expr(_20830_e, _20845_fc.get()._field_args[0LL]);
	if ((_21913_expr == nullptr)) {
		return nullptr;
	}
	if (_1eee440da_is_nil(_21913_expr.ptr())) {
		_1eee462c9_push_err(_20830_e.ptr(), _20845_fc.get()._field_args[0LL].get()._field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _22813_d = _1eee72a20_build_void_data();
	_22813_d.get()._field_model=jule::Any(jule::new_ptr<_1ee2527c3_BuiltinErrorCallExprModel>(_1ee2527c3_BuiltinErrorCallExprModel(jule::Ptr<_1ee25b4ad_FnIns>(),_21913_expr.get()._field_model)));
	return _22813_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eee9c484_builtin_caller_out(jule::Ptr<_1eee45be1_Eval>& _23628_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _23643_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_23643_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_23628_e.ptr(), _23643_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_23643_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_23628_e.ptr(), _23643_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	}
	if ((_23643_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_23628_e.ptr(), _23643_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _24813_expr = _1eee65e97_eval_expr(_23628_e, _23643_fc.get()._field_args[0LL]);
	if ((_24813_expr == nullptr)) {
		return nullptr;
	}
	if ((!(_1eee8b4c8_is_builtin_str_convertable(_24813_expr.get()._field_kind)))) {
		_1eee462c9_push_err(_23628_e.ptr(), _23643_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _25813_d = _1eee72a20_build_void_data();
	_25813_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24eda8_BuiltinOutCallExprModel>(_1ee24eda8_BuiltinOutCallExprModel(_24813_expr.get()._field_model,jule::Bool())));
	return _25813_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eeedc6d3_builtin_caller_outln(jule::Ptr<_1eee45be1_Eval>& _26330_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _26345_fc,jule::Ptr<_1eee43b89_Data>& _26367_d) {
	_26367_d=_1eee9c484_builtin_caller_out(_26330_e,_26345_fc,_26367_d);
	if ((_26367_d == nullptr)) {
		return nullptr;
	}
	_26367_d.get()._field_model=jule::Any(jule::new_ptr<_1ee250370_BuiltinOutlnCallExprModel>(_1ee250370_BuiltinOutlnCallExprModel(_26367_d.get()._field_model.operator jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>().get()._field_expr,jule::Bool())));
	return _26367_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eeedc848_builtin_caller_new(jule::Ptr<_1eee45be1_Eval>& _27528_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _27543_fc,jule::Ptr<_1eee43b89_Data>& _27565_d) {
	if ((_27543_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_27528_e.ptr(), _27543_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_27543_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_27528_e.ptr(), _27543_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	}
	if ((_27543_fc.get()._field_args.len() > 2LL)) {
		_1eee462c9_push_err(_27528_e.ptr(), _27543_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _28713_t = _1eee65738_eval_expr_kind(_27528_e, _27543_fc.get()._field_args[0LL].get()._field_kind);
	if ((_28713_t == nullptr)) {
		return nullptr;
	}
	if ((!(_28713_t.get()._field_decl))) {
		_1eee462c9_push_err(_27528_e.ptr(), _27543_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_1eee8ad24_is_valid_for_sptr_type(_28713_t.get()._field_kind)))) {
		jule::Ptr<_1ee24550d_StructIns> _29817_s = _1eee7a6c6_strct(_28713_t.get()._field_kind.ptr());
		if (((_29817_s != nullptr) && (_29817_s.get()._field_decl != nullptr)) && _29817_s.get()._field_decl.get()._field_cpp_linked) {
			_1eee462c9_push_err(_27528_e.ptr(), _27543_fc.get()._field_args[0LL].get()._field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	_27565_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(jule::new_ptr<_1eee80d19_Sptr>(_1eee80d19_Sptr(_28713_t.get()._field_kind)), 6)));
	if ((_27543_fc.get()._field_args.len() == 2LL)) {
		jule::Ptr<_1eee76b45_TypeKind> _31217_old = _27528_e.get()._field_prefix;
		_27528_e.get()._field_prefix=_28713_t.get()._field_kind;
		jule::Ptr<_1eee43b89_Data> _31517_init = _1eee65e97_eval_expr(_27528_e, _27543_fc.get()._field_args[1LL]);
		_27528_e.get()._field_prefix=_31217_old;
		if ((_31517_init != nullptr)) {
			_1e02c1d07_Token _32021_token = _27543_fc.get()._field_args[1LL].get()._field_token;
			
			_1eedd6cb4_check_validity_for_init_expr(_27528_e.get()._field_s, (!(_27528_e.get()._field_immutable)),false,_28713_t.get()._field_kind,_31517_init,_32021_token);
			_1eedd482d_check_assign_type(_27528_e.get()._field_s, false,_28713_t.get()._field_kind,_31517_init,_32021_token);
			_27565_d.get()._field_model=jule::Any(jule::new_ptr<_1ee250c00_BuiltinNewCallExprModel>(_1ee250c00_BuiltinNewCallExprModel(_28713_t.get()._field_kind,_31517_init.get()._field_model)));
		}
	} else {
		_27565_d.get()._field_model=jule::Any(jule::new_ptr<_1ee250c00_BuiltinNewCallExprModel>(_1ee250c00_BuiltinNewCallExprModel(_28713_t.get()._field_kind,jule::Any())));
	}
	return _27565_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eeedce75_builtin_caller_panic(jule::Ptr<_1eee45be1_Eval>& _34030_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _34045_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_34045_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_34030_e.ptr(), _34045_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_34045_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_34030_e.ptr(), _34045_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	}
	if ((_34045_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_34030_e.ptr(), _34045_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _35213_expr = _1eee65e97_eval_expr(_34030_e, _34045_fc.get()._field_args[0LL]);
	if ((_35213_expr == nullptr)) {
		return nullptr;
	}
	if ((_1eee791db_prim(_35213_expr.get()._field_kind.ptr()) == nullptr) || (!(_1eee806dc_is_str(_1eee791db_prim(_35213_expr.get()._field_kind.ptr()).ptr())))) {
		_1eee462c9_push_err(_34030_e.ptr(), _34045_fc.get()._field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _36113_d = _1eee72a20_build_void_data();
	_36113_d.get()._field_model=jule::Any(jule::new_ptr<_1ee2511b7_BuiltinPanicCallExprModel>(_1ee2511b7_BuiltinPanicCallExprModel(_34045_fc.get()._field_token,_35213_expr.get()._field_model)));
	return _36113_d;
}



inline jule::Ptr<_1eee43b89_Data> _1eeedd0da_builtin_caller_make(jule::Ptr<_1eee45be1_Eval>& _36929_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _36944_fc,jule::Ptr<_1eee43b89_Data>& _36966_d) {
	if ((_36944_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_36929_e.ptr(), _36944_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_36944_fc.get()._field_args.len() < 2LL)) {
		if ((_36944_fc.get()._field_args.len() == 1LL)) {
			_1eee462c9_push_err(_36929_e.ptr(), _36944_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		}
		_1eee462c9_push_err(_36929_e.ptr(), _36944_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	}
	if ((_36944_fc.get()._field_args.len() > 3LL)) {
		_1eee462c9_push_err(_36929_e.ptr(), _36944_fc.get()._field_args[3LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _38513_t = _1eee65738_eval_expr_kind(_36929_e, _36944_fc.get()._field_args[0LL].get()._field_kind);
	if ((_38513_t == nullptr)) {
		return nullptr;
	}
	if ((!(_38513_t.get()._field_decl)) || (_1eee7a121_slc(_38513_t.get()._field_kind.ptr()) == nullptr)) {
		_1eee462c9_push_err(_36929_e.ptr(), _36944_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_36966_d.get()._field_kind=_38513_t.get()._field_kind;
	jule::Ptr<_1eee43b89_Data> _39713_len = _1eee65e97_eval_expr(_1eedd3d38_evalp(_36929_e.get()._field_s, _36929_e.get()._field_lookup,_38513_t.get()._field_kind), _36944_fc.get()._field_args[1LL]);
	if ((_39713_len == nullptr)) {
		return _36966_d;
	}
	_1eee51801_check_integer_indexing_by_data(_36929_e.ptr(), _39713_len,_36944_fc.get()._field_args[1LL].get()._field_token);
	if ((_36944_fc.get()._field_args.len() == 3LL)) {
		jule::Ptr<_1eee43b89_Data> _40517_cap = _1eee65e97_eval_expr(_1eedd3d38_evalp(_36929_e.get()._field_s, _36929_e.get()._field_lookup,_38513_t.get()._field_kind), _36944_fc.get()._field_args[2LL]);
		if ((_40517_cap == nullptr)) {
			return _36966_d;
		}
		_1eee51801_check_integer_indexing_by_data(_36929_e.ptr(), _40517_cap,_36944_fc.get()._field_args[2LL].get()._field_token);
		_36966_d.get()._field_model=jule::Any(jule::new_ptr<_1ee251d44_BuiltinMakeCallExprModel>(_1ee251d44_BuiltinMakeCallExprModel(_38513_t.get()._field_kind,_39713_len.get()._field_model,_40517_cap.get()._field_model)));
	} else {
		_36966_d.get()._field_model=jule::Any(jule::new_ptr<_1ee251d44_BuiltinMakeCallExprModel>(_1ee251d44_BuiltinMakeCallExprModel(_38513_t.get()._field_kind,_39713_len.get()._field_model,jule::Any())));
	}
	return _36966_d;
}



inline jule::Ptr<_1eee43b89_Data> _200010b79_builtin_caller_append(jule::Ptr<_1eee45be1_Eval>& _42631_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _42646_fc,jule::Ptr<_1eee43b89_Data>& _42668_d) {
	if ((_42646_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_42631_e.ptr(), _42646_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_42646_fc.get()._field_args.len() < 2LL)) {
		if ((_42646_fc.get()._field_args.len() == 1LL)) {
			_1eee462c9_push_err(_42631_e.ptr(), _42646_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		_1eee462c9_push_err(_42631_e.ptr(), _42646_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _43913_t = _1eee65e97_eval_expr(_42631_e, _42646_fc.get()._field_args[0LL]);
	if ((_43913_t == nullptr)) {
		return nullptr;
	}
	if ((_1eee7a121_slc(_43913_t.get()._field_kind.ptr()) == nullptr)) {
		_1eee462c9_push_err(_42631_e.ptr(), _42646_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1ee25b4ad_FnIns> _44913_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>({jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str())),_43913_t.get()._field_kind)),jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(jule::new_ptr<_1ee255b8e_Param>(_1ee255b8e_Param(_1e02c1d07_Token(),true,true,jule::Bool(),jule::Ptr<_1eee7b4a7_TypeSymbol>(),jule::Str())),_1eee7a121_slc(_43913_t.get()._field_kind.ptr()).get()._field_elem))}),_43913_t.get()._field_kind,jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eee9e420_builtin_caller_common_plain),jule::Bool()));
	_42668_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_44913_f, 1)));
	_42668_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24dda7_CommonIdentExprModel>(_1ee24dda7_CommonIdentExprModel(jule::Str("append", 6))));
	_42668_d=_1eee9e420_builtin_caller_common_plain(_42631_e,_42646_fc,_42668_d);
	if ((_42668_d != nullptr)) {
		jule::Ptr<_1ee24a007_FnCallExprModel> _47717_model = _42668_d.get()._field_model.operator jule::Ptr<_1ee24a007_FnCallExprModel>();
		_42668_d.get()._field_model=jule::Any(jule::new_ptr<_1ee25230b_BuiltinAppendCallExprModel>(_1ee25230b_BuiltinAppendCallExprModel(_47717_model.get()._field_args[0LL],_47717_model.get()._field_args[1LL])));
	}
	return _42668_d;
}



inline jule::Ptr<_1eee43b89_Data> _200010cde_builtin_caller_copy(jule::Ptr<_1eee45be1_Eval>& _48629_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _48644_fc,jule::Ptr<_1eee43b89_Data>& _48666_d) {
	if ((_48644_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_48644_fc.get()._field_args.len() < 2LL)) {
		if ((_48644_fc.get()._field_args.len() == 1LL)) {
			_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	if ((_48644_fc.get()._field_args.len() > 2LL)) {
		_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _50213_dest = _1eee65e97_eval_expr(_48629_e, _48644_fc.get()._field_args[0LL]);
	if ((_50213_dest == nullptr)) {
		return nullptr;
	}
	if ((_1eee7a121_slc(_50213_dest.get()._field_kind.ptr()) == nullptr)) {
		_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_50213_dest.get()._field_mutable))) {
		_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_args[0LL].get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ee255b8e_Param> _51413_empty_param = jule::new_ptr<_1ee255b8e_Param>();
	jule::Ptr<_1ee25b4ad_FnIns> _51513_f = jule::new_ptr<_1ee25b4ad_FnIns>(_1ee25b4ad_FnIns(jule::Ptr<_1ee24550d_StructIns>(),jule::Ptr<_1ee2579b5_Fn>(),jule::Slice<jule::Ptr<_1eee76b45_TypeKind>>(),jule::Slice<jule::Ptr<_1ee25a358_ParamIns>>({jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(_51413_empty_param,_50213_dest.get()._field_kind)),jule::new_ptr<_1ee25a358_ParamIns>(_1ee25a358_ParamIns(_51413_empty_param,_50213_dest.get()._field_kind))}),jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("int", 3)), 5))),jule::Ptr<_1eed8a5a3_Scope>(),jule::Ptr<_1ee25edda_ReferenceStack>(),jule::Bool(),jule::Fn<jule::Ptr<_1eee43b89_Data>(jule::Ptr<_1eee45be1_Eval>&,jule::Ptr<_1e02d7ba8_FnCallExpr>&,jule::Ptr<_1eee43b89_Data>&)>(_1eee9e420_builtin_caller_common_plain),jule::Bool()));
	_48666_d.get()._field_kind=jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_51513_f, 1)));
	_48666_d.get()._field_model=jule::Any(jule::new_ptr<_1ee24dda7_CommonIdentExprModel>(_1ee24dda7_CommonIdentExprModel(jule::Str("copy", 4))));
	_48666_d=_1eee9e420_builtin_caller_common_plain(_48629_e,_48644_fc,_48666_d);
	if ((_48666_d != nullptr)) {
		jule::Ptr<_1eee43b89_Data> _54017_src = _48666_d.get()._field_model.operator jule::Ptr<_1ee24a007_FnCallExprModel>().get()._field_args[1LL].operator jule::Ptr<_1eee43b89_Data>();
		jule::Ptr<_1eee818ec_Slc> _54117_slc = _1eee7a121_slc(_54017_src.get()._field_kind.ptr());
		if ((!(_54017_src.get()._field_mutable)) && _1eee782a6_mutable(_54117_slc.get()._field_elem.ptr())) {
			_1eee462c9_push_err(_48629_e.ptr(), _48644_fc.get()._field_args[1LL].get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
		}
	}
	return _48666_d;
}



inline jule::Ptr<_1eee43b89_Data> _200010e54_builtin_caller_clone(jule::Ptr<_1eee45be1_Eval>& _54930_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _54945_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_54945_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_54930_e.ptr(), _54945_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_54945_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_54930_e.ptr(), _54945_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((_54945_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_54930_e.ptr(), _54945_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _56213_d = _1eee65738_eval_expr_kind(_54930_e, _54945_fc.get()._field_args[0LL].get()._field_kind);
	if ((_56213_d == nullptr)) {
		return nullptr;
	}
	if ((!(_1eee78b36_supports_cloning(_56213_d.get()._field_kind.ptr())))) {
		{
			
			if ((_1eee7a121_slc(_56213_d.get()._field_kind.ptr()) != nullptr) || (_1eee7ac7b_map(_56213_d.get()._field_kind.ptr()) != nullptr) || (_1eee79d46_arr(_56213_d.get()._field_kind.ptr()) != nullptr) || (_1eee794b6_sptr(_56213_d.get()._field_kind.ptr()) != nullptr)) {
				_case_begin_20378b643:;
				{
					{
						_1eee462c9_push_err(_54930_e.ptr(), _54945_fc.get()._field_args[0LL].get()._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_56213_d.get()._field_kind.ptr()))}));
					}
				}
			}
			else if ((_1eee7a6c6_strct(_56213_d.get()._field_kind.ptr()) != nullptr)) {
				_case_begin_20378aed3:;
				{
					{
						_1eee462c9_push_err(_54930_e.ptr(), _54945_fc.get()._field_args[0LL].get()._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_56213_d.get()._field_kind.ptr())),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			else {
				_case_begin_20378ae6c:;
				{
					{
						_1eee462c9_push_err(_54930_e.ptr(), _54945_fc.get()._field_args[0LL].get()._field_token,jule::Str("type @ is not support cloning", 29),jule::Slice<jule::Any>({jule::Any(_1eee77063_to_str(_56213_d.get()._field_kind.ptr())),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			_match_end_20378a7eb:;
		}
	}
	_56213_d.get()._field_mutable=true;
	_56213_d.get()._field_model=jule::Any(jule::new_ptr<_1ee250738_BuiltinCloneCallExprModel>(_1ee250738_BuiltinCloneCallExprModel(_56213_d.get()._field_model)));
	return _56213_d;
}



inline jule::Ptr<_1eee43b89_Data> _200011262_builtin_caller_assert(jule::Ptr<_1eee45be1_Eval>& _59531_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _59546_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_59546_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_59531_e.ptr(), _59546_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_59546_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_59531_e.ptr(), _59546_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((_59546_fc.get()._field_args.len() > 2LL)) {
		_1eee462c9_push_err(_59531_e.ptr(), _59546_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _60713_expr = _1eee65e97_eval_expr(_59531_e, _59546_fc.get()._field_args[0LL]);
	if ((_60713_expr == nullptr)) {
		return nullptr;
	}
	if ((_1eee791db_prim(_60713_expr.get()._field_kind.ptr()) == nullptr) || (!(_1eee80412_is_bool(_1eee791db_prim(_60713_expr.get()._field_kind.ptr()).ptr())))) {
		_1eee462c9_push_err(_59531_e.ptr(), _59546_fc.get()._field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1ee25177d_BuiltinAssertCallExprModel> _61613_model = jule::new_ptr<_1ee25177d_BuiltinAssertCallExprModel>(_1ee25177d_BuiltinAssertCallExprModel(_59546_fc.get()._field_token,_60713_expr.get()._field_model,jule::Str("assertion failed", 16)));
	if ((_59546_fc.get()._field_args.len() == 2LL)) {
		jule::Ptr<_1eee43b89_Data> _62417_log = _1eee65e97_eval_expr(_59531_e, _59546_fc.get()._field_args[1LL]);
		if ((_62417_log == nullptr)) {
			return nullptr;
		}
		if (((!(_1eee44690_is_const(_62417_log.ptr()))) || (_1eee791db_prim(_62417_log.get()._field_kind.ptr()) == nullptr)) || (!(_1eee806dc_is_str(_1eee791db_prim(_62417_log.get()._field_kind.ptr()).ptr())))) {
			_1eee462c9_push_err(_59531_e.ptr(), _59546_fc.get()._field_args[1LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("const str", 9)),jule::Any(_1eee77063_to_str(_62417_log.get()._field_kind.ptr()))}));
			return nullptr;
		}
		_61613_model.get()._field_log=_1eed21171_read_str(_62417_log.get()._field_constant.ptr());
	}
	jule::Ptr<_1eee43b89_Data> _63713_d = _1eee72a20_build_void_data();
	_63713_d.get()._field_model=jule::Any(_61613_model);
	return _63713_d;
}



inline jule::Ptr<_1eee43b89_Data> _20001176d_builtin_caller_std_mem_size_of(jule::Ptr<_1eee45be1_Eval>& _64240_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _64255_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_64255_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_64240_e.ptr(), _64255_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _64613_result = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("uint", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
	if ((_64255_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_64240_e.ptr(), _64255_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _64613_result;
	}
	if ((_64255_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_64240_e.ptr(), _64255_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _65813_d = _1eee65738_eval_expr_kind(_64240_e, _64255_fc.get()._field_args[0LL].get()._field_kind);
	if ((_65813_d == nullptr)) {
		return _64613_result;
	}
	_64613_result.get()._field_model=jule::Any(jule::new_ptr<_1ee252b03_SizeofExprModel>(_1ee252b03_SizeofExprModel(_65813_d.get()._field_model)));
	return _64613_result;
}



inline jule::Ptr<_1eee43b89_Data> _200011c68_builtin_caller_std_mem_align_of(jule::Ptr<_1eee45be1_Eval>& _66741_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _66756_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_66756_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_66741_e.ptr(), _66756_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _67113_result = jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("uint", 4)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
	if ((_66756_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_66741_e.ptr(), _66756_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _67113_result;
	}
	if ((_66756_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_66741_e.ptr(), _66756_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _68313_d = _1eee65738_eval_expr_kind(_66741_e, _66756_fc.get()._field_args[0LL].get()._field_kind);
	if ((_68313_d == nullptr)) {
		return _67113_result;
	}
	_67113_result.get()._field_model=jule::Any(jule::new_ptr<_1ee2532a7_AlignofExprModel>(_1ee2532a7_AlignofExprModel(_68313_d.get()._field_model)));
	return _67113_result;
}



inline jule::Ptr<_1eee43b89_Data> _200012263_builtin_caller_std_mem_free(jule::Ptr<_1eee45be1_Eval>& _69237_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _69252_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_69252_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_69237_e.ptr(), _69252_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_69252_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_69237_e.ptr(), _69252_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("h", 1))}));
		return nullptr;
	}
	if ((_69252_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_69237_e.ptr(), _69252_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _70513_d = _1eee65738_eval_expr_kind(_69237_e, _69252_fc.get()._field_args[0LL].get()._field_kind);
	if ((_70513_d == nullptr)) {
		return nullptr;
	}
	if ((!(_1eee7885b_performs_rc(_70513_d.get()._field_kind.ptr())))) {
		_1eee462c9_push_err(_69237_e.ptr(), _69252_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _71413_result = _1eee72a20_build_void_data();
	_71413_result.get()._field_model=jule::Any(jule::new_ptr<_1ee254165_FreeExprModel>(_1ee254165_FreeExprModel(_70513_d.get()._field_model)));
	return _71413_result;
}



inline jule::Ptr<_1eee43b89_Data> _200012780_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1eee45be1_Eval>& _71951_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _71966_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((_71966_fc.get()._field_generics.len() > 0LL)) {
		_1eee462c9_push_err(_71951_e.ptr(), _71966_fc.get()._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((_71966_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_71951_e.ptr(), _71966_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((_71966_fc.get()._field_args.len() > 1LL)) {
		_1eee462c9_push_err(_71951_e.ptr(), _71966_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1eee43b89_Data> _73213_d = _1eee65738_eval_expr_kind(_71951_e, _71966_fc.get()._field_args[0LL].get()._field_kind);
	if ((_73213_d == nullptr)) {
		return nullptr;
	}
	if ((!(_1eee8b4c8_is_builtin_str_convertable(_73213_d.get()._field_kind)))) {
		_1eee462c9_push_err(_71951_e.ptr(), _71966_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_ptr<_1eee43b89_Data>(_1eee43b89_Data(jule::new_ptr<_1eee76b45_TypeKind>(_1eee76b45_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::Trait<_1eee76606_Kind>(_1eee8bb16_build_prim_type(jule::Str("str", 3)), 5))),jule::Ptr<_1eee76b45_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::Any(jule::new_ptr<_1ee2538d4_IntegratedToStrExprModel>(_1ee2538d4_IntegratedToStrExprModel(_73213_d.get()._field_model)))),jule::Bool(),jule::Ptr<_1eed1e24b_Const>()));
}



inline jule::Ptr<_1eee43b89_Data> _200012c7a_builtin_caller_std_jule_integrated_emit(jule::Ptr<_1eee45be1_Eval>& _75049_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _75064_fc,jule::Ptr<_1eee43b89_Data>& ) {
	if ((!(_1eee46e34_is_unsafe(_75049_e.ptr())))) {
		_1eee462c9_push_err(_75049_e.ptr(), _75064_fc.get()._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	if ((_75064_fc.get()._field_args.len() < 1LL)) {
		_1eee462c9_push_err(_75049_e.ptr(), _75064_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _76013_d = _1eee65e97_eval_expr(_75049_e, _75064_fc.get()._field_args[0LL]);
	if ((_76013_d == nullptr)) {
		return nullptr;
	}
	if ((_1eee791db_prim(_76013_d.get()._field_kind.ptr()) == nullptr) || (!(_1eee806dc_is_str(_1eee791db_prim(_76013_d.get()._field_kind.ptr()).ptr())))) {
		_1eee462c9_push_err(_75049_e.ptr(), _75064_fc.get()._field_args[0LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_1eee77063_to_str(_76013_d.get()._field_kind.ptr()))}));
		return nullptr;
	}
	if ((!(_1eee44690_is_const(_76013_d.ptr()))) || (!(_1eed23c23_is_str(_76013_d.get()._field_constant.ptr())))) {
		_1eee462c9_push_err(_75049_e.ptr(), _75064_fc.get()._field_args[0LL].get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1eee43b89_Data> _77513_r = _1eee72a20_build_void_data();
	if ((_75064_fc.get()._field_generics.len() != 0LL)) {
		if ((!(_1eedceb36_check_generic_quantity(_75049_e.get()._field_s.ptr(), 1LL,static_cast<jule::I32>(_75064_fc.get()._field_generics.len()),_75064_fc.get()._field_token)))) {
			return nullptr;
		}
		jule::Ptr<_1eee7b4a7_TypeSymbol> _78117_k = _1ee2618d1_build_type(_75064_fc.get()._field_generics[0LL]);
		if ((!(_1eedd261c_check_type(_75049_e.get()._field_s, _78117_k,_75049_e.get()._field_lookup)))) {
			return nullptr;
		}
		_77513_r.get()._field_kind=_78117_k.get()._field_kind;
	}
	jule::Ptr<_1ee253d13_BackendEmitExprModel> _78813_model = jule::new_ptr<_1ee253d13_BackendEmitExprModel>(_1ee253d13_BackendEmitExprModel(_1eed21171_read_str(_76013_d.get()._field_constant.ptr()),jule::Slice<jule::Any>()));
	if ((_75064_fc.get()._field_args.len() > 1LL)) {
		_78813_model.get()._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I32>((_75064_fc.get()._field_args.len() - 1LL)));
		{
			auto expr = _75064_fc.get()._field_args.slice(1LL);
			auto it = expr.begin();
			_iter_begin_2037c2877:;
			if (it != expr.end()) {
				jule::Ptr<_1e0181a63_Expr> _2037c327e_arg = *it;
				{
					jule::Ptr<_1eee43b89_Data> _79521_argd = _1eee65738_eval_expr_kind(_75049_e, _2037c327e_arg.get()._field_kind);
					if ((_79521_argd == nullptr)) {
						return nullptr;
					}
					_78813_model.get()._field_exprs = jule::alloc_for_append(_78813_model.get()._field_exprs,1);_78813_model.get()._field_exprs.__push(_79521_argd.get()._field_model);
				}
				_iter_next_2037c2877:;
				++it;
				goto _iter_begin_2037c2877;
			}
			_iter_end_2037c2877:;
		}
	}
	_77513_r.get()._field_model=jule::Any(_78813_model);
	return _77513_r;
}



inline jule::Ptr<_1eee43b89_Data> _200013253_builtin_caller_std_debug_out(jule::Ptr<_1eee45be1_Eval>& _80738_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _80753_fc,jule::Ptr<_1eee43b89_Data>& _80775_d) {
	_80775_d=_1eee9c484_builtin_caller_out(_80738_e,_80753_fc,_80775_d);
	if ((_80775_d == nullptr)) {
		return nullptr;
	}
	_80775_d.get()._field_model.operator jule::Ptr<_1ee24eda8_BuiltinOutCallExprModel>().get()._field_debug=true;
	return _80775_d;
}



inline jule::Ptr<_1eee43b89_Data> _20001374d_builtin_caller_std_debug_outln(jule::Ptr<_1eee45be1_Eval>& _81740_e,jule::Ptr<_1e02d7ba8_FnCallExpr>& _81755_fc,jule::Ptr<_1eee43b89_Data>& _81777_d) {
	_81777_d=_1eeedc6d3_builtin_caller_outln(_81740_e,_81755_fc,_81777_d);
	if ((_81777_d == nullptr)) {
		return nullptr;
	}
	_81777_d.get()._field_model.operator jule::Ptr<_1ee250370_BuiltinOutlnCallExprModel>().get()._field_debug=true;
	return _81777_d;
}



inline std::tuple<jule::Bool,jule::Bool> _1e01301b5_check_os(jule::Str _913_arg) {
	jule::Bool _925_ok = jule::Bool();
	jule::Bool _935_exist = jule::Bool();
	_925_ok=false;
	_935_exist=true;
	{
		auto &_match_expr{ _913_arg };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_203813489:;
			{
				_925_ok=_208de623c_is_windows(_208e0b74c_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_203812dc3:;
			{
				_925_ok=_208de658e_is_darwin(_208e0b74c_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_203812e39:;
			{
				_925_ok=_208de689c_is_linux(_208e0b74c_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_203812ea0:;
			{
				_925_ok=_208de7628_is_unix(_208e0b74c_OS);
			}
		}
		else {
			_case_begin_20381260e:;
			{
				_925_ok=true;
				_935_exist=false;
			}
		}
		_match_end_203812a71:;
	}
	return std::make_tuple(_925_ok,_935_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _1e013032a_check_arch(jule::Str _3015_arg) {
	jule::Bool _3027_ok = jule::Bool();
	jule::Bool _3037_exist = jule::Bool();
	_3027_ok=false;
	_3037_exist=true;
	{
		auto &_match_expr{ _3015_arg };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_203816129:;
			{
				_3027_ok=_208de6bee_is_i386(_208e25425_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_203815a63:;
			{
				_3027_ok=_208de700c_is_amd64(_208e25425_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_203815ac9:;
			{
				_3027_ok=_208de731a_is_arm64(_208e25425_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_203815b40:;
			{
				_3027_ok=_208de7ccc_is_64bit(_208e25425_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_203815ba6:;
			{
				_3027_ok=_208de79be_is_32bit(_208e25425_ARCH);
			}
		}
		else {
			_case_begin_20381529e:;
			{
				_3027_ok=true;
				_3037_exist=false;
			}
		}
		_match_end_203815711:;
	}
	return std::make_tuple(_3027_ok,_3037_exist);
}



inline jule::Bool _1e0130490_is_pass_file_annotation(jule::Str _5432_p) {
	_5432_p=_208c754ea_base(_5432_p);
	jule::I32 _569_n = _5432_p.len();
	(_5432_p).mut_slice(0LL,_569_n - static_cast<jule::I32>(static_cast<jule::I32>(_208c75220_ext(_5432_p).len())));
	jule::Str _6213_a1 = jule::Str();
	jule::Str _6513_a2 = jule::Str();
	jule::I32 _6813_i = _2308c1cce_find_last_byte(_5432_p,'_');
	if ((_6813_i == -1LL)) {
		jule::Bool _7118_ok;
		jule::Bool _7126_exist;
		std::tie(_7118_ok,_7126_exist) = _1e01301b5_check_os(_5432_p);
		if (_7126_exist) {
			return _7118_ok;
		}
		std::tie(_7118_ok,_7126_exist) = _1e013032a_check_arch(_5432_p);
		return (!(_7126_exist)) || _7118_ok;
	}
	if ((_6813_i + 1LL) >= _569_n) {
		return true;
	}
	_6213_a1=_5432_p.slice((_6813_i + 1LL));
	(_5432_p).mut_slice(0LL,_6813_i);
	_6813_i=static_cast<jule::I32>(_2308c1cce_find_last_byte(_5432_p,'_'));
	if ((_6813_i != -1LL)) {
		_6513_a2=_5432_p.slice((_6813_i + 1LL));
	}
	if (_6513_a2.empty()) {
		jule::Bool _9218_ok;
		jule::Bool _9226_exist;
		std::tie(_9218_ok,_9226_exist) = _1e01301b5_check_os(_6213_a1);
		if (_9226_exist) {
			return _9218_ok;
		}
		std::tie(_9218_ok,_9226_exist) = _1e013032a_check_arch(_6213_a1);
		return (!(_9226_exist)) || _9218_ok;
	}
	jule::Bool _10014_ok;
	jule::Bool _10022_exist;
	std::tie(_10014_ok,_10022_exist) = _1e013032a_check_arch(_6213_a1);
	if (_10022_exist) {
		if ((!(_10014_ok))) {
			return false;
		}
		std::tie(_10014_ok,_10022_exist) = _1e01301b5_check_os(_6513_a2);
		return (!(_10022_exist)) || _10014_ok;
	}
	std::tie(_10014_ok,_10022_exist) = _1e01301b5_check_os(_6213_a1);
	return (!(_10022_exist)) || _10014_ok;
}



inline void _1e01315e5_set_os_vars(jule::Slice<jule::Str>& _3321_vars) {
	_3321_vars = jule::alloc_for_append(_3321_vars,1);_3321_vars.__push(_208e0b74c_OS);
	if (_208de7628_is_unix(_208e0b74c_OS)) {
		_3321_vars = jule::alloc_for_append(_3321_vars,1);_3321_vars.__push(jule::Str("unix", 4));
	}
}



inline void _1e01318ae_set_arch_vars(jule::Slice<jule::Str>& _4123_vars) {
	_4123_vars = jule::alloc_for_append(_4123_vars,1);_4123_vars.__push(_208e25425_ARCH);
	if (_208de7ccc_is_64bit(_208e25425_ARCH)) {
		_4123_vars = jule::alloc_for_append(_4123_vars,1);_4123_vars.__push(jule::Str("x64", 3));
	}
	if (_208de79be_is_32bit(_208e25425_ARCH)) {
		_4123_vars = jule::alloc_for_append(_4123_vars,1);_4123_vars.__push(jule::Str("x32", 3));
	}
}



inline void _1e0131c11_init_vars(jule::Slice<jule::Str>& _5219_vars,_1e0131271_CompileInfo& _5233_info) {
	_1e01315e5_set_os_vars(_5219_vars);
	_1e01318ae_set_arch_vars(_5219_vars);
	if (_5233_info._field_prod) {
		_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("production", 10));
	}
	if (_5233_info._field_test) {
		_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("test", 4));
	}
	{
		auto &_match_expr{ _5233_info._field_compiler };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_203822ac5:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("clang", 5));
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_203824555:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("gcc", 3));
			}
		}
		_match_end_203824500:;
	}
	{
		auto &_match_expr{ _5233_info._field_cpp_std };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_203824dc4:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("cpp14", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_2038245bb:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("cpp17", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_203825633:;
			{
				_5219_vars = jule::alloc_for_append(_5219_vars,1);_5219_vars.__push(jule::Str("cpp20", 5));
			}
		}
		_match_end_203824d6e:;
	}
}



inline jule::Slice<jule::U8> _1ed149820_read_buff(jule::Str _3014_path) {
	return ({
		auto except = static__222422563_read(_3014_path);
		(except.ok()) ? (except.result) : ({{
			jule::outln(jule::Str("error: file cannot read", 23));
			
			_208e33ed3_exit(1LL);
			return nullptr;
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _208de2238_Log _1ed14cc41_flat_compiler_err(jule::Str _4122_text) {
	return _208de2238_Log(static_cast<jule::I32>(1LL),jule::I32(),jule::I32(),jule::Str(),_4122_text,jule::Str(),jule::Str());
}



inline void _1ed2cbd15_push_passes(jule::Ptr<_1eedc3da0_Package>& _9021_p,jule::Slice<jule::Str>& _9045_passes) {
	{
		auto &expr = _9021_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203839da6:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _203838c40_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = _203838c40_f.get()._field_passes;
					auto it = expr.begin();
					_iter_begin_203842a90:;
					if (it != expr.end()) {
						_1ee261518_Pass _203842ad4_pass = *it;
						{
							if (_203842ad4_pass._field_text.empty()) {
								goto _iter_next_203842a90;
							}
							{
								auto &expr = _9045_passes;
								auto it = expr.begin();
								_iter_begin_203843882:;
								if (it != expr.end()) {
									jule::Str _2038435a7_cpass = *it;
									{
										if (_2038435a7_cpass == _203842ad4_pass._field_text) {
											goto _iter_next_203842a90;
										}
									}
									_iter_next_203843882:;
									++it;
									goto _iter_begin_203843882;
								}
								_iter_end_203843882:;
							}
							_9045_passes = jule::alloc_for_append(_9045_passes,1);_9045_passes.__push(_203842ad4_pass._field_text);
						}
						_iter_next_203842a90:;
						++it;
						goto _iter_begin_203842a90;
					}
					_iter_end_203842a90:;
				}
			}
			_iter_next_203839da6:;
			++it;
			goto _iter_begin_203839da6;
		}
		_iter_end_203839da6:;
	}
}



inline jule::Slice<jule::Str> _1ed2d4acb_get_all_unique_passes(jule::Ptr<_1eedc3da0_Package>& _10731_pkg,jule::Slice<jule::Ptr<_1eedc08c4_ImportInfo>> _10756_uses) {
	jule::Slice<jule::Str> _10813_passes = nullptr;
	_1ed2cbd15_push_passes(_10731_pkg,_10813_passes);
	{
		auto &expr = _10756_uses;
		auto it = expr.begin();
		_iter_begin_203844d4a:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> _203845345_u = *it;
			{
				if ((!(_203845345_u.get()._field_cpp_linked))) {
					_1ed2cbd15_push_passes(_203845345_u.get()._field_package,_10813_passes);
				}
			}
			_iter_next_203844d4a:;
			++it;
			goto _iter_begin_203844d4a;
		}
		_iter_end_203844d4a:;
	}
	return _10813_passes;
}



inline _1e0131271_CompileInfo _1ed308649_build_compile_info(void) {
	_1e0131271_CompileInfo _12113_info = _1e0131271_CompileInfo(_22237d18e_PRODUCTION,_22237ecc8_TEST,jule::Str("clang", 5),jule::Str("cpp14", 5));
	{
		auto &_match_expr{ _22237e3b0_COMPILER };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_203846687:;
			{
				_12113_info._field_compiler=jule::Str("clang", 5);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_2038466ed:;
			{
				_12113_info._field_compiler=jule::Str("gcc", 3);
			}
		}
		_match_end_203846632:;
	}
	{
		auto &_match_expr{ _22237e767_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_203846764:;
			{
				_12113_info._field_compiler=jule::Str("cpp14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_203847259:;
			{
				_12113_info._field_compiler=jule::Str("cpp17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_2038472c0:;
			{
				_12113_info._field_compiler=jule::Str("cpp20", 5);
			}
		}
		_match_end_203846a3e:;
	}
	return _12113_info;
}



inline jule::Ptr<_1e02812b1_Directive> _208e86c17_find_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _3324_directives,jule::Str _3355_tag) {
	{
		auto &expr = _3324_directives;
		auto it = expr.begin();
		_iter_begin_20385d68d:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _20385da67_dr = *it;
			{
				if (_20385da67_dr.get()._field_tag._field_kind == _3355_tag) {
					return _20385da67_dr;
				}
			}
			_iter_next_20385d68d:;
			++it;
			goto _iter_begin_20385d68d;
		}
		_iter_end_20385d68d:;
	}
	return nullptr;
}



inline jule::Bool _208e9043a_has_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _4319_directives,jule::Str _4350_tag) {
	return (_208e86c17_find_directive(_4319_directives,_4350_tag) != nullptr);
}



inline jule::Bool _208e9ae07_is_exist(jule::Slice<jule::Any> _4813_arr,jule::Any _4825_t) {
	{
		auto &expr = _4813_arr;
		auto it = expr.begin();
		_iter_begin_20385eace:;
		if (it != expr.end()) {
			jule::Any &_2038606b2_ref = *it;
			{
				if (_4825_t == _2038606b2_ref) {
					return true;
				}
			}
			_iter_next_20385eace:;
			++it;
			goto _iter_begin_20385eace;
		}
		_iter_end_20385eace:;
	}
	return false;
}



inline jule::Bool _208ead986_is_dead(jule::Any _5816_ref) {
	jule::Bool _5828_dead = jule::Bool();
	if (_208e9ae07_is_exist(_208e88202_deads,_5816_ref)) {
		_5828_dead = true;
		return _5828_dead;
	}
	{
		auto &_match_expr{ _5816_ref };
		
		if (_match_expr.type_is<jule::Ptr<_1ee25b4ad_FnIns>>()) {
			_case_begin_203867ab5:;
			{
				if (_1ee25880c_is_init(_5816_ref.operator jule::Ptr<_1ee25b4ad_FnIns>().get()._field_decl.ptr())) {
					goto _match_end_2038665db;
				}
				goto _case_begin_203866993;
			}
		}
		else {
			_case_begin_203866993:;
			{
				if ((_208ea8255_current == _5816_ref) || (_208eb4706_main_current == _5816_ref)) {
					_5828_dead = true;
					return _5828_dead;
				}
				if (_208e9ae07_is_exist(_208e95819_checking,_5816_ref)) {
					_5828_dead = true;
					return _5828_dead;
				}
			}
		}
		_match_end_2038665db:;
	}
	jule::Any _7913_old = _208ea8255_current;
	_208ea8255_current=_5816_ref;
	jule::I32 _819_len = _208e95819_checking.len();
	_208e95819_checking = jule::alloc_for_append(_208e95819_checking,1);_208e95819_checking.__push(_5816_ref);
	__JULE_DEFER({
		_208ea8255_current=_7913_old;
		_1e010e24e_drop_ref(_208e95819_checking,_819_len);
	});
	{
		auto &_match_expr{ _5816_ref };
		
		if (_match_expr.type_is<jule::Ptr<_1ee25b4ad_FnIns>>()) {
			_case_begin_203869c71:;
			{
				_5828_dead = _1ed146e9e_is_fn_dead(_5816_ref.operator jule::Ptr<_1ee25b4ad_FnIns>());
				return _5828_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eedeb24b_Var>>()) {
			_case_begin_203869cd7:;
			{
				_5828_dead = _1ed1a22b2_is_var_dead(_5816_ref.operator jule::Ptr<_1eedeb24b_Var>());
				return _5828_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee24550d_StructIns>>()) {
			_case_begin_203869d81:;
			{
				_5828_dead = _208ea2d32_is_struct_dead(_5816_ref.operator jule::Ptr<_1ee24550d_StructIns>());
				return _5828_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1eec8627e_Trait>>()) {
			_case_begin_203869de7:;
			{
				_5828_dead = _1e00db4d4_is_trait_dead(_5816_ref.operator jule::Ptr<_1eec8627e_Trait>());
				return _5828_dead;
			}
		}
		else {
			_case_begin_203867db2:;
			{
				_5828_dead = false;
				return _5828_dead;
			}
		}
		_match_end_203869512:;
	}
}



inline void _1e010e24e_drop_ref(jule::Slice<jule::Any>& _10618_refs,jule::I32 _10631_pos) {
	_10618_refs=_10618_refs.slice(0LL,_10631_pos);
}



inline jule::Bool _1e0112b8c_is_all_references_are_dead(jule::Ptr<_1ee25edda_ReferenceStack> _11435_references) {
	jule::I32 _11513_i = 0LL;
	for (; _11513_i < static_cast<jule::I32>(static_cast<jule::I32>(_1ee260539_len(_11435_references.ptr()))); (_11513_i)++) {
		{
			jule::Any _11717_ref = _1ee2608e1_at(_11435_references.ptr(), _11513_i);
			if (_11717_ref == _208ea8255_current) {
				goto _iter_next_20386c5c0;
			}
			if (_11717_ref == _208eb4706_main_current) {
				goto _iter_next_20386c5c0;
			}
			if ((!(_208ead986_is_dead(_11717_ref)))) {
				return false;
			}
		}
	_iter_next_20386c5c0:;
	}
	_iter_end_20386c5c0:;
	return true;
}



inline jule::Bool _1ed146e9e_is_fn_dead(jule::Ptr<_1ee25b4ad_FnIns> _13119_f) {
	if (_13119_f.get()._field_decl.get()._field_cpp_linked || _13119_f.get()._field_anon) {
		return false;
	}
	if (_1ee258532_is_entry_point(_13119_f.get()._field_decl.ptr()) || _1ee25880c_is_init(_13119_f.get()._field_decl.ptr())) {
		return (!(_13119_f.get()._field_decl.get()._field_statically));
	}
	if (_22237ecc8_TEST && _208e9043a_has_directive(_13119_f.get()._field_decl.get()._field_directives,jule::Str("test", 4))) {
		return false;
	}
	if ((_13119_f.get()._field_owner != nullptr)) {
		if (_208e9ae07_is_exist(_208e95819_checking,jule::Any(_13119_f.get()._field_owner))) {
			return true;
		}
		return _208ead986_is_dead(jule::Any(_13119_f.get()._field_owner));
	}
	return _1e0112b8c_is_all_references_are_dead(_13119_f.get()._field_references);
}



inline jule::Bool _1ed1a22b2_is_var_dead(jule::Ptr<_1eedeb24b_Var> _16120_v) {
	if (_16120_v.get()._field_constant) {
		return true;
	}
	if (_16120_v.get()._field_cpp_linked) {
		return false;
	}
	return _1e0112b8c_is_all_references_are_dead(_16120_v.get()._field_references);
}



inline jule::Bool _208ea2d32_is_struct_dead(jule::Ptr<_1ee24550d_StructIns> _20623_s) {
	return false;
}



inline jule::Bool _1e00db4d4_is_trait_dead(jule::Ptr<_1eec8627e_Trait> _22322_t) {
	return false;
}



inline void _1ed140abe_eliminate_dead_functions(jule::Slice<jule::Ptr<_1ee2579b5_Fn>>& _24034_funcs) {
	jule::I32 _24113_i = 0LL;
	while (_24113_i < static_cast<jule::I32>(static_cast<jule::I32>(_24034_funcs.len()))) {
		{
			jule::Ptr<_1ee2579b5_Fn> _24317_f = _24034_funcs[_24113_i];
			jule::I32 _24417_j = 0LL;
			while (_24417_j < static_cast<jule::I32>(static_cast<jule::I32>(_24317_f.get()._field_instances.len()))) {
				{
					jule::Ptr<_1ee25b4ad_FnIns> _24621_ins = _24317_f.get()._field_instances[_24417_j];
					_208eb4706_main_current=jule::Any(_24621_ins);
					if (_1ed146e9e_is_fn_dead(_24621_ins)) {
						_208e88202_deads = jule::alloc_for_append(_208e88202_deads,1);_208e88202_deads.__push(jule::Any(_24621_ins));
						_24317_f.get()._field_instances=jule::append(_24317_f.get()._field_instances.slice(0LL,_24417_j),_24317_f.get()._field_instances.slice((_24417_j + 1LL)));
					} else {
						(_24417_j)++;
					}
				}
			_iter_next_20387e02c:;
			}
			_iter_end_20387e02c:;
			if ((_24317_f.get()._field_instances.len() == 0LL)) {
				_24034_funcs=jule::append(_24034_funcs.slice(0LL,_24113_i),_24034_funcs.slice((_24113_i + 1LL)));
				goto _iter_next_20387d36c;
			}
			(_24113_i)++;
		}
	_iter_next_20387d36c:;
	}
	_iter_end_20387d36c:;
}



inline void _1ed145750_eliminate_dead_globals(jule::Ptr<_1eedc3da0_Package>& _26532_pkg) {
	{
		auto &expr = _26532_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203881c00:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _20388265c_f = *it;
			{
				jule::I32 _26717_i = 0LL;
				while (_26717_i < static_cast<jule::I32>(static_cast<jule::I32>(_20388265c_f.get()._field_vars.len()))) {
					{
						jule::Ptr<_1eedeb24b_Var> _26921_v = _20388265c_f.get()._field_vars[_26717_i];
						_208eb4706_main_current=jule::Any(_26921_v);
						if (_1ed1a22b2_is_var_dead(_26921_v)) {
							_208e88202_deads = jule::alloc_for_append(_208e88202_deads,1);_208e88202_deads.__push(jule::Any(_26921_v));
							_20388265c_f.get()._field_vars=jule::append(_20388265c_f.get()._field_vars.slice(0LL,_26717_i),_20388265c_f.get()._field_vars.slice((_26717_i + 1LL)));
						} else {
							(_26717_i)++;
						}
					}
				_iter_next_203882e54:;
				}
				_iter_end_203882e54:;
			}
			_iter_next_203881c00:;
			++it;
			goto _iter_begin_203881c00;
		}
		_iter_end_203881c00:;
	}
}



inline void _1ed146685_eliminate_dead_functions_package(jule::Ptr<_1eedc3da0_Package>& _28142_pkg) {
	{
		auto &expr = _28142_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203880e41:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _2038842da_f = *it;
			{
				_1ed140abe_eliminate_dead_functions(_2038842da_f.get()._field_funcs);
			}
			_iter_next_203880e41:;
			++it;
			goto _iter_begin_203880e41;
		}
		_iter_end_203880e41:;
	}
}



inline void _1ed14d747_keep_alive_init(jule::Ptr<_1eedc3da0_Package>& _32925_pkg) {
	
	
	jule::Ptr<_1ee2579b5_Fn> _33213_f = _1eedc5ae9_find_fn(_32925_pkg.ptr(), jule::Str("init", 4),false);
	if ((_33213_f != nullptr)) {
		_33213_f.get()._field_statically=true;
	}
}



inline void _1ed2add80_eliminate_package(jule::Ptr<_1eedc3da0_Package>& _33827_pkg) {
	_208e88202_deads=jule::Slice<jule::Any>::alloc(0LL,1024LL);
	_1ed14d747_keep_alive_init(_33827_pkg);
	_1ed145750_eliminate_dead_globals(_33827_pkg);
	_1ed146685_eliminate_dead_functions_package(_33827_pkg);
}



inline void _1ed2b0997_eliminate_defines(jule::Ptr<_1ed25d4b1_IR>& _35031_ir) {
	jule::I32 _35113_i = (_35031_ir.get()._field_used.len() - 1LL);
	for (; (_35113_i >= 0LL); (_35113_i)--) {
		{
			jule::Ptr<_1eedc08c4_ImportInfo> _35317_u = _35031_ir.get()._field_used[_35113_i];
			if ((!(_35317_u.get()._field_cpp_linked))) {
				_1ed2add80_eliminate_package(_35317_u.get()._field_package);
			}
		}
	_iter_next_20388ebca:;
	}
	_iter_end_20388ebca:;
	_1ed2add80_eliminate_package(_35031_ir.get()._field_main);
	_208e88202_deads=nullptr;
	_208e95819_checking=nullptr;
	_208ea8255_current=jule::Any(nullptr);
}



inline void _1e00ea16e_eliminate_dead_code_of_scope(jule::Ptr<_1eed8a5a3_Scope> _7937_s) {
	jule::Ptr<_1ed2dd19a_ScopeDeadCode> _8013_sdc = jule::new_ptr<_1ed2dd19a_ScopeDeadCode>(_1ed2dd19a_ScopeDeadCode(jule::Ptr<_1ed2dd19a_ScopeDeadCode>(),_7937_s,(&(_7937_s.get()._field_stmts)),jule::I32()));
	{
		_1e00d3311_optimize_stmts(_8013_sdc);
	}
}



inline void _1e0116421_eliminate_scope_functions(jule::Slice<jule::Ptr<_1ee2579b5_Fn>>& _8835_funcs) {
	{
		auto &expr = _8835_funcs;
		auto it = expr.begin();
		_iter_begin_203894718:;
		if (it != expr.end()) {
			jule::Ptr<_1ee2579b5_Fn> _203894be1_func = *it;
			{
				{
					auto &expr = _203894be1_func.get()._field_instances;
					auto it = expr.begin();
					_iter_begin_203895450:;
					if (it != expr.end()) {
						jule::Ptr<_1ee25b4ad_FnIns> _2038954d8_ins = *it;
						{
							_1e00ea16e_eliminate_dead_code_of_scope(_2038954d8_ins.get()._field_scope);
						}
						_iter_next_203895450:;
						++it;
						goto _iter_begin_203895450;
					}
					_iter_end_203895450:;
				}
			}
			_iter_next_203894718:;
			++it;
			goto _iter_begin_203894718;
		}
		_iter_end_203894718:;
	}
}



inline void _1e02e4cd6_eliminate_functions_scope_package(jule::Ptr<_1eedc3da0_Package>& _9643_pkg) {
	{
		auto &expr = _9643_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_203895142:;
		if (it != expr.end()) {
			jule::Ptr<_1eee3c842_SymbolTable> _20389572a_f = *it;
			{
				_1e0116421_eliminate_scope_functions(_20389572a_f.get()._field_funcs);
			}
			_iter_next_203895142:;
			++it;
			goto _iter_begin_203895142;
		}
		_iter_end_203895142:;
	}
}



inline void _1ed13dddb_eliminate_scope_package(jule::Ptr<_1eedc3da0_Package>& _10233_pkg) {
	_1e02e4cd6_eliminate_functions_scope_package(_10233_pkg);
}



inline void _1ed13e4a2_eliminate_scopes(jule::Ptr<_1ed25d4b1_IR>& _10730_ir) {
	jule::I32 _10813_i = (_10730_ir.get()._field_used.len() - 1LL);
	for (; (_10813_i >= 0LL); (_10813_i)--) {
		{
			jule::Ptr<_1eedc08c4_ImportInfo> _11017_u = _10730_ir.get()._field_used[_10813_i];
			if ((!(_11017_u.get()._field_cpp_linked))) {
				_1ed13dddb_eliminate_scope_package(_11017_u.get()._field_package);
			}
		}
	_iter_next_20389586d:;
	}
	_iter_end_20389586d:;
	_1ed13dddb_eliminate_scope_package(_10730_ir.get()._field_main);
}



inline void _208e5b26e_throw(jule::Str _914_msg) {
	jule::outln(_914_msg);
	_208e33ed3_exit(1LL);
}



inline jule::Bool _20056a018_is_std_package(jule::Str _37319_f,jule::Str _37327_p) {
	return _208be3dd6_has_prefix(_37319_f,_208c750aa_join(jule::Slice<jule::Str>({_208e02831_PATH_STDLIB,_37327_p})));
}



inline jule::Bool _20056a3d1_is_constant_valid_conditional_case(jule::Ptr<_1eeda2b92_If>& _37740_i) {
	{
		auto &_match_expr{ _37740_i.get()._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_20396a855:;
			{
				jule::Ptr<_1eed1e24b_Const> _38013_c = _37740_i.get()._field_expr.operator jule::Ptr<_1eed1e24b_Const>();
				return _1eed23948_is_bool(_38013_c.ptr()) && _1eed20d96_read_bool(_38013_c.ptr());
			}
		}
		_match_end_20396a800:;
	}
	return false;
}



inline jule::Bool _20056a6ab_is_unreachable_expr(jule::Any& _38625_expr) {
	{
		auto &_match_expr{ _38625_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_20396ab41:;
			{
				jule::Ptr<_1eed1e24b_Const> _38913_c = _38625_expr.operator jule::Ptr<_1eed1e24b_Const>();
				return _1eed23948_is_bool(_38913_c.ptr()) && (!(_1eed20d96_read_bool(_38913_c.ptr())));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1ee247bb4_BinopExprModel>>()) {
			_case_begin_20396aba7:;
			{
				jule::Ptr<_1ee247bb4_BinopExprModel> _39213_m = _38625_expr.operator jule::Ptr<_1ee247bb4_BinopExprModel>();
				if ((_39213_m.get()._field_op._field_kind == jule::Str("&&", 2))) {
					return _20056a6ab_is_unreachable_expr(_39213_m.get()._field_left.get()._field_model) || _20056a6ab_is_unreachable_expr(_39213_m.get()._field_right.get()._field_model);
				}
			}
		}
		_match_end_20396aadb:;
	}
	return false;
}



inline jule::Bool _20056aa52_is_constant_valid_match_case(jule::Ptr<_1eeda4da3_Case>& _40034_case) {
	{
		auto &expr = _40034_case.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_20396c35c:;
		if (it != expr.end()) {
			jule::Ptr<_1eee43b89_Data> &_20396ebde_expr = *it;
			{
				if ((_1eee44690_is_const(_20396ebde_expr.ptr()) && _1eed23948_is_bool(_20396ebde_expr.get()._field_constant.ptr())) && _1eed20d96_read_bool(_20396ebde_expr.get()._field_constant.ptr())) {
					return true;
				}
			}
			_iter_next_20396c35c:;
			++it;
			goto _iter_begin_20396c35c;
		}
		_iter_end_20396c35c:;
	}
	return false;
}



inline jule::Bool _20056ad93_is_unreachable_conditional_case(jule::Ptr<_1eeda2b92_If>& _40937_i) {
	return _20056a6ab_is_unreachable_expr(_40937_i.get()._field_expr);
}



inline jule::Bool _20056b1d4_is_unreachable_match_case(jule::Ptr<_1eeda4da3_Case>& _41331_case) {
	{
		auto &expr = _41331_case.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_20397196b:;
		if (it != expr.end()) {
			jule::Ptr<_1eee43b89_Data> &_203971a59_expr = *it;
			{
				if ((!(_20056a6ab_is_unreachable_expr(_203971a59_expr.get()._field_model)))) {
					return false;
				}
			}
			_iter_next_20397196b:;
			++it;
			goto _iter_begin_20397196b;
		}
		_iter_end_20397196b:;
	}
	return true;
}



inline std::tuple<jule::Bool,jule::U64> _200574a6c_check_for_bit_shift_opt(jule::Ptr<_1ee247620_OperandExprModel>& _42429_l,jule::Ptr<_1ee247620_OperandExprModel>& _42452_r) {
	jule::Bool _42476_ok = jule::Bool();
	jule::U64 _42486_x = jule::U64();
	if ((!(_1eeda20ae_is_int(_1eee77063_to_str(_42429_l.get()._field_kind.ptr())))) || (!(_1eeda20ae_is_int(_1eee77063_to_str(_42452_r.get()._field_kind.ptr()))))) {
		_42476_ok = false;
		_42486_x = 0LLU;
		return std::make_tuple(_42476_ok,_42486_x);
	}
	{
		auto &_match_expr{ _42452_r.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1eed1e24b_Const>>()) {
			_case_begin_203974ae5:;
			{
				goto _match_end_2039745a6;
			}
		}
		else {
			_case_begin_203974650:;
			{
				_42476_ok = false;
				_42486_x = 0LLU;
				return std::make_tuple(_42476_ok,_42486_x);
			}
		}
		_match_end_2039745a6:;
	}
	_42486_x=static_cast<jule::U64>(_1eed21a01_as_u64(_42452_r.get()._field_model.operator jule::Ptr<_1eed1e24b_Const>().ptr()));
	if ((_42486_x == 0LLU) || ((_42486_x & 1LL) != 0LLU)) {
		_42476_ok = false;
		_42486_x = 0LLU;
		return std::make_tuple(_42476_ok,_42486_x);
	}
	jule::F64 _4389_j = _1eec5ac7b_log2(static_cast<jule::F64>(static_cast<jule::F64>(_42486_x)));
	jule::U64 _4399_z = static_cast<jule::U64>(_4389_j);
	if (static_cast<jule::F64>(_4399_z) != _4389_j) {
		_42476_ok = false;
		_42486_x = 0LLU;
		return std::make_tuple(_42476_ok,_42486_x);
	}
	_42476_ok = true;
	_42486_x = _4399_z;
	return std::make_tuple(_42476_ok,_42486_x);
}



inline jule::U64 _2005ddd5b_unix(void) {
	return static_cast<jule::U64>(static_cast<jule::U64>(time(nullptr)));
}



inline jule::U64 _2005de246_unix_year_to_seconds(jule::U64 _26025_y,jule::Bool& _26043_leap) {
	if (((_26025_y - 2LLU) <= 136LLU)) {
		jule::U64 _26217_leaps = ((_26025_y - 68LLU) >> 2LLU);
		_26043_leap=(((_26025_y - 68LLU) & 3LLU) == 0LLU);
		if (_26043_leap) {
			(_26217_leaps)--;
		}
		return static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(31536000LLU * static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_26025_y - 70LLU)))))) + static_cast<jule::U64>(static_cast<jule::U64>(86400LLU * _26217_leaps)));
	}
	jule::U64 _27013_leaps = 0LLU;
	jule::U64 _27113_centuries = 0LLU;
	jule::U64 _27213_cycles = ((_26025_y - 100LLU) / 400LLU);
	jule::U64 _27313_rem = ((_26025_y - 100LLU) % 400LL);
	if ((_27313_rem < 0LLU)) {
		(_27213_cycles)--;
		_27313_rem+=400LLU;
	}
	if ((_27313_rem == 0LLU)) {
		_26043_leap=true;
		_27113_centuries=0LLU;
		_27013_leaps=0LLU;
	} else {
		if ((_27313_rem >= 200LLU)) {
			if ((_27313_rem >= 300LLU)) {
				_27113_centuries=3LLU;
				_27313_rem-=300LLU;
			} else {
				_27113_centuries=2LLU;
				_27313_rem-=200LLU;
			}
		} else {
			if ((_27313_rem >= 100LLU)) {
				_27113_centuries=1LLU;
				_27313_rem-=100LLU;
			} else {
				_27113_centuries=0LLU;
			}
		}
		if ((_27313_rem == 0LLU)) {
			_26043_leap=false;
			_27013_leaps=0LLU;
		} else {
			_27013_leaps=static_cast<jule::U64>(_27313_rem >> 2LLU);
			_27313_rem%=4LL;
			_26043_leap=(_27313_rem == 0LLU);
		}
	}
	_27013_leaps+=static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(97LLU * _27213_cycles)) + static_cast<jule::U64>(static_cast<jule::U64>(24LLU * _27113_centuries)));
	if (_26043_leap) {
		(_27013_leaps)++;
	}
	return static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U64>((_26025_y - 100LLU)))) * 31536000LLU))) + static_cast<jule::U64>(static_cast<jule::U64>((_27013_leaps * 86400LLU))))) + 946684800LLU))) + 86400LLU));
}



inline jule::U64 _2005de675_unix_month_to_seconds(jule::U64 _31726_m,jule::Bool _31739_leap) {
	jule::U64 _31913_t = 0LLU;
	{
		auto &_match_expr{ _31726_m };
		
		if (_match_expr == 1LL) {
			_case_begin_2039a5d8a:;
			{
				_31913_t=2678400LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_2039a7ae5:;
			{
				_31913_t=5097600LLU;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_2039a7b5b:;
			{
				_31913_t=7776000LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_2039a7bc2:;
			{
				_31913_t=10368000LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_2039a7c38:;
			{
				_31913_t=13046400LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_2039a7c9e:;
			{
				_31913_t=15638400LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_2039a7d15:;
			{
				_31913_t=18316800LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_2039a7d7b:;
			{
				_31913_t=20995200LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_2039a7e03:;
			{
				_31913_t=23587200LLU;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_2039a7e7a:;
			{
				_31913_t=26265600LLU;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_2039a8002:;
			{
				_31913_t=28857600LLU;
			}
		}
		_match_end_2039a7980:;
	}
	if (_31739_leap && (_31726_m >= 2LLU)) {
		_31913_t+=86400LLU;
	}
	return _31913_t;
}



inline jule::Bool _20051b926_is_copy_optimizable(jule::Ptr<_1eee43b89_Data>& _75625_expr) {
	if ((!(_75625_expr.get()._field_lvalue))) {
		return false;
	}
	{
		auto &_match_expr{ _75625_expr.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24c009_SlicingExprModel>>()) {
			_case_begin_203ce7b7c:;
			{
				return false;
			}
		}
		_match_end_203ce7ae4:;
	}
	return true;
}



inline jule::Bool _20051da9e_is_iter_copy_optimizable(jule::Ptr<_1eee43b89_Data>& _76730_expr,jule::Ptr<_1eedeb24b_Var>& _76744_v) {
	if ((!(_76730_expr.get()._field_lvalue)) && (!(_1eee782a6_mutable(_76730_expr.get()._field_kind.ptr())))) {
		return true;
	}
	return (!(_76744_v.get()._field_mutable)) && (!(_76730_expr.get()._field_mutable));
}



inline jule::Str _200581e0e_concat_all_parts(jule::Slice<_1e02c1d07_Token> _114721_parts) {
	jule::Str _114813_s = jule::Str();
	{
		auto &expr = _114721_parts;
		auto it = expr.begin();
		_iter_begin_203ceb697:;
		if (it != expr.end()) {
			_1e02c1d07_Token &_203ceb741_p = *it;
			{
				_114813_s+=_203ceb741_p._field_kind;
			}
			_iter_next_203ceb697:;
			++it;
			goto _iter_begin_203ceb697;
		}
		_iter_end_203ceb697:;
	}
	return _114813_s;
}



inline jule::Str _200582261_decompose_common_esq(jule::U8 _115525_b) {
	{
		auto &_match_expr{ _115525_b };
		
		if (_match_expr == '\\') {
			_case_begin_203cec874:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_203cec8da:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_203cec566:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_203cec5cc:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_203cec643:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_203cec324:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_203cec38a:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_203cec401:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_203cec467:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_203cec973:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_203cec203:;
			{
				return jule::Str();
			}
		}
		_match_end_203ceba4e:;
	}
}



inline jule::Str _20058256e_sbtoa(jule::U8 _118210_b) {
	if ((_118210_b == 0LLU)) {
		return jule::Str("\\x00", 4);
	}
	if ((_118210_b < 128LLU)) {
		jule::Str _118713_seq = _200582261_decompose_common_esq(_118210_b);
		if ((!(_118713_seq.empty()))) {
			return _118713_seq;
		}
		if ((32LL <= _118210_b) && (_118210_b <= 126LLU)) {
			return static_cast<jule::Str>(_118210_b);
		}
	}
	jule::Str _11959_seq = _1eec84227_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_118210_b)),8LL);
	if ((_11959_seq.len() == 2LL)) {
		return jule::Str("\\0", 2) + _11959_seq;
	}
	return jule::Str("\\", 1) + _11959_seq;
}



inline jule::Str _2005828c1_cstr_bytes(jule::Slice<jule::U8> _120215_bytes) {
	jule::Str _120313_lit = jule::Str();
	{
		auto &expr = _120215_bytes;
		auto it = expr.begin();
		_iter_begin_203d0354a:;
		if (it != expr.end()) {
			jule::U8 &_203d0367c_b = *it;
			{
				_120313_lit+=_20058256e_sbtoa(_203d0367c_b);
			}
			_iter_next_203d0354a:;
			++it;
			goto _iter_begin_203d0354a;
		}
		_iter_end_203d0354a:;
	}
	return _120313_lit;
}



inline jule::Str _200582bce_cstr_lit(jule::Slice<jule::U8> _121013_bytes) {
	return ((jule::Str("\"", 1) + _2005828c1_cstr_bytes(_121013_bytes)) + jule::Str("\"", 1));
}



inline jule::Str _2005830b9_ftoa(jule::F64 _12149_f,jule::I32 _121417_bitsize) {
	if ((_121417_bitsize != 32LL)) {
		if (_12149_f == static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::I64>(_12149_f))))) {
			return _2005833c7_itoa(static_cast<jule::I64>(static_cast<jule::I64>(_12149_f)));
		}
		if (_12149_f == static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::U64>(_12149_f))))) {
			return _20058376d_utoa(static_cast<jule::U64>(static_cast<jule::U64>(_12149_f)));
		}
	}
	jule::Str _122313_m = _1ed3c6371_fmt_float(_12149_f,'f',-1LL,_121417_bitsize);
	if ((!(_208c72a9c_contains(_122313_m,jule::Str(".", 1))))) {
		_122313_m+=jule::Str(".0", 2);
	}
	return _122313_m;
}



inline jule::Str _2005833c7_itoa(jule::I64 _12309_x) {
	{
		
		if ((_12309_x == jule::MAX_I64)) {
			_case_begin_203d07dac:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if ((_12309_x == jule::MIN_I64)) {
			_case_begin_203d07e34:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_203d07c9c:;
	}
	jule::Str _12389_fmt = _1eec84656_fmt_int(_12309_x,10LL);
	if (_208de7ccc_is_64bit(jule::Str("i386", 4))) {
		return (_12389_fmt + jule::Str("LL", 2));
	}
	return (_12389_fmt + jule::Str("L", 1));
}



inline jule::Str _20058376d_utoa(jule::U64 _12459_x) {
	{
		
		if ((_12459_x == jule::MAX_U64)) {
			_case_begin_203d09430:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_203d09397:;
	}
	jule::Str _12519_fmt = _1eec84227_fmt_uint(_12459_x,10LL);
	if (_208de7ccc_is_64bit(jule::Str("i386", 4))) {
		return (_12519_fmt + jule::Str("LLU", 3));
	}
	return (_12519_fmt + jule::Str("LU", 2));
}



inline jule::Bool _200583a7b_is_forwarded(jule::Ptr<_1eed8a5a3_Scope>& _125818_s) {
	jule::Any _12599_last = _125818_s.get()._field_stmts[(_125818_s.get()._field_stmts.len() - 1LL)];
	{
		auto &_match_expr{ _12599_last };
		
		if (_match_expr.type_is<jule::Ptr<_1eee43b89_Data>>()) {
			_case_begin_203d0cb4d:;
			{
				{
					auto &_match_expr{ _12599_last.operator jule::Ptr<_1eee43b89_Data>().get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1ee2527c3_BuiltinErrorCallExprModel>>()) {
						_case_begin_203d0c796:;
						{
							return true;
						}
					}
					else {
						_case_begin_203d0d225:;
						{
							return false;
						}
					}
					_match_end_203d0d1c0:;
				}
			}
		}
		else {
			_case_begin_203d0c4ee:;
			{
				return true;
			}
		}
		_match_end_203d0c499:;
	}
}



inline jule::Bool _200583dcd_is_builtin_call_has_debuginf(jule::Ptr<_1ee24a007_FnCallExprModel>& _127334_m) {
	if ((!(_1ee25c13a_is_builtin(_127334_m.get()._field_func.ptr())))) {
		return false;
	}
	{
		auto &_match_expr{ _127334_m.get()._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>>()) {
			_case_begin_203d0e6cc:;
			{
				jule::Ptr<_1ee24e58e_CommonSubIdentExprModel> _127913_csie = _127334_m.get()._field_expr.operator jule::Ptr<_1ee24e58e_CommonSubIdentExprModel>();
				return (_127913_csie.get()._field_ident == jule::Str("swap", 4));
			}
		}
		else {
			_case_begin_203d0e039:;
			{
				return false;
			}
		}
		_match_end_203d0ded4:;
	}
}



inline jule::Bool _2005e7ea8_is_cpp_header_file(jule::Str _119923_path) {
	jule::I32 _12009_offset = _2308c1cce_find_last_byte(_119923_path,'.');
	if ((_12009_offset == -1LL)) {
		return false;
	}
	return _208dd1634_is_valid_header_ext(_119923_path.slice(_12009_offset));
}



inline jule::Ptr<_1e02812b1_Directive> _2005e8e10_find_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _3024_directives,jule::Str _3055_tag) {
	{
		auto &expr = _3024_directives;
		auto it = expr.begin();
		_iter_begin_203d1158b:;
		if (it != expr.end()) {
			jule::Ptr<_1e02812b1_Directive> _203d11679_dr = *it;
			{
				if (_203d11679_dr.get()._field_tag._field_kind == _3055_tag) {
					return _203d11679_dr;
				}
			}
			_iter_next_203d1158b:;
			++it;
			goto _iter_begin_203d1158b;
		}
		_iter_end_203d1158b:;
	}
	return nullptr;
}



inline jule::Bool _2005e9350_has_directive(jule::Slice<jule::Ptr<_1e02812b1_Directive>>& _4019_directives,jule::Str _4050_tag) {
	return (_2005e8e10_find_directive(_4019_directives,_4050_tag) != nullptr);
}



inline void _208d9ccc6_print_error_message(jule::Str _3124_msg) {
	jule::outln(_3124_msg);
}



inline void _208dc711e_help(jule::Slice<jule::Str>& _3610_args) {
	if ((_3610_args.len() > 2LL)) {
		_208d9ccc6_print_error_message(jule::Str("invalid command: ", 17) + _3610_args[2LL]);
		return;
	}
	jule::I32 _4213_max = _208da70bb_HELP_MAP[0LL][0LL].len();
	{
		auto &expr = _208da70bb_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_203d63a83:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_203d65227_k = *it;
			{
				jule::I32 _4413_n = _203d65227_k[0LL].len();
				if (_4413_n > _4213_max) {
					_4213_max=_4413_n;
				}
			}
			_iter_next_203d63a83:;
			++it;
			goto _iter_begin_203d63a83;
		}
		_iter_end_203d63a83:;
	}
	jule::Str _5013_s = jule::Str();
	
	{
		auto &expr = _208da70bb_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_203d6679a:;
		if (it != expr.end()) {
			jule::I32 _203d669ba_i = it - expr.begin();
			jule::Array<jule::Str,2> &_203d66b41_part = *it;
			{
				_5013_s+=_203d66b41_part[0LL];
				_5013_s+=_208bde08a_repeat(jule::Str(" ", 1),static_cast<jule::I32>((static_cast<jule::I32>(static_cast<jule::I32>(static_cast<jule::I32>(_4213_max - static_cast<jule::I32>(static_cast<jule::I32>(_203d66b41_part[0LL].len()))))) + 5LL)));
				_5013_s+=_203d66b41_part[1LL];
				if (((_203d669ba_i + 1LL) < 5LL)) {
					_5013_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_203d6679a:;
			++it;
			_203d669ba_i++;
			goto _iter_begin_203d6679a;
		}
		_iter_end_203d6679a:;
	}
	jule::outln(_5013_s);
}



inline void _208dada2e_version(jule::Slice<jule::Str>& _6413_args) {
	if ((_6413_args.len() > 2LL)) {
		_208d9ccc6_print_error_message(jule::Str("invalid command: ", 17) + _6413_args[2LL]);
		return;
	}
	jule::outln(jule::Str("jule0.0.10 @master", 18));
}



inline void _208db302d_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _208de5c42_DISTOS;
		auto it = expr.begin();
		_iter_begin_203d6a31a:;
		if (it != expr.end()) {
			jule::Str &_203d6a68e_os = *it;
			{
				jule::out(_203d6a68e_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_203d6a31a:;
			++it;
			goto _iter_begin_203d6a31a;
		}
		_iter_end_203d6a31a:;
	}
	jule::outln(jule::Str());
}



inline void _208dbc5ba_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _208de5e73_DISTARCH;
		auto it = expr.begin();
		_iter_begin_203d6aabd:;
		if (it != expr.end()) {
			jule::Str &_203d6b360_arch = *it;
			{
				jule::out(_203d6b360_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_203d6aabd:;
			++it;
			goto _iter_begin_203d6aabd;
		}
		_iter_end_203d6aabd:;
	}
	jule::outln(jule::Str());
}



inline void _208dc4c76_tool(jule::Slice<jule::Str>& _9310_args) {
	if ((_9310_args.len() == 2LL)) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if ((_9310_args.len() > 3LL)) {
		_208d9ccc6_print_error_message(jule::Str("invalid command: ", 17) + _9310_args[3LL]);
		return;
	}
	jule::Str _1049_cmd = _9310_args[2LL];
	{
		auto &_match_expr{ _1049_cmd };
		
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_203d6e0bb:;
			{
				_208db302d_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_203d6dc47:;
			{
				_208dbc5ba_tool_distarch();
			}
		}
		else {
			_case_begin_203d6b6c3:;
			{
				_208d9ccc6_print_error_message(jule::Str("undefined command: ", 19) + _1049_cmd);
			}
		}
		_match_end_203d6d8d4:;
	}
}



inline void _208dc02b0_julenv(jule::Slice<jule::Str>& _11312_args) {
	if ((_11312_args.len() > 2LL)) {
		_208d9ccc6_print_error_message(jule::Str("invalid command: ", 17) + _11312_args[2LL]);
		return;
	}
	jule::outln(jule::Str("julec version: jule0.0.10 @master", 33));
	jule::outln(jule::Str("architecture: i386", 18));
	jule::outln(jule::Str("operating system: windows", 25));
	jule::outln(jule::Str("default compiler: ", 18) + _22237e3b0_COMPILER);
	jule::outln(jule::Str("default C++ standard: ", 22) + _22237e767_CPP_STD);
}



inline void _208dc0d93_mod(jule::Slice<jule::Str>& _1269_args) {
	if ((_1269_args.len() == 2LL)) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;
	}
	if ((_1269_args.len() > 3LL)) {
		_208d9ccc6_print_error_message(jule::Str("invalid command: ", 17) + _1269_args[3LL]);
		return;
	}
	{
		auto &_match_expr{ _1269_args[2LL] };
		
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_203d73a4e:;
			{
				({
					auto except = static__222425ce7_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_208d9ccc6_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_203d71d27:;
			{
				_208d9ccc6_print_error_message(jule::Str("invalid command: ", 17) + _1269_args[2LL]);
			}
		}
		_match_end_203d73576:;
	}
}



inline jule::Bool _208dc1976_process_command(jule::Slice<jule::Str>& _15021_args) {
	{
		auto &_match_expr{ _15021_args[1LL] };
		
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_203d75b2d:;
			{
				_208dc711e_help(_15021_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_203d75be9:;
			{
				_208dada2e_version(_15021_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_203d75c60:;
			{
				_208dc4c76_tool(_15021_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_203d75369:;
			{
				_208dc02b0_julenv(_15021_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_203d753d0:;
			{
				_208dc0d93_mod(_15021_args);
			}
		}
		else {
			_case_begin_203d758b9:;
			{
				return false;
			}
		}
		_match_end_203d74e3a:;
	}
	return true;
}



inline void _208dc2559_show_info(void) {
	jule::outln(jule::Str("JuleC is a tool for Jule source code and developers.\n\nCommands:\n    help          Show help,\n    version       Show version,\n    tool          Tools for effective Jule,\n    julenv        Show information about native jule environment\n    mod           Module management\n\nCompilation:\n    julec [OPTIONS] INPUT\n", 310));
}



void entry_point(void) {
	jule::Slice<jule::Str> _18013_args = _22edc40d4_args();
	if ((_18013_args.len() < 2LL)) {
		_208dc2559_show_info();
		return;
	}
	if (_208dc1976_process_command(_18013_args)) {
		return;
	}
	_20061b174_compile_command(_18013_args);
}



inline void _208dceb82_enable_vtp(void) {
	jule::U32 _199_h_out = _2224a1c52_get_std_handle(static_cast<jule::U32>(4294967285LLU));
	if ((_199_h_out == jule::MAX_U64)) {
		return;
	}
	jule::I32 _2413_dw_mode = 0LL;
	if ((!(_2224a464a_get_console_mode(_199_h_out,_2413_dw_mode)))) {
		return;
	}
	_2413_dw_mode|=4LL;
	_2224a4a35_set_console_mode(_199_h_out,_2413_dw_mode);
}



inline void _208dacae9_init(void) {
	_208dceb82_enable_vtp();
}



inline void _20060a262_write_output(jule::Str _5017_path,jule::Str _5028_content) {
	jule::Str _519_dir = _208c75660_dir(_5017_path);
	({
		auto except = static__208c76034_of(_519_dir);
		if (!except.ok()) {
			({
				auto except = static__208c75aa0_create(_519_dir);
				if (!except.ok()) {
					_208e5b26e_throw(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	({
		auto except = static__222425ce7_write(_5017_path,static_cast<jule::Slice<jule::U8>>(_5028_content),432LL);
		if (!except.ok()) {
			_208e5b26e_throw(jule::Str("a problem occurs when code generation", 37));
		}
	});
}



inline void _200618c10_clear_objects(void) {
	({
		auto except = static__2224db4ea_remove(_200619d98_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;
		}
	});
	static__208c75c15_remove(_200054492_OUT_DIR);
}



inline void _200619518_compile_ir(jule::Str _7815_compiler,jule::Str _7830_compiler_cmd) {
	jule::Ptr<_208e1cd8a_Cmd> _7913_cmd = static__208e1d2db_new(_7815_compiler);
	_7913_cmd.get()._field_args=jule::Slice<jule::Str>({_7815_compiler});
	_7913_cmd.get()._field_args=jule::append(_7913_cmd.get()._field_args,_208c72937_split(_7830_compiler_cmd,jule::Str(" ", 1),-1LL));
	jule::I32 _829_status = ({
		auto except = _208e1d5b6_spawn(_7913_cmd.ptr());
		(except.ok()) ? (except.result) : ({
			{
				auto &_match_expr{ except.error };
				
				if (_match_expr == static_cast<jule::I32>(12LL)) {
					_case_begin_203d82035:;
					{
						static__208e72274_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of fork problem", 56));
					}
				}
				else if (_match_expr == static_cast<jule::I32>(3LL)) {
					_case_begin_203d81d26:;
					{
						static__208e72274_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of compiler path is not exist", 70));
					}
				}
				else if (_match_expr == static_cast<jule::I32>(9LL)) {
					_case_begin_203d81d8c:;
					{
						static__208e72274_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of compiler path is not in the proper format", 85));
					}
				}
				else if (_match_expr == static_cast<jule::I32>(0LL)) {
					_case_begin_203d81e03:;
					{
						static__208e72274_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of permission denied", 61));
					}
				}
				else {
					_case_begin_203d81a6d:;
					{
						static__208e72274_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of unkown problem", 58));
					}
				}
				_match_end_203d81b06:;
			}
			_208e5b26e_throw(jule::Str());
			0LL;
		});
	});
	if ((_829_status != 0LL)) {
		jule::Str _9913_error_message = ((jule::Str("\n>>> your backend compiler (", 28) + _22237e3b0_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149));
		static__208e72274_print(jule::Str("\033[31m", 5),_9913_error_message);
		_208e5b26e_throw(jule::Str());
	}
	_200618c10_clear_objects();
}



inline void _20061967d_do_spell(jule::Str _11013_obj,jule::Str _11023_compiler,jule::Str _11038_compiler_cmd) {
	jule::Str _1119_path = _200619d98_get_compile_path();
	_20060a262_write_output(_1119_path,_11013_obj);
	if ((!(_22237eb1e_TRANSPILATION))) {
		_200619518_compile_ir(_11023_compiler,_11038_compiler_cmd);
	}
}



inline jule::Bool _2006197e3_is_cpp_source_file(jule::Str _11823_path) {
	jule::I32 _1199_offset = _2308c1cce_find_last_byte(_11823_path,'.');
	if ((_1199_offset == -1LL)) {
		return false;
	}
	return _208dd1942_is_valid_cpp_ext(_11823_path.slice(_1199_offset));
}



inline void _200619958_push_comp_cmd_clang(jule::Str& _12629_cmd) {
	_12629_cmd+=jule::Str("-Wno-everything ", 16);
	_12629_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _22237e767_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_203d894b0:;
			{
				_12629_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_203d89526:;
			{
				_12629_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_203d8958c:;
			{
				_12629_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_203d893b1:;
	}
	_12629_cmd+=jule::Str(" ", 1);
	if (_22237d18e_PRODUCTION) {
		_12629_cmd+=jule::Str("-O3 ", 4);
		_12629_cmd+=jule::Str("-flto ", 6);
		_12629_cmd+=jule::Str("-DNDEBUG ", 9);
		_12629_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_12629_cmd+=jule::Str("-O0 ", 4);
	}
}



inline void _200619abd_push_comp_cmd_gcc(jule::Str& _14927_cmd) {
	_14927_cmd+=jule::Str("-w ", 3);
	_14927_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _22237e767_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_203d89603:;
			{
				_14927_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_203d8bcba:;
			{
				_14927_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_203d8bd31:;
			{
				_14927_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_203d8bb66:;
	}
	_14927_cmd+=jule::Str(" ", 1);
	if (_22237d18e_PRODUCTION) {
		_14927_cmd+=jule::Str("-O3 ", 4);
		_14927_cmd+=jule::Str("-DNDEBUG ", 9);
		_14927_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_14927_cmd+=jule::Str("-O0 ", 4);
	}
}



inline std::tuple<jule::Str,jule::Str> _200619c33_gen_compile_cmd(jule::Str _17220_source_path,jule::Ptr<_1ed25d4b1_IR>& _17239_ir) {
	jule::Str &_17310_compiler = _22237e5ad_COMPILER_PATH;
	jule::Str _17413_cmd = jule::Str();
	{
		auto &_match_expr{ _22237e3b0_COMPILER };
		
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_203d8e372:;
			{
				_200619abd_push_comp_cmd_gcc(_17413_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_203d8e75c:;
			{
				_200619958_push_comp_cmd_clang(_17413_cmd);
			}
		}
		_match_end_203d8e680:;
	}
	{
		auto &expr = _17239_ir.get()._field_passes;
		auto it = expr.begin();
		_iter_begin_203d9074c:;
		if (it != expr.end()) {
			jule::Str &_203d8ea6a_pass = *it;
			{
				_17413_cmd+=_203d8ea6a_pass;
				_17413_cmd+=jule::Str(" ", 1);
			}
			_iter_next_203d9074c:;
			++it;
			goto _iter_begin_203d9074c;
		}
		_iter_end_203d9074c:;
	}
	{
		auto &expr = _17239_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_203d91077:;
		if (it != expr.end()) {
			jule::Ptr<_1eedc08c4_ImportInfo> &_203d909d3_u = *it;
			{
				if (_203d909d3_u.get()._field_cpp_linked && _2006197e3_is_cpp_source_file(_203d909d3_u.get()._field_path)) {
					_17413_cmd+=_203d909d3_u.get()._field_path;
					_17413_cmd+=jule::Str(" ", 1);
				}
			}
			_iter_next_203d91077:;
			++it;
			goto _iter_begin_203d91077;
		}
		_iter_end_203d91077:;
	}
	if ((!(_20006e2c0_OUT.empty()))) {
		_17413_cmd+=jule::Str("-o ", 3);
		_17413_cmd+=_20006e2c0_OUT;
		_17413_cmd+=jule::Str(" ", 1);
	}
	_17413_cmd+=_17220_source_path;
	return std::make_tuple(_17310_compiler,_17413_cmd);
}



inline jule::Str _200619d98_get_compile_path(void) {
	return _208c750aa_join(jule::Slice<jule::Str>({_200054492_OUT_DIR,_20006d38a_OUT_NAME}));
}



inline void _20061a00d_apply_target_independent_optimizations(jule::Ptr<_1ed25d4b1_IR>& _21548_ir) {
	if (_22237d3d1_OPT_DEADCODE) {
		_1ed2b0997_eliminate_defines(_21548_ir);
	}
	jule::Ptr<_200575919_Optimizer> _22213_opt = static__200575cd2_new(_21548_ir);
	_20057770c_optimize(_22213_opt.ptr());
	if (_22237d3d1_OPT_DEADCODE) {
		_1ed13e4a2_eliminate_scopes(_21548_ir);
	}
}



inline void _20061a173_check_compiler_flag(void) {
	{
		auto &_match_expr{ _22237e3b0_COMPILER };
		
		if (_match_expr == jule::Str()) {
			_case_begin_203d94c5c:;
			{
				_208e5b26e_throw(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_203d95312:;
			{
				if (_22237e5ad_COMPILER_PATH.empty()) {
					_22237e5ad_COMPILER_PATH=jule::Str("clang++", 7);
				}
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_203d944ba:;
			{
				if (_22237e5ad_COMPILER_PATH.empty()) {
					_22237e5ad_COMPILER_PATH=jule::Str("g++", 3);
				}
			}
		}
		else {
			_case_begin_203d943ee:;
			{
				_208e5b26e_throw(jule::Str("invalid option value for --compiler: ", 37) + _22237e3b0_COMPILER);
			}
		}
		_match_end_203d9481c:;
	}
}



inline void _20061a2d8_check_target_arch(jule::Str _24822_arch) {
	{
		auto &expr = _208de5e73_DISTARCH;
		auto it = expr.begin();
		_iter_begin_203d9608d:;
		if (it != expr.end()) {
			jule::Str &_203d954ee_distarch = *it;
			{
				if (_24822_arch == _203d954ee_distarch) {
					return;
				}
			}
			_iter_next_203d9608d:;
			++it;
			goto _iter_begin_203d9608d;
		}
		_iter_end_203d9608d:;
	}
	_208e5b26e_throw(jule::Str("--target: unsupported/undefined architecture: ", 46) + _24822_arch);
}



inline void _20061a44d_check_target_os(jule::Str _25720_os) {
	{
		auto &expr = _208de5c42_DISTOS;
		auto it = expr.begin();
		_iter_begin_203d97cb5:;
		if (it != expr.end()) {
			jule::Str &_203d97d3c_distos = *it;
			{
				if (_25720_os == _203d97d3c_distos) {
					return;
				}
			}
			_iter_next_203d97cb5:;
			++it;
			goto _iter_begin_203d97cb5;
		}
		_iter_end_203d97cb5:;
	}
	_208e5b26e_throw(jule::Str("--target: unsupported/undefined operating system: ", 50) + _25720_os);
}



inline void _20061a5b3_check_target_flag(jule::Str& _26623_target) {
	if (_26623_target.empty()) {
		_208e5b26e_throw(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _2719_parts = _208c72937_split(_26623_target,jule::Str("-", 1),-1LL);
	if ((_2719_parts.len() != 2LL)) {
		_208e5b26e_throw(jule::Str("--target: undefined platform target format: ", 44) + _26623_target);
	}
	jule::Str _27610_os = _2719_parts[0LL];
	jule::Str _27614_arch = _2719_parts[1LL];
	std::tie(_27610_os,_27614_arch) = std::make_tuple(_2719_parts[0LL],_2719_parts[1LL]);
	if ((_27610_os != jule::Str("native", 6))) {
		_20061a44d_check_target_os(_27610_os);
		_208e0b74c_OS=_27610_os;
	}
	if ((_27614_arch != jule::Str("native", 6))) {
		_20061a2d8_check_target_arch(_27614_arch);
		_208e25425_ARCH=_27614_arch;
	}
	_1eed97e1d_update_target();
}



inline void _20061a959_check_opt_flag(jule::Str& _28920_opt) {
	if (_28920_opt.empty()) {
		_208e5b26e_throw(jule::Str("missing option value: --opt", 27));
	}
	{
		auto &_match_expr{ _28920_opt };
		
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_203d9d86a:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_203d9d56d:;
			{
				_22237de5e_push_opt_level(static_cast<jule::I32>(1LL));
			}
		}
		else {
			_case_begin_203d9cca9:;
			{
				_208e5b26e_throw(jule::Str("--opt: invalid optimization level: ", 35) + _28920_opt);
			}
		}
		_match_end_203d9ca89:;
	}
}



inline void _20061aabe_check_cpp_std_flag(void) {
	{
		auto &_match_expr{ _22237e767_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5) || _match_expr == jule::Str("cpp17", 5) || _match_expr == jule::Str("cpp20", 5)) {
			_case_begin_203da0053:;
			{
				goto _match_end_203d9d5e5;
			}
		}
		else {
			_case_begin_203d9e360:;
			{
				_208e5b26e_throw(jule::Str("--cppstd: invalid optimization level: ", 38) + _22237e767_CPP_STD);
			}
		}
		_match_end_203d9d5e5:;
	}
}



inline jule::Slice<jule::Str> _20061ac34_check_flags(jule::Slice<jule::Str>& _31217_args) {
	jule::Str _31313_opt = jule::Str("L0", 2);
	jule::Str _31413_target = jule::Str("native-native", 13);
	jule::Ptr<_200613ba5_FlagSet> _31613_fs = static__200613ec4_new();
	_200616515_add_var_0(_31613_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_31313_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	_200616515_add_var_0(_31613_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_31413_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	_200616515_add_var_0(_31613_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_20006e2c0_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237e965_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Allow shadowing", 15));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237eb1e_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	_200616515_add_var_0(_31613_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_22237e3b0_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	_200616515_add_var_0(_31613_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_22237e5ad_COMPILER_PATH)))),jule::Str("compiler-path", 13),0LL,jule::Str("Path of backend compiler", 24));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d18e_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237ee82_RC)))),jule::Str("disable-rc", 10),0LL,jule::Str("Disable reference counting", 26));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2223801c4_SAFETY)))),jule::Str("disable-safety", 14),0LL,jule::Str("Disable safety", 14));
	_200616515_add_var_0(_31613_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_22237e767_CPP_STD)))),jule::Str("cppstd", 6),0LL,jule::Str("C++ standard", 12));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d2b0_OPT_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d3d1_OPT_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d579_OPT_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d69a_OPT_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d7bb_OPT_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237d8dc_OPT_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237db1d_OPT_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	_200616515_add_var_1(_31613_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_22237dc3e_OPT_COND)))),jule::Str("opt-cond", 8),0LL,jule::Str("Conditional optimizations", 25));
	jule::Slice<jule::Str> _33813_content = ({
		auto except = _20061506e_parse(_31613_fs.ptr(), _31217_args);
		(except.ok()) ? (except.result) : ({
			_208e5b26e_throw(except.error.operator jule::Str());
			nullptr;
		});
	});
	_20061a173_check_compiler_flag();
	_20061aabe_check_cpp_std_flag();
	_20061a5b3_check_target_flag(_31413_target);
	_20061a959_check_opt_flag(_31313_opt);
	return _33813_content;
}



inline void _20061ad99_setup_sema_flags(jule::I32& _35126_flags) {
	if (_22237e965_SHADOWING) {
		_35126_flags|=static_cast<jule::I32>(1LL);
	}
}



inline jule::Ptr<_1ed25d4b1_IR> _20061b00e_build_ir(jule::Slice<jule::Str>& _35714_args) {
	jule::Slice<jule::Str> _3589_content = _20061ac34_check_flags(_35714_args);
	jule::I32 _36013_sema_flags = static_cast<jule::I32>(0LL);
	_20061ad99_setup_sema_flags(_36013_sema_flags);
	if ((_3589_content.len() == 0LL)) {
		_208e5b26e_throw(_208de2722_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if ((_3589_content.len() > 1LL)) {
		_208e5b26e_throw(jule::Str("undefined content: ", 19) + _3589_content[1LL]);
	}
	jule::Str _36814_path;
	jule::Bool _36820_ok;
	std::tie(_36814_path,_36820_ok) = _208c75385_abs(_3589_content[0LL]);
	if ((!(_36820_ok))) {
		_208e5b26e_throw(jule::Str("compile path could not processed because of a problem", 53));
	}
	jule::Ptr<_222424a2c_Status> _3749_inf = ({
		auto except = static__208c76034_of(_208e02831_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_208e5b26e_throw(_208de2722_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
			return nullptr;
		} jule::Ptr<_222424a2c_Status>();});
	});
	if ((!(_22243c6d2_is_dir(_3749_inf.ptr())))) {
		_208e5b26e_throw(_208de2722_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	}
	jule::Ptr<_1ed25d4b1_IR> _38214_ir;
	jule::Slice<_208de2238_Log> _38218_logs;
	std::tie(_38214_ir,_38218_logs) = static__1e00de075_build(_36814_path,_36013_sema_flags);
	if ((_38214_ir == nullptr) && (_38218_logs == nullptr)) {
		_208e5b26e_throw(_208de2722_logf(jule::Str("there is no Jule source code in package: @", 42),jule::Slice<jule::Any>({jule::Any(_36814_path)})));
	}
	if ((_38218_logs != nullptr)) {
		static__208e4903c_print_logs(_38218_logs);
		_208e5b26e_throw(jule::Str());
	}
	return _38214_ir;
}



inline void _20061b174_compile_command(jule::Slice<jule::Str>& _39725_args) {
	_39725_args=_39725_args.slice(1LL);
	if ((_39725_args[0LL] == jule::Str("test", 4))) {
		_22237ecc8_TEST=true;
		_39725_args=_39725_args.slice(1LL);
	}
	jule::Ptr<_1ed25d4b1_IR> _40313_ir = _20061b00e_build_ir(_39725_args);
	
	if ((!(_22237ecc8_TEST))) {
		jule::Ptr<_1ee2579b5_Fn> _40817_f = _1eedc5ae9_find_fn(_40313_ir.get()._field_main.ptr(), jule::Str("main", 4),false);
		if ((_40817_f == nullptr)) {
			_208e5b26e_throw(_208de2722_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		}
		_40817_f.get()._field_statically=true;
	}
	jule::Ptr<_1ee2579b5_Fn> _41413_f = _1eedc5ae9_find_fn(_40313_ir.get()._field_main.ptr(), jule::Str("init", 4),false);
	if ((_41413_f != nullptr)) {
		_41413_f.get()._field_statically=true;
	}
	_20061a00d_apply_target_independent_optimizations(_40313_ir);
	_1ed2cad03_order(_40313_ir.ptr());
	jule::Str _42410_compiler;
	jule::Str _42420_compiler_cmd;
	std::tie(_42410_compiler,_42420_compiler_cmd) = _200619c33_gen_compile_cmd(_200619d98_get_compile_path(),_40313_ir);
	jule::Ptr<_2005a036c_ObjectCoder> _42613_oc = static__20059d535_new(_40313_ir,_2005bb872_SerializationInfo(_42410_compiler,_42420_compiler_cmd));
	jule::Str _43013_obj = _2005e7ae0_serialize(_42613_oc.ptr());
	if (_22237ecc8_TEST) {
		jule::Ptr<_20041aeb8_TestCoder> _43317_tc = static__200464a8e_new(_42613_oc);
		_20046608a_serialize(_43317_tc.ptr(), _43013_obj);
	}
	_2005e7815_append_standard(_42613_oc.ptr(), _43013_obj);
	_20061967d_do_spell(_43013_obj,_42410_compiler,_42420_compiler_cmd);
}




void __jule_call_initializers(void) {
	_22237d18e_PRODUCTION = false;
	_22237d2b0_OPT_COPY = false;
	_22237d3d1_OPT_DEADCODE = false;
	_22237d579_OPT_APPEND = false;
	_22237d69a_OPT_MATH = false;
	_22237d7bb_OPT_ACCESS = false;
	_22237d8dc_OPT_INLINE = false;
	_22237db1d_OPT_PTR = false;
	_22237dc3e_OPT_COND = false;
	_22237e3b0_COMPILER = jule::Str();
	_22237e5ad_COMPILER_PATH = jule::Str();
	_22237e767_CPP_STD = jule::Str("cpp17", 5);
	_22237e965_SHADOWING = false;
	_22237eb1e_TRANSPILATION = false;
	_22237ecc8_TEST = false;
	_22237ee82_RC = true;
	_2223801c4_SAFETY = true;
	_2224805b0_STDIN = _2224a1c52_get_std_handle(static_cast<jule::U32>(4294967286LLU));
	_2224875d9_STDOUT = _2224a1c52_get_std_handle(static_cast<jule::U32>(4294967285LLU));
	_222487a3a_STDERR = _2224a1c52_get_std_handle(static_cast<jule::U32>(4294967284LLU));
	_222566d28_FIRST = jule::Array<jule::U8,256>({});
	_222567499_ACCEPT_RANGES = jule::Array<_2225658d7_accept_range,16>({_2225658d7_accept_range(128LLU,191LLU),_2225658d7_accept_range(160LLU,191LLU),_2225658d7_accept_range(128LLU,159LLU),_2225658d7_accept_range(144LLU,191LLU),_2225658d7_accept_range(128LLU,143LLU)});
	_208c302eb__L = jule::new_ptr<_208c6ea22_RangeTable>(_208c6ea22_RangeTable(jule::Slice<_208c6de2d_Range16>({_208c6de2d_Range16(65LLU,90LLU,1LLU),_208c6de2d_Range16(97LLU,122LLU,1LLU),_208c6de2d_Range16(170LLU,181LLU,11LLU),_208c6de2d_Range16(186LLU,192LLU,6LLU),_208c6de2d_Range16(193LLU,214LLU,1LLU),_208c6de2d_Range16(216LLU,246LLU,1LLU),_208c6de2d_Range16(248LLU,705LLU,1LLU),_208c6de2d_Range16(710LLU,721LLU,1LLU),_208c6de2d_Range16(736LLU,740LLU,1LLU),_208c6de2d_Range16(748LLU,750LLU,2LLU),_208c6de2d_Range16(880LLU,884LLU,1LLU),_208c6de2d_Range16(886LLU,887LLU,1LLU),_208c6de2d_Range16(890LLU,893LLU,1LLU),_208c6de2d_Range16(895LLU,902LLU,7LLU),_208c6de2d_Range16(904LLU,906LLU,1LLU),_208c6de2d_Range16(908LLU,910LLU,2LLU),_208c6de2d_Range16(911LLU,929LLU,1LLU),_208c6de2d_Range16(931LLU,1013LLU,1LLU),_208c6de2d_Range16(1015LLU,1153LLU,1LLU),_208c6de2d_Range16(1162LLU,1327LLU,1LLU),_208c6de2d_Range16(1329LLU,1366LLU,1LLU),_208c6de2d_Range16(1369LLU,1376LLU,7LLU),_208c6de2d_Range16(1377LLU,1416LLU,1LLU),_208c6de2d_Range16(1488LLU,1514LLU,1LLU),_208c6de2d_Range16(1519LLU,1522LLU,1LLU),_208c6de2d_Range16(1568LLU,1610LLU,1LLU),_208c6de2d_Range16(1646LLU,1647LLU,1LLU),_208c6de2d_Range16(1649LLU,1747LLU,1LLU),_208c6de2d_Range16(1749LLU,1765LLU,16LLU),_208c6de2d_Range16(1766LLU,1774LLU,8LLU),_208c6de2d_Range16(1775LLU,1786LLU,11LLU),_208c6de2d_Range16(1787LLU,1788LLU,1LLU),_208c6de2d_Range16(1791LLU,1808LLU,17LLU),_208c6de2d_Range16(1810LLU,1839LLU,1LLU),_208c6de2d_Range16(1869LLU,1957LLU,1LLU),_208c6de2d_Range16(1969LLU,1994LLU,25LLU),_208c6de2d_Range16(1995LLU,2026LLU,1LLU),_208c6de2d_Range16(2036LLU,2037LLU,1LLU),_208c6de2d_Range16(2042LLU,2048LLU,6LLU),_208c6de2d_Range16(2049LLU,2069LLU,1LLU),_208c6de2d_Range16(2074LLU,2084LLU,10LLU),_208c6de2d_Range16(2088LLU,2112LLU,24LLU),_208c6de2d_Range16(2113LLU,2136LLU,1LLU),_208c6de2d_Range16(2144LLU,2154LLU,1LLU),_208c6de2d_Range16(2160LLU,2183LLU,1LLU),_208c6de2d_Range16(2185LLU,2190LLU,1LLU),_208c6de2d_Range16(2208LLU,2249LLU,1LLU),_208c6de2d_Range16(2308LLU,2361LLU,1LLU),_208c6de2d_Range16(2365LLU,2384LLU,19LLU),_208c6de2d_Range16(2392LLU,2401LLU,1LLU),_208c6de2d_Range16(2417LLU,2432LLU,1LLU),_208c6de2d_Range16(2437LLU,2444LLU,1LLU),_208c6de2d_Range16(2447LLU,2448LLU,1LLU),_208c6de2d_Range16(2451LLU,2472LLU,1LLU),_208c6de2d_Range16(2474LLU,2480LLU,1LLU),_208c6de2d_Range16(2482LLU,2486LLU,4LLU),_208c6de2d_Range16(2487LLU,2489LLU,1LLU),_208c6de2d_Range16(2493LLU,2510LLU,17LLU),_208c6de2d_Range16(2524LLU,2525LLU,1LLU),_208c6de2d_Range16(2527LLU,2529LLU,1LLU),_208c6de2d_Range16(2544LLU,2545LLU,1LLU),_208c6de2d_Range16(2556LLU,2565LLU,9LLU),_208c6de2d_Range16(2566LLU,2570LLU,1LLU),_208c6de2d_Range16(2575LLU,2576LLU,1LLU),_208c6de2d_Range16(2579LLU,2600LLU,1LLU),_208c6de2d_Range16(2602LLU,2608LLU,1LLU),_208c6de2d_Range16(2610LLU,2611LLU,1LLU),_208c6de2d_Range16(2613LLU,2614LLU,1LLU),_208c6de2d_Range16(2616LLU,2617LLU,1LLU),_208c6de2d_Range16(2649LLU,2652LLU,1LLU),_208c6de2d_Range16(2654LLU,2674LLU,20LLU),_208c6de2d_Range16(2675LLU,2676LLU,1LLU),_208c6de2d_Range16(2693LLU,2701LLU,1LLU),_208c6de2d_Range16(2703LLU,2705LLU,1LLU),_208c6de2d_Range16(2707LLU,2728LLU,1LLU),_208c6de2d_Range16(2730LLU,2736LLU,1LLU),_208c6de2d_Range16(2738LLU,2739LLU,1LLU),_208c6de2d_Range16(2741LLU,2745LLU,1LLU),_208c6de2d_Range16(2749LLU,2768LLU,19LLU),_208c6de2d_Range16(2784LLU,2785LLU,1LLU),_208c6de2d_Range16(2809LLU,2821LLU,12LLU),_208c6de2d_Range16(2822LLU,2828LLU,1LLU),_208c6de2d_Range16(2831LLU,2832LLU,1LLU),_208c6de2d_Range16(2835LLU,2856LLU,1LLU),_208c6de2d_Range16(2858LLU,2864LLU,1LLU),_208c6de2d_Range16(2866LLU,2867LLU,1LLU),_208c6de2d_Range16(2869LLU,2873LLU,1LLU),_208c6de2d_Range16(2877LLU,2908LLU,31LLU),_208c6de2d_Range16(2909LLU,2911LLU,2LLU),_208c6de2d_Range16(2912LLU,2913LLU,1LLU),_208c6de2d_Range16(2929LLU,2947LLU,18LLU),_208c6de2d_Range16(2949LLU,2954LLU,1LLU),_208c6de2d_Range16(2958LLU,2960LLU,1LLU),_208c6de2d_Range16(2962LLU,2965LLU,1LLU),_208c6de2d_Range16(2969LLU,2970LLU,1LLU),_208c6de2d_Range16(2972LLU,2974LLU,2LLU),_208c6de2d_Range16(2975LLU,2979LLU,4LLU),_208c6de2d_Range16(2980LLU,2984LLU,4LLU),_208c6de2d_Range16(2985LLU,2986LLU,1LLU),_208c6de2d_Range16(2990LLU,3001LLU,1LLU),_208c6de2d_Range16(3024LLU,3077LLU,53LLU),_208c6de2d_Range16(3078LLU,3084LLU,1LLU),_208c6de2d_Range16(3086LLU,3088LLU,1LLU),_208c6de2d_Range16(3090LLU,3112LLU,1LLU),_208c6de2d_Range16(3114LLU,3129LLU,1LLU),_208c6de2d_Range16(3133LLU,3160LLU,27LLU),_208c6de2d_Range16(3161LLU,3162LLU,1LLU),_208c6de2d_Range16(3165LLU,3168LLU,3LLU),_208c6de2d_Range16(3169LLU,3200LLU,31LLU),_208c6de2d_Range16(3205LLU,3212LLU,1LLU),_208c6de2d_Range16(3214LLU,3216LLU,1LLU),_208c6de2d_Range16(3218LLU,3240LLU,1LLU),_208c6de2d_Range16(3242LLU,3251LLU,1LLU),_208c6de2d_Range16(3253LLU,3257LLU,1LLU),_208c6de2d_Range16(3261LLU,3293LLU,32LLU),_208c6de2d_Range16(3294LLU,3296LLU,2LLU),_208c6de2d_Range16(3297LLU,3313LLU,16LLU),_208c6de2d_Range16(3314LLU,3332LLU,18LLU),_208c6de2d_Range16(3333LLU,3340LLU,1LLU),_208c6de2d_Range16(3342LLU,3344LLU,1LLU),_208c6de2d_Range16(3346LLU,3386LLU,1LLU),_208c6de2d_Range16(3389LLU,3406LLU,17LLU),_208c6de2d_Range16(3412LLU,3414LLU,1LLU),_208c6de2d_Range16(3423LLU,3425LLU,1LLU),_208c6de2d_Range16(3450LLU,3455LLU,1LLU),_208c6de2d_Range16(3461LLU,3478LLU,1LLU),_208c6de2d_Range16(3482LLU,3505LLU,1LLU),_208c6de2d_Range16(3507LLU,3515LLU,1LLU),_208c6de2d_Range16(3517LLU,3520LLU,3LLU),_208c6de2d_Range16(3521LLU,3526LLU,1LLU),_208c6de2d_Range16(3585LLU,3632LLU,1LLU),_208c6de2d_Range16(3634LLU,3635LLU,1LLU),_208c6de2d_Range16(3648LLU,3654LLU,1LLU),_208c6de2d_Range16(3713LLU,3714LLU,1LLU),_208c6de2d_Range16(3716LLU,3718LLU,2LLU),_208c6de2d_Range16(3719LLU,3722LLU,1LLU),_208c6de2d_Range16(3724LLU,3747LLU,1LLU),_208c6de2d_Range16(3749LLU,3751LLU,2LLU),_208c6de2d_Range16(3752LLU,3760LLU,1LLU),_208c6de2d_Range16(3762LLU,3763LLU,1LLU),_208c6de2d_Range16(3773LLU,3776LLU,3LLU),_208c6de2d_Range16(3777LLU,3780LLU,1LLU),_208c6de2d_Range16(3782LLU,3804LLU,22LLU),_208c6de2d_Range16(3805LLU,3807LLU,1LLU),_208c6de2d_Range16(3840LLU,3904LLU,64LLU),_208c6de2d_Range16(3905LLU,3911LLU,1LLU),_208c6de2d_Range16(3913LLU,3948LLU,1LLU),_208c6de2d_Range16(3976LLU,3980LLU,1LLU),_208c6de2d_Range16(4096LLU,4138LLU,1LLU),_208c6de2d_Range16(4159LLU,4176LLU,17LLU),_208c6de2d_Range16(4177LLU,4181LLU,1LLU),_208c6de2d_Range16(4186LLU,4189LLU,1LLU),_208c6de2d_Range16(4193LLU,4197LLU,4LLU),_208c6de2d_Range16(4198LLU,4206LLU,8LLU),_208c6de2d_Range16(4207LLU,4208LLU,1LLU),_208c6de2d_Range16(4213LLU,4225LLU,1LLU),_208c6de2d_Range16(4238LLU,4256LLU,18LLU),_208c6de2d_Range16(4257LLU,4293LLU,1LLU),_208c6de2d_Range16(4295LLU,4301LLU,6LLU),_208c6de2d_Range16(4304LLU,4346LLU,1LLU),_208c6de2d_Range16(4348LLU,4680LLU,1LLU),_208c6de2d_Range16(4682LLU,4685LLU,1LLU),_208c6de2d_Range16(4688LLU,4694LLU,1LLU),_208c6de2d_Range16(4696LLU,4698LLU,2LLU),_208c6de2d_Range16(4699LLU,4701LLU,1LLU),_208c6de2d_Range16(4704LLU,4744LLU,1LLU),_208c6de2d_Range16(4746LLU,4749LLU,1LLU),_208c6de2d_Range16(4752LLU,4784LLU,1LLU),_208c6de2d_Range16(4786LLU,4789LLU,1LLU),_208c6de2d_Range16(4792LLU,4798LLU,1LLU),_208c6de2d_Range16(4800LLU,4802LLU,2LLU),_208c6de2d_Range16(4803LLU,4805LLU,1LLU),_208c6de2d_Range16(4808LLU,4822LLU,1LLU),_208c6de2d_Range16(4824LLU,4880LLU,1LLU),_208c6de2d_Range16(4882LLU,4885LLU,1LLU),_208c6de2d_Range16(4888LLU,4954LLU,1LLU),_208c6de2d_Range16(4992LLU,5007LLU,1LLU),_208c6de2d_Range16(5024LLU,5109LLU,1LLU),_208c6de2d_Range16(5112LLU,5117LLU,1LLU),_208c6de2d_Range16(5121LLU,5740LLU,1LLU),_208c6de2d_Range16(5743LLU,5759LLU,1LLU),_208c6de2d_Range16(5761LLU,5786LLU,1LLU),_208c6de2d_Range16(5792LLU,5866LLU,1LLU),_208c6de2d_Range16(5873LLU,5880LLU,1LLU),_208c6de2d_Range16(5888LLU,5905LLU,1LLU),_208c6de2d_Range16(5919LLU,5937LLU,1LLU),_208c6de2d_Range16(5952LLU,5969LLU,1LLU),_208c6de2d_Range16(5984LLU,5996LLU,1LLU),_208c6de2d_Range16(5998LLU,6000LLU,1LLU),_208c6de2d_Range16(6016LLU,6067LLU,1LLU),_208c6de2d_Range16(6103LLU,6108LLU,5LLU),_208c6de2d_Range16(6176LLU,6264LLU,1LLU),_208c6de2d_Range16(6272LLU,6276LLU,1LLU),_208c6de2d_Range16(6279LLU,6312LLU,1LLU),_208c6de2d_Range16(6314LLU,6320LLU,6LLU),_208c6de2d_Range16(6321LLU,6389LLU,1LLU),_208c6de2d_Range16(6400LLU,6430LLU,1LLU),_208c6de2d_Range16(6480LLU,6509LLU,1LLU),_208c6de2d_Range16(6512LLU,6516LLU,1LLU),_208c6de2d_Range16(6528LLU,6571LLU,1LLU),_208c6de2d_Range16(6576LLU,6601LLU,1LLU),_208c6de2d_Range16(6656LLU,6678LLU,1LLU),_208c6de2d_Range16(6688LLU,6740LLU,1LLU),_208c6de2d_Range16(6823LLU,6917LLU,94LLU),_208c6de2d_Range16(6918LLU,6963LLU,1LLU),_208c6de2d_Range16(6981LLU,6988LLU,1LLU),_208c6de2d_Range16(7043LLU,7072LLU,1LLU),_208c6de2d_Range16(7086LLU,7087LLU,1LLU),_208c6de2d_Range16(7098LLU,7141LLU,1LLU),_208c6de2d_Range16(7168LLU,7203LLU,1LLU),_208c6de2d_Range16(7245LLU,7247LLU,1LLU),_208c6de2d_Range16(7258LLU,7293LLU,1LLU),_208c6de2d_Range16(7296LLU,7304LLU,1LLU),_208c6de2d_Range16(7312LLU,7354LLU,1LLU),_208c6de2d_Range16(7357LLU,7359LLU,1LLU),_208c6de2d_Range16(7401LLU,7404LLU,1LLU),_208c6de2d_Range16(7406LLU,7411LLU,1LLU),_208c6de2d_Range16(7413LLU,7414LLU,1LLU),_208c6de2d_Range16(7418LLU,7424LLU,6LLU),_208c6de2d_Range16(7425LLU,7615LLU,1LLU),_208c6de2d_Range16(7680LLU,7957LLU,1LLU),_208c6de2d_Range16(7960LLU,7965LLU,1LLU),_208c6de2d_Range16(7968LLU,8005LLU,1LLU),_208c6de2d_Range16(8008LLU,8013LLU,1LLU),_208c6de2d_Range16(8016LLU,8023LLU,1LLU),_208c6de2d_Range16(8025LLU,8031LLU,2LLU),_208c6de2d_Range16(8032LLU,8061LLU,1LLU),_208c6de2d_Range16(8064LLU,8116LLU,1LLU),_208c6de2d_Range16(8118LLU,8124LLU,1LLU),_208c6de2d_Range16(8126LLU,8130LLU,4LLU),_208c6de2d_Range16(8131LLU,8132LLU,1LLU),_208c6de2d_Range16(8134LLU,8140LLU,1LLU),_208c6de2d_Range16(8144LLU,8147LLU,1LLU),_208c6de2d_Range16(8150LLU,8155LLU,1LLU),_208c6de2d_Range16(8160LLU,8172LLU,1LLU),_208c6de2d_Range16(8178LLU,8180LLU,1LLU),_208c6de2d_Range16(8182LLU,8188LLU,1LLU),_208c6de2d_Range16(8305LLU,8319LLU,14LLU),_208c6de2d_Range16(8336LLU,8348LLU,1LLU),_208c6de2d_Range16(8450LLU,8455LLU,5LLU),_208c6de2d_Range16(8458LLU,8467LLU,1LLU),_208c6de2d_Range16(8469LLU,8473LLU,4LLU),_208c6de2d_Range16(8474LLU,8477LLU,1LLU),_208c6de2d_Range16(8484LLU,8490LLU,2LLU),_208c6de2d_Range16(8491LLU,8493LLU,1LLU),_208c6de2d_Range16(8495LLU,8505LLU,1LLU),_208c6de2d_Range16(8508LLU,8511LLU,1LLU),_208c6de2d_Range16(8517LLU,8521LLU,1LLU),_208c6de2d_Range16(8526LLU,8579LLU,53LLU),_208c6de2d_Range16(8580LLU,11264LLU,2684LLU),_208c6de2d_Range16(11265LLU,11492LLU,1LLU),_208c6de2d_Range16(11499LLU,11502LLU,1LLU),_208c6de2d_Range16(11506LLU,11507LLU,1LLU),_208c6de2d_Range16(11520LLU,11557LLU,1LLU),_208c6de2d_Range16(11559LLU,11565LLU,6LLU),_208c6de2d_Range16(11568LLU,11623LLU,1LLU),_208c6de2d_Range16(11631LLU,11648LLU,17LLU),_208c6de2d_Range16(11649LLU,11670LLU,1LLU),_208c6de2d_Range16(11680LLU,11686LLU,1LLU),_208c6de2d_Range16(11688LLU,11694LLU,1LLU),_208c6de2d_Range16(11696LLU,11702LLU,1LLU),_208c6de2d_Range16(11704LLU,11710LLU,1LLU),_208c6de2d_Range16(11712LLU,11718LLU,1LLU),_208c6de2d_Range16(11720LLU,11726LLU,1LLU),_208c6de2d_Range16(11728LLU,11734LLU,1LLU),_208c6de2d_Range16(11736LLU,11742LLU,1LLU),_208c6de2d_Range16(11823LLU,12293LLU,470LLU),_208c6de2d_Range16(12294LLU,12337LLU,43LLU),_208c6de2d_Range16(12338LLU,12341LLU,1LLU),_208c6de2d_Range16(12347LLU,12348LLU,1LLU),_208c6de2d_Range16(12353LLU,12438LLU,1LLU),_208c6de2d_Range16(12445LLU,12447LLU,1LLU),_208c6de2d_Range16(12449LLU,12538LLU,1LLU),_208c6de2d_Range16(12540LLU,12543LLU,1LLU),_208c6de2d_Range16(12549LLU,12591LLU,1LLU),_208c6de2d_Range16(12593LLU,12686LLU,1LLU),_208c6de2d_Range16(12704LLU,12735LLU,1LLU),_208c6de2d_Range16(12784LLU,12799LLU,1LLU),_208c6de2d_Range16(13312LLU,19903LLU,1LLU),_208c6de2d_Range16(19968LLU,42124LLU,1LLU),_208c6de2d_Range16(42192LLU,42237LLU,1LLU),_208c6de2d_Range16(42240LLU,42508LLU,1LLU),_208c6de2d_Range16(42512LLU,42527LLU,1LLU),_208c6de2d_Range16(42538LLU,42539LLU,1LLU),_208c6de2d_Range16(42560LLU,42606LLU,1LLU),_208c6de2d_Range16(42623LLU,42653LLU,1LLU),_208c6de2d_Range16(42656LLU,42725LLU,1LLU),_208c6de2d_Range16(42775LLU,42783LLU,1LLU),_208c6de2d_Range16(42786LLU,42888LLU,1LLU),_208c6de2d_Range16(42891LLU,42954LLU,1LLU),_208c6de2d_Range16(42960LLU,42961LLU,1LLU),_208c6de2d_Range16(42963LLU,42965LLU,2LLU),_208c6de2d_Range16(42966LLU,42969LLU,1LLU),_208c6de2d_Range16(42994LLU,43009LLU,1LLU),_208c6de2d_Range16(43011LLU,43013LLU,1LLU),_208c6de2d_Range16(43015LLU,43018LLU,1LLU),_208c6de2d_Range16(43020LLU,43042LLU,1LLU),_208c6de2d_Range16(43072LLU,43123LLU,1LLU),_208c6de2d_Range16(43138LLU,43187LLU,1LLU),_208c6de2d_Range16(43250LLU,43255LLU,1LLU),_208c6de2d_Range16(43259LLU,43261LLU,2LLU),_208c6de2d_Range16(43262LLU,43274LLU,12LLU),_208c6de2d_Range16(43275LLU,43301LLU,1LLU),_208c6de2d_Range16(43312LLU,43334LLU,1LLU),_208c6de2d_Range16(43360LLU,43388LLU,1LLU),_208c6de2d_Range16(43396LLU,43442LLU,1LLU),_208c6de2d_Range16(43471LLU,43488LLU,17LLU),_208c6de2d_Range16(43489LLU,43492LLU,1LLU),_208c6de2d_Range16(43494LLU,43503LLU,1LLU),_208c6de2d_Range16(43514LLU,43518LLU,1LLU),_208c6de2d_Range16(43520LLU,43560LLU,1LLU),_208c6de2d_Range16(43584LLU,43586LLU,1LLU),_208c6de2d_Range16(43588LLU,43595LLU,1LLU),_208c6de2d_Range16(43616LLU,43638LLU,1LLU),_208c6de2d_Range16(43642LLU,43646LLU,4LLU),_208c6de2d_Range16(43647LLU,43695LLU,1LLU),_208c6de2d_Range16(43697LLU,43701LLU,4LLU),_208c6de2d_Range16(43702LLU,43705LLU,3LLU),_208c6de2d_Range16(43706LLU,43709LLU,1LLU),_208c6de2d_Range16(43712LLU,43714LLU,2LLU),_208c6de2d_Range16(43739LLU,43741LLU,1LLU),_208c6de2d_Range16(43744LLU,43754LLU,1LLU),_208c6de2d_Range16(43762LLU,43764LLU,1LLU),_208c6de2d_Range16(43777LLU,43782LLU,1LLU),_208c6de2d_Range16(43785LLU,43790LLU,1LLU),_208c6de2d_Range16(43793LLU,43798LLU,1LLU),_208c6de2d_Range16(43808LLU,43814LLU,1LLU),_208c6de2d_Range16(43816LLU,43822LLU,1LLU),_208c6de2d_Range16(43824LLU,43866LLU,1LLU),_208c6de2d_Range16(43868LLU,43881LLU,1LLU),_208c6de2d_Range16(43888LLU,44002LLU,1LLU),_208c6de2d_Range16(44032LLU,55203LLU,1LLU),_208c6de2d_Range16(55216LLU,55238LLU,1LLU),_208c6de2d_Range16(55243LLU,55291LLU,1LLU),_208c6de2d_Range16(63744LLU,64109LLU,1LLU),_208c6de2d_Range16(64112LLU,64217LLU,1LLU),_208c6de2d_Range16(64256LLU,64262LLU,1LLU),_208c6de2d_Range16(64275LLU,64279LLU,1LLU),_208c6de2d_Range16(64285LLU,64287LLU,2LLU),_208c6de2d_Range16(64288LLU,64296LLU,1LLU),_208c6de2d_Range16(64298LLU,64310LLU,1LLU),_208c6de2d_Range16(64312LLU,64316LLU,1LLU),_208c6de2d_Range16(64318LLU,64320LLU,2LLU),_208c6de2d_Range16(64321LLU,64323LLU,2LLU),_208c6de2d_Range16(64324LLU,64326LLU,2LLU),_208c6de2d_Range16(64327LLU,64433LLU,1LLU),_208c6de2d_Range16(64467LLU,64829LLU,1LLU),_208c6de2d_Range16(64848LLU,64911LLU,1LLU),_208c6de2d_Range16(64914LLU,64967LLU,1LLU),_208c6de2d_Range16(65008LLU,65019LLU,1LLU),_208c6de2d_Range16(65136LLU,65140LLU,1LLU),_208c6de2d_Range16(65142LLU,65276LLU,1LLU),_208c6de2d_Range16(65313LLU,65338LLU,1LLU),_208c6de2d_Range16(65345LLU,65370LLU,1LLU),_208c6de2d_Range16(65382LLU,65470LLU,1LLU),_208c6de2d_Range16(65474LLU,65479LLU,1LLU),_208c6de2d_Range16(65482LLU,65487LLU,1LLU),_208c6de2d_Range16(65490LLU,65495LLU,1LLU),_208c6de2d_Range16(65498LLU,65500LLU,1LLU)}),jule::Slice<_208c6e4c2_Range32>({_208c6e4c2_Range32(65536LLU,65547LLU,1LLU),_208c6e4c2_Range32(65549LLU,65574LLU,1LLU),_208c6e4c2_Range32(65576LLU,65594LLU,1LLU),_208c6e4c2_Range32(65596LLU,65597LLU,1LLU),_208c6e4c2_Range32(65599LLU,65613LLU,1LLU),_208c6e4c2_Range32(65616LLU,65629LLU,1LLU),_208c6e4c2_Range32(65664LLU,65786LLU,1LLU),_208c6e4c2_Range32(66176LLU,66204LLU,1LLU),_208c6e4c2_Range32(66208LLU,66256LLU,1LLU),_208c6e4c2_Range32(66304LLU,66335LLU,1LLU),_208c6e4c2_Range32(66349LLU,66368LLU,1LLU),_208c6e4c2_Range32(66370LLU,66377LLU,1LLU),_208c6e4c2_Range32(66384LLU,66421LLU,1LLU),_208c6e4c2_Range32(66432LLU,66461LLU,1LLU),_208c6e4c2_Range32(66464LLU,66499LLU,1LLU),_208c6e4c2_Range32(66504LLU,66511LLU,1LLU),_208c6e4c2_Range32(66560LLU,66717LLU,1LLU),_208c6e4c2_Range32(66736LLU,66771LLU,1LLU),_208c6e4c2_Range32(66776LLU,66811LLU,1LLU),_208c6e4c2_Range32(66816LLU,66855LLU,1LLU),_208c6e4c2_Range32(66864LLU,66915LLU,1LLU),_208c6e4c2_Range32(66928LLU,66938LLU,1LLU),_208c6e4c2_Range32(66940LLU,66954LLU,1LLU),_208c6e4c2_Range32(66956LLU,66962LLU,1LLU),_208c6e4c2_Range32(66964LLU,66965LLU,1LLU),_208c6e4c2_Range32(66967LLU,66977LLU,1LLU),_208c6e4c2_Range32(66979LLU,66993LLU,1LLU),_208c6e4c2_Range32(66995LLU,67001LLU,1LLU),_208c6e4c2_Range32(67003LLU,67004LLU,1LLU),_208c6e4c2_Range32(67072LLU,67382LLU,1LLU),_208c6e4c2_Range32(67392LLU,67413LLU,1LLU),_208c6e4c2_Range32(67424LLU,67431LLU,1LLU),_208c6e4c2_Range32(67456LLU,67461LLU,1LLU),_208c6e4c2_Range32(67463LLU,67504LLU,1LLU),_208c6e4c2_Range32(67506LLU,67514LLU,1LLU),_208c6e4c2_Range32(67584LLU,67589LLU,1LLU),_208c6e4c2_Range32(67592LLU,67594LLU,2LLU),_208c6e4c2_Range32(67595LLU,67637LLU,1LLU),_208c6e4c2_Range32(67639LLU,67640LLU,1LLU),_208c6e4c2_Range32(67644LLU,67647LLU,3LLU),_208c6e4c2_Range32(67648LLU,67669LLU,1LLU),_208c6e4c2_Range32(67680LLU,67702LLU,1LLU),_208c6e4c2_Range32(67712LLU,67742LLU,1LLU),_208c6e4c2_Range32(67808LLU,67826LLU,1LLU),_208c6e4c2_Range32(67828LLU,67829LLU,1LLU),_208c6e4c2_Range32(67840LLU,67861LLU,1LLU),_208c6e4c2_Range32(67872LLU,67897LLU,1LLU),_208c6e4c2_Range32(67968LLU,68023LLU,1LLU),_208c6e4c2_Range32(68030LLU,68031LLU,1LLU),_208c6e4c2_Range32(68096LLU,68112LLU,16LLU),_208c6e4c2_Range32(68113LLU,68115LLU,1LLU),_208c6e4c2_Range32(68117LLU,68119LLU,1LLU),_208c6e4c2_Range32(68121LLU,68149LLU,1LLU),_208c6e4c2_Range32(68192LLU,68220LLU,1LLU),_208c6e4c2_Range32(68224LLU,68252LLU,1LLU),_208c6e4c2_Range32(68288LLU,68295LLU,1LLU),_208c6e4c2_Range32(68297LLU,68324LLU,1LLU),_208c6e4c2_Range32(68352LLU,68405LLU,1LLU),_208c6e4c2_Range32(68416LLU,68437LLU,1LLU),_208c6e4c2_Range32(68448LLU,68466LLU,1LLU),_208c6e4c2_Range32(68480LLU,68497LLU,1LLU),_208c6e4c2_Range32(68608LLU,68680LLU,1LLU),_208c6e4c2_Range32(68736LLU,68786LLU,1LLU),_208c6e4c2_Range32(68800LLU,68850LLU,1LLU),_208c6e4c2_Range32(68864LLU,68899LLU,1LLU),_208c6e4c2_Range32(69248LLU,69289LLU,1LLU),_208c6e4c2_Range32(69296LLU,69297LLU,1LLU),_208c6e4c2_Range32(69376LLU,69404LLU,1LLU),_208c6e4c2_Range32(69415LLU,69424LLU,9LLU),_208c6e4c2_Range32(69425LLU,69445LLU,1LLU),_208c6e4c2_Range32(69488LLU,69505LLU,1LLU),_208c6e4c2_Range32(69552LLU,69572LLU,1LLU),_208c6e4c2_Range32(69600LLU,69622LLU,1LLU),_208c6e4c2_Range32(69635LLU,69687LLU,1LLU),_208c6e4c2_Range32(69745LLU,69746LLU,1LLU),_208c6e4c2_Range32(69749LLU,69763LLU,14LLU),_208c6e4c2_Range32(69764LLU,69807LLU,1LLU),_208c6e4c2_Range32(69840LLU,69864LLU,1LLU),_208c6e4c2_Range32(69891LLU,69926LLU,1LLU),_208c6e4c2_Range32(69956LLU,69959LLU,3LLU),_208c6e4c2_Range32(69968LLU,70002LLU,1LLU),_208c6e4c2_Range32(70006LLU,70019LLU,13LLU),_208c6e4c2_Range32(70020LLU,70066LLU,1LLU),_208c6e4c2_Range32(70081LLU,70084LLU,1LLU),_208c6e4c2_Range32(70106LLU,70108LLU,2LLU),_208c6e4c2_Range32(70144LLU,70161LLU,1LLU),_208c6e4c2_Range32(70163LLU,70187LLU,1LLU),_208c6e4c2_Range32(70207LLU,70208LLU,1LLU),_208c6e4c2_Range32(70272LLU,70278LLU,1LLU),_208c6e4c2_Range32(70280LLU,70282LLU,2LLU),_208c6e4c2_Range32(70283LLU,70285LLU,1LLU),_208c6e4c2_Range32(70287LLU,70301LLU,1LLU),_208c6e4c2_Range32(70303LLU,70312LLU,1LLU),_208c6e4c2_Range32(70320LLU,70366LLU,1LLU),_208c6e4c2_Range32(70405LLU,70412LLU,1LLU),_208c6e4c2_Range32(70415LLU,70416LLU,1LLU),_208c6e4c2_Range32(70419LLU,70440LLU,1LLU),_208c6e4c2_Range32(70442LLU,70448LLU,1LLU),_208c6e4c2_Range32(70450LLU,70451LLU,1LLU),_208c6e4c2_Range32(70453LLU,70457LLU,1LLU),_208c6e4c2_Range32(70461LLU,70480LLU,19LLU),_208c6e4c2_Range32(70493LLU,70497LLU,1LLU),_208c6e4c2_Range32(70656LLU,70708LLU,1LLU),_208c6e4c2_Range32(70727LLU,70730LLU,1LLU),_208c6e4c2_Range32(70751LLU,70753LLU,1LLU),_208c6e4c2_Range32(70784LLU,70831LLU,1LLU),_208c6e4c2_Range32(70852LLU,70853LLU,1LLU),_208c6e4c2_Range32(70855LLU,71040LLU,185LLU),_208c6e4c2_Range32(71041LLU,71086LLU,1LLU),_208c6e4c2_Range32(71128LLU,71131LLU,1LLU),_208c6e4c2_Range32(71168LLU,71215LLU,1LLU),_208c6e4c2_Range32(71236LLU,71296LLU,60LLU),_208c6e4c2_Range32(71297LLU,71338LLU,1LLU),_208c6e4c2_Range32(71352LLU,71424LLU,72LLU),_208c6e4c2_Range32(71425LLU,71450LLU,1LLU),_208c6e4c2_Range32(71488LLU,71494LLU,1LLU),_208c6e4c2_Range32(71680LLU,71723LLU,1LLU),_208c6e4c2_Range32(71840LLU,71903LLU,1LLU),_208c6e4c2_Range32(71935LLU,71942LLU,1LLU),_208c6e4c2_Range32(71945LLU,71948LLU,3LLU),_208c6e4c2_Range32(71949LLU,71955LLU,1LLU),_208c6e4c2_Range32(71957LLU,71958LLU,1LLU),_208c6e4c2_Range32(71960LLU,71983LLU,1LLU),_208c6e4c2_Range32(71999LLU,72001LLU,2LLU),_208c6e4c2_Range32(72096LLU,72103LLU,1LLU),_208c6e4c2_Range32(72106LLU,72144LLU,1LLU),_208c6e4c2_Range32(72161LLU,72163LLU,2LLU),_208c6e4c2_Range32(72192LLU,72203LLU,11LLU),_208c6e4c2_Range32(72204LLU,72242LLU,1LLU),_208c6e4c2_Range32(72250LLU,72272LLU,22LLU),_208c6e4c2_Range32(72284LLU,72329LLU,1LLU),_208c6e4c2_Range32(72349LLU,72368LLU,19LLU),_208c6e4c2_Range32(72369LLU,72440LLU,1LLU),_208c6e4c2_Range32(72704LLU,72712LLU,1LLU),_208c6e4c2_Range32(72714LLU,72750LLU,1LLU),_208c6e4c2_Range32(72768LLU,72818LLU,50LLU),_208c6e4c2_Range32(72819LLU,72847LLU,1LLU),_208c6e4c2_Range32(72960LLU,72966LLU,1LLU),_208c6e4c2_Range32(72968LLU,72969LLU,1LLU),_208c6e4c2_Range32(72971LLU,73008LLU,1LLU),_208c6e4c2_Range32(73030LLU,73056LLU,26LLU),_208c6e4c2_Range32(73057LLU,73061LLU,1LLU),_208c6e4c2_Range32(73063LLU,73064LLU,1LLU),_208c6e4c2_Range32(73066LLU,73097LLU,1LLU),_208c6e4c2_Range32(73112LLU,73440LLU,328LLU),_208c6e4c2_Range32(73441LLU,73458LLU,1LLU),_208c6e4c2_Range32(73474LLU,73476LLU,2LLU),_208c6e4c2_Range32(73477LLU,73488LLU,1LLU),_208c6e4c2_Range32(73490LLU,73523LLU,1LLU),_208c6e4c2_Range32(73648LLU,73728LLU,80LLU),_208c6e4c2_Range32(73729LLU,74649LLU,1LLU),_208c6e4c2_Range32(74880LLU,75075LLU,1LLU),_208c6e4c2_Range32(77712LLU,77808LLU,1LLU),_208c6e4c2_Range32(77824LLU,78895LLU,1LLU),_208c6e4c2_Range32(78913LLU,78918LLU,1LLU),_208c6e4c2_Range32(82944LLU,83526LLU,1LLU),_208c6e4c2_Range32(92160LLU,92728LLU,1LLU),_208c6e4c2_Range32(92736LLU,92766LLU,1LLU),_208c6e4c2_Range32(92784LLU,92862LLU,1LLU),_208c6e4c2_Range32(92880LLU,92909LLU,1LLU),_208c6e4c2_Range32(92928LLU,92975LLU,1LLU),_208c6e4c2_Range32(92992LLU,92995LLU,1LLU),_208c6e4c2_Range32(93027LLU,93047LLU,1LLU),_208c6e4c2_Range32(93053LLU,93071LLU,1LLU),_208c6e4c2_Range32(93760LLU,93823LLU,1LLU),_208c6e4c2_Range32(93952LLU,94026LLU,1LLU),_208c6e4c2_Range32(94032LLU,94099LLU,67LLU),_208c6e4c2_Range32(94100LLU,94111LLU,1LLU),_208c6e4c2_Range32(94176LLU,94177LLU,1LLU),_208c6e4c2_Range32(94179LLU,94208LLU,29LLU),_208c6e4c2_Range32(94209LLU,100343LLU,1LLU),_208c6e4c2_Range32(100352LLU,101589LLU,1LLU),_208c6e4c2_Range32(101632LLU,101640LLU,1LLU),_208c6e4c2_Range32(110576LLU,110579LLU,1LLU),_208c6e4c2_Range32(110581LLU,110587LLU,1LLU),_208c6e4c2_Range32(110589LLU,110590LLU,1LLU),_208c6e4c2_Range32(110592LLU,110882LLU,1LLU),_208c6e4c2_Range32(110898LLU,110928LLU,30LLU),_208c6e4c2_Range32(110929LLU,110930LLU,1LLU),_208c6e4c2_Range32(110933LLU,110948LLU,15LLU),_208c6e4c2_Range32(110949LLU,110951LLU,1LLU),_208c6e4c2_Range32(110960LLU,111355LLU,1LLU),_208c6e4c2_Range32(113664LLU,113770LLU,1LLU),_208c6e4c2_Range32(113776LLU,113788LLU,1LLU),_208c6e4c2_Range32(113792LLU,113800LLU,1LLU),_208c6e4c2_Range32(113808LLU,113817LLU,1LLU),_208c6e4c2_Range32(119808LLU,119892LLU,1LLU),_208c6e4c2_Range32(119894LLU,119964LLU,1LLU),_208c6e4c2_Range32(119966LLU,119967LLU,1LLU),_208c6e4c2_Range32(119970LLU,119973LLU,3LLU),_208c6e4c2_Range32(119974LLU,119977LLU,3LLU),_208c6e4c2_Range32(119978LLU,119980LLU,1LLU),_208c6e4c2_Range32(119982LLU,119993LLU,1LLU),_208c6e4c2_Range32(119995LLU,119997LLU,2LLU),_208c6e4c2_Range32(119998LLU,120003LLU,1LLU),_208c6e4c2_Range32(120005LLU,120069LLU,1LLU),_208c6e4c2_Range32(120071LLU,120074LLU,1LLU),_208c6e4c2_Range32(120077LLU,120084LLU,1LLU),_208c6e4c2_Range32(120086LLU,120092LLU,1LLU),_208c6e4c2_Range32(120094LLU,120121LLU,1LLU),_208c6e4c2_Range32(120123LLU,120126LLU,1LLU),_208c6e4c2_Range32(120128LLU,120132LLU,1LLU),_208c6e4c2_Range32(120134LLU,120138LLU,4LLU),_208c6e4c2_Range32(120139LLU,120144LLU,1LLU),_208c6e4c2_Range32(120146LLU,120485LLU,1LLU),_208c6e4c2_Range32(120488LLU,120512LLU,1LLU),_208c6e4c2_Range32(120514LLU,120538LLU,1LLU),_208c6e4c2_Range32(120540LLU,120570LLU,1LLU),_208c6e4c2_Range32(120572LLU,120596LLU,1LLU),_208c6e4c2_Range32(120598LLU,120628LLU,1LLU),_208c6e4c2_Range32(120630LLU,120654LLU,1LLU),_208c6e4c2_Range32(120656LLU,120686LLU,1LLU),_208c6e4c2_Range32(120688LLU,120712LLU,1LLU),_208c6e4c2_Range32(120714LLU,120744LLU,1LLU),_208c6e4c2_Range32(120746LLU,120770LLU,1LLU),_208c6e4c2_Range32(120772LLU,120779LLU,1LLU),_208c6e4c2_Range32(122624LLU,122654LLU,1LLU),_208c6e4c2_Range32(122661LLU,122666LLU,1LLU),_208c6e4c2_Range32(122928LLU,122989LLU,1LLU),_208c6e4c2_Range32(123136LLU,123180LLU,1LLU),_208c6e4c2_Range32(123191LLU,123197LLU,1LLU),_208c6e4c2_Range32(123214LLU,123536LLU,322LLU),_208c6e4c2_Range32(123537LLU,123565LLU,1LLU),_208c6e4c2_Range32(123584LLU,123627LLU,1LLU),_208c6e4c2_Range32(124112LLU,124139LLU,1LLU),_208c6e4c2_Range32(124896LLU,124902LLU,1LLU),_208c6e4c2_Range32(124904LLU,124907LLU,1LLU),_208c6e4c2_Range32(124909LLU,124910LLU,1LLU),_208c6e4c2_Range32(124912LLU,124926LLU,1LLU),_208c6e4c2_Range32(124928LLU,125124LLU,1LLU),_208c6e4c2_Range32(125184LLU,125251LLU,1LLU),_208c6e4c2_Range32(125259LLU,126464LLU,1205LLU),_208c6e4c2_Range32(126465LLU,126467LLU,1LLU),_208c6e4c2_Range32(126469LLU,126495LLU,1LLU),_208c6e4c2_Range32(126497LLU,126498LLU,1LLU),_208c6e4c2_Range32(126500LLU,126503LLU,3LLU),_208c6e4c2_Range32(126505LLU,126514LLU,1LLU),_208c6e4c2_Range32(126516LLU,126519LLU,1LLU),_208c6e4c2_Range32(126521LLU,126523LLU,2LLU),_208c6e4c2_Range32(126530LLU,126535LLU,5LLU),_208c6e4c2_Range32(126537LLU,126541LLU,2LLU),_208c6e4c2_Range32(126542LLU,126543LLU,1LLU),_208c6e4c2_Range32(126545LLU,126546LLU,1LLU),_208c6e4c2_Range32(126548LLU,126551LLU,3LLU),_208c6e4c2_Range32(126553LLU,126561LLU,2LLU),_208c6e4c2_Range32(126562LLU,126564LLU,2LLU),_208c6e4c2_Range32(126567LLU,126570LLU,1LLU),_208c6e4c2_Range32(126572LLU,126578LLU,1LLU),_208c6e4c2_Range32(126580LLU,126583LLU,1LLU),_208c6e4c2_Range32(126585LLU,126588LLU,1LLU),_208c6e4c2_Range32(126590LLU,126592LLU,2LLU),_208c6e4c2_Range32(126593LLU,126601LLU,1LLU),_208c6e4c2_Range32(126603LLU,126619LLU,1LLU),_208c6e4c2_Range32(126625LLU,126627LLU,1LLU),_208c6e4c2_Range32(126629LLU,126633LLU,1LLU),_208c6e4c2_Range32(126635LLU,126651LLU,1LLU),_208c6e4c2_Range32(131072LLU,173791LLU,1LLU),_208c6e4c2_Range32(173824LLU,177977LLU,1LLU),_208c6e4c2_Range32(177984LLU,178205LLU,1LLU),_208c6e4c2_Range32(178208LLU,183969LLU,1LLU),_208c6e4c2_Range32(183984LLU,191456LLU,1LLU),_208c6e4c2_Range32(194560LLU,195101LLU,1LLU),_208c6e4c2_Range32(196608LLU,201546LLU,1LLU),_208c6e4c2_Range32(201552LLU,205743LLU,1LLU)}),6LL));
	_208c34a1a_LETTER = _208c302eb__L;
	_208c699ea__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});
	_208dd0ed5_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
	_208dd1106_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
	_208dd1227_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
	_208de5c42_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
	_208de5e73_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
	_208e02831_PATH_STDLIB = jule::Str();
	_208e0446a_PATH_EXEC = jule::Str();
	_208e06813_PATH_WD = jule::Str();
	_208e073b3_PATH_API = jule::Str();
	_208e0b74c_OS = jule::Str("windows", 7);
	_208e25425_ARCH = jule::Str("i386", 4);
	_1e01c4dc5_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
	_1e01c4204_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
	_1e01c4325_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
	_1e01c4567_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
	_1e02b9629_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
	_1e02ca9ae_KEYWORDS = jule::Array<_1e02ca67e_KindPair,47>({_1e02ca67e_KindPair(jule::Str("i8", 2),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("i16", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("i32", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("i64", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("u8", 2),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("u16", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("u32", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("u64", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("f32", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("f64", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("uint", 4),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("int", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("uintptr", 7),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("bool", 4),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("str", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("any", 3),static_cast<jule::U32>(1LLU)),_1e02ca67e_KindPair(jule::Str("true", 4),static_cast<jule::U32>(6LLU)),_1e02ca67e_KindPair(jule::Str("false", 5),static_cast<jule::U32>(6LLU)),_1e02ca67e_KindPair(jule::Str("nil", 3),static_cast<jule::U32>(6LLU)),_1e02ca67e_KindPair(jule::Str("const", 5),static_cast<jule::U32>(9LLU)),_1e02ca67e_KindPair(jule::Str("ret", 3),static_cast<jule::U32>(4LLU)),_1e02ca67e_KindPair(jule::Str("type", 4),static_cast<jule::U32>(10LLU)),_1e02ca67e_KindPair(jule::Str("for", 3),static_cast<jule::U32>(12LLU)),_1e02ca67e_KindPair(jule::Str("break", 5),static_cast<jule::U32>(13LLU)),_1e02ca67e_KindPair(jule::Str("continue", 8),static_cast<jule::U32>(14LLU)),_1e02ca67e_KindPair(jule::Str("in", 2),static_cast<jule::U32>(15LLU)),_1e02ca67e_KindPair(jule::Str("if", 2),static_cast<jule::U32>(16LLU)),_1e02ca67e_KindPair(jule::Str("else", 4),static_cast<jule::U32>(17LLU)),_1e02ca67e_KindPair(jule::Str("use", 3),static_cast<jule::U32>(19LLU)),_1e02ca67e_KindPair(jule::Str("pub", 3),static_cast<jule::U32>(21LLU)),_1e02ca67e_KindPair(jule::Str("goto", 4),static_cast<jule::U32>(22LLU)),_1e02ca67e_KindPair(jule::Str("enum", 4),static_cast<jule::U32>(24LLU)),_1e02ca67e_KindPair(jule::Str("struct", 6),static_cast<jule::U32>(25LLU)),_1e02ca67e_KindPair(jule::Str("co", 2),static_cast<jule::U32>(26LLU)),_1e02ca67e_KindPair(jule::Str("match", 5),static_cast<jule::U32>(27LLU)),_1e02ca67e_KindPair(jule::Str("self", 4),static_cast<jule::U32>(28LLU)),_1e02ca67e_KindPair(jule::Str("trait", 5),static_cast<jule::U32>(29LLU)),_1e02ca67e_KindPair(jule::Str("impl", 4),static_cast<jule::U32>(30LLU)),_1e02ca67e_KindPair(jule::Str("cpp", 3),static_cast<jule::U32>(31LLU)),_1e02ca67e_KindPair(jule::Str("fall", 4),static_cast<jule::U32>(32LLU)),_1e02ca67e_KindPair(jule::Str("fn", 2),static_cast<jule::U32>(33LLU)),_1e02ca67e_KindPair(jule::Str("let", 3),static_cast<jule::U32>(34LLU)),_1e02ca67e_KindPair(jule::Str("unsafe", 6),static_cast<jule::U32>(35LLU)),_1e02ca67e_KindPair(jule::Str("mut", 3),static_cast<jule::U32>(36LLU)),_1e02ca67e_KindPair(jule::Str("defer", 5),static_cast<jule::U32>(37LLU)),_1e02ca67e_KindPair(jule::Str("static", 6),static_cast<jule::U32>(38LLU)),_1e02ca67e_KindPair(jule::Str("error", 5),static_cast<jule::U32>(40LLU))});
	_1e02cabe0_BASIC_OPS = jule::Array<_1e02ca67e_KindPair,39>({_1e02ca67e_KindPair(jule::Str("::", 2),static_cast<jule::U32>(23LLU)),_1e02ca67e_KindPair(jule::Str(":", 1),static_cast<jule::U32>(11LLU)),_1e02ca67e_KindPair(jule::Str(";", 1),static_cast<jule::U32>(5LLU)),_1e02ca67e_KindPair(jule::Str(",", 1),static_cast<jule::U32>(8LLU)),_1e02ca67e_KindPair(jule::Str("...", 3),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str(".", 1),static_cast<jule::U32>(20LLU)),_1e02ca67e_KindPair(jule::Str("+=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("-=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("*=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("/=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("%=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("<<=", 3),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str(">>=", 3),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("^=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("&=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("|=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("==", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("!=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str(">=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("<=", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("&&", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("||", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("<<", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str(">>", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("++", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("--", 2),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("+", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("-", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("*", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("/", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("%", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("&", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("|", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("^", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("!", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("<", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str(">", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("=", 1),static_cast<jule::U32>(7LLU)),_1e02ca67e_KindPair(jule::Str("#", 1),static_cast<jule::U32>(39LLU))});
	_1eec4a8d6_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
	_1eec4ac7c_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
	_1ed3d4978_F32_INFO = _1ecda7acd_FloatInfo(23LLU,8LLU,-127LL);
	_1ed42ca59_F64_INFO = _1ecda7acd_FloatInfo(52LLU,11LLU,-1023LL);
	_1ed489412_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
	_1eeabed32_POWTAB = jule::Slice<jule::I32>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
	_1eeb450b6_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
	_1eeb4568d_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
	_1eeac021c_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
	_1eec7ebc3_LEFTCHEATS = jule::Slice<_1eec7e893_LeftCheat>({_1eec7e893_LeftCheat(0LL,jule::Str()),_1eec7e893_LeftCheat(1LL,jule::Str("5", 1)),_1eec7e893_LeftCheat(1LL,jule::Str("25", 2)),_1eec7e893_LeftCheat(1LL,jule::Str("125", 3)),_1eec7e893_LeftCheat(2LL,jule::Str("625", 3)),_1eec7e893_LeftCheat(2LL,jule::Str("3125", 4)),_1eec7e893_LeftCheat(2LL,jule::Str("15625", 5)),_1eec7e893_LeftCheat(3LL,jule::Str("78125", 5)),_1eec7e893_LeftCheat(3LL,jule::Str("390625", 6)),_1eec7e893_LeftCheat(3LL,jule::Str("1953125", 7)),_1eec7e893_LeftCheat(4LL,jule::Str("9765625", 7)),_1eec7e893_LeftCheat(4LL,jule::Str("48828125", 8)),_1eec7e893_LeftCheat(4LL,jule::Str("244140625", 9)),_1eec7e893_LeftCheat(4LL,jule::Str("1220703125", 10)),_1eec7e893_LeftCheat(5LL,jule::Str("6103515625", 10)),_1eec7e893_LeftCheat(5LL,jule::Str("30517578125", 11)),_1eec7e893_LeftCheat(5LL,jule::Str("152587890625", 12)),_1eec7e893_LeftCheat(6LL,jule::Str("762939453125", 12)),_1eec7e893_LeftCheat(6LL,jule::Str("3814697265625", 13)),_1eec7e893_LeftCheat(6LL,jule::Str("19073486328125", 14)),_1eec7e893_LeftCheat(7LL,jule::Str("95367431640625", 14)),_1eec7e893_LeftCheat(7LL,jule::Str("476837158203125", 15)),_1eec7e893_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_1eec7e893_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_1eec7e893_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_1eec7e893_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_1eec7e893_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_1eec7e893_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_1eec7e893_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_1eec7e893_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_1eec7e893_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_1eec7e893_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_1eec7e893_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_1eec7e893_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_1eec7e893_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_1eec7e893_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_1eec7e893_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_1eec7e893_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_1eec7e893_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_1eec7e893_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_1eec7e893_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_1eec7e893_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_1eec7e893_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_1eec7e893_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_1eec7e893_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_1eec7e893_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_1eec7e893_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_1eec7e893_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_1eec7e893_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_1eec7e893_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_1eec7e893_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_1eec7e893_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_1eec7e893_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_1eec7e893_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_1eec7e893_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_1eec7e893_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_1eec7e893_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_1eec7e893_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_1eec7e893_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_1eec7e893_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_1eec7e893_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
	_1eed952b1_BIT_SIZE = 0LL;
	_1eed953d2_SYS_INT = jule::Str();
	_1eed95503_SYS_UINT = jule::Str();
	_208e88202_deads = nullptr;
	_208e95819_checking = nullptr;
	_208ea8255_current = jule::Any(nullptr);
	_208eb4706_main_current = jule::Any(nullptr);
	_2005d7e98_MDAYS = jule::Array<jule::U64,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
	_208da70bb_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,5>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)}),jule::Array<jule::Str,2>({jule::Str("mod", 3),jule::Str("Module management", 17)})});
	_200054492_OUT_DIR = jule::Str("dist", 4);
	_20006d38a_OUT_NAME = jule::Str("ir.cpp", 6);
	_20006e2c0_OUT = jule::Str();

	_208e05724_init();
	_1eed980b6_init();
	_208dacae9_init();
}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}