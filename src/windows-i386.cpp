// Auto generated by JuleC.
// JuleC version: beta 0.0.7 @master
// Date: 21/12/2023 16.39 (DD/MM/YYYY) (HH.MM) UTC
//
// Recommended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#define __JULE_ENABLE__PRODUCTION


#include "api/jule.hpp"                                   

#include <dirent.h>
#include <cstdio>
#include <sys/stat.h>
#include <fcntl.h>
#include <time.h>
#include "std/jule/integrated/integrated.hpp"                                   
#include "std/strings/unsafe.hpp"                                   
#include "std/process/cmd.hpp"                                   

struct _20cba58cc_Importer;
struct _20d4a6c9e_Kind;
struct _20d6751d1_Lookup;
struct _20baa6c1e_CommonFlag;

struct _20a19495c_AnsiEscape;


struct _20a19495c_Logger;


struct _20a3472e6_accept_range;


struct _20b0b06ce_FoldPair;


struct _20b0b06ce_CaseRange;


struct _20b0b06ce_Range16;


struct _20b0b06ce_Range32;


struct _20b0b06ce_RangeTable;


struct _20a3911b9_LazyBuff;


struct _20a23944c_DirEntry;


struct _20a23944c_Directory;


struct _20a284e6a_File;


struct _20a252e5a_Status;


struct _20ba2c513_Cmd;


struct _20a25b99c_Log;


struct _20b639c14_FloatInfo;


struct _20b639c14_DecimalSlice;


struct _20bcae960_LeftCheat;


struct _20bcae960_Decimal;


struct _20c47803a_Token;


struct _20c4792c2_File;


struct _20c47ab20_KindPair;


struct _20c47ab20_Lex;


struct _20c476126_Ast;


struct _20c476dc4_CommentGroup;


struct _20c476dc4_NamespaceTypeDecl;


struct _20c476dc4_SptrTypeDecl;


struct _20c476dc4_SlcTypeDecl;


struct _20c476dc4_TupleTypeDecl;


struct _20c476dc4_PtrTypeDecl;


struct _20c476dc4_ArrTypeDecl;


struct _20c476dc4_MapTypeDecl;


struct _20c476dc4_RetTypeDecl;


struct _20c476dc4_TupleExpr;


struct _20c476dc4_CastExpr;


struct _20c476dc4_StructLit;


struct _20c476dc4_ScopeTree;


struct _20c476dc4_Conditional;


struct _20c476dc4_Impl;


struct _20c4d35c3_FileInfo;


struct _20c4d35c3_PackageInfo;


struct _20c4d7055_Stmt;


struct _20c4d7055_ScopeParser;


struct _20c4aa1e3_CallData;


struct _20c4aa1e3_ExprBuilder;


struct _20c7de1a3_Parser;


struct _20c9bd97b_TypeBuilder;


struct _20d78b3e6_Const;


struct _20c496047_FieldIns;


struct _20c496047_StructIns;


struct _20c819332_RetType;


struct _20c819332_ParamIns;


struct _20c819332_FnIns;


struct _20caa3115_ReferenceStack;


struct _20caa3115_SymbolBuilder;


struct _20cb5423d_Impl;


struct _20cb4d853_Scope;


struct _20cb4d853_If;


struct _20cb4d853_Else;


struct _20cb4d853_Conditional;


struct _20cb4d853_InfIter;


struct _20cb4d853_WhileIter;


struct _20cb4d853_RangeIter;


struct _20cb4d853_ContSt;


struct _20cb4d853_BreakSt;


struct _20cb4d853_Label;


struct _20cb4d853_GotoSt;


struct _20cb4d853_Postfix;


struct _20cb4d853_MultiAssign;


struct _20cb4d853_Match;


struct _20cb4d853_Case;


struct _20cb4d853_FallSt;


struct _20cb4d853_RetSt;


struct _20cb4d853_ScopeGoto;


struct _20cb4d853_ScopeChecker;


struct _20ccedeed_StructArgExprModel;


struct _20ccedeed_AllocStructLitExprModel;


struct _20ccedeed_SliceExprModel;


struct _20ccedeed_AnonFnExprModel;


struct _20ccedeed_KeyValPairExprModel;


struct _20ccedeed_MapExprModel;


struct _20ccedeed_StructSubIdentExprModel;


struct _20ccedeed_StructStaticIdentExprModel;


struct _20ccedeed_ArrayExprModel;


struct _20ccedeed_CommonIdentExprModel;


struct _20ccedeed_CommonSubIdentExprModel;


struct _20ccedeed_TupleExprModel;


struct _20ccedeed_BuiltinOutCallExprModel;


struct _20ccedeed_BuiltinOutlnCallExprModel;


struct _20ccedeed_BuiltinCloneCallExprModel;


struct _20ccedeed_BuiltinNewCallExprModel;


struct _20ccedeed_BuiltinMakeCallExprModel;


struct _20ccedeed_BuiltinAppendCallExprModel;


struct _20ccedeed_BuiltinErrorCallExprModel;


struct _20ccedeed_SizeofExprModel;


struct _20ccedeed_AlignofExprModel;


struct _20ccedeed_RuneExprModel;


struct _20ccedeed_IntegratedToStrExprModel;


struct _20ccedeed_TernaryExprModel;


struct _20ccedeed_BackendEmitExprModel;


struct _20ccedeed_FreeExprModel;


struct _20ccebda8_DirectiveChecker;


struct _20cba58cc_Package;


struct _20cba60d6_Sema;


struct _20cdc725d_IterRelation;


struct _20d058ca2_RangeChecker;


struct _20d0c86e5_SymbolTable;


struct _20d162d45_Data;


struct _20d162d45_Value;


struct _20d162d45_Eval;


struct _20d162d45_UnaryEval;


struct _20d4a6c9e_TypeKind;


struct _20d4a6c9e_TypeSymbol;


struct _20d4a6c9e_Prim;


struct _20d4a6c9e_Sptr;


struct _20d4a6c9e_Slc;


struct _20d4a6c9e_Tuple;


struct _20d4a6c9e_Map;


struct _20d4a6c9e_Arr;


struct _20d4a6c9e_Ptr;


struct _20d4a6c9e_Referencer;


struct _20c41511a_DirectiveEval;


struct _20c44b959_PlainImporter;


struct _20c3e743d_OrderedDefines;


struct _20c3e743d_DefineOrderer;


struct _20b661752_ScopeDeadCode;


struct _20dc14918_AbsTime;


struct _20dc14918_Time;


struct _20dc14918_Duration;


struct _20baa12ac_ScopeOptimizer;


struct _20d5c851e_Optimizer;


struct _20baa6c1e_Flag_0;

struct _20baa6c1e_Flag_1;

struct _20baa6c1e_Flag_2;

struct _20baa6c1e_Flag_3;

struct _20baa6c1e_Flag_4;


struct _20baa6c1e_FlagSet;


struct _20cb4d853_ScopeLabel;


struct _20c476dc4_RangeKind;


struct _20c476dc4_BreakSt;


struct _20ccedeed_BinopExprModel;


struct _20ccedeed_UnaryExprModel;


struct _20c476dc4_ContSt;


struct _20ccedeed_StructLitExprModel;


struct _20c476dc4_If;


struct _20ccedeed_CastingExprModel;


struct _20ccedeed_FnCallExprModel;


struct _20c476dc4_Else;


struct _20ccedeed_IndexingExprModel;


struct _20c476dc4_Directive;


struct _20c476dc4_TypeAliasDecl;


struct _20c476dc4_Case;


struct _20ccedeed_SlicingExprModel;


struct _20ccedeed_TraitSubIdentExprModel;


struct _20c476dc4_MatchCase;


struct _20c476dc4_UseDecl;


struct _20c476dc4_EnumItemDecl;


struct _20c476dc4_EnumDecl;


struct _20c476dc4_FieldDecl;


struct _20c476dc4_StructDecl;


struct _20c476dc4_TraitDecl;


struct _20c476dc4_Expr;


struct _20c476dc4_UseExpr;


struct _20c476dc4_TypeDecl;


struct _20ccedeed_BuiltinPanicCallExprModel;


struct _20ccedeed_BuiltinAssertCallExprModel;


struct _20c476dc4_LitExpr;


struct _20c476dc4_UnsafeExpr;


struct _20c476dc4_CoExpr;


struct _20c476dc4_IdentExpr;


struct _20c4bea32_AssignInfo;


struct _20c476dc4_UnaryExpr;


struct _20c476dc4_VariadicExpr;


struct _20c476dc4_IdentTypeDecl;


struct _20c496047_Field;


struct _20c496047_Struct;


struct _20c476dc4_NsSelectionExpr;


struct _20cba58cc_ImportInfo;


struct _20c476dc4_SubIdentExpr;


struct _20c476dc4_BinopExpr;


struct _20c819332_Param;


struct _20cdc725d_Var;


struct _20d058ca2_TypeCompatibilityChecker;


struct _20d058ca2_AssignTypeChecker;


struct _20d058ca2_DynamicTypeAnnotation;


struct _20d058ca2_FnCallArgChecker;


struct _20d058ca2_StructLitChecker;


struct _20c819332_Fn;


struct _20d058ca2_RetTypeChecker;


struct _20c476dc4_FnCallExpr;


struct _20c476dc4_FieldExprPair;


struct _20c476dc4_Node;


struct _20caa3115_Pass;


struct _20c476dc4_BraceLit;


struct _20d162d45_BinaryEval;


struct _20d4a6c9e_TypeAlias;


struct _20cb471a9_Trait;


struct _20cb4c70e_EnumItem;


struct _20cb4c70e_Enum;


struct _20c476dc4_KeyValPair;


struct _20c476dc4_SliceExpr;


struct _20c476dc4_IndexingExpr;


struct _20c476dc4_SlicingExpr;


struct _20c476dc4_TernaryExpr;


struct _20c476dc4_GenericDecl;


struct _20c476dc4_LabelSt;


struct _20d4a6c9e_TypeChecker;


struct _20c476dc4_GotoSt;


struct _20c476dc4_FallSt;


struct _20b6b28b3_IR;


struct _20c476dc4_AssignLeft;


struct _20c476dc4_AssignSt;


struct _20c476dc4_Comment;


struct _20c476dc4_ParamDecl;


struct _20cb4d853_Assign;


struct _20c476dc4_FnDecl;


struct _20c476dc4_VarDecl;


struct _20c476dc4_RetSt;


struct _20c476dc4_Iter;


struct _20c476dc4_WhileKind;


struct _20baa6c1e_ArgParser;

struct _20cba58cc_Importer {
	virtual ~_20cba58cc_Importer(void) {}

	virtual void _method_set_mod_path(jule::Str _1735_path) {}
	virtual jule::Str _method_get_mod_path(void) { return {}; }
	virtual jule::Str _method_mod_by_id(jule::Int _2328_id) { return {}; }
	virtual jule::Ptr<_20cba58cc_ImportInfo> _method_get_import(jule::Str _2833_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ptr<_20c476126_Ast>>,jule::Slice<_20a25b99c_Log>> _method_import_package(jule::Str _3337_path,jule::Bool _3348_update_mod) { return {}; }
	virtual void _method_imported(jule::Ptr<_20cba58cc_ImportInfo>) {}
};

struct _20d4a6c9e_Kind {
	virtual ~_20d4a6c9e_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _5822_other) { return {}; }
};

struct _20d6751d1_Lookup {
	virtual ~_20d6751d1_Lookup(void) {}

	virtual jule::Ptr<_20cba58cc_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ptr<_20cba58cc_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ptr<_20cdc725d_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ptr<_20d4a6c9e_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ptr<_20c496047_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ptr<_20c819332_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ptr<_20cb471a9_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ptr<_20cb4c70e_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _20baa6c1e_CommonFlag {
	virtual ~_20baa6c1e_CommonFlag(void) {}

	virtual jule::Str _method_name(void) { return {}; }
	virtual jule::I32 _method_short(void) { return {}; }
	virtual jule::Str _method_what(void) { return {}; }
	virtual void _method_reset(void) {}
};


struct _20a19495c_AnsiEscape {
	

	_20a19495c_AnsiEscape(void) = default;

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(const _20a19495c_AnsiEscape &_Src) const { return true; }

	inline bool operator!=(const _20a19495c_AnsiEscape &_Src) const { return !this->operator==(_Src); }
};


struct _20a19495c_Logger {
	

	_20a19495c_Logger(void) = default;

	static inline void _static_method_log_flat(_20a25b99c_Log&);


	static inline void _static_method_log_error(_20a25b99c_Log&);


	static inline void _static_method_log(_20a25b99c_Log&);


	static inline void _static_method_print_logs(jule::Slice<_20a25b99c_Log>&);


	inline bool operator==(const _20a19495c_Logger &_Src) const { return true; }

	inline bool operator!=(const _20a19495c_Logger &_Src) const { return !this->operator==(_Src); }
};


struct _20a3472e6_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();


	_20a3472e6_accept_range(jule::U8 __param_lo, jule::U8 __param_hi): _field_lo(__param_lo), _field_hi(__param_hi) {}

	

	_20a3472e6_accept_range(void) = default;

	inline bool operator==(const _20a3472e6_accept_range &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _20a3472e6_accept_range &_Src) const { return !this->operator==(_Src); }
};


struct _20b0b06ce_FoldPair {
	jule::U16 _field_from = jule::U16();
	jule::U16 _field_to = jule::U16();


	_20b0b06ce_FoldPair(jule::U16 __param_from, jule::U16 __param_to): _field_from(__param_from), _field_to(__param_to) {}

	

	_20b0b06ce_FoldPair(void) = default;

	inline bool operator==(const _20b0b06ce_FoldPair &_Src) const {
		return 
			this->_field_from == _Src._field_from &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _20b0b06ce_FoldPair &_Src) const { return !this->operator==(_Src); }
};


struct _20b0b06ce_CaseRange {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::Array<jule::I32,3> _field_delta = jule::Array<jule::I32,3>();


	_20b0b06ce_CaseRange(jule::U32 __param_lo, jule::U32 __param_hi, jule::Array<jule::I32,3> __param_delta): _field_lo(__param_lo), _field_hi(__param_hi), _field_delta(__param_delta) {}

	

	_20b0b06ce_CaseRange(void) = default;

	inline bool operator==(const _20b0b06ce_CaseRange &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_delta == _Src._field_delta;
	}

	inline bool operator!=(const _20b0b06ce_CaseRange &_Src) const { return !this->operator==(_Src); }
};


struct _20b0b06ce_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();


	_20b0b06ce_Range16(jule::U16 __param_lo, jule::U16 __param_hi, jule::U16 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_20b0b06ce_Range16(void) = default;

	inline bool operator==(const _20b0b06ce_Range16 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _20b0b06ce_Range16 &_Src) const { return !this->operator==(_Src); }
};


struct _20b0b06ce_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();


	_20b0b06ce_Range32(jule::U32 __param_lo, jule::U32 __param_hi, jule::U32 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_20b0b06ce_Range32(void) = default;

	inline bool operator==(const _20b0b06ce_Range32 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _20b0b06ce_Range32 &_Src) const { return !this->operator==(_Src); }
};


struct _20b0b06ce_RangeTable {
	jule::Slice<_20b0b06ce_Range16> _field_r16 = jule::Slice<_20b0b06ce_Range16>();
	jule::Slice<_20b0b06ce_Range32> _field_r32 = jule::Slice<_20b0b06ce_Range32>();
	jule::Int _field_latin_offset = jule::Int();


	_20b0b06ce_RangeTable(jule::Slice<_20b0b06ce_Range16> __param_r16, jule::Slice<_20b0b06ce_Range32> __param_r32, jule::Int __param_latin_offset): _field_r16(__param_r16), _field_r32(__param_r32), _field_latin_offset(__param_latin_offset) {}

	

	_20b0b06ce_RangeTable(void) = default;

	inline bool operator==(const _20b0b06ce_RangeTable &_Src) const {
		return 
			this->_field_r16 == _Src._field_r16 &&
			this->_field_r32 == _Src._field_r32 &&
			this->_field_latin_offset == _Src._field_latin_offset;
	}

	inline bool operator!=(const _20b0b06ce_RangeTable &_Src) const { return !this->operator==(_Src); }
};


struct _20a3911b9_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::Int _field_w = jule::Int();
	jule::Str _field_vol_and_path = jule::Str();
	jule::Int _field_vol_len = jule::Int();


	_20a3911b9_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len): _field_path(__param_path), _field_buff(__param_buff), _field_w(__param_w), _field_vol_and_path(__param_vol_and_path), _field_vol_len(__param_vol_len) {}

	

	_20a3911b9_LazyBuff(void) = default;

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _20a3911b9_LazyBuff &_Src) const {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _20a3911b9_LazyBuff &_Src) const { return !this->operator==(_Src); }
};


struct _20a23944c_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_20a252e5a_Status> _field_stat = jule::Ptr<_20a252e5a_Status>();


	_20a23944c_DirEntry(jule::Str __param_name, jule::Ptr<_20a252e5a_Status> __param_stat): _field_name(__param_name), _field_stat(__param_stat) {}

	

	_20a23944c_DirEntry(void) = default;

	inline bool operator==(const _20a23944c_DirEntry &_Src) const {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _20a23944c_DirEntry &_Src) const { return !this->operator==(_Src); }
};


struct _20a23944c_Directory {
	

	_20a23944c_Directory(void) = default;

	static inline jule::Exceptional<jule::Slice<jule::Ptr<_20a23944c_DirEntry>>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_create(jule::Str);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline bool operator==(const _20a23944c_Directory &_Src) const { return true; }

	inline bool operator!=(const _20a23944c_Directory &_Src) const { return !this->operator==(_Src); }
};


struct _20a284e6a_File {
	jule::Uintptr _field_handle = jule::Uintptr();


	_20a284e6a_File(jule::Uintptr __param_handle): _field_handle(__param_handle) {}

	

	_20a284e6a_File(void) = default;

	static inline jule::Ptr<_20a284e6a_File> _static_method_new(jule::Uintptr);


	static inline jule::Exceptional<jule::Ptr<_20a284e6a_File>> _static_method_create(jule::Str);


	static inline jule::Exceptional<jule::Slice<jule::U8>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_write(jule::Str,jule::Slice<jule::U8>,jule::Int);


	inline jule::Exceptional<jule::I64> _method_seek(jule::I64,jule::Int);


	inline jule::VoidExceptional _method_close(void);


	static inline jule::Exceptional<jule::Ptr<_20a284e6a_File>> _static_method_open(jule::Str,jule::Int,jule::Int);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8>);


	inline bool operator==(const _20a284e6a_File &_Src) const {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _20a284e6a_File &_Src) const { return !this->operator==(_Src); }
};


struct _20a252e5a_Status {
	jule::Uint _field_mode = jule::Uint();
	jule::Uint _field_size = jule::Uint();


	_20a252e5a_Status(jule::Uint __param_mode, jule::Uint __param_size): _field_mode(__param_mode), _field_size(__param_size) {}

	

	_20a252e5a_Status(void) = default;

	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	static inline jule::Exceptional<jule::Ptr<_20a252e5a_Status>> _static_method_of(jule::Str);


	inline bool operator==(const _20a252e5a_Status &_Src) const {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _20a252e5a_Status &_Src) const { return !this->operator==(_Src); }
};


struct _20ba2c513_Cmd {
	jule::Str _field__fle = jule::Str();
	jule::Int _field__pid = jule::Int();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();


	_20ba2c513_Cmd(jule::Str __param__fle, jule::Int __param__pid, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_env): _field__fle(__param__fle), _field__pid(__param__pid), _field_args(__param_args), _field_env(__param_env) {}

	

	_20ba2c513_Cmd(void) = default;

	static inline jule::Ptr<_20ba2c513_Cmd> _static_method_new(jule::Str);


	inline jule::Int _method_pid(void);


	inline jule::Str _method_file(void);


	inline jule::VoidExceptional _method_spawn(void);


	inline jule::VoidExceptional _method_kill(void);


	inline jule::Exceptional<jule::Int> _method_wait(void);


	inline bool operator==(const _20ba2c513_Cmd &_Src) const {
		return 
			this->_field__fle == _Src._field__fle &&
			this->_field__pid == _Src._field__pid &&
			this->_field_args == _Src._field_args &&
			this->_field_env == _Src._field_env;
	}

	inline bool operator!=(const _20ba2c513_Cmd &_Src) const { return !this->operator==(_Src); }
};


struct _20a25b99c_Log {
	jule::Int _field_kind = 0LLU;
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();


	_20a25b99c_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion): _field_kind(__param_kind), _field_row(__param_row), _field_column(__param_column), _field_path(__param_path), _field_text(__param_text), _field_line(__param_line), _field_suggestion(__param_suggestion) {}

	

	_20a25b99c_Log(void) = default;

	inline bool operator==(const _20a25b99c_Log &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text &&
			this->_field_line == _Src._field_line &&
			this->_field_suggestion == _Src._field_suggestion;
	}

	inline bool operator!=(const _20a25b99c_Log &_Src) const { return !this->operator==(_Src); }
};


struct _20b639c14_FloatInfo {
	jule::Uint _field_mantbits = jule::Uint();
	jule::Uint _field_expbits = jule::Uint();
	jule::Int _field_bias = jule::Int();


	_20b639c14_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias): _field_mantbits(__param_mantbits), _field_expbits(__param_expbits), _field_bias(__param_bias) {}

	

	_20b639c14_FloatInfo(void) = default;

	inline bool operator==(const _20b639c14_FloatInfo &_Src) const {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _20b639c14_FloatInfo &_Src) const { return !this->operator==(_Src); }
};


struct _20b639c14_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();


	_20b639c14_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg) {}

	

	_20b639c14_DecimalSlice(void) = default;

	inline bool operator==(const _20b639c14_DecimalSlice &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _20b639c14_DecimalSlice &_Src) const { return !this->operator==(_Src); }
};


struct _20bcae960_LeftCheat {
	jule::Int _field_delta = jule::Int();
	jule::Str _field_cutoff = jule::Str();


	_20bcae960_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff): _field_delta(__param_delta), _field_cutoff(__param_cutoff) {}

	

	_20bcae960_LeftCheat(void) = default;

	inline bool operator==(const _20bcae960_LeftCheat &_Src) const {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _20bcae960_LeftCheat &_Src) const { return !this->operator==(_Src); }
};


struct _20bcae960_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();


	_20bcae960_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg), _field_trunc(__param_trunc) {}

	

	_20bcae960_Decimal(void) = default;

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_20b639c14_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _20bcae960_Decimal &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _20bcae960_Decimal &_Src) const { return !this->operator==(_Src); }
};


struct _20c47803a_Token {
	jule::Ptr<_20c4792c2_File> _field_file = jule::Ptr<_20c4792c2_File>();
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_kind = jule::Str();
	jule::Uint _field_id = 0LLU;


	_20c47803a_Token(jule::Ptr<_20c4792c2_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id): _field_file(__param_file), _field_row(__param_row), _field_column(__param_column), _field_kind(__param_kind), _field_id(__param_id) {}

	

	_20c47803a_Token(void) = default;

	inline jule::U8 _method_prec(void);


	inline bool operator==(const _20c47803a_Token &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _20c47803a_Token &_Src) const { return !this->operator==(_Src); }
};


struct _20c4792c2_File {
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Str _field__path = jule::Str();
	jule::Slice<_20c47803a_Token> _field__tokens = jule::Slice<_20c47803a_Token>();


	_20c4792c2_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, jule::Slice<_20c47803a_Token> __param__tokens): _field_data(__param_data), _field__path(__param__path), _field__tokens(__param__tokens) {}

	

	_20c4792c2_File(void) = default;

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline jule::Slice<_20c47803a_Token> _method_tokens(void);


	inline jule::Str _method_get_row(jule::Int);


	inline bool operator==(const _20c4792c2_File &_Src) const {
		return 
			this->_field_data == _Src._field_data &&
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _20c4792c2_File &_Src) const { return !this->operator==(_Src); }
};


struct _20c47ab20_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::Uint _field_id = 0LLU;


	_20c47ab20_KindPair(jule::Str __param_kind, jule::Uint __param_id): _field_kind(__param_kind), _field_id(__param_id) {}

	

	_20c47ab20_KindPair(void) = default;

	inline bool operator==(const _20c47ab20_KindPair &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _20c47ab20_KindPair &_Src) const { return !this->operator==(_Src); }
};


struct _20c47ab20_Lex {
	jule::Slice<_20c47803a_Token> _field_tokens = jule::Slice<_20c47803a_Token>();
	jule::Ptr<_20c4792c2_File> _field_file = jule::Ptr<_20c4792c2_File>();
	jule::Int _field_pos = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Int _field_row = jule::Int();
	jule::Slice<_20a25b99c_Log> _field_errors = jule::Slice<_20a25b99c_Log>();


	_20c47ab20_Lex(jule::Slice<_20c47803a_Token> __param_tokens, jule::Ptr<_20c4792c2_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_20a25b99c_Log> __param_errors): _field_tokens(__param_tokens), _field_file(__param_file), _field_pos(__param_pos), _field_column(__param_column), _field_row(__param_row), _field_errors(__param_errors) {}

	

	_20c47ab20_Lex(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_20c47803a_Token&,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>&);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_20c47803a_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>&);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>&);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>&,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>&);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>&,jule::Str,jule::Uint,_20c47803a_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_20c47803a_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>&,_20c47803a_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>&,_20c47803a_Token&);


	inline _20c47803a_Token _method_token(void);


	inline bool operator==(const _20c47ab20_Lex &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _20c47ab20_Lex &_Src) const { return !this->operator==(_Src); }
};


struct _20c476126_Ast {
	jule::Ptr<_20c4792c2_File> _field_file = jule::Ptr<_20c4792c2_File>();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Slice<jule::Ptr<_20c476dc4_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_20c476dc4_UseDecl>>();
	jule::Slice<jule::Ptr<_20c476dc4_Impl>> _field_impls = jule::Slice<jule::Ptr<_20c476dc4_Impl>>();
	jule::Slice<_20c476dc4_Node> _field_decls = jule::Slice<_20c476dc4_Node>();


	_20c476126_Ast(jule::Ptr<_20c4792c2_File> __param_file, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_top_directives, jule::Slice<jule::Ptr<_20c476dc4_UseDecl>> __param_use_decls, jule::Slice<jule::Ptr<_20c476dc4_Impl>> __param_impls, jule::Slice<_20c476dc4_Node> __param_decls): _field_file(__param_file), _field_top_directives(__param_top_directives), _field_use_decls(__param_use_decls), _field_impls(__param_impls), _field_decls(__param_decls) {}

	

	_20c476126_Ast(void) = default;

	inline bool operator==(const _20c476126_Ast &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _20c476126_Ast &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_CommentGroup {
	jule::Slice<jule::Ptr<_20c476dc4_Comment>> _field_comments = jule::Slice<jule::Ptr<_20c476dc4_Comment>>();


	_20c476dc4_CommentGroup(jule::Slice<jule::Ptr<_20c476dc4_Comment>> __param_comments): _field_comments(__param_comments) {}

	

	_20c476dc4_CommentGroup(void) = default;

	inline bool operator==(const _20c476dc4_CommentGroup &_Src) const {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _20c476dc4_CommentGroup &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_NamespaceTypeDecl {
	jule::Slice<_20c47803a_Token> _field_idents = jule::Slice<_20c47803a_Token>();
	jule::Ptr<_20c476dc4_IdentTypeDecl> _field_kind = jule::Ptr<_20c476dc4_IdentTypeDecl>();


	_20c476dc4_NamespaceTypeDecl(jule::Slice<_20c47803a_Token> __param_idents, jule::Ptr<_20c476dc4_IdentTypeDecl> __param_kind): _field_idents(__param_idents), _field_kind(__param_kind) {}

	

	_20c476dc4_NamespaceTypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_NamespaceTypeDecl &_Src) const {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20c476dc4_NamespaceTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_SptrTypeDecl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_elem = jule::Ptr<_20c476dc4_TypeDecl>();


	_20c476dc4_SptrTypeDecl(jule::Ptr<_20c476dc4_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_20c476dc4_SptrTypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_SptrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20c476dc4_SptrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_SlcTypeDecl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_elem = jule::Ptr<_20c476dc4_TypeDecl>();


	_20c476dc4_SlcTypeDecl(jule::Ptr<_20c476dc4_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_20c476dc4_SlcTypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_SlcTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20c476dc4_SlcTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_TupleTypeDecl {
	jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>();


	_20c476dc4_TupleTypeDecl(jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> __param_types): _field_types(__param_types) {}

	

	_20c476dc4_TupleTypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_TupleTypeDecl &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _20c476dc4_TupleTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_PtrTypeDecl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_elem = jule::Ptr<_20c476dc4_TypeDecl>();


	_20c476dc4_PtrTypeDecl(jule::Ptr<_20c476dc4_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_20c476dc4_PtrTypeDecl(void) = default;

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _20c476dc4_PtrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20c476dc4_PtrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_ArrTypeDecl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_elem = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_Expr> _field_size = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_ArrTypeDecl(jule::Ptr<_20c476dc4_TypeDecl> __param_elem, jule::Ptr<_20c476dc4_Expr> __param_size): _field_elem(__param_elem), _field_size(__param_size) {}

	

	_20c476dc4_ArrTypeDecl(void) = default;

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _20c476dc4_ArrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _20c476dc4_ArrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_MapTypeDecl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_key = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_TypeDecl> _field_val = jule::Ptr<_20c476dc4_TypeDecl>();


	_20c476dc4_MapTypeDecl(jule::Ptr<_20c476dc4_TypeDecl> __param_key, jule::Ptr<_20c476dc4_TypeDecl> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_20c476dc4_MapTypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_MapTypeDecl &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _20c476dc4_MapTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_RetTypeDecl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Slice<_20c47803a_Token> _field_idents = jule::Slice<_20c47803a_Token>();


	_20c476dc4_RetTypeDecl(jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Slice<_20c47803a_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_20c476dc4_RetTypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_RetTypeDecl &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _20c476dc4_RetTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_TupleExpr {
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _field_expr = jule::Slice<jule::Ptr<_20c476dc4_Expr>>();


	_20c476dc4_TupleExpr(jule::Slice<jule::Ptr<_20c476dc4_Expr>> __param_expr): _field_expr(__param_expr) {}

	

	_20c476dc4_TupleExpr(void) = default;

	inline bool operator==(const _20c476dc4_TupleExpr &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_TupleExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_CastExpr {
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Any _field_expr = jule::Any();


	_20c476dc4_CastExpr(jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Any __param_expr): _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_20c476dc4_CastExpr(void) = default;

	inline bool operator==(const _20c476dc4_CastExpr &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_CastExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_StructLit {
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_20c476dc4_StructLit(jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs): _field_kind(__param_kind), _field_exprs(__param_exprs) {}

	

	_20c476dc4_StructLit(void) = default;

	inline bool operator==(const _20c476dc4_StructLit &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _20c476dc4_StructLit &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_ScopeTree {
	jule::Ptr<_20c476dc4_ScopeTree> _field_parent = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_20c476dc4_ScopeTree(jule::Ptr<_20c476dc4_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_20c476dc4_ScopeTree(void) = default;

	inline bool operator==(const _20c476dc4_ScopeTree &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _20c476dc4_ScopeTree &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Conditional {
	jule::Ptr<_20c476dc4_If> _field_head = jule::Ptr<_20c476dc4_If>();
	jule::Slice<jule::Ptr<_20c476dc4_If>> _field_tail = jule::Slice<jule::Ptr<_20c476dc4_If>>();
	jule::Ptr<_20c476dc4_Else> _field_default = jule::Ptr<_20c476dc4_Else>();


	_20c476dc4_Conditional(jule::Ptr<_20c476dc4_If> __param_head, jule::Slice<jule::Ptr<_20c476dc4_If>> __param_tail, jule::Ptr<_20c476dc4_Else> __param_default): _field_head(__param_head), _field_tail(__param_tail), _field_default(__param_default) {}

	

	_20c476dc4_Conditional(void) = default;

	inline bool operator==(const _20c476dc4_Conditional &_Src) const {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20c476dc4_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Impl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_base = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_TypeDecl> _field_dest = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_20c476dc4_FnDecl>>();
	jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_20c476dc4_VarDecl>>();


	_20c476dc4_Impl(jule::Ptr<_20c476dc4_TypeDecl> __param_base, jule::Ptr<_20c476dc4_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> __param_methods, jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_20c476dc4_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _20c476dc4_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _20c476dc4_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _20c4d35c3_FileInfo {
	jule::Ptr<_20c476126_Ast> _field_ast = jule::Ptr<_20c476126_Ast>();
	jule::Slice<_20a25b99c_Log> _field_errors = jule::Slice<_20a25b99c_Log>();


	_20c4d35c3_FileInfo(jule::Ptr<_20c476126_Ast> __param_ast, jule::Slice<_20a25b99c_Log> __param_errors): _field_ast(__param_ast), _field_errors(__param_errors) {}

	

	_20c4d35c3_FileInfo(void) = default;

	inline bool operator==(const _20c4d35c3_FileInfo &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _20c4d35c3_FileInfo &_Src) const { return !this->operator==(_Src); }
};


struct _20c4d35c3_PackageInfo {
	jule::Slice<jule::Ptr<_20c4d35c3_FileInfo>> _field_files = jule::Slice<jule::Ptr<_20c4d35c3_FileInfo>>();


	_20c4d35c3_PackageInfo(jule::Slice<jule::Ptr<_20c4d35c3_FileInfo>> __param_files): _field_files(__param_files) {}

	

	_20c4d35c3_PackageInfo(void) = default;

	inline bool operator==(const _20c4d35c3_PackageInfo &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _20c4d35c3_PackageInfo &_Src) const { return !this->operator==(_Src); }
};


struct _20c4d7055_Stmt {
	jule::Slice<_20c47803a_Token> _field_tokens = jule::Slice<_20c47803a_Token>();
	jule::Bool _field_terminated = jule::Bool();


	_20c4d7055_Stmt(jule::Slice<_20c47803a_Token> __param_tokens, jule::Bool __param_terminated): _field_tokens(__param_tokens), _field_terminated(__param_terminated) {}

	

	_20c4d7055_Stmt(void) = default;

	inline bool operator==(const _20c4d7055_Stmt &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _20c4d7055_Stmt &_Src) const { return !this->operator==(_Src); }
};


struct _20c4d7055_ScopeParser {
	jule::Ptr<_20c7de1a3_Parser> _field_p = jule::Ptr<_20c7de1a3_Parser>();
	jule::Ptr<_20c476dc4_ScopeTree> _field_s = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _field_stmts = jule::Slice<jule::Ptr<_20c4d7055_Stmt>>();
	jule::Int _field_pos = jule::Int();


	_20c4d7055_ScopeParser(jule::Ptr<_20c7de1a3_Parser> __param_p, jule::Ptr<_20c476dc4_ScopeTree> __param_s, jule::Slice<jule::Ptr<_20c4d7055_Stmt>> __param_stmts, jule::Int __param_pos): _field_p(__param_p), _field_s(__param_s), _field_stmts(__param_stmts), _field_pos(__param_pos) {}

	

	_20c4d7055_ScopeParser(void) = default;

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_20c47803a_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c4d7055_Stmt> _method_next(void);


	inline jule::Ptr<_20c476dc4_ScopeTree> _method_build_scope(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_var_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_ret_st(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ptr<_20c4d7055_Stmt>&);


	inline jule::Ptr<_20c476dc4_WhileKind> _method_build_while_iter_kind(jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Slice<_20c47803a_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_VarDecl> _method_build_range_kind_key(jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_20c47803a_Token>>&);


	inline void _method_setup_range_kind_keys_plain(jule::Ptr<_20c476dc4_RangeKind>&,jule::Slice<_20c47803a_Token>&);


	inline void _method_setup_range_kind_keys_explicit(jule::Ptr<_20c476dc4_RangeKind>&,jule::Slice<_20c47803a_Token>&);


	inline void _method_setup_range_kind_keys(jule::Ptr<_20c476dc4_RangeKind>&,jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_RangeKind> _method_build_range_iter_kind(jule::Slice<_20c47803a_Token>&,jule::Slice<_20c47803a_Token>&,_20c47803a_Token&);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_20c47803a_Token>&,_20c47803a_Token&);


	inline jule::Any _method_build_common_iter(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ptr<_20c4d7055_Stmt>&);


	inline jule::Any _method_build_break_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_cont_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_If> _method_build_if(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_Else> _method_build_else(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_comment_st(_20c47803a_Token&);


	inline jule::Any _method_build_co_call_st(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_fall_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_20c47803a_Token>&);


	inline void _method_push_case_expr(jule::Slice<_20c47803a_Token>,_20c47803a_Token,jule::Bool,jule::Slice<jule::Ptr<_20c476dc4_Expr>>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_Expr>> _method_build_case_exprs(jule::Slice<_20c47803a_Token>&,jule::Bool);


	inline jule::Ptr<_20c476dc4_ScopeTree> _method_build_case_scope(jule::Slice<_20c47803a_Token>&);


	inline std::tuple<jule::Ptr<_20c476dc4_Case>,jule::Bool> _method_build_case(jule::Slice<_20c47803a_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ptr<_20c476dc4_Case>>,jule::Ptr<_20c476dc4_Else>> _method_build_cases(jule::Slice<_20c47803a_Token>,jule::Bool);


	inline jule::Ptr<_20c476dc4_MatchCase> _method_build_match_case(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_ScopeTree> _method_build_scope_st(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_LabelSt> _method_build_label_st(jule::Slice<_20c47803a_Token>&);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c4bea32_AssignInfo> _method_build_assign_info(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_AssignLeft> _method_build_assign_l(jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_20c47803a_Token>>&);


	inline std::tuple<jule::Ptr<_20c476dc4_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_20c47803a_Token>&);


	inline std::tuple<jule::Ptr<_20c476dc4_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_20c47803a_Token>);


	inline std::tuple<jule::Ptr<_20c476dc4_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_use_expr(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_st(jule::Ptr<_20c4d7055_Stmt>&);


	inline void _method_build(jule::Slice<_20c47803a_Token>&,jule::Ptr<_20c476dc4_ScopeTree>&);


	inline bool operator==(const _20c4d7055_ScopeParser &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _20c4d7055_ScopeParser &_Src) const { return !this->operator==(_Src); }
};


struct _20c4aa1e3_CallData {
	jule::Slice<_20c47803a_Token> _field_expr_tokens = jule::Slice<_20c47803a_Token>();
	jule::Slice<_20c47803a_Token> _field_args_tokens = jule::Slice<_20c47803a_Token>();
	jule::Slice<_20c47803a_Token> _field_generics_tokens = jule::Slice<_20c47803a_Token>();


	_20c4aa1e3_CallData(jule::Slice<_20c47803a_Token> __param_expr_tokens, jule::Slice<_20c47803a_Token> __param_args_tokens, jule::Slice<_20c47803a_Token> __param_generics_tokens): _field_expr_tokens(__param_expr_tokens), _field_args_tokens(__param_args_tokens), _field_generics_tokens(__param_generics_tokens) {}

	

	_20c4aa1e3_CallData(void) = default;

	inline bool operator==(const _20c4aa1e3_CallData &_Src) const {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _20c4aa1e3_CallData &_Src) const { return !this->operator==(_Src); }
};


struct _20c4aa1e3_ExprBuilder {
	jule::Ptr<_20c7de1a3_Parser> _field_p = jule::Ptr<_20c7de1a3_Parser>();


	_20c4aa1e3_ExprBuilder(jule::Ptr<_20c7de1a3_Parser> __param_p): _field_p(__param_p) {}

	

	_20c4aa1e3_ExprBuilder(void) = default;

	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_20c476dc4_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_20c47803a_Token>>&);


	inline jule::Ptr<_20c476dc4_LitExpr> _method_build_lit(_20c47803a_Token);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_primitive_type(_20c47803a_Token&);


	inline jule::Any _method_build_single(_20c47803a_Token);


	inline jule::Ptr<_20c476dc4_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_UnaryExpr> _method_build_unary(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_type(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_sub_ident(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_VariadicExpr> _method_build_variadic(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_CastExpr> _method_try_build_cast(jule::Slice<_20c47803a_Token>&);


	inline void _method_push_arg(jule::Slice<jule::Ptr<_20c476dc4_Expr>>&,jule::Slice<_20c47803a_Token>,_20c47803a_Token);


	inline jule::Slice<jule::Ptr<_20c476dc4_Expr>> _method_build_args(jule::Slice<_20c47803a_Token>);


	inline jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _method_build_call_generics(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_FnCallExpr> _method_build_fn_call(_20c47803a_Token&,jule::Ptr<_20c4aa1e3_CallData>&);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_FnDecl> _method_build_anon_fn(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_unsafe(jule::Slice<_20c47803a_Token>&);


	inline void _method_push_range_lit_part(jule::Slice<_20c47803a_Token>,_20c47803a_Token,jule::Slice<jule::Slice<_20c47803a_Token>>&);


	inline jule::Slice<jule::Slice<_20c47803a_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_StructLit> _method_build_typed_struct_literal(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_BraceLit> _method_build_brace_lit(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_brace_range(jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Slice<_20c47803a_Token>> _method_get_enumerable_parts(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_SliceExpr> _method_build_slice(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_IndexingExpr> _method_build_indexing(jule::Slice<_20c47803a_Token>,jule::Slice<_20c47803a_Token>,_20c47803a_Token);


	inline jule::Ptr<_20c476dc4_SlicingExpr> _method_build_slicing(jule::Slice<_20c47803a_Token>&,jule::Slice<_20c47803a_Token>&,jule::Int&,_20c47803a_Token&);


	inline jule::Any _method_build_bracket_range(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_ternary(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_data(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_BinopExpr> _method_build_binop(jule::Slice<_20c47803a_Token>&,jule::Int);


	inline jule::Any _method_build(jule::Slice<_20c47803a_Token>&);


	inline jule::Any _method_build_kind(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_Expr> _method_build_from_tokens(jule::Slice<_20c47803a_Token>);


	inline bool operator==(const _20c4aa1e3_ExprBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _20c4aa1e3_ExprBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _20c7de1a3_Parser {
	jule::Ptr<_20c7de1a3_Parser> self;

	jule::Ptr<_20c476126_Ast> _field_ast = jule::Ptr<_20c476126_Ast>();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Ptr<_20c476dc4_CommentGroup> _field_comment_group = jule::Ptr<_20c476dc4_CommentGroup>();
	jule::Slice<_20a25b99c_Log> _field_errors = jule::Slice<_20a25b99c_Log>();


	_20c7de1a3_Parser(jule::Ptr<_20c476126_Ast> __param_ast, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Ptr<_20c476dc4_CommentGroup> __param_comment_group, jule::Slice<_20a25b99c_Log> __param_errors): _field_ast(__param_ast), _field_directives(__param_directives), _field_comment_group(__param_comment_group), _field_errors(__param_errors) {
		this->self = jule::Ptr<_20c7de1a3_Parser>::make(this, nullptr);

	}

	~_20c7de1a3_Parser(void) { this->self.ref = nullptr; }

	_20c7de1a3_Parser(void) { this->self = jule::Ptr<_20c7de1a3_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_20c476dc4_Expr> _method_build_expr(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_Directive> _method_build_directive(jule::Slice<_20c47803a_Token>);


	inline void _method_push_directive(jule::Ptr<_20c476dc4_Directive>);


	inline jule::Ptr<_20c476dc4_ScopeTree> _method_build_scope(jule::Slice<_20c47803a_Token>&);


	inline std::tuple<jule::Ptr<_20c476dc4_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_20c47803a_Token>&,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ptr<_20c476dc4_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_20c47803a_Token>&,jule::Int*,jule::Bool);


	inline jule::Ptr<_20c476dc4_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_20c47803a_Token>&);


	inline void _method_build_var_type_and_expr(jule::Ptr<_20c476dc4_VarDecl>&,jule::Slice<_20c47803a_Token>&);


	inline void _method_build_var_common(jule::Ptr<_20c476dc4_VarDecl>&,jule::Slice<_20c47803a_Token>);


	inline void _method_build_var_begin(jule::Ptr<_20c476dc4_VarDecl>&,jule::Ptr<jule::Int>,jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_VarDecl> _method_build_var(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_GenericDecl> _method_build_generic(jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _method_build_generics(jule::Slice<_20c47803a_Token>&,_20c47803a_Token&);


	inline jule::Ptr<_20c476dc4_ParamDecl> _method_build_self_param(jule::Slice<_20c47803a_Token>);


	inline void _method_param_type_begin(jule::Ptr<_20c476dc4_ParamDecl>&,jule::Int&,jule::Slice<_20c47803a_Token>&);


	inline void _method_build_param_type(jule::Ptr<_20c476dc4_ParamDecl>&,jule::Slice<_20c47803a_Token>&);


	inline void _method_param_body_id(jule::Ptr<_20c476dc4_ParamDecl>,_20c47803a_Token);


	inline void _method_build_param_body(jule::Ptr<_20c476dc4_ParamDecl>&,jule::Ptr<jule::Int>,jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_ParamDecl> _method_build_param(jule::Slice<_20c47803a_Token>);


	inline void _method_check_params(jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>> _method_build_params(jule::Slice<_20c47803a_Token>&,jule::Bool);


	inline std::tuple<jule::Ptr<_20c476dc4_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_20c47803a_Token>&,jule::Int&);


	inline std::tuple<jule::Ptr<_20c476dc4_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_20c47803a_Token>&,jule::Int&);


	inline jule::Ptr<_20c476dc4_FnDecl> _method_build_fn_prototype(jule::Slice<_20c47803a_Token>&,jule::Int&,jule::Bool);


	inline jule::Ptr<_20c476dc4_FnDecl> _method_build_fn(jule::Slice<_20c47803a_Token>&,jule::Bool,jule::Bool);


	inline jule::Slice<_20c47803a_Token> _method_get_use_decl_selectors(jule::Slice<_20c47803a_Token>);


	inline void _method_build_cpp_use_decl(jule::Ptr<_20c476dc4_UseDecl>&,jule::Slice<_20c47803a_Token>&);


	inline void _method_build_std_use_decl(jule::Ptr<_20c476dc4_UseDecl>&,jule::Slice<_20c47803a_Token>);


	inline void _method_build_ident_use_decl(jule::Ptr<_20c476dc4_UseDecl>&,jule::Slice<_20c47803a_Token>);


	inline void _method_parse_use_decl(jule::Ptr<_20c476dc4_UseDecl>&,jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_UseDecl> _method_build_use_decl(jule::Slice<_20c47803a_Token>,jule::Bool);


	inline jule::Ptr<_20c476dc4_Expr> _method_build_enum_item_expr(jule::Ptr<jule::Int>,jule::Slice<_20c47803a_Token>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>> _method_build_enum_items(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_EnumDecl> _method_build_enum_decl(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_FieldDecl> _method_build_field(jule::Slice<_20c47803a_Token>);


	inline jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_StructDecl> _method_build_struct_decl(jule::Slice<_20c47803a_Token>&);


	inline void _method_check_method_receiver(jule::Ptr<_20c476dc4_FnDecl>&);


	inline jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> _method_build_trait_methods(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_TraitDecl> _method_build_trait_decl(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_FnDecl> _method_build_cpp_link_fn(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_VarDecl> _method_build_cpp_link_var(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_StructDecl> _method_build_cpp_link_struct(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_20c47803a_Token>);


	inline jule::Ptr<_20c476dc4_UseDecl> _method_build_cpp_link_use(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_FnDecl> _method_get_method(jule::Slice<_20c47803a_Token>&);


	inline void _method_parse_impl_body(jule::Ptr<_20c476dc4_Impl>&,jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_Impl> _method_build_impl(jule::Slice<_20c47803a_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_20c47803a_Token>&);


	inline void _method_check_comment_group(_20c476dc4_Node&);


	inline void _method_check_directive(_20c476dc4_Node&);


	inline void _method_apply_fn_meta(jule::Ptr<_20c476dc4_FnDecl>&,jule::Bool);


	inline void _method_apply_meta(_20c476dc4_Node&,jule::Bool);


	inline void _method_check_use_decl(_20c476dc4_Node&);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_20c47803a_Token>);


	inline _20c476dc4_Node _method_parse_node(jule::Slice<_20c47803a_Token>&);


	inline void _method_append_node(jule::Slice<_20c47803a_Token>&);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_20c47803a_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_20c47803a_Token&,jule::Slice<_20c47803a_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_20c47803a_Token,jule::Str,jule::Slice<_20c47803a_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_20c47803a_Token>&);


	inline void _method_parse(jule::Ptr<_20c4792c2_File>&);


	inline bool operator==(const _20c7de1a3_Parser &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _20c7de1a3_Parser &_Src) const { return !this->operator==(_Src); }
};


struct _20c9bd97b_TypeBuilder {
	jule::Ptr<_20c7de1a3_Parser> _field_p = jule::Ptr<_20c7de1a3_Parser>();
	jule::Slice<_20c47803a_Token> _field_tokens = jule::Slice<_20c47803a_Token>();
	jule::Int* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();


	_20c9bd97b_TypeBuilder(jule::Ptr<_20c7de1a3_Parser> __param_p, jule::Slice<_20c47803a_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err): _field_p(__param_p), _field_tokens(__param_tokens), _field_i(__param_i), _field_err(__param_err) {}

	

	_20c9bd97b_TypeBuilder(void) = default;

	inline void _method_push_err(_20c47803a_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_prim(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_20c47803a_Token>> _method_ident_generics(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_ident(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_fn(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_ptr(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_sptr(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_op(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_slc(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_arr(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_map(jule::Int,jule::Slice<_20c47803a_Token>&);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_build_enumerable(void);


	inline jule::Ptr<_20c476dc4_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ptr<_20c476dc4_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _20c9bd97b_TypeBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _20c9bd97b_TypeBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _20d78b3e6_Const {
	jule::Any _field_data = jule::Any();


	_20d78b3e6_Const(jule::Any __param_data): _field_data(__param_data) {}

	

	_20d78b3e6_Const(void) = default;

	static inline jule::Ptr<_20d78b3e6_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ptr<_20d78b3e6_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ptr<_20d78b3e6_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ptr<_20d78b3e6_Const> _static_method_new_str(jule::Str);


	static inline jule::Ptr<_20d78b3e6_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ptr<_20d78b3e6_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_20d78b3e6_Const);


	inline jule::Bool _method_and(_20d78b3e6_Const);


	inline jule::Bool _method_or(_20d78b3e6_Const);


	inline jule::Bool _method_eqs(_20d78b3e6_Const);


	inline jule::Bool _method_lt(_20d78b3e6_Const);


	inline jule::Bool _method_gt(_20d78b3e6_Const);


	inline jule::Bool _method_add(_20d78b3e6_Const);


	inline jule::Bool _method_sub(_20d78b3e6_Const);


	inline jule::Bool _method_mul(_20d78b3e6_Const);


	inline jule::Bool _method_div(_20d78b3e6_Const);


	inline jule::Bool _method_mod(_20d78b3e6_Const);


	inline jule::Bool _method_bitwise_and(_20d78b3e6_Const);


	inline jule::Bool _method_bitwise_or(_20d78b3e6_Const);


	inline jule::Bool _method_xor(_20d78b3e6_Const);


	inline jule::Bool _method_lshift(_20d78b3e6_Const);


	inline jule::Bool _method_rshift(_20d78b3e6_Const);


	inline bool operator==(const _20d78b3e6_Const &_Src) const {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _20d78b3e6_Const &_Src) const { return !this->operator==(_Src); }
};


struct _20c496047_FieldIns {
	jule::Ptr<_20c496047_Field> _field_decl = jule::Ptr<_20c496047_Field>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d162d45_Data> _field_default = jule::Ptr<_20d162d45_Data>();


	_20c496047_FieldIns(jule::Ptr<_20c496047_Field> __param_decl, jule::Ptr<_20d4a6c9e_TypeKind> __param_kind, jule::Ptr<_20d162d45_Data> __param_default): _field_decl(__param_decl), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_20c496047_FieldIns(void) = default;

	inline bool operator==(const _20c496047_FieldIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20c496047_FieldIns &_Src) const { return !this->operator==(_Src); }
};


struct _20c496047_StructIns: public _20d4a6c9e_Kind {
	jule::Ptr<_20c496047_StructIns> self;

	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_20c496047_Struct> _field_decl = jule::Ptr<_20c496047_Struct>();
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>();
	jule::Slice<jule::Ptr<_20c496047_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_20c496047_FieldIns>>();
	jule::Slice<jule::Ptr<_20c819332_Fn>> _field_methods = jule::Slice<jule::Ptr<_20c819332_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_20caa3115_ReferenceStack> _field_references = jule::Ptr<_20caa3115_ReferenceStack>();


	_20c496047_StructIns(jule::Bool __param_checked, jule::Ptr<_20c496047_Struct> __param_decl, jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_20c496047_FieldIns>> __param_fields, jule::Slice<jule::Ptr<_20c819332_Fn>> __param_methods, jule::Bool __param_mutable, jule::Ptr<_20caa3115_ReferenceStack> __param_references): _field_checked(__param_checked), _field_decl(__param_decl), _field_generics(__param_generics), _field_fields(__param_fields), _field_methods(__param_methods), _field_mutable(__param_mutable), _field_references(__param_references) {
		this->self = jule::Ptr<_20c496047_StructIns>::make(this, nullptr);

	}

	~_20c496047_StructIns(void) { this->self.ref = nullptr; }

	_20c496047_StructIns(void) { this->self = jule::Ptr<_20c496047_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Bool _method_same(jule::Ptr<_20c496047_StructIns>);


	inline jule::Ptr<_20c819332_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_20c496047_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _20c496047_StructIns &_Src) const {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _20c496047_StructIns &_Src) const { return !this->operator==(_Src); }
};


struct _20c819332_RetType {
	jule::Ptr<_20d4a6c9e_TypeSymbol> _field_kind = jule::Ptr<_20d4a6c9e_TypeSymbol>();
	jule::Slice<_20c47803a_Token> _field_idents = jule::Slice<_20c47803a_Token>();


	_20c819332_RetType(jule::Ptr<_20d4a6c9e_TypeSymbol> __param_kind, jule::Slice<_20c47803a_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_20c819332_RetType(void) = default;

	inline bool operator==(const _20c819332_RetType &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _20c819332_RetType &_Src) const { return !this->operator==(_Src); }
};


struct _20c819332_ParamIns {
	jule::Ptr<_20c819332_Param> _field_decl = jule::Ptr<_20c819332_Param>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20c819332_ParamIns(jule::Ptr<_20c819332_Param> __param_decl, jule::Ptr<_20d4a6c9e_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_20c819332_ParamIns(void) = default;

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _20c819332_ParamIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20c819332_ParamIns &_Src) const { return !this->operator==(_Src); }
};


struct _20c819332_FnIns: public _20d4a6c9e_Kind {
	jule::Ptr<_20c819332_FnIns> self;

	jule::Ptr<_20c496047_StructIns> _field_owner = jule::Ptr<_20c496047_StructIns>();
	jule::Ptr<_20c819332_Fn> _field_decl = jule::Ptr<_20c819332_Fn>();
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>();
	jule::Slice<jule::Ptr<_20c819332_ParamIns>> _field_params = jule::Slice<jule::Ptr<_20c819332_ParamIns>>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_result = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();
	jule::Ptr<_20caa3115_ReferenceStack> _field_references = jule::Ptr<_20caa3115_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Ptr<_20caa3115_ReferenceStack> _field_refers = jule::Ptr<_20caa3115_ReferenceStack>();
	jule::U8 _field_caller = jule::U8();
	jule::Bool _field_reloaded = jule::Bool();


	_20c819332_FnIns(jule::Ptr<_20c496047_StructIns> __param_owner, jule::Ptr<_20c819332_Fn> __param_decl, jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_20c819332_ParamIns>> __param_params, jule::Ptr<_20d4a6c9e_TypeKind> __param_result, jule::Ptr<_20cb4d853_Scope> __param_scope, jule::Ptr<_20caa3115_ReferenceStack> __param_references, jule::Bool __param_anon, jule::Ptr<_20caa3115_ReferenceStack> __param_refers, jule::U8 __param_caller, jule::Bool __param_reloaded): _field_owner(__param_owner), _field_decl(__param_decl), _field_generics(__param_generics), _field_params(__param_params), _field_result(__param_result), _field_scope(__param_scope), _field_references(__param_references), _field_anon(__param_anon), _field_refers(__param_refers), _field_caller(__param_caller), _field_reloaded(__param_reloaded) {
		this->self = jule::Ptr<_20c819332_FnIns>::make(this, nullptr);

	}

	~_20c819332_FnIns(void) { this->self.ref = nullptr; }

	_20c819332_FnIns(void) { this->self = jule::Ptr<_20c819332_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_same(jule::Ptr<_20c819332_FnIns>);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(const _20c819332_FnIns &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_anon == _Src._field_anon &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded;
	}

	inline bool operator!=(const _20c819332_FnIns &_Src) const { return !this->operator==(_Src); }
};


struct _20caa3115_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();


	_20caa3115_ReferenceStack(jule::Slice<jule::Any> __param_buffer): _field_buffer(__param_buffer) {}

	

	_20caa3115_ReferenceStack(void) = default;

	static inline jule::Ptr<_20caa3115_ReferenceStack> _static_method_new(void);


	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline jule::Bool _method_exist_0(jule::Ptr<_20cdc725d_Var>);
	inline jule::Bool _method_exist_1(jule::Ptr<_20c819332_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ptr<_20c496047_StructIns>);


	inline bool operator==(const _20caa3115_ReferenceStack &_Src) const {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _20caa3115_ReferenceStack &_Src) const { return !this->operator==(_Src); }
};


struct _20caa3115_SymbolBuilder {
	jule::Ptr<_20caa3115_SymbolBuilder> self;

	jule::Ptr<_20caa3115_SymbolBuilder> _field_owner = jule::Ptr<_20caa3115_SymbolBuilder>();
	jule::Trait<_20cba58cc_Importer> _field_importer = jule::Trait<_20cba58cc_Importer>();
	jule::Slice<_20a25b99c_Log> _field_errors = jule::Slice<_20a25b99c_Log>();
	jule::Ptr<_20c476126_Ast> _field_ast = jule::Ptr<_20c476126_Ast>();
	jule::Ptr<_20d0c86e5_SymbolTable> _field_table = jule::Ptr<_20d0c86e5_SymbolTable>();


	_20caa3115_SymbolBuilder(jule::Ptr<_20caa3115_SymbolBuilder> __param_owner, jule::Trait<_20cba58cc_Importer> __param_importer, jule::Slice<_20a25b99c_Log> __param_errors, jule::Ptr<_20c476126_Ast> __param_ast, jule::Ptr<_20d0c86e5_SymbolTable> __param_table): _field_owner(__param_owner), _field_importer(__param_importer), _field_errors(__param_errors), _field_ast(__param_ast), _field_table(__param_table) {
		this->self = jule::Ptr<_20caa3115_SymbolBuilder>::make(this, nullptr);

	}

	~_20caa3115_SymbolBuilder(void) { this->self.ref = nullptr; }

	_20caa3115_SymbolBuilder(void) { this->self = jule::Ptr<_20caa3115_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ptr<_20caa3115_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_20c47803a_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_20c47803a_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_build_cpp_header_import(jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_build_std_import(jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_build_ident_import(jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_build_import(jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ptr<_20cba58cc_ImportInfo>&);


	inline void _method_impl_import_selections(jule::Ptr<_20cba58cc_ImportInfo>&,jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ptr<_20caa3115_SymbolBuilder>&,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ptr<_20caa3115_SymbolBuilder>&,jule::Ptr<_20cba58cc_ImportInfo>&,_20c47803a_Token&);


	inline jule::Bool _method_check_import_cycles(jule::Ptr<_20cba58cc_ImportInfo>,jule::Ptr<_20c476dc4_UseDecl>&);


	inline void _method_check_package_accessibility(jule::Ptr<_20c476dc4_UseDecl>&,jule::Str&,jule::Str&);


	inline jule::Bool _method_import_package(jule::Ptr<_20cba58cc_ImportInfo>&,jule::Ptr<_20c476dc4_UseDecl>&);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_import_use_decl(jule::Ptr<_20c476dc4_UseDecl>&);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_20c476dc4_Node&);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _20caa3115_SymbolBuilder &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _20caa3115_SymbolBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _20cb5423d_Impl {
	jule::Ptr<_20c476dc4_TypeDecl> _field_base = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_TypeDecl> _field_dest = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Slice<jule::Ptr<_20c819332_Fn>> _field_methods = jule::Slice<jule::Ptr<_20c819332_Fn>>();
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _field_statics = jule::Slice<jule::Ptr<_20cdc725d_Var>>();


	_20cb5423d_Impl(jule::Ptr<_20c476dc4_TypeDecl> __param_base, jule::Ptr<_20c476dc4_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_20c819332_Fn>> __param_methods, jule::Slice<jule::Ptr<_20cdc725d_Var>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_20cb5423d_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _20cb5423d_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _20cb5423d_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Scope {
	jule::Ptr<_20cb4d853_Scope> _field_parent = jule::Ptr<_20cb4d853_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_20cb4d853_Scope(jule::Ptr<_20cb4d853_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_20cb4d853_Scope(void) = default;

	inline bool operator==(const _20cb4d853_Scope &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _20cb4d853_Scope &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();


	_20cb4d853_If(jule::Any __param_expr, jule::Ptr<_20cb4d853_Scope> __param_scope): _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_20cb4d853_If(void) = default;

	inline bool operator==(const _20cb4d853_If &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20cb4d853_If &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Else {
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();


	_20cb4d853_Else(jule::Ptr<_20cb4d853_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_20cb4d853_Else(void) = default;

	inline bool operator==(const _20cb4d853_Else &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20cb4d853_Else &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Conditional {
	jule::Slice<jule::Ptr<_20cb4d853_If>> _field_elifs = jule::Slice<jule::Ptr<_20cb4d853_If>>();
	jule::Ptr<_20cb4d853_Else> _field_default = jule::Ptr<_20cb4d853_Else>();


	_20cb4d853_Conditional(jule::Slice<jule::Ptr<_20cb4d853_If>> __param_elifs, jule::Ptr<_20cb4d853_Else> __param_default): _field_elifs(__param_elifs), _field_default(__param_default) {}

	

	_20cb4d853_Conditional(void) = default;

	inline bool operator==(const _20cb4d853_Conditional &_Src) const {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20cb4d853_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_InfIter {
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();


	_20cb4d853_InfIter(jule::Ptr<_20cb4d853_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_20cb4d853_InfIter(void) = default;

	inline bool operator==(const _20cb4d853_InfIter &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20cb4d853_InfIter &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();


	_20cb4d853_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ptr<_20cb4d853_Scope> __param_scope): _field_expr(__param_expr), _field_next(__param_next), _field_scope(__param_scope) {}

	

	_20cb4d853_WhileIter(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _20cb4d853_WhileIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20cb4d853_WhileIter &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_RangeIter {
	jule::Ptr<_20d162d45_Data> _field_expr = jule::Ptr<_20d162d45_Data>();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();
	jule::Ptr<_20cdc725d_Var> _field_key_a = jule::Ptr<_20cdc725d_Var>();
	jule::Ptr<_20cdc725d_Var> _field_key_b = jule::Ptr<_20cdc725d_Var>();


	_20cb4d853_RangeIter(jule::Ptr<_20d162d45_Data> __param_expr, jule::Ptr<_20cb4d853_Scope> __param_scope, jule::Ptr<_20cdc725d_Var> __param_key_a, jule::Ptr<_20cdc725d_Var> __param_key_b): _field_expr(__param_expr), _field_scope(__param_scope), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_20cb4d853_RangeIter(void) = default;

	inline bool operator==(const _20cb4d853_RangeIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _20cb4d853_RangeIter &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_ContSt {
	jule::Uintptr _field_it = jule::Uintptr();


	_20cb4d853_ContSt(jule::Uintptr __param_it): _field_it(__param_it) {}

	

	_20cb4d853_ContSt(void) = default;

	inline bool operator==(const _20cb4d853_ContSt &_Src) const {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _20cb4d853_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_BreakSt {
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_mtch = jule::Uintptr();


	_20cb4d853_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch): _field_it(__param_it), _field_mtch(__param_mtch) {}

	

	_20cb4d853_BreakSt(void) = default;

	inline bool operator==(const _20cb4d853_BreakSt &_Src) const {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _20cb4d853_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Label {
	jule::Str _field_ident = jule::Str();


	_20cb4d853_Label(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_20cb4d853_Label(void) = default;

	inline bool operator==(const _20cb4d853_Label &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20cb4d853_Label &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_GotoSt {
	jule::Str _field_ident = jule::Str();


	_20cb4d853_GotoSt(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_20cb4d853_GotoSt(void) = default;

	inline bool operator==(const _20cb4d853_GotoSt &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20cb4d853_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_20cb4d853_Postfix(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_20cb4d853_Postfix(void) = default;

	inline bool operator==(const _20cb4d853_Postfix &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _20cb4d853_Postfix &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();


	_20cb4d853_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r): _field_l(__param_l), _field_r(__param_r) {}

	

	_20cb4d853_MultiAssign(void) = default;

	inline bool operator==(const _20cb4d853_MultiAssign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _20cb4d853_MultiAssign &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Match {
	jule::Ptr<_20d162d45_Data> _field_expr = jule::Ptr<_20d162d45_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_20cb4d853_Case>> _field_cases = jule::Slice<jule::Ptr<_20cb4d853_Case>>();
	jule::Ptr<_20cb4d853_Case> _field_default = jule::Ptr<_20cb4d853_Case>();


	_20cb4d853_Match(jule::Ptr<_20d162d45_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ptr<_20cb4d853_Case>> __param_cases, jule::Ptr<_20cb4d853_Case> __param_default): _field_expr(__param_expr), _field_type_match(__param_type_match), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_20cb4d853_Match(void) = default;

	inline jule::Bool _method_is_generic_type_match(void);


	inline bool operator==(const _20cb4d853_Match &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20cb4d853_Match &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Case {
	jule::Ptr<_20cb4d853_Match> _field_owner = jule::Ptr<_20cb4d853_Match>();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();
	jule::Slice<jule::Ptr<_20d162d45_Data>> _field_exprs = jule::Slice<jule::Ptr<_20d162d45_Data>>();
	jule::Ptr<_20cb4d853_Case> _field_next = jule::Ptr<_20cb4d853_Case>();


	_20cb4d853_Case(jule::Ptr<_20cb4d853_Match> __param_owner, jule::Ptr<_20cb4d853_Scope> __param_scope, jule::Slice<jule::Ptr<_20d162d45_Data>> __param_exprs, jule::Ptr<_20cb4d853_Case> __param_next): _field_owner(__param_owner), _field_scope(__param_scope), _field_exprs(__param_exprs), _field_next(__param_next) {}

	

	_20cb4d853_Case(void) = default;

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _20cb4d853_Case &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _20cb4d853_Case &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_FallSt {
	jule::Uintptr _field_dest_case = jule::Uintptr();


	_20cb4d853_FallSt(jule::Uintptr __param_dest_case): _field_dest_case(__param_dest_case) {}

	

	_20cb4d853_FallSt(void) = default;

	inline bool operator==(const _20cb4d853_FallSt &_Src) const {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _20cb4d853_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_RetSt {
	jule::Ptr<_20c819332_FnIns> _field_func = jule::Ptr<_20c819332_FnIns>();
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _field_vars = jule::Slice<jule::Ptr<_20cdc725d_Var>>();
	jule::Any _field_expr = jule::Any();


	_20cb4d853_RetSt(jule::Ptr<_20c819332_FnIns> __param_func, jule::Slice<jule::Ptr<_20cdc725d_Var>> __param_vars, jule::Any __param_expr): _field_func(__param_func), _field_vars(__param_vars), _field_expr(__param_expr) {}

	

	_20cb4d853_RetSt(void) = default;

	inline bool operator==(const _20cb4d853_RetSt &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20cb4d853_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_ScopeGoto {
	jule::Ptr<_20c476dc4_GotoSt> _field_gt = jule::Ptr<_20c476dc4_GotoSt>();
	jule::Ptr<_20cb4d853_ScopeChecker> _field_scope = jule::Ptr<_20cb4d853_ScopeChecker>();
	jule::Int _field_pos = jule::Int();


	_20cb4d853_ScopeGoto(jule::Ptr<_20c476dc4_GotoSt> __param_gt, jule::Ptr<_20cb4d853_ScopeChecker> __param_scope, jule::Int __param_pos): _field_gt(__param_gt), _field_scope(__param_scope), _field_pos(__param_pos) {}

	

	_20cb4d853_ScopeGoto(void) = default;

	inline bool operator==(const _20cb4d853_ScopeGoto &_Src) const {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _20cb4d853_ScopeGoto &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_ScopeChecker: public _20d6751d1_Lookup {
	jule::Ptr<_20cb4d853_ScopeChecker> self;

	jule::Ptr<_20cba60d6_Sema> _field_s = jule::Ptr<_20cba60d6_Sema>();
	jule::Ptr<_20c819332_FnIns> _field_owner = jule::Ptr<_20c819332_FnIns>();
	jule::Ptr<_20cb4d853_ScopeChecker> _field_parent = jule::Ptr<_20cb4d853_ScopeChecker>();
	jule::Int _field_child_index = jule::Int();
	jule::Ptr<_20d0c86e5_SymbolTable> _field_table = jule::Ptr<_20d0c86e5_SymbolTable>();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();
	jule::Ptr<_20c476dc4_ScopeTree> _field_tree = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_result = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_cse = jule::Uintptr();
	jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>>();
	jule::Int _field_i = jule::Int();


	_20cb4d853_ScopeChecker(jule::Ptr<_20cba60d6_Sema> __param_s, jule::Ptr<_20c819332_FnIns> __param_owner, jule::Ptr<_20cb4d853_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ptr<_20d0c86e5_SymbolTable> __param_table, jule::Ptr<_20cb4d853_Scope> __param_scope, jule::Ptr<_20c476dc4_ScopeTree> __param_tree, jule::Ptr<_20d4a6c9e_TypeKind> __param_result, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>> __param_labels, jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>> __param_gotos, jule::Int __param_i): _field_s(__param_s), _field_owner(__param_owner), _field_parent(__param_parent), _field_child_index(__param_child_index), _field_table(__param_table), _field_scope(__param_scope), _field_tree(__param_tree), _field_result(__param_result), _field_it(__param_it), _field_cse(__param_cse), _field_labels(__param_labels), _field_gotos(__param_gotos), _field_i(__param_i) {
		this->self = jule::Ptr<_20cb4d853_ScopeChecker>::make(this, nullptr);

	}

	~_20cb4d853_ScopeChecker(void) { this->self.ref = nullptr; }

	_20cb4d853_ScopeChecker(void) { this->self = jule::Ptr<_20cb4d853_ScopeChecker>::make(this, nullptr); }

	inline jule::Ptr<_20cba58cc_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>);


	inline jule::Ptr<_20cdc725d_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_20d4a6c9e_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_20c496047_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_20c819332_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_20cb471a9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_20cb4c70e_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Bool _method_is_deferred(void);


	inline jule::Ptr<_20cb4d853_ScopeChecker> _method_get_root(void);


	inline jule::Ptr<_20cb4d853_Label> _method_find_label(jule::Str);


	inline jule::Ptr<_20cb4d853_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ptr<_20cb4d853_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ptr<_20c476dc4_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ptr<_20c476dc4_TypeAliasDecl>);


	inline jule::Ptr<_20cb4d853_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ptr<_20c476dc4_ScopeTree>&,jule::Ptr<_20cb4d853_Scope>&,jule::Ptr<_20cb4d853_ScopeChecker>&);


	inline jule::Ptr<_20cb4d853_Scope> _method_check_child_sc(jule::Ptr<_20c476dc4_ScopeTree>&,jule::Ptr<_20cb4d853_ScopeChecker>&);


	inline jule::Ptr<_20cb4d853_Scope> _method_check_child(jule::Ptr<_20c476dc4_ScopeTree>&);


	inline void _method_check_anon_scope(jule::Ptr<_20c476dc4_ScopeTree>);


	inline void _method_process_error_call(jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>&,_20c47803a_Token);


	inline void _method_check_expr(jule::Ptr<_20c476dc4_Expr>);


	inline void _method_check_co_expr(jule::Ptr<_20c476dc4_CoExpr>);


	inline jule::Ptr<_20cb4d853_If> _method_check_if(jule::Ptr<_20c476dc4_If>);


	inline jule::Ptr<_20cb4d853_Else> _method_check_else(jule::Ptr<_20c476dc4_Else>);


	inline void _method_check_conditional(jule::Ptr<_20c476dc4_Conditional>);


	inline jule::Ptr<_20cb4d853_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ptr<_20c476dc4_ScopeTree>,jule::Ptr<_20cb4d853_ScopeChecker>);


	inline jule::Ptr<_20cb4d853_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ptr<_20c476dc4_ScopeTree>&);


	inline void _method_check_inf_iter(jule::Ptr<_20c476dc4_Iter>&);


	inline void _method_check_while_iter(jule::Ptr<_20c476dc4_Iter>&);


	inline void _method_check_range_iter(jule::Ptr<_20c476dc4_Iter>&);


	inline void _method_check_iter(jule::Ptr<_20c476dc4_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ptr<_20cb4d853_ContSt> _method_check_cont_valid_scope(jule::Ptr<_20c476dc4_ContSt>);


	inline void _method_check_cont(jule::Ptr<_20c476dc4_ContSt>);


	inline void _method_check_label(jule::Ptr<_20c476dc4_LabelSt>);


	inline void _method_push_goto(jule::Ptr<_20c476dc4_GotoSt>);


	inline void _method_check_postfix(jule::Ptr<_20c476dc4_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ptr<_20c476dc4_AssignSt>&);


	inline void _method___process_end_part_of_multi_assign(jule::Ptr<_20cb4d853_MultiAssign>,jule::Ptr<_20c476dc4_AssignSt>,jule::Ptr<_20c476dc4_AssignLeft>,jule::Ptr<_20d162d45_Data>,jule::Ptr<_20d162d45_Data>);


	inline void _method_check_ret_multi_assign(jule::Ptr<_20c476dc4_AssignSt>&);


	inline void _method_check_multi_assign(jule::Ptr<_20c476dc4_AssignSt>&);


	inline void _method_check_assign_st(jule::Ptr<_20c476dc4_AssignSt>);


	inline jule::Ptr<_20cb4d853_Scope> _method_check_case_scope(jule::Ptr<_20cb4d853_Case>&,jule::Ptr<_20c476dc4_ScopeTree>&);


	inline jule::Ptr<_20cb4d853_Case> _method_check_case(jule::Ptr<_20cb4d853_Match>,jule::Int,jule::Ptr<_20c476dc4_Case>,jule::Ptr<_20d162d45_Data>);


	inline void _method_check_cases(jule::Ptr<_20c476dc4_MatchCase>&,jule::Ptr<_20cb4d853_Match>,jule::Ptr<_20d162d45_Data>);


	inline jule::Ptr<_20cb4d853_Case> _method_check_default(jule::Ptr<_20cb4d853_Match>,jule::Ptr<_20c476dc4_Else>);


	inline void _method_check_comptime_panic(jule::Ptr<_20cb4d853_Scope>&,_20c47803a_Token);


	inline void _method_push_type_match(jule::Ptr<_20cb4d853_Match>,jule::Ptr<_20c476dc4_MatchCase>&);


	inline void _method_check_type_match(jule::Ptr<_20c476dc4_MatchCase>&);


	inline void _method_check_common_match(jule::Ptr<_20c476dc4_MatchCase>&);


	inline void _method_check_match(jule::Ptr<_20c476dc4_MatchCase>);


	inline void _method_check_fall(jule::Ptr<_20c476dc4_FallSt>);


	inline jule::Ptr<_20cb4d853_BreakSt> _method_check_break_with_label(jule::Ptr<_20c476dc4_BreakSt>);


	inline jule::Ptr<_20cb4d853_BreakSt> _method_check_plain_break(jule::Ptr<_20c476dc4_BreakSt>);


	inline void _method_check_break(jule::Ptr<_20c476dc4_BreakSt>);


	inline void _method_check_ret(jule::Ptr<_20c476dc4_RetSt>);


	inline void _method_check_use_expr(jule::Ptr<_20c476dc4_UseExpr>);


	inline void _method_check_node(jule::Any&);


	inline void _method_check_result(void);


	inline void _method_check_tree(void);


	inline void _method_check_goto(jule::Ptr<_20cb4d853_ScopeGoto>&,jule::Ptr<_20cb4d853_ScopeLabel>&);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ptr<_20c476dc4_ScopeTree>&,jule::Ptr<_20cb4d853_Scope>&);


	inline jule::Ptr<_20cb4d853_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _20cb4d853_ScopeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_result == _Src._field_result &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _20cb4d853_ScopeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_StructArgExprModel {
	jule::Ptr<_20c496047_FieldIns> _field_field = jule::Ptr<_20c496047_FieldIns>();
	jule::Any _field_expr = jule::Any();


	_20ccedeed_StructArgExprModel(jule::Ptr<_20c496047_FieldIns> __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_20ccedeed_StructArgExprModel(void) = default;

	inline bool operator==(const _20ccedeed_StructArgExprModel &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_StructArgExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_AllocStructLitExprModel {
	jule::Ptr<_20ccedeed_StructLitExprModel> _field_lit = jule::Ptr<_20ccedeed_StructLitExprModel>();


	_20ccedeed_AllocStructLitExprModel(jule::Ptr<_20ccedeed_StructLitExprModel> __param_lit): _field_lit(__param_lit) {}

	

	_20ccedeed_AllocStructLitExprModel(void) = default;

	inline bool operator==(const _20ccedeed_AllocStructLitExprModel &_Src) const {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _20ccedeed_AllocStructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_SliceExprModel {
	jule::Ptr<_20d4a6c9e_TypeKind> _field_elem_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_20ccedeed_SliceExprModel(jule::Ptr<_20d4a6c9e_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems): _field_elem_kind(__param_elem_kind), _field_elems(__param_elems) {}

	

	_20ccedeed_SliceExprModel(void) = default;

	inline bool operator==(const _20ccedeed_SliceExprModel &_Src) const {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _20ccedeed_SliceExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_AnonFnExprModel {
	jule::Ptr<_20c819332_FnIns> _field_func = jule::Ptr<_20c819332_FnIns>();
	jule::Bool _field_global = jule::Bool();


	_20ccedeed_AnonFnExprModel(jule::Ptr<_20c819332_FnIns> __param_func, jule::Bool __param_global): _field_func(__param_func), _field_global(__param_global) {}

	

	_20ccedeed_AnonFnExprModel(void) = default;

	inline bool operator==(const _20ccedeed_AnonFnExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _20ccedeed_AnonFnExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();


	_20ccedeed_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_20ccedeed_KeyValPairExprModel(void) = default;

	inline bool operator==(const _20ccedeed_KeyValPairExprModel &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _20ccedeed_KeyValPairExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_MapExprModel {
	jule::Ptr<_20d4a6c9e_TypeKind> _field_key_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_val_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Slice<jule::Ptr<_20ccedeed_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_20ccedeed_KeyValPairExprModel>>();


	_20ccedeed_MapExprModel(jule::Ptr<_20d4a6c9e_TypeKind> __param_key_kind, jule::Ptr<_20d4a6c9e_TypeKind> __param_val_kind, jule::Slice<jule::Ptr<_20ccedeed_KeyValPairExprModel>> __param_entries): _field_key_kind(__param_key_kind), _field_val_kind(__param_val_kind), _field_entries(__param_entries) {}

	

	_20ccedeed_MapExprModel(void) = default;

	inline bool operator==(const _20ccedeed_MapExprModel &_Src) const {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _20ccedeed_MapExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_StructSubIdentExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_expr_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20c819332_FnIns> _field_method = jule::Ptr<_20c819332_FnIns>();
	jule::Ptr<_20c496047_FieldIns> _field_field = jule::Ptr<_20c496047_FieldIns>();


	_20ccedeed_StructSubIdentExprModel(jule::Any __param_expr, jule::Ptr<_20d4a6c9e_TypeKind> __param_expr_kind, jule::Ptr<_20c819332_FnIns> __param_method, jule::Ptr<_20c496047_FieldIns> __param_field): _field_expr(__param_expr), _field_expr_kind(__param_expr_kind), _field_method(__param_method), _field_field(__param_field) {}

	

	_20ccedeed_StructSubIdentExprModel(void) = default;

	inline bool operator==(const _20ccedeed_StructSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _20ccedeed_StructSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_StructStaticIdentExprModel {
	jule::Ptr<_20c496047_StructIns> _field_structure = jule::Ptr<_20c496047_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_20c819332_FnIns> _field_method = jule::Ptr<_20c819332_FnIns>();


	_20ccedeed_StructStaticIdentExprModel(jule::Ptr<_20c496047_StructIns> __param_structure, jule::Any __param_expr, jule::Ptr<_20c819332_FnIns> __param_method): _field_structure(__param_structure), _field_expr(__param_expr), _field_method(__param_method) {}

	

	_20ccedeed_StructStaticIdentExprModel(void) = default;

	inline bool operator==(const _20ccedeed_StructStaticIdentExprModel &_Src) const {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _20ccedeed_StructStaticIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_ArrayExprModel {
	jule::Ptr<_20d4a6c9e_Arr> _field_kind = jule::Ptr<_20d4a6c9e_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_20ccedeed_ArrayExprModel(jule::Ptr<_20d4a6c9e_Arr> __param_kind, jule::Slice<jule::Any> __param_elems): _field_kind(__param_kind), _field_elems(__param_elems) {}

	

	_20ccedeed_ArrayExprModel(void) = default;

	inline bool operator==(const _20ccedeed_ArrayExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _20ccedeed_ArrayExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();


	_20ccedeed_CommonIdentExprModel(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_20ccedeed_CommonIdentExprModel(void) = default;

	inline bool operator==(const _20ccedeed_CommonIdentExprModel &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20ccedeed_CommonIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_CommonSubIdentExprModel {
	jule::Ptr<_20d4a6c9e_TypeKind> _field_expr_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_20ccedeed_CommonSubIdentExprModel(jule::Ptr<_20d4a6c9e_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident): _field_expr_kind(__param_expr_kind), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_20ccedeed_CommonSubIdentExprModel(void) = default;

	inline bool operator==(const _20ccedeed_CommonSubIdentExprModel &_Src) const {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20ccedeed_CommonSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_TupleExprModel {
	jule::Slice<jule::Ptr<_20d162d45_Data>> _field_datas = jule::Slice<jule::Ptr<_20d162d45_Data>>();


	_20ccedeed_TupleExprModel(jule::Slice<jule::Ptr<_20d162d45_Data>> __param_datas): _field_datas(__param_datas) {}

	

	_20ccedeed_TupleExprModel(void) = default;

	inline bool operator==(const _20ccedeed_TupleExprModel &_Src) const {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _20ccedeed_TupleExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_20ccedeed_BuiltinOutCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_20ccedeed_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinOutCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _20ccedeed_BuiltinOutCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_20ccedeed_BuiltinOutlnCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_20ccedeed_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinOutlnCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _20ccedeed_BuiltinOutlnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();


	_20ccedeed_BuiltinCloneCallExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_20ccedeed_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinCloneCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_BuiltinCloneCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinNewCallExprModel {
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Any _field_init = jule::Any();


	_20ccedeed_BuiltinNewCallExprModel(jule::Ptr<_20d4a6c9e_TypeKind> __param_kind, jule::Any __param_init): _field_kind(__param_kind), _field_init(__param_init) {}

	

	_20ccedeed_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinNewCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _20ccedeed_BuiltinNewCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinMakeCallExprModel {
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();


	_20ccedeed_BuiltinMakeCallExprModel(jule::Ptr<_20d4a6c9e_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap): _field_kind(__param_kind), _field_len(__param_len), _field_cap(__param_cap) {}

	

	_20ccedeed_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinMakeCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _20ccedeed_BuiltinMakeCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();


	_20ccedeed_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements): _field_dest(__param_dest), _field_elements(__param_elements) {}

	

	_20ccedeed_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinAppendCallExprModel &_Src) const {
		return 
			this->_field_dest == _Src._field_dest &&
			this->_field_elements == _Src._field_elements;
	}

	inline bool operator!=(const _20ccedeed_BuiltinAppendCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinErrorCallExprModel {
	jule::Ptr<_20c819332_FnIns> _field_func = jule::Ptr<_20c819332_FnIns>();
	jule::Any _field_err = jule::Any();


	_20ccedeed_BuiltinErrorCallExprModel(jule::Ptr<_20c819332_FnIns> __param_func, jule::Any __param_err): _field_func(__param_func), _field_err(__param_err) {}

	

	_20ccedeed_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinErrorCallExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _20ccedeed_BuiltinErrorCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_SizeofExprModel {
	jule::Any _field_expr = jule::Any();


	_20ccedeed_SizeofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_20ccedeed_SizeofExprModel(void) = default;

	inline bool operator==(const _20ccedeed_SizeofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_SizeofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_AlignofExprModel {
	jule::Any _field_expr = jule::Any();


	_20ccedeed_AlignofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_20ccedeed_AlignofExprModel(void) = default;

	inline bool operator==(const _20ccedeed_AlignofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_AlignofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_RuneExprModel {
	jule::I32 _field_code = jule::I32();


	_20ccedeed_RuneExprModel(jule::I32 __param_code): _field_code(__param_code) {}

	

	_20ccedeed_RuneExprModel(void) = default;

	inline bool operator==(const _20ccedeed_RuneExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _20ccedeed_RuneExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();


	_20ccedeed_IntegratedToStrExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_20ccedeed_IntegratedToStrExprModel(void) = default;

	inline bool operator==(const _20ccedeed_IntegratedToStrExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_IntegratedToStrExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_TernaryExprModel {
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_20ccedeed_TernaryExprModel(jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_20ccedeed_TernaryExprModel(void) = default;

	inline bool operator==(const _20ccedeed_TernaryExprModel &_Src) const {
		return 
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _20ccedeed_TernaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();


	_20ccedeed_BackendEmitExprModel(jule::Str __param_code): _field_code(__param_code) {}

	

	_20ccedeed_BackendEmitExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BackendEmitExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _20ccedeed_BackendEmitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_FreeExprModel {
	jule::Any _field_expr = jule::Any();


	_20ccedeed_FreeExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_20ccedeed_FreeExprModel(void) = default;

	inline bool operator==(const _20ccedeed_FreeExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_FreeExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccebda8_DirectiveChecker {
	jule::Ptr<_20cba60d6_Sema> _field_s = jule::Ptr<_20cba60d6_Sema>();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_d = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Any _field_o = jule::Any();


	_20ccebda8_DirectiveChecker(jule::Ptr<_20cba60d6_Sema> __param_s, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_d, jule::Any __param_o): _field_s(__param_s), _field_d(__param_d), _field_o(__param_o) {}

	

	_20ccebda8_DirectiveChecker(void) = default;

	inline void _method_check_cdef(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check_typedef(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check_derive(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check_namespace(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check_deprecated(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check_test(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check_directive(jule::Ptr<_20c476dc4_Directive>&);


	inline void _method_check(void);


	inline bool operator==(const _20ccebda8_DirectiveChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_d == _Src._field_d &&
			this->_field_o == _Src._field_o;
	}

	inline bool operator!=(const _20ccebda8_DirectiveChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20cba58cc_Package: public _20d6751d1_Lookup {
	jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>();


	_20cba58cc_Package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>> __param_files): _field_files(__param_files) {}

	

	_20cba58cc_Package(void) = default;

	inline jule::Ptr<_20cba58cc_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>);


	inline jule::Ptr<_20cdc725d_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_20d4a6c9e_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_20c496047_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_20c819332_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_20cb471a9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_20cb4c70e_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _20cba58cc_Package &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _20cba58cc_Package &_Src) const { return !this->operator==(_Src); }
};


struct _20cba60d6_Sema: public _20d6751d1_Lookup {
	jule::Ptr<_20cba60d6_Sema> self;

	jule::Slice<_20a25b99c_Log> _field_errors = jule::Slice<_20a25b99c_Log>();
	jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>();
	jule::Ptr<_20d0c86e5_SymbolTable> _field_file = jule::Ptr<_20d0c86e5_SymbolTable>();
	jule::Int _field_flags = 0LL;


	_20cba60d6_Sema(jule::Slice<_20a25b99c_Log> __param_errors, jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>> __param_files, jule::Ptr<_20d0c86e5_SymbolTable> __param_file, jule::Int __param_flags): _field_errors(__param_errors), _field_files(__param_files), _field_file(__param_file), _field_flags(__param_flags) {
		this->self = jule::Ptr<_20cba60d6_Sema>::make(this, nullptr);

	}

	~_20cba60d6_Sema(void) { this->self.ref = nullptr; }

	_20cba60d6_Sema(void) { this->self = jule::Ptr<_20cba60d6_Sema>::make(this, nullptr); }

	inline jule::Ptr<_20cba58cc_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>);


	inline jule::Ptr<_20cdc725d_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_20d4a6c9e_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_20c496047_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_20c819332_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_20cb471a9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_20cb4c70e_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_flag(jule::Int);


	inline void _method_set_current_file(jule::Ptr<_20d0c86e5_SymbolTable>);


	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_20c47803a_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline void _method_check_directives(jule::Slice<jule::Ptr<_20c476dc4_Directive>>&,jule::Any);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_20c47803a_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ptr<_20cba58cc_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ptr<_20cba58cc_ImportInfo>&);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ptr<_20cba58cc_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ptr<_20cba58cc_ImportInfo>&);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ptr<_20d4a6c9e_TypeSymbol>&,jule::Trait<_20d6751d1_Lookup>,jule::Ptr<_20d4a6c9e_Referencer>);


	inline jule::Bool _method_check_type(jule::Ptr<_20d4a6c9e_TypeSymbol>&,jule::Trait<_20d6751d1_Lookup>);


	inline jule::Ptr<_20d4a6c9e_TypeKind> _method_build_type_with_generics(jule::Ptr<_20c476dc4_TypeDecl>&,jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>);


	inline jule::Ptr<_20d4a6c9e_TypeKind> _method_build_type(jule::Ptr<_20c476dc4_TypeDecl>&);


	inline jule::Ptr<_20d4a6c9e_TypeKind> _method_select_type(jule::Ptr<_20c476dc4_TypeDecl>&);


	inline jule::Ptr<_20d162d45_Eval> _method_evalpd(jule::Trait<_20d6751d1_Lookup>,jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20cdc725d_Var>);


	inline jule::Ptr<_20d162d45_Eval> _method_evalp(jule::Trait<_20d6751d1_Lookup>,jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Ptr<_20d162d45_Eval> _method_eval(jule::Trait<_20d6751d1_Lookup>);


	inline void _method_check_assign_type(jule::Bool,jule::Ptr<_20d4a6c9e_TypeKind>&,jule::Ptr<_20d162d45_Data>&,_20c47803a_Token);


	inline jule::Bool _method_check_type_compatibility(jule::Ptr<_20d4a6c9e_TypeKind>&,jule::Ptr<_20d4a6c9e_TypeKind>&,_20c47803a_Token&);


	inline jule::Ptr<_20d4a6c9e_TypeKind> _method_build_non_generic_type_kind(jule::Ptr<_20c476dc4_TypeDecl>&,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>&);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ptr<_20c819332_FnIns>&);


	inline jule::Ptr<_20c819332_FnIns> _method_get_trait_check_fn_kind(jule::Ptr<_20c819332_Fn>&);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ptr<_20c819332_FnIns>&);


	inline void _method_check_ref_validity_for_init_expr(jule::Bool,jule::Ptr<_20d162d45_Data>&,_20c47803a_Token&);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ptr<_20d4a6c9e_TypeKind>&,jule::Ptr<_20d162d45_Data>&,_20c47803a_Token&);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ptr<_20d4a6c9e_TypeAlias>&,jule::Trait<_20d6751d1_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ptr<_20d4a6c9e_TypeAlias>&,jule::Trait<_20d6751d1_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ptr<_20d4a6c9e_TypeAlias>&);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ptr<_20cb4c70e_Enum>);


	inline void _method_check_enum_items_str(jule::Ptr<_20cb4c70e_Enum>&);


	inline void _method_check_enum_items_int(jule::Ptr<_20cb4c70e_Enum>&);


	inline void _method_check_enum_decl(jule::Ptr<_20cb4c70e_Enum>&);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>&);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ptr<_20c819332_Fn>&);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ptr<_20c819332_Fn>&);


	inline jule::Bool _method_check_fn_decl_types(jule::Ptr<_20c819332_Fn>&);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ptr<_20c819332_Fn>&);


	inline void _method_check_trait_decl_method(jule::Ptr<_20c819332_Fn>&);


	inline void _method_check_trait_decl_methods(jule::Ptr<_20cb471a9_Trait>&);


	inline void _method_check_trait_decl(jule::Ptr<_20cb471a9_Trait>&);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ptr<_20cb471a9_Trait>&,jule::Ptr<_20cb5423d_Impl>&);


	inline jule::Bool _method_impl_to_struct(jule::Ptr<_20c496047_Struct>&,jule::Ptr<_20cb5423d_Impl>&);


	inline void _method_impl_trait(jule::Ptr<_20cb5423d_Impl>&);


	inline void _method_impl_struct(jule::Ptr<_20cb5423d_Impl>&);


	inline void _method_impl_impl(jule::Ptr<_20cb5423d_Impl>&);


	inline void _method_check_var_decl(jule::Ptr<_20cdc725d_Var>&,jule::Trait<_20d6751d1_Lookup>);


	inline void _method_check_global_var_decl(jule::Ptr<_20cdc725d_Var>&);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ptr<_20c496047_Struct>&,jule::Ptr<_20cb471a9_Trait>&);


	inline jule::Bool _method_check_struct_impls(jule::Ptr<_20c496047_Struct>&);


	inline jule::Bool _method_check_struct_fields(jule::Ptr<_20c496047_Struct>&);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ptr<_20c496047_Struct>&);


	inline void _method_check_struct_decl(jule::Ptr<_20c496047_Struct>&);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ptr<_20c819332_Fn>&);


	inline jule::Bool _method_check_fn_decls(void);


	inline void _method_push_cycle_error(jule::Ptr<_20c496047_Struct>&,jule::Ptr<_20c496047_Struct>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_20c496047_Struct>&,jule::Ptr<_20c496047_Struct>&,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ptr<_20c496047_Struct>&,jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ptr<_20c496047_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ptr<_20c496047_Struct>&);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ptr<_20d162d45_Data>&,_20c47803a_Token&);


	inline void _method_check_var(jule::Ptr<_20cdc725d_Var>&);


	inline void _method_check_type_var(jule::Ptr<_20cdc725d_Var>&,jule::Trait<_20d6751d1_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ptr<_20c496047_StructIns>&,jule::Ptr<_20c819332_Fn>&);


	inline void _method_check_field_defaults(jule::Ptr<_20c496047_StructIns>&);


	inline void _method_check_type_struct(jule::Ptr<_20c496047_Struct>&);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ptr<_20c819332_FnIns>&);


	inline void _method_check_fn_ins_sc(jule::Ptr<_20c819332_FnIns>&,jule::Ptr<_20cb4d853_ScopeChecker>&);


	inline void _method_check_fn_ins(jule::Ptr<_20c819332_FnIns>&);


	inline void _method_check_type_fn(jule::Ptr<_20c819332_Fn>&);


	inline void _method_check_test_fn(jule::Ptr<_20c819332_FnIns>&);


	inline void _method_precheck_type_fn(jule::Ptr<_20c819332_Fn>&);


	inline void _method_precheck_fn_types(void);


	inline void _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&);


	inline bool operator==(const _20cba60d6_Sema &_Src) const {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file &&
			this->_field_flags == _Src._field_flags;
	}

	inline bool operator!=(const _20cba60d6_Sema &_Src) const { return !this->operator==(_Src); }
};


struct _20cdc725d_IterRelation {
	jule::Ptr<_20cdc725d_Var> _field_range = jule::Ptr<_20cdc725d_Var>();


	_20cdc725d_IterRelation(jule::Ptr<_20cdc725d_Var> __param_range): _field_range(__param_range) {}

	

	_20cdc725d_IterRelation(void) = default;

	inline bool operator==(const _20cdc725d_IterRelation &_Src) const {
		return 
			this->_field_range == _Src._field_range;
	}

	inline bool operator!=(const _20cdc725d_IterRelation &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_RangeChecker {
	jule::Ptr<_20cb4d853_ScopeChecker> _field_sc = jule::Ptr<_20cb4d853_ScopeChecker>();
	jule::Ptr<_20c476dc4_RangeKind> _field_rang = jule::Ptr<_20c476dc4_RangeKind>();
	jule::Ptr<_20cb4d853_RangeIter> _field_kind = jule::Ptr<_20cb4d853_RangeIter>();
	jule::Ptr<_20d162d45_Data> _field_d = jule::Ptr<_20d162d45_Data>();


	_20d058ca2_RangeChecker(jule::Ptr<_20cb4d853_ScopeChecker> __param_sc, jule::Ptr<_20c476dc4_RangeKind> __param_rang, jule::Ptr<_20cb4d853_RangeIter> __param_kind, jule::Ptr<_20d162d45_Data> __param_d): _field_sc(__param_sc), _field_rang(__param_rang), _field_kind(__param_kind), _field_d(__param_d) {}

	

	_20d058ca2_RangeChecker(void) = default;

	inline jule::Ptr<_20cdc725d_Var> _method_build_var(jule::Ptr<_20c476dc4_VarDecl>&);


	inline void _method_set_size_key(void);


	inline void _method_check_range_expr_validity(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20cdc725d_Var>&,jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _20d058ca2_RangeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _20d058ca2_RangeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20d0c86e5_SymbolTable: public _20d6751d1_Lookup {
	jule::Ptr<_20c4792c2_File> _field_file = jule::Ptr<_20c4792c2_File>();
	jule::Slice<_20caa3115_Pass> _field_passes = jule::Slice<_20caa3115_Pass>();
	jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>>();
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _field_vars = jule::Slice<jule::Ptr<_20cdc725d_Var>>();
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>();
	jule::Slice<jule::Ptr<_20c496047_Struct>> _field_structs = jule::Slice<jule::Ptr<_20c496047_Struct>>();
	jule::Slice<jule::Ptr<_20c819332_Fn>> _field_funcs = jule::Slice<jule::Ptr<_20c819332_Fn>>();
	jule::Slice<jule::Ptr<_20cb471a9_Trait>> _field_traits = jule::Slice<jule::Ptr<_20cb471a9_Trait>>();
	jule::Slice<jule::Ptr<_20cb4c70e_Enum>> _field_enums = jule::Slice<jule::Ptr<_20cb4c70e_Enum>>();
	jule::Slice<jule::Ptr<_20cb5423d_Impl>> _field_impls = jule::Slice<jule::Ptr<_20cb5423d_Impl>>();


	_20d0c86e5_SymbolTable(jule::Ptr<_20c4792c2_File> __param_file, jule::Slice<_20caa3115_Pass> __param_passes, jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> __param_imports, jule::Slice<jule::Ptr<_20cdc725d_Var>> __param_vars, jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ptr<_20c496047_Struct>> __param_structs, jule::Slice<jule::Ptr<_20c819332_Fn>> __param_funcs, jule::Slice<jule::Ptr<_20cb471a9_Trait>> __param_traits, jule::Slice<jule::Ptr<_20cb4c70e_Enum>> __param_enums, jule::Slice<jule::Ptr<_20cb5423d_Impl>> __param_impls): _field_file(__param_file), _field_passes(__param_passes), _field_imports(__param_imports), _field_vars(__param_vars), _field_type_aliases(__param_type_aliases), _field_structs(__param_structs), _field_funcs(__param_funcs), _field_traits(__param_traits), _field_enums(__param_enums), _field_impls(__param_impls) {}

	

	_20d0c86e5_SymbolTable(void) = default;

	inline jule::Ptr<_20cba58cc_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>);


	inline jule::Ptr<_20cdc725d_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_20d4a6c9e_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_20c496047_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_20c819332_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_20cb471a9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_20cb4c70e_Enum> _method_find_enum(jule::Str);


	inline jule::Ptr<_20cdc725d_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ptr<_20d4a6c9e_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _20d0c86e5_SymbolTable &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _20d0c86e5_SymbolTable &_Src) const { return !this->operator==(_Src); }
};


struct _20d162d45_Data {
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_cast_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_20d78b3e6_Const> _field_constant = jule::Ptr<_20d78b3e6_Const>();


	_20d162d45_Data(jule::Ptr<_20d4a6c9e_TypeKind> __param_kind, jule::Ptr<_20d4a6c9e_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ptr<_20d78b3e6_Const> __param_constant): _field_kind(__param_kind), _field_cast_kind(__param_cast_kind), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_lvalue(__param_lvalue), _field_is_rune(__param_is_rune), _field_model(__param_model), _field_decl(__param_decl), _field_constant(__param_constant) {}

	

	_20d162d45_Data(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline jule::Bool _method_good_operand(jule::Ptr<_20d162d45_Data>&);


	inline bool operator==(const _20d162d45_Data &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _20d162d45_Data &_Src) const { return !this->operator==(_Src); }
};


struct _20d162d45_Value {
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();
	jule::Ptr<_20d162d45_Data> _field_data = jule::Ptr<_20d162d45_Data>();


	_20d162d45_Value(jule::Ptr<_20c476dc4_Expr> __param_expr, jule::Ptr<_20d162d45_Data> __param_data): _field_expr(__param_expr), _field_data(__param_data) {}

	

	_20d162d45_Value(void) = default;

	inline bool operator==(const _20d162d45_Value &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _20d162d45_Value &_Src) const { return !this->operator==(_Src); }
};


struct _20d162d45_Eval {
	jule::Ptr<_20d162d45_Eval> self;

	jule::Ptr<_20cba60d6_Sema> _field_s = jule::Ptr<_20cba60d6_Sema>();
	jule::Trait<_20d6751d1_Lookup> _field_lookup = jule::Trait<_20d6751d1_Lookup>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_prefix = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_20cdc725d_Var> _field_owner = jule::Ptr<_20cdc725d_Var>();
	jule::Ptr<_20c496047_FieldIns> _field_field = jule::Ptr<_20c496047_FieldIns>();


	_20d162d45_Eval(jule::Ptr<_20cba60d6_Sema> __param_s, jule::Trait<_20d6751d1_Lookup> __param_lookup, jule::Ptr<_20d4a6c9e_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Bool __param_immutable, jule::Bool __param_ignored, jule::Bool __param_dis_builtin, jule::Ptr<_20cdc725d_Var> __param_owner, jule::Ptr<_20c496047_FieldIns> __param_field): _field_s(__param_s), _field_lookup(__param_lookup), _field_prefix(__param_prefix), _field_unsafety(__param_unsafety), _field_immutable(__param_immutable), _field_ignored(__param_ignored), _field_dis_builtin(__param_dis_builtin), _field_owner(__param_owner), _field_field(__param_field) {
		this->self = jule::Ptr<_20d162d45_Eval>::make(this, nullptr);

	}

	~_20d162d45_Eval(void) { this->self.ref = nullptr; }

	_20d162d45_Eval(void) { this->self = jule::Ptr<_20d162d45_Eval>::make(this, nullptr); }

	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline void _method_apply_numeric_prefix(jule::Ptr<_20d162d45_Data>&);


	inline jule::Ptr<_20d162d45_Data> _method_lit_nil(void);


	inline jule::Ptr<_20d162d45_Data> _method_lit_str(jule::Ptr<_20c476dc4_LitExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_lit_bool(jule::Ptr<_20c476dc4_LitExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_lit_rune(jule::Ptr<_20c476dc4_LitExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_lit_float(jule::Ptr<_20c476dc4_LitExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_lit_int(jule::Ptr<_20c476dc4_LitExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_lit_num(jule::Ptr<_20c476dc4_LitExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_lit(jule::Ptr<_20c476dc4_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ptr<_20caa3115_ReferenceStack>&);


	inline void _method_push_reference_to_fn(jule::Ptr<_20c819332_FnIns>&);


	inline void _method_push_reference_to_var(jule::Ptr<_20cdc725d_Var>&);


	inline void _method_push_reference_to_struct(jule::Ptr<_20c496047_StructIns>&);


	inline jule::Ptr<_20d162d45_Data> _method___eval_enum(jule::Ptr<_20cb4c70e_Enum>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_enum(jule::Ptr<_20cb4c70e_Enum>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method___eval_struct(jule::Ptr<_20c496047_StructIns>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_struct(jule::Ptr<_20c496047_StructIns>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_fn_ins(jule::Ptr<_20c819332_FnIns>);


	inline void _method_check_deprecated(jule::Slice<jule::Ptr<_20c476dc4_Directive>>&,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_fn(jule::Ptr<_20c819332_Fn>,_20c47803a_Token);


	inline void _method_push_illegal_cycle_error(jule::Ptr<_20cdc725d_Var>&,jule::Ptr<_20cdc725d_Var>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_20cdc725d_Var>&,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_20cdc725d_Var>&,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_var(jule::Ptr<_20cdc725d_Var>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_type_alias(jule::Ptr<_20d4a6c9e_TypeAlias>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_def(jule::Any,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_ident(jule::Ptr<_20c476dc4_IdentExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_unary(jule::Ptr<_20c476dc4_UnaryExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_variadic(jule::Ptr<_20c476dc4_VariadicExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_unsafe(jule::Ptr<_20c476dc4_UnsafeExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_arr(jule::Ptr<_20c476dc4_SliceExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_exp_slc(jule::Ptr<_20c476dc4_SliceExpr>,jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_slice_expr(jule::Ptr<_20c476dc4_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ptr<_20d162d45_Data>&,_20c47803a_Token);


	inline void _method_indexing_ptr(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline void _method_indexing_arr(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline void _method_indexing_slc(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline void _method_indexing_map(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline void _method_indexing_str(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline void _method_to_indexing(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_ident_decl_from_indexing(jule::Ptr<_20c476dc4_IndexingExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_indexing(jule::Ptr<_20c476dc4_IndexingExpr>);


	inline std::tuple<jule::Ptr<_20d162d45_Data>,jule::Ptr<_20d162d45_Data>> _method_eval_slicing_exprs(jule::Ptr<_20c476dc4_SlicingExpr>&);


	inline void _method_slicing_arr(jule::Ptr<_20d162d45_Data>&);


	inline void _method_slicing_slc(jule::Ptr<_20d162d45_Data>&);


	inline void _method_slicing_str(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&);


	inline void _method_check_slicing(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20c476dc4_SlicingExpr>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_slicing(jule::Ptr<_20c476dc4_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_struct(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_ref(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_slc(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_str(jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_int(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_num(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_prim(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline void _method_cast_constant(jule::Ptr<_20d4a6c9e_TypeKind>&,jule::Ptr<_20d162d45_Data>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_cast_by_type_n_data(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_cast(jule::Ptr<_20c476dc4_CastExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_ns_selection(jule::Ptr<_20c476dc4_NsSelectionExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_struct_lit_explicit(jule::Ptr<_20c496047_StructIns>,jule::Slice<jule::Any>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_struct_lit(jule::Ptr<_20c476dc4_StructLit>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_type(jule::Ptr<_20c476dc4_TypeDecl>);


	inline void _method_call_type_fn(jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ptr<_20c819332_FnIns>,jule::Ptr<_20c476dc4_FnCallExpr>);


	inline void _method_call_builtin_fn(jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);


	inline void _method_check_fn_of_concurrent_call(jule::Ptr<_20c819332_FnIns>&,_20c47803a_Token);


	inline void _method_process_exceptional_handler(jule::Ptr<_20c819332_FnIns>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);


	inline void _method_call_fn(jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_fn_call(jule::Ptr<_20c476dc4_FnCallExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_enum_static(jule::Ptr<_20cb4c70e_Enum>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_struct_static(jule::Ptr<_20c496047_StructIns>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_trait_sub_ident(jule::Ptr<_20d162d45_Data>,jule::Ptr<_20cb471a9_Trait>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_struct_sub_ident(jule::Ptr<_20d162d45_Data>,jule::Ptr<_20c496047_StructIns>,jule::Ptr<_20c476dc4_SubIdentExpr>,jule::Bool);


	inline jule::Ptr<_20d162d45_Data> _method_eval_slice_sub_ident(jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_array_sub_ident(jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_map_sub_ident(jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_str_sub_ident(jule::Ptr<_20d162d45_Data>,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_int_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_uint_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_i8_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_i16_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_i32_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_i64_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_u8_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_u16_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_u32_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_u64_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_f32_type_tatic(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_f64_type_static(_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_prim_static(jule::Str,_20c47803a_Token);


	inline jule::Ptr<_20d162d45_Data> _method_eval_type_static(jule::Ptr<_20d162d45_Data>,jule::Ptr<_20c476dc4_SubIdentExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_obj_sub_ident(jule::Ptr<_20d162d45_Data>,jule::Ptr<_20c476dc4_SubIdentExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_sub_ident(jule::Ptr<_20c476dc4_SubIdentExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_tuple(jule::Ptr<_20c476dc4_TupleExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_map(jule::Ptr<_20d4a6c9e_Map>,jule::Ptr<_20c476dc4_BraceLit>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_brace_lit(jule::Ptr<_20c476dc4_BraceLit>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_anon_fn(jule::Ptr<_20c476dc4_FnDecl>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_binop(jule::Ptr<_20c476dc4_BinopExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_ternary(jule::Ptr<_20c476dc4_TernaryExpr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ptr<_20d162d45_Data> _method_eval(jule::Ptr<_20c476dc4_Expr>);


	inline jule::Ptr<_20d162d45_Data> _method_eval_expr(jule::Ptr<_20c476dc4_Expr>);


	inline bool operator==(const _20d162d45_Eval &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_immutable == _Src._field_immutable &&
			this->_field_ignored == _Src._field_ignored &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_owner == _Src._field_owner &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _20d162d45_Eval &_Src) const { return !this->operator==(_Src); }
};


struct _20d162d45_UnaryEval {
	jule::Ptr<_20d162d45_Eval> _field_e = jule::Ptr<_20d162d45_Eval>();
	jule::Ptr<_20d162d45_Data> _field_d = jule::Ptr<_20d162d45_Data>();
	jule::Ptr<_20c476dc4_UnaryExpr> _field_u = jule::Ptr<_20c476dc4_UnaryExpr>();


	_20d162d45_UnaryEval(jule::Ptr<_20d162d45_Eval> __param_e, jule::Ptr<_20d162d45_Data> __param_d, jule::Ptr<_20c476dc4_UnaryExpr> __param_u): _field_e(__param_e), _field_d(__param_d), _field_u(__param_u) {}

	

	_20d162d45_UnaryEval(void) = default;

	static inline _20d162d45_UnaryEval _static_method_new(jule::Ptr<_20d162d45_Eval>);


	inline void _method_eval_minus(void);


	inline void _method_eval_plus(void);


	inline void _method_eval_caret(void);


	inline void _method_eval_excl(void);


	inline void _method_eval_star(void);


	inline void _method_eval_amper(void);


	inline void _method_eval_type_decl(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval(jule::Ptr<_20c476dc4_UnaryExpr>);


	inline bool operator==(const _20d162d45_UnaryEval &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_d == _Src._field_d &&
			this->_field_u == _Src._field_u;
	}

	inline bool operator!=(const _20d162d45_UnaryEval &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_TypeKind: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_TypeKind> self;

	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_20d4a6c9e_Kind> _field_kind = jule::Trait<_20d4a6c9e_Kind>();


	_20d4a6c9e_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_generic, jule::Bool __param_variadic, jule::Trait<_20d4a6c9e_Kind> __param_kind): _field_cpp_ident(__param_cpp_ident), _field_generic(__param_generic), _field_variadic(__param_variadic), _field_kind(__param_kind) {
		this->self = jule::Ptr<_20d4a6c9e_TypeKind>::make(this, nullptr);

	}

	~_20d4a6c9e_TypeKind(void) { this->self.ref = nullptr; }

	_20d4a6c9e_TypeKind(void) { this->self = jule::Ptr<_20d4a6c9e_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Bool _method_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_void(void);


	inline jule::Bool _method_mutable(void);


	inline jule::Bool _method_nil_compatible(void);


	inline jule::Bool _method_performs_rc(void);


	inline jule::Bool _method_supports_cloning(void);


	inline jule::Bool _method_variadicable(void);


	inline jule::Ptr<_20d4a6c9e_Prim> _method_prim(void);


	inline jule::Ptr<_20d4a6c9e_Sptr> _method_sptr(void);


	inline jule::Ptr<_20d4a6c9e_Ptr> _method_ptr(void);


	inline jule::Ptr<_20cb4c70e_Enum> _method_enm(void);


	inline jule::Ptr<_20d4a6c9e_Arr> _method_arr(void);


	inline jule::Ptr<_20d4a6c9e_Slc> _method_slc(void);


	inline jule::Ptr<_20c819332_FnIns> _method_fnc(void);


	inline jule::Ptr<_20c496047_StructIns> _method_strct(void);


	inline jule::Ptr<_20cb471a9_Trait> _method_trt(void);


	inline jule::Ptr<_20d4a6c9e_Map> _method_map(void);


	inline jule::Ptr<_20d4a6c9e_Tuple> _method_tup(void);


	inline bool operator==(const _20d4a6c9e_TypeKind &_Src) const {
		return 
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_generic == _Src._field_generic &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20d4a6c9e_TypeKind &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_TypeSymbol {
	jule::Ptr<_20c476dc4_TypeDecl> _field_decl = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl> __param_decl, jule::Ptr<_20d4a6c9e_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_20d4a6c9e_TypeSymbol(void) = default;

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _20d4a6c9e_TypeSymbol &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20d4a6c9e_TypeSymbol &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Prim: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Prim> self;

	jule::Str _field_kind = jule::Str();


	_20d4a6c9e_Prim(jule::Str __param_kind): _field_kind(__param_kind) {
		this->self = jule::Ptr<_20d4a6c9e_Prim>::make(this, nullptr);

	}

	~_20d4a6c9e_Prim(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Prim(void) { this->self = jule::Ptr<_20d4a6c9e_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _20d4a6c9e_Prim &_Src) const {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20d4a6c9e_Prim &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Sptr: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Sptr> self;

	jule::Ptr<_20d4a6c9e_TypeKind> _field_elem = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20d4a6c9e_Sptr(jule::Ptr<_20d4a6c9e_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_20d4a6c9e_Sptr>::make(this, nullptr);

	}

	~_20d4a6c9e_Sptr(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Sptr(void) { this->self = jule::Ptr<_20d4a6c9e_Sptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline bool operator==(const _20d4a6c9e_Sptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20d4a6c9e_Sptr &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Slc: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Slc> self;

	jule::Ptr<_20d4a6c9e_TypeKind> _field_elem = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20d4a6c9e_Slc(jule::Ptr<_20d4a6c9e_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_20d4a6c9e_Slc>::make(this, nullptr);

	}

	~_20d4a6c9e_Slc(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Slc(void) { this->self = jule::Ptr<_20d4a6c9e_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline bool operator==(const _20d4a6c9e_Slc &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20d4a6c9e_Slc &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Tuple: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Tuple> self;

	jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _field_types = jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>();


	_20d4a6c9e_Tuple(jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> __param_types): _field_types(__param_types) {
		this->self = jule::Ptr<_20d4a6c9e_Tuple>::make(this, nullptr);

	}

	~_20d4a6c9e_Tuple(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Tuple(void) { this->self = jule::Ptr<_20d4a6c9e_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline bool operator==(const _20d4a6c9e_Tuple &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _20d4a6c9e_Tuple &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Map: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Map> self;

	jule::Ptr<_20d4a6c9e_TypeKind> _field_key = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_val = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20d4a6c9e_Map(jule::Ptr<_20d4a6c9e_TypeKind> __param_key, jule::Ptr<_20d4a6c9e_TypeKind> __param_val): _field_key(__param_key), _field_val(__param_val) {
		this->self = jule::Ptr<_20d4a6c9e_Map>::make(this, nullptr);

	}

	~_20d4a6c9e_Map(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Map(void) { this->self = jule::Ptr<_20d4a6c9e_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline bool operator==(const _20d4a6c9e_Map &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _20d4a6c9e_Map &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Arr: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Arr> self;

	jule::Bool _field_auto = jule::Bool();
	jule::Int _field_n = jule::Int();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_elem = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20d4a6c9e_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ptr<_20d4a6c9e_TypeKind> __param_elem): _field_auto(__param_auto), _field_n(__param_n), _field_elem(__param_elem) {
		this->self = jule::Ptr<_20d4a6c9e_Arr>::make(this, nullptr);

	}

	~_20d4a6c9e_Arr(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Arr(void) { this->self = jule::Ptr<_20d4a6c9e_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline bool operator==(const _20d4a6c9e_Arr &_Src) const {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20d4a6c9e_Arr &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Ptr: public _20d4a6c9e_Kind {
	jule::Ptr<_20d4a6c9e_Ptr> self;

	jule::Ptr<_20d4a6c9e_TypeKind> _field_elem = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20d4a6c9e_Ptr(jule::Ptr<_20d4a6c9e_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_20d4a6c9e_Ptr>::make(this, nullptr);

	}

	~_20d4a6c9e_Ptr(void) { this->self.ref = nullptr; }

	_20d4a6c9e_Ptr(void) { this->self = jule::Ptr<_20d4a6c9e_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _20d4a6c9e_Ptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _20d4a6c9e_Ptr &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;


	_20d4a6c9e_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs): _field_ident(__param_ident), _field_owner(__param_owner), _field_refs(__param_refs) {}

	

	_20d4a6c9e_Referencer(void) = default;

	inline bool operator==(const _20d4a6c9e_Referencer &_Src) const {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _20d4a6c9e_Referencer &_Src) const { return !this->operator==(_Src); }
};


struct _20c41511a_DirectiveEval {
	jule::Slice<_20a25b99c_Log> _field_logs = jule::Slice<_20a25b99c_Log>();
	jule::Ptr<_20c476dc4_Directive> _field_d = jule::Ptr<_20c476dc4_Directive>();


	_20c41511a_DirectiveEval(jule::Slice<_20a25b99c_Log> __param_logs, jule::Ptr<_20c476dc4_Directive> __param_d): _field_logs(__param_logs), _field_d(__param_d) {}

	

	_20c41511a_DirectiveEval(void) = default;

	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Slice<_20c47803a_Token>> _method_split_operans(jule::Str,jule::Slice<_20c47803a_Token>&);


	inline jule::Bool _method_eval_directive_ident(jule::Str);


	inline jule::Bool _method_eval_directive_part(jule::Slice<_20c47803a_Token>);


	inline jule::Bool _method_eval(void);


	inline bool operator==(const _20c41511a_DirectiveEval &_Src) const {
		return 
			this->_field_logs == _Src._field_logs &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _20c41511a_DirectiveEval &_Src) const { return !this->operator==(_Src); }
};


struct _20c44b959_PlainImporter: public _20cba58cc_Importer {
	jule::Slice<jule::Str> _field_mods = jule::Slice<jule::Str>();
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> _field_all_packages = jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>>();


	_20c44b959_PlainImporter(jule::Slice<jule::Str> __param_mods, jule::Str __param_mod, jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> __param_all_packages): _field_mods(__param_mods), _field_mod(__param_mod), _field_all_packages(__param_all_packages) {}

	

	_20c44b959_PlainImporter(void) = default;

	static inline jule::Ptr<_20c44b959_PlainImporter> _static_method_new(void);


	inline void _method_set_mod_path(jule::Str);


	inline jule::Str _method_get_mod_path(void);


	inline jule::Str _method_mod_by_id(jule::Int);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ptr<_20c476126_Ast>>,jule::Slice<_20a25b99c_Log>> _method_import_package(jule::Str,jule::Bool);


	inline void _method_imported(jule::Ptr<_20cba58cc_ImportInfo>);


	inline bool operator==(const _20c44b959_PlainImporter &_Src) const {
		return 
			this->_field_mods == _Src._field_mods &&
			this->_field_mod == _Src._field_mod &&
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _20c44b959_PlainImporter &_Src) const { return !this->operator==(_Src); }
};


struct _20c3e743d_OrderedDefines {
	jule::Slice<jule::Ptr<_20c496047_Struct>> _field_structs = jule::Slice<jule::Ptr<_20c496047_Struct>>();


	_20c3e743d_OrderedDefines(jule::Slice<jule::Ptr<_20c496047_Struct>> __param_structs): _field_structs(__param_structs) {}

	

	_20c3e743d_OrderedDefines(void) = default;

	inline bool operator==(const _20c3e743d_OrderedDefines &_Src) const {
		return 
			this->_field_structs == _Src._field_structs;
	}

	inline bool operator!=(const _20c3e743d_OrderedDefines &_Src) const { return !this->operator==(_Src); }
};


struct _20c3e743d_DefineOrderer {
	

	_20c3e743d_DefineOrderer(void) = default;

	static inline jule::Bool _static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_20c496047_Struct>>&,jule::Ptr<_20c496047_Struct>);


	static inline void _static_method_order_common_0(jule::Slice<jule::Ptr<_20c496047_Struct>>&);


	static inline void _static_method_order_structures(jule::Slice<jule::Ptr<_20c496047_Struct>>&);


	inline bool operator==(const _20c3e743d_DefineOrderer &_Src) const { return true; }

	inline bool operator!=(const _20c3e743d_DefineOrderer &_Src) const { return !this->operator==(_Src); }
};


struct _20b661752_ScopeDeadCode {
	jule::Ptr<_20b661752_ScopeDeadCode> self;

	jule::Ptr<_20b661752_ScopeDeadCode> _field_parent = jule::Ptr<_20b661752_ScopeDeadCode>();
	jule::Ptr<_20cb4d853_Scope> _field_s = jule::Ptr<_20cb4d853_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::Int _field_i = jule::Int();


	_20b661752_ScopeDeadCode(jule::Ptr<_20b661752_ScopeDeadCode> __param_parent, jule::Ptr<_20cb4d853_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::Int __param_i): _field_parent(__param_parent), _field_s(__param_s), _field_stmts(__param_stmts), _field_i(__param_i) {
		this->self = jule::Ptr<_20b661752_ScopeDeadCode>::make(this, nullptr);

	}

	~_20b661752_ScopeDeadCode(void) { this->self.ref = nullptr; }

	_20b661752_ScopeDeadCode(void) { this->self = jule::Ptr<_20b661752_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ptr<_20cb4d853_Scope>&);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _20b661752_ScopeDeadCode &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _20b661752_ScopeDeadCode &_Src) const { return !this->operator==(_Src); }
};


struct _20dc14918_AbsTime {
	jule::Uint _field_day = jule::Uint();
	jule::Uint _field_week_day = jule::Uint();
	jule::Uint _field_year_day = jule::Uint();
	jule::Uint _field_month = jule::Uint();
	jule::Uint _field_year = jule::Uint();
	jule::Uint _field_second = jule::Uint();
	jule::Uint _field_minute = jule::Uint();
	jule::Uint _field_hour = jule::Uint();


	_20dc14918_AbsTime(jule::Uint __param_day, jule::Uint __param_week_day, jule::Uint __param_year_day, jule::Uint __param_month, jule::Uint __param_year, jule::Uint __param_second, jule::Uint __param_minute, jule::Uint __param_hour): _field_day(__param_day), _field_week_day(__param_week_day), _field_year_day(__param_year_day), _field_month(__param_month), _field_year(__param_year), _field_second(__param_second), _field_minute(__param_minute), _field_hour(__param_hour) {}

	

	_20dc14918_AbsTime(void) = default;

	inline jule::U64 _method_unix(void);


	inline bool operator==(const _20dc14918_AbsTime &_Src) const {
		return 
			this->_field_day == _Src._field_day &&
			this->_field_week_day == _Src._field_week_day &&
			this->_field_year_day == _Src._field_year_day &&
			this->_field_month == _Src._field_month &&
			this->_field_year == _Src._field_year &&
			this->_field_second == _Src._field_second &&
			this->_field_minute == _Src._field_minute &&
			this->_field_hour == _Src._field_hour;
	}

	inline bool operator!=(const _20dc14918_AbsTime &_Src) const { return !this->operator==(_Src); }
};


struct _20dc14918_Time {
	jule::U64 _field_sec = jule::U64();


	_20dc14918_Time(jule::U64 __param_sec): _field_sec(__param_sec) {}

	

	_20dc14918_Time(void) = default;

	static inline _20dc14918_Time _static_method_unix(jule::U64);


	static inline _20dc14918_Time _static_method_now(void);


	inline jule::U64 _method_unix(void);


	inline jule::Uint _method_day(void);


	inline jule::Uint _method_month(void);


	inline jule::Uint _method_year(void);


	inline jule::Uint _method_second(void);


	inline jule::Uint _method_minute(void);


	inline jule::Uint _method_hour(void);


	inline _20dc14918_AbsTime _method_abs(void);


	inline bool operator==(const _20dc14918_Time &_Src) const {
		return 
			this->_field_sec == _Src._field_sec;
	}

	inline bool operator!=(const _20dc14918_Time &_Src) const { return !this->operator==(_Src); }
};


struct _20dc14918_Duration {
	

	_20dc14918_Duration(void) = default;

	static inline jule::I64 _static_method_nanoseconds(jule::I64);


	static inline jule::I64 _static_method_microseconds(jule::I64);


	static inline jule::I64 _static_method_milliseconds(jule::I64);


	static inline jule::I64 _static_method_seconds(jule::I64);


	static inline jule::I64 _static_method_minutes(jule::I64);


	static inline jule::I64 _static_method_hours(jule::I64);


	inline bool operator==(const _20dc14918_Duration &_Src) const { return true; }

	inline bool operator!=(const _20dc14918_Duration &_Src) const { return !this->operator==(_Src); }
};


struct _20baa12ac_ScopeOptimizer {
	jule::Int _field_i = jule::Int();
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();


	_20baa12ac_ScopeOptimizer(jule::Int __param_i, jule::Ptr<_20cb4d853_Scope> __param_scope): _field_i(__param_i), _field_scope(__param_scope) {}

	

	_20baa12ac_ScopeOptimizer(void) = default;

	static inline jule::Ptr<_20baa12ac_ScopeOptimizer> _static_method_new(jule::Ptr<_20cb4d853_Scope>);


	inline void _method_set_current_stmt(jule::Any);


	inline jule::Any _method_current_stmt(void);


	inline void _method_optimize_data(jule::Ptr<_20d162d45_Data>);


	inline void _method_optimize_conditional(jule::Ptr<_20cb4d853_Conditional>);


	inline void _method_optimize_match(jule::Ptr<_20cb4d853_Match>);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_child(jule::Ptr<_20cb4d853_Scope>);


	inline void _method_optimize(void);


	inline bool operator==(const _20baa12ac_ScopeOptimizer &_Src) const {
		return 
			this->_field_i == _Src._field_i &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20baa12ac_ScopeOptimizer &_Src) const { return !this->operator==(_Src); }
};


struct _20d5c851e_Optimizer {
	jule::Ptr<_20b6b28b3_IR> _field_ir = jule::Ptr<_20b6b28b3_IR>();


	_20d5c851e_Optimizer(jule::Ptr<_20b6b28b3_IR> __param_ir): _field_ir(__param_ir) {}

	

	_20d5c851e_Optimizer(void) = default;

	static inline jule::Ptr<_20d5c851e_Optimizer> _static_method_new(jule::Ptr<_20b6b28b3_IR>&);


	inline void _method_optimize_function(jule::Ptr<_20c819332_Fn>&);


	inline void _method_optimize_struct(jule::Ptr<_20c496047_Struct>&);


	inline void _method_optimize_functions(jule::Ptr<_20cba58cc_Package>&);


	inline void _method_optimize_structs(jule::Ptr<_20cba58cc_Package>&);


	inline void _method_optimize_package(jule::Ptr<_20cba58cc_Package>&);


	inline void _method_optimize(void);


	inline bool operator==(const _20d5c851e_Optimizer &_Src) const {
		return 
			this->_field_ir == _Src._field_ir;
	}

	inline bool operator!=(const _20d5c851e_Optimizer &_Src) const { return !this->operator==(_Src); }
};


struct _20baa6c1e_Flag_0: public _20baa6c1e_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Int _field__default = jule::Int();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Int> _field__data = jule::Ptr<jule::Int>();


	_20baa6c1e_Flag_0(jule::Str __param__name, jule::I32 __param__short, jule::Int __param__default, jule::Str __param__what, jule::Ptr<jule::Int> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_20baa6c1e_Flag_0(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _20baa6c1e_Flag_0 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _20baa6c1e_Flag_0 &_Src) const { return !this->operator==(_Src); }
};

struct _20baa6c1e_Flag_1: public _20baa6c1e_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Uint _field__default = jule::Uint();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Uint> _field__data = jule::Ptr<jule::Uint>();


	_20baa6c1e_Flag_1(jule::Str __param__name, jule::I32 __param__short, jule::Uint __param__default, jule::Str __param__what, jule::Ptr<jule::Uint> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_20baa6c1e_Flag_1(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _20baa6c1e_Flag_1 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _20baa6c1e_Flag_1 &_Src) const { return !this->operator==(_Src); }
};

struct _20baa6c1e_Flag_2: public _20baa6c1e_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();


	_20baa6c1e_Flag_2(jule::Str __param__name, jule::I32 __param__short, jule::F64 __param__default, jule::Str __param__what, jule::Ptr<jule::F64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_20baa6c1e_Flag_2(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _20baa6c1e_Flag_2 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _20baa6c1e_Flag_2 &_Src) const { return !this->operator==(_Src); }
};

struct _20baa6c1e_Flag_3: public _20baa6c1e_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();


	_20baa6c1e_Flag_3(jule::Str __param__name, jule::I32 __param__short, jule::Bool __param__default, jule::Str __param__what, jule::Ptr<jule::Bool> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_20baa6c1e_Flag_3(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _20baa6c1e_Flag_3 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _20baa6c1e_Flag_3 &_Src) const { return !this->operator==(_Src); }
};

struct _20baa6c1e_Flag_4: public _20baa6c1e_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();


	_20baa6c1e_Flag_4(jule::Str __param__name, jule::I32 __param__short, jule::Str __param__default, jule::Str __param__what, jule::Ptr<jule::Str> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_20baa6c1e_Flag_4(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _20baa6c1e_Flag_4 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _20baa6c1e_Flag_4 &_Src) const { return !this->operator==(_Src); }
};


struct _20baa6c1e_FlagSet {
	jule::Slice<jule::Trait<_20baa6c1e_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_20baa6c1e_CommonFlag>>();


	_20baa6c1e_FlagSet(jule::Slice<jule::Trait<_20baa6c1e_CommonFlag>> __param__flags): _field__flags(__param__flags) {}

	

	_20baa6c1e_FlagSet(void) = default;

	static inline jule::Ptr<_20baa6c1e_FlagSet> _static_method_new(void);


	inline jule::Trait<_20baa6c1e_CommonFlag> _method_find_flag(jule::Str);


	inline jule::Trait<_20baa6c1e_CommonFlag> _method_find_flag_short(jule::I32);


	inline jule::Slice<jule::Trait<_20baa6c1e_CommonFlag>> _method_flags(void);


	inline jule::Exceptional<jule::Slice<jule::Str>> _method_parse(jule::Slice<jule::Str>);


	inline void _method_reset(void);


	inline jule::Ptr<_20baa6c1e_Flag_4> _method_add_flag_common_0(jule::Str,jule::I32,jule::Str);
	inline jule::Ptr<_20baa6c1e_Flag_3> _method_add_flag_common_1(jule::Str,jule::I32,jule::Str);




	inline void _method_add_var_0(jule::Ptr<jule::Str>,jule::Str,jule::I32,jule::Str);
	inline void _method_add_var_1(jule::Ptr<jule::Bool>,jule::Str,jule::I32,jule::Str);


	inline bool operator==(const _20baa6c1e_FlagSet &_Src) const {
		return 
			this->_field__flags == _Src._field__flags;
	}

	inline bool operator!=(const _20baa6c1e_FlagSet &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_ScopeLabel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20cb4d853_Label> _field_label = jule::Ptr<_20cb4d853_Label>();
	jule::Int _field_pos = jule::Int();
	jule::Ptr<_20cb4d853_ScopeChecker> _field_scope = jule::Ptr<_20cb4d853_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();


	_20cb4d853_ScopeLabel(_20c47803a_Token __param_token, jule::Ptr<_20cb4d853_Label> __param_label, jule::Int __param_pos, jule::Ptr<_20cb4d853_ScopeChecker> __param_scope, jule::Bool __param_used): _field_token(__param_token), _field_label(__param_label), _field_pos(__param_pos), _field_scope(__param_scope), _field_used(__param_used) {}

	

	_20cb4d853_ScopeLabel(void) = default;

	inline bool operator==(const _20cb4d853_ScopeLabel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _20cb4d853_ScopeLabel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_RangeKind {
	_20c47803a_Token _field_in_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();
	jule::Ptr<_20c476dc4_VarDecl> _field_key_a = jule::Ptr<_20c476dc4_VarDecl>();
	jule::Ptr<_20c476dc4_VarDecl> _field_key_b = jule::Ptr<_20c476dc4_VarDecl>();


	_20c476dc4_RangeKind(_20c47803a_Token __param_in_token, jule::Ptr<_20c476dc4_Expr> __param_expr, jule::Ptr<_20c476dc4_VarDecl> __param_key_a, jule::Ptr<_20c476dc4_VarDecl> __param_key_b): _field_in_token(__param_in_token), _field_expr(__param_expr), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_20c476dc4_RangeKind(void) = default;

	inline bool operator==(const _20c476dc4_RangeKind &_Src) const {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _20c476dc4_RangeKind &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_BreakSt {
	_20c47803a_Token _field_token = _20c47803a_Token();
	_20c47803a_Token _field_label = _20c47803a_Token();


	_20c476dc4_BreakSt(_20c47803a_Token __param_token, _20c47803a_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_20c476dc4_BreakSt(void) = default;

	inline bool operator==(const _20c476dc4_BreakSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _20c476dc4_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BinopExprModel {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_20c47803a_Token _field_op = _20c47803a_Token();


	_20ccedeed_BinopExprModel(jule::Any __param_left, jule::Any __param_right, _20c47803a_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_20ccedeed_BinopExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BinopExprModel &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _20ccedeed_BinopExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_UnaryExprModel {
	jule::Ptr<_20d162d45_Data> _field_expr = jule::Ptr<_20d162d45_Data>();
	_20c47803a_Token _field_op = _20c47803a_Token();


	_20ccedeed_UnaryExprModel(jule::Ptr<_20d162d45_Data> __param_expr, _20c47803a_Token __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_20ccedeed_UnaryExprModel(void) = default;

	inline bool operator==(const _20ccedeed_UnaryExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _20ccedeed_UnaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_ContSt {
	_20c47803a_Token _field_token = _20c47803a_Token();
	_20c47803a_Token _field_label = _20c47803a_Token();


	_20c476dc4_ContSt(_20c47803a_Token __param_token, _20c47803a_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_20c476dc4_ContSt(void) = default;

	inline bool operator==(const _20c476dc4_ContSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _20c476dc4_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_StructLitExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c496047_StructIns> _field_strct = jule::Ptr<_20c496047_StructIns>();
	jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>>();


	_20ccedeed_StructLitExprModel(_20c47803a_Token __param_token, jule::Ptr<_20c496047_StructIns> __param_strct, jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>> __param_args): _field_token(__param_token), _field_strct(__param_strct), _field_args(__param_args) {}

	

	_20ccedeed_StructLitExprModel(void) = default;

	inline bool operator==(const _20ccedeed_StructLitExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _20ccedeed_StructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_If {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();


	_20c476dc4_If(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_Expr> __param_expr, jule::Ptr<_20c476dc4_ScopeTree> __param_scope): _field_token(__param_token), _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_20c476dc4_If(void) = default;

	inline bool operator==(const _20c476dc4_If &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20c476dc4_If &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_CastingExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_kind = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_expr_kind = jule::Ptr<_20d4a6c9e_TypeKind>();


	_20ccedeed_CastingExprModel(_20c47803a_Token __param_token, jule::Any __param_expr, jule::Ptr<_20d4a6c9e_TypeKind> __param_kind, jule::Ptr<_20d4a6c9e_TypeKind> __param_expr_kind): _field_token(__param_token), _field_expr(__param_expr), _field_kind(__param_kind), _field_expr_kind(__param_expr_kind) {}

	

	_20ccedeed_CastingExprModel(void) = default;

	inline bool operator==(const _20ccedeed_CastingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _20ccedeed_CastingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_FnCallExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c819332_FnIns> _field_func = jule::Ptr<_20c819332_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_20cb4d853_Scope> _field_except = jule::Ptr<_20cb4d853_Scope>();
	jule::Bool _field_assigned = jule::Bool();


	_20ccedeed_FnCallExprModel(_20c47803a_Token __param_token, jule::Ptr<_20c819332_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args, jule::Ptr<_20cb4d853_Scope> __param_except, jule::Bool __param_assigned): _field_token(__param_token), _field_func(__param_func), _field_is_co(__param_is_co), _field_expr(__param_expr), _field_args(__param_args), _field_except(__param_except), _field_assigned(__param_assigned) {}

	

	_20ccedeed_FnCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_FnCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args &&
			this->_field_except == _Src._field_except &&
			this->_field_assigned == _Src._field_assigned;
	}

	inline bool operator!=(const _20ccedeed_FnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Else {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();


	_20c476dc4_Else(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_ScopeTree> __param_scope): _field_token(__param_token), _field_scope(__param_scope) {}

	

	_20c476dc4_Else(void) = default;

	inline bool operator==(const _20c476dc4_Else &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20c476dc4_Else &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_IndexingExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20d162d45_Data> _field_expr = jule::Ptr<_20d162d45_Data>();
	jule::Ptr<_20d162d45_Data> _field_index = jule::Ptr<_20d162d45_Data>();


	_20ccedeed_IndexingExprModel(_20c47803a_Token __param_token, jule::Ptr<_20d162d45_Data> __param_expr, jule::Ptr<_20d162d45_Data> __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_20ccedeed_IndexingExprModel(void) = default;

	inline bool operator==(const _20ccedeed_IndexingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _20ccedeed_IndexingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Directive {
	_20c47803a_Token _field_tag = _20c47803a_Token();
	jule::Slice<_20c47803a_Token> _field_args = jule::Slice<_20c47803a_Token>();


	_20c476dc4_Directive(_20c47803a_Token __param_tag, jule::Slice<_20c47803a_Token> __param_args): _field_tag(__param_tag), _field_args(__param_args) {}

	

	_20c476dc4_Directive(void) = default;

	inline bool operator==(const _20c476dc4_Directive &_Src) const {
		return 
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _20c476dc4_Directive &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_TypeAliasDecl {
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_CommentGroup> _field_doc_comments = jule::Ptr<_20c476dc4_CommentGroup>();


	_20c476dc4_TypeAliasDecl(jule::Ptr<_20c476dc4_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _20c47803a_Token __param_token, jule::Str __param_ident, jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Ptr<_20c476dc4_CommentGroup> __param_doc_comments): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc_comments(__param_doc_comments) {}

	

	_20c476dc4_TypeAliasDecl(void) = default;

	inline bool operator==(const _20c476dc4_TypeAliasDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _20c476dc4_TypeAliasDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Case {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _field_exprs = jule::Slice<jule::Ptr<_20c476dc4_Expr>>();


	_20c476dc4_Case(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_20c476dc4_Expr>> __param_exprs): _field_token(__param_token), _field_scope(__param_scope), _field_exprs(__param_exprs) {}

	

	_20c476dc4_Case(void) = default;

	inline bool operator==(const _20c476dc4_Case &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _20c476dc4_Case &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_SlicingExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_20ccedeed_SlicingExprModel(_20c47803a_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_20ccedeed_SlicingExprModel(void) = default;

	inline bool operator==(const _20ccedeed_SlicingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _20ccedeed_SlicingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_TraitSubIdentExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_20ccedeed_TraitSubIdentExprModel(_20c47803a_Token __param_token, jule::Any __param_expr, jule::Str __param_ident): _field_token(__param_token), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_20ccedeed_TraitSubIdentExprModel(void) = default;

	inline bool operator==(const _20ccedeed_TraitSubIdentExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20ccedeed_TraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_MatchCase {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();
	jule::Slice<jule::Ptr<_20c476dc4_Case>> _field_cases = jule::Slice<jule::Ptr<_20c476dc4_Case>>();
	jule::Ptr<_20c476dc4_Else> _field_default = jule::Ptr<_20c476dc4_Else>();


	_20c476dc4_MatchCase(_20c47803a_Token __param_token, jule::Bool __param_type_match, jule::Ptr<_20c476dc4_Expr> __param_expr, jule::Slice<jule::Ptr<_20c476dc4_Case>> __param_cases, jule::Ptr<_20c476dc4_Else> __param_default): _field_token(__param_token), _field_type_match(__param_type_match), _field_expr(__param_expr), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_20c476dc4_MatchCase(void) = default;

	inline bool operator==(const _20c476dc4_MatchCase &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20c476dc4_MatchCase &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_UseDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<_20c47803a_Token> _field_selected = jule::Slice<_20c47803a_Token>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();


	_20c476dc4_UseDecl(_20c47803a_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_20c47803a_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std): _field_token(__param_token), _field_link_path(__param_link_path), _field_alias(__param_alias), _field_full(__param_full), _field_selected(__param_selected), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std) {}

	

	_20c476dc4_UseDecl(void) = default;

	inline bool operator==(const _20c476dc4_UseDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_alias == _Src._field_alias &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _20c476dc4_UseDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_EnumItemDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_EnumItemDecl(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Ptr<_20c476dc4_Expr> __param_expr): _field_token(__param_token), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_20c476dc4_EnumItemDecl(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _20c476dc4_EnumItemDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_EnumItemDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_EnumDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>>();
	jule::Ptr<_20c476dc4_CommentGroup> _field_doc_comments = jule::Ptr<_20c476dc4_CommentGroup>();


	_20c476dc4_EnumDecl(_20c47803a_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>> __param_items, jule::Ptr<_20c476dc4_CommentGroup> __param_doc_comments): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc_comments(__param_doc_comments) {}

	

	_20c476dc4_EnumDecl(void) = default;

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _20c476dc4_EnumDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _20c476dc4_EnumDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_FieldDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_Expr> _field_default = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_FieldDecl(_20c47803a_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Ptr<_20c476dc4_Expr> __param_default): _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_20c476dc4_FieldDecl(void) = default;

	inline bool operator==(const _20c476dc4_FieldDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20c476dc4_FieldDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_StructDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Ptr<_20c476dc4_CommentGroup> _field_doc_comments = jule::Ptr<_20c476dc4_CommentGroup>();
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>();


	_20c476dc4_StructDecl(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Ptr<_20c476dc4_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_generics(__param_generics) {}

	

	_20c476dc4_StructDecl(void) = default;

	inline bool operator==(const _20c476dc4_StructDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _20c476dc4_StructDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_TraitDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Ptr<_20c476dc4_CommentGroup> _field_doc_comments = jule::Ptr<_20c476dc4_CommentGroup>();
	jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_20c476dc4_FnDecl>>();


	_20c476dc4_TraitDecl(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ptr<_20c476dc4_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> __param_methods): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_doc_comments(__param_doc_comments), _field_methods(__param_methods) {}

	

	_20c476dc4_TraitDecl(void) = default;

	inline bool operator==(const _20c476dc4_TraitDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _20c476dc4_TraitDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Expr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_kind = jule::Any();


	_20c476dc4_Expr(_20c47803a_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_20c476dc4_Expr(void) = default;

	inline bool operator==(const _20c476dc4_Expr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20c476dc4_Expr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_UseExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_UseExpr(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_20c476dc4_UseExpr(void) = default;

	inline bool operator==(const _20c476dc4_UseExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_UseExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_TypeDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_kind = jule::Any();


	_20c476dc4_TypeDecl(_20c47803a_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_20c476dc4_TypeDecl(void) = default;

	inline bool operator==(const _20c476dc4_TypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _20c476dc4_TypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinPanicCallExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();


	_20ccedeed_BuiltinPanicCallExprModel(_20c47803a_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_20ccedeed_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinPanicCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20ccedeed_BuiltinPanicCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20ccedeed_BuiltinAssertCallExprModel {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();


	_20ccedeed_BuiltinAssertCallExprModel(_20c47803a_Token __param_token, jule::Any __param_expr, jule::Str __param_log): _field_token(__param_token), _field_expr(__param_expr), _field_log(__param_log) {}

	

	_20ccedeed_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(const _20ccedeed_BuiltinAssertCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_log == _Src._field_log;
	}

	inline bool operator!=(const _20ccedeed_BuiltinAssertCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_LitExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_value = jule::Str();


	_20c476dc4_LitExpr(_20c47803a_Token __param_token, jule::Str __param_value): _field_token(__param_token), _field_value(__param_value) {}

	

	_20c476dc4_LitExpr(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _20c476dc4_LitExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _20c476dc4_LitExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_UnsafeExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();


	_20c476dc4_UnsafeExpr(_20c47803a_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_20c476dc4_UnsafeExpr(void) = default;

	inline bool operator==(const _20c476dc4_UnsafeExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_UnsafeExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_CoExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_CoExpr(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_20c476dc4_CoExpr(void) = default;

	inline bool operator==(const _20c476dc4_CoExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_CoExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_IdentExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();


	_20c476dc4_IdentExpr(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked) {}

	

	_20c476dc4_IdentExpr(void) = default;

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _20c476dc4_IdentExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _20c476dc4_IdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c4bea32_AssignInfo {
	jule::Slice<_20c47803a_Token> _field_l = jule::Slice<_20c47803a_Token>();
	jule::Slice<_20c47803a_Token> _field_r = jule::Slice<_20c47803a_Token>();
	_20c47803a_Token _field_setter = _20c47803a_Token();
	jule::Bool _field_ok = jule::Bool();


	_20c4bea32_AssignInfo(jule::Slice<_20c47803a_Token> __param_l, jule::Slice<_20c47803a_Token> __param_r, _20c47803a_Token __param_setter, jule::Bool __param_ok): _field_l(__param_l), _field_r(__param_r), _field_setter(__param_setter), _field_ok(__param_ok) {}

	

	_20c4bea32_AssignInfo(void) = default;

	inline bool operator==(const _20c4bea32_AssignInfo &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _20c4bea32_AssignInfo &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_UnaryExpr {
	_20c47803a_Token _field_op = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();


	_20c476dc4_UnaryExpr(_20c47803a_Token __param_op, jule::Any __param_expr): _field_op(__param_op), _field_expr(__param_expr) {}

	

	_20c476dc4_UnaryExpr(void) = default;

	inline bool operator==(const _20c476dc4_UnaryExpr &_Src) const {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_UnaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_VariadicExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();


	_20c476dc4_VariadicExpr(_20c47803a_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_20c476dc4_VariadicExpr(void) = default;

	inline bool operator==(const _20c476dc4_VariadicExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_VariadicExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_IdentTypeDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>();


	_20c476dc4_IdentTypeDecl(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_generics(__param_generics) {}

	

	_20c476dc4_IdentTypeDecl(void) = default;

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _20c476dc4_IdentTypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _20c476dc4_IdentTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c496047_Field {
	jule::Ptr<_20c496047_Field> self;

	jule::Ptr<_20c496047_Struct> _field_owner = jule::Ptr<_20c496047_Struct>();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20d4a6c9e_TypeSymbol> _field_kind = jule::Ptr<_20d4a6c9e_TypeSymbol>();
	jule::Ptr<_20c476dc4_Expr> _field_default = jule::Ptr<_20c476dc4_Expr>();


	_20c496047_Field(jule::Ptr<_20c496047_Struct> __param_owner, _20c47803a_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_20d4a6c9e_TypeSymbol> __param_kind, jule::Ptr<_20c476dc4_Expr> __param_default): _field_owner(__param_owner), _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {
		this->self = jule::Ptr<_20c496047_Field>::make(this, nullptr);

	}

	~_20c496047_Field(void) { this->self.ref = nullptr; }

	_20c496047_Field(void) { this->self = jule::Ptr<_20c496047_Field>::make(this, nullptr); }

	inline jule::Ptr<_20c496047_FieldIns> _method_instance(void);


	inline bool operator==(const _20c496047_Field &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _20c496047_Field &_Src) const { return !this->operator==(_Src); }
};


struct _20c496047_Struct {
	jule::Ptr<_20c496047_Struct> self;

	jule::Ptr<_20cba60d6_Sema> _field_sema = jule::Ptr<_20cba60d6_Sema>();
	jule::Slice<jule::Ptr<_20c496047_Struct>> _field_depends = jule::Slice<jule::Ptr<_20c496047_Struct>>();
	jule::Slice<jule::Ptr<_20c496047_Struct>> _field_uses = jule::Slice<jule::Ptr<_20c496047_Struct>>();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_20c496047_Field>> _field_fields = jule::Slice<jule::Ptr<_20c496047_Field>>();
	jule::Slice<jule::Ptr<_20c819332_Fn>> _field_methods = jule::Slice<jule::Ptr<_20c819332_Fn>>();
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _field_statics = jule::Slice<jule::Ptr<_20cdc725d_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>();
	jule::Slice<jule::Ptr<_20cb471a9_Trait>> _field_implements = jule::Slice<jule::Ptr<_20cb471a9_Trait>>();
	jule::Slice<jule::Ptr<_20c496047_StructIns>> _field_instances = jule::Slice<jule::Ptr<_20c496047_StructIns>>();


	_20c496047_Struct(jule::Ptr<_20cba60d6_Sema> __param_sema, jule::Slice<jule::Ptr<_20c496047_Struct>> __param_depends, jule::Slice<jule::Ptr<_20c496047_Struct>> __param_uses, _20c47803a_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_20c496047_Field>> __param_fields, jule::Slice<jule::Ptr<_20c819332_Fn>> __param_methods, jule::Slice<jule::Ptr<_20cdc725d_Var>> __param_statics, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> __param_generics, jule::Slice<jule::Ptr<_20cb471a9_Trait>> __param_implements, jule::Slice<jule::Ptr<_20c496047_StructIns>> __param_instances): _field_sema(__param_sema), _field_depends(__param_depends), _field_uses(__param_uses), _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_methods(__param_methods), _field_statics(__param_statics), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc(__param_doc), _field_generics(__param_generics), _field_implements(__param_implements), _field_instances(__param_instances) {
		this->self = jule::Ptr<_20c496047_Struct>::make(this, nullptr);

	}

	~_20c496047_Struct(void) { this->self.ref = nullptr; }

	_20c496047_Struct(void) { this->self = jule::Ptr<_20c496047_Struct>::make(this, nullptr); }

	inline jule::Ptr<_20c496047_StructIns> _method_instance(void);


	inline jule::Ptr<_20c496047_StructIns> _method_append_instance(jule::Ptr<_20c496047_StructIns>&);


	inline jule::Ptr<_20c819332_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_20cdc725d_Var> _method_find_static(jule::Str);


	inline jule::Ptr<_20c496047_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ptr<_20cb471a9_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ptr<_20c496047_Struct>);


	inline jule::Bool _method_has_ref_accessible(void);


	inline bool operator==(const _20c496047_Struct &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _20c496047_Struct &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_NsSelectionExpr {
	jule::Slice<_20c47803a_Token> _field_ns = jule::Slice<_20c47803a_Token>();
	_20c47803a_Token _field_ident = _20c47803a_Token();


	_20c476dc4_NsSelectionExpr(jule::Slice<_20c47803a_Token> __param_ns, _20c47803a_Token __param_ident): _field_ns(__param_ns), _field_ident(__param_ident) {}

	

	_20c476dc4_NsSelectionExpr(void) = default;

	inline bool operator==(const _20c476dc4_NsSelectionExpr &_Src) const {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20c476dc4_NsSelectionExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20cba58cc_ImportInfo: public _20d6751d1_Lookup {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<_20c47803a_Token> _field_selected = jule::Slice<_20c47803a_Token>();
	jule::Ptr<_20cba58cc_Package> _field_package = jule::Ptr<_20cba58cc_Package>();
	jule::Int _field_mod_id = jule::Int();


	_20cba58cc_ImportInfo(_20c47803a_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_20c47803a_Token> __param_selected, jule::Ptr<_20cba58cc_Package> __param_package, jule::Int __param_mod_id): _field_token(__param_token), _field_path(__param_path), _field_link_path(__param_link_path), _field_ident(__param_ident), _field_alias(__param_alias), _field_duplicate(__param_duplicate), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std), _field_import_all(__param_import_all), _field_selected(__param_selected), _field_package(__param_package), _field_mod_id(__param_mod_id) {}

	

	_20cba58cc_ImportInfo(void) = default;

	inline jule::Ptr<_20cba58cc_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_20cba58cc_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>);


	inline jule::Ptr<_20cdc725d_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_20d4a6c9e_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_20c496047_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_20c819332_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_20cb471a9_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_20cb4c70e_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline jule::Bool _method_is_accessible_via_selection(void);


	inline bool operator==(const _20cba58cc_ImportInfo &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_alias == _Src._field_alias &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package &&
			this->_field_mod_id == _Src._field_mod_id;
	}

	inline bool operator!=(const _20cba58cc_ImportInfo &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Any _field_expr = jule::Any();
	_20c47803a_Token _field_ident = _20c47803a_Token();


	_20c476dc4_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _20c47803a_Token __param_ident): _field_is_self(__param_is_self), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_20c476dc4_SubIdentExpr(void) = default;

	inline bool operator==(const _20c476dc4_SubIdentExpr &_Src) const {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20c476dc4_SubIdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_BinopExpr {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_20c47803a_Token _field_op = _20c47803a_Token();


	_20c476dc4_BinopExpr(jule::Any __param_left, jule::Any __param_right, _20c47803a_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_20c476dc4_BinopExpr(void) = default;

	inline bool operator==(const _20c476dc4_BinopExpr &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _20c476dc4_BinopExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c819332_Param {
	jule::Ptr<_20c819332_Param> self;

	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_20d4a6c9e_TypeSymbol> _field_kind = jule::Ptr<_20d4a6c9e_TypeSymbol>();
	jule::Str _field_ident = jule::Str();


	_20c819332_Param(_20c47803a_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_20d4a6c9e_TypeSymbol> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {
		this->self = jule::Ptr<_20c819332_Param>::make(this, nullptr);

	}

	~_20c819332_Param(void) { this->self.ref = nullptr; }

	_20c819332_Param(void) { this->self = jule::Ptr<_20c819332_Param>::make(this, nullptr); }

	inline jule::Ptr<_20c819332_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _20c819332_Param &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20c819332_Param &_Src) const { return !this->operator==(_Src); }
};


struct _20cdc725d_Var {
	jule::Ptr<_20cb4d853_Scope> _field_scope = jule::Ptr<_20cb4d853_Scope>();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_20d4a6c9e_TypeSymbol> _field_kind = jule::Ptr<_20d4a6c9e_TypeSymbol>();
	jule::Ptr<_20d162d45_Value> _field_value = jule::Ptr<_20d162d45_Value>();
	jule::Ptr<_20caa3115_ReferenceStack> _field_references = jule::Ptr<_20caa3115_ReferenceStack>();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Ptr<_20cdc725d_IterRelation> _field_iter_relation = jule::Ptr<_20cdc725d_IterRelation>();
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _field_depends = jule::Slice<jule::Ptr<_20cdc725d_Var>>();


	_20cdc725d_Var(jule::Ptr<_20cb4d853_Scope> __param_scope, _20c47803a_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ptr<_20d4a6c9e_TypeSymbol> __param_kind, jule::Ptr<_20d162d45_Value> __param_value, jule::Ptr<_20caa3115_ReferenceStack> __param_references, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Ptr<_20cdc725d_IterRelation> __param_iter_relation, jule::Slice<jule::Ptr<_20cdc725d_Var>> __param_depends): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_constant(__param_constant), _field_mutable(__param_mutable), _field_public(__param_public), _field_used(__param_used), _field_statically(__param_statically), _field_reference(__param_reference), _field_doc(__param_doc), _field_kind(__param_kind), _field_value(__param_value), _field_references(__param_references), _field_directives(__param_directives), _field_iter_relation(__param_iter_relation), _field_depends(__param_depends) {}

	

	_20cdc725d_Var(void) = default;

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _20cdc725d_Var &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_directives == _Src._field_directives &&
			this->_field_iter_relation == _Src._field_iter_relation &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _20cdc725d_Var &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_TypeCompatibilityChecker {
	jule::Ptr<_20cba60d6_Sema> _field_s = jule::Ptr<_20cba60d6_Sema>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_dest = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_src = jule::Ptr<_20d4a6c9e_TypeKind>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();


	_20d058ca2_TypeCompatibilityChecker(jule::Ptr<_20cba60d6_Sema> __param_s, jule::Ptr<_20d4a6c9e_TypeKind> __param_dest, jule::Ptr<_20d4a6c9e_TypeKind> __param_src, _20c47803a_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_src(__param_src), _field_error_token(__param_error_token) {}

	

	_20d058ca2_TypeCompatibilityChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _20d058ca2_TypeCompatibilityChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _20d058ca2_TypeCompatibilityChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_AssignTypeChecker {
	jule::Ptr<_20cba60d6_Sema> _field_s = jule::Ptr<_20cba60d6_Sema>();
	jule::Ptr<_20d4a6c9e_TypeKind> _field_dest = jule::Ptr<_20d4a6c9e_TypeKind>();
	jule::Ptr<_20d162d45_Data> _field_d = jule::Ptr<_20d162d45_Data>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();


	_20d058ca2_AssignTypeChecker(jule::Ptr<_20cba60d6_Sema> __param_s, jule::Ptr<_20d4a6c9e_TypeKind> __param_dest, jule::Ptr<_20d162d45_Data> __param_d, _20c47803a_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_d(__param_d), _field_error_token(__param_error_token) {}

	

	_20d058ca2_AssignTypeChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_is_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _20d058ca2_AssignTypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _20d058ca2_AssignTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_DynamicTypeAnnotation {
	jule::Ptr<_20d162d45_Eval> _field_e = jule::Ptr<_20d162d45_Eval>();
	jule::Ptr<_20c819332_FnIns> _field_f = jule::Ptr<_20c819332_FnIns>();
	jule::Ptr<_20c819332_ParamIns> _field_p = jule::Ptr<_20c819332_ParamIns>();
	jule::Ptr<_20d162d45_Data> _field_a = jule::Ptr<_20d162d45_Data>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();
	jule::Ptr<_20d4a6c9e_TypeKind>* _field_k = nullptr;


	_20d058ca2_DynamicTypeAnnotation(jule::Ptr<_20d162d45_Eval> __param_e, jule::Ptr<_20c819332_FnIns> __param_f, jule::Ptr<_20c819332_ParamIns> __param_p, jule::Ptr<_20d162d45_Data> __param_a, _20c47803a_Token __param_error_token, jule::Ptr<_20d4a6c9e_TypeKind>* __param_k): _field_e(__param_e), _field_f(__param_f), _field_p(__param_p), _field_a(__param_a), _field_error_token(__param_error_token), _field_k(__param_k) {}

	

	_20d058ca2_DynamicTypeAnnotation(void) = default;

	inline void _method_push_generic(jule::Ptr<_20d4a6c9e_TypeKind>&,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_slc(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_check_map_key(jule::Ptr<_20d4a6c9e_TypeKind>*,jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_map(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_fn(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_ptr(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_sptr(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_any(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate_kind(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _20d058ca2_DynamicTypeAnnotation &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _20d058ca2_DynamicTypeAnnotation &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_FnCallArgChecker {
	jule::Ptr<_20d162d45_Eval> _field_e = jule::Ptr<_20d162d45_Eval>();
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _field_args = jule::Slice<jule::Ptr<_20c476dc4_Expr>>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();
	jule::Ptr<_20c819332_FnIns> _field_f = jule::Ptr<_20c819332_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();


	_20d058ca2_FnCallArgChecker(jule::Ptr<_20d162d45_Eval> __param_e, jule::Slice<jule::Ptr<_20c476dc4_Expr>> __param_args, _20c47803a_Token __param_error_token, jule::Ptr<_20c819332_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models): _field_e(__param_e), _field_args(__param_args), _field_error_token(__param_error_token), _field_f(__param_f), _field_dynamic_annotation(__param_dynamic_annotation), _field_arg_models(__param_arg_models) {}

	

	_20d058ca2_FnCallArgChecker(void) = default;

	inline void _method_push_err_token(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ptr<_20c819332_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ptr<_20c819332_ParamIns>>&);


	inline jule::Bool _method_check_arg(jule::Ptr<_20c819332_ParamIns>&,jule::Ptr<_20d162d45_Data>&,_20c47803a_Token&);


	inline jule::Bool _method_push(jule::Ptr<_20c819332_ParamIns>&,jule::Ptr<_20c476dc4_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ptr<_20c819332_ParamIns>&,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ptr<_20c819332_ParamIns>>&);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _20d058ca2_FnCallArgChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _20d058ca2_FnCallArgChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_StructLitChecker {
	jule::Ptr<_20d162d45_Eval> _field_e = jule::Ptr<_20d162d45_Eval>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();
	jule::Ptr<_20c496047_StructIns> _field_s = jule::Ptr<_20c496047_StructIns>();
	jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>>();


	_20d058ca2_StructLitChecker(jule::Ptr<_20d162d45_Eval> __param_e, _20c47803a_Token __param_error_token, jule::Ptr<_20c496047_StructIns> __param_s, jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>> __param_args): _field_e(__param_e), _field_error_token(__param_error_token), _field_s(__param_s), _field_args(__param_args) {}

	

	_20d058ca2_StructLitChecker(void) = default;

	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ptr<_20c496047_FieldIns>&,jule::Ptr<_20d162d45_Data>&,_20c47803a_Token&);


	inline void _method_check_pair(jule::Ptr<_20c476dc4_FieldExprPair>&,jule::Slice<jule::Any>&);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>&);


	inline void _method_check(jule::Slice<jule::Any>&);


	inline bool operator==(const _20d058ca2_StructLitChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _20d058ca2_StructLitChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20c819332_Fn {
	jule::Ptr<_20c819332_Fn> self;

	jule::Ptr<_20cba60d6_Sema> _field_sema = jule::Ptr<_20cba60d6_Sema>();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>();
	jule::Ptr<_20c819332_RetType> _field_result = jule::Ptr<_20c819332_RetType>();
	jule::Slice<jule::Ptr<_20c819332_Param>> _field_params = jule::Slice<jule::Ptr<_20c819332_Param>>();
	jule::Ptr<_20c496047_Struct> _field_owner = jule::Ptr<_20c496047_Struct>();
	jule::Slice<jule::Ptr<_20c819332_FnIns>> _field_instances = jule::Slice<jule::Ptr<_20c819332_FnIns>>();


	_20c819332_Fn(jule::Ptr<_20cba60d6_Sema> __param_sema, _20c47803a_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Str __param_doc, jule::Ptr<_20c476dc4_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> __param_generics, jule::Ptr<_20c819332_RetType> __param_result, jule::Slice<jule::Ptr<_20c819332_Param>> __param_params, jule::Ptr<_20c496047_Struct> __param_owner, jule::Slice<jule::Ptr<_20c819332_FnIns>> __param_instances): _field_sema(__param_sema), _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc(__param_doc), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params), _field_owner(__param_owner), _field_instances(__param_instances) {
		this->self = jule::Ptr<_20c819332_Fn>::make(this, nullptr);

	}

	~_20c819332_Fn(void) { this->self.ref = nullptr; }

	_20c819332_Fn(void) { this->self = jule::Ptr<_20c819332_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ptr<_20c819332_FnIns> _method_instance_force(void);


	inline jule::Ptr<_20c819332_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ptr<_20c819332_FnIns>&);


	inline bool operator==(const _20c819332_Fn &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _20c819332_Fn &_Src) const { return !this->operator==(_Src); }
};


struct _20d058ca2_RetTypeChecker {
	jule::Ptr<_20cb4d853_ScopeChecker> _field_sc = jule::Ptr<_20cb4d853_ScopeChecker>();
	jule::Ptr<_20c819332_FnIns> _field_f = jule::Ptr<_20c819332_FnIns>();
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _field_types = jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>();
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _field_exprs = jule::Slice<jule::Ptr<_20c476dc4_Expr>>();
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _field_vars = jule::Slice<jule::Ptr<_20cdc725d_Var>>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();
	jule::Any _field_model = jule::Any();


	_20d058ca2_RetTypeChecker(jule::Ptr<_20cb4d853_ScopeChecker> __param_sc, jule::Ptr<_20c819332_FnIns> __param_f, jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> __param_types, jule::Slice<jule::Ptr<_20c476dc4_Expr>> __param_exprs, jule::Slice<jule::Ptr<_20cdc725d_Var>> __param_vars, _20c47803a_Token __param_error_token, jule::Any __param_model): _field_sc(__param_sc), _field_f(__param_f), _field_types(__param_types), _field_exprs(__param_exprs), _field_vars(__param_vars), _field_error_token(__param_error_token), _field_model(__param_model) {}

	

	_20d058ca2_RetTypeChecker(void) = default;

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ptr<_20c476dc4_Expr>&);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ptr<_20c476dc4_Expr>&);


	inline bool operator==(const _20d058ca2_RetTypeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _20d058ca2_RetTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_FnCallExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();
	jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>();
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _field_args = jule::Slice<jule::Ptr<_20c476dc4_Expr>>();
	jule::Ptr<_20c476dc4_ScopeTree> _field_exception = jule::Ptr<_20c476dc4_ScopeTree>();


	_20c476dc4_FnCallExpr(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_Expr> __param_expr, jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> __param_generics, jule::Slice<jule::Ptr<_20c476dc4_Expr>> __param_args, jule::Ptr<_20c476dc4_ScopeTree> __param_exception): _field_token(__param_token), _field_expr(__param_expr), _field_generics(__param_generics), _field_args(__param_args), _field_exception(__param_exception) {}

	

	_20c476dc4_FnCallExpr(void) = default;

	inline jule::Bool _method_unhandled(void);


	inline jule::Bool _method_ignored(void);


	inline bool operator==(const _20c476dc4_FnCallExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_exception == _Src._field_exception;
	}

	inline bool operator!=(const _20c476dc4_FnCallExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_FieldExprPair {
	_20c47803a_Token _field_field = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();


	_20c476dc4_FieldExprPair(_20c47803a_Token __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_20c476dc4_FieldExprPair(void) = default;

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _20c476dc4_FieldExprPair &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_FieldExprPair &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Node {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_data = jule::Any();


	_20c476dc4_Node(_20c47803a_Token __param_token, jule::Any __param_data): _field_token(__param_token), _field_data(__param_data) {}

	

	_20c476dc4_Node(void) = default;

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_directive(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _20c476dc4_Node &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _20c476dc4_Node &_Src) const { return !this->operator==(_Src); }
};


struct _20caa3115_Pass {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_text = jule::Str();


	_20caa3115_Pass(_20c47803a_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_20caa3115_Pass(void) = default;

	inline bool operator==(const _20caa3115_Pass &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _20caa3115_Pass &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_BraceLit {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_20c476dc4_BraceLit(_20c47803a_Token __param_token, jule::Slice<jule::Any> __param_exprs): _field_token(__param_token), _field_exprs(__param_exprs) {}

	

	_20c476dc4_BraceLit(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _20c476dc4_BraceLit &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _20c476dc4_BraceLit &_Src) const { return !this->operator==(_Src); }
};


struct _20d162d45_BinaryEval {
	jule::Ptr<_20d162d45_Eval> _field_e = jule::Ptr<_20d162d45_Eval>();
	jule::Ptr<_20d162d45_Data> _field_l = jule::Ptr<_20d162d45_Data>();
	jule::Ptr<_20d162d45_Data> _field_r = jule::Ptr<_20d162d45_Data>();
	_20c47803a_Token _field_op = _20c47803a_Token();


	_20d162d45_BinaryEval(jule::Ptr<_20d162d45_Eval> __param_e, jule::Ptr<_20d162d45_Data> __param_l, jule::Ptr<_20d162d45_Data> __param_r, _20c47803a_Token __param_op): _field_e(__param_e), _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_20d162d45_BinaryEval(void) = default;

	static inline _20d162d45_BinaryEval _static_method_new_plain(jule::Ptr<_20d162d45_Eval>);


	static inline _20d162d45_BinaryEval _static_method_new(jule::Ptr<_20d162d45_Eval>,_20c47803a_Token);


	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_nil(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_enum(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_sptr(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_ptr(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_arr(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_slc(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_fn(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_struct(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_trait(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_any(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_bool(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ptr<_20d162d45_Data>&);


	inline void _method_mod(void);


	inline jule::Bool _method_numbers_are_compatibile(jule::Str&,jule::Str&);


	inline jule::Ptr<_20d162d45_Data> _method_eval_float(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_int(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_prim(void);


	inline jule::Ptr<_20d162d45_Data> _method_eval_op(void);


	inline void _method_eval_const(jule::Ptr<_20d162d45_Data>&);


	inline void _method_post_const(jule::Ptr<_20d162d45_Data>&);


	inline void _method_check_data(jule::Ptr<_20d162d45_Data>&);


	inline void _method_check_datas(void);


	inline void _method_set_model(jule::Ptr<_20d162d45_Data>&);


	inline void _method_post_eval(jule::Ptr<_20d162d45_Data>&);


	inline jule::Ptr<_20d162d45_Data> _method_solve_explicit(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>&);


	inline jule::Ptr<_20d162d45_Data> _method_eval(jule::Ptr<_20c476dc4_BinopExpr>&);


	inline bool operator==(const _20d162d45_BinaryEval &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _20d162d45_BinaryEval &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_TypeAlias {
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20d4a6c9e_TypeSymbol> _field_kind = jule::Ptr<_20d4a6c9e_TypeSymbol>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();


	_20d4a6c9e_TypeAlias(jule::Ptr<_20c476dc4_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, jule::Bool __param_generic, _20c47803a_Token __param_token, jule::Str __param_ident, jule::Ptr<_20d4a6c9e_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_used(__param_used), _field_generic(__param_generic), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc(__param_doc), _field_refers(__param_refers) {}

	

	_20d4a6c9e_TypeAlias(void) = default;

	inline bool operator==(const _20d4a6c9e_TypeAlias &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_generic == _Src._field_generic &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _20d4a6c9e_TypeAlias &_Src) const { return !this->operator==(_Src); }
};


struct _20cb471a9_Trait: public _20d4a6c9e_Kind {
	jule::Ptr<_20cb471a9_Trait> self;

	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_20c819332_Fn>> _field_methods = jule::Slice<jule::Ptr<_20c819332_Fn>>();
	jule::Slice<jule::Ptr<_20c496047_Struct>> _field_implemented = jule::Slice<jule::Ptr<_20c496047_Struct>>();


	_20cb471a9_Trait(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_doc, jule::Slice<jule::Ptr<_20c819332_Fn>> __param_methods, jule::Slice<jule::Ptr<_20c496047_Struct>> __param_implemented): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_mutable(__param_mutable), _field_doc(__param_doc), _field_methods(__param_methods), _field_implemented(__param_implemented) {
		this->self = jule::Ptr<_20cb471a9_Trait>::make(this, nullptr);

	}

	~_20cb471a9_Trait(void) { this->self.ref = nullptr; }

	_20cb471a9_Trait(void) { this->self = jule::Ptr<_20cb471a9_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ptr<_20c819332_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _20cb471a9_Trait &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _20cb471a9_Trait &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4c70e_EnumItem {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20d162d45_Value> _field_value = jule::Ptr<_20d162d45_Value>();


	_20cb4c70e_EnumItem(_20c47803a_Token __param_token, jule::Str __param_ident, jule::Ptr<_20d162d45_Value> __param_value): _field_token(__param_token), _field_ident(__param_ident), _field_value(__param_value) {}

	

	_20cb4c70e_EnumItem(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _20cb4c70e_EnumItem &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _20cb4c70e_EnumItem &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4c70e_Enum: public _20d4a6c9e_Kind {
	jule::Ptr<_20cb4c70e_Enum> self;

	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20d4a6c9e_TypeSymbol> _field_kind = jule::Ptr<_20d4a6c9e_TypeSymbol>();
	jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>> _field_items = jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>>();
	jule::Str _field_doc = jule::Str();


	_20cb4c70e_Enum(_20c47803a_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_20d4a6c9e_TypeSymbol> __param_kind, jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>> __param_items, jule::Str __param_doc): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc(__param_doc) {
		this->self = jule::Ptr<_20cb4c70e_Enum>::make(this, nullptr);

	}

	~_20cb4c70e_Enum(void) { this->self.ref = nullptr; }

	_20cb4c70e_Enum(void) { this->self = jule::Ptr<_20cb4c70e_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_20d4a6c9e_TypeKind>);


	inline jule::Ptr<_20cb4c70e_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _20cb4c70e_Enum &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _20cb4c70e_Enum &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_KeyValPair {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();
	_20c47803a_Token _field_colon = _20c47803a_Token();


	_20c476dc4_KeyValPair(jule::Any __param_key, jule::Any __param_val, _20c47803a_Token __param_colon): _field_key(__param_key), _field_val(__param_val), _field_colon(__param_colon) {}

	

	_20c476dc4_KeyValPair(void) = default;

	inline bool operator==(const _20c476dc4_KeyValPair &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _20c476dc4_KeyValPair &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_SliceExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_20c476dc4_SliceExpr(_20c47803a_Token __param_token, jule::Slice<jule::Any> __param_elems): _field_token(__param_token), _field_elems(__param_elems) {}

	

	_20c476dc4_SliceExpr(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _20c476dc4_SliceExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _20c476dc4_SliceExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_IndexingExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_index = jule::Any();


	_20c476dc4_IndexingExpr(_20c47803a_Token __param_token, jule::Any __param_expr, jule::Any __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_20c476dc4_IndexingExpr(void) = default;

	inline bool operator==(const _20c476dc4_IndexingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _20c476dc4_IndexingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_SlicingExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_start = jule::Any();
	jule::Any _field_to = jule::Any();


	_20c476dc4_SlicingExpr(_20c47803a_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to): _field_token(__param_token), _field_expr(__param_expr), _field_start(__param_start), _field_to(__param_to) {}

	

	_20c476dc4_SlicingExpr(void) = default;

	inline bool operator==(const _20c476dc4_SlicingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _20c476dc4_SlicingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_TernaryExpr {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_20c476dc4_TernaryExpr(_20c47803a_Token __param_token, jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_token(__param_token), _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_20c476dc4_TernaryExpr(void) = default;

	inline bool operator==(const _20c476dc4_TernaryExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _20c476dc4_TernaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_GenericDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();


	_20c476dc4_GenericDecl(_20c47803a_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_20c476dc4_GenericDecl(void) = default;

	inline bool operator==(const _20c476dc4_GenericDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20c476dc4_GenericDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_LabelSt {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();


	_20c476dc4_LabelSt(_20c47803a_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_20c476dc4_LabelSt(void) = default;

	inline bool operator==(const _20c476dc4_LabelSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20c476dc4_LabelSt &_Src) const { return !this->operator==(_Src); }
};


struct _20d4a6c9e_TypeChecker {
	jule::Ptr<_20cba60d6_Sema> _field_s = jule::Ptr<_20cba60d6_Sema>();
	jule::Trait<_20d6751d1_Lookup> _field_lookup = jule::Trait<_20d6751d1_Lookup>();
	jule::Ptr<_20d4a6c9e_Referencer> _field_referencer = jule::Ptr<_20d4a6c9e_Referencer>();
	_20c47803a_Token _field_error_token = _20c47803a_Token();
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>();
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Bool _field_selection = jule::Bool();


	_20d4a6c9e_TypeChecker(jule::Ptr<_20cba60d6_Sema> __param_s, jule::Trait<_20d6751d1_Lookup> __param_lookup, jule::Ptr<_20d4a6c9e_Referencer> __param_referencer, _20c47803a_Token __param_error_token, jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain, jule::Bool __param_dis_builtin, jule::Bool __param_selection): _field_s(__param_s), _field_lookup(__param_lookup), _field_referencer(__param_referencer), _field_error_token(__param_error_token), _field_ignore_generics(__param_ignore_generics), _field_use_generics(__param_use_generics), _field_not_plain(__param_not_plain), _field_dis_builtin(__param_dis_builtin), _field_selection(__param_selection) {}

	

	_20d4a6c9e_TypeChecker(void) = default;

	inline void _method_push_err(_20c47803a_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Ptr<_20d4a6c9e_Prim> _method_build_prim(jule::Ptr<_20c476dc4_IdentTypeDecl>&);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_20c476dc4_IdentTypeDecl>&,jule::Any);


	inline jule::Trait<_20d4a6c9e_Kind> _method_from_type_alias(jule::Ptr<_20c476dc4_IdentTypeDecl>&,jule::Ptr<_20d4a6c9e_TypeAlias>&);


	inline jule::Ptr<_20cb4c70e_Enum> _method_from_enum(jule::Ptr<_20c476dc4_IdentTypeDecl>&,jule::Ptr<_20cb4c70e_Enum>&);


	inline jule::Bool _method_check_struct_ins(jule::Ptr<_20c496047_StructIns>&,_20c47803a_Token&);


	inline void _method_append_used_struct_reference(jule::Ptr<_20c496047_Struct>&);


	inline jule::Ptr<_20c496047_StructIns> _method_from_struct(jule::Ptr<_20c476dc4_IdentTypeDecl>&,jule::Ptr<_20c496047_Struct>&);


	inline jule::Trait<_20d4a6c9e_Kind> _method_get_def(jule::Ptr<_20c476dc4_IdentTypeDecl>&);


	inline jule::Trait<_20d4a6c9e_Kind> _method_build_ident(jule::Ptr<_20c476dc4_IdentTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_Sptr> _method_build_sptr_from_type(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Ptr<_20d4a6c9e_Sptr> _method_build_sptr(jule::Ptr<_20c476dc4_SptrTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_Ptr> _method_build_ptr_from_type(jule::Ptr<_20d4a6c9e_TypeKind>&);


	inline jule::Ptr<_20d4a6c9e_Ptr> _method_build_ptr(jule::Ptr<_20c476dc4_PtrTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_Slc> _method_build_slc(jule::Ptr<_20c476dc4_SlcTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_Arr> _method_build_arr(jule::Ptr<_20c476dc4_ArrTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_Map> _method_build_map(jule::Ptr<_20c476dc4_MapTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_Tuple> _method_build_tuple(jule::Ptr<_20c476dc4_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ptr<_20c819332_FnIns>&);


	inline jule::Ptr<_20c819332_FnIns> _method_build_fn(jule::Ptr<_20c476dc4_FnDecl>);


	inline jule::Trait<_20d4a6c9e_Kind> _method_build_by_namespace(jule::Ptr<_20c476dc4_NamespaceTypeDecl>);


	inline jule::Ptr<_20d4a6c9e_TypeKind> _method_build(jule::Any&);


	inline jule::Ptr<_20d4a6c9e_TypeKind> _method_check_decl(jule::Ptr<_20c476dc4_TypeDecl>&);


	inline void _method_check(jule::Ptr<_20d4a6c9e_TypeSymbol>&);


	inline bool operator==(const _20d4a6c9e_TypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_selection == _Src._field_selection;
	}

	inline bool operator!=(const _20d4a6c9e_TypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_GotoSt {
	_20c47803a_Token _field_token = _20c47803a_Token();
	_20c47803a_Token _field_label = _20c47803a_Token();


	_20c476dc4_GotoSt(_20c47803a_Token __param_token, _20c47803a_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_20c476dc4_GotoSt(void) = default;

	inline bool operator==(const _20c476dc4_GotoSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _20c476dc4_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_FallSt {
	_20c47803a_Token _field_token = _20c47803a_Token();


	_20c476dc4_FallSt(_20c47803a_Token __param_token): _field_token(__param_token) {}

	

	_20c476dc4_FallSt(void) = default;

	inline bool operator==(const _20c476dc4_FallSt &_Src) const {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _20c476dc4_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _20b6b28b3_IR {
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_20cba58cc_Package> _field_main = jule::Ptr<_20cba58cc_Package>();
	jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>>();
	_20c3e743d_OrderedDefines _field_ordered = _20c3e743d_OrderedDefines();


	_20b6b28b3_IR(jule::Slice<jule::Str> __param_passes, jule::Ptr<_20cba58cc_Package> __param_main, jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> __param_used, _20c3e743d_OrderedDefines __param_ordered): _field_passes(__param_passes), _field_main(__param_main), _field_used(__param_used), _field_ordered(__param_ordered) {}

	

	_20b6b28b3_IR(void) = default;

	static inline std::tuple<jule::Ptr<_20b6b28b3_IR>,jule::Slice<_20a25b99c_Log>> _static_method_build(jule::Str,jule::Int);


	inline void _method_append_structs(jule::Ptr<_20cba58cc_Package>&,jule::Slice<jule::Ptr<_20c496047_Struct>>&);


	inline jule::Slice<jule::Ptr<_20c496047_Struct>> _method_get_all_structures(void);


	inline void _method_order(void);


	inline bool operator==(const _20b6b28b3_IR &_Src) const {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used &&
			this->_field_ordered == _Src._field_ordered;
	}

	inline bool operator!=(const _20b6b28b3_IR &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_AssignLeft {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_AssignLeft(_20c47803a_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ptr<_20c476dc4_Expr> __param_expr): _field_token(__param_token), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_20c476dc4_AssignLeft(void) = default;

	inline bool operator==(const _20c476dc4_AssignLeft &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_AssignLeft &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	_20c47803a_Token _field_setter = _20c47803a_Token();
	jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>>();
	jule::Ptr<_20c476dc4_Expr> _field_right = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_AssignSt(jule::Bool __param_declarative, _20c47803a_Token __param_setter, jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>> __param_left, jule::Ptr<_20c476dc4_Expr> __param_right): _field_declarative(__param_declarative), _field_setter(__param_setter), _field_left(__param_left), _field_right(__param_right) {}

	

	_20c476dc4_AssignSt(void) = default;

	inline bool operator==(const _20c476dc4_AssignSt &_Src) const {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _20c476dc4_AssignSt &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Comment {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_text = jule::Str();


	_20c476dc4_Comment(_20c47803a_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_20c476dc4_Comment(void) = default;

	inline bool operator==(const _20c476dc4_Comment &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _20c476dc4_Comment &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_ParamDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Str _field_ident = jule::Str();


	_20c476dc4_ParamDecl(_20c47803a_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_20c476dc4_ParamDecl(void) = default;

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _20c476dc4_ParamDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _20c476dc4_ParamDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20cb4d853_Assign {
	jule::Any _field_l = jule::Any();
	jule::Any _field_r = jule::Any();
	_20c47803a_Token _field_op = _20c47803a_Token();


	_20cb4d853_Assign(jule::Any __param_l, jule::Any __param_r, _20c47803a_Token __param_op): _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_20cb4d853_Assign(void) = default;

	inline bool operator==(const _20cb4d853_Assign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _20cb4d853_Assign &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_FnDecl {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Ptr<_20c476dc4_CommentGroup> _field_doc_comments = jule::Ptr<_20c476dc4_CommentGroup>();
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>();
	jule::Ptr<_20c476dc4_RetTypeDecl> _field_result = jule::Ptr<_20c476dc4_RetTypeDecl>();
	jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>>();


	_20c476dc4_FnDecl(_20c47803a_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Ptr<_20c476dc4_CommentGroup> __param_doc_comments, jule::Ptr<_20c476dc4_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> __param_generics, jule::Ptr<_20c476dc4_RetTypeDecl> __param_result, jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>> __param_params): _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params) {}

	

	_20c476dc4_FnDecl(void) = default;

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _20c476dc4_FnDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _20c476dc4_FnDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_VarDecl {
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_20c476dc4_Directive>> _field_directives = jule::Slice<jule::Ptr<_20c476dc4_Directive>>();
	jule::Ptr<_20c476dc4_CommentGroup> _field_doc_comments = jule::Ptr<_20c476dc4_CommentGroup>();
	jule::Ptr<_20c476dc4_TypeDecl> _field_kind = jule::Ptr<_20c476dc4_TypeDecl>();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_VarDecl(jule::Ptr<_20c476dc4_ScopeTree> __param_scope, _20c47803a_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ptr<_20c476dc4_Directive>> __param_directives, jule::Ptr<_20c476dc4_CommentGroup> __param_doc_comments, jule::Ptr<_20c476dc4_TypeDecl> __param_kind, jule::Ptr<_20c476dc4_Expr> __param_expr): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_public(__param_public), _field_mutable(__param_mutable), _field_constant(__param_constant), _field_statically(__param_statically), _field_reference(__param_reference), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_20c476dc4_VarDecl(void) = default;

	inline bool operator==(const _20c476dc4_VarDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_VarDecl &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_RetSt {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();


	_20c476dc4_RetSt(_20c47803a_Token __param_token, jule::Ptr<_20c476dc4_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_20c476dc4_RetSt(void) = default;

	inline bool operator==(const _20c476dc4_RetSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _20c476dc4_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_Iter {
	_20c47803a_Token _field_token = _20c47803a_Token();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_20c476dc4_ScopeTree> _field_scope = jule::Ptr<_20c476dc4_ScopeTree>();


	_20c476dc4_Iter(_20c47803a_Token __param_token, jule::Any __param_kind, jule::Ptr<_20c476dc4_ScopeTree> __param_scope): _field_token(__param_token), _field_kind(__param_kind), _field_scope(__param_scope) {}

	

	_20c476dc4_Iter(void) = default;

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _20c476dc4_Iter &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _20c476dc4_Iter &_Src) const { return !this->operator==(_Src); }
};


struct _20c476dc4_WhileKind {
	jule::Ptr<_20c476dc4_Expr> _field_expr = jule::Ptr<_20c476dc4_Expr>();
	jule::Any _field_next = jule::Any();
	_20c47803a_Token _field_next_token = _20c47803a_Token();


	_20c476dc4_WhileKind(jule::Ptr<_20c476dc4_Expr> __param_expr, jule::Any __param_next, _20c47803a_Token __param_next_token): _field_expr(__param_expr), _field_next(__param_next), _field_next_token(__param_next_token) {}

	

	_20c476dc4_WhileKind(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _20c476dc4_WhileKind &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _20c476dc4_WhileKind &_Src) const { return !this->operator==(_Src); }
};


struct _20baa6c1e_ArgParser {
	_20baa6c1e_FlagSet _field_set = _20baa6c1e_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::Int _field_i = jule::Int();


	_20baa6c1e_ArgParser(_20baa6c1e_FlagSet __param_set, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_content, jule::Int __param_i): _field_set(__param_set), _field_args(__param_args), _field_content(__param_content), _field_i(__param_i) {}

	

	_20baa6c1e_ArgParser(void) = default;

	inline std::tuple<jule::Int,jule::Bool> _method_parse_integer_0(jule::Str&,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>);
	inline std::tuple<jule::Uint,jule::Bool> _method_parse_integer_1(jule::Str&,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>);


	inline jule::Str _method_get_data(void);


	inline jule::VoidExceptional _method_process_flag(jule::Trait<_20baa6c1e_CommonFlag>&);


	inline jule::VoidExceptional _method_single_dash(jule::Str&);


	inline jule::VoidExceptional _method_double_dash(jule::Str&);


	inline jule::VoidExceptional _method_try_arg(void);


	inline jule::VoidExceptional _method_parse(void);


	inline bool operator==(const _20baa6c1e_ArgParser &_Src) const {
		return 
			this->_field_set == _Src._field_set &&
			this->_field_args == _Src._field_args &&
			this->_field_content == _Src._field_content &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _20baa6c1e_ArgParser &_Src) const { return !this->operator==(_Src); }
};


inline jule::I32 _20a2c498d_decode_rune(jule::I32,jule::I32);
inline std::tuple<jule::I32,jule::I32> _20a2c498d_encode_rune(jule::I32);
inline jule::Slice<jule::I32> _20a2c498d_decode(jule::Slice<jule::U16>);
inline jule::Slice<jule::U16> _20a2c498d_append_rune(jule::Slice<jule::U16>,jule::I32);
inline jule::Slice<jule::U16> _20a294111_utf16_from_str(jule::Str);
inline jule::Str _20a294111_utf16_to_str(jule::Slice<jule::U16>);
inline jule::Str _20a294111_u16_ptr_to_str(jule::U16*);
inline jule::Int _20a21b055_get_last_errno(void);
inline jule::Uintptr _20a23834c_get_std_handle(jule::Uintptr);
inline jule::Int _20a23834c_wstat(jule::U16*,struct stat*);
inline jule::Int _20a23834c__wopen(jule::U16*,jule::Int,jule::Int);
inline jule::U32 _20a23834c_get_last_error(void);
inline jule::U32 _20a23834c_get_current_directory(jule::U32,jule::U16*);
inline jule::Bool _20a23834c_delete_file(jule::U16*);
inline jule::Bool _20a23834c_create_directory(jule::U16*);
inline jule::Bool _20a23834c_remove_directory(jule::U16*);
inline _WDIR* _20a23834c__wopendir(jule::U16*);
inline struct _wdirent* _20a23834c__wreaddir(_WDIR*);
inline jule::Int _20a23834c__wclosedir(_WDIR*);
inline jule::U32 _20a23834c_get_full_path_name(jule::U16*,jule::U32,jule::U16*,jule::U16**);
inline jule::Bool _20a23834c_get_console_mode(jule::Uintptr,jule::Int&);
inline jule::Bool _20a23834c_set_console_mode(jule::Uintptr,jule::Int);
inline jule::Bool _20a23834c_write_console(jule::Uintptr,jule::U16*,jule::Int,jule::Int&,void*);
inline jule::Bool _20a23834c_read_console(jule::Uintptr,jule::U16*,jule::Int,jule::Int&,void*);
inline jule::I64 _20a254c81_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _20a254c81_read(jule::Int,void*,jule::Uint);
inline jule::Int _20a254c81_close(jule::Int);
inline jule::Int _20a254c81_write(jule::Int,void*,jule::Uint);
inline void _20a254c81_exit(jule::Int);
inline jule::Int _20a21b6e8_get_last_os_error_windows(void);
inline jule::Slice<jule::Str> _20a225bec_args(void);
inline jule::Exceptional<jule::Str> _20a225bec_working_dir(void);
inline jule::Exceptional<jule::Str> _20a22bd02___getwd(void);
inline void _20a20bc9e_push_opt_level(jule::Int);
inline std::tuple<jule::I32,jule::Int> _20a3472e6_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _20a3472e6_decode_last_rune(jule::Slice<jule::U8>);
inline jule::Int _20a3472e6_rune_len(jule::I32);
inline jule::Int _20a3472e6_encode_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _20a3472e6_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _20a3472e6_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Bool _20a3472e6_rune_start(jule::U8);
inline jule::Bool _20b055124_is_letter(jule::I32);
inline jule::Bool _20b0b06ce_is16(jule::Slice<_20b0b06ce_Range16>,jule::U16);
inline jule::Bool _20b0b06ce_is32(jule::Slice<_20b0b06ce_Range32>,jule::U32);
inline jule::Bool _20b0b06ce_is_excluding_latin(jule::Ptr<_20b0b06ce_RangeTable>,jule::I32);
inline jule::Slice<jule::U8> _20a407807_stobs(jule::Str&);
inline jule::Str _20a405ddd_repeat(jule::Str,jule::Int);
inline jule::Bool _20a405ddd__has_prefix(jule::Str&,jule::Str&,jule::Int);
inline jule::Bool _20a405ddd_has_prefix(jule::Str,jule::Str);
inline jule::Bool _20a405ddd__has_suffix(jule::Str&,jule::Str&,jule::Int);
inline jule::Bool _20a405ddd_has_suffix(jule::Str,jule::Str);
inline jule::Int _20a405ddd_find_at(jule::Str,jule::Str,jule::Int);
inline jule::Int _20a405ddd_find_last_at(jule::Str,jule::Str,jule::Int);
inline jule::Int _20a405ddd_find_last(jule::Str,jule::Str);
inline jule::Int _20a405ddd__find_rune(jule::Slice<jule::U8>&,jule::I32);
inline jule::Int _20a405ddd_find_byte(jule::Str,jule::U8);
inline jule::Int _20a405ddd_find_last_byte(jule::Str,jule::U8);
inline jule::Slice<jule::Str> _20a405ddd_split(jule::Str,jule::Str,jule::Int);
inline jule::Bool _20a405ddd_contains(jule::Str,jule::Str);
inline jule::Str _20a405ddd_replace(jule::Str,jule::Str,jule::Str,jule::Int);
inline void _20a405ddd__trim_left(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _20a405ddd_trim_left(jule::Str,jule::Str);
inline void _20a405ddd__trim_right(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _20a405ddd_trim(jule::Str,jule::Str);
inline jule::Bool _20a38a4d2_is_path_sep(jule::U8);
inline jule::Bool _20a38a4d2_is_slash(jule::U8);
inline jule::U8 _20a38a4d2_to_upper(jule::U8);
inline jule::Int _20a38a4d2_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Str,jule::Bool> _20a38a4d2_cut_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _20a38a4d2_full_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _20a38a4d2___abs(jule::Str);
inline jule::Str _20a38a4d2___join(jule::Slice<jule::Str>);
inline jule::Str _20a3911b9_clean(jule::Str);
inline jule::Str _20a3911b9_from_slash(jule::Str);
inline jule::Str _20a3911b9_join(jule::Slice<jule::Str>);
inline jule::Str _20a3911b9_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _20a3911b9_abs(jule::Str);
inline jule::Str _20a3911b9_base(jule::Str);
inline jule::Str _20a3911b9_dir(jule::Str);
inline jule::Str _20a3911b9_volume_name(jule::Str);
inline jule::Int _20a213bc9_get_last_fs_error(void);
inline jule::Bool _20a314cdb_is_console_handle(jule::Uintptr);
inline jule::Int _20ba266b6_get_last_process_error(void);
inline void _20ba48320_exit(jule::Int);
inline jule::Str _20ba48320_executable(void);
inline jule::Bool _20a25878a_is_std_header_path(jule::Str);
inline jule::Bool _20a25878a_is_valid_header_ext(jule::Str);
inline jule::Bool _20a25878a_is_valid_cpp_ext(jule::Str);
inline jule::Str _20a25b99c_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _20a25b99c_arg_to_str(jule::Any);
inline jule::Int _20a25b99c_find_next_fmt(jule::Str);
inline jule::Str _20a25b99c_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _20a24c98d_is_top_directive(jule::Str);
inline jule::Bool _20a314307_is_windows(jule::Str);
inline jule::Bool _20a314307_is_darwin(jule::Str);
inline jule::Bool _20a314307_is_linux(jule::Str);
inline jule::Bool _20a314307_is_i386(jule::Str);
inline jule::Bool _20a314307_is_amd64(jule::Str);
inline jule::Bool _20a314307_is_arm64(jule::Str);
inline jule::Bool _20a314307_is_unix(jule::Str);
inline jule::Bool _20a314307_is_32bit(jule::Str);
inline jule::Bool _20a314307_is_64bit(jule::Str);
inline void _20ba03198_exit_err(jule::Str);
inline void _20ba03198_init(void);
inline jule::Int _20c305aee_leading_zeros64(jule::U64);
inline jule::Int _20c305aee_trailing_zeros(jule::Uint);
inline jule::Int _20c305aee_trailing_zeros32(jule::U32);
inline jule::Int _20c305aee_trailing_zeros64(jule::U64);
inline jule::Int _20c305aee_len32(jule::U32);
inline jule::Int _20c305aee_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _20c305aee_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::U64,jule::U64> _20c305aee_mul64(jule::U64,jule::U64);
inline jule::U32 _20bd40e75_f32_bits(jule::F32);
inline jule::F32 _20bd40e75_f32_from_bits(jule::U32);
inline jule::U64 _20bd40e75_f64_bits(jule::F64);
inline jule::F64 _20bd40e75_f64_from_bits(jule::U64);
inline jule::F64 _20bda4d41_nan(void);
inline jule::Bool _20bda4d41_is_nan(jule::F64);
inline jule::F64 _20bda4d41_inf(jule::Int);
inline jule::Bool _20bda4d41_is_inf(jule::F64,jule::Int);
inline jule::F64 _20be838d1_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _20becedc2_modf(jule::F64);
inline jule::Str _20b639c14_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _20b639c14_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _20b639c14_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_20b639c14_FloatInfo&);
inline jule::Slice<jule::U8> _20b639c14_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_20b639c14_DecimalSlice,jule::Int,jule::U8);
inline void _20b639c14_round_shortest(_20bcae960_Decimal&,jule::U64,jule::Int,_20b639c14_FloatInfo&);
inline jule::Slice<jule::U8> _20b639c14_fmt_e(jule::Slice<jule::U8>,jule::Bool,_20b639c14_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _20b639c14_fmt_f(jule::Slice<jule::U8>,jule::Bool,_20b639c14_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _20b639c14_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_20b639c14_FloatInfo&);
inline jule::Slice<jule::U8> _20b639c14_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_20b639c14_FloatInfo&);
inline jule::Int _20b639c14_min(jule::Int,jule::Int);
inline jule::Int _20b639c14_max(jule::Int,jule::Int);
inline jule::U8 _20b6918b4_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _20b6918b4_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _20b6918b4_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _20b6a031d_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _20b6a031d_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _20b657ced_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _20b657ced_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _20b657ced_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _20b657ced_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _20b657ced_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _20b657ced_atof_hex(jule::Str,_20b639c14_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _20b657ced_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _20b657ced_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _20b657ced_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _20b657ced_parse_float(jule::Str,jule::Int);
inline void _20bc275ba_ryu_ftoa_fixed32(_20b639c14_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _20bc275ba_ryu_ftoa_fixed64(_20b639c14_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _20bc275ba_format_decimal(_20b639c14_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _20bc275ba_ryu_ftoa_shortest(_20b639c14_DecimalSlice&,jule::U64,jule::Int,_20b639c14_FloatInfo&);
inline jule::Int _20bc275ba_mul_by_log2_log10(jule::Int);
inline jule::Int _20bc275ba_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _20bc275ba_compute_bounds(jule::U64,jule::Int,_20b639c14_FloatInfo&);
inline void _20bc275ba_ryu_digits(_20b639c14_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _20bc275ba_ryu_digits32(_20b639c14_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _20bc275ba_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _20bc275ba_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _20bc275ba_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _20bc275ba_divmod1e9(jule::U64);
inline void _20bcae960_trim(_20bcae960_Decimal&);
inline void _20bcae960_right_shift(_20bcae960_Decimal&,jule::Uint);
inline jule::Bool _20bcae960_prefix_is_less_than(jule::Array<jule::U8,800>,jule::Int,jule::Str);
inline void _20bcae960_left_shift(_20bcae960_Decimal&,jule::Uint);
inline jule::Bool _20bcae960_should_round_up(_20bcae960_Decimal&,jule::Int);
inline jule::Str _20bcb4a20_fmt_uint(jule::U64,jule::Int);
inline jule::Str _20bcb4a20_fmt_int(jule::I64,jule::Int);
inline jule::Str _20bcb4a20_itoa(jule::Int);
inline jule::Str _20bcb4a20_small(jule::Int);
inline jule::Bool _20bcb4a20_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _20bcb4a20_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline jule::Bool _20c47803a_is_unary_op(jule::Str);
inline jule::Bool _20c47803a_is_bin_op(jule::Str);
inline jule::Bool _20c47803a_is_str(jule::Str);
inline jule::Bool _20c47803a_is_raw_str(jule::Str);
inline jule::Bool _20c47803a_is_rune(jule::Str);
inline jule::Bool _20c47803a_is_bool(jule::Str);
inline jule::Bool _20c47803a_contains_any(jule::Str,jule::Str);
inline jule::Bool _20c47803a_is_float(jule::Str);
inline jule::Bool _20c47803a_is_num(jule::Str);
inline jule::Bool _20c47803a_is_ignore_ident(jule::Str);
inline jule::Bool _20c47803a_is_anon_ident(jule::Str);
inline jule::Bool _20c47803a_is_space(jule::I32);
inline jule::Bool _20c47803a_is_letter(jule::I32);
inline jule::Bool _20c47803a_is_decimal(jule::U8);
inline jule::Bool _20c47803a_is_binary(jule::U8);
inline jule::Bool _20c47803a_is_octal(jule::U8);
inline jule::Bool _20c47803a_is_hex(jule::U8);
inline jule::Bool _20c47803a_is_assign(jule::Uint);
inline jule::Bool _20c47803a_is_postfix_op(jule::Str);
inline jule::Bool _20c47803a_is_assign_op(jule::Str);
inline jule::Ptr<_20c4792c2_File> _20c4792c2_new_file_set(jule::Str);
inline _20a25b99c_Log _20c47ab20_make_err(jule::Int,jule::Int,jule::Ptr<_20c4792c2_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _20c47ab20_bytes_has_prefix(jule::Slice<jule::U8>&,jule::Str);
inline jule::Str _20c47ab20_float_fmt_e(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_float_fmt_p(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_float_num(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_common_num(jule::Slice<jule::U8>&);
inline jule::Str _20c47ab20_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _20c47ab20_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _20c47ab20_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _20c47ab20_is_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _20c47ab20_is_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _20c47ab20_is_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _20c47ab20_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _20c47ab20_hex_escape(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _20c47ab20_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _20c47ab20_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _20c47ab20_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _20c47ab20_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_20a25b99c_Log> _20c47ab20_lex(jule::Ptr<_20c4792c2_File>);
inline jule::Bool _20c48aa64_find_module_file(jule::Slice<jule::Ptr<_20a23944c_DirEntry>>&);
inline jule::Str _20c48aa64_find_module_file_deep(jule::Str);
inline jule::Slice<_20a25b99c_Log> _20c48aa64_check_module_file(jule::Str);
inline jule::Ptr<_20c4d35c3_FileInfo> _20c4d35c3_parse_file(jule::Ptr<_20c4792c2_File>);
inline std::tuple<jule::Ptr<_20c476126_Ast>,jule::Slice<_20a25b99c_Log>> _20c4d35c3_parse_fileset(jule::Ptr<_20c4792c2_File>);
inline jule::Ptr<_20c476dc4_ScopeTree> _20c4d7055_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _20c4d7055_is_st(_20c47803a_Token,_20c47803a_Token);
inline jule::Bool _20c4d7055_prev_is_incomplete_expr(jule::Slice<_20c47803a_Token>&,jule::Int&);
inline std::tuple<jule::Int,jule::Bool> _20c4d7055_next_st_pos(jule::Slice<_20c47803a_Token>&,jule::Int);
inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Bool> _20c4d7055_skip_st(jule::Int&,jule::Slice<_20c47803a_Token>);
inline jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _20c4d7055_split_stmts(jule::Slice<_20c47803a_Token>&);
inline jule::Ptr<_20c4aa1e3_CallData> _20c4aa1e3_get_call_data(jule::Slice<_20c47803a_Token>&);
inline jule::Slice<_20c47803a_Token> _20c4aa1e3_get_block_expr(jule::Slice<_20c47803a_Token>&);
inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Slice<_20c47803a_Token>> _20c4aa1e3_split_colon(jule::Slice<_20c47803a_Token>&);
inline jule::Slice<_20c47803a_Token> _20c4aa1e3_eliminate_comments(jule::Slice<_20c47803a_Token>&);
inline jule::Int _20c4aa1e3_find_lowest_prec_op(jule::Slice<_20c47803a_Token>&);
inline jule::Ptr<_20c476dc4_IdentExpr> _20c4aa1e3_build_ident_expr(_20c47803a_Token&);
inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Int> _20c4aa1e3_get_range_expr_tokens(jule::Slice<_20c47803a_Token>&);
inline jule::Bool _20c4bea32_check_assign_tokens(jule::Slice<_20c47803a_Token>&);
inline _20a25b99c_Log _20c7de1a3_make_err(jule::Int,jule::Int,jule::Ptr<_20c4792c2_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_20c47803a_Token> _20c7de1a3_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_20c47803a_Token>&);
inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Slice<_20c47803a_Token>> _20c7de1a3_range_last(jule::Slice<_20c47803a_Token>&);
inline std::tuple<jule::Slice<jule::Slice<_20c47803a_Token>>,jule::Slice<_20a25b99c_Log>> _20c7de1a3_parts(jule::Slice<_20c47803a_Token>&,jule::Uint,jule::Bool);
inline jule::Str _20c7de1a3_get_close_kind_of_brace(jule::Str);
inline _20a25b99c_Log _20c7de1a3_compiler_err(_20c47803a_Token&,jule::Str&,jule::Slice<jule::Any>);
inline void _20c7de1a3_push_suggestion(_20a25b99c_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_20c476dc4_Comment> _20c7de1a3_build_comment(_20c47803a_Token&);
inline jule::Str _20c7de1a3_tokstoa(jule::Slice<_20c47803a_Token>&);
inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_build_void_type(void);
inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_build_prim_type(_20c47803a_Token);
inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Int> _20c9bd97b_split_map_range(jule::Slice<_20c47803a_Token>&,jule::Int&);
inline void _20d78b3e6_lshift_unsig(_20d78b3e6_Const&,_20d78b3e6_Const&);
inline void _20d78b3e6_rshift_unsig(_20d78b3e6_Const&,_20d78b3e6_Const&);
inline jule::Str _20d78c6b1_real_kind_of(jule::Str);
inline jule::Int _20d78c6b1_bitsize_of(jule::Str);
inline jule::Str _20d78c6b1_int_from_bits(jule::U64);
inline jule::Str _20d78c6b1_uint_from_bits(jule::U64);
inline jule::Bool _20d78c6b1_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _20d78c6b1_bitsize_of_int(jule::I64);
inline jule::U64 _20d78c6b1_bitsize_of_uint(jule::U64);
inline jule::F64 _20d78e96b_min(jule::Str);
inline jule::F64 _20d78e96b_max(jule::Str);
inline jule::Bool _20d79053d_is_i8_compatible(jule::Str);
inline jule::Bool _20d79053d_is_i16_compatible(jule::Str);
inline jule::Bool _20d79053d_is_i32_compatible(jule::Str);
inline jule::Bool _20d79053d_is_i64_compatible(jule::Str);
inline jule::Bool _20d79053d_is_u8_compatible(jule::Str);
inline jule::Bool _20d79053d_is_u16_compatible(jule::Str);
inline jule::Bool _20d79053d_is_u32_compatible(jule::Str);
inline jule::Bool _20d79053d_is_u64_compatible(jule::Str);
inline jule::Bool _20d79053d_is_f32_compatible(jule::Str);
inline jule::Bool _20d79053d_is_f64_compatible(jule::Str);
inline jule::Bool _20d79053d_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _20d79053d_is_i16_greater(jule::Str);
inline jule::Bool _20d79053d_is_i32_greater(jule::Str);
inline jule::Bool _20d79053d_is_i64_greater(jule::Str);
inline jule::Bool _20d79053d_is_u16_greater(jule::Str);
inline jule::Bool _20d79053d_is_u32_greater(jule::Str);
inline jule::Bool _20d79053d_is_u64_greater(jule::Str);
inline jule::Bool _20d79053d_is_f32_greater(jule::Str);
inline jule::Bool _20d79053d_is_f64_greater(jule::Str);
inline jule::Bool _20d79053d_is_greater(jule::Str,jule::Str);
inline jule::Bool _20d853821_is_sig_int(jule::Str);
inline jule::Bool _20d853821_is_unsig_int(jule::Str);
inline jule::Bool _20d853821_is_int(jule::Str);
inline jule::Bool _20d853821_is_float(jule::Str);
inline jule::Bool _20d853821_is_num(jule::Str);
inline jule::Bool _20d8c32b9_is_ascii(jule::I32);
inline jule::I32 _20d8c32b9_to_rune(jule::Slice<jule::U8>);
inline jule::Str _20d8c32b9_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _20d8c32b9_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _20d8c32b9_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _20d8c32b9_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Slice<jule::U8> _20d8c32b9_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Bool _20c819332_kind_uses_generics(jule::Ptr<_20d4a6c9e_TypeKind>,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>&);
inline jule::Bool _20c819332_parameter_uses_generics(jule::Ptr<_20c819332_Param>&,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>&);
inline jule::Str _20caa3115_build_doc(jule::Ptr<_20c476dc4_CommentGroup>);
inline jule::Ptr<_20d4a6c9e_TypeSymbol> _20caa3115_build_type(jule::Ptr<_20c476dc4_TypeDecl>);
inline jule::Ptr<_20d162d45_Value> _20caa3115_build_expr(jule::Ptr<_20c476dc4_Expr>);
inline jule::Ptr<_20d4a6c9e_TypeAlias> _20caa3115_build_type_alias(jule::Ptr<_20c476dc4_TypeAliasDecl>);
inline jule::Ptr<_20c496047_Field> _20caa3115_build_field(jule::Ptr<_20c476dc4_FieldDecl>);
inline jule::Slice<jule::Ptr<_20c496047_Field>> _20caa3115_build_fields(jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>>&);
inline jule::Ptr<_20c496047_Struct> _20caa3115_build_struct(jule::Ptr<_20c476dc4_StructDecl>);
inline jule::Ptr<_20c819332_Param> _20caa3115_build_param(jule::Ptr<_20c476dc4_ParamDecl>);
inline jule::Slice<jule::Ptr<_20c819332_Param>> _20caa3115_build_params(jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>>&);
inline jule::Ptr<_20c819332_RetType> _20caa3115_build_ret_type(jule::Ptr<_20c476dc4_RetTypeDecl>);
inline jule::Ptr<_20c819332_Fn> _20caa3115_build_fn(jule::Ptr<_20c476dc4_FnDecl>);
inline jule::Slice<jule::Ptr<_20c819332_Fn>> _20caa3115_build_methods(jule::Slice<jule::Ptr<_20c476dc4_FnDecl>>&);
inline jule::Ptr<_20cb471a9_Trait> _20caa3115_build_trait(jule::Ptr<_20c476dc4_TraitDecl>);
inline jule::Ptr<_20cb4c70e_EnumItem> _20caa3115_build_enum_item(jule::Ptr<_20c476dc4_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>> _20caa3115_build_enum_items(jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>>&);
inline jule::Ptr<_20cb4c70e_Enum> _20caa3115_build_enum(jule::Ptr<_20c476dc4_EnumDecl>);
inline jule::Ptr<_20cdc725d_Var> _20caa3115_build_var(jule::Ptr<_20c476dc4_VarDecl>);
inline jule::Slice<jule::Ptr<_20cdc725d_Var>> _20caa3115_build_vars(jule::Slice<jule::Ptr<_20c476dc4_VarDecl>>);
inline jule::Ptr<_20cb5423d_Impl> _20caa3115_build_impl(jule::Ptr<_20c476dc4_Impl>);
inline jule::Ptr<_20cb4d853_ScopeChecker> _20cb4d853_new_scope_checker_base(jule::Ptr<_20cba60d6_Sema>&,jule::Ptr<_20c819332_FnIns>);
inline jule::Ptr<_20cb4d853_ScopeChecker> _20cb4d853_new_scope_checker(jule::Ptr<_20cba60d6_Sema>&,jule::Ptr<_20c819332_FnIns>);
inline jule::Ptr<_20cb4d853_ScopeLabel> _20cb4d853_find_label_parent(jule::Str,jule::Ptr<_20cb4d853_ScopeChecker>);
inline jule::Bool _20cb4d853_stmt_is_goto_scope(jule::Any&,jule::Ptr<_20cb4d853_Scope>&);
inline jule::Int _20cb4d853_count_match_type(jule::Ptr<_20cb4d853_Match>&,jule::Ptr<_20d4a6c9e_TypeKind>&);
inline jule::Slice<jule::Ptr<_20d162d45_Data>> _20cb4d853_get_datas_from_tuple_data(jule::Ptr<_20d162d45_Data>&);
inline jule::Slice<jule::Any> _20cb4d853_get_expr_models(jule::Any&);
inline jule::Bool _20cb4d853_check_mut(jule::Ptr<_20cba60d6_Sema>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);
inline jule::Bool _20cb4d853_check_assign(jule::Ptr<_20cba60d6_Sema>&,jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20d162d45_Data>,_20c47803a_Token);
inline jule::Bool _20cb4d853_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _20cb4d853_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _20cb4d853_st_is_def(jule::Any&);
inline jule::Ptr<_20cdc725d_Var> _20cba58cc_find_var_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_20d4a6c9e_TypeAlias> _20cba58cc_find_type_alias_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_20c496047_Struct> _20cba58cc_find_struct_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_20c819332_Fn> _20cba58cc_find_fn_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_20cb471a9_Trait> _20cba58cc_find_trait_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Str);
inline jule::Ptr<_20cb4c70e_Enum> _20cba58cc_find_enum_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Str);
inline jule::Bool _20cba58cc_is_std_package(jule::Str,jule::Str);
inline jule::Bool _20cba60d6_is_valid_model_for_ref(jule::Any&);
inline _20a25b99c_Log _20cba60d6_compiler_err(_20c47803a_Token&,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _20cba60d6_imp_is_lookupable(jule::Ptr<_20cba58cc_ImportInfo>&,jule::Str);
inline jule::Slice<jule::Ptr<_20cdc725d_Var>> _20cba60d6_build_ret_vars(jule::Ptr<_20c819332_FnIns>&);
inline jule::Slice<jule::Ptr<_20cdc725d_Var>> _20cba60d6_build_param_vars(jule::Ptr<_20c819332_FnIns>&);
inline jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _20cba60d6_build_generic_type_aliases(jule::Ptr<_20c819332_FnIns>&);
inline jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_find_file(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>&,jule::Ptr<_20c4792c2_File>&);
inline std::tuple<jule::Bool,jule::Bool> _20cba60d6_conditional_has_ret(jule::Ptr<_20cb4d853_Conditional>);
inline jule::Bool _20cba60d6_match_has_ret(jule::Ptr<_20cb4d853_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _20cba60d6___has_ret(jule::Ptr<_20cb4d853_Scope>);
inline jule::Bool _20cba60d6_has_ret(jule::Ptr<_20cb4d853_Scope>);
inline void _20cba60d6_push_suggestion(_20a25b99c_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _20d058ca2_get_result_types(jule::Ptr<_20d4a6c9e_TypeKind>&);
inline jule::Bool _20d058ca2_trait_has_reference_receiver(jule::Ptr<_20cb471a9_Trait>&);
inline jule::Bool _20d058ca2_float_assignable(jule::Str,jule::Ptr<_20d162d45_Data>&);
inline jule::Bool _20d058ca2_sig_assignable(jule::Str,jule::Ptr<_20d162d45_Data>&);
inline jule::Bool _20d058ca2_unsig_assignable(jule::Str,jule::Ptr<_20d162d45_Data>&);
inline jule::Bool _20d058ca2_int_assignable(jule::Str,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20c476dc4_Directive> _20d162d45_find_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>&,jule::Str);
inline jule::Any _20d162d45_find_builtins_import(jule::Str,jule::Ptr<_20cba58cc_ImportInfo>);
inline void _20d162d45_make_struct_lit_alloc(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20ccedeed_StructLitExprModel>&);
inline jule::Ptr<_20cdc725d_Var> _20d162d45_build_error_var(jule::Ptr<_20cb4d853_Scope>&,jule::Ptr<_20c476dc4_FnCallExpr>&);
inline jule::Any _20d162d45_find_builtins_sema(jule::Str,jule::Ptr<_20cba60d6_Sema>);
inline jule::Bool _20d162d45_is_ok_for_shifting(jule::Ptr<_20d162d45_Data>&);
inline jule::Bool _20d162d45_is_instanced_struct(jule::Ptr<_20c496047_StructIns>);
inline jule::Bool _20d162d45_is_ptr_arithmetic_compatible_int(jule::Ptr<_20d162d45_Data>&);
inline void _20d162d45_normalize_bitsize(jule::Ptr<_20d162d45_Data>&);
inline void _20d162d45_normalize_type(jule::Ptr<_20d162d45_Data>&);
inline void _20d162d45_fit_type(jule::Ptr<_20d162d45_Data>&);
inline void _20d162d45_apply_cast_kind_model(jule::Ptr<_20d162d45_Data>&);
inline void _20d162d45_apply_cast_kind(jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d162d45_build_void_data(void);
inline jule::Str _20d162d45_check_data_for_integer_indexing(jule::Ptr<_20d162d45_Data>&);
inline jule::Bool _20d4a6c9e_has_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>&,jule::Str);
inline jule::Bool _20d4a6c9e_can_get_ptr(jule::Ptr<_20d162d45_Data>&);
inline jule::Bool _20d4a6c9e_is_valid_for_sptr_type(jule::Ptr<_20d4a6c9e_TypeKind>&);
inline jule::Bool _20d4a6c9e_is_valid_for_ref(jule::Ptr<_20d4a6c9e_TypeKind>&);
inline jule::Bool _20d4a6c9e_is_builtin_str_convertable(jule::Ptr<_20d4a6c9e_TypeKind>&);
inline jule::Str _20d4a6c9e_build_link_path_by_tokens(jule::Slice<_20c47803a_Token>&);
inline jule::Ptr<_20d4a6c9e_Prim> _20d4a6c9e_build_prim_type(jule::Str);
inline jule::Ptr<_20c496047_Struct> _20d4a6c9e_get_struct_from_kind(jule::Ptr<_20d4a6c9e_TypeKind>);
inline jule::Bool _20d4a6c9e_is_prim(jule::Str);
inline std::tuple<jule::Ptr<_20d0c86e5_SymbolTable>,jule::Slice<_20a25b99c_Log>> _20d5c9454_build_symbols(jule::Ptr<_20c476126_Ast>&,jule::Trait<_20cba58cc_Importer>&,jule::Ptr<_20caa3115_SymbolBuilder>);
inline std::tuple<jule::Ptr<_20cba58cc_Package>,jule::Slice<_20a25b99c_Log>> _20d5c9454___analyze_package(jule::Slice<jule::Ptr<_20c476126_Ast>>&,jule::Trait<_20cba58cc_Importer>&,jule::Int&);
inline std::tuple<jule::Ptr<_20cba58cc_Package>,jule::Slice<_20a25b99c_Log>> _20d5c9454_analyze_package(jule::Slice<jule::Ptr<_20c476126_Ast>>,jule::Trait<_20cba58cc_Importer>,jule::Int);
inline jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)> _20d68a5ae_find_builtin_caller(jule::U8);
inline jule::Ptr<_20c819332_FnIns> _20d68a5ae_find_builtin_fn(jule::Str);
inline jule::Ptr<_20d4a6c9e_TypeAlias> _20d68a5ae_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_20cb471a9_Trait> _20d68a5ae_find_builtin_trait(jule::Str);
inline jule::Any _20d68a5ae_find_builtin_def(jule::Str);
inline jule::Any _20d68a5ae_find_builtin_def_std_debug(jule::Str);
inline jule::Any _20d68a5ae_find_builtin_def_std_mem(jule::Str);
inline jule::Any _20d68a5ae_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _20d68a5ae_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_common_plain(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_common(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_common_mut(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_error(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_out(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_outln(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_new(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_panic(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_make(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_append(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_copy(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_clone(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_assert(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_mem_size_of(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_mem_align_of(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_mem_free(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_jule_integrated_inline(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_debug_out(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_debug_outln(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _20c414092_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _20c414092_check_arch(jule::Str);
inline jule::Bool _20c414092_is_pass_file_annotation(jule::Str);
inline void _20c414339_set_os_vars(void);
inline void _20c414339_set_arch_vars(void);
inline void _20c414339_init_vars(void);
inline void _20c44b959_exit_err(jule::Str);
inline jule::Slice<jule::U8> _20c44b959_read_buff(jule::Str);
inline _20a25b99c_Log _20c44b959_flat_compiler_err(jule::Str);
inline std::tuple<jule::Bool,jule::Slice<_20a25b99c_Log>> _20c44b959_is_pass_build_directives(jule::Ptr<_20c476126_Ast>&);
inline void _20b6b28b3_push_passes(jule::Ptr<_20cba58cc_Package>&,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _20b6b28b3_get_all_unique_passes(jule::Ptr<_20cba58cc_Package>&,jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>>);
inline jule::Bool _20b6d50ab_is_exist(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _20b6d50ab_is_dead(jule::Any);
inline void _20b6d50ab_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _20b6d50ab_is_all_references_are_dead(jule::Ptr<_20caa3115_ReferenceStack>);
inline jule::Bool _20b6d50ab_is_fn_dead(jule::Ptr<_20c819332_FnIns>);
inline jule::Bool _20b6d50ab_is_var_dead(jule::Ptr<_20cdc725d_Var>);
inline jule::Bool _20b6d50ab_is_struct_dead(jule::Ptr<_20c496047_StructIns>);
inline jule::Bool _20b6d50ab_is_trait_dead(jule::Ptr<_20cb471a9_Trait>);
inline void _20b6d50ab_eliminate_dead_functions(jule::Slice<jule::Ptr<_20c819332_Fn>>&);
inline void _20b6d50ab_eliminate_dead_globals(jule::Ptr<_20cba58cc_Package>&);
inline void _20b6d50ab_eliminate_dead_functions_package(jule::Ptr<_20cba58cc_Package>&);
inline void _20b6d50ab_catch_alive_init(jule::Ptr<_20cba58cc_Package>&);
inline void _20b6d50ab_eliminate_package(jule::Ptr<_20cba58cc_Package>&);
inline void _20b6d50ab_eliminate_defines(jule::Ptr<_20b6b28b3_IR>&);
inline void _20b661752_eliminate_dead_code_of_scope(jule::Ptr<_20cb4d853_Scope>);
inline void _20b661752_eliminate_scope_functions(jule::Slice<jule::Ptr<_20c819332_Fn>>&);
inline void _20b661752_eliminate_functions_scope_package(jule::Ptr<_20cba58cc_Package>&);
inline void _20b661752_eliminate_scope_package(jule::Ptr<_20cba58cc_Package>&);
inline void _20b661752_eliminate_scopes(jule::Ptr<_20b6b28b3_IR>&);
inline jule::U64 _20dc14918_unix(void);
inline jule::U64 _20dc14918_unix_year_to_seconds(jule::Uint,jule::Bool&);
inline jule::U64 _20dc14918_unix_month_to_seconds(jule::Uint,jule::Bool);
inline jule::Bool _20b6cc6d0_iter_expr_is_copy_optimizable(jule::Ptr<_20d162d45_Data>&,jule::Ptr<_20cdc725d_Var>&);
inline jule::Str _20b6cc6d0_gen_range_index_iter(jule::Ptr<_20cb4d853_RangeIter>&);
inline jule::Str _20b6cc6d0_gen_range_hashmap_iter(jule::Ptr<_20cb4d853_RangeIter>&);
inline jule::Str _20b6cc6d0_gen_if(jule::Ptr<_20cb4d853_If>);
inline jule::Str _20b6cc6d0_gen_conditional(jule::Ptr<_20cb4d853_Conditional>);
inline jule::Str _20b6cc6d0_gen_inf_iter(jule::Ptr<_20cb4d853_InfIter>);
inline jule::Str _20b6cc6d0_gen_while_iter(jule::Ptr<_20cb4d853_WhileIter>);
inline jule::Str _20b6cc6d0_gen_range_iter(jule::Ptr<_20cb4d853_RangeIter>);
inline jule::Str _20b6cc6d0_gen_cont(jule::Ptr<_20cb4d853_ContSt>);
inline jule::Str _20b6cc6d0_gen_label(jule::Ptr<_20cb4d853_Label>);
inline jule::Str _20b6cc6d0_gen_goto(jule::Ptr<_20cb4d853_GotoSt>);
inline jule::Str _20b6cc6d0_gen_postfix(jule::Ptr<_20cb4d853_Postfix>);
inline jule::Str _20b6cc6d0_gen_div_by_zero_assign(jule::Ptr<_20cb4d853_Assign>);
inline jule::Str _20b6cc6d0_gen_assign(jule::Ptr<_20cb4d853_Assign>);
inline jule::Str _20b6cc6d0_gen_multi_assign(jule::Ptr<_20cb4d853_MultiAssign>);
inline jule::Str _20b6cc6d0_get_case_match_expr(jule::Ptr<_20cb4d853_Match>&);
inline jule::Str _20b6cc6d0_gen_case(jule::Ptr<_20cb4d853_Match>,jule::Ptr<_20cb4d853_Case>);
inline jule::Str _20b6cc6d0_gen_match(jule::Ptr<_20cb4d853_Match>);
inline jule::Str _20b6cc6d0_gen_fall_st(jule::Ptr<_20cb4d853_FallSt>);
inline jule::Str _20b6cc6d0_gen_break_st(jule::Ptr<_20cb4d853_BreakSt>);
inline jule::Str _20b6cc6d0_gen_ret_vars(jule::Ptr<_20cb4d853_RetSt>);
inline jule::Str _20b6cc6d0_gen_ret_expr_tuple(jule::Ptr<_20cb4d853_RetSt>);
inline jule::Str _20b6cc6d0_gen_ret_expr(jule::Ptr<_20cb4d853_RetSt>);
inline jule::Str _20b6cc6d0_gen_ret_st(jule::Ptr<_20cb4d853_RetSt>);
inline jule::Str _20b6cc6d0_gen_data_expr(jule::Ptr<_20d162d45_Data>);
inline jule::Str _20b6cc6d0_gen_scope_var(jule::Ptr<_20cdc725d_Var>);
inline jule::Str _20b6cc6d0_gen_st(jule::Any);
inline jule::Str _20b6cc6d0_gen_scope(jule::Ptr<_20cb4d853_Scope>);
inline jule::Str _20b6cc6d0_gen_fn_scope(jule::Ptr<_20c819332_FnIns>);
inline jule::Str _20b6cc6d0_gen_method_scope(jule::Ptr<_20c819332_FnIns>);
inline jule::Str _20c1ee047_concat_all_parts(jule::Slice<_20c47803a_Token>);
inline jule::Str _20c1ee047_decompose_common_esq(jule::U8);
inline jule::Str _20c1ee047_sbtoa(jule::U8);
inline jule::Str _20c1ee047_get_cstr_model(jule::Slice<jule::U8>);
inline jule::Str _20c1ee047_get_str_model(jule::Ptr<_20d78b3e6_Const>&);
inline jule::Str _20c1ee047_get_bool_model(jule::Ptr<_20d78b3e6_Const>&);
inline jule::Str _20c1ee047_get_nil_model(void);
inline jule::Str _20c1ee047_gen_float_special_cases(jule::F64&);
inline jule::Str _20c1ee047_ftoa(jule::F64,jule::Int);
inline jule::Str _20c1ee047_get_f32_model(jule::Ptr<_20d78b3e6_Const>&);
inline jule::Str _20c1ee047_get_f64_model(jule::Ptr<_20d78b3e6_Const>&);
inline jule::Str _20c1ee047_get_float_model(jule::Ptr<_20d162d45_Data>&);
inline jule::Str _20c1ee047_i64toa(jule::I64);
inline jule::Str _20c1ee047_get_i64_model(jule::Ptr<_20d78b3e6_Const>&);
inline jule::Str _20c1ee047_u64toa(jule::U64);
inline jule::Str _20c1ee047_get_u64_model(jule::Ptr<_20d78b3e6_Const>);
inline jule::Str _20c1ee047_gen_const_expr(jule::Ptr<_20d162d45_Data>);
inline jule::Str _20c1ee047_gen_const_expr_model(jule::Ptr<_20d78b3e6_Const>);
inline jule::Str _20c1ee047_gen_div_by_zero_binop_expr_model(_20c47803a_Token&,jule::Any&,jule::Any&);
inline jule::Str _20c1ee047_gen_binop_expr_model(jule::Ptr<_20ccedeed_BinopExprModel>);
inline jule::Str _20c1ee047_gen_var_expr_model(jule::Ptr<_20cdc725d_Var>);
inline jule::Str _20c1ee047_gen_struct_expr_model(jule::Ptr<_20c496047_Struct>);
inline jule::Str _20c1ee047_gen_struct_ins_expr_model(jule::Ptr<_20c496047_StructIns>);
inline jule::Str _20c1ee047_gen_unary_expr_model(jule::Ptr<_20ccedeed_UnaryExprModel>);
inline jule::Str _20c1ee047_gen_cpp_struct_lit_expr_model(jule::Ptr<_20ccedeed_StructLitExprModel>);
inline jule::Str _20c1ee047_gen_struct_lit_expr_model(jule::Ptr<_20ccedeed_StructLitExprModel>);
inline jule::Str _20c1ee047_gen_alloc_struct_lit_expr_model(jule::Ptr<_20ccedeed_AllocStructLitExprModel>);
inline jule::Str _20c1ee047_gen_casting_expr_model(jule::Ptr<_20ccedeed_CastingExprModel>);
inline jule::Str _20c1ee047_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _20c1ee047_gen_expr_model_for_call(jule::Any);
inline jule::Str _20c1ee047_gen_loc_info(_20c47803a_Token&);
inline jule::Str _20c1ee047_gen_pure_fn_call_expr_model(jule::Ptr<_20ccedeed_FnCallExprModel>&);
inline jule::Bool _20c1ee047_is_forwarded(jule::Ptr<_20cb4d853_Scope>&);
inline jule::Str _20c1ee047_gen_fn_call_expr_model(jule::Ptr<_20ccedeed_FnCallExprModel>);
inline jule::Str _20c1ee047_gen_slice_expr_model(jule::Ptr<_20ccedeed_SliceExprModel>);
inline jule::Str _20c1ee047_gen_indexing_expr_model(jule::Ptr<_20ccedeed_IndexingExprModel>);
inline jule::Str _20c1ee047_gen_anon_fn_expr_model(jule::Ptr<_20ccedeed_AnonFnExprModel>);
inline jule::Str _20c1ee047_gen_map_expr_model(jule::Ptr<_20ccedeed_MapExprModel>);
inline jule::Str _20c1ee047_gen_slicing_expr_model(jule::Ptr<_20ccedeed_SlicingExprModel>);
inline jule::Str _20c1ee047_gen_trait_sub_ident_expr_model(jule::Ptr<_20ccedeed_TraitSubIdentExprModel>);
inline jule::Str _20c1ee047_gen_struct_sub_ident_expr_model(jule::Ptr<_20ccedeed_StructSubIdentExprModel>);
inline jule::Str _20c1ee047_gen_common_ident_expr_model(jule::Ptr<_20ccedeed_CommonIdentExprModel>);
inline jule::Str _20c1ee047_gen_common_sub_ident_expr_model(jule::Ptr<_20ccedeed_CommonSubIdentExprModel>);
inline jule::Str _20c1ee047_gen_array_expr_model(jule::Ptr<_20ccedeed_ArrayExprModel>);
inline jule::Str _20c1ee047_gen_fn_ins_expr_model_common(jule::Ptr<_20c819332_FnIns>);
inline jule::Str _20c1ee047_gen_fn_ins_expr_model(jule::Ptr<_20c819332_FnIns>);
inline jule::Str _20c1ee047_gen_tuple_expr_model(jule::Ptr<_20ccedeed_TupleExprModel>);
inline jule::Str _20c1ee047_gen_builtin_new_call_expr_model(jule::Ptr<_20ccedeed_BuiltinNewCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_out_call_expr_model(jule::Ptr<_20ccedeed_BuiltinOutCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_outln_call_expr_model(jule::Ptr<_20ccedeed_BuiltinOutlnCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_panic_call_expr_model(jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_assert_call_expr_model(jule::Ptr<_20ccedeed_BuiltinAssertCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_error_call_expr_model(jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_make_call_expr_model(jule::Ptr<_20ccedeed_BuiltinMakeCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_append_call_expr_model_assign_opt(jule::Bool,jule::Str&,jule::Ptr<_20d4a6c9e_TypeKind>&,jule::Ptr<_20ccedeed_SliceExprModel>&,jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>&);
inline std::tuple<jule::Str,jule::Bool> _20c1ee047_gen_builtin_append_call_expr_model_assign(jule::Any,jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_append_call_expr_model(jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>);
inline jule::Str _20c1ee047_gen_builtin_clone_call_expr_model(jule::Ptr<_20ccedeed_BuiltinCloneCallExprModel>);
inline jule::Str _20c1ee047_gen_sizeof_expr_model(jule::Ptr<_20ccedeed_SizeofExprModel>);
inline jule::Str _20c1ee047_gen_alignof_expr_model(jule::Ptr<_20ccedeed_AlignofExprModel>);
inline jule::Str _20c1ee047_gen_rune_expr_model(jule::Ptr<_20ccedeed_RuneExprModel>);
inline jule::Str _20c1ee047_gen_struct_static_ident_expr_model(jule::Ptr<_20ccedeed_StructStaticIdentExprModel>);
inline jule::Str _20c1ee047_gen_integrated_to_str_expr_model(jule::Ptr<_20ccedeed_IntegratedToStrExprModel>);
inline jule::Str _20c1ee047_gen_ternary_expr_model(jule::Ptr<_20ccedeed_TernaryExprModel>);
inline jule::Str _20c1ee047_gen_backend_emit_expr_model(jule::Ptr<_20ccedeed_BackendEmitExprModel>);
inline jule::Str _20c1ee047_gen_free_expr_model(jule::Ptr<_20ccedeed_FreeExprModel>);
inline jule::Str _20c1ee047_gen_expr_model(jule::Any);
inline jule::Str _20c1ee047_gen_expr(jule::Any);
inline jule::Str _20c1ee047_gen_val(jule::Ptr<_20d162d45_Value>);
inline jule::Str _20c1ee047_get_init_expr(jule::Ptr<_20d4a6c9e_TypeKind>);
inline jule::Str _20cac28d7_get_derive_fn_decl_clone(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20cac28d7_get_derive_fn_def_clone(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20da752c3_as_ident(jule::Str);
inline jule::Str _20da752c3_as_jt(jule::Str);
inline jule::Str _20da752c3_get_addr_as_ident(jule::Uintptr);
inline jule::Str _20da752c3_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _20da752c3_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _20da752c3_fn_out_ident(jule::Ptr<_20c819332_Fn>&);
inline jule::Str _20da752c3_fn_ins_out_ident(jule::Ptr<_20c819332_FnIns>&);
inline jule::Str _20da752c3_trait_out_ident(jule::Ptr<_20cb471a9_Trait>);
inline jule::Str _20da752c3_param_out_ident(jule::Ptr<_20c819332_Param>&);
inline jule::Str _20da752c3_struct_out_ident(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20da752c3_struct_ins_out_ident(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da752c3_field_out_ident(jule::Ptr<_20c496047_Field>&);
inline jule::Str _20da752c3_var_out_ident(jule::Ptr<_20cdc725d_Var>);
inline jule::Str _20da752c3_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _20da752c3_iter_end_label_ident(jule::Uintptr);
inline jule::Str _20da752c3_iter_next_label_ident(jule::Uintptr);
inline jule::Str _20da752c3_label_ident(jule::Str);
inline jule::Str _20da752c3_match_end_label_ident(jule::Uintptr);
inline jule::Str _20da752c3_case_begin_label_ident(jule::Uintptr);
inline jule::Ptr<_20c476dc4_Directive> _20da75aa9_find_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>&,jule::Str);
inline jule::Bool _20da75aa9_has_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>&,jule::Str);
inline jule::Str _20da75aa9_gen_prim_kind(jule::Ptr<_20d4a6c9e_Prim>);
inline jule::Str _20da75aa9_gen_tuple_kind(jule::Ptr<_20d4a6c9e_Tuple>);
inline jule::Str _20da75aa9_as_sptr_kind(jule::Str);
inline jule::Str _20da75aa9_gen_sptr_kind(jule::Ptr<_20d4a6c9e_Sptr>);
inline jule::Str _20da75aa9_gen_ptr_kind(jule::Ptr<_20d4a6c9e_Ptr>);
inline jule::Str _20da75aa9_gen_enum_kind(jule::Ptr<_20cb4c70e_Enum>);
inline jule::Str _20da75aa9_as_slice_kind(jule::Ptr<_20d4a6c9e_TypeKind>);
inline jule::Str _20da75aa9_gen_slice_kind(jule::Ptr<_20d4a6c9e_Slc>);
inline jule::Str _20da75aa9_gen_map_kind(jule::Ptr<_20d4a6c9e_Map>);
inline jule::Str _20da75aa9_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _20da75aa9_gen_trait_kind(jule::Ptr<_20cb471a9_Trait>);
inline jule::Str _20da75aa9_gen_struct_kind(jule::Ptr<_20c496047_Struct>);
inline jule::Str _20da75aa9_gen_struct_kind_ins(jule::Ptr<_20c496047_StructIns>);
inline jule::Str _20da75aa9_gen_array_kind(jule::Ptr<_20d4a6c9e_Arr>);
inline jule::Str _20da75aa9_gen_fn_anon_decl(jule::Ptr<_20c819332_FnIns>);
inline jule::Str _20da75aa9_gen_fn_kind(jule::Ptr<_20c819332_FnIns>);
inline jule::Str _20da75aa9_gen_type_kind(jule::Ptr<_20d4a6c9e_TypeKind>);
inline void _20da77946_add_indent(void);
inline void _20da77946_done_indent(void);
inline jule::Str _20da77946_indent(void);
inline jule::Bool _20da77946_is_cpp_header_file(jule::Str);
inline jule::Str _20da77946_gen_links(jule::Ptr<_20b6b28b3_IR>&);
inline jule::Str _20da77946_gen_fn_result(jule::Ptr<_20c819332_Fn>&);
inline jule::Str _20da77946_gen_fn_ins_result(jule::Ptr<_20c819332_FnIns>&);
inline jule::Str _20da77946_gen_param_prototype(jule::Ptr<_20c819332_Param>&);
inline jule::Str _20da77946_gen_param_ins(jule::Ptr<_20c819332_ParamIns>&);
inline jule::Str _20da77946_gen_param_ins_prototype(jule::Ptr<_20c819332_ParamIns>&);
inline jule::Str _20da77946_gen_param(jule::Ptr<_20c819332_Param>&);
inline jule::Str _20da77946_gen_params(jule::Slice<jule::Ptr<_20c819332_Param>>&);
inline jule::Str _20da77946_gen_params_ins(jule::Slice<jule::Ptr<_20c819332_ParamIns>>&);
inline jule::Str _20da77946_gen_params_prototypes(jule::Slice<jule::Ptr<_20c819332_ParamIns>>&);
inline jule::Str _20da77946_gen_trait(jule::Ptr<_20cb471a9_Trait>&);
inline jule::Str _20da77946_gen_traits_tbl(jule::Ptr<_20d0c86e5_SymbolTable>&);
inline jule::Str _20da77946_gen_traits_pkg(jule::Ptr<_20cba58cc_Package>&);
inline jule::Str _20da77946_gen_traits(jule::Ptr<_20b6b28b3_IR>&);
inline jule::Str _20da77946_gen_trait_prototype(jule::Ptr<_20cb471a9_Trait>&);
inline jule::Str _20da77946_gen_trait_prototypes(jule::Ptr<_20cba58cc_Package>&);
inline jule::Str _20da77946_gen_struct_plain_prototype(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20da77946_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_20c496047_Struct>>&);
inline jule::Str _20da77946_gen_struct_traits(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20da77946_gen_field_decl(jule::Ptr<_20c496047_FieldIns>&);
inline jule::Str _20da77946_gen_struct_self_field_type_kind(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_self_field(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_self_field_init_st(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_constructor(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_destructor(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_operators(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_derive_defs_prototypes(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_ins_prototype(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_prototype(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20da77946_gen_struct_prototypes(jule::Slice<jule::Ptr<_20c496047_Struct>>&);
inline jule::Str _20da77946_gen_fn_decl_head(jule::Ptr<_20c819332_FnIns>&,jule::Bool);
inline jule::Str _20da77946_gen_fn_prototype(jule::Ptr<_20c819332_Fn>&,jule::Bool);
inline jule::Str _20da77946_gen_fn_prototypes(jule::Ptr<_20cba58cc_Package>&);
inline jule::Str _20da77946_gen_prototypes(jule::Ptr<_20b6b28b3_IR>&);
inline jule::Str _20da77946_gen_var_init_expr(jule::Ptr<_20cdc725d_Var>&,jule::Str);
inline jule::Str _20da77946_gen_var(jule::Ptr<_20cdc725d_Var>);
inline jule::Str _20da77946_gen_pkg_globals(jule::Ptr<_20cba58cc_Package>&,jule::Str&);
inline jule::Str _20da77946_gen_globals(jule::Ptr<_20b6b28b3_IR>,jule::Str&);
inline jule::Str _20da77946_gen_fn(jule::Ptr<_20c819332_Fn>&);
inline jule::Str _20da77946_gen_pkg_fns(jule::Ptr<_20cba58cc_Package>&);
inline jule::Str _20da77946_gen_struct_method_defs(jule::Ptr<_20c496047_StructIns>&);
inline jule::Bool _20da77946_fn_is_to_str(jule::Ptr<_20c819332_Fn>&);
inline jule::Str _20da77946_gen_struct_ostream(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_derive_defs(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct_ins(jule::Ptr<_20c496047_StructIns>&);
inline jule::Str _20da77946_gen_struct(jule::Ptr<_20c496047_Struct>&);
inline jule::Str _20da77946_gen_structs(jule::Slice<jule::Ptr<_20c496047_Struct>>&);
inline jule::Str _20da77946_gen_fns(jule::Ptr<_20b6b28b3_IR>&);
inline void _20da77946_push_init(jule::Ptr<_20cba58cc_Package>&,jule::Str&);
inline jule::Str _20da77946_gen_init_caller(jule::Ptr<_20b6b28b3_IR>&,jule::Str&);
inline jule::Ptr<_20cba58cc_ImportInfo> _20da77946_find_testing_package(jule::Ptr<_20b6b28b3_IR>&);
inline void _20da77946_append_test(jule::Str&,jule::Ptr<_20c819332_FnIns>);
inline void _20da77946_append_package_tests(jule::Str&,jule::Ptr<_20cba58cc_Package>&);
inline void _20da77946_append_test_point(jule::Str&,jule::Ptr<_20b6b28b3_IR>&);
inline void _20da77946_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _20da77946_gen(jule::Ptr<_20b6b28b3_IR>&);
inline jule::Bool _20baa12ac_is_std_package(jule::Str,jule::Str);
inline jule::Bool _20baa12ac_is_constant_valid_conditional_case(jule::Ptr<_20cb4d853_If>&);
inline jule::Bool _20baa12ac_is_constant_valid_match_case(jule::Ptr<_20cb4d853_Case>&);
inline jule::Bool _20baa12ac_is_unreachable_conditional_case(jule::Ptr<_20cb4d853_If>&);
inline jule::Bool _20baa12ac_is_unreachable_match_case(jule::Ptr<_20cb4d853_Case>&);
inline void _20a1742ee_print_error_message(jule::Str);
inline void _20a1742ee_help(jule::Slice<jule::Str>&);
inline void _20a1742ee_version(jule::Slice<jule::Str>&);
inline void _20a1742ee_tool_distos(void);
inline void _20a1742ee_tool_distarch(void);
inline void _20a1742ee_tool(jule::Slice<jule::Str>&);
inline void _20a1742ee_julenv(jule::Slice<jule::Str>&);
inline void _20a1742ee_mod(jule::Slice<jule::Str>&);
inline jule::Bool _20a1742ee_process_command(jule::Slice<jule::Str>&);
inline void _20a1742ee_exit_err(jule::Str);
inline void _20a1742ee_show_info(void);
void entry_point(void);
inline void _20a1943c9___init_common(void);
inline void _20a1a970d___enable_vtp(void);
inline void _20a1a970d_init(void);
inline void _20a1b0cdb_write_output(jule::Str,jule::Str);
inline void _20a1b0cdb_clear_objects(void);
inline void _20a1b0cdb_compile_ir(jule::Str,jule::Str);
inline void _20a1b0cdb_do_spell(jule::Str,jule::Str,jule::Str);
inline jule::Bool _20a1b0cdb_is_cpp_source_file(jule::Str);
inline void _20a1b0cdb_push_comp_cmd_clang(jule::Str&);
inline void _20a1b0cdb_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _20a1b0cdb_gen_compile_cmd(jule::Str,jule::Ptr<_20b6b28b3_IR>&);
inline jule::Str _20a1b0cdb_get_compile_path(void);
inline void _20a1b0cdb_apply_target_independent_optimizations(jule::Ptr<_20b6b28b3_IR>&);
inline void _20a1b0cdb_check_compiler_flag(void);
inline void _20a1b0cdb_check_target_arch(jule::Str);
inline void _20a1b0cdb_check_target_os(jule::Str);
inline void _20a1b0cdb_check_target_flag(jule::Str&);
inline void _20a1b0cdb_check_opt_flag(jule::Str&);
inline void _20a1b0cdb_check_cpp_std_flag(void);
inline jule::Slice<jule::Str> _20a1b0cdb_check_flags(jule::Slice<jule::Str>&);
inline void _20a1b0cdb_setup_sema_flags(jule::Int&);
inline jule::Ptr<_20b6b28b3_IR> _20a1b0cdb_build_ir(jule::Slice<jule::Str>&);
inline void _20a1b0cdb_compile_command(jule::Slice<jule::Str>&);


jule::Uintptr _20a23834c_STDIN;
jule::Uintptr _20a23834c_STDOUT;
jule::Uintptr _20a23834c_STDERR;
jule::Str _20a1b0aee_OS;
jule::Str _20a1b0aee_ARCH;
jule::Bool _20a20bc9e_PRODUCTION;
jule::Bool _20a20bc9e_OPT_COPY;
jule::Bool _20a20bc9e_OPT_DEADCODE;
jule::Bool _20a20bc9e_OPT_APPEND;
jule::Bool _20a20bc9e_OPT_MATH;
jule::Bool _20a20bc9e_OPT_ACCESS;
jule::Bool _20a20bc9e_OPT_INLINE;
jule::Bool _20a20bc9e_OPT_PTR;
jule::Bool _20a20bc9e_OPT_COND;
jule::Str _20a21965d_COMPILER;
jule::Str _20a21965d_COMPILER_PATH;
jule::Str _20a21965d_CPP_STD;
jule::Bool _20a21965d_SHADOWING;
jule::Bool _20a21965d_TRANSPILATION;
jule::Bool _20a21965d_TEST;
jule::Bool _20a21965d_RC;
jule::Array<jule::U8,256> _20a3472e6_FIRST;
jule::Array<_20a3472e6_accept_range,16> _20a3472e6_ACCEPT_RANGES;
jule::Ptr<_20b0b06ce_RangeTable> _20b09c05b__L;
jule::Ptr<_20b0b06ce_RangeTable> _20b09c05b_LETTER;
jule::Array<jule::U8,256> _20b09c05b__PROPERTIES;
jule::Array<jule::Str,4> _20a25878a_CPP_HEADER_EXTS;
jule::Array<jule::Str,3> _20a25878a_CPP_EXTS;
jule::Array<jule::Str,1> _20a25878a_OBJECTIVE_CPP_EXTS;
jule::Array<jule::Str,3> _20a314307_DISTOS;
jule::Array<jule::Str,3> _20a314307_DISTARCH;
jule::Str _20ba03198_PATH_STDLIB;
jule::Str _20ba03198_PATH_EXEC;
jule::Str _20ba03198_PATH_WD;
jule::Str _20ba03198_PATH_API;
jule::Array<jule::U8,32> _20c305aee_DE_BRUIJN32_TAB;
jule::Array<jule::U8,64> _20c305aee_DE_BRUIJN64_TAB;
_20b639c14_FloatInfo _20b639c14_F32_INFO;
_20b639c14_FloatInfo _20b639c14_F64_INFO;
jule::Array<jule::Array<jule::U64,2>,696> _20b6a031d_DETAILED_POWS_OF_TEN;
jule::Slice<jule::Int> _20b657ced_POWTAB;
jule::Slice<jule::F64> _20b657ced_F64_POW10;
jule::Slice<jule::F32> _20b657ced_F32_POW10;
jule::Array<jule::U64,20> _20bc275ba_U64_POW10;
jule::Slice<_20bcae960_LeftCheat> _20bcae960_LEFTCHEATS;
jule::Array<jule::I32,5> _20c47803a_SPACES;
jule::Array<jule::Str,6> _20c47803a_UNARY_OPS;
jule::Array<jule::Str,12> _20c47803a_BIN_OPS;
jule::Array<jule::Str,2> _20c47803a_POSTFIX_OPS;
jule::Array<jule::Str,11> _20c47803a_ASSING_OPS;
jule::Array<_20c47ab20_KindPair,47> _20c47ab20_KEYWORDS;
jule::Array<_20c47ab20_KindPair,39> _20c47ab20_BASIC_OPS;
jule::Ptr<_20d4a6c9e_TypeAlias> _20d68a5ae_BUILTIN_TYPE_ALIAS_BYTE;
jule::Ptr<_20d4a6c9e_TypeAlias> _20d68a5ae_BUILTIN_TYPE_ALIAS_RUNE;
jule::Ptr<_20cb471a9_Trait> _20d68a5ae_BUILTIN_TRAIT_DISPOSE;
jule::Slice<jule::Str> _20c414339_VARS;
jule::Slice<jule::Any> _20b6d50ab_deads;
jule::Slice<jule::Any> _20b6d50ab_checking;
jule::Any _20b6d50ab_current;
jule::Any _20b6d50ab_main_current;
jule::Array<jule::U8,12> _20dc14918_MDAYS;
jule::Slice<jule::U8> _20da77946_INDENT;
jule::Array<jule::Array<jule::Str,2>,5> _20a1742ee_HELP_MAP;
jule::Str _20a1b0cdb_OUT_DIR;
jule::Str _20a1b0cdb_OUT_NAME;
jule::Str _20a1b0cdb_OUT;

inline void _20a19495c_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _20a19495c_AnsiEscape::_static_method_print(jule::Str _2121_escape,jule::Str _2134_text) {
	jule::out(_2121_escape);
	jule::out(_2134_text);
	_20a19495c_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _20a19495c_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _20a19495c_Logger::_static_method_log_flat(_20a25b99c_Log& _3225_l) {
	jule::outln(_3225_l._field_text);
}



inline void _20a19495c_Logger::_static_method_log_error(_20a25b99c_Log& _3526_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_3526_l._field_text);
	_20a19495c_AnsiEscape::_static_method_reset();
	if (_3526_l._field_path.len() != 0LL) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_3526_l._field_path);
	}
	if ((_3526_l._field_row != 0LL) && (_3526_l._field_column != 0LL)) {
		jule::out(jule::Str(":", 1));
		jule::out(_20bcb4a20_itoa(_3526_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_20bcb4a20_itoa(_3526_l._field_column));
	}
	if (_3526_l._field_line.len() != 0LL) {
		jule::Str _5221_line = _20a405ddd_trim_left(_3526_l._field_line,jule::Str("\r\n\v\b ", 5));
		jule::I64 _5321_offset = (_3526_l._field_line.len() - _5221_line.len()) + 1LL;
		jule::I64 _5421_old_len = _5221_line.len();
		_5221_line=_20a405ddd_trim_left(_5221_line,jule::Str("\t", 1));
		if (_5421_old_len != _5221_line.len()) {
			_5321_offset+=static_cast<jule::I64>((_5421_old_len - _5221_line.len()) * 8LL);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _6017_row = _20bcb4a20_itoa(_3526_l._field_row);
		jule::out(_6017_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_5221_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_20a405ddd_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_6017_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_20a405ddd_repeat(jule::Str(" ", 1),static_cast<jule::Int>(_3526_l._field_column - _5321_offset)));
		jule::out(jule::Str("^", 1));
		if (_3526_l._field_suggestion.len() != 0LL) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_20a405ddd_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_6017_row.len())));
			jule::out(jule::Str(" | ", 3));
			_20a19495c_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_3526_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _20a19495c_Logger::_static_method_log(_20a25b99c_Log& _8120_l) {
	{
		auto &_match_expr{ _8120_l._field_kind };
		
		if (_match_expr == 0LLU) {
			_case_begin_5309936672:;
			{
				_20a19495c_Logger::_static_method_log_flat(_8120_l);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_5309936912:;
			{
				_20a19495c_Logger::_static_method_log_error(_8120_l);
			}
		}
		_match_end_5309936528:;
	}
}



inline void _20a19495c_Logger::_static_method_print_logs(jule::Slice<_20a25b99c_Log>& _8927_logs) {
	{
		auto &expr = _8927_logs;
		auto it = expr.begin();
		_iter_begin_5309940768:;
		if (it != expr.end()) {
			_20a25b99c_Log &_20a19495c_l = *it;
			{
				_20a19495c_Logger::_static_method_log(_20a19495c_l);
			}
			_iter_next_5309940768:;
			++it;
			goto _iter_begin_5309940768;
		}
		_iter_end_5309940768:;
	}
	jule::out(jule::Str("=== ", 4));
	jule::out(_20bcb4a20_itoa(static_cast<jule::I64>(_8927_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, const _20a19495c_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20a3472e6_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b0b06ce_FoldPair &_Src) {
	_Stream << "FoldPair{";
	_Stream << "from:" << _Src._field_from << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b0b06ce_CaseRange &_Src) {
	_Stream << "CaseRange{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "delta:" << _Src._field_delta;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b0b06ce_Range16 &_Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b0b06ce_Range32 &_Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b0b06ce_RangeTable &_Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _20a3911b9_LazyBuff::_method_index(jule::Int _5424_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[_5424_i];
	}
	return (*this)._field_path[_5424_i];
}



inline void _20a3911b9_LazyBuff::_method_append(jule::U8 _6125_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[(*this)._field_w] == _6125_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*this)._field_path.len()));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,(*this)._field_w)));
	}
	(*this)._field_buff[(*this)._field_w]=_6125_c;
	((*this)._field_w)++;
}



inline jule::Str _20a3911b9_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len + (*this)._field_w);
	}
	return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,(*this)._field_w));
}







std::ostream &operator<<(std::ostream &_Stream, const _20a3911b9_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20a23944c_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_20a23944c_DirEntry>>> _20a23944c_Directory::_static_method_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_20a23944c_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_20a23944c_DirEntry>>();
	jule::Slice<jule::U16> _1613_utf16_path = _20a294111_utf16_from_str(_1524_path);
	_WDIR* _1717_dir = _20a23834c__wopendir((&(_1613_utf16_path[0LL])));
	if (_1717_dir == nullptr) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_20a23944c_DirEntry>>>(_20a213bc9_get_last_fs_error());
	}
	for (;;) {
		{
			struct _wdirent* _2217_dirent = _20a23834c__wreaddir(_1717_dir);
			if (_2217_dirent == nullptr) {
				goto _iter_end_5289170224;
			}
			jule::Str _2617_name = _20a294111_u16_ptr_to_str(((jule::U16*)((*(_2217_dirent)).d_name)));
			jule::Ptr<_20a252e5a_Status> _2721_stat = ({
				auto except = _20a252e5a_Status::_static_method_of(_20a3911b9_join(jule::Slice<jule::Str>({_1524_path,_2617_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_20a23944c_DirEntry>>>(except.error);
					return jule::Exceptional<jule::Slice<jule::Ptr<_20a23944c_DirEntry>>>(except.error);
				} jule::Ptr<_20a252e5a_Status>();});
			});
			_1538_dirents.push(jule::new_struct<_20a23944c_DirEntry>(new( std::nothrow ) _20a23944c_DirEntry(_2617_name,_2721_stat)));
		}
	_iter_next_5289170224:;
	}
	_iter_end_5289170224:;
	_20a23834c__wclosedir(_1717_dir);
	return jule::Exceptional<jule::Slice<jule::Ptr<_20a23944c_DirEntry>>>(jule::Any(), _1538_dirents);
}



inline jule::VoidExceptional _20a23944c_Directory::_static_method_create(jule::Str _4026_path) {
	jule::Slice<jule::U16> _4513_utf16_path = _20a294111_utf16_from_str(_4026_path);
	if ((!(_20a23834c_create_directory((&(_4513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_20a213bc9_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _20a23944c_Directory::_static_method_remove(jule::Str _5426_path) {
	jule::Slice<jule::U16> _5513_utf16_path = _20a294111_utf16_from_str(_5426_path);
	if ((!(_20a23834c_remove_directory((&(_5513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_20a213bc9_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _20a23944c_Directory &_Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20a284e6a_File> _20a284e6a_File::_static_method_new(jule::Uintptr _4523_handle) {
	return jule::new_struct<_20a284e6a_File>(new( std::nothrow ) _20a284e6a_File(_4523_handle));
}



inline jule::Exceptional<jule::Ptr<_20a284e6a_File>> _20a284e6a_File::_static_method_create(jule::Str _5526_path) {
	return jule::Exceptional<jule::Ptr<_20a284e6a_File>>(jule::Any(),({
		auto except = _20a284e6a_File::_static_method_open(_5526_path,770LL,438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_20a284e6a_File>>(except.error);
			return jule::Exceptional<jule::Ptr<_20a284e6a_File>>(except.error);
		} jule::Ptr<_20a284e6a_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> _20a284e6a_File::_static_method_read(jule::Str _6724_path) {
	jule::Ptr<_20a252e5a_Status> _6813_s = ({
		auto except = _20a252e5a_Status::_static_method_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_20a252e5a_Status>();});
	});
	if ((!((*(_6813_s))._method_is_reg()))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(14LLU);
	}
	if ((*(_6813_s))._field_size == 0LL) {
		return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	}
	jule::Ptr<_20a284e6a_File> _7817_f = ({
		auto except = _20a284e6a_File::_static_method_open(_6724_path,0LL,0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_20a284e6a_File>();});
	});
	__JULE_DEFER({
		({
			auto except = (*(_7817_f))._method_close();
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/fs/file.jule:79:17"));
		});
	});
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>((*(_6813_s))._field_size));
	jule::Int _8213_n = ({
		auto except = (*(_7817_f))._method_read(_8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Int();});
	});
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional _20a284e6a_File::_static_method_write(jule::Str _9125_path,jule::Slice<jule::U8> _9136_data,jule::Int _9150_perm) {
	jule::Ptr<_20a284e6a_File> _9217_f = ({
		auto except = _20a284e6a_File::_static_method_open(_9125_path,769LL,_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_20a284e6a_File>();});
	});
	({
		auto except = (*(_9217_f))._method_write(_9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = (*(_9217_f))._method_close();
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I64> _20a284e6a_File::_method_seek(jule::I64 _10527_offset,jule::Int _10540_origin) {
	jule::I64 _10613_pos = _20a254c81_seek(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),_10527_offset,static_cast<jule::Int>(_10540_origin));
	if (_10613_pos == -1LL) {
		return jule::Exceptional<jule::I64>(_20a213bc9_get_last_fs_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _20a284e6a_File::_method_close(void) {
	if (_20a254c81_close(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle))) == -1LL) {
		return jule::VoidExceptional(_20a213bc9_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Ptr<_20a284e6a_File>> _20a284e6a_File::_static_method_open(jule::Str _2124_path,jule::Int _2135_flag,jule::Int _2148_mode) {
	jule::Slice<jule::U16> _2213_utf16_path = _20a294111_utf16_from_str(_2124_path);
	jule::Int _2313_handle = _20a23834c__wopen((&(_2213_utf16_path[0LL])),static_cast<jule::Int>(_2135_flag),_2148_mode);
	if (_2313_handle == -1LL) {
		return jule::Exceptional<jule::Ptr<_20a284e6a_File>>(_20a213bc9_get_last_fs_error());
	}
	return jule::Exceptional<jule::Ptr<_20a284e6a_File>>(jule::Any(),_20a284e6a_File::_static_method_new(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_2313_handle))));
}



inline jule::VoidExceptional _20a284e6a_File::_static_method_remove(jule::Str _3426_path) {
	jule::Slice<jule::U16> _3513_utf16_path = _20a294111_utf16_from_str(_3426_path);
	if ((!(_20a23834c_delete_file((&(_3513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_20a213bc9_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _20a284e6a_File::_method_write(jule::Slice<jule::U8> _4928_buff) {
	jule::Int _4945_n = jule::Int();
	if (_4928_buff.len() == 0LL) {
		_4945_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_4945_n);
	}
	if (_20a314cdb_is_console_handle((*this)._field_handle)) {
		jule::Slice<jule::U16> _5517_utf16_buff = _20a294111_utf16_from_str(static_cast<jule::Str>(_4928_buff));
		jule::Bool _5617_ok = _20a23834c_write_console((*this)._field_handle,(&(_5517_utf16_buff[0LL])),static_cast<jule::I64>(_5517_utf16_buff.len()),_4945_n,nullptr);
		if ((!(_5617_ok))) {
			return jule::Exceptional<jule::Int>(_20a213bc9_get_last_fs_error());
		}
		return jule::Exceptional<jule::Int>(jule::Any(),_4945_n);
	}
	_4945_n=static_cast<jule::Int>(static_cast<jule::Int>(_20a254c81_write(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),(&(_4928_buff[0LL])),static_cast<jule::Uint>(static_cast<jule::Uint>(_4928_buff.len())))));
	if (_4945_n == -1LL) {
		return jule::Exceptional<jule::Int>(_20a213bc9_get_last_fs_error());
	}
	return jule::Exceptional<jule::Int>(jule::Any(),_4945_n);
}



inline jule::Exceptional<jule::Int> _20a284e6a_File::_method_read(jule::Slice<jule::U8> _8231_buff) {
	jule::Int _8248_n = jule::Int();
	if (_8231_buff.len() == 0LL) {
		_8248_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_8248_n);
	}
	if (_20a314cdb_is_console_handle((*this)._field_handle)) {
		jule::Slice<jule::U16> _8821_codepage = jule::Slice<jule::U16>::alloc(static_cast<jule::I64>(_8231_buff.len()));
		jule::Bool _8917_ok = _20a23834c_read_console((*this)._field_handle,(&(_8821_codepage[0LL])),static_cast<jule::I64>(_8231_buff.len()),_8248_n,nullptr);
		if ((!(_8917_ok))) {
			return jule::Exceptional<jule::Int>(_20a213bc9_get_last_fs_error());
		}
		jule::Slice<jule::I32> _9617_runes = _20a2c498d_decode(_8821_codepage.slice(0LL,_8248_n));
		_8248_n=0LL;
		{
			auto &expr = _9617_runes;
			auto it = expr.begin();
			_iter_begin_5289274736:;
			if (it != expr.end()) {
				jule::I32 &_20a314cdb_r = *it;
				{
					jule::Int _9921_size = _20a3472e6_rune_len(_20a314cdb_r);
					if ((_8248_n + _9921_size) > _8231_buff.len()) {
						goto _iter_end_5289274736;
					}
					_20a3472e6_encode_rune(_8231_buff.slice(_8248_n),_20a314cdb_r);
					_8248_n+=_9921_size;
				}
				_iter_next_5289274736:;
				++it;
				goto _iter_begin_5289274736;
			}
			_iter_end_5289274736:;
		}
		return jule::Exceptional<jule::Int>(jule::Any(),_8248_n);
	}
	_8248_n=static_cast<jule::Int>(static_cast<jule::Int>(_20a254c81_read(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),(&(_8231_buff[0LL])),static_cast<jule::Uint>(static_cast<jule::Uint>(_8231_buff.len())))));
	if (_8248_n == -1LL) {
		return jule::Exceptional<jule::Int>(_20a213bc9_get_last_fs_error());
	}
	return jule::Exceptional<jule::Int>(jule::Any(),_8248_n);
}







std::ostream &operator<<(std::ostream &_Stream, const _20a284e6a_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20a252e5a_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _20a252e5a_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}



inline jule::Exceptional<jule::Ptr<_20a252e5a_Status>> _20a252e5a_Status::_static_method_of(jule::Str _1222_path) {
	jule::Slice<jule::U16> _1313_utf16_path = _20a294111_utf16_from_str(_1222_path);
	struct stat _1417_handle = (struct stat){};
	jule::Int _1513_code = _20a23834c_wstat((&(_1313_utf16_path[0LL])),(&(_1417_handle)));
	if (_1513_code != -1LL) {
		return jule::Exceptional<jule::Ptr<_20a252e5a_Status>>(jule::Any(),jule::new_struct<_20a252e5a_Status>(new( std::nothrow ) _20a252e5a_Status(static_cast<jule::Uint>(static_cast<jule::Uint>(_1417_handle.st_mode)),static_cast<jule::Uint>(static_cast<jule::Uint>(_1417_handle.st_size)))));
	}
	return jule::Exceptional<jule::Ptr<_20a252e5a_Status>>(_20a213bc9_get_last_fs_error());
}







std::ostream &operator<<(std::ostream &_Stream, const _20a252e5a_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20ba2c513_Cmd> _20ba2c513_Cmd::_static_method_new(jule::Str _2923_file) {
	return jule::new_struct<_20ba2c513_Cmd>(new( std::nothrow ) _20ba2c513_Cmd(_2923_file,-1LL,jule::Slice<jule::Str>(),jule::Slice<jule::Str>()));
}



inline jule::Int _20ba2c513_Cmd::_method_pid(void) {
	return (*this)._field__pid;
}



inline jule::Str _20ba2c513_Cmd::_method_file(void) {
	return (*this)._field__fle;
}



inline jule::VoidExceptional _20ba2c513_Cmd::_method_spawn(void) {
	if ((*this)._field__pid != -1LL) {
		return jule::VoidExceptional(jule::Str("command already spawned", 23));
	}
	(*this)._field__pid=static_cast<jule::Int>(((((*this)._field_env == nullptr)) ? (static_cast<jule::Int>(__jule_execvp((*this)._field__fle,(*this)._field_args))) : (static_cast<jule::Int>(__jule_execve((*this)._field__fle,(*this)._field_args,(*this)._field_env)))));
	if ((*this)._field__pid == -1LL) {
		return jule::VoidExceptional(_20ba266b6_get_last_process_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _20ba2c513_Cmd::_method_kill(void) {
	if (TerminateProcess(((HANDLE)((*this)._field__pid)),0LL)) {
		(*this)._field__pid=-1LL;
		return jule::VoidExceptional();
	}
	return jule::VoidExceptional(jule::Str("kill failed", 11)); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _20ba2c513_Cmd::_method_wait(void) {
	if ((*this)._field__pid == -1LL) {
		return jule::Exceptional<jule::Int>(jule::Str("command is not spawned", 22));
	}
	jule::Int _5117_status = 0LL;
	if (_cwait(((signed*)((&(_5117_status)))),(*this)._field__pid,0LL) == -1LL) {
		return jule::Exceptional<jule::Int>(_20ba266b6_get_last_process_error());
	}
	(*this)._field__pid=-1LL;
	return jule::Exceptional<jule::Int>(jule::Any(),_5117_status);
}







std::ostream &operator<<(std::ostream &_Stream, const _20ba2c513_Cmd &_Src) {
	_Stream << "Cmd{";
	_Stream << "_fle:" << _Src._field__fle << ", ";
	_Stream << "_pid:" << _Src._field__pid << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20a25b99c_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b639c14_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b639c14_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20bcae960_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20bcae960_Decimal::_method_set(jule::Str _22922_s) {
	jule::Bool _22932_ok = jule::Bool();
	jule::Int _23017_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23017_i >= _22922_s.len()) {
		return _22932_ok;
	}
	{
		
		if (_22922_s[_23017_i] == '+') {
			_case_begin_5293286784:;
			{
				(_23017_i)++;
			}
		}
		else if (_22922_s[_23017_i] == '-') {
			_case_begin_5293286896:;
			{
				(*this)._field_neg=true;
				(_23017_i)++;
			}
		}
		_match_end_5293285872:;
	}
	jule::Bool _24717_sawdot = false;
	jule::Bool _24817_sawdigits = false;
	for (; _23017_i < _22922_s.len(); (_23017_i)++) {
		{
			{
				
				if (_22922_s[_23017_i] == '.') {
					_case_begin_5293293216:;
					{
						if (_24717_sawdot) {
							return _22932_ok;
						}
						_24717_sawdot=true;
						(*this)._field_dp=(*this)._field_nd;
						goto _iter_next_5293286512;
					}
				}
				else if (('0' <= _22922_s[_23017_i]) && (_22922_s[_23017_i] <= '9')) {
					_case_begin_5293293328:;
					{
						_24817_sawdigits=true;
						if ((_22922_s[_23017_i] == '0') && ((*this)._field_nd == 0LL)) {
							((*this)._field_dp)--;
							goto _iter_next_5293286512;
						}
						if ((*this)._field_nd < 800LL) {
							(*this)._field_d[(*this)._field_nd]=_22922_s[_23017_i];
							((*this)._field_nd)++;
						} else if (_22922_s[_23017_i] != '0') {
							(*this)._field_trunc=true;
						}
						goto _iter_next_5293286512;
					}
				}
				_match_end_5293292992:;
			}
			goto _iter_end_5293286512;
		}
	_iter_next_5293286512:;
	}
	_iter_end_5293286512:;
	if ((!(_24817_sawdigits))) {
		return _22932_ok;
	}
	if ((!(_24717_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23017_i < _22922_s.len()) && (_20b6918b4_lower(_22922_s[_23017_i]) == 'e')) {
		(_23017_i)++;
		if (_23017_i >= _22922_s.len()) {
			return _22932_ok;
		}
		jule::Int _29121_esign = 1LL;
		if (_22922_s[_23017_i] == '+') {
			(_23017_i)++;
		} else if (_22922_s[_23017_i] == '-') {
			(_23017_i)++;
			_29121_esign=-1LL;
		}
		if (((_23017_i >= _22922_s.len()) || (_22922_s[_23017_i] < '0')) || (_22922_s[_23017_i] > '9')) {
			return _22932_ok;
		}
		jule::Int _30121_e = 0LL;
		for (; (_23017_i < _22922_s.len()) && (('0' <= _22922_s[_23017_i]) && (_22922_s[_23017_i] <= '9')); (_23017_i)++) {
			{
				if (_30121_e < 10000LL) {
					_30121_e=static_cast<jule::Int>(((_30121_e * 10LL) + static_cast<jule::Int>(_22922_s[_23017_i])) - '0');
				}
			}
		_iter_next_5293308480:;
		}
		_iter_end_5293308480:;
		(*this)._field_dp+=static_cast<jule::Int>(_30121_e * _29121_esign);
	}
	if (_23017_i != _22922_s.len()) {
		return _22932_ok;
	}
	_22932_ok=true;
	return _22932_ok;
}



inline std::tuple<jule::U64,jule::Bool> _20bcae960_Decimal::_method_float_bits(_20b639c14_FloatInfo& _31830_flt) {
	jule::U64 _31848_b = jule::U64();
	jule::Bool _31856_overflow = jule::Bool();
	jule::Int _31917_exp = 0LL;
	jule::U64 _32017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	_31917_exp=0LL;
	while ((*this)._field_dp > 0LL) {
		{
			jule::Int _34521_n = 0LL;
			if ((*this)._field_dp >= _20b657ced_POWTAB.len()) {
				_34521_n=27LL;
			} else {
				_34521_n=_20b657ced_POWTAB[(*this)._field_dp];
			}
			(*this)._method_shift(static_cast<jule::Int>((-(_34521_n))));
			_31917_exp+=_34521_n;
		}
	_iter_next_5293327216:;
	}
	_iter_end_5293327216:;
	while (((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d.__at(0LL) < '5'))) {
		{
			jule::Int _35521_n = 0LL;
			if ((-((*this)._field_dp)) >= _20b657ced_POWTAB.len()) {
				_35521_n=27LL;
			} else {
				_35521_n=_20b657ced_POWTAB[(-((*this)._field_dp))];
			}
			(*this)._method_shift(_35521_n);
			_31917_exp-=_35521_n;
		}
	_iter_next_5293330528:;
	}
	_iter_end_5293330528:;
	(_31917_exp)--;
	if (_31917_exp < (_31830_flt._field_bias + 1LL)) {
		jule::Int _37217_n = (_31830_flt._field_bias + 1LL) - _31917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_37217_n))));
		_31917_exp+=_37217_n;
	}
	if ((_31917_exp - _31830_flt._field_bias) >= static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(static_cast<jule::Int>(1LL + _31830_flt._field_mantbits)));
	_32017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_32017_mant == (2LL << _31830_flt._field_mantbits)) {
		_32017_mant>>=1LL;
		(_31917_exp)++;
		if ((_31917_exp - _31830_flt._field_bias) >= static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_32017_mant & (1LL << _31830_flt._field_mantbits)) == 0LL) {
		_31917_exp=_31830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_32017_mant=0LL;
	_31917_exp=static_cast<jule::Int>(static_cast<jule::Int>(((1LL << _31830_flt._field_expbits) - 1LL) + static_cast<jule::Uint>(_31830_flt._field_bias)));
	_31856_overflow=true;
	_julec_label_out:;
	jule::U64 _40817_bits = _32017_mant & ((static_cast<jule::U64>(1LLU) << _31830_flt._field_mantbits) - 1LL);
	_40817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_31917_exp - _31830_flt._field_bias) & static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) << _31830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_40817_bits|=static_cast<jule::Uint>((1LL << _31830_flt._field_mantbits) << _31830_flt._field_expbits);
	}
	_31848_b = _40817_bits;
	return std::make_tuple(_31848_b,_31856_overflow);
}



inline void _20bcae960_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>();
	jule::Int _15617_n = 0LL;
	while (_15229_v > 0LL) {
		{
			jule::U64 _15817_v1 = jule::unsafe_div(_15229_v,10LL);
			_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
			_15317_buf[_15617_n]=static_cast<jule::U8>(static_cast<jule::U8>(_15229_v + '0'));
			(_15617_n)++;
			_15229_v=_15817_v1;
		}
	_iter_next_5293363968:;
	}
	_iter_end_5293363968:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	for (; _15617_n >= 0LL; (_15617_n)--) {
		{
			(*this)._field_d[(*this)._field_nd]=_15317_buf[_15617_n];
			((*this)._field_nd)++;
		}
	_iter_next_5293367632:;
	}
	_iter_end_5293367632:;
	(*this)._field_dp=(*this)._field_nd;
	_20bcae960_trim((*this));
}



inline void _20bcae960_Decimal::_method_shift(jule::Int _17728_k) {
	{
		
		if ((*this)._field_nd == 0LL) {
			_case_begin_5293372624:;
		}
		else if (_17728_k > 0LL) {
			_case_begin_5293372736:;
			{
				while (_17728_k > 60LLU) {
					{
						_20bcae960_left_shift((*this),60LLU);
						_17728_k-=60LLU;
					}
				_iter_next_5293373424:;
				}
				_iter_end_5293373424:;
				_20bcae960_left_shift((*this),static_cast<jule::Uint>(static_cast<jule::Uint>(_17728_k)));
			}
		}
		else if (_17728_k < 0LL) {
			_case_begin_5293372848:;
			{
				while (_17728_k < -60LL) {
					{
						_20bcae960_right_shift((*this),60LLU);
						_17728_k+=60LLU;
					}
				_iter_next_5293375280:;
				}
				_iter_end_5293375280:;
				_20bcae960_right_shift((*this),static_cast<jule::Uint>(static_cast<jule::Uint>((-(_17728_k)))));
			}
		}
		_match_end_5293372384:;
	}
}



inline void _20bcae960_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_20bcae960_trim((*this));
}



inline void _20bcae960_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	for (; _21217_i >= 0LL; (_21217_i)--) {
		{
			jule::U8 _21417_c = (*this)._field_d[_21217_i];
			if (_21417_c < '9') {
				((*this)._field_d[_21217_i])++;
				(*this)._field_nd=static_cast<jule::Int>(_21217_i + 1LL);
				return;
			}
		}
	_iter_next_5293384528:;
	}
	_iter_end_5293384528:;
	(*this)._field_d.__at(0LL)='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _20bcae960_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_20bcae960_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _20bcae960_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	for (; (_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd); (_25017_i)++) {
		{
			_25117_n=static_cast<jule::U64>((_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[_25017_i] - '0'));
		}
	_iter_next_5293396304:;
	}
	_iter_end_5293396304:;
	for (; _25017_i < (*this)._field_dp; (_25017_i)++) {
		{
			_25117_n*=10LL;
		}
	_iter_next_5293402144:;
	}
	_iter_end_5293402144:;
	if (_20bcae960_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _20bcae960_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _20c47803a_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return 0LL;
	}
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_5293795568:;
			{
				return 5LL;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_5293795664:;
			{
				return 4LL;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_5293795760:;
			{
				return 3LL;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_5293795856:;
			{
				return 2LL;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_5293796464:;
			{
				return 1LL;
			}
		}
		else {
			_case_begin_5293796064:;
			{
				return 0LL;
			}
		}
		_match_end_5293794720:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20c47803a_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c4792c2_File::_method_is_ok(void) {
	({
		auto except = _20a252e5a_Status::_static_method_of((*this)._field__path);
		if (!except.ok()) {
			return false;
		}
	});
	return true;
}



inline void _20c4792c2_File::_method_fill(jule::Slice<jule::U8> _2431_data) {
	(*this)._field_data=_2431_data;
}



inline jule::Str _20c4792c2_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _20c4792c2_File::_method_dir(void) {
	return _20a3911b9_dir((*this)._field__path);
}



inline jule::Str _20c4792c2_File::_method_name(void) {
	return _20a3911b9_base((*this)._field__path);
}



inline jule::Uintptr _20c4792c2_File::_method_addr(void) {
	return static_cast<jule::Uintptr>(((jule::Uintptr)((&((*this))))));
}



inline jule::Slice<_20c47803a_Token> _20c4792c2_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _20c4792c2_File::_method_get_row(jule::Int _4426_row) {
	jule::Int _4517_n = 0LL;
	jule::Int _4617_line_start = 0LL;
	jule::Int _4717_i = 0LL;
	for (; _4717_i < (*this)._field_data.len(); (_4717_i)++) {
		{
			if ((*this)._field_data[_4717_i] != '\n') {
				goto _iter_next_5293820272;
			}
			(_4517_n)++;
			if (_4517_n == _4426_row) {
				return static_cast<jule::Str>((*this)._field_data.slice(_4617_line_start,_4717_i));
			}
			_4617_line_start=static_cast<jule::Int>(_4717_i + 1LL);
		}
	_iter_next_5293820272:;
	}
	_iter_end_5293820272:;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4792c2_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c47ab20_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _20c47ab20_Lex::_method_push_err(jule::Str _40427_fmt,jule::Slice<jule::Any> _40440_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_20c47ab20_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_40427_fmt,_40440_args));
}



inline void _20c47ab20_Lex::_method_push_err_tok(_20c47803a_Token& _40932_token,jule::Str _40946_fmt) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_20c47ab20_make_err(_40932_token._field_row,_40932_token._field_column,(*this)._field_file,_40946_fmt,jule::Slice<jule::Any>()));
}



inline void _20c47ab20_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	while ((*this)._field_pos < (*((*this)._field_file))._field_data.len()) {
		{
			_20c47803a_Token _41921_token = (*this)._method_token();
			if (_41921_token._field_id != 0LLU) {
				(*this)._field_tokens = jule::alloc_for_append((*this)._field_tokens,1);(*this)._field_tokens.push(_41921_token);
			}
		}
	_iter_next_5293833856:;
	}
	_iter_end_5293833856:;
}



inline jule::Str _20c47ab20_Lex::_method_id(jule::Slice<jule::U8>& _42822_ln) {
	if (_42822_ln.len() == 0LL) {
		return jule::Str();
	}
	jule::I32 _43214_r;
	jule::Int _43221_i;
	std::tie(_43214_r,_43221_i) = _20a3472e6_decode_rune(_42822_ln);
	if ((_43214_r != '_') && (!(_20c47803a_is_letter(_43214_r)))) {
		return jule::Str();
	}
	while (_43221_i < _42822_ln.len()) {
		{
			jule::I32 _43818_r;
			jule::Int _43821_n;
			std::tie(_43818_r,_43821_n) = _20a3472e6_decode_rune(_42822_ln.slice(_43221_i));
			if (((_43818_r != '_') && (!(_20c47803a_is_decimal(static_cast<jule::U8>(static_cast<jule::U8>(_43818_r)))))) && (!(_20c47803a_is_letter(_43818_r)))) {
				(*this)._field_pos+=_43221_i;
				return static_cast<jule::Str>(_42822_ln.slice(0LL,_43221_i));
			}
			_43221_i+=_43821_n;
		}
	_iter_next_5293845872:;
	}
	_iter_end_5293845872:;
	(*this)._field_pos+=static_cast<jule::I64>(_42822_ln.len());
	return static_cast<jule::Str>(_42822_ln);
}



inline jule::Slice<jule::U8> _20c47ab20_Lex::_method_resume(void) {
	jule::Int _45317_i = (*this)._field_pos;
	for (; _45317_i < (*((*this)._field_file))._field_data.len(); (_45317_i)++) {
		{
			jule::I32 _45517_r = static_cast<jule::I32>((*((*this)._field_file))._field_data[_45317_i]);
			if (_20c47803a_is_space(_45517_r)) {
				((*this)._field_pos)++;
				{
					auto &_match_expr{ _45517_r };
					
					if (_match_expr == '\n') {
						_case_begin_5293859696:;
						{
							(*this)._method_new_line();
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_5293859792:;
						{
							(*this)._field_column+=8LL;
						}
					}
					else {
						_case_begin_5293857792:;
						{
							((*this)._field_column)++;
						}
					}
					_match_end_5293858304:;
				}
				goto _iter_next_5293854016;
			}
			jule::Int _46621_j = _45317_i;
			for (; _46621_j < (*((*this)._field_file))._field_data.len(); (_46621_j)++) {
				{
					if ((*((*this)._field_file))._field_data[_46621_j] == '\n') {
						goto _iter_end_5293857008;
					}
				}
			_iter_next_5293857008:;
			}
			_iter_end_5293857008:;
			return (*((*this)._field_file))._field_data.slice(_45317_i,_46621_j);
		}
	_iter_next_5293854016:;
	}
	_iter_end_5293854016:;
	return nullptr;
}



inline void _20c47ab20_Lex::_method_lex_line_comment(_20c47803a_Token& _47840_token) {
	jule::Int _47913_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*((*this)._field_file))._field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _48317_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if ((_48317_r == '\n') || (_48317_r == '\r')) {
				if ((*this)._method_is_first_token_of_line()) {
					_47840_token._field_id=18LLU;
					_47840_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_47913_start,(*this)._field_pos));
				}
				return;
			}
		}
	_iter_next_5293868048:;
	}
	_iter_end_5293868048:;
	if ((*this)._method_is_first_token_of_line()) {
		_47840_token._field_id=18LLU;
		_47840_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_47913_start));
	}
}



inline void _20c47ab20_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*((*this)._field_file))._field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _50217_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_50217_r == '\r') {
				goto _iter_next_5293878320;
			}
			if (_50217_r == '\n') {
				(*this)._method_new_line();
				goto _iter_next_5293878320;
			}
			(*this)._field_column+=1LL;
			if (((((*this)._field_pos + 1LL) < (*((*this)._field_file))._field_data.len()) && (_50217_r == '*')) && ((*((*this)._field_file))._field_data[(*this)._field_pos + 1LL] == '/')) {
				(*this)._field_column+=2LL;
				(*this)._field_pos+=2LL;
				return;
			}
		}
	_iter_next_5293878320:;
	}
	_iter_end_5293878320:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _20c47ab20_Lex::_method_num(jule::Slice<jule::U8>& _52323_txt) {
	jule::Str _52338_lit = jule::Str();
	_52338_lit=_20c47ab20_hex_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_20c47ab20_octal_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_20c47ab20_binary_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_20c47ab20_common_num(_52323_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_52338_lit.len());
	return _52338_lit;
}



inline jule::Str _20c47ab20_Lex::_method_escape_seq(jule::Slice<jule::U8>& _54230_txt) {
	jule::Str _54317_seq = jule::Str();
	if (_54230_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto &_match_expr{ _54230_txt[1LL] };
		
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_5293905152:;
			{
				(*this)._field_pos+=2LL;
				return static_cast<jule::Str>(_54230_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_5293905344:;
			{
				_54317_seq=_20c47ab20_big_unicode_point_escape(_54230_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_5293906224:;
			{
				_54317_seq=_20c47ab20_little_unicode_point_escape(_54230_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_5293904704:;
			{
				_54317_seq=_20c47ab20_hex_byte_escape(_54230_txt);
			}
		}
		else {
			_case_begin_5293904400:;
			{
				_54317_seq=_20c47ab20_byte_escape(_54230_txt);
			}
		}
		_match_end_5293904064:;
	}
	_julec_label_end:;
	if (_54317_seq == jule::Str()) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	}
	(*this)._field_pos+=static_cast<jule::I64>(_54317_seq.len());
	return _54317_seq;
}



inline jule::Str _20c47ab20_Lex::_method_get_rune(jule::Slice<jule::U8>& _57628_txt,jule::Bool _57641_raw) {
	if ((!(_57641_raw)) && (_57628_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_57628_txt);
	}
	jule::I32 _58114_r;
	jule::Int _58117_n;
	std::tie(_58114_r,_58117_n) = _20a3472e6_decode_rune(_57628_txt);
	(*this)._field_pos+=_58117_n;
	return static_cast<jule::Str>(_58114_r);
}



inline jule::Str _20c47ab20_Lex::_method_lex_rune(jule::Slice<jule::U8>& _58628_txt) {
	jule::Str _58717_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _58917_n = 0LL;
	jule::Int _59017_i = 1LL;
	for (; _59017_i < _58628_txt.len(); (_59017_i)++) {
		{
			if (_58628_txt[_59017_i] == '\r') {
				goto _iter_next_5293927184;
			}
			if (_58628_txt[_59017_i] == '\n') {
				(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*this)._field_pos)++;
				(*this)._method_new_line();
				return jule::Str();
			}
			jule::Slice<jule::U8> _60217_part = _58628_txt.slice(_59017_i);
			jule::Str _60317_r = (*this)._method_get_rune(_60217_part,false);
			_58717_run+=_60317_r;
			jule::I64 _60517_length = _60317_r.len();
			(*this)._field_column+=_60517_length;
			if (_60317_r == jule::Str("'", 1)) {
				((*this)._field_pos)++;
				goto _iter_end_5293927184;
			}
			if (_60517_length > 1LL) {
				_59017_i+=static_cast<jule::I64>(_60517_length - 1LL);
			}
			(_58917_n)++;
		}
	_iter_next_5293927184:;
	}
	_iter_end_5293927184:;
	if (_58917_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if (_58917_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	}
	return _58717_run;
}



inline jule::Str _20c47ab20_Lex::_method_lex_str(void) {
	jule::Str _62717_s = jule::Str();
	jule::U8 _62813_mark = (*((*this)._field_file))._field_data[(*this)._field_pos];
	((*this)._field_pos)++;
	jule::Bool _63013_raw = _62813_mark == '`';
	_62717_s+=static_cast<jule::Str>(_62813_mark);
	((*this)._field_column)++;
	while ((*this)._field_pos < (*((*this)._field_file))._field_data.len()) {
		{
			jule::U8 _63517_ch = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_63517_ch == '\r') {
				goto _iter_next_5293948672;
			}
			if (_63517_ch == '\n') {
				(*this)._method_new_line();
				if ((!(_63013_raw))) {
					(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*this)._field_pos)++;
					return jule::Str();
				}
			}
			jule::Slice<jule::U8> _64721_part = (*((*this)._field_file))._field_data.slice((*this)._field_pos);
			jule::Str _64817_r = (*this)._method_get_rune(_64721_part,_63013_raw);
			_62717_s+=_64817_r;
			(*this)._field_column+=static_cast<jule::I64>(_64817_r.len());
			if (_63517_ch == _62813_mark) {
				goto _iter_end_5293948672;
			}
		}
	_iter_next_5293948672:;
	}
	_iter_end_5293948672:;
	return _62717_s;
}



inline jule::Bool _20c47ab20_Lex::_method_is_first_token_of_line(void) {
	return (*this)._field_column == 1LL;
}



inline void _20c47ab20_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _20c47ab20_Lex::_method_is_op(jule::Slice<jule::U8>& _66825_txt,jule::Str _66838_kind,jule::Uint _66849_id,_20c47803a_Token& _66867_t) {
	if ((!(_20c47ab20_bytes_has_prefix(_66825_txt,_66838_kind)))) {
		return false;
	}
	_66867_t._field_kind=_66838_kind;
	_66867_t._field_id=_66849_id;
	(*this)._field_pos+=static_cast<jule::I64>(_66838_kind.len());
	return true;
}



inline jule::Bool _20c47ab20_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _67932_txt,_20c47803a_Token& _67950_tok) {
	{
		auto &expr = _20c47ab20_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_5293970816:;
		if (it != expr.end()) {
			_20c47ab20_KindPair &_20c47ab20_pair = *it;
			{
				if ((*this)._method_is_op(_67932_txt,_20c47ab20_pair._field_kind,_20c47ab20_pair._field_id,_67950_tok)) {
					return true;
				}
			}
			_iter_next_5293970816:;
			++it;
			goto _iter_begin_5293970816;
		}
		_iter_end_5293970816:;
	}
	return false;
}



inline jule::Bool _20c47ab20_Lex::_method_lex_id(jule::Slice<jule::U8>& _68926_txt,_20c47803a_Token& _68944_t) {
	jule::Str _69013_lex = (*this)._method_id(_68926_txt);
	if (_69013_lex == jule::Str()) {
		return false;
	}
	_68944_t._field_kind=_69013_lex;
	_68944_t._field_id=2LLU;
	return true;
}



inline jule::Bool _20c47ab20_Lex::_method_lex_num(jule::Slice<jule::U8>& _70027_txt,_20c47803a_Token& _70045_t) {
	jule::Str _70113_lex = (*this)._method_num(_70027_txt);
	if (_70113_lex == jule::Str()) {
		return false;
	}
	_70045_t._field_kind=_70113_lex;
	_70045_t._field_id=6LLU;
	return true;
}



inline _20c47803a_Token _20c47ab20_Lex::_method_token(void) {
	_20c47803a_Token _71317_t = _20c47803a_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _71513_txt = (*this)._method_resume();
	if (_71513_txt == nullptr) {
		return _71317_t;
	}
	_71317_t._field_column=(*this)._field_column;
	_71317_t._field_row=(*this)._field_row;
	{
		
		if ((*this)._method_lex_num(_71513_txt,_71317_t)) {
			_case_begin_5293992896:;
		}
		else if (_71513_txt[0LL] == '\'') {
			_case_begin_5293991904:;
			{
				_71317_t._field_kind=(*this)._method_lex_rune(_71513_txt);
				_71317_t._field_id=6LLU;
				return _71317_t;
			}
		}
		else if ((_71513_txt[0LL] == '\"') || (_71513_txt[0LL] == '`')) {
			_case_begin_5293989760:;
			{
				_71317_t._field_kind=(*this)._method_lex_str();
				_71317_t._field_id=6LLU;
				return _71317_t;
			}
		}
		else if (_20c47ab20_bytes_has_prefix(_71513_txt,jule::Str("//", 2))) {
			_case_begin_5293989856:;
			{
				(*this)._method_lex_line_comment(_71317_t);
				return _71317_t;
			}
		}
		else if (_20c47ab20_bytes_has_prefix(_71513_txt,jule::Str("/*", 2))) {
			_case_begin_5293989952:;
			{
				(*this)._method_lex_range_comment();
				return _71317_t;
			}
		}
		else if ((*this)._method_is_op(_71513_txt,jule::Str("(", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str(")", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("{", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("}", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("[", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("]", 1),3LLU,_71317_t) || (*this)._method_lex_basic_ops(_71513_txt,_71317_t)) {
			_case_begin_5293993856:;
		}
		else if ((*this)._method_lex_id(_71513_txt,_71317_t)) {
			_case_begin_5293993952:;
			{
				{
					auto &expr = _20c47ab20_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_5294008960:;
					if (it != expr.end()) {
						_20c47ab20_KindPair &_20c47ab20_pair = *it;
						{
							if (_20c47ab20_pair._field_kind == _71317_t._field_kind) {
								_71317_t._field_id=_20c47ab20_pair._field_id;
								goto _iter_end_5294008960;
							}
						}
						_iter_next_5294008960:;
						++it;
						goto _iter_begin_5294008960;
					}
					_iter_end_5294008960:;
				}
			}
		}
		else {
			_case_begin_5293987840:;
			{
				jule::I32 _76518_r;
				jule::Int _76521_sz;
				std::tie(_76518_r,_76521_sz) = _20a3472e6_decode_rune(_71513_txt);
				(*this)._method_push_err(jule::Str("undefined token: @", 18),jule::Slice<jule::Any>({jule::Any(_76518_r)}));
				((*this)._field_column)++;
				(*this)._field_pos+=_76521_sz;
				return _71317_t;
			}
		}
		_match_end_5293987760:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_71317_t._field_kind.len());
	return _71317_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c47ab20_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476126_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_SptrTypeDecl &_Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_PtrTypeDecl::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_ArrTypeDecl::_method_auto_sized(void) {
	return (*this)._field_size == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base != nullptr;
}



inline jule::Bool _20c476dc4_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4d35c3_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4d35c3_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4d7055_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _20c4d7055_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _20c4d7055_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _20c4d7055_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stmts.len();
}



inline jule::Bool _20c4d7055_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stmts.len();
}



inline void _20c4d7055_ScopeParser::_method_push_err(_20c47803a_Token _17827_token,jule::Str _17841_fmt) {
	(*((*this)._field_p))._method_push_err(_17827_token,_17841_fmt,jule::Slice<jule::Any>());
}



inline void _20c4d7055_ScopeParser::_method_push_suggestion(jule::Str _18134_fmt,jule::Slice<jule::Any> _18147_args) {
	(*((*this)._field_p))._method_push_suggestion(_18134_fmt,_18147_args);
}



inline void _20c4d7055_ScopeParser::_method_insert_as_next(jule::Slice<_20c47803a_Token>& _18538_tokens) {
	(*this)._field_stmts=jule::append((*this)._field_stmts.slice(0LL,(*this)._field_pos + 1LL),(*this)._field_stmts.slice((*this)._field_pos));
	(*this)._field_stmts[(*this)._field_pos + 1LL]=jule::new_struct<_20c4d7055_Stmt>(new( std::nothrow ) _20c4d7055_Stmt(_18538_tokens,jule::Bool()));
}



inline jule::Ptr<_20c4d7055_Stmt> _20c4d7055_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stmts[(*this)._field_pos];
}



inline jule::Ptr<_20c476dc4_ScopeTree> _20c4d7055_ScopeParser::_method_build_scope(jule::Slice<_20c47803a_Token>& _19535_tokens) {
	jule::Ptr<_20c476dc4_ScopeTree> _19617_s = _20c4d7055_new_scope();
	(*(_19617_s))._field_parent=(*this)._field_s;
	_20c4d7055_ScopeParser _19817_ssp = _20c4d7055_ScopeParser((*this)._field_p,jule::Ptr<_20c476dc4_ScopeTree>(),jule::Slice<jule::Ptr<_20c4d7055_Stmt>>(),jule::Int());
	_19817_ssp._method_build(_19535_tokens,_19617_s);
	return _19617_s;
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_var_st(jule::Slice<_20c47803a_Token>& _20536_tokens) {
	jule::Ptr<_20c476dc4_VarDecl> _20617_v = (*((*this)._field_p))._method_build_var(_20536_tokens);
	(*(_20617_v))._field_scope=(*this)._field_s;
	return jule::Any(_20617_v);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_ret_st(jule::Slice<_20c47803a_Token> _21135_tokens) {
	jule::Ptr<_20c476dc4_RetSt> _21217_st = jule::new_struct<_20c476dc4_RetSt>(new( std::nothrow ) _20c476dc4_RetSt(_21135_tokens[0LL],jule::Ptr<_20c476dc4_Expr>()));
	if (_21135_tokens.len() > 1LL) {
		_21135_tokens=_21135_tokens.slice(1LL);
		(*(_21217_st))._field_expr=(*((*this)._field_p))._method_build_expr(_21135_tokens);
	}
	return jule::Any(_21217_st);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_while_next_iter(jule::Ptr<_20c4d7055_Stmt>& _22245_s) {
	jule::Ptr<_20c476dc4_Iter> _22317_it = jule::new_struct<_20c476dc4_Iter>(new( std::nothrow ) _20c476dc4_Iter((*(_22245_s))._field_tokens[0LL],jule::Any(),jule::Ptr<_20c476dc4_ScopeTree>()));
	jule::Slice<_20c47803a_Token> _22617_tokens = (*(_22245_s))._field_tokens.slice(1LL);
	jule::Ptr<_20c476dc4_WhileKind> _22717_kind = jule::new_struct<_20c476dc4_WhileKind>(new( std::nothrow ) _20c476dc4_WhileKind());
	if (_22617_tokens.len() > 0LL) {
		(*(_22717_kind))._field_expr=(*((*this)._field_p))._method_build_expr(_22617_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err((*(_22317_it))._field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_22617_tokens=(*((*this)._method_next()))._field_tokens;
	jule::Slice<_20c47803a_Token> _23917_st_tokens = _20c4aa1e3_get_block_expr(_22617_tokens);
	if (_23917_st_tokens.len() > 0LL) {
		jule::Ptr<_20c4d7055_Stmt> _24121_stmt = jule::new_struct<_20c4d7055_Stmt>(new( std::nothrow ) _20c4d7055_Stmt(_23917_st_tokens,(*(_22245_s))._field_terminated));
		(*(_22717_kind))._field_next_token=_23917_st_tokens[0LL];
		(*(_22717_kind))._field_next=(*this)._method_build_st(_24121_stmt);
	}
	jule::I64 _24917_i = _23917_st_tokens.len();
	jule::Slice<_20c47803a_Token> _25017_block_tokens = _20c7de1a3_range(_24917_i,jule::Str("{", 1),jule::Str("}", 1),_22617_tokens);
	if (_25017_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_22317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_24917_i < _22617_tokens.len()) {
		(*this)._method_push_err(_22617_tokens[_24917_i],jule::Str("invalid syntax", 14));
	}
	(*(_22317_it))._field_scope=(*this)._method_build_scope(_25017_block_tokens);
	(*(_22317_it))._field_kind=jule::Any(_22717_kind);
	return jule::Any(_22317_it);
}



inline jule::Ptr<_20c476dc4_WhileKind> _20c4d7055_ScopeParser::_method_build_while_iter_kind(jule::Slice<_20c47803a_Token>& _26745_tokens) {
	return jule::new_struct<_20c476dc4_WhileKind>(new( std::nothrow ) _20c476dc4_WhileKind((*((*this)._field_p))._method_build_expr(_26745_tokens),jule::Any(),_20c47803a_Token()));
}



inline jule::Slice<jule::Slice<_20c47803a_Token>> _20c4d7055_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_20c47803a_Token>& _27350_toks) {
	jule::Slice<jule::Slice<_20c47803a_Token>> _27418_vars;
	jule::Slice<_20a25b99c_Log> _27424_errs;
	std::tie(_27418_vars,_27424_errs) = _20c7de1a3_parts(_27350_toks,8LLU,true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_27424_errs);
	return _27418_vars;
}



inline jule::Ptr<_20c476dc4_VarDecl> _20c4d7055_ScopeParser::_method_build_range_kind_key(jule::Slice<_20c47803a_Token>& _27944_tokens) {
	if (_27944_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_20c476dc4_VarDecl> _28317_key = jule::new_struct<_20c476dc4_VarDecl>(new( std::nothrow ) _20c476dc4_VarDecl(jule::Ptr<_20c476dc4_ScopeTree>(),_27944_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20c476dc4_CommentGroup>(),jule::Ptr<_20c476dc4_TypeDecl>(),jule::Ptr<_20c476dc4_Expr>()));
	if ((*(_28317_key))._field_token._field_id == 36LLU) {
		(*(_28317_key))._field_mutable=true;
		if (_27944_tokens.len() == 1LL) {
			(*this)._method_push_err((*(_28317_key))._field_token,jule::Str("invalid syntax", 14));
		}
		(*(_28317_key))._field_token=_27944_tokens[1LL];
	} else if (_27944_tokens.len() > 1LL) {
		(*this)._method_push_err(_27944_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if ((*(_28317_key))._field_token._field_id != 2LLU) {
		(*this)._method_push_err((*(_28317_key))._field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_28317_key))._field_ident=(*(_28317_key))._field_token._field_kind;
	return _28317_key;
}



inline jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> _20c4d7055_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_20c47803a_Token>>& _30445_parts) {
	jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> _30517_keys = nullptr;
	{
		auto &expr = _30445_parts;
		auto it = expr.begin();
		_iter_begin_5294775680:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4d7055_tokens = *it;
			{
				_30517_keys.push((*this)._method_build_range_kind_key(_20c4d7055_tokens));
			}
			_iter_next_5294775680:;
			++it;
			goto _iter_begin_5294775680;
		}
		_iter_end_5294775680:;
	}
	return _30517_keys;
}



inline void _20c4d7055_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ptr<_20c476dc4_RangeKind>& _31251_rng,jule::Slice<_20c47803a_Token>& _31273_tokens) {
	jule::Slice<jule::Slice<_20c47803a_Token>> _31317_key_tokens = (*this)._method_get_range_kind_keys_tokens(_31273_tokens);
	if (_31317_key_tokens.len() == 0LL) {
		return;
	}
	if (_31317_key_tokens.len() > 2LL) {
		(*this)._method_push_err((*(_31251_rng))._field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> _32017_keys = (*this)._method_build_range_kind_keys(_31317_key_tokens);
	(*(_31251_rng))._field_key_a=_32017_keys[0LL];
	if (_32017_keys.len() > 1LL) {
		(*(_31251_rng))._field_key_b=_32017_keys[1LL];
	}
}



inline void _20c4d7055_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ptr<_20c476dc4_RangeKind>& _32754_rng,jule::Slice<_20c47803a_Token>& _32776_tokens) {
	jule::Int _32817_i = 0LL;
	jule::Slice<_20c47803a_Token> _32917_rang = _20c7de1a3_range(_32817_i,jule::Str("(", 1),jule::Str(")", 1),_32776_tokens);
	if (_32817_i < _32776_tokens.len()) {
		(*this)._method_push_err((*(_32754_rng))._field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_32754_rng,_32917_rang);
}



inline void _20c4d7055_ScopeParser::_method_setup_range_kind_keys(jule::Ptr<_20c476dc4_RangeKind>& _33645_rng,jule::Slice<_20c47803a_Token>& _33667_tokens) {
	if (_33667_tokens[0LL]._field_id == 3LLU) {
		if (_33667_tokens[0LL]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_33667_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_33645_rng,_33667_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_33645_rng,_33667_tokens);
}



inline jule::Ptr<_20c476dc4_RangeKind> _20c4d7055_ScopeParser::_method_build_range_iter_kind(jule::Slice<_20c47803a_Token>& _34845_var_tokens,jule::Slice<_20c47803a_Token>& _34914_expr_tokens,_20c47803a_Token& _34941_in_token) {
	jule::Ptr<_20c476dc4_RangeKind> _35017_rng = jule::new_struct<_20c476dc4_RangeKind>(new( std::nothrow ) _20c476dc4_RangeKind(_34941_in_token,jule::Ptr<_20c476dc4_Expr>(),jule::Ptr<_20c476dc4_VarDecl>(),jule::Ptr<_20c476dc4_VarDecl>()));
	if (_34914_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_35017_rng))._field_in_token,jule::Str("expression missing", 18));
		return _35017_rng;
	}
	(*(_35017_rng))._field_expr=(*((*this)._field_p))._method_build_expr(_34914_expr_tokens);
	if (_34845_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_35017_rng,_34845_var_tokens);
	}
	return _35017_rng;
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_common_iter_kind(jule::Slice<_20c47803a_Token>& _36446_tokens,_20c47803a_Token& _36464_err_tok) {
	jule::Int _36517_brace_n = 0LL;
	{
		auto &expr = _36446_tokens;
		auto it = expr.begin();
		_iter_begin_5294817104:;
		if (it != expr.end()) {
			jule::Int _20c4d7055_i = it - expr.begin();
			_20c47803a_Token _20c4d7055_tok = *it;
			{
				if (_20c4d7055_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4d7055_tok._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5294821712:;
							{
								(_36517_brace_n)++;
								goto _iter_next_5294817104;
							}
						}
						else {
							_case_begin_5294819920:;
							{
								(_36517_brace_n)--;
							}
						}
						_match_end_5294820032:;
					}
				}
				if (_36517_brace_n != 0LL) {
					goto _iter_next_5294817104;
				}
				{
					auto &_match_expr{ _20c4d7055_tok._field_id };
					
					if (_match_expr == 15LLU) {
						_case_begin_5294819200:;
						{
							jule::Slice<_20c47803a_Token> _38425_decl_tokens = _36446_tokens.slice(0LL,_20c4d7055_i);
							jule::Slice<_20c47803a_Token> _38525_expr_tokens = _36446_tokens.slice(_20c4d7055_i + 1LL);
							return jule::Any((*this)._method_build_range_iter_kind(_38425_decl_tokens,_38525_expr_tokens,_20c4d7055_tok));
						}
					}
					_match_end_5294822288:;
				}
			}
			_iter_next_5294817104:;
			++it;
			_20c4d7055_i++;
			goto _iter_begin_5294817104;
		}
		_iter_end_5294817104:;
	}
	return jule::Any((*this)._method_build_while_iter_kind(_36446_tokens));
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_common_iter(jule::Slice<_20c47803a_Token> _39240_tokens) {
	jule::Ptr<_20c476dc4_Iter> _39317_it = jule::new_struct<_20c476dc4_Iter>(new( std::nothrow ) _20c476dc4_Iter(_39240_tokens[0LL],jule::Any(),jule::Ptr<_20c476dc4_ScopeTree>()));
	_39240_tokens=_39240_tokens.slice(1LL);
	if (_39240_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_39317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	jule::Slice<_20c47803a_Token> _40317_expr_tokens = _20c4aa1e3_get_block_expr(_39240_tokens);
	if (_40317_expr_tokens.len() > 0LL) {
		(*(_39317_it))._field_kind=(*this)._method_build_common_iter_kind(_40317_expr_tokens,(*(_39317_it))._field_token);
	}
	jule::I64 _40717_i = _40317_expr_tokens.len();
	jule::Slice<_20c47803a_Token> _40817_scope_tokens = _20c7de1a3_range(_40717_i,jule::Str("{", 1),jule::Str("}", 1),_39240_tokens);
	if (_40817_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_39317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_40717_i < _39240_tokens.len()) {
		(*this)._method_push_err(_39240_tokens[_40717_i],jule::Str("invalid syntax", 14));
	}
	(*(_39317_it))._field_scope=(*this)._method_build_scope(_40817_scope_tokens);
	return jule::Any(_39317_it);
}



inline jule::Any _20c4d7055_ScopeParser::_method_buid_iter_st(jule::Ptr<_20c4d7055_Stmt>& _42236_st) {
	if ((*(_42236_st))._field_terminated) {
		return (*this)._method_build_while_next_iter(_42236_st);
	}
	return (*this)._method_build_common_iter((*(_42236_st))._field_tokens);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_break_st(jule::Slice<_20c47803a_Token>& _42938_tokens) {
	jule::Ptr<_20c476dc4_BreakSt> _43017_brk = jule::new_struct<_20c476dc4_BreakSt>(new( std::nothrow ) _20c476dc4_BreakSt(_42938_tokens[0LL],_20c47803a_Token()));
	if (_42938_tokens.len() > 1LL) {
		if (_42938_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_43017_brk))._field_label=_42938_tokens[1LL];
			if (_42938_tokens.len() > 2LL) {
				(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_43017_brk);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_cont_st(jule::Slice<_20c47803a_Token>& _44737_tokens) {
	jule::Ptr<_20c476dc4_ContSt> _44817_cont = jule::new_struct<_20c476dc4_ContSt>(new( std::nothrow ) _20c476dc4_ContSt(_44737_tokens[0LL],_20c47803a_Token()));
	if (_44737_tokens.len() > 1LL) {
		if (_44737_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_44817_cont))._field_label=_44737_tokens[1LL];
			if (_44737_tokens.len() > 2LL) {
				(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_44817_cont);
}



inline jule::Ptr<_20c476dc4_If> _20c4d7055_ScopeParser::_method_build_if(jule::Slice<_20c47803a_Token>& _46532_tokens) {
	jule::Ptr<_20c476dc4_If> _46617_model = jule::new_struct<_20c476dc4_If>(new( std::nothrow ) _20c476dc4_If(_46532_tokens[0LL],jule::Ptr<_20c476dc4_Expr>(),jule::Ptr<_20c476dc4_ScopeTree>()));
	_46532_tokens=_46532_tokens.slice(1LL);
	jule::Slice<_20c47803a_Token> _47017_expr_tokens = _20c4aa1e3_get_block_expr(_46532_tokens);
	jule::Int _47117_i = 0LL;
	if (_47017_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_46617_model))._field_token,jule::Str("expression missing", 18));
	} else {
		_47117_i=static_cast<jule::I64>(_47017_expr_tokens.len());
	}
	jule::Slice<_20c47803a_Token> _47717_scope_tokens = _20c7de1a3_range(_47117_i,jule::Str("{", 1),jule::Str("}", 1),_46532_tokens);
	if (_47717_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_46617_model))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_47117_i < _46532_tokens.len()) {
		if (_46532_tokens[_47117_i]._field_id == 17LLU) {
			_46532_tokens=_46532_tokens.slice(_47117_i);
		} else {
			(*this)._method_push_err(_46532_tokens[_47117_i],jule::Str("invalid syntax", 14));
			_46532_tokens=nullptr;
		}
	}
	(*(_46617_model))._field_expr=(*((*this)._field_p))._method_build_expr(_47017_expr_tokens);
	(*(_46617_model))._field_scope=(*this)._method_build_scope(_47717_scope_tokens);
	return _46617_model;
}



inline jule::Ptr<_20c476dc4_Else> _20c4d7055_ScopeParser::_method_build_else(jule::Slice<_20c47803a_Token>& _49734_tokens) {
	jule::Ptr<_20c476dc4_Else> _49817_els = jule::new_struct<_20c476dc4_Else>(new( std::nothrow ) _20c476dc4_Else(_49734_tokens[0LL],jule::Ptr<_20c476dc4_ScopeTree>()));
	_49734_tokens=_49734_tokens.slice(1LL);
	jule::Int _50217_i = 0LL;
	jule::Slice<_20c47803a_Token> _50317_scope_tokens = _20c7de1a3_range(_50217_i,jule::Str("{", 1),jule::Str("}", 1),_49734_tokens);
	if (_50317_scope_tokens == nullptr) {
		if (_50217_i < _49734_tokens.len()) {
			(*this)._method_push_err((*(_49817_els))._field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err((*(_49817_els))._field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	if (_50217_i < _49734_tokens.len()) {
		(*this)._method_push_err(_49734_tokens[_50217_i],jule::Str("invalid syntax", 14));
	}
	(*(_49817_els))._field_scope=(*this)._method_build_scope(_50317_scope_tokens);
	return _49817_els;
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_if_else_chain(jule::Slice<_20c47803a_Token> _52142_tokens) {
	jule::Ptr<_20c476dc4_Conditional> _52217_chain = jule::new_struct<_20c476dc4_Conditional>(new( std::nothrow ) _20c476dc4_Conditional((*this)._method_build_if(_52142_tokens),jule::Slice<jule::Ptr<_20c476dc4_If>>(),jule::Ptr<_20c476dc4_Else>()));
	if ((*(_52217_chain))._field_head == nullptr) {
		return jule::Any(nullptr);
	}
	while (_52142_tokens.len() != 0LL) {
		{
			if (_52142_tokens[0LL]._field_id != 17LLU) {
				goto _iter_end_5294912816;
			}
			if ((_52142_tokens.len() > 1LL) && (_52142_tokens[1LL]._field_id == 16LLU)) {
				_52142_tokens=_52142_tokens.slice(1LL);
				jule::Ptr<_20c476dc4_If> _53425_elif = (*this)._method_build_if(_52142_tokens);
				(*(_52217_chain))._field_tail = jule::alloc_for_append((*(_52217_chain))._field_tail,1);(*(_52217_chain))._field_tail.push(_53425_elif);
				goto _iter_next_5294912816;
			}
			(*(_52217_chain))._field_default=(*this)._method_build_else(_52142_tokens);
			goto _iter_end_5294912816;
		}
	_iter_next_5294912816:;
	}
	_iter_end_5294912816:;
	return jule::Any(_52217_chain);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_comment_st(_20c47803a_Token& _54436_token) {
	return jule::Any(_20c7de1a3_build_comment(_54436_token));
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_co_call_st(jule::Slice<_20c47803a_Token> _54839_tokens) {
	jule::Ptr<_20c476dc4_CoExpr> _54917_c = jule::new_struct<_20c476dc4_CoExpr>(new( std::nothrow ) _20c476dc4_CoExpr(_54839_tokens[0LL],jule::Ptr<_20c476dc4_Expr>()));
	_54839_tokens=_54839_tokens.slice(1LL);
	(*(_54917_c))._field_expr=(*((*this)._field_p))._method_build_expr(_54839_tokens);
	return jule::Any(_54917_c);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_goto_st(jule::Slice<_20c47803a_Token>& _55737_tokens) {
	jule::Ptr<_20c476dc4_GotoSt> _55817_gt = jule::new_struct<_20c476dc4_GotoSt>(new( std::nothrow ) _20c476dc4_GotoSt(_55737_tokens[0LL],_20c47803a_Token()));
	if (_55737_tokens.len() == 1LL) {
		(*this)._method_push_err((*(_55817_gt))._field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if (_55737_tokens.len() > 2LL) {
		(*this)._method_push_err(_55737_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_20c47803a_Token _56717_ident_token = _55737_tokens[1LL];
	if (_56717_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_56717_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return jule::Any(_55817_gt);
	}
	(*(_55817_gt))._field_label=_56717_ident_token;
	return jule::Any(_55817_gt);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_fall_st(jule::Slice<_20c47803a_Token>& _57737_tokens) {
	jule::Ptr<_20c476dc4_FallSt> _57817_fll = jule::new_struct<_20c476dc4_FallSt>(new( std::nothrow ) _20c476dc4_FallSt(_57737_tokens[0LL]));
	if (_57737_tokens.len() > 1LL) {
		(*this)._method_push_err(_57737_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_57817_fll);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_type_alias_st(jule::Slice<_20c47803a_Token>& _58743_tokens) {
	jule::Ptr<_20c476dc4_TypeAliasDecl> _58817_tad = (*((*this)._field_p))._method_build_type_alias_decl(_58743_tokens);
	(*(_58817_tad))._field_scope=(*this)._field_s;
	return jule::Any(_58817_tad);
}



inline void _20c4d7055_ScopeParser::_method_push_case_expr(jule::Slice<_20c47803a_Token> _59337_tokens,_20c47803a_Token _59358_token,jule::Bool _5949_type_match,jule::Slice<jule::Ptr<_20c476dc4_Expr>>& _59432_exprs) {
	if (_59337_tokens.len() == 0LL) {
		return;
	}
	if (_5949_type_match) {
		jule::Int _60021_i = 0LL;
		jule::Ptr<_20c476dc4_TypeDecl> _60122_t;
		jule::Bool _60125_ok;
		std::tie(_60122_t,_60125_ok) = (*((*this)._field_p))._method_build_type(_59337_tokens,(&(_60021_i)),true);
		if (_60125_ok) {
			_59432_exprs.push(jule::new_struct<_20c476dc4_Expr>(new( std::nothrow ) _20c476dc4_Expr(_59358_token,jule::Any(_60122_t))));
		}
		if (_60021_i < _59337_tokens.len()) {
			(*this)._method_push_err(_59337_tokens[_60021_i],jule::Str("invalid syntax", 14));
		}
		return;
	}
	_59432_exprs.push((*((*this)._field_p))._method_build_expr(_59337_tokens));
}



inline jule::Slice<jule::Ptr<_20c476dc4_Expr>> _20c4d7055_ScopeParser::_method_build_case_exprs(jule::Slice<_20c47803a_Token>& _61640_tokens,jule::Bool _61657_type_match) {
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _61717_exprs = jule::Slice<jule::Ptr<_20c476dc4_Expr>>::alloc(0LL,1LL);
	jule::Int _61917_brace_n = 0LL;
	jule::Int _62017_j = 0LL;
	{
		auto &expr = _61640_tokens;
		auto it = expr.begin();
		_iter_begin_5294974224:;
		if (it != expr.end()) {
			jule::Int _20c4d7055_i = it - expr.begin();
			_20c47803a_Token _20c4d7055_tok = *it;
			{
				if (_20c4d7055_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4d7055_tok._field_kind };
						
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_5294978688:;
							{
								(_61917_brace_n)++;
							}
						}
						else {
							_case_begin_5294976896:;
							{
								(_61917_brace_n)--;
							}
						}
						_match_end_5294977008:;
					}
					goto _iter_next_5294974224;
				} else if (_61917_brace_n != 0LL) {
					goto _iter_next_5294974224;
				}
				{
					
					if ((_20c4d7055_tok._field_id == 7LLU) && (_20c4d7055_tok._field_kind == jule::Str("|", 1))) {
						_case_begin_5294976176:;
						{
							jule::Slice<_20c47803a_Token> _63821_expr_tokens = _61640_tokens.slice(_62017_j,_20c4d7055_i);
							if (_63821_expr_tokens.len() == 0LL) {
								(*this)._method_push_err(_20c4d7055_tok,jule::Str("expression missing", 18));
							} else {
								(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_20c4d7055_i),_20c4d7055_tok,_61657_type_match,_61717_exprs);
							}
							_62017_j=static_cast<jule::Int>(_20c4d7055_i + 1LL);
						}
					}
					else if (_20c4d7055_tok._field_id == 11LLU) {
						_case_begin_5294976512:;
						{
							(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_20c4d7055_i),_20c4d7055_tok,_61657_type_match,_61717_exprs);
							_61640_tokens=_61640_tokens.slice(_20c4d7055_i + 1LL);
							return _61717_exprs;
						}
					}
					_match_end_5294977808:;
				}
			}
			_iter_next_5294974224:;
			++it;
			_20c4d7055_i++;
			goto _iter_begin_5294974224;
		}
		_iter_end_5294974224:;
	}
	(*this)._method_push_err(_61640_tokens[0LL],jule::Str("invalid syntax", 14));
	_61640_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_20c476dc4_ScopeTree> _20c4d7055_ScopeParser::_method_build_case_scope(jule::Slice<_20c47803a_Token>& _65740_tokens) {
	jule::Int _65817_n = 0LL;
	for (;;) {
		{
			jule::Int _66021_i = 0LL;
			jule::Slice<_20c47803a_Token> _66122_next;
			std::tie(_66122_next,std::ignore) = _20c4d7055_skip_st(_66021_i,_65740_tokens.slice(_65817_n));
			if (_66122_next.len() == 0LL) {
				goto _iter_end_5294992304;
			}
			_20c47803a_Token _66517_tok = _66122_next[0LL];
			if ((_66517_tok._field_id != 7LLU) || (_66517_tok._field_kind != jule::Str("|", 1))) {
				_65817_n+=_66021_i;
				goto _iter_next_5294992304;
			}
			jule::Slice<_20c47803a_Token> _67021_scope_tokens = _65740_tokens.slice(0LL,_65817_n);
			jule::Ptr<_20c476dc4_ScopeTree> _67121_scope = (*this)._method_build_scope(_67021_scope_tokens);
			_65740_tokens=_65740_tokens.slice(_65817_n);
			return _67121_scope;
		}
	_iter_next_5294992304:;
	}
	_iter_end_5294992304:;
	jule::Ptr<_20c476dc4_ScopeTree> _67517_scope = (*this)._method_build_scope(_65740_tokens);
	_65740_tokens=nullptr;
	return _67517_scope;
}



inline std::tuple<jule::Ptr<_20c476dc4_Case>,jule::Bool> _20c4d7055_ScopeParser::_method_build_case(jule::Slice<_20c47803a_Token>& _68034_tokens,jule::Bool _68051_type_match) {
	jule::Ptr<_20c476dc4_Case> _68117_c = jule::new_struct<_20c476dc4_Case>(new( std::nothrow ) _20c476dc4_Case(_68034_tokens[0LL],jule::Ptr<_20c476dc4_ScopeTree>(),jule::Slice<jule::Ptr<_20c476dc4_Expr>>()));
	_68034_tokens=_68034_tokens.slice(1LL);
	(*(_68117_c))._field_exprs=(*this)._method_build_case_exprs(_68034_tokens,_68051_type_match);
	(*(_68117_c))._field_scope=(*this)._method_build_case_scope(_68034_tokens);
	jule::Bool _68713_is_default = (*(_68117_c))._field_exprs.len() == 0LL;
	return std::make_tuple(_68117_c,_68713_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_20c476dc4_Case>>,jule::Ptr<_20c476dc4_Else>> _20c4d7055_ScopeParser::_method_build_cases(jule::Slice<_20c47803a_Token> _69134_tokens,jule::Bool _69151_type_match) {
	jule::Slice<jule::Ptr<_20c476dc4_Case>> _69217_cases = nullptr;
	jule::Ptr<_20c476dc4_Else> _69317_def = nullptr;
	jule::Bool _69417_def_not_last = false;
	while (_69134_tokens.len() > 0LL) {
		{
			_20c47803a_Token _69621_tok = _69134_tokens[0LL];
			if (_69621_tok._field_id == 18LLU) {
				_69134_tokens=_69134_tokens.slice(1LL);
				goto _iter_next_5295016368;
			}
			if ((_69621_tok._field_id != 7LLU) || (_69621_tok._field_kind != jule::Str("|", 1))) {
				(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_5295016368;
			}
			jule::Ptr<_20c476dc4_Case> _70722_c;
			jule::Bool _70725_is_default;
			std::tie(_70722_c,_70725_is_default) = (*this)._method_build_case(_69134_tokens,_69151_type_match);
			if (_70725_is_default) {
				(*(_70722_c))._field_token=_69621_tok;
				if (_69317_def == nullptr) {
					_69317_def=jule::new_struct<_20c476dc4_Else>(new( std::nothrow ) _20c476dc4_Else((*(_70722_c))._field_token,(*(_70722_c))._field_scope));
				} else {
					(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				}
			} else {
				_69417_def_not_last=_69417_def_not_last || (_69317_def != nullptr);
				_69217_cases.push(_70722_c);
			}
		}
	_iter_next_5295016368:;
	}
	_iter_end_5295016368:;
	if (_69417_def_not_last) {
		(*this)._method_push_err((*(_69317_def))._field_token,jule::Str("default case should be last case", 32));
	}
	return std::make_tuple(_69217_cases,_69317_def);
}



inline jule::Ptr<_20c476dc4_MatchCase> _20c4d7055_ScopeParser::_method_build_match_case(jule::Slice<_20c47803a_Token> _73139_tokens) {
	jule::Ptr<_20c476dc4_MatchCase> _73217_m = jule::new_struct<_20c476dc4_MatchCase>(new( std::nothrow ) _20c476dc4_MatchCase(_73139_tokens[0LL],jule::Bool(),jule::Ptr<_20c476dc4_Expr>(),jule::Slice<jule::Ptr<_20c476dc4_Case>>(),jule::Ptr<_20c476dc4_Else>()));
	_73139_tokens=_73139_tokens.slice(1LL);
	if ((_73139_tokens.len() > 0LL) && (_73139_tokens[0LL]._field_id == 10LLU)) {
		(*(_73217_m))._field_type_match=true;
		_73139_tokens=_73139_tokens.slice(1LL);
	}
	jule::Slice<_20c47803a_Token> _74217_expr_tokens = _20c4aa1e3_get_block_expr(_73139_tokens);
	if (_74217_expr_tokens.len() > 0LL) {
		(*(_73217_m))._field_expr=(*((*this)._field_p))._method_build_expr(_74217_expr_tokens);
	} else if ((*(_73217_m))._field_type_match) {
		(*this)._method_push_err((*(_73217_m))._field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _74917_i = _74217_expr_tokens.len();
	jule::Slice<_20c47803a_Token> _75017_block_toks = _20c7de1a3_range(_74917_i,jule::Str("{", 1),jule::Str("}", 1),_73139_tokens);
	if (_75017_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_73217_m))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_73217_m))._field_cases,(*(_73217_m))._field_default) = (*this)._method_build_cases(_75017_block_toks,(*(_73217_m))._field_type_match);
	return _73217_m;
}



inline jule::Ptr<_20c476dc4_ScopeTree> _20c4d7055_ScopeParser::_method_build_scope_st(jule::Slice<_20c47803a_Token> _76237_tokens) {
	jule::Bool _76317_is_unsafe = false;
	jule::Bool _76417_is_deferred = false;
	_20c47803a_Token _76517_token = _76237_tokens[0LL];
	if (_76517_token._field_id == 35LLU) {
		_76317_is_unsafe=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
		_76517_token=_76237_tokens[0LL];
		if (_76517_token._field_id == 37LLU) {
			_76417_is_deferred=true;
			_76237_tokens=_76237_tokens.slice(1LL);
			if (_76237_tokens.len() == 0LL) {
				(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
	} else if (_76517_token._field_id == 37LLU) {
		_76417_is_deferred=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
	}
	jule::Int _79117_i = 0LL;
	jule::Slice<_20c47803a_Token> _79217_scope_tokens = _20c7de1a3_range(_79117_i,jule::Str("{", 1),jule::Str("}", 1),_76237_tokens);
	if (_79217_scope_tokens == nullptr) {
		(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if (_79117_i < _76237_tokens.len()) {
		(*this)._method_push_err(_76237_tokens[_79117_i],jule::Str("invalid syntax", 14));
	}
	jule::Ptr<_20c476dc4_ScopeTree> _79917_scope = (*this)._method_build_scope(_79217_scope_tokens);
	(*(_79917_scope))._field_unsafety=_76317_is_unsafe;
	(*(_79917_scope))._field_deferred=_76417_is_deferred;
	return _79917_scope;
}



inline jule::Ptr<_20c476dc4_LabelSt> _20c4d7055_ScopeParser::_method_build_label_st(jule::Slice<_20c47803a_Token>& _80538_tokens) {
	jule::Ptr<_20c476dc4_LabelSt> _80617_lbl = jule::new_struct<_20c476dc4_LabelSt>(new( std::nothrow ) _20c476dc4_LabelSt(_80538_tokens[0LL],_80538_tokens[0LL]._field_kind));
	if (_80538_tokens.len() > 2LL) {
		_80538_tokens=_80538_tokens.slice(2LL);
		(*this)._method_insert_as_next(_80538_tokens);
	}
	return _80617_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _20c4d7055_ScopeParser::_method_build_id_st(jule::Slice<_20c47803a_Token>& _82035_tokens) {
	jule::Bool _82064_ok = jule::Bool();
	if (_82035_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_82064_ok);
	}
	_20c47803a_Token _82517_token = _82035_tokens[1LL];
	{
		auto &_match_expr{ _82517_token._field_id };
		
		if (_match_expr == 11LLU) {
			_case_begin_5295084880:;
			{
				_82064_ok = true;
				return std::make_tuple(jule::Any((*this)._method_build_label_st(_82035_tokens)),_82064_ok);
			}
		}
		_match_end_5295083792:;
	}
	return std::make_tuple(jule::Any(),_82064_ok);
}



inline jule::Ptr<_20c4bea32_AssignInfo> _20c4d7055_ScopeParser::_method_build_assign_info(jule::Slice<_20c47803a_Token>& _83441_tokens) {
	jule::Ptr<_20c4bea32_AssignInfo> _83517_info = jule::new_struct<_20c4bea32_AssignInfo>(new( std::nothrow ) _20c4bea32_AssignInfo(jule::Slice<_20c47803a_Token>(),jule::Slice<_20c47803a_Token>(),_20c47803a_Token(),true));
	jule::Int _83817_brace_n = 0LL;
	{
		auto &expr = _83441_tokens;
		auto it = expr.begin();
		_iter_begin_5295092064:;
		if (it != expr.end()) {
			jule::Int _20c4d7055_i = it - expr.begin();
			_20c47803a_Token _20c4d7055_token = *it;
			{
				if (_20c4d7055_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4d7055_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5295096736:;
							{
								(_83817_brace_n)++;
							}
						}
						else {
							_case_begin_5295094944:;
							{
								(_83817_brace_n)--;
							}
						}
						_match_end_5295095056:;
					}
				}
				{
					
					if (_83817_brace_n > 0LL) {
						_case_begin_5295098256:;
						{
							goto _iter_next_5295092064;
						}
					}
					else if (_20c4d7055_token._field_id != 7LLU) {
						_case_begin_5295097248:;
						{
							goto _iter_next_5295092064;
						}
					}
					else if ((!(_20c47803a_is_assign_op(_20c4d7055_token._field_kind)))) {
						_case_begin_5295097344:;
						{
							goto _iter_next_5295092064;
						}
					}
					_match_end_5295098112:;
				}
				(*(_83517_info))._field_l=_83441_tokens.slice(0LL,_20c4d7055_i);
				if ((*(_83517_info))._field_l.len() == 0LL) {
					(*(_83517_info))._field_ok=false;
				}
				(*(_83517_info))._field_setter=_20c4d7055_token;
				if ((_20c4d7055_i + 1LL) >= _83441_tokens.len()) {
					(*(_83517_info))._field_r=nullptr;
					(*(_83517_info))._field_ok=_20c47803a_is_postfix_op((*(_83517_info))._field_setter._field_kind);
					goto _iter_end_5295092064;
				}
				(*(_83517_info))._field_r=_83441_tokens.slice(_20c4d7055_i + 1LL);
				if (_20c47803a_is_postfix_op((*(_83517_info))._field_setter._field_kind)) {
					if ((*(_83517_info))._field_r.len() > 0LL) {
						(*this)._method_push_err((*(_83517_info))._field_r[0LL],jule::Str("invalid syntax", 14));
						(*(_83517_info))._field_r=nullptr;
					}
				}
				goto _iter_end_5295092064;
			}
			_iter_next_5295092064:;
			++it;
			_20c4d7055_i++;
			goto _iter_begin_5295092064;
		}
		_iter_end_5295092064:;
	}
	return _83517_info;
}



inline jule::Ptr<_20c476dc4_AssignLeft> _20c4d7055_ScopeParser::_method_build_assign_l(jule::Slice<_20c47803a_Token>& _88138_tokens) {
	jule::Ptr<_20c476dc4_AssignLeft> _88217_l = jule::new_struct<_20c476dc4_AssignLeft>(new( std::nothrow ) _20c476dc4_AssignLeft(_88138_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ptr<_20c476dc4_Expr>()));
	if (_88138_tokens[0LL]._field_id == 2LLU) {
		(*(_88217_l))._field_ident=(*(_88217_l))._field_token._field_kind;
	}
	(*(_88217_l))._field_expr=(*((*this)._field_p))._method_build_expr(_88138_tokens);
	return _88217_l;
}



inline jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>> _20c4d7055_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_20c47803a_Token>>& _89439_parts) {
	jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>> _89517_lefts = nullptr;
	{
		auto &expr = _89439_parts;
		auto it = expr.begin();
		_iter_begin_5295121584:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4d7055_part = *it;
			{
				jule::Ptr<_20c476dc4_AssignLeft> _89721_l = (*this)._method_build_assign_l(_20c4d7055_part);
				_89517_lefts.push(_89721_l);
			}
			_iter_next_5295121584:;
			++it;
			goto _iter_begin_5295121584;
		}
		_iter_end_5295121584:;
	}
	return _89517_lefts;
}



inline std::tuple<jule::Ptr<_20c476dc4_AssignSt>,jule::Bool> _20c4d7055_ScopeParser::_method_build_plain_assign(jule::Slice<_20c47803a_Token>& _90442_tokens) {
	jule::Ptr<_20c4bea32_AssignInfo> _90517_info = (*this)._method_build_assign_info(_90442_tokens);
	if ((!((*(_90517_info))._field_ok))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_20c476dc4_AssignSt> _91017_assign = jule::new_struct<_20c476dc4_AssignSt>(new( std::nothrow ) _20c476dc4_AssignSt(jule::Bool(),(*(_90517_info))._field_setter,jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>>(),jule::Ptr<_20c476dc4_Expr>()));
	jule::Slice<jule::Slice<_20c47803a_Token>> _91418_parts;
	jule::Slice<_20a25b99c_Log> _91425_errs;
	std::tie(_91418_parts,_91425_errs) = _20c7de1a3_parts((*(_90517_info))._field_l,8LLU,true);
	if (_91425_errs.len() > 0LL) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_91425_errs);
		return std::make_tuple(nullptr,false);
	}
	(*(_91017_assign))._field_left=(*this)._method_build_assign_ls(_91418_parts);
	if ((*(_90517_info))._field_r != nullptr) {
		(*(_91017_assign))._field_right=(*((*this)._field_p))._method_build_expr((*(_90517_info))._field_r);
	}
	return std::make_tuple(_91017_assign,true);
}



inline std::tuple<jule::Ptr<_20c476dc4_AssignSt>,jule::Bool> _20c4d7055_ScopeParser::_method_build_decl_assign(jule::Slice<_20c47803a_Token> _92840_tokens) {
	if (_92840_tokens.len() < 1LL) {
		return std::make_tuple(nullptr,false);
	}
	_92840_tokens=_92840_tokens.slice(1LL);
	_20c47803a_Token _93417_token = _92840_tokens[0LL];
	if ((_93417_token._field_id != 3LLU) || (_93417_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_20c476dc4_AssignSt> _93917_assign = jule::new_struct<_20c476dc4_AssignSt>(new( std::nothrow ) _20c476dc4_AssignSt(true,_20c47803a_Token(),jule::Slice<jule::Ptr<_20c476dc4_AssignLeft>>(),jule::Ptr<_20c476dc4_Expr>()));
	jule::Int _94317_i = 0LL;
	jule::Slice<_20c47803a_Token> _94417_rang = _20c7de1a3_range(_94317_i,jule::Str("(", 1),jule::Str(")", 1),_92840_tokens);
	if (_94417_rang == nullptr) {
		(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if ((_94317_i + 1LL) < _92840_tokens.len()) {
		(*(_93917_assign))._field_setter=_92840_tokens[_94317_i];
		(_94317_i)++;
		jule::Slice<_20c47803a_Token> _95121_expr_tokens = _92840_tokens.slice(_94317_i);
		(*(_93917_assign))._field_right=(*((*this)._field_p))._method_build_expr(_95121_expr_tokens);
	}
	jule::Slice<jule::Slice<_20c47803a_Token>> _95618_parts;
	jule::Slice<_20a25b99c_Log> _95625_errs;
	std::tie(_95618_parts,_95625_errs) = _20c7de1a3_parts(_94417_rang,8LLU,true);
	if (_95625_errs.len() > 0LL) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_95625_errs);
		return std::make_tuple(nullptr,false);
	}
	{
		auto &expr = _95618_parts;
		auto it = expr.begin();
		_iter_begin_5295158912:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4d7055_part = *it;
			{
				jule::Bool _96321_is_mut = false;
				jule::Bool _96421_is_ref = false;
				_93417_token=_20c4d7055_part[0LL];
				if (_93417_token._field_id == 36LLU) {
					_96321_is_mut=true;
					_20c4d7055_part=_20c4d7055_part.slice(1LL);
					if (_20c4d7055_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_5295158912;
					}
				}
				if ((_20c4d7055_part[0LL]._field_id == 7LLU) && (_20c4d7055_part[0LL]._field_kind == jule::Str("&", 1))) {
					_96421_is_ref=true;
					_20c4d7055_part=_20c4d7055_part.slice(1LL);
					if (_20c4d7055_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_5295158912;
					}
				}
				if (((_20c4d7055_part[0LL]._field_id != 2LLU) && (_20c4d7055_part[0LL]._field_id != 3LLU)) && (_20c4d7055_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
					goto _iter_next_5295158912;
				}
				jule::Ptr<_20c476dc4_AssignLeft> _99221_l = (*this)._method_build_assign_l(_20c4d7055_part);
				(*(_99221_l))._field_mutable=_96321_is_mut;
				(*(_99221_l))._field_reference=_96421_is_ref;
				(*(_93917_assign))._field_left = jule::alloc_for_append((*(_93917_assign))._field_left,1);(*(_93917_assign))._field_left.push(_99221_l);
			}
			_iter_next_5295158912:;
			++it;
			goto _iter_begin_5295158912;
		}
		_iter_end_5295158912:;
	}
	return std::make_tuple(_93917_assign,true);
}



inline std::tuple<jule::Ptr<_20c476dc4_AssignSt>,jule::Bool> _20c4d7055_ScopeParser::_method_build_assign_st(jule::Slice<_20c47803a_Token>& _100139_tokens) {
	jule::Ptr<_20c476dc4_AssignSt> _100158_st = jule::Ptr<_20c476dc4_AssignSt>();
	jule::Bool _100173_ok = jule::Bool();
	if ((!(_20c4bea32_check_assign_tokens(_100139_tokens)))) {
		_100158_st = nullptr;
		_100173_ok = false;
		return std::make_tuple(_100158_st,_100173_ok);
	}
	{
		auto &_match_expr{ _100139_tokens[0LL]._field_id };
		
		if (_match_expr == 34LLU) {
			_case_begin_5295187024:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_decl_assign(_100139_tokens);
			}
		}
		else {
			_case_begin_5295184320:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_plain_assign(_100139_tokens);
			}
		}
		_match_end_5295185680:;
	}
	return std::make_tuple(_100158_st,_100173_ok);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_use_expr(jule::Slice<_20c47803a_Token>& _101438_tokens) {
	if (_101438_tokens.len() == 1LL) {
		(*this)._method_push_err(_101438_tokens[0LL],jule::Str("expression missing", 18));
		return jule::Any(nullptr);
	}
	jule::Ptr<_20c476dc4_UseExpr> _102017_ue = jule::new_struct<_20c476dc4_UseExpr>(new( std::nothrow ) _20c476dc4_UseExpr(_101438_tokens[0LL],jule::Ptr<_20c476dc4_Expr>()));
	_101438_tokens=_101438_tokens.slice(1LL);
	(*(_102017_ue))._field_expr=(*((*this)._field_p))._method_build_expr(_101438_tokens);
	return jule::Any(_102017_ue);
}



inline jule::Any _20c4d7055_ScopeParser::_method_build_st(jule::Ptr<_20c4d7055_Stmt>& _102932_st) {
	_20c47803a_Token _103017_token = (*(_102932_st))._field_tokens[0LL];
	if (_103017_token._field_id == 2LLU) {
		jule::Any _103222_s;
		jule::Bool _103225_ok;
		std::tie(_103222_s,_103225_ok) = (*this)._method_build_id_st((*(_102932_st))._field_tokens);
		if (_103225_ok) {
			return _103222_s;
		}
	}
	jule::Ptr<_20c476dc4_AssignSt> _103818_s;
	jule::Bool _103821_ok;
	std::tie(_103818_s,_103821_ok) = (*this)._method_build_assign_st((*(_102932_st))._field_tokens);
	if (_103821_ok) {
		return jule::Any(_103818_s);
	}
	{
		auto &_match_expr{ _103017_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_5295209424:;
			{
				return (*this)._method_build_use_expr((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 38LLU || _match_expr == 9LLU || _match_expr == 34LLU || _match_expr == 36LLU) {
			_case_begin_5295209984:;
			{
				return (*this)._method_build_var_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_5295205184:;
			{
				return (*this)._method_build_ret_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_5295209056:;
			{
				return (*this)._method_buid_iter_st(_102932_st);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_5295209152:;
			{
				return (*this)._method_build_break_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_5295208336:;
			{
				return (*this)._method_build_cont_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_5295208432:;
			{
				return (*this)._method_build_if_else_chain((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_5295208528:;
			{
				return (*this)._method_build_comment_st(_103017_token);
			}
		}
		else if (_match_expr == 26LLU) {
			_case_begin_5295208624:;
			{
				return (*this)._method_build_co_call_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 22LLU) {
			_case_begin_5295208720:;
			{
				return (*this)._method_build_goto_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 32LLU) {
			_case_begin_5295208816:;
			{
				return (*this)._method_build_fall_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5295210144:;
			{
				return (*this)._method_build_type_alias_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 27LLU) {
			_case_begin_5295210240:;
			{
				return jule::Any((*this)._method_build_match_case((*(_102932_st))._field_tokens));
			}
		}
		else if (_match_expr == 35LLU || _match_expr == 37LLU) {
			_case_begin_5295210336:;
			{
				return jule::Any((*this)._method_build_scope_st((*(_102932_st))._field_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5295210432:;
			{
				if (_103017_token._field_kind == jule::Str("{", 1)) {
					return jule::Any((*this)._method_build_scope_st((*(_102932_st))._field_tokens));
				}
			}
		}
		else {
			_case_begin_5295203920:;
			{
				jule::Ptr<_20c476dc4_Expr> _109921_expr = (*((*this)._field_p))._method_build_expr((*(_102932_st))._field_tokens);
				if (_109921_expr != nullptr) {
					return jule::Any(_109921_expr);
				}
			}
		}
		_match_end_5295205792:;
	}
	(*this)._method_push_err(_103017_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _20c4d7055_ScopeParser::_method_build(jule::Slice<_20c47803a_Token>& _110929_tokens,jule::Ptr<_20c476dc4_ScopeTree>& _110951_s) {
	if (_110951_s == nullptr) {
		return;
	}
	(*this)._field_stmts=_20c4d7055_split_stmts(_110929_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_110951_s;
	while ((!((*this)._method_is_last_st())) && (!((*this)._method_finished()))) {
		{
			jule::Ptr<_20c4d7055_Stmt> _111821_st = (*this)._method_next();
			jule::Any _111921_data = (*this)._method_build_st(_111821_st);
			if (_111921_data != nullptr) {
				(*((*this)._field_s))._field_stmts = jule::alloc_for_append((*((*this)._field_s))._field_stmts,1);(*((*this)._field_s))._field_stmts.push(_111921_data);
			}
			if ((*this)._method_stopped()) {
				goto _iter_end_5295236800;
			}
		}
	_iter_next_5295236800:;
	}
	_iter_end_5295236800:;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4d7055_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4aa1e3_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _20c4aa1e3_ExprBuilder::_method_push_err(_20c47803a_Token _24227_token,jule::Str _24241_fmt,jule::Slice<jule::Any> _24254_args) {
	(*((*this)._field_p))._method_push_err(_24227_token,_24241_fmt,_24254_args);
}



inline void _20c4aa1e3_ExprBuilder::_method_push_suggestion(jule::Str _24734_fmt,jule::Slice<jule::Any> _24747_args) {
	(*((*this)._field_p))._method_push_suggestion(_24734_fmt,_24747_args);
}



inline jule::Ptr<_20c476dc4_TupleExpr> _20c4aa1e3_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_20c47803a_Token>>& _25135_parts) {
	jule::Ptr<_20c476dc4_TupleExpr> _25217_tuple = jule::new_struct<_20c476dc4_TupleExpr>(new( std::nothrow ) _20c476dc4_TupleExpr(jule::Slice<jule::Ptr<_20c476dc4_Expr>>::alloc(0LL,static_cast<jule::I64>(_25135_parts.len()))));
	{
		auto &expr = _25135_parts;
		auto it = expr.begin();
		_iter_begin_5295272960:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4aa1e3_part = *it;
			{
				(*(_25217_tuple))._field_expr = jule::alloc_for_append((*(_25217_tuple))._field_expr,1);(*(_25217_tuple))._field_expr.push((*this)._method_build_from_tokens(_20c4aa1e3_part));
			}
			_iter_next_5295272960:;
			++it;
			goto _iter_begin_5295272960;
		}
		_iter_end_5295272960:;
	}
	return _25217_tuple;
}



inline jule::Ptr<_20c476dc4_LitExpr> _20c4aa1e3_ExprBuilder::_method_build_lit(_20c47803a_Token _26128_token) {
	return jule::new_struct<_20c476dc4_LitExpr>(new( std::nothrow ) _20c476dc4_LitExpr(_26128_token,_26128_token._field_kind));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c4aa1e3_ExprBuilder::_method_build_primitive_type(_20c47803a_Token& _26840_token) {
	return _20c9bd97b_build_prim_type(_26840_token);
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_single(_20c47803a_Token _27235_token) {
	{
		auto &_match_expr{ _27235_token._field_id };
		
		if (_match_expr == 6LLU) {
			_case_begin_5295284704:;
			{
				return jule::Any((*this)._method_build_lit(_27235_token));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5295284800:;
			{
				if (_27235_token._field_kind == jule::Str("...", 3)) {
					return jule::Any(jule::new_struct<_20c476dc4_VariadicExpr>(new( std::nothrow ) _20c476dc4_VariadicExpr(_27235_token,jule::Any())));
				}
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 28LLU || _match_expr == 40LLU) {
			_case_begin_5295284944:;
			{
				return jule::Any(_20c4aa1e3_build_ident_expr(_27235_token));
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_5295285040:;
			{
				return jule::Any((*this)._method_build_primitive_type(_27235_token));
			}
		}
		_match_end_5295284480:;
	}
	(*this)._method_push_err(_27235_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_20c476dc4_IdentExpr> _20c4aa1e3_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_20c47803a_Token>& _29646_tokens) {
	if (_29646_tokens[0LL]._field_id != 31LLU) {
		return nullptr;
	} else if (_29646_tokens[1LL]._field_id != 20LLU) {
		(*this)._method_push_err(_29646_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_20c47803a_Token _30417_token = _29646_tokens[2LL];
	if (_30417_token._field_id != 2LLU) {
		(*this)._method_push_err(_29646_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_IdentExpr> _31017_expr = _20c4aa1e3_build_ident_expr(_30417_token);
	(*(_31017_expr))._field_cpp_linked=true;
	return _31017_expr;
}



inline jule::Ptr<_20c476dc4_UnaryExpr> _20c4aa1e3_ExprBuilder::_method_build_unary(jule::Slice<_20c47803a_Token> _31534_tokens) {
	_20c47803a_Token _31617_op = _31534_tokens[0LL];
	if (_31534_tokens.len() == 1LL) {
		(*this)._method_push_err(_31617_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_20c47803a_is_unary_op(_31617_op._field_kind)))) {
		(*this)._method_push_err(_31617_op,jule::Str("operator @ is not unary", 23),jule::Slice<jule::Any>({jule::Any(_31617_op._field_kind)}));
		return nullptr;
	}
	_31534_tokens=_31534_tokens.slice(1LL);
	return jule::new_struct<_20c476dc4_UnaryExpr>(new( std::nothrow ) _20c476dc4_UnaryExpr(_31617_op,(*this)._method_build(_31534_tokens)));
}



inline jule::Ptr<_20c476dc4_SubIdentExpr> _20c4aa1e3_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_20c47803a_Token> _33642_tokens) {
	jule::I64 _33717_i = _33642_tokens.len() - 1LL;
	_20c47803a_Token _33817_ident_token = _33642_tokens[_33717_i];
	(_33717_i)--;
	_33642_tokens=_33642_tokens.slice(0LL,_33717_i);
	if (_33642_tokens.len() == 0LL) {
		(*this)._method_push_err(_33817_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_SubIdentExpr>(new( std::nothrow ) _20c476dc4_SubIdentExpr(jule::Bool(),(*this)._method_build(_33642_tokens),_33817_ident_token));
}



inline jule::Ptr<_20c476dc4_NsSelectionExpr> _20c4aa1e3_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_20c47803a_Token>& _35142_tokens) {
	jule::Ptr<_20c476dc4_NsSelectionExpr> _35217_ns = jule::new_struct<_20c476dc4_NsSelectionExpr>(new( std::nothrow ) _20c476dc4_NsSelectionExpr());
	{
		auto &expr = _35142_tokens;
		auto it = expr.begin();
		_iter_begin_5295344000:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token _20c4aa1e3_token = *it;
			{
				if (jule::unsafe_mod(_20c4aa1e3_i,2LL) == 0LL) {
					if (_20c4aa1e3_token._field_id != 2LLU) {
						(*this)._method_push_err(_20c4aa1e3_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					}
					(*(_35217_ns))._field_ns = jule::alloc_for_append((*(_35217_ns))._field_ns,1);(*(_35217_ns))._field_ns.push(_20c4aa1e3_token);
				} else if (_20c4aa1e3_token._field_id != 23LLU) {
					(*this)._method_push_err(_20c4aa1e3_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				}
			}
			_iter_next_5295344000:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5295344000;
		}
		_iter_end_5295344000:;
	}
	(*(_35217_ns))._field_ident=(*(_35217_ns))._field_ns[(*(_35217_ns))._field_ns.len() - 1LL];
	(*(_35217_ns))._field_ns=(*(_35217_ns))._field_ns.slice(0LL,(*(_35217_ns))._field_ns.len() - 1LL);
	return _35217_ns;
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c4aa1e3_ExprBuilder::_method_build_type(jule::Slice<_20c47803a_Token>& _37034_tokens) {
	jule::Int _37117_i = 0LL;
	jule::Ptr<_20c476dc4_TypeDecl> _37218_t;
	jule::Bool _37221_ok;
	std::tie(_37218_t,_37221_ok) = (*((*this)._field_p))._method_build_type(_37034_tokens,(&(_37117_i)),false);
	if ((!(_37221_ok))) {
		(*this)._method_push_err(_37034_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_37117_i < _37034_tokens.len()) {
		(*this)._method_push_err(_37034_tokens[_37117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _37218_t;
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_sub_ident(jule::Slice<_20c47803a_Token>& _38439_tokens) {
	jule::I64 _38513_i = _38439_tokens.len() - 2LL;
	_20c47803a_Token _38613_token = _38439_tokens[_38513_i];
	{
		auto &_match_expr{ _38613_token._field_id };
		
		if (_match_expr == 20LLU) {
			_case_begin_5295370448:;
			{
				return jule::Any((*this)._method_build_obj_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 23LLU) {
			_case_begin_5295370544:;
			{
				return jule::Any((*this)._method_build_ns_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5295370640:;
			{
				if (_38613_token._field_kind == jule::Str("]", 1)) {
					return jule::Any((*this)._method_build_type(_38439_tokens));
				}
			}
		}
		_match_end_5295370240:;
	}
	(*this)._method_push_err(_38613_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_20c476dc4_VariadicExpr> _20c4aa1e3_ExprBuilder::_method_build_variadic(jule::Slice<_20c47803a_Token> _40537_tokens) {
	_20c47803a_Token _40617_token = _40537_tokens[_40537_tokens.len() - 1LL];
	_40537_tokens=_40537_tokens.slice(0LL,_40537_tokens.len() - 1LL);
	return jule::new_struct<_20c476dc4_VariadicExpr>(new( std::nothrow ) _20c476dc4_VariadicExpr(_40617_token,(*this)._method_build(_40537_tokens)));
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_op_right(jule::Slice<_20c47803a_Token>& _41438_tokens) {
	_20c47803a_Token _41517_token = _41438_tokens[_41438_tokens.len() - 1LL];
	{
		auto &_match_expr{ _41517_token._field_kind };
		
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_5295385840:;
			{
				_41438_tokens=_41438_tokens.slice(0LL,_41438_tokens.len() - 1LL);
				jule::Any _41921_d = (*this)._method_build(_41438_tokens);
				if (_41921_d == nullptr) {
					return jule::Any(nullptr);
				}
				{
					auto &_match_expr{ _41921_d };
					
					if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnCallExpr>>()) {
						_case_begin_5295390016:;
						{
							(*(_41921_d.operator jule::Ptr<_20c476dc4_FnCallExpr>()))._field_exception=jule::new_struct<_20c476dc4_ScopeTree>(new( std::nothrow ) _20c476dc4_ScopeTree(jule::Ptr<_20c476dc4_ScopeTree>(),jule::Bool(),true,jule::Slice<jule::Any>()));
							return _41921_d;
						}
					}
					_match_end_5295389264:;
				}
			}
		}
		else if (_match_expr == jule::Str("...", 3)) {
			_case_begin_5295386016:;
			{
				return jule::Any((*this)._method_build_variadic(_41438_tokens));
			}
		}
		_match_end_5295385440:;
	}
	(*this)._method_push_err(_41517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_between_parentheses(jule::Slice<_20c47803a_Token> _43948_tokens) {
	_20c47803a_Token _44013_token = _43948_tokens[0LL];
	_43948_tokens=_43948_tokens.slice(1LL,_43948_tokens.len() - 1LL);
	if (_43948_tokens.len() == 0LL) {
		(*this)._method_push_err(_44013_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_43948_tokens);
}



inline jule::Ptr<_20c476dc4_CastExpr> _20c4aa1e3_ExprBuilder::_method_try_build_cast(jule::Slice<_20c47803a_Token>& _45038_tokens) {
	jule::Int _45117_range_n = 0LL;
	{
		auto &expr = _45038_tokens;
		auto it = expr.begin();
		_iter_begin_5295404944:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token &_20c4aa1e3_token = *it;
			{
				if (_20c4aa1e3_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4aa1e3_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5295409552:;
							{
								(_45117_range_n)++;
								goto _iter_next_5295404944;
							}
						}
						else {
							_case_begin_5295407760:;
							{
								(_45117_range_n)--;
							}
						}
						_match_end_5295407872:;
					}
				}
				if (_45117_range_n > 0LL) {
					goto _iter_next_5295404944;
				} else if ((_20c4aa1e3_i + 1LL) == _45038_tokens.len()) {
					return nullptr;
				}
				jule::Slice<_20c47803a_Token> _47221_type_tokens = _45038_tokens.slice(0LL,_20c4aa1e3_i + 1LL);
				jule::Slice<_20c47803a_Token> _47321_expr_tokens = _45038_tokens.slice(_20c4aa1e3_i + 1LL);
				if (_47321_expr_tokens.len() == 0LL) {
					return nullptr;
				}
				_20c47803a_Token _48017_tok = _47321_expr_tokens[0LL];
				if ((_48017_tok._field_id != 3LLU) || (_48017_tok._field_kind != jule::Str("(", 1))) {
					return nullptr;
				}
				jule::Ptr<_20c476dc4_CastExpr> _48521_cast = jule::new_struct<_20c476dc4_CastExpr>(new( std::nothrow ) _20c476dc4_CastExpr());
				if (_47321_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_47321_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				}
				if (_47221_type_tokens.len() == 2LL) {
					(*this)._method_push_err(_47221_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_47221_type_tokens=_47221_type_tokens.slice(1LL,_47221_type_tokens.len() - 1LL);
					jule::Int _49925_type_index = 0LL;
					jule::Ptr<_20c476dc4_TypeDecl> _50026_t;
					jule::Bool _50029_ok;
					std::tie(_50026_t,_50029_ok) = (*((*this)._field_p))._method_build_type(_47221_type_tokens,(&(_49925_type_index)),true);
					if (_50029_ok && (_49925_type_index < _47221_type_tokens.len())) {
						(*this)._method_push_err(_47221_type_tokens[_49925_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_50029_ok))) {
						return _48521_cast;
					}
					(*(_48521_cast))._field_kind=_50026_t;
					if (_47321_expr_tokens.len() > 2LL) {
						jule::Int _51029_j = 0LL;
						_20c7de1a3_range(_51029_j,jule::Str("(", 1),jule::Str(")", 1),_47321_expr_tokens);
						if (_51029_j < _47321_expr_tokens.len()) {
							return nullptr;
						}
						_47321_expr_tokens=_47321_expr_tokens.slice(0LL,_51029_j);
						(*(_48521_cast))._field_expr=(*this)._method_build(_47321_expr_tokens);
					}
				}
				return _48521_cast;
			}
			_iter_next_5295404944:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5295404944;
		}
		_iter_end_5295404944:;
	}
	return nullptr;
}



inline void _20c4aa1e3_ExprBuilder::_method_push_arg(jule::Slice<jule::Ptr<_20c476dc4_Expr>>& _52532_args,jule::Slice<_20c47803a_Token> _52551_tokens,_20c47803a_Token _52568_err_token) {
	if (_52551_tokens.len() == 0LL) {
		(*this)._method_push_err(_52568_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_52532_args.push((*this)._method_build_from_tokens(_52551_tokens));
}



inline jule::Slice<jule::Ptr<_20c476dc4_Expr>> _20c4aa1e3_ExprBuilder::_method_build_args(jule::Slice<_20c47803a_Token> _53433_tokens) {
	if (_53433_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20c476dc4_Expr>> _54017_args = nullptr;
	jule::Int _54117_last = 0LL;
	jule::Int _54217_range_n = 0LL;
	_53433_tokens=_53433_tokens.slice(1LL,_53433_tokens.len() - 1LL);
	{
		auto &expr = _53433_tokens;
		auto it = expr.begin();
		_iter_begin_5295448992:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token &_20c4aa1e3_token = *it;
			{
				if (_20c4aa1e3_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4aa1e3_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5295453856:;
							{
								(_54217_range_n)++;
							}
						}
						else {
							_case_begin_5295452064:;
							{
								(_54217_range_n)--;
							}
						}
						_match_end_5295452176:;
					}
				}
				if ((_54217_range_n > 0LL) || (_20c4aa1e3_token._field_id != 8LLU)) {
					goto _iter_next_5295448992;
				}
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last,_20c4aa1e3_i),_20c4aa1e3_token);
				_54117_last=static_cast<jule::Int>(_20c4aa1e3_i + 1LL);
			}
			_iter_next_5295448992:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5295448992;
		}
		_iter_end_5295448992:;
	}
	if (_54117_last < _53433_tokens.len()) {
		if (_54117_last == 0LL) {
			if (_53433_tokens.len() > 0LL) {
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last]);
			}
		} else {
			(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last - 1LL]);
		}
	}
	return _54017_args;
}



inline jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _20c4aa1e3_ExprBuilder::_method_build_call_generics(jule::Slice<_20c47803a_Token> _57742_tokens) {
	if (_57742_tokens.len() == 0LL) {
		return nullptr;
	}
	_57742_tokens=_57742_tokens.slice(1LL,_57742_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_20c47803a_Token>> _58318_parts;
	jule::Slice<_20a25b99c_Log> _58325_errs;
	std::tie(_58318_parts,_58325_errs) = _20c7de1a3_parts(_57742_tokens,8LLU,true);
	jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _58417_generics = jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_58318_parts.len()));
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_58325_errs);
	{
		auto &expr = _58318_parts;
		auto it = expr.begin();
		_iter_begin_5295468416:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4aa1e3_part = *it;
			{
				if (_20c4aa1e3_part.len() == 0LL) {
					goto _iter_next_5295468416;
				}
				jule::Int _59021_j = 0LL;
				jule::Ptr<_20c476dc4_TypeDecl> _59122_generic;
				std::tie(_59122_generic,std::ignore) = (*((*this)._field_p))._method_build_type(_20c4aa1e3_part,(&(_59021_j)),true);
				if (_59021_j < _20c4aa1e3_part.len()) {
					(*this)._method_push_err(_20c4aa1e3_part[_59021_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_58417_generics.push(_59122_generic);
			}
			_iter_next_5295468416:;
			++it;
			goto _iter_begin_5295468416;
		}
		_iter_end_5295468416:;
	}
	return _58417_generics;
}



inline jule::Ptr<_20c476dc4_FnCallExpr> _20c4aa1e3_ExprBuilder::_method_build_fn_call(_20c47803a_Token& _60137_token,jule::Ptr<_20c4aa1e3_CallData>& _60156_data) {
	return jule::new_struct<_20c476dc4_FnCallExpr>(new( std::nothrow ) _20c476dc4_FnCallExpr(_60137_token,(*this)._method_build_from_tokens((*(_60156_data))._field_expr_tokens),(*this)._method_build_call_generics((*(_60156_data))._field_generics_tokens),(*this)._method_build_args((*(_60156_data))._field_args_tokens),jule::Ptr<_20c476dc4_ScopeTree>()));
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_parentheses_range(jule::Slice<_20c47803a_Token>& _61047_tokens) {
	_20c47803a_Token _61117_token = _61047_tokens[0LL];
	{
		auto &_match_expr{ _61117_token._field_id };
		
		if (_match_expr == 3LLU) {
			_case_begin_5295486096:;
			{
				{
					auto &_match_expr{ _61117_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_5295487664:;
						{
							jule::Ptr<_20c476dc4_CastExpr> _61625_expr = (*this)._method_try_build_cast(_61047_tokens);
							if (_61625_expr != nullptr) {
								return jule::Any(_61625_expr);
							}
						}
					}
					_match_end_5295486448:;
				}
			}
		}
		_match_end_5295485696:;
	}
	jule::Ptr<_20c4aa1e3_CallData> _62317_data = _20c4aa1e3_get_call_data(_61047_tokens);
	if ((*(_62317_data))._field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses((*(_62317_data))._field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_61117_token,_62317_data));
}



inline jule::Ptr<_20c476dc4_UnsafeExpr> _20c4aa1e3_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_20c47803a_Token> _63440_tokens) {
	_20c47803a_Token _63517_token = _63440_tokens[0LL];
	_63440_tokens=_63440_tokens.slice(1LL);
	jule::Int _63717_i = 0LL;
	jule::Slice<_20c47803a_Token> _63817_range_tokens = _20c7de1a3_range(_63717_i,jule::Str("{", 1),jule::Str("}", 1),_63440_tokens);
	if (_63817_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_63440_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_UnsafeExpr>(new( std::nothrow ) _20c476dc4_UnsafeExpr(_63517_token,(*((*this)._method_build_from_tokens(_63817_range_tokens)))._field_kind));
}



inline jule::Ptr<_20c476dc4_FnDecl> _20c4aa1e3_ExprBuilder::_method_build_anon_fn(jule::Slice<_20c47803a_Token>& _64937_tokens) {
	jule::Ptr<_20c476dc4_FnDecl> _65017_f = (*((*this)._field_p))._method_build_fn(_64937_tokens,false,false);
	if ((!((*(_65017_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_65017_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	}
	return _65017_f;
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_unsafe(jule::Slice<_20c47803a_Token>& _65836_tokens) {
	{
		auto &_match_expr{ _65836_tokens[1LL]._field_id };
		
		if (_match_expr == 33LLU) {
			_case_begin_5295517344:;
			{
				return jule::Any((*this)._method_build_anon_fn(_65836_tokens));
			}
		}
		else {
			_case_begin_5295513968:;
			{
				return jule::Any((*this)._method_build_unsafe_expr(_65836_tokens));
			}
		}
		_match_end_5295514832:;
	}
}



inline void _20c4aa1e3_ExprBuilder::_method_push_range_lit_part(jule::Slice<_20c47803a_Token> _66942_part,_20c47803a_Token _6709_error_token,jule::Slice<jule::Slice<_20c47803a_Token>>& _67034_parts) {
	if (_66942_part.len() == 0LL) {
		(*this)._method_push_err(_6709_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_67034_parts.push(_66942_part);
}



inline jule::Slice<jule::Slice<_20c47803a_Token>> _20c4aa1e3_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_20c47803a_Token> _68053_tokens) {
	if (_68053_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_20c47803a_Token>> _68617_parts = nullptr;
	jule::Int _68817_last = 0LL;
	jule::Int _68917_range_n = 0LL;
	_68053_tokens=_68053_tokens.slice(1LL,_68053_tokens.len() - 1LL);
	{
		auto &expr = _68053_tokens;
		auto it = expr.begin();
		_iter_begin_5295530944:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token &_20c4aa1e3_token = *it;
			{
				if (_20c4aa1e3_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4aa1e3_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5295535808:;
							{
								(_68917_range_n)++;
							}
						}
						else {
							_case_begin_5295534016:;
							{
								(_68917_range_n)--;
							}
						}
						_match_end_5295534128:;
					}
				}
				if ((_68917_range_n > 0LL) || (_20c4aa1e3_token._field_id != 8LLU)) {
					goto _iter_next_5295530944;
				}
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last,_20c4aa1e3_i),_20c4aa1e3_token,_68617_parts);
				_68817_last=static_cast<jule::Int>(_20c4aa1e3_i + 1LL);
			}
			_iter_next_5295530944:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5295530944;
		}
		_iter_end_5295530944:;
	}
	if (_68817_last < _68053_tokens.len()) {
		if (_68817_last == 0LL) {
			if (_68053_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last],_68617_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last - 1LL],_68617_parts);
		}
	}
	return _68617_parts;
}



inline jule::Ptr<_20c476dc4_FieldExprPair> _20c4aa1e3_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_20c47803a_Token> _72344_tokens) {
	if ((_72344_tokens.len() - 2LL) == 0LL) {
		(*this)._method_push_err(_72344_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_FieldExprPair> _72817_pair = jule::new_struct<_20c476dc4_FieldExprPair>(new( std::nothrow ) _20c476dc4_FieldExprPair(_72344_tokens[0LL],jule::Any()));
	_72344_tokens=_72344_tokens.slice(2LL);
	(*(_72817_pair))._field_expr=(*((*this)._method_build_from_tokens(_72344_tokens)))._field_kind;
	return _72817_pair;
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_20c47803a_Token>& _73645_tokens) {
	_20c47803a_Token _73717_token = _73645_tokens[0LL];
	if (_73717_token._field_id == 2LLU) {
		if (_73645_tokens.len() > 1LL) {
			_73717_token=_73645_tokens[1LL];
			if (_73717_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_73645_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_73645_tokens));
}



inline jule::Slice<jule::Any> _20c4aa1e3_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_20c47803a_Token>& _74946_tokens) {
	jule::Slice<jule::Slice<_20c47803a_Token>> _75017_parts = (*this)._method_get_brace_range_lit_expr_parts(_74946_tokens);
	if (_75017_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _75517_pairs = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_75017_parts.len()));
	{
		auto &expr = _75017_parts;
		auto it = expr.begin();
		_iter_begin_5295564880:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4aa1e3_part = *it;
			{
				_75517_pairs.push((*this)._method_build_struct_lit_expr(_20c4aa1e3_part));
			}
			_iter_next_5295564880:;
			++it;
			goto _iter_begin_5295564880;
		}
		_iter_end_5295564880:;
	}
	return _75517_pairs;
}



inline jule::Ptr<_20c476dc4_StructLit> _20c4aa1e3_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_20c47803a_Token> _76249_tokens) {
	jule::Int _76317_i = 0LL;
	jule::Ptr<_20c476dc4_TypeDecl> _76418_t;
	jule::Bool _76421_ok;
	std::tie(_76418_t,_76421_ok) = (*((*this)._field_p))._method_build_type(_76249_tokens,(&(_76317_i)),true);
	if ((!(_76421_ok))) {
		return nullptr;
	} else if (_76317_i >= _76249_tokens.len()) {
		(*this)._method_push_err(_76249_tokens[_76317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_76249_tokens=_76249_tokens.slice(_76317_i);
	_20c47803a_Token _77313_token = _76249_tokens[0LL];
	if ((_77313_token._field_id != 3LLU) || (_77313_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_77313_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_StructLit>(new( std::nothrow ) _20c476dc4_StructLit(_76418_t,(*this)._method_build_struct_lit_exprs(_76249_tokens)));
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_20c47803a_Token>& _78544_tokens) {
	jule::Slice<_20c47803a_Token> _78618_l;
	jule::Slice<_20c47803a_Token> _78625_r;
	std::tie(_78618_l,_78625_r) = _20c4aa1e3_split_colon(_78544_tokens);
	if (_78618_l != nullptr) {
		return jule::Any(jule::new_struct<_20c476dc4_KeyValPair>(new( std::nothrow ) _20c476dc4_KeyValPair((*((*this)._method_build_from_tokens(_78618_l)))._field_kind,(*((*this)._method_build_from_tokens(_78625_r)))._field_kind,_78544_tokens[_78618_l.len()])));
	}
	return jule::Any((*this)._method_build_from_tokens(_78544_tokens));
}



inline jule::Ptr<_20c476dc4_BraceLit> _20c4aa1e3_ExprBuilder::_method_build_brace_lit(jule::Slice<_20c47803a_Token>& _79839_tokens) {
	jule::Ptr<_20c476dc4_BraceLit> _79917_lit = jule::new_struct<_20c476dc4_BraceLit>(new( std::nothrow ) _20c476dc4_BraceLit(_79839_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_20c47803a_Token>> _80317_parts = (*this)._method_get_brace_range_lit_expr_parts(_79839_tokens);
	if (_80317_parts == nullptr) {
		return _79917_lit;
	}
	(*(_79917_lit))._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_80317_parts.len()));
	{
		auto &expr = _80317_parts;
		auto it = expr.begin();
		_iter_begin_5295595520:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4aa1e3_part = *it;
			{
				(*(_79917_lit))._field_exprs = jule::alloc_for_append((*(_79917_lit))._field_exprs,1);(*(_79917_lit))._field_exprs.push((*this)._method_build_brace_lit_part(_20c4aa1e3_part));
			}
			_iter_next_5295595520:;
			++it;
			goto _iter_begin_5295595520;
		}
		_iter_end_5295595520:;
	}
	return _79917_lit;
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_brace_range(jule::Slice<_20c47803a_Token>& _81641_tokens) {
	jule::Slice<_20c47803a_Token> _81718_expr_tokens;
	jule::Int _81731_range_n;
	std::tie(_81718_expr_tokens,_81731_range_n) = _20c4aa1e3_get_range_expr_tokens(_81641_tokens);
	{
		
		if (_81718_expr_tokens.len() == 0LL) {
			_case_begin_5295601760:;
			{
				return jule::Any((*this)._method_build_brace_lit(_81641_tokens));
			}
		}
		else if (_81731_range_n > 0LL) {
			_case_begin_5295601856:;
			{
				(*this)._method_push_err(_81641_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5295601632:;
	}
	_20c47803a_Token _82913_else_token = _81718_expr_tokens[_81718_expr_tokens.len() - 1LL];
	if (_81718_expr_tokens[_81718_expr_tokens.len() - 1LL]._field_id == 17LLU) {
		_81718_expr_tokens=_81718_expr_tokens.slice(0LL,_81718_expr_tokens.len() - 1LL);
		jule::Any _83221_d = (*this)._method_build(_81718_expr_tokens);
		if (_83221_d == nullptr) {
			return jule::Any(nullptr);
		}
		{
			auto &_match_expr{ _83221_d };
			
			if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnCallExpr>>()) {
				_case_begin_5295611744:;
				{
					_81641_tokens=_81641_tokens.slice(_81718_expr_tokens.len() + 1LL);
					jule::Int _83925_i = 0LL;
					jule::Slice<_20c47803a_Token> _84025_range_tokens = _20c7de1a3_range(_83925_i,jule::Str("{", 1),jule::Str("}", 1),_81641_tokens);
					jule::Ptr<_20c476dc4_FnCallExpr> _84125_model = _83221_d.operator jule::Ptr<_20c476dc4_FnCallExpr>();
					if ((*(_84125_model))._method_ignored()) {
						(*this)._method_push_err(_82913_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					}
					(*(_84125_model))._field_exception=(*((*this)._field_p))._method_build_scope(_84025_range_tokens);
					return _83221_d;
				}
			}
			else {
				_case_begin_5295611376:;
				{
					(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return jule::Any(nullptr);
				}
			}
			_match_end_5295610656:;
		}
	}
	{
		auto &_match_expr{ _81718_expr_tokens[0LL]._field_id };
		
		if (_match_expr == 35LLU) {
			_case_begin_5295625520:;
			{
				return (*this)._method_build_unsafe(_81641_tokens);
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_5295628032:;
			{
				return jule::Any((*this)._method_build_anon_fn(_81641_tokens));
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 31LLU) {
			_case_begin_5295627776:;
			{
				return jule::Any((*this)._method_build_typed_struct_literal(_81641_tokens));
			}
		}
		else {
			_case_begin_5295601440:;
			{
				(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5295625104:;
	}
}



inline jule::Slice<jule::Slice<_20c47803a_Token>> _20c4aa1e3_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_20c47803a_Token> _87343_tokens) {
	_87343_tokens=_87343_tokens.slice(1LL,_87343_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_20c47803a_Token>> _87518_parts;
	jule::Slice<_20a25b99c_Log> _87525_errors;
	std::tie(_87518_parts,_87525_errors) = _20c7de1a3_parts(_87343_tokens,8LLU,true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_87525_errors);
	return _87518_parts;
}



inline jule::Ptr<_20c476dc4_SliceExpr> _20c4aa1e3_ExprBuilder::_method_build_slice(jule::Slice<_20c47803a_Token> _88034_tokens) {
	jule::Ptr<_20c476dc4_SliceExpr> _88117_slc = jule::new_struct<_20c476dc4_SliceExpr>(new( std::nothrow ) _20c476dc4_SliceExpr(_88034_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_20c47803a_Token>> _88517_parts = (*this)._method_get_enumerable_parts(_88034_tokens);
	if (_88517_parts.len() == 0LL) {
		return _88117_slc;
	}
	(*(_88117_slc))._field_elems=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_88517_parts.len()));
	{
		auto &expr = _88517_parts;
		auto it = expr.begin();
		_iter_begin_5295645072:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c4aa1e3_p = *it;
			{
				(*(_88117_slc))._field_elems = jule::alloc_for_append((*(_88117_slc))._field_elems,1);(*(_88117_slc))._field_elems.push((*((*this)._method_build_from_tokens(_20c4aa1e3_p)))._field_kind);
			}
			_iter_next_5295645072:;
			++it;
			goto _iter_begin_5295645072;
		}
		_iter_end_5295645072:;
	}
	return _88117_slc;
}



inline jule::Ptr<_20c476dc4_IndexingExpr> _20c4aa1e3_ExprBuilder::_method_build_indexing(jule::Slice<_20c47803a_Token> _89837_expr_tokens,jule::Slice<_20c47803a_Token> _89913_tokens,_20c47803a_Token _89934_error_token) {
	_89913_tokens=_89913_tokens.slice(1LL,_89913_tokens.len() - 1LL);
	return jule::new_struct<_20c476dc4_IndexingExpr>(new( std::nothrow ) _20c476dc4_IndexingExpr(_89934_error_token,(*((*this)._method_build_from_tokens(_89837_expr_tokens)))._field_kind,(*((*this)._method_build_from_tokens(_89913_tokens)))._field_kind));
}



inline jule::Ptr<_20c476dc4_SlicingExpr> _20c4aa1e3_ExprBuilder::_method_build_slicing(jule::Slice<_20c47803a_Token>& _90837_expr_tokens,jule::Slice<_20c47803a_Token>& _90864_slicing_tokens,jule::Int& _90910_colon,_20c47803a_Token& _90927_error_token) {
	jule::Ptr<_20c476dc4_SlicingExpr> _91017_slc = jule::new_struct<_20c476dc4_SlicingExpr>(new( std::nothrow ) _20c476dc4_SlicingExpr(_90927_error_token,(*((*this)._method_build_from_tokens(_90837_expr_tokens)))._field_kind,jule::Any(),jule::Any()));
	jule::Slice<_20c47803a_Token> _91517_start_expr_tokens = _90864_slicing_tokens.slice(0LL,_90910_colon);
	if (_91517_start_expr_tokens.len() > 0LL) {
		(*(_91017_slc))._field_start=(*((*this)._method_build_from_tokens(_91517_start_expr_tokens)))._field_kind;
	}
	jule::Slice<_20c47803a_Token> _92017_to_expr_tokens = _90864_slicing_tokens.slice(_90910_colon + 1LL);
	if (_92017_to_expr_tokens.len() > 0LL) {
		(*(_91017_slc))._field_to=(*((*this)._method_build_from_tokens(_92017_to_expr_tokens)))._field_kind;
	}
	return _91017_slc;
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_bracket_range(jule::Slice<_20c47803a_Token> _92842_tokens) {
	_20c47803a_Token _92917_error_token = _92842_tokens[0LL];
	jule::Slice<_20c47803a_Token> _93018_expr_tokens;
	jule::Int _93031_range_n;
	std::tie(_93018_expr_tokens,_93031_range_n) = _20c4aa1e3_get_range_expr_tokens(_92842_tokens);
	{
		
		if (_93018_expr_tokens.len() == 0LL) {
			_case_begin_5295671632:;
			{
				return jule::Any((*this)._method_build_slice(_92842_tokens));
			}
		}
		else if ((_93018_expr_tokens.len() == 0LL) || (_93031_range_n > 0LL)) {
			_case_begin_5295671744:;
			{
				(*this)._method_push_err(_92917_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5295671472:;
	}
	_92842_tokens=_92842_tokens.slice(_93018_expr_tokens.len());
	jule::Int _94917_i = 0LL;
	jule::Slice<_20c47803a_Token> _95018_slicing_tokens;
	jule::Int _95034_colon;
	std::tie(_95018_slicing_tokens,_95034_colon) = _20c9bd97b_split_map_range(_92842_tokens,_94917_i);
	if (_95034_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_93018_expr_tokens,_95018_slicing_tokens,_95034_colon,_92917_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_93018_expr_tokens,_92842_tokens,_92917_error_token));
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_ternary(jule::Slice<_20c47803a_Token> _95736_tokens) {
	jule::Ptr<_20c476dc4_TernaryExpr> _95817_ter = jule::new_struct<_20c476dc4_TernaryExpr>(new( std::nothrow ) _20c476dc4_TernaryExpr());
	(*(_95817_ter))._field_token=_95736_tokens[0LL];
	_95736_tokens=_95736_tokens.slice(1LL);
	jule::Slice<_20c47803a_Token> _96217_expr_tokens = _20c4aa1e3_get_block_expr(_95736_tokens);
	if (_96217_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	(*(_95817_ter))._field_condition=(*this)._method_build_kind(_96217_expr_tokens);
	jule::I64 _96917_i = _96217_expr_tokens.len();
	jule::Slice<_20c47803a_Token> _97017_true_expr = _20c7de1a3_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_97017_true_expr == nullptr) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_97017_true_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_96217_expr_tokens.len()],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i >= _95736_tokens.len()) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("else block missed for ternary operator", 38),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	_20c47803a_Token _98413_else_token = _95736_tokens[_96917_i];
	if (_98413_else_token._field_id != 17LLU) {
		(*this)._method_push_err(_98413_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("else keyword expected for else block of ternary operator", 56),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	(_96917_i)++;
	jule::I64 _99213_j = _96917_i;
	jule::Slice<_20c47803a_Token> _99317_false_expr = _20c7de1a3_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_99317_false_expr == nullptr) {
		(*this)._method_push_err(_98413_else_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_99317_false_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_99213_j],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i < _95736_tokens.len()) {
		(*this)._method_push_err(_95736_tokens[_96917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_95817_ter))._field_true_expr=(*this)._method_build_kind(_97017_true_expr);
	(*(_95817_ter))._field_false_expr=(*this)._method_build_kind(_99317_false_expr);
	return jule::Any(_95817_ter);
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_data(jule::Slice<_20c47803a_Token>& _101234_tokens) {
	{
		auto _match_expr{ _101234_tokens.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_5295717232:;
			{
				return jule::Any(nullptr);
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_5295717328:;
			{
				return (*this)._method_build_single(_101234_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_5295717424:;
			{
				if (_101234_tokens[0LL]._field_id == 31LLU) {
					return jule::Any((*this)._method_build_cpp_linked_ident(_101234_tokens));
				}
			}
		}
		_match_end_5295716848:;
	}
	_20c47803a_Token _102617_token = _101234_tokens[0LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		
		if (_match_expr == 16LLU) {
			_case_begin_5295724240:;
			{
				return (*this)._method_build_ternary(_101234_tokens);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5295724416:;
			{
				if ((_101234_tokens.len() > 1LL) && (_102617_token._field_kind == jule::Str("*", 1))) {
					_102617_token=_101234_tokens[1LL];
					if ((_102617_token._field_id == 1LLU) || (_102617_token._field_id == 35LLU)) {
						return jule::Any((*this)._method_build_type(_101234_tokens));
					}
				}
				return jule::Any((*this)._method_build_unary(_101234_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5295724512:;
			{
				if (_101234_tokens.len() < 3LL) {
					goto _match_end_5295724096;
				}
				if (_101234_tokens.len() > 3LL) {
					_20c47803a_Token _104921_t = _101234_tokens[_101234_tokens.len() - 1LL];
					if ((_104921_t._field_id == 3LLU) && (_104921_t._field_kind == jule::Str(")", 1))) {
						goto _match_end_5295724096;
					}
				}
				_20c47803a_Token _105517_next = _101234_tokens[1LL];
				if ((_105517_next._field_id != 3LLU) || (_105517_next._field_kind != jule::Str("]", 1))) {
					goto _match_end_5295724096;
				}
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		_match_end_5295724096:;
	}
	_102617_token=_101234_tokens[_101234_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		
		if (_match_expr == 2LLU) {
			_case_begin_5295739232:;
			{
				return (*this)._method_build_sub_ident(_101234_tokens);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_5295739328:;
			{
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5295739424:;
			{
				return (*this)._method_build_op_right(_101234_tokens);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5295739520:;
			{
				{
					auto &_match_expr{ _102617_token._field_kind };
					
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_5295742368:;
						{
							return (*this)._method_build_parentheses_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_5295743312:;
						{
							return (*this)._method_build_brace_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_5295743424:;
						{
							return (*this)._method_build_bracket_range(_101234_tokens);
						}
					}
					_match_end_5295744544:;
				}
			}
		}
		_match_end_5295725440:;
	}
	(*this)._method_push_err(_102617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_20c476dc4_BinopExpr> _20c4aa1e3_ExprBuilder::_method_build_binop(jule::Slice<_20c47803a_Token>& _109235_tokens,jule::Int _109252_i) {
	jule::Slice<_20c47803a_Token> _109317_left_tokens = _109235_tokens.slice(0LL,_109252_i);
	jule::Slice<_20c47803a_Token> _109417_right_tokens = _109235_tokens.slice(_109252_i + 1LL);
	if (_109317_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_109417_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_BinopExpr>(new( std::nothrow ) _20c476dc4_BinopExpr((*this)._method_build(_109317_left_tokens),(*this)._method_build(_109417_right_tokens),_109235_tokens[_109252_i]));
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build(jule::Slice<_20c47803a_Token>& _111529_tokens) {
	jule::Int _111613_i = _20c4aa1e3_find_lowest_prec_op(_111529_tokens);
	if (_111613_i == -1LL) {
		return (*this)._method_build_data(_111529_tokens);
	}
	return jule::Any((*this)._method_build_binop(_111529_tokens,_111613_i));
}



inline jule::Any _20c4aa1e3_ExprBuilder::_method_build_kind(jule::Slice<_20c47803a_Token>& _112334_tokens) {
	jule::Slice<jule::Slice<_20c47803a_Token>> _112418_parts;
	jule::Slice<_20a25b99c_Log> _112425_errors;
	std::tie(_112418_parts,_112425_errors) = _20c7de1a3_parts(_112334_tokens,8LLU,true);
	if (_112425_errors != nullptr) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_112425_errors);
		return jule::Any(nullptr);
	} else if (_112418_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_112418_parts));
	}
	return (*this)._method_build(_112334_tokens);
}



inline jule::Ptr<_20c476dc4_Expr> _20c4aa1e3_ExprBuilder::_method_build_from_tokens(jule::Slice<_20c47803a_Token> _113440_tokens) {
	_113440_tokens=_20c4aa1e3_eliminate_comments(_113440_tokens);
	if (_113440_tokens.len() == 0LL) {
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_Expr>(new( std::nothrow ) _20c476dc4_Expr(_113440_tokens[0LL],(*this)._method_build_kind(_113440_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4aa1e3_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _20c7de1a3_Parser::_method_stop(void) {
	(*this)._field_ast=nullptr;
}



inline jule::Bool _20c7de1a3_Parser::_method_stopped(void) {
	return (*this)._field_ast == nullptr;
}



inline void _20c7de1a3_Parser::_method_push_err(_20c47803a_Token _24027_token,jule::Str _24041_fmt,jule::Slice<jule::Any> _24054_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_20c7de1a3_compiler_err(_24027_token,_24041_fmt,_24054_args));
}



inline void _20c7de1a3_Parser::_method_push_suggestion(jule::Str _24534_fmt,jule::Slice<jule::Any> _24547_args) {
	{
		_20c7de1a3_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_24534_fmt,_24547_args);
	}
}



inline jule::Ptr<_20c476dc4_Expr> _20c7de1a3_Parser::_method_build_expr(jule::Slice<_20c47803a_Token>& _24935_tokens) {
	jule::Ptr<_20c4aa1e3_ExprBuilder> _25017_ep = jule::new_struct<_20c4aa1e3_ExprBuilder>(new( std::nothrow ) _20c4aa1e3_ExprBuilder(this->self));
	jule::Ptr<_20c476dc4_Expr> _25117_expr = (*(_25017_ep))._method_build_from_tokens(_24935_tokens);
	return _25117_expr;
}



inline jule::Ptr<_20c476dc4_Directive> _20c7de1a3_Parser::_method_build_directive(jule::Slice<_20c47803a_Token> _25538_tokens) {
	if (_25538_tokens.len() == 1LL) {
		(*this)._method_push_err(_25538_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_25538_tokens[1LL]._field_column != (_25538_tokens[0LL]._field_column + 1LL)) {
		(*this)._method_push_err(_25538_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_Directive>(new( std::nothrow ) _20c476dc4_Directive(_25538_tokens[1LL],_25538_tokens.slice(2LL)));
}



inline void _20c7de1a3_Parser::_method_push_directive(jule::Ptr<_20c476dc4_Directive> _27237_d) {
	if (_27237_d == nullptr) {
		return;
	}
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_5295803360:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> &_20c7de1a3_pd = *it;
			{
				if ((*(_27237_d))._field_tag._field_kind == (*(_20c7de1a3_pd))._field_tag._field_kind) {
					return;
				}
			}
			_iter_next_5295803360:;
			++it;
			goto _iter_begin_5295803360;
		}
		_iter_end_5295803360:;
	}
	(*this)._field_directives = jule::alloc_for_append((*this)._field_directives,1);(*this)._field_directives.push(_27237_d);
}



inline jule::Ptr<_20c476dc4_ScopeTree> _20c7de1a3_Parser::_method_build_scope(jule::Slice<_20c47803a_Token>& _28636_tokens) {
	jule::Ptr<_20c476dc4_ScopeTree> _28717_s = _20c4d7055_new_scope();
	_20c4d7055_ScopeParser _28817_sp = _20c4d7055_ScopeParser(this->self,jule::Ptr<_20c476dc4_ScopeTree>(),jule::Slice<jule::Ptr<_20c4d7055_Stmt>>(),jule::Int());
	_28817_sp._method_build(_28636_tokens,_28717_s);
	return _28717_s;
}



inline std::tuple<jule::Ptr<_20c476dc4_TypeDecl>,jule::Bool> _20c7de1a3_Parser::_method___build_type(jule::Slice<_20c47803a_Token>& _29544_tokens,jule::Int* _29613_i,jule::Bool _29622_err) {
	_20c9bd97b_TypeBuilder _29717_tb = _20c9bd97b_TypeBuilder(this->self,_29544_tokens,_29613_i,_29622_err);
	jule::Ptr<_20c476dc4_TypeDecl> _30318_decl;
	jule::Bool _30324_ok;
	std::tie(_30318_decl,_30324_ok) = _29717_tb._method_build();
	return std::make_tuple(_30318_decl,_30324_ok);
}



inline std::tuple<jule::Ptr<_20c476dc4_TypeDecl>,jule::Bool> _20c7de1a3_Parser::_method_build_type(jule::Slice<_20c47803a_Token>& _30842_tokens,jule::Int* _30913_i,jule::Bool _30922_err) {
	_20c47803a_Token _31013_token = _30842_tokens[(*(_30913_i))];
	jule::Ptr<_20c476dc4_TypeDecl> _31118_t;
	jule::Bool _31121_ok;
	std::tie(_31118_t,_31121_ok) = (*(this->self))._method___build_type(_30842_tokens,_30913_i,_30922_err);
	if (_30922_err && (!(_31121_ok))) {
		(*(this->self))._method_push_err(_31013_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	}
	return std::make_tuple(_31118_t,_31121_ok);
}



inline jule::Ptr<_20c476dc4_TypeAliasDecl> _20c7de1a3_Parser::_method_build_type_alias_decl(jule::Slice<_20c47803a_Token>& _31846_tokens) {
	jule::Int _31917_i = 1LL;
	if (_31917_i >= _31846_tokens.len()) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_TypeAliasDecl> _32417_tad = jule::new_struct<_20c476dc4_TypeAliasDecl>(new( std::nothrow ) _20c476dc4_TypeAliasDecl(jule::Ptr<_20c476dc4_ScopeTree>(),jule::Bool(),jule::Bool(),_31846_tokens[1LL],_31846_tokens[1LL]._field_kind,jule::Ptr<_20c476dc4_TypeDecl>(),jule::Ptr<_20c476dc4_CommentGroup>()));
	_20c47803a_Token _32817_token = _31846_tokens[_31917_i];
	if (_32817_token._field_id != 2LLU) {
		(*(this->self))._method_push_err(_32817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_31917_i)++;
	if (_31917_i >= _31846_tokens.len()) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	_32817_token=_31846_tokens[_31917_i];
	if (_32817_token._field_id != 11LLU) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	(_31917_i)++;
	if (_31917_i >= _31846_tokens.len()) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	jule::Ptr<_20c476dc4_TypeDecl> _34918_t;
	jule::Bool _34921_ok;
	std::tie(_34918_t,_34921_ok) = (*(this->self))._method_build_type(_31846_tokens,(&(_31917_i)),true);
	(*(_32417_tad))._field_kind=_34918_t;
	if (_34921_ok && (_31917_i < _31846_tokens.len())) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _32417_tad;
}



inline void _20c7de1a3_Parser::_method_build_var_type_and_expr(jule::Ptr<_20c476dc4_VarDecl>& _35748_v,jule::Slice<_20c47803a_Token>& _35766_tokens) {
	jule::Int _35817_i = 0LL;
	_20c47803a_Token _35917_tok = _35766_tokens[_35817_i];
	if (_35917_tok._field_id == 11LLU) {
		(_35817_i)++;
		if ((_35817_i >= _35766_tokens.len()) || ((_35766_tokens[_35817_i]._field_id == 7LLU) && (_35766_tokens[_35817_i]._field_kind == jule::Str("=", 1)))) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;
		}
		jule::Ptr<_20c476dc4_TypeDecl> _36722_t;
		jule::Bool _36725_ok;
		std::tie(_36722_t,_36725_ok) = (*(this->self))._method_build_type(_35766_tokens,(&(_35817_i)),true);
		if (_36725_ok) {
			(*(_35748_v))._field_kind=_36722_t;
			if (_35817_i >= _35766_tokens.len()) {
				return;
			}
			_35917_tok=_35766_tokens[_35817_i];
		}
	}
	if (_35917_tok._field_id == 7LLU) {
		if (_35917_tok._field_kind != jule::Str("=", 1)) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;
		}
		jule::Slice<_20c47803a_Token> _38221_expr_tokens = _35766_tokens.slice(_35817_i + 1LL);
		if (_38221_expr_tokens.len() == 0LL) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;
		}
		(*(_35748_v))._field_expr=(*(this->self))._method_build_expr(_38221_expr_tokens);
	} else {
		(*(this->self))._method_push_err(_35917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _20c7de1a3_Parser::_method_build_var_common(jule::Ptr<_20c476dc4_VarDecl>& _39341_v,jule::Slice<_20c47803a_Token> _39358_tokens) {
	(*(_39341_v))._field_token=_39358_tokens[0LL];
	if ((*(_39341_v))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_39341_v))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	(*(_39341_v))._field_ident=(*(_39341_v))._field_token._field_kind;
	(*(_39341_v))._field_kind=nullptr;
	if (_39358_tokens.len() > 1LL) {
		_39358_tokens=_39358_tokens.slice(1LL);
		(*(this->self))._method_build_var_type_and_expr(_39341_v,_39358_tokens);
	}
}



inline void _20c7de1a3_Parser::_method_build_var_begin(jule::Ptr<_20c476dc4_VarDecl>& _40839_v,jule::Ptr<jule::Int> _40856_i,jule::Slice<_20c47803a_Token>& _40866_tokens) {
	_20c47803a_Token _40913_tok = _40866_tokens[(*(_40856_i))];
	{
		auto &_match_expr{ _40913_tok._field_id };
		
		if (_match_expr == 38LLU) {
			_case_begin_5295902944:;
			{
				(*(_40839_v))._field_statically=true;
				goto _case_begin_5295901328;
			}
		}
		else if (_match_expr == 34LLU) {
			_case_begin_5295901328:;
			{
				((*(_40856_i)))++;
				if ((*(_40856_i)) >= _40866_tokens.len()) {
					(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				if (_40866_tokens[(*(_40856_i))]._field_id == 36LLU) {
					(*(_40839_v))._field_mutable=true;
					((*(_40856_i)))++;
				}
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_5295901424:;
			{
				((*(_40856_i)))++;
				(*(_40839_v))._field_constant=true;
			}
		}
		else {
			_case_begin_5295899712:;
			{
				(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5295900544:;
	}
	if ((*(_40856_i)) >= _40866_tokens.len()) {
		(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_20c476dc4_VarDecl> _20c7de1a3_Parser::_method_build_var(jule::Slice<_20c47803a_Token> _44233_tokens) {
	jule::Ptr<jule::Int> _44317_i = jule::new_ptr<jule::Int>(0LL);
	jule::Ptr<_20c476dc4_VarDecl> _44417_v = jule::new_struct<_20c476dc4_VarDecl>(new( std::nothrow ) _20c476dc4_VarDecl(jule::Ptr<_20c476dc4_ScopeTree>(),_44233_tokens[(*(_44317_i))],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20c476dc4_CommentGroup>(),jule::Ptr<_20c476dc4_TypeDecl>(),jule::Ptr<_20c476dc4_Expr>()));
	(*(this->self))._method_build_var_begin(_44417_v,_44317_i,_44233_tokens);
	if ((*(_44317_i)) >= _44233_tokens.len()) {
		return nullptr;
	}
	_44233_tokens=_44233_tokens.slice((*(_44317_i)));
	if ((_44233_tokens[0LL]._field_id == 7LLU) && (_44233_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		(*(_44417_v))._field_reference=true;
		if (_44233_tokens.len() == 1LL) {
			return nullptr;
		}
		_44233_tokens=_44233_tokens.slice(1LL);
	}
	(*(this->self))._method_build_var_common(_44417_v,_44233_tokens);
	return _44417_v;
}



inline jule::Ptr<_20c476dc4_GenericDecl> _20c7de1a3_Parser::_method_build_generic(jule::Slice<_20c47803a_Token>& _46437_tokens) {
	if (_46437_tokens.len() > 1LL) {
		(*this)._method_push_err(_46437_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20c476dc4_GenericDecl> _46817_g = jule::new_struct<_20c476dc4_GenericDecl>(new( std::nothrow ) _20c476dc4_GenericDecl(_46437_tokens[0LL],jule::Str()));
	if ((*(_46817_g))._field_token._field_id != 2LLU) {
		(*this)._method_push_err((*(_46817_g))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_46817_g))._field_ident=(*(_46817_g))._field_token._field_kind;
	return _46817_g;
}



inline jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _20c7de1a3_Parser::_method_build_generics(jule::Slice<_20c47803a_Token>& _47938_tokens,_20c47803a_Token& _47956_error_token) {
	if (_47938_tokens.len() == 0LL) {
		(*this)._method_push_err(_47956_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<jule::Slice<_20c47803a_Token>> _48518_parts;
	jule::Slice<_20a25b99c_Log> _48525_errors;
	std::tie(_48518_parts,_48525_errors) = _20c7de1a3_parts(_47938_tokens,8LLU,true);
	if (_48525_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_48525_errors);
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _49117_generics = jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>::alloc(0LL,static_cast<jule::I64>(_48518_parts.len()));
	{
		auto &expr = _48518_parts;
		auto it = expr.begin();
		_iter_begin_5295941200:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c7de1a3_part = *it;
			{
				_49117_generics.push((*this)._method_build_generic(_20c7de1a3_part));
			}
			_iter_next_5295941200:;
			++it;
			goto _iter_begin_5295941200;
		}
		_iter_end_5295941200:;
	}
	return _49117_generics;
}



inline jule::Ptr<_20c476dc4_ParamDecl> _20c7de1a3_Parser::_method_build_self_param(jule::Slice<_20c47803a_Token> _49939_tokens) {
	if (_49939_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_20c476dc4_ParamDecl> _50417_param = jule::new_struct<_20c476dc4_ParamDecl>(new( std::nothrow ) _20c476dc4_ParamDecl());
	jule::Int _50717_i = 0LL;
	if (_49939_tokens[_50717_i]._field_id == 36LLU) {
		(*(_50417_param))._field_mutable=true;
		(_50717_i)++;
		if (_50717_i >= _49939_tokens.len()) {
			(*this)._method_push_err(_49939_tokens[_50717_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49939_tokens[_50717_i]._field_kind == jule::Str("&", 1)) {
		(*(_50417_param))._field_ident=jule::Str("&", 1);
		(_50717_i)++;
		if (_50717_i >= _49939_tokens.len()) {
			(*this)._method_push_err(_49939_tokens[_50717_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49939_tokens[_50717_i]._field_id == 28LLU) {
		(*(_50417_param))._field_ident+=jule::Str("self", 4);
		(*(_50417_param))._field_token=_49939_tokens[_50717_i];
		(_50717_i)++;
		if (_50717_i < _49939_tokens.len()) {
			(*this)._method_push_err(_49939_tokens[_50717_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	}
	return _50417_param;
}



inline void _20c7de1a3_Parser::_method_param_type_begin(jule::Ptr<_20c476dc4_ParamDecl>& _53840_param,jule::Int& _53864_i,jule::Slice<_20c47803a_Token>& _53873_tokens) {
	for (; _53864_i < _53873_tokens.len(); (_53864_i)++) {
		{
			_20c47803a_Token _54017_token = _53873_tokens[_53864_i];
			if (_54017_token._field_id != 7LLU) {
				return;
			} else if (_54017_token._field_kind != jule::Str("...", 3)) {
				return;
			}
			if ((*(_53840_param))._field_variadic) {
				(*this)._method_push_err(_54017_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_5295966256;
			}
			(*(_53840_param))._field_variadic=true;
		}
	_iter_next_5295966256:;
	}
	_iter_end_5295966256:;
}



inline void _20c7de1a3_Parser::_method_build_param_type(jule::Ptr<_20c476dc4_ParamDecl>& _55541_param,jule::Slice<_20c47803a_Token>& _55565_tokens) {
	jule::Int _55617_i = 0LL;
	(*(this->self))._method_param_type_begin(_55541_param,_55617_i,_55565_tokens);
	if (_55617_i >= _55565_tokens.len()) {
		return;
	}
	std::tie((*(_55541_param))._field_kind,std::ignore) = (*(this->self))._method_build_type(_55565_tokens,(&(_55617_i)),true);
	if (_55617_i < _55565_tokens.len()) {
		(*(this->self))._method_push_err(_55565_tokens[_55617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _20c7de1a3_Parser::_method_param_body_id(jule::Ptr<_20c476dc4_ParamDecl> _56832_param,_20c47803a_Token _56851_token) {
	if (_20c47803a_is_ignore_ident(_56851_token._field_kind)) {
		(*(_56832_param))._field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	(*(_56832_param))._field_ident=_56851_token._field_kind;
}



inline void _20c7de1a3_Parser::_method_build_param_body(jule::Ptr<_20c476dc4_ParamDecl>& _57641_param,jule::Ptr<jule::Int> _57664_i,jule::Slice<_20c47803a_Token> _57677_tokens) {
	(*(this->self))._method_param_body_id(_57641_param,_57677_tokens[(*(_57664_i))]);
	_20c47803a_Token _57817_tok = _57677_tokens[(*(_57664_i))];
	if (((*(_57664_i)) + 1LL) >= _57677_tokens.len()) {
		return;
	} else if (((_57677_tokens.len() - (*(_57664_i))) - 1LL) < 2LL) {
		(*(this->self))._method_push_err(_57817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;
	}
	_57817_tok=_57677_tokens[(*(_57664_i)) + 1LL];
	if (_57817_tok._field_id != 11LLU) {
		(*(this->self))._method_build_param_type(_57641_param,_57677_tokens);
		return;
	}
	_57677_tokens=_57677_tokens.slice((*(_57664_i)) + 2LL);
	(*(this->self))._method_build_param_type(_57641_param,_57677_tokens);
}



inline jule::Ptr<_20c476dc4_ParamDecl> _20c7de1a3_Parser::_method_build_param(jule::Slice<_20c47803a_Token> _59735_tokens) {
	jule::Ptr<_20c476dc4_ParamDecl> _59817_param = jule::new_struct<_20c476dc4_ParamDecl>(new( std::nothrow ) _20c476dc4_ParamDecl(_59735_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20c476dc4_TypeDecl>(),jule::Str()));
	if ((*(_59817_param))._field_token._field_id == 36LLU) {
		(*(_59817_param))._field_mutable=true;
		if (_59735_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_59735_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_59735_tokens=_59735_tokens.slice(1LL);
		(*(_59817_param))._field_token=_59735_tokens[0LL];
	}
	if (_59735_tokens.len() >= 3LL) {
		if (((*(_59817_param))._field_token._field_id == 7LLU) && ((*(_59817_param))._field_token._field_kind == jule::Str("&", 1))) {
			if (_59735_tokens.len() == 1LL) {
				(*(this->self))._method_push_err(_59735_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
			if ((_59735_tokens[1LL]._field_id == 2LLU) && (_59735_tokens[2LL]._field_id == 11LLU)) {
				(*(_59817_param))._field_reference=true;
				_59735_tokens=_59735_tokens.slice(1LL);
				(*(_59817_param))._field_token=_59735_tokens[0LL];
			}
		}
	}
	if ((*(_59817_param))._field_token._field_id != 2LLU) {
		(*(_59817_param))._field_ident=jule::Str("<anonymous>", 11);
		(*(this->self))._method_build_param_type(_59817_param,_59735_tokens);
	} else {
		jule::Ptr<jule::Int> _63421_i = jule::new_ptr<jule::Int>(0LL);
		(*(this->self))._method_build_param_body(_59817_param,_63421_i,_59735_tokens);
	}
	return _59817_param;
}



inline void _20c7de1a3_Parser::_method_check_params(jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>>& _64136_params) {
	{
		auto &expr = _64136_params;
		auto it = expr.begin();
		_iter_begin_5296025456:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_ParamDecl> _20c7de1a3_param = *it;
			{
				if ((*(_20c7de1a3_param))._method_is_self() || ((*(_20c7de1a3_param))._field_kind != nullptr)) {
					goto _iter_next_5296025456;
				}
				if ((*(_20c7de1a3_param))._field_token._field_id == 0LLU) {
					(*this)._method_push_err((*(_20c7de1a3_param))._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					(*(_20c7de1a3_param))._field_kind=jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl((*(_20c7de1a3_param))._field_token,jule::Any(jule::new_struct<_20c476dc4_IdentTypeDecl>(new( std::nothrow ) _20c476dc4_IdentTypeDecl((*(_20c7de1a3_param))._field_token,(*(_20c7de1a3_param))._field_token._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>())))));
					(*(_20c7de1a3_param))._field_ident=jule::Str("<anonymous>", 11);
					(*(_20c7de1a3_param))._field_token=_20c47803a_Token();
				}
			}
			_iter_next_5296025456:;
			++it;
			goto _iter_begin_5296025456;
		}
		_iter_end_5296025456:;
	}
}



inline jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>> _20c7de1a3_Parser::_method_build_params(jule::Slice<_20c47803a_Token>& _66237_tokens,jule::Bool _66254_method) {
	jule::Slice<jule::Slice<_20c47803a_Token>> _66318_parts;
	jule::Slice<_20a25b99c_Log> _66325_errs;
	std::tie(_66318_parts,_66325_errs) = _20c7de1a3_parts(_66237_tokens,8LLU,true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_66325_errs);
	if (_66318_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>> _66917_params = nullptr;
	if (_66254_method && (_66318_parts.len() > 0LL)) {
		jule::Ptr<_20c476dc4_ParamDecl> _67121_param = (*(this->self))._method_build_self_param(_66318_parts[0LL]);
		if ((_67121_param != nullptr) && (*(_67121_param))._method_is_self()) {
			_66917_params.push(_67121_param);
			_66318_parts=_66318_parts.slice(1LL);
		}
	}
	{
		auto &expr = _66318_parts;
		auto it = expr.begin();
		_iter_begin_5296045760:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c7de1a3_part = *it;
			{
				jule::Ptr<_20c476dc4_ParamDecl> _67921_param = (*(this->self))._method_build_param(_20c7de1a3_part);
				if (_67921_param != nullptr) {
					_66917_params.push(_67921_param);
				}
			}
			_iter_next_5296045760:;
			++it;
			goto _iter_begin_5296045760;
		}
		_iter_end_5296045760:;
	}
	(*(this->self))._method_check_params(_66917_params);
	return _66917_params;
}



inline std::tuple<jule::Ptr<_20c476dc4_RetTypeDecl>,jule::Bool> _20c7de1a3_Parser::_method_build_multi_ret_type(jule::Slice<_20c47803a_Token>& _68945_tokens,jule::Int& _68967_i) {
	jule::Ptr<_20c476dc4_RetTypeDecl> _68977_t = jule::Ptr<_20c476dc4_RetTypeDecl>();
	jule::Bool _68994_ok = jule::Bool();
	_68977_t=jule::new_struct<_20c476dc4_RetTypeDecl>(new( std::nothrow ) _20c476dc4_RetTypeDecl());
	(_68967_i)++;
	if (_68967_i >= _68945_tokens.len()) {
		(_68967_i)--;
		std::tie((*(_68977_t))._field_kind,_68994_ok) = (*(this->self))._method_build_type(_68945_tokens,(&(_68967_i)),false);
		return std::make_tuple(_68977_t,_68994_ok);
	}
	(_68967_i)--;
	jule::Slice<_20c47803a_Token> _69917_range_tokens = _20c7de1a3_range(_68967_i,jule::Str("(", 1),jule::Str(")", 1),_68945_tokens);
	jule::Slice<jule::Slice<_20c47803a_Token>> _70118_parts;
	jule::Slice<_20a25b99c_Log> _70125_errs;
	std::tie(_70118_parts,_70125_errs) = _20c7de1a3_parts(_69917_range_tokens,8LLU,true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_70125_errs);
	if (_70118_parts.len() == 0LL) {
		return std::make_tuple(_68977_t,_68994_ok);
	}
	jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _70717_types = jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_70118_parts.len()));
	(*(_68977_t))._field_idents=jule::Slice<_20c47803a_Token>::alloc(0LL,static_cast<jule::I64>(_70118_parts.len()));
	{
		auto &expr = _70118_parts;
		auto it = expr.begin();
		_iter_begin_5296067328:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c7de1a3_part = *it;
			{
				_20c47803a_Token _71021_token = _20c7de1a3_part[0LL];
				jule::Int _71121_offset = 0LL;
				if (_20c7de1a3_part.len() > 1LL) {
					_71021_token=_20c7de1a3_part[1LL];
					if (_71021_token._field_id == 11LLU) {
						_71121_offset=2LL;
						if (_20c7de1a3_part.len() < 3LL) {
							(*(this->self))._method_push_err(_71021_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_5296067328;
						}
					}
				}
				_71021_token=_20c7de1a3_part[0LL];
				if (_71121_offset == 2LL) {
					if (_71021_token._field_id != 2LLU) {
					}
					(*(_68977_t))._field_idents = jule::alloc_for_append((*(_68977_t))._field_idents,1);(*(_68977_t))._field_idents.push(_71021_token);
				} else {
					_71021_token._field_kind=jule::Str("_", 1);
					(*(_68977_t))._field_idents = jule::alloc_for_append((*(_68977_t))._field_idents,1);(*(_68977_t))._field_idents.push(_71021_token);
				}
				jule::Ptr<_20c476dc4_TypeDecl> _73622_t;
				std::tie(_73622_t,std::ignore) = (*(this->self))._method_build_type(_20c7de1a3_part,(&(_71121_offset)),true);
				if (_71121_offset < _20c7de1a3_part.len()) {
					(*(this->self))._method_push_err(_20c7de1a3_part[_71121_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_70717_types.push(_73622_t);
			}
			_iter_next_5296067328:;
			++it;
			goto _iter_begin_5296067328;
		}
		_iter_end_5296067328:;
	}
	if (_70717_types.len() > 1LL) {
		(*(_68977_t))._field_kind=jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_68945_tokens[0LL],jule::Any(jule::new_struct<_20c476dc4_TupleTypeDecl>(new( std::nothrow ) _20c476dc4_TupleTypeDecl(_70717_types)))));
	} else {
		(*(_68977_t))._field_kind=_70717_types[0LL];
	}
	_68994_ok=true;
	return std::make_tuple(_68977_t,_68994_ok);
}



inline std::tuple<jule::Ptr<_20c476dc4_RetTypeDecl>,jule::Bool> _20c7de1a3_Parser::_method_build_ret_type(jule::Slice<_20c47803a_Token>& _75939_tokens,jule::Int& _75961_i) {
	jule::Ptr<_20c476dc4_RetTypeDecl> _75971_t = jule::Ptr<_20c476dc4_RetTypeDecl>();
	jule::Bool _75988_ok = jule::Bool();
	_75971_t=jule::new_struct<_20c476dc4_RetTypeDecl>(new( std::nothrow ) _20c476dc4_RetTypeDecl());
	if (_75961_i >= _75939_tokens.len()) {
		return std::make_tuple(_75971_t,_75988_ok);
	}
	_20c47803a_Token _76517_token = _75939_tokens[_75961_i];
	{
		auto &_match_expr{ _76517_token._field_id };
		
		if (_match_expr == 3LLU) {
			_case_begin_5296094192:;
			{
				if (_76517_token._field_kind == jule::Str("{", 1)) {
					return std::make_tuple(_75971_t,_75988_ok);
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5296094368:;
			{
				if (_76517_token._field_kind == jule::Str("=", 1)) {
					return std::make_tuple(_75971_t,_75988_ok);
				}
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_5296094464:;
			{
				if ((_75961_i + 1LL) >= _75939_tokens.len()) {
					(*(this->self))._method_push_err(_76517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_75971_t,_75988_ok);
				}
				(_75961_i)++;
				_76517_token=_75939_tokens[_75961_i];
				if (_76517_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _76517_token._field_kind };
						
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_5296102240:;
							{
								jule::Ptr<_20c476dc4_RetTypeDecl> _78830_decl;
								jule::Bool _78836_ok;
								std::tie(_78830_decl,_78836_ok) = (*(this->self))._method_build_multi_ret_type(_75939_tokens,_75961_i);
								_75971_t = _78830_decl;
								_75988_ok = _78836_ok;
								return std::make_tuple(_75971_t,_75988_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_5296102336:;
							{
								(*(this->self))._method_push_err(_76517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_75971_t,_75988_ok);
							}
						}
						_match_end_5296102128:;
					}
				}
				std::tie((*(_75971_t))._field_kind,_75988_ok) = (*(this->self))._method_build_type(_75939_tokens,(&(_75961_i)),true);
				return std::make_tuple(_75971_t,_75988_ok);
			}
		}
		_match_end_5296094112:;
	}
	(_75961_i)++;
	(*(this->self))._method_push_err(_76517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_75971_t,_75988_ok);
}



inline jule::Ptr<_20c476dc4_FnDecl> _20c7de1a3_Parser::_method_build_fn_prototype(jule::Slice<_20c47803a_Token>& _80743_tokens,jule::Int& _80765_i,jule::Bool _80773_method) {
	jule::Ptr<_20c476dc4_FnDecl> _80817_f = jule::new_struct<_20c476dc4_FnDecl>(new( std::nothrow ) _20c476dc4_FnDecl(_80743_tokens[_80765_i],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20c476dc4_CommentGroup>(),jule::Ptr<_20c476dc4_ScopeTree>(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),jule::Ptr<_20c476dc4_RetTypeDecl>(),jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>>()));
	if ((*(_80817_f))._field_token._field_id == 38LLU) {
		(*(_80817_f))._field_statically=true;
		(_80765_i)++;
		if (_80765_i >= _80743_tokens.len()) {
			(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80817_f))._field_token=_80743_tokens[_80765_i];
	}
	if ((*(_80817_f))._field_token._field_id == 35LLU) {
		(*(_80817_f))._field_unsafety=true;
		(_80765_i)++;
		if (_80765_i >= _80743_tokens.len()) {
			(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80817_f))._field_token=_80743_tokens[_80765_i];
	}
	(_80765_i)++;
	if (_80765_i >= _80743_tokens.len()) {
		(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_20c47803a_Token _84113_tok = _80743_tokens[_80765_i];
	if (_84113_tok._field_id == 2LLU) {
		(_80765_i)++;
		if (_80765_i >= _80743_tokens.len()) {
			(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80817_f))._field_ident=_84113_tok._field_kind;
	} else {
		(*(_80817_f))._field_ident=jule::Str("<anonymous>", 11);
	}
	_20c47803a_Token _85313_error_token = _80743_tokens[_80765_i];
	jule::Slice<_20c47803a_Token> _85417_generics_tokens = _20c7de1a3_range(_80765_i,jule::Str("[", 1),jule::Str("]", 1),_80743_tokens);
	if (_85417_generics_tokens != nullptr) {
		(*(_80817_f))._field_generics=(*(this->self))._method_build_generics(_85417_generics_tokens,_85313_error_token);
	}
	if (_80743_tokens[_80765_i]._field_kind != jule::Str("(", 1)) {
		(*(this->self))._method_push_err(_80743_tokens[_80765_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_20c47803a_Token> _86417_params_toks = _20c7de1a3_range(_80765_i,jule::Str("(", 1),jule::Str(")", 1),_80743_tokens);
	if (_86417_params_toks.len() > 0LL) {
		(*(_80817_f))._field_params=(*(this->self))._method_build_params(_86417_params_toks,_80773_method);
	}
	if (_80765_i < _80743_tokens.len()) {
		_20c47803a_Token _87017_token = _80743_tokens[_80765_i];
		if ((_87017_token._field_id == 7LLU) && (_87017_token._field_kind == jule::Str("!", 1))) {
			(*(_80817_f))._field_exceptional=true;
			(_80765_i)++;
		}
	}
	std::tie((*(_80817_f))._field_result,std::ignore) = (*(this->self))._method_build_ret_type(_80743_tokens,_80765_i);
	return _80817_f;
}



inline jule::Ptr<_20c476dc4_FnDecl> _20c7de1a3_Parser::_method_build_fn(jule::Slice<_20c47803a_Token>& _88333_tokens,jule::Bool _88350_method,jule::Bool _88364_prototype) {
	jule::Int _88417_i = 0LL;
	jule::Ptr<_20c476dc4_FnDecl> _88517_f = (*(this->self))._method_build_fn_prototype(_88333_tokens,_88417_i,_88350_method);
	if (_88364_prototype) {
		if (_88417_i < _88333_tokens.len()) {
			(*(this->self))._method_push_err(_88333_tokens[_88417_i + 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		return _88517_f;
	} else if (_88517_f == nullptr) {
		return _88517_f;
	}
	if (_88417_i >= _88333_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88517_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_20c47803a_Token> _90117_block_tokens = _20c7de1a3_range(_88417_i,jule::Str("{", 1),jule::Str("}", 1),_88333_tokens);
	if (_90117_block_tokens != nullptr) {
		(*(_88517_f))._field_scope=(*(this->self))._method_build_scope(_90117_block_tokens);
		(*((*(_88517_f))._field_scope))._field_unsafety=(*(_88517_f))._field_unsafety;
		if (_88417_i < _88333_tokens.len()) {
			(*(this->self))._method_push_err(_88333_tokens[_88417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88517_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _88517_f;
}



inline jule::Slice<_20c47803a_Token> _20c7de1a3_Parser::_method_get_use_decl_selectors(jule::Slice<_20c47803a_Token> _91745_tokens) {
	jule::Int _91817_i = 0LL;
	_91745_tokens=_20c7de1a3_range(_91817_i,jule::Str("{", 1),jule::Str("}", 1),_91745_tokens);
	jule::Slice<jule::Slice<_20c47803a_Token>> _92018_parts;
	jule::Slice<_20a25b99c_Log> _92025_errs;
	std::tie(_92018_parts,_92025_errs) = _20c7de1a3_parts(_91745_tokens,8LLU,true);
	if (_92025_errs.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_92025_errs);
		return nullptr;
	}
	jule::Slice<_20c47803a_Token> _92617_selectors = jule::Slice<_20c47803a_Token>::alloc(0LL,static_cast<jule::I64>(_92018_parts.len()));
	{
		auto &expr = _92018_parts;
		auto it = expr.begin();
		_iter_begin_5296178256:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c7de1a3_part = *it;
			{
				if (_20c7de1a3_part.len() > 1LL) {
					(*this)._method_push_err(_20c7de1a3_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_20c47803a_Token _93121_tok = _20c7de1a3_part[0LL];
				if ((_93121_tok._field_id != 2LLU) && (_93121_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_93121_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_5296178256;
				}
				_92617_selectors.push(_93121_tok);
			}
			_iter_next_5296178256:;
			++it;
			goto _iter_begin_5296178256;
		}
		_iter_end_5296178256:;
	}
	return _92617_selectors;
}



inline void _20c7de1a3_Parser::_method_build_cpp_use_decl(jule::Ptr<_20c476dc4_UseDecl>& _94242_decl,jule::Slice<_20c47803a_Token>& _94259_tokens) {
	if (_94259_tokens.len() > 1LL) {
		(*this)._method_push_err(_94259_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_20c47803a_Token _94613_token = _94259_tokens[0LL];
	if ((_94613_token._field_id != 6LLU) || ((_94613_token._field_kind[0LL] != '`') && (_94613_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_94613_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	(*(_94242_decl))._field_cpp_linked=true;
	(*(_94242_decl))._field_link_path=_94613_token._field_kind.slice(1LL,_94613_token._field_kind.len() - 1LL);
	if ((!(_20a25878a_is_std_header_path((*(_94242_decl))._field_link_path)))) {
		(*(_94242_decl))._field_link_path=_20a3911b9_join(jule::Slice<jule::Str>({(*(_94613_token._field_file))._method_dir(),(*(_94242_decl))._field_link_path}));
	}
}



inline void _20c7de1a3_Parser::_method_build_std_use_decl(jule::Ptr<_20c476dc4_UseDecl>& _95842_decl,jule::Slice<_20c47803a_Token> _95862_tokens) {
	(*(_95842_decl))._field_std=true;
	_20c47803a_Token _96117_token = _95862_tokens[0LL];
	if (_95862_tokens.len() < 3LL) {
		(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_95862_tokens=_95862_tokens.slice(2LL);
	_96117_token=_95862_tokens[_95862_tokens.len() - 1LL];
	{
		auto &_match_expr{ _96117_token._field_id };
		
		if (_match_expr == 23LLU) {
			_case_begin_5296208160:;
			{
				(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5296208256:;
			{
				if (_96117_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_20c47803a_Token> _97921_selectors = nullptr;
				std::tie(_95862_tokens,_97921_selectors) = _20c7de1a3_range_last(_95862_tokens);
				(*(_95842_decl))._field_selected=(*this)._method_get_use_decl_selectors(_97921_selectors);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96117_token=_95862_tokens[_95862_tokens.len() - 1LL];
				if (_96117_token._field_id != 23LLU) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95862_tokens=_95862_tokens.slice(0LL,_95862_tokens.len() - 1LL);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5296208352:;
			{
				if (_96117_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95862_tokens=_95862_tokens.slice(0LL,_95862_tokens.len() - 1LL);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96117_token=_95862_tokens[_95862_tokens.len() - 1LL];
				if (_96117_token._field_id != 23LLU) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95862_tokens=_95862_tokens.slice(0LL,_95862_tokens.len() - 1LL);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_95842_decl))._field_full=true;
			}
		}
		_match_end_5296208080:;
	}
	(*(_95842_decl))._field_link_path=jule::Str("std::", 5) + _20c7de1a3_tokstoa(_95862_tokens);
}



inline void _20c7de1a3_Parser::_method_build_ident_use_decl(jule::Ptr<_20c476dc4_UseDecl>& _102244_decl,jule::Slice<_20c47803a_Token> _102264_tokens) {
	(*(_102244_decl))._field_std=false;
	_20c47803a_Token _102517_token = _102264_tokens[_102264_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102517_token._field_id };
		
		if (_match_expr == 23LLU) {
			_case_begin_5296238048:;
			{
				(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5296238144:;
			{
				if (_102517_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_20c47803a_Token> _103721_selectors = nullptr;
				std::tie(_102264_tokens,_103721_selectors) = _20c7de1a3_range_last(_102264_tokens);
				(*(_102244_decl))._field_selected=(*this)._method_get_use_decl_selectors(_103721_selectors);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102517_token=_102264_tokens[_102264_tokens.len() - 1LL];
				if (_102517_token._field_id != 23LLU) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102264_tokens=_102264_tokens.slice(0LL,_102264_tokens.len() - 1LL);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5296238240:;
			{
				if (_102517_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102264_tokens=_102264_tokens.slice(0LL,_102264_tokens.len() - 1LL);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102517_token=_102264_tokens[_102264_tokens.len() - 1LL];
				if (_102517_token._field_id != 23LLU) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102264_tokens=_102264_tokens.slice(0LL,_102264_tokens.len() - 1LL);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_102244_decl))._field_full=true;
			}
		}
		_match_end_5296237840:;
	}
	(*(_102244_decl))._field_link_path=_20c7de1a3_tokstoa(_102264_tokens);
}



inline void _20c7de1a3_Parser::_method_parse_use_decl(jule::Ptr<_20c476dc4_UseDecl>& _108738_decl,jule::Slice<_20c47803a_Token> _108758_tokens) {
	if ((*(_108738_decl))._field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_108738_decl,_108758_tokens);
		return;
	}
	_20c47803a_Token _109317_token = _108758_tokens[0LL];
	if (_109317_token._field_id != 2LLU) {
		(*this)._method_push_err(_109317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	if ((_108758_tokens.len() > 2LL) && (_108758_tokens[1LL]._field_id == 12LLU)) {
		(*(_108738_decl))._field_alias=_109317_token._field_kind;
		if (_108758_tokens[2LL]._field_id != 2LLU) {
			(*this)._method_push_err(_109317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;
		}
		_108758_tokens=_108758_tokens.slice(2LL);
		_109317_token=_108758_tokens[0LL];
	}
	
	{
		
		if (_109317_token._field_kind == jule::Str("std", 3)) {
			_case_begin_5296279984:;
			{
				(*this)._method_build_std_use_decl(_108738_decl,_108758_tokens);
			}
		}
		else {
			_case_begin_5296278064:;
			{
				(*this)._method_build_ident_use_decl(_108738_decl,_108758_tokens);
			}
		}
		_match_end_5296277952:;
	}
}



inline jule::Ptr<_20c476dc4_UseDecl> _20c7de1a3_Parser::_method_build_use_decl(jule::Slice<_20c47803a_Token> _112237_tokens,jule::Bool _112254_cpp_linked) {
	jule::Ptr<_20c476dc4_UseDecl> _112317_decl = jule::new_struct<_20c476dc4_UseDecl>(new( std::nothrow ) _20c476dc4_UseDecl(_112237_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_20c47803a_Token>(),_112254_cpp_linked,jule::Bool()));
	if (_112237_tokens.len() < 2LL) {
		(*this)._method_push_err((*(_112317_decl))._field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	}
	_112237_tokens=_112237_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_112317_decl,_112237_tokens);
	return _112317_decl;
}



inline jule::Ptr<_20c476dc4_Expr> _20c7de1a3_Parser::_method_build_enum_item_expr(jule::Ptr<jule::Int> _113644_i,jule::Slice<_20c47803a_Token>& _113658_tokens) {
	jule::Int _113717_brace_n = 0LL;
	jule::Int _113813_expr_start = (*(_113644_i));
	for (; (*(_113644_i)) < _113658_tokens.len(); ((*(_113644_i)))++) {
		{
			_20c47803a_Token _114017_t = _113658_tokens[(*(_113644_i))];
			if (_114017_t._field_id == 3LLU) {
				{
					auto &_match_expr{ _114017_t._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_5296298960:;
						{
							(_113717_brace_n)++;
							goto _iter_next_5296293840;
						}
					}
					else {
						_case_begin_5296297168:;
						{
							(_113717_brace_n)--;
						}
					}
					_match_end_5296297280:;
				}
			}
			if (_113717_brace_n > 0LL) {
				goto _iter_next_5296293840;
			}
			if ((_114017_t._field_id == 8LLU) || (((*(_113644_i)) + 1LL) >= _113658_tokens.len())) {
				jule::Slice<_20c47803a_Token> _115925_expr_tokens = nullptr;
				if (_114017_t._field_id == 8LLU) {
					_115925_expr_tokens=_113658_tokens.slice(_113813_expr_start,(*(_113644_i)));
				} else {
					_115925_expr_tokens=_113658_tokens.slice(_113813_expr_start);
				}
				return (*(this->self))._method_build_expr(_115925_expr_tokens);
			}
		}
	_iter_next_5296293840:;
	}
	_iter_end_5296293840:;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>> _20c7de1a3_Parser::_method_build_enum_items(jule::Slice<_20c47803a_Token>& _117141_tokens) {
	jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>> _117217_items = jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>>::alloc(0LL,1LL);
	jule::Ptr<jule::Int> _117317_i = jule::new_ptr<jule::Int>(0LL);
	for (; (*(_117317_i)) < _117141_tokens.len(); ((*(_117317_i)))++) {
		{
			_20c47803a_Token _117521_t = _117141_tokens[(*(_117317_i))];
			if (_117521_t._field_id == 18LLU) {
				goto _iter_next_5296310800;
			}
			jule::Ptr<_20c476dc4_EnumItemDecl> _118021_item = jule::new_struct<_20c476dc4_EnumItemDecl>(new( std::nothrow ) _20c476dc4_EnumItemDecl());
			(*(_118021_item))._field_token=_117521_t;
			if ((*(_118021_item))._field_token._field_id != 2LLU) {
				(*(this->self))._method_push_err((*(_118021_item))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			}
			(*(_118021_item))._field_ident=(*(_118021_item))._field_token._field_kind;
			if ((((*(_117317_i)) + 1LL) >= _117141_tokens.len()) || (_117141_tokens[(*(_117317_i)) + 1LL]._field_id == 8LLU)) {
				if (((*(_117317_i)) + 1LL) < _117141_tokens.len()) {
					((*(_117317_i)))++;
				}
				_117217_items.push(_118021_item);
				goto _iter_next_5296310800;
			}
			((*(_117317_i)))++;
			_117521_t=_117141_tokens[(*(_117317_i))];
			((*(_117317_i)))++;
			if ((_117521_t._field_id != 7LLU) || (_117521_t._field_kind != jule::Str("=", 1))) {
				(*(this->self))._method_push_err(_117521_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>());
				goto _iter_next_5296310800;
			}
			if (((*(_117317_i)) >= _117141_tokens.len()) || (_117141_tokens[(*(_117317_i))]._field_id == 8LLU)) {
				(*(this->self))._method_push_err(_117521_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_5296310800;
			}
			(*(_118021_item))._field_expr=(*(this->self))._method_build_enum_item_expr(_117317_i,_117141_tokens);
			_117217_items.push(_118021_item);
		}
	_iter_next_5296310800:;
	}
	_iter_end_5296310800:;
	return _117217_items;
}



inline jule::Ptr<_20c476dc4_EnumDecl> _20c7de1a3_Parser::_method_build_enum_decl(jule::Slice<_20c47803a_Token>& _121240_tokens) {
	if ((_121240_tokens.len() < 2LL) || (_121240_tokens.len() < 3LL)) {
		(*(this->self))._method_push_err(_121240_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_EnumDecl> _121717_e = jule::new_struct<_20c476dc4_EnumDecl>(new( std::nothrow ) _20c476dc4_EnumDecl(_121240_tokens[1LL],jule::Bool(),jule::Str(),jule::Ptr<_20c476dc4_TypeDecl>(),jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>>(),jule::Ptr<_20c476dc4_CommentGroup>()));
	if ((*(_121717_e))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_121717_e))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_121717_e))._field_ident=(*(_121717_e))._field_token._field_kind;
	jule::Int _122517_i = 2LL;
	if (_121240_tokens[_122517_i]._field_id == 11LLU) {
		(_122517_i)++;
		if (_122517_i >= _121240_tokens.len()) {
			(*(this->self))._method_push_err(_121240_tokens[_122517_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _121717_e;
		}
		std::tie((*(_121717_e))._field_kind,std::ignore) = (*(this->self))._method_build_type(_121240_tokens,(&(_122517_i)),true);
		if (_122517_i >= _121240_tokens.len()) {
			(*(this->self))._method_stop();
			(*(this->self))._method_push_err((*(_121717_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _121717_e;
		}
	} else {
		(*(_121717_e))._field_kind=nullptr;
	}
	jule::Slice<_20c47803a_Token> _124217_item_tokens = _20c7de1a3_range(_122517_i,jule::Str("{", 1),jule::Str("}", 1),_121240_tokens);
	if (_124217_item_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_121717_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _121717_e;
	} else if (_122517_i < _121240_tokens.len()) {
		(*(this->self))._method_push_err(_121240_tokens[_122517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_121717_e))._field_items=(*(this->self))._method_build_enum_items(_124217_item_tokens);
	return _121717_e;
}



inline jule::Ptr<_20c476dc4_FieldDecl> _20c7de1a3_Parser::_method_build_field(jule::Slice<_20c47803a_Token> _125535_tokens) {
	jule::Ptr<_20c476dc4_FieldDecl> _125617_f = jule::new_struct<_20c476dc4_FieldDecl>(new( std::nothrow ) _20c476dc4_FieldDecl());
	(*(_125617_f))._field_public=_125535_tokens[0LL]._field_id == 21LLU;
	if ((*(_125617_f))._field_public) {
		if (_125535_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_125535_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125535_tokens=_125535_tokens.slice(1LL);
	}
	(*(_125617_f))._field_mutable=_125535_tokens[0LL]._field_id == 36LLU;
	if ((*(_125617_f))._field_mutable) {
		if (_125535_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_125535_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125535_tokens=_125535_tokens.slice(1LL);
	}
	(*(_125617_f))._field_token=_125535_tokens[0LL];
	if ((*(_125617_f))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_125617_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_125617_f))._field_ident=(*(_125617_f))._field_token._field_kind;
	if (_125535_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_125535_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_125535_tokens[1LL]._field_id != 11LLU) {
		(*(this->self))._method_push_err(_125535_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_125535_tokens=_125535_tokens.slice(2LL);
	jule::Int _129317_i = 0LL;
	std::tie((*(_125617_f))._field_kind,std::ignore) = (*(this->self))._method_build_type(_125535_tokens,(&(_129317_i)),true);
	if (_129317_i < _125535_tokens.len()) {
		_20c47803a_Token _129617_token = _125535_tokens[_129317_i];
		if ((_129617_token._field_id != 7LLU) || (_129617_token._field_kind != jule::Str("=", 1))) {
			(*(this->self))._method_push_err(_125535_tokens[_129317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_129317_i)++;
		if (_129317_i >= _125535_tokens.len()) {
			(*(this->self))._method_push_err(_129617_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125535_tokens=_125535_tokens.slice(_129317_i);
		(*(_125617_f))._field_default=(*(this->self))._method_build_expr(_125535_tokens);
	}
	return _125617_f;
}



inline jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>> _20c7de1a3_Parser::_method_build_struct_decl_fields(jule::Slice<_20c47803a_Token> _131348_tokens) {
	jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>> _131417_fields = nullptr;
	jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _131517_stmts = _20c4d7055_split_stmts(_131348_tokens);
	{
		auto &expr = _131517_stmts;
		auto it = expr.begin();
		_iter_begin_5296419824:;
		if (it != expr.end()) {
			jule::Ptr<_20c4d7055_Stmt> _20c7de1a3_stmt = *it;
			{
				_131348_tokens=(*(_20c7de1a3_stmt))._field_tokens;
				if (_131348_tokens[0LL]._field_id == 18LLU) {
					goto _iter_next_5296419824;
				}
				jule::Ptr<_20c476dc4_FieldDecl> _132121_f = (*(this->self))._method_build_field(_131348_tokens);
				_131417_fields.push(_132121_f);
			}
			_iter_next_5296419824:;
			++it;
			goto _iter_begin_5296419824;
		}
		_iter_end_5296419824:;
	}
	return _131417_fields;
}



inline jule::Ptr<_20c476dc4_StructDecl> _20c7de1a3_Parser::_method_build_struct_decl(jule::Slice<_20c47803a_Token>& _132742_tokens) {
	if (_132742_tokens.len() < 3LL) {
		(*(this->self))._method_push_err(_132742_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _133317_i = 1LL;
	jule::Ptr<_20c476dc4_StructDecl> _133417_s = jule::new_struct<_20c476dc4_StructDecl>(new( std::nothrow ) _20c476dc4_StructDecl(_132742_tokens[_133317_i],jule::Str(),jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20c476dc4_CommentGroup>(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>()));
	if ((*(_133417_s))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_133417_s))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_133317_i)++;
	if (_133317_i >= _132742_tokens.len()) {
		(*(this->self))._method_push_err(_132742_tokens[_133317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133417_s;
	}
	(*(_133417_s))._field_ident=(*(_133417_s))._field_token._field_kind;
	_20c47803a_Token _134813_error_token = _132742_tokens[_133317_i];
	jule::Slice<_20c47803a_Token> _134917_generics_tokens = _20c7de1a3_range(_133317_i,jule::Str("[", 1),jule::Str("]", 1),_132742_tokens);
	if (_134917_generics_tokens != nullptr) {
		(*(_133417_s))._field_generics=(*(this->self))._method_build_generics(_134917_generics_tokens,_134813_error_token);
	}
	if (_133317_i >= _132742_tokens.len()) {
		(*(this->self))._method_push_err(_132742_tokens[_133317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133417_s;
	}
	jule::Slice<_20c47803a_Token> _135817_body_tokens = _20c7de1a3_range(_133317_i,jule::Str("{", 1),jule::Str("}", 1),_132742_tokens);
	if (_135817_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_133417_s))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _133417_s;
	}
	if (_133317_i < _132742_tokens.len()) {
		(*(this->self))._method_push_err(_132742_tokens[_133317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_133417_s))._field_fields=(*(this->self))._method_build_struct_decl_fields(_135817_body_tokens);
	return _133417_s;
}



inline void _20c7de1a3_Parser::_method_check_method_receiver(jule::Ptr<_20c476dc4_FnDecl>& _137241_f) {
	if ((*(_137241_f))._field_statically) {
		if (((*(_137241_f))._field_params.len() > 0LL) && (*((*(_137241_f))._field_params[0LL]))._method_is_self()) {
			(*this)._method_push_err((*(_137241_f))._field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((*(_137241_f))._field_params.len() == 0LL) {
		(*this)._method_push_err((*(_137241_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20c476dc4_ParamDecl> _138513_param = (*(_137241_f))._field_params[0LL];
	if ((!((*(_138513_param))._method_is_self()))) {
		(*this)._method_push_err((*(_137241_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
}



inline jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> _20c7de1a3_Parser::_method_build_trait_methods(jule::Slice<_20c47803a_Token> _139243_tokens) {
	jule::Slice<jule::Ptr<_20c476dc4_FnDecl>> _139317_methods = nullptr;
	jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _139417_stmts = _20c4d7055_split_stmts(_139243_tokens);
	{
		auto &expr = _139417_stmts;
		auto it = expr.begin();
		_iter_begin_5296472496:;
		if (it != expr.end()) {
			jule::Ptr<_20c4d7055_Stmt> _20c7de1a3_stmt = *it;
			{
				_139243_tokens=_20c4aa1e3_eliminate_comments((*(_20c7de1a3_stmt))._field_tokens);
				if (_139243_tokens.len() == 0LL) {
					goto _iter_next_5296472496;
				}
				jule::Bool _140121_is_pub = false;
				if (_139243_tokens[0LL]._field_id == 21LLU) {
					_140121_is_pub=true;
					if (_139243_tokens.len() == 1LL) {
						(*(this->self))._method_push_err(_139243_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_5296472496;
					}
					_139243_tokens=_139243_tokens.slice(1LL);
				}
				jule::Ptr<_20c476dc4_FnDecl> _141121_f = (*(this->self))._method_build_fn(_139243_tokens,true,true);
				if (_141121_f != nullptr) {
					if ((*(_141121_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_141121_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_method_receiver(_141121_f);
					if ((*(_141121_f))._field_generics.len() > 0LL) {
						(*(this->self))._method_push_err((*(_141121_f))._field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					}
					(*(_141121_f))._field_public=_140121_is_pub;
					_139317_methods.push(_141121_f);
				}
			}
			_iter_next_5296472496:;
			++it;
			goto _iter_begin_5296472496;
		}
		_iter_end_5296472496:;
	}
	return _139317_methods;
}



inline jule::Ptr<_20c476dc4_TraitDecl> _20c7de1a3_Parser::_method_build_trait_decl(jule::Slice<_20c47803a_Token>& _142741_tokens) {
	if (_142741_tokens.len() < 3LL) {
		(*(this->self))._method_push_err(_142741_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_TraitDecl> _143217_t = jule::new_struct<_20c476dc4_TraitDecl>(new( std::nothrow ) _20c476dc4_TraitDecl(_142741_tokens[1LL],jule::Str(),jule::Bool(),jule::Ptr<_20c476dc4_CommentGroup>(),jule::Slice<jule::Ptr<_20c476dc4_FnDecl>>()));
	if ((*(_143217_t))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_143217_t))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_143217_t))._field_ident=(*(_143217_t))._field_token._field_kind;
	jule::Int _144017_i = 2LL;
	jule::Slice<_20c47803a_Token> _144117_body_tokens = _20c7de1a3_range(_144017_i,jule::Str("{", 1),jule::Str("}", 1),_142741_tokens);
	if (_144117_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_143217_t))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_144017_i < _142741_tokens.len()) {
		(*(this->self))._method_push_err(_142741_tokens[_144017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_143217_t))._field_methods=(*(this->self))._method_build_trait_methods(_144117_body_tokens);
	return _143217_t;
}



inline jule::Ptr<_20c476dc4_FnDecl> _20c7de1a3_Parser::_method_build_cpp_link_fn(jule::Slice<_20c47803a_Token> _145541_tokens) {
	_145541_tokens=_145541_tokens.slice(1LL);
	jule::Ptr<_20c476dc4_FnDecl> _145717_f = (*(this->self))._method_build_fn(_145541_tokens,false,true);
	if (_145717_f != nullptr) {
		if ((*(_145717_f))._method_is_anon()) {
			(*(this->self))._method_push_err((*(_145717_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		(*(_145717_f))._field_cpp_linked=true;
	}
	return _145717_f;
}



inline jule::Ptr<_20c476dc4_VarDecl> _20c7de1a3_Parser::_method_build_cpp_link_var(jule::Slice<_20c47803a_Token> _146742_tokens) {
	_146742_tokens=_146742_tokens.slice(1LL);
	jule::Ptr<_20c476dc4_VarDecl> _146917_v = (*(this->self))._method_build_var(_146742_tokens);
	if (_146917_v != nullptr) {
		(*(_146917_v))._field_cpp_linked=true;
		if ((*(_146917_v))._field_expr != nullptr) {
			(*(this->self))._method_push_err((*(_146917_v))._field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		}
	}
	return _146917_v;
}



inline jule::Ptr<_20c476dc4_StructDecl> _20c7de1a3_Parser::_method_build_cpp_link_struct(jule::Slice<_20c47803a_Token> _147945_tokens) {
	_147945_tokens=_147945_tokens.slice(1LL);
	jule::Ptr<_20c476dc4_StructDecl> _148117_s = (*(this->self))._method_build_struct_decl(_147945_tokens);
	if (_148117_s != nullptr) {
		(*(_148117_s))._field_cpp_linked=true;
	}
	return _148117_s;
}



inline jule::Ptr<_20c476dc4_TypeAliasDecl> _20c7de1a3_Parser::_method_build_cpp_link_type_alias(jule::Slice<_20c47803a_Token> _148849_tokens) {
	_148849_tokens=_148849_tokens.slice(1LL);
	jule::Ptr<_20c476dc4_TypeAliasDecl> _149017_t = (*(this->self))._method_build_type_alias_decl(_148849_tokens);
	if (_149017_t != nullptr) {
		(*(_149017_t))._field_cpp_linked=true;
	}
	return _149017_t;
}



inline jule::Ptr<_20c476dc4_UseDecl> _20c7de1a3_Parser::_method_build_cpp_link_use(jule::Slice<_20c47803a_Token> _149742_tokens) {
	if (_149742_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_149742_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_149742_tokens=_149742_tokens.slice(1LL);
	
	return (*(this->self))._method_build_use_decl(_149742_tokens,true);
}



inline jule::Any _20c7de1a3_Parser::_method_build_cpp_link(jule::Slice<_20c47803a_Token>& _150839_tokens) {
	_20c47803a_Token _150917_token = _150839_tokens[0LL];
	if (_150839_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_150917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	_150917_token=_150839_tokens[1LL];
	{
		auto &_match_expr{ _150917_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_5296550192:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_use(_150839_tokens));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_5296550288:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_fn(_150839_tokens));
			}
		}
		else if (_match_expr == 9LLU || _match_expr == 34LLU) {
			_case_begin_5296550384:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_var(_150839_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_5296550480:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_struct(_150839_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5296551856:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_type_alias(_150839_tokens));
			}
		}
		else {
			_case_begin_5296546448:;
			{
				(*(this->self))._method_push_err(_150917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5296549728:;
	}
	return jule::Any(nullptr);
}



inline jule::Ptr<_20c476dc4_FnDecl> _20c7de1a3_Parser::_method_get_method(jule::Slice<_20c47803a_Token>& _153935_tokens) {
	jule::Int _154017_i = 0LL;
	_20c47803a_Token _154117_token = _153935_tokens[_154017_i];
	if (_154117_token._field_id == 38LLU) {
		if ((_154017_i + 1LL) >= _153935_tokens.len()) {
			(*(this->self))._method_push_err(_154117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_154017_i)++;
		_154117_token=_153935_tokens[_154017_i];
	}
	if (_154117_token._field_id == 35LLU) {
		if ((_154017_i + 1LL) >= _153935_tokens.len()) {
			(*(this->self))._method_push_err(_154117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_154017_i)++;
		_154117_token=_153935_tokens[_154017_i];
	}
	if (_154117_token._field_id != 33LLU) {
		(*(this->self))._method_push_err(_154117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_FnDecl> _156517_f = (*(this->self))._method_build_fn(_153935_tokens,true,false);
	if ((_156517_f != nullptr) && (*(_156517_f))._method_is_anon()) {
		(*(this->self))._method_push_err((*(_156517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _156517_f;
}



inline void _20c7de1a3_Parser::_method_parse_impl_body(jule::Ptr<_20c476dc4_Impl>& _157240_ipl,jule::Slice<_20c47803a_Token>& _157257_tokens) {
	jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _157317_stmts = _20c4d7055_split_stmts(_157257_tokens);
	{
		auto &expr = _157317_stmts;
		auto it = expr.begin();
		_iter_begin_5296581440:;
		if (it != expr.end()) {
			jule::Ptr<_20c4d7055_Stmt> _20c7de1a3_stmt = *it;
			{
				_157257_tokens=(*(_20c7de1a3_stmt))._field_tokens;
				_20c47803a_Token _157621_token = _157257_tokens[0LL];
				jule::Bool _157721_is_pub = false;
				{
					auto &_match_expr{ _157621_token._field_id };
					
					if (_match_expr == 18LLU) {
						_case_begin_5296585728:;
						{
							goto _iter_next_5296581440;
						}
					}
					else if (_match_expr == 39LLU) {
						_case_begin_5296585824:;
						{
							(*(this->self))._method_push_directive((*(this->self))._method_build_directive(_157257_tokens));
							goto _iter_next_5296581440;
						}
					}
					else if (_match_expr == 21LLU) {
						_case_begin_5296585936:;
						{
							_157721_is_pub=true;
							if (_157257_tokens.len() == 1LL) {
								(*(this->self))._method_push_err(_157257_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_5296581440;
							}
							_157257_tokens=_157257_tokens.slice(1LL);
							if (_157257_tokens.len() > 0LL) {
								_157621_token=_157257_tokens[0LL];
							}
						}
					}
					_match_end_5296585648:;
				}
				{
					auto &_match_expr{ _157621_token._field_id };
					
					if (_match_expr == 9LLU) {
						_case_begin_5296593760:;
						{
							jule::Ptr<_20c476dc4_VarDecl> _160125_v = (*(this->self))._method_build_var(_157257_tokens);
							if (_160125_v != nullptr) {
								(*(_160125_v))._field_public=_157721_is_pub;
								(*(_157240_ipl))._field_statics = jule::alloc_for_append((*(_157240_ipl))._field_statics,1);(*(_157240_ipl))._field_statics.push(_160125_v);
							}
						}
					}
					else if (_match_expr == 38LLU || _match_expr == 33LLU || _match_expr == 35LLU) {
						_case_begin_5296589664:;
						{
							jule::Ptr<_20c476dc4_FnDecl> _161025_f = (*(this->self))._method_get_method(_157257_tokens);
							if (_161025_f != nullptr) {
								(*(this->self))._method_check_method_receiver(_161025_f);
								(*(this->self))._method_apply_fn_meta(_161025_f,_157721_is_pub);
								(*(_157240_ipl))._field_methods = jule::alloc_for_append((*(_157240_ipl))._field_methods,1);(*(_157240_ipl))._field_methods.push(_161025_f);
							}
						}
					}
					else {
						_case_begin_5296590976:;
						{
							(*(this->self))._method_push_err(_157621_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_5296581440;
						}
					}
					_match_end_5296593376:;
				}
			}
			_iter_next_5296581440:;
			++it;
			goto _iter_begin_5296581440;
		}
		_iter_end_5296581440:;
	}
}



inline jule::Ptr<_20c476dc4_Impl> _20c7de1a3_Parser::_method_build_impl(jule::Slice<_20c47803a_Token> _162434_tokens) {
	_20c47803a_Token _162517_token = _162434_tokens[0LL];
	if (_162434_tokens.len() < 2LL) {
		(*(this->self))._method_push_err(_162517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _163117_i = 1LL;
	jule::Ptr<_20c476dc4_TypeDecl> _163318_base;
	jule::Bool _163328_ok;
	std::tie(_163318_base,_163328_ok) = (*(this->self))._method_build_type(_162434_tokens,(&(_163117_i)),true);
	if ((!(_163328_ok))) {
		return nullptr;
	}
	if (_163117_i >= _162434_tokens.len()) {
		(*(this->self))._method_push_err(_162517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c476dc4_Impl> _164217_ipl = jule::new_struct<_20c476dc4_Impl>(new( std::nothrow ) _20c476dc4_Impl(_163318_base,jule::Ptr<_20c476dc4_TypeDecl>(),jule::Slice<jule::Ptr<_20c476dc4_FnDecl>>(),jule::Slice<jule::Ptr<_20c476dc4_VarDecl>>()));
	_162517_token=_162434_tokens[_163117_i];
	if (_162517_token._field_id != 12LLU) {
		if ((_162517_token._field_id == 3LLU) && (_162517_token._field_kind == jule::Str("{", 1))) {
			std::tie((*(_164217_ipl))._field_base,(*(_164217_ipl))._field_dest) = std::make_tuple((*(_164217_ipl))._field_dest,(*(_164217_ipl))._field_base);
			goto _julec_label_body;
		}
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	(_163117_i)++;
	if (_163117_i >= _162434_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_164217_ipl))._field_dest,_163328_ok) = (*(this->self))._method_build_type(_162434_tokens,(&(_163117_i)),true);
	if ((!(_163328_ok))) {
		return nullptr;
	}
	if (_163117_i >= _162434_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_body:;
	jule::Slice<_20c47803a_Token> _168217_body_tokens = _20c7de1a3_range(_163117_i,jule::Str("{", 1),jule::Str("}", 1),_162434_tokens);
	if (_168217_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_163117_i < _162434_tokens.len()) {
		(*(this->self))._method_push_err(_162434_tokens[_163117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_parse_impl_body(_164217_ipl,_168217_body_tokens);
	return _164217_ipl;
}



inline jule::Any _20c7de1a3_Parser::_method_build_node_data(jule::Slice<_20c47803a_Token>& _169640_tokens) {
	_20c47803a_Token _169717_token = _169640_tokens[0LL];
	{
		auto &_match_expr{ _169717_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_5296653456:;
			{
				
				return jule::Any((*(this->self))._method_build_use_decl(_169640_tokens,false));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_5296651440:;
			{
				jule::Ptr<_20c476dc4_FnDecl> _170521_f = (*(this->self))._method_build_fn(_169640_tokens,false,false);
				if (_170521_f != nullptr) {
					(*(_170521_f))._field_global=true;
					if ((*(_170521_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_170521_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
				}
				return jule::Any(_170521_f);
			}
		}
		else if (_match_expr == 34LLU || _match_expr == 9LLU || _match_expr == 36LLU || _match_expr == 38LLU) {
			_case_begin_5296651536:;
			{
				return jule::Any((*(this->self))._method_build_var(_169640_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5296651632:;
			{
				return jule::Any((*(this->self))._method_build_type_alias_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 24LLU) {
			_case_begin_5296651728:;
			{
				return jule::Any((*(this->self))._method_build_enum_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_5296651824:;
			{
				return jule::Any((*(this->self))._method_build_struct_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 29LLU) {
			_case_begin_5296654048:;
			{
				return jule::Any((*(this->self))._method_build_trait_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 30LLU) {
			_case_begin_5296654144:;
			{
				return jule::Any((*(this->self))._method_build_impl(_169640_tokens));
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_5296654240:;
			{
				return (*(this->self))._method_build_cpp_link(_169640_tokens);
			}
		}
		else if (_match_expr == 39LLU) {
			_case_begin_5296654336:;
			{
				return jule::Any((*(this->self))._method_build_directive(_169640_tokens));
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_5296654432:;
			{
				return jule::Any(_20c7de1a3_build_comment(_169717_token));
			}
		}
		else {
			_case_begin_5296649744:;
			{
				(*(this->self))._method_push_err(_169717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5296650656:;
	}
}



inline void _20c7de1a3_Parser::_method_check_comment_group(_20c476dc4_Node& _175039_node) {
	if ((*this)._field_comment_group == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _175039_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_Comment>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_Directive>>()) {
			_case_begin_5296678096:;
		}
		else {
			_case_begin_5296677984:;
			{
				(*this)._field_comment_group=nullptr;
			}
		}
		_match_end_5296678352:;
	}
}



inline void _20c7de1a3_Parser::_method_check_directive(_20c476dc4_Node& _176435_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _176435_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_Directive>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_Comment>>()) {
			_case_begin_5296683712:;
		}
		else {
			_case_begin_5296682480:;
			{
				if ((*this)._field_directives.len() != 0LL) {
					(*this)._method_push_err((*((*this)._field_directives[0LL]))._field_tag,jule::Str("this directive is out of scope, cant assign to any define", 57),jule::Slice<jule::Any>());
				}
				(*this)._field_directives=nullptr;
			}
		}
		_match_end_5296682848:;
	}
}



inline void _20c7de1a3_Parser::_method_apply_fn_meta(jule::Ptr<_20c476dc4_FnDecl>& _178237_f,jule::Bool _178249_is_pub) {
	(*(_178237_f))._field_public=_178249_is_pub;
	(*(_178237_f))._field_directives=(*this)._field_directives;
	(*this)._field_directives=nullptr;
	(*(_178237_f))._field_doc_comments=(*this)._field_comment_group;
	(*this)._field_comment_group=nullptr;
}



inline void _20c7de1a3_Parser::_method_apply_meta(_20c476dc4_Node& _179034_node,jule::Bool _179046_is_pub) {
	{
		auto &_match_expr{ _179034_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_VarDecl>>()) {
			_case_begin_5296694064:;
			{
				jule::Ptr<_20c476dc4_VarDecl> _179321_v = _179034_node._field_data.operator jule::Ptr<_20c476dc4_VarDecl>();
				if (_179321_v == nullptr) {
					return;
				}
				(*(_179321_v))._field_public=_179046_is_pub;
				(*(_179321_v))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_179321_v))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnDecl>>()) {
			_case_begin_5296694160:;
			{
				jule::Ptr<_20c476dc4_FnDecl> _180621_f = _179034_node._field_data.operator jule::Ptr<_20c476dc4_FnDecl>();
				if (_180621_f == nullptr) {
					return;
				}
				(*this)._method_apply_fn_meta(_180621_f,_179046_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TypeAliasDecl>>()) {
			_case_begin_5296694256:;
			{
				jule::Ptr<_20c476dc4_TypeAliasDecl> _181421_tad = _179034_node._field_data.operator jule::Ptr<_20c476dc4_TypeAliasDecl>();
				if (_181421_tad == nullptr) {
					return;
				}
				(*(_181421_tad))._field_public=_179046_is_pub;
				(*(_181421_tad))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_EnumDecl>>()) {
			_case_begin_5296694352:;
			{
				jule::Ptr<_20c476dc4_EnumDecl> _182321_ed = _179034_node._field_data.operator jule::Ptr<_20c476dc4_EnumDecl>();
				if (_182321_ed == nullptr) {
					return;
				}
				(*(_182321_ed))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_182321_ed))._field_public=_179046_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_StructDecl>>()) {
			_case_begin_5296694576:;
			{
				jule::Ptr<_20c476dc4_StructDecl> _183221_sd = _179034_node._field_data.operator jule::Ptr<_20c476dc4_StructDecl>();
				if (_183221_sd == nullptr) {
					return;
				}
				(*(_183221_sd))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
				(*(_183221_sd))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_183221_sd))._field_public=_179046_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TraitDecl>>()) {
			_case_begin_5296694672:;
			{
				jule::Ptr<_20c476dc4_TraitDecl> _184321_td = _179034_node._field_data.operator jule::Ptr<_20c476dc4_TraitDecl>();
				if (_184321_td == nullptr) {
					return;
				}
				(*(_184321_td))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_184321_td))._field_public=_179046_is_pub;
			}
		}
		else {
			_case_begin_5296693632:;
			{
				if (_179046_is_pub) {
					(*this)._method_push_err(_179034_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_5296693552:;
	}
}



inline void _20c7de1a3_Parser::_method_check_use_decl(_20c476dc4_Node& _185834_node) {
	{
		auto &_match_expr{ _185834_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_UseDecl>>()) {
			_case_begin_5296723024:;
		}
		else {
			_case_begin_5296722032:;
			{
				return;
			}
		}
		_match_end_5296721872:;
	}
	if ((*((*this)._field_ast))._field_decls.len() > 0LL) {
		(*this)._method_push_err(_185834_node._field_token,jule::Str("use declarations must declared before other declarations", 56),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	}
}



inline std::tuple<jule::Bool,jule::Any> _20c7de1a3_Parser::_method_build_general_scope_node_data(jule::Slice<_20c47803a_Token> _187353_st) {
	jule::Bool _187368_is_pub = jule::Bool();
	jule::Any _187382_data = jule::Any();
	if (_187353_st[0LL]._field_id == 21LLU) {
		_187368_is_pub=true;
		_187353_st=_187353_st.slice(1LL);
		if (_187353_st.len() == 0LL) {
			(*(this->self))._method_push_err(_187353_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_187368_is_pub,_187382_data);
		}
	}
	_187382_data=(*(this->self))._method_build_node_data(_187353_st);
	return std::make_tuple(_187368_is_pub,_187382_data);
}



inline _20c476dc4_Node _20c7de1a3_Parser::_method_parse_node(jule::Slice<_20c47803a_Token>& _188835_st) {
	_20c476dc4_Node _188917_node = _20c476dc4_Node(_188835_st[0LL],jule::Any());
	jule::Bool _189314_is_pub;
	jule::Any _189326_data;
	std::tie(_189314_is_pub,_189326_data) = (*(this->self))._method_build_general_scope_node_data(_188835_st);
	if (_189326_data == nullptr) {
		return _188917_node;
	}
	_188917_node._field_data=_189326_data;
	(*(this->self))._method_apply_meta(_188917_node,_189314_is_pub);
	(*(this->self))._method_check_comment_group(_188917_node);
	(*(this->self))._method_check_directive(_188917_node);
	(*(this->self))._method_check_use_decl(_188917_node);
	return _188917_node;
}



inline void _20c7de1a3_Parser::_method_append_node(jule::Slice<_20c47803a_Token>& _190736_st) {
	if (_190736_st.len() == 0LL) {
		return;
	}
	_20c476dc4_Node _191217_node = (*(this->self))._method_parse_node(_190736_st);
	if ((_191217_node._field_data == nullptr) || (*(this->self))._method_stopped()) {
		return;
	}
	{
		
		if (_191217_node._method_is_directive()) {
			_case_begin_5296753472:;
			{
				(*(this->self))._method_push_directive(_191217_node._field_data.operator jule::Ptr<_20c476dc4_Directive>());
			}
		}
		else if (_191217_node._method_is_use_decl()) {
			_case_begin_5296753568:;
			{
				(*((*(this->self))._field_ast))._field_use_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_use_decls,1);(*((*(this->self))._field_ast))._field_use_decls.push(_191217_node._field_data.operator jule::Ptr<_20c476dc4_UseDecl>());
			}
		}
		else if (_191217_node._method_is_decl()) {
			_case_begin_5296753664:;
			{
				(*((*(this->self))._field_ast))._field_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_decls,1);(*((*(this->self))._field_ast))._field_decls.push(_191217_node);
			}
		}
		else if (_191217_node._method_is_comment()) {
			_case_begin_5296753760:;
			{
				if ((*(this->self))._field_comment_group == nullptr) {
					(*(this->self))._field_comment_group=jule::new_struct<_20c476dc4_CommentGroup>(new( std::nothrow ) _20c476dc4_CommentGroup());
				}
				(*((*(this->self))._field_comment_group))._field_comments = jule::alloc_for_append((*((*(this->self))._field_comment_group))._field_comments,1);(*((*(this->self))._field_comment_group))._field_comments.push(_191217_node._field_data.operator jule::Ptr<_20c476dc4_Comment>());
			}
		}
		else if (_191217_node._method_is_impl()) {
			_case_begin_5296755504:;
			{
				(*((*(this->self))._field_ast))._field_impls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_impls,1);(*((*(this->self))._field_ast))._field_impls.push(_191217_node._field_data.operator jule::Ptr<_20c476dc4_Impl>());
			}
		}
		else {
			_case_begin_5296752000:;
			{
				(*(this->self))._method_push_err(_191217_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5296751920:;
	}
}



inline void _20c7de1a3_Parser::_method_remove_range(jule::Int _194231_i,jule::Str _194239_kind,jule::Slice<_20c47803a_Token>& _194251_tokens,jule::Slice<jule::Int>& _194273_ranges) {
	jule::Str _194313_close = _20c7de1a3_get_close_kind_of_brace(_194239_kind);
	for (; _194231_i >= 0LL; (_194231_i)--) {
		{
			_20c47803a_Token _194517_tok = _194251_tokens[_194273_ranges[_194231_i]];
			if (_194517_tok._field_kind != _194313_close) {
				goto _iter_next_5296774672;
			}
			_194273_ranges=jule::append(_194273_ranges.slice(0LL,_194231_i),_194273_ranges.slice(_194231_i + 1LL));
			goto _iter_end_5296774672;
		}
	_iter_next_5296774672:;
	}
	_iter_end_5296774672:;
}



inline void _20c7de1a3_Parser::_method_push_wrong_order_close_err(_20c47803a_Token& _195546_t,jule::Slice<_20c47803a_Token>& _195557_tokens,jule::Slice<jule::Int>& _195575_ranges) {
	{
		auto &_match_expr{ _195557_tokens[_195575_ranges[_195575_ranges.len() - 1LL]]._field_kind };
		
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_5296783344:;
			{
				(*this)._method_push_err(_195546_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_5296783440:;
			{
				(*this)._method_push_err(_195546_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_5296783536:;
			{
				(*this)._method_push_err(_195546_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_5296783200:;
	}
}



inline void _20c7de1a3_Parser::_method_push_range_close(_20c47803a_Token _196335_t,jule::Str _196345_left,jule::Slice<_20c47803a_Token>& _196357_tokens,jule::Slice<jule::Int>& _196379_ranges) {
	jule::I64 _196413_n = _196379_ranges.len();
	if (_196413_n == 0LL) {
		{
			auto &_match_expr{ _196335_t._field_kind };
			
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_5296794464:;
				{
					(*this)._method_push_err(_196335_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_5296794560:;
				{
					(*this)._method_push_err(_196335_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_5296794656:;
				{
					(*this)._method_push_err(_196335_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_5296794352:;
		}
		return;
	} else if (_196357_tokens[_196379_ranges[_196413_n - 1LL]]._field_kind != _196345_left) {
		(*this)._method_push_wrong_order_close_err(_196335_t,_196357_tokens,_196379_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>(_196413_n - 1LL),_196335_t._field_kind,_196357_tokens,_196379_ranges);
}



inline void _20c7de1a3_Parser::_method_check_ranges(jule::Slice<_20c47803a_Token>& _197832_tokens) {
	jule::Slice<jule::Int> _197917_ranges = nullptr;
	{
		auto &expr = _197832_tokens;
		auto it = expr.begin();
		_iter_begin_5296805552:;
		if (it != expr.end()) {
			jule::Int _20c7de1a3_i = it - expr.begin();
			_20c47803a_Token &_20c7de1a3_token = *it;
			{
				if (_20c7de1a3_token._field_id != 3LLU) {
					goto _iter_next_5296805552;
				}
				{
					auto &_match_expr{ _20c7de1a3_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_5296807728:;
						{
							_197917_ranges.push(_20c7de1a3_i);
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_5296808496:;
						{
							(*this)._method_push_range_close(_20c7de1a3_token,jule::Str("(", 1),_197832_tokens,_197917_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_5296808592:;
						{
							(*this)._method_push_range_close(_20c7de1a3_token,jule::Str("{", 1),_197832_tokens,_197917_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_5296808992:;
						{
							(*this)._method_push_range_close(_20c7de1a3_token,jule::Str("[", 1),_197832_tokens,_197917_ranges);
						}
					}
					_match_end_5296807520:;
				}
			}
			_iter_next_5296805552:;
			++it;
			_20c7de1a3_i++;
			goto _iter_begin_5296805552;
		}
		_iter_end_5296805552:;
	}
	{
		auto &expr = _197917_ranges;
		auto it = expr.begin();
		_iter_begin_5296809088:;
		if (it != expr.end()) {
			jule::Int &_20c7de1a3_i = *it;
			{
				_20c47803a_Token _200417_token = _197832_tokens[_20c7de1a3_i];
				{
					auto &_match_expr{ _200417_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_5296817040:;
						{
							(*this)._method_push_err(_200417_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_5296817136:;
						{
							(*this)._method_push_err(_200417_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_5296817248:;
						{
							(*this)._method_push_err(_200417_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_5296816960:;
				}
			}
			_iter_next_5296809088:;
			++it;
			goto _iter_begin_5296809088;
		}
		_iter_end_5296809088:;
	}
}



inline void _20c7de1a3_Parser::_method_parse(jule::Ptr<_20c4792c2_File>& _201330_f) {
	(*(this->self))._field_ast=jule::new_struct<_20c476126_Ast>(new( std::nothrow ) _20c476126_Ast(_201330_f,jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Slice<jule::Ptr<_20c476dc4_UseDecl>>(),jule::Slice<jule::Ptr<_20c476dc4_Impl>>(),jule::Slice<_20c476dc4_Node>()));
	jule::Slice<_20c47803a_Token> _201817_tokens = (*(_201330_f))._method_tokens();
	(*(this->self))._method_check_ranges(_201817_tokens);
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _202417_stmts = _20c4d7055_split_stmts(_201817_tokens);
	jule::Int _202717_i = 0LL;
	_julec_label_iter:;
	for (; _202717_i < _202417_stmts.len(); (_202717_i)++) {
		{
			jule::Ptr<_20c4d7055_Stmt> _203021_stmt = _202417_stmts[_202717_i];
			if ((*(_203021_stmt))._field_tokens.len() == 0LL) {
				return;
			}
			jule::Any _203525_data;
			std::tie(std::ignore,_203525_data) = (*(this->self))._method_build_general_scope_node_data((*(_203021_stmt))._field_tokens);
			if (_203525_data == nullptr) {
				goto _iter_end_5296826480;
			}
			if ((*(this->self))._method_stopped()) {
				return;
			}
			{
				auto &_match_expr{ _203525_data };
				
				if (_match_expr.type_is<jule::Ptr<_20c476dc4_Directive>>()) {
					_case_begin_5296835776:;
					{
						jule::Ptr<_20c476dc4_Directive> _204625_d = _203525_data.operator jule::Ptr<_20c476dc4_Directive>();
						if ((_204625_d != nullptr) && _20a24c98d_is_top_directive((*(_204625_d))._field_tag._field_kind)) {
							(*((*(this->self))._field_ast))._field_top_directives = jule::alloc_for_append((*((*(this->self))._field_ast))._field_top_directives,1);(*((*(this->self))._field_ast))._field_top_directives.push(_204625_d);
						} else {
							goto _iter_end_5296826480;
						}
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_20c476dc4_Comment>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_CommentGroup>>()) {
					_case_begin_5296835872:;
				}
				else {
					_case_begin_5296835376:;
					{
						goto _iter_end_5296826480;
					}
				}
				_match_end_5296835008:;
			}
		}
	_iter_next_5296826480:;
	}
	_iter_end_5296826480:;
	(*(this->self))._field_errors=nullptr;
	for (; _202717_i < _202417_stmts.len(); (_202717_i)++) {
		{
			jule::Ptr<_20c4d7055_Stmt> _206621_stmt = _202417_stmts[_202717_i];
			(*(this->self))._method_append_node((*(_206621_stmt))._field_tokens);
			if ((*(this->self))._method_stopped()) {
				goto _iter_end_5296828768;
			}
		}
	_iter_next_5296828768:;
	}
	_iter_end_5296828768:;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c7de1a3_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _20c9bd97b_TypeBuilder::_method_push_err(_20c47803a_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>());
	}
}



inline void _20c9bd97b_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_prim(void) {
	jule::Ptr<_20c476dc4_TypeDecl> _9217_t = _20c9bd97b_build_prim_type((*this)._field_tokens[(*((*this)._field_i))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_namespace(void) {
	jule::Ptr<_20c476dc4_TypeDecl> _9817_t = jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl((*this)._field_tokens[(*((*this)._field_i))],jule::Any()));
	jule::Ptr<_20c476dc4_NamespaceTypeDecl> _10217_nst = jule::new_struct<_20c476dc4_NamespaceTypeDecl>(new( std::nothrow ) _20c476dc4_NamespaceTypeDecl());
	jule::Int _10317_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_20c47803a_Token _10521_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (jule::unsafe_mod(_10317_n,2LL) == 0LL) {
				if (_10521_token._field_id != 2LLU) {
					(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				}
				(*(_10217_nst))._field_idents = jule::alloc_for_append((*(_10217_nst))._field_idents,1);(*(_10217_nst))._field_idents.push(_10521_token);
			} else if (_10521_token._field_id != 23LLU) {
				goto _iter_end_5296861936;
			}
			(_10317_n)++;
		}
	_iter_next_5296861936:;
	}
	_iter_end_5296861936:;
	(*(_10217_nst))._field_idents=(*(_10217_nst))._field_idents.slice(0LL,(*(_10217_nst))._field_idents.len() - 1LL);
	((*((*this)._field_i)))--;
	(*(_10217_nst))._field_kind=(*((*this)._method_build_ident()))._field_kind.operator jule::Ptr<_20c476dc4_IdentTypeDecl>();
	(*(_9817_t))._field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _20c9bd97b_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_20c47803a_Token _13113_token = (*this)._field_tokens[(*((*this)._field_i))];
	if ((_13113_token._field_id != 3LLU) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_20c47803a_Token>> _13617_parts = (*this)._method_ident_generics();
	if (_13617_parts.len() == 0LL) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>> _14217_types = jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_13617_parts.len()));
	{
		auto &expr = _13617_parts;
		auto it = expr.begin();
		_iter_begin_5296888512:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c9bd97b_part = *it;
			{
				jule::Int _14421_j = 0LL;
				jule::Ptr<_20c476dc4_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*((*this)._field_p))._method_build_type(_20c9bd97b_part,(&(_14421_j)),true);
				if (_14421_j < _20c9bd97b_part.len()) {
					(*this)._method_push_err(_20c9bd97b_part[_14421_j],jule::Str("invalid syntax", 14));
				}
				_14217_types.push(_14522_t);
			}
			_iter_next_5296888512:;
			++it;
			goto _iter_begin_5296888512;
		}
		_iter_end_5296888512:;
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_20c47803a_Token>> _20c9bd97b_TypeBuilder::_method_ident_generics(void) {
	jule::Int _15513_first = (*((*this)._field_i));
	jule::Int _15617_range_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_20c47803a_Token _15817_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (_15817_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _15817_token._field_kind };
					
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_5296900224:;
						{
							(_15617_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_5296900336:;
						{
							(_15617_range_n)--;
						}
					}
					_match_end_5296899744:;
				}
			}
			if (_15617_range_n == 0LL) {
				((*((*this)._field_i)))++;
				goto _iter_end_5296893840;
			}
		}
	_iter_next_5296893840:;
	}
	_iter_end_5296893840:;
	jule::Slice<_20c47803a_Token> _17017_tokens = (*this)._field_tokens.slice(_15513_first + 1LL,(*((*this)._field_i)) - 1LL);
	jule::Slice<jule::Slice<_20c47803a_Token>> _17118_parts;
	jule::Slice<_20a25b99c_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _20c7de1a3_parts(_17017_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_20c47803a_Token _18217_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_20c476dc4_IdentTypeDecl> _18317_it = jule::new_struct<_20c476dc4_IdentTypeDecl>(new( std::nothrow ) _20c476dc4_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>()));
	((*((*this)._field_i)))++;
	(*(_18317_it))._field_generics=(*this)._method_build_generics();
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	}
	(*((*this)._field_i))+=2LL;
	jule::Ptr<_20c476dc4_TypeDecl> _20217_t = (*this)._method_build_ident();
	(*((*(_20217_t))._field_kind.operator jule::Ptr<_20c476dc4_IdentTypeDecl>()))._field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_fn(void) {
	_20c47803a_Token _20817_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_20c476dc4_FnDecl> _20917_f = (*((*this)._field_p))._method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if (_20917_f == nullptr) {
		return nullptr;
	}
	if ((!((*(_20917_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_20917_f))._field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_ptr(void) {
	_20c47803a_Token _22317_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[(*((*this)._field_i))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_22317_token,jule::Any(jule::new_struct<_20c476dc4_PtrTypeDecl>(new( std::nothrow ) _20c476dc4_PtrTypeDecl(nullptr)))));
	}
	jule::Ptr<_20c476dc4_TypeDecl> _24017_elem = (*this)._method_step();
	if (_24017_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_22317_token,jule::Any(jule::new_struct<_20c476dc4_PtrTypeDecl>(new( std::nothrow ) _20c476dc4_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_sptr(void) {
	_20c47803a_Token _25417_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	jule::Ptr<_20c476dc4_TypeDecl> _26117_elem = (*this)._method_step();
	if (_26117_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_25417_token,jule::Any(jule::new_struct<_20c476dc4_SptrTypeDecl>(new( std::nothrow ) _20c476dc4_SptrTypeDecl(_26117_elem)))));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_op(void) {
	_20c47803a_Token _27517_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _27517_token._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5296959456:;
			{
				return (*this)._method_build_ptr();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5296960352:;
			{
				return (*this)._method_build_sptr();
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_5296960448:;
			{
				return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_20c47803a_Token(),jule::Any(jule::new_struct<_20c476dc4_SptrTypeDecl>(new( std::nothrow ) _20c476dc4_SptrTypeDecl((*this)._method_build_sptr())))));
			}
		}
		else {
			_case_begin_5296956480:;
			{
				(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_5296957920:;
	}
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_slc(void) {
	_20c47803a_Token _29717_token = (*this)._field_tokens[(*((*this)._field_i))];
	((*((*this)._field_i)))++;
	jule::Ptr<_20c476dc4_TypeDecl> _29917_elem = (*this)._method_step();
	if (_29917_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_29717_token,jule::Any(jule::new_struct<_20c476dc4_SlcTypeDecl>(new( std::nothrow ) _20c476dc4_SlcTypeDecl(_29917_elem)))));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i)) - 1LL],jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Int _32013_expr_delta = (*((*this)._field_i));
	jule::Ptr<_20c476dc4_TypeDecl> _32217_elem = (*this)._method_step();
	if (_32217_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20c476dc4_ArrTypeDecl> _32717_arrt = jule::new_struct<_20c476dc4_ArrTypeDecl>(new( std::nothrow ) _20c476dc4_ArrTypeDecl(_32217_elem,jule::Ptr<_20c476dc4_Expr>()));
	jule::Slice<_20c47803a_Token> _33117_expr_tokens = (*this)._field_tokens.slice(0LL,_32013_expr_delta);
	std::tie(std::ignore,_33117_expr_tokens) = _20c7de1a3_range_last(_33117_expr_tokens);
	_33117_expr_tokens=_33117_expr_tokens.slice(1LL,_33117_expr_tokens.len() - 1LL);
	_20c47803a_Token _33417_token = _33117_expr_tokens[0LL];
	if (((_33117_expr_tokens.len() == 1LL) && (_33417_token._field_id == 7LLU)) && (_33417_token._field_kind == jule::Str("...", 3))) {
	} else {
		(*(_32717_arrt))._field_size=(*((*this)._field_p))._method_build_expr(_33117_expr_tokens);
	}
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_33417_token,jule::Any(_32717_arrt)));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_map(jule::Int _34728_colon,jule::Slice<_20c47803a_Token>& _34745_tokens) {
	_20c47803a_Token _34817_colon_token = (*this)._field_tokens[_34728_colon];
	if ((_34728_colon == 0LL) || ((_34728_colon + 1LL) >= _34745_tokens.len())) {
		(*this)._method_push_err(_34817_colon_token,jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Slice<_20c47803a_Token> _35317_key_tokens = _34745_tokens.slice(0LL,_34728_colon);
	jule::Slice<_20c47803a_Token> _35417_val_tokens = _34745_tokens.slice(_34728_colon + 1LL);
	jule::Ptr<_20c476dc4_MapTypeDecl> _35517_mapt = jule::new_struct<_20c476dc4_MapTypeDecl>(new( std::nothrow ) _20c476dc4_MapTypeDecl());
	jule::Int _35717_j = 0LL;
	jule::Ptr<_20c476dc4_TypeDecl> _35818_keyt;
	jule::Bool _35828_ok;
	std::tie(_35818_keyt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35317_key_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35317_key_tokens.len()) {
		(*this)._method_push_err(_35317_key_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_key=_35818_keyt;
	_35717_j=0LL;
	jule::Ptr<_20c476dc4_TypeDecl> _36718_valt;
	std::tie(_36718_valt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35417_val_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35417_val_tokens.len()) {
		(*this)._method_push_err(_35417_val_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_val=_36718_valt;
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_34817_colon_token,jule::Any(_35517_mapt)));
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_build_enumerable(void) {
	_20c47803a_Token _38217_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_38217_token._field_id != 3LLU)) || (_38217_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_38217_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	_38217_token=(*this)._field_tokens[(*((*this)._field_i))];
	if ((_38217_token._field_id == 3LLU) && (_38217_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_20c47803a_Token> _39618_map_tokens;
	jule::Int _39630_colon;
	std::tie(_39618_map_tokens,_39630_colon) = _20c9bd97b_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_39630_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39630_colon,_39618_map_tokens);
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_TypeBuilder::_method_step(void) {
	_20c47803a_Token _40513_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _40513_token._field_id };
		
		if (_match_expr == 1LLU) {
			_case_begin_5297025712:;
			{
				return (*this)._method_build_prim();
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_5297023280:;
			{
				return (*this)._method_build_ident();
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_5297023376:;
			{
				return (*this)._method_build_cpp_link();
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_5297023472:;
			{
				return (*this)._method_build_fn();
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5297023568:;
			{
				return (*this)._method_build_op();
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5297025152:;
			{
				return (*this)._method_build_enumerable();
			}
		}
		else {
			_case_begin_5297017776:;
			{
				((*((*this)._field_i)))++;
				(*this)._method_push_err(_40513_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_5297022496:;
	}
}



inline std::tuple<jule::Ptr<_20c476dc4_TypeDecl>,jule::Bool> _20c9bd97b_TypeBuilder::_method_build(void) {
	jule::Bool _43444_ok = jule::Bool();
	jule::Ptr<_20c476dc4_TypeDecl> _43517_root = (*this)._method_step();
	if (_43517_root == nullptr) {
		_43444_ok = false;
		return std::make_tuple(_20c9bd97b_build_void_type(),_43444_ok);
	}
	_43444_ok = true;
	return std::make_tuple(_43517_root,_43444_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c9bd97b_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20d78b3e6_Const> _20d78b3e6_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_20d78b3e6_Const>(new( std::nothrow ) _20d78b3e6_Const(jule::Any(_1327_x)));
}



inline jule::Ptr<_20d78b3e6_Const> _20d78b3e6_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_20d78b3e6_Const>(new( std::nothrow ) _20d78b3e6_Const(jule::Any(_1527_x)));
}



inline jule::Ptr<_20d78b3e6_Const> _20d78b3e6_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_20d78b3e6_Const>(new( std::nothrow ) _20d78b3e6_Const(jule::Any(_1728_x)));
}



inline jule::Ptr<_20d78b3e6_Const> _20d78b3e6_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_20d78b3e6_Const>(new( std::nothrow ) _20d78b3e6_Const(jule::Any(_1927_x)));
}



inline jule::Ptr<_20d78b3e6_Const> _20d78b3e6_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_20d78b3e6_Const>(new( std::nothrow ) _20d78b3e6_Const(jule::Any(_2127_x)));
}



inline jule::Ptr<_20d78b3e6_Const> _20d78b3e6_Const::_static_method_new_nil(void) {
	return jule::new_struct<_20d78b3e6_Const>(new( std::nothrow ) _20d78b3e6_Const(jule::Any(nullptr)));
}



inline jule::I64 _20d78b3e6_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
}



inline jule::U64 _20d78b3e6_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LL;
	}
	return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
}



inline jule::Bool _20d78b3e6_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _20d78b3e6_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str();
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _20d78b3e6_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
}



inline jule::I64 _20d78b3e6_Const::_method_as_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5297111280:;
			{
				return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5297110176:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::U64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5297110272:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_5297109744:;
			{
				return 0LL;
			}
		}
		_match_end_5297109488:;
	}
}



inline jule::U64 _20d78b3e6_Const::_method_as_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5297117120:;
			{
				return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5297116096:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5297116192:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_5297082544:;
			{
				return 0LL;
			}
		}
		_match_end_5297109936:;
	}
}



inline jule::F64 _20d78b3e6_Const::_method_as_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5297123664:;
			{
				return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5297123760:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5297122512:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::U64()));
			}
		}
		else {
			_case_begin_5297122160:;
			{
				return 0LL;
			}
		}
		_match_end_5297122080:;
	}
}



inline void _20d78b3e6_Const::_method_set_i64(jule::I64 _13930_x) {
	(*this)._field_data=jule::Any(_13930_x);
}



inline void _20d78b3e6_Const::_method_set_u64(jule::U64 _14130_x) {
	(*this)._field_data=jule::Any(_14130_x);
}



inline void _20d78b3e6_Const::_method_set_bool(jule::Bool _14331_x) {
	(*this)._field_data=jule::Any(_14331_x);
}



inline void _20d78b3e6_Const::_method_set_str(jule::Str _14530_x) {
	(*this)._field_data=jule::Any(_14530_x);
}



inline void _20d78b3e6_Const::_method_set_f64(jule::F64 _14730_x) {
	(*this)._field_data=jule::Any(_14730_x);
}



inline void _20d78b3e6_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline jule::Bool _20d78b3e6_Const::_method_is_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5297140128:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297140528:;
			{
				return false;
			}
		}
		_match_end_5297140272:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_is_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5297142768:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297143072:;
			{
				return false;
			}
		}
		_match_end_5297142992:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_is_bool(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_5297144976:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297145280:;
			{
				return false;
			}
		}
		_match_end_5297145200:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_is_str(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_5297147184:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297147488:;
			{
				return false;
			}
		}
		_match_end_5297147408:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_is_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5297149392:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297149696:;
			{
				return false;
			}
		}
		_match_end_5297149616:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _20d78b3e6_Const::_method_are_same_types(_20d78b3e6_Const _19933_x) {
	{
		
		if ((*this)._method_is_i64() == _19933_x._method_is_i64()) {
			_case_begin_5297156464:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_u64() == _19933_x._method_is_u64()) {
			_case_begin_5297155040:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_f64() == _19933_x._method_is_f64()) {
			_case_begin_5297155136:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_bool() == _19933_x._method_is_bool()) {
			_case_begin_5297155232:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_str() == _19933_x._method_is_str()) {
			_case_begin_5297155328:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_nil() == _19933_x._method_is_nil()) {
			_case_begin_5297155744:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297154736:;
			{
				return false;
			}
		}
		_match_end_5297154560:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_and(_20d78b3e6_Const _21722_x) {
	{
		
		if ((*this)._method_is_bool() && _21722_x._method_is_bool()) {
			_case_begin_5297167648:;
			{
				return (*this)._method_read_bool() && _21722_x._method_read_bool();
			}
		}
		else {
			_case_begin_5297166000:;
			{
				return false;
			}
		}
		_match_end_5297165824:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_or(_20d78b3e6_Const _22921_x) {
	{
		
		if ((*this)._method_is_bool() && _22921_x._method_is_bool()) {
			_case_begin_5297172816:;
			{
				return (*this)._method_read_bool() || _22921_x._method_read_bool();
			}
		}
		else {
			_case_begin_5297171168:;
			{
				return false;
			}
		}
		_match_end_5297170992:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_eqs(_20d78b3e6_Const _24122_x) {
	{
		
		if ((*this)._method_is_nil()) {
			_case_begin_5297177904:;
			{
				return _24122_x._method_is_nil();
			}
		}
		else if ((*this)._method_is_bool()) {
			_case_begin_5297176480:;
			{
				return _24122_x._method_is_bool() && ((*this)._method_read_bool() == _24122_x._method_read_bool());
			}
		}
		else if ((*this)._method_is_str()) {
			_case_begin_5297176576:;
			{
				return _24122_x._method_is_str() && ((*this)._method_read_str() == _24122_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5297176672:;
			{
				return (*this)._method_read_i64() == _24122_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297176768:;
			{
				return (*this)._method_read_u64() == _24122_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5297177184:;
			{
				return (*this)._method_read_f64() == _24122_x._method_as_f64();
			}
		}
		else {
			_case_begin_5297176176:;
			{
				return false;
			}
		}
		_match_end_5297176000:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_lt(_20d78b3e6_Const _27321_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297192096:;
			{
				return (*this)._method_read_i64() < _27321_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297192192:;
			{
				return (*this)._method_read_u64() < _27321_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5297190720:;
			{
				return (*this)._method_read_f64() < _27321_x._method_as_f64();
			}
		}
		else {
			_case_begin_5297190416:;
			{
				return false;
			}
		}
		_match_end_5297190240:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_gt(_20d78b3e6_Const _29621_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297200000:;
			{
				return (*this)._method_read_i64() > _29621_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297200096:;
			{
				return (*this)._method_read_u64() > _29621_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5297198624:;
			{
				return (*this)._method_read_f64() > _29621_x._method_as_f64();
			}
		}
		else {
			_case_begin_5297198320:;
			{
				return false;
			}
		}
		_match_end_5297198144:;
	}
}



inline jule::Bool _20d78b3e6_Const::_method_add(_20d78b3e6_Const _31826_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_5297208240:;
			{
				if ((!(_31826_x._method_is_str()))) {
					return false;
				}
				(*this)._method_set_str((*this)._method_read_str() + _31826_x._method_read_str());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5297208336:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() + _31826_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5297206864:;
			{
				if (_31826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _31826_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() + _31826_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297206976:;
			{
				if (_31826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _31826_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() + _31826_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_5297206544:;
			{
				return false;
			}
		}
		_match_end_5297206368:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_sub(_20d78b3e6_Const _35126_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_5297226816:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() - _35126_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5297226912:;
			{
				if (_35126_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35126_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() - _35126_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297225440:;
			{
				if (_35126_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35126_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() - _35126_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_5297225136:;
			{
				return false;
			}
		}
		_match_end_5297224960:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_mul(_20d78b3e6_Const _37826_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_5297242320:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() * _37826_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5297242416:;
			{
				if (_37826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _37826_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() * _37826_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297240944:;
			{
				if (_37826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _37826_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() * _37826_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_5297240640:;
			{
				return false;
			}
		}
		_match_end_5297240464:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_div(_20d78b3e6_Const _40926_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_5297257440:;
			{
				jule::F64 _41217_l = _40926_x._method_as_f64();
				if (_41217_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_41217_l)));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5297257536:;
			{
				jule::F64 _41917_l = _40926_x._method_as_f64();
				if (_41917_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_41917_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297256064:;
			{
				jule::F64 _42617_l = _40926_x._method_as_f64();
				if (_42617_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_42617_l)));
			}
		}
		else {
			_case_begin_5297255760:;
			{
				return false;
			}
		}
		_match_end_5297255584:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_mod(_20d78b3e6_Const _44126_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297272144:;
			{
				jule::I64 _44417_l = _44126_x._method_as_i64();
				if (_44417_l == 0LL) {
					return false;
				}
				(*this)._method_set_i64(static_cast<jule::I64>(jule::mod((*this)._method_read_i64(),_44417_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297272240:;
			{
				jule::U64 _45117_l = _44126_x._method_as_u64();
				if (_45117_l == 0LL) {
					return false;
				}
				(*this)._method_set_u64(static_cast<jule::U64>(jule::mod((*this)._method_read_u64(),_45117_l)));
			}
		}
		else {
			_case_begin_5297270480:;
			{
				return false;
			}
		}
		_match_end_5297270304:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_bitwise_and(_20d78b3e6_Const _46534_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297283264:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _46534_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297283360:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _46534_x._method_as_u64()));
			}
		}
		else {
			_case_begin_5297281600:;
			{
				return false;
			}
		}
		_match_end_5297281424:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_bitwise_or(_20d78b3e6_Const _48133_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297291216:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _48133_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297291312:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _48133_x._method_as_u64()));
			}
		}
		else {
			_case_begin_5297289552:;
			{
				return false;
			}
		}
		_match_end_5297289376:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_xor(_20d78b3e6_Const _49726_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297299040:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _49726_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297299136:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _49726_x._method_as_u64()));
			}
		}
		else {
			_case_begin_5297297376:;
			{
				return false;
			}
		}
		_match_end_5297297200:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_lshift(_20d78b3e6_Const _51329_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297306992:;
			{
				jule::I64 _51617_l = (*this)._method_as_i64();
				if (_51617_l < 0LL) {
					jule::U64 _51821_r = _51329_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_51617_l << _51821_r));
				} else {
					_20d78b3e6_lshift_unsig((*this),_51329_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297307088:;
			{
				_20d78b3e6_lshift_unsig((*this),_51329_x);
			}
		}
		else {
			_case_begin_5297305328:;
			{
				return false;
			}
		}
		_match_end_5297305152:;
	}
	return true;
}



inline jule::Bool _20d78b3e6_Const::_method_rshift(_20d78b3e6_Const _53629_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5297316560:;
			{
				jule::I64 _53917_l = (*this)._method_as_i64();
				if (_53917_l < 0LL) {
					jule::U64 _54121_r = _53629_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_53917_l >> _54121_r));
				} else {
					_20d78b3e6_rshift_unsig((*this),_53629_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5297316656:;
			{
				_20d78b3e6_rshift_unsig((*this),_53629_x);
			}
		}
		else {
			_case_begin_5297314896:;
			{
				return false;
			}
		}
		_match_end_5297314720:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d78b3e6_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c496047_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20c496047_StructIns::_method_to_str(void) {
	jule::Str _22417_kind = jule::Str();
	_22417_kind+=(*((*this)._field_decl))._field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_22417_kind+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_5299819520:;
			if (it != expr.end()) {
				jule::Ptr<_20d4a6c9e_TypeKind> &_20c496047_g = *it;
				{
					_22417_kind+=(*(_20c496047_g))._method_to_str();
					_22417_kind+=jule::Str(",", 1);
				}
				_iter_next_5299819520:;
				++it;
				goto _iter_begin_5299819520;
			}
			_iter_end_5299819520:;
		}
		_22417_kind=_22417_kind.slice(0LL,_22417_kind.len() - 1LL);
		_22417_kind+=jule::Str("]", 1);
	}
	return _22417_kind;
}



inline jule::Bool _20c496047_StructIns::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _23922_other) {
	jule::Ptr<_20c496047_StructIns> _24013_s = (*(_23922_other))._method_strct();
	if (_24013_s == nullptr) {
		return false;
	}
	if ((*(this->self))._field_decl != (*(_24013_s))._field_decl) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != (*(_24013_s))._field_generics.len()) {
		return false;
	}
	jule::Int _25317_i = 0LL;
	for (; _25317_i < (*(this->self))._field_generics.len(); (_25317_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_25317_i]))._method_equals((*(_24013_s))._field_generics[_25317_i])))) {
				return false;
			}
		}
	_iter_next_5299829456:;
	}
	_iter_end_5299829456:;
	return true;
}



inline jule::Bool _20c496047_StructIns::_method_same(jule::Ptr<_20c496047_StructIns> _26723_s) {
	if (((*this)._field_decl != (*(_26723_s))._field_decl) || ((*(_26723_s))._field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_5299837872:;
		if (it != expr.end()) {
			jule::Int _20c496047_i = it - expr.begin();
			jule::Ptr<_20d4a6c9e_TypeKind> &_20c496047_g = *it;
			{
				if ((!((*(_20c496047_g))._method_equals((*(_26723_s))._field_generics[_20c496047_i])))) {
					return false;
				}
			}
			_iter_next_5299837872:;
			++it;
			_20c496047_i++;
			goto _iter_begin_5299837872;
		}
		_iter_end_5299837872:;
	}
	return true;
}



inline jule::Ptr<_20c819332_Fn> _20c496047_StructIns::_method_find_method(jule::Str _28234_ident,jule::Bool _28246_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5299845440:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20c496047_f = *it;
			{
				if (((*(_20c496047_f))._field_statically == _28246_statically) && ((*(_20c496047_f))._field_ident == _28234_ident)) {
					return _20c496047_f;
				}
			}
			_iter_next_5299845440:;
			++it;
			goto _iter_begin_5299845440;
		}
		_iter_end_5299845440:;
	}
	return nullptr;
}



inline jule::Ptr<_20c496047_FieldIns> _20c496047_StructIns::_method_find_field(jule::Str _29333_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_5299850096:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_FieldIns> _20c496047_f = *it;
			{
				if ((*((*(_20c496047_f))._field_decl))._field_ident == _29333_ident) {
					return _20c496047_f;
				}
			}
			_iter_next_5299850096:;
			++it;
			goto _iter_begin_5299850096;
		}
		_iter_end_5299850096:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c496047_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c819332_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20c819332_ParamIns::_method_to_str(void) {
	jule::Str _18117_s = jule::Str();
	if ((*((*this)._field_decl))._field_mutable) {
		_18117_s+=jule::Str("mut ", 4);
	}
	if ((*((*this)._field_decl))._field_reference) {
		_18117_s+=jule::Str("&_:", 3);
	}
	if ((*((*this)._field_decl))._method_is_self()) {
		if ((*((*this)._field_decl))._method_is_ref()) {
			_18117_s+=jule::Str("&", 1);
		}
		_18117_s+=jule::Str("self", 4);
		return _18117_s;
	}
	if ((*((*this)._field_decl))._field_variadic) {
		_18117_s+=jule::Str("...", 3);
	}
	if ((*this)._field_kind != nullptr) {
		_18117_s+=(*((*this)._field_kind))._method_to_str();
	}
	return _18117_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c819332_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20c819332_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _20c819332_FnIns::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _23622_other) {
	jule::Ptr<_20c819332_FnIns> _23713_f = (*(_23622_other))._method_fnc();
	if (_23713_f == nullptr) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_statically != (*((*(_23713_f))._field_decl))._field_statically) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_exceptional != (*((*(_23713_f))._field_decl))._field_exceptional) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_unsafety != (*((*(_23713_f))._field_decl))._field_unsafety) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != (*(_23713_f))._field_generics.len()) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._method_is_void() != (*((*(_23713_f))._field_decl))._method_is_void()) {
		return false;
	}
	jule::Int _26217_i = 0LL;
	for (; _26217_i < (*(this->self))._field_generics.len(); (_26217_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_26217_i]))._method_equals((*(_23713_f))._field_generics[_26217_i])))) {
				return false;
			}
		}
	_iter_next_5299940400:;
	}
	_iter_end_5299940400:;
	jule::Fn<jule::Bool(jule::Ptr<_20c819332_ParamIns>,jule::Ptr<_20c819332_ParamIns>)> _26913_check_params = jule::Fn<jule::Bool(jule::Ptr<_20c819332_ParamIns>,jule::Ptr<_20c819332_ParamIns>)>([=](jule::Ptr<_20c819332_ParamIns> _26931_p1,jule::Ptr<_20c819332_ParamIns> _26946_p2) mutable -> jule::Bool {
		if ((*((*(_26931_p1))._field_decl))._field_mutable != (*((*(_26946_p2))._field_decl))._field_mutable) {
			return false;
		}
		if ((*((*(_26931_p1))._field_decl))._method_is_self()) {
			if ((!((*((*(_26946_p2))._field_decl))._method_is_self()))) {
				return false;
			}
			if ((*((*(_26931_p1))._field_decl))._method_is_ref() != (*((*(_26946_p2))._field_decl))._method_is_ref()) {
				return false;
			}
			return true;
		}
		if ((*((*(_26931_p1))._field_decl))._field_reference != (*((*(_26946_p2))._field_decl))._field_reference) {
			return false;
		}
		if ((*((*(_26931_p1))._field_decl))._field_variadic != (*((*(_26946_p2))._field_decl))._field_variadic) {
			return false;
		}
		return (*((*(_26931_p1))._field_kind))._method_equals((*(_26946_p2))._field_kind);
	});
	_26217_i=0LL;
	for (; _26217_i < (*(this->self))._field_params.len(); (_26217_i)++) {
		{
			if ((!(_26913_check_params((*(this->self))._field_params[_26217_i],(*(_23713_f))._field_params[_26217_i])))) {
				return false;
			}
		}
	_iter_next_5299948480:;
	}
	_iter_end_5299948480:;
	if ((!((*((*(this->self))._field_decl))._method_is_void()))) {
		if ((!((*((*(this->self))._field_result))._method_equals((*(_23713_f))._field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _20c819332_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != 0LL;
}



inline jule::Bool _20c819332_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (((*this)._field_decl != nullptr) && (*((*this)._field_decl))._method_is_anon());
}



inline jule::Bool _20c819332_FnIns::_method_same(jule::Ptr<_20c819332_FnIns> _32623_f) {
	if (((*this)._field_decl != (*(_32623_f))._field_decl) || ((*(_32623_f))._field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_5299973808:;
		if (it != expr.end()) {
			jule::Int _20c819332_i = it - expr.begin();
			jule::Ptr<_20d4a6c9e_TypeKind> &_20c819332_g = *it;
			{
				if ((!((*(_20c819332_g))._method_equals((*(_32623_f))._field_generics[_20c819332_i])))) {
					return false;
				}
			}
			_iter_next_5299973808:;
			++it;
			_20c819332_i++;
			goto _iter_begin_5299973808;
		}
		_iter_end_5299973808:;
	}
	return true;
}



inline jule::Str _20c819332_FnIns::_method_get_kind_str(jule::Bool _34231_ident) {
	jule::Str _34317_s = jule::Str();
	if ((*((*this)._field_decl))._field_statically) {
		_34317_s+=jule::Str("static ", 7);
	}
	if ((*((*this)._field_decl))._field_unsafety) {
		_34317_s+=jule::Str("unsafe ", 7);
	}
	_34317_s+=jule::Str("fn", 2);
	if (_34231_ident && ((*this)._field_decl != nullptr)) {
		_34317_s+=jule::Str(" ", 1) + (*((*this)._field_decl))._field_ident;
	}
	if ((*this)._field_generics.len() > 0LL) {
		_34317_s+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_5299986096:;
			if (it != expr.end()) {
				jule::Int _20c819332_i = it - expr.begin();
				jule::Ptr<_20d4a6c9e_TypeKind> &_20c819332_t = *it;
				{
					_34317_s+=(*(_20c819332_t))._method_to_str();
					if ((_20c819332_i + 1LL) < (*this)._field_generics.len()) {
						_34317_s+=jule::Str(",", 1);
					}
				}
				_iter_next_5299986096:;
				++it;
				_20c819332_i++;
				goto _iter_begin_5299986096;
			}
			_iter_end_5299986096:;
		}
		_34317_s+=jule::Str("]", 1);
	} else if ((*((*this)._field_decl))._field_generics.len() > 0LL) {
		_34317_s+=jule::Str("[", 1);
		{
			auto &expr = (*((*this)._field_decl))._field_generics;
			auto it = expr.begin();
			_iter_begin_5299985872:;
			if (it != expr.end()) {
				jule::Int _20c819332_i = it - expr.begin();
				jule::Ptr<_20c476dc4_GenericDecl> &_20c819332_g = *it;
				{
					_34317_s+=(*(_20c819332_g))._field_ident;
					if ((_20c819332_i + 1LL) < (*((*this)._field_decl))._field_generics.len()) {
						_34317_s+=jule::Str(",", 1);
					}
				}
				_iter_next_5299985872:;
				++it;
				_20c819332_i++;
				goto _iter_begin_5299985872;
			}
			_iter_end_5299985872:;
		}
		_34317_s+=jule::Str("]", 1);
	}
	_34317_s+=jule::Str("(", 1);
	jule::I64 _38013_n = (*this)._field_params.len();
	if (_38013_n > 0LL) {
		{
			auto &expr = (*this)._field_params;
			auto it = expr.begin();
			_iter_begin_5299997120:;
			if (it != expr.end()) {
				jule::Ptr<_20c819332_ParamIns> &_20c819332_p = *it;
				{
					_34317_s+=(*(_20c819332_p))._method_to_str();
					_34317_s+=jule::Str(",", 1);
				}
				_iter_next_5299997120:;
				++it;
				goto _iter_begin_5299997120;
			}
			_iter_end_5299997120:;
		}
		_34317_s=_34317_s.slice(0LL,_34317_s.len() - 1LL);
	}
	_34317_s+=jule::Str(")", 1);
	if ((*((*this)._field_decl))._field_exceptional) {
		_34317_s+=jule::Str("!", 1);
	}
	if ((!((*((*this)._field_decl))._method_is_void()))) {
		_34317_s+=jule::Str(":", 1);
		_34317_s+=(*((*this)._field_result))._method_to_str();
	}
	return _34317_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c819332_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "anon:" << _Src._field_anon << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20caa3115_ReferenceStack> _20caa3115_ReferenceStack::_static_method_new(void) {
	return jule::new_struct<_20caa3115_ReferenceStack>(new( std::nothrow ) _20caa3115_ReferenceStack());
}



inline jule::Int _20caa3115_ReferenceStack::_method_len(void) {
	return static_cast<jule::I64>((*this)._field_buffer.len());
}



inline jule::Any _20caa3115_ReferenceStack::_method_at(jule::Int _5925_i) {
	return (*this)._field_buffer[_5925_i];
}



inline void _20caa3115_ReferenceStack::_method_push(jule::Any _6431_ref) {
	(*this)._field_buffer = jule::alloc_for_append((*this)._field_buffer,1);(*this)._field_buffer.push(_6431_ref);
}



inline jule::Bool _20caa3115_ReferenceStack::_method_exist_0(jule::Ptr<_20cdc725d_Var> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_5303770576:;
		if (it != expr.end()) {
			jule::Any &_20caa3115_ref = *it;
			{
				if (_20caa3115_ref == _6927_t) {
					return true;
				}
			}
			_iter_next_5303770576:;
			++it;
			goto _iter_begin_5303770576;
		}
		_iter_end_5303770576:;
	}
	return false;
}

inline jule::Bool _20caa3115_ReferenceStack::_method_exist_1(jule::Ptr<_20c819332_FnIns> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_5303779840:;
		if (it != expr.end()) {
			jule::Any &_20caa3115_ref = *it;
			{
				if (_20caa3115_ref == _6927_t) {
					return true;
				}
			}
			_iter_next_5303779840:;
			++it;
			goto _iter_begin_5303779840;
		}
		_iter_end_5303779840:;
	}
	return false;
}

inline jule::Bool _20caa3115_ReferenceStack::_method_exist_2(jule::Ptr<_20c496047_StructIns> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_5303818160:;
		if (it != expr.end()) {
			jule::Any &_20caa3115_ref = *it;
			{
				if (_20caa3115_ref == _6927_t) {
					return true;
				}
			}
			_iter_next_5303818160:;
			++it;
			goto _iter_begin_5303818160;
		}
		_iter_end_5303818160:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _20caa3115_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20caa3115_SymbolBuilder> _20caa3115_SymbolBuilder::_method_get_root(void) {
	jule::Ptr<_20caa3115_SymbolBuilder> _30217_root = this->self;
	while ((*(_30217_root))._field_owner != nullptr) {
		{
			_30217_root=(*(_30217_root))._field_owner;
		}
	_iter_next_5300012144:;
	}
	_iter_end_5300012144:;
	return _30217_root;
}



inline void _20caa3115_SymbolBuilder::_method_push_err(_20c47803a_Token& _30928_token,jule::Str _30942_fmt,jule::Slice<jule::Any> _30955_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_20cba60d6_compiler_err(_30928_token,true,_30942_fmt,_30955_args));
}



inline void _20caa3115_SymbolBuilder::_method_push_err_text(_20c47803a_Token& _31333_token,jule::Str _31347_fmt,jule::Slice<jule::Any> _31360_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_20cba60d6_compiler_err(_31333_token,false,_31347_fmt,_31360_args));
}



inline void _20caa3115_SymbolBuilder::_method_push_suggestion(jule::Str _31834_fmt,jule::Slice<jule::Any> _31847_args) {
	{
		_20cba60d6_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_31834_fmt,_31847_args);
	}
}



inline jule::Bool _20caa3115_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ptr<_20c476dc4_UseDecl>& _32243_decl) {
	jule::Bool _32261_ok = jule::Bool();
	if (_20a25878a_is_std_header_path((*(_32243_decl))._field_link_path)) {
		_32261_ok = true;
		return _32261_ok;
	}
	jule::Str _32713_ext = _20a3911b9_ext((*(_32243_decl))._field_link_path);
	if ((!(_20a25878a_is_valid_header_ext(_32713_ext))) && (!(_20a25878a_is_valid_cpp_ext(_32713_ext)))) {
		(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_32713_ext)}));
		_32261_ok = false;
		return _32261_ok;
	}
	jule::Ptr<_20a252e5a_Status> _33413_info = ({
		auto except = _20a252e5a_Status::_static_method_of((*(_32243_decl))._field_link_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_32243_decl))._field_link_path)}));
			_32261_ok = false;
			return _32261_ok;
			_32261_ok = false;
			return _32261_ok;
		} jule::Ptr<_20a252e5a_Status>();});
	});
	if ((*(_33413_info))._method_is_dir()) {
		(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_32243_decl))._field_link_path)}));
		_32261_ok = false;
		return _32261_ok;
	}
	_32261_ok = true;
	return _32261_ok;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20caa3115_SymbolBuilder::_method_build_cpp_header_import(jule::Ptr<_20c476dc4_UseDecl>& _34647_decl) {
	jule::Str _34717_path = (*(_34647_decl))._field_link_path;
	if ((!(_20a25878a_is_std_header_path((*(_34647_decl))._field_link_path)))) {
		jule::Bool _35021_ok = (*this)._method_check_cpp_use_decl_path(_34647_decl);
		if ((!(_35021_ok))) {
			return nullptr;
		}
		std::tie(_34717_path,_35021_ok) = _20a3911b9_abs((*(_34647_decl))._field_link_path);
		if ((!(_35021_ok))) {
			(*this)._method_push_err((*(_34647_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_34647_decl))._field_link_path)}));
		}
	}
	return jule::new_struct<_20cba58cc_ImportInfo>(new( std::nothrow ) _20cba58cc_ImportInfo((*(_34647_decl))._field_token,_34717_path,(*(_34647_decl))._field_link_path,jule::Str(),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_20c47803a_Token>(),nullptr,jule::Int()));
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20caa3115_SymbolBuilder::_method_build_std_import(jule::Ptr<_20c476dc4_UseDecl>& _37340_decl) {
	jule::Str _37417_path = (*(_37340_decl))._field_link_path.slice(jule::Str("std::", 5).len());
	_37417_path=_20a405ddd_replace(_37417_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_37417_path=_20a3911b9_join(jule::Slice<jule::Str>({_20ba03198_PATH_STDLIB,_37417_path}));
	jule::Bool _37720_ok;
	std::tie(_37417_path,_37720_ok) = _20a3911b9_abs(_37417_path);
	if ((!(_37720_ok))) {
		(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_20a252e5a_Status> _38413_info = ({
		auto except = _20a252e5a_Status::_static_method_of(_37417_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_20a252e5a_Status>();});
	});
	if ((!((*(_38413_info))._method_is_dir()))) {
		(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Int _39413_i = _20a405ddd_find_last((*(_37340_decl))._field_link_path,jule::Str("::", 2)) + 1LL;
	jule::Str _39513_ident = (*(_37340_decl))._field_link_path.slice(_39413_i);
	return jule::new_struct<_20cba58cc_ImportInfo>(new( std::nothrow ) _20cba58cc_ImportInfo((*(_37340_decl))._field_token,_37417_path,(*(_37340_decl))._field_link_path,_39513_ident,(*(_37340_decl))._field_alias,jule::Bool(),false,true,(*(_37340_decl))._field_full,jule::Slice<_20c47803a_Token>(),jule::new_struct<_20cba58cc_Package>(new( std::nothrow ) _20cba58cc_Package(nullptr)),jule::Int()));
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20caa3115_SymbolBuilder::_method_build_ident_import(jule::Ptr<_20c476dc4_UseDecl>& _41243_decl) {
	jule::Str _41313_mod_path = (*(this->self))._field_importer.get()._method_get_mod_path();
	if (_41313_mod_path.len() == 0LL) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Str _42017_path = (*(_41243_decl))._field_link_path;
	_42017_path=_20a405ddd_replace(_42017_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_42017_path=_20a3911b9_join(jule::Slice<jule::Str>({_41313_mod_path,_42017_path}));
	jule::Bool _42420_ok;
	std::tie(_42017_path,_42420_ok) = _20a3911b9_abs(_42017_path);
	if ((!(_42420_ok))) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_20a252e5a_Status> _43113_info = ({
		auto except = _20a252e5a_Status::_static_method_of(_42017_path);
		(except.ok()) ? (except.result) : ({{
			(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_20a252e5a_Status>();});
	});
	if ((!((*(_43113_info))._method_is_dir()))) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Int _44113_i = _20a405ddd_find_last((*(_41243_decl))._field_link_path,jule::Str("::", 2)) + 1LL;
	jule::Str _44213_ident = (*(_41243_decl))._field_link_path.slice(_44113_i);
	return jule::new_struct<_20cba58cc_ImportInfo>(new( std::nothrow ) _20cba58cc_ImportInfo((*(_41243_decl))._field_token,_42017_path,(*(_41243_decl))._field_link_path,_44213_ident,(*(_41243_decl))._field_alias,jule::Bool(),false,false,(*(_41243_decl))._field_full,jule::Slice<_20c47803a_Token>(),jule::new_struct<_20cba58cc_Package>(new( std::nothrow ) _20cba58cc_Package(nullptr)),jule::Int()));
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20caa3115_SymbolBuilder::_method_build_import(jule::Ptr<_20c476dc4_UseDecl>& _45937_decl) {
	{
		
		if ((*(_45937_decl))._field_cpp_linked) {
			_case_begin_5300108544:;
			{
				return (*(this->self))._method_build_cpp_header_import(_45937_decl);
			}
		}
		else if ((*(_45937_decl))._field_std) {
			_case_begin_5300109680:;
			{
				return (*(this->self))._method_build_std_import(_45937_decl);
			}
		}
		else {
			_case_begin_5300107168:;
			{
				return (*(this->self))._method_build_ident_import(_45937_decl);
			}
		}
		_match_end_5300106992:;
	}
}



inline jule::Bool _20caa3115_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ptr<_20cba58cc_ImportInfo>& _46744_pkg) {
	jule::Bool _46764_ok = jule::Bool();
	jule::Ptr<_20cba58cc_ImportInfo> _46913_lpkg = (*((*this)._field_table))._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>([=](jule::Ptr<_20cba58cc_ImportInfo> _46949_spkg) mutable -> jule::Bool {
		return (*(_46744_pkg))._field_path == (*(_46949_spkg))._field_path;
	}));
	if (_46913_lpkg == nullptr) {
		_46764_ok = true;
		return _46764_ok;
	}
	(*this)._method_push_err((*(_46744_pkg))._field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>({jule::Any((*(_46744_pkg))._field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_46764_ok = false;
	return _46764_ok;
}



inline void _20caa3115_SymbolBuilder::_method_impl_import_selections(jule::Ptr<_20cba58cc_ImportInfo>& _48146_imp,jule::Ptr<_20c476dc4_UseDecl>& _48169_decl) {
	{
		auto &expr = (*(_48169_decl))._field_selected;
		auto it = expr.begin();
		_iter_begin_5300128464:;
		if (it != expr.end()) {
			_20c47803a_Token _20caa3115_ident = *it;
			{
				if ((*(_48146_imp))._method_exist_ident(_20caa3115_ident._field_kind)) {
					(*this)._method_push_err(_20caa3115_ident,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>({jule::Any(_20caa3115_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
					goto _iter_next_5300128464;
				}
				(*(_48146_imp))._field_selected = jule::alloc_for_append((*(_48146_imp))._field_selected,1);(*(_48146_imp))._field_selected.push(_20caa3115_ident);
			}
			_iter_next_5300128464:;
			++it;
			goto _iter_begin_5300128464;
		}
		_iter_end_5300128464:;
	}
}



inline jule::Str _20caa3115_SymbolBuilder::_method_get_as_link_path(jule::Str _49340_path) {
	if (_20a405ddd_has_prefix(_49340_path,_20ba03198_PATH_STDLIB)) {
		_49340_path=_49340_path.slice(_20ba03198_PATH_STDLIB.len());
		return jule::Str("std", 3) + _20a405ddd_replace(_49340_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _49914_root;
	std::tie(_49914_root,std::ignore) = _20a3911b9_abs((*(this->self))._field_importer.get()._method_get_mod_path());
	_49340_path=_49340_path.slice(_49914_root.len());
	if (_49340_path[0LL] == 92LL) {
		_49340_path=_49340_path.slice(1LL);
	}
	return _20a405ddd_replace(_49340_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
}



inline void _20caa3115_SymbolBuilder::_method_push_cycle_error(jule::Ptr<_20caa3115_SymbolBuilder>& _50737_sb,jule::Str _50757_path,jule::Str& _50773_message) {
	
	jule::Str _51013_refers_to = _20a25b99c_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*((*((*(_50737_sb))._field_table))._field_file))._method_dir())),jule::Any((*(this->self))._method_get_as_link_path(_50757_path))}));
	_50773_message=((_20a405ddd_repeat(jule::Str(" ", 1),4LL) + _51013_refers_to) + jule::Str("\n", 1)) + _50773_message;
}



inline void _20caa3115_SymbolBuilder::_method_push_cross_cycle_error(jule::Ptr<_20caa3115_SymbolBuilder>& _51743_target,jule::Ptr<_20cba58cc_ImportInfo>& _51768_imp,_20c47803a_Token& _51787_error_token) {
	jule::Str _51817_message = jule::Str();
	(*(this->self))._method_push_cycle_error(this->self,(*(_51768_imp))._field_path,_51817_message);
	jule::Ptr<_20caa3115_SymbolBuilder> _52217_owner = (*(this->self))._field_owner;
	jule::Ptr<_20caa3115_SymbolBuilder> _52317_old = this->self;
	while ((*(_52217_owner))._field_owner != nullptr) {
		{
			(*(this->self))._method_push_cycle_error((*(_52317_old))._field_owner,(*((*((*(_52317_old))._field_table))._field_file))._method_dir(),_51817_message);
			if ((*(_52217_owner))._field_owner == _51743_target) {
				(*(this->self))._method_push_cycle_error(_51743_target,(*((*((*(_52217_owner))._field_table))._field_file))._method_dir(),_51817_message);
				goto _iter_end_5300160240;
			}
			_52317_old=_52217_owner;
			_52217_owner=(*(_52217_owner))._field_owner;
		}
	_iter_next_5300160240:;
	}
	_iter_end_5300160240:;
	(*(this->self))._method_push_err(_51787_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_51817_message)}));
}



inline jule::Bool _20caa3115_SymbolBuilder::_method_check_import_cycles(jule::Ptr<_20cba58cc_ImportInfo> _54039_imp,jule::Ptr<_20c476dc4_UseDecl>& _54058_decl) {
	if ((*(_54039_imp))._field_path == (*((*((*(this->self))._field_table))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*(_54058_decl))._field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*(_54039_imp))._field_path))}));
		return false;
	}
	if ((*(this->self))._field_owner == nullptr) {
		return true;
	}
	if ((*((*((*((*(this->self))._field_owner))._field_table))._field_file))._method_dir() == (*(_54039_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error((*(this->self))._field_owner,_54039_imp,(*(_54058_decl))._field_token);
		return false;
	}
	jule::Ptr<_20caa3115_SymbolBuilder> _55517_owner = (*(this->self))._field_owner;
	_julec_label_iter:;
	if ((*((*((*(_55517_owner))._field_table))._field_file))._method_dir() == (*(_54039_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error(_55517_owner,_54039_imp,(*(_54058_decl))._field_token);
		return false;
	}
	if ((*(_55517_owner))._field_owner != nullptr) {
		_55517_owner=(*(_55517_owner))._field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline void _20caa3115_SymbolBuilder::_method_check_package_accessibility(jule::Ptr<_20c476dc4_UseDecl>& _57647_decl,jule::Str& _57664_mod,jule::Str& _57675_path) {
	if (((*this)._field_importer.get()._method_get_mod_path() != _57664_mod) && _20a405ddd_contains(_57675_path,jule::Str("internal", 8))) {
		(*this)._method_push_err((*(_57647_decl))._field_token,jule::Str("you cannot access to internal packages", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _20caa3115_SymbolBuilder::_method_import_package(jule::Ptr<_20cba58cc_ImportInfo>& _58239_imp,jule::Ptr<_20c476dc4_UseDecl>& _58262_decl) {
	jule::Bool _58280_ok = jule::Bool();
	if ((*(_58239_imp))._field_cpp_linked) {
		_58280_ok = true;
		return _58280_ok;
	}
	jule::Ptr<_20cba58cc_ImportInfo> _58717_port = (*(this->self))._field_importer.get()._method_get_import((*(_58239_imp))._field_path);
	if (_58717_port != nullptr) {
		(*(_58239_imp))._field_package=(*(_58717_port))._field_package;
		(*(_58239_imp))._field_duplicate=true;
		jule::Str _59217_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		(*(this->self))._field_importer.get()._method_set_mod_path((*(this->self))._field_importer.get()._method_mod_by_id((*(_58239_imp))._field_mod_id));
		(*(this->self))._method_check_package_accessibility(_58262_decl,_59217_old_mod,(*(_58717_port))._field_path);
		(*(this->self))._field_importer.get()._method_set_mod_path(_59217_old_mod);
	} else {
		if ((!((*(this->self))._method_check_import_cycles(_58239_imp,_58262_decl)))) {
			_58280_ok = false;
			return _58280_ok;
		}
		jule::Str _60117_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		__JULE_DEFER({
			(*(this->self))._field_importer.get()._method_set_mod_path(_60117_old_mod);
		});
		if ((*(_58239_imp))._field_std) {
			(*(this->self))._field_importer.get()._method_set_mod_path(_20ba03198_PATH_STDLIB);
		}
		jule::Slice<jule::Ptr<_20c476126_Ast>> _60622_asts;
		jule::Slice<_20a25b99c_Log> _60628_errors;
		std::tie(_60622_asts,_60628_errors) = (*(this->self))._field_importer.get()._method_import_package((*(_58239_imp))._field_path,(!((*(_58239_imp))._field_std)));
		if (_60628_errors.len() > 0LL) {
			(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_60628_errors);
			_58280_ok = false;
			return _58280_ok;
		}
		(*(this->self))._method_check_package_accessibility(_58262_decl,_60117_old_mod,(*(_58239_imp))._field_path);
		{
			auto &expr = _60622_asts;
			auto it = expr.begin();
			_iter_begin_5300226432:;
			if (it != expr.end()) {
				jule::Ptr<_20c476126_Ast> _20caa3115_ast = *it;
				{
					jule::Ptr<_20d0c86e5_SymbolTable> _61526_table;
					jule::Slice<_20a25b99c_Log> _61533_errors;
					std::tie(_61526_table,_61533_errors) = _20d5c9454_build_symbols(_20caa3115_ast,(*(this->self))._field_importer,this->self);
					if (_61533_errors.len() > 0LL) {
						(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_61533_errors);
						(*(this->self))._method_push_err_text((*(_58239_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_58239_imp))._field_link_path)}));
						_58280_ok = false;
						return _58280_ok;
					}
					(*((*(_58239_imp))._field_package))._field_files = jule::alloc_for_append((*((*(_58239_imp))._field_package))._field_files,1);(*((*(_58239_imp))._field_package))._field_files.push(_61526_table);
				}
				_iter_next_5300226432:;
				++it;
				goto _iter_begin_5300226432;
			}
			_iter_end_5300226432:;
		}
	}
	(*(this->self))._method_impl_import_selections(_58239_imp,_58262_decl);
	_58280_ok = true;
	return _58280_ok;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20caa3115_SymbolBuilder::_method_import_use_decl(jule::Ptr<_20c476dc4_UseDecl>& _63340_decl) {
	jule::Ptr<_20cba58cc_ImportInfo> _63417_imp = (*(this->self))._method_build_import(_63340_decl);
	if (_63417_imp == nullptr) {
		return nullptr;
	}
	jule::Bool _64017_ok = (*(this->self))._method_check_duplicate_use_decl(_63417_imp);
	if ((!(_64017_ok))) {
		return nullptr;
	}
	_64017_ok=(*(this->self))._method_import_package(_63417_imp,_63340_decl);
	(*((*(this->self))._field_table))._field_imports = jule::alloc_for_append((*((*(this->self))._field_table))._field_imports,1);(*((*(this->self))._field_table))._field_imports.push(_63417_imp);
	if (_64017_ok) {
		(*(this->self))._field_importer.get()._method_imported(_63417_imp);
		return _63417_imp;
	}
	return nullptr;
}



inline void _20caa3115_SymbolBuilder::_method_import_use_decls(void) {
	{
		auto &expr = (*((*(this->self))._field_ast))._field_use_decls;
		auto it = expr.begin();
		_iter_begin_5300249968:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_UseDecl> _20caa3115_decl = *it;
			{
				(*(this->self))._method_import_use_decl(_20caa3115_decl);
				if ((*(this->self))._field_errors.len() > 0LL) {
					goto _iter_end_5300249968;
				}
			}
			_iter_next_5300249968:;
			++it;
			goto _iter_begin_5300249968;
		}
		_iter_end_5300249968:;
	}
}



inline void _20caa3115_SymbolBuilder::_method_append_decl(_20c476dc4_Node& _66535_decl) {
	{
		auto &_match_expr{ _66535_decl._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_TypeAliasDecl>>()) {
			_case_begin_5300255728:;
			{
				jule::Ptr<_20d4a6c9e_TypeAlias> _66821_ta = _20caa3115_build_type_alias(_66535_decl._field_data.operator jule::Ptr<_20c476dc4_TypeAliasDecl>());
				(*((*this)._field_table))._field_type_aliases = jule::alloc_for_append((*((*this)._field_table))._field_type_aliases,1);(*((*this)._field_table))._field_type_aliases.push(_66821_ta);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_StructDecl>>()) {
			_case_begin_5300255008:;
			{
				jule::Ptr<_20c496047_Struct> _67221_srct = _20caa3115_build_struct(_66535_decl._field_data.operator jule::Ptr<_20c476dc4_StructDecl>());
				(*((*this)._field_table))._field_structs = jule::alloc_for_append((*((*this)._field_table))._field_structs,1);(*((*this)._field_table))._field_structs.push(_67221_srct);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnDecl>>()) {
			_case_begin_5300255104:;
			{
				jule::Ptr<_20c819332_Fn> _67621_f = _20caa3115_build_fn(_66535_decl._field_data.operator jule::Ptr<_20c476dc4_FnDecl>());
				(*((*this)._field_table))._field_funcs = jule::alloc_for_append((*((*this)._field_table))._field_funcs,1);(*((*this)._field_table))._field_funcs.push(_67621_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TraitDecl>>()) {
			_case_begin_5300255200:;
			{
				jule::Ptr<_20cb471a9_Trait> _68021_t = _20caa3115_build_trait(_66535_decl._field_data.operator jule::Ptr<_20c476dc4_TraitDecl>());
				(*((*this)._field_table))._field_traits = jule::alloc_for_append((*((*this)._field_table))._field_traits,1);(*((*this)._field_table))._field_traits.push(_68021_t);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_VarDecl>>()) {
			_case_begin_5300255312:;
			{
				jule::Ptr<_20cdc725d_Var> _68421_v = _20caa3115_build_var(_66535_decl._field_data.operator jule::Ptr<_20c476dc4_VarDecl>());
				(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.push(_68421_v);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_EnumDecl>>()) {
			_case_begin_5300256736:;
			{
				jule::Ptr<_20cb4c70e_Enum> _68821_e = _20caa3115_build_enum(_66535_decl._field_data.operator jule::Ptr<_20c476dc4_EnumDecl>());
				(*((*this)._field_table))._field_enums = jule::alloc_for_append((*((*this)._field_table))._field_enums,1);(*((*this)._field_table))._field_enums.push(_68821_e);
			}
		}
		else {
			_case_begin_5300254704:;
			{
				(*this)._method_push_err(_66535_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5300254544:;
	}
}



inline void _20caa3115_SymbolBuilder::_method_append_decls(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_decls;
		auto it = expr.begin();
		_iter_begin_5300277232:;
		if (it != expr.end()) {
			_20c476dc4_Node _20caa3115_decl = *it;
			{
				(*this)._method_append_decl(_20caa3115_decl);
			}
			_iter_next_5300277232:;
			++it;
			goto _iter_begin_5300277232;
		}
		_iter_end_5300277232:;
	}
}



inline void _20caa3115_SymbolBuilder::_method_append_impls(void) {
	(*((*this)._field_table))._field_impls=jule::Slice<jule::Ptr<_20cb5423d_Impl>>::alloc(0LL,static_cast<jule::I64>((*((*this)._field_ast))._field_impls.len()));
	{
		auto &expr = (*((*this)._field_ast))._field_impls;
		auto it = expr.begin();
		_iter_begin_5300281600:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Impl> _20caa3115_decl = *it;
			{
				(*((*this)._field_table))._field_impls = jule::alloc_for_append((*((*this)._field_table))._field_impls,1);(*((*this)._field_table))._field_impls.push(_20caa3115_build_impl(_20caa3115_decl));
			}
			_iter_next_5300281600:;
			++it;
			goto _iter_begin_5300281600;
		}
		_iter_end_5300281600:;
	}
}



inline void _20caa3115_SymbolBuilder::_method_push_directive_pass(jule::Ptr<_20c476dc4_Directive>& _70943_d) {
	if ((*(_70943_d))._field_args.len() == 0LL) {
		(*this)._method_push_err((*(_70943_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((*(_70943_d))._field_args.len() > 1LL) {
		_20c47803a_Token _71417_arg = (*(_70943_d))._field_args[1LL];
		(*this)._method_push_err(_71417_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_20c47803a_Token _71813_arg = (*(_70943_d))._field_args[0LL];
	if (_71813_arg._field_id != 6LLU) {
		(*this)._method_push_err(_71813_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_71813_arg._field_kind[0LL] != '\"') {
		(*this)._method_push_err(_71813_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*((*this)._field_table))._field_passes = jule::alloc_for_append((*((*this)._field_table))._field_passes,1);(*((*this)._field_table))._field_passes.push(_20caa3115_Pass((*(_70943_d))._field_tag,_71813_arg._field_kind.slice(1LL,_71813_arg._field_kind.len() - 1LL)));
}



inline void _20caa3115_SymbolBuilder::_method_append_top_directives(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_5300300464:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> _20caa3115_d = *it;
			{
				{
					auto &_match_expr{ (*(_20caa3115_d))._field_tag._field_kind };
					
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_5300305264:;
						{
							(*this)._method_push_directive_pass(_20caa3115_d);
						}
					}
					_match_end_5300305136:;
				}
			}
			_iter_next_5300300464:;
			++it;
			goto _iter_begin_5300300464;
		}
		_iter_end_5300300464:;
	}
}



inline void _20caa3115_SymbolBuilder::_method_build(void) {
	(*(this->self))._field_table=jule::new_struct<_20d0c86e5_SymbolTable>(new( std::nothrow ) _20d0c86e5_SymbolTable((*((*(this->self))._field_ast))._field_file,jule::Slice<_20caa3115_Pass>(),jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Slice<jule::Ptr<_20c496047_Struct>>(),jule::Slice<jule::Ptr<_20c819332_Fn>>(),jule::Slice<jule::Ptr<_20cb471a9_Trait>>(),jule::Slice<jule::Ptr<_20cb4c70e_Enum>>(),jule::Slice<jule::Ptr<_20cb5423d_Impl>>()));
	(*(this->self))._method_append_top_directives();
	(*(this->self))._method_import_use_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_append_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _20caa3115_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20cb5423d_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base != nullptr;
}



inline jule::Bool _20cb5423d_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb5423d_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20cb4d853_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20cb4d853_Match::_method_is_generic_type_match(void) {
	return ((*this)._field_type_match && ((*this)._field_expr != nullptr)) && (*((*((*this)._field_expr))._field_kind))._field_generic;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20cb4d853_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cb4d853_ScopeChecker::_method_find_package(jule::Str _41835_ident) {
	return (*((*this)._field_s))._method_find_package(_41835_ident);
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cb4d853_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)> _42837_selector) {
	return (*((*this)._field_s))._method_select_package(_42837_selector);
}



inline jule::Ptr<_20cdc725d_Var> _20cb4d853_ScopeChecker::_method_find_var(jule::Str _43931_ident,jule::Bool _43943_cpp_linked) {
	
	jule::Ptr<_20cdc725d_Var> _44217_v = (*((*this)._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
	if (_44217_v != nullptr) {
		return _44217_v;
	}
	jule::Ptr<_20cb4d853_ScopeChecker> _44717_parent = (*this)._field_parent;
	while (_44717_parent != nullptr) {
		{
			_44217_v=(*((*(_44717_parent))._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
			if (_44217_v != nullptr) {
				return _44217_v;
			}
			_44717_parent=(*(_44717_parent))._field_parent;
		}
	_iter_next_5300369152:;
	}
	_iter_end_5300369152:;
	return (*((*this)._field_s))._method_find_var(_43931_ident,_43943_cpp_linked);
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20cb4d853_ScopeChecker::_method_find_type_alias(jule::Str _46638_ident,jule::Bool _46650_cpp_linked) {
	
	jule::Ptr<_20d4a6c9e_TypeAlias> _46917_ta = (*((*this)._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
	if (_46917_ta != nullptr) {
		return _46917_ta;
	}
	jule::Ptr<_20cb4d853_ScopeChecker> _47417_parent = (*this)._field_parent;
	while (_47417_parent != nullptr) {
		{
			_46917_ta=(*((*(_47417_parent))._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
			if (_46917_ta != nullptr) {
				return _46917_ta;
			}
			_47417_parent=(*(_47417_parent))._field_parent;
		}
	_iter_next_5300382496:;
	}
	_iter_end_5300382496:;
	return (*((*this)._field_s))._method_find_type_alias(_46638_ident,_46650_cpp_linked);
}



inline jule::Ptr<_20c496047_Struct> _20cb4d853_ScopeChecker::_method_find_struct(jule::Str _49134_ident,jule::Bool _49146_cpp_linked) {
	return (*((*this)._field_s))._method_find_struct(_49134_ident,_49146_cpp_linked);
}



inline jule::Ptr<_20c819332_Fn> _20cb4d853_ScopeChecker::_method_find_fn(jule::Str _50030_ident,jule::Bool _50042_cpp_linked) {
	return (*((*this)._field_s))._method_find_fn(_50030_ident,_50042_cpp_linked);
}



inline jule::Ptr<_20cb471a9_Trait> _20cb4d853_ScopeChecker::_method_find_trait(jule::Str _50933_ident) {
	return (*((*this)._field_s))._method_find_trait(_50933_ident);
}



inline jule::Ptr<_20cb4c70e_Enum> _20cb4d853_ScopeChecker::_method_find_enum(jule::Str _51832_ident) {
	return (*((*this)._field_s))._method_find_enum(_51832_ident);
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_is_unsafe(void) {
	jule::Ptr<_20cb4d853_ScopeChecker> _52617_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_52617_scope))._field_scope))._field_unsafety) {
		return true;
	}
	if ((*(_52617_scope))._field_parent != nullptr) {
		_52617_scope=(*(_52617_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_is_root(void) {
	return ((*this)._field_parent == nullptr) || ((*this)._field_owner != nullptr);
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_is_deferred(void) {
	jule::Ptr<_20cb4d853_ScopeChecker> _54717_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_54717_scope))._field_scope))._field_deferred) {
		return true;
	}
	if ((*(_54717_scope))._field_parent != nullptr) {
		_54717_scope=(*(_54717_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_20cb4d853_ScopeChecker> _20cb4d853_ScopeChecker::_method_get_root(void) {
	jule::Ptr<_20cb4d853_ScopeChecker> _56517_root = this->self;
	while (((*(_56517_root))._field_parent != nullptr) && ((*(_56517_root))._field_owner == nullptr)) {
		{
			_56517_root=(*(_56517_root))._field_parent;
		}
	_iter_next_5300423488:;
	}
	_iter_end_5300423488:;
	return _56517_root;
}



inline jule::Ptr<_20cb4d853_Label> _20cb4d853_ScopeChecker::_method_find_label(jule::Str _57529_ident) {
	{
		auto &expr = (*((*this)._field_scope))._field_stmts;
		auto it = expr.begin();
		_iter_begin_5300428624:;
		if (it != expr.end()) {
			jule::Any _20cb4d853_st = *it;
			{
				{
					auto &_match_expr{ _20cb4d853_st };
					
					if (_match_expr.type_is<jule::Ptr<_20cb4d853_Label>>()) {
						_case_begin_5300430272:;
						{
							jule::Ptr<_20cb4d853_Label> _57925_label = _20cb4d853_st.operator jule::Ptr<_20cb4d853_Label>();
							if ((*(_57925_label))._field_ident == _57529_ident) {
								return _57925_label;
							}
						}
					}
					_match_end_5300429936:;
				}
			}
			_iter_next_5300428624:;
			++it;
			goto _iter_begin_5300428624;
		}
		_iter_end_5300428624:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb4d853_ScopeLabel> _20cb4d853_ScopeChecker::_method_find_label_scope(jule::Str _59136_ident) {
	jule::Ptr<_20cb4d853_ScopeLabel> _59217_label = (*(this->self))._method_find_label_all(_59136_ident);
	if ((_59217_label != nullptr) && ((*(_59217_label))._field_scope == this->self)) {
		return _59217_label;
	}
	return nullptr;
}



inline jule::Ptr<_20cb4d853_ScopeLabel> _20cb4d853_ScopeChecker::_method_find_label_all(jule::Str _60333_ident) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_5300438896:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_ScopeLabel> _20cb4d853_lbl = *it;
			{
				if ((*((*(_20cb4d853_lbl))._field_label))._field_ident == _60333_ident) {
					return _20cb4d853_lbl;
				}
			}
			_iter_next_5300438896:;
			++it;
			goto _iter_begin_5300438896;
		}
		_iter_end_5300438896:;
	}
	return nullptr;
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _61538_itself,jule::Str _61555_ident) {
	jule::Ptr<_20cdc725d_Var> _61613_v = (*this)._method_find_var(_61555_ident,false);
	if ((_61613_v != nullptr) && (static_cast<jule::Uintptr>(_61613_v) != _61538_itself)) {
		if ((*(_61613_v))._field_scope == nullptr) {
			return false;
		}
		return ((*(_61613_v))._field_scope == (*this)._field_scope) || (!((*((*this)._field_s))._method_is_flag(1LL)));
	}
	jule::Ptr<_20d4a6c9e_TypeAlias> _62413_ta = (*this)._method_find_type_alias(_61555_ident,false);
	if ((_62413_ta != nullptr) && (static_cast<jule::Uintptr>(_62413_ta) != _61538_itself)) {
		if ((*(_62413_ta))._field_scope == nullptr) {
			return false;
		}
		return ((*(_62413_ta))._field_scope == (*this)._field_tree) || (!((*((*this)._field_s))._method_is_flag(1LL)));
	}
	return false;
}



inline void _20cb4d853_ScopeChecker::_method_check_var_decl(jule::Ptr<_20c476dc4_VarDecl> _63538_decl) {
	jule::Ptr<_20cdc725d_Var> _63617_v = _20caa3115_build_var(_63538_decl);
	(*(_63617_v))._field_scope=(*(this->self))._field_scope;
	__JULE_DEFER({
		(*((*(this->self))._field_table))._field_vars = jule::alloc_for_append((*((*(this->self))._field_table))._field_vars,1);(*((*(this->self))._field_table))._field_vars.push(_63617_v);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_63617_v));
	});
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_63617_v)),(*(_63617_v))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_63617_v))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_63617_v))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*((*(this->self))._field_s))._method_check_var_decl(_63617_v,this->self);
	if ((!((*(_63617_v))._method_is_type_inferred())) && (((*(_63617_v))._field_kind == nullptr) || ((*((*(_63617_v))._field_kind))._field_kind == nullptr))) {
		return;
	}
	(*((*(this->self))._field_s))._method_check_type_var(_63617_v,this->self);
}



inline void _20cb4d853_ScopeChecker::_method_check_type_alias_decl(jule::Ptr<_20c476dc4_TypeAliasDecl> _65745_decl) {
	jule::Ptr<_20d4a6c9e_TypeAlias> _65817_ta = _20caa3115_build_type_alias(_65745_decl);
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_65817_ta)),(*(_65817_ta))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_65817_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_65817_ta))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*((*(this->self))._field_s))._method_check_type_alias_decl(_65817_ta,this->self);
	(*((*(this->self))._field_table))._field_type_aliases = jule::alloc_for_append((*((*(this->self))._field_table))._field_type_aliases,1);(*((*(this->self))._field_table))._field_type_aliases.push(_65817_ta);
}



inline jule::Ptr<_20cb4d853_Scope> _20cb4d853_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_20cb4d853_Scope>(new( std::nothrow ) _20cb4d853_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _20cb4d853_ScopeChecker::_method_check_child_ssc(jule::Ptr<_20c476dc4_ScopeTree>& _67440_tree,jule::Ptr<_20cb4d853_Scope>& _67463_s,jule::Ptr<_20cb4d853_ScopeChecker>& _67479_ssc) {
	(*(_67479_ssc))._field_parent=this->self;
	(*(_67479_ssc))._method_check(_67440_tree,_67463_s);
}



inline jule::Ptr<_20cb4d853_Scope> _20cb4d853_ScopeChecker::_method_check_child_sc(jule::Ptr<_20c476dc4_ScopeTree>& _67939_tree,jule::Ptr<_20cb4d853_ScopeChecker>& _67962_ssc) {
	jule::Ptr<_20cb4d853_Scope> _68017_s = (*(this->self))._method_get_child();
	(*(this->self))._method_check_child_ssc(_67939_tree,_68017_s,_67962_ssc);
	return _68017_s;
}



inline jule::Ptr<_20cb4d853_Scope> _20cb4d853_ScopeChecker::_method_check_child(jule::Ptr<_20c476dc4_ScopeTree>& _68536_tree) {
	jule::Ptr<_20cb4d853_ScopeChecker> _68617_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_child_sc(_68536_tree,_68617_ssc);
}



inline void _20cb4d853_ScopeChecker::_method_check_anon_scope(jule::Ptr<_20c476dc4_ScopeTree> _69040_tree) {
	jule::Ptr<_20cb4d853_Scope> _69117_s = (*(this->self))._method_check_child(_69040_tree);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_69117_s));
}



inline void _20cb4d853_ScopeChecker::_method_process_error_call(jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>& _69543_m,_20c47803a_Token _69574_err) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err(_69574_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20cb4d853_ScopeChecker> _70017_root = (*(this->self))._method_get_root();
	if ((!((*((*((*(_70017_root))._field_owner))._field_decl))._field_exceptional))) {
		(*((*(this->self))._field_s))._method_push_err(_69574_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	}
	(*(_69543_m))._field_func=(*(_70017_root))._field_owner;
}



inline void _20cb4d853_ScopeChecker::_method_check_expr(jule::Ptr<_20c476dc4_Expr> _70834_expr) {
	jule::Ptr<_20d162d45_Eval> _70917_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_70917_eval))._field_ignored=true;
	jule::Ptr<_20d162d45_Data> _71117_d = (*(_70917_eval))._method_eval_expr(_70834_expr);
	if (_71117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_71117_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>>()) {
			_case_begin_5300534240:;
			{
				jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel> _71821_m = (*(_71117_d))._field_model.operator jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>();
				(*(this->self))._method_process_error_call(_71821_m,(*(_70834_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_71117_d));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_FreeExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_FnCallExprModel>>()) {
			_case_begin_5300534896:;
			{
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_71117_d));
			}
		}
		else {
			_case_begin_5300533792:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_70834_expr))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5300533712:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_co_expr(jule::Ptr<_20c476dc4_CoExpr> _73837_expr) {
	jule::Ptr<_20d162d45_Eval> _73917_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_73917_eval))._field_ignored=true;
	jule::Ptr<_20d162d45_Data> _74117_d = (*(_73917_eval))._method_eval_expr((*(_73837_expr))._field_expr);
	if (_74117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_74117_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_FnCallExprModel>>()) {
			_case_begin_5300573824:;
			{
				jule::Ptr<_20ccedeed_FnCallExprModel> _74821_model = (*(_74117_d))._field_model.operator jule::Ptr<_20ccedeed_FnCallExprModel>();
				if ((*((*((*(_74821_model))._field_func))._field_decl))._field_exceptional) {
					(*((*(this->self))._field_s))._method_push_err((*(_73837_expr))._field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				}
				(*(_74821_model))._field_is_co=true;
				(*(_73917_eval))._method_check_fn_of_concurrent_call((*(_74821_model))._field_func,(*((*(_73837_expr))._field_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_74117_d));
			}
		}
		else {
			_case_begin_5300570976:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_73837_expr))._field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5300570288:;
	}
}



inline jule::Ptr<_20cb4d853_If> _20cb4d853_ScopeChecker::_method_check_if(jule::Ptr<_20c476dc4_If> _76432_i) {
	jule::Ptr<_20cb4d853_Scope> _76517_s = (*(this->self))._method_check_child((*(_76432_i))._field_scope);
	jule::Ptr<_20d162d45_Data> _76717_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_76432_i))._field_expr);
	if (_76717_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_Prim> _77217_prim = (*((*(_76717_d))._field_kind))._method_prim();
	if ((_77217_prim == nullptr) || (!((*(_77217_prim))._method_is_bool()))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_76432_i))._field_expr))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20cb4d853_If>(new( std::nothrow ) _20cb4d853_If((*(_76717_d))._field_model,_76517_s));
}



inline jule::Ptr<_20cb4d853_Else> _20cb4d853_ScopeChecker::_method_check_else(jule::Ptr<_20c476dc4_Else> _78434_e) {
	return jule::new_struct<_20cb4d853_Else>(new( std::nothrow ) _20cb4d853_Else((*(this->self))._method_check_child((*(_78434_e))._field_scope)));
}



inline void _20cb4d853_ScopeChecker::_method_check_conditional(jule::Ptr<_20c476dc4_Conditional> _79041_conditional) {
	jule::Ptr<_20cb4d853_Conditional> _79117_c = jule::new_struct<_20cb4d853_Conditional>(new( std::nothrow ) _20cb4d853_Conditional());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_79117_c));
	(*(_79117_c))._field_elifs=jule::Slice<jule::Ptr<_20cb4d853_If>>::alloc(0LL,static_cast<jule::I64>((*(_79041_conditional))._field_tail.len() + 1LL));
	(*(_79117_c))._field_elifs = jule::alloc_for_append((*(_79117_c))._field_elifs,1);(*(_79117_c))._field_elifs.push((*(this->self))._method_check_if((*(_79041_conditional))._field_head));
	{
		auto &expr = (*(_79041_conditional))._field_tail;
		auto it = expr.begin();
		_iter_begin_5300607024:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_If> _20cb4d853_elif = *it;
			{
				(*(_79117_c))._field_elifs = jule::alloc_for_append((*(_79117_c))._field_elifs,1);(*(_79117_c))._field_elifs.push((*(this->self))._method_check_if(_20cb4d853_elif));
			}
			_iter_next_5300607024:;
			++it;
			goto _iter_begin_5300607024;
		}
		_iter_end_5300607024:;
	}
	if ((*(_79041_conditional))._field_default != nullptr) {
		(*(_79117_c))._field_default=(*(this->self))._method_check_else((*(_79041_conditional))._field_default);
	}
}



inline jule::Ptr<_20cb4d853_Scope> _20cb4d853_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _80639_it,jule::Ptr<_20c476dc4_ScopeTree> _80656_tree,jule::Ptr<_20cb4d853_ScopeChecker> _80678_ssc) {
	(*(_80678_ssc))._field_it=_80639_it;
	return (*(this->self))._method_check_child_sc(_80656_tree,_80678_ssc);
}



inline jule::Ptr<_20cb4d853_Scope> _20cb4d853_ScopeChecker::_method_check_iter_scope(jule::Uintptr _81136_it,jule::Ptr<_20c476dc4_ScopeTree>& _81154_tree) {
	jule::Ptr<_20cb4d853_ScopeChecker> _81217_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_iter_scope_sc(_81136_it,_81154_tree,_81217_ssc);
}



inline void _20cb4d853_ScopeChecker::_method_check_inf_iter(jule::Ptr<_20c476dc4_Iter>& _81639_it) {
	jule::Ptr<_20cb4d853_InfIter> _81717_kind = jule::new_struct<_20cb4d853_InfIter>(new( std::nothrow ) _20cb4d853_InfIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_81717_kind));
	(*(_81717_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_81717_kind)),(*(_81639_it))._field_scope);
}



inline void _20cb4d853_ScopeChecker::_method_check_while_iter(jule::Ptr<_20c476dc4_Iter>& _82441_it) {
	jule::Ptr<_20c476dc4_WhileKind> _82517_wh = (*(_82441_it))._field_kind.operator jule::Ptr<_20c476dc4_WhileKind>();
	if (((*(_82517_wh))._field_expr == nullptr) && ((*(_82517_wh))._field_next == nullptr)) {
		(*(this->self))._method_check_inf_iter(_82441_it);
		return;
	}
	jule::Ptr<_20cb4d853_WhileIter> _83117_kind = jule::new_struct<_20cb4d853_WhileIter>(new( std::nothrow ) _20cb4d853_WhileIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_83117_kind));
	(*(_83117_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_83117_kind)),(*(_82441_it))._field_scope);
	if ((*(_82517_wh))._field_expr != nullptr) {
		jule::Ptr<_20d162d45_Data> _83821_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_82517_wh))._field_expr);
		if (_83821_d == nullptr) {
			return;
		}
		jule::Ptr<_20d4a6c9e_Prim> _84317_prim = (*((*(_83821_d))._field_kind))._method_prim();
		if (_84317_prim == nullptr) {
			(*((*(this->self))._field_s))._method_push_err((*(_82441_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		if ((!((*(_84317_prim))._method_is_bool()))) {
			(*((*(this->self))._field_s))._method_push_err((*(_82441_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		(*(_83117_kind))._field_expr=(*(_83821_d))._field_model;
	}
	if ((*(_82517_wh))._method_is_while_next()) {
		if ((!(_20cb4d853_is_valid_ast_st_for_next_st((*(_82517_wh))._field_next)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_82517_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;
		}
		jule::I64 _86317_n = (*((*(this->self))._field_scope))._field_stmts.len();
		(*(this->self))._method_check_node((*(_82517_wh))._field_next);
		if (_86317_n < (*((*(this->self))._field_scope))._field_stmts.len()) {
			jule::Any _86625_st = (*((*(this->self))._field_scope))._field_stmts[_86317_n];
			(*((*(this->self))._field_scope))._field_stmts=(*((*(this->self))._field_scope))._field_stmts.slice(0LL,_86317_n);
			if ((!(_20cb4d853_is_valid_st_for_next_st(_86625_st)))) {
				(*((*(this->self))._field_s))._method_push_err((*(_82517_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			}
			(*(_83117_kind))._field_next=_86625_st;
		}
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_range_iter(jule::Ptr<_20c476dc4_Iter>& _87741_it) {
	jule::Ptr<_20c476dc4_RangeKind> _87817_rang = (*(_87741_it))._field_kind.operator jule::Ptr<_20c476dc4_RangeKind>();
	jule::Ptr<_20d162d45_Data> _88017_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_87817_rang))._field_expr);
	if (_88017_d == nullptr) {
		return;
	}
	jule::Ptr<_20cb4d853_RangeIter> _88517_kind = jule::new_struct<_20cb4d853_RangeIter>(new( std::nothrow ) _20cb4d853_RangeIter(_88017_d,jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20cdc725d_Var>(),jule::Ptr<_20cdc725d_Var>()));
	_20d058ca2_RangeChecker _88917_rc = _20d058ca2_RangeChecker(this->self,_87817_rang,_88517_kind,_88017_d);
	jule::Bool _89513_ok = _88917_rc._method_check();
	if ((!(_89513_ok))) {
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_88517_kind));
	jule::Ptr<_20cb4d853_ScopeChecker> _90217_ssc = (*(this->self))._method_new_child_checker();
	if ((*(_88517_kind))._field_key_a != nullptr) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(1LL))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_88517_kind))._field_key_a))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_88517_kind))._field_key_a))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_88517_kind))._field_key_a))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_90217_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_90217_ssc))._field_table))._field_vars,1);(*((*(_90217_ssc))._field_table))._field_vars.push((*(_88517_kind))._field_key_a);
	}
	if ((*(_88517_kind))._field_key_b != nullptr) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(1LL))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_88517_kind))._field_key_b))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_88517_kind))._field_key_b))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_88517_kind))._field_key_b))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_90217_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_90217_ssc))._field_table))._field_vars,1);(*((*(_90217_ssc))._field_table))._field_vars.push((*(_88517_kind))._field_key_b);
	}
	(*(_88517_kind))._field_scope=(*(this->self))._method_check_iter_scope_sc(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_88517_kind)),(*(_87741_it))._field_scope,_90217_ssc);
}



inline void _20cb4d853_ScopeChecker::_method_check_iter(jule::Ptr<_20c476dc4_Iter> _92334_it) {
	if ((*(_92334_it))._method_is_inf()) {
		(*(this->self))._method_check_inf_iter(_92334_it);
		return;
	}
	{
		auto &_match_expr{ (*(_92334_it))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_WhileKind>>()) {
			_case_begin_5300718400:;
			{
				(*(this->self))._method_check_while_iter(_92334_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_RangeKind>>()) {
			_case_begin_5300720576:;
			{
				(*(this->self))._method_check_range_iter(_92334_it);
			}
		}
		else {
			_case_begin_5300720272:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_5300720112:;
	}
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _93642_it) {
	jule::Ptr<_20cb4d853_ScopeChecker> _93717_scope = this->self;
	_julec_label_iter:;
	if ((*(_93717_scope))._field_it == _93642_it) {
		return true;
	}
	if ((*(_93717_scope))._field_parent != nullptr) {
		_93717_scope=(*(_93717_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _95243_ptr) {
	jule::Ptr<_20cb4d853_ScopeChecker> _95317_scope = this->self;
	_julec_label_iter:;
	if ((*(_95317_scope))._field_it == _95243_ptr) {
		return true;
	}
	if ((*(_95317_scope))._field_cse != 0LL) {
		jule::Uintptr _96117_mtch = static_cast<jule::Uintptr>((*(((_20cb4d853_Case*)((*(_95317_scope))._field_cse))))._field_owner);
		if (_96117_mtch == _95243_ptr) {
			return true;
		}
	}
	if ((*(_95317_scope))._field_parent != nullptr) {
		_95317_scope=(*(_95317_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_20cb4d853_ContSt> _20cb4d853_ScopeChecker::_method_check_cont_valid_scope(jule::Ptr<_20c476dc4_ContSt> _97542_c) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_97542_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_97542_c))._field_label._field_id != 0LLU) {
		return jule::new_struct<_20cb4d853_ContSt>(new( std::nothrow ) _20cb4d853_ContSt());
	}
	jule::Ptr<_20cb4d853_ScopeChecker> _98517_scope = this->self;
	_julec_label_iter:;
	{
		
		if ((((*(_98517_scope))._field_it == 0LL) && ((*(_98517_scope))._field_parent != nullptr)) && ((*(_98517_scope))._field_owner == nullptr)) {
			_case_begin_5300750384:;
			{
				_98517_scope=(*(_98517_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((*(_98517_scope))._field_it != 0LL) {
			_case_begin_5300750496:;
			{
				return jule::new_struct<_20cb4d853_ContSt>(new( std::nothrow ) _20cb4d853_ContSt((*(_98517_scope))._field_it));
			}
		}
		_match_end_5300750224:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_97542_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _20cb4d853_ScopeChecker::_method_check_cont(jule::Ptr<_20c476dc4_ContSt> _100030_c) {
	jule::Ptr<_20cb4d853_ContSt> _100117_cont = (*(this->self))._method_check_cont_valid_scope(_100030_c);
	if (_100117_cont == nullptr) {
		return;
	}
	if ((*(_100030_c))._field_label._field_id != 0LLU) {
		jule::Ptr<_20cb4d853_ScopeLabel> _100721_label = _20cb4d853_find_label_parent((*(_100030_c))._field_label._field_kind,(*(this->self))._field_parent);
		if (_100721_label == nullptr) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
			return;
		}
		(*(_100721_label))._field_used=true;
		if (((*(_100721_label))._field_pos + 1LL) >= (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts.len()) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
			return;
		}
		jule::Int _102017_i = (*(_100721_label))._field_pos + 1LL;
		if (_102017_i >= (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts.len()) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _102425_st = (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts[_102017_i];
			{
				auto &_match_expr{ _102425_st };
				
				if (_match_expr.type_is<jule::Ptr<_20cb4d853_InfIter>>()) {
					_case_begin_5300778768:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_20cb4d853_InfIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RangeIter>>()) {
					_case_begin_5300781936:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_20cb4d853_RangeIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_20cb4d853_WhileIter>>()) {
					_case_begin_5300782032:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_20cb4d853_WhileIter>()));
					}
				}
				else {
					_case_begin_5300781536:;
					{
						(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
					}
				}
				_match_end_5300781456:;
			}
		}
	}
	if ((*(_100117_cont))._field_it != 0LL) {
		if ((!((*(this->self))._method_check_valid_cont_label((*(_100117_cont))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_100117_cont));
}



inline void _20cb4d853_ScopeChecker::_method_check_label(jule::Ptr<_20c476dc4_LabelSt> _104335_l) {
	if ((*(this->self))._method_find_label((*(_104335_l))._field_ident) != nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_104335_l))._field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any((*(_104335_l))._field_ident)}));
		return;
	}
	jule::Ptr<_20cb4d853_Label> _104917_label = jule::new_struct<_20cb4d853_Label>(new( std::nothrow ) _20cb4d853_Label((*(_104335_l))._field_ident));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_104917_label));
	(*((*(this->self))._field_labels))=jule::append((*((*(this->self))._field_labels)),jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>({jule::new_struct<_20cb4d853_ScopeLabel>(new( std::nothrow ) _20cb4d853_ScopeLabel((*(_104335_l))._field_token,_104917_label,static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len() - 1LL),this->self,jule::Bool()))}));
}



inline void _20cb4d853_ScopeChecker::_method_push_goto(jule::Ptr<_20c476dc4_GotoSt> _106233_gt) {
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_20cb4d853_GotoSt>(new( std::nothrow ) _20cb4d853_GotoSt((*(_106233_gt))._field_label._field_kind))));
	(*((*(this->self))._field_gotos))=jule::append((*((*(this->self))._field_gotos)),jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>({jule::new_struct<_20cb4d853_ScopeGoto>(new( std::nothrow ) _20cb4d853_ScopeGoto(_106233_gt,this->self,static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len() - 1LL)))}));
}



inline void _20cb4d853_ScopeChecker::_method_check_postfix(jule::Ptr<_20c476dc4_AssignSt> _107437_a) {
	if ((*(_107437_a))._field_left.len() > 1LL) {
		(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20c476dc4_Expr> _108017_expr = (*((*(_107437_a))._field_left[0LL]))._field_expr;
	jule::Ptr<_20d162d45_Data> _108117_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_108017_expr);
	if (_108117_d == nullptr) {
		return;
	}
	_20cb4d853_check_assign((*(this->self))._field_s,_108117_d,nullptr,(*(_107437_a))._field_setter);
	if ((*((*(_108117_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_20d4a6c9e_Ptr> _108921_ptr = (*((*(_108117_d))._field_kind))._method_ptr();
		if ((*(_108921_ptr))._method_is_unsafe()) {
			(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_107437_a))._field_setter._field_kind),jule::Any((*((*(_108117_d))._field_kind))._method_to_str())}));
			return;
		}
	} else {
		if (((*((*(_108117_d))._field_kind))._method_prim() == nullptr) || (!(_20d853821_is_num((*((*((*(_108117_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_107437_a))._field_setter._field_kind),jule::Any((*((*(_108117_d))._field_kind))._method_to_str())}));
			return;
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_20cb4d853_Postfix>(new( std::nothrow ) _20cb4d853_Postfix((*(_108117_d))._field_model,(*(_107437_a))._field_setter._field_kind))));
}



inline jule::Bool _20cb4d853_ScopeChecker::_method_is_new_assign_ident(jule::Str _110738_ident) {
	if (_20c47803a_is_ignore_ident(_110738_ident) || (_110738_ident == jule::Str())) {
		return false;
	}
	return (*((*this)._field_table))._method_def_by_ident(_110738_ident,false) == nullptr;
}



inline void _20cb4d853_ScopeChecker::_method_check_single_assign(jule::Ptr<_20c476dc4_AssignSt>& _111544_a) {
	jule::Ptr<_20d162d45_Data> _111617_l = nullptr;
	if ((!(_20c47803a_is_ignore_ident((*((*(_111544_a))._field_left[0LL]))._field_ident)))) {
		jule::Ptr<_20c476dc4_Expr> _111921_expr = (*((*(_111544_a))._field_left[0LL]))._field_expr;
		_111617_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_111921_expr);
		if (_111617_l == nullptr) {
			return;
		}
	}
	jule::Ptr<_20d162d45_Eval> _112617_eval = (((_111617_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_111617_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
	jule::Ptr<_20d162d45_Data> _113117_r = (*(_112617_eval))._method_eval_expr((*(_111544_a))._field_right);
	if (_113117_r == nullptr) {
		return;
	}
	if (_111617_l == nullptr) {
		if ((*((*(_113117_r))._field_kind))._method_void()) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_111544_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_113117_r));
		return;
	}
	if ((!(_20cb4d853_check_assign((*(this->self))._field_s,_111617_l,_113117_r,(*(_111544_a))._field_setter)))) {
		return;
	}
	if ((*((*(_113117_r))._field_kind))._method_tup() != nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_111544_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_20cb4d853_Assign>(new( std::nothrow ) _20cb4d853_Assign((*(_111617_l))._field_model,(*(_113117_r))._field_model,(*(_111544_a))._field_setter))));
	if ((*(_111544_a))._field_setter._field_kind != jule::Str("=", 1)) {
		(*(_111544_a))._field_setter._field_kind=(*(_111544_a))._field_setter._field_kind.slice(0LL,(*(_111544_a))._field_setter._field_kind.len() - 1LL);
		_20d162d45_BinaryEval _116321_solver = _20d162d45_BinaryEval::_static_method_new(jule::new_struct_ptr<_20d162d45_Eval>(new( std::nothrow ) _20d162d45_Eval((*(this->self))._field_s,this->self,jule::Ptr<_20d4a6c9e_TypeKind>(),(*(this->self))._method_is_unsafe(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20cdc725d_Var>(),jule::Ptr<_20c496047_FieldIns>())),(*(_111544_a))._field_setter);
		_113117_r=_116321_solver._method_solve_explicit(_111617_l,_113117_r);
		if (_113117_r == nullptr) {
			return;
		}
		(*(_111544_a))._field_setter._field_kind+=jule::Str("=", 1);
		return;
	}
	_20d058ca2_AssignTypeChecker _117717_checker = _20d058ca2_AssignTypeChecker((*(this->self))._field_s,(*(_111617_l))._field_kind,_113117_r,(*(_111544_a))._field_setter);
	_117717_checker._method_check();
}



inline void _20cb4d853_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ptr<_20cb4d853_MultiAssign> _118657_st,jule::Ptr<_20c476dc4_AssignSt> _118713_a,jule::Ptr<_20c476dc4_AssignLeft> _118731_lexpr,jule::Ptr<_20d162d45_Data> _118755_l,jule::Ptr<_20d162d45_Data> _118769_r) {
	if (_20c47803a_is_ignore_ident((*(_118731_lexpr))._field_ident)) {
		if ((*((*(_118769_r))._field_kind))._method_void()) {
			(*((*this)._field_s))._method_push_err((*((*(_118713_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*(_118657_st))._field_l = jule::alloc_for_append((*(_118657_st))._field_l,1);(*(_118657_st))._field_l.push(jule::Any(nullptr));
		return;
	}
	if ((*(_118713_a))._field_declarative && (*this)._method_is_new_assign_ident((*(_118731_lexpr))._field_ident)) {
		jule::Ptr<_20cdc725d_Var> _119921_v = jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var((*this)._field_scope,(*(_118731_lexpr))._field_token,(*(_118731_lexpr))._field_ident,jule::Bool(),jule::Bool(),(*(_118731_lexpr))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),(*(_118731_lexpr))._field_reference,jule::Str(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value((*(_118713_a))._field_right,_118769_r)),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>()));
		(*((*this)._field_s))._method_check_var(_119921_v);
		(*(_118657_st))._field_l = jule::alloc_for_append((*(_118657_st))._field_l,1);(*(_118657_st))._field_l.push(jule::Any(_119921_v));
		(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.push(_119921_v);
		(*((*this)._field_scope))._field_stmts = jule::alloc_for_append((*((*this)._field_scope))._field_stmts,1);(*((*this)._field_scope))._field_stmts.push(jule::Any(_119921_v));
		return;
	}
	if ((*(_118731_lexpr))._field_mutable || (*(_118731_lexpr))._field_reference) {
		(*((*this)._field_s))._method_push_err((*(_118731_lexpr))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_118731_lexpr))._field_ident)}));
		(*((*this)._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((!(_20cb4d853_check_assign((*this)._field_s,_118755_l,_118769_r,(*(_118713_a))._field_setter)))) {
		return;
	}
	
	(*((*this)._field_s))._method_check_validity_for_init_expr((*(_118755_l))._field_mutable,false,(*(_118755_l))._field_kind,_118769_r,(*(_118713_a))._field_setter);
	_20d058ca2_AssignTypeChecker _123417_checker = _20d058ca2_AssignTypeChecker((*this)._field_s,(*(_118755_l))._field_kind,_118769_r,(*(_118713_a))._field_setter);
	_123417_checker._method_check();
	(*(_118657_st))._field_l = jule::alloc_for_append((*(_118657_st))._field_l,1);(*(_118657_st))._field_l.push((*(_118755_l))._field_model);
}



inline void _20cb4d853_ScopeChecker::_method_check_ret_multi_assign(jule::Ptr<_20c476dc4_AssignSt>& _124547_a) {
	jule::Ptr<_20d162d45_Data> _124617_rd = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_124547_a))._field_right);
	if (_124617_rd == nullptr) {
		return;
	}
	jule::Slice<jule::Ptr<_20d162d45_Data>> _125117_r = _20cb4d853_get_datas_from_tuple_data(_124617_rd);
	{
		
		if ((*(_124547_a))._field_left.len() > _125117_r.len()) {
			_case_begin_5300941104:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_124547_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_124547_a))._field_left.len() < _125117_r.len()) {
			_case_begin_5300941216:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_124547_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5300940944:;
	}
	jule::Ptr<_20cb4d853_MultiAssign> _126317_st = jule::new_struct<_20cb4d853_MultiAssign>(new( std::nothrow ) _20cb4d853_MultiAssign(jule::Slice<jule::Any>(),(*(_124617_rd))._field_model));
	if ((*((*(_124617_rd))._field_kind))._method_tup() == nullptr) {
		(*(_126317_st))._field_r=jule::Any(jule::new_struct<_20ccedeed_TupleExprModel>(new( std::nothrow ) _20ccedeed_TupleExprModel(_125117_r)));
	}
	{
		auto &expr = (*(_124547_a))._field_left;
		auto it = expr.begin();
		_iter_begin_5300952032:;
		if (it != expr.end()) {
			jule::Int _20cb4d853_i = it - expr.begin();
			{
				jule::Ptr<_20c476dc4_AssignLeft> _127221_lexpr = (*(_124547_a))._field_left[_20cb4d853_i];
				jule::Ptr<_20d162d45_Data> _127321_l = nullptr;
				if ((!(_20c47803a_is_ignore_ident((*(_127221_lexpr))._field_ident))) && ((!((*(_124547_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_127221_lexpr))._field_ident))))) {
					_127321_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_127221_lexpr))._field_expr);
					if (_127321_l == nullptr) {
						goto _iter_next_5300952032;
					}
				}
				(*(this->self))._method___process_end_part_of_multi_assign(_126317_st,_124547_a,_127221_lexpr,_127321_l,_125117_r[_20cb4d853_i]);
			}
			_iter_next_5300952032:;
			++it;
			_20cb4d853_i++;
			goto _iter_begin_5300952032;
		}
		_iter_end_5300952032:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_126317_st));
}



inline void _20cb4d853_ScopeChecker::_method_check_multi_assign(jule::Ptr<_20c476dc4_AssignSt>& _128943_a) {
	{
		auto &_match_expr{ (*((*(_128943_a))._field_right))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnCallExpr>>()) {
			_case_begin_5300967456:;
			{
				(*(this->self))._method_check_ret_multi_assign(_128943_a);
				return;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_UnsafeExpr>>()) {
			_case_begin_5300967552:;
			{
				{
					auto &_match_expr{ (*((*((*(_128943_a))._field_right))._field_kind.operator jule::Ptr<_20c476dc4_UnsafeExpr>()))._field_expr };
					
					if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnCallExpr>>()) {
						_case_begin_5300972032:;
						{
							(*(this->self))._method_check_ret_multi_assign(_128943_a);
							return;
						}
					}
					_match_end_5300971936:;
				}
			}
		}
		_match_end_5300967328:;
	}
	jule::Slice<jule::Any> _130317_right = _20cb4d853_get_expr_models((*((*(_128943_a))._field_right))._field_kind);
	{
		
		if ((*(_128943_a))._field_left.len() > _130317_right.len()) {
			_case_begin_5300975280:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_128943_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_128943_a))._field_left.len() < _130317_right.len()) {
			_case_begin_5300975376:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_128943_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5300975088:;
	}
	jule::Ptr<_20ccedeed_TupleExprModel> _131517_right_tuple = jule::new_struct<_20ccedeed_TupleExprModel>(new( std::nothrow ) _20ccedeed_TupleExprModel());
	jule::Ptr<_20cb4d853_MultiAssign> _131717_st = jule::new_struct<_20cb4d853_MultiAssign>(new( std::nothrow ) _20cb4d853_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_131517_right_tuple)));
	{
		auto &expr = (*(_128943_a))._field_left;
		auto it = expr.begin();
		_iter_begin_5300984672:;
		if (it != expr.end()) {
			jule::Int _20cb4d853_i = it - expr.begin();
			{
				jule::Ptr<_20c476dc4_AssignLeft> _132221_lexpr = (*(_128943_a))._field_left[_20cb4d853_i];
				jule::Ptr<_20d162d45_Data> _132321_l = nullptr;
				if ((!(_20c47803a_is_ignore_ident((*(_132221_lexpr))._field_ident))) && ((!((*(_128943_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_132221_lexpr))._field_ident))))) {
					_132321_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_132221_lexpr))._field_expr);
					if (_132321_l == nullptr) {
						goto _iter_next_5300984672;
					}
				}
				jule::Ptr<_20c476dc4_Expr> _133321_expr = jule::new_struct<_20c476dc4_Expr>(new( std::nothrow ) _20c476dc4_Expr((*((*(_128943_a))._field_right))._field_token,_130317_right[_20cb4d853_i]));
				jule::Ptr<_20d162d45_Eval> _133421_eval = (((_132321_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_132321_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
				jule::Ptr<_20d162d45_Data> _133921_r = (*(_133421_eval))._method_eval_expr(_133321_expr);
				if (_133921_r == nullptr) {
					goto _iter_next_5300984672;
				}
				(*(_131517_right_tuple))._field_datas = jule::alloc_for_append((*(_131517_right_tuple))._field_datas,1);(*(_131517_right_tuple))._field_datas.push(_133921_r);
				(*(this->self))._method___process_end_part_of_multi_assign(_131717_st,_128943_a,_132221_lexpr,_132321_l,_133921_r);
			}
			_iter_next_5300984672:;
			++it;
			_20cb4d853_i++;
			goto _iter_begin_5300984672;
		}
		_iter_end_5300984672:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_131717_st));
}



inline void _20cb4d853_ScopeChecker::_method_check_assign_st(jule::Ptr<_20c476dc4_AssignSt> _135239_a) {
	if (_20c47803a_is_postfix_op((*(_135239_a))._field_setter._field_kind)) {
		(*(this->self))._method_check_postfix(_135239_a);
		return;
	}
	if (((*(_135239_a))._field_left.len() == 1LL) && (!((*(_135239_a))._field_declarative))) {
		(*(this->self))._method_check_single_assign(_135239_a);
		return;
	}
	(*(this->self))._method_check_multi_assign(_135239_a);
}



inline jule::Ptr<_20cb4d853_Scope> _20cb4d853_ScopeChecker::_method_check_case_scope(jule::Ptr<_20cb4d853_Case>& _136637_c,jule::Ptr<_20c476dc4_ScopeTree>& _136652_tree) {
	jule::Ptr<_20cb4d853_ScopeChecker> _136717_ssc = (*(this->self))._method_new_child_checker();
	(*(_136717_ssc))._field_cse=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_136637_c));
	return (*(this->self))._method_check_child_sc(_136652_tree,_136717_ssc);
}



inline jule::Ptr<_20cb4d853_Case> _20cb4d853_ScopeChecker::_method_check_case(jule::Ptr<_20cb4d853_Match> _137234_m,jule::Int _137245_i,jule::Ptr<_20c476dc4_Case> _137257_c,jule::Ptr<_20d162d45_Data> _137287_expr) {
	jule::Ptr<_20cb4d853_Case> _137317__case = (*(_137234_m))._field_cases[_137245_i];
	(*(_137317__case))._field_exprs=jule::Slice<jule::Ptr<_20d162d45_Data>>::alloc(0LL,static_cast<jule::I64>((*(_137257_c))._field_exprs.len()));
	jule::Bool _137517_generic_matched = false;
	{
		auto &expr = (*(_137257_c))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5301028800:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Expr> _20cb4d853_e = *it;
			{
				if ((*(_137234_m))._field_type_match) {
					jule::Ptr<_20d162d45_Eval> _137925_eval = jule::new_struct_ptr<_20d162d45_Eval>(new( std::nothrow ) _20d162d45_Eval((*(this->self))._field_s,this->self,jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20cdc725d_Var>(),jule::Ptr<_20c496047_FieldIns>()));
					jule::Ptr<_20d162d45_Data> _138425_d = (*(_137925_eval))._method_eval(_20cb4d853_e);
					if (_138425_d != nullptr) {
						(*(_137317__case))._field_exprs = jule::alloc_for_append((*(_137317__case))._field_exprs,1);(*(_137317__case))._field_exprs.push(_138425_d);
						if (_20cb4d853_count_match_type(_137234_m,(*(_138425_d))._field_kind) > 1LL) {
							(*((*(this->self))._field_s))._method_push_err((*(_20cb4d853_e))._field_token,jule::Str("duplicated case: type @ is already checked", 42),jule::Slice<jule::Any>({jule::Any((*((*(_138425_d))._field_kind))._method_to_str())}));
						}
					}
					if ((*((*(_137287_expr))._field_kind))._field_generic) {
						_137517_generic_matched=_137517_generic_matched || (*((*(_137287_expr))._field_kind))._method_equals((*(_138425_d))._field_kind);
					} else {
						jule::Ptr<_20cb471a9_Trait> _139525_trt = (*((*(_137287_expr))._field_kind))._method_trt();
						if (_139525_trt != nullptr) {
							(*((*(this->self))._field_s))._method_check_type_compatibility((*(_137287_expr))._field_kind,(*(_138425_d))._field_kind,(*(_20cb4d853_e))._field_token);
						}
					}
					goto _iter_next_5301028800;
				}
				jule::Ptr<_20d162d45_Data> _140421_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_20cb4d853_e);
				if (_140421_d == nullptr) {
					goto _iter_next_5301028800;
				}
				(*(_137317__case))._field_exprs = jule::alloc_for_append((*(_137317__case))._field_exprs,1);(*(_137317__case))._field_exprs.push(_140421_d);
				_20d058ca2_AssignTypeChecker _141121_checker = _20d058ca2_AssignTypeChecker((*(this->self))._field_s,(*(_137287_expr))._field_kind,_140421_d,(*(_20cb4d853_e))._field_token);
				_141121_checker._method_check();
			}
			_iter_next_5301028800:;
			++it;
			goto _iter_begin_5301028800;
		}
		_iter_end_5301028800:;
	}
	if (((!((*(_137234_m))._field_type_match)) || (!((*((*(_137287_expr))._field_kind))._field_generic))) || _137517_generic_matched) {
		(*(_137317__case))._field_scope=(*(this->self))._method_check_case_scope(_137317__case,(*(_137257_c))._field_scope);
	}
	return _137317__case;
}



inline void _20cb4d853_ScopeChecker::_method_check_cases(jule::Ptr<_20c476dc4_MatchCase>& _142636_m,jule::Ptr<_20cb4d853_Match> _142655_rm,jule::Ptr<_20d162d45_Data> _142671_expr) {
	(*(_142655_rm))._field_cases=jule::Slice<jule::Ptr<_20cb4d853_Case>>::alloc(static_cast<jule::I64>((*(_142636_m))._field_cases.len()));
	{
		auto &expr = (*(_142636_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5301062896:;
		if (it != expr.end()) {
			jule::Int _20cb4d853_i = it - expr.begin();
			{
				jule::Ptr<_20cb4d853_Case> _142921__case = jule::new_struct<_20cb4d853_Case>(new( std::nothrow ) _20cb4d853_Case(_142655_rm,jule::Ptr<_20cb4d853_Scope>(),jule::Slice<jule::Ptr<_20d162d45_Data>>(),jule::Ptr<_20cb4d853_Case>()));
				if (_20cb4d853_i > 0LL) {
					(*((*(_142655_rm))._field_cases[_20cb4d853_i - 1LL]))._field_next=_142921__case;
				}
				(*(_142655_rm))._field_cases[_20cb4d853_i]=_142921__case;
			}
			_iter_next_5301062896:;
			++it;
			_20cb4d853_i++;
			goto _iter_begin_5301062896;
		}
		_iter_end_5301062896:;
	}
	if (((*(_142655_rm))._field_default != nullptr) && ((*(_142636_m))._field_cases.len() > 0LL)) {
		(*((*(_142655_rm))._field_cases[(*(_142655_rm))._field_cases.len() - 1LL]))._field_next=(*(_142655_rm))._field_default;
	}
	{
		auto &expr = (*(_142636_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5301073184:;
		if (it != expr.end()) {
			jule::Int _20cb4d853_i = it - expr.begin();
			jule::Ptr<_20c476dc4_Case> _20cb4d853_c = *it;
			{
				(*(this->self))._method_check_case(_142655_rm,_20cb4d853_i,_20cb4d853_c,_142671_expr);
			}
			_iter_next_5301073184:;
			++it;
			_20cb4d853_i++;
			goto _iter_begin_5301073184;
		}
		_iter_end_5301073184:;
	}
}



inline jule::Ptr<_20cb4d853_Case> _20cb4d853_ScopeChecker::_method_check_default(jule::Ptr<_20cb4d853_Match> _144937_m,jule::Ptr<_20c476dc4_Else> _144952_d) {
	jule::Ptr<_20cb4d853_Case> _145017_def = jule::new_struct<_20cb4d853_Case>(new( std::nothrow ) _20cb4d853_Case(_144937_m,jule::Ptr<_20cb4d853_Scope>(),jule::Slice<jule::Ptr<_20d162d45_Data>>(),jule::Ptr<_20cb4d853_Case>()));
	(*(_145017_def))._field_scope=(*(this->self))._method_check_case_scope(_145017_def,(*(_144952_d))._field_scope);
	return _145017_def;
}



inline void _20cb4d853_ScopeChecker::_method_check_comptime_panic(jule::Ptr<_20cb4d853_Scope>& _145740_s,_20c47803a_Token _145751_error_token) {
	if ((*(_145740_s))._field_stmts.len() != 1LL) {
		return;
	}
	jule::Any _146213_stmt = (*(_145740_s))._field_stmts[0LL];
	{
		auto &_match_expr{ _146213_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
			_case_begin_5301087520:;
			{
				jule::Ptr<_20d162d45_Data> _146517_d = _146213_stmt.operator jule::Ptr<_20d162d45_Data>();
				{
					auto &_match_expr{ (*(_146517_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>>()) {
						_case_begin_5301090544:;
						{
							jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel> _146821_m = (*(_146517_d))._field_model.operator jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>();
							{
								auto &_match_expr{ (*(_146821_m))._field_expr };
								
								if (_match_expr.type_is<jule::Ptr<_20d78b3e6_Const>>()) {
									_case_begin_5301093856:;
									{
										jule::Ptr<_20d78b3e6_Const> _147125_c = (*(_146821_m))._field_expr.operator jule::Ptr<_20d78b3e6_Const>();
										if ((*(_147125_c))._method_is_str()) {
											(*((*this)._field_s))._method_push_err(_145751_error_token,jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>({jule::Any((*(_147125_c))._method_read_str())}));
										}
									}
								}
								_match_end_5301093776:;
							}
						}
					}
					_match_end_5301090416:;
				}
			}
		}
		_match_end_5301087440:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_push_type_match(jule::Ptr<_20cb4d853_Match> _148039_tm,jule::Ptr<_20c476dc4_MatchCase>& _148052_m) {
	if ((*((*((*(_148039_tm))._field_expr))._field_kind))._field_generic) {
		{
			auto &expr = (*(_148039_tm))._field_cases;
			auto it = expr.begin();
			_iter_begin_5301101760:;
			if (it != expr.end()) {
				jule::Int _20cb4d853_i = it - expr.begin();
				jule::Ptr<_20cb4d853_Case> _20cb4d853_c = *it;
				{
					if ((*(_20cb4d853_c))._field_scope != nullptr) {
						(*(_148039_tm))._field_cases=nullptr;
						(*(_148039_tm))._field_default=_20cb4d853_c;
						(*(this->self))._method_check_comptime_panic((*(_20cb4d853_c))._field_scope,(*((*(_148052_m))._field_cases[_20cb4d853_i]))._field_token);
						goto _julec_label_push;
					}
				}
				_iter_next_5301101760:;
				++it;
				_20cb4d853_i++;
				goto _iter_begin_5301101760;
			}
			_iter_end_5301101760:;
		}
		if ((*(_148039_tm))._field_default != nullptr) {
			(*(this->self))._method_check_comptime_panic((*((*(_148039_tm))._field_default))._field_scope,(*((*(_148052_m))._field_default))._field_token);
		}
		(*(_148039_tm))._field_cases=nullptr;
	}
	_julec_label_push:;
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_148039_tm));
}



inline void _20cb4d853_ScopeChecker::_method_check_type_match(jule::Ptr<_20c476dc4_MatchCase>& _150241_m) {
	jule::Ptr<_20d162d45_Data> _150317_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval((*(_150241_m))._field_expr);
	if (_150317_d == nullptr) {
		return;
	}
	if ((!((*((*(_150317_d))._field_kind))._field_generic)) && (!((((*((*(_150317_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_150317_d))._field_kind))._method_prim()))._method_is_any()) || ((*((*(_150317_d))._field_kind))._method_trt() != nullptr)))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_150241_m))._field_expr))._field_token,jule::Str("type-match must be have <any>, <trait> or <generic> typed expression", 68),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20cb4d853_Match> _151417_tm = jule::new_struct<_20cb4d853_Match>(new( std::nothrow ) _20cb4d853_Match(_150317_d,true,jule::Slice<jule::Ptr<_20cb4d853_Case>>(),jule::Ptr<_20cb4d853_Case>()));
	if ((*(_150241_m))._field_default != nullptr) {
		(*(_151417_tm))._field_default=(*(this->self))._method_check_default(_151417_tm,(*(_150241_m))._field_default);
	}
	(*(this->self))._method_check_cases(_150241_m,_151417_tm,_150317_d);
	(*(this->self))._method_push_type_match(_151417_tm,_150241_m);
}



inline void _20cb4d853_ScopeChecker::_method_check_common_match(jule::Ptr<_20c476dc4_MatchCase>& _152743_m) {
	jule::Ptr<_20d162d45_Data> _152817_d = nullptr;
	if ((*(_152743_m))._field_expr == nullptr) {
		_152817_d=jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_20d78b3e6_Const::_static_method_new_bool(true)));
		(*(_152817_d))._field_model=jule::Any((*(_152817_d))._field_constant);
	} else {
		_152817_d=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_152743_m))._field_expr);
		if (_152817_d == nullptr) {
			return;
		}
	}
	jule::Ptr<_20cb4d853_Match> _154217_mc = jule::new_struct<_20cb4d853_Match>(new( std::nothrow ) _20cb4d853_Match(_152817_d,jule::Bool(),jule::Slice<jule::Ptr<_20cb4d853_Case>>(),jule::Ptr<_20cb4d853_Case>()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_154217_mc));
	if ((*(_152743_m))._field_default != nullptr) {
		(*(_154217_mc))._field_default=(*(this->self))._method_check_default(_154217_mc,(*(_152743_m))._field_default);
	}
	(*(this->self))._method_check_cases(_152743_m,_154217_mc,_152817_d);
}



inline void _20cb4d853_ScopeChecker::_method_check_match(jule::Ptr<_20c476dc4_MatchCase> _155435_m) {
	if ((*(_155435_m))._field_type_match) {
		(*(this->self))._method_check_type_match(_155435_m);
		return;
	}
	(*(this->self))._method_check_common_match(_155435_m);
}



inline void _20cb4d853_ScopeChecker::_method_check_fall(jule::Ptr<_20c476dc4_FallSt> _156230_f) {
	if ((((*(this->self))._field_cse == 0LL) || (((*((*(this->self))._field_scope))._field_stmts.len() + 1LL) < (*((*(this->self))._field_scope))._field_stmts.len())) || (*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_156230_f))._field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;
	}
	_20cb4d853_Case* _157017__case = ((_20cb4d853_Case*)((*(this->self))._field_cse));
	if ((*(_157017__case))._field_next == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_156230_f))._field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_20cb4d853_FallSt>(new( std::nothrow ) _20cb4d853_FallSt(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>((*(_157017__case))._field_next)))))));
}



inline jule::Ptr<_20cb4d853_BreakSt> _20cb4d853_ScopeChecker::_method_check_break_with_label(jule::Ptr<_20c476dc4_BreakSt> _158242_b) {
	jule::Ptr<_20cb4d853_BreakSt> _158317_brk = (*(this->self))._method_check_plain_break(_158242_b);
	if (_158317_brk == nullptr) {
		return nullptr;
	}
	(*(_158317_brk))._field_it=0LL;
	(*(_158317_brk))._field_mtch=0LL;
	jule::Ptr<_20cb4d853_ScopeLabel> _159317_label = _20cb4d853_find_label_parent((*(_158242_b))._field_label._field_kind,(*(this->self))._field_parent);
	if (_159317_label == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_158242_b))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_158242_b))._field_label._field_kind)}));
		return nullptr;
	}
	(*(_159317_label))._field_used=true;
	if (((*(_159317_label))._field_pos + 1LL) >= (*((*((*(_159317_label))._field_scope))._field_scope))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_158242_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158242_b))._field_label._field_kind)}));
		return nullptr;
	}
	jule::Int _160613_i = (*(_159317_label))._field_pos + 1LL;
	if (_160613_i >= (*((*((*(_159317_label))._field_scope))._field_scope))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_158242_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158242_b))._field_label._field_kind)}));
	} else {
		jule::Any _161021_st = (*((*((*(_159317_label))._field_scope))._field_scope))._field_stmts[_160613_i];
		{
			auto &_match_expr{ _161021_st };
			
			if (_match_expr.type_is<jule::Ptr<_20cb4d853_InfIter>>()) {
				_case_begin_5301195536:;
				{
					(*(_158317_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161021_st.operator jule::Ptr<_20cb4d853_InfIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RangeIter>>()) {
				_case_begin_5301198656:;
				{
					(*(_158317_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161021_st.operator jule::Ptr<_20cb4d853_RangeIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_20cb4d853_WhileIter>>()) {
				_case_begin_5301198752:;
				{
					(*(_158317_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161021_st.operator jule::Ptr<_20cb4d853_WhileIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Match>>()) {
				_case_begin_5301198848:;
				{
					(*(_158317_brk))._field_mtch=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161021_st.operator jule::Ptr<_20cb4d853_Match>()));
				}
			}
			else {
				_case_begin_5301198256:;
				{
					(*((*(this->self))._field_s))._method_push_err((*(_158242_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158242_b))._field_label._field_kind)}));
				}
			}
			_match_end_5301198176:;
		}
	}
	if ((*(_158317_brk))._field_it != 0LL) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_158317_brk))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_158242_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158242_b))._field_label._field_kind)}));
		}
	}
	if ((*(_158317_brk))._field_mtch != 0LL) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_158317_brk))._field_mtch)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_158242_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158242_b))._field_label._field_kind)}));
		}
	}
	return _158317_brk;
}



inline jule::Ptr<_20cb4d853_BreakSt> _20cb4d853_ScopeChecker::_method_check_plain_break(jule::Ptr<_20c476dc4_BreakSt> _163537_b) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_163537_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20cb4d853_ScopeChecker> _164117_scope = this->self;
	_julec_label_iter:;
	{
		
		if (((((*(_164117_scope))._field_it == 0LL) && ((*(_164117_scope))._field_cse == 0LL)) && ((*(_164117_scope))._field_parent != nullptr)) && ((*(_164117_scope))._field_owner == nullptr)) {
			_case_begin_5301223072:;
			{
				_164117_scope=(*(_164117_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((*(_164117_scope))._field_it != 0LL) {
			_case_begin_5301223184:;
			{
				return jule::new_struct<_20cb4d853_BreakSt>(new( std::nothrow ) _20cb4d853_BreakSt((*(_164117_scope))._field_it,jule::Uintptr()));
			}
		}
		else if ((*(_164117_scope))._field_cse != 0LL) {
			_case_begin_5301223296:;
			{
				return jule::new_struct<_20cb4d853_BreakSt>(new( std::nothrow ) _20cb4d853_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>((*(((_20cb4d853_Case*)((*(_164117_scope))._field_cse))))._field_owner)))));
			}
		}
		_match_end_5301222896:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_163537_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _20cb4d853_ScopeChecker::_method_check_break(jule::Ptr<_20c476dc4_BreakSt> _165931_b) {
	if ((*(_165931_b))._field_label._field_id != 0LLU) {
		jule::Ptr<_20cb4d853_BreakSt> _166121_brk = (*(this->self))._method_check_break_with_label(_165931_b);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_166121_brk));
		return;
	}
	jule::Ptr<_20cb4d853_BreakSt> _166617_brk = (*(this->self))._method_check_plain_break(_165931_b);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_166617_brk));
}



inline void _20cb4d853_ScopeChecker::_method_check_ret(jule::Ptr<_20c476dc4_RetSt> _167033_r) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_167033_r))._field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20cb4d853_RetSt> _167517_rt = jule::new_struct<_20cb4d853_RetSt>(new( std::nothrow ) _20cb4d853_RetSt((*((*(this->self))._method_get_root()))._field_owner,jule::Slice<jule::Ptr<_20cdc725d_Var>>(),jule::Any()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_167517_rt));
	jule::Ptr<_20d058ca2_RetTypeChecker> _168017_rtc = jule::new_struct<_20d058ca2_RetTypeChecker>(new( std::nothrow ) _20d058ca2_RetTypeChecker(this->self,(*(_167517_rt))._field_func,jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c476dc4_Expr>>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>(),(*(_167033_r))._field_token,jule::Any()));
	jule::Bool _168513_ok = (*(_168017_rtc))._method_check((*(_167033_r))._field_expr);
	if ((!(_168513_ok))) {
		return;
	}
	if (((*(_167033_r))._field_expr == nullptr) && ((*(_168017_rtc))._field_vars.len() == 0LL)) {
		return;
	}
	(*(_167517_rt))._field_vars=(*(_168017_rtc))._field_vars;
	if ((*(_167033_r))._field_expr != nullptr) {
		(*(_167517_rt))._field_expr=(*(_168017_rtc))._field_model;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_use_expr(jule::Ptr<_20c476dc4_UseExpr> _170134_ue) {
	if ((*(this->self))._field_result == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_170134_ue))._field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;
	}
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_170134_ue))._field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	}
	if (((*(this->self))._field_i + 1LL) < (*((*(this->self))._field_tree))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_170134_ue))._field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_node(jule::Any& _171835_node) {
	{
		auto &_match_expr{ _171835_node };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_Comment>>()) {
			_case_begin_5301281600:;
			{
				goto _match_end_5301280800;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_ScopeTree>>()) {
			_case_begin_5301282528:;
			{
				(*(this->self))._method_check_anon_scope(_171835_node.operator jule::Ptr<_20c476dc4_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_VarDecl>>()) {
			_case_begin_5301280688:;
			{
				(*(this->self))._method_check_var_decl(_171835_node.operator jule::Ptr<_20c476dc4_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TypeAliasDecl>>()) {
			_case_begin_5301281824:;
			{
				(*(this->self))._method_check_type_alias_decl(_171835_node.operator jule::Ptr<_20c476dc4_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_Expr>>()) {
			_case_begin_5301281920:;
			{
				(*(this->self))._method_check_expr(_171835_node.operator jule::Ptr<_20c476dc4_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_CoExpr>>()) {
			_case_begin_5301282016:;
			{
				(*(this->self))._method_check_co_expr(_171835_node.operator jule::Ptr<_20c476dc4_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_Conditional>>()) {
			_case_begin_5301282112:;
			{
				(*(this->self))._method_check_conditional(_171835_node.operator jule::Ptr<_20c476dc4_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_Iter>>()) {
			_case_begin_5301282208:;
			{
				(*(this->self))._method_check_iter(_171835_node.operator jule::Ptr<_20c476dc4_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_ContSt>>()) {
			_case_begin_5301282960:;
			{
				(*(this->self))._method_check_cont(_171835_node.operator jule::Ptr<_20c476dc4_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_LabelSt>>()) {
			_case_begin_5301283056:;
			{
				(*(this->self))._method_check_label(_171835_node.operator jule::Ptr<_20c476dc4_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_GotoSt>>()) {
			_case_begin_5301283152:;
			{
				(*(this->self))._method_push_goto(_171835_node.operator jule::Ptr<_20c476dc4_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_AssignSt>>()) {
			_case_begin_5301283248:;
			{
				(*(this->self))._method_check_assign_st(_171835_node.operator jule::Ptr<_20c476dc4_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_MatchCase>>()) {
			_case_begin_5301283360:;
			{
				(*(this->self))._method_check_match(_171835_node.operator jule::Ptr<_20c476dc4_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FallSt>>()) {
			_case_begin_5301283472:;
			{
				(*(this->self))._method_check_fall(_171835_node.operator jule::Ptr<_20c476dc4_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_BreakSt>>()) {
			_case_begin_5301283584:;
			{
				(*(this->self))._method_check_break(_171835_node.operator jule::Ptr<_20c476dc4_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_RetSt>>()) {
			_case_begin_5301283696:;
			{
				(*(this->self))._method_check_ret(_171835_node.operator jule::Ptr<_20c476dc4_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_UseExpr>>()) {
			_case_begin_5301283808:;
			{
				(*(this->self))._method_check_use_expr(_171835_node.operator jule::Ptr<_20c476dc4_UseExpr>());
			}
		}
		else {
			_case_begin_5301281008:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_5301280800:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_result(void) {
	jule::Any _174217_stmt = (*((*(this->self))._field_tree))._field_stmts[(*((*(this->self))._field_tree))._field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _174217_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_UseExpr>>()) {
			_case_begin_5301321904:;
			{
				jule::Ptr<_20c476dc4_UseExpr> _174521_ue = _174217_stmt.operator jule::Ptr<_20c476dc4_UseExpr>();
				jule::Ptr<_20d162d45_Data> _174621_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_174521_ue))._field_expr);
				if (_174621_d == nullptr) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_174621_d));
				jule::Ptr<_20d058ca2_RetTypeChecker> _175321_rtc = jule::new_struct<_20d058ca2_RetTypeChecker>(new( std::nothrow ) _20d058ca2_RetTypeChecker(this->self,jule::Ptr<_20c819332_FnIns>(),_20d058ca2_get_result_types((*(this->self))._field_result),jule::Slice<jule::Ptr<_20c476dc4_Expr>>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>(),(*((*(_174521_ue))._field_expr))._field_token,jule::Any()));
				(*(_175321_rtc))._method_check((*(_174521_ue))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_Expr>>()) {
			_case_begin_5301322000:;
			{
				jule::Ptr<_20c476dc4_Expr> _176121_expr = _174217_stmt.operator jule::Ptr<_20c476dc4_Expr>();
				jule::Ptr<_20d162d45_Data> _176221_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_176121_expr);
				if (_176221_d == nullptr) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_176221_d));
				{
					auto &_match_expr{ (*(_176221_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>>()) {
						_case_begin_5301338528:;
						{
							jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel> _177125_m = (*(_176221_d))._field_model.operator jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>();
							(*(this->self))._method_process_error_call(_177125_m,(*(_176121_expr))._field_token);
						}
					}
					else {
						_case_begin_5301338032:;
						{
							return;
						}
					}
					_match_end_5301337952:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_GotoSt>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_BreakSt>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_ContSt>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_RetSt>>()) {
			_case_begin_5301320464:;
			{
				(*(this->self))._method_check_node(_174217_stmt);
			}
		}
		else {
			_case_begin_5301320016:;
			{
				(*(this->self))._method_check_node(_174217_stmt);
				return;
			}
		}
		_match_end_5301319936:;
	}
	(*(this->self))._field_result=nullptr;
}



inline void _20cb4d853_ScopeChecker::_method_check_tree(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < (*((*(this->self))._field_tree))._field_stmts.len(); ((*(this->self))._field_i)++) {
		{
			jule::Any _179621_stmt = (*((*(this->self))._field_tree))._field_stmts[(*(this->self))._field_i];
			(*(this->self))._method_check_node(_179621_stmt);
		}
	_iter_next_5301347072:;
	}
	_iter_end_5301347072:;
	if (((*(this->self))._field_result != nullptr) && ((*((*(this->self))._field_tree))._field_stmts.len() != 0LL)) {
		(*(this->self))._method_check_result();
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_goto(jule::Ptr<_20cb4d853_ScopeGoto>& _180534_gt,jule::Ptr<_20cb4d853_ScopeLabel>& _180555_label) {
	jule::Ptr<_20cb4d853_ScopeChecker> _180617_gtsc = (*(_180534_gt))._field_scope;
	while (((*(_180617_gtsc))._field_child_index - 1LL) > (*((*(_180555_label))._field_scope))._field_child_index) {
		{
			_180617_gtsc=(*(_180617_gtsc))._field_parent;
		}
	_iter_next_5301358144:;
	}
	_iter_end_5301358144:;
	jule::Int _181117_n = 0LL;
	if ((*(_180617_gtsc))._field_scope == (*((*(_180555_label))._field_scope))._field_scope) {
		if ((*(_180534_gt))._field_pos > (*(_180555_label))._field_pos) {
			return;
		}
		_181117_n=(*(_180534_gt))._field_pos;
	}
	jule::Int _182417_i = (*(_180555_label))._field_pos - 1LL;
	if (_181117_n == 0LL) {
		{
			auto &expr = (*((*((*(_180555_label))._field_scope))._field_scope))._field_stmts;
			auto it = expr.begin();
			_iter_begin_5301367824:;
			if (it != expr.end()) {
				jule::Int _20cb4d853_j = it - expr.begin();
				jule::Any &_20cb4d853_stmt = *it;
				{
					if (_20cb4d853_stmt_is_goto_scope(_20cb4d853_stmt,(*(_180617_gtsc))._field_scope)) {
						_181117_n=_20cb4d853_j;
						goto _iter_end_5301367824;
					}
				}
				_iter_next_5301367824:;
				++it;
				_20cb4d853_j++;
				goto _iter_begin_5301367824;
			}
			_iter_end_5301367824:;
		}
	}
	for (; _182417_i >= _181117_n; (_182417_i)--) {
		{
			jule::Any _183721_stmt = (*((*((*(_180555_label))._field_scope))._field_scope))._field_stmts[_182417_i];
			if (_20cb4d853_st_is_def(_183721_stmt)) {
				(*((*this)._field_s))._method_push_err((*((*(_180534_gt))._field_gt))._field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any((*((*(_180534_gt))._field_gt))._field_label._field_kind)}));
				return;
			}
		}
	_iter_next_5301371312:;
	}
	_iter_end_5301371312:;
}



inline void _20cb4d853_ScopeChecker::_method_check_gotos(void) {
	{
		auto &expr = (*((*this)._field_gotos));
		auto it = expr.begin();
		_iter_begin_5301377984:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_ScopeGoto> _20cb4d853_gt = *it;
			{
				jule::Ptr<_20cb4d853_ScopeLabel> _184721_label = (*this)._method_find_label_all((*((*(_20cb4d853_gt))._field_gt))._field_label._field_kind);
				if (_184721_label == nullptr) {
					(*((*this)._field_s))._method_push_err((*((*(_20cb4d853_gt))._field_gt))._field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*((*(_20cb4d853_gt))._field_gt))._field_label._field_kind)}));
					goto _iter_next_5301377984;
				}
				(*(_184721_label))._field_used=true;
				(*this)._method_check_goto(_20cb4d853_gt,_184721_label);
			}
			_iter_next_5301377984:;
			++it;
			goto _iter_begin_5301377984;
		}
		_iter_end_5301377984:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_labels(void) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_5301386880:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_ScopeLabel> &_20cb4d853_l = *it;
			{
				if ((!((*(_20cb4d853_l))._field_used))) {
					(*((*this)._field_s))._method_push_err((*(_20cb4d853_l))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*((*(_20cb4d853_l))._field_label))._field_ident)}));
				}
			}
			_iter_next_5301386880:;
			++it;
			goto _iter_begin_5301386880;
		}
		_iter_end_5301386880:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_vars(void) {
	{
		auto &expr = (*((*this)._field_table))._field_vars;
		auto it = expr.begin();
		_iter_begin_5301392592:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> &_20cb4d853_v = *it;
			{
				if ((((!((*(_20cb4d853_v))._field_used)) && (!(_20c47803a_is_ignore_ident((*(_20cb4d853_v))._field_ident)))) && (!(_20c47803a_is_anon_ident((*(_20cb4d853_v))._field_ident)))) && ((*(_20cb4d853_v))._field_ident != jule::Str("self", 4))) {
					(*((*this)._field_s))._method_push_err((*(_20cb4d853_v))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_20cb4d853_v))._field_ident)}));
				}
			}
			_iter_next_5301392592:;
			++it;
			goto _iter_begin_5301392592;
		}
		_iter_end_5301392592:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check_aliases(void) {
	{
		auto &expr = (*((*this)._field_table))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5301400592:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeAlias> &_20cb4d853_a = *it;
			{
				if (((!((*(_20cb4d853_a))._field_used)) && (!(_20c47803a_is_ignore_ident((*(_20cb4d853_a))._field_ident)))) && (!(_20c47803a_is_anon_ident((*(_20cb4d853_a))._field_ident)))) {
					(*((*this)._field_s))._method_push_err((*(_20cb4d853_a))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_20cb4d853_a))._field_ident)}));
				}
			}
			_iter_next_5301400592:;
			++it;
			goto _iter_begin_5301400592;
		}
		_iter_end_5301400592:;
	}
}



inline void _20cb4d853_ScopeChecker::_method_check(jule::Ptr<_20c476dc4_ScopeTree>& _188330_tree,jule::Ptr<_20cb4d853_Scope>& _188353_s) {
	(*(_188353_s))._field_deferred=(*(_188330_tree))._field_deferred;
	(*(_188353_s))._field_unsafety=(*(_188330_tree))._field_unsafety;
	jule::I64 _188713_errors = (*((*(this->self))._field_s))._field_errors.len();
	(*(this->self))._field_tree=_188330_tree;
	(*(this->self))._field_scope=_188353_s;
	(*(this->self))._method_check_tree();
	if (_188713_errors == (*((*(this->self))._field_s))._field_errors.len()) {
		(*(this->self))._method_check_vars();
		(*(this->self))._method_check_aliases();
		if ((*(this->self))._method_is_root()) {
			(*(this->self))._method_check_gotos();
			(*(this->self))._method_check_labels();
		}
	}
}



inline jule::Ptr<_20cb4d853_ScopeChecker> _20cb4d853_ScopeChecker::_method_new_child_checker(void) {
	jule::Ptr<_20cb4d853_ScopeChecker> _190717_base = _20cb4d853_new_scope_checker_base((*(this->self))._field_s,nullptr);
	(*(_190717_base))._field_parent=this->self;
	(*(_190717_base))._field_labels=(*(this->self))._field_labels;
	(*(_190717_base))._field_gotos=(*(this->self))._field_gotos;
	(*(_190717_base))._field_child_index=static_cast<jule::Int>((*(this->self))._field_child_index + 1LL);
	return _190717_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinErrorCallExprModel &_Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_IntegratedToStrExprModel &_Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_TernaryExprModel &_Src) {
	_Stream << "TernaryExprModel{";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BackendEmitExprModel &_Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_FreeExprModel &_Src) {
	_Stream << "FreeExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline void _20ccebda8_DirectiveChecker::_method_check_cdef(jule::Ptr<_20c476dc4_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_20c819332_Fn>>()) {
			_case_begin_5301437536:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_20c819332_Fn>()))._field_cpp_linked) {
					goto _match_end_5301437648;
				}
				goto _case_begin_5301437728;
			}
		}
		else {
			_case_begin_5301437728:;
			{
				(*((*this)._field_s))._method_push_err((*(_1630_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_1630_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5301437648:;
	}
	if ((*(_1630_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_1630_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _20ccebda8_DirectiveChecker::_method_check_typedef(jule::Ptr<_20c476dc4_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5301447312:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_20c496047_Struct>()))._field_cpp_linked) {
					goto _match_end_5301447424;
				}
				goto _case_begin_5301447504;
			}
		}
		else {
			_case_begin_5301447504:;
			{
				(*((*this)._field_s))._method_push_err((*(_3233_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_3233_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5301447424:;
	}
	if ((*(_3233_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_3233_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _20ccebda8_DirectiveChecker::_method_check_derive(jule::Ptr<_20c476dc4_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5301457088:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_20c496047_Struct>()))._field_cpp_linked))) {
					goto _match_end_5301457200;
				}
				goto _case_begin_5301457280;
			}
		}
		else {
			_case_begin_5301457280:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_5301457200:;
	}
	if ((*(_4832_d))._field_args.len() == 0LL) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*((*this)._field_s))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	} else if ((*(_4832_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	{
		auto &_match_expr{ (*(_4832_d))._field_args[0LL]._field_kind };
		
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_5301470288:;
		}
		else {
			_case_begin_5301469536:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_4832_d))._field_args[0LL]._field_kind)}));
			}
		}
		_match_end_5301469440:;
	}
}



inline void _20ccebda8_DirectiveChecker::_method_check_namespace(jule::Ptr<_20c476dc4_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5301475552:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_20c496047_Struct>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c819332_Fn>>()) {
			_case_begin_5301476352:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_20c819332_Fn>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5301476448:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_20cdc725d_Var>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_5301475744:;
			{
				(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5301475664:;
	}
	if ((*(_7439_d))._field_args.len() == 0LL) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((*(_7439_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_20c47803a_Token _10213_arg = (*(_7439_d))._field_args[0LL];
	if (_10213_arg._field_id != 6LLU) {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_10213_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_7439_d))._field_args[0LL]._field_kind=_10213_arg._field_kind.slice(1LL,_10213_arg._field_kind.len() - 1LL);
}



inline void _20ccebda8_DirectiveChecker::_method_check_deprecated(jule::Ptr<_20c476dc4_Directive>& _11640_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5301506480:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_20c496047_Struct>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c819332_Fn>>()) {
			_case_begin_5301507280:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_20c819332_Fn>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5301507376:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_20cdc725d_Var>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_5301506672:;
			{
				(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5301506592:;
	}
	if ((*(_11640_d))._field_args.len() == 0LL) {
		return;
	}
	if ((*(_11640_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_11640_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_20c47803a_Token _14413_arg = (*(_11640_d))._field_args[0LL];
	if (_14413_arg._field_id != 6LLU) {
		(*((*this)._field_s))._method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_14413_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_11640_d))._field_args[0LL]._field_kind=_14413_arg._field_kind.slice(1LL,_14413_arg._field_kind.len() - 1LL);
}



inline void _20ccebda8_DirectiveChecker::_method_check_test(jule::Ptr<_20c476dc4_Directive>& _15831_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_20c819332_Fn>>()) {
			_case_begin_5301535520:;
			{
				jule::Ptr<_20c819332_Fn> _16117_f = (*this)._field_o.operator jule::Ptr<_20c819332_Fn>();
				if (((!((*(_16117_f))._field_cpp_linked)) && (!((*(_16117_f))._method_is_init()))) && (!((*(_16117_f))._method_is_entry_point()))) {
					goto _match_end_5301535632;
				}
				if ((*(_16117_f))._method_is_method()) {
					(*((*this)._field_s))._method_push_err((*(_16117_f))._field_token,jule::Str("you cannot declarate test methods", 33),jule::Slice<jule::Any>());
					goto _match_end_5301535632;
				}
				goto _case_begin_5301535712;
			}
		}
		else {
			_case_begin_5301535712:;
			{
				(*((*this)._field_s))._method_push_err((*(_15831_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_15831_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5301535632:;
	}
	if ((*(_15831_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_15831_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _20ccebda8_DirectiveChecker::_method_check_directive(jule::Ptr<_20c476dc4_Directive>& _17939_d) {
	{
		auto &_match_expr{ (*(_17939_d))._field_tag._field_kind };
		
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_5301551664:;
			{
				(*this)._method_check_cdef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_5301551760:;
			{
				(*this)._method_check_typedef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_5301551856:;
			{
				(*this)._method_check_derive(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_5301551952:;
			{
				(*this)._method_check_namespace(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_5301554624:;
			{
				(*this)._method_check_deprecated(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_5301554720:;
			{
				(*this)._method_check_test(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_5301554816:;
			{
				(*((*this)._field_s))._method_push_err((*(_17939_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_17939_d))._field_tag._field_kind)}));
			}
		}
		else {
			_case_begin_5301550688:;
			{
				(*((*this)._field_s))._method_push_err((*(_17939_d))._field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_17939_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5301551312:;
	}
}



inline void _20ccebda8_DirectiveChecker::_method_check(void) {
	{
		auto &expr = (*this)._field_d;
		auto it = expr.begin();
		_iter_begin_5301566448:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> _20ccebda8_d = *it;
			{
				(*this)._method_check_directive(_20ccebda8_d);
			}
			_iter_next_5301566448:;
			++it;
			goto _iter_begin_5301566448;
		}
		_iter_end_5301566448:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccebda8_DirectiveChecker &_Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cba58cc_Package::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cba58cc_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_20cdc725d_Var> _20cba58cc_Package::_method_find_var(jule::Str _28731_ident,jule::Bool _28743_cpp_linked) {
	return _20cba58cc_find_var_in_package((*this)._field_files,_28731_ident,_28743_cpp_linked);
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20cba58cc_Package::_method_find_type_alias(jule::Str _29338_ident,jule::Bool _29350_cpp_linked) {
	return _20cba58cc_find_type_alias_in_package((*this)._field_files,_29338_ident,_29350_cpp_linked);
}



inline jule::Ptr<_20c496047_Struct> _20cba58cc_Package::_method_find_struct(jule::Str _29934_ident,jule::Bool _29946_cpp_linked) {
	return _20cba58cc_find_struct_in_package((*this)._field_files,_29934_ident,_29946_cpp_linked);
}



inline jule::Ptr<_20c819332_Fn> _20cba58cc_Package::_method_find_fn(jule::Str _30530_ident,jule::Bool _30542_cpp_linked) {
	return _20cba58cc_find_fn_in_package((*this)._field_files,_30530_ident,_30542_cpp_linked);
}



inline jule::Ptr<_20cb471a9_Trait> _20cba58cc_Package::_method_find_trait(jule::Str _31133_ident) {
	return _20cba58cc_find_trait_in_package((*this)._field_files,_31133_ident);
}



inline jule::Ptr<_20cb4c70e_Enum> _20cba58cc_Package::_method_find_enum(jule::Str _31732_ident) {
	return _20cba58cc_find_enum_in_package((*this)._field_files,_31732_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _20cba58cc_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_Sema::_method_find_package(jule::Str _35135_ident) {
	return (*((*this)._field_file))._method_find_package(_35135_ident);
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)> _36137_selector) {
	return (*((*this)._field_file))._method_select_package(_36137_selector);
}



inline jule::Ptr<_20cdc725d_Var> _20cba60d6_Sema::_method_find_var(jule::Str _37131_ident,jule::Bool _37143_cpp_linked) {
	jule::Ptr<_20cdc725d_Var> _37317_v = _20cba58cc_find_var_in_package((*this)._field_files,_37131_ident,_37143_cpp_linked);
	if (_37317_v != nullptr) {
		return _37317_v;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301661232:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
			{
				if ((!(_20cba60d6_imp_is_lookupable(_20cba60d6_imp,_37131_ident)))) {
					goto _iter_next_5301661232;
				}
				_37317_v=(*(_20cba60d6_imp))._method_find_var(_37131_ident,_37143_cpp_linked);
				if ((_37317_v != nullptr) && (*this)._method_is_accessible_define((*(_37317_v))._field_public,(*(_37317_v))._field_token)) {
					return _37317_v;
				}
			}
			_iter_next_5301661232:;
			++it;
			goto _iter_begin_5301661232;
		}
		_iter_end_5301661232:;
	}
	return nullptr;
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20cba60d6_Sema::_method_find_type_alias(jule::Str _39838_ident,jule::Bool _39850_cpp_linked) {
	jule::Ptr<_20d4a6c9e_TypeAlias> _40017_ta = _20cba58cc_find_type_alias_in_package((*this)._field_files,_39838_ident,_39850_cpp_linked);
	if (_40017_ta != nullptr) {
		return _40017_ta;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301671248:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
			{
				if ((!(_20cba60d6_imp_is_lookupable(_20cba60d6_imp,_39838_ident)))) {
					goto _iter_next_5301671248;
				}
				_40017_ta=(*(_20cba60d6_imp))._method_find_type_alias(_39838_ident,_39850_cpp_linked);
				if ((_40017_ta != nullptr) && (*this)._method_is_accessible_define((*(_40017_ta))._field_public,(*(_40017_ta))._field_token)) {
					return _40017_ta;
				}
			}
			_iter_next_5301671248:;
			++it;
			goto _iter_begin_5301671248;
		}
		_iter_end_5301671248:;
	}
	return nullptr;
}



inline jule::Ptr<_20c496047_Struct> _20cba60d6_Sema::_method_find_struct(jule::Str _42534_ident,jule::Bool _42546_cpp_linked) {
	jule::Ptr<_20c496047_Struct> _42717_s = _20cba58cc_find_struct_in_package((*this)._field_files,_42534_ident,_42546_cpp_linked);
	if (_42717_s != nullptr) {
		return _42717_s;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301679952:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
			{
				if ((!(_20cba60d6_imp_is_lookupable(_20cba60d6_imp,_42534_ident)))) {
					goto _iter_next_5301679952;
				}
				_42717_s=(*(_20cba60d6_imp))._method_find_struct(_42534_ident,_42546_cpp_linked);
				if ((_42717_s != nullptr) && (*this)._method_is_accessible_define((*(_42717_s))._field_public,(*(_42717_s))._field_token)) {
					return _42717_s;
				}
			}
			_iter_next_5301679952:;
			++it;
			goto _iter_begin_5301679952;
		}
		_iter_end_5301679952:;
	}
	return nullptr;
}



inline jule::Ptr<_20c819332_Fn> _20cba60d6_Sema::_method_find_fn(jule::Str _45230_ident,jule::Bool _45242_cpp_linked) {
	jule::Ptr<_20c819332_Fn> _45417_f = _20cba58cc_find_fn_in_package((*this)._field_files,_45230_ident,_45242_cpp_linked);
	if (_45417_f != nullptr) {
		return _45417_f;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301688784:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
			{
				if ((!(_20cba60d6_imp_is_lookupable(_20cba60d6_imp,_45230_ident)))) {
					goto _iter_next_5301688784;
				}
				_45417_f=(*(_20cba60d6_imp))._method_find_fn(_45230_ident,_45242_cpp_linked);
				if ((_45417_f != nullptr) && (*this)._method_is_accessible_define((*(_45417_f))._field_public,(*(_45417_f))._field_token)) {
					return _45417_f;
				}
			}
			_iter_next_5301688784:;
			++it;
			goto _iter_begin_5301688784;
		}
		_iter_end_5301688784:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb471a9_Trait> _20cba60d6_Sema::_method_find_trait(jule::Str _47933_ident) {
	jule::Ptr<_20cb471a9_Trait> _48117_t = _20cba58cc_find_trait_in_package((*this)._field_files,_47933_ident);
	if (_48117_t != nullptr) {
		return _48117_t;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301697408:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
			{
				if ((!(_20cba60d6_imp_is_lookupable(_20cba60d6_imp,_47933_ident)))) {
					goto _iter_next_5301697408;
				}
				_48117_t=(*(_20cba60d6_imp))._method_find_trait(_47933_ident);
				if ((_48117_t != nullptr) && (*this)._method_is_accessible_define((*(_48117_t))._field_public,(*(_48117_t))._field_token)) {
					return _48117_t;
				}
			}
			_iter_next_5301697408:;
			++it;
			goto _iter_begin_5301697408;
		}
		_iter_end_5301697408:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb4c70e_Enum> _20cba60d6_Sema::_method_find_enum(jule::Str _50632_ident) {
	jule::Ptr<_20cb4c70e_Enum> _50817_e = _20cba58cc_find_enum_in_package((*this)._field_files,_50632_ident);
	if (_50817_e != nullptr) {
		return _50817_e;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301705520:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
			{
				if ((!(_20cba60d6_imp_is_lookupable(_20cba60d6_imp,_50632_ident)))) {
					goto _iter_next_5301705520;
				}
				_50817_e=(*(_20cba60d6_imp))._method_find_enum(_50632_ident);
				if ((_50817_e != nullptr) && (*this)._method_is_accessible_define((*(_50817_e))._field_public,(*(_50817_e))._field_token)) {
					return _50817_e;
				}
			}
			_iter_next_5301705520:;
			++it;
			goto _iter_begin_5301705520;
		}
		_iter_end_5301705520:;
	}
	return nullptr;
}



inline jule::Bool _20cba60d6_Sema::_method_is_flag(jule::Int _53022_flags) {
	return ((*this)._field_flags & _53022_flags) == _53022_flags;
}



inline void _20cba60d6_Sema::_method_set_current_file(jule::Ptr<_20d0c86e5_SymbolTable> _53239_f) {
	(*this)._field_file=_53239_f;
}



inline void _20cba60d6_Sema::_method_push_err(_20c47803a_Token _53427_token,jule::Str _53441_fmt,jule::Slice<jule::Any> _53454_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_20cba60d6_compiler_err(_53427_token,true,_53441_fmt,_53454_args));
}



inline void _20cba60d6_Sema::_method_push_suggestion(jule::Str _53934_fmt,jule::Slice<jule::Any> _53947_args) {
	{
		_20cba60d6_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_53934_fmt,_53947_args);
	}
}



inline jule::Bool _20cba60d6_Sema::_method_is_accessible_define(jule::Bool _54435_public,_20c47803a_Token _54449_token) {
	return (_54435_public || (_54449_token._field_file == nullptr)) || ((*((*((*this)._field_file))._field_file))._method_dir() == (*(_54449_token._field_file))._method_dir());
}



inline jule::Bool _20cba60d6_Sema::_method_is_duplicated_ident(jule::Uintptr _55134_itself,jule::Str _55151_ident,jule::Bool _55163_cpp_linked) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_5301729008:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> &_20cba60d6_f = *it;
			{
				if ((*(_20cba60d6_f))._method_is_duplicated_ident(_55134_itself,_55151_ident,_55163_cpp_linked)) {
					return true;
				}
				{
					auto &expr = (*(_20cba60d6_f))._field_imports;
					auto it = expr.begin();
					_iter_begin_5301733680:;
					if (it != expr.end()) {
						jule::Ptr<_20cba58cc_ImportInfo> &_20cba60d6_imp = *it;
						{
							{
								auto &expr = (*(_20cba60d6_imp))._field_selected;
								auto it = expr.begin();
								_iter_begin_5301735520:;
								if (it != expr.end()) {
									_20c47803a_Token &_20cba60d6_selected = *it;
									{
										if (_20cba60d6_selected._field_kind == _55151_ident) {
											return true;
										}
									}
									_iter_next_5301735520:;
									++it;
									goto _iter_begin_5301735520;
								}
								_iter_end_5301735520:;
							}
						}
						_iter_next_5301733680:;
						++it;
						goto _iter_begin_5301733680;
					}
					_iter_end_5301733680:;
				}
			}
			_iter_next_5301729008:;
			++it;
			goto _iter_begin_5301729008;
		}
		_iter_end_5301729008:;
	}
	return false;
}



inline void _20cba60d6_Sema::_method_check_directives(jule::Slice<jule::Ptr<_20c476dc4_Directive>>& _56841_d,jule::Any _56867_o) {
	_20ccebda8_DirectiveChecker _56917_dc = _20ccebda8_DirectiveChecker(this->self,_56841_d,_56867_o);
	_56917_dc._method_check();
}



inline jule::Bool _20cba60d6_Sema::_method_check_generic_quantity(jule::Int _57741_required,jule::Int _57756_given,_20c47803a_Token _57768_error_token) {
	jule::Bool _57790_ok = jule::Bool();
	{
		
		if ((_57741_required == 0LL) && (_57756_given > 0LL)) {
			_case_begin_5301745424:;
			{
				(*this)._method_push_err(_57768_error_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_57790_ok = false;
				return _57790_ok;
			}
		}
		else if ((_57741_required > 0LL) && (_57756_given == 0LL)) {
			_case_begin_5301745600:;
			{
				(*this)._method_push_err(_57768_error_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_57790_ok = false;
				return _57790_ok;
			}
		}
		else if (_57741_required < _57756_given) {
			_case_begin_5301745696:;
			{
				(*this)._method_push_err(_57768_error_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_57790_ok = false;
				return _57790_ok;
			}
		}
		else if (_57741_required > _57756_given) {
			_case_begin_5301744944:;
			{
				(*this)._method_push_err(_57768_error_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_57790_ok = false;
				return _57790_ok;
			}
		}
		else {
			_case_begin_5301743936:;
			{
				_57790_ok = true;
				return _57790_ok;
			}
		}
		_match_end_5301743760:;
	}
}



inline jule::Bool _20cba60d6_Sema::_method_is_duplicated_import_selection(jule::Uintptr _60045_itself,jule::Str _60062_ident) {
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301756048:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> &_20cba60d6_imp = *it;
			{
				if (static_cast<jule::Uintptr>(_20cba60d6_imp) == _60045_itself) {
					goto _iter_end_5301756048;
				}
				if ((*(_20cba60d6_imp))._method_exist_ident(_60062_ident)) {
					return true;
				}
			}
			_iter_next_5301756048:;
			++it;
			goto _iter_begin_5301756048;
		}
		_iter_end_5301756048:;
	}
	return false;
}



inline jule::Any _20cba60d6_Sema::_method_get_import_def(jule::Str _61529_ident,jule::Ptr<_20cba58cc_ImportInfo>& _61546_imp) {
	if (_20d68a5ae_find_package_builtin_def((*(_61546_imp))._field_link_path,_61529_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto &expr = (*((*(_61546_imp))._field_package))._field_files;
		auto it = expr.begin();
		_iter_begin_5301764352:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				
				jule::Any _62221_def = (*(_20cba60d6_f))._method_def_by_ident(_61529_ident,false);
				if (_62221_def != nullptr) {
					return _62221_def;
				}
			}
			_iter_next_5301764352:;
			++it;
			goto _iter_begin_5301764352;
		}
		_iter_end_5301764352:;
	}
	return jule::Any(nullptr);
}



inline void _20cba60d6_Sema::_method_check_import_selections(jule::Ptr<_20cba58cc_ImportInfo>& _63147_imp) {
	{
		auto &expr = (*(_63147_imp))._field_selected;
		auto it = expr.begin();
		_iter_begin_5301770240:;
		if (it != expr.end()) {
			_20c47803a_Token &_20cba60d6_ident = *it;
			{
				if (_20cba60d6_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_5301770240;
				}
				if ((*this)._method_is_duplicated_import_selection(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_63147_imp)),_20cba60d6_ident._field_kind)) {
					(*this)._method_push_err(_20cba60d6_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_20cba60d6_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					goto _iter_next_5301770240;
				}
				jule::Any _64321_def = (*this)._method_get_import_def(_20cba60d6_ident._field_kind,_63147_imp);
				{
					auto &_match_expr{ _64321_def };
					
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_5301777504:;
						{
							goto _iter_next_5301770240;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
						_case_begin_5301778384:;
						{
							jule::Ptr<_20cdc725d_Var> _65025_v = _64321_def.operator jule::Ptr<_20cdc725d_Var>();
							if ((*this)._method_is_accessible_define((*(_65025_v))._field_public,(*(_65025_v))._field_token)) {
								goto _iter_next_5301770240;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeAlias>>()) {
						_case_begin_5301778480:;
						{
							jule::Ptr<_20d4a6c9e_TypeAlias> _65625_ta = _64321_def.operator jule::Ptr<_20d4a6c9e_TypeAlias>();
							if ((*this)._method_is_accessible_define((*(_65625_ta))._field_public,(*(_65625_ta))._field_token)) {
								goto _iter_next_5301770240;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
						_case_begin_5301780000:;
						{
							jule::Ptr<_20c496047_Struct> _66225_strct = _64321_def.operator jule::Ptr<_20c496047_Struct>();
							if ((*this)._method_is_accessible_define((*(_66225_strct))._field_public,(*(_66225_strct))._field_token)) {
								goto _iter_next_5301770240;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb471a9_Trait>>()) {
						_case_begin_5301780096:;
						{
							jule::Ptr<_20cb471a9_Trait> _66825_t = _64321_def.operator jule::Ptr<_20cb471a9_Trait>();
							if ((*this)._method_is_accessible_define((*(_66825_t))._field_public,(*(_66825_t))._field_token)) {
								goto _iter_next_5301770240;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4c70e_Enum>>()) {
						_case_begin_5301780192:;
						{
							jule::Ptr<_20cb4c70e_Enum> _67425_e = _64321_def.operator jule::Ptr<_20cb4c70e_Enum>();
							if ((*this)._method_is_accessible_define((*(_67425_e))._field_public,(*(_67425_e))._field_token)) {
								goto _iter_next_5301770240;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20c819332_Fn>>()) {
						_case_begin_5301780288:;
						{
							jule::Ptr<_20c819332_Fn> _68025_f = _64321_def.operator jule::Ptr<_20c819332_Fn>();
							if ((*this)._method_is_accessible_define((*(_68025_f))._field_public,(*(_68025_f))._field_token)) {
								goto _iter_next_5301770240;
							}
						}
					}
					else {
						_case_begin_5301777792:;
						{
							(*this)._method_push_err(_20cba60d6_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_20cba60d6_ident._field_kind)}));
							goto _iter_next_5301770240;
						}
					}
					_match_end_5301777712:;
				}
				(*this)._method_push_err(_20cba60d6_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_20cba60d6_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
			}
			_iter_next_5301770240:;
			++it;
			goto _iter_begin_5301770240;
		}
		_iter_end_5301770240:;
	}
}



inline jule::Bool _20cba60d6_Sema::_method_is_use_alias_duplication(jule::Ptr<_20cba58cc_ImportInfo>& _69544_imp) {
	if ((*(_69544_imp))._field_alias.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5301803968:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp2 = *it;
			{
				if (_20cba60d6_imp2 == _69544_imp) {
					goto _iter_end_5301803968;
				}
				if ((*(_20cba60d6_imp2))._field_alias == (*(_69544_imp))._field_alias) {
					return true;
				}
				if (((*(_20cba60d6_imp2))._field_ident == (*(_20cba60d6_imp2))._field_link_path) && ((*(_20cba60d6_imp2))._field_ident == (*(_69544_imp))._field_alias)) {
					return true;
				}
			}
			_iter_next_5301803968:;
			++it;
			goto _iter_begin_5301803968;
		}
		_iter_end_5301803968:;
	}
	return false;
}



inline jule::Bool _20cba60d6_Sema::_method_check_import(jule::Ptr<_20cba58cc_ImportInfo>& _71636_imp) {
	if ((*(_71636_imp))._field_cpp_linked || ((*((*(_71636_imp))._field_package))._field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_71636_imp)) {
		(*this)._method_push_err((*(_71636_imp))._field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>({jule::Any((*(_71636_imp))._field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	}
	if ((*(_71636_imp))._field_duplicate) {
		return true;
	}
	jule::Ptr<_20cba60d6_Sema> _73017_sema = jule::new_struct_ptr<_20cba60d6_Sema>(new( std::nothrow ) _20cba60d6_Sema(jule::Slice<_20a25b99c_Log>(),jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>(),jule::Ptr<_20d0c86e5_SymbolTable>(),(*this)._field_flags));
	(*(_73017_sema))._method_check((*((*(_71636_imp))._field_package))._field_files);
	if ((*(_73017_sema))._field_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,(*(_73017_sema))._field_errors);
		(*(_73017_sema))._field_errors=nullptr;
		return false;
	}
	(*this)._method_check_import_selections(_71636_imp);
	return true;
}



inline void _20cba60d6_Sema::_method_check_imports(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_5301825552:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_file = *it;
			{
				(*this)._method_set_current_file(_20cba60d6_file);
				{
					auto &expr = (*(_20cba60d6_file))._field_imports;
					auto it = expr.begin();
					_iter_begin_5301828400:;
					if (it != expr.end()) {
						jule::Ptr<_20cba58cc_ImportInfo> _20cba60d6_imp = *it;
						{
							jule::Bool _74921_ok = (*this)._method_check_import(_20cba60d6_imp);
							if ((!(_74921_ok))) {
								(*this)._method_push_err((*(_20cba60d6_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_imp))._field_link_path)}));
								return;
							}
						}
						_iter_next_5301828400:;
						++it;
						goto _iter_begin_5301828400;
					}
					_iter_end_5301828400:;
				}
			}
			_iter_next_5301825552:;
			++it;
			goto _iter_begin_5301825552;
		}
		_iter_end_5301825552:;
	}
}



inline void _20cba60d6_Sema::_method_impl_file_impls(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_impls;
		auto it = expr.begin();
		_iter_begin_5301834080:;
		if (it != expr.end()) {
			jule::Ptr<_20cb5423d_Impl> _20cba60d6_imp = *it;
			{
				(*(this->self))._method_impl_impl(_20cba60d6_imp);
			}
			_iter_next_5301834080:;
			++it;
			goto _iter_begin_5301834080;
		}
		_iter_end_5301834080:;
	}
}



inline void _20cba60d6_Sema::_method_impl_impls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5301838384:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_file = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_file);
				(*(this->self))._method_impl_file_impls();
			}
			_iter_next_5301838384:;
			++it;
			goto _iter_begin_5301838384;
		}
		_iter_end_5301838384:;
	}
}



inline void _20cba60d6_Sema::_method_check_enums(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5301842704:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_file = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_file);
				(*(this->self))._method_check_enum_decls();
			}
			_iter_next_5301842704:;
			++it;
			goto _iter_begin_5301842704;
		}
		_iter_end_5301842704:;
	}
}



inline jule::Bool _20cba60d6_Sema::_method_check_type_with_refers(jule::Ptr<_20d4a6c9e_TypeSymbol>& _78247_t,jule::Trait<_20d6751d1_Lookup> _78313_l,jule::Ptr<_20d4a6c9e_Referencer> _78328_referencer) {
	jule::Bool _78355_ok = jule::Bool();
	if ((*(_78247_t))._method_checked()) {
		_78355_ok = true;
		return _78355_ok;
	}
	_20d4a6c9e_TypeChecker _78717_tc = _20d4a6c9e_TypeChecker(this->self,_78313_l,_78328_referencer,_20c47803a_Token(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	_78717_tc._method_check(_78247_t);
	_78355_ok = (*(_78247_t))._method_checked();
	return _78355_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_type(jule::Ptr<_20d4a6c9e_TypeSymbol>& _79835_t,jule::Trait<_20d6751d1_Lookup> _79855_l) {
	return (*(this->self))._method_check_type_with_refers(_79835_t,_79855_l,nullptr);
}



inline jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_Sema::_method_build_type_with_generics(jule::Ptr<_20c476dc4_TypeDecl>& _80449_t,jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _80513_generics) {
	jule::Ptr<_20d4a6c9e_TypeChecker> _80617_tc = jule::new_struct<_20d4a6c9e_TypeChecker>(new( std::nothrow ) _20d4a6c9e_TypeChecker(this->self,this->self,jule::Ptr<_20d4a6c9e_Referencer>(),_20c47803a_Token(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),_80513_generics,jule::Bool(),jule::Bool(),jule::Bool()));
	return (*(_80617_tc))._method_check_decl(_80449_t);
}



inline jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_Sema::_method_build_type(jule::Ptr<_20c476dc4_TypeDecl>& _81535_t) {
	return (*(this->self))._method_build_type_with_generics(_81535_t,nullptr);
}



inline jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_Sema::_method_select_type(jule::Ptr<_20c476dc4_TypeDecl>& _82036_t) {
	jule::Ptr<_20d4a6c9e_TypeChecker> _82117_tc = jule::new_struct<_20d4a6c9e_TypeChecker>(new( std::nothrow ) _20d4a6c9e_TypeChecker(this->self,this->self,jule::Ptr<_20d4a6c9e_Referencer>(),_20c47803a_Token(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Bool(),jule::Bool(),true));
	return (*(_82117_tc))._method_check_decl(_82036_t);
}



inline jule::Ptr<_20d162d45_Eval> _20cba60d6_Sema::_method_evalpd(jule::Trait<_20d6751d1_Lookup> _83130_l,jule::Ptr<_20d4a6c9e_TypeKind> _83145_p,jule::Ptr<_20cdc725d_Var> _83163_owner) {
	jule::Ptr<_20d162d45_Eval> _83217_e = jule::new_struct_ptr<_20d162d45_Eval>(new( std::nothrow ) _20d162d45_Eval(this->self,_83130_l,jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_83163_owner,jule::Ptr<_20c496047_FieldIns>()));
	{
		auto &_match_expr{ _83130_l };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5301893552:;
			{
				(*(_83217_e))._field_unsafety=(*(_83130_l.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._method_is_unsafe();
			}
		}
		_match_end_5301893472:;
	}
	(*(_83217_e))._field_prefix=_83145_p;
	return _83217_e;
}



inline jule::Ptr<_20d162d45_Eval> _20cba60d6_Sema::_method_evalp(jule::Trait<_20d6751d1_Lookup> _84929_l,jule::Ptr<_20d4a6c9e_TypeKind> _84944_p) {
	return (*(this->self))._method_evalpd(_84929_l,_84944_p,nullptr);
}



inline jule::Ptr<_20d162d45_Eval> _20cba60d6_Sema::_method_eval(jule::Trait<_20d6751d1_Lookup> _85428_l) {
	return (*(this->self))._method_evalp(_85428_l,nullptr);
}



inline void _20cba60d6_Sema::_method_check_assign_type(jule::Bool _85837_dest_is_ref,jule::Ptr<_20d4a6c9e_TypeKind>& _85861_dest,jule::Ptr<_20d162d45_Data>& _85914_d,_20c47803a_Token _85928_error_token) {
	if ((*((*(_85914_d))._field_kind))._field_variadic) {
		(*(this->self))._method_push_err(_85928_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	if (_85837_dest_is_ref) {
		if ((!((*(_85861_dest))._method_equals((*(_85914_d))._field_kind)))) {
			(*(this->self))._method_push_err(_85928_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_85861_dest))._method_to_str()),jule::Any((*((*(_85914_d))._field_kind))._method_to_str())}));
		}
	} else {
		jule::Ptr<_20d058ca2_AssignTypeChecker> _86921_atc = jule::new_struct<_20d058ca2_AssignTypeChecker>(new( std::nothrow ) _20d058ca2_AssignTypeChecker(this->self,_85861_dest,_85914_d,_85928_error_token));
		jule::Bool _87517_ok = (*(_86921_atc))._method_check();
		if ((!(_87517_ok))) {
			return;
		}
	}
	if ((!((*(_85914_d))._method_is_const())) || ((*(_85861_dest))._method_prim() == nullptr)) {
		return;
	}
	jule::Str _88517_kind = (*((*(_85861_dest))._method_prim()))._field_kind;
	{
		
		if (_20d853821_is_sig_int(_88517_kind)) {
			_case_begin_5301918672:;
			{
				(*((*(_85914_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_85914_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_20d853821_is_unsig_int(_88517_kind)) {
			_case_begin_5301918768:;
			{
				(*((*(_85914_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_85914_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_20d853821_is_float(_88517_kind)) {
			_case_begin_5301918880:;
			{
				(*((*(_85914_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_85914_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_5301918480:;
	}
}



inline jule::Bool _20cba60d6_Sema::_method_check_type_compatibility(jule::Ptr<_20d4a6c9e_TypeKind>& _89449_dest,jule::Ptr<_20d4a6c9e_TypeKind>& _89514_src,_20c47803a_Token& _89535_error_token) {
	if (_89514_src == nullptr) {
		(*(this->self))._method_push_err(_89535_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_89449_dest))._method_to_str()),jule::Any((*(_89514_src))._method_to_str())}));
		return false;
	}
	if ((*(_89514_src))._method_tup() != nullptr) {
		(*(this->self))._method_push_err(_89535_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_89449_dest))._method_to_str()),jule::Any((*(_89514_src))._method_to_str())}));
		return false;
	}
	_20d058ca2_TypeCompatibilityChecker _90917_tcc = _20d058ca2_TypeCompatibilityChecker(this->self,_89449_dest,_89514_src,_89535_error_token);
	if (_90917_tcc._method_check()) {
		return true;
	}
	(*(this->self))._method_push_err(_89535_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_89449_dest))._method_to_str()),jule::Any((*(_89514_src))._method_to_str())}));
	return false;
}



inline jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_Sema::_method_build_non_generic_type_kind(jule::Ptr<_20c476dc4_TypeDecl>& _93052_ast,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>& _93114_generics) {
	jule::Ptr<_20d4a6c9e_TypeChecker> _93217_tc = jule::new_struct<_20d4a6c9e_TypeChecker>(new( std::nothrow ) _20d4a6c9e_TypeChecker(this->self,this->self,jule::Ptr<_20d4a6c9e_Referencer>(),_20c47803a_Token(),_93114_generics,jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool()));
	return (*(_93217_tc))._method_check_decl(_93052_ast);
}



inline void _20cba60d6_Sema::_method_build_fn_non_generic_type_kinds(jule::Ptr<_20c819332_FnIns>& _94056_f) {
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _94117_generics = nullptr;
	if ((*((*(_94056_f))._field_decl))._method_is_method()) {
		_94117_generics=jule::append((*((*(_94056_f))._field_decl))._field_generics,(*((*((*(_94056_f))._field_decl))._field_owner))._field_generics);
	} else {
		_94117_generics=(*((*(_94056_f))._field_decl))._field_generics;
	}
	{
		auto &expr = (*(_94056_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5301953696:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> _20cba60d6_p = *it;
			{
				if ((!((*((*(_20cba60d6_p))._field_decl))._method_is_self()))) {
					(*(_20cba60d6_p))._field_kind=(*(this->self))._method_build_non_generic_type_kind((*((*((*(_20cba60d6_p))._field_decl))._field_kind))._field_decl,_94117_generics);
				}
			}
			_iter_next_5301953696:;
			++it;
			goto _iter_begin_5301953696;
		}
		_iter_end_5301953696:;
	}
	if ((!((*((*(_94056_f))._field_decl))._method_is_void()))) {
		(*(_94056_f))._field_result=(*(this->self))._method_build_non_generic_type_kind((*((*((*((*(_94056_f))._field_decl))._field_result))._field_kind))._field_decl,_94117_generics);
	}
}



inline jule::Ptr<_20c819332_FnIns> _20cba60d6_Sema::_method_get_trait_check_fn_kind(jule::Ptr<_20c819332_Fn>& _95848_f) {
	jule::Ptr<_20c819332_FnIns> _95917_ins = (*(_95848_f))._method_instance_force();
	(*(this->self))._method_build_fn_non_generic_type_kinds(_95917_ins);
	return _95917_ins;
}



inline jule::Bool _20cba60d6_Sema::_method_reload_fn_ins_types(jule::Ptr<_20c819332_FnIns>& _96444_f) {
	jule::Bool _96457_ok = jule::Bool();
	if ((*(_96444_f))._method_is_builtin() || (*(_96444_f))._method_is_anon()) {
		_96457_ok = true;
		return _96457_ok;
	}
	jule::Ptr<_20cba60d6_Sema> _96917_sema = (*((*(_96444_f))._field_decl))._field_sema;
	jule::Ptr<_20d0c86e5_SymbolTable> _97117_old = (*((*((*(_96444_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_96444_f))._field_decl))._field_sema))._method_set_current_file(_97117_old);
	});
	jule::Ptr<_20d0c86e5_SymbolTable> _97317_file = _20cba60d6_find_file((*((*((*(_96444_f))._field_decl))._field_sema))._field_files,(*((*(_96444_f))._field_decl))._field_token._field_file);
	if (_97317_file != nullptr) {
		(*((*((*(_96444_f))._field_decl))._field_sema))._method_set_current_file(_97317_file);
	}
	jule::I64 _97817_size = (*(_96444_f))._field_generics.len();
	if (((*(_96444_f))._field_decl != nullptr) && ((*((*(_96444_f))._field_decl))._field_owner != nullptr)) {
		_97817_size+=static_cast<jule::I64>((*((*((*(_96444_f))._field_decl))._field_owner))._field_generics.len());
	}
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _98317_generics = jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>::alloc(0LL,_97817_size);
	{
		auto &expr = (*(_96444_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_5301988384:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_g = *it;
			{
				_98317_generics.push(jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias(jule::Ptr<_20c476dc4_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_20c47803a_Token(),(*((*((*(_96444_f))._field_decl))._field_generics[_20cba60d6_i]))._field_ident,jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),_20cba60d6_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_5301988384:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5301988384;
		}
		_iter_end_5301988384:;
	}
	if (((*(_96444_f))._field_decl != nullptr) && ((*((*(_96444_f))._field_decl))._field_owner != nullptr)) {
		jule::Ptr<_20c496047_StructIns> _99521_owner = (*(_96444_f))._field_owner;
		{
			auto &expr = (*(_99521_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_5301991664:;
			if (it != expr.end()) {
				jule::Int _20cba60d6_i = it - expr.begin();
				jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_g = *it;
				{
					_98317_generics.push(jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias(jule::Ptr<_20c476dc4_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_20c47803a_Token(),(*((*((*(_99521_owner))._field_decl))._field_generics[_20cba60d6_i]))._field_ident,jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),_20cba60d6_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_5301991664:;
				++it;
				_20cba60d6_i++;
				goto _iter_begin_5301991664;
			}
			_iter_end_5301991664:;
		}
	}
	_96457_ok=true;
	{
		auto &expr = (*(_96444_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5301996208:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> _20cba60d6_p = *it;
			{
				if ((!((*((*(_20cba60d6_p))._field_decl))._method_is_self()))) {
					(*(_20cba60d6_p))._field_kind=(*(_96917_sema))._method_build_type_with_generics((*((*((*(_20cba60d6_p))._field_decl))._field_kind))._field_decl,_98317_generics);
					if ((*(_20cba60d6_p))._field_kind != nullptr) {
						(*((*(_20cba60d6_p))._field_kind))._field_variadic=(*((*(_20cba60d6_p))._field_decl))._field_variadic;
						if ((*((*(_20cba60d6_p))._field_decl))._field_reference && (!(_20d4a6c9e_is_valid_for_ref((*(_20cba60d6_p))._field_kind)))) {
							(*(this->self))._method_push_err((*((*(_20cba60d6_p))._field_decl))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*(_20cba60d6_p))._field_kind))._method_to_str())}));
						}
					} else {
						_96457_ok=false;
					}
				}
			}
			_iter_next_5301996208:;
			++it;
			goto _iter_begin_5301996208;
		}
		_iter_end_5301996208:;
	}
	if ((!((*((*(_96444_f))._field_decl))._method_is_void()))) {
		(*(_96444_f))._field_result=(*(_96917_sema))._method_build_type_with_generics((*((*((*((*(_96444_f))._field_decl))._field_result))._field_kind))._field_decl,_98317_generics);
		_96457_ok=((*(_96444_f))._field_result != nullptr) && _96457_ok;
	}
	if (_96917_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*(_96917_sema))._field_errors);
		(*(_96917_sema))._field_errors=nullptr;
	}
	return _96457_ok;
}



inline void _20cba60d6_Sema::_method_check_ref_validity_for_init_expr(jule::Bool _103452_left_mut,jule::Ptr<_20d162d45_Data>& _103473_d,_20c47803a_Token& _103488_error_token) {
	{
		auto &_match_expr{ (*(_103473_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5302022608:;
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_TraitSubIdentExprModel>>()) {
			_case_begin_5302022704:;
			{
				jule::Ptr<_20ccedeed_TraitSubIdentExprModel> _104021_model = (*(_103473_d))._field_model.operator jule::Ptr<_20ccedeed_TraitSubIdentExprModel>();
				if ((!(_20cba60d6_is_valid_model_for_ref((*(_104021_model))._field_expr)))) {
					(*(this->self))._method_push_err(_103488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*(_104021_model))._field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructSubIdentExprModel>>()) {
			_case_begin_5302022800:;
			{
				jule::Ptr<_20ccedeed_StructSubIdentExprModel> _104621_model = (*(_103473_d))._field_model.operator jule::Ptr<_20ccedeed_StructSubIdentExprModel>();
				if ((!(_20cba60d6_is_valid_model_for_ref((*(_104621_model))._field_expr)))) {
					(*(this->self))._method_push_err(_103488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*((*((*(_104621_model))._field_field))._field_decl))._field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_CommonSubIdentExprModel>>()) {
			_case_begin_5302022896:;
			{
				(*(this->self))._method_push_err(_103488_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_UnaryExprModel>>()) {
			_case_begin_5302024416:;
			{
				jule::Ptr<_20ccedeed_UnaryExprModel> _105621_unary = (*(_103473_d))._field_model.operator jule::Ptr<_20ccedeed_UnaryExprModel>();
				if ((*(_105621_unary))._field_op._field_kind == jule::Str("*", 1)) {
					if ((!(_20cba60d6_is_valid_model_for_ref((*(_103473_d))._field_model)))) {
						(*(this->self))._method_push_err(_103488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(jule::Str("address from * &T", 17))}));
					}
					goto _match_end_5302022160;
				}
				goto _case_begin_5302022304;
			}
		}
		else {
			_case_begin_5302022304:;
			{
				(*(this->self))._method_push_err(_103488_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
			}
		}
		_match_end_5302022160:;
	}
	if (_103452_left_mut && (!((*(_103473_d))._field_mutable))) {
		(*(this->self))._method_push_err(_103488_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
	}
}



inline void _20cba60d6_Sema::_method_check_validity_for_init_expr(jule::Bool _107448_left_mut,jule::Bool _107464_left_ref,jule::Ptr<_20d4a6c9e_TypeKind>& _107510_left_kind,jule::Ptr<_20d162d45_Data>& _107537_d,_20c47803a_Token& _107552_error_token) {
	if ((_107448_left_mut && (!((*(_107537_d))._field_mutable))) && (*((*(_107537_d))._field_kind))._method_mutable()) {
		(*(this->self))._method_push_err(_107552_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
	}
	if (_107464_left_ref) {
		(*(this->self))._method_check_ref_validity_for_init_expr(_107448_left_mut,_107537_d,_107552_error_token);
	}
	jule::Ptr<_20d058ca2_AssignTypeChecker> _108317_atc = jule::new_struct<_20d058ca2_AssignTypeChecker>(new( std::nothrow ) _20d058ca2_AssignTypeChecker(this->self,jule::Ptr<_20d4a6c9e_TypeKind>(),_107537_d,_107552_error_token));
	(*(_108317_atc))._method_check_validity();
}



inline jule::Bool _20cba60d6_Sema::_method_check_type_alias_decl_kind(jule::Ptr<_20d4a6c9e_TypeAlias>& _109151_ta,jule::Trait<_20d6751d1_Lookup> _109171_l) {
	jule::Bool _109184_ok = jule::Bool();
	jule::Ptr<_20d0c86e5_SymbolTable> _109217_old = (*(this->self))._field_file;
	__JULE_DEFER({
		(*(this->self))._method_set_current_file(_109217_old);
	});
	jule::Ptr<_20d0c86e5_SymbolTable> _109417_file = _20cba60d6_find_file((*(this->self))._field_files,(*(_109151_ta))._field_token._field_file);
	if (_109417_file != nullptr) {
		(*(this->self))._method_set_current_file(_109417_file);
	}
	_109184_ok=(*(this->self))._method_check_type_with_refers((*(_109151_ta))._field_kind,_109171_l,jule::new_struct<_20d4a6c9e_Referencer>(new( std::nothrow ) _20d4a6c9e_Referencer((*(_109151_ta))._field_ident,jule::Any(_109151_ta),(&((*(_109151_ta))._field_refers)))));
	if ((_109184_ok && ((*((*((*(_109151_ta))._field_kind))._field_kind))._method_arr() != nullptr)) && (*((*((*((*(_109151_ta))._field_kind))._field_kind))._method_arr()))._field_auto) {
		(*(this->self))._method_push_err((*((*((*(_109151_ta))._field_kind))._field_decl))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_109184_ok=false;
	}
	return _109184_ok;
}



inline void _20cba60d6_Sema::_method_check_type_alias_decl(jule::Ptr<_20d4a6c9e_TypeAlias>& _111146_ta,jule::Trait<_20d6751d1_Lookup> _111166_l) {
	if (_20c47803a_is_ignore_ident((*(_111146_ta))._field_ident)) {
		(*(this->self))._method_push_err((*(_111146_ta))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_111146_ta,_111166_l);
}



inline void _20cba60d6_Sema::_method_check_type_alias_decl_dup(jule::Ptr<_20d4a6c9e_TypeAlias>& _111950_ta) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_111950_ta)),(*(_111950_ta))._field_ident,(*(_111950_ta))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_111950_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_111950_ta))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_111950_ta,this->self);
}



inline jule::Bool _20cba60d6_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _112844_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5302089408:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeAlias> _20cba60d6_ta = *it;
			{
				(*(this->self))._method_check_type_alias_decl_dup(_20cba60d6_ta);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_112844_ok = false;
					return _112844_ok;
				}
			}
			_iter_next_5302089408:;
			++it;
			goto _iter_begin_5302089408;
		}
		_iter_end_5302089408:;
	}
	_112844_ok = true;
	return _112844_ok;
}



inline void _20cba60d6_Sema::_method_check_enum_items_dup(jule::Ptr<_20cb4c70e_Enum> _114039_e) {
	{
		auto &expr = (*(_114039_e))._field_items;
		auto it = expr.begin();
		_iter_begin_5302094960:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_EnumItem> &_20cba60d6_item = *it;
			{
				if (_20c47803a_is_ignore_ident((*(_20cba60d6_item))._field_ident)) {
					(*this)._method_push_err((*(_20cba60d6_item))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = (*(_114039_e))._field_items;
						auto it = expr.begin();
						_iter_begin_5302099872:;
						if (it != expr.end()) {
							jule::Ptr<_20cb4c70e_EnumItem> &_20cba60d6_citem = *it;
							{
								if (_20cba60d6_item == _20cba60d6_citem) {
									goto _iter_end_5302099872;
								} else if ((*(_20cba60d6_item))._field_ident == (*(_20cba60d6_citem))._field_ident) {
									(*this)._method_push_err((*(_20cba60d6_item))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_item))._field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_5302099872;
								}
							}
							_iter_next_5302099872:;
							++it;
							goto _iter_begin_5302099872;
						}
						_iter_end_5302099872:;
					}
				}
			}
			_iter_next_5302094960:;
			++it;
			goto _iter_begin_5302094960;
		}
		_iter_end_5302094960:;
	}
}



inline void _20cba60d6_Sema::_method_check_enum_items_str(jule::Ptr<_20cb4c70e_Enum>& _115845_e) {
	{
		auto &expr = (*(_115845_e))._field_items;
		auto it = expr.begin();
		_iter_begin_5302106224:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_EnumItem> _20cba60d6_item = *it;
			{
				if ((*(_20cba60d6_item))._method_auto_expr()) {
					(*(_20cba60d6_item))._field_value=jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value(jule::Ptr<_20c476dc4_Expr>(),jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_20d78b3e6_Const::_static_method_new_str((*(_20cba60d6_item))._field_ident)))));
					(*((*((*(_20cba60d6_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_20cba60d6_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_20d162d45_Data> _116825_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_20cba60d6_item))._field_value))._field_expr);
					if (_116825_d == nullptr) {
						goto _iter_next_5302106224;
					}
					if ((!((*(_116825_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_20cba60d6_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_115845_e))._field_kind))._field_kind,_116825_d,(*(_20cba60d6_item))._field_token);
					(*((*(_20cba60d6_item))._field_value))._field_data=_116825_d;
				}
			}
			_iter_next_5302106224:;
			++it;
			goto _iter_begin_5302106224;
		}
		_iter_end_5302106224:;
	}
}



inline void _20cba60d6_Sema::_method_check_enum_items_int(jule::Ptr<_20cb4c70e_Enum>& _118345_e) {
	jule::U64 _118417_max = static_cast<jule::U64>(_20d78e96b_max((*((*((*((*(_118345_e))._field_kind))._field_kind))._method_prim()))._method_to_str()));
	{
		auto &expr = (*(_118345_e))._field_items;
		auto it = expr.begin();
		_iter_begin_5302126816:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			jule::Ptr<_20cb4c70e_EnumItem> _20cba60d6_item = *it;
			{
				if (_118417_max == 0LL) {
					(*(this->self))._method_push_err((*(_20cba60d6_item))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_118417_max)--;
				}
				if ((*(_20cba60d6_item))._method_auto_expr()) {
					(*(_20cba60d6_item))._field_value=jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value(jule::Ptr<_20c476dc4_Expr>(),jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_20d78b3e6_Const::_static_method_new_u64(static_cast<jule::U64>(_118417_max - (_118417_max - static_cast<jule::U64>(_20cba60d6_i))))))));
					(*((*((*(_20cba60d6_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_20cba60d6_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_20d162d45_Data> _120025_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_20cba60d6_item))._field_value))._field_expr);
					if (_120025_d == nullptr) {
						goto _iter_next_5302126816;
					}
					if ((!((*(_120025_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_20cba60d6_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_118345_e))._field_kind))._field_kind,_120025_d,(*(_20cba60d6_item))._field_token);
					(*((*(_20cba60d6_item))._field_value))._field_data=_120025_d;
				}
			}
			_iter_next_5302126816:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5302126816;
		}
		_iter_end_5302126816:;
	}
}



inline void _20cba60d6_Sema::_method_check_enum_decl(jule::Ptr<_20cb4c70e_Enum>& _121540_e) {
	if (_20c47803a_is_ignore_ident((*(_121540_e))._field_ident)) {
		(*(this->self))._method_push_err((*(_121540_e))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_121540_e)),(*(_121540_e))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_121540_e))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_121540_e))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_121540_e))._field_items.len() == 0LL) {
		(*(this->self))._method_push_err((*(_121540_e))._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>({jule::Any((*(_121540_e))._field_ident)}));
	}
	(*(this->self))._method_check_enum_items_dup(_121540_e);
	if ((*(_121540_e))._field_kind != nullptr) {
		if ((!((*(this->self))._method_check_type((*(_121540_e))._field_kind,this->self)))) {
			return;
		}
	} else {
		(*(_121540_e))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ptr<_20d4a6c9e_Prim> _124217_t = (*((*((*(_121540_e))._field_kind))._field_kind))._method_prim();
	if (_124217_t == nullptr) {
		(*(this->self))._method_push_err((*(_121540_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((*(_124217_t))._method_is_str()) {
			_case_begin_5302165392:;
			{
				(*(this->self))._method_check_enum_items_str(_121540_e);
			}
		}
		else if (_20d853821_is_int((*(_124217_t))._method_to_str())) {
			_case_begin_5302167984:;
			{
				(*(this->self))._method_check_enum_items_int(_121540_e);
			}
		}
		else {
			_case_begin_5302159136:;
			{
				(*(this->self))._method_push_err((*(_121540_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_5302165104:;
	}
}



inline jule::Bool _20cba60d6_Sema::_method_check_enum_decls(void) {
	jule::Bool _126238_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_enums;
		auto it = expr.begin();
		_iter_begin_5302175456:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_Enum> _20cba60d6_e = *it;
			{
				(*(this->self))._method_check_enum_decl(_20cba60d6_e);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_126238_ok = false;
					return _126238_ok;
				}
			}
			_iter_next_5302175456:;
			++it;
			goto _iter_begin_5302175456;
		}
		_iter_end_5302175456:;
	}
	_126238_ok = true;
	return _126238_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_decl_generics(jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>& _127439_generics) {
	jule::Bool _127472_ok = jule::Bool();
	_127472_ok=true;
	{
		auto &expr = _127439_generics;
		auto it = expr.begin();
		_iter_begin_5302182256:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			jule::Ptr<_20c476dc4_GenericDecl> &_20cba60d6_g = *it;
			{
				if (_20c47803a_is_ignore_ident((*(_20cba60d6_g))._field_ident)) {
					(*this)._method_push_err((*(_20cba60d6_g))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_127472_ok=false;
					goto _iter_next_5302182256;
				}
				_julec_label_duplication_lookup:;
				{
					auto &expr = _127439_generics;
					auto it = expr.begin();
					_iter_begin_5302186832:;
					if (it != expr.end()) {
						jule::Int _20cba60d6_j = it - expr.begin();
						jule::Ptr<_20c476dc4_GenericDecl> &_20cba60d6_ct = *it;
						{
							{
								
								if (_20cba60d6_j >= _20cba60d6_i) {
									_case_begin_5302189248:;
									{
										goto _iter_end_5302186832;
									}
								}
								else if ((*(_20cba60d6_g))._field_ident == (*(_20cba60d6_ct))._field_ident) {
									_case_begin_5302189360:;
									{
										(*this)._method_push_err((*(_20cba60d6_g))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_g))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_127472_ok=false;
										goto _iter_end_5302186832;
									}
								}
								_match_end_5302189024:;
							}
						}
						_iter_next_5302186832:;
						++it;
						_20cba60d6_j++;
						goto _iter_begin_5302186832;
					}
					_iter_end_5302186832:;
				}
			}
			_iter_next_5302182256:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5302182256;
		}
		_iter_end_5302182256:;
	}
	return _127472_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_fn_decl_params_dup(jule::Ptr<_20c819332_Fn>& _130244_f) {
	jule::Bool _130254_ok = jule::Bool();
	_130254_ok=true;
	_julec_label_check:;
	{
		auto &expr = (*(_130244_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5302198960:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			jule::Ptr<_20c819332_Param> &_20cba60d6_p = *it;
			{
				{
					auto &expr = (*(_130244_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_5302201312:;
					if (it != expr.end()) {
						jule::Ptr<_20c476dc4_GenericDecl> &_20cba60d6_g = *it;
						{
							if ((*(_20cba60d6_p))._field_ident == (*(_20cba60d6_g))._field_ident) {
								_130254_ok=false;
								(*this)._method_push_err((*(_20cba60d6_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_p))._field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_5302198960;
							}
						}
						_iter_next_5302201312:;
						++it;
						goto _iter_begin_5302201312;
					}
					_iter_end_5302201312:;
				}
				_julec_label_params_lookup:;
				{
					auto &expr = (*(_130244_f))._field_params;
					auto it = expr.begin();
					_iter_begin_5302201888:;
					if (it != expr.end()) {
						jule::Int _20cba60d6_j = it - expr.begin();
						jule::Ptr<_20c819332_Param> &_20cba60d6_jp = *it;
						{
							{
								
								if (_20cba60d6_j >= _20cba60d6_i) {
									_case_begin_5302209312:;
									{
										goto _iter_end_5302201888;
									}
								}
								else if (_20c47803a_is_anon_ident((*(_20cba60d6_p))._field_ident) || _20c47803a_is_anon_ident((*(_20cba60d6_jp))._field_ident)) {
									_case_begin_5302209424:;
									{
										goto _iter_end_5302201888;
									}
								}
								else if ((*(_20cba60d6_p))._field_ident == (*(_20cba60d6_jp))._field_ident) {
									_case_begin_5302209536:;
									{
										_130254_ok=false;
										(*this)._method_push_err((*(_20cba60d6_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_p))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_5302198960;
									}
								}
								_match_end_5302209072:;
							}
						}
						_iter_next_5302201888:;
						++it;
						_20cba60d6_j++;
						goto _iter_begin_5302201888;
					}
					_iter_end_5302201888:;
				}
			}
			_iter_next_5302198960:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5302198960;
		}
		_iter_end_5302198960:;
	}
	return _130254_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_fn_decl_result_dup(jule::Ptr<_20c819332_Fn>& _133844_f) {
	jule::Bool _133854_ok = jule::Bool();
	_133854_ok=true;
	if ((*(_133844_f))._method_is_void()) {
		return _133854_ok;
	}
	{
		auto &expr = (*((*(_133844_f))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_5302221728:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			_20c47803a_Token &_20cba60d6_v = *it;
			{
				if (_20c47803a_is_ignore_ident(_20cba60d6_v._field_kind)) {
					goto _iter_next_5302221728;
				}
				{
					auto &expr = (*(_133844_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_5302225024:;
					if (it != expr.end()) {
						jule::Ptr<_20c476dc4_GenericDecl> &_20cba60d6_g = *it;
						{
							if (_20cba60d6_v._field_kind == (*(_20cba60d6_g))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_5302225024:;
						++it;
						goto _iter_begin_5302225024;
					}
					_iter_end_5302225024:;
				}
				{
					auto &expr = (*(_133844_f))._field_params;
					auto it = expr.begin();
					_iter_begin_5302228208:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Param> &_20cba60d6_p = *it;
						{
							if (_20cba60d6_v._field_kind == (*(_20cba60d6_p))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_5302228208:;
						++it;
						goto _iter_begin_5302228208;
					}
					_iter_end_5302228208:;
				}
				_julec_label_itself_lookup:;
				{
					auto &expr = (*((*(_133844_f))._field_result))._field_idents;
					auto it = expr.begin();
					_iter_begin_5302232688:;
					if (it != expr.end()) {
						jule::Int _20cba60d6_j = it - expr.begin();
						_20c47803a_Token &_20cba60d6_jv = *it;
						{
							{
								
								if (_20cba60d6_j >= _20cba60d6_i) {
									_case_begin_5302234960:;
									{
										goto _iter_end_5302232688;
									}
								}
								else if (_20cba60d6_jv._field_kind == _20cba60d6_v._field_kind) {
									_case_begin_5302235072:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_5302234736:;
							}
						}
						_iter_next_5302232688:;
						++it;
						_20cba60d6_j++;
						goto _iter_begin_5302232688;
					}
					_iter_end_5302232688:;
				}
				goto _iter_next_5302221728;
				_julec_label_exist:;
				(*this)._method_push_err(_20cba60d6_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_20cba60d6_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_133854_ok=false;
			}
			_iter_next_5302221728:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5302221728;
		}
		_iter_end_5302221728:;
	}
	return _133854_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_fn_decl_types(jule::Ptr<_20c819332_Fn>& _138744_f) {
	jule::Bool _138754_ok = jule::Bool();
	_138754_ok=true;
	jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>> _139017_generics = (*(_138744_f))._field_generics;
	if ((*(_138744_f))._field_owner != nullptr) {
		_139017_generics=jule::append(_139017_generics,(*((*(_138744_f))._field_owner))._field_generics);
	}
	{
		auto &expr = (*(_138744_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5302246368:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Param> _20cba60d6_p = *it;
			{
				if ((!((*(_20cba60d6_p))._method_is_self()))) {
					jule::Ptr<_20d4a6c9e_TypeKind> _139725_kind = (*(this->self))._method_build_non_generic_type_kind((*((*(_20cba60d6_p))._field_kind))._field_decl,_139017_generics);
					_138754_ok=(_139725_kind != nullptr) && _138754_ok;
					(*((*(_20cba60d6_p))._field_kind))._field_kind=_139725_kind;
				}
			}
			_iter_next_5302246368:;
			++it;
			goto _iter_begin_5302246368;
		}
		_iter_end_5302246368:;
	}
	if ((!((*(_138744_f))._method_is_void()))) {
		jule::Ptr<_20d4a6c9e_TypeKind> _140421_kind = (*(this->self))._method_build_non_generic_type_kind((*((*((*(_138744_f))._field_result))._field_kind))._field_decl,_139017_generics);
		_138754_ok=(_140421_kind != nullptr) && _138754_ok;
		(*((*((*(_138744_f))._field_result))._field_kind))._field_kind=_140421_kind;
	}
	return _138754_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_fn_decl_prototype(jule::Ptr<_20c819332_Fn>& _141448_f) {
	jule::Bool _141458_ok = jule::Bool();
	if ((*(_141448_f))._field_exceptional && (*(_141448_f))._field_cpp_linked) {
		(*(this->self))._method_push_err((*(_141448_f))._field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		_141458_ok = false;
		return _141458_ok;
	}
	if ((*(_141448_f))._field_exceptional) {
		if ((*(_141448_f))._method_is_entry_point()) {
			(*(this->self))._method_push_err((*(_141448_f))._field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if ((*(_141448_f))._method_is_init()) {
			(*(this->self))._method_push_err((*(_141448_f))._field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		}
	}
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_141448_f))._field_generics)))) {
			_case_begin_5302270768:;
			{
				_141458_ok = false;
				return _141458_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_params_dup(_141448_f)))) {
			_case_begin_5302270944:;
			{
				_141458_ok = false;
				return _141458_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_result_dup(_141448_f)))) {
			_case_begin_5302271040:;
			{
				_141458_ok = false;
				return _141458_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_types(_141448_f)))) {
			_case_begin_5302270288:;
			{
				_141458_ok = false;
				return _141458_ok;
			}
		}
		else {
			_case_begin_5302264416:;
			{
				_141458_ok = true;
				return _141458_ok;
			}
		}
		_match_end_5302264176:;
	}
}



inline void _20cba60d6_Sema::_method_check_trait_decl_method(jule::Ptr<_20c819332_Fn>& _143748_f) {
	if (_20c47803a_is_ignore_ident((*(_143748_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_143748_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_fn_decl_prototype(_143748_f);
	(*(_143748_f))._field_sema=this->self;
}



inline void _20cba60d6_Sema::_method_check_trait_decl_methods(jule::Ptr<_20cb471a9_Trait>& _144649_t) {
	{
		auto &expr = (*(_144649_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_5302285184:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			jule::Ptr<_20c819332_Fn> _20cba60d6_f = *it;
			{
				(*(this->self))._method_check_trait_decl_method(_20cba60d6_f);
				(*(_144649_t))._field_mutable=(*(_144649_t))._field_mutable || (*((*(_20cba60d6_f))._field_params[0LL]))._field_mutable;
				if ((*(this->self))._field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto &expr = (*(_144649_t))._field_methods;
					auto it = expr.begin();
					_iter_begin_5302291840:;
					if (it != expr.end()) {
						jule::Int _20cba60d6_j = it - expr.begin();
						jule::Ptr<_20c819332_Fn> &_20cba60d6_jf = *it;
						{
							{
								
								if (_20cba60d6_j >= _20cba60d6_i) {
									_case_begin_5302294384:;
									{
										goto _iter_end_5302291840;
									}
								}
								else if ((*(_20cba60d6_f))._field_ident == (*(_20cba60d6_jf))._field_ident) {
									_case_begin_5302294496:;
									{
										(*(this->self))._method_push_err((*(_20cba60d6_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_f))._field_ident)}));
										(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_5302291840;
									}
								}
								_match_end_5302294160:;
							}
						}
						_iter_next_5302291840:;
						++it;
						_20cba60d6_j++;
						goto _iter_begin_5302291840;
					}
					_iter_end_5302291840:;
				}
			}
			_iter_next_5302285184:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5302285184;
		}
		_iter_end_5302285184:;
	}
}



inline void _20cba60d6_Sema::_method_check_trait_decl(jule::Ptr<_20cb471a9_Trait>& _147841_t) {
	if (_20c47803a_is_ignore_ident((*(_147841_t))._field_ident)) {
		(*(this->self))._method_push_err((*(_147841_t))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_147841_t)),(*(_147841_t))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_147841_t))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_147841_t))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_trait_decl_methods(_147841_t);
}



inline jule::Bool _20cba60d6_Sema::_method_check_trait_decls(void) {
	jule::Bool _149039_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_traits;
		auto it = expr.begin();
		_iter_begin_5302313536:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> _20cba60d6_t = *it;
			{
				(*(this->self))._method_check_trait_decl(_20cba60d6_t);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_149039_ok = false;
					return _149039_ok;
				}
			}
			_iter_next_5302313536:;
			++it;
			goto _iter_begin_5302313536;
		}
		_iter_end_5302313536:;
	}
	_149039_ok = true;
	return _149039_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_trait_impl_methods(jule::Ptr<_20cb471a9_Trait>& _150248_base,jule::Ptr<_20cb5423d_Impl>& _150263_ipl) {
	jule::Bool _150277_ok = jule::Bool();
	_150277_ok=true;
	{
		auto &expr = (*(_150263_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_5302320528:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> &_20cba60d6_f = *it;
			{
				if ((*(_150248_base))._method_find_method((*(_20cba60d6_f))._field_ident) == nullptr) {
					(*this)._method_push_err((*(_20cba60d6_f))._field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>({jule::Any((*(_150248_base))._field_ident),jule::Any((*(_20cba60d6_f))._field_ident)}));
					_150277_ok=false;
				}
			}
			_iter_next_5302320528:;
			++it;
			goto _iter_begin_5302320528;
		}
		_iter_end_5302320528:;
	}
	return _150277_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_impl_to_struct(jule::Ptr<_20c496047_Struct>& _151339_dest,jule::Ptr<_20cb5423d_Impl>& _151359_ipl) {
	jule::Bool _151373_ok = jule::Bool();
	_151373_ok=true;
	{
		auto &expr = (*(_151359_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_5302329760:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_f = *it;
			{
				if (((*(_151339_dest))._method_find_method((*(_20cba60d6_f))._field_ident,(*(_20cba60d6_f))._field_statically) != nullptr) || ((*(_151339_dest))._method_find_field((*(_20cba60d6_f))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_20cba60d6_f))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_151339_dest))._field_ident),jule::Any((*(_20cba60d6_f))._field_ident)}));
					_151373_ok=false;
					goto _iter_next_5302329760;
				}
				if (((*(_151339_dest))._field_generics.len() > 0LL) && ((*(_20cba60d6_f))._field_generics.len() > 0LL)) {
					{
						auto &expr = (*(_20cba60d6_f))._field_generics;
						auto it = expr.begin();
						_iter_begin_5302337904:;
						if (it != expr.end()) {
							jule::Ptr<_20c476dc4_GenericDecl> &_20cba60d6_fg = *it;
							{
								{
									auto &expr = (*(_151339_dest))._field_generics;
									auto it = expr.begin();
									_iter_begin_5302339680:;
									if (it != expr.end()) {
										jule::Ptr<_20c476dc4_GenericDecl> &_20cba60d6_dg = *it;
										{
											if ((*(_20cba60d6_fg))._field_ident == (*(_20cba60d6_dg))._field_ident) {
												(*(this->self))._method_push_err((*(_20cba60d6_fg))._field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_151373_ok=false;
											}
										}
										_iter_next_5302339680:;
										++it;
										goto _iter_begin_5302339680;
									}
									_iter_end_5302339680:;
								}
							}
							_iter_next_5302337904:;
							++it;
							goto _iter_begin_5302337904;
						}
						_iter_end_5302337904:;
					}
				}
				(*(this->self))._method_check_directives((*(_20cba60d6_f))._field_directives,jule::Any(_20cba60d6_f));
				(*(_20cba60d6_f))._field_sema=this->self;
				(*(_20cba60d6_f))._field_owner=_151339_dest;
				(*(_151339_dest))._field_methods = jule::alloc_for_append((*(_151339_dest))._field_methods,1);(*(_151339_dest))._field_methods.push(_20cba60d6_f);
			}
			_iter_next_5302329760:;
			++it;
			goto _iter_begin_5302329760;
		}
		_iter_end_5302329760:;
	}
	{
		auto &expr = (*(_151359_ipl))._field_statics;
		auto it = expr.begin();
		_iter_begin_5302348688:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> _20cba60d6_v = *it;
			{
				
				if (((*(_151339_dest))._method_find_method((*(_20cba60d6_v))._field_ident,true) != nullptr) || ((*(_151339_dest))._method_find_static((*(_20cba60d6_v))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_20cba60d6_v))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_151339_dest))._field_ident),jule::Any((*(_20cba60d6_v))._field_ident)}));
					_151373_ok=false;
					goto _iter_next_5302348688;
				}
				(*(this->self))._method_check_var_decl(_20cba60d6_v,this->self);
				(*(this->self))._method_check_type_var(_20cba60d6_v,this->self);
				(*(_151339_dest))._field_statics = jule::alloc_for_append((*(_151339_dest))._field_statics,1);(*(_151339_dest))._field_statics.push(_20cba60d6_v);
			}
			_iter_next_5302348688:;
			++it;
			goto _iter_begin_5302348688;
		}
		_iter_end_5302348688:;
	}
	return _151373_ok;
}



inline void _20cba60d6_Sema::_method_impl_trait(jule::Ptr<_20cb5423d_Impl>& _155835_decl) {
	jule::Ptr<_20d4a6c9e_TypeKind> _155917_base_t = (*(this->self))._method_select_type((*(_155835_decl))._field_base);
	if (_155917_base_t == nullptr) {
		return;
	}
	jule::Ptr<_20cb471a9_Trait> _156317_base = (*(_155917_base_t))._method_trt();
	if (_156317_base == nullptr) {
		(*(this->self))._method_push_err((*((*(_155835_decl))._field_base))._field_token,jule::Str("invalid base type for impl", 26),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected trait, use a trait", 27),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _157017_dest_t = (*(this->self))._method_select_type((*(_155835_decl))._field_dest);
	if (_157017_dest_t == nullptr) {
		return;
	}
	jule::Ptr<_20c496047_StructIns> _157417_dest_s = (*(_157017_dest_t))._method_strct();
	if (_157417_dest_s == nullptr) {
		(*(this->self))._method_push_err((*((*(_155835_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl", 33),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20c496047_Struct> _158117_dest = (*(_157417_dest_s))._field_decl;
	if ((*((*(_158117_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_155835_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	(*(_156317_base))._field_implemented = jule::alloc_for_append((*(_156317_base))._field_implemented,1);(*(_156317_base))._field_implemented.push(_158117_dest);
	(*(_158117_dest))._field_implements = jule::alloc_for_append((*(_158117_dest))._field_implements,1);(*(_158117_dest))._field_implements.push(_156317_base);
	if ((*(_155835_decl))._field_statics.len() > 0LL) {
		(*(this->self))._method_push_err((*((*(_155835_decl))._field_statics[0LL]))._field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	}
	{
		
		if ((!((*(this->self))._method_check_trait_impl_methods(_156317_base,_155835_decl)))) {
			_case_begin_5302384528:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_impl_to_struct(_158117_dest,_155835_decl)))) {
			_case_begin_5302384624:;
			{
				return;
			}
		}
		_match_end_5302380240:;
	}
}



inline void _20cba60d6_Sema::_method_impl_struct(jule::Ptr<_20cb5423d_Impl>& _160136_decl) {
	jule::Ptr<_20d4a6c9e_TypeKind> _160217_dest_t = (*(this->self))._method_select_type((*(_160136_decl))._field_dest);
	if (_160217_dest_t == nullptr) {
		return;
	}
	jule::Ptr<_20c496047_StructIns> _160617_dest_s = (*(_160217_dest_t))._method_strct();
	if (_160617_dest_s == nullptr) {
		(*(this->self))._method_push_err((*((*(_160136_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl", 33),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20c496047_Struct> _161317_dest = (*(_160617_dest_s))._field_decl;
	if ((*((*(_161317_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_160136_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((!((*(this->self))._method_impl_to_struct(_161317_dest,_160136_decl)))) {
			_case_begin_5302392240:;
			{
				return;
			}
		}
		_match_end_5302400736:;
	}
}



inline void _20cba60d6_Sema::_method_impl_impl(jule::Ptr<_20cb5423d_Impl>& _162634_decl) {
	{
		
		if ((*(_162634_decl))._method_is_trait_impl()) {
			_case_begin_5302405968:;
			{
				(*(this->self))._method_impl_trait(_162634_decl);
			}
		}
		else if ((*(_162634_decl))._method_is_struct_impl()) {
			_case_begin_5302406080:;
			{
				(*(this->self))._method_impl_struct(_162634_decl);
			}
		}
		_match_end_5302405744:;
	}
}



inline void _20cba60d6_Sema::_method_check_var_decl(jule::Ptr<_20cdc725d_Var>& _163539_decl,jule::Trait<_20d6751d1_Lookup> _163555_l) {
	if (_20c47803a_is_ignore_ident((*(_163539_decl))._field_ident)) {
		(*(this->self))._method_push_err((*(_163539_decl))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	if ((*(_163539_decl))._method_is_type_inferred()) {
		if ((!((*(_163539_decl))._method_is_initialized()))) {
			(*(this->self))._method_push_err((*(_163539_decl))._field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_check_type((*(_163539_decl))._field_kind,_163555_l);
	}
	if ((*(_163539_decl))._field_constant && (*(_163539_decl))._field_reference) {
		(*(this->self))._method_push_err((*(_163539_decl))._field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	}
	if ((!((*(_163539_decl))._method_is_initialized()))) {
		if ((*(_163539_decl))._field_constant) {
			(*(this->self))._method_push_err((*(_163539_decl))._field_token,jule::Str("constant variable must have initialize expression", 49),jule::Slice<jule::Any>());
		}
		if ((*(_163539_decl))._field_statically) {
			(*(this->self))._method_push_err((*(_163539_decl))._field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		}
		if ((*(_163539_decl))._field_reference) {
			(*(this->self))._method_push_err((*(_163539_decl))._field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		}
	}
}



inline void _20cba60d6_Sema::_method_check_global_var_decl(jule::Ptr<_20cdc725d_Var>& _166946_decl) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_166946_decl)),(*(_166946_decl))._field_ident,(*(_166946_decl))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_166946_decl))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_166946_decl))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_166946_decl))._field_cpp_linked && (*(_166946_decl))._field_constant) {
		(*(this->self))._method_push_err((*(_166946_decl))._field_token,jule::Str("cpp linked variables cannot constant", 36),jule::Slice<jule::Any>());
	}
	if (((!((*(_166946_decl))._field_cpp_linked)) && (!((*(_166946_decl))._field_constant))) && (!((*(_166946_decl))._field_statically))) {
		(*(this->self))._method_push_err((*(_166946_decl))._field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_166946_decl))._field_directives,jule::Any(_166946_decl));
	(*(this->self))._method_check_var_decl(_166946_decl,this->self);
}



inline jule::Bool _20cba60d6_Sema::_method_check_global_decls(void) {
	jule::Bool _168840_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_5302450080:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> _20cba60d6_decl = *it;
			{
				(*(this->self))._method_check_global_var_decl(_20cba60d6_decl);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_168840_ok = false;
					return _168840_ok;
				}
			}
			_iter_next_5302450080:;
			++it;
			goto _iter_begin_5302450080;
		}
		_iter_end_5302450080:;
	}
	_168840_ok = true;
	return _168840_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_trait_impl(jule::Ptr<_20c496047_Struct>& _170048_strct,jule::Ptr<_20cb471a9_Trait>& _170069_trt) {
	jule::Bool _170084_ok = jule::Bool();
	{
		auto &expr = (*(_170069_trt))._field_methods;
		auto it = expr.begin();
		_iter_begin_5302457392:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_tf = *it;
			{
				jule::Bool _170221_exist = false;
				jule::Ptr<_20c819332_Fn> _170321_sf = (*(_170048_strct))._method_find_method((*(_20cba60d6_tf))._field_ident,(*(_20cba60d6_tf))._field_statically);
				jule::Ptr<_20c819332_FnIns> _170417_tf_k = (*(this->self))._method_get_trait_check_fn_kind(_20cba60d6_tf);
				if (_170321_sf != nullptr) {
					jule::Ptr<_20c819332_FnIns> _170625_sf_k = (*(this->self))._method_get_trait_check_fn_kind(_170321_sf);
					_170221_exist=(((*((*(_170417_tf_k))._field_decl))._field_public == (*((*(_170625_sf_k))._field_decl))._field_public) && ((*((*(_170417_tf_k))._field_decl))._field_ident == (*((*(_170625_sf_k))._field_decl))._field_ident)) && (*(_170417_tf_k))._method_equals(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_170625_sf_k)));
				}
				if (_170221_exist) {
					jule::Ptr<_20c476dc4_Directive> _171421_d = _20d162d45_find_directive((*(_170321_sf))._field_directives,jule::Str("deprecated", 10));
					if (_171421_d != nullptr) {
						(*(this->self))._method_push_err((*(_171421_d))._field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					}
					_170084_ok=false;
				} else {
					
					jule::Str _172125_s = (*(_170417_tf_k))._method_get_kind_str(true);
					if ((*(_20cba60d6_tf))._field_public) {
						_172125_s=jule::Str("pub ", 4) + _172125_s;
					}
					(*(this->self))._method_push_err((*(_170048_strct))._field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>({jule::Any((*(_170069_trt))._field_ident),jule::Any(_172125_s)}));
					_170084_ok=false;
				}
			}
			_iter_next_5302457392:;
			++it;
			goto _iter_begin_5302457392;
		}
		_iter_end_5302457392:;
	}
	return _170084_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_impls(jule::Ptr<_20c496047_Struct>& _173243_s) {
	jule::Bool _173257_ok = jule::Bool();
	_173257_ok=true;
	{
		auto &expr = (*(_173243_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_5302481536:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> _20cba60d6_trt = *it;
			{
				_173257_ok=(*(this->self))._method_check_struct_trait_impl(_173243_s,_20cba60d6_trt) && _173257_ok;
			}
			_iter_next_5302481536:;
			++it;
			goto _iter_begin_5302481536;
		}
		_iter_end_5302481536:;
	}
	return _173257_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_fields(jule::Ptr<_20c496047_Struct>& _174044_st) {
	jule::Bool _174059_ok = jule::Bool();
	_174059_ok=true;
	jule::Ptr<_20d4a6c9e_TypeChecker> _174317_tc = jule::new_struct<_20d4a6c9e_TypeChecker>(new( std::nothrow ) _20d4a6c9e_TypeChecker(this->self,this->self,jule::new_struct<_20d4a6c9e_Referencer>(new( std::nothrow ) _20d4a6c9e_Referencer((*(_174044_st))._field_ident,jule::Any(_174044_st),nullptr)),_20c47803a_Token(),(*(_174044_st))._field_generics,jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool()));
	jule::I64 _175313_n = (*(_174044_st))._field_instances.len();
	{
		auto &expr = (*(_174044_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_5302491184:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Field> _20cba60d6_f = *it;
			{
				(*(_20cba60d6_f))._field_owner=_174044_st;
				(*((*(_20cba60d6_f))._field_kind))._field_kind=(*(_174317_tc))._method_check_decl((*((*(_20cba60d6_f))._field_kind))._field_decl);
				_174059_ok=((*((*(_20cba60d6_f))._field_kind))._field_kind != nullptr) && _174059_ok;
				{
					auto &expr = (*(_174044_st))._field_fields;
					auto it = expr.begin();
					_iter_begin_5302494032:;
					if (it != expr.end()) {
						jule::Ptr<_20c496047_Field> &_20cba60d6_cf = *it;
						{
							if (_20cba60d6_f == _20cba60d6_cf) {
								goto _iter_end_5302494032;
							} else if ((*(_20cba60d6_f))._field_ident == (*(_20cba60d6_cf))._field_ident) {
								(*(this->self))._method_push_err((*(_20cba60d6_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_20cba60d6_f))._field_ident)}));
								(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_174059_ok=false;
							}
						}
						_iter_next_5302494032:;
						++it;
						goto _iter_begin_5302494032;
					}
					_iter_end_5302494032:;
				}
			}
			_iter_next_5302491184:;
			++it;
			goto _iter_begin_5302491184;
		}
		_iter_end_5302491184:;
	}
	if (_174059_ok && (_175313_n != (*(_174044_st))._field_instances.len())) {
		(*(_174317_tc))._field_referencer=nullptr;
		(*(_174044_st))._field_instances=(*(_174044_st))._field_instances.slice(0LL,_175313_n);
		{
			auto &expr = (*(_174044_st))._field_fields;
			auto it = expr.begin();
			_iter_begin_5302503968:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_Field> _20cba60d6_f = *it;
				{
					(*((*(_20cba60d6_f))._field_kind))._field_kind=(*(_174317_tc))._method_check_decl((*((*(_20cba60d6_f))._field_kind))._field_decl);
				}
				_iter_next_5302503968:;
				++it;
				goto _iter_begin_5302503968;
			}
			_iter_end_5302503968:;
		}
	}
	return _174059_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_decl_methods(jule::Ptr<_20c496047_Struct>& _178250_s) {
	jule::Bool _178264_ok = jule::Bool();
	{
		auto &expr = (*(_178250_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_5302510896:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_m = *it;
			{
				if ((!((*(this->self))._method_check_fn_decl_types(_20cba60d6_m)))) {
					_178264_ok = false;
					return _178264_ok;
				}
			}
			_iter_next_5302510896:;
			++it;
			goto _iter_begin_5302510896;
		}
		_iter_end_5302510896:;
	}
	_178264_ok = true;
	return _178264_ok;
}



inline void _20cba60d6_Sema::_method_check_struct_decl(jule::Ptr<_20c496047_Struct>& _179142_s) {
	if (_20c47803a_is_ignore_ident((*(_179142_s))._field_ident)) {
		(*(this->self))._method_push_err((*(_179142_s))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_179142_s)),(*(_179142_s))._field_ident,(*(_179142_s))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_179142_s))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_179142_s))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_179142_s))._field_directives,jule::Any(_179142_s));
	(*(_179142_s))._field_sema=this->self;
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_179142_s))._field_generics)))) {
			_case_begin_5302525312:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_fields(_179142_s)))) {
			_case_begin_5302525424:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_decl_methods(_179142_s)))) {
			_case_begin_5302525536:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_impls(_179142_s)))) {
			_case_begin_5302525648:;
			{
				return;
			}
		}
		_match_end_5302516112:;
	}
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_decls(void) {
	jule::Bool _181140_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5302534144:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20cba60d6_s = *it;
			{
				(*(this->self))._method_check_struct_decl(_20cba60d6_s);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_181140_ok = false;
					return _181140_ok;
				}
			}
			_iter_next_5302534144:;
			++it;
			goto _iter_begin_5302534144;
		}
		_iter_end_5302534144:;
	}
	_181140_ok = true;
	return _181140_ok;
}



inline void _20cba60d6_Sema::_method_check_fn_decl(jule::Ptr<_20c819332_Fn>& _182438_f) {
	if (_20c47803a_is_ignore_ident((*(_182438_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_182438_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_182438_f)),(*(_182438_f))._field_ident,(*(_182438_f))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_182438_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_182438_f))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_182438_f))._field_directives,jule::Any(_182438_f));
	(*(_182438_f))._field_sema=this->self;
	(*(this->self))._method_check_fn_decl_prototype(_182438_f);
}



inline jule::Bool _20cba60d6_Sema::_method_check_fn_decls(void) {
	jule::Bool _183936_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5302552416:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_f = *it;
			{
				(*(this->self))._method_check_fn_decl(_20cba60d6_f);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_183936_ok = false;
					return _183936_ok;
				}
			}
			_iter_next_5302552416:;
			++it;
			goto _iter_begin_5302552416;
		}
		_iter_end_5302552416:;
	}
	_183936_ok = true;
	return _183936_ok;
}



inline void _20cba60d6_Sema::_method_push_cycle_error(jule::Ptr<_20c496047_Struct>& _185132_st1,jule::Ptr<_20c496047_Struct>& _185147_st2,jule::Str& _185166_message) {
	
	jule::Str _185413_refers_to = _20a25b99c_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_185132_st1))._field_ident),jule::Any((*(_185147_st2))._field_ident)}));
	_185166_message=((_20a405ddd_repeat(jule::Str(" ", 1),4LL) + _185413_refers_to) + jule::Str("\n", 1)) + _185166_message;
}



inline jule::Bool _20cba60d6_Sema::_method_check_cross_cycle(jule::Ptr<_20c496047_Struct>& _185833_st1,jule::Ptr<_20c496047_Struct>& _185848_st2,jule::Str& _185867_message) {
	{
		auto &expr = (*(_185848_st2))._field_uses;
		auto it = expr.begin();
		_iter_begin_5302566848:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> &_20cba60d6_u = *it;
			{
				if (_20cba60d6_u == _185833_st1) {
					(*this)._method_push_cycle_error(_185848_st2,_20cba60d6_u,_185867_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_185833_st1,_20cba60d6_u,_185867_message)))) {
					(*this)._method_push_cycle_error(_185848_st2,_20cba60d6_u,_185867_message);
					return false;
				}
			}
			_iter_next_5302566848:;
			++it;
			goto _iter_begin_5302566848;
		}
		_iter_end_5302566848:;
	}
	return true;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _187453_derive,jule::Ptr<_20c496047_Struct>& _187467_st1,jule::Ptr<_20d4a6c9e_TypeKind>& _187486_k) {
	jule::Bool _1874102_ok = jule::Bool();
	jule::Ptr<_20c496047_Struct> _187517_st2 = _20d4a6c9e_get_struct_from_kind(_187486_k);
	if (_187517_st2 == nullptr) {
		_1874102_ok = true;
		return _1874102_ok;
	}
	if (_187467_st1 == _187517_st2) {
		(*this)._method_push_err((*(_187467_st1))._field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>({jule::Any(_187453_derive),jule::Any((*(_187467_st1))._field_ident)}));
		_1874102_ok = false;
		return _1874102_ok;
	}
	jule::Str _188717_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_187467_st1,_187517_st2,_188717_message)))) {
		jule::Str _189021_err_msg = _188717_message;
		_188717_message=jule::Str();
		(*this)._method_push_cycle_error(_187467_st1,_187517_st2,_188717_message);
		_189021_err_msg=_189021_err_msg + _188717_message;
		(*this)._method_push_err((*(_187467_st1))._field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>({jule::Any(_187453_derive),jule::Any(_189021_err_msg)}));
		_1874102_ok = false;
		return _1874102_ok;
	}
	_1874102_ok = true;
	return _1874102_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_ins_derive_clone(jule::Ptr<_20c496047_StructIns> _190152_st) {
	jule::Bool _190170_ok = jule::Bool();
	if ((!((*((*(_190152_st))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
		_190170_ok = true;
		return _190170_ok;
	}
	{
		auto &expr = (*(_190152_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_5302591264:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_FieldIns> _20cba60d6_f = *it;
			{
				if (((*(_20cba60d6_f))._field_kind == nullptr) || (!((*((*(_20cba60d6_f))._field_kind))._method_mutable()))) {
					goto _iter_next_5302591264;
				}
				if ((!((*((*(_20cba60d6_f))._field_kind))._method_supports_cloning()))) {
					(*this)._method_push_err((*((*(_190152_st))._field_decl))._field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>({jule::Any((*((*(_20cba60d6_f))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_190170_ok = false;
					return _190170_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),(*(_190152_st))._field_decl,(*(_20cba60d6_f))._field_kind)))) {
					_190170_ok = false;
					return _190170_ok;
				}
			}
			_iter_next_5302591264:;
			++it;
			goto _iter_begin_5302591264;
		}
		_iter_end_5302591264:;
	}
	_190170_ok = true;
	return _190170_ok;
}



inline jule::Bool _20cba60d6_Sema::_method_check_struct_derive_clone(jule::Ptr<_20c496047_Struct>& _192449_st) {
	return (*this)._method_check_struct_ins_derive_clone((*(_192449_st))._method_instance());
}



inline jule::Bool _20cba60d6_Sema::_method_check_file_derives(void) {
	jule::Bool _192839_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5302606992:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20cba60d6_st = *it;
			{
				_192839_ok=(*this)._method_check_struct_derive_clone(_20cba60d6_st);
				if ((!(_192839_ok))) {
					goto _iter_end_5302606992;
				}
			}
			_iter_next_5302606992:;
			++it;
			goto _iter_begin_5302606992;
		}
		_iter_end_5302606992:;
	}
	return _192839_ok;
}



inline void _20cba60d6_Sema::_method_check_package_derives(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_5302610416:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*this)._method_set_current_file(_20cba60d6_f);
				jule::Bool _194317_ok = (*this)._method_check_file_derives();
				if ((!(_194317_ok))) {
					return;
				}
			}
			_iter_next_5302610416:;
			++it;
			goto _iter_begin_5302610416;
		}
		_iter_end_5302610416:;
	}
}



inline void _20cba60d6_Sema::_method_check_package_decls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302615504:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				if ((!((*(this->self))._method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_5302615504:;
			++it;
			goto _iter_begin_5302615504;
		}
		_iter_end_5302615504:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302619488:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				if ((!((*(this->self))._method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_5302619488:;
			++it;
			goto _iter_begin_5302619488;
		}
		_iter_end_5302619488:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302622816:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				if ((!((*(this->self))._method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_5302622816:;
			++it;
			goto _iter_begin_5302622816;
		}
		_iter_end_5302622816:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302626208:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				if ((!((*(this->self))._method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_5302626208:;
			++it;
			goto _iter_begin_5302626208;
		}
		_iter_end_5302626208:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302629536:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				if ((!((*(this->self))._method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_5302629536:;
			++it;
			goto _iter_begin_5302629536;
		}
		_iter_end_5302629536:;
	}
	(*(this->self))._method_check_package_derives();
}



inline void _20cba60d6_Sema::_method_check_data_for_type_inference(jule::Ptr<_20d162d45_Data>& _199149_d,_20c47803a_Token& _199160_err_token) {
	{
		
		if ((*(_199149_d))._method_is_nil()) {
			_case_begin_5302636064:;
			{
				(*this)._method_push_err(_199160_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if ((*(_199149_d))._method_is_void()) {
			_case_begin_5302636176:;
			{
				(*this)._method_push_err(_199160_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if ((*((*(_199149_d))._field_kind))._field_variadic) {
			_case_begin_5302636288:;
			{
				(*this)._method_push_err(_199160_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_5302635856:;
	}
}



inline void _20cba60d6_Sema::_method_check_var(jule::Ptr<_20cdc725d_Var>& _200434_v) {
	if ((*(_200434_v))._field_cpp_linked) {
		return;
	}
	if ((*(_200434_v))._method_is_type_inferred()) {
		(*(_200434_v))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),(*((*((*(_200434_v))._field_value))._field_data))._field_kind));
		(*(this->self))._method_check_data_for_type_inference((*((*(_200434_v))._field_value))._field_data,(*((*((*(_200434_v))._field_value))._field_expr))._field_token);
	} else {
		jule::Ptr<_20d4a6c9e_Arr> _201621_arr = (*((*((*(_200434_v))._field_kind))._field_kind))._method_arr();
		if (_201621_arr != nullptr) {
			if ((*(_201621_arr))._field_auto) {
				jule::Ptr<_20d4a6c9e_Arr> _201925_data_arr = (*((*((*((*(_200434_v))._field_value))._field_data))._field_kind))._method_arr();
				if (_201925_data_arr != nullptr) {
					(*(_201621_arr))._field_n=(*(_201925_data_arr))._field_n;
				}
			}
		}
		(*(this->self))._method_check_assign_type((*(_200434_v))._field_reference,(*((*(_200434_v))._field_kind))._field_kind,(*((*(_200434_v))._field_value))._field_data,(*((*((*(_200434_v))._field_value))._field_expr))._field_token);
	}
	if ((*(_200434_v))._field_reference && (!(_20d4a6c9e_is_valid_for_ref((*((*(_200434_v))._field_kind))._field_kind)))) {
		(*(this->self))._method_push_err((*(_200434_v))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*((*(_200434_v))._field_kind))._field_kind))._method_to_str())}));
	}
	(*(this->self))._method_check_validity_for_init_expr((*(_200434_v))._field_mutable,(*(_200434_v))._field_reference,(*((*(_200434_v))._field_kind))._field_kind,(*((*(_200434_v))._field_value))._field_data,(*((*((*(_200434_v))._field_value))._field_expr))._field_token);
	if ((*(_200434_v))._field_constant) {
		if ((!((*((*((*(_200434_v))._field_value))._field_data))._method_is_const()))) {
			(*(this->self))._method_push_err((*((*((*(_200434_v))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		}
	} else {
		(*((*((*(_200434_v))._field_value))._field_data))._field_constant=nullptr;
	}
	if ((*((*((*(_200434_v))._field_kind))._field_kind))._method_tup() != nullptr) {
		(*((*(_200434_v))._field_kind))._field_kind=nullptr;
	}
}



inline void _20cba60d6_Sema::_method_check_type_var(jule::Ptr<_20cdc725d_Var>& _205439_decl,jule::Trait<_20d6751d1_Lookup> _205455_l) {
	if ((*(_205439_decl))._field_cpp_linked || (!((*(_205439_decl))._method_is_initialized()))) {
		return;
	}
	jule::Ptr<_20d162d45_Eval> _205917_eval = ((((*(_205439_decl))._field_kind != nullptr)) ? ((*(this->self))._method_evalpd(_205455_l,(*((*(_205439_decl))._field_kind))._field_kind,_205439_decl)) : ((*(this->self))._method_evalpd(_205455_l,nullptr,_205439_decl)));
	(*(_205917_eval))._field_immutable=(!((*(_205439_decl))._field_mutable));
	(*((*(_205439_decl))._field_value))._field_data=(*(_205917_eval))._method_eval_expr((*((*(_205439_decl))._field_value))._field_expr);
	if ((*((*(_205439_decl))._field_value))._field_data == nullptr) {
		return;
	}
	(*(this->self))._method_check_var(_205439_decl);
}



inline void _20cba60d6_Sema::_method_check_global_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_5302707520:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> _20cba60d6_decl = *it;
			{
				if (((*(_20cba60d6_decl))._method_is_initialized() && ((*((*(_20cba60d6_decl))._field_value))._field_data == nullptr)) || ((*(_20cba60d6_decl))._method_is_type_inferred() && ((*((*(_20cba60d6_decl))._field_kind))._field_kind == nullptr))) {
					(*(this->self))._method_check_type_var(_20cba60d6_decl,this->self);
				}
			}
			_iter_next_5302707520:;
			++it;
			goto _iter_begin_5302707520;
		}
		_iter_end_5302707520:;
	}
}



inline void _20cba60d6_Sema::_method_check_type_method(jule::Ptr<_20c496047_StructIns>& _208342_strct,jule::Ptr<_20c819332_Fn>& _208366_f) {
	if ((*(_208366_f))._field_cpp_linked) {
		return;
	}
	if ((*(_208366_f))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_208366_f))._field_instances.len() == 0LL) {
		jule::Ptr<_20c819332_FnIns> _209421_ins = (*(_208366_f))._method_instance();
		(*(_209421_ins))._field_owner=_208342_strct;
		(*(_208366_f))._method_append_instance(_209421_ins);
		(*(this->self))._method_reload_fn_ins_types(_209421_ins);
		(*(_209421_ins))._field_reloaded=true;
	}
	{
		auto &expr = (*(_208366_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5302717952:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_FnIns> _20cba60d6_ins = *it;
			{
				if ((*((*(_20cba60d6_ins))._field_scope))._field_stmts.len() > 0LL) {
					goto _iter_next_5302717952;
				}
				(*(this->self))._method_check_fn_ins(_20cba60d6_ins);
			}
			_iter_next_5302717952:;
			++it;
			goto _iter_begin_5302717952;
		}
		_iter_end_5302717952:;
	}
}



inline void _20cba60d6_Sema::_method_check_field_defaults(jule::Ptr<_20c496047_StructIns>& _211045_ins) {
	jule::Ptr<_20d162d45_Eval> _211117_eval = (*(this->self))._method_eval(this->self);
	{
		auto &expr = (*(_211045_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_5302730720:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_FieldIns> _20cba60d6_f = *it;
			{
				if ((*((*(_20cba60d6_f))._field_decl))._field_default == nullptr) {
					goto _iter_next_5302730720;
				}
				(*(_211117_eval))._field_prefix=(*(_20cba60d6_f))._field_kind;
				(*(_211117_eval))._field_field=_20cba60d6_f;
				(*(_20cba60d6_f))._field_default=(*(_211117_eval))._method_eval_expr((*((*(_20cba60d6_f))._field_decl))._field_default);
				if ((*(_20cba60d6_f))._field_default == nullptr) {
					goto _iter_next_5302730720;
				}
				
				(*(this->self))._method_check_assign_type(false,(*(_20cba60d6_f))._field_kind,(*(_20cba60d6_f))._field_default,(*((*((*(_20cba60d6_f))._field_decl))._field_default))._field_token);
			}
			_iter_next_5302730720:;
			++it;
			goto _iter_begin_5302730720;
		}
		_iter_end_5302730720:;
	}
}



inline void _20cba60d6_Sema::_method_check_type_struct(jule::Ptr<_20c496047_Struct>& _213242_strct) {
	if ((*(_213242_strct))._field_cpp_linked) {
		return;
	}
	if ((*(_213242_strct))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_213242_strct))._field_instances.len() == 0LL) {
		jule::Ptr<_20c496047_StructIns> _214321_ins = (*(_213242_strct))._method_instance();
		(*(_214321_ins))._field_checked=true;
		(*(_213242_strct))._method_append_instance(_214321_ins);
	}
	{
		auto &expr = (*(_213242_strct))._field_instances;
		auto it = expr.begin();
		_iter_begin_5302744656:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_StructIns> _20cba60d6_ins = *it;
			{
				(*(this->self))._method_check_field_defaults(_20cba60d6_ins);
				{
					auto &expr = (*(_20cba60d6_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_5302751056:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Fn> _20cba60d6_f = *it;
						{
							(*(this->self))._method_check_type_method(_20cba60d6_ins,_20cba60d6_f);
						}
						_iter_next_5302751056:;
						++it;
						goto _iter_begin_5302751056;
					}
					_iter_end_5302751056:;
				}
			}
			_iter_next_5302744656:;
			++it;
			goto _iter_begin_5302744656;
		}
		_iter_end_5302744656:;
	}
}



inline void _20cba60d6_Sema::_method_check_struct_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5302754064:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20cba60d6_s = *it;
			{
				(*(this->self))._method_check_type_struct(_20cba60d6_s);
			}
			_iter_next_5302754064:;
			++it;
			goto _iter_begin_5302754064;
		}
		_iter_end_5302754064:;
	}
}



inline void _20cba60d6_Sema::_method_check_rets(jule::Ptr<_20c819332_FnIns>& _216234_f) {
	if ((*((*(_216234_f))._field_decl))._method_is_void()) {
		return;
	}
	jule::Bool _216713_ok = _20cba60d6_has_ret((*(_216234_f))._field_scope);
	if ((!(_216713_ok))) {
		(*this)._method_push_err((*((*(_216234_f))._field_decl))._field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	}
}



inline void _20cba60d6_Sema::_method_check_fn_ins_sc(jule::Ptr<_20c819332_FnIns>& _217339_f,jule::Ptr<_20cb4d853_ScopeChecker>& _217355_sc) {
	if ((*((*(_217339_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _217817_vars = _20cba60d6_build_ret_vars(_217339_f);
	(*((*(_217355_sc))._field_table))._field_vars=jule::append((*((*(_217355_sc))._field_table))._field_vars,_217817_vars);
	(*((*(_217355_sc))._field_table))._field_vars=jule::append((*((*(_217355_sc))._field_table))._field_vars,_20cba60d6_build_param_vars(_217339_f));
	(*((*(_217355_sc))._field_table))._field_type_aliases=jule::append((*((*(_217355_sc))._field_table))._field_type_aliases,_20cba60d6_build_generic_type_aliases(_217339_f));
	(*(_217355_sc))._method_check((*((*(_217339_f))._field_decl))._field_scope,(*(_217339_f))._field_scope);
	if (_217817_vars.len() > 0LL) {
		jule::Slice<jule::Any> _218821_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*((*(_217339_f))._field_scope))._field_stmts.len() + _217817_vars.len()));
		{
			auto &expr = _217817_vars;
			auto it = expr.begin();
			_iter_begin_5302776720:;
			if (it != expr.end()) {
				jule::Ptr<_20cdc725d_Var> _20cba60d6_v = *it;
				{
					_218821_stmts.push(jule::Any(_20cba60d6_v));
				}
				_iter_next_5302776720:;
				++it;
				goto _iter_begin_5302776720;
			}
			_iter_end_5302776720:;
		}
		_218821_stmts=jule::append(_218821_stmts,(*((*(_217339_f))._field_scope))._field_stmts);
		(*((*(_217339_f))._field_scope))._field_stmts=_218821_stmts;
	}
	(*this)._method_check_rets(_217339_f);
}



inline void _20cba60d6_Sema::_method_check_fn_ins(jule::Ptr<_20c819332_FnIns>& _220037_f) {
	if ((*((*(_220037_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Ptr<_20d0c86e5_SymbolTable> _220517_old = (*((*((*(_220037_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_220037_f))._field_decl))._field_sema))._method_set_current_file(_220517_old);
	});
	jule::Ptr<_20d0c86e5_SymbolTable> _220717_file = _20cba60d6_find_file((*((*((*(_220037_f))._field_decl))._field_sema))._field_files,(*((*(_220037_f))._field_decl))._field_token._field_file);
	if (_220717_file != nullptr) {
		(*((*((*(_220037_f))._field_decl))._field_sema))._method_set_current_file(_220717_file);
	}
	jule::Ptr<_20cb4d853_ScopeChecker> _221217_sc = _20cb4d853_new_scope_checker((*((*(_220037_f))._field_decl))._field_sema,_220037_f);
	(*(this->self))._method_check_fn_ins_sc(_220037_f,_221217_sc);
	if ((*((*(_220037_f))._field_decl))._field_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*((*((*(_220037_f))._field_decl))._field_sema))._field_errors);
		(*((*((*(_220037_f))._field_decl))._field_sema))._field_errors=nullptr;
	}
}



inline void _20cba60d6_Sema::_method_check_type_fn(jule::Ptr<_20c819332_Fn>& _222138_f) {
	if ((*(_222138_f))._field_cpp_linked) {
		return;
	}
	if ((*(_222138_f))._field_generics.len() > 0LL) {
		return;
	}
	{
		auto &expr = (*(_222138_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5302803184:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_FnIns> _20cba60d6_ins = *it;
			{
				(*(this->self))._method_check_fn_ins(_20cba60d6_ins);
			}
			_iter_next_5302803184:;
			++it;
			goto _iter_begin_5302803184;
		}
		_iter_end_5302803184:;
	}
}



inline void _20cba60d6_Sema::_method_check_test_fn(jule::Ptr<_20c819332_FnIns>& _223637_f) {
	if ((*((*(_223637_f))._field_decl))._field_public) {
		(*this)._method_push_err((*((*(_223637_f))._field_decl))._field_token,jule::Str("test function cannot be public", 30),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("remove \"pub\" modifier", 21),jule::Slice<jule::Any>());
		return;
	}
	if (((*(_223637_f))._field_params.len() != 1LL) || ((*(_223637_f))._field_result != nullptr)) {
		(*this)._method_push_err((*((*(_223637_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20d4a6c9e_Sptr> _224917_sptr = (*((*((*(_223637_f))._field_params[0LL]))._field_kind))._method_sptr();
	if (_224917_sptr == nullptr) {
		(*this)._method_push_err((*((*(_223637_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20c496047_StructIns> _225613_s = (*((*(_224917_sptr))._field_elem))._method_strct();
	if ((_225613_s == nullptr) || (!(_20cba58cc_is_std_package((*((*((*(_225613_s))._field_decl))._field_token._field_file))._method_path(),jule::Str("testing", 7))))) {
		(*this)._method_push_err((*((*(_223637_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
}



inline void _20cba60d6_Sema::_method_precheck_type_fn(jule::Ptr<_20c819332_Fn>& _226441_f) {
	if ((*(_226441_f))._field_cpp_linked) {
		return;
	}
	if ((*(_226441_f))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_226441_f))._field_instances.len() == 0LL) {
		jule::Ptr<_20c819332_FnIns> _227521_ins = (*(_226441_f))._method_instance();
		(*(_226441_f))._field_instances = jule::alloc_for_append((*(_226441_f))._field_instances,1);(*(_226441_f))._field_instances.push(_227521_ins);
		(*(this->self))._method_reload_fn_ins_types(_227521_ins);
		(*(_227521_ins))._field_reloaded=true;
		if (_20d4a6c9e_has_directive((*(_226441_f))._field_directives,jule::Str("test", 4))) {
			(*(this->self))._method_check_test_fn(_227521_ins);
		}
	}
}



inline void _20cba60d6_Sema::_method_precheck_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5302839808:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_decl = *it;
			{
				(*(this->self))._method_precheck_type_fn(_20cba60d6_decl);
			}
			_iter_next_5302839808:;
			++it;
			goto _iter_begin_5302839808;
		}
		_iter_end_5302839808:;
	}
}



inline void _20cba60d6_Sema::_method_check_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5302843616:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_decl = *it;
			{
				(*(this->self))._method_check_type_fn(_20cba60d6_decl);
			}
			_iter_next_5302843616:;
			++it;
			goto _iter_begin_5302843616;
		}
		_iter_end_5302843616:;
	}
}



inline void _20cba60d6_Sema::_method_check_package_types(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302847056:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				(*(this->self))._method_check_global_types();
			}
			_iter_next_5302847056:;
			++it;
			goto _iter_begin_5302847056;
		}
		_iter_end_5302847056:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302847872:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				(*(this->self))._method_precheck_fn_types();
			}
			_iter_next_5302847872:;
			++it;
			goto _iter_begin_5302847872;
		}
		_iter_end_5302847872:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302850832:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				(*(this->self))._method_check_fn_types();
			}
			_iter_next_5302850832:;
			++it;
			goto _iter_begin_5302850832;
		}
		_iter_end_5302850832:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302853808:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_f = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_f);
				(*(this->self))._method_check_struct_types();
			}
			_iter_next_5302853808:;
			++it;
			goto _iter_begin_5302853808;
		}
		_iter_end_5302853808:;
	}
}



inline void _20cba60d6_Sema::_method_set_file_sema_fields(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5302860640:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cba60d6_f = *it;
			{
				(*(_20cba60d6_f))._field_sema=this->self;
			}
			_iter_next_5302860640:;
			++it;
			goto _iter_begin_5302860640;
		}
		_iter_end_5302860640:;
	}
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5302861344:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20cba60d6_st = *it;
			{
				(*(_20cba60d6_st))._field_sema=this->self;
			}
			_iter_next_5302861344:;
			++it;
			goto _iter_begin_5302861344;
		}
		_iter_end_5302861344:;
	}
}



inline void _20cba60d6_Sema::_method_set_sema_fields(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5302865568:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_file = *it;
			{
				(*(this->self))._method_set_current_file(_20cba60d6_file);
				(*(this->self))._method_set_file_sema_fields();
			}
			_iter_next_5302865568:;
			++it;
			goto _iter_begin_5302865568;
		}
		_iter_end_5302865568:;
	}
}



inline void _20cba60d6_Sema::_method_check(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _234130_files) {
	(*(this->self))._field_files=_234130_files;
	(*(this->self))._method_check_imports();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_enums();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_set_sema_fields();
	(*(this->self))._method_impl_impls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_package_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _20cba60d6_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cdc725d_IterRelation &_Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20cdc725d_Var> _20d058ca2_RangeChecker::_method_build_var(jule::Ptr<_20c476dc4_VarDecl>& _90129_decl) {
	jule::Ptr<_20cdc725d_Var> _90217_v = _20caa3115_build_var(_90129_decl);
	return _90217_v;
}



inline void _20d058ca2_RangeChecker::_method_set_size_key(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _20c47803a_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3))))));
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5303350864:;
			{
				(*((*((*this)._field_kind))._field_key_a))._field_iter_relation=jule::new_struct<_20cdc725d_IterRelation>(new( std::nothrow ) _20cdc725d_IterRelation((*((*this)._field_d))._field_model.operator jule::Ptr<_20cdc725d_Var>()));
			}
		}
		_match_end_5303350784:;
	}
}



inline void _20d058ca2_RangeChecker::_method_check_range_expr_validity(jule::Ptr<_20d162d45_Data>& _93249_d,jule::Ptr<_20cdc725d_Var>& _93260_key,jule::Ptr<_20d4a6c9e_TypeKind>& _93276_k) {
	jule::Bool _93317__mut = (*(_93260_key))._field_mutable;
	if (_93317__mut && (!((*(_93276_k))._method_mutable()))) {
		_93317__mut=false;
	}
	(*((*((*this)._field_sc))._field_s))._method_check_validity_for_init_expr(_93317__mut,(*(_93260_key))._field_reference,(*((*(_93260_key))._field_kind))._field_kind,_93249_d,(*((*this)._field_rang))._field_in_token);
}



inline void _20d058ca2_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _20c47803a_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_20d4a6c9e_Slc> _95117_slc = (*((*((*this)._field_d))._field_kind))._method_slc();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),(*(_95117_slc))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_95117_slc))._field_elem);
}



inline void _20d058ca2_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _20c47803a_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_20d4a6c9e_Arr> _96417_arr = (*((*((*this)._field_d))._field_kind))._method_arr();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),(*(_96417_arr))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_96417_arr))._field_elem);
}



inline void _20d058ca2_RangeChecker::_method_check_map_key_a(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _20c47803a_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	jule::Ptr<_20d4a6c9e_Map> _97617_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),(*(_97617_m))._field_key));
	jule::Ptr<_20d162d45_Data> _98017_d = jule::new_ptr<_20d162d45_Data>((*((*this)._field_d)));
	(*(_98017_d))._field_kind=(*(_97617_m))._field_key;
	(*this)._method_check_range_expr_validity(_98017_d,(*((*this)._field_kind))._field_key_a,(*(_97617_m))._field_key);
}



inline void _20d058ca2_RangeChecker::_method_check_map_key_b(void) {
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _20c47803a_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_20d4a6c9e_Map> _99117_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),(*(_99117_m))._field_val));
	jule::Ptr<_20d162d45_Data> _99517_d = jule::new_ptr<_20d162d45_Data>((*((*this)._field_d)));
	(*(_99517_d))._field_kind=(*(_99117_m))._field_val;
	(*this)._method_check_range_expr_validity(_99517_d,(*((*this)._field_kind))._field_key_b,(*(_99117_m))._field_val);
}



inline void _20d058ca2_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _20d058ca2_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _20c47803a_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _20d058ca2_RangeChecker::_method_check(void) {
	{
		
		if ((*((*((*this)._field_d))._field_kind))._field_variadic) {
			_case_begin_5303420624:;
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_5303421792:;
			{
				(*this)._method_check_slice();
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_5303421888:;
			{
				(*this)._method_check_array();
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_map() != nullptr) {
			_case_begin_5303417584:;
			{
				(*this)._method_check_map();
				return true;
			}
		}
		else {
			_case_begin_5303417280:;
			{
				jule::Ptr<_20d4a6c9e_Prim> _103817_prim = (*((*((*this)._field_d))._field_kind))._method_prim();
				if ((_103817_prim != nullptr) && (*(_103817_prim))._method_is_str()) {
					(*this)._method_check_str();
					return true;
				}
			}
		}
		_match_end_5303417184:;
	}
	(*((*((*this)._field_sc))._field_s))._method_push_err((*((*this)._field_rang))._field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20d0c86e5_SymbolTable::_method_find_package(jule::Str _2535_ident) {
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_5303496640:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20d0c86e5_pkg = *it;
			{
				if ((*(_20d0c86e5_pkg))._field_ident == _2535_ident) {
					return _20d0c86e5_pkg;
				}
			}
			_iter_next_5303496640:;
			++it;
			goto _iter_begin_5303496640;
		}
		_iter_end_5303496640:;
	}
	return nullptr;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20d0c86e5_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)> _3737_selector) {
	if (_3737_selector == nullptr) {
		return nullptr;
	}
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_5303497520:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20d0c86e5_pkg = *it;
			{
				if (_3737_selector(_20d0c86e5_pkg)) {
					return _20d0c86e5_pkg;
				}
			}
			_iter_next_5303497520:;
			++it;
			goto _iter_begin_5303497520;
		}
		_iter_end_5303497520:;
	}
	return nullptr;
}



inline jule::Ptr<_20cdc725d_Var> _20d0c86e5_SymbolTable::_method_find_var(jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return (*this)._method___find_var(_5231_ident,_5243_cpp_linked,false);
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20d0c86e5_SymbolTable::_method_find_type_alias(jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return (*this)._method___find_type_alias(_5838_ident,_5850_cpp_linked,false);
}



inline jule::Ptr<_20c496047_Struct> _20d0c86e5_SymbolTable::_method_find_struct(jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_5303508976:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20d0c86e5_s = *it;
			{
				if (((*(_20d0c86e5_s))._field_ident == _6434_ident) && ((*(_20d0c86e5_s))._field_cpp_linked == _6446_cpp_linked)) {
					return _20d0c86e5_s;
				}
			}
			_iter_next_5303508976:;
			++it;
			goto _iter_begin_5303508976;
		}
		_iter_end_5303508976:;
	}
	return nullptr;
}



inline jule::Ptr<_20c819332_Fn> _20d0c86e5_SymbolTable::_method_find_fn(jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_5303513248:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20d0c86e5_f = *it;
			{
				if (((*(_20d0c86e5_f))._field_ident == _7530_ident) && ((*(_20d0c86e5_f))._field_cpp_linked == _7542_cpp_linked)) {
					return _20d0c86e5_f;
				}
			}
			_iter_next_5303513248:;
			++it;
			goto _iter_begin_5303513248;
		}
		_iter_end_5303513248:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb471a9_Trait> _20d0c86e5_SymbolTable::_method_find_trait(jule::Str _8633_ident) {
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_5303517008:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> _20d0c86e5_t = *it;
			{
				if ((*(_20d0c86e5_t))._field_ident == _8633_ident) {
					return _20d0c86e5_t;
				}
			}
			_iter_next_5303517008:;
			++it;
			goto _iter_begin_5303517008;
		}
		_iter_end_5303517008:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb4c70e_Enum> _20d0c86e5_SymbolTable::_method_find_enum(jule::Str _9732_ident) {
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_5303517696:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_Enum> _20d0c86e5_e = *it;
			{
				if ((*(_20d0c86e5_e))._field_ident == _9732_ident) {
					return _20d0c86e5_e;
				}
			}
			_iter_next_5303517696:;
			++it;
			goto _iter_begin_5303517696;
		}
		_iter_end_5303517696:;
	}
	return nullptr;
}



inline jule::Ptr<_20cdc725d_Var> _20d0c86e5_SymbolTable::_method___find_var(jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I64 _11021_i = (*this)._field_vars.len() - 1LL;
		for (; _11021_i >= 0LL; (_11021_i)--) {
			{
				jule::Ptr<_20cdc725d_Var> _11225_v = (*this)._field_vars[_11021_i];
				if (((*(_11225_v))._field_ident == _10829_ident) && ((*(_11225_v))._field_cpp_linked == _10841_cpp_linked)) {
					return _11225_v;
				}
			}
		_iter_next_5303525360:;
		}
		_iter_end_5303525360:;
	} else {
		{
			auto &expr = (*this)._field_vars;
			auto it = expr.begin();
			_iter_begin_5303524272:;
			if (it != expr.end()) {
				jule::Ptr<_20cdc725d_Var> _20d0c86e5_v = *it;
				{
					if (((*(_20d0c86e5_v))._field_ident == _10829_ident) && ((*(_20d0c86e5_v))._field_cpp_linked == _10841_cpp_linked)) {
						return _20d0c86e5_v;
					}
				}
				_iter_next_5303524272:;
				++it;
				goto _iter_begin_5303524272;
			}
			_iter_end_5303524272:;
		}
	}
	return nullptr;
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20d0c86e5_SymbolTable::_method___find_type_alias(jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I64 _12921_i = (*this)._field_type_aliases.len() - 1LL;
		for (; _12921_i >= 0LL; (_12921_i)--) {
			{
				jule::Ptr<_20d4a6c9e_TypeAlias> _13125_ta = (*this)._field_type_aliases[_12921_i];
				if (((*(_13125_ta))._field_ident == _12736_ident) && ((*(_13125_ta))._field_cpp_linked == _12748_cpp_linked)) {
					return _13125_ta;
				}
			}
		_iter_next_5303535104:;
		}
		_iter_end_5303535104:;
	} else {
		{
			auto &expr = (*this)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_5303534016:;
			if (it != expr.end()) {
				jule::Ptr<_20d4a6c9e_TypeAlias> _20d0c86e5_ta = *it;
				{
					if (((*(_20d0c86e5_ta))._field_ident == _12736_ident) && ((*(_20d0c86e5_ta))._field_cpp_linked == _12748_cpp_linked)) {
						return _20d0c86e5_ta;
					}
				}
				_iter_next_5303534016:;
				++it;
				goto _iter_begin_5303534016;
			}
			_iter_end_5303534016:;
		}
	}
	return nullptr;
}



inline jule::Any _20d0c86e5_SymbolTable::_method_def_by_ident(jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_5303540144:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> _20d0c86e5_v = *it;
			{
				if (((*(_20d0c86e5_v))._field_ident == _14831_ident) && ((*(_20d0c86e5_v))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_20d0c86e5_v);
				}
			}
			_iter_next_5303540144:;
			++it;
			goto _iter_begin_5303540144;
		}
		_iter_end_5303540144:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5303543136:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeAlias> _20d0c86e5_ta = *it;
			{
				if (((*(_20d0c86e5_ta))._field_ident == _14831_ident) && ((*(_20d0c86e5_ta))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_20d0c86e5_ta);
				}
			}
			_iter_next_5303543136:;
			++it;
			goto _iter_begin_5303543136;
		}
		_iter_end_5303543136:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_5303549008:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20d0c86e5_s = *it;
			{
				if (((*(_20d0c86e5_s))._field_ident == _14831_ident) && ((*(_20d0c86e5_s))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_20d0c86e5_s);
				}
			}
			_iter_next_5303549008:;
			++it;
			goto _iter_begin_5303549008;
		}
		_iter_end_5303549008:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_5303551680:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20d0c86e5_f = *it;
			{
				if (((*(_20d0c86e5_f))._field_ident == _14831_ident) && ((*(_20d0c86e5_f))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_20d0c86e5_f);
				}
			}
			_iter_next_5303551680:;
			++it;
			goto _iter_begin_5303551680;
		}
		_iter_end_5303551680:;
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_5303554928:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> _20d0c86e5_t = *it;
			{
				if ((*(_20d0c86e5_t))._field_ident == _14831_ident) {
					return jule::Any(_20d0c86e5_t);
				}
			}
			_iter_next_5303554928:;
			++it;
			goto _iter_begin_5303554928;
		}
		_iter_end_5303554928:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_5303555024:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_Enum> _20d0c86e5_e = *it;
			{
				if ((*(_20d0c86e5_e))._field_ident == _14831_ident) {
					return jule::Any(_20d0c86e5_e);
				}
			}
			_iter_next_5303555024:;
			++it;
			goto _iter_begin_5303555024;
		}
		_iter_end_5303555024:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _20d0c86e5_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_5303561344:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> &_20d0c86e5_v = *it;
			{
				if (((static_cast<jule::Uintptr>(_20d0c86e5_v) != _19534_itself) && ((*(_20d0c86e5_v))._field_ident == _19551_ident)) && ((*(_20d0c86e5_v))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5303561344:;
			++it;
			goto _iter_begin_5303561344;
		}
		_iter_end_5303561344:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5303561584:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeAlias> &_20d0c86e5_ta = *it;
			{
				if (((static_cast<jule::Uintptr>(_20d0c86e5_ta) != _19534_itself) && ((*(_20d0c86e5_ta))._field_ident == _19551_ident)) && ((*(_20d0c86e5_ta))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5303561584:;
			++it;
			goto _iter_begin_5303561584;
		}
		_iter_end_5303561584:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_5303563728:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> &_20d0c86e5_s = *it;
			{
				if (((static_cast<jule::Uintptr>(_20d0c86e5_s) != _19534_itself) && ((*(_20d0c86e5_s))._field_ident == _19551_ident)) && ((*(_20d0c86e5_s))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5303563728:;
			++it;
			goto _iter_begin_5303563728;
		}
		_iter_end_5303563728:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_5303569360:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> &_20d0c86e5_f = *it;
			{
				if (((static_cast<jule::Uintptr>(_20d0c86e5_f) != _19534_itself) && ((*(_20d0c86e5_f))._field_ident == _19551_ident)) && ((*(_20d0c86e5_f))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5303569360:;
			++it;
			goto _iter_begin_5303569360;
		}
		_iter_end_5303569360:;
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_5303571840:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> &_20d0c86e5_t = *it;
			{
				if ((static_cast<jule::Uintptr>(_20d0c86e5_t) != _19534_itself) && ((*(_20d0c86e5_t))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_5303571840:;
			++it;
			goto _iter_begin_5303571840;
		}
		_iter_end_5303571840:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_5303576112:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_Enum> &_20d0c86e5_e = *it;
			{
				if ((static_cast<jule::Uintptr>(_20d0c86e5_e) != _19534_itself) && ((*(_20d0c86e5_e))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_5303576112:;
			++it;
			goto _iter_begin_5303576112;
		}
		_iter_end_5303576112:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d0c86e5_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20d162d45_Data::_method_is_nil(void) {
	return (*((*this)._field_kind))._method_is_nil();
}



inline jule::Bool _20d162d45_Data::_method_is_void(void) {
	return (*((*this)._field_kind))._method_void();
}



inline jule::Bool _20d162d45_Data::_method_is_const(void) {
	return (*this)._field_constant != nullptr;
}



inline jule::Bool _20d162d45_Data::_method_good_operand(jule::Ptr<_20d162d45_Data>& _31836_other) {
	return ((((*((*(_31836_other))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_31836_other))._field_kind))._method_prim()))._method_is_any()))) && ((*((*(_31836_other))._field_kind))._method_trt() == nullptr)) && (!((*((*this)._field_kind))._method_is_nil()));
}







std::ostream &operator<<(std::ostream &_Stream, const _20d162d45_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d162d45_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _20d162d45_Eval::_method_push_err(_20c47803a_Token _34527_token,jule::Str _34541_fmt,jule::Slice<jule::Any> _34554_args) {
	(*((*this)._field_s))._method_push_err(_34527_token,_34541_fmt,_34554_args);
}



inline void _20d162d45_Eval::_method_push_suggestion(jule::Str _35034_fmt,jule::Slice<jule::Any> _35047_args) {
	(*((*this)._field_s))._method_push_suggestion(_35034_fmt,_35047_args);
}



inline void _20d162d45_Eval::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _20d162d45_Eval::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Bool _20d162d45_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _20d162d45_Eval::_method_is_global(void) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cba60d6_Sema>>()) {
			_case_begin_5303602016:;
			{
				return true;
			}
		}
		else {
			_case_begin_5303602480:;
			{
				return false;
			}
		}
		_match_end_5303602224:;
	}
}



inline void _20d162d45_Eval::_method_apply_numeric_prefix(jule::Ptr<_20d162d45_Data>& _36844_d) {
	if ((((_36844_d == nullptr) || ((*(_36844_d))._field_cast_kind != nullptr)) || (!((*(_36844_d))._method_is_const()))) || ((*((*(_36844_d))._field_kind))._method_prim() == nullptr)) {
		return;
	}
	if (((*this)._field_prefix == nullptr) || ((*((*this)._field_prefix))._method_prim() == nullptr)) {
		return;
	}
	jule::Str _37613_pk = (*((*((*this)._field_prefix))._method_prim()))._field_kind;
	{
		
		if (_20d853821_is_float(_37613_pk)) {
			_case_begin_5303613056:;
			{
				(*(_36844_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_36844_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_36844_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_20d853821_is_sig_int(_37613_pk)) {
			_case_begin_5303613152:;
			{
				if ((!(_20d058ca2_int_assignable(_37613_pk,_36844_d)))) {
					goto _match_end_5303612864;
				}
				(*(_36844_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_36844_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_36844_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_20d853821_is_unsig_int(_37613_pk)) {
			_case_begin_5303613264:;
			{
				if ((!(_20d058ca2_int_assignable(_37613_pk,_36844_d)))) {
					goto _match_end_5303612864;
				}
				(*(_36844_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_36844_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_36844_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_5303612864:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_nil(void) {
	jule::Ptr<_20d78b3e6_Const> _40217_constant = _20d78b3e6_Const::_static_method_new_nil();
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),nullptr)),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_40217_constant),false,_40217_constant));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_str(jule::Ptr<_20c476dc4_LitExpr>& _41323_l) {
	jule::Str _41417_s = (*(_41323_l))._field_value.slice(1LL,(*(_41323_l))._field_value.len() - 1LL);
	if (_20c47803a_is_raw_str((*(_41323_l))._field_value)) {
		_41417_s=_20d8c32b9_to_raw_str(static_cast<jule::Slice<jule::U8>>(_41417_s));
	} else {
		_41417_s=_20d8c32b9_to_str(static_cast<jule::Slice<jule::U8>>(_41417_s));
	}
	jule::Ptr<_20d78b3e6_Const> _42017_constant = _20d78b3e6_Const::_static_method_new_str(_41417_s);
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_42017_constant),false,_42017_constant));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_bool(jule::Ptr<_20c476dc4_LitExpr>& _43424_l) {
	jule::Ptr<_20d78b3e6_Const> _43517_constant = _20d78b3e6_Const::_static_method_new_bool((*(_43424_l))._field_value == jule::Str("true", 4));
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_43517_constant),false,_43517_constant));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_rune(jule::Ptr<_20c476dc4_LitExpr>& _44824_l) {
	
	
	jule::Str _45213_lt = (*(_44824_l))._field_value.slice(1LL,(*(_44824_l))._field_value.len() - 1LL);
	jule::I32 _45313_r = _20d8c32b9_to_rune(static_cast<jule::Slice<jule::U8>>(_45213_lt));
	jule::Ptr<_20d162d45_Data> _45417_data = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,_20d78b3e6_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_45313_r)))));
	jule::Bool _46113_is_ascii = _20d8c32b9_is_ascii(_45313_r);
	if (_46113_is_ascii) {
		(*(_45417_data))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u8", 2))));
	} else {
		(*(_45417_data))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3))));
	}
	(*(_45417_data))._field_model=jule::Any(jule::new_struct<_20ccedeed_RuneExprModel>(new( std::nothrow ) _20ccedeed_RuneExprModel(_45313_r)));
	(*(_45417_data))._field_is_rune=true;
	return _45417_data;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_float(jule::Ptr<_20c476dc4_LitExpr>& _47725_l) {
	
	jule::F64 _48014_f;
	std::tie(_48014_f,std::ignore) = _20b657ced_parse_float((*(_47725_l))._field_value,64LL);
	jule::Ptr<_20d78b3e6_Const> _48117_constant = _20d78b3e6_Const::_static_method_new_f64(_48014_f);
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_48117_constant),false,_48117_constant));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_int(jule::Ptr<_20c476dc4_LitExpr>& _49527_l) {
	
	jule::Str _49817_lit = (*(_49527_l))._field_value;
	jule::Int _49917_base = 0LL;
	{
		
		if (_20a405ddd_has_prefix(_49817_lit,jule::Str("0x", 2))) {
			_case_begin_5303674928:;
			{
				_49817_lit=_49817_lit.slice(2LL);
				_49917_base=16LL;
			}
		}
		else if (_20a405ddd_has_prefix(_49817_lit,jule::Str("0b", 2))) {
			_case_begin_5303675024:;
			{
				_49817_lit=_49817_lit.slice(2LL);
				_49917_base=2LL;
			}
		}
		else if (_20a405ddd_has_prefix(_49817_lit,jule::Str("0o", 2))) {
			_case_begin_5303674416:;
			{
				_49817_lit=_49817_lit.slice(2LL);
				_49917_base=8LL;
			}
		}
		else if ((_49817_lit[0LL] == '0') && (_49817_lit.len() > 1LL)) {
			_case_begin_5303674512:;
			{
				_49817_lit=_49817_lit.slice(1LL);
				_49917_base=8LL;
			}
		}
		else {
			_case_begin_5303673616:;
			{
				_49917_base=10LL;
			}
		}
		_match_end_5303673504:;
	}
	jule::Ptr<_20d162d45_Data> _52217_d = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_20d78b3e6_Const>()));
	jule::I64 _52814_sig;
	jule::Int _52819_err;
	std::tie(_52814_sig,_52819_err) = _20b6918b4_parse_int(_49817_lit,_49917_base,64LL);
	if (_52819_err == 0LLU) {
		(*(_52217_d))._field_constant=_20d78b3e6_Const::_static_method_new_i64(_52814_sig);
		(*(_52217_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3))));
	} else {
		jule::U64 _53518_unsig;
		jule::Int _53525_err;
		std::tie(_53518_unsig,_53525_err) = _20b6918b4_parse_uint(_49817_lit,_49917_base,64LL);
		if (_53525_err != 0LLU) {
			(*this)._method_push_err((*(_49527_l))._field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
		}
		(*(_52217_d))._field_constant=_20d78b3e6_Const::_static_method_new_u64(_53518_unsig);
		(*(_52217_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("uint", 4))));
	}
	(*(_52217_d))._field_model=jule::Any((*(_52217_d))._field_constant);
	return _52217_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_lit_num(jule::Ptr<_20c476dc4_LitExpr>& _55127_l) {
	{
		
		if (_20c47803a_is_float((*(_55127_l))._field_value)) {
			_case_begin_5303715488:;
			{
				return (*this)._method_lit_float(_55127_l);
			}
		}
		else {
			_case_begin_5303696976:;
			{
				return (*this)._method_lit_int(_55127_l);
			}
		}
		_match_end_5303696800:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_lit(jule::Ptr<_20c476dc4_LitExpr> _55827_lit) {
	{
		
		if ((*(_55827_lit))._method_is_nil()) {
			_case_begin_5303720448:;
			{
				return (*this)._method_lit_nil();
			}
		}
		else if (_20c47803a_is_str((*(_55827_lit))._field_value)) {
			_case_begin_5303720544:;
			{
				return (*this)._method_lit_str(_55827_lit);
			}
		}
		else if (_20c47803a_is_bool((*(_55827_lit))._field_value)) {
			_case_begin_5303719872:;
			{
				return (*this)._method_lit_bool(_55827_lit);
			}
		}
		else if (_20c47803a_is_rune((*(_55827_lit))._field_value)) {
			_case_begin_5303719968:;
			{
				return (*this)._method_lit_rune(_55827_lit);
			}
		}
		else if (_20c47803a_is_num((*(_55827_lit))._field_value)) {
			_case_begin_5303720064:;
			{
				return (*this)._method_lit_num(_55827_lit);
			}
		}
		else {
			_case_begin_5303718864:;
			{
				return nullptr;
			}
		}
		_match_end_5303718688:;
	}
}



inline jule::Any _20d162d45_Eval::_method_find_builtins(jule::Str _56932_ident) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cba58cc_ImportInfo>>()) {
			_case_begin_5303730144:;
			{
				jule::Any _57221_def = _20d162d45_find_builtins_import(_56932_ident,(*this)._field_lookup.operator jule::Ptr<_20cba58cc_ImportInfo>());
				if (_57221_def != nullptr) {
					return _57221_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cba60d6_Sema>>()) {
			_case_begin_5303730240:;
			{
				jule::Any _57821_def = _20d162d45_find_builtins_sema(_56932_ident,(*this)._field_lookup.operator jule::Ptr<_20cba60d6_Sema>());
				if (_57821_def != nullptr) {
					return _57821_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5303730336:;
			{
				jule::Any _58421_def = _20d162d45_find_builtins_sema(_56932_ident,(*((*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._field_s);
				if (_58421_def != nullptr) {
					return _58421_def;
				}
			}
		}
		_match_end_5303729744:;
	}
	return ((jule::Any((*this)._field_dis_builtin)) ? (jule::Any(nullptr)) : (_20d68a5ae_find_builtin_def(_56932_ident)));
}



inline jule::Any _20d162d45_Eval::_method_get_def(jule::Str _59326_ident,jule::Bool _59338_cpp_linked) {
	if ((!(_59338_cpp_linked))) {
		jule::Ptr<_20cb4c70e_Enum> _59521_enm = (*this)._field_lookup.get()._method_find_enum(_59326_ident);
		if (_59521_enm != nullptr) {
			return jule::Any(_59521_enm);
		}
	}
	jule::Ptr<_20cdc725d_Var> _60117_v = (*this)._field_lookup.get()._method_find_var(_59326_ident,_59338_cpp_linked);
	if (_60117_v != nullptr) {
		return jule::Any(_60117_v);
	}
	jule::Ptr<_20c819332_Fn> _60617_f = (*this)._field_lookup.get()._method_find_fn(_59326_ident,_59338_cpp_linked);
	if (_60617_f != nullptr) {
		return jule::Any(_60617_f);
	}
	jule::Ptr<_20c496047_Struct> _61117_s = (*this)._field_lookup.get()._method_find_struct(_59326_ident,_59338_cpp_linked);
	if (_61117_s != nullptr) {
		return jule::Any(_61117_s);
	}
	jule::Ptr<_20d4a6c9e_TypeAlias> _61617_ta = (*this)._field_lookup.get()._method_find_type_alias(_59326_ident,_59338_cpp_linked);
	if (_61617_ta != nullptr) {
		return jule::Any(_61617_ta);
	}
	return (*this)._method_find_builtins(_59326_ident);
}



inline void _20d162d45_Eval::_method_push_reference(jule::Ptr<_20caa3115_ReferenceStack>& _62438_references) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5303764640:;
			{
				jule::Ptr<_20cb4d853_ScopeChecker> _62721_sc = (*((*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._method_get_root();
				if ((!((*(_62438_references))._method_exist_1((*(_62721_sc))._field_owner)))) {
					(*(_62438_references))._method_push(jule::Any((*(_62721_sc))._field_owner));
				}
			}
		}
		else {
			_case_begin_5303762800:;
			{
				if (((*this)._field_owner != nullptr) && (!((*(_62438_references))._method_exist_0((*this)._field_owner)))) {
					(*(_62438_references))._method_push(jule::Any((*this)._field_owner));
				}
			}
		}
		_match_end_5303762720:;
	}
}



inline void _20d162d45_Eval::_method_push_reference_to_fn(jule::Ptr<_20c819332_FnIns>& _63944_f) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5303780784:;
			{
				jule::Ptr<_20cb4d853_ScopeChecker> _64221_sc = (*((*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_64221_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_64221_sc))._field_owner))._field_references))._method_exist_1(_63944_f)))) {
					(*((*((*(_64221_sc))._field_owner))._field_refers))._method_push(jule::Any(_63944_f));
				}
			}
		}
		_match_end_5303781856:;
	}
	(*this)._method_push_reference((*(_63944_f))._field_references);
}



inline void _20d162d45_Eval::_method_push_reference_to_var(jule::Ptr<_20cdc725d_Var>& _65045_v) {
	if ((*(_65045_v))._field_references == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5303794672:;
			{
				jule::Ptr<_20cb4d853_ScopeChecker> _65721_sc = (*((*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_65721_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_65721_sc))._field_owner))._field_references))._method_exist_0(_65045_v)))) {
					(*((*((*(_65721_sc))._field_owner))._field_refers))._method_push(jule::Any(_65045_v));
				}
			}
		}
		_match_end_5303795088:;
	}
	(*this)._method_push_reference((*(_65045_v))._field_references);
}



inline void _20d162d45_Eval::_method_push_reference_to_struct(jule::Ptr<_20c496047_StructIns>& _66648_s) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5303806272:;
			{
				jule::Ptr<_20cb4d853_ScopeChecker> _66921_sc = (*((*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_66921_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_66921_sc))._field_owner))._field_references))._method_exist_2(_66648_s)))) {
					(*((*((*(_66921_sc))._field_owner))._field_refers))._method_push(jule::Any(_66648_s));
				}
			}
		}
		_match_end_5303806176:;
	}
	(*this)._method_push_reference((*(_66648_s))._field_references);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method___eval_enum(jule::Ptr<_20cb4c70e_Enum> _67730_enm) {
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_67730_enm)),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),true,nullptr));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_enum(jule::Ptr<_20cb4c70e_Enum> _68932_enm,_20c47803a_Token _68944_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_68932_enm))._field_public,(*(_68932_enm))._field_token)))) {
		(*this)._method_push_err(_68944_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_68932_enm))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	return (*this)._method___eval_enum(_68932_enm);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method___eval_struct(jule::Ptr<_20c496047_StructIns> _69932_s) {
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_69932_s)),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_69932_s),true,nullptr));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_struct(jule::Ptr<_20c496047_StructIns> _71234_s,_20c47803a_Token _71249_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_71234_s))._field_decl))._field_public,(*((*(_71234_s))._field_decl))._field_token)))) {
		(*this)._method_push_err(_71249_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_71234_s))._field_decl))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*((*(_71234_s))._field_decl))._field_directives,_71249_error_token);
	return (*this)._method___eval_struct(_71234_s);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_fn_ins(jule::Ptr<_20c819332_FnIns> _72430_f) {
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_72430_f)),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_72430_f),false,nullptr));
}



inline void _20d162d45_Eval::_method_check_deprecated(jule::Slice<jule::Ptr<_20c476dc4_Directive>>& _73740_directives,_20c47803a_Token _73782_tok) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	jule::Ptr<_20c476dc4_Directive> _74213_d = _20d162d45_find_directive(_73740_directives,jule::Str("deprecated", 10));
	if (_74213_d != nullptr) {
		if ((*(_74213_d))._field_args.len() == 0LL) {
			(*this)._method_push_err(_73782_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			(*this)._method_push_err(_73782_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any((*(_74213_d))._field_args[0LL]._field_kind)}));
		}
		(*this)._method_push_suggestion(jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_fn(jule::Ptr<_20c819332_Fn> _75330_f,_20c47803a_Token _75338_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_75330_f))._field_public,(*(_75330_f))._field_token)))) {
		(*this)._method_push_err(_75338_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_75330_f))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_75330_f))._field_directives,_75338_error_token);
	jule::Ptr<_20c819332_FnIns> _76217_ins = (*(_75330_f))._method_instance();
	(*this)._method_push_reference_to_fn(_76217_ins);
	return (*this)._method_eval_fn_ins(_76217_ins);
}



inline void _20d162d45_Eval::_method_push_illegal_cycle_error(jule::Ptr<_20cdc725d_Var>& _76744_v1,jule::Ptr<_20cdc725d_Var>& _76755_v2,jule::Str& _76770_message) {
	
	jule::Str _77013_refers_to = _20a25b99c_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_76744_v1))._field_ident),jule::Any((*(_76755_v2))._field_ident)}));
	_76770_message=((_20a405ddd_repeat(jule::Str(" ", 1),4LL) + _77013_refers_to) + jule::Str("\n", 1)) + _76770_message;
}



inline jule::Bool _20d162d45_Eval::_method_check_cross_cycle(jule::Ptr<_20cdc725d_Var>& _77437_v,jule::Str& _77451_message) {
	{
		auto &expr = (*(_77437_v))._field_depends;
		auto it = expr.begin();
		_iter_begin_5303879456:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> &_20d162d45_d = *it;
			{
				if (_20d162d45_d == (*this)._field_owner) {
					(*this)._method_push_illegal_cycle_error(_77437_v,_20d162d45_d,_77451_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_20d162d45_d,_77451_message)))) {
					(*this)._method_push_illegal_cycle_error(_77437_v,_20d162d45_d,_77451_message);
					return false;
				}
			}
			_iter_next_5303879456:;
			++it;
			goto _iter_begin_5303879456;
		}
		_iter_end_5303879456:;
	}
	return true;
}



inline jule::Bool _20d162d45_Eval::_method_check_illegal_cycles(jule::Ptr<_20cdc725d_Var>& _79344_v,_20c47803a_Token _79353_decl_token) {
	jule::Bool _79374_ok = jule::Bool();
	if ((*this)._field_owner == nullptr) {
		_79374_ok = true;
		return _79374_ok;
	}
	if ((*this)._field_owner == _79344_v) {
		(*this)._method_push_err((*((*this)._field_owner))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_owner))._field_ident)}));
		_79374_ok = false;
		return _79374_ok;
	}
	jule::Str _80517_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_79344_v,_80517_message)))) {
		jule::Str _80821_err_msg = _80517_message;
		_80517_message=jule::Str();
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_79344_v,_80517_message);
		_80821_err_msg=_80821_err_msg + _80517_message;
		(*this)._method_push_err(_79353_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_80821_err_msg)}));
		_79374_ok = false;
		return _79374_ok;
	}
	(*((*this)._field_owner))._field_depends = jule::alloc_for_append((*((*this)._field_owner))._field_depends,1);(*((*this)._field_owner))._field_depends.push(_79344_v);
	_79374_ok = true;
	return _79374_ok;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_var(jule::Ptr<_20cdc725d_Var> _82031_v,_20c47803a_Token _82040_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_82031_v))._field_public,(*(_82031_v))._field_token)))) {
		(*this)._method_push_err(_82040_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_82031_v))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_82031_v))._field_directives,_82040_error_token);
	(*(_82031_v))._field_used=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cba60d6_Sema>>()) {
			_case_begin_5303907712:;
			{
				jule::Bool _83417_ok = (*this)._method_check_illegal_cycles(_82031_v,_82040_error_token);
				if ((!(_83417_ok))) {
					return nullptr;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5303907808:;
			{
				if ((!((*(_82031_v))._field_reference)) || (*this)._method_is_unsafe()) {
					goto _match_end_5303907280;
				}
				jule::Ptr<_20cb4d853_ScopeChecker> _84421_s = (*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>();
				while (((*(_84421_s))._field_owner == nullptr) && ((*(_84421_s))._field_parent != nullptr)) {
					{
						_84421_s=(*(_84421_s))._field_parent;
					}
				_iter_next_5303911920:;
				}
				_iter_end_5303911920:;
				if ((((*(_84421_s))._field_owner != nullptr) && (*((*(_84421_s))._field_owner))._field_anon) && ((*(_82031_v))._field_scope != (*((*(_84421_s))._field_owner))._field_scope)) {
					(*this)._method_push_err(_82040_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>({jule::Any((*(_82031_v))._field_ident)}));
				}
			}
		}
		_match_end_5303907280:;
	}
	(*this)._method_push_reference_to_var(_82031_v);
	if ((!((*(_82031_v))._field_cpp_linked)) && (((*(_82031_v))._field_value == nullptr) || ((*((*(_82031_v))._field_value))._field_data == nullptr))) {
		if ((*(_82031_v))._field_constant) {
			(*((*this)._field_s))._method_check_type_var(_82031_v,(*this)._field_s);
			if ((*((*(_82031_v))._field_value))._field_data == nullptr) {
				return nullptr;
			}
		}
	}
	if (((*(_82031_v))._field_kind == nullptr) || ((*((*(_82031_v))._field_kind))._field_kind == nullptr)) {
		if ((*(_82031_v))._field_scope != nullptr) {
			return nullptr;
		}
		(*((*this)._field_s))._method_check_type_var(_82031_v,(*this)._field_lookup);
		if (((*(_82031_v))._field_kind == nullptr) || ((*((*(_82031_v))._field_kind))._field_kind == nullptr)) {
			return nullptr;
		}
	}
	jule::Ptr<_20d162d45_Data> _88417_d = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data((*((*(_82031_v))._field_kind))._field_kind,jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_82031_v))._field_mutable,(*(_82031_v))._field_reference,(!((*(_82031_v))._field_constant)),jule::Bool(),jule::Any(_82031_v),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
	if (((!((*(_82031_v))._field_cpp_linked)) && (*(_82031_v))._method_is_initialized()) && ((*((*(_82031_v))._field_value))._field_data != nullptr)) {
		(*(_88417_d))._field_is_rune=(*((*((*(_82031_v))._field_value))._field_data))._field_is_rune;
	}
	if ((*(_82031_v))._field_constant && ((*((*((*(_82031_v))._field_value))._field_data))._field_constant != nullptr)) {
		(*(_88417_d))._field_constant=jule::new_ptr<_20d78b3e6_Const>((*((*((*((*(_82031_v))._field_value))._field_data))._field_constant)));
		(*(_88417_d))._field_model=jule::Any((*(_88417_d))._field_constant);
	}
	if ((*((*(_88417_d))._field_kind))._method_fnc() != nullptr) {
		jule::Ptr<_20c819332_FnIns> _90221_f = (*((*(_88417_d))._field_kind))._method_fnc();
		if ((*(_90221_f))._field_decl != nullptr) {
			(*((*(_90221_f))._field_decl))._field_ident=(*(_82031_v))._field_ident;
		}
	}
	return _88417_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_type_alias(jule::Ptr<_20d4a6c9e_TypeAlias> _91338_ta,_20c47803a_Token _91354_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_91338_ta))._field_public,(*(_91338_ta))._field_token)))) {
		(*this)._method_push_err(_91354_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_91338_ta))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_91338_ta))._field_used=true;
	jule::Trait<_20d4a6c9e_Kind> _92217_kind = (*((*((*(_91338_ta))._field_kind))._field_kind))._field_kind;
	{
		auto &_match_expr{ _92217_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_StructIns>>()) {
			_case_begin_5303958912:;
			{
				return (*this)._method___eval_struct(_92217_kind.operator jule::Ptr<_20c496047_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4c70e_Enum>>()) {
			_case_begin_5303959008:;
			{
				return (*this)._method___eval_enum(_92217_kind.operator jule::Ptr<_20cb4c70e_Enum>());
			}
		}
		else {
			_case_begin_5303958432:;
			{
				jule::Ptr<_20d162d45_Data> _93121_d = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind((((*(_91338_ta))._field_cpp_linked) ? ((*(_91338_ta))._field_ident) : ((*((*((*(_91338_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_91338_ta))._field_generic,jule::Bool(),(*((*((*(_91338_ta))._field_kind))._field_kind))._field_kind)),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ptr<_20d78b3e6_Const>()));
				(*(_93121_d))._field_model=jule::Any((*(_93121_d))._field_kind);
				return _93121_d;
			}
		}
		_match_end_5303958352:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_def(jule::Any _94531_def,_20c47803a_Token _94541_ident) {
	{
		auto &_match_expr{ _94531_def };
		
		if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5303973824:;
			{
				return (*this)._method_eval_var(_94531_def.operator jule::Ptr<_20cdc725d_Var>(),_94541_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4c70e_Enum>>()) {
			_case_begin_5303974032:;
			{
				return (*this)._method_eval_enum(_94531_def.operator jule::Ptr<_20cb4c70e_Enum>(),_94541_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5303974128:;
			{
				return (*this)._method_eval_struct((*(_94531_def.operator jule::Ptr<_20c496047_Struct>()))._method_instance(),_94541_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c819332_Fn>>()) {
			_case_begin_5303973568:;
			{
				return (*this)._method_eval_fn(_94531_def.operator jule::Ptr<_20c819332_Fn>(),_94541_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c819332_FnIns>>()) {
			_case_begin_5303973664:;
			{
				return (*this)._method_eval_fn_ins(_94531_def.operator jule::Ptr<_20c819332_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeAlias>>()) {
			_case_begin_5303971616:;
			{
				return (*this)._method_eval_type_alias(_94531_def.operator jule::Ptr<_20d4a6c9e_TypeAlias>(),_94541_ident);
			}
		}
		else {
			_case_begin_5303971312:;
			{
				(*this)._method_push_err(_94541_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_94541_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5303971104:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_ident(jule::Ptr<_20c476dc4_IdentExpr> _97129_ident) {
	jule::Any _97217_def = (*this)._method_get_def((*(_97129_ident))._field_ident,(*(_97129_ident))._field_cpp_linked);
	return (*this)._method_eval_def(_97217_def,(*(_97129_ident))._field_token);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_unary(jule::Ptr<_20c476dc4_UnaryExpr> _97634_u) {
	_20d162d45_UnaryEval _97717_unary = _20d162d45_UnaryEval::_static_method_new(this->self);
	return _97717_unary._method_eval(_97634_u);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_variadic(jule::Ptr<_20c476dc4_VariadicExpr> _98137_v) {
	if ((*(_98137_v))._field_expr == nullptr) {
		(*(this->self))._method_push_err((*(_98137_v))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _98717_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_98717_prefix;
	});
	jule::Ptr<_20d162d45_Data> _99117_d = (*(this->self))._method_eval_expr_kind((*(_98137_v))._field_expr);
	if (_99117_d == nullptr) {
		return nullptr;
	}
	if ((!((*((*(_99117_d))._field_kind))._method_variadicable()))) {
		(*(this->self))._method_push_err((*(_98137_v))._field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>({jule::Any((*((*(_99117_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_Slc> _100113_slc = (*((*(_99117_d))._field_kind))._method_slc();
	(*(_99117_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind((*((*(_100113_slc))._field_elem))._field_cpp_ident,(*((*(_100113_slc))._field_elem))._field_generic,true,(*((*(_100113_slc))._field_elem))._field_kind));
	return _99117_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_unsafe(jule::Ptr<_20c476dc4_UnsafeExpr> _101135_u) {
	jule::Bool _101213_unsafety = (*(this->self))._field_unsafety;
	(*(this->self))._field_unsafety=true;
	jule::Ptr<_20d162d45_Data> _101517_d = (*(this->self))._method_eval_expr_kind((*(_101135_u))._field_expr);
	(*(this->self))._field_unsafety=_101213_unsafety;
	return _101517_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_arr(jule::Ptr<_20c476dc4_SliceExpr> _102232_s) {
	jule::Ptr<_20d4a6c9e_Arr> _102417_pt = (*((*(this->self))._field_prefix))._method_arr();
	jule::Ptr<_20d4a6c9e_Arr> _102617_arr = jule::new_struct_ptr<_20d4a6c9e_Arr>(new( std::nothrow ) _20d4a6c9e_Arr(false,0LL,(*(_102417_pt))._field_elem));
	jule::Bool _103217_filled = false;
	if ((*(_102232_s))._field_elems.len() == 2LL) {
		{
			auto &_match_expr{ (*(_102232_s))._field_elems[1LL] };
			
			if (_match_expr.type_is<jule::Ptr<_20c476dc4_VariadicExpr>>()) {
				_case_begin_5304028928:;
				{
					if ((*((*(_102232_s))._field_elems[1LL].operator jule::Ptr<_20c476dc4_VariadicExpr>()))._field_expr != nullptr) {
						goto _match_end_5304028848;
					}
					if ((*(_102417_pt))._field_auto) {
						(*(this->self))._method_push_err((*(_102232_s))._field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					}
					_103217_filled=true;
					(*(_102232_s))._field_elems=(*(_102232_s))._field_elems.slice(0LL,1LL);
				}
			}
			_match_end_5304028848:;
		}
	}
	(*(_102617_arr))._field_n=static_cast<jule::I64>((*(_102232_s))._field_elems.len());
	if ((!((*(_102417_pt))._field_auto))) {
		if ((*(_102617_arr))._field_n > (*(_102417_pt))._field_n) {
			(*(this->self))._method_push_err((*(_102232_s))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if ((*(_102617_arr))._field_n < (*(_102417_pt))._field_n) {
			(*(_102617_arr))._field_n=(*(_102417_pt))._field_n;
		}
	}
	jule::Ptr<_20ccedeed_ArrayExprModel> _106117_model = jule::new_struct<_20ccedeed_ArrayExprModel>(new( std::nothrow ) _20ccedeed_ArrayExprModel(_102617_arr,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(((_103217_filled) ? (2LL) : (static_cast<jule::I64>((*(_102232_s))._field_elems.len())))))));
	jule::Ptr<_20d4a6c9e_TypeKind> _106617_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_102617_arr))._field_elem;
	{
		auto &expr = (*(_102232_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_5304046944:;
		if (it != expr.end()) {
			jule::Any _20d162d45_elem = *it;
			{
				jule::Ptr<_20d162d45_Data> _106921_d = (*(this->self))._method_eval_expr_kind(_20d162d45_elem);
				if (_106921_d == nullptr) {
					goto _iter_next_5304046944;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_102617_arr))._field_elem,_106921_d,(*(_102232_s))._field_token);
				(*(_106117_model))._field_elems = jule::alloc_for_append((*(_106117_model))._field_elems,1);(*(_106117_model))._field_elems.push((*(_106921_d))._field_model);
			}
			_iter_next_5304046944:;
			++it;
			goto _iter_begin_5304046944;
		}
		_iter_end_5304046944:;
	}
	(*(this->self))._field_prefix=_106617_prefix;
	if (_103217_filled) {
		(*(_106117_model))._field_elems = jule::alloc_for_append((*(_106117_model))._field_elems,1);(*(_106117_model))._field_elems.push(jule::Any(nullptr));
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_102617_arr)),jule::Ptr<_20d4a6c9e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_106117_model),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_exp_slc(jule::Ptr<_20c476dc4_SliceExpr> _109136_s,jule::Ptr<_20d4a6c9e_TypeKind> _109155_elem_type) {
	jule::Ptr<_20d4a6c9e_Slc> _109217_slc = jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc(_109155_elem_type));
	jule::Ptr<_20ccedeed_SliceExprModel> _109617_model = jule::new_struct<_20ccedeed_SliceExprModel>(new( std::nothrow ) _20ccedeed_SliceExprModel(_109155_elem_type,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_109136_s))._field_elems.len()))));
	jule::Ptr<_20d4a6c9e_TypeKind> _110117_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_109217_slc))._field_elem;
	{
		auto &expr = (*(_109136_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_5304065264:;
		if (it != expr.end()) {
			jule::Any _20d162d45_elem = *it;
			{
				jule::Ptr<_20d162d45_Data> _110421_d = (*(this->self))._method_eval_expr_kind(_20d162d45_elem);
				if (_110421_d == nullptr) {
					goto _iter_next_5304065264;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_109217_slc))._field_elem,_110421_d,(*(_109136_s))._field_token);
				(*(_109617_model))._field_elems = jule::alloc_for_append((*(_109617_model))._field_elems,1);(*(_109617_model))._field_elems.push((*(_110421_d))._field_model);
			}
			_iter_next_5304065264:;
			++it;
			goto _iter_begin_5304065264;
		}
		_iter_end_5304065264:;
	}
	(*(this->self))._field_prefix=_110117_prefix;
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_109217_slc)),jule::Ptr<_20d4a6c9e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_109617_model),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_slice_expr(jule::Ptr<_20c476dc4_SliceExpr> _112139_s) {
	if ((*(this->self))._field_prefix != nullptr) {
		{
			
			if ((*((*(this->self))._field_prefix))._method_arr() != nullptr) {
				_case_begin_5304076768:;
				{
					return (*(this->self))._method_eval_arr(_112139_s);
				}
			}
			else if ((*((*(this->self))._field_prefix))._method_slc() != nullptr) {
				_case_begin_5304076880:;
				{
					jule::Ptr<_20d4a6c9e_Slc> _112825_pt = (*((*(this->self))._field_prefix))._method_slc();
					return (*(this->self))._method_eval_exp_slc(_112139_s,(*(_112825_pt))._field_elem);
				}
			}
			_match_end_5304076544:;
		}
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _113317_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	if ((*(_112139_s))._field_elems.len() == 0LL) {
		(*(this->self))._method_push_err((*(_112139_s))._field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _114117_first_elem = (*(this->self))._method_eval_expr_kind((*(_112139_s))._field_elems[0LL]);
	if (_114117_first_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _114617_d = (*(this->self))._method_eval_exp_slc(_112139_s,(*(_114117_first_elem))._field_kind);
	(*(this->self))._field_prefix=_113317_prefix;
	return _114617_d;
}



inline void _20d162d45_Eval::_method_check_integer_indexing_by_data(jule::Ptr<_20d162d45_Data>& _115254_d,_20c47803a_Token _115264_token) {
	jule::Str _115313_err_key = _20d162d45_check_data_for_integer_indexing(_115254_d);
	{
		auto &_match_expr{ _115313_err_key };
		
		if (_match_expr == jule::Str()) {
			_case_begin_5304096704:;
			{
				return;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_5304096256:;
			{
				(*this)._method_push_err(_115264_token,_115313_err_key,jule::Slice<jule::Any>({jule::Any((*((*(_115254_d))._field_kind))._method_to_str())}));
			}
		}
		else {
			_case_begin_5304094912:;
			{
				(*this)._method_push_err(_115264_token,_115313_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_5304095936:;
	}
}



inline void _20d162d45_Eval::_method_indexing_ptr(jule::Ptr<_20d162d45_Data>& _116636_d,jule::Ptr<_20d162d45_Data>& _116651_index,jule::Ptr<_20c476dc4_IndexingExpr>& _116666_i) {
	(*this)._method_check_integer_indexing_by_data(_116651_index,(*(_116666_i))._field_token);
	jule::Ptr<_20d4a6c9e_Ptr> _116917_ptr = (*((*(_116636_d))._field_kind))._method_ptr();
	{
		
		if ((*(_116917_ptr))._method_is_unsafe()) {
			_case_begin_5304107424:;
			{
				(*this)._method_push_err((*(_116666_i))._field_token,jule::Str("unsafe pointers not supports indexing", 37),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((!((*this)._method_is_unsafe()))) {
			_case_begin_5304107520:;
			{
				(*this)._method_push_err((*(_116666_i))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_5304107184:;
	}
	(*(_116636_d))._field_kind=(*(_116917_ptr))._field_elem;
}



inline void _20d162d45_Eval::_method_indexing_arr(jule::Ptr<_20d162d45_Data>& _118236_d,jule::Ptr<_20d162d45_Data>& _118251_index,jule::Ptr<_20c476dc4_IndexingExpr>& _118266_i) {
	jule::Ptr<_20d4a6c9e_Arr> _118317_arr = (*((*(_118236_d))._field_kind))._method_arr();
	(*(_118236_d))._field_kind=(*(_118317_arr))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_118251_index,(*(_118266_i))._field_token);
	if ((*(_118251_index))._method_is_const() && ((*((*(_118251_index))._field_constant))._method_as_f64() >= static_cast<jule::F64>((*(_118317_arr))._field_n))) {
		(*this)._method_push_err((*(_118266_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	}
}



inline void _20d162d45_Eval::_method_indexing_slc(jule::Ptr<_20d162d45_Data>& _119136_d,jule::Ptr<_20d162d45_Data>& _119151_index,jule::Ptr<_20c476dc4_IndexingExpr>& _119166_i) {
	jule::Ptr<_20d4a6c9e_Slc> _119217_slc = (*((*(_119136_d))._field_kind))._method_slc();
	(*(_119136_d))._field_kind=(*(_119217_slc))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_119151_index,(*(_119166_i))._field_token);
	if ((!((*(_119151_index))._method_is_const()))) {
		return;
	}
	{
		auto &_match_expr{ (*(_119136_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_SliceExprModel>>()) {
			_case_begin_5304132768:;
			{
				jule::Ptr<_20ccedeed_SliceExprModel> _120221_m = (*(_119136_d))._field_model.operator jule::Ptr<_20ccedeed_SliceExprModel>();
				jule::F64 _120317_indx = (*((*(_119151_index))._field_constant))._method_as_f64();
				if (_120317_indx >= static_cast<jule::F64>((*(_120221_m))._field_elems.len())) {
					(*this)._method_push_err((*(_119166_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(*(_119136_d))._field_model=(*(_120221_m))._field_elems[static_cast<jule::Int>(static_cast<jule::U64>(_120317_indx))];
					(*(_119136_d))._field_decl=true;
				}
			}
		}
		_match_end_5304132608:;
	}
}



inline void _20d162d45_Eval::_method_indexing_map(jule::Ptr<_20d162d45_Data>& _121336_d,jule::Ptr<_20d162d45_Data>& _121351_index,jule::Ptr<_20c476dc4_IndexingExpr>& _121370_i) {
	if (_121351_index == nullptr) {
		return;
	}
	jule::Ptr<_20d4a6c9e_Map> _121817_m = (*((*(_121336_d))._field_kind))._method_map();
	_20d058ca2_AssignTypeChecker _121917_atc = _20d058ca2_AssignTypeChecker((*this)._field_s,(*(_121817_m))._field_key,_121351_index,(*(_121370_i))._field_token);
	_121917_atc._method_check();
	(*(_121336_d))._field_kind=(*(_121817_m))._field_val;
}



inline void _20d162d45_Eval::_method_indexing_str(jule::Ptr<_20d162d45_Data>& _123036_d,jule::Ptr<_20d162d45_Data>& _123051_index,jule::Ptr<_20c476dc4_IndexingExpr>& _123066_i) {
	
	(*(_123036_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u8", 2))));
	if (_123051_index == nullptr) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_123051_index,(*(_123066_i))._field_token);
	if ((!((*(_123051_index))._method_is_const()))) {
		(*(_123036_d))._field_constant=nullptr;
		return;
	}
	if ((*(_123036_d))._method_is_const()) {
		_20c47803a_Token _124617_error_token = (*(_123066_i))._field_token;
		jule::I64 _124717_j = (*((*(_123051_index))._field_constant))._method_as_i64();
		jule::Str _124817_s = (*((*(_123036_d))._field_constant))._method_read_str();
		if (static_cast<jule::Int>(_124717_j) >= _124817_s.len()) {
			(*this)._method_push_err(_124617_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			(*((*(_123036_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(_124817_s[_124717_j])));
		}
	}
}



inline void _20d162d45_Eval::_method_to_indexing(jule::Ptr<_20d162d45_Data>& _125735_d,jule::Ptr<_20d162d45_Data>& _125750_index,jule::Ptr<_20c476dc4_IndexingExpr>& _125769_i) {
	{
		
		if ((*((*(_125735_d))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5304173344:;
			{
				(*this)._method_indexing_ptr(_125735_d,_125750_index,_125769_i);
				return;
			}
		}
		else if ((*((*(_125735_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_5304173456:;
			{
				(*this)._method_indexing_arr(_125735_d,_125750_index,_125769_i);
				return;
			}
		}
		else if ((*((*(_125735_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_5304173568:;
			{
				(*this)._method_indexing_slc(_125735_d,_125750_index,_125769_i);
				return;
			}
		}
		else if ((*((*(_125735_d))._field_kind))._method_map() != nullptr) {
			_case_begin_5304173680:;
			{
				(*this)._method_indexing_map(_125735_d,_125750_index,_125769_i);
				return;
			}
		}
		else if ((*((*(_125735_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_5304173792:;
			{
				jule::Ptr<_20d4a6c9e_Prim> _127617_prim = (*((*(_125735_d))._field_kind))._method_prim();
				{
					
					if ((*(_127617_prim))._method_is_str()) {
						_case_begin_5304187824:;
						{
							(*this)._method_indexing_str(_125735_d,_125750_index,_125769_i);
							return;
						}
					}
					_match_end_5304187680:;
				}
			}
		}
		_match_end_5304173072:;
	}
	(*this)._method_push_err((*(_125769_i))._field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>({jule::Any((*((*(_125735_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_ident_decl_from_indexing(jule::Ptr<_20c476dc4_IndexingExpr>& _128754_i) {
	{
		auto &_match_expr{ (*(_128754_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentExpr>>()) {
			_case_begin_5304197120:;
		}
		else {
			_case_begin_5304194432:;
			{
				(*(this->self))._method_push_err((*(_128754_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5304194352:;
	}
	jule::Ptr<_20c476dc4_IdentTypeDecl> _129517_decl = jule::new_struct<_20c476dc4_IdentTypeDecl>(new( std::nothrow ) _20c476dc4_IdentTypeDecl(_20c47803a_Token(),(*((*(_128754_i))._field_expr.operator jule::Ptr<_20c476dc4_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>()));
	{
		auto &_match_expr{ (*(_128754_i))._field_index };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_UnaryExpr>>()) {
			_case_begin_5304202384:;
			{
				jule::Ptr<_20d162d45_Data> _130321_d = (*(this->self))._method_eval_unary((*(_128754_i))._field_index.operator jule::Ptr<_20c476dc4_UnaryExpr>());
				if ((!((*(_130321_d))._field_decl))) {
					(*(this->self))._method_push_err((*(_128754_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return nullptr;
				}
				(*(_129517_decl))._field_generics = jule::alloc_for_append((*(_129517_decl))._field_generics,1);(*(_129517_decl))._field_generics.push(jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_20c47803a_Token(),jule::Any((*(_130321_d))._field_kind))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TypeDecl>>()) {
			_case_begin_5304202592:;
			{
				(*(_129517_decl))._field_generics = jule::alloc_for_append((*(_129517_decl))._field_generics,1);(*(_129517_decl))._field_generics.push((*(_128754_i))._field_index.operator jule::Ptr<_20c476dc4_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentExpr>>()) {
			_case_begin_5304202688:;
			{
				(*(_129517_decl))._field_generics = jule::alloc_for_append((*(_129517_decl))._field_generics,1);(*(_129517_decl))._field_generics.push(jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_20c47803a_Token(),jule::Any(jule::new_struct<_20c476dc4_IdentTypeDecl>(new( std::nothrow ) _20c476dc4_IdentTypeDecl(_20c47803a_Token(),(*((*(_128754_i))._field_index.operator jule::Ptr<_20c476dc4_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>()))))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TupleExpr>>()) {
			_case_begin_5304202128:;
			{
				{
					auto &expr = (*((*(_128754_i))._field_index.operator jule::Ptr<_20c476dc4_TupleExpr>()))._field_expr;
					auto it = expr.begin();
					_iter_begin_5304214064:;
					if (it != expr.end()) {
						jule::Ptr<_20c476dc4_Expr> _20d162d45_expr = *it;
						{
							{
								auto &_match_expr{ (*(_20d162d45_expr))._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_20c476dc4_TypeDecl>>()) {
									_case_begin_5304219216:;
									{
										(*(_129517_decl))._field_generics = jule::alloc_for_append((*(_129517_decl))._field_generics,1);(*(_129517_decl))._field_generics.push((*(_20d162d45_expr))._field_kind.operator jule::Ptr<_20c476dc4_TypeDecl>());
									}
								}
								else if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentExpr>>()) {
									_case_begin_5304219312:;
									{
										(*(_129517_decl))._field_generics = jule::alloc_for_append((*(_129517_decl))._field_generics,1);(*(_129517_decl))._field_generics.push(jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_20c47803a_Token(),jule::Any(jule::new_struct<_20c476dc4_IdentTypeDecl>(new( std::nothrow ) _20c476dc4_IdentTypeDecl(_20c47803a_Token(),(*((*(_20d162d45_expr))._field_kind.operator jule::Ptr<_20c476dc4_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_20c476dc4_TypeDecl>>()))))));
									}
								}
								_match_end_5304219136:;
							}
						}
						_iter_next_5304214064:;
						++it;
						goto _iter_begin_5304214064;
					}
					_iter_end_5304214064:;
				}
			}
		}
		else {
			_case_begin_5304199712:;
			{
				(*(this->self))._method_push_err((*(_128754_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5304199632:;
	}
	return (*(this->self))._method_eval_type(jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_20c47803a_Token(),jule::Any(_129517_decl))));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_indexing(jule::Ptr<_20c476dc4_IndexingExpr> _133937_i) {
	jule::Ptr<_20d4a6c9e_TypeKind> _134017_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_134017_prefix;
	});
	jule::Ptr<_20d162d45_Data> _134417_d = (*(this->self))._method_eval_expr_kind((*(_133937_i))._field_expr);
	if (_134417_d == nullptr) {
		return nullptr;
	}
	if ((*(_134417_d))._field_decl) {
		return (*(this->self))._method_eval_ident_decl_from_indexing(_133937_i);
	}
	_20d162d45_Data _135417_old_d = (*(_134417_d));
	jule::Ptr<_20d162d45_Data> _135617_index = (*(this->self))._method_eval_expr_kind((*(_133937_i))._field_index);
	if (_135617_index == nullptr) {
		return nullptr;
	}
	(*(_134417_d))._field_decl=false;
	(*(this->self))._method_to_indexing(_134417_d,_135617_index,_133937_i);
	if ((*(_134417_d))._method_is_const()) {
		(*(_134417_d))._field_decl=false;
		(*(_134417_d))._field_model=jule::Any((*(_134417_d))._field_constant);
	} else if ((*(_134417_d))._field_decl) {
		(*(_134417_d))._field_decl=false;
	} else {
		(*(_134417_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_IndexingExprModel>(new( std::nothrow ) _20ccedeed_IndexingExprModel((*(_133937_i))._field_token,jule::new_ptr<_20d162d45_Data>(_135417_old_d),_135617_index)));
	}
	return _134417_d;
}



inline std::tuple<jule::Ptr<_20d162d45_Data>,jule::Ptr<_20d162d45_Data>> _20d162d45_Eval::_method_eval_slicing_exprs(jule::Ptr<_20c476dc4_SlicingExpr>& _138743_s) {
	jule::Ptr<_20d4a6c9e_TypeKind> _138817_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_138817_prefix;
	});
	jule::Ptr<_20d162d45_Data> _139217_l = nullptr;
	jule::Ptr<_20d162d45_Data> _139317_r = nullptr;
	if ((*(_138743_s))._field_start != nullptr) {
		_139217_l=(*(this->self))._method_eval_expr_kind((*(_138743_s))._field_start);
		if (_139217_l != nullptr) {
			(*(this->self))._method_check_integer_indexing_by_data(_139217_l,(*(_138743_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	} else {
		_139217_l=jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_20d78b3e6_Const::_static_method_new_i64(0LL)));
		(*(_139217_l))._field_model=jule::Any((*(_139217_l))._field_constant);
	}
	if ((*(_138743_s))._field_to != nullptr) {
		_139317_r=(*(this->self))._method_eval_expr_kind((*(_138743_s))._field_to);
		if (_139317_r != nullptr) {
			(*(this->self))._method_check_integer_indexing_by_data(_139317_r,(*(_138743_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	}
	return std::make_tuple(_139217_l,_139317_r);
}



inline void _20d162d45_Eval::_method_slicing_arr(jule::Ptr<_20d162d45_Data>& _142231_d) {
	jule::Ptr<_20d4a6c9e_TypeKind> _142317_elem_type = (*((*((*(_142231_d))._field_kind))._method_arr()))._field_elem;
	(*(_142231_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc(_142317_elem_type))));
	(*(_142231_d))._field_lvalue=false;
	(*(_142231_d))._field_mutable=(*(_142231_d))._field_mutable || (!((*(_142317_elem_type))._method_mutable()));
}



inline void _20d162d45_Eval::_method_slicing_slc(jule::Ptr<_20d162d45_Data>& _143331_d) {
	(*(_143331_d))._field_lvalue=false;
}



inline void _20d162d45_Eval::_method_slicing_str(jule::Ptr<_20d162d45_Data>& _143731_d,jule::Ptr<_20d162d45_Data>& _143742_l,jule::Ptr<_20d162d45_Data>& _143753_r) {
	(*(_143731_d))._field_lvalue=false;
	(*(_143731_d))._field_mutable=true;
	if ((!((*(_143731_d))._method_is_const()))) {
		return;
	}
	if ((_143742_l == nullptr) || (_143753_r == nullptr)) {
		(*(_143731_d))._field_constant=nullptr;
		return;
	}
	if ((*(_143742_l))._method_is_const() && (*(_143753_r))._method_is_const()) {
		jule::I64 _145017_left = (*((*(_143742_l))._field_constant))._method_as_i64();
		if (_145017_left < 0LL) {
			return;
		}
		jule::Str _145517_s = (*((*(_143731_d))._field_constant))._method_read_str();
		jule::I64 _145621_right = 0LL;
		if (_143753_r == nullptr) {
			_145621_right=static_cast<jule::I64>(static_cast<jule::I64>(_145517_s.len()));
		} else {
			_145621_right=static_cast<jule::I64>((*((*(_143753_r))._field_constant))._method_as_i64());
		}
		if (_145017_left > _145621_right) {
			return;
		}
		(*((*(_143731_d))._field_constant))._method_set_str(_145517_s.slice(_145017_left,_145621_right));
		(*(_143731_d))._field_decl=true;
	} else {
		(*(_143731_d))._field_constant=nullptr;
	}
}



inline void _20d162d45_Eval::_method_check_slicing(jule::Ptr<_20d162d45_Data>& _147337_d,jule::Ptr<_20d162d45_Data>& _147348_l,jule::Ptr<_20d162d45_Data>& _147359_r,jule::Ptr<_20c476dc4_SlicingExpr>& _147370_s) {
	{
		
		if ((*((*(_147337_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_5304297792:;
			{
				(*this)._method_slicing_arr(_147337_d);
				return;
			}
		}
		else if ((*((*(_147337_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_5304297904:;
			{
				(*this)._method_slicing_slc(_147337_d);
				return;
			}
		}
		else if ((*((*(_147337_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_5304298016:;
			{
				jule::Ptr<_20d4a6c9e_Prim> _148417_prim = (*((*(_147337_d))._field_kind))._method_prim();
				{
					
					if ((*(_148417_prim))._method_is_str()) {
						_case_begin_5304306928:;
						{
							(*this)._method_slicing_str(_147337_d,_147348_l,_147359_r);
							return;
						}
					}
					_match_end_5304306784:;
				}
			}
		}
		_match_end_5304297616:;
	}
	(*this)._method_push_err((*(_147370_s))._field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>({jule::Any((*((*(_147337_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_slicing(jule::Ptr<_20c476dc4_SlicingExpr> _149536_s) {
	jule::Ptr<_20d162d45_Data> _149617_d = (*(this->self))._method_eval_expr_kind((*(_149536_s))._field_expr);
	if (_149617_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _150118_l;
	jule::Ptr<_20d162d45_Data> _150125_r;
	std::tie(_150118_l,_150125_r) = (*(this->self))._method_eval_slicing_exprs(_149536_s);
	if (_150118_l == nullptr) {
		return _149617_d;
	}
	(*(_149617_d))._field_decl=false;
	(*(this->self))._method_check_slicing(_149617_d,_150118_l,_150125_r,_149536_s);
	(*(_149617_d))._field_cast_kind=nullptr;
	if ((*(_149617_d))._method_is_const()) {
		(*(_149617_d))._field_decl=false;
		(*(_149617_d))._field_model=jule::Any((*(_149617_d))._field_constant);
	} else if ((*(_149617_d))._field_decl) {
		(*(_149617_d))._field_decl=false;
	} else {
		jule::Ptr<_20ccedeed_SlicingExprModel> _152021_model = jule::new_struct<_20ccedeed_SlicingExprModel>(new( std::nothrow ) _20ccedeed_SlicingExprModel((*(_149536_s))._field_token,(*(_149617_d))._field_model,(*(_150118_l))._field_model,jule::Any()));
		if (_150125_r != nullptr) {
			(*(_152021_model))._field_right=(*(_150125_r))._field_model;
		}
		(*(_149617_d))._field_model=jule::Any(_152021_model);
	}
	return _149617_d;
}



inline void _20d162d45_Eval::_method_cast_ptr(jule::Ptr<_20d4a6c9e_TypeKind> _153631_t,jule::Ptr<_20d162d45_Data> _153649_d,_20c47803a_Token _153659_error_token) {
	jule::Ptr<_20d4a6c9e_Sptr> _153713_sptr = (*((*(_153649_d))._field_kind))._method_sptr();
	if (_153713_sptr != nullptr) {
		if ((!((*((*((*(_153631_t))._method_ptr()))._field_elem))._method_equals((*(_153713_sptr))._field_elem)))) {
			(*this)._method_push_err(_153659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_153649_d))._field_kind))._method_to_str()),jule::Any((*(_153631_t))._method_to_str())}));
		}
		return;
	}
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_153659_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_20d4a6c9e_Prim> _155013_prim = (*((*(_153649_d))._field_kind))._method_prim();
	if (((*((*(_153649_d))._field_kind))._method_ptr() == nullptr) && ((_155013_prim == nullptr) || (!(_20d853821_is_int((*(_155013_prim))._method_to_str()))))) {
		(*this)._method_push_err(_153659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_153649_d))._field_kind))._method_to_str()),jule::Any((*(_153631_t))._method_to_str())}));
	}
	(*(_153649_d))._field_constant=nullptr;
}



inline void _20d162d45_Eval::_method_cast_struct(jule::Ptr<_20d4a6c9e_TypeKind> _155834_t,jule::Ptr<_20d162d45_Data> _155852_d,_20c47803a_Token _155862_error_token) {
	jule::Ptr<_20cb471a9_Trait> _155917_tr = (*((*(_155852_d))._field_kind))._method_trt();
	if (_155917_tr == nullptr) {
		(*this)._method_push_err(_155862_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_155852_d))._field_kind))._method_to_str()),jule::Any((*(_155834_t))._method_to_str())}));
		return;
	}
	jule::Ptr<_20c496047_StructIns> _156517_s = (*(_155834_t))._method_strct();
	(*this)._method_push_reference_to_struct(_156517_s);
	if ((!((*((*(_156517_s))._field_decl))._method_is_implements(_155917_tr)))) {
		(*this)._method_push_err(_155862_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_155852_d))._field_kind))._method_to_str()),jule::Any((*(_155834_t))._method_to_str())}));
	}
}



inline void _20d162d45_Eval::_method_cast_ref(jule::Ptr<_20d4a6c9e_TypeKind> _157331_t,jule::Ptr<_20d162d45_Data> _157349_d,_20c47803a_Token _157359_error_token) {
	jule::Ptr<_20d4a6c9e_Sptr> _157417_sptr = (*(_157331_t))._method_sptr();
	jule::Ptr<_20d4a6c9e_Ptr> _157617_ptr = (*((*(_157349_d))._field_kind))._method_ptr();
	if ((_157617_ptr != nullptr) && (*((*(_157417_sptr))._field_elem))._method_equals((*(_157617_ptr))._field_elem)) {
		if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_157359_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((*((*(_157417_sptr))._field_elem))._method_strct() != nullptr) {
		(*this)._method_cast_struct((*(_157417_sptr))._field_elem,_157349_d,_157359_error_token);
		return;
	}
	(*this)._method_push_err(_157359_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_157349_d))._field_kind))._method_to_str()),jule::Any((*(_157331_t))._method_to_str())}));
}



inline void _20d162d45_Eval::_method_cast_slc(jule::Ptr<_20d4a6c9e_TypeKind> _159531_t,jule::Ptr<_20d162d45_Data> _159549_d,_20c47803a_Token _159559_error_token) {
	if ((*((*(_159549_d))._field_kind))._method_enm() != nullptr) {
		if (((*((*((*((*((*(_159549_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim() == nullptr) || (!((*((*((*((*((*((*(_159549_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._method_is_str()))) {
			(*this)._method_push_err(_159559_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_159549_d))._field_kind))._method_to_str()),jule::Any((*(_159531_t))._method_to_str())}));
			return;
		}
	} else if (((*((*(_159549_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_159549_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*this)._method_push_err(_159559_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_159549_d))._field_kind))._method_to_str()),jule::Any((*(_159531_t))._method_to_str())}));
		return;
	}
	_159531_t=(*((*(_159531_t))._method_slc()))._field_elem;
	jule::Ptr<_20d4a6c9e_Prim> _160713_prim = (*(_159531_t))._method_prim();
	if ((_160713_prim == nullptr) || ((!((*(_160713_prim))._method_is_u8())) && (!((*(_160713_prim))._method_is_i32())))) {
		(*this)._method_push_err(_159559_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_159549_d))._field_kind))._method_to_str()),jule::Any((*(_159531_t))._method_to_str())}));
	}
}



inline void _20d162d45_Eval::_method_cast_str(jule::Ptr<_20d162d45_Data> _161331_d,_20c47803a_Token _161341_error_token) {
	if ((*((*(_161331_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_20cb4c70e_Enum> _161521_e = (*((*(_161331_d))._field_kind))._method_enm();
		if (((*((*((*(_161521_e))._field_kind))._field_kind))._method_prim() != nullptr) && (*((*((*((*(_161521_e))._field_kind))._field_kind))._method_prim()))._method_is_str()) {
			return;
		}
	}
	if ((*((*(_161331_d))._field_kind))._method_prim() != nullptr) {
		jule::Ptr<_20d4a6c9e_Prim> _162217_prim = (*((*(_161331_d))._field_kind))._method_prim();
		if ((!((*(_162217_prim))._method_is_u8())) && (!((*(_162217_prim))._method_is_i32()))) {
			(*this)._method_push_err(_161341_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_161331_d))._field_kind))._method_to_str())}));
		}
		return;
	}
	if ((*((*(_161331_d))._field_kind))._method_slc() == nullptr) {
		(*this)._method_push_err(_161341_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_161331_d))._field_kind))._method_to_str())}));
		return;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _163417_t = (*((*((*(_161331_d))._field_kind))._method_slc()))._field_elem;
	jule::Ptr<_20d4a6c9e_Prim> _163513_prim = (*(_163417_t))._method_prim();
	if ((_163513_prim == nullptr) || ((!((*(_163513_prim))._method_is_u8())) && (!((*(_163513_prim))._method_is_i32())))) {
		(*this)._method_push_err(_161341_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_161331_d))._field_kind))._method_to_str())}));
	}
}



inline void _20d162d45_Eval::_method_cast_int(jule::Ptr<_20d4a6c9e_TypeKind> _164131_t,jule::Ptr<_20d162d45_Data> _164149_d,_20c47803a_Token _164159_error_token) {
	if ((*(_164149_d))._method_is_const()) {
		jule::Ptr<_20d4a6c9e_Prim> _164317_prim = (*(_164131_t))._method_prim();
		{
			
			if (_20d853821_is_sig_int((*(_164317_prim))._field_kind)) {
				_case_begin_5304440144:;
				{
					(*((*(_164149_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_164149_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_20d853821_is_unsig_int((*(_164317_prim))._field_kind)) {
				_case_begin_5304440256:;
				{
					(*((*(_164149_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_164149_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_5304439984:;
		}
	}
	if ((*((*(_164149_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_20cb4c70e_Enum> _165417_e = (*((*(_164149_d))._field_kind))._method_enm();
		if (_20d853821_is_num((*((*((*(_165417_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	if ((*((*(_164149_d))._field_kind))._method_sptr() != nullptr) {
		jule::Ptr<_20d4a6c9e_Prim> _166117_prim = (*(_164131_t))._method_prim();
		if ((!((*(_166117_prim))._method_is_uintptr()))) {
			(*this)._method_push_err(_164159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_164149_d))._field_kind))._method_to_str()),jule::Any((*(_164131_t))._method_to_str())}));
		}
		return;
	}
	if ((*((*(_164149_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_20d4a6c9e_Prim> _166817_prim = (*(_164131_t))._method_prim();
		if ((*(_166817_prim))._method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_164159_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if (((((!((*(_166817_prim))._method_is_i32())) && (!((*(_166817_prim))._method_is_i64()))) && (!((*(_166817_prim))._method_is_u16()))) && (!((*(_166817_prim))._method_is_u32()))) && (!((*(_166817_prim))._method_is_u64()))) {
			(*this)._method_push_err(_164159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_164149_d))._field_kind))._method_to_str()),jule::Any((*(_164131_t))._method_to_str())}));
		}
		return;
	}
	jule::Ptr<_20d4a6c9e_Prim> _167913_prim = (*((*(_164149_d))._field_kind))._method_prim();
	if ((_167913_prim != nullptr) && _20d853821_is_num((*(_167913_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_164159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_164149_d))._field_kind))._method_to_str()),jule::Any((*(_164131_t))._method_to_str())}));
}



inline void _20d162d45_Eval::_method_cast_num(jule::Ptr<_20d4a6c9e_TypeKind> _168731_t,jule::Ptr<_20d162d45_Data> _168749_d,_20c47803a_Token _168759_error_token) {
	if ((*(_168749_d))._method_is_const()) {
		jule::Ptr<_20d4a6c9e_Prim> _168917_prim = (*(_168731_t))._method_prim();
		{
			
			if (_20d853821_is_float((*(_168917_prim))._field_kind)) {
				_case_begin_5304486992:;
				{
					(*((*(_168749_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_168749_d))._field_constant))._method_as_f64()));
				}
			}
			else if (_20d853821_is_sig_int((*(_168917_prim))._field_kind)) {
				_case_begin_5304487104:;
				{
					(*((*(_168749_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_168749_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_20d853821_is_unsig_int((*(_168917_prim))._field_kind)) {
				_case_begin_5304487216:;
				{
					(*((*(_168749_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_168749_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_5304486816:;
		}
	}
	if ((*((*(_168749_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_20cb4c70e_Enum> _170317_e = (*((*(_168749_d))._field_kind))._method_enm();
		if (_20d853821_is_num((*((*((*(_170317_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	jule::Ptr<_20d4a6c9e_Prim> _170913_prim = (*((*(_168749_d))._field_kind))._method_prim();
	if ((_170913_prim != nullptr) && _20d853821_is_num((*(_170913_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_168759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_168749_d))._field_kind))._method_to_str()),jule::Any((*(_168731_t))._method_to_str())}));
}



inline void _20d162d45_Eval::_method_cast_prim(jule::Ptr<_20d4a6c9e_TypeKind> _171732_t,jule::Ptr<_20d162d45_Data> _171750_d,_20c47803a_Token _171760_error_token) {
	jule::Ptr<_20d4a6c9e_Prim> _171813_prim = (*(_171732_t))._method_prim();
	{
		
		if ((*(_171813_prim))._method_is_any()) {
			_case_begin_5304513648:;
		}
		else if ((*(_171813_prim))._method_is_str()) {
			_case_begin_5304513152:;
			{
				(*this)._method_cast_str(_171750_d,_171760_error_token);
			}
		}
		else if (_20d853821_is_int((*(_171813_prim))._method_to_str())) {
			_case_begin_5304513248:;
			{
				(*this)._method_cast_int(_171732_t,_171750_d,_171760_error_token);
			}
		}
		else if (_20d853821_is_num((*(_171813_prim))._method_to_str())) {
			_case_begin_5304513344:;
			{
				(*this)._method_cast_num(_171732_t,_171750_d,_171760_error_token);
			}
		}
		else {
			_case_begin_5304512848:;
			{
				(*this)._method_push_err(_171760_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_171732_t))._method_to_str())}));
			}
		}
		_match_end_5304512736:;
	}
}



inline void _20d162d45_Eval::_method_cast_constant(jule::Ptr<_20d4a6c9e_TypeKind>& _173737_t,jule::Ptr<_20d162d45_Data>& _173756_d) {
	jule::Ptr<_20d4a6c9e_Prim> _173813_prim = (*(_173737_t))._method_prim();
	if ((_173813_prim == nullptr) || (!((*(_173756_d))._method_is_const()))) {
		return;
	}
	{
		
		if (_20d853821_is_sig_int((*(_173813_prim))._field_kind)) {
			_case_begin_5304528704:;
			{
				(*((*(_173756_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_173756_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_20d853821_is_unsig_int((*(_173813_prim))._field_kind)) {
			_case_begin_5304528800:;
			{
				(*((*(_173756_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_173756_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_20d853821_is_float((*(_173813_prim))._field_kind)) {
			_case_begin_5304528896:;
			{
				(*((*(_173756_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_173756_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_5304527216:;
	}
	(*(_173756_d))._field_model=jule::Any((*(_173756_d))._field_constant);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_cast_by_type_n_data(jule::Ptr<_20d4a6c9e_TypeKind> _175747_t,jule::Ptr<_20d162d45_Data> _175765_d,_20c47803a_Token _175779_error_token) {
	if ((_175765_d != nullptr) && (*(_175765_d))._field_decl) {
		(*this)._method_push_err(_175779_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	{
		
		if (((*((*(_175765_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_175765_d))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5304548592:;
			{
				if ((*(_175747_t))._method_enm() != nullptr) {
					(*this)._method_push_err(_175779_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				}
			}
		}
		else if ((*(_175747_t))._method_ptr() != nullptr) {
			_case_begin_5304548688:;
			{
				(*this)._method_cast_ptr(_175747_t,_175765_d,_175779_error_token);
			}
		}
		else if ((*(_175747_t))._method_sptr() != nullptr) {
			_case_begin_5304545280:;
			{
				(*this)._method_cast_ref(_175747_t,_175765_d,_175779_error_token);
			}
		}
		else if ((*(_175747_t))._method_slc() != nullptr) {
			_case_begin_5304545376:;
			{
				(*this)._method_cast_slc(_175747_t,_175765_d,_175779_error_token);
			}
		}
		else if ((*(_175747_t))._method_strct() != nullptr) {
			_case_begin_5304545472:;
			{
				(*this)._method_cast_struct(_175747_t,_175765_d,_175779_error_token);
			}
		}
		else if ((*(_175747_t))._method_prim() != nullptr) {
			_case_begin_5304545568:;
			{
				(*this)._method_cast_prim(_175747_t,_175765_d,_175779_error_token);
			}
		}
		else {
			_case_begin_5304542848:;
			{
				(*this)._method_push_err(_175779_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_175747_t))._method_to_str())}));
				_175765_d=nullptr;
			}
		}
		_match_end_5304544448:;
	}
	if (_175765_d == nullptr) {
		return nullptr;
	}
	(*(_175765_d))._field_mutable=(*(_175765_d))._field_mutable || ((!((*((*(_175765_d))._field_kind))._method_mutable())) && (*(_175747_t))._method_mutable());
	(*(_175765_d))._field_lvalue=false;
	(*(_175765_d))._field_decl=false;
	(*this)._method_cast_constant(_175747_t,_175765_d);
	if (((*((*(_175765_d))._field_kind))._method_enm() == nullptr) || (!((*((*((*((*((*(_175765_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_equals(_175747_t)))) {
		(*(_175765_d))._field_cast_kind=_175747_t;
		_20d162d45_apply_cast_kind(_175765_d);
		(*((*(_175765_d))._field_model.operator jule::Ptr<_20ccedeed_CastingExprModel>()))._field_token=_175779_error_token;
	} else {
		(*(_175765_d))._field_kind=_175747_t;
	}
	return _175765_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_cast(jule::Ptr<_20c476dc4_CastExpr> _181333_c) {
	jule::Ptr<_20d4a6c9e_TypeSymbol> _181417_t = _20caa3115_build_type((*(_181333_c))._field_kind);
	jule::Bool _181513_ok = (*((*(this->self))._field_s))._method_check_type(_181417_t,(*(this->self))._field_lookup);
	if ((!(_181513_ok))) {
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _182017_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_182017_prefix;
	});
	jule::Ptr<_20d162d45_Data> _182417_d = (*(this->self))._method_eval_expr_kind((*(_181333_c))._field_expr);
	if (_182417_d == nullptr) {
		return nullptr;
	}
	return (*(this->self))._method_eval_cast_by_type_n_data((*(_181417_t))._field_kind,_182417_d,(*((*(_181333_c))._field_kind))._field_token);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_ns_selection(jule::Ptr<_20c476dc4_NsSelectionExpr> _183236_s) {
	jule::Str _183313_path = _20d4a6c9e_build_link_path_by_tokens((*(_183236_s))._field_ns);
	jule::Ptr<_20cba58cc_ImportInfo> _183417_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>([=](jule::Ptr<_20cba58cc_ImportInfo> _183453_imp) mutable -> jule::Bool {
		if (((*(_183236_s))._field_ns.len() == 1LL) && ((*(_183453_imp))._field_alias == _183313_path)) {
			return true;
		}
		return ((*(_183453_imp))._field_link_path == _183313_path) && (*(_183453_imp))._method_is_accessible_via_selection();
	}));
	if (_183417_imp == nullptr) {
		(*this)._method_push_err((*(_183236_s))._field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_183313_path)}));
		return nullptr;
	}
	jule::Trait<_20d6751d1_Lookup> _184617_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_183417_imp;
	
	(*this)._method_disallow_builtin();
	jule::Any _185117_def = (*this)._method_get_def((*(_183236_s))._field_ident._field_kind,false);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_184617_lookup;
	jule::Ptr<_20d162d45_Data> _185517_d = (*this)._method_eval_def(_185117_def,(*(_183236_s))._field_ident);
	return _185517_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_struct_lit_explicit(jule::Ptr<_20c496047_StructIns> _186048_s,jule::Slice<jule::Any> _186113_exprs,_20c47803a_Token _186136_error_token) {
	jule::Bool _186213_ok = (*((*(this->self))._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_186048_s))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_186048_s))._field_generics.len()),_186136_error_token);
	if ((!(_186213_ok))) {
		return nullptr;
	}
	if (((*(this->self))._field_field != nullptr) && ((*((*((*(this->self))._field_field))._field_decl))._field_owner == (*(_186048_s))._field_decl)) {
		(*(this->self))._method_push_err(_186136_error_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*(_186048_s))._field_decl))._field_ident)}));
	}
	(*(this->self))._method_push_reference_to_struct(_186048_s);
	(*(this->self))._method_check_deprecated((*((*(_186048_s))._field_decl))._field_directives,_186136_error_token);
	_20d058ca2_StructLitChecker _187517_slc = _20d058ca2_StructLitChecker(this->self,_186136_error_token,_186048_s,jule::Slice<jule::Ptr<_20ccedeed_StructArgExprModel>>());
	_187517_slc._method_check(_186113_exprs);
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_186048_s)),jule::Ptr<_20d4a6c9e_TypeKind>(),(!((*(this->self))._field_immutable)),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_StructLitExprModel>(new( std::nothrow ) _20ccedeed_StructLitExprModel(_186136_error_token,_186048_s,_187517_slc._field_args))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_struct_lit(jule::Ptr<_20c476dc4_StructLit> _189339_lit) {
	jule::Ptr<_20d4a6c9e_TypeSymbol> _189417_t = _20caa3115_build_type((*(_189339_lit))._field_kind);
	jule::Bool _189513_ok = (*((*(this->self))._field_s))._method_check_type(_189417_t,(*(this->self))._field_lookup);
	if ((!(_189513_ok))) {
		return nullptr;
	}
	jule::Ptr<_20c496047_StructIns> _190017_s = (*((*(_189417_t))._field_kind))._method_strct();
	if (_190017_s == nullptr) {
		if ((*((*(_189417_t))._field_kind))._method_sptr() != nullptr) {
			_190017_s=(*((*((*((*(_189417_t))._field_kind))._method_sptr()))._field_elem))._method_strct();
			if (_190017_s != nullptr) {
				goto _julec_label_eval;
			}
		}
		(*(this->self))._method_push_err((*((*(_189339_lit))._field_kind))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_eval:;
	jule::Ptr<_20d162d45_Data> _191317_d = (*(this->self))._method_eval_struct_lit_explicit(_190017_s,(*(_189339_lit))._field_exprs,(*((*(_189339_lit))._field_kind))._field_token);
	if ((*((*(_189417_t))._field_kind))._method_sptr() != nullptr) {
		jule::Ptr<_20ccedeed_StructLitExprModel> _191521_model = (*(_191317_d))._field_model.operator jule::Ptr<_20ccedeed_StructLitExprModel>();
		_20d162d45_make_struct_lit_alloc(_191317_d,_191521_model);
	}
	return _191317_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_type(jule::Ptr<_20c476dc4_TypeDecl> _192132_t) {
	jule::Ptr<_20d4a6c9e_TypeSymbol> _192217_tk = _20caa3115_build_type(_192132_t);
	jule::Bool _192313_ok = (*((*this)._field_s))._method_check_type(_192217_tk,(*this)._field_lookup);
	if ((!(_192313_ok))) {
		return nullptr;
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data((*(_192217_tk))._field_kind,jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any((*(_192217_tk))._field_kind),true,jule::Ptr<_20d78b3e6_Const>()));
}



inline void _20d162d45_Eval::_method_call_type_fn(jule::Ptr<_20c476dc4_FnCallExpr>& _193537_fc,jule::Ptr<_20d162d45_Data>& _193559_d) {
	if ((*(_193537_fc))._field_generics.len() > 0LL) {
		(*(this->self))._method_push_err((*(_193537_fc))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*((*(_193559_d))._field_kind))._method_to_str())}));
	} else if ((*(_193537_fc))._field_args.len() < 1LL) {
		(*(this->self))._method_push_err((*(_193537_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if ((*(_193537_fc))._field_args.len() > 1LL) {
		(*(this->self))._method_push_err((*((*(_193537_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	if ((*(_193537_fc))._field_args.len() > 0LL) {
		jule::Ptr<_20d162d45_Data> _194521_arg = (*(this->self))._method_eval_expr_kind((*((*(_193537_fc))._field_args[0LL]))._field_kind);
		if (_194521_arg != nullptr) {
			_193559_d=(*(this->self))._method_eval_cast_by_type_n_data((*(_193559_d))._field_kind,_194521_arg,(*((*(_193537_fc))._field_args[0LL]))._field_token);
		}
	}
	if (_193559_d != nullptr) {
		(*(_193559_d))._field_decl=false;
	}
}



inline std::tuple<jule::Bool,jule::Bool> _20d162d45_Eval::_method_check_fn_call_generics(jule::Ptr<_20c819332_FnIns> _195745_f,jule::Ptr<_20c476dc4_FnCallExpr> _195813_fc) {
	jule::Bool _195832_ok = jule::Bool();
	jule::Bool _195842_dynamic_annotation = jule::Bool();
	{
		
		if ((((*((*(_195745_f))._field_decl))._field_generics.len() > 0LL) && ((*(_195813_fc))._field_generics.len() == 0LL)) && ((*(_195745_f))._field_params.len() > 0LL)) {
			_case_begin_5304688640:;
			{
				_195842_dynamic_annotation=true;
				(*(_195745_f))._field_generics=jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>::alloc(static_cast<jule::I64>((*((*(_195745_f))._field_decl))._field_generics.len()));
				_195832_ok = true;
				_195842_dynamic_annotation = true;
				return std::make_tuple(_195832_ok,_195842_dynamic_annotation);
			}
		}
		else if ((!((*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_195745_f))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_195813_fc))._field_generics.len()),(*(_195813_fc))._field_token)))) {
			_case_begin_5304688736:;
			{
				_195832_ok = false;
				_195842_dynamic_annotation = false;
				return std::make_tuple(_195832_ok,_195842_dynamic_annotation);
			}
		}
		else {
			_case_begin_5304684688:;
			{
				(*(_195745_f))._field_generics=jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*((*(_195745_f))._field_decl))._field_generics.len()));
				{
					auto &expr = (*(_195813_fc))._field_generics;
					auto it = expr.begin();
					_iter_begin_5304686112:;
					if (it != expr.end()) {
						jule::Ptr<_20c476dc4_TypeDecl> _20d162d45_g = *it;
						{
							jule::Ptr<_20d4a6c9e_TypeSymbol> _197325_k = _20caa3115_build_type(_20d162d45_g);
							_195832_ok=(*((*this)._field_s))._method_check_type(_197325_k,(*this)._field_lookup);
							if ((!(_195832_ok))) {
								_195832_ok = false;
								_195842_dynamic_annotation = false;
								return std::make_tuple(_195832_ok,_195842_dynamic_annotation);
							}
							(*(_195745_f))._field_generics = jule::alloc_for_append((*(_195745_f))._field_generics,1);(*(_195745_f))._field_generics.push((*(_197325_k))._field_kind);
						}
						_iter_next_5304686112:;
						++it;
						goto _iter_begin_5304686112;
					}
					_iter_end_5304686112:;
				}
				_195832_ok = true;
				_195842_dynamic_annotation = false;
				return std::make_tuple(_195832_ok,_195842_dynamic_annotation);
			}
		}
		_match_end_5304684544:;
	}
}



inline void _20d162d45_Eval::_method_call_builtin_fn(jule::Ptr<_20c476dc4_FnCallExpr>& _198540_fc,jule::Ptr<_20d162d45_Data>& _198562_d) {
	_198562_d=_20d68a5ae_find_builtin_caller((*((*((*(_198562_d))._field_kind))._method_fnc()))._field_caller)(this->self,_198540_fc,_198562_d);
	if (_198562_d == nullptr) {
		return;
	}
	(*(_198562_d))._field_mutable=true;
}



inline void _20d162d45_Eval::_method_check_fn_of_concurrent_call(jule::Ptr<_20c819332_FnIns>& _199447_f,_20c47803a_Token _199458_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto &expr = (*(_199447_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5304714096:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> &_20d162d45_p = *it;
			{
				if ((*((*(_20d162d45_p))._field_decl))._field_reference) {
					(*this)._method_push_err(_199458_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;
				}
			}
			_iter_next_5304714096:;
			++it;
			goto _iter_begin_5304714096;
		}
		_iter_end_5304714096:;
	}
}



inline void _20d162d45_Eval::_method_process_exceptional_handler(jule::Ptr<_20c819332_FnIns>& _200751_f,jule::Ptr<_20c476dc4_FnCallExpr>& _200767_fc,jule::Ptr<_20d162d45_Data>& _200789_d) {
	jule::Bool _200813_result_needed = (!((*((*(_200751_f))._field_decl))._method_is_void())) && (!((*this)._field_ignored));
	jule::Ptr<_20cb4d853_ScopeChecker> _200917_csc = nullptr;
	jule::Ptr<_20cb4d853_Scope> _201017_ch = nullptr;
	jule::Ptr<_20ccedeed_FnCallExprModel> _201217_model = (*(_200789_d))._field_model.operator jule::Ptr<_20ccedeed_FnCallExprModel>();
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cba60d6_Sema>>()) {
			_case_begin_5304726352:;
			{
				jule::Ptr<_20cba60d6_Sema> _201621_s = (*this)._field_lookup.operator jule::Ptr<_20cba60d6_Sema>();
				_200917_csc=_20cb4d853_new_scope_checker(_201621_s,nullptr);
				if (_200813_result_needed) {
					(*(_200917_csc))._field_result=(*(_200751_f))._field_result;
				}
				_201017_ch=jule::new_struct<_20cb4d853_Scope>(new( std::nothrow ) _20cb4d853_Scope());
				(*((*(_200917_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_200917_csc))._field_table))._field_vars,1);(*((*(_200917_csc))._field_table))._field_vars.push(_20d162d45_build_error_var(_201017_ch,_200767_fc));
				(*(_200917_csc))._method_check((*(_200767_fc))._field_exception,_201017_ch);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5304726448:;
			{
				jule::Ptr<_20cb4d853_ScopeChecker> _202621_sc = (*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>();
				_200917_csc=(*(_202621_sc))._method_new_child_checker();
				if (_200813_result_needed) {
					(*(_200917_csc))._field_result=(*(_200751_f))._field_result;
				}
				_201017_ch=(*(_202621_sc))._method_get_child();
				(*((*(_200917_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_200917_csc))._field_table))._field_vars,1);(*((*(_200917_csc))._field_table))._field_vars.push(_20d162d45_build_error_var(_201017_ch,_200767_fc));
				(*(_202621_sc))._method_check_child_ssc((*(_200767_fc))._field_exception,_201017_ch,_200917_csc);
			}
		}
		_match_end_5304726272:;
	}
	(*(_201217_model))._field_assigned=_200813_result_needed;
	(*(_201217_model))._field_except=_201017_ch;
	if (_200813_result_needed && ((*(_200917_csc))._field_result != nullptr)) {
		(*this)._method_push_err((*(_200767_fc))._field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	}
}



inline void _20d162d45_Eval::_method_call_fn(jule::Ptr<_20c476dc4_FnCallExpr>& _204432_fc,jule::Ptr<_20d162d45_Data>& _204454_d) {
	jule::Ptr<_20c819332_FnIns> _204517_f = (*((*(_204454_d))._field_kind))._method_fnc();
	if ((*(_204517_f))._method_is_builtin()) {
		(*(this->self))._method_call_builtin_fn(_204432_fc,_204454_d);
		return;
	}
	if ((!((*((*(_204517_f))._field_decl))._method_is_method())) && _20d4a6c9e_has_directive((*((*(_204517_f))._field_decl))._field_directives,jule::Str("test", 4))) {
		(*(this->self))._method_push_err((*(_204432_fc))._field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_204454_d=nullptr;
		return;
	}
	if ((((!((*(_204454_d))._field_mutable)) && (*((*(_204517_f))._field_decl))._method_is_method()) && (!((*((*(_204517_f))._field_decl))._field_statically))) && (*((*((*(_204517_f))._field_decl))._field_params[0LL]))._field_mutable) {
		(*(this->self))._method_push_err((*(_204432_fc))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	} else if ((!((*(this->self))._method_is_unsafe())) && (*((*(_204517_f))._field_decl))._field_unsafety) {
		(*(this->self))._method_push_err((*(_204432_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	jule::Bool _206318_ok;
	jule::Bool _206322_dynamic_annotation;
	std::tie(_206318_ok,_206322_dynamic_annotation) = (*(this->self))._method_check_fn_call_generics(_204517_f,_204432_fc);
	if ((!(_206318_ok))) {
		_204454_d=nullptr;
		return;
	}
	jule::Ptr<_20cba60d6_Sema> _206917_old = (*(this->self))._field_s;
	if ((*((*(_204517_f))._field_decl))._field_owner != nullptr) {
		(*(this->self))._field_s=(*((*((*(_204517_f))._field_decl))._field_owner))._field_sema;
	}
	__JULE_DEFER({
		if (_206917_old != (*(this->self))._field_s) {
			(*(_206917_old))._field_errors=jule::append((*(_206917_old))._field_errors,(*((*(this->self))._field_s))._field_errors);
			(*((*(this->self))._field_s))._field_errors=nullptr;
		}
		(*(this->self))._field_s=_206917_old;
	});
	if ((!(_206322_dynamic_annotation))) {
		if ((!((*(_204517_f))._field_reloaded))) {
			_206318_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_204517_f);
			if ((!(_206318_ok))) {
				_204454_d=nullptr;
				return;
			}
			(*(_204517_f))._field_reloaded=true;
		}
	} else {
		(*((*(this->self))._field_s))._method_build_fn_non_generic_type_kinds(_204517_f);
	}
	_20d058ca2_FnCallArgChecker _209517_fcac = _20d058ca2_FnCallArgChecker(this->self,(*(_204432_fc))._field_args,(*(_204432_fc))._field_token,_204517_f,_206322_dynamic_annotation,jule::Slice<jule::Any>());
	if ((*((*(_204517_f))._field_decl))._field_owner != nullptr) {
		std::tie(_206917_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_206917_old);
		_206318_ok=_209517_fcac._method_check();
		std::tie(_206917_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_206917_old);
	} else {
		_206318_ok=_209517_fcac._method_check();
	}
	if ((!(_206318_ok)) && _206322_dynamic_annotation) {
		_204454_d=nullptr;
		return;
	}
	jule::Bool _211514_is_unique_ins;
	jule::Int _211529_pos;
	std::tie(_211514_is_unique_ins,_211529_pos) = (*((*(_204517_f))._field_decl))._method_append_instance(_204517_f);
	if ((!(_211514_is_unique_ins))) {
		_204517_f=(*((*(_204517_f))._field_decl))._field_instances[_211529_pos];
	}
	jule::Any _212017_call_model = (*(_204454_d))._field_model;
	if ((*((*(_204517_f))._field_decl))._method_is_void()) {
		_204454_d=_20d162d45_build_void_data();
	} else {
		if (_206322_dynamic_annotation) {
			_206318_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_204517_f);
			if ((!(_206318_ok))) {
				_204454_d=nullptr;
				return;
			}
			(*(_204517_f))._field_reloaded=true;
		}
		(*(_204454_d))._field_kind=(*(_204517_f))._field_result;
		(*(_204454_d))._field_lvalue=false;
	}
	(*(_204454_d))._field_mutable=true;
	(*(_204454_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_FnCallExprModel>(new( std::nothrow ) _20ccedeed_FnCallExprModel((*(_204432_fc))._field_token,_204517_f,jule::Bool(),_212017_call_model,_209517_fcac._field_arg_models,jule::Ptr<_20cb4d853_Scope>(),jule::Bool())));
	if ((*((*(_204517_f))._field_decl))._field_exceptional) {
		{
			
			if ((*(_204432_fc))._method_unhandled()) {
				_case_begin_5304821504:;
				{
					(*(this->self))._method_push_err((*(_204432_fc))._field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					(*(this->self))._method_push_suggestion(jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if ((*(_204432_fc))._method_ignored()) {
				_case_begin_5304820096:;
			}
			else {
				_case_begin_5304819296:;
				{
					(*(this->self))._method_process_exceptional_handler(_204517_f,_204432_fc,_204454_d);
				}
			}
			_match_end_5304819120:;
		}
	} else if ((!((*(_204432_fc))._method_unhandled()))) {
		(*(this->self))._method_push_err((*(_204432_fc))._field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	}
	if (((*(_204517_f))._field_generics.len() > 0LL) && _211514_is_unique_ins) {
		(*((*(this->self))._field_s))._method_check_fn_ins(_204517_f);
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_fn_call(jule::Ptr<_20c476dc4_FnCallExpr> _216836_fc) {
	jule::Ptr<_20d4a6c9e_TypeKind> _216917_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_216917_prefix;
	});
	{
		auto &_match_expr{ (*((*(_216836_fc))._field_expr))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentExpr>>()) {
			_case_begin_5304834416:;
			{
				if ((*((*(_216836_fc))._field_expr))._field_token._field_kind == jule::Str("error", 5)) {
					return _20d68a5ae_builtin_caller_error(this->self,_216836_fc);
				}
			}
		}
		_match_end_5304834304:;
	}
	jule::Ptr<_20d162d45_Data> _218217_d = (*(this->self))._method_eval_expr_kind((*((*(_216836_fc))._field_expr))._field_kind);
	if (_218217_d == nullptr) {
		return nullptr;
	}
	if ((*(_218217_d))._field_decl) {
		(*(this->self))._method_call_type_fn(_216836_fc,_218217_d);
		return _218217_d;
	}
	if ((*((*(_218217_d))._field_kind))._method_fnc() == nullptr) {
		(*(this->self))._method_push_err((*(_216836_fc))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(this->self))._method_call_fn(_216836_fc,_218217_d);
	return _218217_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_enum_static(jule::Ptr<_20cb4c70e_Enum> _220139_enm,_20c47803a_Token _220151_ident) {
	jule::Ptr<_20d162d45_Data> _220217_d = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_220139_enm)),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_20d78b3e6_Const>()));
	jule::Ptr<_20cb4c70e_EnumItem> _220917_item = (*(_220139_enm))._method_find_item(_220151_ident._field_kind);
	if (_220917_item == nullptr) {
		(*this)._method_push_err(_220151_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_220139_enm))._field_ident),jule::Any(_220151_ident._field_kind)}));
	} else {
		(*(_220217_d))._field_constant=jule::new_ptr<_20d78b3e6_Const>((*((*((*((*(_220917_item))._field_value))._field_data))._field_constant)));
		(*(_220217_d))._field_model=jule::Any((*(_220217_d))._field_constant);
	}
	return _220217_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_struct_static(jule::Ptr<_20c496047_StructIns> _222041_s,_20c47803a_Token _222056_ident) {
	jule::Ptr<_20d162d45_Data> _222117_d = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_20d78b3e6_Const>()));
	
	jule::Ptr<_20c819332_Fn> _222917_method = (*(_222041_s))._method_find_method(_222056_ident._field_kind,true);
	if (_222917_method != nullptr) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*(_222917_method))._field_public,(*(_222917_method))._field_token)))) {
			(*this)._method_push_err(_222056_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_222056_ident._field_kind)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_20c819332_FnIns> _223621_ins = (*(_222917_method))._method_instance();
		(*(_223621_ins))._field_owner=_222041_s;
		(*this)._method_push_reference_to_fn(_223621_ins);
		(*(_222117_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_StructStaticIdentExprModel>(new( std::nothrow ) _20ccedeed_StructStaticIdentExprModel(_222041_s,(*(_222117_d))._field_model,_223621_ins)));
		(*(_222117_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_223621_ins));
		return _222117_d;
	}
	jule::Ptr<_20cdc725d_Var> _224817_sttc = (*((*(_222041_s))._field_decl))._method_find_static(_222056_ident._field_kind);
	if (_224817_sttc != nullptr) {
		return (*this)._method_eval_var(_224817_sttc,_222056_ident);
	}
	(*this)._method_push_err(_222056_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_222041_s))._field_decl))._field_ident),jule::Any(_222056_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_trait_sub_ident(jule::Ptr<_20d162d45_Data> _225743_d,jule::Ptr<_20cb471a9_Trait> _225757_trt,_20c47803a_Token _225774_ident) {
	jule::Ptr<_20c819332_Fn> _225817_f = (*(_225757_trt))._method_find_method(_225774_ident._field_kind);
	if (_225817_f == nullptr) {
		(*this)._method_push_err(_225774_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_225757_trt))._field_ident),jule::Any(_225774_ident._field_kind)}));
		return nullptr;
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_225817_f))._method_instance())),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_TraitSubIdentExprModel>(new( std::nothrow ) _20ccedeed_TraitSubIdentExprModel(_225774_ident,(*(_225743_d))._field_model,_225774_ident._field_kind))),false,jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_struct_sub_ident(jule::Ptr<_20d162d45_Data> _227744_d,jule::Ptr<_20c496047_StructIns> _227758_s,jule::Ptr<_20c476dc4_SubIdentExpr> _227773_si,jule::Bool _227792_ref) {
	jule::Ptr<_20c496047_FieldIns> _227817_f = (*(_227758_s))._method_find_field((*(_227773_si))._field_ident._field_kind);
	if (_227817_f != nullptr) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_227817_f))._field_decl))._field_public,(*((*(_227817_f))._field_decl))._field_token)))) {
			(*this)._method_push_err((*(_227773_si))._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_227817_f))._field_decl))._field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_20ccedeed_StructSubIdentExprModel> _228521_model = jule::new_struct<_20ccedeed_StructSubIdentExprModel>(new( std::nothrow ) _20ccedeed_StructSubIdentExprModel((*(_227744_d))._field_model,(*(_227744_d))._field_kind,jule::Ptr<_20c819332_FnIns>(),_227817_f));
		(*(_227744_d))._field_model=jule::Any(_228521_model);
		(*(_227744_d))._field_kind=(*(_227817_f))._field_kind;
		(*(_227744_d))._field_lvalue=true;
		if ((*((*(_227817_f))._field_decl))._field_mutable && (!((*(_227744_d))._field_mutable))) {
			{
				auto &_match_expr{ (*this)._field_lookup };
				
				if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
					_case_begin_5304909904:;
					{
						jule::Ptr<_20cb4d853_ScopeChecker> _229825_scope = (*((*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>()))._method_get_root();
						(*(_227744_d))._field_mutable=((*(_229825_scope))._field_owner != nullptr) && ((*((*(_229825_scope))._field_owner))._field_owner == _227758_s);
						if ((*(_227744_d))._field_mutable) {
							jule::Ptr<_20cdc725d_Var> _230133_field = (*(_228521_model))._field_expr.operator jule::Ptr<_20cdc725d_Var>();
							jule::Ptr<_20cdc725d_Var> _230233_v = jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var((*(_230133_field))._field_scope,(*(_230133_field))._field_token,(*(_230133_field))._field_ident,(*(_230133_field))._field_cpp_linked,(*(_230133_field))._field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),(*(_230133_field))._field_kind,(*(_230133_field))._field_value,jule::Ptr<_20caa3115_ReferenceStack>(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>()));
							(*(_230233_v))._field_mutable=true;
							(*(_228521_model))._field_expr=jule::Any(_230233_v);
						}
					}
				}
				_match_end_5304909680:;
			}
		}
		return _227744_d;
	}
	
	jule::Ptr<_20c819332_Fn> _232117_m = (*(_227758_s))._method_find_method((*(_227773_si))._field_ident._field_kind,false);
	if (_232117_m == nullptr) {
		(*this)._method_push_err((*(_227773_si))._field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_227758_s))._field_decl))._field_ident),jule::Any((*(_227773_si))._field_ident._field_kind)}));
		return nullptr;
	}
	if ((*((*(_232117_m))._field_params[0LL]))._method_is_ref() && (!(_227792_ref))) {
		(*this)._method_push_err((*(_227773_si))._field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	}
	(*this)._method_check_deprecated((*(_232117_m))._field_directives,(*(_227773_si))._field_ident);
	jule::Ptr<_20c819332_FnIns> _233317_ins = (*(_232117_m))._method_instance();
	(*(_233317_ins))._field_owner=_227758_s;
	(*this)._method_push_reference_to_fn(_233317_ins);
	(*(_227744_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_StructSubIdentExprModel>(new( std::nothrow ) _20ccedeed_StructSubIdentExprModel((*(_227744_d))._field_model,(*(_227744_d))._field_kind,_233317_ins,jule::Ptr<_20c496047_FieldIns>())));
	(*(_227744_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_233317_ins));
	return _227744_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_slice_sub_ident(jule::Ptr<_20d162d45_Data> _234543_d,_20c47803a_Token _234553_ident) {
	{
		auto &_match_expr{ _234553_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5304945200:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_234543_d))._field_kind,(*(_234543_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_5304945296:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_234543_d))._field_kind,(*(_234543_d))._field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_5304941824:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>({jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))))),jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3))))))}),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_234543_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_234543_d))._field_kind,(*(_234543_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5304940976:;
			{
				(*this)._method_push_err(_234553_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_234543_d))._field_kind))._method_to_str()),jule::Any(_234553_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5304941312:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_array_sub_ident(jule::Ptr<_20d162d45_Data> _240443_d,_20c47803a_Token _240453_ident) {
	{
		auto &_match_expr{ _240453_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5304965504:;
			{
				jule::Ptr<_20d78b3e6_Const> _240721_c = _20d78b3e6_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*((*(_240443_d))._field_kind))._method_arr()))._field_n)));
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_240721_c),jule::Bool(),_240721_c));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_5304965600:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>({jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))))),jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3))))))}),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_240443_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_240443_d))._field_kind,(*(_240443_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5304961280:;
			{
				(*this)._method_push_err(_240453_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_240443_d))._field_kind))._method_to_str()),jule::Any(_240453_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5304961616:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_map_sub_ident(jule::Ptr<_20d162d45_Data> _245041_d,_20c47803a_Token _245051_ident) {
	jule::Ptr<_20d4a6c9e_Map> _245117_map_kind = (*((*(_245041_d))._field_kind))._method_map();
	{
		auto &_match_expr{ _245051_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5304981744:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_245041_d))._field_kind,(*(_245041_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_5304985504:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_245041_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_245041_d))._field_kind,(*(_245041_d))._field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_5304981280:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc((*(_245117_map_kind))._field_key)))),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_245041_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_245041_d))._field_kind,(*(_245041_d))._field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_5304981376:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc((*(_245117_map_kind))._field_val)))),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_245041_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_245041_d))._field_kind,(*(_245041_d))._field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_5304981472:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>({jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("key", 3))),(*(_245117_map_kind))._field_key))}),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_245041_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_245041_d))._field_kind,(*(_245041_d))._field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_5304981568:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>({jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("key", 3))),(*(_245117_map_kind))._field_key))}),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_20d4a6c9e_TypeKind>(),(*(_245041_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_245041_d))._field_kind,(*(_245041_d))._field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5304979584:;
			{
				(*this)._method_push_err(_245051_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_245117_map_kind))._method_to_str()),jule::Any(_245051_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5304980992:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_str_sub_ident(jule::Ptr<_20d162d45_Data> _257341_d,_20c47803a_Token _257351_ident) {
	jule::Ptr<_20d4a6c9e_TypeKind> _257417_str_kind = jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("str", 3))));
	{
		auto &_match_expr{ _257351_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5305019904:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_CommonSubIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonSubIdentExprModel((*(_257341_d))._field_kind,(*(_257341_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305016032:;
			{
				(*this)._method_push_err(_257351_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_257417_str_kind))._method_to_str()),jule::Any(_257351_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305017536:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_int_type_static(_20c47803a_Token _259339_ident) {
	
	{
		auto &_match_expr{ _259339_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305028944:;
			{
				jule::Ptr<_20d78b3e6_Const> _259821_c = _20d78b3e6_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_20d78e96b_max(jule::Str("int", 3)))));
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_259821_c),jule::Bool(),_259821_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305029152:;
			{
				jule::Ptr<_20d78b3e6_Const> _260621_c = _20d78b3e6_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_20d78e96b_min(jule::Str("int", 3)))));
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_260621_c),jule::Bool(),_260621_c));
			}
		}
		else {
			_case_begin_5305025264:;
			{
				(*this)._method_push_err(_259339_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_259339_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305026016:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_uint_type_static(_20c47803a_Token _261940_ident) {
	
	{
		auto &_match_expr{ _261940_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305040112:;
			{
				jule::Ptr<_20d78b3e6_Const> _262421_c = _20d78b3e6_Const::_static_method_new_u64(static_cast<jule::U64>(static_cast<jule::U64>(_20d78e96b_max(jule::Str("uint", 4)))));
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_262421_c),jule::Bool(),_262421_c));
			}
		}
		else {
			_case_begin_5305038576:;
			{
				(*this)._method_push_err(_261940_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_261940_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305039328:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_i8_type_static(_20c47803a_Token _263738_ident) {
	
	
	
	{
		auto &_match_expr{ _263738_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305053312:;
			{
				jule::Ptr<_20d78b3e6_Const> _264421_c = _20d78b3e6_Const::_static_method_new_i64(127LL);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_264421_c),jule::Bool(),_264421_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305053520:;
			{
				jule::Ptr<_20d78b3e6_Const> _265221_c = _20d78b3e6_Const::_static_method_new_i64(-128LL);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_265221_c),jule::Bool(),_265221_c));
			}
		}
		else {
			_case_begin_5305050048:;
			{
				(*this)._method_push_err(_263738_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_263738_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305050384:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_i16_type_static(_20c47803a_Token _266539_ident) {
	
	
	
	{
		auto &_match_expr{ _266539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305066752:;
			{
				jule::Ptr<_20d78b3e6_Const> _267221_c = _20d78b3e6_Const::_static_method_new_i64(32767LL);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_267221_c),jule::Bool(),_267221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305066960:;
			{
				jule::Ptr<_20d78b3e6_Const> _268021_c = _20d78b3e6_Const::_static_method_new_i64(-32768LL);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_268021_c),jule::Bool(),_268021_c));
			}
		}
		else {
			_case_begin_5305063424:;
			{
				(*this)._method_push_err(_266539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_266539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305063808:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_i32_type_static(_20c47803a_Token _269339_ident) {
	
	
	
	{
		auto &_match_expr{ _269339_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305080832:;
			{
				jule::Ptr<_20d78b3e6_Const> _270021_c = _20d78b3e6_Const::_static_method_new_i64(2147483647LL);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_270021_c),jule::Bool(),_270021_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305081040:;
			{
				jule::Ptr<_20d78b3e6_Const> _270821_c = _20d78b3e6_Const::_static_method_new_i64(-2147483648LL);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_270821_c),jule::Bool(),_270821_c));
			}
		}
		else {
			_case_begin_5305077568:;
			{
				(*this)._method_push_err(_269339_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_269339_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305077904:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_i64_type_static(_20c47803a_Token _272139_ident) {
	
	
	
	{
		auto &_match_expr{ _272139_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305094144:;
			{
				jule::Ptr<_20d78b3e6_Const> _272821_c = _20d78b3e6_Const::_static_method_new_i64(jule::MAX_I64);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_272821_c),jule::Bool(),_272821_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305094352:;
			{
				jule::Ptr<_20d78b3e6_Const> _273621_c = _20d78b3e6_Const::_static_method_new_i64(jule::MIN_I64);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_273621_c),jule::Bool(),_273621_c));
			}
		}
		else {
			_case_begin_5305091072:;
			{
				(*this)._method_push_err(_272139_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_272139_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305091232:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_u8_type_static(_20c47803a_Token _274938_ident) {
	
	
	{
		auto &_match_expr{ _274938_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305106768:;
			{
				jule::Ptr<_20d78b3e6_Const> _275521_c = _20d78b3e6_Const::_static_method_new_u64(255LLU);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u8", 2)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_275521_c),jule::Bool(),_275521_c));
			}
		}
		else {
			_case_begin_5305103840:;
			{
				(*this)._method_push_err(_274938_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_274938_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305103760:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_u16_type_static(_20c47803a_Token _276839_ident) {
	
	
	{
		auto &_match_expr{ _276839_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305116256:;
			{
				jule::Ptr<_20d78b3e6_Const> _277421_c = _20d78b3e6_Const::_static_method_new_u64(65535LLU);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u16", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_277421_c),jule::Bool(),_277421_c));
			}
		}
		else {
			_case_begin_5305113328:;
			{
				(*this)._method_push_err(_276839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_276839_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305113248:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_u32_type_static(_20c47803a_Token _278739_ident) {
	
	
	{
		auto &_match_expr{ _278739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305125776:;
			{
				jule::Ptr<_20d78b3e6_Const> _279321_c = _20d78b3e6_Const::_static_method_new_u64(4294967295LLU);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_279321_c),jule::Bool(),_279321_c));
			}
		}
		else {
			_case_begin_5305122816:;
			{
				(*this)._method_push_err(_278739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_278739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305122736:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_u64_type_static(_20c47803a_Token _280639_ident) {
	
	
	{
		auto &_match_expr{ _280639_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305135168:;
			{
				jule::Ptr<_20d78b3e6_Const> _281221_c = _20d78b3e6_Const::_static_method_new_u64(jule::MAX_U64);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u64", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_281221_c),jule::Bool(),_281221_c));
			}
		}
		else {
			_case_begin_5305132304:;
			{
				(*this)._method_push_err(_280639_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_280639_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305132224:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_f32_type_tatic(_20c47803a_Token _282538_ident) {
	
	
	
	{
		auto &_match_expr{ _282538_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305145600:;
			{
				jule::Ptr<_20d78b3e6_Const> _283221_c = _20d78b3e6_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_283221_c),jule::Bool(),_283221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305145808:;
			{
				jule::Ptr<_20d78b3e6_Const> _284021_c = _20d78b3e6_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_284021_c),jule::Bool(),_284021_c));
			}
		}
		else {
			_case_begin_5305142272:;
			{
				(*this)._method_push_err(_282538_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_282538_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305142656:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_f64_type_static(_20c47803a_Token _285339_ident) {
	
	
	
	{
		auto &_match_expr{ _285339_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5305158912:;
			{
				jule::Ptr<_20d78b3e6_Const> _286021_c = _20d78b3e6_Const::_static_method_new_f64(jule::MAX_F64);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_286021_c),jule::Bool(),_286021_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5305159120:;
			{
				jule::Ptr<_20d78b3e6_Const> _286821_c = _20d78b3e6_Const::_static_method_new_f64(jule::MIN_F64);
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_286821_c),jule::Bool(),_286821_c));
			}
		}
		else {
			_case_begin_5305155840:;
			{
				(*this)._method_push_err(_285339_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_285339_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305156000:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_prim_static(jule::Str _288135_kind,_20c47803a_Token _288146_ident) {
	{
		auto &_match_expr{ _288135_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_5305168400:;
			{
				return (*this)._method_eval_int_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_5305170624:;
			{
				return (*this)._method_eval_uint_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5305170720:;
			{
				return (*this)._method_eval_i8_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5305167952:;
			{
				return (*this)._method_eval_i16_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5305168048:;
			{
				return (*this)._method_eval_i32_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5305168144:;
			{
				return (*this)._method_eval_i64_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_5305168240:;
			{
				return (*this)._method_eval_u8_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5305170192:;
			{
				return (*this)._method_eval_u16_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5305170304:;
			{
				return (*this)._method_eval_u32_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5305170416:;
			{
				return (*this)._method_eval_u64_type_static(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5305170848:;
			{
				return (*this)._method_eval_f32_type_tatic(_288146_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5305170944:;
			{
				return (*this)._method_eval_f64_type_static(_288146_ident);
			}
		}
		else {
			_case_begin_5305167328:;
			{
				(*this)._method_push_err(_288146_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_288135_kind),jule::Any(_288146_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305167440:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_type_static(jule::Ptr<_20d162d45_Data> _290139_d,jule::Ptr<_20c476dc4_SubIdentExpr> _290153_si) {
	{
		
		if ((*((*(_290139_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_5305191312:;
			{
				return (*this)._method_eval_prim_static((*((*((*(_290139_d))._field_kind))._method_prim()))._method_to_str(),(*(_290153_si))._field_ident);
			}
		}
		else if ((*((*(_290139_d))._field_kind))._method_enm() != nullptr) {
			_case_begin_5305191520:;
			{
				return (*this)._method_eval_enum_static((*((*(_290139_d))._field_kind))._method_enm(),(*(_290153_si))._field_ident);
			}
		}
		else if ((*((*(_290139_d))._field_kind))._method_strct() != nullptr) {
			_case_begin_5305191616:;
			{
				return (*this)._method_eval_struct_static((*((*(_290139_d))._field_kind))._method_strct(),(*(_290153_si))._field_ident);
			}
		}
		else {
			_case_begin_5305187600:;
			{
				(*this)._method_push_err((*(_290153_si))._field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>({jule::Any((*((*(_290139_d))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305187456:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_obj_sub_ident(jule::Ptr<_20d162d45_Data> _291841_d,jule::Ptr<_20c476dc4_SubIdentExpr> _291855_si) {
	jule::Ptr<_20d4a6c9e_TypeKind> _291917_kind = (*(_291841_d))._field_kind;
	if ((*((*(_291841_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_20d4a6c9e_Ptr> _292117_ptr = (*((*(_291841_d))._field_kind))._method_ptr();
		if ((!((*(_292117_ptr))._method_is_unsafe()))) {
			if ((!((*(_291855_si))._field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err((*(_291855_si))._field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
			_291917_kind=(*((*((*(_291841_d))._field_kind))._method_ptr()))._field_elem;
			jule::Ptr<_20d162d45_Data> _292725_model = jule::new_ptr<_20d162d45_Data>((*(_291841_d)));
			_20c47803a_Token _293025_token = (*(_291855_si))._field_ident;
			_293025_token._field_id=7LLU;
			_293025_token._field_kind=jule::Str("*", 1);
			(*(_291841_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(_292725_model,_293025_token)));
		}
	} else if ((*((*(_291841_d))._field_kind))._method_sptr() != nullptr) {
		_291917_kind=(*((*((*(_291841_d))._field_kind))._method_sptr()))._field_elem;
		jule::Ptr<_20d162d45_Data> _294221_model = jule::new_ptr<_20d162d45_Data>((*(_291841_d)));
		_20c47803a_Token _294321_token = (*(_291855_si))._field_ident;
		_294321_token._field_id=7LLU;
		_294321_token._field_kind=jule::Str("*", 1);
		(*(_291841_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(_294221_model,_294321_token)));
	}
	{
		
		if ((*((*(_291841_d))._field_kind))._method_trt() != nullptr) {
			_case_begin_5305224976:;
			{
				return (*this)._method_eval_trait_sub_ident(_291841_d,(*((*(_291841_d))._field_kind))._method_trt(),(*(_291855_si))._field_ident);
			}
		}
		else if ((*(_291917_kind))._method_strct() != nullptr) {
			_case_begin_5305225072:;
			{
				jule::Ptr<_20c496047_StructIns> _295717_s = (*(_291917_kind))._method_strct();
				if (_20d162d45_is_instanced_struct(_295717_s)) {
					jule::Bool _295925_used_reference_elem = (*((*(_291841_d))._field_kind))._method_sptr() != nullptr;
					return (*this)._method_eval_struct_sub_ident(_291841_d,(*(_291917_kind))._method_strct(),_291855_si,_295925_used_reference_elem);
				}
			}
		}
		else if ((*(_291917_kind))._method_slc() != nullptr) {
			_case_begin_5305225168:;
			{
				return (*this)._method_eval_slice_sub_ident(_291841_d,(*(_291855_si))._field_ident);
			}
		}
		else if ((*(_291917_kind))._method_arr() != nullptr) {
			_case_begin_5305225264:;
			{
				return (*this)._method_eval_array_sub_ident(_291841_d,(*(_291855_si))._field_ident);
			}
		}
		else if ((*(_291917_kind))._method_map() != nullptr) {
			_case_begin_5305225360:;
			{
				return (*this)._method_eval_map_sub_ident(_291841_d,(*(_291855_si))._field_ident);
			}
		}
		else if ((*(_291917_kind))._method_prim() != nullptr) {
			_case_begin_5305225456:;
			{
				jule::Ptr<_20d4a6c9e_Prim> _297317_p = (*(_291917_kind))._method_prim();
				{
					auto &_match_expr{ (*(_297317_p))._field_kind };
					
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_5305235712:;
						{
							return (*this)._method_eval_str_sub_ident(_291841_d,(*(_291855_si))._field_ident);
						}
					}
					_match_end_5305245040:;
				}
			}
		}
		_match_end_5305218848:;
	}
	(*this)._method_push_err((*(_291855_si))._field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>({jule::Any((*((*(_291841_d))._field_kind))._method_to_str())}));
	return nullptr;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_sub_ident(jule::Ptr<_20c476dc4_SubIdentExpr> _298438_si) {
	jule::Ptr<_20d4a6c9e_TypeKind> _298517_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_298517_prefix;
	});
	jule::Ptr<_20d162d45_Data> _298917_d = (*(this->self))._method_eval_expr_kind((*(_298438_si))._field_expr);
	if (_298917_d == nullptr) {
		return nullptr;
	}
	if ((*(_298917_d))._field_decl) {
		return (*(this->self))._method_eval_type_static(_298917_d,_298438_si);
	}
	return (*(this->self))._method_eval_obj_sub_ident(_298917_d,_298438_si);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_tuple(jule::Ptr<_20c476dc4_TupleExpr> _300134_tup) {
	jule::Ptr<_20d4a6c9e_Tuple> _300217_tup_t = jule::new_struct_ptr<_20d4a6c9e_Tuple>(new( std::nothrow ) _20d4a6c9e_Tuple());
	(*(_300217_tup_t))._field_types=jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_300134_tup))._field_expr.len()));
	jule::Ptr<_20ccedeed_TupleExprModel> _300517_model = jule::new_struct<_20ccedeed_TupleExprModel>(new( std::nothrow ) _20ccedeed_TupleExprModel(jule::Slice<jule::Ptr<_20d162d45_Data>>::alloc(0LL,static_cast<jule::I64>((*(_300134_tup))._field_expr.len()))));
	jule::Bool _300917_ok = true;
	{
		auto &expr = (*(_300134_tup))._field_expr;
		auto it = expr.begin();
		_iter_begin_5305266928:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Expr> _20d162d45_expr = *it;
			{
				jule::Ptr<_20d162d45_Data> _301121_d = (*(this->self))._method_eval_expr_kind((*(_20d162d45_expr))._field_kind);
				if (_301121_d == nullptr) {
					_300917_ok=false;
					goto _iter_next_5305266928;
				}
				(*(_300217_tup_t))._field_types = jule::alloc_for_append((*(_300217_tup_t))._field_types,1);(*(_300217_tup_t))._field_types.push((*(_301121_d))._field_kind);
				(*(_300517_model))._field_datas = jule::alloc_for_append((*(_300517_model))._field_datas,1);(*(_300517_model))._field_datas.push(_301121_d);
			}
			_iter_next_5305266928:;
			++it;
			goto _iter_begin_5305266928;
		}
		_iter_end_5305266928:;
	}
	if ((!(_300917_ok))) {
		return nullptr;
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_300217_tup_t)),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_300517_model),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_map(jule::Ptr<_20d4a6c9e_Map> _303032_m,jule::Ptr<_20c476dc4_BraceLit> _303045_lit) {
	jule::Ptr<_20ccedeed_MapExprModel> _303117_model = jule::new_struct<_20ccedeed_MapExprModel>(new( std::nothrow ) _20ccedeed_MapExprModel((*(_303032_m))._field_key,(*(_303032_m))._field_val,jule::Slice<jule::Ptr<_20ccedeed_KeyValPairExprModel>>()));
	{
		auto &expr = (*(_303045_lit))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5305279936:;
		if (it != expr.end()) {
			jule::Any _20d162d45_expr = *it;
			{
				{
					auto &_match_expr{ _20d162d45_expr };
					
					if (_match_expr.type_is<jule::Ptr<_20c476dc4_KeyValPair>>()) {
						_case_begin_5305281072:;
					}
					else {
						_case_begin_5305281488:;
						{
							(*(this->self))._method_push_err((*(_303045_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_5305281184:;
				}
				jule::Ptr<_20c476dc4_KeyValPair> _304621_pair = _20d162d45_expr.operator jule::Ptr<_20c476dc4_KeyValPair>();
				jule::Ptr<_20d162d45_Data> _304821_key = (*(this->self))._method_eval_expr_kind((*(_304621_pair))._field_key);
				if (_304821_key == nullptr) {
					return nullptr;
				}
				jule::Ptr<_20d162d45_Data> _305321_val = (*(this->self))._method_eval_expr_kind((*(_304621_pair))._field_val);
				if (_305321_val == nullptr) {
					return nullptr;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_303032_m))._field_key,_304821_key,(*(_304621_pair))._field_colon);
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_303032_m))._field_val,_305321_val,(*(_304621_pair))._field_colon);
				(*(_303117_model))._field_entries = jule::alloc_for_append((*(_303117_model))._field_entries,1);(*(_303117_model))._field_entries.push(jule::new_struct<_20ccedeed_KeyValPairExprModel>(new( std::nothrow ) _20ccedeed_KeyValPairExprModel((*(_304821_key))._field_model,(*(_305321_val))._field_model)));
			}
			_iter_next_5305279936:;
			++it;
			goto _iter_begin_5305279936;
		}
		_iter_end_5305279936:;
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_303032_m)),jule::Ptr<_20d4a6c9e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_303117_model),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_brace_lit(jule::Ptr<_20c476dc4_BraceLit> _307438_lit) {
	{
		
		if ((*(this->self))._field_prefix == nullptr) {
			_case_begin_5305301984:;
			{
				(*(this->self))._method_push_err((*(_307438_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if ((*((*(this->self))._field_prefix))._method_map() != nullptr) {
			_case_begin_5305302192:;
			{
				return (*(this->self))._method_eval_map((*((*(this->self))._field_prefix))._method_map(),_307438_lit);
			}
		}
		else if ((*((*(this->self))._field_prefix))._method_strct() != nullptr) {
			_case_begin_5305302288:;
			{
				return (*(this->self))._method_eval_struct_lit_explicit((*((*(this->self))._field_prefix))._method_strct(),(*(_307438_lit))._field_exprs,(*(_307438_lit))._field_token);
			}
		}
		else {
			_case_begin_5305299168:;
			{
				(*(this->self))._method_push_err((*(_307438_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5305298992:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_anon_fn(jule::Ptr<_20c476dc4_FnDecl> _309235_decl) {
	_20d4a6c9e_TypeChecker _309317_tc = _20d4a6c9e_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_20d4a6c9e_Referencer>(),_20c47803a_Token(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	jule::Ptr<_20c819332_FnIns> _309717_ins = _309317_tc._method_build_fn(_309235_decl);
	(*(_309717_ins))._field_anon=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_ScopeChecker>>()) {
			_case_begin_5305314528:;
			{
				jule::Ptr<_20cb4d853_ScopeChecker> _310221_sc = (*this)._field_lookup.operator jule::Ptr<_20cb4d853_ScopeChecker>();
				jule::Ptr<_20cb4d853_ScopeChecker> _310321_scc = (*(_310221_sc))._method_new_child_checker();
				(*(_310321_scc))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>>(nullptr);
				(*(_310321_scc))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>>(nullptr);
				(*(_310321_scc))._field_owner=nullptr;
				(*(_310321_scc))._field_child_index=0LL;
				(*(_310321_scc))._field_it=0LL;
				(*(_310321_scc))._field_cse=0LL;
				(*(_310321_scc))._field_owner=_309717_ins;
				(*((*this)._field_s))._method_check_fn_ins_sc(_309717_ins,_310321_scc);
			}
		}
		else {
			_case_begin_5305317872:;
			{
				(*((*this)._field_s))._method_check_fn_ins(_309717_ins);
			}
		}
		_match_end_5305317440:;
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_309717_ins)),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_AnonFnExprModel>(new( std::nothrow ) _20ccedeed_AnonFnExprModel(_309717_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_binop(jule::Ptr<_20c476dc4_BinopExpr> _312634_op) {
	jule::Ptr<_20d4a6c9e_TypeKind> _312717_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_312717_prefix;
	});
	_20d162d45_BinaryEval _313117_bs = _20d162d45_BinaryEval::_static_method_new_plain(this->self);
	return _313117_bs._method_eval(_312634_op);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_ternary(jule::Ptr<_20c476dc4_TernaryExpr> _313536_ter) {
	jule::Ptr<_20d162d45_Data> _313617_d = (*(this->self))._method_eval_expr_kind((*(_313536_ter))._field_condition);
	if (_313617_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_Prim> _314113_prim = (*((*(_313617_d))._field_kind))._method_prim();
	if ((_314113_prim == nullptr) || (!((*(_314113_prim))._method_is_bool()))) {
		(*(this->self))._method_push_err((*(_313536_ter))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _314717_td = (*(this->self))._method_eval_expr_kind((*(_313536_ter))._field_true_expr);
	if (_314717_td == nullptr) {
		return nullptr;
	}
	(*(this->self))._method_apply_numeric_prefix(_314717_td);
	if ((*((*(_314717_td))._field_kind))._method_void()) {
		(*(this->self))._method_push_err((*(_313536_ter))._field_token,jule::Str("void type cannot used for ternary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _315817_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_314717_td))._field_kind;
	jule::Ptr<_20d162d45_Data> _316117_fd = (*(this->self))._method_eval_expr_kind((*(_313536_ter))._field_false_expr);
	(*(this->self))._method_apply_numeric_prefix(_316117_fd);
	(*(this->self))._field_prefix=_315817_prefix;
	if (_316117_fd == nullptr) {
		return nullptr;
	}
	_20d058ca2_AssignTypeChecker _316917_ac = _20d058ca2_AssignTypeChecker((*(this->self))._field_s,jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20d162d45_Data>(),(*(_313536_ter))._field_token);
	if ((*(_314717_td))._method_is_const() && (!((*(_316117_fd))._method_is_const()))) {
		_316917_ac._field_dest=(*(_316117_fd))._field_kind;
		_316917_ac._field_d=_314717_td;
	} else {
		_316917_ac._field_dest=(*(_314717_td))._field_kind;
		_316917_ac._field_d=_316117_fd;
	}
	if ((!(_316917_ac._method_check()))) {
		(*(this->self))._method_push_suggestion(jule::Str("use same or compatible values for ternary expressions", 53),jule::Slice<jule::Any>());
	}
	if ((*(_313617_d))._method_is_const()) {
		if ((*((*(_313617_d))._field_constant))._method_read_bool()) {
			return _314717_td;
		}
		return _316117_fd;
	}
	jule::Ptr<_20d162d45_Data> _319117_r = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data());
	(*(_319117_r))._field_kind=_316917_ac._field_dest;
	(*(_319117_r))._field_lvalue=false;
	(*(_319117_r))._field_mutable=(*((*(_319117_r))._field_kind))._method_mutable();
	(*(_319117_r))._field_model=jule::Any(jule::new_struct<_20ccedeed_TernaryExprModel>(new( std::nothrow ) _20ccedeed_TernaryExprModel((*(_313617_d))._field_model,(*(_314717_td))._field_model,(*(_316117_fd))._field_model)));
	return _319117_r;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_expr_kind(jule::Any _320338_kind) {
	jule::Ptr<_20d162d45_Data> _320417_d = nullptr;
	{
		auto &_match_expr{ _320338_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_LitExpr>>()) {
			_case_begin_5305377904:;
			{
				_320417_d=(*(this->self))._method_eval_lit(_320338_kind.operator jule::Ptr<_20c476dc4_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentExpr>>()) {
			_case_begin_5305378000:;
			{
				_320417_d=(*(this->self))._method_eval_ident(_320338_kind.operator jule::Ptr<_20c476dc4_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_UnaryExpr>>()) {
			_case_begin_5305378096:;
			{
				_320417_d=(*(this->self))._method_eval_unary(_320338_kind.operator jule::Ptr<_20c476dc4_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_VariadicExpr>>()) {
			_case_begin_5305378192:;
			{
				_320417_d=(*(this->self))._method_eval_variadic(_320338_kind.operator jule::Ptr<_20c476dc4_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_UnsafeExpr>>()) {
			_case_begin_5305378304:;
			{
				_320417_d=(*(this->self))._method_eval_unsafe(_320338_kind.operator jule::Ptr<_20c476dc4_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_SliceExpr>>()) {
			_case_begin_5305378416:;
			{
				_320417_d=(*(this->self))._method_eval_slice_expr(_320338_kind.operator jule::Ptr<_20c476dc4_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_IndexingExpr>>()) {
			_case_begin_5305378528:;
			{
				_320417_d=(*(this->self))._method_eval_indexing(_320338_kind.operator jule::Ptr<_20c476dc4_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_SlicingExpr>>()) {
			_case_begin_5305378640:;
			{
				_320417_d=(*(this->self))._method_eval_slicing(_320338_kind.operator jule::Ptr<_20c476dc4_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_CastExpr>>()) {
			_case_begin_5305378752:;
			{
				_320417_d=(*(this->self))._method_eval_cast(_320338_kind.operator jule::Ptr<_20c476dc4_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_NsSelectionExpr>>()) {
			_case_begin_5305378864:;
			{
				_320417_d=(*(this->self))._method_eval_ns_selection(_320338_kind.operator jule::Ptr<_20c476dc4_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_StructLit>>()) {
			_case_begin_5305378976:;
			{
				_320417_d=(*(this->self))._method_eval_struct_lit(_320338_kind.operator jule::Ptr<_20c476dc4_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TypeDecl>>()) {
			_case_begin_5305379088:;
			{
				_320417_d=(*(this->self))._method_eval_type(_320338_kind.operator jule::Ptr<_20c476dc4_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnCallExpr>>()) {
			_case_begin_5305379200:;
			{
				_320417_d=(*(this->self))._method_eval_fn_call(_320338_kind.operator jule::Ptr<_20c476dc4_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_SubIdentExpr>>()) {
			_case_begin_5305379312:;
			{
				_320417_d=(*(this->self))._method_eval_sub_ident(_320338_kind.operator jule::Ptr<_20c476dc4_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TupleExpr>>()) {
			_case_begin_5305379424:;
			{
				_320417_d=(*(this->self))._method_eval_tuple(_320338_kind.operator jule::Ptr<_20c476dc4_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_BraceLit>>()) {
			_case_begin_5305379536:;
			{
				_320417_d=(*(this->self))._method_eval_brace_lit(_320338_kind.operator jule::Ptr<_20c476dc4_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnDecl>>()) {
			_case_begin_5305379648:;
			{
				_320417_d=(*(this->self))._method_eval_anon_fn(_320338_kind.operator jule::Ptr<_20c476dc4_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_BinopExpr>>()) {
			_case_begin_5305379760:;
			{
				_320417_d=(*(this->self))._method_eval_binop(_320338_kind.operator jule::Ptr<_20c476dc4_BinopExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TernaryExpr>>()) {
			_case_begin_5305379872:;
			{
				_320417_d=(*(this->self))._method_eval_ternary(_320338_kind.operator jule::Ptr<_20c476dc4_TernaryExpr>());
			}
		}
		_match_end_5305377456:;
	}
	if (_320417_d == nullptr) {
		return nullptr;
	}
	if ((*(_320417_d))._field_kind == nullptr) {
		return _320417_d;
	}
	if ((!((*(_320417_d))._field_decl))) {
		if ((((((((!((*((*(_320417_d))._field_kind))._method_cpp_linked())) && ((*(this->self))._field_prefix != nullptr)) && ((*(_320417_d))._field_cast_kind == nullptr)) && (!((*((*(_320417_d))._field_kind))._field_variadic))) && (!((*(_320417_d))._field_lvalue))) && (!((*(_320417_d))._method_is_const()))) && ((*((*(_320417_d))._field_kind))._method_prim() != nullptr)) && _20d853821_is_num((*((*((*(_320417_d))._field_kind))._method_prim()))._field_kind)) {
			(*(_320417_d))._field_cast_kind=(*(_320417_d))._field_kind;
		}
		_20d162d45_apply_cast_kind(_320417_d);
		if (((*((*(_320417_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_320417_d))._field_kind))._method_prim()))._method_is_any()))) {
			if ((((*(this->self))._field_prefix != nullptr) && ((*((*(this->self))._field_prefix))._method_prim() != nullptr)) && (*((*((*(this->self))._field_prefix))._method_prim()))._method_is_any()) {
				(*(_320417_d))._field_cast_kind=(*(this->self))._field_prefix;
				_20d162d45_apply_cast_kind_model(_320417_d);
				(*(_320417_d))._field_cast_kind=nullptr;
			}
		}
	}
	return _320417_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval(jule::Ptr<_20c476dc4_Expr> _326428_expr) {
	jule::Ptr<_20d162d45_Data> _326517_d = (*(this->self))._method_eval_expr_kind((*(_326428_expr))._field_kind);
	if ((_326517_d == nullptr) || ((*(_326517_d))._field_kind == nullptr)) {
		return nullptr;
	}
	{
		
		if ((*((*(_326517_d))._field_kind))._method_fnc() != nullptr) {
			_case_begin_5305439664:;
			{
				jule::Ptr<_20c819332_FnIns> _327221_f = (*((*(_326517_d))._field_kind))._method_fnc();
				if ((*(_327221_f))._method_is_builtin()) {
					goto _match_end_5305438656;
				}
				if ((*(_327221_f))._field_generics.len() != (*((*(_327221_f))._field_decl))._field_generics.len()) {
					(*((*(this->self))._field_s))._method_push_err((*(_326428_expr))._field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				}
				if ((*((*(_327221_f))._field_decl))._method_is_method()) {
					(*((*(this->self))._field_s))._method_push_err((*(_326428_expr))._field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_5305438656:;
	}
	return _326517_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_Eval::_method_eval_expr(jule::Ptr<_20c476dc4_Expr> _329233_expr) {
	jule::Ptr<_20d162d45_Data> _329317_d = (*(this->self))._method_eval(_329233_expr);
	{
		
		if (_329317_d == nullptr) {
			_case_begin_5305454592:;
			{
				return nullptr;
			}
		}
		else if ((*(_329317_d))._field_decl) {
			_case_begin_5305454688:;
			{
				(*(this->self))._method_push_err((*(_329233_expr))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_5305453232:;
			{
				return _329317_d;
			}
		}
		_match_end_5305453152:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20d162d45_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}



inline _20d162d45_UnaryEval _20d162d45_UnaryEval::_static_method_new(jule::Ptr<_20d162d45_Eval> _331523_e) {
	return _20d162d45_UnaryEval(_331523_e,jule::Ptr<_20d162d45_Data>(),jule::Ptr<_20c476dc4_UnaryExpr>());
}



inline void _20d162d45_UnaryEval::_method_eval_minus(void) {
	jule::Ptr<_20d4a6c9e_Prim> _332213_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_332213_t == nullptr) || (!(_20d853821_is_num((*(_332213_t))._method_to_str())))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_f64()) {
				_case_begin_5305464512:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*((*this)._field_d))._field_constant))._method_read_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_5305464624:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_5305464736:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			_match_end_5305464272:;
		}
		_20d162d45_normalize_type((*this)._field_d);
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(jule::new_ptr<_20d162d45_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _20d162d45_UnaryEval::_method_eval_plus(void) {
	jule::Ptr<_20d4a6c9e_Prim> _335013_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_335013_t == nullptr) || (!(_20d853821_is_num((*(_335013_t))._method_to_str())))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_f64()) {
				_case_begin_5305486288:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*((*this)._field_d))._field_constant))._method_read_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_5305486400:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_5305486512:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			_match_end_5305486048:;
		}
		_20d162d45_normalize_type((*this)._field_d);
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(jule::new_ptr<_20d162d45_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _20d162d45_UnaryEval::_method_eval_caret(void) {
	jule::Ptr<_20d4a6c9e_Prim> _337813_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_337813_t == nullptr) || (!(_20d853821_is_int((*(_337813_t))._method_to_str())))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_5305508016:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((~((*((*((*this)._field_d))._field_constant))._method_read_i64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_5305508128:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_u64(static_cast<jule::U64>((~((*((*((*this)._field_d))._field_constant))._method_read_u64()))));
				}
			}
			_match_end_5305507792:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(jule::new_ptr<_20d162d45_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _20d162d45_UnaryEval::_method_eval_excl(void) {
	jule::Ptr<_20d4a6c9e_Prim> _340213_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_340213_t == nullptr) || (!((*(_340213_t))._method_is_bool()))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_bool()) {
				_case_begin_5305525056:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_bool((!((*((*((*this)._field_d))._field_constant))._method_read_bool())));
				}
			}
			_match_end_5305524848:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(jule::new_ptr<_20d162d45_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _20d162d45_UnaryEval::_method_eval_star(void) {
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(jule::new_ptr<_20d162d45_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
	{
		
		if ((*((*((*this)._field_d))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5305536976:;
			{
				if ((!((*((*this)._field_e))._method_is_unsafe()))) {
					(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				jule::Ptr<_20d4a6c9e_Ptr> _343421_t = (*((*((*this)._field_d))._field_kind))._method_ptr();
				if ((*(_343421_t))._method_is_unsafe()) {
					(*this)._field_d=nullptr;
					return;
				}
				(*((*this)._field_d))._field_kind=(*(_343421_t))._field_elem;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_sptr() != nullptr) {
			_case_begin_5305536656:;
			{
				(*((*this)._field_d))._field_kind=(*((*((*((*this)._field_d))._field_kind))._method_sptr()))._field_elem;
			}
		}
		else {
			_case_begin_5305535680:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_5305535600:;
	}
	(*((*this)._field_d))._field_constant=nullptr;
	(*((*this)._field_d))._field_lvalue=true;
}



inline void _20d162d45_UnaryEval::_method_eval_amper(void) {
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructLitExprModel>>()) {
			_case_begin_5305553776:;
			{
				jule::Ptr<_20ccedeed_StructLitExprModel> _345621_lit = (*((*this)._field_d))._field_model.operator jule::Ptr<_20ccedeed_StructLitExprModel>();
				_20d162d45_make_struct_lit_alloc((*this)._field_d,_345621_lit);
			}
		}
		else {
			_case_begin_5305551568:;
			{
				{
					
					if (_20d4a6c9e_can_get_ptr((*this)._field_d)) {
						_case_begin_5305553600:;
						{
							(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Ptr>(new( std::nothrow ) _20d4a6c9e_Ptr((*((*this)._field_d))._field_kind))));
							(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_UnaryExprModel>(new( std::nothrow ) _20ccedeed_UnaryExprModel(jule::new_ptr<_20d162d45_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
						}
					}
					else {
						_case_begin_5305552768:;
						{
							(*this)._field_d=nullptr;
						}
					}
					_match_end_5305550880:;
				}
			}
		}
		_match_end_5305551488:;
	}
	if ((*this)._field_d != nullptr) {
		(*((*this)._field_d))._field_constant=nullptr;
		(*((*this)._field_d))._field_lvalue=false;
		(*((*this)._field_d))._field_mutable=true;
	}
}



inline void _20d162d45_UnaryEval::_method_eval_type_decl(void) {
	_20d4a6c9e_TypeChecker _348317_tc = _20d4a6c9e_TypeChecker((*((*this)._field_e))._field_s,(*((*this)._field_e))._field_lookup,jule::Ptr<_20d4a6c9e_Referencer>(),(*((*this)._field_u))._field_op,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	{
		auto &_match_expr{ (*((*this)._field_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5305572256:;
			{
				(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_348317_tc._method_build_ptr_from_type((*((*this)._field_d))._field_kind)));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5305572352:;
			{
				(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_348317_tc._method_build_sptr_from_type((*((*this)._field_d))._field_kind)));
			}
		}
		else {
			_case_begin_5305564640:;
			{
				(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*((*this)._field_u))._field_op._field_kind),jule::Any((*((*((*this)._field_d))._field_kind))._method_to_str())}));
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_5305567552:;
	}
	(*((*this)._field_d))._field_decl=true;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_UnaryEval::_method_eval(jule::Ptr<_20c476dc4_UnaryExpr> _350527_u) {
	(*this)._field_u=_350527_u;
	jule::Ptr<_20d4a6c9e_TypeKind> _350817_prefix = (*((*this)._field_e))._field_prefix;
	(*((*this)._field_e))._field_prefix=nullptr;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_350817_prefix;
	});
	(*this)._field_d=(*((*this)._field_e))._method_eval_expr_kind((*((*this)._field_u))._field_expr);
	if ((*this)._field_d == nullptr) {
		return nullptr;
	}
	if ((*((*this)._field_d))._field_decl) {
		(*this)._method_eval_type_decl();
		return (*this)._field_d;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _352217_cast_kind = (*((*this)._field_d))._field_cast_kind;
	jule::Ptr<_20d4a6c9e_TypeKind> _352313_kind = (*((*this)._field_d))._field_kind;
	{
		auto &_match_expr{ (*(_350527_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_5305590288:;
			{
				(*this)._method_eval_minus();
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_5305590016:;
			{
				(*this)._method_eval_plus();
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_5305590112:;
			{
				(*this)._method_eval_caret();
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_5305589328:;
			{
				(*this)._method_eval_excl();
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5305589424:;
			{
				(*this)._method_eval_star();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5305589520:;
			{
				(*this)._method_eval_amper();
			}
		}
		else {
			_case_begin_5305585760:;
			{
				(*this)._field_d=nullptr;
			}
		}
		_match_end_5305589040:;
	}
	if ((*this)._field_d == nullptr) {
		(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*((*this)._field_u))._field_op._field_kind),jule::Any((*(_352313_kind))._method_to_str())}));
	} else if ((*((*this)._field_d))._method_is_const()) {
		(*((*this)._field_d))._field_model=jule::Any((*((*this)._field_d))._field_constant);
	} else if (_352217_cast_kind != nullptr) {
		(*((*this)._field_d))._field_cast_kind=_352217_cast_kind;
		_20d162d45_apply_cast_kind((*this)._field_d);
	}
	return (*this)._field_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d162d45_UnaryEval &_Src) {
	_Stream << "UnaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "u:" << _Src._field_u;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _7617_kind = jule::Str();
	if ((*this)._field_variadic) {
		_7617_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_cpp_linked()) {
		_7617_kind+=jule::Str("cpp.", 4);
		_7617_kind+=(*this)._field_cpp_ident;
	} else {
		_7617_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _7617_kind;
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _9222_other) {
	if ((*(this->self))._method_is_nil()) {
		return (*(_9222_other))._method_is_nil();
	}
	if ((*(this->self))._method_cpp_linked()) {
		return (*(_9222_other))._method_cpp_linked() && ((*(this->self))._field_cpp_ident == (*(_9222_other))._field_cpp_ident);
	}
	return (*(this->self))._field_kind.get()._method_equals(_9222_other);
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_cpp_linked(void) {
	return (*this)._field_cpp_ident.len() != 0LL;
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_void(void) {
	jule::Ptr<_20d4a6c9e_Prim> _11513_prim = (*this)._method_prim();
	return (_11513_prim != nullptr) && ((*(_11513_prim))._field_kind == jule::Str("void", 4));
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_mutable(void) {
	{
		_20d4a6c9e_TypeKind* _12221__self = (&((*this)));
		if ((*(_12221__self))._method_strct() != nullptr) {
			return (*((*(_12221__self))._method_strct()))._field_mutable;
		}
		if ((*(_12221__self))._method_trt() != nullptr) {
			return (*((*(_12221__self))._method_trt()))._field_mutable;
		}
		if ((*(_12221__self))._method_prim() != nullptr) {
			jule::Ptr<_20d4a6c9e_Prim> _13121_p = (*(_12221__self))._method_prim();
			return (*(_13121_p))._method_is_any();
		}
		if ((*(_12221__self))._method_arr() != nullptr) {
			return (*((*((*(_12221__self))._method_arr()))._field_elem))._method_mutable();
		}
		return (((*(_12221__self))._method_slc() != nullptr) || ((*(_12221__self))._method_ptr() != nullptr)) || ((*(_12221__self))._method_sptr() != nullptr);
	}
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_nil_compatible(void) {
	{
		_20d4a6c9e_TypeKind* _14621__self = (&((*this)));
		jule::Ptr<_20d4a6c9e_Prim> _14817_prim = (*(_14621__self))._method_prim();
		if ((_14817_prim != nullptr) && (*(_14817_prim))._method_is_any()) {
			return true;
		}
		return ((((((*(_14621__self))._method_is_nil() || ((*(_14621__self))._method_fnc() != nullptr)) || ((*(_14621__self))._method_sptr() != nullptr)) || ((*(_14621__self))._method_ptr() != nullptr)) || ((*(_14621__self))._method_trt() != nullptr)) || ((*(_14621__self))._method_slc() != nullptr)) || ((*(_14621__self))._method_map() != nullptr);
	}
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_performs_rc(void) {
	{
		_20d4a6c9e_TypeKind* _16621__self = (&((*this)));
		return (((*(_16621__self))._method_sptr() != nullptr) || ((*(_16621__self))._method_slc() != nullptr)) || ((*(_16621__self))._method_trt() != nullptr);
	}
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_supports_cloning(void) {
	{
		_20d4a6c9e_TypeKind* _17421__self = (&((*this)));
		{
			
			if ((*(_17421__self))._method_prim() != nullptr) {
				_case_begin_5306110784:;
				{
					return (!((*((*(_17421__self))._method_prim()))._method_is_any()));
				}
			}
			else if ((*(_17421__self))._method_enm() != nullptr) {
				_case_begin_5306109312:;
				{
					return true;
				}
			}
			else if ((*(_17421__self))._method_fnc() != nullptr) {
				_case_begin_5306109408:;
				{
					return true;
				}
			}
			else if ((*(_17421__self))._method_ptr() != nullptr) {
				_case_begin_5306109520:;
				{
					return true;
				}
			}
			else if ((*(_17421__self))._method_slc() != nullptr) {
				_case_begin_5306109632:;
				{
					return (*((*((*(_17421__self))._method_slc()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_map() != nullptr) {
				_case_begin_5306110032:;
				{
					jule::Ptr<_20d4a6c9e_Map> _18821_m = (*(_17421__self))._method_map();
					return (*((*(_18821_m))._field_key))._method_supports_cloning() && (*((*(_18821_m))._field_val))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_arr() != nullptr) {
				_case_begin_5306110144:;
				{
					return (*((*((*(_17421__self))._method_arr()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_sptr() != nullptr) {
				_case_begin_5306110256:;
				{
					return (*((*((*(_17421__self))._method_sptr()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_strct() != nullptr) {
				_case_begin_5306110368:;
				{
					jule::Ptr<_20c496047_StructIns> _19825_s = (*(_17421__self))._method_strct();
					if ((!((*(_19825_s))._field_mutable))) {
						return true;
					}
					if ((((*(_19825_s))._field_decl == nullptr) || (*((*(_19825_s))._field_decl))._field_cpp_linked) || (!((*((*(_19825_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						return false;
					}
					return true;
				}
			}
			else {
				_case_begin_5306109008:;
				{
					return false;
				}
			}
			_match_end_5306108896:;
		}
	}
}



inline jule::Bool _20d4a6c9e_TypeKind::_method_variadicable(void) {
	{
		_20d4a6c9e_TypeKind* _21821__self = (&((*this)));
		return (*(_21821__self))._method_slc() != nullptr;
	}
}



inline jule::Ptr<_20d4a6c9e_Prim> _20d4a6c9e_TypeKind::_method_prim(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Prim>>()) {
			_case_begin_5306138400:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Prim>();
			}
		}
		else {
			_case_begin_5306139504:;
			{
				return nullptr;
			}
		}
		_match_end_5306139424:;
	}
}



inline jule::Ptr<_20d4a6c9e_Sptr> _20d4a6c9e_TypeKind::_method_sptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Sptr>>()) {
			_case_begin_5306141360:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Sptr>();
			}
		}
		else {
			_case_begin_5306140320:;
			{
				return nullptr;
			}
		}
		_match_end_5306141184:;
	}
}



inline jule::Ptr<_20d4a6c9e_Ptr> _20d4a6c9e_TypeKind::_method_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Ptr>>()) {
			_case_begin_5306145984:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Ptr>();
			}
		}
		else {
			_case_begin_5306142976:;
			{
				return nullptr;
			}
		}
		_match_end_5306144256:;
	}
}



inline jule::Ptr<_20cb4c70e_Enum> _20d4a6c9e_TypeKind::_method_enm(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4c70e_Enum>>()) {
			_case_begin_5306148736:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20cb4c70e_Enum>();
			}
		}
		else {
			_case_begin_5306146944:;
			{
				return nullptr;
			}
		}
		_match_end_5306145808:;
	}
}



inline jule::Ptr<_20d4a6c9e_Arr> _20d4a6c9e_TypeKind::_method_arr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Arr>>()) {
			_case_begin_5306148944:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Arr>();
			}
		}
		else {
			_case_begin_5306149360:;
			{
				return nullptr;
			}
		}
		_match_end_5306149696:;
	}
}



inline jule::Ptr<_20d4a6c9e_Slc> _20d4a6c9e_TypeKind::_method_slc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Slc>>()) {
			_case_begin_5306152432:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Slc>();
			}
		}
		else {
			_case_begin_5306152320:;
			{
				return nullptr;
			}
		}
		_match_end_5306152240:;
	}
}



inline jule::Ptr<_20c819332_FnIns> _20d4a6c9e_TypeKind::_method_fnc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c819332_FnIns>>()) {
			_case_begin_5306157056:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20c819332_FnIns>();
			}
		}
		else {
			_case_begin_5306154048:;
			{
				return nullptr;
			}
		}
		_match_end_5306155328:;
	}
}



inline jule::Ptr<_20c496047_StructIns> _20d4a6c9e_TypeKind::_method_strct(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_StructIns>>()) {
			_case_begin_5306159808:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20c496047_StructIns>();
			}
		}
		else {
			_case_begin_5306158016:;
			{
				return nullptr;
			}
		}
		_match_end_5306156880:;
	}
}



inline jule::Ptr<_20cb471a9_Trait> _20d4a6c9e_TypeKind::_method_trt(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20cb471a9_Trait>>()) {
			_case_begin_5306160016:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20cb471a9_Trait>();
			}
		}
		else {
			_case_begin_5306160432:;
			{
				return nullptr;
			}
		}
		_match_end_5306160768:;
	}
}



inline jule::Ptr<_20d4a6c9e_Map> _20d4a6c9e_TypeKind::_method_map(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Map>>()) {
			_case_begin_5306165440:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Map>();
			}
		}
		else {
			_case_begin_5306162032:;
			{
				return nullptr;
			}
		}
		_match_end_5306163248:;
	}
}



inline jule::Ptr<_20d4a6c9e_Tuple> _20d4a6c9e_TypeKind::_method_tup(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_Tuple>>()) {
			_case_begin_5306168256:;
			{
				return (*this)._field_kind.operator jule::Ptr<_20d4a6c9e_Tuple>();
			}
		}
		else {
			_case_begin_5306166400:;
			{
				return nullptr;
			}
		}
		_match_end_5306166320:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20d4a6c9e_TypeSymbol::_method_checked(void) {
	return (*this)._field_kind != nullptr;
}



inline void _20d4a6c9e_TypeSymbol::_method_remove_kind(void) {
	(*this)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _20d4a6c9e_Prim::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _33722_other) {
	jule::Ptr<_20d4a6c9e_Prim> _33813_prim = (*(_33722_other))._method_prim();
	if (_33813_prim == nullptr) {
		return false;
	}
	return _20d78c6b1_real_kind_of((*(this->self))._field_kind) == _20d78c6b1_real_kind_of((*(_33813_prim))._field_kind);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _20d4a6c9e_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Sptr::_method_to_str(void) {
	return jule::Str("&", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _20d4a6c9e_Sptr::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _40622_other) {
	jule::Ptr<_20d4a6c9e_Sptr> _40713_sptr = (*(_40622_other))._method_sptr();
	if (_40713_sptr == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_40713_sptr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Sptr &_Src) {
	_Stream << "Sptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _20d4a6c9e_Slc::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _42522_other) {
	jule::Ptr<_20d4a6c9e_Slc> _42613_slc = (*(_42522_other))._method_slc();
	if (_42613_slc == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_42613_slc))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Tuple::_method_to_str(void) {
	jule::Str _44217_s = jule::Str("(", 1);
	_44217_s+=(*((*this)._field_types[0LL]))._method_to_str();
	{
		auto expr = (*this)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_5306221232:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeKind> &_20d4a6c9e_t = *it;
			{
				_44217_s+=jule::Str(",", 1);
				_44217_s+=(*(_20d4a6c9e_t))._method_to_str();
			}
			_iter_next_5306221232:;
			++it;
			goto _iter_begin_5306221232;
		}
		_iter_end_5306221232:;
	}
	_44217_s+=jule::Str(")", 1);
	return _44217_s;
}



inline jule::Bool _20d4a6c9e_Tuple::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _45322_other) {
	jule::Ptr<_20d4a6c9e_Tuple> _45413_tup = (*(_45322_other))._method_tup();
	if (_45413_tup == nullptr) {
		return false;
	}
	if ((*(this->self))._field_types.len() != (*(_45413_tup))._field_types.len()) {
		return false;
	}
	jule::Int _46317_i = 0LL;
	for (; _46317_i < (*(this->self))._field_types.len(); (_46317_i)++) {
		{
			if ((!((*((*(this->self))._field_types[_46317_i]))._method_equals((*(_45413_tup))._field_types[_46317_i])))) {
				return false;
			}
		}
	_iter_next_5306229664:;
	}
	_iter_end_5306229664:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Map::_method_to_str(void) {
	jule::Str _48317_s = jule::Str("[", 1);
	_48317_s+=(*((*this)._field_key))._method_to_str();
	_48317_s+=jule::Str(":", 1);
	_48317_s+=(*((*this)._field_val))._method_to_str();
	_48317_s+=jule::Str("]", 1);
	return _48317_s;
}



inline jule::Bool _20d4a6c9e_Map::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _49222_other) {
	jule::Ptr<_20d4a6c9e_Map> _49313_map = (*(_49222_other))._method_map();
	if (_49313_map == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_key))._method_equals((*(_49313_map))._field_key) && (*((*(this->self))._field_val))._method_equals((*(_49313_map))._field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Arr::_method_to_str(void) {
	jule::Str _51117_s = jule::Str("[", 1);
	_51117_s+=_20bcb4a20_itoa((*this)._field_n);
	_51117_s+=jule::Str("]", 1);
	_51117_s+=(*((*this)._field_elem))._method_to_str();
	return _51117_s;
}



inline jule::Bool _20d4a6c9e_Arr::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _51922_other) {
	jule::Ptr<_20d4a6c9e_Arr> _52013_arr = (*(_51922_other))._method_arr();
	if (_52013_arr == nullptr) {
		return false;
	}
	return ((*(this->self))._field_n == (*(_52013_arr))._field_n) && (*((*(this->self))._field_elem))._method_equals((*(_52013_arr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20d4a6c9e_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _20d4a6c9e_Ptr::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _54322_other) {
	jule::Ptr<_20d4a6c9e_Ptr> _54413_ptr = (*(_54322_other))._method_ptr();
	if (_54413_ptr == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_54413_ptr))._field_elem);
}



inline jule::Bool _20d4a6c9e_Ptr::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline void _20c41511a_DirectiveEval::_method_push_err(_20c47803a_Token _2027_t,jule::Str _2037_fmt,jule::Slice<jule::Any> _2050_args) {
	(*this)._field_logs = jule::alloc_for_append((*this)._field_logs,1);(*this)._field_logs.push(_20a25b99c_Log(1LLU,_2027_t._field_row,_2027_t._field_column,(*(_2027_t._field_file))._method_path(),_20a25b99c_logf(_2037_fmt,_2050_args),jule::Str(),jule::Str()));
}



inline jule::Slice<jule::Slice<_20c47803a_Token>> _20c41511a_DirectiveEval::_method_split_operans(jule::Str _3232_op,jule::Slice<_20c47803a_Token>& _3252_tokens) {
	jule::Slice<jule::Slice<_20c47803a_Token>> _3317_parts = jule::Slice<jule::Slice<_20c47803a_Token>>::alloc(0LL,10LL);
	jule::Int _3517_i = 0LL;
	jule::Int _3617_range_n = 0LL;
	jule::Int _3717_last = 0LL;
	for (; _3517_i < (_3252_tokens.len() - 1LL); (_3517_i)++) {
		{
			_20c47803a_Token _3917_b = _3252_tokens[_3517_i];
			if (_3917_b._field_id == 3LLU) {
				{
					auto &_match_expr{ _3917_b._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_5306791264:;
						{
							(_3617_range_n)++;
							goto _iter_next_5306787520;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_5306791536:;
						{
							(_3617_range_n)--;
						}
					}
					_match_end_5306791120:;
				}
			}
			if ((_3617_range_n > 0LL) || (_3917_b._field_id != 7LLU)) {
				goto _iter_next_5306787520;
			}
			if (_3917_b._field_kind == _3232_op) {
				_3317_parts.push(_3252_tokens.slice(_3717_last,_3517_i));
				_3717_last=static_cast<jule::Int>(_3517_i + 1LL);
			}
		}
	_iter_next_5306787520:;
	}
	_iter_end_5306787520:;
	if (_3717_last < _3252_tokens.len()) {
		_3317_parts.push(_3252_tokens.slice(_3717_last));
	} else {
		(*this)._method_push_err(_3252_tokens[_3717_last - 1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _3317_parts;
}



inline jule::Bool _20c41511a_DirectiveEval::_method_eval_directive_ident(jule::Str _7335_ident) {
	if (_7335_ident == jule::Str()) {
		return false;
	}
	{
		auto &expr = _20c414339_VARS;
		auto it = expr.begin();
		_iter_begin_5306801888:;
		if (it != expr.end()) {
			jule::Str &_20c41511a_var = *it;
			{
				if (_20c41511a_var == _7335_ident) {
					return true;
				}
			}
			_iter_next_5306801888:;
			++it;
			goto _iter_begin_5306801888;
		}
		_iter_end_5306801888:;
	}
	return false;
}



inline jule::Bool _20c41511a_DirectiveEval::_method_eval_directive_part(jule::Slice<_20c47803a_Token> _8942_part) {
	jule::Bool _9013_logical_not = (_8942_part[0LL]._field_id == 7LLU) && (_8942_part[0LL]._field_kind == jule::Str("!", 1));
	if (_9013_logical_not) {
		_8942_part=_8942_part.slice(1LL);
	}
	if (_8942_part.len() > 1LL) {
		(*this)._method_push_err(_8942_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _10017_result = (*this)._method_eval_directive_ident(_8942_part[0LL]._field_kind);
	if (_9013_logical_not) {
		_10017_result=(!(_10017_result));
	}
	return _10017_result;
}



inline jule::Bool _20c41511a_DirectiveEval::_method_eval(void) {
	if ((*((*this)._field_d))._field_args.len() == 0LL) {
		(*this)._method_push_err((*((*this)._field_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _11317_result = false;
	jule::Slice<jule::Slice<_20c47803a_Token>> _11517_logical_or_parts = (*this)._method_split_operans(jule::Str("||", 2),(*((*this)._field_d))._field_args);
	if (_11517_logical_or_parts == nullptr) {
		return false;
	}
	{
		auto &expr = _11517_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_5306819152:;
		if (it != expr.end()) {
			jule::Slice<_20c47803a_Token> _20c41511a_part = *it;
			{
				jule::Bool _12121_and = true;
				jule::Slice<jule::Slice<_20c47803a_Token>> _12221_logical_and_parts = (*this)._method_split_operans(jule::Str("&&", 2),_20c41511a_part);
				if (_12221_logical_and_parts == nullptr) {
					return false;
				}
				{
					auto &expr = _12221_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_5306823552:;
					if (it != expr.end()) {
						jule::Slice<_20c47803a_Token> _20c41511a_and_part = *it;
						{
							_20c47803a_Token _12821_first = _20c41511a_and_part[0LL];
							if ((_12821_first._field_id == 3LLU) && (_12821_first._field_kind == jule::Str("(", 1))) {
								_20c47803a_Token _13025_end = _20c41511a_and_part[_20c41511a_and_part.len() - 1LL];
								if ((_13025_end._field_id != 3LLU) || (_13025_end._field_kind != jule::Str(")", 1))) {
									(*this)._method_push_err(_12821_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								}
								_20c41511a_and_part=_20c41511a_and_part.slice(1LL,_20c41511a_and_part.len() - 1LL);
							}
							_12121_and=_12121_and && (*this)._method_eval_directive_part(_20c41511a_and_part);
						}
						_iter_next_5306823552:;
						++it;
						goto _iter_begin_5306823552;
					}
					_iter_end_5306823552:;
				}
				_11317_result=_11317_result || _12121_and;
			}
			_iter_next_5306819152:;
			++it;
			goto _iter_begin_5306819152;
		}
		_iter_end_5306819152:;
	}
	return _11317_result;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c41511a_DirectiveEval &_Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20c44b959_PlainImporter> _20c44b959_PlainImporter::_static_method_new(void) {
	return jule::new_struct<_20c44b959_PlainImporter>(new( std::nothrow ) _20c44b959_PlainImporter(jule::Slice<jule::Str>({_20ba03198_PATH_STDLIB}),jule::Str(),jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>>()));
}



inline void _20c44b959_PlainImporter::_method_set_mod_path(jule::Str _8835_path) {
	(*this)._field_mod=_8835_path;
}



inline jule::Str _20c44b959_PlainImporter::_method_get_mod_path(void) {
	return (*this)._field_mod;
}



inline jule::Str _20c44b959_PlainImporter::_method_mod_by_id(jule::Int _9628_id) {
	return (*this)._field_mods[_9628_id];
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20c44b959_PlainImporter::_method_get_import(jule::Str _10033_path) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_5306842384:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20c44b959_p = *it;
			{
				if ((*(_20c44b959_p))._field_path == _10033_path) {
					return _20c44b959_p;
				}
			}
			_iter_next_5306842384:;
			++it;
			goto _iter_begin_5306842384;
		}
		_iter_end_5306842384:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_20c476126_Ast>>,jule::Slice<_20a25b99c_Log>> _20c44b959_PlainImporter::_method_import_package(jule::Str _11037_path,jule::Bool _11048_update_mod) {
	jule::Slice<jule::Ptr<_20a23944c_DirEntry>> _11117_dirents = ({
		auto except = _20a23944c_Directory::_static_method_read(_11037_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_20a25b99c_Log>({_20c44b959_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _11037_path)}));
			return std::make_tuple(nullptr,jule::Slice<_20a25b99c_Log>({_20c44b959_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _11037_path)}));
		} jule::Slice<jule::Ptr<_20a23944c_DirEntry>>();});
	});
	if (_11048_update_mod) {
		jule::Str _11617_new_mod = _20c48aa64_find_module_file_deep(_11037_path);
		if (_11617_new_mod != (*this)._field_mod) {
			(*this)._field_mod=_11617_new_mod;
			jule::Slice<_20a25b99c_Log> _11925_errs = _20c48aa64_check_module_file((*this)._field_mod);
			if (_11925_errs.len() != 0LL) {
				return std::make_tuple(nullptr,_11925_errs);
			}
		}
	}
	jule::Slice<jule::Ptr<_20c476126_Ast>> _12617_asts = jule::Slice<jule::Ptr<_20c476126_Ast>>::alloc(0LL,static_cast<jule::I64>(_11117_dirents.len()));
	{
		auto &expr = _11117_dirents;
		auto it = expr.begin();
		_iter_begin_5306864992:;
		if (it != expr.end()) {
			jule::Ptr<_20a23944c_DirEntry> &_20c44b959_dirent = *it;
			{
				if ((*((*(_20c44b959_dirent))._field_stat))._method_is_dir() || (!(_20a405ddd_has_suffix((*(_20c44b959_dirent))._field_name,jule::Str(".jule", 5))))) {
					goto _iter_next_5306864992;
				}
				jule::Str _13317__path = _20a3911b9_join(jule::Slice<jule::Str>({_11037_path,(*(_20c44b959_dirent))._field_name}));
				jule::Ptr<_20c4792c2_File> _13421_file = _20c4792c2_new_file_set(_13317__path);
				(*(_13421_file))._method_fill(_20c44b959_read_buff((*(_13421_file))._method_path()));
				jule::Slice<_20a25b99c_Log> _13621_errors = _20c47ab20_lex(_13421_file);
				if (_13621_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_13621_errors);
				}
				jule::Ptr<_20c4d35c3_FileInfo> _14121_finfo = _20c4d35c3_parse_file(_13421_file);
				if ((*(_14121_finfo))._field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,(*(_14121_finfo))._field_errors);
				}
				if ((!(_20c414092_is_pass_file_annotation((*(_20c44b959_dirent))._field_name)))) {
					goto _iter_next_5306864992;
				}
				jule::Bool _15118_r;
				jule::Slice<_20a25b99c_Log> _15125_logs;
				std::tie(_15118_r,_15125_logs) = _20c44b959_is_pass_build_directives((*(_14121_finfo))._field_ast);
				if (_15125_logs.len() > 0LL) {
					return std::make_tuple(nullptr,_15125_logs);
				}
				if ((!(_15118_r))) {
					goto _iter_next_5306864992;
				}
				_12617_asts.push((*(_14121_finfo))._field_ast);
			}
			_iter_next_5306864992:;
			++it;
			goto _iter_begin_5306864992;
		}
		_iter_end_5306864992:;
	}
	return std::make_tuple(_12617_asts,nullptr);
}



inline void _20c44b959_PlainImporter::_method_imported(jule::Ptr<_20cba58cc_ImportInfo> _16735_imp) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_5306896944:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> &_20c44b959_p = *it;
			{
				if (((*(_20c44b959_p))._field_cpp_linked == (*(_16735_imp))._field_cpp_linked) && ((*(_20c44b959_p))._field_link_path == (*(_16735_imp))._field_link_path)) {
					return;
				}
			}
			_iter_next_5306896944:;
			++it;
			goto _iter_begin_5306896944;
		}
		_iter_end_5306896944:;
	}
	if ((*this)._field_mod.len() != 0LL) {
		{
			auto &expr = (*this)._field_mods;
			auto it = expr.begin();
			_iter_begin_5306897968:;
			if (it != expr.end()) {
				jule::Int _20c44b959_i = it - expr.begin();
				jule::Str &_20c44b959_mod = *it;
				{
					if ((*this)._field_mod == _20c44b959_mod) {
						(*(_16735_imp))._field_mod_id=_20c44b959_i;
						goto _julec_label_setted;
					}
				}
				_iter_next_5306897968:;
				++it;
				_20c44b959_i++;
				goto _iter_begin_5306897968;
			}
			_iter_end_5306897968:;
		}
		(*(_16735_imp))._field_mod_id=static_cast<jule::I64>((*this)._field_mods.len());
		(*this)._field_mods = jule::alloc_for_append((*this)._field_mods,1);(*this)._field_mods.push((*this)._field_mod);
		_julec_label_setted:;
	}
	(*this)._field_all_packages = jule::alloc_for_append((*this)._field_all_packages,1);(*this)._field_all_packages.push(_16735_imp);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c44b959_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "mods:" << _Src._field_mods << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c3e743d_OrderedDefines &_Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c3e743d_DefineOrderer::_static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_20c496047_Struct>>& _1737_s,jule::Ptr<_20c496047_Struct> _1746_t) {
	jule::Ptr<_20c496047_Struct>* _1817_p = (&((*(_1746_t))._field_depends[0LL]));
	jule::Ptr<_20c496047_Struct>* _1913_end = _1817_p + (*(_1746_t))._field_depends.len();
	{
		auto &expr = _1737_s;
		auto it = expr.begin();
		_iter_begin_5306995568:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> &_20c3e743d_tt = *it;
			{
				{
					if (_20c3e743d_tt == _1746_t) {
						goto _iter_end_5306995568;
					}
					if (((*((*(_1817_p))))._field_cpp_linked || ((*((*(_1817_p))))._field_depends.len() == 0LL)) || (_20c3e743d_tt == (*(_1817_p)))) {
						(_1817_p)++;
						if (_1817_p == _1913_end) {
							return true;
						}
					}
				}
			}
			_iter_next_5306995568:;
			++it;
			goto _iter_begin_5306995568;
		}
		_iter_end_5306995568:;
	}
	return false;
}



inline void _20c3e743d_DefineOrderer::_static_method_order_common_0(jule::Slice<jule::Ptr<_20c496047_Struct>>& _3840_s) {
	jule::Int _3917_i = 0LL;
	{
		auto &expr = _3840_s;
		auto it = expr.begin();
		_iter_begin_5306977472:;
		if (it != expr.end()) {
			jule::Int _20c3e743d_j = it - expr.begin();
			jule::Ptr<_20c496047_Struct> _20c3e743d_t = *it;
			{
				if ((*(_20c3e743d_t))._field_cpp_linked || ((*(_20c3e743d_t))._field_depends.len() == 0LL)) {
					_3840_s.swap(_3917_i,_20c3e743d_j);
					(_3917_i)++;
				}
			}
			_iter_next_5306977472:;
			++it;
			_20c3e743d_j++;
			goto _iter_begin_5306977472;
		}
		_iter_end_5306977472:;
	}
	jule::Int _4717_j = _3917_i;
	for (; _4717_j < _3840_s.len(); (_4717_j)++) {
		{
			jule::Int _4921_k = _3917_i;
			for (; _4921_k < (_3840_s.len() - 1LL); (_4921_k)++) {
				{
					if ((!(_20c3e743d_DefineOrderer::_static_method_is_common_ordered_0(_3840_s,_3840_s[_4921_k])))) {
						_3840_s.swap(_4921_k,static_cast<jule::Int>(_4921_k + 1LL));
					}
				}
			_iter_next_5306984160:;
			}
			_iter_end_5306984160:;
		}
	_iter_next_5306976128:;
	}
	_iter_end_5306976128:;
}



inline void _20c3e743d_DefineOrderer::_static_method_order_structures(jule::Slice<jule::Ptr<_20c496047_Struct>>& _6041_structs) {
	_20c3e743d_DefineOrderer::_static_method_order_common_0(_6041_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c3e743d_DefineOrderer &_Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}



inline void _20b661752_ScopeDeadCode::_method_optimize_child(jule::Ptr<_20cb4d853_Scope>& _2739_s) {
	jule::Ptr<_20b661752_ScopeDeadCode> _2817_sdc = jule::new_struct_ptr<_20b661752_ScopeDeadCode>(new( std::nothrow ) _20b661752_ScopeDeadCode(this->self,_2739_s,(&((*(_2739_s))._field_stmts)),jule::Int()));
	{
		(*(_2817_sdc))._method_optimize_stmts();
	}
}



inline void _20b661752_ScopeDeadCode::_method_eliminate_followed(void) {
	(*((*this)._field_stmts))=(*((*this)._field_stmts)).slice(0LL,(*this)._field_i + 1LL);
	jule::Ptr<_20b661752_ScopeDeadCode> _3817_parent = (*this)._field_parent;
	while (_3817_parent != nullptr) {
		{
			(*((*(_3817_parent))._field_stmts))=(*((*(_3817_parent))._field_stmts)).slice(0LL,(*(_3817_parent))._field_i + 1LL);
			_3817_parent=(*(_3817_parent))._field_parent;
		}
	_iter_next_5307199456:;
	}
	_iter_end_5307199456:;
}



inline void _20b661752_ScopeDeadCode::_method_optimize_stmt(jule::Any _4544_st) {
	{
		auto &_match_expr{ _4544_st };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_Scope>>()) {
			_case_begin_5307206240:;
			{
				jule::Ptr<_20cb4d853_Scope> _4821_scope = _4544_st.operator jule::Ptr<_20cb4d853_Scope>();
				if ((*(_4821_scope))._field_deferred) {
					_20b661752_eliminate_dead_code_of_scope(_4821_scope);
				} else {
					(*(this->self))._method_optimize_child(_4821_scope);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
			_case_begin_5307206336:;
			{
				{
					auto &_match_expr{ (*(_4544_st.operator jule::Ptr<_20d162d45_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>>()) {
						_case_begin_5307212848:;
						{
							(*(this->self))._method_eliminate_followed();
						}
					}
					_match_end_5307212624:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RetSt>>()) {
			_case_begin_5307206432:;
			{
				(*(this->self))._method_eliminate_followed();
			}
		}
		_match_end_5307206096:;
	}
}



inline void _20b661752_ScopeDeadCode::_method_optimize_stmts(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < (*((*(this->self))._field_stmts)).len(); ((*(this->self))._field_i)++) {
		{
			(*(this->self))._method_optimize_stmt((*((*(this->self))._field_stmts))[(*(this->self))._field_i]);
		}
	_iter_next_5307217216:;
	}
	_iter_end_5307217216:;
}







std::ostream &operator<<(std::ostream &_Stream, const _20b661752_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _20dc14918_AbsTime::_method_unix(void) {
	jule::Bool _5417_leap = false;
	jule::Uint _5517_y = (*this)._field_year - 1900LL;
	jule::Uint _5617_m = (*this)._field_month - 1LL;
	if ((_5617_m >= 12LL) || (_5617_m < 0LL)) {
		jule::Uint _5821_adj = jule::unsafe_div(_5617_m,12LL);
		_5617_m = jule::unsafe_mod(_5617_m,12LL);
		if (_5617_m < 0LL) {
			(_5821_adj)--;
			_5617_m+=12LL;
		}
		_5517_y+=_5821_adj;
	}
	jule::U64 _6617_t = _20dc14918_unix_year_to_seconds(_5517_y,_5417_leap);
	_6617_t+=static_cast<jule::U64>(_20dc14918_unix_month_to_seconds(_5617_m,_5417_leap));
	_6617_t+=static_cast<jule::Uint>(86400LL * ((*this)._field_day - 1LL));
	_6617_t+=static_cast<jule::Uint>(3600LL * (*this)._field_hour);
	_6617_t+=static_cast<jule::Uint>(60LL * (*this)._field_minute);
	_6617_t+=(*this)._field_second;
	return _6617_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _20dc14918_AbsTime &_Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _20dc14918_Time _20dc14918_Time::_static_method_unix(jule::U64 _8924_sec) {
	return _20dc14918_Time(_8924_sec);
}



inline _20dc14918_Time _20dc14918_Time::_static_method_now(void) {
	return _20dc14918_Time::_static_method_unix(static_cast<jule::U64>(_20dc14918_unix()));
}



inline jule::U64 _20dc14918_Time::_method_unix(void) {
	return (*this)._field_sec;
}



inline jule::Uint _20dc14918_Time::_method_day(void) {
	return (*this)._method_abs()._field_day;
}



inline jule::Uint _20dc14918_Time::_method_month(void) {
	return (*this)._method_abs()._field_month;
}



inline jule::Uint _20dc14918_Time::_method_year(void) {
	return (*this)._method_abs()._field_year;
}



inline jule::Uint _20dc14918_Time::_method_second(void) {
	return (*this)._method_abs()._field_second;
}



inline jule::Uint _20dc14918_Time::_method_minute(void) {
	return (*this)._method_abs()._field_minute;
}



inline jule::Uint _20dc14918_Time::_method_hour(void) {
	return (*this)._method_abs()._field_hour;
}



inline _20dc14918_AbsTime _20dc14918_Time::_method_abs(void) {
	jule::U64 _12513_secs = (*this)._field_sec - 951868800LL;
	jule::U64 _12617_days = jule::unsafe_div(_12513_secs,86400LL);
	jule::U64 _12717_rem_secs = jule::unsafe_mod(_12513_secs,86400LL);
	if (_12717_rem_secs < 0LL) {
		_12717_rem_secs+=86400LL;
		(_12617_days)--;
	}
	jule::U64 _13317_qc_cycles = jule::unsafe_div(_12617_days,146097LL);
	jule::U64 _13417_rem_days = jule::unsafe_mod(_12617_days,146097LL);
	if (_13417_rem_days < 0LL) {
		_13417_rem_days+=146097LL;
		(_13317_qc_cycles)--;
	}
	jule::U64 _14017_c_cycles = jule::unsafe_div(_13417_rem_days,36524LL);
	if (_14017_c_cycles == 4LL) {
		(_14017_c_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14017_c_cycles * 36524LL);
	jule::U64 _14617_q_cycles = jule::unsafe_div(_13417_rem_days,1461LL);
	if (_14617_q_cycles == 25LL) {
		(_14617_q_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14617_q_cycles * 1461LL);
	jule::U64 _15217_rem_years = jule::unsafe_div(_13417_rem_days,365LL);
	if (_15217_rem_years == 4LL) {
		(_15217_rem_years)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_15217_rem_years * 365LL);
	jule::U8 _15813_leap = static_cast<jule::U8>(((((_15217_rem_years == 0LL) && ((_14617_q_cycles > 0LL) || (_14017_c_cycles == 0LL)))) ? (1LLU) : (0LLU)));
	jule::U64 _15917_y_day = ((_13417_rem_days + 31LL) + 28LL) + _15813_leap;
	if (_15917_y_day >= (365LL + _15813_leap)) {
		_15917_y_day-=static_cast<jule::U8>(365LL + _15813_leap);
	}
	jule::Int _16417_months = 0LL;
	for (; _20dc14918_MDAYS[_16417_months] <= _13417_rem_days; (_16417_months)++) {
		{
			_13417_rem_days-=_20dc14918_MDAYS[_16417_months];
		}
	_iter_next_5307328576:;
	}
	_iter_end_5307328576:;
	_20dc14918_AbsTime _16917_t = _20dc14918_AbsTime();
	_16917_t._field_year=static_cast<jule::U64>((((_15217_rem_years + (4LL * _14617_q_cycles)) + (100LL * _14017_c_cycles)) + (400LL * _13317_qc_cycles)) + 100LL);
	_16917_t._field_month=static_cast<jule::Uint>(static_cast<jule::Uint>(_16417_months + 2LL));
	if (_16917_t._field_month >= 12LL) {
		_16917_t._field_month-=12LL;
		(_16917_t._field_year)++;
	}
	_16917_t._field_month+=1LL;
	_16917_t._field_year+=1900LL;
	_16917_t._field_day=static_cast<jule::U64>(_13417_rem_days + 1LL);
	_16917_t._field_week_day=static_cast<jule::U64>(jule::unsafe_mod(3LL + _12617_days,7LL));
	if (_16917_t._field_week_day < 0LL) {
		_16917_t._field_week_day+=7LL;
	}
	_16917_t._field_year_day=_15917_y_day;
	_16917_t._field_hour=static_cast<jule::U64>(jule::unsafe_div(_12717_rem_secs,3600LL));
	_16917_t._field_minute=static_cast<jule::U64>(jule::unsafe_mod(jule::unsafe_div(_12717_rem_secs,60LL),60LL));
	_16917_t._field_second=static_cast<jule::U64>(jule::unsafe_mod(_12717_rem_secs,60LL));
	return _16917_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _20dc14918_Time &_Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::I64 _20dc14918_Duration::_static_method_nanoseconds(jule::I64 _22231_d) {
	return static_cast<jule::I64>(_22231_d * 1LL);
}



inline jule::I64 _20dc14918_Duration::_static_method_microseconds(jule::I64 _22732_d) {
	return static_cast<jule::I64>(_22732_d * 1000LL);
}



inline jule::I64 _20dc14918_Duration::_static_method_milliseconds(jule::I64 _23232_d) {
	return static_cast<jule::I64>(_23232_d * 1000000LL);
}



inline jule::I64 _20dc14918_Duration::_static_method_seconds(jule::I64 _23727_d) {
	return static_cast<jule::I64>(_23727_d * 1000000000LL);
}



inline jule::I64 _20dc14918_Duration::_static_method_minutes(jule::I64 _24227_d) {
	return static_cast<jule::I64>(_24227_d * 60000000000LL);
}



inline jule::I64 _20dc14918_Duration::_static_method_hours(jule::I64 _24725_d) {
	return static_cast<jule::I64>(_24725_d * 3600000000000LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _20dc14918_Duration &_Src) {
	_Stream << "Duration{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20baa12ac_ScopeOptimizer> _20baa12ac_ScopeOptimizer::_static_method_new(jule::Ptr<_20cb4d853_Scope> _2927_scope) {
	return jule::new_struct<_20baa12ac_ScopeOptimizer>(new( std::nothrow ) _20baa12ac_ScopeOptimizer(jule::Int(),_2927_scope));
}



inline void _20baa12ac_ScopeOptimizer::_method_set_current_stmt(jule::Any _3539_stmt) {
	(*((*this)._field_scope))._field_stmts[(*this)._field_i]=_3539_stmt;
}



inline jule::Any _20baa12ac_ScopeOptimizer::_method_current_stmt(void) {
	return (*((*this)._field_scope))._field_stmts[(*this)._field_i];
}



inline void _20baa12ac_ScopeOptimizer::_method_optimize_data(jule::Ptr<_20d162d45_Data> _4336_d) {
	{
		auto &_match_expr{ (*(_4336_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_FnCallExprModel>>()) {
			_case_begin_5309240256:;
			{
				jule::Ptr<_20ccedeed_FnCallExprModel> _4621_m = (*(_4336_d))._field_model.operator jule::Ptr<_20ccedeed_FnCallExprModel>();
				if (_20a20bc9e_PRODUCTION) {
					if ((!((*((*(_4621_m))._field_func))._method_is_builtin())) && _20baa12ac_is_std_package((*((*((*((*(_4621_m))._field_func))._field_decl))._field_token._field_file))._method_path(),jule::Str("debug", 5))) {
						(*((*this)._field_scope))._field_stmts[(*this)._field_i]=jule::Any(nullptr);
					}
				}
			}
		}
		_match_end_5309240160:;
	}
}



inline void _20baa12ac_ScopeOptimizer::_method_optimize_conditional(jule::Ptr<_20cb4d853_Conditional> _5643_c) {
	if ((!(_20a20bc9e_OPT_COND))) {
		return;
	}
	jule::Bool _6117_const_case = false;
	{
		auto &expr = (*(_5643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5309251792:;
		if (it != expr.end()) {
			jule::Int _20baa12ac_i = it - expr.begin();
			jule::Ptr<_20cb4d853_If> _20baa12ac_elif = *it;
			{
				if ((!(_20baa12ac_is_constant_valid_conditional_case(_20baa12ac_elif)))) {
					goto _iter_next_5309251792;
				}
				_6117_const_case=true;
				(*(_5643_c))._field_elifs=(*(_5643_c))._field_elifs.slice(0LL,_20baa12ac_i + 1LL);
				(*(_20baa12ac_elif))._field_expr=jule::Any(nullptr);
				(*(_5643_c))._field_default=nullptr;
				goto _iter_end_5309251792;
			}
			_iter_next_5309251792:;
			++it;
			_20baa12ac_i++;
			goto _iter_begin_5309251792;
		}
		_iter_end_5309251792:;
	}
	jule::Ptr<_20cb4d853_If>* _7617_i = (&((*(_5643_c))._field_elifs[0LL]));
	jule::Ptr<_20cb4d853_If>* _7713_end = (&((*(_5643_c))._field_elifs[(*(_5643_c))._field_elifs.len() - 1LL]));
	for (; _7617_i <= _7713_end; (_7617_i)++) {
		{
			{
				if ((!(_20baa12ac_is_unreachable_conditional_case((*(_7617_i)))))) {
					(_7617_i)++;
					goto _iter_next_5309249744;
				}
				(*(_7617_i))=nullptr;
			}
		}
	_iter_next_5309249744:;
	}
	_iter_end_5309249744:;
	if ((*(_5643_c))._field_elifs.len() == 0LL) {
		return;
	}
	if ((!(_6117_const_case))) {
		return;
	}
	jule::Int _9717_only = -1LL;
	{
		auto &expr = (*(_5643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5309266992:;
		if (it != expr.end()) {
			jule::Int _20baa12ac_j = it - expr.begin();
			jule::Ptr<_20cb4d853_If> &_20baa12ac_elif = *it;
			{
				if (_20baa12ac_elif != nullptr) {
					if (_9717_only != -1LL) {
						return;
					}
					_9717_only=_20baa12ac_j;
				}
			}
			_iter_next_5309266992:;
			++it;
			_20baa12ac_j++;
			goto _iter_begin_5309266992;
		}
		_iter_end_5309266992:;
	}
	if (_9717_only != -1LL) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_5643_c))._field_elifs[_9717_only]))._field_scope));
	}
}



inline void _20baa12ac_ScopeOptimizer::_method_optimize_match(jule::Ptr<_20cb4d853_Match> _11437_m) {
	if ((!(_20a20bc9e_OPT_COND))) {
		return;
	}
	jule::Bool _11917_const_case = false;
	{
		auto &expr = (*(_11437_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5309276112:;
		if (it != expr.end()) {
			jule::Int _20baa12ac_i = it - expr.begin();
			jule::Ptr<_20cb4d853_Case> _20baa12ac_case = *it;
			{
				if ((!(_20baa12ac_is_constant_valid_match_case(_20baa12ac_case)))) {
					goto _iter_next_5309276112;
				}
				_11917_const_case=true;
				(*(_11437_m))._field_cases=(*(_11437_m))._field_cases.slice(0LL,_20baa12ac_i + 1LL);
				(*(_20baa12ac_case))._field_exprs=nullptr;
				(*(_11437_m))._field_default=nullptr;
				goto _iter_end_5309276112;
			}
			_iter_next_5309276112:;
			++it;
			_20baa12ac_i++;
			goto _iter_begin_5309276112;
		}
		_iter_end_5309276112:;
	}
	if ((*(_11437_m))._field_cases.len() == 0LL) {
		return;
	}
	jule::Ptr<_20cb4d853_Case>* _13817_i = (&((*(_11437_m))._field_cases[0LL]));
	jule::Ptr<_20cb4d853_Case>* _13913_end = (&((*(_11437_m))._field_cases[(*(_11437_m))._field_cases.len() - 1LL]));
	for (; _13817_i <= _13913_end; (_13817_i)++) {
		{
			{
				if ((!(_20baa12ac_is_unreachable_match_case((*(_13817_i)))))) {
					(_13817_i)++;
					goto _iter_next_5309274000;
				}
				(*(_13817_i))=nullptr;
			}
		}
	_iter_next_5309274000:;
	}
	_iter_end_5309274000:;
	if ((!(_11917_const_case))) {
		return;
	}
	jule::Int _15517_only = -1LL;
	{
		auto &expr = (*(_11437_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5309291056:;
		if (it != expr.end()) {
			jule::Int _20baa12ac_j = it - expr.begin();
			jule::Ptr<_20cb4d853_Case> &_20baa12ac_case = *it;
			{
				if (_20baa12ac_case != nullptr) {
					if (_15517_only != -1LL) {
						return;
					}
					_15517_only=_20baa12ac_j;
				}
			}
			_iter_next_5309291056:;
			++it;
			_20baa12ac_j++;
			goto _iter_begin_5309291056;
		}
		_iter_end_5309291056:;
	}
	if (_15517_only != -1LL) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_11437_m))._field_cases[_15517_only]))._field_scope));
	}
}



inline void _20baa12ac_ScopeOptimizer::_method_optimize_stmt(jule::Any _17236_stmt) {
	{
		auto &_match_expr{ _17236_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_Scope>>()) {
			_case_begin_5309298176:;
			{
				(*this)._method_optimize_child(_17236_stmt.operator jule::Ptr<_20cb4d853_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
			_case_begin_5309298272:;
			{
				(*this)._method_optimize_data(_17236_stmt.operator jule::Ptr<_20d162d45_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Conditional>>()) {
			_case_begin_5309298368:;
			{
				(*this)._method_optimize_conditional(_17236_stmt.operator jule::Ptr<_20cb4d853_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Match>>()) {
			_case_begin_5309298640:;
			{
				(*this)._method_optimize_match(_17236_stmt.operator jule::Ptr<_20cb4d853_Match>());
			}
		}
		_match_end_5309298016:;
	}
}



inline void _20baa12ac_ScopeOptimizer::_method_optimize_child(jule::Ptr<_20cb4d853_Scope> _18137_child) {
	jule::Ptr<_20baa12ac_ScopeOptimizer> _18217_so = _20baa12ac_ScopeOptimizer::_static_method_new(_18137_child);
	(*(_18217_so))._method_optimize();
}



inline void _20baa12ac_ScopeOptimizer::_method_optimize(void) {
	(*this)._field_i=0LL;
	for (; (*this)._field_i < (*((*this)._field_scope))._field_stmts.len(); ((*this)._field_i)++) {
		{
			(*this)._method_optimize_stmt((*this)._method_current_stmt());
		}
	_iter_next_5309310992:;
	}
	_iter_end_5309310992:;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa12ac_ScopeOptimizer &_Src) {
	_Stream << "ScopeOptimizer{";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20d5c851e_Optimizer> _20d5c851e_Optimizer::_static_method_new(jule::Ptr<_20b6b28b3_IR>& _2128_ir) {
	return jule::new_struct<_20d5c851e_Optimizer>(new( std::nothrow ) _20d5c851e_Optimizer(_2128_ir));
}



inline void _20d5c851e_Optimizer::_method_optimize_function(jule::Ptr<_20c819332_Fn>& _2741_func) {
	if ((*(_2741_func))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_2741_func))._field_instances;
		auto it = expr.begin();
		_iter_begin_5309317792:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_FnIns> _20d5c851e_ins = *it;
			{
				jule::Ptr<_20baa12ac_ScopeOptimizer> _3321_so = _20baa12ac_ScopeOptimizer::_static_method_new((*(_20d5c851e_ins))._field_scope);
				(*(_3321_so))._method_optimize();
			}
			_iter_next_5309317792:;
			++it;
			goto _iter_begin_5309317792;
		}
		_iter_end_5309317792:;
	}
}



inline void _20d5c851e_Optimizer::_method_optimize_struct(jule::Ptr<_20c496047_Struct>& _3839_s) {
	if ((*(_3839_s))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_3839_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5309323296:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_StructIns> _20d5c851e_ins = *it;
			{
				{
					auto &expr = (*(_20d5c851e_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_5309325760:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Fn> _20d5c851e_m = *it;
						{
							{
								auto &expr = (*(_20d5c851e_m))._field_instances;
								auto it = expr.begin();
								_iter_begin_5309327616:;
								if (it != expr.end()) {
									jule::Ptr<_20c819332_FnIns> _20d5c851e_mins = *it;
									{
										jule::Ptr<_20baa12ac_ScopeOptimizer> _4629_so = _20baa12ac_ScopeOptimizer::_static_method_new((*(_20d5c851e_mins))._field_scope);
										(*(_4629_so))._method_optimize();
									}
									_iter_next_5309327616:;
									++it;
									goto _iter_begin_5309327616;
								}
								_iter_end_5309327616:;
							}
						}
						_iter_next_5309325760:;
						++it;
						goto _iter_begin_5309325760;
					}
					_iter_end_5309325760:;
				}
			}
			_iter_next_5309323296:;
			++it;
			goto _iter_begin_5309323296;
		}
		_iter_end_5309323296:;
	}
}



inline void _20d5c851e_Optimizer::_method_optimize_functions(jule::Ptr<_20cba58cc_Package>& _5342_p) {
	{
		auto &expr = (*(_5342_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5309328384:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20d5c851e_f = *it;
			{
				{
					auto &expr = (*(_20d5c851e_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5309332928:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Fn> _20d5c851e_func = *it;
						{
							(*this)._method_optimize_function(_20d5c851e_func);
						}
						_iter_next_5309332928:;
						++it;
						goto _iter_begin_5309332928;
					}
					_iter_end_5309332928:;
				}
			}
			_iter_next_5309328384:;
			++it;
			goto _iter_begin_5309328384;
		}
		_iter_end_5309328384:;
	}
}



inline void _20d5c851e_Optimizer::_method_optimize_structs(jule::Ptr<_20cba58cc_Package>& _6140_p) {
	{
		auto &expr = (*(_6140_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5309336160:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20d5c851e_f = *it;
			{
				{
					auto &expr = (*(_20d5c851e_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_5309338032:;
					if (it != expr.end()) {
						jule::Ptr<_20c496047_Struct> _20d5c851e_s = *it;
						{
							(*this)._method_optimize_struct(_20d5c851e_s);
						}
						_iter_next_5309338032:;
						++it;
						goto _iter_begin_5309338032;
					}
					_iter_end_5309338032:;
				}
			}
			_iter_next_5309336160:;
			++it;
			goto _iter_begin_5309336160;
		}
		_iter_end_5309336160:;
	}
}



inline void _20d5c851e_Optimizer::_method_optimize_package(jule::Ptr<_20cba58cc_Package>& _6940_p) {
	(*this)._method_optimize_functions(_6940_p);
	(*this)._method_optimize_structs(_6940_p);
}



inline void _20d5c851e_Optimizer::_method_optimize(void) {
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5309343968:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20d5c851e_u = *it;
			{
				if ((!((*(_20d5c851e_u))._field_cpp_linked))) {
					(*this)._method_optimize_package((*(_20d5c851e_u))._field_package);
				}
			}
			_iter_next_5309343968:;
			++it;
			goto _iter_begin_5309343968;
		}
		_iter_end_5309343968:;
	}
	(*this)._method_optimize_package((*((*this)._field_ir))._field_main);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d5c851e_Optimizer &_Src) {
	_Stream << "Optimizer{";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20baa6c1e_Flag_0::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _20baa6c1e_Flag_0::_method_what(void) {
	return (*this)._field__what;
}



inline void _20baa6c1e_Flag_0::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _20baa6c1e_Flag_0::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_Flag_0 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _20baa6c1e_Flag_1::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _20baa6c1e_Flag_1::_method_what(void) {
	return (*this)._field__what;
}



inline void _20baa6c1e_Flag_1::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _20baa6c1e_Flag_1::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_Flag_1 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _20baa6c1e_Flag_2::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _20baa6c1e_Flag_2::_method_what(void) {
	return (*this)._field__what;
}



inline void _20baa6c1e_Flag_2::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _20baa6c1e_Flag_2::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_Flag_2 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _20baa6c1e_Flag_3::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _20baa6c1e_Flag_3::_method_what(void) {
	return (*this)._field__what;
}



inline void _20baa6c1e_Flag_3::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _20baa6c1e_Flag_3::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_Flag_3 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _20baa6c1e_Flag_4::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _20baa6c1e_Flag_4::_method_what(void) {
	return (*this)._field__what;
}



inline void _20baa6c1e_Flag_4::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _20baa6c1e_Flag_4::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_Flag_4 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20baa6c1e_FlagSet> _20baa6c1e_FlagSet::_static_method_new(void) {
	return jule::new_struct<_20baa6c1e_FlagSet>(new( std::nothrow ) _20baa6c1e_FlagSet(jule::Slice<jule::Trait<_20baa6c1e_CommonFlag>>::alloc(0LL,20LL)));
}



inline jule::Trait<_20baa6c1e_CommonFlag> _20baa6c1e_FlagSet::_method_find_flag(jule::Str _6732_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_5309416448:;
		if (it != expr.end()) {
			jule::Trait<_20baa6c1e_CommonFlag> _20baa6c1e_flag = *it;
			{
				if (_20baa6c1e_flag.get()._method_name() == _6732_name) {
					return _20baa6c1e_flag;
				}
			}
			_iter_next_5309416448:;
			++it;
			goto _iter_begin_5309416448;
		}
		_iter_end_5309416448:;
	}
	return nullptr;
}



inline jule::Trait<_20baa6c1e_CommonFlag> _20baa6c1e_FlagSet::_method_find_flag_short(jule::I32 _7738_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_5309421216:;
		if (it != expr.end()) {
			jule::Trait<_20baa6c1e_CommonFlag> _20baa6c1e_flag = *it;
			{
				if (_20baa6c1e_flag.get()._method_short() == _7738_name) {
					return _20baa6c1e_flag;
				}
			}
			_iter_next_5309421216:;
			++it;
			goto _iter_begin_5309421216;
		}
		_iter_end_5309421216:;
	}
	return nullptr;
}



inline jule::Slice<jule::Trait<_20baa6c1e_CommonFlag>> _20baa6c1e_FlagSet::_method_flags(void) {
	return (*this)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _20baa6c1e_FlagSet::_method_parse(jule::Slice<jule::Str> _11128_args) {
	_20baa6c1e_ArgParser _11217_ap = _20baa6c1e_ArgParser((*this),_11128_args,jule::Slice<jule::Str>(),jule::Int());
	({
		auto except = _11217_ap._method_parse();
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional<jule::Slice<jule::Str>>(jule::Any(),_11217_ap._field_content);
}



inline void _20baa6c1e_FlagSet::_method_reset(void) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_5309438096:;
		if (it != expr.end()) {
			jule::Trait<_20baa6c1e_CommonFlag> &_20baa6c1e_f = *it;
			{
				_20baa6c1e_f.get()._method_reset();
			}
			_iter_next_5309438096:;
			++it;
			goto _iter_begin_5309438096;
		}
		_iter_end_5309438096:;
	}
}



inline jule::Ptr<_20baa6c1e_Flag_4> _20baa6c1e_FlagSet::_method_add_flag_common_0(jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	
	if ((*this)._method_find_flag(_12741_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && ((*this)._method_find_flag_short(_12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_20baa6c1e_Flag_4> _14417_flag = jule::new_struct<_20baa6c1e_Flag_4>(new( std::nothrow ) _20baa6c1e_Flag_4(_12741_name,_12752_short,jule::Str(),_12765_what,jule::Ptr<jule::Str>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.push(_14417_flag);
	return _14417_flag;
}

inline jule::Ptr<_20baa6c1e_Flag_3> _20baa6c1e_FlagSet::_method_add_flag_common_1(jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	
	if ((*this)._method_find_flag(_12741_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && ((*this)._method_find_flag_short(_12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_20baa6c1e_Flag_3> _14417_flag = jule::new_struct<_20baa6c1e_Flag_3>(new( std::nothrow ) _20baa6c1e_Flag_3(_12741_name,_12752_short,jule::Bool(),_12765_what,jule::Ptr<jule::Bool>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.push(_14417_flag);
	return _14417_flag;
}





inline void _20baa6c1e_FlagSet::_method_add_var_0(jule::Ptr<jule::Str> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_20baa6c1e_Flag_4> _17217_flag = (*this)._method_add_flag_common_0(_17146_name,_17157_short,_17170_what);
	(*(_17217_flag))._field__default=(*(_17137_var));
	(*(_17217_flag))._field__data=_17137_var;
}

inline void _20baa6c1e_FlagSet::_method_add_var_1(jule::Ptr<jule::Bool> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_20baa6c1e_Flag_3> _17217_flag = (*this)._method_add_flag_common_1(_17146_name,_17157_short,_17170_what);
	(*(_17217_flag))._field__default=(*(_17137_var));
	(*(_17217_flag))._field__data=_17137_var;
}







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_FlagSet &_Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_IndexingExprModel &_Src) {
	_Stream << "IndexingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_EnumItemDecl::_method_auto_expr(void) {
	return (*this)._field_expr == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_EnumDecl::_method_default_typed(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_UseExpr &_Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20ccedeed_BuiltinAssertCallExprModel &_Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_CoExpr &_Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c4bea32_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20c496047_FieldIns> _20c496047_Field::_method_instance(void) {
	return jule::new_struct<_20c496047_FieldIns>(new( std::nothrow ) _20c496047_FieldIns(this->self,(*((*(this->self))._field_kind))._field_kind,jule::Ptr<_20d162d45_Data>()));
}







std::ostream &operator<<(std::ostream &_Stream, const _20c496047_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20c496047_StructIns> _20c496047_Struct::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	jule::Ptr<_20c496047_StructIns> _6817_ins = jule::new_struct_ptr<_20c496047_StructIns>(new( std::nothrow ) _20c496047_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c496047_FieldIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_fields.len())),jule::Slice<jule::Ptr<_20c819332_Fn>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_methods.len())),jule::Bool(),_20caa3115_ReferenceStack::_static_method_new()));
	{
		auto &expr = (*(this->self))._field_fields;
		auto it = expr.begin();
		_iter_begin_5299758816:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Field> _20c496047_f = *it;
			{
				(*(_6817_ins))._field_fields = jule::alloc_for_append((*(_6817_ins))._field_fields,1);(*(_6817_ins))._field_fields.push((*(_20c496047_f))._method_instance());
				if (((*((*(_20c496047_f))._field_kind))._field_kind != nullptr) && (*((*((*(_20c496047_f))._field_kind))._field_kind))._method_mutable()) {
					(*(_6817_ins))._field_mutable=true;
				}
			}
			_iter_next_5299758816:;
			++it;
			goto _iter_begin_5299758816;
		}
		_iter_end_5299758816:;
	}
	{
		auto &expr = (*(this->self))._field_methods;
		auto it = expr.begin();
		_iter_begin_5299751328:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20c496047_f = *it;
			{
				jule::Ptr<_20c819332_Fn> _8321_fins = jule::new_struct_ptr<_20c819332_Fn>(new( std::nothrow ) _20c819332_Fn((*(_20c496047_f))._field_sema,(*(_20c496047_f))._field_token,(*(_20c496047_f))._field_global,(*(_20c496047_f))._field_unsafety,(*(_20c496047_f))._field_public,(*(_20c496047_f))._field_cpp_linked,(*(_20c496047_f))._field_statically,(*(_20c496047_f))._field_exceptional,(*(_20c496047_f))._field_ident,(*(_20c496047_f))._field_directives,(*(_20c496047_f))._field_doc,(*(_20c496047_f))._field_scope,(*(_20c496047_f))._field_generics,(*(_20c496047_f))._field_result,(*(_20c496047_f))._field_params,(*(_20c496047_f))._field_owner,nullptr));
				(*(_6817_ins))._field_methods = jule::alloc_for_append((*(_6817_ins))._field_methods,1);(*(_6817_ins))._field_methods.push(_8321_fins);
			}
			_iter_next_5299751328:;
			++it;
			goto _iter_begin_5299751328;
		}
		_iter_end_5299751328:;
	}
	return _6817_ins;
}



inline jule::Ptr<_20c496047_StructIns> _20c496047_Struct::_method_append_instance(jule::Ptr<_20c496047_StructIns>& _11039_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_5299778160:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_StructIns> _20c496047_ains = *it;
			{
				if ((*(_20c496047_ains))._method_same(_11039_ins)) {
					return _20c496047_ains;
				}
			}
			_iter_next_5299778160:;
			++it;
			goto _iter_begin_5299778160;
		}
		_iter_end_5299778160:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_11039_ins);
	return nullptr;
}



inline jule::Ptr<_20c819332_Fn> _20c496047_Struct::_method_find_method(jule::Str _12834_ident,jule::Bool _12846_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5299785632:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20c496047_f = *it;
			{
				if (((*(_20c496047_f))._field_statically == _12846_statically) && ((*(_20c496047_f))._field_ident == _12834_ident)) {
					return _20c496047_f;
				}
			}
			_iter_next_5299785632:;
			++it;
			goto _iter_begin_5299785632;
		}
		_iter_end_5299785632:;
	}
	return nullptr;
}



inline jule::Ptr<_20cdc725d_Var> _20c496047_Struct::_method_find_static(jule::Str _13934_ident) {
	{
		auto &expr = (*this)._field_statics;
		auto it = expr.begin();
		_iter_begin_5299790288:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> _20c496047_v = *it;
			{
				if ((*(_20c496047_v))._field_ident == _13934_ident) {
					return _20c496047_v;
				}
			}
			_iter_next_5299790288:;
			++it;
			goto _iter_begin_5299790288;
		}
		_iter_end_5299790288:;
	}
	return nullptr;
}



inline jule::Ptr<_20c496047_Field> _20c496047_Struct::_method_find_field(jule::Str _15033_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_5299794496:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Field> _20c496047_f = *it;
			{
				if ((*(_20c496047_f))._field_ident == _15033_ident) {
					return _20c496047_f;
				}
			}
			_iter_next_5299794496:;
			++it;
			goto _iter_begin_5299794496;
		}
		_iter_end_5299794496:;
	}
	return nullptr;
}



inline jule::Bool _20c496047_Struct::_method_is_implements(jule::Ptr<_20cb471a9_Trait> _16032_t) {
	{
		auto &expr = (*this)._field_implements;
		auto it = expr.begin();
		_iter_begin_5299798704:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> &_20c496047_it = *it;
			{
				if (_16032_t == _20c496047_it) {
					return true;
				}
			}
			_iter_next_5299798704:;
			++it;
			goto _iter_begin_5299798704;
		}
		_iter_end_5299798704:;
	}
	return false;
}



inline jule::Bool _20c496047_Struct::_method_is_derives(jule::Str _17029_ident) {
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_5299802048:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> &_20c496047_d = *it;
			{
				if ((*(_20c496047_d))._field_tag._field_kind == jule::Str("derive", 6)) {
					if (((*(_20c496047_d))._field_args.len() == 1LL) && ((*(_20c496047_d))._field_args[0LL]._field_kind == _17029_ident)) {
						return true;
					}
				}
			}
			_iter_next_5299802048:;
			++it;
			goto _iter_begin_5299802048;
		}
		_iter_end_5299802048:;
	}
	return false;
}



inline jule::Bool _20c496047_Struct::_method_is_uses(jule::Ptr<_20c496047_Struct> _18226_s) {
	{
		auto &expr = (*this)._field_uses;
		auto it = expr.begin();
		_iter_begin_5299808256:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> &_20c496047_u = *it;
			{
				while (_18226_s == _20c496047_u) {
					{
						return true;
					}
				_iter_next_5299809536:;
				}
				_iter_end_5299809536:;
			}
			_iter_next_5299808256:;
			++it;
			goto _iter_begin_5299808256;
		}
		_iter_end_5299808256:;
	}
	return false;
}



inline jule::Bool _20c496047_Struct::_method_has_ref_accessible(void) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5299810064:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> &_20c496047_m = *it;
			{
				if (((*(_20c496047_m))._field_params.len() > 0LL) && (*((*(_20c496047_m))._field_params[0LL]))._method_is_ref()) {
					return true;
				}
			}
			_iter_next_5299810064:;
			++it;
			goto _iter_begin_5299810064;
		}
		_iter_end_5299810064:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c496047_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cba58cc_ImportInfo::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20cba58cc_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_20cdc725d_Var> _20cba58cc_ImportInfo::_method_find_var(jule::Str _16431_ident,jule::Bool _16443_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_16431_ident)))) {
		return nullptr;
	}
	return _20cba58cc_find_var_in_package((*((*this)._field_package))._field_files,_16431_ident,false);
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20cba58cc_ImportInfo::_method_find_type_alias(jule::Str _17738_ident,jule::Bool _17750_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17738_ident)))) {
		return nullptr;
	}
	return _20cba58cc_find_type_alias_in_package((*((*this)._field_package))._field_files,_17738_ident,false);
}



inline jule::Ptr<_20c496047_Struct> _20cba58cc_ImportInfo::_method_find_struct(jule::Str _19034_ident,jule::Bool _19046_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_19034_ident)))) {
		return nullptr;
	}
	return _20cba58cc_find_struct_in_package((*((*this)._field_package))._field_files,_19034_ident,false);
}



inline jule::Ptr<_20c819332_Fn> _20cba58cc_ImportInfo::_method_find_fn(jule::Str _20330_ident,jule::Bool _20342_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_20330_ident)))) {
		return nullptr;
	}
	return _20cba58cc_find_fn_in_package((*((*this)._field_package))._field_files,_20330_ident,false);
}



inline jule::Ptr<_20cb471a9_Trait> _20cba58cc_ImportInfo::_method_find_trait(jule::Str _21533_ident) {
	if ((!((*this)._method_is_lookupable(_21533_ident)))) {
		return nullptr;
	}
	return _20cba58cc_find_trait_in_package((*((*this)._field_package))._field_files,_21533_ident);
}



inline jule::Ptr<_20cb4c70e_Enum> _20cba58cc_ImportInfo::_method_find_enum(jule::Str _22732_ident) {
	if ((!((*this)._method_is_lookupable(_22732_ident)))) {
		return nullptr;
	}
	return _20cba58cc_find_enum_in_package((*((*this)._field_package))._field_files,_22732_ident);
}



inline jule::Bool _20cba58cc_ImportInfo::_method_is_lookupable(jule::Str _23728_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if (((*this)._field_alias.len() != 0LL) || (*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_23728_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _20cba58cc_ImportInfo::_method_exist_ident(jule::Str _25726_ident) {
	{
		auto &expr = (*this)._field_selected;
		auto it = expr.begin();
		_iter_begin_5301624032:;
		if (it != expr.end()) {
			_20c47803a_Token &_20cba58cc_sident = *it;
			{
				if (_20cba58cc_sident._field_kind == _25726_ident) {
					return true;
				}
			}
			_iter_next_5301624032:;
			++it;
			goto _iter_begin_5301624032;
		}
		_iter_end_5301624032:;
	}
	return false;
}



inline jule::Bool _20cba58cc_ImportInfo::_method_is_accessible_via_selection(void) {
	return ((*this)._field_import_all || ((*this)._field_selected.len() == 0LL)) || (*this)._method_exist_ident(jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, const _20cba58cc_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package << ", ";
	_Stream << "mod_id:" << _Src._field_mod_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_20c819332_ParamIns> _20c819332_Param::_method_instance(void) {
	return jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(this->self,jule::Ptr<_20d4a6c9e_TypeKind>()));
}



inline jule::Bool _20c819332_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _20c819332_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _20c819332_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20cdc725d_Var::_method_is_initialized(void) {
	return (*this)._field_value != nullptr;
}



inline jule::Bool _20cdc725d_Var::_method_is_type_inferred(void) {
	return ((*this)._field_kind == nullptr) || ((*((*this)._field_kind))._field_decl == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _20cdc725d_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline void _20d058ca2_TypeCompatibilityChecker::_method_push_err(jule::Str _13527_fmt,jule::Slice<jule::Any> _13540_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_13527_fmt,_13540_args);
}



inline jule::Bool _20d058ca2_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _13932_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_13932_ok = true;
		return _13932_ok;
	}
	jule::Ptr<_20cb471a9_Trait> _14413_trt = (*((*this)._field_dest))._method_trt();
	jule::Bool _14517_ref = false;
	{
		
		if ((*((*this)._field_src))._method_sptr() != nullptr) {
			_case_begin_5302894480:;
			{
				_14517_ref=true;
				(*this)._field_src=(*((*((*this)._field_src))._method_sptr()))._field_elem;
				if ((*((*this)._field_src))._method_strct() == nullptr) {
					_13932_ok = false;
					return _13932_ok;
				}
				goto _case_begin_5302894672;
			}
		}
		else if ((*((*this)._field_src))._method_strct() != nullptr) {
			_case_begin_5302894672:;
			{
				jule::Ptr<_20c496047_StructIns> _15617_s = (*((*this)._field_src))._method_strct();
				if ((!((*((*(_15617_s))._field_decl))._method_is_implements(_14413_trt)))) {
					_13932_ok = false;
					return _13932_ok;
				}
				if ((!(_14517_ref)) && _20d058ca2_trait_has_reference_receiver(_14413_trt)) {
					(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_13932_ok = false;
					return _13932_ok;
				}
				_13932_ok = true;
				return _13932_ok;
			}
		}
		else if ((*((*this)._field_src))._method_trt() != nullptr) {
			_case_begin_5302894768:;
			{
				_13932_ok = _14413_trt == (*((*this)._field_src))._method_trt();
				return _13932_ok;
			}
		}
		else {
			_case_begin_5302893008:;
			{
				_13932_ok = false;
				return _13932_ok;
			}
		}
		_match_end_5302892896:;
	}
}



inline jule::Bool _20d058ca2_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _17630_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_17630_ok = true;
		return _17630_ok;
	}
	jule::Ptr<_20d4a6c9e_Ptr> _18117_dest = (*((*this)._field_dest))._method_ptr();
	if ((*(_18117_dest))._method_is_unsafe()) {
		_17630_ok = true;
		return _17630_ok;
	}
	_17630_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _17630_ok;
}



inline jule::Bool _20d058ca2_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _19031_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_Prim> _19113_prim = (*((*this)._field_dest))._method_prim();
	if ((_19113_prim != nullptr) && (*(_19113_prim))._method_is_any()) {
		_19031_ok = true;
		return _19031_ok;
	}
	_19031_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _19031_ok;
}



inline jule::Bool _20d058ca2_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _19826_ok = jule::Bool();
	if ((*((*this)._field_dest))._method_ptr() != nullptr) {
		_19826_ok = (*this)._method_check_ptr();
		return _19826_ok;
	}
	if ((*((*this)._field_dest))._method_nil_compatible()) {
		if ((*((*this)._field_src))._method_is_nil()) {
			_19826_ok = true;
			return _19826_ok;
		}
	}
	{
		
		if ((*((*this)._field_dest))._method_prim() != nullptr) {
			_case_begin_5302927248:;
			{
				_19826_ok = (*this)._method_check_prim();
				return _19826_ok;
			}
		}
		else if ((*((*this)._field_dest))._method_trt() != nullptr) {
			_case_begin_5302927344:;
			{
				_19826_ok = (*this)._method_check_trait();
				return _19826_ok;
			}
		}
		else {
			_case_begin_5302925904:;
			{
				_19826_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
				return _19826_ok;
			}
		}
		_match_end_5302925664:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _20d058ca2_AssignTypeChecker::_method_push_err(jule::Str _22527_fmt,jule::Slice<jule::Any> _22540_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_22527_fmt,_22540_args);
}



inline jule::Bool _20d058ca2_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _23017_valid = true;
	{
		
		if ((*((*((*this)._field_d))._field_kind))._method_fnc() != nullptr) {
			_case_begin_5302937200:;
			{
				jule::Ptr<_20c819332_FnIns> _23417_f = (*((*((*this)._field_d))._field_kind))._method_fnc();
				{
					
					if ((*(_23417_f))._method_is_builtin()) {
						_case_begin_5302941856:;
						{
							(*this)._method_push_err(jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23417_f))._field_decl))._field_cpp_linked) {
						_case_begin_5302941968:;
						{
							(*this)._method_push_err(jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23417_f))._field_decl))._method_is_method()) {
						_case_begin_5302942080:;
						{
							(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23417_f))._field_decl))._field_generics.len() > 0LL) {
						_case_begin_5302942192:;
						{
							(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					_match_end_5302941664:;
				}
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_tup() != nullptr) {
			_case_begin_5302937312:;
			{
				(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23017_valid=false;
			}
		}
		_match_end_5302937040:;
	}
	return _23017_valid;
}



inline jule::Bool _20d058ca2_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*((*this)._field_d))._method_is_const())) || ((*((*this)._field_dest))._method_prim() == nullptr)) || ((*((*((*this)._field_d))._field_kind))._method_prim() == nullptr)) || (!(_20d853821_is_num((*((*((*((*this)._field_d))._field_kind))._method_prim()))._field_kind)))) {
		return false;
	}
	jule::Str _26913_kind = (*((*((*this)._field_dest))._method_prim()))._field_kind;
	{
		
		if (_20d853821_is_float(_26913_kind)) {
			_case_begin_5302963872:;
			{
				if ((!(_20d058ca2_float_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else if (_20d853821_is_int(_26913_kind)) {
			_case_begin_5302963968:;
			{
				if ((!(_20d058ca2_int_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else {
			_case_begin_5302962272:;
			{
				return false;
			}
		}
		_match_end_5302962032:;
	}
	return true;
}



inline jule::Bool _20d058ca2_AssignTypeChecker::_method_is_prim(void) {
	if ((*((*this)._field_dest))._field_variadic || (*((*((*this)._field_d))._field_kind))._field_variadic) {
		return false;
	}
	if ((*((*this)._field_dest))._method_cpp_linked() || (*((*((*this)._field_d))._field_kind))._method_cpp_linked()) {
		return false;
	}
	return ((*((*this)._field_dest))._method_prim() != nullptr) && ((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr);
}



inline jule::Bool _20d058ca2_AssignTypeChecker::_method_check(void) {
	{
		
		if ((*this)._field_d == nullptr) {
			_case_begin_5302977984:;
			{
				return false;
			}
		}
		else if ((!((*this)._method_check_validity()))) {
			_case_begin_5302978320:;
			{
				return false;
			}
		}
		else if ((*this)._method_check_const()) {
			_case_begin_5302978416:;
			{
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_enm() != nullptr) {
			_case_begin_5302978528:;
			{
				jule::Ptr<_20d4a6c9e_TypeKind> _31821_dkind = (*this)._field_dest;
				if ((*((*this)._field_dest))._method_enm() != nullptr) {
					_31821_dkind=(*((*((*((*this)._field_dest))._method_enm()))._field_kind))._field_kind;
				} else if ((*((*this)._field_dest))._method_prim() == nullptr) {
					goto _match_end_5302976592;
				}
				if (_20d79053d_types_are_compatible((*((*((*((*((*((*((*this)._field_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._field_kind,(*((*(_31821_dkind))._method_prim()))._field_kind)) {
					return true;
				}
			}
		}
		else if ((*this)._method_is_prim()) {
			_case_begin_5302978640:;
			{
				jule::Ptr<_20d4a6c9e_Prim> _33017_dest = (*((*this)._field_dest))._method_prim();
				if ((*(_33017_dest))._method_is_any()) {
					return true;
				}
				jule::Ptr<_20d4a6c9e_Prim> _33421_src = (*((*((*this)._field_d))._field_kind))._method_prim();
				if (_20d79053d_types_are_compatible((*(_33017_dest))._field_kind,(*(_33421_src))._field_kind)) {
					return true;
				}
			}
		}
		_match_end_5302976592:;
	}
	return (*((*this)._field_s))._method_check_type_compatibility((*this)._field_dest,(*((*this)._field_d))._field_kind,(*this)._field_error_token);
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _20d058ca2_DynamicTypeAnnotation::_method_push_generic(jule::Ptr<_20d4a6c9e_TypeKind>& _35336_k,jule::Int _35350_i) {
	(*((*this)._field_f))._field_generics[_35350_i]=_35336_k;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_prim(jule::Ptr<_20d4a6c9e_TypeKind>& _35744_k) {
	jule::Bool _35760_ok = jule::Bool();
	jule::Str _35813_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_5303013488:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			jule::Ptr<_20c476dc4_GenericDecl> &_20d058ca2_g = *it;
			{
				if (_35813_kind != (*(_20d058ca2_g))._field_ident) {
					goto _iter_next_5303013488;
				}
				jule::Ptr<_20d4a6c9e_TypeKind> _36417_t = (*((*this)._field_f))._field_generics[_20d058ca2_i];
				{
					
					if (_36417_t == nullptr) {
						_case_begin_5303018320:;
						{
							(*this)._method_push_generic(_35744_k,_20d058ca2_i);
						}
					}
					else if ((!((*(_36417_t))._method_equals(_35744_k)))) {
						_case_begin_5303018416:;
						{
							_35760_ok = false;
							return _35760_ok;
						}
					}
					_match_end_5303018080:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_35744_k))._field_kind;
				_35760_ok = true;
				return _35760_ok;
			}
			_iter_next_5303013488:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303013488;
		}
		_iter_end_5303013488:;
	}
	_35760_ok = false;
	return _35760_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_slc(jule::Ptr<_20d4a6c9e_TypeKind>& _38143_k) {
	jule::Bool _38159_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_Slc> _38217_pslc = (*((*((*this)._field_k))))._method_slc();
	if (_38217_pslc == nullptr) {
		_38159_ok = false;
		return _38159_ok;
	}
	jule::Ptr<_20d4a6c9e_Slc> _38717_slc = (*(_38143_k))._method_slc();
	(*this)._field_k=(&((*(_38217_pslc))._field_elem));
	_38159_ok = (*this)._method_annotate_kind((*(_38717_slc))._field_elem);
	return _38159_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_check_map_key(jule::Ptr<_20d4a6c9e_TypeKind>* _39243_k,jule::Ptr<_20d4a6c9e_TypeKind>& _39263_ck) {
	jule::Bool _39280_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_TypeKind>* _39317_old = (*this)._field_k;
	(*this)._field_k=_39243_k;
	_39280_ok=(*this)._method_annotate_kind(_39263_ck);
	(*this)._field_k=_39317_old;
	return _39280_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_map(jule::Ptr<_20d4a6c9e_TypeKind>& _40043_k) {
	jule::Bool _40059_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_Map> _40117_pmap = (*((*((*this)._field_k))))._method_map();
	if (_40117_pmap == nullptr) {
		_40059_ok = false;
		return _40059_ok;
	}
	jule::Ptr<_20d4a6c9e_Map> _40617_m = (*(_40043_k))._method_map();
	_40059_ok = (*this)._method_check_map_key((&((*(_40117_pmap))._field_key)),(*(_40617_m))._field_key) && (*this)._method_check_map_key((&((*(_40117_pmap))._field_val)),(*(_40617_m))._field_val);
	return _40059_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_fn(jule::Ptr<_20d4a6c9e_TypeKind>& _41242_k) {
	jule::Bool _41258_ok = jule::Bool();
	jule::Ptr<_20c819332_FnIns> _41317_pf = (*((*((*this)._field_k))))._method_fnc();
	if (_41317_pf == nullptr) {
		_41258_ok = false;
		return _41258_ok;
	}
	jule::Ptr<_20c819332_FnIns> _41717_f = (*(_41242_k))._method_fnc();
	{
		
		if ((*(_41317_pf))._field_params.len() != (*(_41717_f))._field_params.len()) {
			_case_begin_5303053008:;
			{
				_41258_ok = false;
				return _41258_ok;
			}
		}
		else if ((*((*(_41317_pf))._field_decl))._method_is_void() != (*((*(_41717_f))._field_decl))._method_is_void()) {
			_case_begin_5303053120:;
			{
				_41258_ok = false;
				return _41258_ok;
			}
		}
		_match_end_5303052848:;
	}
	_41258_ok=true;
	jule::Ptr<_20d4a6c9e_TypeKind>* _42717_old = (*this)._field_k;
	{
		auto &expr = (*(_41717_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5303057648:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			jule::Ptr<_20c819332_ParamIns> _20d058ca2_fp = *it;
			{
				(*this)._field_k=(&((*((*(_41317_pf))._field_params[_20d058ca2_i]))._field_kind));
				_41258_ok=(*this)._method_annotate_kind((*(_20d058ca2_fp))._field_kind) && _41258_ok;
			}
			_iter_next_5303057648:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303057648;
		}
		_iter_end_5303057648:;
	}
	if ((!((*((*(_41317_pf))._field_decl))._method_is_void()))) {
		(*this)._field_k=(&((*(_41317_pf))._field_result));
		_41258_ok=(*this)._method_annotate_kind((*(_41717_f))._field_result) && _41258_ok;
	}
	(*this)._field_k=_42717_old;
	return _41258_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ptr<_20d4a6c9e_TypeKind>& _44243_k) {
	jule::Bool _44259_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_Ptr> _44317_pptr = (*((*((*this)._field_k))))._method_ptr();
	if (_44317_pptr == nullptr) {
		_44259_ok = false;
		return _44259_ok;
	}
	jule::Ptr<_20d4a6c9e_Ptr> _44817_ptr = (*(_44243_k))._method_ptr();
	(*this)._field_k=(&((*(_44317_pptr))._field_elem));
	_44259_ok = (*this)._method_annotate_kind((*(_44817_ptr))._field_elem);
	return _44259_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_sptr(jule::Ptr<_20d4a6c9e_TypeKind>& _45344_k) {
	jule::Bool _45360_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_Sptr> _45417_ssptr = (*((*((*this)._field_k))))._method_sptr();
	if (_45417_ssptr == nullptr) {
		_45360_ok = false;
		return _45360_ok;
	}
	jule::Ptr<_20d4a6c9e_Sptr> _45917_sptr = (*(_45344_k))._method_sptr();
	(*this)._field_k=(&((*(_45417_ssptr))._field_elem));
	_45360_ok = (*this)._method_annotate_kind((*(_45917_sptr))._field_elem);
	return _45360_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_any(jule::Ptr<_20d4a6c9e_TypeKind>& _46443_k) {
	jule::Bool _46459_ok = jule::Bool();
	jule::Str _46513_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_5303087584:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			jule::Ptr<_20c476dc4_GenericDecl> &_20d058ca2_g = *it;
			{
				if (_46513_kind != (*(_20d058ca2_g))._field_ident) {
					goto _iter_next_5303087584;
				}
				jule::Ptr<_20d4a6c9e_TypeKind> _47117_t = (*((*this)._field_f))._field_generics[_20d058ca2_i];
				{
					
					if (_47117_t == nullptr) {
						_case_begin_5303092416:;
						{
							(*this)._method_push_generic(_46443_k,_20d058ca2_i);
						}
					}
					else if ((!((*(_47117_t))._method_equals(_46443_k)))) {
						_case_begin_5303092512:;
						{
							_46459_ok = false;
							return _46459_ok;
						}
					}
					_match_end_5303092176:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_46443_k))._field_kind;
				_46459_ok = true;
				return _46459_ok;
			}
			_iter_next_5303087584:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303087584;
		}
		_iter_end_5303087584:;
	}
	_46459_ok = false;
	return _46459_ok;
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate_kind(jule::Ptr<_20d4a6c9e_TypeKind>& _48844_k) {
	jule::Bool _48860_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _48860_ok;
	}
	{
		
		if ((*this)._method_annotate_any(_48844_k)) {
			_case_begin_5303101360:;
			{
				_48860_ok = true;
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_prim() != nullptr) {
			_case_begin_5303101456:;
			{
				_48860_ok = (*this)._method_annotate_prim(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_slc() != nullptr) {
			_case_begin_5303100704:;
			{
				_48860_ok = (*this)._method_annotate_slc(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_map() != nullptr) {
			_case_begin_5303100800:;
			{
				_48860_ok = (*this)._method_annotate_map(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_fnc() != nullptr) {
			_case_begin_5303100896:;
			{
				_48860_ok = (*this)._method_annotate_fn(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_ptr() != nullptr) {
			_case_begin_5303100112:;
			{
				_48860_ok = (*this)._method_annotate_ptr(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_sptr() != nullptr) {
			_case_begin_5303100208:;
			{
				_48860_ok = (*this)._method_annotate_sptr(_48844_k);
				return _48860_ok;
			}
		}
		else {
			_case_begin_5303098432:;
			{
				_48860_ok = false;
				return _48860_ok;
			}
		}
		_match_end_5303098320:;
	}
}



inline jule::Bool _20d058ca2_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _50536_ok = jule::Bool();
	(*this)._field_k=(&((*((*this)._field_p))._field_kind));
	_50536_ok = (*this)._method_annotate_kind((*((*this)._field_a))._field_kind);
	return _50536_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _20d058ca2_FnCallArgChecker::_method_push_err_token(_20c47803a_Token _52133_token,jule::Str _52147_fmt,jule::Slice<jule::Any> _52160_args) {
	(*((*((*this)._field_e))._field_s))._method_push_err(_52133_token,_52147_fmt,_52160_args);
}



inline void _20d058ca2_FnCallArgChecker::_method_push_err(jule::Str _52527_fmt,jule::Slice<jule::Any> _52540_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_52527_fmt,_52540_args);
}



inline jule::Slice<jule::Ptr<_20c819332_ParamIns>> _20d058ca2_FnCallArgChecker::_method_get_params(void) {
	if ((((*((*this)._field_f))._field_params.len() > 0LL) && ((*((*((*this)._field_f))._field_params[0LL]))._field_decl != nullptr)) && (*((*((*((*this)._field_f))._field_params[0LL]))._field_decl))._method_is_self()) {
		return (*((*this)._field_f))._field_params.slice(1LL);
	}
	return (*((*this)._field_f))._field_params;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ptr<_20c819332_ParamIns>>& _53832_params) {
	jule::Bool _53855_ok = jule::Bool();
	jule::I64 _53917_n = _53832_params.len();
	if ((_53917_n > 0LL) && (*((*(_53832_params[0LL]))._field_decl))._method_is_self()) {
		(_53917_n)--;
	}
	jule::I64 _54417_diff = _53917_n - (*this)._field_args.len();
	{
		
		if (_54417_diff == 0LL) {
			_case_begin_5303141040:;
			{
				_53855_ok = true;
				return _53855_ok;
			}
		}
		else if ((_53917_n > 0LL) && (*((*(_53832_params[_53917_n - 1LL]))._field_decl))._field_variadic) {
			_case_begin_5303141152:;
			{
				_53855_ok = true;
				return _53855_ok;
			}
		}
		else if ((_54417_diff < 0LL) || (_54417_diff > _53832_params.len())) {
			_case_begin_5303141264:;
			{
				(*this)._method_push_err(jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_53855_ok = false;
				return _53855_ok;
			}
		}
		_match_end_5303140608:;
	}
	jule::Str _55717_idents = jule::Str();
	for (; _54417_diff > 0LL; (_54417_diff)--) {
		{
			_55717_idents+=jule::Str(", ", 2) + (*((*(_53832_params[_53917_n - _54417_diff]))._field_decl))._field_ident;
		}
	_iter_next_5303147712:;
	}
	_iter_end_5303147712:;
	_55717_idents=_55717_idents.slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_55717_idents)}));
	_53855_ok = false;
	return _53855_ok;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_check_arg(jule::Ptr<_20c819332_ParamIns>& _56733_p,jule::Ptr<_20d162d45_Data>& _56752_arg,_20c47803a_Token& _56769_error_token) {
	jule::Bool _56791_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation && _20c819332_parameter_uses_generics((*(_56733_p))._field_decl,(*((*((*this)._field_f))._field_decl))._field_generics)) {
		_20d058ca2_DynamicTypeAnnotation _56921_dta = _20d058ca2_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_56733_p,_56752_arg,_56769_error_token,nullptr);
		_56791_ok=_56921_dta._method_annotate();
		if ((!(_56791_ok))) {
			(*this)._method_push_err_token(_56769_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_56791_ok = false;
			return _56791_ok;
		}
	}
	(*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((*((*(_56733_p))._field_decl))._field_mutable,(*((*(_56733_p))._field_decl))._field_reference,(*(_56733_p))._field_kind,_56752_arg,_56769_error_token);
	(*((*((*this)._field_e))._field_s))._method_check_assign_type((*((*(_56733_p))._field_decl))._field_reference,(*(_56733_p))._field_kind,_56752_arg,_56769_error_token);
	_56791_ok = true;
	return _56791_ok;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_push(jule::Ptr<_20c819332_ParamIns>& _58928_p,jule::Ptr<_20c476dc4_Expr> _58946_arg) {
	jule::Bool _58960_ok = jule::Bool();
	jule::Ptr<_20d4a6c9e_TypeKind> _59017_old = (*((*this)._field_e))._field_prefix;
	jule::Bool _59113_old_immut = (*((*this)._field_e))._field_immutable;
	jule::Ptr<_20d162d45_Data> _59217_d = nullptr;
	(*((*this)._field_e))._field_immutable=(!((*((*(_58928_p))._field_decl))._field_mutable));
	if ((!((*this)._field_dynamic_annotation)) && (!((*((*(_58928_p))._field_decl))._field_variadic))) {
		(*((*this)._field_e))._field_prefix=(*(_58928_p))._field_kind;
	} else {
		(*((*this)._field_e))._field_prefix=nullptr;
	}
	_59217_d=(*((*this)._field_e))._method_eval_expr_kind((*(_58946_arg))._field_kind);
	(*((*this)._field_e))._field_prefix=_59017_old;
	(*((*this)._field_e))._field_immutable=_59113_old_immut;
	if (_59217_d == nullptr) {
		_58960_ok = false;
		return _58960_ok;
	}
	(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push((*(_59217_d))._field_model);
	_58960_ok = (*this)._method_check_arg(_58928_p,_59217_d,(*(_58946_arg))._field_token);
	return _58960_ok;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_push_variadic(jule::Ptr<_20c819332_ParamIns>& _61337_p,jule::Int _61355_i) {
	jule::Bool _61365_ok = jule::Bool();
	_61365_ok=true;
	jule::Bool _61517_variadiced = false;
	jule::Bool _61613_more = (_61355_i + 1LL) < (*this)._field_args.len();
	jule::Ptr<_20ccedeed_SliceExprModel> _61717_model = jule::new_struct<_20ccedeed_SliceExprModel>(new( std::nothrow ) _20ccedeed_SliceExprModel((*(_61337_p))._field_kind,jule::Slice<jule::Any>()));
	jule::Ptr<_20d4a6c9e_TypeKind> _62117_old = (*((*this)._field_e))._field_prefix;
	for (; _61355_i < (*this)._field_args.len(); (_61355_i)++) {
		{
			jule::Ptr<_20c476dc4_Expr> _62321_arg = (*this)._field_args[_61355_i];
			{
				auto &_match_expr{ (*(_62321_arg))._field_kind };
				
				if (_match_expr.type_is<jule::Ptr<_20c476dc4_VariadicExpr>>()) {
					_case_begin_5303193184:;
					{
						(*((*this)._field_e))._field_prefix=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc((*(_61337_p))._field_kind))));
					}
				}
				else {
					_case_begin_5303194672:;
					{
						(*((*this)._field_e))._field_prefix=(*(_61337_p))._field_kind;
					}
				}
				_match_end_5303194576:;
			}
			jule::Ptr<_20d162d45_Data> _63321_d = (*((*this)._field_e))._method_eval(_62321_arg);
			if (_63321_d == nullptr) {
				_61365_ok=false;
				goto _iter_next_5303191200;
			}
			if ((*((*(_63321_d))._field_kind))._field_variadic) {
				_61517_variadiced=true;
				jule::Bool _64221_pold = (*((*(_61337_p))._field_kind))._field_variadic;
				jule::Bool _64321_dold = (*((*(_63321_d))._field_kind))._field_variadic;
				(*((*(_61337_p))._field_kind))._field_variadic=false;
				(*((*(_63321_d))._field_kind))._field_variadic=false;
				__JULE_DEFER({
					(*((*(_61337_p))._field_kind))._field_variadic=_64221_pold;
					(*((*(_63321_d))._field_kind))._field_variadic=_64321_dold;
				});
				{
					auto &_match_expr{ (*(_63321_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_20ccedeed_SliceExprModel>>()) {
						_case_begin_5303204000:;
						{
							_61717_model=(*(_63321_d))._field_model.operator jule::Ptr<_20ccedeed_SliceExprModel>();
							(*(_61717_model))._field_elem_kind=(*(_61337_p))._field_kind;
						}
					}
					else {
						_case_begin_5303205728:;
						{
							_61717_model=nullptr;
							(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push((*(_63321_d))._field_model);
						}
					}
					_match_end_5303205648:;
				}
				_61365_ok=_61365_ok && (*this)._method_check_arg(_61337_p,_63321_d,(*(_62321_arg))._field_token);
				goto _iter_next_5303191200;
			}
			(*(_61717_model))._field_elems = jule::alloc_for_append((*(_61717_model))._field_elems,1);(*(_61717_model))._field_elems.push((*(_63321_d))._field_model);
			_61365_ok=_61365_ok && (*this)._method_check_arg(_61337_p,_63321_d,(*(_62321_arg))._field_token);
		}
	_iter_next_5303191200:;
	}
	_iter_end_5303191200:;
	(*((*this)._field_e))._field_prefix=_62117_old;
	if (_61517_variadiced && _61613_more) {
		(*this)._method_push_err(jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	}
	if (_61717_model != nullptr) {
		(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push(jule::Any(_61717_model));
	}
	return _61365_ok;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ptr<_20c819332_ParamIns>>& _68034_params) {
	jule::Bool _68057_ok = jule::Bool();
	_68057_ok=true;
	jule::Int _68217_i = 0LL;
	_julec_label_iter:;
	while (_68217_i < _68034_params.len()) {
		{
			jule::Ptr<_20c819332_ParamIns> _68521_p = _68034_params[_68217_i];
			{
				
				if ((*((*(_68521_p))._field_decl))._method_is_self()) {
					_case_begin_5303226464:;
				}
				else if ((*((*(_68521_p))._field_decl))._field_variadic) {
					_case_begin_5303226176:;
					{
						_68057_ok=(*this)._method_push_variadic(_68521_p,_68217_i) && _68057_ok;
						goto _iter_end_5303223040;
					}
				}
				else if ((*this)._field_args.len() <= _68217_i) {
					_case_begin_5303228048:;
					{
						_68057_ok=false;
						goto _iter_end_5303223040;
					}
				}
				else {
					_case_begin_5303225376:;
					{
						_68057_ok=(*this)._method_push(_68521_p,(*this)._field_args[_68217_i]) && _68057_ok;
					}
				}
				_match_end_5303225264:;
			}
			(_68217_i)++;
		}
	_iter_next_5303223040:;
	}
	_iter_end_5303223040:;
	return _68057_ok;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _70750_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_5303234448:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeKind> &_20d058ca2_g = *it;
			{
				if (_20d058ca2_g == nullptr) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_70750_ok = false;
					return _70750_ok;
				}
			}
			_iter_next_5303234448:;
			++it;
			goto _iter_begin_5303234448;
		}
		_iter_end_5303234448:;
	}
	_70750_ok = true;
	return _70750_ok;
}



inline jule::Bool _20d058ca2_FnCallArgChecker::_method_check(void) {
	jule::Bool _71726_ok = jule::Bool();
	jule::Slice<jule::Ptr<_20c819332_ParamIns>> _71817_params = (*this)._method_get_params();
	_71726_ok=(*this)._method_check_counts(_71817_params);
	if ((!(_71726_ok))) {
		_71726_ok = false;
		return _71726_ok;
	}
	_71726_ok=(*this)._method_check_args(_71817_params);
	if (_71726_ok && (*this)._field_dynamic_annotation) {
		_71726_ok=(*this)._method_check_dynamic_type_annotation();
	}
	return _71726_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _20d058ca2_StructLitChecker::_method_push_err(_20c47803a_Token _74127_token,jule::Str _74141_fmt,jule::Slice<jule::Any> _74154_args) {
	(*((*this)._field_e))._method_push_err(_74127_token,_74141_fmt,_74154_args);
}



inline void _20d058ca2_StructLitChecker::_method_push_suggestion(jule::Str _74634_fmt,jule::Slice<jule::Any> _74647_args) {
	(*((*this)._field_e))._method_push_suggestion(_74634_fmt,_74647_args);
}



inline void _20d058ca2_StructLitChecker::_method_push_match(jule::Ptr<_20c496047_FieldIns>& _75034_f,jule::Ptr<_20d162d45_Data>& _75053_d,_20c47803a_Token& _75068_error_token) {
	(*this)._field_args = jule::alloc_for_append((*this)._field_args,1);(*this)._field_args.push(jule::new_struct<_20ccedeed_StructArgExprModel>(new( std::nothrow ) _20ccedeed_StructArgExprModel(_75034_f,(*(_75053_d))._field_model)));
	
	(*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((!((*((*this)._field_e))._field_immutable)),false,(*(_75034_f))._field_kind,_75053_d,_75068_error_token);
	(*((*((*this)._field_e))._field_s))._method_check_assign_type(false,(*(_75034_f))._field_kind,_75053_d,_75068_error_token);
}



inline void _20d058ca2_StructLitChecker::_method_check_pair(jule::Ptr<_20c476dc4_FieldExprPair>& _76134_pair,jule::Slice<jule::Any>& _76161_exprs) {
	jule::Ptr<_20c496047_FieldIns> _76317_f = (*((*this)._field_s))._method_find_field((*(_76134_pair))._field_field._field_kind);
	if (_76317_f == nullptr) {
		(*this)._method_push_err((*(_76134_pair))._field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_76134_pair))._field_field._field_kind)}));
		return;
	}
	if ((!((*((*((*this)._field_e))._field_s))._method_is_accessible_define((*((*(_76317_f))._field_decl))._field_public,(*((*(_76317_f))._field_decl))._field_token)))) {
		(*this)._method_push_err((*(_76134_pair))._field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_76134_pair))._field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	_julec_label_dup_lookup:;
	{
		auto &expr = _76161_exprs;
		auto it = expr.begin();
		_iter_begin_5303279008:;
		if (it != expr.end()) {
			jule::Any _20d058ca2_expr = *it;
			{
				{
					auto &_match_expr{ _20d058ca2_expr };
					
					if (_match_expr.type_is<jule::Ptr<_20c476dc4_FieldExprPair>>()) {
						_case_begin_5303280640:;
						{
							jule::Ptr<_20c476dc4_FieldExprPair> _77925_dpair = _20d058ca2_expr.operator jule::Ptr<_20c476dc4_FieldExprPair>();
							{
								
								if (_76134_pair == _77925_dpair) {
									_case_begin_5303283392:;
									{
										goto _iter_end_5303279008;
									}
								}
								else if ((*(_76134_pair))._field_field._field_kind == (*(_77925_dpair))._field_field._field_kind) {
									_case_begin_5303283504:;
									{
										(*this)._method_push_err((*(_76134_pair))._field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any((*(_76134_pair))._field_field._field_kind)}));
										goto _iter_end_5303279008;
									}
								}
								_match_end_5303283232:;
							}
						}
					}
					_match_end_5303280304:;
				}
			}
			_iter_next_5303279008:;
			++it;
			goto _iter_begin_5303279008;
		}
		_iter_end_5303279008:;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _79117_prefix = (*((*this)._field_e))._field_prefix;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_79117_prefix;
	});
	(*((*this)._field_e))._field_prefix=(*(_76317_f))._field_kind;
	jule::Ptr<_20d162d45_Data> _79517_d = (*((*this)._field_e))._method_eval_expr_kind((*(_76134_pair))._field_expr);
	if (_79517_d == nullptr) {
		return;
	}
	(*this)._method_push_match(_76317_f,_79517_d,(*(_76134_pair))._field_field);
}



inline jule::Bool _20d058ca2_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any>& _80235_exprs) {
	jule::Bool _80317_ok = true;
	{
		auto &expr = _80235_exprs;
		auto it = expr.begin();
		_iter_begin_5303296608:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			jule::Any _20d058ca2_expr = *it;
			{
				{
					auto &_match_expr{ _20d058ca2_expr };
					
					if (_match_expr.type_is<jule::Ptr<_20c476dc4_KeyValPair>>()) {
						_case_begin_5303298944:;
						{
							jule::Ptr<_20c476dc4_KeyValPair> _80725_pair = _20d058ca2_expr.operator jule::Ptr<_20c476dc4_KeyValPair>();
							{
								auto &_match_expr{ (*(_80725_pair))._field_key };
								
								if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentExpr>>()) {
									_case_begin_5303304256:;
								}
								else {
									_case_begin_5303301952:;
									{
										(*this)._method_push_err((*(_80725_pair))._field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_80317_ok=false;
										goto _iter_next_5303296608;
									}
								}
								_match_end_5303301856:;
							}
							_80235_exprs.__at(_20d058ca2_i)=jule::Any(jule::new_struct<_20c476dc4_FieldExprPair>(new( std::nothrow ) _20c476dc4_FieldExprPair((*((*(_80725_pair))._field_key.operator jule::Ptr<_20c476dc4_IdentExpr>()))._field_token,(*(_80725_pair))._field_val)));
						}
					}
					_match_end_5303298608:;
				}
			}
			_iter_next_5303296608:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303296608;
		}
		_iter_end_5303296608:;
	}
	return _80317_ok;
}



inline void _20d058ca2_StructLitChecker::_method_check(jule::Slice<jule::Any>& _82829_exprs) {
	if (_82829_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_82829_exprs)))) {
		return;
	}
	jule::Bool _83717_paired = false;
	{
		auto &expr = _82829_exprs;
		auto it = expr.begin();
		_iter_begin_5303311040:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			jule::Any _20d058ca2_expr = *it;
			{
				{
					auto &_match_expr{ _20d058ca2_expr };
					
					if (_match_expr.type_is<jule::Ptr<_20c476dc4_FieldExprPair>>()) {
						_case_begin_5303313232:;
						{
							jule::Ptr<_20c476dc4_FieldExprPair> _84125_pair = _20d058ca2_expr.operator jule::Ptr<_20c476dc4_FieldExprPair>();
							if ((_20d058ca2_i > 0LL) && (!(_83717_paired))) {
								(*this)._method_push_err((*(_84125_pair))._field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							}
							_83717_paired=true;
							(*this)._method_check_pair(_84125_pair,_82829_exprs);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20c476dc4_Expr>>()) {
						_case_begin_5303313344:;
						{
							jule::Ptr<_20c476dc4_Expr> _84925_e = _20d058ca2_expr.operator jule::Ptr<_20c476dc4_Expr>();
							if (_83717_paired) {
								(*this)._method_push_err((*(_84925_e))._field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							}
							if (_20d058ca2_i >= (*((*this)._field_s))._field_fields.len()) {
								(*this)._method_push_err((*(_84925_e))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_5303311040;
							}
							jule::Ptr<_20c496047_FieldIns> _85825_field = (*((*this)._field_s))._field_fields[_20d058ca2_i];
							jule::Ptr<_20d4a6c9e_TypeKind> _86025_prefix = (*((*this)._field_e))._field_prefix;
							__JULE_DEFER({
								(*((*this)._field_e))._field_prefix=_86025_prefix;
							});
							(*((*this)._field_e))._field_prefix=(*(_85825_field))._field_kind;
							jule::Ptr<_20d162d45_Data> _86425_d = (*((*this)._field_e))._method_eval_expr_kind((*(_84925_e))._field_kind);
							if (_86425_d == nullptr) {
								goto _iter_next_5303311040;
							}
							(*this)._method_push_match(_85825_field,_86425_d,(*(_84925_e))._field_token);
						}
					}
					_match_end_5303312880:;
				}
			}
			_iter_next_5303311040:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303311040;
		}
		_iter_end_5303311040:;
	}
	if ((!(_83717_paired))) {
		jule::I64 _87517_n = (*((*this)._field_s))._field_fields.len();
		jule::I64 _87621_diff = _87517_n - _82829_exprs.len();
		{
			
			if (_87621_diff <= 0LL) {
				_case_begin_5303334672:;
				{
					return;
				}
			}
			_match_end_5303334240:;
		}
		jule::Str _88221_idents = jule::Str();
		for (; _87621_diff > 0LL; (_87621_diff)--) {
			{
				_88221_idents+=jule::Str(", ", 2) + (*((*((*((*this)._field_s))._field_fields[_87517_n - _87621_diff]))._field_decl))._field_ident;
			}
		_iter_next_5303314432:;
		}
		_iter_end_5303314432:;
		_88221_idents=_88221_idents.slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_88221_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c819332_Fn::_method_is_void(void) {
	return (*this)._field_result == nullptr;
}



inline jule::Bool _20c819332_Fn::_method_is_method(void) {
	return (*this)._field_owner != nullptr;
}



inline jule::Bool _20c819332_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _20c819332_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _20c819332_Fn::_method_is_anon(void) {
	return _20c47803a_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _20c819332_Fn::_method_any_var(void) {
	return ((*this)._field_result != nullptr) && ((*((*this)._field_result))._field_idents.len() > 0LL);
}



inline jule::Bool _20c819332_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*this)._field_params;
		auto it = expr.begin();
		_iter_begin_5299871888:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Param> &_20c819332_p = *it;
			{
				if (_20c819332_parameter_uses_generics(_20c819332_p,(*this)._field_generics)) {
					return true;
				}
			}
			_iter_next_5299871888:;
			++it;
			goto _iter_begin_5299871888;
		}
		_iter_end_5299871888:;
	}
	return false;
}



inline jule::Bool _20c819332_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if (((*((*this)._field_result))._field_kind == nullptr) || ((*((*((*this)._field_result))._field_kind))._field_kind == nullptr)) {
		return false;
	}
	return _20c819332_kind_uses_generics((*((*((*this)._field_result))._field_kind))._field_kind,(*this)._field_generics);
}



inline jule::Ptr<_20c819332_FnIns> _20c819332_Fn::_method_instance_force(void) {
	jule::Ptr<_20c819332_FnIns> _11217_ins = jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),this->self,jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::new_struct<_20cb4d853_Scope>(new( std::nothrow ) _20cb4d853_Scope()),_20caa3115_ReferenceStack::_static_method_new(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::U8(),jule::Bool()));
	if ((*(this->self))._method_is_init()) {
		(*(_11217_ins))._field_refers=_20caa3115_ReferenceStack::_static_method_new();
	}
	(*(_11217_ins))._field_params=jule::Slice<jule::Ptr<_20c819332_ParamIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_params.len()));
	{
		auto &expr = (*(this->self))._field_params;
		auto it = expr.begin();
		_iter_begin_5299886128:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Param> _20c819332_p = *it;
			{
				(*(_11217_ins))._field_params = jule::alloc_for_append((*(_11217_ins))._field_params,1);(*(_11217_ins))._field_params.push((*(_20c819332_p))._method_instance());
			}
			_iter_next_5299886128:;
			++it;
			goto _iter_begin_5299886128;
		}
		_iter_end_5299886128:;
	}
	if ((*((*(_11217_ins))._field_decl))._field_result != nullptr) {
		(*(_11217_ins))._field_result=(*((*((*((*(_11217_ins))._field_decl))._field_result))._field_kind))._field_kind;
	}
	return _11217_ins;
}



inline jule::Ptr<_20c819332_FnIns> _20c819332_Fn::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	return (*(this->self))._method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _20c819332_Fn::_method_append_instance(jule::Ptr<_20c819332_FnIns>& _14339_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14339_ins);
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14339_ins);
		return std::make_tuple(true,-1LL);
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_5299903856:;
		if (it != expr.end()) {
			jule::Int _20c819332_j = it - expr.begin();
			jule::Ptr<_20c819332_FnIns> &_20c819332_ains = *it;
			{
				if ((*(_20c819332_ains))._method_same(_14339_ins)) {
					return std::make_tuple(false,_20c819332_j);
				}
			}
			_iter_next_5299903856:;
			++it;
			_20c819332_j++;
			goto _iter_begin_5299903856;
		}
		_iter_end_5299903856:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14339_ins);
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c819332_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline void _20d058ca2_RetTypeChecker::_method_prepare_types(void) {
	if ((*this)._field_f != nullptr) {
		(*this)._field_types=_20d058ca2_get_result_types((*((*this)._field_f))._field_result);
	}
}



inline void _20d058ca2_RetTypeChecker::_method_prepare_exprs(jule::Ptr<_20c476dc4_Expr>& _106837_e) {
	if (_106837_e == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_106837_e))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_TupleExpr>>()) {
			_case_begin_5303438224:;
			{
				(*this)._field_exprs=(*((*(_106837_e))._field_kind.operator jule::Ptr<_20c476dc4_TupleExpr>()))._field_expr;
			}
		}
		else {
			_case_begin_5303438592:;
			{
				(*this)._field_exprs = jule::alloc_for_append((*this)._field_exprs,1);(*this)._field_exprs.push(_106837_e);
			}
		}
		_match_end_5303437632:;
	}
}



inline void _20d058ca2_RetTypeChecker::_method_ret_vars(void) {
	if (((*this)._field_f == nullptr) || (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ptr<_20cdc725d_Var>>::alloc(0LL,static_cast<jule::I64>((*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents.len()));
	jule::Ptr<_20cb4d853_ScopeChecker> _108817_root_scope = (*((*this)._field_sc))._method_get_root();
	jule::Int _109017_j = 0LL;
	{
		auto &expr = (*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_5303449856:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			_20c47803a_Token &_20d058ca2_ident = *it;
			{
				if ((!(_20c47803a_is_ignore_ident(_20d058ca2_ident._field_kind)))) {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.push((*((*(_108817_root_scope))._field_table))._field_vars[_109017_j]);
					(_109017_j)++;
				} else {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.push(jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var(jule::Ptr<_20cb4d853_Scope>(),_20c47803a_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),(*this)._field_types[_20d058ca2_i])),jule::Ptr<_20d162d45_Value>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>())));
				}
			}
			_iter_next_5303449856:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303449856;
		}
		_iter_end_5303449856:;
	}
	if (_109017_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _20d058ca2_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_20d162d45_Data>> _111417_datas = jule::Slice<jule::Ptr<_20d162d45_Data>>::alloc(0LL,static_cast<jule::I64>((*this)._field_exprs.len()));
	{
		auto &expr = (*this)._field_exprs;
		auto it = expr.begin();
		_iter_begin_5303461104:;
		if (it != expr.end()) {
			jule::Int _20d058ca2_i = it - expr.begin();
			jule::Ptr<_20c476dc4_Expr> _20d058ca2_expr = *it;
			{
				if (_20d058ca2_i >= (*this)._field_types.len()) {
					goto _iter_end_5303461104;
				}
				jule::Ptr<_20d4a6c9e_TypeKind> _112121_t = (*this)._field_types[_20d058ca2_i];
				jule::Ptr<_20d162d45_Data> _112321_d = (*((*((*((*this)._field_sc))._field_s))._method_evalp((*this)._field_sc,_112121_t)))._method_eval_expr(_20d058ca2_expr);
				if (_112321_d == nullptr) {
					goto _iter_next_5303461104;
				}
				_111417_datas.push(_112321_d);
				if ((!((*(_112321_d))._field_mutable)) && (*((*(_112321_d))._field_kind))._method_mutable()) {
					(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;
				}
				_20d058ca2_AssignTypeChecker _113521_ac = _20d058ca2_AssignTypeChecker((*((*this)._field_sc))._field_s,_112121_t,_112321_d,(*this)._field_error_token);
				_113521_ac._method_check();
			}
			_iter_next_5303461104:;
			++it;
			_20d058ca2_i++;
			goto _iter_begin_5303461104;
		}
		_iter_end_5303461104:;
	}
	if (_111417_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_20ccedeed_TupleExprModel>(new( std::nothrow ) _20ccedeed_TupleExprModel(_111417_datas)));
	} else if (_111417_datas.len() == 1LL) {
		(*this)._field_model=(*(_111417_datas[0LL]))._field_model;
	}
}



inline jule::Bool _20d058ca2_RetTypeChecker::_method_check(jule::Ptr<_20c476dc4_Expr>& _115429_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_115429_e);
	(*this)._method_ret_vars();
	jule::I64 _115913_n = (*this)._field_exprs.len();
	if ((_115913_n == 0LL) && ((*this)._field_types.len() > 0LL)) {
		if ((!((*((*((*this)._field_f))._field_decl))._method_any_var()))) {
			(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		}
		return true;
	}
	if (((_115913_n > 0LL) && ((*this)._field_f != nullptr)) && (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	}
	if (_115913_n > (*this)._field_types.len()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if (_115913_n < (*this)._field_types.len()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d058ca2_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_FnCallExpr::_method_unhandled(void) {
	return (*this)._field_exception == nullptr;
}



inline jule::Bool _20c476dc4_FnCallExpr::_method_ignored(void) {
	return ((*this)._field_exception != nullptr) && (*((*this)._field_exception))._field_deferred;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_Node::_method_is_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_EnumDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_FnDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_StructDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_TraitDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_TypeAliasDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_FieldDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_UseDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_VarDecl>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_TypeDecl>>()) {
			_case_begin_5294110848:;
			{
				return true;
			}
		}
		else {
			_case_begin_5294109376:;
			{
				return false;
			}
		}
		_match_end_5294109296:;
	}
}



inline jule::Bool _20c476dc4_Node::_method_is_comment(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_Comment>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_CommentGroup>>()) {
			_case_begin_5294126992:;
			{
				return true;
			}
		}
		else {
			_case_begin_5294125520:;
			{
				return false;
			}
		}
		_match_end_5294125440:;
	}
}



inline jule::Bool _20c476dc4_Node::_method_is_directive(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_Directive>>()) {
			_case_begin_5294130384:;
			{
				return true;
			}
		}
		else {
			_case_begin_5294128912:;
			{
				return false;
			}
		}
		_match_end_5294128832:;
	}
}



inline jule::Bool _20c476dc4_Node::_method_is_impl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_Impl>>()) {
			_case_begin_5294133392:;
			{
				return true;
			}
		}
		else {
			_case_begin_5294131920:;
			{
				return false;
			}
		}
		_match_end_5294131840:;
	}
}



inline jule::Bool _20c476dc4_Node::_method_is_use_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_UseDecl>>()) {
			_case_begin_5294136400:;
			{
				return true;
			}
		}
		else {
			_case_begin_5294134928:;
			{
				return false;
			}
		}
		_match_end_5294134848:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20caa3115_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline _20d162d45_BinaryEval _20d162d45_BinaryEval::_static_method_new_plain(jule::Ptr<_20d162d45_Eval> _355529_e) {
	return _20d162d45_BinaryEval(_355529_e,jule::Ptr<_20d162d45_Data>(),jule::Ptr<_20d162d45_Data>(),_20c47803a_Token());
}



inline _20d162d45_BinaryEval _20d162d45_BinaryEval::_static_method_new(jule::Ptr<_20d162d45_Eval> _356123_e,_20c47803a_Token _356137_op) {
	return _20d162d45_BinaryEval(_356123_e,jule::Ptr<_20d162d45_Data>(),jule::Ptr<_20d162d45_Data>(),_356137_op);
}



inline jule::Bool _20d162d45_BinaryEval::_method_check_type_compatibility(void) {
	return (*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*this)._field_l))._field_kind,(*((*this)._field_r))._field_kind,(*this)._field_op);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_nil(void) {
	if ((!((*((*((*this)._field_r))._field_kind))._method_nil_compatible()))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305621408:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305613888:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_5305618016:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_enum(void) {
	jule::Ptr<_20cb4c70e_Enum> _359617_enm = (*((*((*this)._field_l))._field_kind))._method_enm();
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305626000:;
			{
				jule::Ptr<_20d4a6c9e_TypeKind> _360021_rkind = (*((*this)._field_r))._field_kind;
				if ((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr) {
					_360021_rkind=(*((*((*((*((*this)._field_r))._field_kind))._method_enm()))._field_kind))._field_kind;
				}
				if ((!((*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*(_359617_enm))._field_kind))._field_kind,_360021_rkind,(*this)._field_op)))) {
					return nullptr;
				}
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		_match_end_5305625920:;
	}
	if (((*((*((*this)._field_r))._field_kind))._method_enm() == nullptr) || (_359617_enm != (*((*((*this)._field_r))._field_kind))._method_enm())) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_359617_enm))._field_ident),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_5305644736:;
			{
				if ((!(_20d853821_is_num((*((*((*(_359617_enm))._field_kind))._field_kind))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_359617_enm))._field_ident)}));
					return nullptr;
				}
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1)) {
			_case_begin_5305644896:;
			{
				if (((*((*((*(_359617_enm))._field_kind))._field_kind))._method_prim() == nullptr) || (!(_20d853821_is_int((*((*((*((*(_359617_enm))._field_kind))._field_kind))._method_prim()))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_359617_enm))._field_ident)}));
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5305636416:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_359617_enm))._field_ident)}));
				return nullptr;
			}
		}
		_match_end_5305627280:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_sptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305665264:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305660864:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305661328:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_5305672480:;
			{
				if ((!((*this)._method_check_type_compatibility()))) {
					return nullptr;
				}
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_5305672688:;
			{
				if ((*((*((*this)._field_l))._field_kind))._method_ptr() == nullptr) {
					std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				}
				if ((*((*((*((*this)._field_l))._field_kind))._method_ptr()))._method_is_unsafe()) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				}
				if ((!(_20d162d45_is_ptr_arithmetic_compatible_int((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>({jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5305666416:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305668224:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305694976:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305690608:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305691040:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305703232:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305698928:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305697936:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305711488:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305707184:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305706192:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305719744:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305715440:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305714448:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305728160:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305723696:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305724176:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_any(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305734576:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305729280:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_5305731088:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_5305742832:;
			{
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5305738528:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5305737536:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_str(void) {
	jule::Str _383917_rk = (*((*((*this)._field_r))._field_kind))._method_to_str();
	if (_383917_rk != jule::Str("str", 3)) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_383917_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_5305752432:;
			{
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5305753440:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		else {
			_case_begin_5305746960:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_5305750240:;
	}
}



inline void _20d162d45_BinaryEval::_method_set_type_to_greater(void) {
	if ((*((*this)._field_l))._method_is_const()) {
		if ((!((*((*this)._field_r))._method_is_const()))) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
			return;
		}
		if (_20d79053d_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
		}
		return;
	}
	if ((*((*this)._field_r))._method_is_const()) {
		return;
	}
	if (_20d79053d_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
		(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
	}
}



inline void _20d162d45_BinaryEval::_method_check_mod_data(jule::Ptr<_20d162d45_Data>& _388338_d) {
	if ((!((*(_388338_d))._method_is_const()))) {
		if (((*((*(_388338_d))._field_kind))._method_prim() == nullptr) || (!(_20d853821_is_int((*((*((*(_388338_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		}
		return;
	}
	{
		
		if (_20d058ca2_sig_assignable(jule::Str("i64", 3),_388338_d)) {
			_case_begin_5305778080:;
			{
				(*((*(_388338_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_388338_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_20d058ca2_unsig_assignable(jule::Str("u64", 3),_388338_d)) {
			_case_begin_5305777616:;
			{
				(*((*(_388338_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_388338_d))._field_constant))._method_as_u64()));
			}
		}
		else {
			_case_begin_5305777312:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_5305771744:;
	}
}



inline void _20d162d45_BinaryEval::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Bool _20d162d45_BinaryEval::_method_numbers_are_compatibile(jule::Str& _390839_lk,jule::Str& _390849_rk) {
	if ((!(_20d853821_is_num(_390849_rk)))) {
		return false;
	}
	if ((*((*this)._field_l))._method_is_const()) {
		return true;
	}
	if (_390839_lk == jule::Str("f32", 3)) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return _390849_rk == jule::Str("f32", 3);
	}
	if (_390839_lk == jule::Str("f64", 3)) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return _390849_rk == jule::Str("f64", 3);
	}
	if ((*((*this)._field_r))._method_is_const()) {
		{
			auto &_match_expr{ (*((*this)._field_r))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_20ccedeed_RuneExprModel>>() || _match_expr.type_is<jule::Ptr<_20d78b3e6_Const>>()) {
				_case_begin_5305815152:;
				{
					if (_20d853821_is_sig_int(_390839_lk)) {
						return _20d058ca2_int_assignable(jule::Str("int", 3),(*this)._field_r);
					}
					return _20d058ca2_int_assignable(jule::Str("uint", 4),(*this)._field_r);
				}
			}
			_match_end_5305814960:;
		}
	}
	return _20d853821_is_sig_int(_390839_lk) == _20d853821_is_sig_int(_390849_rk);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_float(void) {
	jule::Str _394713_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _394813_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	if ((!((*this)._method_numbers_are_compatibile(_394713_lk,_394813_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_394713_lk),jule::Any(_394813_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_5305824464:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		_match_end_5305827824:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_5305833520:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_5305833616:;
			{
				if ((!(_20d853821_is_int(_394813_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_394713_lk),jule::Any(_394813_rk)}));
					return nullptr;
				}
				(*this)._method_mod();
				return (*this)._field_r;
			}
		}
		else {
			_case_begin_5305827920:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305830992:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_int(void) {
	jule::Str _399313_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _399413_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_5305844752:;
			{
				if ((!(_20d853821_is_int(_399313_lk))) || (!(_20d853821_is_int(_399413_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_399313_lk),jule::Any(_399413_rk)}));
					return nullptr;
				}
				if ((!(_20d162d45_is_ok_for_shifting((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				if ((*((*this)._field_l))._method_is_const() && (!((*((*this)._field_r))._method_is_const()))) {
					(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
				}
				return (*this)._field_l;
			}
		}
		_match_end_5305844672:;
	}
	if ((!((*this)._method_numbers_are_compatibile(_399313_lk,_399413_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_399313_lk),jule::Any(_399413_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_5305855696:;
			{
				return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
			}
		}
		_match_end_5305858320:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_5305865056:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_5305865216:;
			{
				(*this)._method_mod();
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5305862992:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5305861904:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_prim(void) {
	jule::Ptr<_20d4a6c9e_Prim> _405913_prim = (*((*((*this)._field_l))._field_kind))._method_prim();
	{
		
		if ((*(_405913_prim))._method_is_bool()) {
			_case_begin_5305872704:;
			{
				return (*this)._method_eval_bool();
			}
		}
		else if ((*(_405913_prim))._method_is_str()) {
			_case_begin_5305872816:;
			{
				return (*this)._method_eval_str();
			}
		}
		_match_end_5305872544:;
	}
	if ((*((*((*this)._field_r))._field_kind))._method_prim() == nullptr) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_405913_prim))._method_to_str()),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		
		if (_20d853821_is_float((*(_405913_prim))._field_kind)) {
			_case_begin_5305882512:;
			{
				return (*this)._method_eval_float();
			}
		}
		else if (_20d853821_is_int((*(_405913_prim))._field_kind)) {
			_case_begin_5305882672:;
			{
				return (*this)._method_eval_int();
			}
		}
		else {
			_case_begin_5305880896:;
			{
				return nullptr;
			}
		}
		_match_end_5305876992:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval_op(void) {
	{
		
		if ((*((*((*this)._field_l))._field_kind))._method_void()) {
			_case_begin_5305887968:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_r))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5305888176:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5305888272;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_l))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5305888272:;
			{
				return (*this)._method_eval_any();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_is_nil()) {
			_case_begin_5305886896:;
			{
				return (*this)._method_eval_nil();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr) {
			_case_begin_5305886992:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5305887088;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_enm() != nullptr) {
			_case_begin_5305887088:;
			{
				return (*this)._method_eval_enum();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_sptr() != nullptr) {
			_case_begin_5305887184:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5305888400;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_sptr() != nullptr) {
			_case_begin_5305888400:;
			{
				return (*this)._method_eval_sptr();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5305888496:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5305888592;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5305888592:;
			{
				return (*this)._method_eval_ptr();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_arr() != nullptr) {
			_case_begin_5305888688:;
			{
				return (*this)._method_eval_arr();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_slc() != nullptr) {
			_case_begin_5305888784:;
			{
				return (*this)._method_eval_slc();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_fnc() != nullptr) {
			_case_begin_5305888880:;
			{
				return (*this)._method_eval_fn();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_trt() != nullptr) {
			_case_begin_5305888976:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5305889072;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_trt() != nullptr) {
			_case_begin_5305889072:;
			{
				return (*this)._method_eval_trait();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_strct() != nullptr) {
			_case_begin_5305889184:;
			{
				return (*this)._method_eval_struct();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) {
			_case_begin_5305889296:;
			{
				return (*this)._method_eval_prim();
			}
		}
		else {
			_case_begin_5305886592:;
			{
				return nullptr;
			}
		}
		_match_end_5305886416:;
	}
}



inline void _20d162d45_BinaryEval::_method_eval_const(jule::Ptr<_20d162d45_Data>& _413734_d) {
	{
		
		if (_413734_d == nullptr) {
			_case_begin_5305934832:;
			{
				return;
			}
		}
		else if ((!((*((*this)._field_l))._method_is_const())) || (!((*((*this)._field_r))._method_is_const()))) {
			_case_begin_5305934944:;
			{
				(*(_413734_d))._field_constant=nullptr;
				return;
			}
		}
		_match_end_5305934608:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_5305939664:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_5305936576:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((!((*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))))));
			}
		}
		else if (_match_expr == jule::Str("::", 2)) {
			_case_begin_5305938256:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_or((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_5305938352:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_and((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_5305939760:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_gt((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_5305939856:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_lt((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_5305939952:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_gt((*((*((*this)._field_r))._field_constant))) || (*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_5305940048:;
			{
				(*(_413734_d))._field_constant=_20d78b3e6_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_lt((*((*((*this)._field_r))._field_constant))) || (*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_5305940144:;
			{
				(*((*((*this)._field_l))._field_constant))._method_add((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_5305940240:;
			{
				(*((*((*this)._field_l))._field_constant))._method_sub((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5305940352:;
			{
				(*((*((*this)._field_l))._field_constant))._method_mul((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_5305940464:;
			{
				jule::Bool _419017_ok = (*((*((*this)._field_l))._field_constant))._method_div((*((*((*this)._field_r))._field_constant)));
				if ((!(_419017_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_5305940576:;
			{
				jule::Bool _419717_ok = (*((*((*this)._field_l))._field_constant))._method_mod((*((*((*this)._field_r))._field_constant)));
				if ((!(_419717_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_5305940688:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_or((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5305940800:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_and((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_5305940912:;
			{
				(*((*((*this)._field_l))._field_constant))._method_xor((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_5305941024:;
			{
				(*((*((*this)._field_l))._field_constant))._method_lshift((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_5305941136:;
			{
				(*((*((*this)._field_l))._field_constant))._method_rshift((*((*((*this)._field_r))._field_constant)));
				(*(_413734_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		_match_end_5305939584:;
	}
	(*(_413734_d))._field_model=jule::Any((*(_413734_d))._field_constant);
}



inline void _20d162d45_BinaryEval::_method_post_const(jule::Ptr<_20d162d45_Data>& _422730_d) {
	if ((!((*(_422730_d))._method_is_const()))) {
		return;
	}
	_20d162d45_normalize_bitsize(_422730_d);
	_20d162d45_fit_type(_422730_d);
}



inline void _20d162d45_BinaryEval::_method_check_data(jule::Ptr<_20d162d45_Data>& _423534_d) {
	jule::Ptr<_20c819332_FnIns> _423613_f = (*((*(_423534_d))._field_kind))._method_fnc();
	if (((_423613_f != nullptr) && ((*(_423613_f))._field_decl != nullptr)) && (*((*(_423613_f))._field_decl))._method_is_method()) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	}
}



inline void _20d162d45_BinaryEval::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline void _20d162d45_BinaryEval::_method_set_model(jule::Ptr<_20d162d45_Data>& _424733_d) {
	if ((*(_424733_d))._method_is_const()) {
		return;
	}
	jule::Ptr<_20d162d45_Data> _425218_l = (*this)._field_l;
	jule::Ptr<_20d162d45_Data> _425225_r = (*this)._field_r;
	std::tie(_425218_l,_425225_r) = std::make_tuple((*this)._field_l,(*this)._field_r);
	if ((!((*(_425218_l))._method_good_operand(_425225_r)))) {
		std::tie(_425218_l,_425225_r) = std::make_tuple(_425225_r,_425218_l);
	}
	(*(_424733_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BinopExprModel>(new( std::nothrow ) _20ccedeed_BinopExprModel((*(_425218_l))._field_model,(*(_425225_r))._field_model,(*this)._field_op)));
}



inline void _20d162d45_BinaryEval::_method_post_eval(jule::Ptr<_20d162d45_Data>& _426433_d) {
	(*this)._method_post_const(_426433_d);
	(*(_426433_d))._field_lvalue=false;
	(*this)._method_set_model(_426433_d);
	(*((*this)._field_e))._method_apply_numeric_prefix(_426433_d);
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_solve_explicit(jule::Ptr<_20d162d45_Data>& _427338_l,jule::Ptr<_20d162d45_Data>& _427353_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_427338_l,_427353_r);
	(*this)._method_check_datas();
	jule::Ptr<_20d162d45_Data> _427817_d = (*this)._method_eval_op();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_427338_l,_427353_r);
	(*this)._method_eval_const(_427817_d);
	if (_427817_d != nullptr) {
		(*this)._method_post_eval(_427817_d);
	}
	return _427817_d;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_BinaryEval::_method_eval(jule::Ptr<_20c476dc4_BinopExpr>& _429128_op) {
	if ((*(_429128_op))._field_op._field_kind == jule::Str("=", 1)) {
		(*((*this)._field_e))._method_push_err((*(_429128_op))._field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		(*((*this)._field_e))._method_push_suggestion(jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _429817_l = (*((*this)._field_e))._method_eval_expr_kind((*(_429128_op))._field_left);
	if ((_429817_l == nullptr) || ((*(_429817_l))._field_kind == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _430317_r = (*((*this)._field_e))._method_eval_expr_kind((*(_429128_op))._field_right);
	if ((_430317_r == nullptr) || ((*(_430317_r))._field_kind == nullptr)) {
		return nullptr;
	}
	(*this)._field_op=(*(_429128_op))._field_op;
	jule::Ptr<_20d162d45_Data> _431017_d = (*this)._method_solve_explicit(_429817_l,_430317_r);
	if (((_431017_d != nullptr) && (*(_429817_l))._field_is_rune) && (*(_430317_r))._field_is_rune) {
		(*(_431017_d))._field_is_rune=true;
	}
	return _431017_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d162d45_BinaryEval &_Src) {
	_Stream << "BinaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20cb471a9_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _20cb471a9_Trait::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _2522_other) {
	jule::Ptr<_20cb471a9_Trait> _2613_trt = (*(_2522_other))._method_trt();
	return this->self == _2613_trt;
}



inline jule::Bool _20cb471a9_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ptr<_20c819332_Fn> _20cb471a9_Trait::_method_find_method(jule::Str _3734_ident) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5300325152:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20cb471a9_f = *it;
			{
				if ((*(_20cb471a9_f))._field_ident == _3734_ident) {
					return _20cb471a9_f;
				}
			}
			_iter_next_5300325152:;
			++it;
			goto _iter_begin_5300325152;
		}
		_iter_end_5300325152:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb471a9_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20cb4c70e_EnumItem::_method_auto_expr(void) {
	return (*this)._field_value == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4c70e_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _20cb4c70e_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _20cb4c70e_Enum::_method_equals(jule::Ptr<_20d4a6c9e_TypeKind> _3522_other) {
	jule::Ptr<_20cb4c70e_Enum> _3613_enm = (*(_3522_other))._method_enm();
	return this->self == _3613_enm;
}



inline jule::Ptr<_20cb4c70e_EnumItem> _20cb4c70e_Enum::_method_find_item(jule::Str _4432_ident) {
	{
		auto &expr = (*this)._field_items;
		auto it = expr.begin();
		_iter_begin_5300337152:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4c70e_EnumItem> _20cb4c70e_item = *it;
			{
				if ((*(_20cb4c70e_item))._field_ident == _4432_ident) {
					return _20cb4c70e_item;
				}
			}
			_iter_next_5300337152:;
			++it;
			goto _iter_begin_5300337152;
		}
		_iter_end_5300337152:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4c70e_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_TernaryExpr &_Src) {
	_Stream << "TernaryExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline void _20d4a6c9e_TypeChecker::_method_push_err(_20c47803a_Token _69927_token,jule::Str _69941_fmt,jule::Slice<jule::Any> _69954_args) {
	(*((*this)._field_s))._method_push_err(_69927_token,_69941_fmt,_69954_args);
}



inline void _20d4a6c9e_TypeChecker::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _20d4a6c9e_TypeChecker::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Ptr<_20d4a6c9e_Prim> _20d4a6c9e_TypeChecker::_method_build_prim(jule::Ptr<_20c476dc4_IdentTypeDecl>& _70630_decl) {
	if ((!(_20d4a6c9e_is_prim((*(_70630_decl))._field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_70630_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_70630_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_70630_decl))._field_ident)}));
		return nullptr;
	}
	return _20d4a6c9e_build_prim_type((*(_70630_decl))._field_ident);
}



inline void _20d4a6c9e_TypeChecker::_method_push_cycle_error(jule::Any _72031_def1,jule::Any _72042_def2,jule::Str& _72058_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _72313_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _72329_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _72329_def };
			
			if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeAlias>>()) {
				_case_begin_5306292704:;
				{
					return (*(_72329_def.operator jule::Ptr<_20d4a6c9e_TypeAlias>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
				_case_begin_5306292448:;
				{
					return (*(_72329_def.operator jule::Ptr<_20c496047_Struct>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_20cb4c70e_Enum>>()) {
				_case_begin_5306292544:;
				{
					return (*(_72329_def.operator jule::Ptr<_20cb4c70e_Enum>()))._field_ident;
				}
			}
			else {
				_case_begin_5306291520:;
				{
					return jule::Str();
				}
			}
			_match_end_5306291328:;
		}
	});
	jule::Str _73213_def1_ident = _72313_get_ident(_72031_def1);
	jule::Str _73313_def2_ident = _72313_get_ident(_72042_def2);
	jule::Str _73413_refers_to = _20a25b99c_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_73213_def1_ident),jule::Any(_73313_def2_ident)}));
	_72058_message=((_20a405ddd_repeat(jule::Str(" ", 1),4LL) + _73413_refers_to) + jule::Str("\n", 1)) + _72058_message;
}



inline jule::Bool _20d4a6c9e_TypeChecker::_method_check_cross_cycle(jule::Any _73832_decl,jule::Str& _73848_message) {
	{
		auto &_match_expr{ _73832_decl };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeAlias>>()) {
			_case_begin_5306303120:;
			{
				jule::Ptr<_20d4a6c9e_TypeAlias> _74117_ta = _73832_decl.operator jule::Ptr<_20d4a6c9e_TypeAlias>();
				{
					auto &expr = (*(_74117_ta))._field_refers;
					auto it = expr.begin();
					_iter_begin_5306306144:;
					if (it != expr.end()) {
						jule::Any &_20d4a6c9e_d = *it;
						{
							if (_20d4a6c9e_d == (*((*this)._field_referencer))._field_owner) {
								(*this)._method_push_cycle_error(jule::Any(_74117_ta),_20d4a6c9e_d,_73848_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(_20d4a6c9e_d,_73848_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_74117_ta),_20d4a6c9e_d,_73848_message);
								return false;
							}
						}
						_iter_next_5306306144:;
						++it;
						goto _iter_begin_5306306144;
					}
					_iter_end_5306306144:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5306303232:;
			{
				jule::Ptr<_20c496047_Struct> _75517_s = _73832_decl.operator jule::Ptr<_20c496047_Struct>();
				{
					auto &expr = (*(_75517_s))._field_depends;
					auto it = expr.begin();
					_iter_begin_5306313184:;
					if (it != expr.end()) {
						jule::Ptr<_20c496047_Struct> &_20d4a6c9e_d = *it;
						{
							if ((*((*this)._field_referencer))._field_owner == _20d4a6c9e_d) {
								(*this)._method_push_cycle_error(jule::Any(_75517_s),jule::Any(_20d4a6c9e_d),_73848_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(jule::Any(_20d4a6c9e_d),_73848_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_75517_s),jule::Any(_20d4a6c9e_d),_73848_message);
								return false;
							}
						}
						_iter_next_5306313184:;
						++it;
						goto _iter_begin_5306313184;
					}
					_iter_end_5306313184:;
				}
			}
		}
		_match_end_5306302912:;
	}
	return true;
}



inline jule::Bool _20d4a6c9e_TypeChecker::_method_check_illegal_cycles(jule::Ptr<_20c476dc4_IdentTypeDecl>& _77640_ident,jule::Any _77667_decl) {
	jule::Bool _77680_ok = jule::Bool();
	if ((*this)._field_referencer == nullptr) {
		_77680_ok = true;
		return _77680_ok;
	}
	{
		auto &_match_expr{ _77667_decl };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5306322400:;
			{
				if ((*this)._field_not_plain) {
					_77680_ok = true;
					return _77680_ok;
				}
			}
		}
		_match_end_5306322736:;
	}
	if (_77667_decl == (*((*this)._field_referencer))._field_owner) {
		(*this)._method_push_err((*(_77640_ident))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_referencer))._field_ident)}));
		_77680_ok = false;
		return _77680_ok;
	}
	jule::Str _79517_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_77667_decl,_79517_message)))) {
		jule::Str _79821_err_msg = _79517_message;
		_79517_message=jule::Str();
		(*this)._method_push_cycle_error((*((*this)._field_referencer))._field_owner,_77667_decl,_79517_message);
		_79821_err_msg=_79821_err_msg + _79517_message;
		(*this)._method_push_err((*(_77640_ident))._field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_79821_err_msg)}));
		_77680_ok = false;
		return _77680_ok;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeAlias>>()) {
			_case_begin_5306328352:;
			{
				{
					(*((*((*this)._field_referencer))._field_refs))=jule::append((*((*((*this)._field_referencer))._field_refs)),jule::Slice<jule::Any>({_77667_decl}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5306328448:;
			{
				{
					auto &_match_expr{ _77667_decl };
					
					if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
						_case_begin_5306335040:;
						{
							jule::Ptr<_20c496047_Struct> _81325_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_20c496047_Struct>();
							(*(_81325_s))._field_depends = jule::alloc_for_append((*(_81325_s))._field_depends,1);(*(_81325_s))._field_depends.push(_77667_decl.operator jule::Ptr<_20c496047_Struct>());
						}
					}
					_match_end_5306334816:;
				}
			}
		}
		_match_end_5306333840:;
	}
	_77680_ok = true;
	return _77680_ok;
}



inline jule::Trait<_20d4a6c9e_Kind> _20d4a6c9e_TypeChecker::_method_from_type_alias(jule::Ptr<_20c476dc4_IdentTypeDecl>& _82135_decl,jule::Ptr<_20d4a6c9e_TypeAlias>& _82162_ta) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_82162_ta))._field_public,(*(_82162_ta))._field_token)))) {
		(*this)._method_push_err((*(_82135_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_82135_decl))._field_ident)}));
		return nullptr;
	}
	(*(_82162_ta))._field_used=true;
	if ((*(_82135_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_82135_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_82135_decl))._field_ident)}));
		return nullptr;
	}
	jule::Bool _83417_ok = (*this)._method_check_illegal_cycles(_82135_decl,jule::Any(_82162_ta));
	if ((!(_83417_ok))) {
		return nullptr;
	}
	_83417_ok=(*((*this)._field_s))._method_check_type_alias_decl_kind(_82162_ta,(*this)._field_lookup);
	if ((!(_83417_ok))) {
		return nullptr;
	}
	return jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind((((*(_82162_ta))._field_cpp_linked) ? ((*(_82162_ta))._field_ident) : ((*((*((*(_82162_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_82162_ta))._field_generic,jule::Bool(),(*((*((*(_82162_ta))._field_kind))._field_kind))._field_kind));
}



inline jule::Ptr<_20cb4c70e_Enum> _20d4a6c9e_TypeChecker::_method_from_enum(jule::Ptr<_20c476dc4_IdentTypeDecl>& _85229_decl,jule::Ptr<_20cb4c70e_Enum>& _85256_e) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_85256_e))._field_public,(*(_85256_e))._field_token)))) {
		(*this)._method_push_err((*(_85229_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_85229_decl))._field_ident)}));
		return nullptr;
	}
	if ((*(_85229_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_85229_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_85229_decl))._field_ident)}));
		return nullptr;
	}
	return _85256_e;
}



inline jule::Bool _20d4a6c9e_TypeChecker::_method_check_struct_ins(jule::Ptr<_20c496047_StructIns>& _86640_ins,_20c47803a_Token& _86658_error_token) {
	jule::Bool _86680_ok = jule::Bool();
	if ((*(_86640_ins))._field_checked) {
		_86680_ok = true;
		return _86680_ok;
	}
	(*(_86640_ins))._field_checked=true;
	if (((*this)._field_referencer != nullptr) && ((*((*this)._field_referencer))._field_owner == (*(_86640_ins))._field_decl)) {
		_86680_ok = true;
		return _86680_ok;
	}
	jule::Ptr<_20d0c86e5_SymbolTable> _87717_old_file = (*((*this)._field_s))._field_file;
	__JULE_DEFER({
		(*((*this)._field_s))._method_set_current_file(_87717_old_file);
	});
	jule::Ptr<_20d0c86e5_SymbolTable> _88017_file = _20cba60d6_find_file((*((*this)._field_s))._field_files,(*((*(_86640_ins))._field_decl))._field_token._field_file);
	if (_88017_file != nullptr) {
		(*((*this)._field_s))._method_set_current_file(_88017_file);
	}
	jule::Ptr<_20d4a6c9e_Referencer> _88517_referencer = jule::new_struct<_20d4a6c9e_Referencer>(new( std::nothrow ) _20d4a6c9e_Referencer((*((*(_86640_ins))._field_decl))._field_ident,jule::Any((*(_86640_ins))._field_decl),nullptr));
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _89017_generics = jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>::alloc(0LL,static_cast<jule::I64>((*(_86640_ins))._field_generics.len()));
	{
		auto &expr = (*(_86640_ins))._field_generics;
		auto it = expr.begin();
		_iter_begin_5306385216:;
		if (it != expr.end()) {
			jule::Int _20d4a6c9e_i = it - expr.begin();
			jule::Ptr<_20d4a6c9e_TypeKind> _20d4a6c9e_g = *it;
			{
				_89017_generics.push(jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias(jule::Ptr<_20c476dc4_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_20c47803a_Token(),(*((*((*(_86640_ins))._field_decl))._field_generics[_20d4a6c9e_i]))._field_ident,jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),_20d4a6c9e_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_5306385216:;
			++it;
			_20d4a6c9e_i++;
			goto _iter_begin_5306385216;
		}
		_iter_end_5306385216:;
	}
	jule::Ptr<_20d0c86e5_SymbolTable> _90017_old_sema_file = (*((*((*(_86640_ins))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_86640_ins))._field_decl))._field_sema))._method_set_current_file(_90017_old_sema_file);
	});
	_20d4a6c9e_TypeChecker _90317_tc = _20d4a6c9e_TypeChecker((*((*(_86640_ins))._field_decl))._field_sema,(*((*(_86640_ins))._field_decl))._field_sema,_88517_referencer,_20c47803a_Token(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),_89017_generics,jule::Bool(),jule::Bool(),jule::Bool());
	{
		auto &expr = (*(_86640_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_5306396080:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_FieldIns> _20d4a6c9e_field = *it;
			{
				jule::Ptr<_20d4a6c9e_TypeKind> _91221_kind = _90317_tc._method_check_decl((*((*((*(_20d4a6c9e_field))._field_decl))._field_kind))._field_decl);
				_86680_ok=_91221_kind != nullptr;
				if ((((*((*(_86640_ins))._field_decl))._field_sema != nullptr) && ((*this)._field_s != (*((*(_86640_ins))._field_decl))._field_sema)) && ((*((*((*(_86640_ins))._field_decl))._field_sema))._field_errors.len() > 0LL)) {
					(*((*this)._field_s))._field_errors=jule::append((*((*this)._field_s))._field_errors,(*((*((*(_86640_ins))._field_decl))._field_sema))._field_errors);
					(*((*((*(_86640_ins))._field_decl))._field_sema))._field_errors=nullptr;
				}
				if ((!(_86680_ok))) {
					_86680_ok = false;
					return _86680_ok;
				}
				(*(_20d4a6c9e_field))._field_kind=_91221_kind;
				if ((*((*(_20d4a6c9e_field))._field_kind))._method_mutable()) {
					(*(_86640_ins))._field_mutable=true;
					(*((*this)._field_s))._method_check_struct_ins_derive_clone(_86640_ins);
				}
			}
			_iter_next_5306396080:;
			++it;
			goto _iter_begin_5306396080;
		}
		_iter_end_5306396080:;
	}
	if ((*(_86640_ins))._field_generics.len() > 0LL) {
		(*((*this)._field_s))._method_check_field_defaults(_86640_ins);
		{
			auto &expr = (*(_86640_ins))._field_methods;
			auto it = expr.begin();
			_iter_begin_5306412160:;
			if (it != expr.end()) {
				jule::Ptr<_20c819332_Fn> _20d4a6c9e_m = *it;
				{
					(*((*this)._field_s))._method_check_type_method(_86640_ins,_20d4a6c9e_m);
				}
				_iter_next_5306412160:;
				++it;
				goto _iter_begin_5306412160;
			}
			_iter_end_5306412160:;
		}
	}
	_86680_ok = true;
	return _86680_ok;
}



inline void _20d4a6c9e_TypeChecker::_method_append_used_struct_reference(jule::Ptr<_20c496047_Struct>& _94152_s) {
	if ((*this)._field_referencer == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5306416224:;
			{
				jule::Ptr<_20c496047_Struct> _94821_ref_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_20c496047_Struct>();
				if ((!((*(_94821_ref_s))._method_is_uses(_94152_s)))) {
					(*(_94821_ref_s))._field_uses = jule::alloc_for_append((*(_94821_ref_s))._field_uses,1);(*(_94821_ref_s))._field_uses.push(_94152_s);
				}
			}
		}
		_match_end_5306416144:;
	}
}



inline jule::Ptr<_20c496047_StructIns> _20d4a6c9e_TypeChecker::_method_from_struct(jule::Ptr<_20c476dc4_IdentTypeDecl>& _95535_decl,jule::Ptr<_20c496047_Struct>& _95562_s) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_95562_s))._field_public,(*(_95562_s))._field_token)))) {
		(*this)._method_push_err((*(_95535_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_95535_decl))._field_ident)}));
		return nullptr;
	}
	if ((*this)._field_selection) {
		if ((*(_95535_decl))._field_generics.len() > 0LL) {
			(*this)._method_push_err((*(_95535_decl))._field_token,jule::Str("generics are not allowed in this scope", 38),jule::Slice<jule::Any>());
			return nullptr;
		}
		return jule::new_struct_ptr<_20c496047_StructIns>(new( std::nothrow ) _20c496047_StructIns(jule::Bool(),_95562_s,jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c496047_FieldIns>>(),jule::Slice<jule::Ptr<_20c819332_Fn>>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>()));
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return nullptr;
	}
	jule::Bool _97917_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_95535_decl,jule::Any(_95562_s));
	if ((!(_97917_ok))) {
		return nullptr;
	}
	(*this)._method_append_used_struct_reference(_95562_s);
	jule::Ptr<_20c496047_StructIns> _98517_ins = (*(_95562_s))._method_instance();
	(*(_98517_ins))._field_generics=jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_95535_decl))._field_generics.len()));
	jule::Ptr<_20d4a6c9e_Referencer> _98717_referencer = (*this)._field_referencer;
	(*this)._field_referencer=nullptr;
	{
		auto &expr = (*(_95535_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_5306439632:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_TypeDecl> _20d4a6c9e_g = *it;
			{
				jule::Ptr<_20d4a6c9e_TypeKind> _99021_kind = (*this)._method_build((*(_20d4a6c9e_g))._field_kind);
				if (_99021_kind == nullptr) {
					_97917_ok=false;
					goto _iter_next_5306439632;
				}
				(*(_98517_ins))._field_generics = jule::alloc_for_append((*(_98517_ins))._field_generics,1);(*(_98517_ins))._field_generics.push(_99021_kind);
			}
			_iter_next_5306439632:;
			++it;
			goto _iter_begin_5306439632;
		}
		_iter_end_5306439632:;
	}
	(*this)._field_referencer=_98717_referencer;
	if ((!(_97917_ok))) {
		return nullptr;
	}
	_97917_ok=(*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_98517_ins))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_98517_ins))._field_generics.len()),(*(_95535_decl))._field_token);
	if ((!(_97917_ok))) {
		return nullptr;
	}
	jule::Ptr<_20c496047_StructIns> _100917_exist_instance = (*(_95562_s))._method_append_instance(_98517_ins);
	if (_100917_exist_instance != nullptr) {
		return _100917_exist_instance;
	}
	_97917_ok=(*this)._method_check_struct_ins(_98517_ins,(*(_95535_decl))._field_token);
	if ((!(_97917_ok))) {
		return nullptr;
	}
	return _98517_ins;
}



inline jule::Trait<_20d4a6c9e_Kind> _20d4a6c9e_TypeChecker::_method_get_def(jule::Ptr<_20c476dc4_IdentTypeDecl>& _102431_decl) {
	{
		auto &expr = (*this)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_5306455440:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_GenericDecl> &_20d4a6c9e_g = *it;
			{
				if ((*(_20d4a6c9e_g))._field_ident == (*(_102431_decl))._field_ident) {
					return _20d4a6c9e_build_prim_type((*(_20d4a6c9e_g))._field_ident);
				}
			}
			_iter_next_5306455440:;
			++it;
			goto _iter_begin_5306455440;
		}
		_iter_end_5306455440:;
	}
	{
		auto &expr = (*this)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_5306455328:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeAlias> _20d4a6c9e_g = *it;
			{
				if ((*(_20d4a6c9e_g))._field_ident == (*(_102431_decl))._field_ident) {
					jule::Ptr<_20c496047_StructIns> _103325_st = (*((*((*(_20d4a6c9e_g))._field_kind))._field_kind))._method_strct();
					if (_103325_st != nullptr) {
						jule::Bool _103525_ok = (*this)._method_check_illegal_cycles(_102431_decl,jule::Any((*(_103325_st))._field_decl));
						if ((!(_103525_ok))) {
							return nullptr;
						}
					}
					return (*((*((*(_20d4a6c9e_g))._field_kind))._field_kind))._field_kind;
				}
			}
			_iter_next_5306455328:;
			++it;
			goto _iter_begin_5306455328;
		}
		_iter_end_5306455328:;
	}
	if ((!((*(_102431_decl))._field_cpp_linked))) {
		jule::Ptr<_20cb4c70e_Enum> _104521_e = (*this)._field_lookup.get()._method_find_enum((*(_102431_decl))._field_ident);
		if (_104521_e != nullptr) {
			return (*this)._method_from_enum(_102431_decl,_104521_e);
		}
		jule::Ptr<_20cb471a9_Trait> _105021_t = (*this)._field_lookup.get()._method_find_trait((*(_102431_decl))._field_ident);
		if ((_105021_t == nullptr) && (!((*this)._field_dis_builtin))) {
			_105021_t=_20d68a5ae_find_builtin_trait((*(_102431_decl))._field_ident);
		}
		if (_105021_t != nullptr) {
			if ((!((*((*this)._field_s))._method_is_accessible_define((*(_105021_t))._field_public,(*(_105021_t))._field_token)))) {
				(*this)._method_push_err((*(_102431_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_102431_decl))._field_ident)}));
				return nullptr;
			}
			if ((*(_102431_decl))._field_generics.len() > 0LL) {
				(*this)._method_push_err((*(_102431_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_102431_decl))._field_ident)}));
				return nullptr;
			}
			return _105021_t;
		}
	} else if ((*this)._field_selection) {
		(*this)._method_push_err((*(_102431_decl))._field_token,jule::Str("cpp-linked definitions are not allowed in this scope", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c496047_Struct> _107117_s = (*this)._field_lookup.get()._method_find_struct((*(_102431_decl))._field_ident,(*(_102431_decl))._field_cpp_linked);
	if (_107117_s != nullptr) {
		return (*this)._method_from_struct(_102431_decl,_107117_s);
	}
	jule::Ptr<_20d4a6c9e_TypeAlias> _107617_ta = (*this)._field_lookup.get()._method_find_type_alias((*(_102431_decl))._field_ident,(*(_102431_decl))._field_cpp_linked);
	if ((_107617_ta == nullptr) && (!((*this)._field_dis_builtin))) {
		_107617_ta=_20d68a5ae_find_builtin_type_alias((*(_102431_decl))._field_ident);
	}
	if (_107617_ta != nullptr) {
		return (*this)._method_from_type_alias(_102431_decl,_107617_ta);
	}
	(*this)._method_push_err((*(_102431_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_102431_decl))._field_ident)}));
	return nullptr;
}



inline jule::Trait<_20d4a6c9e_Kind> _20d4a6c9e_TypeChecker::_method_build_ident(jule::Ptr<_20c476dc4_IdentTypeDecl> _108834_decl) {
	{
		
		if (_20d4a6c9e_is_prim((*(_108834_decl))._field_ident)) {
			_case_begin_5306497536:;
			{
				return (*this)._method_build_prim(_108834_decl);
			}
		}
		else {
			_case_begin_5306495536:;
			{
				return (*this)._method_get_def(_108834_decl);
			}
		}
		_match_end_5306495360:;
	}
}



inline jule::Ptr<_20d4a6c9e_Sptr> _20d4a6c9e_TypeChecker::_method_build_sptr_from_type(jule::Ptr<_20d4a6c9e_TypeKind>& _109544_elem) {
	{
		
		if (_109544_elem == nullptr) {
			_case_begin_5306499808:;
			{
				return nullptr;
			}
		}
		else if ((*(_109544_elem))._method_strct() != nullptr) {
			_case_begin_5306499904:;
			{
				jule::Ptr<_20c496047_StructIns> _110217_s = (*(_109544_elem))._method_strct();
				if (((*(_110217_s))._field_decl != nullptr) && (*((*(_110217_s))._field_decl))._field_cpp_linked) {
					(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
		}
		else if (((*(_109544_elem))._method_arr() != nullptr) && (*((*(_109544_elem))._method_arr()))._field_auto) {
			_case_begin_5306500000:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5306495936:;
	}
	return jule::new_struct_ptr<_20d4a6c9e_Sptr>(new( std::nothrow ) _20d4a6c9e_Sptr(_109544_elem));
}



inline jule::Ptr<_20d4a6c9e_Sptr> _20d4a6c9e_TypeChecker::_method_build_sptr(jule::Ptr<_20c476dc4_SptrTypeDecl> _111833_decl) {
	jule::Bool _111913_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_111913_not_plain;
	});
	jule::Ptr<_20d4a6c9e_TypeKind> _112317_elem = (*this)._method_check_decl((*(_111833_decl))._field_elem);
	return (*this)._method_build_sptr_from_type(_112317_elem);
}



inline jule::Ptr<_20d4a6c9e_Ptr> _20d4a6c9e_TypeChecker::_method_build_ptr_from_type(jule::Ptr<_20d4a6c9e_TypeKind>& _112743_elem) {
	{
		
		if (_112743_elem == nullptr) {
			_case_begin_5306517376:;
			{
				return nullptr;
			}
		}
		else if (((*(_112743_elem))._method_arr() != nullptr) && (*((*(_112743_elem))._method_arr()))._field_auto) {
			_case_begin_5306517488:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_20d4a6c9e_Ptr>();
			}
		}
		_match_end_5306517152:;
	}
	return jule::new_struct_ptr<_20d4a6c9e_Ptr>(new( std::nothrow ) _20d4a6c9e_Ptr(_112743_elem));
}



inline jule::Ptr<_20d4a6c9e_Ptr> _20d4a6c9e_TypeChecker::_method_build_ptr(jule::Ptr<_20c476dc4_PtrTypeDecl> _114332_decl) {
	jule::Bool _114413_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_114413_not_plain;
	});
	jule::Ptr<_20d4a6c9e_TypeKind> _114817_elem = nullptr;
	if ((!((*(_114332_decl))._method_is_unsafe()))) {
		_114817_elem=(*this)._method_check_decl((*(_114332_decl))._field_elem);
		return (*this)._method_build_ptr_from_type(_114817_elem);
	}
	return jule::new_struct_ptr<_20d4a6c9e_Ptr>(new( std::nothrow ) _20d4a6c9e_Ptr(_114817_elem));
}



inline jule::Ptr<_20d4a6c9e_Slc> _20d4a6c9e_TypeChecker::_method_build_slc(jule::Ptr<_20c476dc4_SlcTypeDecl> _116032_decl) {
	jule::Bool _116113_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_116113_not_plain;
	});
	jule::Ptr<_20d4a6c9e_TypeKind> _116517_elem = (*this)._method_check_decl((*(_116032_decl))._field_elem);
	{
		
		if (_116517_elem == nullptr) {
			_case_begin_5306536064:;
			{
				return nullptr;
			}
		}
		else if (((*(_116517_elem))._method_arr() != nullptr) && (*((*(_116517_elem))._method_arr()))._field_auto) {
			_case_begin_5306536160:;
			{
				(*this)._method_push_err((*((*(_116032_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5306535936:;
	}
	return jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc(_116517_elem));
}



inline jule::Ptr<_20d4a6c9e_Arr> _20d4a6c9e_TypeChecker::_method_build_arr(jule::Ptr<_20c476dc4_ArrTypeDecl> _118232_decl) {
	jule::Bool _118313_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_118313_not_plain;
	});
	jule::Int _118717_n = 0LL;
	if ((!((*(_118232_decl))._method_auto_sized()))) {
		jule::Ptr<_20d162d45_Data> _119021_size = (*((*((*this)._field_s))._method_eval((*this)._field_lookup)))._method_eval_expr((*(_118232_decl))._field_size);
		if (_119021_size == nullptr) {
			return nullptr;
		}
		if ((!((*(_119021_size))._method_is_const()))) {
			(*this)._method_push_err((*((*(_118232_decl))._field_size))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if (((*((*(_119021_size))._field_kind))._method_prim() == nullptr) || (!(_20d853821_is_int((*((*((*(_119021_size))._field_kind))._method_prim()))._field_kind)))) {
			(*this)._method_push_err((*((*(_118232_decl))._field_size))._field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		}
		_118717_n=static_cast<jule::Int>(static_cast<jule::Int>((*((*(_119021_size))._field_constant))._method_as_i64()));
		if (_118717_n < 0LL) {
			(*this)._method_push_err((*((*(_118232_decl))._field_elem))._field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _121017_elem = (*this)._method_check_decl((*(_118232_decl))._field_elem);
	{
		
		if (_121017_elem == nullptr) {
			_case_begin_5306564048:;
			{
				return nullptr;
			}
		}
		else if (((*(_121017_elem))._method_arr() != nullptr) && (*((*(_121017_elem))._method_arr()))._field_auto) {
			_case_begin_5306564144:;
			{
				(*this)._method_push_err((*((*(_118232_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5306563456:;
	}
	return jule::new_struct_ptr<_20d4a6c9e_Arr>(new( std::nothrow ) _20d4a6c9e_Arr((*(_118232_decl))._method_auto_sized(),_118717_n,_121017_elem));
}



inline jule::Ptr<_20d4a6c9e_Map> _20d4a6c9e_TypeChecker::_method_build_map(jule::Ptr<_20c476dc4_MapTypeDecl> _122932_decl) {
	jule::Bool _123013_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_123013_not_plain;
	});
	jule::Ptr<_20d4a6c9e_TypeKind> _123417_key = (*this)._method_check_decl((*(_122932_decl))._field_key);
	if (_123417_key == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _123917_val = (*this)._method_check_decl((*(_122932_decl))._field_val);
	if (_123917_val == nullptr) {
		return nullptr;
	}
	if ((*(_123917_val))._method_enm() != nullptr) {
		(*this)._method_push_err((*((*(_122932_decl))._field_val))._field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	}
	return jule::new_struct_ptr<_20d4a6c9e_Map>(new( std::nothrow ) _20d4a6c9e_Map(_123417_key,_123917_val));
}



inline jule::Ptr<_20d4a6c9e_Tuple> _20d4a6c9e_TypeChecker::_method_build_tuple(jule::Ptr<_20c476dc4_TupleTypeDecl> _125334_decl) {
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _125417_types = jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_125334_decl))._field_types.len()));
	{
		auto &expr = (*(_125334_decl))._field_types;
		auto it = expr.begin();
		_iter_begin_5306585776:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_TypeDecl> _20d4a6c9e_t = *it;
			{
				jule::Ptr<_20d4a6c9e_TypeKind> _125621_kind = (*this)._method_check_decl(_20d4a6c9e_t);
				if (_125621_kind == nullptr) {
					return nullptr;
				}
				_125417_types.push(_125621_kind);
			}
			_iter_next_5306585776:;
			++it;
			goto _iter_begin_5306585776;
		}
		_iter_end_5306585776:;
	}
	return jule::new_struct_ptr<_20d4a6c9e_Tuple>(new( std::nothrow ) _20d4a6c9e_Tuple(_125417_types));
}



inline jule::Bool _20d4a6c9e_TypeChecker::_method_check_fn_types(jule::Ptr<_20c819332_FnIns>& _126638_f) {
	jule::Bool _126651_ok = jule::Bool();
	{
		auto &expr = (*(_126638_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5306592656:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> _20d4a6c9e_p = *it;
			{
				(*(_20d4a6c9e_p))._field_kind=(*this)._method_build((*((*((*((*(_20d4a6c9e_p))._field_decl))._field_kind))._field_decl))._field_kind);
				_126651_ok=(*(_20d4a6c9e_p))._field_kind != nullptr;
				if ((!(_126651_ok))) {
					_126651_ok = false;
					return _126651_ok;
				}
			}
			_iter_next_5306592656:;
			++it;
			goto _iter_begin_5306592656;
		}
		_iter_end_5306592656:;
	}
	if ((!((*((*(_126638_f))._field_decl))._method_is_void()))) {
		(*(_126638_f))._field_result=(*this)._method_build((*((*((*((*((*(_126638_f))._field_decl))._field_result))._field_kind))._field_decl))._field_kind);
		_126651_ok = (*(_126638_f))._field_result != nullptr;
		return _126651_ok;
	}
	_126651_ok = true;
	return _126651_ok;
}



inline jule::Ptr<_20c819332_FnIns> _20d4a6c9e_TypeChecker::_method_build_fn(jule::Ptr<_20c476dc4_FnDecl> _128331_decl) {
	if ((*(_128331_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_128331_decl))._field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c819332_Fn> _128917_f = _20caa3115_build_fn(_128331_decl);
	jule::Ptr<_20c819332_FnIns> _129017_ins = (*(_128917_f))._method_instance_force();
	(*(_129017_ins))._field_anon=true;
	jule::Bool _129313_ok = (*this)._method_check_fn_types(_129017_ins);
	if ((!(_129313_ok))) {
		return nullptr;
	}
	return _129017_ins;
}



inline jule::Trait<_20d4a6c9e_Kind> _20d4a6c9e_TypeChecker::_method_build_by_namespace(jule::Ptr<_20c476dc4_NamespaceTypeDecl> _130141_decl) {
	jule::Str _130213_path = _20d4a6c9e_build_link_path_by_tokens((*(_130141_decl))._field_idents);
	jule::Ptr<_20cba58cc_ImportInfo> _130317_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_20cba58cc_ImportInfo>)>([=](jule::Ptr<_20cba58cc_ImportInfo> _130353_imp) mutable -> jule::Bool {
		if (((*(_130141_decl))._field_idents.len() == 1LL) && ((*(_130353_imp))._field_alias == _130213_path)) {
			return true;
		}
		return ((*(_130353_imp))._field_link_path == _130213_path) && (*(_130353_imp))._method_is_accessible_via_selection();
	}));
	if ((_130317_imp == nullptr) || (!((*(_130317_imp))._method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err((*(_130141_decl))._field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_130213_path)}));
		return nullptr;
	}
	jule::Trait<_20d6751d1_Lookup> _131517_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_130317_imp;
	(*this)._method_disallow_builtin();
	jule::Trait<_20d4a6c9e_Kind> _131917_kind = (*this)._method_build_ident((*(_130141_decl))._field_kind);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_131517_lookup;
	return _131917_kind;
}



inline jule::Ptr<_20d4a6c9e_TypeKind> _20d4a6c9e_TypeChecker::_method_build(jule::Any& _132729_decl_kind) {
	jule::Trait<_20d4a6c9e_Kind> _132817_kind = nullptr;
	{
		auto &_match_expr{ _132729_decl_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeKind>>()) {
			_case_begin_5306630208:;
			{
				_132817_kind=_132729_decl_kind.operator jule::Ptr<_20d4a6c9e_TypeKind>();
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_IdentTypeDecl>>()) {
			_case_begin_5306631104:;
			{
				jule::Trait<_20d4a6c9e_Kind> _133521_t = (*this)._method_build_ident(_132729_decl_kind.operator jule::Ptr<_20c476dc4_IdentTypeDecl>());
				if (_133521_t != nullptr) {
					_132817_kind=_133521_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_SptrTypeDecl>>()) {
			_case_begin_5306631200:;
			{
				jule::Ptr<_20d4a6c9e_Sptr> _134121_t = (*this)._method_build_sptr(_132729_decl_kind.operator jule::Ptr<_20c476dc4_SptrTypeDecl>());
				if (_134121_t != nullptr) {
					_132817_kind=_134121_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_PtrTypeDecl>>()) {
			_case_begin_5306631296:;
			{
				jule::Ptr<_20d4a6c9e_Ptr> _134721_t = (*this)._method_build_ptr(_132729_decl_kind.operator jule::Ptr<_20c476dc4_PtrTypeDecl>());
				if (_134721_t != nullptr) {
					_132817_kind=_134721_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_SlcTypeDecl>>()) {
			_case_begin_5306631392:;
			{
				jule::Ptr<_20d4a6c9e_Slc> _135321_t = (*this)._method_build_slc(_132729_decl_kind.operator jule::Ptr<_20c476dc4_SlcTypeDecl>());
				if (_135321_t != nullptr) {
					_132817_kind=_135321_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_ArrTypeDecl>>()) {
			_case_begin_5306632800:;
			{
				jule::Ptr<_20d4a6c9e_Arr> _135921_t = (*this)._method_build_arr(_132729_decl_kind.operator jule::Ptr<_20c476dc4_ArrTypeDecl>());
				if (_135921_t != nullptr) {
					_132817_kind=_135921_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_MapTypeDecl>>()) {
			_case_begin_5306632896:;
			{
				jule::Ptr<_20d4a6c9e_Map> _136521_t = (*this)._method_build_map(_132729_decl_kind.operator jule::Ptr<_20c476dc4_MapTypeDecl>());
				if (_136521_t != nullptr) {
					_132817_kind=_136521_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_TupleTypeDecl>>()) {
			_case_begin_5306632992:;
			{
				jule::Ptr<_20d4a6c9e_Tuple> _137121_t = (*this)._method_build_tuple(_132729_decl_kind.operator jule::Ptr<_20c476dc4_TupleTypeDecl>());
				if (_137121_t != nullptr) {
					_132817_kind=_137121_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnDecl>>()) {
			_case_begin_5306633104:;
			{
				jule::Ptr<_20c819332_FnIns> _137721_t = (*this)._method_build_fn(_132729_decl_kind.operator jule::Ptr<_20c476dc4_FnDecl>());
				if (_137721_t != nullptr) {
					_132817_kind=_137721_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_NamespaceTypeDecl>>()) {
			_case_begin_5306633472:;
			{
				jule::Trait<_20d4a6c9e_Kind> _138321_t = (*this)._method_build_by_namespace(_132729_decl_kind.operator jule::Ptr<_20c476dc4_NamespaceTypeDecl>());
				if (_138321_t != nullptr) {
					_132817_kind=_138321_t;
				}
			}
		}
		else {
			_case_begin_5306630800:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5306630720:;
	}
	if (_132817_kind == nullptr) {
		return nullptr;
	}
	{
		auto &_match_expr{ _132817_kind };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeKind>>()) {
			_case_begin_5306662928:;
			{
				return _132817_kind.operator jule::Ptr<_20d4a6c9e_TypeKind>();
			}
		}
		else {
			_case_begin_5306661488:;
			{
				return jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_132817_kind));
			}
		}
		_match_end_5306660416:;
	}
}



inline jule::Ptr<_20d4a6c9e_TypeKind> _20d4a6c9e_TypeChecker::_method_check_decl(jule::Ptr<_20c476dc4_TypeDecl>& _140834_decl) {
	_20c47803a_Token _141017_error_token = (*this)._field_error_token;
	(*this)._field_error_token=(*(_140834_decl))._field_token;
	jule::Ptr<_20d4a6c9e_TypeKind> _141317_kind = (*this)._method_build((*(_140834_decl))._field_kind);
	(*this)._field_error_token=_141017_error_token;
	return _141317_kind;
}



inline void _20d4a6c9e_TypeChecker::_method_check(jule::Ptr<_20d4a6c9e_TypeSymbol>& _141929_t) {
	if ((*(_141929_t))._field_decl == nullptr) {
		return;
	}
	jule::Ptr<_20d4a6c9e_TypeKind> _142417_kind = (*this)._method_check_decl((*(_141929_t))._field_decl);
	if (_142417_kind == nullptr) {
		(*(_141929_t))._method_remove_kind();
		return;
	}
	(*(_141929_t))._field_kind=_142417_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _20d4a6c9e_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "selection:" << _Src._field_selection;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_20b6b28b3_IR>,jule::Slice<_20a25b99c_Log>> _20b6b28b3_IR::_static_method_build(jule::Str _2625_path,jule::Int _2636_flags) {
	jule::Ptr<_20c44b959_PlainImporter> _2717_importer = _20c44b959_PlainImporter::_static_method_new();
	jule::Slice<jule::Ptr<_20c476126_Ast>> _2818_files;
	jule::Slice<_20a25b99c_Log> _2829_logs;
	std::tie(_2818_files,_2829_logs) = (*(_2717_importer))._method_import_package(_2625_path,true);
	if (_2829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_2829_logs);
	}
	if (_2818_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_20cba58cc_Package> _3718_pkg;
	std::tie(_3718_pkg,_2829_logs) = _20d5c9454_analyze_package(_2818_files,_2717_importer,_2636_flags);
	if (_2829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_2829_logs);
	}
	jule::Ptr<_20b6b28b3_IR> _4217_ir = jule::new_struct<_20b6b28b3_IR>(new( std::nothrow ) _20b6b28b3_IR(jule::Slice<jule::Str>(),_3718_pkg,(*(_2717_importer))._field_all_packages,_20c3e743d_OrderedDefines()));
	(*(_4217_ir))._field_passes=_20b6b28b3_get_all_unique_passes((*(_4217_ir))._field_main,(*(_4217_ir))._field_used);
	return std::make_tuple(_4217_ir,nullptr);
}



inline void _20b6b28b3_IR::_method_append_structs(jule::Ptr<_20cba58cc_Package>& _5334_p,jule::Slice<jule::Ptr<_20c496047_Struct>>& _5358_buffer) {
	{
		auto &expr = (*(_5334_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5306955280:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20b6b28b3_f = *it;
			{
				{
					auto &expr = (*(_20b6b28b3_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_5306957184:;
					if (it != expr.end()) {
						jule::Ptr<_20c496047_Struct> _20b6b28b3_s = *it;
						{
							if ((!((*(_20b6b28b3_s))._field_cpp_linked))) {
								_5358_buffer.push(_20b6b28b3_s);
							}
						}
						_iter_next_5306957184:;
						++it;
						goto _iter_begin_5306957184;
					}
					_iter_end_5306957184:;
				}
			}
			_iter_next_5306955280:;
			++it;
			goto _iter_begin_5306955280;
		}
		_iter_end_5306955280:;
	}
}



inline jule::Slice<jule::Ptr<_20c496047_Struct>> _20b6b28b3_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ptr<_20c496047_Struct>> _6617_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_6617_buffer);
	{
		auto &expr = (*this)._field_used;
		auto it = expr.begin();
		_iter_begin_5306961808:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20b6b28b3_u = *it;
			{
				if ((!((*(_20b6b28b3_u))._field_cpp_linked))) {
					(*this)._method_append_structs((*(_20b6b28b3_u))._field_package,_6617_buffer);
				}
			}
			_iter_next_5306961808:;
			++it;
			goto _iter_begin_5306961808;
		}
		_iter_end_5306961808:;
	}
	return _6617_buffer;
}



inline void _20b6b28b3_IR::_method_order(void) {
	(*this)._field_ordered._field_structs=(*this)._method_get_all_structures();
	_20c3e743d_DefineOrderer::_static_method_order_structures((*this)._field_ordered._field_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _20b6b28b3_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_ParamDecl::_method_is_self(void) {
	return _20a405ddd_has_suffix((*this)._field_ident,jule::Str("self", 4));
}



inline jule::Bool _20c476dc4_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20cb4d853_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_FnDecl::_method_is_anon(void) {
	return (*this)._field_ident == jule::Str("<anonymous>", 11);
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _20c476dc4_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _20c476dc4_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Int,jule::Bool> _20baa6c1e_ArgParser::_method_parse_integer_0(jule::Str& _18632_s,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)> _18640_parser) {
	jule::Int _18684_x = jule::Int();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s == jule::Str()) {
			_case_begin_5309471216:;
			{
				_18684_x = 0LL;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_20a405ddd_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_5309471552:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_20a405ddd_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_5309471648:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_20a405ddd_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_5309471744:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_5309469888:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_5309469584:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_5309469408:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}

inline std::tuple<jule::Uint,jule::Bool> _20baa6c1e_ArgParser::_method_parse_integer_1(jule::Str& _18632_s,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)> _18640_parser) {
	jule::Uint _18684_x = jule::Uint();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s == jule::Str()) {
			_case_begin_5309498304:;
			{
				_18684_x = 0LL;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_20a405ddd_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_5309498640:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_20a405ddd_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_5309498736:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_20a405ddd_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_5309498832:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_5309496976:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_5309496672:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_5309496496:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}



inline jule::Str _20baa6c1e_ArgParser::_method_get_data(void) {
	if (((*this)._field_i + 1LL) >= (*this)._field_args.len()) {
		return jule::Str();
	}
	((*this)._field_i)++;
	return (*this)._field_args[(*this)._field_i];
}



inline jule::VoidExceptional _20baa6c1e_ArgParser::_method_process_flag(jule::Trait<_20baa6c1e_CommonFlag>& _21736_flag) {
	{
		auto &_match_expr{ _21736_flag };
		
		if (_match_expr.type_is<jule::Ptr<_20baa6c1e_Flag_3>>()) {
			_case_begin_5309445872:;
			{
				jule::Ptr<_20baa6c1e_Flag_3> _22021_bf = _21736_flag.operator jule::Ptr<_20baa6c1e_Flag_3>();
				(*((*(_22021_bf))._field__data))=(!((*(_22021_bf))._field__default));
				return jule::VoidExceptional();
			}
		}
		_match_end_5309445792:;
	}
	jule::Str _22513_data = (*this)._method_get_data();
	if (_22513_data == jule::Str()) {
		return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression missing", 20));
	}
	{
		auto &_match_expr{ _21736_flag };
		
		if (_match_expr.type_is<jule::Ptr<_20baa6c1e_Flag_0>>()) {
			_case_begin_5309450400:;
			{
				jule::Ptr<_20baa6c1e_Flag_0> _23221_intf = _21736_flag.operator jule::Ptr<_20baa6c1e_Flag_0>();
				jule::Bool _23333_ok;
				std::tie((*((*(_23221_intf))._field__data)),_23333_ok) = (*this)._method_parse_integer_0(_22513_data,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _23372_s,jule::Int _23380_base) mutable -> std::tuple<jule::Int,jule::Bool> {
					jule::I64 _23422_x;
					jule::Int _23425_err;
					std::tie(_23422_x,_23425_err) = _20b6918b4_parse_int(_23372_s,_23380_base,64LL);
					return std::make_tuple(_23422_x,_23425_err == 0LLU);
				}));
				if ((!(_23333_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression must be valid signed integer", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20baa6c1e_Flag_1>>()) {
			_case_begin_5309450496:;
			{
				jule::Ptr<_20baa6c1e_Flag_1> _24221_uintf = _21736_flag.operator jule::Ptr<_20baa6c1e_Flag_1>();
				jule::Bool _24334_ok;
				std::tie((*((*(_24221_uintf))._field__data)),_24334_ok) = (*this)._method_parse_integer_1(_22513_data,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _24374_s,jule::Int _24382_base) mutable -> std::tuple<jule::Uint,jule::Bool> {
					jule::U64 _24422_x;
					jule::Int _24425_err;
					std::tie(_24422_x,_24425_err) = _20b6918b4_parse_uint(_24374_s,_24382_base,64LL);
					return std::make_tuple(_24422_x,_24425_err == 0LLU);
				}));
				if ((!(_24334_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression must be valid unsigned integer", 43));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20baa6c1e_Flag_2>>()) {
			_case_begin_5309452256:;
			{
				jule::Ptr<_20baa6c1e_Flag_2> _25221_ff = _21736_flag.operator jule::Ptr<_20baa6c1e_Flag_2>();
				jule::Int _25331_err;
				std::tie((*((*(_25221_ff))._field__data)),_25331_err) = _20b657ced_parse_float(_22513_data,64LL);
				if (_25331_err != 0LLU) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression must be valid floating-point", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20baa6c1e_Flag_4>>()) {
			_case_begin_5309452352:;
			{
				(*((*(_21736_flag.operator jule::Ptr<_20baa6c1e_Flag_4>()))._field__data))=_22513_data;
			}
		}
		_match_end_5309450240:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _20baa6c1e_ArgParser::_method_single_dash(jule::Str& _26331_arg) {
	jule::Slice<jule::I32> _26413_rarg = static_cast<jule::Slice<jule::I32>>(_26331_arg).slice(1LL);
	{
		auto &expr = _26413_rarg;
		auto it = expr.begin();
		_iter_begin_5309516416:;
		if (it != expr.end()) {
			jule::I32 &_20baa6c1e_r = *it;
			{
				jule::Trait<_20baa6c1e_CommonFlag> _26621_flag = (*this)._field_set._method_find_flag_short(_20baa6c1e_r);
				if (_26621_flag == nullptr) {
					return jule::VoidExceptional((_26331_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_20baa6c1e_r));
				}
				({
					auto except = (*this)._method_process_flag(_26621_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_5309516416:;
			++it;
			goto _iter_begin_5309516416;
		}
		_iter_end_5309516416:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _20baa6c1e_ArgParser::_method_double_dash(jule::Str& _27531_arg) {
	jule::Trait<_20baa6c1e_CommonFlag> _27617_flag = (*this)._field_set._method_find_flag(_27531_arg.slice(2LL));
	if (_27617_flag == nullptr) {
		return jule::VoidExceptional(_27531_arg + jule::Str(": flag is not exist", 19));
	}
	({
		auto except = (*this)._method_process_flag(_27617_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::VoidExceptional _20baa6c1e_ArgParser::_method_try_arg(void) {
	jule::Str _28513_arg = (*this)._field_args[(*this)._field_i];
	if ((*this)._field_args.len() == 0LL) {
		return jule::VoidExceptional();
	}
	if (_28513_arg[0LL] == '-') {
		if (((*this)._field_args.len() > 1LL) && (_28513_arg[1LL] == '-')) {
			({
				auto except = (*this)._method_double_dash(_28513_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();
		}
		({
			auto except = (*this)._method_single_dash(_28513_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();
	}
	(*this)._field_content = jule::alloc_for_append((*this)._field_content,1);(*this)._field_content.push(_28513_arg); return jule::VoidExceptional(); }



inline jule::VoidExceptional _20baa6c1e_ArgParser::_method_parse(void) {
	for (; (*this)._field_i < (*this)._field_args.len(); ((*this)._field_i)++) {
		{
			({
				auto except = (*this)._method_try_arg();
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_5309532416:;
	}
	_iter_end_5309532416:; return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _20baa6c1e_ArgParser &_Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::I32 _20a2c498d_decode_rune(jule::I32 _6720_r1,jule::I32 _6730_r2) {
	if ((((55296LL <= _6720_r1) && (_6720_r1 < 56320LL)) && (56320LL <= _6730_r2)) && (_6730_r2 < 57344LL)) {
		return static_cast<jule::I32>((((_6720_r1 - 55296LL) << 10LL) | (_6730_r2 - 56320LL)) + 65536LL);
	}
	return 65533LL;
}



inline std::tuple<jule::I32,jule::I32> _20a2c498d_encode_rune(jule::I32 _7724_r) {
	jule::I32 _7735_r1 = jule::I32();
	jule::I32 _7745_r2 = jule::I32();
	if ((_7724_r < 65536LL) || (_7724_r > 1114111LL)) {
		_7735_r1 = 65533LL;
		_7745_r2 = 65533LL;
		return std::make_tuple(_7735_r1,_7745_r2);
	}
	_7724_r-=65536LL;
	_7735_r1 = static_cast<jule::I32>(55296LL + ((_7724_r >> 10LL) & 1023LL));
	_7745_r2 = static_cast<jule::I32>(56320LL + (_7724_r & 1023LL));
	return std::make_tuple(_7735_r1,_7745_r2);
}



inline jule::Slice<jule::I32> _20a2c498d_decode(jule::Slice<jule::U16> _11815_s) {
	jule::Slice<jule::I32> _11913_a = jule::Slice<jule::I32>::alloc(static_cast<jule::I64>(_11815_s.len()));
	jule::Int _12013_n = 0LL;
	jule::Int _12113_i = 0LL;
	for (; _12113_i < _11815_s.len(); (_12113_i)++) {
		{
			jule::U16 _12313_r = _11815_s[_12113_i];
			{
				
				if (_12313_r < 55296LL || 57344LL <= _12313_r) {
					_case_begin_5283540368:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(static_cast<jule::I32>(_12313_r));
					}
				}
				else if (((((55296LL <= _12313_r) && (_12313_r < 56320LL)) && ((_12113_i + 1LL) < _11815_s.len())) && (56320LL <= _11815_s[_12113_i + 1LL])) && (_11815_s[_12113_i + 1LL] < 57344LL)) {
					_case_begin_5283539536:;
					{
						_11913_a[_12013_n]=static_cast<jule::I32>(_20a2c498d_decode_rune(static_cast<jule::I32>(static_cast<jule::I32>(_12313_r)),static_cast<jule::I32>(static_cast<jule::I32>(_11815_s[_12113_i + 1LL]))));
						(_12113_i)++;
					}
				}
				else {
					_case_begin_5283538736:;
					{
						_11913_a[_12013_n]=65533LL;
					}
				}
				_match_end_5283538624:;
			}
			(_12013_n)++;
		}
	_iter_next_5283529248:;
	}
	_iter_end_5283529248:;
	return _11913_a.slice(0LL,_12013_n);
}



inline jule::Slice<jule::U16> _20a2c498d_append_rune(jule::Slice<jule::U16> _14524_a,jule::I32 _14534_r) {
	{
		
		if ((0LL <= _14534_r) && (_14534_r < 55296LL) || (57344LL <= _14534_r) && (_14534_r < 65536LL)) {
			_case_begin_5283546176:;
			{
				return jule::append(_14524_a,jule::Slice<jule::U16>({static_cast<jule::U16>(static_cast<jule::U16>(_14534_r))}));
			}
		}
		else if ((65536LL <= _14534_r) && (_14534_r <= 1114111LL)) {
			_case_begin_5283549728:;
			{
				jule::I32 _15214_r1;
				jule::I32 _15218_r2;
				std::tie(_15214_r1,_15218_r2) = _20a2c498d_encode_rune(_14534_r);
				return jule::append(_14524_a,jule::Slice<jule::U16>({static_cast<jule::U16>(static_cast<jule::U16>(_15214_r1)),static_cast<jule::U16>(static_cast<jule::U16>(_15218_r2))}));
			}
		}
		_match_end_5283546016:;
	}
	return jule::append(_14524_a,jule::Slice<jule::U16>({65533LLU}));
}



inline jule::Slice<jule::U16> _20a294111_utf16_from_str(jule::Str _1923_s) {
	
	jule::Slice<jule::I32> _259_runes = static_cast<jule::Slice<jule::I32>>(_1923_s);
	jule::Slice<jule::U16> _2613_buff = jule::Slice<jule::U16>::alloc(0LL,static_cast<jule::I64>(_259_runes.len()));
	{
		auto &expr = _259_runes;
		auto it = expr.begin();
		_iter_begin_5283594912:;
		if (it != expr.end()) {
			jule::I32 &_20a294111_r = *it;
			{
				if (_20a294111_r == 0LL) {
					goto _iter_end_5283594912;
				}
				_2613_buff=_20a2c498d_append_rune(_2613_buff,_20a294111_r);
			}
			_iter_next_5283594912:;
			++it;
			goto _iter_begin_5283594912;
		}
		_iter_end_5283594912:;
	}
	return _20a2c498d_append_rune(_2613_buff,0LL);
}



inline jule::Str _20a294111_utf16_to_str(jule::Slice<jule::U16> _3921_s) {
	if (_3921_s == nullptr) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _4313_code_page = _3921_s;
	{
		auto &expr = _3921_s;
		auto it = expr.begin();
		_iter_begin_5283604448:;
		if (it != expr.end()) {
			jule::Int _20a294111_i = it - expr.begin();
			jule::U16 &_20a294111_v = *it;
			{
				if (_20a294111_v == 0LL) {
					_4313_code_page=_4313_code_page.slice(0LL,_20a294111_i);
					goto _iter_end_5283604448;
				}
			}
			_iter_next_5283604448:;
			++it;
			_20a294111_i++;
			goto _iter_begin_5283604448;
		}
		_iter_end_5283604448:;
	}
	return static_cast<jule::Str>(_20a2c498d_decode(_4313_code_page));
}



inline jule::Str _20a294111_u16_ptr_to_str(jule::U16* _5530_s) {
	if (_5530_s == nullptr) {
		return jule::Str();
	}
	jule::Slice<jule::U16> _6013_code_page = nullptr;
	jule::Int _6113_i = 0LL;
	for (; ; (_6113_i)++) {
		{
			jule::U16 _6313_r = _5530_s[_6113_i];
			if (_6313_r == 0LL) {
				return static_cast<jule::Str>(_20a2c498d_decode(_6013_code_page));
			}
			_6013_code_page.push(_6313_r);
		}
	_iter_next_5283608048:;
	}
	_iter_end_5283608048:;
	return jule::Str();
}



inline jule::Int _20a21b055_get_last_errno(void) {
	return errno;
}



inline jule::Uintptr _20a23834c_get_std_handle(jule::Uintptr _5523_stdh) {
	return static_cast<jule::Uintptr>(((jule::Uintptr)(GetStdHandle(_5523_stdh))));
}



inline jule::Int _20a23834c_wstat(jule::U16* _5921_path,struct stat* _5937_stat) {
	return static_cast<jule::Int>(wstat(((wchar_t*)(_5921_path)),_5937_stat));
}



inline jule::Int _20a23834c__wopen(jule::U16* _6422_path,jule::Int _6434_flag,jule::Int _6445_mode) {
	return static_cast<jule::Int>(_wopen(((wchar_t*)((&(_6422_path[0LL])))),_6434_flag,_6445_mode));
}



inline jule::U32 _20a23834c_get_last_error(void) {
	return static_cast<jule::U32>(GetLastError());
}



inline jule::U32 _20a23834c_get_current_directory(jule::U32 _7337_bufflen,jule::U16* _7355_buff) {
	return static_cast<jule::U32>(GetCurrentDirectoryW(_7337_bufflen,((wchar_t*)(_7355_buff))));
}



inline jule::Bool _20a23834c_delete_file(jule::U16* _8427_path) {
	return DeleteFileW(((wchar_t*)(_8427_path)));
}



inline jule::Bool _20a23834c_create_directory(jule::U16* _8932_path) {
	return CreateDirectoryW(((wchar_t*)(_8932_path)),nullptr);
}



inline jule::Bool _20a23834c_remove_directory(jule::U16* _9432_path) {
	return RemoveDirectoryW(((wchar_t*)(_9432_path)));
}



inline _WDIR* _20a23834c__wopendir(jule::U16* _9925_path) {
	return _wopendir(((wchar_t*)(_9925_path)));
}



inline struct _wdirent* _20a23834c__wreaddir(_WDIR* _10229_dir) {
	return _wreaddir(_10229_dir);
}



inline jule::Int _20a23834c__wclosedir(_WDIR* _10530_dir) {
	return static_cast<jule::Int>(_wclosedir(_10530_dir));
}



inline jule::U32 _20a23834c_get_full_path_name(jule::U16* _10834_path,jule::U32 _10846_bufflen,jule::U16* _1095_buff,jule::U16** _10917_fname) {
	return static_cast<jule::U32>(GetFullPathNameW(((wchar_t*)(_10834_path)),_10846_bufflen,((wchar_t*)(_1095_buff)),((wchar_t**)(_10917_fname))));
}



inline jule::Bool _20a23834c_get_console_mode(jule::Uintptr _11425_handle,jule::Int& _11446_mode) {
	return GetConsoleMode(((HANDLE)(_11425_handle)),((DWORD*)((&(_11446_mode)))));
}



inline jule::Bool _20a23834c_set_console_mode(jule::Uintptr _11925_handle,jule::Int _11941_mode) {
	return SetConsoleMode(((HANDLE)(_11925_handle)),static_cast<DWORD>(_11941_mode));
}



inline jule::Bool _20a23834c_write_console(jule::Uintptr _12429_handle,jule::U16* _12445_buffer,jule::Int _12459_to_write,jule::Int& _12510_written,void* _12524_reserved) {
	return WriteConsoleW(((HANDLE)(_12429_handle)),((void*)(_12445_buffer)),static_cast<DWORD>(_12459_to_write),((DWORD*)(_12510_written)),_12524_reserved);
}



inline jule::Bool _20a23834c_read_console(jule::Uintptr _13128_handle,jule::U16* _13148_buffer,jule::Int _13162_to_read,jule::Int& _13210_readed,void* _13223_input_control) {
	return ReadConsoleW(((HANDLE)(_13128_handle)),((void*)(_13148_buffer)),static_cast<DWORD>(_13162_to_read),((DWORD*)((&(_13210_readed)))),_13223_input_control);
}



inline jule::I64 _20a254c81_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _20a254c81_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _20a254c81_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _20a254c81_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _20a254c81_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline jule::Int _20a21b6e8_get_last_os_error_windows(void) {
	jule::U32 _169_err = _20a23834c_get_last_error();
	{
		auto &_match_expr{ _169_err };
		
		if (_match_expr == 5LL) {
			_case_begin_5283857200:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_5283856752:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_5283856848:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 123LL) {
			_case_begin_5283856944:;
			{
				return 4LLU;
			}
		}
		else {
			_case_begin_5283855440:;
			{
				return 0LLU;
			}
		}
		_match_end_5283847232:;
	}
}



inline jule::Slice<jule::Str> _20a225bec_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _20a225bec_working_dir(void) {
	return jule::Exceptional<jule::Str>(jule::Any(),({
		auto except = _20a22bd02___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _20a22bd02___getwd(void) {
	jule::Array<jule::U16,261> _1513_buff = jule::Array<jule::U16,261>();
	jule::U32 _169_n = _20a23834c_get_current_directory(261LLU,(&(_1513_buff.__at(0LL))));
	if (_169_n == 0LL) {
		return jule::Exceptional<jule::Str>(_20a21b6e8_get_last_os_error_windows());
	}
	return jule::Exceptional<jule::Str>(jule::Any(),_20a294111_u16_ptr_to_str((&(_1513_buff.__at(0LL)))));
}



inline void _20a20bc9e_push_opt_level(jule::Int _3323_level) {
	_20a20bc9e_OPT_COPY=_3323_level >= 1LLU;
	_20a20bc9e_OPT_DEADCODE=_3323_level >= 1LLU;
	_20a20bc9e_OPT_APPEND=_3323_level >= 1LLU;
	_20a20bc9e_OPT_MATH=_3323_level >= 1LLU;
	_20a20bc9e_OPT_ACCESS=_3323_level >= 1LLU;
	_20a20bc9e_OPT_INLINE=_3323_level >= 1LLU;
	_20a20bc9e_OPT_PTR=_3323_level >= 1LLU;
	_20a20bc9e_OPT_COND=_3323_level >= 1LLU;
}



inline std::tuple<jule::I32,jule::Int> _20a3472e6_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::Int _18242_size = jule::Int();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _20a3472e6_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = static_cast<jule::U8>((_1879_x << 31LL) >> 31LL);
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_20a3472e6_accept_range _1969_accept = _20a3472e6_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::Int> _20a3472e6_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::I32 _27638_r = jule::I32();
	jule::Int _27647_size = jule::Int();
	if (_27625_p.len() == 0LL) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _2809_end = _27625_p.len();
	jule::I64 _28113_start = _2809_end - 1LL;
	_27638_r=static_cast<jule::I32>(static_cast<jule::I32>(_27625_p[_28113_start]));
	if (_27638_r < 128LL) {
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _28913_lim = _2809_end - 4LL;
	if (_28913_lim < 0LL) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	for (; _28113_start >= _28913_lim; (_28113_start)--) {
		{
			if (_20a3472e6_rune_start(_27625_p[_28113_start])) {
				goto _iter_end_5284046080;
			}
		}
	_iter_next_5284046080:;
	}
	_iter_end_5284046080:;
	if (_28113_start < 0LL) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _20a3472e6_decode_rune(_27625_p.slice(_28113_start,_2809_end));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	return std::make_tuple(_27638_r,_27647_size);
}



inline jule::Int _20a3472e6_rune_len(jule::I32 _35217_r) {
	{
		
		if (_35217_r < 0LL) {
			_case_begin_5284067168:;
			{
				return -1LL;
			}
		}
		else if (_35217_r <= 127LLU) {
			_case_begin_5284066688:;
			{
				return 1LL;
			}
		}
		else if (_35217_r <= 2047LLU) {
			_case_begin_5284066784:;
			{
				return 2LL;
			}
		}
		else if ((55296LL <= _35217_r) && (_35217_r <= 57343LL)) {
			_case_begin_5284066880:;
			{
				return -1LL;
			}
		}
		else if (_35217_r <= 65535LLU) {
			_case_begin_5284066144:;
			{
				return 3LL;
			}
		}
		else if (_35217_r <= 1114111LL) {
			_case_begin_5284066240:;
			{
				return 4LL;
			}
		}
		else {
			_case_begin_5284063392:;
			{
				return -1LL;
			}
		}
		_match_end_5284059152:;
	}
}



inline jule::Int _20a3472e6_encode_rune(jule::Slice<jule::U8> _36724_p,jule::I32 _36739_r) {
	jule::U32 _3699_i = static_cast<jule::U32>(_36739_r);
	{
		
		if (_3699_i <= 127LLU) {
			_case_begin_5284082480:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(static_cast<jule::U8>(_36739_r));
				return 1LL;
			}
		}
		else if (_3699_i <= 2047LLU) {
			_case_begin_5284075936:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(192LL | static_cast<jule::U8>(_36739_r >> 6LL));
				_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
				return 2LL;
			}
		}
		else if (_3699_i > 1114111LL || (55296LL <= _3699_i) && (_3699_i <= 57343LL)) {
			_case_begin_5284083424:;
			{
				_36739_r=65533LL;
				goto _case_begin_5284083120;
			}
		}
		else if (_3699_i <= 65535LLU) {
			_case_begin_5284083120:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(224LL | static_cast<jule::U8>(_36739_r >> 12LL));
				_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
				_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
				return 3LL;
			}
		}
		else {
			_case_begin_5284075152:;
			{
				_36724_p[0LL]=static_cast<jule::U8>(240LL | static_cast<jule::U8>(_36739_r >> 18LL));
				_36724_p[1LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 12LL) & 63LL));
				_36724_p[2LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r >> 6LL) & 63LL));
				_36724_p[3LL]=static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_36739_r) & 63LL));
				return 4LL;
			}
		}
		_match_end_5284075024:;
	}
}



inline jule::Slice<jule::U8> _20a3472e6_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (_39835_r <= 127LLU) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_39835_r))}));
	}
	return _20a3472e6_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _20a3472e6_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		
		if (_4079_i <= 2047LLU) {
			_case_begin_5284107888:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else if (_4079_i > 1114111LL || (55296LL <= _4079_i) && (_4079_i <= 57343LL)) {
			_case_begin_5284108480:;
			{
				_40545_r=65533LL;
				goto _case_begin_5284108576;
			}
		}
		else if (_4079_i <= 65535LLU) {
			_case_begin_5284108576:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else {
			_case_begin_5284101440:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		_match_end_5284101280:;
	}
}



inline jule::Bool _20a3472e6_rune_start(jule::U8 _51019_b) {
	return (_51019_b & 192LL) != 128LL;
}



inline jule::Bool _20b055124_is_letter(jule::I32 _7618_r) {
	if (static_cast<jule::U32>(_7618_r) <= 255LL) {
		return (_20b09c05b__PROPERTIES[static_cast<jule::Int>(static_cast<jule::U8>(_7618_r))] & 96LL) != 0LL;
	}
	return _20b0b06ce_is_excluding_latin(_20b09c05b_LETTER,_7618_r);
}



inline jule::Bool _20b0b06ce_is16(jule::Slice<_20b0b06ce_Range16> _1919_ranges,jule::U16 _19128_r) {
	if ((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LL)) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_5288658496:;
			if (it != expr.end()) {
				jule::Int _20b0b06ce_i = it - expr.begin();
				{
					_20b0b06ce_Range16* _19417_range = (&(_1919_ranges.__at(_20b0b06ce_i)));
					{
						if (_19128_r < (*(_19417_range))._field_lo) {
							return false;
						}
						if (_19128_r <= (*(_19417_range))._field_hi) {
							return ((*(_19417_range))._field_stride == 1LL) || (jule::mod(_19128_r - (*(_19417_range))._field_lo,(*(_19417_range))._field_stride) == 0LL);
						}
					}
				}
				_iter_next_5288658496:;
				++it;
				_20b0b06ce_i++;
				goto _iter_begin_5288658496;
			}
			_iter_end_5288658496:;
		}
		return false;
	}
	jule::Int _20813_lo = 0LL;
	jule::I64 _20913_hi = _1919_ranges.len();
	while (_20813_lo < _20913_hi) {
		{
			jule::Int _21113_m = _20813_lo + jule::unsafe_div(_20913_hi - _20813_lo,2LL);
			_20b0b06ce_Range16* _21213_range = (&(_1919_ranges[_21113_m]));
			{
				if (((*(_21213_range))._field_lo <= _19128_r) && (_19128_r <= (*(_21213_range))._field_hi)) {
					return ((*(_21213_range))._field_stride == 1LL) || (jule::mod(_19128_r - (*(_21213_range))._field_lo,(*(_21213_range))._field_stride) == 0LL);
				}
				if (_19128_r < (*(_21213_range))._field_lo) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::Int>(_21113_m + 1LL);
				}
			}
		}
	_iter_next_5288628176:;
	}
	_iter_end_5288628176:;
	return false;
}



inline jule::Bool _20b0b06ce_is32(jule::Slice<_20b0b06ce_Range32> _2289_ranges,jule::U32 _22828_r) {
	if (_2289_ranges.len() <= 18LL) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_5288677296:;
			if (it != expr.end()) {
				jule::Int _20b0b06ce_i = it - expr.begin();
				{
					_20b0b06ce_Range32* _23117_range = (&(_2289_ranges.__at(_20b0b06ce_i)));
					{
						if (_22828_r < (*(_23117_range))._field_lo) {
							return false;
						}
						if (_22828_r <= (*(_23117_range))._field_hi) {
							return ((*(_23117_range))._field_stride == 1LL) || (jule::mod(_22828_r - (*(_23117_range))._field_lo,(*(_23117_range))._field_stride) == 0LL);
						}
					}
				}
				_iter_next_5288677296:;
				++it;
				_20b0b06ce_i++;
				goto _iter_begin_5288677296;
			}
			_iter_end_5288677296:;
		}
		return false;
	}
	jule::Int _24513_lo = 0LL;
	jule::I64 _24613_hi = _2289_ranges.len();
	while (_24513_lo < _24613_hi) {
		{
			jule::Int _24813_m = _24513_lo + jule::unsafe_div(_24613_hi - _24513_lo,2LL);
			_20b0b06ce_Range32* _24913_range = (&(_2289_ranges[_24813_m]));
			{
				if (((*(_24913_range))._field_lo <= _22828_r) && (_22828_r <= (*(_24913_range))._field_hi)) {
					return ((*(_24913_range))._field_stride == 1LL) || (jule::mod(_22828_r - (*(_24913_range))._field_lo,(*(_24913_range))._field_stride) == 0LL);
				}
				if (_22828_r < (*(_24913_range))._field_lo) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::Int>(_24813_m + 1LL);
				}
			}
		}
	_iter_next_5288668848:;
	}
	_iter_end_5288668848:;
	return false;
}



inline jule::Bool _20b0b06ce_is_excluding_latin(jule::Ptr<_20b0b06ce_RangeTable> _27823_range_tab,jule::I32 _27847_r) {
	{
		jule::Slice<_20b0b06ce_Range16> &_28014_r16 = (*(_27823_range_tab))._field_r16;
		jule::Int _28213_off = (*(_27823_range_tab))._field_latin_offset;
		if ((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(_28014_r16[_28014_r16.len() - 1LL]._field_hi))) {
			return _20b0b06ce_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(static_cast<jule::U16>(_27847_r)));
		}
	}
	jule::Slice<_20b0b06ce_Range32> &_28710_r32 = (*(_27823_range_tab))._field_r32;
	if ((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(_28710_r32[0LL]._field_lo))) {
		return _20b0b06ce_is32(_28710_r32,static_cast<jule::U32>(static_cast<jule::U32>(_27847_r)));
	}
	return false;
}



inline jule::Slice<jule::U8> _20a407807_stobs(jule::Str& _1111_s) {
	return str_to_byte_slice(_1111_s);
}



inline jule::Str _20a405ddd_repeat(jule::Str _1315_s,jule::Int _1327_n) {
	if (_1327_n <= 0LL) {
		return jule::Str();
	}
	jule::Str _1813_ss = _1315_s;
	for (; _1327_n > 1LL; (_1327_n)--) {
		{
			_1813_ss+=_1315_s;
		}
	_iter_next_5288777072:;
	}
	_iter_end_5288777072:;
	return _1813_ss;
}



inline jule::Bool _20a405ddd__has_prefix(jule::Str& _2517_s,jule::Str& _2526_sub,jule::Int _2540_start) {
	if ((_2526_sub.len() == 0LL) || ((_2517_s.len() - _2540_start) < _2526_sub.len())) {
		return false;
	}
	jule::Int _3013_i = 0LL;
	for (; _3013_i < _2526_sub.len(); std::tie(_3013_i,_2540_start) = std::make_tuple(static_cast<jule::Int>(_3013_i + 1LL),static_cast<jule::Int>(_2540_start + 1LL))) {
		{
			if (_2517_s[_2540_start] != _2526_sub[_3013_i]) {
				return false;
			}
		}
	_iter_next_5288781184:;
	}
	_iter_end_5288781184:;
	return true;
}



inline jule::Bool _20a405ddd_has_prefix(jule::Str _4019_s,jule::Str _4027_sub) {
	return _20a405ddd__has_prefix(_4019_s,_4027_sub,0LL);
}



inline jule::Bool _20a405ddd__has_suffix(jule::Str& _4417_s,jule::Str& _4426_sub,jule::Int _4440_start) {
	if ((_4426_sub.len() == 0LL) || ((_4417_s.len() - _4440_start) < _4426_sub.len())) {
		return false;
	}
	_4440_start=static_cast<jule::I64>(_4417_s.len() - _4440_start);
	jule::Int _5013_i = 0LL;
	for (; _5013_i < _4426_sub.len(); (_5013_i)++) {
		{
			if (_4417_s[(_4440_start - _5013_i) - 1LL] != _4426_sub[(_4426_sub.len() - _5013_i) - 1LL]) {
				return false;
			}
		}
	_iter_next_5288786864:;
	}
	_iter_end_5288786864:;
	return true;
}



inline jule::Bool _20a405ddd_has_suffix(jule::Str _6019_s,jule::Str _6027_sub) {
	return _20a405ddd__has_suffix(_6019_s,_6027_sub,0LL);
}



inline jule::Int _20a405ddd_find_at(jule::Str _6816_s,jule::Str _6824_sub,jule::Int _6838_i) {
	if (((_6838_i < 0LL) || (_6816_s.len() < _6824_sub.len())) || (_6824_sub.len() == 0LL)) {
		return -1LL;
	}
	for (; _6838_i < _6816_s.len(); (_6838_i)++) {
		{
			if (_20a405ddd__has_prefix(_6816_s,_6824_sub,_6838_i)) {
				return _6838_i;
			}
		}
	_iter_next_5288798512:;
	}
	_iter_end_5288798512:;
	return -1LL;
}



inline jule::Int _20a405ddd_find_last_at(jule::Str _9121_s,jule::Str _9129_sub,jule::Int _9139_i) {
	jule::Int _9213_j = (_9139_i - _9129_sub.len()) + 1LL;
	if ((((_9129_sub.len() == 0LL) || (_9139_i < 0LL)) || (_9139_i >= _9121_s.len())) || (_9213_j < 0LL)) {
		return -1LL;
	}
	_julec_label_loop:;
	for (; _9213_j >= 0LL; (_9213_j)--) {
		{
			jule::Int _9817_k = _9213_j;
			jule::Int _9917_z = 0LL;
			for (; _9917_z < _9129_sub.len(); std::tie(_9817_k,_9917_z) = std::make_tuple(static_cast<jule::Int>(_9817_k + 1LL),static_cast<jule::Int>(_9917_z + 1LL))) {
				{
					if (_9121_s[_9817_k] != _9129_sub[_9917_z]) {
						goto _iter_next_5288807232;
					}
				}
			_iter_next_5288810400:;
			}
			_iter_end_5288810400:;
			return _9213_j;
		}
	_iter_next_5288807232:;
	}
	_iter_end_5288807232:;
	return -1LL;
}



inline jule::Int _20a405ddd_find_last(jule::Str _11318_s,jule::Str _11326_sub) {
	return static_cast<jule::Int>(_20a405ddd_find_last_at(_11318_s,_11326_sub,static_cast<jule::I64>(_11318_s.len() - 1LL)));
}



inline jule::Int _20a405ddd__find_rune(jule::Slice<jule::U8>& _11716_s,jule::I32 _11727_r) {
	jule::Int _11813_i = 0LL;
	while (_11813_i < _11716_s.len()) {
		{
			jule::I32 _12014_br;
			jule::Int _12018_n;
			std::tie(_12014_br,_12018_n) = _20a3472e6_decode_rune(_11716_s.slice(_11813_i));
			if (_11727_r == _12014_br) {
				return _11813_i;
			}
			_11813_i+=_12018_n;
		}
	_iter_next_5288818576:;
	}
	_iter_end_5288818576:;
	return -1LL;
}



inline jule::Int _20a405ddd_find_byte(jule::Str _13218_s,jule::U8 _13226_b) {
	{
		auto &expr = _13218_s;
		auto it = expr.begin();
		_iter_begin_5288823216:;
		if (it != expr.end()) {
			jule::Int _20a405ddd_i = it - expr.begin();
			jule::U8 &_20a405ddd_sb = *it;
			{
				if (_20a405ddd_sb == _13226_b) {
					return _20a405ddd_i;
				}
			}
			_iter_next_5288823216:;
			++it;
			_20a405ddd_i++;
			goto _iter_begin_5288823216;
		}
		_iter_end_5288823216:;
	}
	return -1LL;
}



inline jule::Int _20a405ddd_find_last_byte(jule::Str _14423_s,jule::U8 _14431_b) {
	jule::I64 _14513_i = _14423_s.len() - 1LL;
	for (; _14513_i >= 0LL; (_14513_i)--) {
		{
			if (_14423_s[_14513_i] == _14431_b) {
				return _14513_i;
			}
		}
	_iter_next_5288824928:;
	}
	_iter_end_5288824928:;
	return -1LL;
}



inline jule::Slice<jule::Str> _20a405ddd_split(jule::Str _18514_s,jule::Str _18522_sub,jule::Int _18536_n) {
	jule::Slice<jule::Str> _18613_parts = jule::Slice<jule::Str>::alloc(0LL,static_cast<jule::Int>((((_18536_n < 0LL)) ? (10LL) : (_18536_n))));
	if (_18536_n == 0LL) {
		return _18613_parts;
	}
	if (_18536_n < 0LL) {
		_18536_n=static_cast<jule::I64>(_18514_s.len());
	}
	jule::Int _19313_i = 0LL;
	for (; _18536_n > 0LL; (_18536_n)--) {
		{
			jule::Int _19513_j = _20a405ddd_find_at(_18514_s,_18522_sub,_19313_i);
			if (_19513_j == -1LL) {
				goto _iter_end_5288842864;
			}
			_18613_parts.push(_18514_s.slice(_19313_i,_19513_j));
			_19313_i=static_cast<jule::Int>(_19513_j + _18522_sub.len());
		}
	_iter_next_5288842864:;
	}
	_iter_end_5288842864:;
	if ((_18536_n > 0LL) && (_19313_i < _18514_s.len())) {
		_18613_parts.push(_18514_s.slice(_19313_i));
	}
	return _18613_parts;
}



inline jule::Bool _20a405ddd_contains(jule::Str _20917_s,jule::Str _20925_sub) {
	return _20a405ddd_find_at(_20917_s,_20925_sub,0LL) != -1LL;
}



inline jule::Str _20a405ddd_replace(jule::Str _24616_s,jule::Str _24624_sub,jule::Str _24634_new,jule::Int _24648_n) {
	if ((_24648_n == 0LL) || (_24624_sub == _24634_new)) {
		return _24616_s;
	}
	if (_24648_n < 0LL) {
		_24648_n=static_cast<jule::I64>(_24616_s.len());
	}
	jule::Str _25513_ss = jule::Str();
	jule::Int _25613_i = 0LL;
	for (; _24648_n > 0LL; (_24648_n)--) {
		{
			jule::Int _25813_j = _20a405ddd_find_at(_24616_s,_24624_sub,_25613_i);
			if (_25813_j == -1LL) {
				goto _iter_end_5288870176;
			}
			_25513_ss+=_24616_s.slice(_25613_i,_25813_j);
			_25513_ss+=_24634_new;
			_25613_i=static_cast<jule::Int>(_25813_j + _24624_sub.len());
		}
	_iter_next_5288870176:;
	}
	_iter_end_5288870176:;
	_25513_ss+=_24616_s.slice(_25613_i);
	return _25513_ss;
}



inline void _20a405ddd__trim_left(jule::Slice<jule::U8>& _29420_s,jule::Slice<jule::U8>& _29432_cutset) {
	jule::Int _29513_i = 0LL;
	while (_29513_i < _29420_s.len()) {
		{
			jule::I32 _29714_r;
			jule::Int _29717_n;
			std::tie(_29714_r,_29717_n) = _20a3472e6_decode_rune(_29420_s.slice(_29513_i));
			if (_20a405ddd__find_rune(_29432_cutset,_29714_r) == -1LL) {
				_29420_s=_29420_s.slice(_29513_i);
				goto _iter_end_5288883824;
			}
			_29513_i+=_29717_n;
		}
	_iter_next_5288883824:;
	}
	_iter_end_5288883824:;
}



inline jule::Str _20a405ddd_trim_left(jule::Str _30818_s,jule::Str _30826_cutset) {
	jule::Slice<jule::U8> _30913_bytes = _20a407807_stobs(_30818_s);
	jule::Slice<jule::U8> _3109_bcutset = _20a407807_stobs(_30826_cutset);
	_20a405ddd__trim_left(_30913_bytes,_3109_bcutset);
	return static_cast<jule::Str>(_30913_bytes);
}



inline void _20a405ddd__trim_right(jule::Slice<jule::U8>& _31521_s,jule::Slice<jule::U8>& _31533_cutset) {
	jule::I64 _31613_i = _31521_s.len();
	while (_31613_i > 0LL) {
		{
			jule::I32 _31814_r;
			jule::Int _31817_n;
			std::tie(_31814_r,_31817_n) = _20a3472e6_decode_last_rune(_31521_s.slice(0LL,_31613_i));
			if (_20a405ddd__find_rune(_31533_cutset,_31814_r) == -1LL) {
				_31521_s=_31521_s.slice(0LL,_31613_i);
				return;
			}
			_31613_i-=_31817_n;
		}
	_iter_next_5288893152:;
	}
	_iter_end_5288893152:;
}



inline jule::Str _20a405ddd_trim(jule::Str _33813_s,jule::Str _33821_cutset) {
	jule::Slice<jule::U8> _33913_bytes = _20a407807_stobs(_33813_s);
	jule::Slice<jule::U8> _3409_bcutset = _20a407807_stobs(_33821_cutset);
	_20a405ddd__trim_left(_33913_bytes,_3409_bcutset);
	_20a405ddd__trim_right(_33913_bytes,_3409_bcutset);
	return static_cast<jule::Str>(_33913_bytes);
}



inline jule::Bool _20a38a4d2_is_path_sep(jule::U8 _4820_c) {
	return (_4820_c == 92LL) || (_4820_c == '/');
}



inline jule::Bool _20a38a4d2_is_slash(jule::U8 _5213_c) {
	return (_5213_c == '\\') || (_5213_c == '/');
}



inline jule::U8 _20a38a4d2_to_upper(jule::U8 _5413_c) {
	if (('a' <= _5413_c) && (_5413_c <= 'z')) {
		return static_cast<jule::U8>(_5413_c - 32LL);
	}
	return _5413_c;
}



inline jule::Int _20a38a4d2_volume_name_len(jule::Str _8220_path) {
	if (_8220_path.len() < 2LL) {
		return 0LL;
	}
	jule::U8 _879_c = _8220_path[0LL];
	if ((_8220_path[1LL] == ':') && ((('a' <= _879_c) && (_879_c <= 'z')) || (('A' <= _879_c) && (_879_c <= 'Z')))) {
		return 2LL;
	}
	if ((!(_20a38a4d2_is_slash(_8220_path[0LL]))) || (!(_20a38a4d2_is_slash(_8220_path[1LL])))) {
		return 0LL;
	}
	jule::Str _9510_p1;
	jule::Str _9518_rest;
	std::tie(_9510_p1,_9518_rest,std::ignore) = _20a38a4d2_cut_path(_8220_path.slice(2LL));
	jule::Str _9613_p2 = jule::Str();
	jule::Bool _9713_ok = false;
	std::tie(_9613_p2,_9518_rest,_9713_ok) = _20a38a4d2_cut_path(_9518_rest);
	if ((!(_9713_ok))) {
		return static_cast<jule::I64>(_8220_path.len());
	}
	if ((_9510_p1 != jule::Str(".", 1)) && (_9510_p1 != jule::Str("?", 1))) {
		return static_cast<jule::I64>((_8220_path.len() - _9518_rest.len()) - 1LL);
	}
	if ((((_9613_p2.len() == 3LL) && (_20a38a4d2_to_upper(_9613_p2[0LL]) == 'U')) && (_20a38a4d2_to_upper(_9613_p2[1LL]) == 'N')) && (_20a38a4d2_to_upper(_9613_p2[2LL]) == 'C')) {
		std::tie(std::ignore,_9518_rest,std::ignore) = _20a38a4d2_cut_path(_9518_rest);
		std::tie(std::ignore,_9518_rest,_9713_ok) = _20a38a4d2_cut_path(_9518_rest);
		if ((!(_9713_ok))) {
			return static_cast<jule::I64>(_8220_path.len());
		}
	}
	return static_cast<jule::I64>((_8220_path.len() - _9518_rest.len()) - 1LL);
}



inline std::tuple<jule::Str,jule::Str,jule::Bool> _20a38a4d2_cut_path(jule::Str _11913_path) {
	jule::Str _11926_before = jule::Str();
	jule::Str _11939_after = jule::Str();
	jule::Bool _11951_found = jule::Bool();
	{
		auto &expr = _11913_path;
		auto it = expr.begin();
		_iter_begin_5288969920:;
		if (it != expr.end()) {
			jule::Int _20a38a4d2_i = it - expr.begin();
			{
				if (_20a38a4d2_is_slash(_11913_path.__at(_20a38a4d2_i))) {
					_11926_before = _11913_path.slice(0LL,_20a38a4d2_i);
					_11939_after = _11913_path.slice(_20a38a4d2_i + 1LL);
					_11951_found = true;
					return std::make_tuple(_11926_before,_11939_after,_11951_found);
				}
			}
			_iter_next_5288969920:;
			++it;
			_20a38a4d2_i++;
			goto _iter_begin_5288969920;
		}
		_iter_end_5288969920:;
	}
	_11926_before = _11913_path;
	_11939_after = jule::Str();
	_11951_found = false;
	return std::make_tuple(_11926_before,_11939_after,_11951_found);
}



inline std::tuple<jule::Str,jule::Bool> _20a38a4d2_full_path(jule::Str _12814_name) {
	jule::Str _12827_path = jule::Str();
	jule::Bool _12838_ok = jule::Bool();
	jule::Slice<jule::U16> _1299_utf16_name = _20a294111_utf16_from_str(_12814_name);
	jule::U16* _1309_p = (&(_1299_utf16_name[0LL]));
	jule::U32 _13113_n = 100LLU;
	for (;;) {
		{
			jule::Slice<jule::U16> _13317_buff = jule::Slice<jule::U16>::alloc(static_cast<jule::Int>(_13113_n));
			_13113_n=static_cast<jule::U32>(static_cast<jule::U32>(_20a23834c_get_full_path_name(_1309_p,static_cast<jule::U32>(static_cast<jule::U32>(_13317_buff.len())),(&(_13317_buff[0LL])),nullptr)));
			if (_13113_n == 0LL) {
				_12827_path = jule::Str();
				_12838_ok = false;
				return std::make_tuple(_12827_path,_12838_ok);
			}
			if (_13113_n <= static_cast<jule::U32>(_13317_buff.len())) {
				_12827_path = _20a294111_utf16_to_str(_13317_buff.slice(0LL,static_cast<jule::Int>(_13113_n)));
				_12838_ok = true;
				return std::make_tuple(_12827_path,_12838_ok);
			}
		}
	_iter_next_5288976592:;
	}
	_iter_end_5288976592:;
	_12827_path = jule::Str();
	_12838_ok = false;
	return std::make_tuple(_12827_path,_12838_ok);
}



inline std::tuple<jule::Str,jule::Bool> _20a38a4d2___abs(jule::Str _14514_path) {
	jule::Bool _14532_ok = jule::Bool();
	if (_14514_path == jule::Str()) {
		_14514_path=jule::Str(".", 1);
	}
	std::tie(_14514_path,_14532_ok) = _20a38a4d2_full_path(_14514_path);
	if ((!(_14532_ok))) {
		_14532_ok = false;
		return std::make_tuple(jule::Str(),_14532_ok);
	}
	_14532_ok = true;
	return std::make_tuple(_20a3911b9_clean(_14514_path),_14532_ok);
}



inline jule::Str _20a38a4d2___join(jule::Slice<jule::Str> _15915_elem) {
	jule::Str _16013_s = jule::Str();
	jule::U8 _16113_last_char = 0LLU;
	{
		auto &expr = _15915_elem;
		auto it = expr.begin();
		_iter_begin_5288997824:;
		if (it != expr.end()) {
			jule::Str _20a38a4d2_e = *it;
			{
				{
					
					if (_16013_s.len() == 0LL) {
						_case_begin_5289000400:;
					}
					else if (_20a38a4d2_is_slash(_16113_last_char)) {
						_case_begin_5289000704:;
						{
							while ((_20a38a4d2_e.len() > 0LL) && _20a38a4d2_is_slash(_20a38a4d2_e[0LL])) {
								{
									_20a38a4d2_e=_20a38a4d2_e.slice(1LL);
								}
							_iter_next_5289000176:;
							}
							_iter_end_5289000176:;
						}
					}
					else if (_16113_last_char == ':') {
						_case_begin_5288999904:;
					}
					else {
						_case_begin_5288999600:;
						{
							_16013_s+=jule::Str("\\", 1);
							_16113_last_char='\\';
						}
					}
					_match_end_5288999424:;
				}
				if (_20a38a4d2_e.len() > 0LL) {
					_16013_s+=_20a38a4d2_e;
					_16113_last_char=_20a38a4d2_e[_20a38a4d2_e.len() - 1LL];
				}
			}
			_iter_next_5288997824:;
			++it;
			goto _iter_begin_5288997824;
		}
		_iter_end_5288997824:;
	}
	if (_16013_s.len() == 0LL) {
		return jule::Str();
	}
	return _20a3911b9_clean(_16013_s);
}



inline jule::Str _20a3911b9_clean(jule::Str _10818_path) {
	jule::Str _1099_original_path = _10818_path;
	jule::Int _1109_vol_len = _20a38a4d2_volume_name_len(_10818_path);
	_10818_path=_10818_path.slice(_1109_vol_len);
	if (_10818_path == jule::Str()) {
		if (((_1109_vol_len > 1LL) && _20a38a4d2_is_path_sep(_1099_original_path[0LL])) && _20a38a4d2_is_path_sep(_1099_original_path[1LL])) {
			return _20a3911b9_from_slash(_1099_original_path);
		}
		return _1099_original_path + jule::Str(".", 1);
	}
	jule::Bool _1199_rooted = _20a38a4d2_is_path_sep(_10818_path[0LL]);
	jule::I64 _1269_n = _10818_path.len();
	_20a3911b9_LazyBuff _12713_out = _20a3911b9_LazyBuff(_10818_path,jule::Slice<jule::U8>(),jule::Int(),_1099_original_path,_1109_vol_len);
	jule::Int _13214_r = 0LL;
	jule::Int _13221_dotdot = 0LL;
	std::tie(_13214_r,_13221_dotdot) = std::make_tuple(0LL,0LL);
	if (_1199_rooted) {
		_12713_out._method_append(92LLU);
		std::tie(_13214_r,_13221_dotdot) = std::make_tuple(1LL,1LL);
	}
	while (_13214_r < _1269_n) {
		{
			{
				
				if (_20a38a4d2_is_path_sep(_10818_path[_13214_r])) {
					_case_begin_5289054464:;
					{
						(_13214_r)++;
					}
				}
				else if ((_10818_path[_13214_r] == '.') && (((_13214_r + 1LL) == _1269_n) || _20a38a4d2_is_path_sep(_10818_path[_13214_r + 1LL]))) {
					_case_begin_5289053424:;
					{
						(_13214_r)++;
					}
				}
				else if (((_10818_path[_13214_r] == '.') && (_10818_path[_13214_r + 1LL] == '.')) && (((_13214_r + 2LL) == _1269_n) || _20a38a4d2_is_path_sep(_10818_path[_13214_r + 2LL]))) {
					_case_begin_5289055424:;
					{
						_13214_r+=2LL;
						{
							
							if (_12713_out._field_w > _13221_dotdot) {
								_case_begin_5289062944:;
								{
									(_12713_out._field_w)--;
									while ((_12713_out._field_w > _13221_dotdot) && (!(_20a38a4d2_is_path_sep(static_cast<jule::U8>(_12713_out._method_index(_12713_out._field_w)))))) {
										{
											(_12713_out._field_w)--;
										}
									_iter_next_5289063504:;
									}
									_iter_end_5289063504:;
								}
							}
							else if ((!(_1199_rooted))) {
								_case_begin_5289063040:;
								{
									if (_12713_out._field_w > 0LL) {
										_12713_out._method_append(92LLU);
									}
									_12713_out._method_append('.');
									_12713_out._method_append('.');
									_13221_dotdot=_12713_out._field_w;
								}
							}
							_match_end_5289043248:;
						}
					}
				}
				else {
					_case_begin_5289042944:;
					{
						if ((_1199_rooted && (_12713_out._field_w != 1LL)) || ((!(_1199_rooted)) && (_12713_out._field_w != 0LL))) {
							_12713_out._method_append(92LLU);
						}
						if (((true && (_12713_out._field_w == 0LL)) && (_12713_out._field_vol_len == 0LL)) && (_13214_r != 0LL)) {
							jule::Int _17525_i = _13214_r;
							for (; (_17525_i < _1269_n) && (!(_20a38a4d2_is_path_sep(_10818_path[_17525_i]))); (_17525_i)++) {
								{
									if (_10818_path[_17525_i] == ':') {
										_12713_out._method_append('.');
										_12713_out._method_append(92LLU);
										goto _iter_end_5289046304;
									}
								}
							_iter_next_5289046304:;
							}
							_iter_end_5289046304:;
						}
						for (; (_13214_r < _1269_n) && (!(_20a38a4d2_is_path_sep(_10818_path[_13214_r]))); (_13214_r)++) {
							{
								_12713_out._method_append(_10818_path[_13214_r]);
							}
						_iter_next_5289051760:;
						}
						_iter_end_5289051760:;
					}
				}
				_match_end_5289042768:;
			}
		}
	_iter_next_5289039680:;
	}
	_iter_end_5289039680:;
	if (_12713_out._field_w == 0LL) {
		_12713_out._method_append('.');
	}
	return _20a3911b9_from_slash(_12713_out._method_string());
}



inline jule::Str _20a3911b9_from_slash(jule::Str _21119_path) {
	
	return _20a405ddd_replace(_21119_path,jule::Str("/", 1),static_cast<jule::Str>(92LL),-1LL);
}



inline jule::Str _20a3911b9_join(jule::Slice<jule::Str> _22513_elem) {
	return _20a38a4d2___join(_22513_elem);
}



inline jule::Str _20a3911b9_ext(jule::Str _23012_path) {
	jule::I64 _23113_i = _23012_path.len() - 1LL;
	for (; (_23113_i >= 0LL) && (!(_20a38a4d2_is_path_sep(_23012_path[_23113_i]))); (_23113_i)--) {
		{
			if (_23012_path[_23113_i] == '.') {
				return _23012_path.slice(_23113_i);
			}
		}
	_iter_next_5289079296:;
	}
	_iter_end_5289079296:;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _20a3911b9_abs(jule::Str _24512_path) {
	jule::Str _24610_abs_path;
	jule::Bool _24620_ok;
	std::tie(_24610_abs_path,_24620_ok) = _20a38a4d2___abs(_24512_path);
	return std::make_tuple(_24610_abs_path,_24620_ok);
}



inline jule::Str _20a3911b9_base(jule::Str _25417_path) {
	if (_25417_path == jule::Str()) {
		return jule::Str(".", 1);
	}
	while ((_25417_path.len() > 0LL) && _20a38a4d2_is_path_sep(_25417_path[_25417_path.len() - 1LL])) {
		{
			_25417_path=_25417_path.slice(0LL,_25417_path.len() - 1LL);
		}
	_iter_next_5289086768:;
	}
	_iter_end_5289086768:;
	_25417_path=_25417_path.slice(_20a3911b9_volume_name(_25417_path).len());
	jule::I64 _26513_i = _25417_path.len() - 1LL;
	while ((_26513_i >= 0LL) && (!(_20a38a4d2_is_path_sep(_25417_path[_26513_i])))) {
		{
			(_26513_i)--;
		}
	_iter_next_5289088320:;
	}
	_iter_end_5289088320:;
	if (_26513_i >= 0LL) {
		_25417_path=_25417_path.slice(_26513_i + 1LL);
	}
	if (_25417_path == jule::Str()) {
		return static_cast<jule::Str>(92LL);
	}
	return _25417_path;
}



inline jule::Str _20a3911b9_dir(jule::Str _28512_path) {
	jule::Str _2869_vol = _20a3911b9_volume_name(_28512_path);
	jule::I64 _28713_i = _28512_path.len() - 1LL;
	while ((_28713_i >= _2869_vol.len()) && (!(_20a38a4d2_is_path_sep(_28512_path[_28713_i])))) {
		{
			(_28713_i)--;
		}
	_iter_next_5289095632:;
	}
	_iter_end_5289095632:;
	jule::Str _2919_dir = _20a3911b9_clean(_28512_path.slice(_2869_vol.len(),_28713_i + 1LL));
	if ((_2919_dir == jule::Str(".", 1)) && (_2869_vol.len() > 2LL)) {
		return _2869_vol;
	}
	return _2869_vol + _2919_dir;
}



inline jule::Str _20a3911b9_volume_name(jule::Str _30320_path) {
	return _20a3911b9_from_slash(_30320_path.slice(0LL,_20a38a4d2_volume_name_len(_30320_path)));
}



inline jule::Int _20a213bc9_get_last_fs_error(void) {
	jule::Int _729_err = _20a21b055_get_last_errno();
	{
		auto &_match_expr{ _729_err };
		
		if (_match_expr == 13LL) {
			_case_begin_5289145808:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_5289145904:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_5289145440:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_5289145536:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5289145632:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_5289146032:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 132LL) {
			_case_begin_5289146128:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_5289146224:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_5289144944:;
			{
				return 8LLU;
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_5289145040:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_5289145136:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_5289145232:;
			{
				return 11LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_5289146912:;
			{
				return 12LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_5289147008:;
			{
				return 13LLU;
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_5289147104:;
			{
				return 14LLU;
			}
		}
		else if (_match_expr == 124LL) {
			_case_begin_5289147216:;
			{
				return 15LLU;
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_5289147328:;
			{
				return 16LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_5289147440:;
			{
				return 17LLU;
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_5289147552:;
			{
				return 18LLU;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_5289147664:;
			{
				return 19LLU;
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_5289147776:;
			{
				return 20LLU;
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_5289147888:;
			{
				return 21LLU;
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_5289148000:;
			{
				return 22LLU;
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_5289148112:;
			{
				return 23LLU;
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_5289148224:;
			{
				return 24LLU;
			}
		}
		else if (_match_expr == 119LL) {
			_case_begin_5289148336:;
			{
				return 25LLU;
			}
		}
		else if (_match_expr == 104LL) {
			_case_begin_5289148448:;
			{
				return 26LLU;
			}
		}
		else if (_match_expr == 41LL) {
			_case_begin_5289148560:;
			{
				return 27LLU;
			}
		}
		else {
			_case_begin_5289143584:;
			{
				return 1LLU;
			}
		}
		_match_end_5289144368:;
	}
}



inline jule::Bool _20a314cdb_is_console_handle(jule::Uintptr _11822_handle) {
	return ((_11822_handle == _20a23834c_STDIN) || (_11822_handle == _20a23834c_STDOUT)) || (_11822_handle == _20a23834c_STDERR);
}



inline jule::Int _20ba266b6_get_last_process_error(void) {
	jule::Int _419_err = _20a21b055_get_last_errno();
	{
		auto &_match_expr{ _419_err };
		
		if (_match_expr == 13LL) {
			_case_begin_5289311792:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_5289311504:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_5289311600:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5289310912:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_5289311008:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_5289311104:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_5289310416:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_5289310512:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_5289310608:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 121LL) {
			_case_begin_5289310704:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_5289311936:;
			{
				return 11LLU;
			}
		}
		else {
			_case_begin_5289308992:;
			{
				return 0LLU;
			}
		}
		_match_end_5289309840:;
	}
}



inline void _20ba48320_exit(jule::Int _1213_code) {
	_20a254c81_exit(_1213_code);
}



inline jule::Str _20ba48320_executable(void) {
	return jule::executable();
}



inline jule::Bool _20a25878a_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[_2627_p.len() - 1LL] == '>');
}



inline jule::Bool _20a25878a_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _20a25878a_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_5289490400:;
		if (it != expr.end()) {
			jule::Str &_20a25878a_valid_ext = *it;
			{
				if (_3128_ext == _20a25878a_valid_ext) {
					return true;
				}
			}
			_iter_next_5289490400:;
			++it;
			goto _iter_begin_5289490400;
		}
		_iter_end_5289490400:;
	}
	return false;
}



inline jule::Bool _20a25878a_is_valid_cpp_ext(jule::Str _4225_ext) {
	if (_4225_ext == jule::Str(".c", 2)) {
		return true;
	}
	{
		auto &expr = _20a25878a_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_5289494688:;
		if (it != expr.end()) {
			jule::Str &_20a25878a_e = *it;
			{
				if (_4225_ext == _20a25878a_e) {
					return true;
				}
			}
			_iter_next_5289494688:;
			++it;
			goto _iter_begin_5289494688;
		}
		_iter_end_5289494688:;
	}
	{
		auto &expr = _20a25878a_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_5289499872:;
		if (it != expr.end()) {
			jule::Str &_20a25878a_e = *it;
			{
				if (_4225_ext == _20a25878a_e) {
					return true;
				}
			}
			_iter_next_5289499872:;
			++it;
			goto _iter_begin_5289499872;
		}
		_iter_end_5289499872:;
	}
	return false;
}



inline jule::Str _20a25b99c_logf(jule::Str _28913_fmt,jule::Slice<jule::Any> _28926_args) {
	return _20a25b99c_apply_fmt(_28913_fmt,_28926_args);
}



inline jule::Str _20a25b99c_arg_to_str(jule::Any _29315_arg) {
	{
		auto &_match_expr{ _29315_arg };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_5289504032:;
			{
				return _29315_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_5289503776:;
			{
				return static_cast<jule::Str>(_29315_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_5289503872:;
			{
				return static_cast<jule::Str>(_29315_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_5289501920:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_5289500480:;
	}
}



inline jule::Int _20a25b99c_find_next_fmt(jule::Str _30218_fmt) {
	{
		auto &expr = _30218_fmt;
		auto it = expr.begin();
		_iter_begin_5289506656:;
		if (it != expr.end()) {
			jule::Int _20a25b99c_i = it - expr.begin();
			jule::U8 &_20a25b99c_b = *it;
			{
				if (_20a25b99c_b == '@') {
					return _20a25b99c_i;
				}
			}
			_iter_next_5289506656:;
			++it;
			_20a25b99c_i++;
			goto _iter_begin_5289506656;
		}
		_iter_end_5289506656:;
	}
	return -1LL;
}



inline jule::Str _20a25b99c_apply_fmt(jule::Str _31118_fmt,jule::Slice<jule::Any> _31128_args) {
	jule::Str _31213_s = jule::Str();
	{
		auto &expr = _31128_args;
		auto it = expr.begin();
		_iter_begin_5289512000:;
		if (it != expr.end()) {
			jule::Any &_20a25b99c_arg = *it;
			{
				jule::Int _31513_i = _20a25b99c_find_next_fmt(_31118_fmt);
				if (_31513_i == -1LL) {
					goto _iter_end_5289512000;
				}
				_31213_s+=_31118_fmt.slice(0LL,_31513_i);
				_31213_s+=_20a25b99c_arg_to_str(_20a25b99c_arg);
				_31118_fmt=_31118_fmt.slice(_31513_i + 1LL);
			}
			_iter_next_5289512000:;
			++it;
			goto _iter_begin_5289512000;
		}
		_iter_end_5289512000:;
	}
	_31213_s+=_31118_fmt;
	return _31213_s;
}



inline jule::Bool _20a24c98d_is_top_directive(jule::Str _2825_directive) {
	return (_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5));
}



inline jule::Bool _20a314307_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _20a314307_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _20a314307_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _20a314307_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _20a314307_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _20a314307_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _20a314307_is_unix(jule::Str _6316_os) {
	return _20a314307_is_darwin(_6316_os) || _20a314307_is_linux(_6316_os);
}



inline jule::Bool _20a314307_is_32bit(jule::Str _6517_arch) {
	return _20a314307_is_i386(_6517_arch);
}



inline jule::Bool _20a314307_is_64bit(jule::Str _6717_arch) {
	return _20a314307_is_amd64(_6717_arch) || _20a314307_is_arm64(_6717_arch);
}



inline void _20ba03198_exit_err(jule::Str _1613_msg) {
	
	jule::outln(_1613_msg);
	_20ba48320_exit(1LL);
}



inline void _20ba03198_init(void) {
	jule::Str _2413_path = _20ba48320_executable();
	if (_2413_path == jule::Str()) {
		_20ba03198_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _299_pwd = ({
		auto except = _20a225bec_working_dir();
		(except.ok()) ? (except.result) : ({{
			_20ba03198_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
			return;
			return;
		} jule::Str();});
	});
	jule::Str _349_path_exec = _20a3911b9_dir(_2413_path);
	_2413_path=_20a3911b9_join(jule::Slice<jule::Str>({_349_path_exec,jule::Str("..", 2)}));
	{
		_20ba03198_PATH_WD=_299_pwd;
		_20ba03198_PATH_EXEC=_349_path_exec;
		_20ba03198_PATH_STDLIB=_20a3911b9_join(jule::Slice<jule::Str>({_2413_path,jule::Str("std", 3)}));
		_20ba03198_PATH_API=_20a3911b9_join(jule::Slice<jule::Str>({_20ba03198_PATH_EXEC,jule::Str("..", 2)}));
		_20ba03198_PATH_API=_20a3911b9_join(jule::Slice<jule::Str>({_20ba03198_PATH_API,jule::Str("api", 3)}));
		_20ba03198_PATH_API=_20a3911b9_join(jule::Slice<jule::Str>({_20ba03198_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Int _20c305aee_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _20c305aee_len64(_6124_x));
}



inline jule::Int _20c305aee_trailing_zeros(jule::Uint _8323_x) {
	
	return static_cast<jule::Int>(_20c305aee_trailing_zeros64(static_cast<jule::U64>(static_cast<jule::U64>(_8323_x))));
}



inline jule::Int _20c305aee_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(static_cast<jule::Int>(_20c305aee_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]));
}



inline jule::Int _20c305aee_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(static_cast<jule::Int>(_20c305aee_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]));
}



inline jule::Int _20c305aee_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LLU) {
		_35218_x>>=16LL;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LLU) {
		_35218_x>>=8LL;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::Int>(_35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]));
	return _35228_n;
}



inline jule::Int _20c305aee_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LLU) {
		_36618_x>>=32LL;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LLU) {
		_36618_x>>=16LL;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LLU) {
		_36618_x>>=8LL;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::Int>(_36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _20c305aee_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>((_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>(((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL);
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _20c305aee_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LLU;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LLU;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LLU;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _20bd40e75_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _20bd40e75_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _20bd40e75_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _20bd40e75_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline jule::F64 _20bda4d41_nan(void) {
	return static_cast<jule::F64>(_20bd40e75_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _20bda4d41_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _20bda4d41_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_20bd40e75_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_20bd40e75_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _20bda4d41_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline jule::F64 _20be838d1_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_20bd40e75_f64_from_bits(static_cast<jule::U64>(_20bd40e75_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline std::tuple<jule::F64,jule::F64> _20becedc2_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	
	jule::F64 _469_abs_f = _20be838d1_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if (_469_abs_f > 4503599627370496LL) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>(_469_abs_f + 4503599627370496LL);
		_4713_i-=4503599627370496LL;
		while (_4713_i > _469_abs_f) {
			{
				(_4713_i)--;
			}
		_iter_next_5290790048:;
		}
		_iter_end_5290790048:;
		if (_4413_f < 0LL) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::Str _20b639c14_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_20b639c14_generic_ftoa(nullptr,_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _20b639c14_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	_20b639c14_FloatInfo* _8413_flt = nullptr;
	{
		auto &_match_expr{ _8270_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_5292261552:;
			{
				_8313_bits=static_cast<jule::U64>(static_cast<jule::U64>(_20bd40e75_f32_bits(static_cast<jule::F32>(static_cast<jule::F32>(_8234_val)))));
				_8413_flt=(&(_20b639c14_F32_INFO));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5292261904:;
			{
				_8313_bits=static_cast<jule::U64>(_20bd40e75_f64_bits(_8234_val));
				_8413_flt=(&(_20b639c14_F64_INFO));
			}
		}
		else {
			_case_begin_5292260176:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_5292260096:;
	}
	jule::Bool _969_neg = (_8313_bits >> ((*(_8413_flt))._field_expbits + (*(_8413_flt))._field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> (*(_8413_flt))._field_mantbits) & static_cast<jule::Int>((1LL << (*(_8413_flt))._field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits) - 1LL);
	{
		auto &_match_expr{ _9713_exp };
		
		if (_match_expr == static_cast<jule::Int>((1LL << (*(_8413_flt))._field_expbits) - 1LL)) {
			_case_begin_5292273344:;
			{
				jule::Str _10317_s = jule::Str();
				{
					
					if (_9813_mant != 0LL) {
						_case_begin_5292278976:;
						{
							_10317_s=jule::Str("nan", 3);
						}
					}
					else if (_969_neg) {
						_case_begin_5292278352:;
						{
							_10317_s=jule::Str("-inf", 4);
						}
					}
					else {
						_case_begin_5292277552:;
						{
							_10317_s=jule::Str("+inf", 4);
						}
					}
					_match_end_5292277440:;
				}
				return jule::append(_8221_dst,static_cast<jule::Slice<jule::U8>>(_10317_s));
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_5292272320:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_5292260720:;
			{
				_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits);
			}
		}
		_match_end_5292272208:;
	}
	_9713_exp+=(*(_8413_flt))._field_bias;
	if (_8244_fmt == 'b') {
		return _20b639c14_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _20b639c14_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	
	_20b639c14_DecimalSlice _13413_digs = _20b639c14_DecimalSlice();
	jule::Bool _13513_ok = false;
	jule::Bool _1379_shortest = _8259_prec < 0LL;
	if (_1379_shortest) {
		_13413_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_20bc275ba_ryu_ftoa_shortest(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits))),(*(_8413_flt)));
		_13513_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5292292896:;
				{
					_8259_prec=static_cast<jule::Int>(_20b639c14_max(static_cast<jule::Int>(_13413_digs._field_nd - 1LL),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_5292292992:;
				{
					_8259_prec=static_cast<jule::Int>(_20b639c14_max(static_cast<jule::Int>(_13413_digs._field_nd - _13413_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5292293552:;
				{
					_8259_prec=_13413_digs._field_nd;
				}
			}
			_match_end_5292293456:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15417_digits = _8259_prec;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5292300464:;
				{
					(_15417_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5292300800:;
				{
					if (_8259_prec == 0LL) {
						_8259_prec=1LL;
					}
					_15417_digits=_8259_prec;
				}
			}
			else {
				_case_begin_5292272528:;
				{
					_15417_digits=1LL;
				}
			}
			_match_end_5292299712:;
		}
		if ((_8270_bit_size == 32LL) && (_15417_digits <= 9LL)) {
			_13413_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_20bc275ba_ryu_ftoa_fixed32(_13413_digs,static_cast<jule::U32>(static_cast<jule::U32>(_9813_mant)),static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits))),_15417_digits);
			_13513_ok=true;
		} else if (_15417_digits <= 18LL) {
			_13413_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_20bc275ba_ryu_ftoa_fixed64(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits))),_15417_digits);
			_13513_ok=true;
		}
	}
	if ((!(_13513_ok))) {
		return _20b639c14_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _20b639c14_fmt_digits(_8221_dst,_1379_shortest,_969_neg,_13413_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _20b639c14_big_ftoa(jule::Slice<jule::U8> _18417_dst,jule::Int _18434_prec,jule::U8 _18445_fmt,jule::Bool _18456_neg,jule::U64 _18513_mant,jule::Int _18524_exp,_20b639c14_FloatInfo& _18535_flt) {
	_20bcae960_Decimal _18613_d = _20bcae960_Decimal();
	_18613_d._method_assign(_18513_mant);
	_18613_d._method_shift(static_cast<jule::Int>(_18524_exp - static_cast<jule::Int>(_18535_flt._field_mantbits)));
	_20b639c14_DecimalSlice _18913_digs = _20b639c14_DecimalSlice();
	jule::Bool _1909_shortest = _18434_prec < 0LL;
	if (_1909_shortest) {
		_20b639c14_round_shortest(_18613_d,_18513_mant,_18524_exp,_18535_flt);
		_18913_digs=_20b639c14_DecimalSlice(_18613_d._field_d.slice(0LL),_18613_d._field_nd,_18613_d._field_dp,jule::Bool());
		{
			auto &_match_expr{ _18445_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5292324592:;
				{
					_18434_prec=static_cast<jule::Int>(_18913_digs._field_nd - 1LL);
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_5292326000:;
				{
					_18434_prec=static_cast<jule::Int>(_20b639c14_max(static_cast<jule::Int>(_18913_digs._field_nd - _18913_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5292326096:;
				{
					_18434_prec=_18913_digs._field_nd;
				}
			}
			_match_end_5292325552:;
		}
	} else {
		{
			auto &_match_expr{ _18445_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5292330272:;
				{
					_18613_d._method_round(static_cast<jule::Int>(_18434_prec + 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_5292330368:;
				{
					_18613_d._method_round(static_cast<jule::Int>(_18613_d._field_dp + _18434_prec));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5292330464:;
				{
					if (_18434_prec == 0LL) {
						_18434_prec=1LL;
					}
					_18613_d._method_round(_18434_prec);
				}
			}
			_match_end_5292330192:;
		}
		_18913_digs=_20b639c14_DecimalSlice(_18613_d._field_d.slice(0LL),_18613_d._field_nd,_18613_d._field_dp,jule::Bool());
	}
	return _20b639c14_fmt_digits(_18417_dst,_1909_shortest,_18456_neg,_18913_digs,_18434_prec,_18445_fmt);
}



inline jule::Slice<jule::U8> _20b639c14_fmt_digits(jule::Slice<jule::U8> _22119_dst,jule::Bool _22132_shortest,jule::Bool _22148_neg,_20b639c14_DecimalSlice _22213_digs,jule::Int _22237_prec,jule::U8 _22248_fmt) {
	{
		auto &_match_expr{ _22248_fmt };
		
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_5292342464:;
			{
				return _20b639c14_fmt_e(_22119_dst,_22148_neg,_22213_digs,_22237_prec,_22248_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_5292342560:;
			{
				return _20b639c14_fmt_f(_22119_dst,_22148_neg,_22213_digs,_22237_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_5292342752:;
			{
				jule::Int _23017_eprec = _22237_prec;
				if ((_23017_eprec > _22213_digs._field_nd) && (_22213_digs._field_nd >= _22213_digs._field_dp)) {
					_23017_eprec=_22213_digs._field_nd;
				}
				if (_22132_shortest) {
					_23017_eprec=6LL;
				}
				jule::Int _24013_exp = _22213_digs._field_dp - 1LL;
				if ((_24013_exp < -4LL) || (_24013_exp >= _23017_eprec)) {
					if (_22237_prec > _22213_digs._field_nd) {
						_22237_prec=_22213_digs._field_nd;
					}
					return _20b639c14_fmt_e(_22119_dst,_22148_neg,_22213_digs,static_cast<jule::Int>(_22237_prec - 1LL),static_cast<jule::U8>((_22248_fmt + 'e') - 'g'));
				}
				if (_22237_prec > _22213_digs._field_dp) {
					_22237_prec=_22213_digs._field_nd;
				}
				return _20b639c14_fmt_f(_22119_dst,_22148_neg,_22213_digs,static_cast<jule::Int>(_20b639c14_max(static_cast<jule::Int>(_22237_prec - _22213_digs._field_dp),0LL)));
			}
		}
		_match_end_5292342352:;
	}
	return jule::append(_22119_dst,jule::Slice<jule::U8>({'%',_22248_fmt}));
}



inline void _20b639c14_round_shortest(_20bcae960_Decimal& _25924_d,jule::U64 _25936_mant,jule::Int _25947_exp,_20b639c14_FloatInfo& _25958_flt) {
	if (_25936_mant == 0LL) {
		_25924_d._field_nd=0LL;
		return;
	}
	jule::Int _2809_minexp = _25958_flt._field_bias + 1LL;
	if ((_25947_exp > _2809_minexp) && ((332LL * (_25924_d._field_dp - _25924_d._field_nd)) >= (100LL * (_25947_exp - static_cast<jule::Int>(_25958_flt._field_mantbits))))) {
		return;
	}
	_20bcae960_Decimal _28913_upper = _20bcae960_Decimal();
	_28913_upper._method_assign(static_cast<jule::U64>((_25936_mant * 2LL) + 1LL));
	_28913_upper._method_shift(static_cast<jule::Int>((_25947_exp - static_cast<jule::Int>(_25958_flt._field_mantbits)) - 1LL));
	jule::U64 _29913_mantlo = 0LLU;
	jule::Int _30013_explo = 0LL;
	if ((_25936_mant > (1LL << _25958_flt._field_mantbits)) || (_25947_exp == _2809_minexp)) {
		_29913_mantlo=static_cast<jule::U64>(_25936_mant - 1LL);
		_30013_explo=_25947_exp;
	} else {
		_29913_mantlo=static_cast<jule::U64>((_25936_mant * 2LL) - 1LL);
		_30013_explo=static_cast<jule::Int>(_25947_exp - 1LL);
	}
	_20bcae960_Decimal _30813_lower = _20bcae960_Decimal();
	_30813_lower._method_assign(static_cast<jule::U64>((_29913_mantlo * 2LL) + 1LL));
	_30813_lower._method_shift(static_cast<jule::Int>((_30013_explo - static_cast<jule::Int>(_25958_flt._field_mantbits)) - 1LL));
	jule::Bool _3159_inclusive = jule::unsafe_mod(_25936_mant,2LL) == 0LL;
	jule::U8 _32813_upperdelta = 0LLU;
	jule::Int _33213_ui = 0LL;
	for (; ; (_33213_ui)++) {
		{
			jule::Int _33713_mi = (_33213_ui - _28913_upper._field_dp) + _25924_d._field_dp;
			if (_33713_mi >= _25924_d._field_nd) {
				goto _iter_end_5292366976;
			}
			jule::Int _34113_li = (_33213_ui - _28913_upper._field_dp) + _30813_lower._field_dp;
			jule::U8 _34217_l = static_cast<jule::U8>(48LLU);
			if ((_34113_li >= 0LL) && (_34113_li < _30813_lower._field_nd)) {
				_34217_l=_30813_lower._field_d[_34113_li];
			}
			jule::U8 _34617_m = static_cast<jule::U8>(48LLU);
			if (_33713_mi >= 0LL) {
				_34617_m=_25924_d._field_d[_33713_mi];
			}
			jule::U8 _35017_u = static_cast<jule::U8>(48LLU);
			if (_33213_ui < _28913_upper._field_nd) {
				_35017_u=_28913_upper._field_d[_33213_ui];
			}
			jule::Bool _35813_okdown = (_34217_l != _34617_m) || (_3159_inclusive && ((_34113_li + 1LL) == _30813_lower._field_nd));
			{
				
				if ((_32813_upperdelta == 0LL) && ((_34617_m + 1LL) < _35017_u)) {
					_case_begin_5292391824:;
					{
						_32813_upperdelta=2LL;
					}
				}
				else if ((_32813_upperdelta == 0LL) && (_34617_m != _35017_u)) {
					_case_begin_5292391920:;
					{
						_32813_upperdelta=1LL;
					}
				}
				else if ((_32813_upperdelta == 1LL) && ((_34617_m != '9') || (_35017_u != '0'))) {
					_case_begin_5292392016:;
					{
						_32813_upperdelta=2LL;
					}
				}
				_match_end_5292388992:;
			}
			jule::Bool _37913_okup = (_32813_upperdelta > 0LL) && ((_3159_inclusive || (_32813_upperdelta > 1LL)) || ((_33213_ui + 1LL) < _28913_upper._field_nd));
			{
				
				if (_35813_okdown && _37913_okup) {
					_case_begin_5292398896:;
					{
						_25924_d._method_round(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				else if (_35813_okdown) {
					_case_begin_5292398992:;
					{
						_25924_d._method_round_down(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				else if (_37913_okup) {
					_case_begin_5292399088:;
					{
						_25924_d._method_round_up(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				_match_end_5292393520:;
			}
		}
	_iter_next_5292366976:;
	}
	_iter_end_5292366976:;
}



inline jule::Slice<jule::U8> _20b639c14_fmt_e(jule::Slice<jule::U8> _39814_dst,jule::Bool _39827_neg,_20b639c14_DecimalSlice _39838_d,jule::Int _39855_prec,jule::U8 _39866_fmt) {
	if (_39827_neg) {
		_39814_dst.push('-');
	}
	jule::U8 _40513_ch = '0';
	if (_39838_d._field_nd != 0LL) {
		_40513_ch=_39838_d._field_d[0LL];
	}
	_39814_dst.push(_40513_ch);
	if (_39855_prec > 0LL) {
		_39814_dst.push('.');
		jule::Int _41417_i = 1LL;
		jule::Int _41513_m = _20b639c14_min(_39838_d._field_nd,static_cast<jule::Int>(_39855_prec + 1LL));
		if (_41417_i < _41513_m) {
			_39814_dst=jule::append(_39814_dst,_39838_d._field_d.slice(_41417_i,_41513_m));
			_41417_i=_41513_m;
		}
		for (; _41417_i <= _39855_prec; (_41417_i)++) {
			{
				_39814_dst.push('0');
			}
		_iter_next_5292407872:;
		}
		_iter_end_5292407872:;
	}
	_39814_dst.push(_39866_fmt);
	jule::Int _42713_exp = _39838_d._field_dp - 1LL;
	if (_39838_d._field_nd == 0LL) {
		_42713_exp=0LL;
	}
	if (_42713_exp < 0LL) {
		_40513_ch='-';
		_42713_exp=static_cast<jule::Int>((-(_42713_exp)));
	} else {
		_40513_ch='+';
	}
	_39814_dst.push(_40513_ch);
	{
		
		if (_42713_exp < 10LL) {
			_case_begin_5292422272:;
			{
				_39814_dst.push('0');_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(_42713_exp) + '0'));
			}
		}
		else if (_42713_exp < 100LL) {
			_case_begin_5292421776:;
			{
				_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,10LL)) + '0'));_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_42713_exp,10LL)) + '0'));
			}
		}
		else {
			_case_begin_5292422096:;
			{
				_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,100LL)) + '0'));_39814_dst.push(static_cast<jule::U8>(jule::unsafe_mod(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,10LL)),10LL) + '0'));_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_42713_exp,10LL)) + '0'));
			}
		}
		_match_end_5292411264:;
	}
	return _39814_dst;
}



inline jule::Slice<jule::U8> _20b639c14_fmt_f(jule::Slice<jule::U8> _45314_dst,jule::Bool _45327_neg,_20b639c14_DecimalSlice _45338_d,jule::Int _45355_prec) {
	if (_45327_neg) {
		_45314_dst.push('-');
	}
	if (_45338_d._field_dp > 0LL) {
		jule::Int _46117_m = _20b639c14_min(_45338_d._field_nd,_45338_d._field_dp);
		_45314_dst=jule::append(_45314_dst,_45338_d._field_d.slice(0LL,_46117_m));
		for (; _46117_m < _45338_d._field_dp; (_46117_m)++) {
			{
				_45314_dst.push('0');
			}
		_iter_next_5292435792:;
		}
		_iter_end_5292435792:;
	} else {
		_45314_dst.push('0');
	}
	if (_45355_prec > 0LL) {
		_45314_dst.push('.');
		jule::Int _47217_i = 0LL;
		for (; _47217_i < _45355_prec; (_47217_i)++) {
			{
				jule::U8 _47421_ch = static_cast<jule::U8>(48LLU);
				jule::Int _47517_j = _45338_d._field_dp + _47217_i;
				if ((0LL <= _47517_j) && (_47517_j < _45338_d._field_nd)) {
					_47421_ch=_45338_d._field_d[_47517_j];
				}
				_45314_dst.push(_47421_ch);
			}
		_iter_next_5292438368:;
		}
		_iter_end_5292438368:;
	}
	return _45314_dst;
}



inline jule::Slice<jule::U8> _20b639c14_fmt_b(jule::Slice<jule::U8> _48614_dst,jule::Bool _48627_neg,jule::U64 _48638_mant,jule::Int _48653_exp,_20b639c14_FloatInfo& _48664_flt) {
	if (_48627_neg) {
		_48614_dst.push('-');
	}
	std::tie(_48614_dst,std::ignore) = _20bcb4a20_fmt_bits(_48614_dst,_48638_mant,10LL,false,true);
	_48614_dst.push('p');
	_48653_exp-=static_cast<jule::Int>(static_cast<jule::Int>(_48664_flt._field_mantbits));
	if (_48653_exp >= 0LL) {
		_48614_dst.push('+');
	}
	std::tie(_48614_dst,std::ignore) = _20bcb4a20_fmt_bits(_48614_dst,static_cast<jule::U64>(static_cast<jule::U64>(_48653_exp)),10LL,_48653_exp < 0LL,true);
	return _48614_dst;
}



inline jule::Slice<jule::U8> _20b639c14_fmt_x(jule::Slice<jule::U8> _50814_dst,jule::Int _50827_prec,jule::U8 _50838_fmt,jule::Bool _50849_neg,jule::U64 _50913_mant,jule::Int _50928_exp,_20b639c14_FloatInfo& _50939_flt) {
	if (_50913_mant == 0LL) {
		_50928_exp=0LL;
	}
	_50913_mant<<=static_cast<jule::Uint>(60LL - _50939_flt._field_mantbits);
	while ((_50913_mant != 0LL) && ((_50913_mant & 1152921504606846976LLU) == 0LL)) {
		{
			_50913_mant<<=1LL;
			(_50928_exp)--;
		}
	_iter_next_5292454832:;
	}
	_iter_end_5292454832:;
	if ((_50827_prec >= 0LL) && (_50827_prec < 15LL)) {
		jule::Uint _52313_shift = static_cast<jule::Uint>(_50827_prec * 4LL);
		jule::U64 _52413_extra = (_50913_mant << _52313_shift) & 1152921504606846975LLU;
		_50913_mant>>=static_cast<jule::Uint>(60LL - _52313_shift);
		if ((_52413_extra | (_50913_mant & 1LL)) > 576460752303423488LLU) {
			(_50913_mant)++;
		}
		_50913_mant<<=static_cast<jule::Uint>(60LL - _52313_shift);
		if ((_50913_mant & 2305843009213693952LLU) != 0LL) {
			_50913_mant>>=1LL;
			(_50928_exp)++;
		}
	}
	jule::Str _53713_hex = jule::Str("0123456789abcdef", 16);
	if (_50838_fmt == 'X') {
		_53713_hex=jule::Str("0123456789ABCDEF", 16);
	}
	if (_50849_neg) {
		_50814_dst.push('-');
	}
	_50814_dst.push('0');_50814_dst.push(_50838_fmt);_50814_dst.push(static_cast<jule::U8>('0' + static_cast<jule::U8>((_50913_mant >> 60LL) & 1LL)));
	_50913_mant<<=4LL;
	if ((_50827_prec < 0LL) && (_50913_mant != 0LL)) {
		_50814_dst.push('.');
		while (_50913_mant != 0LL) {
			{
				_50814_dst.push(_53713_hex[static_cast<jule::Int>((_50913_mant >> 60LL) & 15LL)]);
				_50913_mant<<=4LL;
			}
		_iter_next_5292467136:;
		}
		_iter_end_5292467136:;
	} else if (_50827_prec > 0LL) {
		_50814_dst.push('.');
		jule::Int _55817_i = 0LL;
		for (; _55817_i < _50827_prec; (_55817_i)++) {
			{
				_50814_dst.push(_53713_hex[static_cast<jule::Int>((_50913_mant >> 60LL) & 15LL)]);
				_50913_mant<<=4LL;
			}
		_iter_next_5292466208:;
		}
		_iter_end_5292466208:;
	}
	jule::U8 _56613_ch = static_cast<jule::U8>(80LLU);
	if (_50838_fmt == _20b6918b4_lower(_50838_fmt)) {
		_56613_ch='p';
	}
	_50814_dst.push(_56613_ch);
	if (_50928_exp < 0LL) {
		_56613_ch='-';
		_50928_exp=static_cast<jule::Int>((-(_50928_exp)));
	} else {
		_56613_ch='+';
	}
	_50814_dst.push(_56613_ch);
	{
		
		if (_50928_exp < 100LL) {
			_case_begin_5292465408:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		else if (_50928_exp < 1000LL) {
			_case_begin_5292486288:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,100LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(jule::unsafe_div(_50928_exp,10LL),10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		else {
			_case_begin_5292465312:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,1000LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(jule::unsafe_mod(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,100LL)),10LL) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(jule::unsafe_div(_50928_exp,10LL),10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		_match_end_5292477296:;
	}
	return _50814_dst;
}



inline jule::Int _20b639c14_min(jule::Int _5918_a,jule::Int _59116_b) {
	if (_5918_a < _59116_b) {
		return _5918_a;
	}
	return _59116_b;
}



inline jule::Int _20b639c14_max(jule::Int _5988_a,jule::Int _59816_b) {
	if (_5988_a > _59816_b) {
		return _5988_a;
	}
	return _59816_b;
}



inline jule::U8 _20b6918b4_lower(jule::U8 _4910_c) {
	return static_cast<jule::U8>(_4910_c | 32LL);
}



inline std::tuple<jule::U64,jule::Int> _20b6918b4_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str()) {
		return std::make_tuple(0LL,2LLU);
	}
	{
		
		if ((2LL <= _5435_base) && (_5435_base <= 36LL)) {
			_case_begin_5292500240:;
		}
		else if (_5435_base == 0LL) {
			_case_begin_5292499376:;
			{
				_5435_base=10LL;
				if (_5423_s[0LL] == '0') {
					{
						
						if ((_5423_s.len() >= 3LL) && (_20b6918b4_lower(_5423_s[1LL]) == 'b')) {
							_case_begin_5292505280:;
							{
								_5435_base=2LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_20b6918b4_lower(_5423_s[1LL]) == 'o')) {
							_case_begin_5292504816:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_20b6918b4_lower(_5423_s[1LL]) == 'x')) {
							_case_begin_5292504336:;
							{
								_5435_base=16LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else {
							_case_begin_5292503536:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(1LL);
							}
						}
						_match_end_5292503360:;
					}
				}
			}
		}
		else {
			_case_begin_5292496784:;
			{
				return std::make_tuple(0LL,3LLU);
			}
		}
		_match_end_5292497184:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LLU;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LL,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto &_match_expr{ _5435_base };
		
		if (_match_expr == 10LL) {
			_case_begin_5292516832:;
			{
				_9313_cutoff=1844674407370955265LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_5292516240:;
			{
				_9313_cutoff=1152921504606846977LLU;
			}
		}
		else {
			_case_begin_5292513616:;
			{
				_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
			}
		}
		_match_end_5292515424:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto &_match_expr{ _5450_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_5292518528:;
			{
				_10013_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5292519824:;
			{
				_10013_max_val=jule::MAX_U64;
			}
		}
		_match_end_5292519728:;
	}
	jule::U64 _11213_n = 0LLU;
	{
		auto &expr = _5423_s;
		auto it = expr.begin();
		_iter_begin_5292523184:;
		if (it != expr.end()) {
			jule::U8 &_20b6918b4_c = *it;
			{
				jule::U8 _11417_d = 0LLU;
				{
					
					if (('0' <= _20b6918b4_c) && (_20b6918b4_c <= '9')) {
						_case_begin_5292527456:;
						{
							_11417_d=static_cast<jule::U8>(_20b6918b4_c - '0');
						}
					}
					else if (('a' <= _20b6918b4_lower(_20b6918b4_c)) && (_20b6918b4_lower(_20b6918b4_c) <= 'z')) {
						_case_begin_5292526592:;
						{
							_11417_d=static_cast<jule::U8>((_20b6918b4_lower(_20b6918b4_c) - 'a') + 10LL);
						}
					}
					else {
						_case_begin_5292525584:;
						{
							return std::make_tuple(0LL,2LLU);
						}
					}
					_match_end_5292525472:;
				}
				if (_11417_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LL,2LLU);
				}
				if (_11213_n >= _9313_cutoff) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n*=static_cast<jule::U64>(static_cast<jule::U64>(_5435_base));
				jule::U64 _13413_n1 = _11213_n + static_cast<jule::U64>(_11417_d);
				if ((_13413_n1 < _11213_n) || (_13413_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n=_13413_n1;
			}
			_iter_next_5292523184:;
			++it;
			goto _iter_begin_5292523184;
		}
		_iter_end_5292523184:;
	}
	return std::make_tuple(_11213_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _20b6918b4_parse_int(jule::Str _16522_s,jule::Int _16530_base,jule::Int _16545_bit_size) {
	jule::I64 _16562_i = jule::I64();
	jule::Int _16570_err = 0LLU;
	if (_16522_s == jule::Str()) {
		_16562_i = 0LL;
		_16570_err = 2LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::Bool _17113_neg = false;
	if (_16522_s[0LL] == '+') {
		_16522_s=_16522_s.slice(1LL);
	} else if (_16522_s[0LL] == '-') {
		_17113_neg=true;
		_16522_s=_16522_s.slice(1LL);
	}
	jule::Uint _18013_un = 0LLU;
	std::tie(_18013_un,_16570_err) = _20b6918b4_parse_uint(_16522_s,_16530_base,_16545_bit_size);
	if ((_16570_err != 0LLU) && (_16570_err != 1LLU)) {
		_16562_i = 0LL;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_16545_bit_size == 0LL) {
		_16545_bit_size=64LLU;
	}
	jule::U64 _1909_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_16545_bit_size - 1LL));
	if ((!(_17113_neg)) && (_18013_un >= _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>(static_cast<jule::I64>(_1909_cutoff - 1LL));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_17113_neg && (_18013_un > _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1909_cutoff))));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::I64 _19713_n = static_cast<jule::I64>(_18013_un);
	if (_17113_neg) {
		_19713_n=static_cast<jule::I64>((-(_19713_n)));
	}
	_16562_i = _19713_n;
	_16570_err = 0LLU;
	return std::make_tuple(_16562_i,_16570_err);
}



inline std::tuple<jule::F64,jule::Bool> _20b6a031d_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_20bd40e75_f64_from_bits(9223372036854775808LLU));
		}
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _20c305aee_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(static_cast<jule::Uint>(_579_clz));
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _20c305aee_mul64(_4123_man,_20b6a031d_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(1LL));
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _20c305aee_mul64(_4123_man,_20b6a031d_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(0LL));
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>(_8013_ret_mantissa & 1LL);
	_8013_ret_mantissa>>=1LL;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LL;
		_6013_ret_exp2+=1LL;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_20bd40e75_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _20b6a031d_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_20bd40e75_f32_from_bits(2147483648LLU));
		}
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _20c305aee_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(static_cast<jule::Uint>(_1329_clz));
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _20c305aee_mul64(_11023_man,_20b6a031d_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(1LL));
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _20c305aee_mul64(_11023_man,_20b6a031d_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(0LL));
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>(_15513_ret_mantissa & 1LL);
	_15513_ret_mantissa>>=1LL;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LL;
		_13513_ret_exp2+=1LL;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LL;
	}
	_11058_f = static_cast<jule::F32>(_20bd40e75_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_17813_ret_bits))));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _20b657ced_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	for (; _5013_i < _4613_n; (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];
			if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
				_5217_c+=32LL;
			}
			if (_5217_c != _4542_prefix[_5013_i]) {
				return _5013_i;
			}
		}
	_iter_next_5292630608:;
	}
	_iter_end_5292630608:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _20b657ced_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::Int _6834_n = jule::Int();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s == jule::Str()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto &_match_expr{ _6816_s[0LL] };
		
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_5292643392:;
			{
				if (_6816_s[0LL] == '-') {
					_7213_sign=-1LL;
				}
				_7313_nsign=1LL;
				_6816_s=_6816_s.slice(1LL);
				goto _case_begin_5292643488;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_5292643488:;
			{
				jule::Int _8317_case_n = _20b657ced_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
				if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
					_8317_case_n=3LL;
				}
				if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
					_6826_f = static_cast<jule::F64>(_20bda4d41_inf(_7213_sign));
					_6834_n = static_cast<jule::Int>(_7313_nsign + _6834_n);
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_5292643584:;
			{
				if (_20b657ced_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
					_6826_f = static_cast<jule::F64>(_20bda4d41_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		_match_end_5292643312:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _20b657ced_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::Int _10340_exp = jule::Int();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10438_hex = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10457_ok = jule::Bool();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		
		if (_10315_s[_10449_i] == '+') {
			_case_begin_5292662528:;
			{
				(_10449_i)++;
			}
		}
		else if (_10315_s[_10449_i] == '-') {
			_case_begin_5292662624:;
			{
				_10350_neg=true;
				(_10449_i)++;
			}
		}
		_match_end_5292661920:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[_10449_i] == '0')) && (_20b6918b4_lower(_10315_s[_10449_i + 1LL]) == 'x')) {
		_11813_base=16LL;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	for (; _10449_i < _10315_s.len(); (_10449_i)++) {
		{
			jule::U8 _13413_c = _10315_s[_10449_i];
			{
				
				if (_13413_c == '.') {
					_case_begin_5292678944:;
					{
						if (_12813_sawdot) {
							goto _julec_label_loop_end;
						}
						_12813_sawdot=true;
						_13213_dp=_13013_nd;
						goto _iter_next_5292675440;
					}
				}
				else if (('0' <= _13413_c) && (_13413_c <= '9')) {
					_case_begin_5292679040:;
					{
						_12913_sawdigits=true;
						if ((_13413_c == '0') && (_13013_nd == 0LL)) {
							(_13213_dp)--;
							goto _iter_next_5292675440;
						}
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=_11813_base;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(_13413_c - '0'));
							(_13113_nd_mant)++;
						} else if (_13413_c != '0') {
							_10425_trunc=true;
						}
						goto _iter_next_5292675440;
					}
				}
				else if (((_11813_base == 16LL) && ('a' <= _20b6918b4_lower(_13413_c))) && (_20b6918b4_lower(_13413_c) <= 'f')) {
					_case_begin_5292679136:;
					{
						_12913_sawdigits=true;
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=16LL;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>((_20b6918b4_lower(_13413_c) - 'a') + 10LL));
							(_13113_nd_mant)++;
						} else {
							_10425_trunc=true;
						}
						goto _iter_next_5292675440;
					}
				}
				_match_end_5292678864:;
			}
			goto _iter_end_5292675440;
		}
	_iter_next_5292675440:;
	}
	_iter_end_5292675440:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_20b6918b4_lower(_10315_s[_10449_i]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19517_esign = 1LL;
		if (_10315_s[_10449_i] == '+') {
			(_10449_i)++;
		} else if (_10315_s[_10449_i] == '-') {
			(_10449_i)++;
			_19517_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[_10449_i] < '0')) || (_10315_s[_10449_i] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20517_e = 0LL;
		for (; (_10449_i < _10315_s.len()) && (('0' <= _10315_s[_10449_i]) && (_10315_s[_10449_i] <= '9')); (_10449_i)++) {
			{
				if (_20517_e < 10000LL) {
					_20517_e=static_cast<jule::Int>(((_20517_e * 10LL) + static_cast<jule::Int>(_10315_s[_10449_i])) - '0');
				}
			}
		_iter_next_5292701520:;
		}
		_iter_end_5292701520:;
		_13213_dp+=static_cast<jule::Int>(_20517_e * _19517_esign);
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=static_cast<jule::Int>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _20b657ced_atof64exact(jule::U64 _47216_mantissa,jule::Int _47235_exp,jule::Bool _47245_neg) {
	jule::F64 _47258_f = jule::F64();
	jule::Bool _47266_ok = jule::Bool();
	if ((_47216_mantissa >> _20b639c14_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_47258_f,_47266_ok);
	}
	_47258_f=static_cast<jule::F64>(static_cast<jule::F64>(_47216_mantissa));
	if (_47245_neg) {
		_47258_f=static_cast<jule::F64>((-(_47258_f)));
	}
	{
		
		if (_47235_exp == 0LL) {
			_case_begin_5292731536:;
			{
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		else if ((_47235_exp > 0LL) && (_47235_exp <= 37LL)) {
			_case_begin_5292731648:;
			{
				if (_47235_exp > 22LL) {
					_47258_f*=_20b657ced_F64_POW10[_47235_exp - 22LL];
					_47235_exp=22LL;
				}
				if ((_47258_f > 1000000000000000LL) || (_47258_f < -1000000000000000LL)) {
					return std::make_tuple(_47258_f,_47266_ok);
				}
				_47258_f = static_cast<jule::F64>(_47258_f * _20b657ced_F64_POW10[_47235_exp]);
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		else if ((_47235_exp < 0LL) && (_47235_exp >= -22LL)) {
			_case_begin_5292731760:;
			{
				_47258_f = static_cast<jule::F64>(jule::div(_47258_f,_20b657ced_F64_POW10[(-(_47235_exp))]));
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		_match_end_5292731360:;
	}
	return std::make_tuple(_47258_f,_47266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _20b657ced_atof32exact(jule::U64 _50616_mantissa,jule::Int _50635_exp,jule::Bool _50649_neg) {
	jule::F32 _50662_f = jule::F32();
	jule::Bool _50670_ok = jule::Bool();
	if ((_50616_mantissa >> _20b639c14_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_50662_f,_50670_ok);
	}
	_50662_f=static_cast<jule::F32>(static_cast<jule::F32>(_50616_mantissa));
	if (_50649_neg) {
		_50662_f=static_cast<jule::F32>((-(_50662_f)));
	}
	{
		
		if (_50635_exp == 0LL) {
			_case_begin_5292746592:;
			{
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		else if ((_50635_exp > 0LL) && (_50635_exp <= 17LL)) {
			_case_begin_5292746704:;
			{
				if (_50635_exp > 10LL) {
					_50662_f*=_20b657ced_F32_POW10[_50635_exp - 10LL];
					_50635_exp=10LL;
				}
				if ((_50662_f > 10000000LL) || (_50662_f < -10000000LL)) {
					return std::make_tuple(_50662_f,_50670_ok);
				}
				_50662_f = static_cast<jule::F32>(_50662_f * _20b657ced_F32_POW10[_50635_exp]);
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		else if ((_50635_exp < 0LL) && (_50635_exp >= -10LL)) {
			_case_begin_5292746816:;
			{
				_50662_f = static_cast<jule::F32>(jule::div(_50662_f,_20b657ced_F32_POW10[(-(_50635_exp))]));
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		_match_end_5292746416:;
	}
	return std::make_tuple(_50662_f,_50670_ok);
}



inline std::tuple<jule::F64,jule::Int> _20b657ced_atof_hex(jule::Str _54213_s,_20b639c14_FloatInfo& _54222_flt,jule::U64 _54242_mantissa,jule::Int _54261_exp,jule::Bool _54271_neg,jule::Bool _54282_trunc) {
	jule::Int _5439_max_exp = (static_cast<jule::Int>(1LL << _54222_flt._field_expbits) + _54222_flt._field_bias) - 2LL;
	jule::Int _5449_min_exp = _54222_flt._field_bias + 1LL;
	_54261_exp+=static_cast<jule::Int>(static_cast<jule::Int>(_54222_flt._field_mantbits));
	while ((_54242_mantissa != 0LL) && ((_54242_mantissa >> (_54222_flt._field_mantbits + 2LL)) == 0LL)) {
		{
			_54242_mantissa<<=1LL;
			(_54261_exp)--;
		}
	_iter_next_5292760592:;
	}
	_iter_end_5292760592:;
	if (_54282_trunc) {
		_54242_mantissa|=1LL;
	}
	while ((_54242_mantissa >> ((1LL + _54222_flt._field_mantbits) + 2LL)) != 0LL) {
		{
			_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
			(_54261_exp)++;
		}
	_iter_next_5292763280:;
	}
	_iter_end_5292763280:;
	while ((_54242_mantissa > 1LL) && (_54261_exp < (_5449_min_exp - 2LL))) {
		{
			_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
			(_54261_exp)++;
		}
	_iter_next_5292767376:;
	}
	_iter_end_5292767376:;
	jule::U64 _57413_round = _54242_mantissa & 3LL;
	_54242_mantissa>>=2LL;
	_57413_round|=static_cast<jule::U64>(_54242_mantissa & 1LL);
	_54261_exp+=2LL;
	if (_57413_round == 3LL) {
		(_54242_mantissa)++;
		if (_54242_mantissa == (1LL << (1LL + _54222_flt._field_mantbits))) {
			_54242_mantissa>>=1LL;
			(_54261_exp)++;
		}
	}
	if ((_54242_mantissa >> _54222_flt._field_mantbits) == 0LL) {
		_54261_exp=_54222_flt._field_bias;
	}
	jule::Int _58913_err = 0LLU;
	if (_54261_exp > _5439_max_exp) {
		_54242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(1LL << _54222_flt._field_mantbits));
		_54261_exp=static_cast<jule::Int>(_5439_max_exp + 1LL);
		_58913_err=1LLU;
	}
	jule::U64 _59613_bits = _54242_mantissa & ((1LL << _54222_flt._field_mantbits) - 1LL);
	_59613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_54261_exp - _54222_flt._field_bias) & static_cast<jule::Int>((1LL << _54222_flt._field_expbits) - 1LL)) << _54222_flt._field_mantbits);
	if (_54271_neg) {
		_59613_bits|=static_cast<jule::Uint>((1LL << _54222_flt._field_mantbits) << _54222_flt._field_expbits);
	}
	if (_54222_flt == _20b639c14_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_20bd40e75_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_59613_bits))))),_58913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_20bd40e75_f64_from_bits(_59613_bits)),_58913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _20b657ced_atof32(jule::Str _60711_s) {
	jule::F32 _60721_f = jule::F32();
	jule::Int _60729_n = jule::Int();
	jule::Int _60737_err = 0LLU;
	{
		jule::F64 _60914_val;
		jule::Int _60919__n;
		jule::Bool _60923_ok;
		std::tie(_60914_val,_60919__n,_60923_ok) = _20b657ced_special(_60711_s);
		if (_60923_ok) {
			_60721_f = static_cast<jule::F32>(static_cast<jule::F32>(_60914_val));
			_60729_n = _60919__n;
			_60737_err = 0LLU;
			return std::make_tuple(_60721_f,_60729_n,_60737_err);
		}
	}
	jule::U64 _61510_mantissa;
	jule::Int _61520_exp;
	jule::Bool _61525_neg;
	jule::Bool _61530_trunc;
	jule::Bool _61537_hex;
	jule::Int _61542__n;
	jule::Bool _61550_ok;
	std::tie(_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc,_61537_hex,_61542__n,_61550_ok) = _20b657ced_read_float(_60711_s);
	_60729_n=_61542__n;
	if ((!(_61550_ok))) {
		_60721_f = 0LL;
		_60737_err = 2LLU;
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	if (_61537_hex) {
		jule::F64 _62217_ff = 0LL;
		std::tie(_62217_ff,_60737_err) = _20b657ced_atof_hex(_60711_s.slice(0LL,_60729_n),_20b639c14_F32_INFO,_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc);
		_60721_f = static_cast<jule::F32>(static_cast<jule::F32>(_62217_ff));
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	{
		if ((!(_61530_trunc))) {
			std::tie(_60721_f,_61550_ok) = _20b657ced_atof32exact(_61510_mantissa,_61520_exp,_61525_neg);
			if (_61550_ok) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
		}
		std::tie(_60721_f,_61550_ok) = _20b6a031d_eisel_lemire32(_61510_mantissa,_61520_exp,_61525_neg);
		if (_61550_ok) {
			if ((!(_61530_trunc))) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
			jule::F32 _64421_f_up = 0LL;
			std::tie(_64421_f_up,_61550_ok) = _20b6a031d_eisel_lemire32(static_cast<jule::U64>(_61510_mantissa + 1LL),_61520_exp,_61525_neg);
			if (_61550_ok && (_60721_f == _64421_f_up)) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
		}
	}
	_20bcae960_Decimal _65313_d = _20bcae960_Decimal();
	if ((!(_65313_d._method_set(_60711_s.slice(0LL,_60729_n))))) {
		_60721_f = 0LL;
		_60737_err = 2LLU;
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	jule::U64 _65710_b;
	jule::Bool _65713_ovf;
	std::tie(_65710_b,_65713_ovf) = _65313_d._method_float_bits(_20b639c14_F32_INFO);
	_60721_f=static_cast<jule::F32>(_20bd40e75_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_65710_b))));
	if (_65713_ovf) {
		_60737_err=1LLU;
	}
	return std::make_tuple(_60721_f,_60729_n,_60737_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _20b657ced_atof64(jule::Str _66511_s) {
	jule::F64 _66521_f = jule::F64();
	jule::Int _66529_n = jule::Int();
	jule::Int _66537_err = 0LLU;
	{
		jule::F64 _66714_val;
		jule::Int _66719__n;
		jule::Bool _66723_ok;
		std::tie(_66714_val,_66719__n,_66723_ok) = _20b657ced_special(_66511_s);
		if (_66723_ok) {
			_66521_f = _66714_val;
			_66529_n = _66719__n;
			_66537_err = 0LLU;
			return std::make_tuple(_66521_f,_66529_n,_66537_err);
		}
	}
	jule::U64 _67310_mantissa;
	jule::Int _67320_exp;
	jule::Bool _67325_neg;
	jule::Bool _67330_trunc;
	jule::Bool _67337_hex;
	jule::Int _67342__n;
	jule::Bool _67350_ok;
	std::tie(_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc,_67337_hex,_67342__n,_67350_ok) = _20b657ced_read_float(_66511_s);
	_66529_n=_67342__n;
	if ((!(_67350_ok))) {
		_66521_f = 0LL;
		_66537_err = 2LLU;
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	if (_67337_hex) {
		std::tie(_66521_f,_66537_err) = _20b657ced_atof_hex(_66511_s.slice(0LL,_66529_n),_20b639c14_F64_INFO,_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc);
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	{
		if ((!(_67330_trunc))) {
			std::tie(_66521_f,_67350_ok) = _20b657ced_atof64exact(_67310_mantissa,_67320_exp,_67325_neg);
			if (_67350_ok) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
		}
		std::tie(_66521_f,_67350_ok) = _20b6a031d_eisel_lemire64(_67310_mantissa,_67320_exp,_67325_neg);
		if (_67350_ok) {
			if ((!(_67330_trunc))) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
			jule::F64 _70121_f_up = 0LL;
			std::tie(_70121_f_up,_67350_ok) = _20b6a031d_eisel_lemire64(static_cast<jule::U64>(_67310_mantissa + 1LL),_67320_exp,_67325_neg);
			if (_67350_ok && (_66521_f == _70121_f_up)) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
		}
	}
	_20bcae960_Decimal _71013_d = _20bcae960_Decimal();
	if ((!(_71013_d._method_set(_66511_s.slice(0LL,_66529_n))))) {
		_66521_f = 0LL;
		_66537_err = 2LLU;
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	jule::U64 _71410_b;
	jule::Bool _71413_ovf;
	std::tie(_71410_b,_71413_ovf) = _71013_d._method_float_bits(_20b639c14_F64_INFO);
	_66521_f=static_cast<jule::F64>(_20bd40e75_f64_from_bits(_71410_b));
	if (_71413_ovf) {
		_66537_err=1LLU;
	}
	return std::make_tuple(_66521_f,_66529_n,_66537_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _20b657ced_parse_float_prefix(jule::Str _72223_s,jule::Int _72231_bit_size) {
	if (_72231_bit_size == 32LL) {
		jule::F32 _72414_f;
		jule::Int _72417_n;
		jule::Int _72420_err;
		std::tie(_72414_f,_72417_n,_72420_err) = _20b657ced_atof32(_72223_s);
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_72414_f)),_72417_n,_72420_err);
	}
	jule::F64 _72810_f;
	jule::Int _72813_n;
	jule::Int _72816_err;
	std::tie(_72810_f,_72813_n,_72816_err) = _20b657ced_atof64(_72223_s);
	return std::make_tuple(_72810_f,_72813_n,_72816_err);
}



inline std::tuple<jule::F64,jule::Int> _20b657ced_parse_float(jule::Str _75620_s,jule::Int _75628_bit_size) {
	jule::F64 _75710_f;
	jule::Int _75713_n;
	jule::Int _75716_err;
	std::tie(_75710_f,_75713_n,_75716_err) = _20b657ced_parse_float_prefix(_75620_s,_75628_bit_size);
	if ((_75713_n != _75620_s.len()) && ((_75716_err == 0LLU) || (_75716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_75710_f,_75716_err);
}



inline void _20bc275ba_ryu_ftoa_fixed32(_20b639c14_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:51:9"));;
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:54:9"));;
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _20c305aee_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(static_cast<jule::Uint>(25LL - _639_b));
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_20bc275ba_mul_by_log2_log10(static_cast<jule::Int>(_6213_e2 + 24LL)))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _20bc275ba_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:83:9"));;
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _20bc275ba_divisible_by_pow5(static_cast<jule::U64>(static_cast<jule::U64>(_4947_mant)),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_20bc275ba_format_decimal(_4926_d,static_cast<jule::U64>(static_cast<jule::U64>(_8114_di)),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _20bc275ba_ryu_ftoa_fixed64(_20b639c14_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:125:9"));;
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _20c305aee_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::Uint>(55LL - _1349_b));
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_20bc275ba_mul_by_log2_log10(static_cast<jule::Int>(_13313_e2 + 54LL)))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _20bc275ba_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:157:9"));;
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _20bc275ba_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_20bc275ba_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _20bc275ba_format_decimal(_20b639c14_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _20bc275ba_U64_POW10[_20490_prec];
	jule::Int _20613_trimmed = 0LL;
	while (_20445_m >= _2059_max) {
		{
			jule::U64 _20814_a = jule::unsafe_div(_20445_m,10LL);
			jule::U64 _20817_b = jule::unsafe_mod(_20445_m,10LL);
			std::tie(_20814_a,_20817_b) = std::make_tuple(jule::unsafe_div(_20445_m,10LL),jule::unsafe_mod(_20445_m,10LL));
			_20445_m=_20814_a;
			(_20613_trimmed)++;
			if (_20817_b > 5LL) {
				_20474_round_up=true;
			} else if (_20817_b < 5LL) {
				_20474_round_up=false;
			} else {
				_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
			}
			if (_20817_b != 0LL) {
				_20457_trunc=true;
			}
		}
	_iter_next_5292928336:;
	}
	_iter_end_5292928336:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m = jule::unsafe_div(_20445_m,10LL);
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(static_cast<jule::Int>(_20490_prec));
	jule::U64 _23513_v = _20445_m;
	while (_23513_v >= 100LL) {
		{
			jule::U64 _23717_v1 = 0LLU;
			jule::U64 _23817_v2 = 0LLU;
			if ((_23513_v >> 32LL) == 0LL) {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(jule::unsafe_div(static_cast<jule::U32>(_23513_v),100LL))),static_cast<jule::U64>(static_cast<jule::U64>(jule::unsafe_mod(static_cast<jule::U32>(_23513_v),100LL))));
			} else {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::unsafe_div(_23513_v,100LL)),static_cast<jule::U64>(jule::unsafe_mod(_23513_v,100LL)));
			}
			_23313_n-=2LL;
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
			_23513_v=_23717_v1;
		}
	_iter_next_5292929104:;
	}
	_iter_end_5292929104:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	while (_20424_d._field_d[_20424_d._field_nd - 1LL] == '0') {
		{
			(_20424_d._field_nd)--;
			(_20613_trimmed)++;
		}
	_iter_next_5292956064:;
	}
	_iter_end_5292956064:;
	_20424_d._field_dp=static_cast<jule::Int>(_20424_d._field_nd + _20613_trimmed);
}



inline void _20bc275ba_ryu_ftoa_shortest(_20b639c14_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_20b639c14_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_20c305aee_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>(static_cast<jule::Uint>((-(_26559_exp))));
		_20bc275ba_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _20bc275ba_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_20bc275ba_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _20bc275ba_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _20b639c14_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _20bc275ba_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27710_ml)),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _20bc275ba_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27714_mc)),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _20bc275ba_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27718_mu)),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(_29417_dl32)),static_cast<jule::U64>(static_cast<jule::U64>(_29517_dc32)),static_cast<jule::U64>(static_cast<jule::U64>(_29617_du32)));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _20bc275ba_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _20bc275ba_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _20bc275ba_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:307:9"));;
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_20bc275ba_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_20bc275ba_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_20bc275ba_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_20bc275ba_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _20bc275ba_mul_by_log2_log10(jule::Int _38322_x) {
	return static_cast<jule::Int>((_38322_x * 78913LL) >> 18LL);
}



inline jule::Int _20bc275ba_mul_by_log10_log2(jule::Int _39322_x) {
	return static_cast<jule::Int>((_39322_x * 108853LL) >> 15LL);
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _20bc275ba_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_20b639c14_FloatInfo& _40218_flt) {
	jule::U64 _40236_lower = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40262_upper = jule::U64();
	jule::Int _40274_e2 = jule::Int();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 1LL);
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 2LL);
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _20bc275ba_ryu_digits(_20b639c14_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _20bc275ba_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _20bc275ba_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _20bc275ba_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_20bc275ba_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_20bc275ba_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		while (_43517_v > 0LL) {
			{
				jule::U32 _43718_v1 = jule::unsafe_div(_43517_v,10LL);
				jule::U32 _43722_v2 = jule::unsafe_mod(_43517_v,10LL);
				std::tie(_43718_v1,_43722_v2) = std::make_tuple(jule::unsafe_div(_43517_v,10LL),jule::unsafe_mod(_43517_v,10LL));
				_43517_v=_43718_v1;
				(_43417_n)--;
				_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(static_cast<jule::U8>(_43722_v2 + '0'));
			}
		_iter_next_5293047552:;
		}
		_iter_end_5293047552:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(static_cast<jule::Int>(9LL - _43417_n));
		_20bc275ba_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::Int>(_41520_d._field_nd + 8LL));
	}
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[_41520_d._field_nd - 1LL] == '0')) {
		{
			(_41520_d._field_nd)--;
		}
	_iter_next_5293048048:;
	}
	_iter_end_5293048048:;
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0')) {
		{
			(_41520_d._field_nd)--;
			(_41520_d._field_dp)--;
			_41520_d._field_d=_41520_d._field_d.slice(1LL);
		}
	_iter_next_5293043488:;
	}
	_iter_end_5293043488:;
}



inline void _20bc275ba_ryu_digits32(_20b639c14_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=static_cast<jule::Int>(_46166_endindex + 1LL);
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	while (_46121_upper > 0LL) {
		{
			jule::U32 _47613_l = jule::unsafe_div(_46043_lower + 9LL,10LL);
			jule::U32 _47718_c = jule::unsafe_div(_46059_central,10LL);
			jule::U32 _47725_cdigit = jule::unsafe_mod(_46059_central,10LL);
			std::tie(_47718_c,_47725_cdigit) = std::make_tuple(jule::unsafe_div(_46059_central,10LL),jule::unsafe_mod(_46059_central,10LL));
			jule::U32 _47813_u = jule::unsafe_div(_46121_upper,10LL);
			if (_47613_l > _47813_u) {
				goto _iter_end_5293063584;
			}
			if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
				(_47718_c)++;
				_47725_cdigit=0LL;
				_46151_cup=false;
			}
			(_46613_trimmed)++;
			_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
			_46913_c_next_digit=static_cast<jule::Int>(static_cast<jule::Int>(_47725_cdigit));
			std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
		}
	_iter_next_5293063584:;
	}
	_iter_end_5293063584:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	while (_51813_n > _46022_d._field_nd) {
		{
			jule::U32 _52014_v1 = jule::unsafe_div(_51713_v,100LL);
			jule::U32 _52018_v2 = jule::unsafe_mod(_51713_v,100LL);
			std::tie(_52014_v1,_52018_v2) = std::make_tuple(jule::unsafe_div(_51713_v,100LL),jule::unsafe_mod(_51713_v,100LL));
			_46022_d._field_d[_51813_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
			_46022_d._field_d[_51813_n - 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
			_51813_n-=2LL;
			_51713_v=_52014_v1;
		}
	_iter_next_5293075472:;
	}
	_iter_end_5293075472:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[_51813_n]=static_cast<jule::U8>(static_cast<jule::U8>(_51713_v + '0'));
	}
	_46022_d._field_nd=static_cast<jule::Int>(_46166_endindex + 1LL);
	_46022_d._field_dp=static_cast<jule::Int>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _20bc275ba_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::U32 _54251_resM = jule::U32();
	jule::Int _54262_resE = jule::Int();
	jule::Bool _54273_exact = jule::Bool();
	if (_54241_q == 0LL) {
		_54251_resM = static_cast<jule::U32>(_54220_m << 6LL);
		_54262_resE = static_cast<jule::Int>(_54232_e2 - 6LL);
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:549:9"));;
	}
	jule::U64 _55113_pow = _20b6a031d_DETAILED_POWS_OF_TEN[_54241_q - -348LL].__at(1LL);
	if (_54241_q < 0LL) {
		_55113_pow+=1LL;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _20c305aee_mul64(static_cast<jule::U64>(static_cast<jule::U64>(_54220_m)),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_20bc275ba_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>(static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL)));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _20bc275ba_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::U64 _57052_resM = jule::U64();
	jule::Int _57063_resE = jule::Int();
	jule::Bool _57074_exact = jule::Bool();
	if (_57042_q == 0LL) {
		_57052_resM = static_cast<jule::U64>(_57021_m << 8LL);
		_57063_resE = static_cast<jule::Int>(_57033_e2 - 8LL);
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:577:9"));;
	}
	jule::Array<jule::U64,2> _57913_pow = _20b6a031d_DETAILED_POWS_OF_TEN[_57042_q - -348LL];
	if (_57042_q < 0LL) {
		_57913_pow.__at(0LL)+=1LL;
	}
	_57033_e2+=static_cast<jule::Int>((_20bc275ba_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _20c305aee_mul64(_57021_m,_57913_pow.__at(0LL));
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _20c305aee_mul64(_57021_m,_57913_pow.__at(1LL));
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _20c305aee_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>((_58814_h1 << 9LL) | (_58910_mid >> 55LL));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _20bc275ba_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	for (; _59813_i < _59434_k; (_59813_i)++) {
		{
			if (jule::unsafe_mod(_59426_m,5LL) != 0LL) {
				return false;
			}
			_59426_m = jule::unsafe_div(_59426_m,5LL);
		}
	_iter_next_5293117888:;
	}
	_iter_end_5293117888:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _20bc275ba_divmod1e9(jule::U64 _61014_x) {
	{
		return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>(jule::unsafe_div(_61014_x,1000000000LL))),static_cast<jule::U32>(static_cast<jule::U32>(jule::unsafe_mod(_61014_x,1000000000LL))));
	}
}



inline void _20bcae960_trim(_20bcae960_Decimal& _27514_a) {
	while ((_27514_a._field_nd > 0LL) && (_27514_a._field_d[_27514_a._field_nd - 1LL] == '0')) {
		{
			(_27514_a._field_nd)--;
		}
	_iter_next_5293133248:;
	}
	_iter_end_5293133248:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _20bcae960_right_shift(_20bcae960_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	for (; (_29013_n >> _28533_k) == 0LL; (_28613_r)++) {
		{
			if (_28613_r >= _28521_a._field_nd) {
				if (_29013_n == 0LL) {
					_28521_a._field_nd=0LL;
					return;
				}
				while ((_29013_n >> _28533_k) == 0LL) {
					{
						_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
						(_28613_r)++;
					}
				_iter_next_5293147872:;
				}
				_iter_end_5293147872:;
				goto _iter_end_5293142880;
			}
			jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _30413_c) - '0');
		}
	_iter_next_5293142880:;
	}
	_iter_end_5293142880:;
	_28521_a._field_dp-=static_cast<jule::Int>(_28613_r - 1LL);
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	for (; _28613_r < _28521_a._field_nd; (_28613_r)++) {
		{
			jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			jule::Uint _31413_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_31413_dig + '0'));
			(_28713_w)++;
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _31313_c) - '0');
		}
	_iter_next_5293152288:;
	}
	_iter_end_5293152288:;
	while (_29013_n > 0LL) {
		{
			jule::Uint _32313_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			if (_28713_w < 800LL) {
				_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_32313_dig + '0'));
				(_28713_w)++;
			} else if (_32313_dig > 0LL) {
				_28521_a._field_trunc=true;
			}
			_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
		}
	_iter_next_5293157360:;
	}
	_iter_end_5293157360:;
	_28521_a._field_nd=_28713_w;
	_20bcae960_trim(_28521_a);
}



inline jule::Bool _20bcae960_prefix_is_less_than(jule::Array<jule::U8,800> _33924_b,jule::Int _33938_end,jule::Str _33948_s) {
	jule::Int _34013_i = 0LL;
	for (; _34013_i < _33948_s.len(); (_34013_i)++) {
		{
			if (_34013_i >= _33938_end) {
				return true;
			}
			if (_33924_b[_34013_i] != _33948_s[_34013_i]) {
				return _33924_b[_34013_i] < _33948_s[_34013_i];
			}
		}
	_iter_next_5293166080:;
	}
	_iter_end_5293166080:;
	return false;
}



inline void _20bcae960_left_shift(_20bcae960_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _20bcae960_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_20bcae960_prefix_is_less_than(_35320_a._field_d,_35320_a._field_nd,_20bcae960_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	for (; _35913_r >= 0LL; (_35913_r)--) {
		{
			_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[_35913_r]) - '0') << _35332_k);
			jule::Uint _36713_quo = jule::unsafe_div(_36313_n,10LL);
			jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_36813_rem + '0'));
			} else if (_36813_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_36713_quo;
		}
	_iter_next_5293177232:;
	}
	_iter_end_5293177232:;
	while (_36313_n > 0LL) {
		{
			jule::Uint _38013_quo = jule::unsafe_div(_36313_n,10LL);
			jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_38113_rem + '0'));
			} else if (_38113_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_38013_quo;
		}
	_iter_next_5293184320:;
	}
	_iter_end_5293184320:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_20bcae960_trim(_35320_a);
}



inline jule::Bool _20bcae960_should_round_up(_20bcae960_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[_40033_nd] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (jule::unsafe_mod(_40021_a._field_d[_40033_nd - 1LL] - '0',2LL) != 0LL);
	}
	return _40021_a._field_d[_40033_nd] >= '5';
}



inline jule::Str _20bcb4a20_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _20bcb4a20_small(static_cast<jule::Int>(static_cast<jule::Int>(_6217_i)));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _20bcb4a20_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _20bcb4a20_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _20bcb4a20_small(static_cast<jule::Int>(static_cast<jule::Int>(_7316_i)));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _20bcb4a20_fmt_bits(nullptr,static_cast<jule::U64>(static_cast<jule::U64>(_7316_i)),_7324_base,_7316_i < 0LL,false);
	return _7713_s;
}



inline jule::Str _20bcb4a20_itoa(jule::Int _8213_i) {
	return _20bcb4a20_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_8213_i)),10LL);
}



inline jule::Str _20bcb4a20_small(jule::Int _8510_i) {
	if (_8510_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8510_i,_8510_i + 1LL);
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(_8510_i * 2LL,(_8510_i * 2LL) + 2LL);
}



inline jule::Bool _20bcb4a20_is_power_of_two(jule::Int _9220_x) {
	return (_9220_x & (_9220_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _20bcb4a20_fmt_bits(jule::Slice<jule::U8> _9917_dst,jule::U64 _9934_u,jule::Int _9942_base,jule::Bool _9953_neg,jule::Bool _9964_append_) {
	jule::Slice<jule::U8> _9981_d = jule::Slice<jule::U8>();
	jule::Str _9992_s = jule::Str();
	if ((_9942_base < 2LL) || (_9942_base > jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).len())) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/itoa.jule:101:9"));;
	}
	jule::Slice<jule::U8> _10513_a = jule::Slice<jule::U8>::alloc(65LL);
	jule::I64 _10613_i = _10513_a.len();
	if (_9953_neg) {
		_9934_u=static_cast<jule::U64>((-(_9934_u)));
	}
	if (_9942_base == 10LL) {
		if (false) {
			while (_9934_u >= 1000000000LL) {
				{
					jule::U64 _12521_q = jule::unsafe_div(_9934_u,1000000000LL);
					jule::Uint _12625_us = static_cast<jule::Uint>(_9934_u - (_12521_q * 1000000000LL));
					jule::Int _12725_j = 4LL;
					for (; _12725_j > 0LL; (_12725_j)--) {
						{
							jule::Uint _12925_is = jule::unsafe_mod(_12625_us,100LL) * 2LL;
							_12625_us = jule::unsafe_div(_12625_us,100LL);
							_10613_i-=2LL;
							_10513_a[_10613_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 1LL)]);
							_10513_a[_10613_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 0LL)]);
						}
					_iter_next_5293241424:;
					}
					_iter_end_5293241424:;
					(_10613_i)--;
					_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_12625_us * 2LL) + 1LL)]);
					_9934_u=_12521_q;
				}
			_iter_next_5293239904:;
			}
			_iter_end_5293239904:;
		}
		jule::Uint _14717_us = static_cast<jule::Uint>(_9934_u);
		while (_14717_us >= 100LL) {
			{
				jule::Uint _14917_is = jule::unsafe_mod(_14717_us,100LL) * 2LL;
				_14717_us = jule::unsafe_div(_14717_us,100LL);
				_10613_i-=2LL;
				_10513_a[_10613_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 1LL)]);
				_10513_a[_10613_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 0LL)]);
			}
		_iter_next_5293240112:;
		}
		_iter_end_5293240112:;
		jule::Uint _15713_is = _14717_us * 2LL;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is + 1LL)]);
		if (_14717_us >= 10LL) {
			(_10613_i)--;
			_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is)]);
		}
	} else if (_20bcb4a20_is_power_of_two(_9942_base)) {
		jule::Uint _17213_shift = static_cast<jule::Uint>(_20c305aee_trailing_zeros(static_cast<jule::Uint>(static_cast<jule::Uint>(_9942_base)))) & 7LL;
		jule::U64 _17313_b = static_cast<jule::U64>(_9942_base);
		jule::Uint _17413_m = static_cast<jule::Uint>(_9942_base) - 1LL;
		while (_9934_u >= _17313_b) {
			{
				(_10613_i)--;
				_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u) & _17413_m)]);
				_9934_u>>=_17213_shift;
			}
		_iter_next_5293262848:;
		}
		_iter_end_5293262848:;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	} else {
		jule::U64 _18513_b = static_cast<jule::U64>(_9942_base);
		while (_9934_u >= _18513_b) {
			{
				(_10613_i)--;
				jule::U64 _19117_q = jule::div(_9934_u,_18513_b);
				_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u - (_19117_q * _18513_b)))]);
				_9934_u=_19117_q;
			}
		_iter_next_5293267808:;
		}
		_iter_end_5293267808:;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	}
	if (_9953_neg) {
		(_10613_i)--;
		_10513_a[_10613_i]='-';
	}
	if (_9964_append_) {
		_9981_d=jule::append(_9917_dst,_10513_a.slice(_10613_i));
		return std::make_tuple(_9981_d,_9992_s);
	}
	_9992_s=static_cast<jule::Str>(_10513_a.slice(_10613_i));
	return std::make_tuple(_9981_d,_9992_s);
}



inline jule::Bool _20c47803a_is_unary_op(jule::Str _31820_kind) {
	{
		auto &expr = _20c47803a_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_5293586368:;
		if (it != expr.end()) {
			jule::Str &_20c47803a_op = *it;
			{
				if (_31820_kind == _20c47803a_op) {
					return true;
				}
			}
			_iter_next_5293586368:;
			++it;
			goto _iter_begin_5293586368;
		}
		_iter_end_5293586368:;
	}
	return false;
}



inline jule::Bool _20c47803a_is_bin_op(jule::Str _32918_kind) {
	{
		auto &expr = _20c47803a_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_5293589552:;
		if (it != expr.end()) {
			jule::Str &_20c47803a_op = *it;
			{
				if (_32918_kind == _20c47803a_op) {
					return true;
				}
			}
			_iter_next_5293589552:;
			++it;
			goto _iter_begin_5293589552;
		}
		_iter_end_5293589552:;
	}
	return false;
}



inline jule::Bool _20c47803a_is_str(jule::Str _35115_k) {
	return (_35115_k != jule::Str()) && ((_35115_k[0LL] == '\"') || _20c47803a_is_raw_str(_35115_k));
}



inline jule::Bool _20c47803a_is_raw_str(jule::Str _35319_k) {
	return (_35319_k != jule::Str()) && (_35319_k[0LL] == '`');
}



inline jule::Bool _20c47803a_is_rune(jule::Str _35616_k) {
	return (_35616_k != jule::Str()) && (_35616_k[0LL] == '\'');
}



inline jule::Bool _20c47803a_is_bool(jule::Str _36016_k) {
	return (_36016_k == jule::Str("true", 4)) || (_36016_k == jule::Str("false", 5));
}



inline jule::Bool _20c47803a_contains_any(jule::Str _36217_s,jule::Str _36225_bytes) {
	{
		auto &expr = _36225_bytes;
		auto it = expr.begin();
		_iter_begin_5293599888:;
		if (it != expr.end()) {
			jule::U8 &_20c47803a_b = *it;
			{
				jule::Int _36413_i = _20a405ddd_find_byte(_36217_s,_20c47803a_b);
				if (_36413_i >= 0LL) {
					return true;
				}
			}
			_iter_next_5293599888:;
			++it;
			goto _iter_begin_5293599888;
		}
		_iter_end_5293599888:;
	}
	return false;
}



inline jule::Bool _20c47803a_is_float(jule::Str _37417_k) {
	if (_20a405ddd_has_prefix(_37417_k,jule::Str("0x", 2))) {
		return _20c47803a_contains_any(_37417_k,jule::Str(".pP", 3));
	}
	return _20c47803a_contains_any(_37417_k,jule::Str(".eE", 3));
}



inline jule::Bool _20c47803a_is_num(jule::Str _38315_k) {
	if (_38315_k == jule::Str()) {
		return false;
	}
	jule::U8 _3889_b = _38315_k[0LL];
	return (_3889_b == '.') || (('0' <= _3889_b) && (_3889_b <= '9'));
}



inline jule::Bool _20c47803a_is_ignore_ident(jule::Str _39824_ident) {
	return _39824_ident == jule::Str("_", 1);
}



inline jule::Bool _20c47803a_is_anon_ident(jule::Str _40022_ident) {
	return _40022_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _20c47803a_is_space(jule::I32 _41417_r) {
	{
		auto &expr = _20c47803a_SPACES;
		auto it = expr.begin();
		_iter_begin_5293619712:;
		if (it != expr.end()) {
			jule::I32 &_20c47803a_cr = *it;
			{
				if (_41417_r == _20c47803a_cr) {
					return true;
				}
			}
			_iter_next_5293619712:;
			++it;
			goto _iter_begin_5293619712;
		}
		_iter_end_5293619712:;
	}
	return false;
}



inline jule::Bool _20c47803a_is_letter(jule::I32 _42518_r) {
	return _20b055124_is_letter(_42518_r);
}



inline jule::Bool _20c47803a_is_decimal(jule::U8 _44719_b) {
	return ('0' <= _44719_b) && (_44719_b <= '9');
}



inline jule::Bool _20c47803a_is_binary(jule::U8 _44918_b) {
	return (_44918_b == '0') || (_44918_b == '1');
}



inline jule::Bool _20c47803a_is_octal(jule::U8 _45117_b) {
	return ('0' <= _45117_b) && (_45117_b <= '7');
}



inline jule::Bool _20c47803a_is_hex(jule::U8 _45415_b) {
	{
		
		if (('0' <= _45415_b) && (_45415_b <= '9')) {
			_case_begin_5293632640:;
			{
				return true;
			}
		}
		else if (('a' <= _45415_b) && (_45415_b <= 'f')) {
			_case_begin_5293632736:;
			{
				return true;
			}
		}
		else if (('A' <= _45415_b) && (_45415_b <= 'F')) {
			_case_begin_5293631744:;
			{
				return true;
			}
		}
		else {
			_case_begin_5293629392:;
			{
				return false;
			}
		}
		_match_end_5293630656:;
	}
}



inline jule::Bool _20c47803a_is_assign(jule::Uint _46618_id) {
	return ((((((_46618_id == 2LLU) || (_46618_id == 31LLU)) || (_46618_id == 34LLU)) || (_46618_id == 20LLU)) || (_46618_id == 28LLU)) || (_46618_id == 3LLU)) || (_46618_id == 7LLU);
}



inline jule::Bool _20c47803a_is_postfix_op(jule::Str _47922_kind) {
	{
		auto &expr = _20c47803a_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_5293636576:;
		if (it != expr.end()) {
			jule::Str &_20c47803a_op = *it;
			{
				if (_47922_kind == _20c47803a_op) {
					return true;
				}
			}
			_iter_next_5293636576:;
			++it;
			goto _iter_begin_5293636576;
		}
		_iter_end_5293636576:;
	}
	return false;
}



inline jule::Bool _20c47803a_is_assign_op(jule::Str _49021_kind) {
	if (_20c47803a_is_postfix_op(_49021_kind)) {
		return true;
	}
	{
		auto &expr = _20c47803a_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_5293640672:;
		if (it != expr.end()) {
			jule::Str &_20c47803a_op = *it;
			{
				if (_49021_kind == _20c47803a_op) {
					return true;
				}
			}
			_iter_next_5293640672:;
			++it;
			goto _iter_begin_5293640672;
		}
		_iter_end_5293640672:;
	}
	return false;
}



inline jule::Ptr<_20c4792c2_File> _20c4792c2_new_file_set(jule::Str _6421_path) {
	return jule::new_struct<_20c4792c2_File>(new( std::nothrow ) _20c4792c2_File(jule::Slice<jule::U8>(),_6421_path,jule::Slice<_20c47803a_Token>()));
}



inline _20a25b99c_Log _20c47ab20_make_err(jule::Int _10513_row,jule::Int _10523_col,jule::Ptr<_20c4792c2_File>& _10534_f,jule::Str _10544_fmt,jule::Slice<jule::Any> _10557_args) {
	return _20a25b99c_Log(1LLU,_10513_row,_10523_col,(*(_10534_f))._method_path(),_20a25b99c_logf(_10544_fmt,_10557_args),jule::Str(),jule::Str());
}



inline jule::Bool _20c47ab20_bytes_has_prefix(jule::Slice<jule::U8>& _11522_bytes,jule::Str _11537_prefix) {
	if (_11522_bytes.len() < _11537_prefix.len()) {
		return false;
	}
	{
		auto &expr = _11537_prefix;
		auto it = expr.begin();
		_iter_begin_5293648320:;
		if (it != expr.end()) {
			jule::Int _20c47ab20_i = it - expr.begin();
			{
				if (_11522_bytes[_20c47ab20_i] != _11537_prefix.__at(_20c47ab20_i)) {
					return false;
				}
			}
			_iter_next_5293648320:;
			++it;
			_20c47ab20_i++;
			goto _iter_begin_5293648320;
		}
		_iter_end_5293648320:;
	}
	return true;
}



inline jule::Str _20c47ab20_float_fmt_e(jule::Slice<jule::U8>& _12717_txt,jule::Int _12734_i) {
	jule::Str _12744_lit = jule::Str();
	(_12734_i)++;
	if (_12734_i >= _12717_txt.len()) {
		return _12744_lit;
	}
	jule::U8 _13313_b = _12717_txt[_12734_i];
	if ((_13313_b == '+') || (_13313_b == '-')) {
		(_12734_i)++;
		if (_12734_i >= _12717_txt.len()) {
			return _12744_lit;
		}
	}
	jule::Int _1419_first = _12734_i;
	for (; _12734_i < _12717_txt.len(); (_12734_i)++) {
		{
			_13313_b=_12717_txt[_12734_i];
			if ((!(_20c47803a_is_decimal(_13313_b)))) {
				goto _iter_end_5293660608;
			}
		}
	_iter_next_5293660608:;
	}
	_iter_end_5293660608:;
	if (_12734_i == _1419_first) {
		_12744_lit = jule::Str();
		return _12744_lit;
	}
	_12744_lit = static_cast<jule::Str>(_12717_txt.slice(0LL,_12734_i));
	return _12744_lit;
}



inline jule::Str _20c47ab20_float_fmt_p(jule::Slice<jule::U8>& _15517_txt,jule::Int _15530_i) {
	return _20c47ab20_float_fmt_e(_15517_txt,_15530_i);
}



inline jule::Str _20c47ab20_float_fmt_dotnp(jule::Slice<jule::U8>& _15721_txt,jule::Int _15738_i) {
	if (_15721_txt[_15738_i] != '.') {
		return jule::Str();
	}
	(_15738_i)++;
	_julec_label_loop:;
	for (; _15738_i < _15721_txt.len(); (_15738_i)++) {
		{
			jule::U8 _16513_b = _15721_txt[_15738_i];
			{
				
				if (_20c47803a_is_decimal(_16513_b)) {
					_case_begin_5293671072:;
					{
						goto _iter_next_5293667344;
					}
				}
				else if (_20c47ab20_is_float_fmt_p(_16513_b,_15738_i)) {
					_case_begin_5293671168:;
					{
						return _20c47ab20_float_fmt_p(_15721_txt,_15738_i);
					}
				}
				else {
					_case_begin_5293670720:;
					{
						goto _iter_end_5293667344;
					}
				}
				_match_end_5293670608:;
			}
		}
	_iter_next_5293667344:;
	}
	_iter_end_5293667344:;
	return jule::Str();
}



inline jule::Str _20c47ab20_float_fmt_dotfp(jule::Slice<jule::U8>& _17521_txt,jule::Int _17538_i) {
	_17538_i+=2LL;
	return _20c47ab20_float_fmt_e(_17521_txt,_17538_i);
}



inline jule::Str _20c47ab20_float_fmt_dotp(jule::Slice<jule::U8>& _18220_txt,jule::Int _18237_i) {
	(_18237_i)++;
	return _20c47ab20_float_fmt_e(_18220_txt,_18237_i);
}



inline jule::Str _20c47ab20_float_num(jule::Slice<jule::U8>& _18915_txt,jule::Int _18932_i) {
	jule::Str _18942_lit = jule::Str();
	(_18932_i)++;
	for (; _18932_i < _18915_txt.len(); (_18932_i)++) {
		{
			jule::U8 _19213_b = _18915_txt[_18932_i];
			if ((_18932_i > 1LL) && ((_19213_b == 'e') || (_19213_b == 'E'))) {
				_18942_lit = _20c47ab20_float_fmt_e(_18915_txt,_18932_i);
				return _18942_lit;
			}
			if ((!(_20c47803a_is_decimal(_19213_b)))) {
				goto _iter_end_5293679056;
			}
		}
	_iter_next_5293679056:;
	}
	_iter_end_5293679056:;
	if (_18932_i == 1LL) {
		return _18942_lit;
	}
	_18942_lit = static_cast<jule::Str>(_18915_txt.slice(0LL,_18932_i));
	return _18942_lit;
}



inline jule::Str _20c47ab20_common_num(jule::Slice<jule::U8>& _20716_txt) {
	jule::Str _20731_lit = jule::Str();
	jule::Int _20813_i = 0LL;
	_julec_label_loop:;
	for (; _20813_i < _20716_txt.len(); (_20813_i)++) {
		{
			jule::U8 _21113_b = _20716_txt[_20813_i];
			{
				
				if (_21113_b == '.') {
					_case_begin_5293689504:;
					{
						_20731_lit = _20c47ab20_float_num(_20716_txt,_20813_i);
						return _20731_lit;
					}
				}
				else if (_20c47ab20_is_float_fmt_e(_21113_b,_20813_i)) {
					_case_begin_5293689616:;
					{
						_20731_lit = _20c47ab20_float_fmt_e(_20716_txt,_20813_i);
						return _20731_lit;
					}
				}
				else if ((!(_20c47803a_is_decimal(_21113_b)))) {
					_case_begin_5293689728:;
					{
						goto _iter_end_5293687040;
					}
				}
				_match_end_5293689328:;
			}
		}
	_iter_next_5293687040:;
	}
	_iter_end_5293687040:;
	if (_20813_i == 0LL) {
		return _20731_lit;
	}
	_20731_lit = static_cast<jule::Str>(_20716_txt.slice(0LL,_20813_i));
	return _20731_lit;
}



inline jule::Str _20c47ab20_binary_num(jule::Slice<jule::U8>& _22516_txt) {
	jule::Str _22531_lit = jule::Str();
	if ((!(_20c47ab20_bytes_has_prefix(_22516_txt,jule::Str("0b", 2))))) {
		_22531_lit = jule::Str();
		return _22531_lit;
	}
	if (_22516_txt.len() < 2LL) {
		return _22531_lit;
	}
	
	jule::Int _23413_i = 2LL;
	for (; _23413_i < _22516_txt.len(); (_23413_i)++) {
		{
			if ((!(_20c47803a_is_binary(_22516_txt[_23413_i])))) {
				goto _iter_end_5293698688;
			}
		}
	_iter_next_5293698688:;
	}
	_iter_end_5293698688:;
	if (_23413_i == 2LL) {
		return _22531_lit;
	}
	_22531_lit = static_cast<jule::Str>(_22516_txt.slice(0LL,_23413_i));
	return _22531_lit;
}



inline jule::Bool _20c47ab20_is_float_fmt_e(jule::U8 _24719_b,jule::Int _24728_i) {
	return (_24728_i > 0LL) && ((_24719_b == 'e') || (_24719_b == 'E'));
}



inline jule::Bool _20c47ab20_is_float_fmt_p(jule::U8 _24819_b,jule::Int _24828_i) {
	return (_24828_i > 0LL) && ((_24819_b == 'p') || (_24819_b == 'P'));
}



inline jule::Bool _20c47ab20_is_float_fmt_dotnp(jule::Slice<jule::U8>& _25024_txt,jule::Int _25041_i) {
	if (_25024_txt[_25041_i] != '.') {
		return false;
	}
	(_25041_i)++;
	_julec_label_loop:;
	for (; _25041_i < _25024_txt.len(); (_25041_i)++) {
		{
			jule::U8 _25813_b = _25024_txt[_25041_i];
			{
				
				if (_20c47803a_is_decimal(_25813_b)) {
					_case_begin_5293712464:;
					{
						goto _iter_next_5293706912;
					}
				}
				else if (_20c47ab20_is_float_fmt_p(_25813_b,_25041_i)) {
					_case_begin_5293712560:;
					{
						return true;
					}
				}
				else {
					_case_begin_5293712112:;
					{
						goto _iter_end_5293706912;
					}
				}
				_match_end_5293712000:;
			}
		}
	_iter_next_5293706912:;
	}
	_iter_end_5293706912:;
	return false;
}



inline jule::Bool _20c47ab20_is_float_fmt_dotp(jule::Slice<jule::U8>& _26923_txt,jule::Int _26936_i) {
	{
		
		if (_26923_txt.len() < 3LL) {
			_case_begin_5293718080:;
			{
				goto _case_begin_5293718176;
			}
		}
		else if (_26923_txt[_26936_i] != '.') {
			_case_begin_5293718176:;
			{
				goto _case_begin_5293716704;
			}
		}
		else if ((_26923_txt[_26936_i + 1LL] != 'p') && (_26923_txt[_26936_i + 1LL] != 'P')) {
			_case_begin_5293716704:;
			{
				return false;
			}
		}
		else {
			_case_begin_5293716400:;
			{
				return true;
			}
		}
		_match_end_5293716224:;
	}
}



inline jule::Bool _20c47ab20_is_float_fmt_dotfp(jule::Slice<jule::U8>& _27824_txt,jule::Int _27837_i) {
	{
		
		if (_27824_txt.len() < 4LL) {
			_case_begin_5293724448:;
			{
				goto _case_begin_5293724544;
			}
		}
		else if (_27824_txt[_27837_i] != '.') {
			_case_begin_5293724544:;
			{
				goto _case_begin_5293723072;
			}
		}
		else if ((_27824_txt[_27837_i + 1LL] != 'f') && (_27824_txt[_27837_i + 1LL] != 'F')) {
			_case_begin_5293723072:;
			{
				goto _case_begin_5293723184;
			}
		}
		else if ((_27824_txt[_27837_i + 2LL] != 'p') && (_27824_txt[_27837_i + 1LL] != 'P')) {
			_case_begin_5293723184:;
			{
				return false;
			}
		}
		else {
			_case_begin_5293722752:;
			{
				return true;
			}
		}
		_match_end_5293722576:;
	}
}



inline jule::Str _20c47ab20_octal_num(jule::Slice<jule::U8>& _28815_txt) {
	jule::Str _28830_lit = jule::Str();
	if (_28815_txt[0LL] != '0') {
		_28830_lit = jule::Str();
		return _28830_lit;
	}
	if (_28815_txt.len() < 2LL) {
		return _28830_lit;
	}
	jule::Int _29613_octal_start = 1LL;
	if (_28815_txt[1LL] == 'o') {
		if (_28815_txt.len() < 3LL) {
			return _28830_lit;
		}
		(_29613_octal_start)++;
	}
	jule::Int _30513_i = _29613_octal_start;
	for (; _30513_i < _28815_txt.len(); (_30513_i)++) {
		{
			jule::U8 _30713_b = _28815_txt[_30513_i];
			if (_20c47ab20_is_float_fmt_e(_30713_b,_30513_i)) {
				_28830_lit = _20c47ab20_float_fmt_e(_28815_txt,_30513_i);
				return _28830_lit;
			}
			if ((!(_20c47803a_is_octal(_30713_b)))) {
				goto _iter_end_5293735952;
			}
		}
	_iter_next_5293735952:;
	}
	_iter_end_5293735952:;
	if (_30513_i == _29613_octal_start) {
		return _28830_lit;
	}
	_28830_lit = static_cast<jule::Str>(_28815_txt.slice(0LL,_30513_i));
	return _28830_lit;
}



inline jule::Str _20c47ab20_hex_num(jule::Slice<jule::U8>& _32213_txt) {
	jule::Str _32228_lit = jule::Str();
	if (_32213_txt.len() < 3LL) {
		return _32228_lit;
	}
	if ((_32213_txt[0LL] != '0') || ((_32213_txt[1LL] != 'x') && (_32213_txt[1LL] != 'X'))) {
		return _32228_lit;
	}
	
	jule::Int _33113_i = 2LL;
	_julec_label_loop:;
	for (; _33113_i < _32213_txt.len(); (_33113_i)++) {
		{
			jule::U8 _33413_b = _32213_txt[_33113_i];
			{
				
				if (_20c47ab20_is_float_fmt_dotp(_32213_txt,_33113_i)) {
					_case_begin_5293751024:;
					{
						_32228_lit = _20c47ab20_float_fmt_dotp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_20c47ab20_is_float_fmt_dotfp(_32213_txt,_33113_i)) {
					_case_begin_5293751136:;
					{
						_32228_lit = _20c47ab20_float_fmt_dotfp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_20c47ab20_is_float_fmt_p(_33413_b,_33113_i)) {
					_case_begin_5293751248:;
					{
						_32228_lit = _20c47ab20_float_fmt_p(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_20c47ab20_is_float_fmt_dotnp(_32213_txt,_33113_i)) {
					_case_begin_5293751360:;
					{
						_32228_lit = _20c47ab20_float_fmt_dotnp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if ((!(_20c47803a_is_hex(_33413_b)))) {
					_case_begin_5293751472:;
					{
						goto _iter_end_5293746480;
					}
				}
				_match_end_5293750816:;
			}
		}
	_iter_next_5293746480:;
	}
	_iter_end_5293746480:;
	if (_33113_i == 2LL) {
		return _32228_lit;
	}
	_32228_lit = static_cast<jule::Str>(_32213_txt.slice(0LL,_33113_i));
	return _32228_lit;
}



inline jule::Str _20c47ab20_hex_escape(jule::Slice<jule::U8>& _35916_txt,jule::Int _35929_n) {
	jule::Str _35939_seq = jule::Str();
	if (_35916_txt.len() < _35929_n) {
		return _35939_seq;
	}
	
	jule::Int _36513_i = 2LL;
	for (; _36513_i < _35929_n; (_36513_i)++) {
		{
			if ((!(_20c47803a_is_hex(_35916_txt[_36513_i])))) {
				return _35939_seq;
			}
		}
	_iter_next_5293757440:;
	}
	_iter_end_5293757440:;
	_35939_seq=static_cast<jule::Str>(_35916_txt.slice(0LL,_35929_n));
	return _35939_seq;
}



inline jule::Str _20c47ab20_big_unicode_point_escape(jule::Slice<jule::U8>& _37730_txt) {
	return _20c47ab20_hex_escape(_37730_txt,10LL);
}



inline jule::Str _20c47ab20_little_unicode_point_escape(jule::Slice<jule::U8>& _37933_txt) {
	return _20c47ab20_hex_escape(_37933_txt,6LL);
}



inline jule::Str _20c47ab20_hex_byte_escape(jule::Slice<jule::U8>& _38121_txt) {
	return _20c47ab20_hex_escape(_38121_txt,4LL);
}



inline jule::Str _20c47ab20_byte_escape(jule::Slice<jule::U8>& _38417_txt) {
	jule::Str _38432_seq = jule::Str();
	if (_38417_txt.len() < 4LL) {
		return _38432_seq;
	}
	if (((!(_20c47803a_is_octal(_38417_txt[1LL]))) || (!(_20c47803a_is_octal(_38417_txt[2LL])))) || (!(_20c47803a_is_octal(_38417_txt[3LL])))) {
		return _38432_seq;
	}
	_38432_seq = static_cast<jule::Str>(_38417_txt.slice(0LL,4LL));
	return _38432_seq;
}



inline jule::Slice<_20a25b99c_Log> _20c47ab20_lex(jule::Ptr<_20c4792c2_File> _78016_f) {
	if (_78016_f == nullptr) {
		return nullptr;
	}
	_20c47ab20_Lex _78513_lex = _20c47ab20_Lex(jule::Slice<_20c47803a_Token>(),_78016_f,0LL,jule::Int(),-1LL,jule::Slice<_20a25b99c_Log>());
	_78513_lex._method_new_line();
	_78513_lex._method_lex();
	if (_78513_lex._field_errors.len() > 0LL) {
		return _78513_lex._field_errors;
	}
	(*(_78016_f))._field__tokens=_78513_lex._field_tokens;
	return nullptr;
}



inline jule::Bool _20c48aa64_find_module_file(jule::Slice<jule::Ptr<_20a23944c_DirEntry>>& _1226_dirents) {
	{
		auto &expr = _1226_dirents;
		auto it = expr.begin();
		_iter_begin_5294205120:;
		if (it != expr.end()) {
			jule::Ptr<_20a23944c_DirEntry> &_20c48aa64_d = *it;
			{
				if ((!((*((*(_20c48aa64_d))._field_stat))._method_is_dir())) && ((*(_20c48aa64_d))._field_name == jule::Str("jule.mod", 8))) {
					return true;
				}
			}
			_iter_next_5294205120:;
			++it;
			goto _iter_begin_5294205120;
		}
		_iter_end_5294205120:;
	}
	return false;
}



inline jule::Str _20c48aa64_find_module_file_deep(jule::Str _2434_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_20a23944c_DirEntry>> _2617_dirents = ({
				auto except = _20a23944c_Directory::_static_method_read(_2434_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_5294204384;
					goto _iter_end_5294204384;
				} jule::Slice<jule::Ptr<_20a23944c_DirEntry>>();});
			});
			jule::Bool _3013_exist = _20c48aa64_find_module_file(_2617_dirents);
			if (_3013_exist) {
				return _2434_path;
			}
			jule::I64 _3513_n = _2434_path.len();
			_2434_path=_20a3911b9_dir(_2434_path);
			if (_2434_path.len() == _3513_n) {
				goto _iter_end_5294204384;
			}
		}
	_iter_next_5294204384:;
	}
	_iter_end_5294204384:;
	return jule::Str();
}



inline jule::Slice<_20a25b99c_Log> _20c48aa64_check_module_file(jule::Str _4626_path) {
	jule::Slice<jule::U8> _479_bytes = ({
		auto except = _20a284e6a_File::_static_method_read(_20a3911b9_join(jule::Slice<jule::Str>({_4626_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_20a25b99c_Log>({_20a25b99c_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
			return jule::Slice<_20a25b99c_Log>({_20a25b99c_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
		} jule::Slice<jule::U8>();});
	});
	jule::Str _549_s = _20a405ddd_trim(static_cast<jule::Str>(_479_bytes),jule::Str(" \n\r\t\v", 5));
	if (_549_s.len() != 0LL) {
		return jule::Slice<_20a25b99c_Log>({_20a25b99c_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file has syntax error(s)", 31),jule::Str(),jule::Str())});
	}
	return nullptr;
}



inline jule::Ptr<_20c4d35c3_FileInfo> _20c4d35c3_parse_file(jule::Ptr<_20c4792c2_File> _2223_f) {
	if (_2223_f == nullptr) {
		return nullptr;
	}
	jule::Ptr<_20c4d35c3_FileInfo> _2713_finf = jule::new_struct<_20c4d35c3_FileInfo>(new( std::nothrow ) _20c4d35c3_FileInfo());
	std::tie((*(_2713_finf))._field_ast,(*(_2713_finf))._field_errors) = _20c4d35c3_parse_fileset(_2223_f);
	if ((*(_2713_finf))._field_errors.len() > 0LL) {
		(*(_2713_finf))._field_ast=nullptr;
	}
	return _2713_finf;
}



inline std::tuple<jule::Ptr<_20c476126_Ast>,jule::Slice<_20a25b99c_Log>> _20c4d35c3_parse_fileset(jule::Ptr<_20c4792c2_File> _5822_f) {
	jule::Ptr<_20c7de1a3_Parser> _5913_p = jule::new_struct_ptr<_20c7de1a3_Parser>(new( std::nothrow ) _20c7de1a3_Parser());
	(*(_5913_p))._method_parse(_5822_f);
	return std::make_tuple((*(_5913_p))._field_ast,(*(_5913_p))._field_errors);
}



inline jule::Ptr<_20c476dc4_ScopeTree> _20c4d7055_new_scope(void) {
	return jule::new_struct<_20c476dc4_ScopeTree>(new( std::nothrow ) _20c476dc4_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _20c4d7055_is_st(_20c47803a_Token _4610_current,_20c47803a_Token _4626_prev) {
	jule::Bool _4641_ok = jule::Bool();
	jule::Bool _4651_terminated = jule::Bool();
	_4641_ok=(_4610_current._field_id == 5LLU) || (_4626_prev._field_row < _4610_current._field_row);
	_4651_terminated=_4610_current._field_id == 5LLU;
	return std::make_tuple(_4641_ok,_4651_terminated);
}



inline jule::Bool _20c4d7055_prev_is_incomplete_expr(jule::Slice<_20c47803a_Token>& _5229_tokens,jule::Int& _5247_i) {
	if ((_5247_i > 1LL) && (_5229_tokens[_5247_i - 2LL]._field_id == 23LLU)) {
		return false;
	}
	{
		_20c47803a_Token* _5913_prev = (&(_5229_tokens[_5247_i - 1LL]));
		return ((*(_5913_prev))._field_id == 20LLU) || ((((*(_5913_prev))._field_id == 7LLU) && _20c47803a_is_bin_op((*(_5913_prev))._field_kind)) && ((*(_5913_prev))._field_row < _5229_tokens[_5247_i]._field_row));
	}
}



inline std::tuple<jule::Int,jule::Bool> _20c4d7055_next_st_pos(jule::Slice<_20c47803a_Token>& _6817_tokens,jule::Int _6834_start) {
	jule::Int _6913_brace_n = 0LL;
	jule::Int _7013_i = _6834_start;
	for (; _7013_i < _6817_tokens.len(); (_7013_i)++) {
		{
			jule::Bool _7217_ok = false;
			jule::Bool _7317_terminated = false;
			_20c47803a_Token _7413_tok = _6817_tokens[_7013_i];
			{
				auto &_match_expr{ _7413_tok._field_id };
				
				if (_match_expr == 3LLU) {
					_case_begin_5294462816:;
					{
						{
							auto &_match_expr{ _7413_tok._field_kind };
							
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_5294468896:;
								{
									if ((_6913_brace_n == 0LL) && (_7013_i > _6834_start)) {
										if ((!(_20c4d7055_prev_is_incomplete_expr(_6817_tokens,_7013_i)))) {
											std::tie(_7217_ok,_7317_terminated) = _20c4d7055_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
											if (_7217_ok) {
												goto _julec_label_return;
											}
										}
									}
									(_6913_brace_n)++;
								}
							}
							else {
								_case_begin_5294462992:;
								{
									(_6913_brace_n)--;
									if ((_6913_brace_n == 0LL) && ((_7013_i + 1LL) < _6817_tokens.len())) {
										std::tie(_7217_ok,_7317_terminated) = _20c4d7055_is_st(_6817_tokens[_7013_i + 1LL],_7413_tok);
										if (_7217_ok) {
											(_7013_i)++;
											goto _julec_label_return;
										}
									}
								}
							}
							_match_end_5294463168:;
						}
						goto _iter_next_5294458288;
					}
				}
				_match_end_5294462416:;
			}
			if (_6913_brace_n != 0LL) {
				goto _iter_next_5294458288;
			}
			if (_7013_i > _6834_start) {
				if (_20c4d7055_prev_is_incomplete_expr(_6817_tokens,_7013_i)) {
					goto _iter_next_5294458288;
				}
				std::tie(_7217_ok,_7317_terminated) = _20c4d7055_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
			} else {
				std::tie(_7217_ok,_7317_terminated) = _20c4d7055_is_st(_7413_tok,_7413_tok);
			}
			if ((!(_7217_ok))) {
				goto _iter_next_5294458288;
			}
			_julec_label_return:;
			if (_7317_terminated) {
				(_7013_i)++;
			}
			return std::make_tuple(_7013_i,_7317_terminated);
		}
	_iter_next_5294458288:;
	}
	_iter_end_5294458288:;
	return std::make_tuple(_7013_i,false);
}



inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Bool> _20c4d7055_skip_st(jule::Int& _13117_i,jule::Slice<_20c47803a_Token> _13129_tokens) {
	jule::Int _1329_start = _13117_i;
	jule::Bool _13313_terminated = false;
	std::tie(_13117_i,_13313_terminated) = _20c4d7055_next_st_pos(_13129_tokens,_1329_start);
	jule::Slice<_20c47803a_Token> _13513_st_tokens = _13129_tokens.slice(_1329_start,_13117_i);
	if (_13313_terminated) {
		if (_13513_st_tokens.len() == 1LL) {
			std::tie(_13513_st_tokens,_13313_terminated) = _20c4d7055_skip_st(_13117_i,_13129_tokens);
			return std::make_tuple(_13513_st_tokens,_13313_terminated);
		}
		_13513_st_tokens=_13513_st_tokens.slice(0LL,_13513_st_tokens.len() - 1LL);
	}
	return std::make_tuple(_13513_st_tokens,_13313_terminated);
}



inline jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _20c4d7055_split_stmts(jule::Slice<_20c47803a_Token>& _15321_tokens) {
	jule::Slice<jule::Ptr<_20c4d7055_Stmt>> _15413_stms = nullptr;
	jule::Int _15513_pos = 0LL;
	while (_15513_pos < _15321_tokens.len()) {
		{
			jule::Slice<_20c47803a_Token> _15718_tokens;
			jule::Bool _15726_terminated;
			std::tie(_15718_tokens,_15726_terminated) = _20c4d7055_skip_st(_15513_pos,_15321_tokens);
			_15413_stms.push(jule::new_struct<_20c4d7055_Stmt>(new( std::nothrow ) _20c4d7055_Stmt(_15718_tokens,_15726_terminated)));
		}
	_iter_next_5294488320:;
	}
	_iter_end_5294488320:;
	return _15413_stms;
}



inline jule::Ptr<_20c4aa1e3_CallData> _20c4aa1e3_get_call_data(jule::Slice<_20c47803a_Token>& _4523_tokens) {
	jule::Ptr<_20c4aa1e3_CallData> _4613_data = jule::new_struct<_20c4aa1e3_CallData>(new( std::nothrow ) _20c4aa1e3_CallData());
	std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_args_tokens) = _20c7de1a3_range_last(_4523_tokens);
	if ((*(_4613_data))._field_expr_tokens.len() == 0LL) {
		return _4613_data;
	}
	_20c47803a_Token _539_token = (*(_4613_data))._field_expr_tokens[(*(_4613_data))._field_expr_tokens.len() - 1LL];
	if ((_539_token._field_id == 3LLU) && (_539_token._field_kind == jule::Str("]", 1))) {
		std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_generics_tokens) = _20c7de1a3_range_last((*(_4613_data))._field_expr_tokens);
	}
	return _4613_data;
}



inline jule::Slice<_20c47803a_Token> _20c4aa1e3_get_block_expr(jule::Slice<_20c47803a_Token>& _6124_tokens) {
	jule::Int _6213_brace_n = 0LL;
	jule::Int _6313_skip_to_next_brace_close = 0LL;
	{
		auto &expr = _6124_tokens;
		auto it = expr.begin();
		_iter_begin_5294508608:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token &_20c4aa1e3_tok = *it;
			{
				{
					auto &_match_expr{ _20c4aa1e3_tok._field_id };
					
					if (_match_expr == 16LLU || _match_expr == 17LLU || _match_expr == 35LLU) {
						_case_begin_5294511056:;
						{
							(_6313_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == 3LLU) {
						_case_begin_5294511168:;
						{
							{
								auto &_match_expr{ _20c4aa1e3_tok._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_5294514640:;
									{
										if ((_6213_brace_n > 0LL) || (_6313_skip_to_next_brace_close > 0LL)) {
											if (_6313_skip_to_next_brace_close > 0LL) {
												(_6313_skip_to_next_brace_close)--;
											}
											(_6213_brace_n)++;
											goto _match_end_5294513344;
										}
										return _6124_tokens.slice(0LL,_20c4aa1e3_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_5294515120:;
									{
										(_6213_brace_n)++;
									}
								}
								else {
									_case_begin_5294511328:;
									{
										(_6213_brace_n)--;
									}
								}
								_match_end_5294513344:;
							}
						}
					}
					_match_end_5294510576:;
				}
			}
			_iter_next_5294508608:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5294508608;
		}
		_iter_end_5294508608:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Slice<_20c47803a_Token>> _20c4aa1e3_split_colon(jule::Slice<_20c47803a_Token>& _9521_tokens) {
	jule::Int _9613_range_n = 0LL;
	{
		auto &expr = _9521_tokens;
		auto it = expr.begin();
		_iter_begin_5294516112:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token &_20c4aa1e3_token = *it;
			{
				{
					auto &_match_expr{ _20c4aa1e3_token._field_id };
					
					if (_match_expr == 3LLU) {
						_case_begin_5294520704:;
						{
							{
								auto &_match_expr{ _20c4aa1e3_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_5294523088:;
									{
										(_9613_range_n)++;
										goto _iter_next_5294516112;
									}
								}
								else {
									_case_begin_5294520912:;
									{
										(_9613_range_n)--;
									}
								}
								_match_end_5294521184:;
							}
						}
					}
					else if (_match_expr == 11LLU) {
						_case_begin_5294520816:;
						{
							if (_9613_range_n < 1LL) {
								jule::Slice<_20c47803a_Token> _11325_l = _9521_tokens.slice(0LL,_20c4aa1e3_i);
								jule::Slice<_20c47803a_Token> _11425_r = _9521_tokens.slice(_20c4aa1e3_i + 1LL);
								return std::make_tuple(_11325_l,_11425_r);
							}
						}
					}
					_match_end_5294520224:;
				}
			}
			_iter_next_5294516112:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5294516112;
		}
		_iter_end_5294516112:;
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_20c47803a_Token> _20c4aa1e3_eliminate_comments(jule::Slice<_20c47803a_Token>& _12228_tokens) {
	jule::Slice<_20c47803a_Token> _12313_cutted = nullptr;
	{
		auto &expr = _12228_tokens;
		auto it = expr.begin();
		_iter_begin_5294520032:;
		if (it != expr.end()) {
			_20c47803a_Token _20c4aa1e3_token = *it;
			{
				if (_20c4aa1e3_token._field_id != 18LLU) {
					_12313_cutted.push(_20c4aa1e3_token);
				}
			}
			_iter_next_5294520032:;
			++it;
			goto _iter_begin_5294520032;
		}
		_iter_end_5294520032:;
	}
	return _12313_cutted;
}



inline jule::Int _20c4aa1e3_find_lowest_prec_op(jule::Slice<_20c47803a_Token>& _13425_tokens) {
	jule::U8 _13913_prec = 255LLU;
	jule::Int _14013_prec_pos = -1LL;
	jule::Int _14213_brace_n = 0LL;
	jule::Bool _14313_skip_to_next_brace_open = false;
	{
		auto &expr = _13425_tokens;
		auto it = expr.begin();
		_iter_begin_5294535024:;
		if (it != expr.end()) {
			jule::Int _20c4aa1e3_i = it - expr.begin();
			_20c47803a_Token &_20c4aa1e3_token = *it;
			{
				{
					
					if (_20c4aa1e3_token._field_id == 3LLU) {
						_case_begin_5294537424:;
						{
							{
								auto &_match_expr{ _20c4aa1e3_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_5294541216:;
									{
										_14313_skip_to_next_brace_open=false;
										goto _case_begin_5294541312;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_5294541312:;
									{
										(_14213_brace_n)++;
									}
								}
								else {
									_case_begin_5294538144:;
									{
										(_14213_brace_n)--;
									}
								}
								_match_end_5294538928:;
							}
							goto _iter_next_5294535024;
						}
					}
					else if (_14313_skip_to_next_brace_open) {
						_case_begin_5294537536:;
						{
							goto _iter_next_5294535024;
						}
					}
					else if (_20c4aa1e3_token._field_id == 16LLU) {
						_case_begin_5294537648:;
						{
							_14313_skip_to_next_brace_open=true;
							goto _iter_next_5294535024;
						}
					}
					else if (_20c4aa1e3_i == 0LL) {
						_case_begin_5294537760:;
						{
							goto _iter_next_5294535024;
						}
					}
					else if (_20c4aa1e3_token._field_id != 7LLU) {
						_case_begin_5294537872:;
						{
							goto _iter_next_5294535024;
						}
					}
					else if (_14213_brace_n > 0LL) {
						_case_begin_5294537984:;
						{
							goto _iter_next_5294535024;
						}
					}
					_match_end_5294537136:;
				}
				_20c47803a_Token _17813_left = _13425_tokens[_20c4aa1e3_i - 1LL];
				if ((_17813_left._field_id == 7LLU) || (_17813_left._field_id == 11LLU)) {
					goto _iter_next_5294535024;
				}
				if (((_20c4aa1e3_i > 1LL) && (_17813_left._field_id == 3LLU)) && (_17813_left._field_kind == jule::Str("]", 1))) {
					_20c47803a_Token _18617_lleft = _13425_tokens[_20c4aa1e3_i - 2LL];
					if ((_18617_lleft._field_id == 3LLU) && (_18617_lleft._field_kind == jule::Str("[", 1))) {
						if ((_20c4aa1e3_token._field_kind == jule::Str("&", 1)) || (_20c4aa1e3_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_5294535024;
						}
					}
				}
				jule::U8 _19513_p = _20c4aa1e3_token._method_prec();
				if ((_19513_p != 0LL) && (_19513_p <= _13913_prec)) {
					_13913_prec=_19513_p;
					_14013_prec_pos=_20c4aa1e3_i;
				}
			}
			_iter_next_5294535024:;
			++it;
			_20c4aa1e3_i++;
			goto _iter_begin_5294535024;
		}
		_iter_end_5294535024:;
	}
	return _14013_prec_pos;
}



inline jule::Ptr<_20c476dc4_IdentExpr> _20c4aa1e3_build_ident_expr(_20c47803a_Token& _20526_token) {
	return jule::new_struct<_20c476dc4_IdentExpr>(new( std::nothrow ) _20c476dc4_IdentExpr(_20526_token,_20526_token._field_kind,false));
}



inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Int> _20c4aa1e3_get_range_expr_tokens(jule::Slice<_20c47803a_Token>& _21331_tokens) {
	jule::Int _21413_range_n = 0LL;
	jule::I64 _21513_i = _21331_tokens.len() - 1LL;
	for (; _21513_i >= 0LL; (_21513_i)--) {
		{
			_20c47803a_Token _21713_tok = _21331_tokens[_21513_i];
			if (_21713_tok._field_id == 3LLU) {
				{
					auto &_match_expr{ _21713_tok._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_5294562848:;
						{
							(_21413_range_n)++;
						}
					}
					else {
						_case_begin_5294561056:;
						{
							(_21413_range_n)--;
						}
					}
					_match_end_5294561168:;
				}
			}
			if (_21413_range_n == 0LL) {
				return std::make_tuple(_21331_tokens.slice(0LL,_21513_i),_21413_range_n);
			}
		}
	_iter_next_5294555968:;
	}
	_iter_end_5294555968:;
	return std::make_tuple(nullptr,_21413_range_n);
}



inline jule::Bool _20c4bea32_check_assign_tokens(jule::Slice<_20c47803a_Token>& _1625_tokens) {
	if ((_1625_tokens.len() == 0LL) || (!(_20c47803a_is_assign(_1625_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_5294568112:;
		if (it != expr.end()) {
			_20c47803a_Token &_20c4bea32_t = *it;
			{
				if (_20c4bea32_t._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c4bea32_t._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5294572176:;
							{
								(_2113_brace_n)++;
							}
						}
						else {
							_case_begin_5294570384:;
							{
								(_2113_brace_n)--;
							}
						}
						_match_end_5294570496:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_5294568112;
				} else if ((_20c4bea32_t._field_id == 7LLU) && _20c47803a_is_assign_op(_20c4bea32_t._field_kind)) {
					return true;
				}
			}
			_iter_next_5294568112:;
			++it;
			goto _iter_begin_5294568112;
		}
		_iter_end_5294568112:;
	}
	return false;
}



inline _20a25b99c_Log _20c7de1a3_make_err(jule::Int _5113_row,jule::Int _5123_col,jule::Ptr<_20c4792c2_File>& _5134_f,jule::Str _5144_fmt,jule::Slice<jule::Any> _5157_args) {
	return _20a25b99c_Log(1LLU,_5113_row,_5123_col,(*(_5134_f))._method_path(),_20a25b99c_logf(_5144_fmt,_5157_args),jule::Str(),jule::Str());
}



inline jule::Slice<_20c47803a_Token> _20c7de1a3_range(jule::Int& _7015_i,jule::Str _7023_open,jule::Str _7040_close,jule::Slice<_20c47803a_Token>& _7063_tokens) {
	if (_7015_i >= _7063_tokens.len()) {
		return nullptr;
	}
	_20c47803a_Token _759_tok = _7063_tokens[_7015_i];
	if ((_759_tok._field_id != 3LLU) || (_759_tok._field_kind != _7023_open)) {
		return nullptr;
	}
	(_7015_i)++;
	jule::Int _8113_range_n = 1LL;
	jule::Int _829_start = _7015_i;
	for (; (_8113_range_n != 0LL) && (_7015_i < _7063_tokens.len()); (_7015_i)++) {
		{
			_20c47803a_Token _8413_token = _7063_tokens[_7015_i];
			if (_8413_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _8413_token._field_kind };
					
					if (_match_expr == _7023_open) {
						_case_begin_5294588848:;
						{
							(_8113_range_n)++;
						}
					}
					else if (_match_expr == _7040_close) {
						_case_begin_5294588960:;
						{
							(_8113_range_n)--;
						}
					}
					_match_end_5294588368:;
				}
			}
		}
	_iter_next_5294585456:;
	}
	_iter_end_5294585456:;
	return _7063_tokens.slice(_829_start,_7015_i - 1LL);
}



inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Slice<_20c47803a_Token>> _20c7de1a3_range_last(jule::Slice<_20c47803a_Token>& _10320_tokens) {
	jule::Slice<_20c47803a_Token> _10339_cutted = jule::Slice<_20c47803a_Token>();
	jule::Slice<_20c47803a_Token> _10356_cut = jule::Slice<_20c47803a_Token>();
	if (_10320_tokens.len() == 0LL) {
		_10339_cutted = _10320_tokens;
		_10356_cut = nullptr;
		return std::make_tuple(_10339_cutted,_10356_cut);
	} else if (_10320_tokens[_10320_tokens.len() - 1LL]._field_id != 3LLU) {
		_10339_cutted = _10320_tokens;
		_10356_cut = nullptr;
		return std::make_tuple(_10339_cutted,_10356_cut);
	}
	jule::Int _11013_brace_n = 0LL;
	jule::I64 _11113_i = _10320_tokens.len() - 1LL;
	for (; _11113_i >= 0LL; (_11113_i)--) {
		{
			_20c47803a_Token _11313_token = _10320_tokens[_11113_i];
			if (_11313_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _11313_token._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_5294601584:;
						{
							(_11013_brace_n)++;
							goto _iter_next_5294589968;
						}
					}
					else {
						_case_begin_5294599792:;
						{
							(_11013_brace_n)--;
						}
					}
					_match_end_5294599904:;
				}
			}
			if (_11013_brace_n == 0LL) {
				_10339_cutted = _10320_tokens.slice(0LL,_11113_i);
				_10356_cut = _10320_tokens.slice(_11113_i);
				return std::make_tuple(_10339_cutted,_10356_cut);
			}
		}
	_iter_next_5294589968:;
	}
	_iter_end_5294589968:;
	_10339_cutted = _10320_tokens;
	_10356_cut = nullptr;
	return std::make_tuple(_10339_cutted,_10356_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_20c47803a_Token>>,jule::Slice<_20a25b99c_Log>> _20c7de1a3_parts(jule::Slice<_20c47803a_Token>& _14115_tokens,jule::Uint _14132_id,jule::Bool _14145_expr_must) {
	if (_14115_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_20c47803a_Token>> _14613_parts = nullptr;
	jule::Slice<_20a25b99c_Log> _14713_errors = nullptr;
	jule::Int _14913_range_n = 0LL;
	jule::Int _15013_last = 0LL;
	{
		auto &expr = _14115_tokens;
		auto it = expr.begin();
		_iter_begin_5294610304:;
		if (it != expr.end()) {
			jule::Int _20c7de1a3_i = it - expr.begin();
			_20c47803a_Token &_20c7de1a3_token = *it;
			{
				if (_20c7de1a3_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _20c7de1a3_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5294615040:;
							{
								(_14913_range_n)++;
								goto _iter_next_5294610304;
							}
						}
						else {
							_case_begin_5294613248:;
							{
								(_14913_range_n)--;
							}
						}
						_match_end_5294613360:;
					}
				}
				if (_14913_range_n > 0LL) {
					goto _iter_next_5294610304;
				}
				if (_20c7de1a3_token._field_id == _14132_id) {
					if (_14145_expr_must && ((_20c7de1a3_i - _15013_last) <= 0LL)) {
						_20a25b99c_Log _17021_err = _20c7de1a3_make_err(_20c7de1a3_token._field_row,_20c7de1a3_token._field_column,_20c7de1a3_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
						_14713_errors.push(_17021_err);
					}
					_14613_parts.push(_14115_tokens.slice(_15013_last,_20c7de1a3_i));
					_15013_last=static_cast<jule::Int>(_20c7de1a3_i + 1LL);
				}
			}
			_iter_next_5294610304:;
			++it;
			_20c7de1a3_i++;
			goto _iter_begin_5294610304;
		}
		_iter_end_5294610304:;
	}
	if (_15013_last < _14115_tokens.len()) {
		_14613_parts.push(_14115_tokens.slice(_15013_last));
	} else if ((!(_14145_expr_must))) {
		_14613_parts.push(jule::Slice<_20c47803a_Token>());
	}
	return std::make_tuple(_14613_parts,_14713_errors);
}



inline jule::Str _20c7de1a3_get_close_kind_of_brace(jule::Str _18728_left) {
	{
		auto &_match_expr{ _18728_left };
		
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_5294620736:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_5294625024:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_5294625120:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_5294610464:;
			{
				return jule::Str();
			}
		}
		_match_end_5294610576:;
	}
}



inline _20a25b99c_Log _20c7de1a3_compiler_err(_20c47803a_Token& _19618_token,jule::Str& _19633_fmt,jule::Slice<jule::Any> _19646_args) {
	return _20a25b99c_Log(1LLU,_19618_token._field_row,_19618_token._field_column,(*(_19618_token._field_file))._method_path(),_20a25b99c_logf(_19633_fmt,_19646_args),(*(_19618_token._field_file))._method_get_row(_19618_token._field_row),jule::Str());
}



inline void _20c7de1a3_push_suggestion(_20a25b99c_Log* _20731_log,jule::Str _20742_fmt,jule::Slice<jule::Any> _20755_args) {
	(*(_20731_log))._field_suggestion=_20a25b99c_logf(_20742_fmt,_20755_args);
}



inline jule::Ptr<_20c476dc4_Comment> _20c7de1a3_build_comment(_20c47803a_Token& _21123_token) {
	_21123_token._field_kind=_20a405ddd_trim(_21123_token._field_kind.slice(2LL),jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_20c476dc4_Comment>(new( std::nothrow ) _20c476dc4_Comment(_21123_token,_21123_token._field_kind));
}



inline jule::Str _20c7de1a3_tokstoa(jule::Slice<_20c47803a_Token>& _22013_tokens) {
	jule::Str _22113_s = jule::Str();
	{
		auto &expr = _22013_tokens;
		auto it = expr.begin();
		_iter_begin_5294637440:;
		if (it != expr.end()) {
			_20c47803a_Token &_20c7de1a3_token = *it;
			{
				_22113_s+=_20c7de1a3_token._field_kind;
			}
			_iter_next_5294637440:;
			++it;
			goto _iter_begin_5294637440;
		}
		_iter_end_5294637440:;
	}
	return _22113_s;
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_build_void_type(void) {
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl());
}



inline jule::Ptr<_20c476dc4_TypeDecl> _20c9bd97b_build_prim_type(_20c47803a_Token _2024_token) {
	return jule::new_struct<_20c476dc4_TypeDecl>(new( std::nothrow ) _20c476dc4_TypeDecl(_2024_token,jule::Any(jule::new_struct<_20c476dc4_IdentTypeDecl>(new( std::nothrow ) _20c476dc4_IdentTypeDecl(_2024_token,_2024_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_20c47803a_Token>,jule::Int> _20c9bd97b_split_map_range(jule::Slice<_20c47803a_Token>& _3525_tokens,jule::Int& _3547_i) {
	jule::Slice<_20c47803a_Token> _3557_range_tokens = jule::Slice<_20c47803a_Token>();
	jule::Int _3580_colon = jule::Int();
	_3580_colon=-1LL;
	jule::Int _3713_range_n = 0LL;
	jule::Int _389_start = _3547_i;
	for (; _3547_i < _3525_tokens.len(); (_3547_i)++) {
		{
			_20c47803a_Token _4013_token = _3525_tokens[_3547_i];
			if (_4013_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _4013_token._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_5294649680:;
						{
							(_3713_range_n)++;
							goto _iter_next_5294643856;
						}
					}
					else {
						_case_begin_5294647888:;
						{
							(_3713_range_n)--;
						}
					}
					_match_end_5294648000:;
				}
			}
			if (_3713_range_n == 0LL) {
				if ((_389_start + 1LL) > _3547_i) {
					return std::make_tuple(_3557_range_tokens,_3580_colon);
				}
				_3557_range_tokens=_3525_tokens.slice(_389_start + 1LL,_3547_i);
				goto _iter_end_5294643856;
			} else if (_3713_range_n != 1LL) {
				goto _iter_next_5294643856;
			}
			if ((_3580_colon == -1LL) && (_4013_token._field_id == 11LLU)) {
				_3580_colon=static_cast<jule::Int>((_3547_i - _389_start) - 1LL);
			}
		}
	_iter_next_5294643856:;
	}
	_iter_end_5294643856:;
	return std::make_tuple(_3557_range_tokens,_3580_colon);
}



inline void _20d78b3e6_lshift_unsig(_20d78b3e6_Const& _55822_c,_20d78b3e6_Const& _55833_x) {
	jule::U64 _5599_l = _55822_c._method_as_u64();
	jule::U64 _5609_r = _55833_x._method_as_u64();
	_55822_c._method_set_u64(static_cast<jule::U64>(_5599_l << _5609_r));
}



inline void _20d78b3e6_rshift_unsig(_20d78b3e6_Const& _56422_c,_20d78b3e6_Const& _56433_x) {
	jule::U64 _5659_l = _56422_c._method_as_u64();
	jule::U64 _5669_r = _56433_x._method_as_u64();
	_56422_c._method_set_u64(static_cast<jule::U64>(_5659_l >> _5669_r));
}



inline jule::Str _20d78c6b1_real_kind_of(jule::Str _2521_kind) {
	{
		auto &_match_expr{ _2521_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_5297401232:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_5297401328:;
			{
				return jule::Str("u32", 3);
			}
		}
		else {
			_case_begin_5297400928:;
			{
				return _2521_kind;
			}
		}
		_match_end_5297401040:;
	}
}



inline jule::Int _20d78c6b1_bitsize_of(jule::Str _4119_k) {
	{
		auto &_match_expr{ _4119_k };
		
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_5297404864:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_5297404960:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_5297404400:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_5297404496:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_5297404592:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_5297401760:;
			{
				return -1LL;
			}
		}
		_match_end_5297403200:;
	}
}



inline jule::Str _20d78c6b1_int_from_bits(jule::U64 _7322_bits) {
	{
		auto &_match_expr{ _7322_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_5297428544:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_5297428736:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_5297428832:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5297428928:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_5297426000:;
			{
				return jule::Str();
			}
		}
		_match_end_5297426304:;
	}
}



inline jule::Str _20d78c6b1_uint_from_bits(jule::U64 _8623_bits) {
	{
		auto &_match_expr{ _8623_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_5297433136:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_5297433328:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_5297433424:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5297433520:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_5297431120:;
			{
				return jule::Str();
			}
		}
		_match_end_5297431488:;
	}
}



inline jule::Bool _20d78c6b1_check_bit_float(jule::Str _12424_val,jule::Int _12434_bit) {
	jule::Int _12513_err;
	std::tie(std::ignore,_12513_err) = _20b657ced_parse_float(_12424_val,_12434_bit);
	return _12513_err == 0LLU;
}



inline jule::U64 _20d78c6b1_bitsize_of_int(jule::I64 _14823_x) {
	{
		
		if ((-128LL <= _14823_x) && (_14823_x <= 127LL)) {
			_case_begin_5297461024:;
			{
				return 8LL;
			}
		}
		else if ((-32768LL <= _14823_x) && (_14823_x <= 32767LL)) {
			_case_begin_5297459712:;
			{
				return 16LL;
			}
		}
		else if ((-2147483648LL <= _14823_x) && (_14823_x <= 2147483647LL)) {
			_case_begin_5297459808:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_5297459008:;
			{
				return 64LL;
			}
		}
		_match_end_5297457744:;
	}
}



inline jule::U64 _20d78c6b1_bitsize_of_uint(jule::U64 _16424_x) {
	{
		
		if (_16424_x <= 255LL) {
			_case_begin_5297466848:;
			{
				return 8LL;
			}
		}
		else if (_16424_x <= 65535LL) {
			_case_begin_5297465536:;
			{
				return 16LL;
			}
		}
		else if (_16424_x <= 4294967295LL) {
			_case_begin_5297465632:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_5297464832:;
			{
				return 64LL;
			}
		}
		_match_end_5297463696:;
	}
}



inline jule::F64 _20d78e96b_min(jule::Str _4316_k) {
	_4316_k=_20d78c6b1_real_kind_of(_4316_k);
	{
		auto &_match_expr{ _4316_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5297471824:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5297470624:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5297470720:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5297470816:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5297470928:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5297471040:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_5297469776:;
			{
				return 0LL;
			}
		}
		_match_end_5297468800:;
	}
}



inline jule::F64 _20d78e96b_max(jule::Str _5816_k) {
	_5816_k=_20d78c6b1_real_kind_of(_5816_k);
	{
		auto &_match_expr{ _5816_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5297477088:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5297477184:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5297477280:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5297477376:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_5297477552:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5297477648:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5297477760:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5297477872:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5297477984:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5297478096:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_5297475456:;
			{
				return 0LL;
			}
		}
		_match_end_5297476464:;
	}
}



inline jule::Bool _20d79053d_is_i8_compatible(jule::Str _629_k) {
	_629_k=_20d78c6b1_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _20d79053d_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_20d78c6b1_real_kind_of(_1230_k);
	return (_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3));
}



inline jule::Bool _20d79053d_is_i32_compatible(jule::Str _1930_k) {
	_1930_k=_20d78c6b1_real_kind_of(_1930_k);
	return (((_1930_k == jule::Str("i8", 2)) || (_1930_k == jule::Str("i16", 3))) || (_1930_k == jule::Str("i32", 3))) || (_1930_k == jule::Str("u8", 2));
}



inline jule::Bool _20d79053d_is_i64_compatible(jule::Str _2830_k) {
	_2830_k=_20d78c6b1_real_kind_of(_2830_k);
	return (((_2830_k == jule::Str("i8", 2)) || (_2830_k == jule::Str("i16", 3))) || (_2830_k == jule::Str("i32", 3))) || (_2830_k == jule::Str("i64", 3));
}



inline jule::Bool _20d79053d_is_u8_compatible(jule::Str _3729_k) {
	_3729_k=_20d78c6b1_real_kind_of(_3729_k);
	return _3729_k == jule::Str("u8", 2);
}



inline jule::Bool _20d79053d_is_u16_compatible(jule::Str _4330_k) {
	_4330_k=_20d78c6b1_real_kind_of(_4330_k);
	return (_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3));
}



inline jule::Bool _20d79053d_is_u32_compatible(jule::Str _4930_k) {
	_4930_k=_20d78c6b1_real_kind_of(_4930_k);
	return ((_4930_k == jule::Str("u8", 2)) || (_4930_k == jule::Str("u16", 3))) || (_4930_k == jule::Str("u32", 3));
}



inline jule::Bool _20d79053d_is_u64_compatible(jule::Str _5730_k) {
	_5730_k=_20d78c6b1_real_kind_of(_5730_k);
	return (((_5730_k == jule::Str("u8", 2)) || (_5730_k == jule::Str("u16", 3))) || (_5730_k == jule::Str("u32", 3))) || (_5730_k == jule::Str("u64", 3));
}



inline jule::Bool _20d79053d_is_f32_compatible(jule::Str _6630_k) {
	_6630_k=_20d78c6b1_real_kind_of(_6630_k);
	return _6630_k == jule::Str("f32", 3);
}



inline jule::Bool _20d79053d_is_f64_compatible(jule::Str _7230_k) {
	_7230_k=_20d78c6b1_real_kind_of(_7230_k);
	return _7230_k == jule::Str("f64", 3);
}



inline jule::Bool _20d79053d_types_are_compatible(jule::Str _8033_k1,jule::Str _8042_k2) {
	_8033_k1=_20d78c6b1_real_kind_of(_8033_k1);
	{
		auto &_match_expr{ _8033_k1 };
		
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_5297505728:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5297505824:;
			{
				return _20d79053d_is_i8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5297505920:;
			{
				return _20d79053d_is_i16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5297506016:;
			{
				return _20d79053d_is_i32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5297506192:;
			{
				return _20d79053d_is_i64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_5297506288:;
			{
				return _20d79053d_is_u8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5297506384:;
			{
				return _20d79053d_is_u16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5297506496:;
			{
				return _20d79053d_is_u32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5297506608:;
			{
				return _20d79053d_is_u64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5297507072:;
			{
				return _20d79053d_is_f32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5297507168:;
			{
				return _20d79053d_is_f64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_5297507280:;
			{
				return _8042_k2 == jule::Str("bool", 4);
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_5297507392:;
			{
				return _8042_k2 == jule::Str("str", 3);
			}
		}
		else {
			_case_begin_5297504304:;
			{
				return false;
			}
		}
		_match_end_5297504672:;
	}
}



inline jule::Bool _20d79053d_is_i16_greater(jule::Str _10127_k) {
	_10127_k=_20d78c6b1_real_kind_of(_10127_k);
	return _10127_k == jule::Str("i8", 2);
}



inline jule::Bool _20d79053d_is_i32_greater(jule::Str _10727_k) {
	_10727_k=_20d78c6b1_real_kind_of(_10727_k);
	return (_10727_k == jule::Str("i8", 2)) || (_10727_k == jule::Str("i16", 3));
}



inline jule::Bool _20d79053d_is_i64_greater(jule::Str _11327_k) {
	_11327_k=_20d78c6b1_real_kind_of(_11327_k);
	return ((_11327_k == jule::Str("i8", 2)) || (_11327_k == jule::Str("i16", 3))) || (_11327_k == jule::Str("i32", 3));
}



inline jule::Bool _20d79053d_is_u16_greater(jule::Str _12127_k) {
	_12127_k=_20d78c6b1_real_kind_of(_12127_k);
	return _12127_k == jule::Str("u8", 2);
}



inline jule::Bool _20d79053d_is_u32_greater(jule::Str _12727_k) {
	_12727_k=_20d78c6b1_real_kind_of(_12727_k);
	return (_12727_k == jule::Str("u8", 2)) || (_12727_k == jule::Str("u16", 3));
}



inline jule::Bool _20d79053d_is_u64_greater(jule::Str _13427_k) {
	_13427_k=_20d78c6b1_real_kind_of(_13427_k);
	return ((_13427_k == jule::Str("u8", 2)) || (_13427_k == jule::Str("u16", 3))) || (_13427_k == jule::Str("u32", 3));
}



inline jule::Bool _20d79053d_is_f32_greater(jule::Str _14223_k) {
	return _14223_k != jule::Str("f64", 3);
}



inline jule::Bool _20d79053d_is_f64_greater(jule::Str _14423_k) {
	return true;
}



inline jule::Bool _20d79053d_is_greater(jule::Str _14723_k1,jule::Str _14732_k2) {
	_14723_k1=_20d78c6b1_real_kind_of(_14723_k1);
	{
		auto &_match_expr{ _14723_k1 };
		
		if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5297534656:;
			{
				return _20d79053d_is_i16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5297533424:;
			{
				return _20d79053d_is_i32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5297533520:;
			{
				return _20d79053d_is_i64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5297533616:;
			{
				return _20d79053d_is_u16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5297533728:;
			{
				return _20d79053d_is_u32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5297533904:;
			{
				return _20d79053d_is_u64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5297534016:;
			{
				return _20d79053d_is_f32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5297534128:;
			{
				return _20d79053d_is_f64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_5297534240:;
			{
				return true;
			}
		}
		else {
			_case_begin_5297531728:;
			{
				return false;
			}
		}
		_match_end_5297531648:;
	}
}



inline jule::Bool _20d853821_is_sig_int(jule::Str _2723_k) {
	_2723_k=_20d78c6b1_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _20d853821_is_unsig_int(jule::Str _3625_k) {
	_3625_k=_20d78c6b1_real_kind_of(_3625_k);
	return (((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3));
}



inline jule::Bool _20d853821_is_int(jule::Str _4515_k) {
	return _20d853821_is_sig_int(_4515_k) || _20d853821_is_unsig_int(_4515_k);
}



inline jule::Bool _20d853821_is_float(jule::Str _5017_k) {
	return (_5017_k == jule::Str("f32", 3)) || (_5017_k == jule::Str("f64", 3));
}



inline jule::Bool _20d853821_is_num(jule::Str _5515_k) {
	return _20d853821_is_int(_5515_k) || _20d853821_is_float(_5515_k);
}



inline jule::Bool _20d8c32b9_is_ascii(jule::I32 _1017_r) {
	
	return _1017_r <= 127LLU;
}



inline jule::I32 _20d8c32b9_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if (_1816_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _2313_r = 0LL;
	if ((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL)) {
		jule::Int _2517_i = 0LL;
		_2313_r=static_cast<jule::I32>(_20d8c32b9_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _20a3472e6_decode_rune(_1816_bytes);
	}
	return _2313_r;
}



inline jule::Str _20d8c32b9_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _20d8c32b9_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if (_4215_bytes.len() == 0LL) {
		return jule::Str();
	}
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_4215_bytes.len()));
	jule::Int _4813_i = 0LL;
	while (_4813_i < _4215_bytes.len()) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];
			if (_5013_b == '\\') {
				_4713_s=jule::append(_4713_s,_20d8c32b9_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;
				jule::Int _5421_size;
				std::tie(_5418_r,_5421_size) = _20a3472e6_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_20a3472e6_append_rune(_4713_s,_5418_r);
			}
		}
	_iter_next_5297571088:;
	}
	_iter_end_5297571088:;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _20d8c32b9_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if ((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\')) {
		return std::make_tuple(_6241_seq,_6252_ok);
	}
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		
		if (_match_expr == '\\') {
			_case_begin_5297587072:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_5297587904:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_5297588000:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_5297588096:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_5297588192:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_5297588288:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_5297588384:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_5297588496:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_5297588608:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_5297588720:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_5297587376:;
	}
	_6252_ok=_6241_seq != 0LL;
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _20d8c32b9_rune_from_esq_seq(jule::Slice<jule::U8> _8422_bytes,jule::Int& _8442_i) {
	jule::U8 _8510_b;
	jule::Bool _8513_ok;
	std::tie(_8510_b,_8513_ok) = _20d8c32b9_try_btoa_common_esq(_8422_bytes.slice(_8442_i));
	(_8442_i)++;
	if (_8513_ok) {
		(_8442_i)++;
		return static_cast<jule::I32>(static_cast<jule::I32>(_8510_b));
	}
	{
		auto &_match_expr{ _8422_bytes[_8442_i] };
		
		if (_match_expr == 'u') {
			_case_begin_5297607456:;
			{
				
				jule::U64 _9514_rc;
				std::tie(_9514_rc,std::ignore) = _20b6918b4_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 5LL)),16LL,64LL);
				_8442_i+=5LL;
				jule::I32 _9713_r = static_cast<jule::I32>(_9514_rc);
				return _9713_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_5297606048:;
			{
				
				jule::U64 _10214_rc;
				std::tie(_10214_rc,std::ignore) = _20b6918b4_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 9LL)),16LL,64LL);
				_8442_i+=9LL;
				jule::I32 _10413_r = static_cast<jule::I32>(_10214_rc);
				return _10413_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_5297607248:;
			{
				
				jule::Slice<jule::U8> _10913_seq = _8422_bytes.slice(_8442_i + 1LL,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11114_b;
				std::tie(_11114_b,std::ignore) = _20b6918b4_parse_uint(static_cast<jule::Str>(_10913_seq),16LL,64LL);
				return static_cast<jule::I32>(static_cast<jule::I32>(_11114_b));
			}
		}
		else {
			_case_begin_5297601392:;
			{
				
				jule::Slice<jule::U8> _11613_seq = _8422_bytes.slice(_8442_i,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11814_b;
				std::tie(_11814_b,std::ignore) = _20b6918b4_parse_uint(static_cast<jule::Str>(_11613_seq.slice(1LL)),8LL,64LL);
				return static_cast<jule::I32>(static_cast<jule::I32>(_11814_b));
			}
		}
		_match_end_5297601088:;
	}
}



inline jule::Slice<jule::U8> _20d8c32b9_str_esq_seq(jule::Slice<jule::U8> _12316_bytes,jule::Int& _12336_i) {
	jule::I32 _1249_r = _20d8c32b9_rune_from_esq_seq(_12316_bytes,_12336_i);
	if (_1249_r <= 255LL) {
		return jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_1249_r))});
	}
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1249_r));
}



inline jule::Bool _20c819332_kind_uses_generics(jule::Ptr<_20d4a6c9e_TypeKind> _40023_k,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>& _40038_generics) {
	jule::Str _4019_pk = (*(_40023_k))._method_to_str();
	{
		auto &expr = _40038_generics;
		auto it = expr.begin();
		_iter_begin_5298528304:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_GenericDecl> &_20c819332_g = *it;
			{
				if (_20a405ddd_contains(_4019_pk,(*(_20c819332_g))._field_ident)) {
					return true;
				}
			}
			_iter_next_5298528304:;
			++it;
			goto _iter_begin_5298528304;
		}
		_iter_end_5298528304:;
	}
	return false;
}



inline jule::Bool _20c819332_parameter_uses_generics(jule::Ptr<_20c819332_Param>& _41029_p,jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>& _41041_generics) {
	if ((*(_41029_p))._method_is_self()) {
		return false;
	}
	return _20c819332_kind_uses_generics((*((*(_41029_p))._field_kind))._field_kind,_41041_generics);
}



inline jule::Str _20caa3115_build_doc(jule::Ptr<_20c476dc4_CommentGroup> _8518_cg) {
	if (_8518_cg == nullptr) {
		return jule::Str();
	}
	jule::Str _9013_doc = jule::Str();
	{
		auto &expr = (*(_8518_cg))._field_comments;
		auto it = expr.begin();
		_iter_begin_5298537120:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Comment> &_20caa3115_c = *it;
			{
				_9013_doc+=(*(_20caa3115_c))._field_text;
				_9013_doc+=jule::Str(" ", 1);
			}
			_iter_next_5298537120:;
			++it;
			goto _iter_begin_5298537120;
		}
		_iter_end_5298537120:;
	}
	return _9013_doc;
}



inline jule::Ptr<_20d4a6c9e_TypeSymbol> _20caa3115_build_type(jule::Ptr<_20c476dc4_TypeDecl> _9819_t) {
	if (_9819_t == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(_9819_t,jule::Ptr<_20d4a6c9e_TypeKind>()));
}



inline jule::Ptr<_20d162d45_Value> _20caa3115_build_expr(jule::Ptr<_20c476dc4_Expr> _10719_expr) {
	if (_10719_expr == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value(_10719_expr,jule::Ptr<_20d162d45_Data>()));
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20caa3115_build_type_alias(jule::Ptr<_20c476dc4_TypeAliasDecl> _11725_decl) {
	return jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias((*(_11725_decl))._field_scope,(*(_11725_decl))._field_public,(*(_11725_decl))._field_cpp_linked,jule::Bool(),jule::Bool(),(*(_11725_decl))._field_token,(*(_11725_decl))._field_ident,_20caa3115_build_type((*(_11725_decl))._field_kind),_20caa3115_build_doc((*(_11725_decl))._field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ptr<_20c496047_Field> _20caa3115_build_field(jule::Ptr<_20c476dc4_FieldDecl> _12920_decl) {
	return jule::new_struct_ptr<_20c496047_Field>(new( std::nothrow ) _20c496047_Field(jule::Ptr<_20c496047_Struct>(),(*(_12920_decl))._field_token,(*(_12920_decl))._field_public,(*(_12920_decl))._field_mutable,(*(_12920_decl))._field_ident,_20caa3115_build_type((*(_12920_decl))._field_kind),(*(_12920_decl))._field_default));
}



inline jule::Slice<jule::Ptr<_20c496047_Field>> _20caa3115_build_fields(jule::Slice<jule::Ptr<_20c476dc4_FieldDecl>>& _14022_decls) {
	jule::Slice<jule::Ptr<_20c496047_Field>> _14113_fields = jule::Slice<jule::Ptr<_20c496047_Field>>::alloc(0LL,static_cast<jule::I64>(_14022_decls.len()));
	{
		auto &expr = _14022_decls;
		auto it = expr.begin();
		_iter_begin_5298552832:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_FieldDecl> _20caa3115_decl = *it;
			{
				_14113_fields.push(_20caa3115_build_field(_20caa3115_decl));
			}
			_iter_next_5298552832:;
			++it;
			goto _iter_begin_5298552832;
		}
		_iter_end_5298552832:;
	}
	return _14113_fields;
}



inline jule::Ptr<_20c496047_Struct> _20caa3115_build_struct(jule::Ptr<_20c476dc4_StructDecl> _14821_decl) {
	return jule::new_struct_ptr<_20c496047_Struct>(new( std::nothrow ) _20c496047_Struct(jule::Ptr<_20cba60d6_Sema>(),jule::Slice<jule::Ptr<_20c496047_Struct>>(),jule::Slice<jule::Ptr<_20c496047_Struct>>(),(*(_14821_decl))._field_token,(*(_14821_decl))._field_ident,_20caa3115_build_fields((*(_14821_decl))._field_fields),jule::Slice<jule::Ptr<_20c819332_Fn>>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>(),(*(_14821_decl))._field_public,(*(_14821_decl))._field_cpp_linked,(*(_14821_decl))._field_directives,_20caa3115_build_doc((*(_14821_decl))._field_doc_comments),(*(_14821_decl))._field_generics,jule::Slice<jule::Ptr<_20cb471a9_Trait>>(),jule::Slice<jule::Ptr<_20c496047_StructIns>>()));
}



inline jule::Ptr<_20c819332_Param> _20caa3115_build_param(jule::Ptr<_20c476dc4_ParamDecl> _16120_decl) {
	return jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param((*(_16120_decl))._field_token,(*(_16120_decl))._field_mutable,(*(_16120_decl))._field_variadic,(*(_16120_decl))._field_reference,_20caa3115_build_type((*(_16120_decl))._field_kind),(*(_16120_decl))._field_ident));
}



inline jule::Slice<jule::Ptr<_20c819332_Param>> _20caa3115_build_params(jule::Slice<jule::Ptr<_20c476dc4_ParamDecl>>& _17222_decls) {
	jule::Slice<jule::Ptr<_20c819332_Param>> _17313_params = jule::Slice<jule::Ptr<_20c819332_Param>>::alloc(0LL,static_cast<jule::I64>(_17222_decls.len()));
	{
		auto &expr = _17222_decls;
		auto it = expr.begin();
		_iter_begin_5298564880:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_ParamDecl> _20caa3115_decl = *it;
			{
				_17313_params.push(_20caa3115_build_param(_20caa3115_decl));
			}
			_iter_next_5298564880:;
			++it;
			goto _iter_begin_5298564880;
		}
		_iter_end_5298564880:;
	}
	return _17313_params;
}



inline jule::Ptr<_20c819332_RetType> _20caa3115_build_ret_type(jule::Ptr<_20c476dc4_RetTypeDecl> _18023_decl) {
	if (((*(_18023_decl))._field_idents == nullptr) && ((*(_18023_decl))._field_kind == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_20c819332_RetType>(new( std::nothrow ) _20c819332_RetType(_20caa3115_build_type((*(_18023_decl))._field_kind),(*(_18023_decl))._field_idents));
}



inline jule::Ptr<_20c819332_Fn> _20caa3115_build_fn(jule::Ptr<_20c476dc4_FnDecl> _19017_decl) {
	return jule::new_struct_ptr<_20c819332_Fn>(new( std::nothrow ) _20c819332_Fn(jule::Ptr<_20cba60d6_Sema>(),(*(_19017_decl))._field_token,(*(_19017_decl))._field_global,(*(_19017_decl))._field_unsafety,(*(_19017_decl))._field_public,(*(_19017_decl))._field_cpp_linked,(*(_19017_decl))._field_statically,(*(_19017_decl))._field_exceptional,(*(_19017_decl))._field_ident,(*(_19017_decl))._field_directives,_20caa3115_build_doc((*(_19017_decl))._field_doc_comments),(*(_19017_decl))._field_scope,(*(_19017_decl))._field_generics,_20caa3115_build_ret_type((*(_19017_decl))._field_result),_20caa3115_build_params((*(_19017_decl))._field_params),jule::Ptr<_20c496047_Struct>(),jule::Slice<jule::Ptr<_20c819332_FnIns>>()));
}



inline jule::Slice<jule::Ptr<_20c819332_Fn>> _20caa3115_build_methods(jule::Slice<jule::Ptr<_20c476dc4_FnDecl>>& _20923_decls) {
	jule::Slice<jule::Ptr<_20c819332_Fn>> _21013_methods = jule::Slice<jule::Ptr<_20c819332_Fn>>::alloc(0LL,static_cast<jule::I64>(_20923_decls.len()));
	{
		auto &expr = _20923_decls;
		auto it = expr.begin();
		_iter_begin_5298580448:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_FnDecl> _20caa3115_decl = *it;
			{
				_21013_methods.push(_20caa3115_build_fn(_20caa3115_decl));
			}
			_iter_next_5298580448:;
			++it;
			goto _iter_begin_5298580448;
		}
		_iter_end_5298580448:;
	}
	return _21013_methods;
}



inline jule::Ptr<_20cb471a9_Trait> _20caa3115_build_trait(jule::Ptr<_20c476dc4_TraitDecl> _21720_decl) {
	return jule::new_struct_ptr<_20cb471a9_Trait>(new( std::nothrow ) _20cb471a9_Trait((*(_21720_decl))._field_token,(*(_21720_decl))._field_ident,(*(_21720_decl))._field_public,jule::Bool(),_20caa3115_build_doc((*(_21720_decl))._field_doc_comments),_20caa3115_build_methods((*(_21720_decl))._field_methods),jule::Slice<jule::Ptr<_20c496047_Struct>>()));
}



inline jule::Ptr<_20cb4c70e_EnumItem> _20caa3115_build_enum_item(jule::Ptr<_20c476dc4_EnumItemDecl> _22724_decl) {
	return jule::new_struct<_20cb4c70e_EnumItem>(new( std::nothrow ) _20cb4c70e_EnumItem((*(_22724_decl))._field_token,(*(_22724_decl))._field_ident,_20caa3115_build_expr((*(_22724_decl))._field_expr)));
}



inline jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>> _20caa3115_build_enum_items(jule::Slice<jule::Ptr<_20c476dc4_EnumItemDecl>>& _23526_decls) {
	jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>> _23613_items = jule::Slice<jule::Ptr<_20cb4c70e_EnumItem>>::alloc(0LL,static_cast<jule::I64>(_23526_decls.len()));
	{
		auto &expr = _23526_decls;
		auto it = expr.begin();
		_iter_begin_5298590608:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_EnumItemDecl> _20caa3115_decl = *it;
			{
				_23613_items.push(_20caa3115_build_enum_item(_20caa3115_decl));
			}
			_iter_next_5298590608:;
			++it;
			goto _iter_begin_5298590608;
		}
		_iter_end_5298590608:;
	}
	return _23613_items;
}



inline jule::Ptr<_20cb4c70e_Enum> _20caa3115_build_enum(jule::Ptr<_20c476dc4_EnumDecl> _24319_decl) {
	return jule::new_struct_ptr<_20cb4c70e_Enum>(new( std::nothrow ) _20cb4c70e_Enum((*(_24319_decl))._field_token,(*(_24319_decl))._field_public,(*(_24319_decl))._field_ident,_20caa3115_build_type((*(_24319_decl))._field_kind),_20caa3115_build_enum_items((*(_24319_decl))._field_items),_20caa3115_build_doc((*(_24319_decl))._field_doc_comments)));
}



inline jule::Ptr<_20cdc725d_Var> _20caa3115_build_var(jule::Ptr<_20c476dc4_VarDecl> _25418_decl) {
	return jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var(jule::Ptr<_20cb4d853_Scope>(),(*(_25418_decl))._field_token,(*(_25418_decl))._field_ident,(*(_25418_decl))._field_cpp_linked,(*(_25418_decl))._field_constant,(*(_25418_decl))._field_mutable,(*(_25418_decl))._field_public,jule::Bool(),(*(_25418_decl))._field_statically,(*(_25418_decl))._field_reference,_20caa3115_build_doc((*(_25418_decl))._field_doc_comments),_20caa3115_build_type((*(_25418_decl))._field_kind),_20caa3115_build_expr((*(_25418_decl))._field_expr),_20caa3115_ReferenceStack::_static_method_new(),(*(_25418_decl))._field_directives,jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>()));
}



inline jule::Slice<jule::Ptr<_20cdc725d_Var>> _20caa3115_build_vars(jule::Slice<jule::Ptr<_20c476dc4_VarDecl>> _27219_decls) {
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _27313_vars = jule::Slice<jule::Ptr<_20cdc725d_Var>>::alloc(0LL,static_cast<jule::I64>(_27219_decls.len()));
	{
		auto &expr = _27219_decls;
		auto it = expr.begin();
		_iter_begin_5298606224:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_VarDecl> _20caa3115_decl = *it;
			{
				_27313_vars.push(_20caa3115_build_var(_20caa3115_decl));
			}
			_iter_next_5298606224:;
			++it;
			goto _iter_begin_5298606224;
		}
		_iter_end_5298606224:;
	}
	return _27313_vars;
}



inline jule::Ptr<_20cb5423d_Impl> _20caa3115_build_impl(jule::Ptr<_20c476dc4_Impl> _28019_decl) {
	return jule::new_struct<_20cb5423d_Impl>(new( std::nothrow ) _20cb5423d_Impl((*(_28019_decl))._field_base,(*(_28019_decl))._field_dest,_20caa3115_build_methods((*(_28019_decl))._field_methods),_20caa3115_build_vars((*(_28019_decl))._field_statics)));
}



inline jule::Ptr<_20cb4d853_ScopeChecker> _20cb4d853_new_scope_checker_base(jule::Ptr<_20cba60d6_Sema>& _4132_s,jule::Ptr<_20c819332_FnIns> _4146_owner) {
	return jule::new_struct_ptr<_20cb4d853_ScopeChecker>(new( std::nothrow ) _20cb4d853_ScopeChecker(_4132_s,_4146_owner,jule::Ptr<_20cb4d853_ScopeChecker>(),jule::Int(),jule::new_struct<_20d0c86e5_SymbolTable>(new( std::nothrow ) _20d0c86e5_SymbolTable()),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20c476dc4_ScopeTree>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Uintptr(),jule::Uintptr(),jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>>(),jule::Ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ptr<_20cb4d853_ScopeChecker> _20cb4d853_new_scope_checker(jule::Ptr<_20cba60d6_Sema>& _4927_s,jule::Ptr<_20c819332_FnIns> _4941_owner) {
	jule::Ptr<_20cb4d853_ScopeChecker> _5013_base = _20cb4d853_new_scope_checker_base(_4927_s,_4941_owner);
	(*(_5013_base))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeLabel>>>(nullptr);
	(*(_5013_base))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_20cb4d853_ScopeGoto>>>(nullptr);
	return _5013_base;
}



inline jule::Ptr<_20cb4d853_ScopeLabel> _20cb4d853_find_label_parent(jule::Str _5922_ident,jule::Ptr<_20cb4d853_ScopeChecker> _5938_scope) {
	jule::Ptr<_20cb4d853_ScopeLabel> _6013_label = (*(_5938_scope))._method_find_label_scope(_5922_ident);
	while (_6013_label == nullptr) {
		{
			if (((*(_5938_scope))._field_parent == nullptr) || ((*(_5938_scope))._field_owner != nullptr)) {
				return nullptr;
			}
			_5938_scope=(*(_5938_scope))._field_parent;
			_6013_label=(*(_5938_scope))._method_find_label_scope(_5922_ident);
		}
	_iter_next_5298618176:;
	}
	_iter_end_5298618176:;
	return _6013_label;
}



inline jule::Bool _20cb4d853_stmt_is_goto_scope(jule::Any& _7324_stmt,jule::Ptr<_20cb4d853_Scope>& _7336_sc) {
	{
		auto &_match_expr{ _7324_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_Scope>>()) {
			_case_begin_5298627552:;
			{
				return _7324_stmt.operator jule::Ptr<_20cb4d853_Scope>() == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_InfIter>>()) {
			_case_begin_5298627648:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_20cb4d853_InfIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RangeIter>>()) {
			_case_begin_5298626480:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_20cb4d853_RangeIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_WhileIter>>()) {
			_case_begin_5298626576:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_20cb4d853_WhileIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Match>>()) {
			_case_begin_5298626672:;
			{
				jule::Ptr<_20cb4d853_Match> _8813_m = _7324_stmt.operator jule::Ptr<_20cb4d853_Match>();
				{
					auto &expr = (*(_8813_m))._field_cases;
					auto it = expr.begin();
					_iter_begin_5298638192:;
					if (it != expr.end()) {
						jule::Ptr<_20cb4d853_Case> &_20cb4d853_c = *it;
						{
							if ((*(_20cb4d853_c))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_5298638192:;
						++it;
						goto _iter_begin_5298638192;
					}
					_iter_end_5298638192:;
				}
				return ((*(_8813_m))._field_default != nullptr) && ((*((*(_8813_m))._field_default))._field_scope == _7336_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Conditional>>()) {
			_case_begin_5298626768:;
			{
				jule::Ptr<_20cb4d853_Conditional> _9713_c = _7324_stmt.operator jule::Ptr<_20cb4d853_Conditional>();
				{
					auto &expr = (*(_9713_c))._field_elifs;
					auto it = expr.begin();
					_iter_begin_5298643520:;
					if (it != expr.end()) {
						jule::Ptr<_20cb4d853_If> &_20cb4d853_elif = *it;
						{
							if ((*(_20cb4d853_elif))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_5298643520:;
						++it;
						goto _iter_begin_5298643520;
					}
					_iter_end_5298643520:;
				}
				return ((*(_9713_c))._field_default != nullptr) && ((*((*(_9713_c))._field_default))._field_scope == _7336_sc);
			}
		}
		else {
			_case_begin_5298626176:;
			{
				return false;
			}
		}
		_match_end_5298621824:;
	}
}



inline jule::Int _20cb4d853_count_match_type(jule::Ptr<_20cb4d853_Match>& _11022_m,jule::Ptr<_20d4a6c9e_TypeKind>& _11034_t) {
	jule::Int _11113_n = 0LL;
	jule::Str _1129_kind = (*(_11034_t))._method_to_str();
	_julec_label_loop:;
	{
		auto &expr = (*(_11022_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5298649888:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_Case> &_20cb4d853_c = *it;
			{
				if (_20cb4d853_c == nullptr) {
					goto _iter_next_5298649888;
				}
				{
					auto &expr = (*(_20cb4d853_c))._field_exprs;
					auto it = expr.begin();
					_iter_begin_5298651424:;
					if (it != expr.end()) {
						jule::Ptr<_20d162d45_Data> &_20cb4d853_expr = *it;
						{
							if (_20cb4d853_expr == nullptr) {
								goto _iter_end_5298649888;
							}
							if (_1129_kind == (*((*(_20cb4d853_expr))._field_model.operator jule::Ptr<_20d4a6c9e_TypeKind>()))._method_to_str()) {
								(_11113_n)++;
							}
						}
						_iter_next_5298651424:;
						++it;
						goto _iter_begin_5298651424;
					}
					_iter_end_5298651424:;
				}
			}
			_iter_next_5298649888:;
			++it;
			goto _iter_begin_5298649888;
		}
		_iter_end_5298649888:;
	}
	return _11113_n;
}



inline jule::Slice<jule::Ptr<_20d162d45_Data>> _20cb4d853_get_datas_from_tuple_data(jule::Ptr<_20d162d45_Data>& _13435_d) {
	if ((*((*(_13435_d))._field_kind))._method_tup() != nullptr) {
		{
			auto &_match_expr{ (*(_13435_d))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_20ccedeed_TupleExprModel>>()) {
				_case_begin_5298664592:;
				{
					return (*((*(_13435_d))._field_model.operator jule::Ptr<_20ccedeed_TupleExprModel>()))._field_datas;
				}
			}
			else {
				_case_begin_5298657808:;
				{
					jule::Ptr<_20d4a6c9e_Tuple> _14121_t = (*((*(_13435_d))._field_kind))._method_tup();
					jule::Slice<jule::Ptr<_20d162d45_Data>> _14221_r = jule::Slice<jule::Ptr<_20d162d45_Data>>::alloc(0LL,static_cast<jule::I64>((*(_14121_t))._field_types.len()));
					{
						auto &expr = (*(_14121_t))._field_types;
						auto it = expr.begin();
						_iter_begin_5298662544:;
						if (it != expr.end()) {
							jule::Ptr<_20d4a6c9e_TypeKind> _20cb4d853_kind = *it;
							{
								_14221_r.push(jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(_20cb4d853_kind,jule::Ptr<_20d4a6c9e_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>())));
							}
							_iter_next_5298662544:;
							++it;
							goto _iter_begin_5298662544;
						}
						_iter_end_5298662544:;
					}
					return _14221_r;
				}
			}
			_match_end_5298657680:;
		}
	} else {
		return jule::Slice<jule::Ptr<_20d162d45_Data>>({_13435_d});
	}
}



inline jule::Slice<jule::Any> _20cb4d853_get_expr_models(jule::Any& _15625_m) {
	{
		auto &_match_expr{ _15625_m };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_TupleExpr>>()) {
			_case_begin_5298664384:;
			{
				jule::Ptr<_20c476dc4_TupleExpr> _15917_tup = _15625_m.operator jule::Ptr<_20c476dc4_TupleExpr>();
				jule::Slice<jule::Any> _16017_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_15917_tup))._field_expr.len()));
				{
					auto &expr = (*(_15917_tup))._field_expr;
					auto it = expr.begin();
					_iter_begin_5298673312:;
					if (it != expr.end()) {
						jule::Ptr<_20c476dc4_Expr> _20cb4d853_expr = *it;
						{
							_16017_models.push((*(_20cb4d853_expr))._field_kind);
						}
						_iter_next_5298673312:;
						++it;
						goto _iter_begin_5298673312;
					}
					_iter_end_5298673312:;
				}
				return _16017_models;
			}
		}
		else {
			_case_begin_5298668544:;
			{
				return jule::Slice<jule::Any>({_15625_m});
			}
		}
		_match_end_5298669712:;
	}
}



inline jule::Bool _20cb4d853_check_mut(jule::Ptr<_20cba60d6_Sema>& _17119_s,jule::Ptr<_20d162d45_Data>& _17130_left,jule::Ptr<_20d162d45_Data> _17147_right,_20c47803a_Token _17161_error_token) {
	jule::Bool _17183_ok = jule::Bool();
	{
		
		if ((!((*(_17130_left))._field_mutable))) {
			_case_begin_5298679744:;
			{
				(*(_17119_s))._method_push_err(_17161_error_token,jule::Str("cannot assign to immutable define", 33),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else if (((_17147_right != nullptr) && (!((*(_17147_right))._field_mutable))) && (*((*(_17147_right))._field_kind))._method_mutable()) {
			_case_begin_5298679952:;
			{
				(*(_17119_s))._method_push_err(_17161_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else {
			_case_begin_5298678288:;
			{
				_17183_ok = true;
				return _17183_ok;
			}
		}
		_match_end_5298678112:;
	}
}



inline jule::Bool _20cb4d853_check_assign(jule::Ptr<_20cba60d6_Sema>& _18622_s,jule::Ptr<_20d162d45_Data>& _18637_left,jule::Ptr<_20d162d45_Data> _18654_right,_20c47803a_Token _18668_error_token) {
	jule::Bool _18690_ok = jule::Bool();
	jule::Ptr<_20c819332_FnIns> _1879_f = (*((*(_18637_left))._field_kind))._method_fnc();
	if (((_1879_f != nullptr) && ((*(_1879_f))._field_decl != nullptr)) && (*((*(_1879_f))._field_decl))._field_global) {
		(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_18690_ok = false;
		return _18690_ok;
	}
	{
		
		if ((*(_18637_left))._method_is_const()) {
			_case_begin_5298697200:;
			{
				(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				(*(_18622_s))._method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!((*(_18637_left))._field_lvalue))) {
			_case_begin_5298697392:;
			{
				(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!(_20cb4d853_check_mut(_18622_s,_18637_left,_18654_right,_18668_error_token)))) {
			_case_begin_5298697488:;
			{
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else {
			_case_begin_5298695840:;
			{
				_18690_ok = true;
				return _18690_ok;
			}
		}
		_match_end_5298692080:;
	}
}



inline jule::Bool _20cb4d853_is_valid_ast_st_for_next_st(jule::Any& _21137_n) {
	{
		auto &_match_expr{ _21137_n };
		
		if (_match_expr.type_is<jule::Ptr<_20c476dc4_AssignSt>>()) {
			_case_begin_5298706544:;
			{
				return (!((*(_21137_n.operator jule::Ptr<_20c476dc4_AssignSt>()))._field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c476dc4_FnCallExpr>>() || _match_expr.type_is<jule::Ptr<_20c476dc4_Expr>>()) {
			_case_begin_5298706640:;
			{
				return true;
			}
		}
		else {
			_case_begin_5298698560:;
			{
				return false;
			}
		}
		_match_end_5298689504:;
	}
}



inline jule::Bool _20cb4d853_is_valid_st_for_next_st(jule::Any& _22529_st) {
	{
		auto &_match_expr{ _22529_st };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_FnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20cb4d853_Postfix>>() || _match_expr.type_is<jule::Ptr<_20cb4d853_Assign>>() || _match_expr.type_is<jule::Ptr<_20cb4d853_MultiAssign>>()) {
			_case_begin_5298711648:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
			_case_begin_5298711744:;
			{
				{
					auto &_match_expr{ (*(_22529_st.operator jule::Ptr<_20d162d45_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_20ccedeed_FnCallExprModel>>()) {
						_case_begin_5298720384:;
						{
							return true;
						}
					}
					else {
						_case_begin_5298718944:;
						{
							return false;
						}
					}
					_match_end_5298718864:;
				}
			}
		}
		else {
			_case_begin_5298709936:;
			{
				return false;
			}
		}
		_match_end_5298710432:;
	}
}



inline jule::Bool _20cb4d853_st_is_def(jule::Any& _24415_st) {
	{
		auto &_match_expr{ _24415_st };
		
		if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5298717664:;
			{
				return true;
			}
		}
		else {
			_case_begin_5298721360:;
			{
				return false;
			}
		}
		_match_end_5298721280:;
	}
}



inline jule::Ptr<_20cdc725d_Var> _20cba58cc_find_var_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _4129_files,jule::Str _4152_ident,jule::Bool _4164_cpp_linked) {
	{
		auto &expr = _4129_files;
		auto it = expr.begin();
		_iter_begin_5298723040:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba58cc_f = *it;
			{
				jule::Ptr<_20cdc725d_Var> _4317_v = (*(_20cba58cc_f))._method_find_var(_4152_ident,_4164_cpp_linked);
				if (_4317_v != nullptr) {
					return _4317_v;
				}
			}
			_iter_next_5298723040:;
			++it;
			goto _iter_begin_5298723040;
		}
		_iter_end_5298723040:;
	}
	return nullptr;
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20cba58cc_find_type_alias_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _5336_files,jule::Str _5359_ident,jule::Bool _5371_cpp_linked) {
	{
		auto &expr = _5336_files;
		auto it = expr.begin();
		_iter_begin_5298728016:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba58cc_f = *it;
			{
				jule::Ptr<_20d4a6c9e_TypeAlias> _5517_ta = (*(_20cba58cc_f))._method_find_type_alias(_5359_ident,_5371_cpp_linked);
				if (_5517_ta != nullptr) {
					return _5517_ta;
				}
			}
			_iter_next_5298728016:;
			++it;
			goto _iter_begin_5298728016;
		}
		_iter_end_5298728016:;
	}
	return nullptr;
}



inline jule::Ptr<_20c496047_Struct> _20cba58cc_find_struct_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _6532_files,jule::Str _6555_ident,jule::Bool _6567_cpp_linked) {
	{
		auto &expr = _6532_files;
		auto it = expr.begin();
		_iter_begin_5298733872:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba58cc_f = *it;
			{
				jule::Ptr<_20c496047_Struct> _6717_s = (*(_20cba58cc_f))._method_find_struct(_6555_ident,_6567_cpp_linked);
				if (_6717_s != nullptr) {
					return _6717_s;
				}
			}
			_iter_next_5298733872:;
			++it;
			goto _iter_begin_5298733872;
		}
		_iter_end_5298733872:;
	}
	return nullptr;
}



inline jule::Ptr<_20c819332_Fn> _20cba58cc_find_fn_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _7728_files,jule::Str _7751_ident,jule::Bool _7763_cpp_linked) {
	{
		auto &expr = _7728_files;
		auto it = expr.begin();
		_iter_begin_5298739728:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba58cc_file = *it;
			{
				jule::Ptr<_20c819332_Fn> _7917_f = (*(_20cba58cc_file))._method_find_fn(_7751_ident,_7763_cpp_linked);
				if (_7917_f != nullptr) {
					return _7917_f;
				}
			}
			_iter_next_5298739728:;
			++it;
			goto _iter_begin_5298739728;
		}
		_iter_end_5298739728:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb471a9_Trait> _20cba58cc_find_trait_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _8931_files,jule::Str _8954_ident) {
	{
		auto &expr = _8931_files;
		auto it = expr.begin();
		_iter_begin_5298746256:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba58cc_f = *it;
			{
				jule::Ptr<_20cb471a9_Trait> _9117_t = (*(_20cba58cc_f))._method_find_trait(_8954_ident);
				if (_9117_t != nullptr) {
					return _9117_t;
				}
			}
			_iter_next_5298746256:;
			++it;
			goto _iter_begin_5298746256;
		}
		_iter_end_5298746256:;
	}
	return nullptr;
}



inline jule::Ptr<_20cb4c70e_Enum> _20cba58cc_find_enum_in_package(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _10130_files,jule::Str _10153_ident) {
	{
		auto &expr = _10130_files;
		auto it = expr.begin();
		_iter_begin_5298751680:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba58cc_f = *it;
			{
				jule::Ptr<_20cb4c70e_Enum> _10317_e = (*(_20cba58cc_f))._method_find_enum(_10153_ident);
				if (_10317_e != nullptr) {
					return _10317_e;
				}
			}
			_iter_next_5298751680:;
			++it;
			goto _iter_begin_5298751680;
		}
		_iter_end_5298751680:;
	}
	return nullptr;
}



inline jule::Bool _20cba58cc_is_std_package(jule::Str _32219_f,jule::Str _32227_p) {
	return _20a405ddd_has_prefix(_32219_f,_20a3911b9_join(jule::Slice<jule::Str>({_20ba03198_PATH_STDLIB,_32227_p})));
}



inline jule::Bool _20cba60d6_is_valid_model_for_ref(jule::Any& _1232_m) {
	{
		auto &_match_expr{ _1232_m };
		
		if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5298759776:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructSubIdentExprModel>>()) {
			_case_begin_5298759872:;
			{
				jule::Ptr<_20ccedeed_StructSubIdentExprModel> _1817_model = _1232_m.operator jule::Ptr<_20ccedeed_StructSubIdentExprModel>();
				return _20cba60d6_is_valid_model_for_ref((*(_1817_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_TraitSubIdentExprModel>>()) {
			_case_begin_5298758672:;
			{
				jule::Ptr<_20ccedeed_TraitSubIdentExprModel> _2217_model = _1232_m.operator jule::Ptr<_20ccedeed_TraitSubIdentExprModel>();
				return _20cba60d6_is_valid_model_for_ref((*(_2217_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_UnaryExprModel>>()) {
			_case_begin_5298758768:;
			{
				jule::Ptr<_20ccedeed_UnaryExprModel> _2617_unary = _1232_m.operator jule::Ptr<_20ccedeed_UnaryExprModel>();
				if ((*(_2617_unary))._field_op._field_kind != jule::Str("*", 1)) {
					return false;
				}
				if ((*((*((*(_2617_unary))._field_expr))._field_kind))._method_ptr() != nullptr) {
					return true;
				}
				if ((*((*((*(_2617_unary))._field_expr))._field_kind))._method_sptr() == nullptr) {
					return false;
				}
				return _20cba60d6_is_valid_model_for_ref((*((*(_2617_unary))._field_expr))._field_model);
			}
		}
		else {
			_case_begin_5298752304:;
			{
				return false;
			}
		}
		_match_end_5298752224:;
	}
}



inline _20a25b99c_Log _20cba60d6_compiler_err(_20c47803a_Token& _4818_token,jule::Bool _4832_line,jule::Str _4844_fmt,jule::Slice<jule::Any> _4857_args) {
	_20a25b99c_Log _4913_log = _20a25b99c_Log(1LLU,_4818_token._field_row,_4818_token._field_column,(*(_4818_token._field_file))._method_path(),_20a25b99c_logf(_4844_fmt,_4857_args),jule::Str(),jule::Str());
	if (_4832_line) {
		_4913_log._field_line=(*(_4818_token._field_file))._method_get_row(_4818_token._field_row);
	}
	return _4913_log;
}



inline jule::Bool _20cba60d6_imp_is_lookupable(jule::Ptr<_20cba58cc_ImportInfo>& _6223_i,jule::Str _6239_ident) {
	if ((*(_6223_i))._field_cpp_linked) {
		return false;
	}
	if ((!((*(_6223_i))._field_import_all))) {
		if ((*(_6223_i))._field_selected.len() > 0LL) {
			return (*(_6223_i))._method_exist_ident(_6239_ident);
		}
	}
	return (*(_6223_i))._field_import_all;
}



inline jule::Slice<jule::Ptr<_20cdc725d_Var>> _20cba60d6_build_ret_vars(jule::Ptr<_20c819332_FnIns>& _7524_f) {
	if ((*((*(_7524_f))._field_decl))._method_is_void() || ((*(_7524_f))._field_result == nullptr)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _8013_vars = nullptr;
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _8113_types = _20d058ca2_get_result_types((*(_7524_f))._field_result);
	{
		auto &expr = (*((*((*(_7524_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_5298797152:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			_20c47803a_Token _20cba60d6_ident = *it;
			{
				if (_20c47803a_is_ignore_ident(_20cba60d6_ident._field_kind)) {
					goto _iter_next_5298797152;
				}
				jule::Ptr<_20cdc725d_Var> _8717_v = jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var((*(_7524_f))._field_scope,_20cba60d6_ident,_20cba60d6_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),_8113_types[_20cba60d6_i])),jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value(jule::Ptr<_20c476dc4_Expr>(),jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data()))),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>()));
				_8013_vars.push(_8717_v);
			}
			_iter_next_5298797152:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5298797152;
		}
		_iter_end_5298797152:;
	}
	return _8013_vars;
}



inline jule::Slice<jule::Ptr<_20cdc725d_Var>> _20cba60d6_build_param_vars(jule::Ptr<_20c819332_FnIns>& _10426_f) {
	if ((*(_10426_f))._field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20cdc725d_Var>> _10913_vars = jule::Slice<jule::Ptr<_20cdc725d_Var>>::alloc(0LL,static_cast<jule::I64>((*(_10426_f))._field_params.len()));
	{
		auto &expr = (*(_10426_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5298806768:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> _20cba60d6_p = *it;
			{
				jule::Ptr<_20cdc725d_Var> _11117_v = jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var((*(_10426_f))._field_scope,(*((*(_20cba60d6_p))._field_decl))._field_token,(*((*(_20cba60d6_p))._field_decl))._field_ident,jule::Bool(),jule::Bool(),(*((*(_20cba60d6_p))._field_decl))._field_mutable,jule::Bool(),true,jule::Bool(),(*((*(_20cba60d6_p))._field_decl))._field_reference,jule::Str(),jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol()),jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value(jule::Ptr<_20c476dc4_Expr>(),jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data()))),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>()));
				{
					
					if ((*((*(_20cba60d6_p))._field_decl))._method_is_self()) {
						_case_begin_5298815536:;
						{
							(*((*(_11117_v))._field_kind))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_10426_f))._field_owner));
							(*(_11117_v))._field_reference=true;
							if ((*((*(_20cba60d6_p))._field_decl))._method_is_ref()) {
								(*(_11117_v))._field_ident=(*(_11117_v))._field_ident.slice(1LL);
								(*((*((*(_11117_v))._field_kind))._field_kind))._field_kind=jule::new_struct_ptr<_20d4a6c9e_Sptr>(new( std::nothrow ) _20d4a6c9e_Sptr(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind((*((*((*(_11117_v))._field_kind))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*((*(_11117_v))._field_kind))._field_kind))._field_kind))));
							}
						}
					}
					else if ((*((*(_20cba60d6_p))._field_decl))._field_variadic) {
						_case_begin_5298815040:;
						{
							(*((*(_11117_v))._field_kind))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Slc>(new( std::nothrow ) _20d4a6c9e_Slc(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind((*((*(_20cba60d6_p))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*(_20cba60d6_p))._field_kind))._field_kind))))));
						}
					}
					else {
						_case_begin_5298814736:;
						{
							(*((*(_11117_v))._field_kind))._field_kind=(*(_20cba60d6_p))._field_kind;
						}
					}
					_match_end_5298814624:;
				}
				_10913_vars.push(_11117_v);
			}
			_iter_next_5298806768:;
			++it;
			goto _iter_begin_5298806768;
		}
		_iter_end_5298806768:;
	}
	return _10913_vars;
}



inline jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _20cba60d6_build_generic_type_aliases(jule::Ptr<_20c819332_FnIns>& _15936_f) {
	jule::I64 _16013_size = (*(_15936_f))._field_generics.len();
	if ((*((*(_15936_f))._field_decl))._field_owner != nullptr) {
		_16013_size+=static_cast<jule::I64>((*((*((*(_15936_f))._field_decl))._field_owner))._field_generics.len());
	}
	if (_16013_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>> _16913_aliases = jule::Slice<jule::Ptr<_20d4a6c9e_TypeAlias>>::alloc(0LL,_16013_size);
	{
		auto &expr = (*(_15936_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_5298836432:;
		if (it != expr.end()) {
			jule::Int _20cba60d6_i = it - expr.begin();
			jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_g = *it;
			{
				jule::Ptr<_20c476dc4_GenericDecl> _17217_decl = (*((*(_15936_f))._field_decl))._field_generics[_20cba60d6_i];
				_16913_aliases.push(jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias((*((*(_15936_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_17217_decl))._field_token,(*(_17217_decl))._field_ident,jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),_20cba60d6_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_5298836432:;
			++it;
			_20cba60d6_i++;
			goto _iter_begin_5298836432;
		}
		_iter_end_5298836432:;
	}
	if ((*((*(_15936_f))._field_decl))._field_owner != nullptr) {
		jule::Ptr<_20c496047_StructIns> _18417_owner = (*(_15936_f))._field_owner;
		{
			auto &expr = (*(_18417_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_5298841872:;
			if (it != expr.end()) {
				jule::Int _20cba60d6_i = it - expr.begin();
				jule::Ptr<_20d4a6c9e_TypeKind> _20cba60d6_g = *it;
				{
					jule::Ptr<_20c476dc4_GenericDecl> _18621_decl = (*((*(_18417_owner))._field_decl))._field_generics[_20cba60d6_i];
					_16913_aliases.push(jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias((*((*(_15936_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_18621_decl))._field_token,(*(_18621_decl))._field_ident,jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),_20cba60d6_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_5298841872:;
				++it;
				_20cba60d6_i++;
				goto _iter_begin_5298841872;
			}
			_iter_end_5298841872:;
		}
	}
	return _16913_aliases;
}



inline jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_find_file(jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>& _20119_files,jule::Ptr<_20c4792c2_File>& _20143_handler) {
	{
		auto &expr = _20119_files;
		auto it = expr.begin();
		_iter_begin_5298836320:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20cba60d6_fl = *it;
			{
				if ((*(_20cba60d6_fl))._field_file == _20143_handler) {
					return _20cba60d6_fl;
				}
			}
			_iter_next_5298836320:;
			++it;
			goto _iter_begin_5298836320;
		}
		_iter_end_5298836320:;
	}
	return nullptr;
}



inline std::tuple<jule::Bool,jule::Bool> _20cba60d6_conditional_has_ret(jule::Ptr<_20cb4d853_Conditional> _21028_c) {
	jule::Bool _21047_ok = jule::Bool();
	jule::Bool _21057_breaking = jule::Bool();
	jule::Bool _21113_breaked = false;
	{
		auto &expr = (*(_21028_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5298857184:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_If> _20cba60d6_elif = *it;
			{
				if (_20cba60d6_elif == nullptr) {
					_21047_ok = false;
					_21057_breaking = false;
					return std::make_tuple(_21047_ok,_21057_breaking);
				}
				std::tie(_21047_ok,std::ignore,_21057_breaking) = _20cba60d6___has_ret((*(_20cba60d6_elif))._field_scope);
				_21113_breaked=_21113_breaked || _21057_breaking;
				if ((!(_21047_ok))) {
					_21047_ok = false;
					_21057_breaking = _21113_breaked;
					return std::make_tuple(_21047_ok,_21057_breaking);
				}
			}
			_iter_next_5298857184:;
			++it;
			goto _iter_begin_5298857184;
		}
		_iter_end_5298857184:;
	}
	if ((*(_21028_c))._field_default == nullptr) {
		_21047_ok = false;
		_21057_breaking = _21113_breaked;
		return std::make_tuple(_21047_ok,_21057_breaking);
	}
	std::tie(_21047_ok,std::ignore,_21057_breaking) = _20cba60d6___has_ret((*((*(_21028_c))._field_default))._field_scope);
	_21113_breaked=_21113_breaked || _21057_breaking;
	_21057_breaking = _21113_breaked;
	return std::make_tuple(_21047_ok,_21057_breaking);
}



inline jule::Bool _20cba60d6_match_has_ret(jule::Ptr<_20cb4d853_Match> _23222_m) {
	if ((*(_23222_m))._field_default == nullptr) {
		return false;
	}
	jule::Bool _23713_ok = true;
	jule::Bool _23813_falled = false;
	jule::Bool _23913_breaked = false;
	{
		auto &expr = (*(_23222_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5298870304:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_Case> _20cba60d6_c = *it;
			{
				if (_20cba60d6_c == nullptr) {
					return false;
				}
				std::tie(_23713_ok,_23813_falled,_23913_breaked) = _20cba60d6___has_ret((*(_20cba60d6_c))._field_scope);
				if (((!(_23713_ok)) && (!(_23813_falled))) || _23913_breaked) {
					return false;
				}
				{
					
					if ((!(_23713_ok))) {
						_case_begin_5298874880:;
						{
							if ((!(_23813_falled))) {
								return false;
							}
							goto _case_begin_5298874976;
						}
					}
					else if (_23813_falled) {
						_case_begin_5298874976:;
						{
							if ((*(_20cba60d6_c))._field_next == nullptr) {
								return false;
							}
							goto _iter_next_5298870304;
						}
					}
					_match_end_5298874752:;
				}
				_23813_falled=false;
			}
			_iter_next_5298870304:;
			++it;
			goto _iter_begin_5298870304;
		}
		_iter_end_5298870304:;
	}
	return _20cba60d6_has_ret((*((*(_23222_m))._field_default))._field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _20cba60d6___has_ret(jule::Ptr<_20cb4d853_Scope> _26818_s) {
	jule::Bool _26831_ok = jule::Bool();
	jule::Bool _26841_falled = jule::Bool();
	jule::Bool _26855_breaked = jule::Bool();
	if (_26818_s == nullptr) {
		_26831_ok = false;
		_26841_falled = false;
		_26855_breaked = false;
		return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
	}
	{
		auto &expr = (*(_26818_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_5298881184:;
		if (it != expr.end()) {
			jule::Any _20cba60d6_st = *it;
			{
				{
					auto &_match_expr{ _20cba60d6_st };
					
					if (_match_expr.type_is<jule::Ptr<_20cb4d853_FallSt>>()) {
						_case_begin_5298885136:;
						{
							_26841_falled=true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_BreakSt>>()) {
						_case_begin_5298885232:;
						{
							_26831_ok = false;
							_26841_falled = false;
							_26855_breaked = true;
							return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_ContSt>>()) {
						_case_begin_5298885328:;
						{
							_26831_ok = false;
							_26841_falled = false;
							_26855_breaked = true;
							return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_InfIter>>()) {
						_case_begin_5298885424:;
						{
							_26831_ok=_20cba60d6_has_ret((*(_20cba60d6_st.operator jule::Ptr<_20cb4d853_InfIter>()))._field_scope);
							if (_26831_ok) {
								_26831_ok = true;
								_26841_falled = false;
								_26855_breaked = false;
								return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RetSt>>()) {
						_case_begin_5298885520:;
						{
							_26831_ok = true;
							return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Scope>>()) {
						_case_begin_5298885616:;
						{
							_26831_ok=_20cba60d6_has_ret(_20cba60d6_st.operator jule::Ptr<_20cb4d853_Scope>());
							if (_26831_ok) {
								_26831_ok = true;
								_26841_falled = false;
								_26855_breaked = false;
								return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
						_case_begin_5298885712:;
						{
							{
								auto &_match_expr{ (*(_20cba60d6_st.operator jule::Ptr<_20d162d45_Data>()))._field_model };
								
								if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>>()) {
									_case_begin_5298902704:;
									{
										_26831_ok = true;
										return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
									}
								}
								_match_end_5298902624:;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Conditional>>()) {
						_case_begin_5298885808:;
						{
							std::tie(_26831_ok,_26855_breaked) = _20cba60d6_conditional_has_ret(_20cba60d6_st.operator jule::Ptr<_20cb4d853_Conditional>());
							if (_26831_ok) {
								_26831_ok = true;
								_26841_falled = false;
								_26855_breaked = false;
								return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
							}
							if (_26855_breaked) {
								_26831_ok = false;
								_26841_falled = false;
								return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Match>>()) {
						_case_begin_5298885920:;
						{
							_26831_ok=_20cba60d6_match_has_ret(_20cba60d6_st.operator jule::Ptr<_20cb4d853_Match>());
							if (_26831_ok) {
								_26831_ok = true;
								_26841_falled = false;
								_26855_breaked = false;
								return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
							}
						}
					}
					_match_end_5298884864:;
				}
			}
			_iter_next_5298881184:;
			++it;
			goto _iter_begin_5298881184;
		}
		_iter_end_5298881184:;
	}
	_26831_ok = false;
	return std::make_tuple(_26831_ok,_26841_falled,_26855_breaked);
}



inline jule::Bool _20cba60d6_has_ret(jule::Ptr<_20cb4d853_Scope> _32716_s) {
	jule::Bool _32810_ok;
	std::tie(_32810_ok,std::ignore,std::ignore) = _20cba60d6___has_ret(_32716_s);
	return _32810_ok;
}



inline void _20cba60d6_push_suggestion(_20a25b99c_Log* _33231_log,jule::Str _33242_fmt,jule::Slice<jule::Any> _33255_args) {
	(*(_33231_log))._field_suggestion=_20a25b99c_logf(_33242_fmt,_33255_args);
}



inline jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>> _20d058ca2_get_result_types(jule::Ptr<_20d4a6c9e_TypeKind>& _2626_result) {
	{
		
		if (_2626_result == nullptr) {
			_case_begin_5298919728:;
			{
				return nullptr;
			}
		}
		else if ((*(_2626_result))._method_tup() == nullptr) {
			_case_begin_5298919360:;
			{
				return jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>({_2626_result});
			}
		}
		else {
			_case_begin_5298918352:;
			{
				return (*((*(_2626_result))._method_tup()))._field_types;
			}
		}
		_match_end_5298916656:;
	}
}



inline jule::Bool _20d058ca2_trait_has_reference_receiver(jule::Ptr<_20cb471a9_Trait>& _3934_t) {
	{
		auto &expr = (*(_3934_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_5298922432:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> &_20d058ca2_f = *it;
			{
				if ((*(_20d058ca2_f))._field_statically) {
					goto _iter_next_5298922432;
				}
				jule::Ptr<_20c819332_Param> _4613_p = (*(_20d058ca2_f))._field_params[0LL];
				if ((*(_4613_p))._method_is_ref() && (*(_4613_p))._method_is_self()) {
					return true;
				}
			}
			_iter_next_5298922432:;
			++it;
			goto _iter_begin_5298922432;
		}
		_iter_end_5298922432:;
	}
	return false;
}



inline jule::Bool _20d058ca2_float_assignable(jule::Str _5421_kind,jule::Ptr<_20d162d45_Data>& _5433_d) {
	jule::Str _559_value = _20b639c14_fmt_float(static_cast<jule::F64>((*((*(_5433_d))._field_constant))._method_as_f64()),'g',-1LL,64LL);
	return _20d78c6b1_check_bit_float(_559_value,static_cast<jule::Int>(_20d78c6b1_bitsize_of(_5421_kind)));
}



inline jule::Bool _20d058ca2_sig_assignable(jule::Str _5919_kind,jule::Ptr<_20d162d45_Data>& _5931_d) {
	jule::F64 _609_min = _20d78e96b_min(_5919_kind);
	jule::F64 _619_max = _20d78e96b_max(_5919_kind);
	{
		
		if ((*((*(_5931_d))._field_constant))._method_is_f64()) {
			_case_begin_5298936176:;
			{
				jule::F64 _6513_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_f64());
				jule::F64 _6614_i;
				jule::F64 _6617_frac;
				std::tie(_6614_i,_6617_frac) = _20becedc2_modf(_6513_x);
				if (_6617_frac != 0LL) {
					return false;
				}
				return (_6614_i >= _609_min) && (_6614_i <= _619_max);
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_u64()) {
			_case_begin_5298936272:;
			{
				jule::F64 _7313_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_u64());
				if (_7313_x <= _619_max) {
					return true;
				}
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_i64()) {
			_case_begin_5298936368:;
			{
				jule::F64 _7913_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_i64());
				return (_609_min <= _7913_x) && (_7913_x <= _619_max);
			}
		}
		_match_end_5298935872:;
	}
	return false;
}



inline jule::Bool _20d058ca2_unsig_assignable(jule::Str _8621_kind,jule::Ptr<_20d162d45_Data>& _8633_d) {
	jule::F64 _879_max = _20d78e96b_max(_8621_kind);
	if ((*(_8633_d))._field_is_rune && (_8621_kind == jule::Str("u8", 2))) {
		return _20d8c32b9_is_ascii(static_cast<jule::I32>(static_cast<jule::I32>((*((*(_8633_d))._field_constant))._method_read_i64())));
	}
	{
		
		if ((*((*(_8633_d))._field_constant))._method_is_f64()) {
			_case_begin_5298952176:;
			{
				jule::F64 _9413_x = (*((*(_8633_d))._field_constant))._method_read_f64();
				if (_9413_x < 0LL) {
					return false;
				}
				jule::F64 _9914_i;
				jule::F64 _9917_frac;
				std::tie(_9914_i,_9917_frac) = _20becedc2_modf(_9413_x);
				if (_9917_frac != 0LL) {
					return false;
				}
				return _9914_i <= _879_max;
			}
		}
		else if ((*((*(_8633_d))._field_constant))._method_is_u64()) {
			_case_begin_5298952272:;
			{
				jule::F64 _10613_x = static_cast<jule::F64>((*((*(_8633_d))._field_constant))._method_read_u64());
				if (_10613_x <= _879_max) {
					return true;
				}
			}
		}
		else if ((*((*(_8633_d))._field_constant))._method_is_i64()) {
			_case_begin_5298952368:;
			{
				jule::F64 _11213_x = static_cast<jule::F64>((*((*(_8633_d))._field_constant))._method_read_i64());
				return (0LL <= _11213_x) && (_11213_x <= _879_max);
			}
		}
		_match_end_5298951824:;
	}
	return false;
}



inline jule::Bool _20d058ca2_int_assignable(jule::Str _11919_kind,jule::Ptr<_20d162d45_Data>& _11931_d) {
	{
		
		if (_20d853821_is_sig_int(_11919_kind)) {
			_case_begin_5298972128:;
			{
				return _20d058ca2_sig_assignable(_11919_kind,_11931_d);
			}
		}
		else if (_20d853821_is_unsig_int(_11919_kind)) {
			_case_begin_5298972224:;
			{
				return _20d058ca2_unsig_assignable(_11919_kind,_11931_d);
			}
		}
		else {
			_case_begin_5298965664:;
			{
				return false;
			}
		}
		_match_end_5298965488:;
	}
}



inline jule::Ptr<_20c476dc4_Directive> _20d162d45_find_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>& _5124_directives,jule::Str _5166_d) {
	{
		auto &expr = _5124_directives;
		auto it = expr.begin();
		_iter_begin_5298974080:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> _20d162d45_dr = *it;
			{
				if ((*(_20d162d45_dr))._field_tag._field_kind == _5166_d) {
					return _20d162d45_dr;
				}
			}
			_iter_next_5298974080:;
			++it;
			goto _iter_begin_5298974080;
		}
		_iter_end_5298974080:;
	}
	return nullptr;
}



inline jule::Any _20d162d45_find_builtins_import(jule::Str _6025_ident,jule::Ptr<_20cba58cc_ImportInfo> _6037_imp) {
	return _20d68a5ae_find_package_builtin_def((*(_6037_imp))._field_link_path,_6025_ident);
}



inline void _20d162d45_make_struct_lit_alloc(jule::Ptr<_20d162d45_Data>& _6431_d,jule::Ptr<_20ccedeed_StructLitExprModel>& _6446_lit) {
	(*(_6431_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Sptr>(new( std::nothrow ) _20d4a6c9e_Sptr(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_6446_lit))._field_strct))))));
	(*(_6431_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_AllocStructLitExprModel>(new( std::nothrow ) _20ccedeed_AllocStructLitExprModel(_6446_lit)));
}



inline jule::Ptr<_20cdc725d_Var> _20d162d45_build_error_var(jule::Ptr<_20cb4d853_Scope>& _7625_s,jule::Ptr<_20c476dc4_FnCallExpr>& _7641_fc) {
	return jule::new_struct<_20cdc725d_Var>(new( std::nothrow ) _20cdc725d_Var(_7625_s,(*(_7641_fc))._field_token,jule::Str("error", 5),jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),false,jule::Str(),jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("any", 3)))))),jule::new_struct<_20d162d45_Value>(new( std::nothrow ) _20d162d45_Value(jule::Ptr<_20c476dc4_Expr>(),jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data()))),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Ptr<_20cdc725d_IterRelation>(),jule::Slice<jule::Ptr<_20cdc725d_Var>>()));
}



inline jule::Any _20d162d45_find_builtins_sema(jule::Str _9523_ident,jule::Ptr<_20cba60d6_Sema> _9539_s) {
	{
		auto &expr = (*((*(_9539_s))._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5298989632:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20d162d45_imp = *it;
			{
				if ((*(_20d162d45_imp))._field_import_all || (*(_20d162d45_imp))._method_exist_ident(_9523_ident)) {
					jule::Any _9821_def = _20d162d45_find_builtins_import(_9523_ident,_20d162d45_imp);
					if (_9821_def != nullptr) {
						return _9821_def;
					}
				}
			}
			_iter_next_5298989632:;
			++it;
			goto _iter_begin_5298989632;
		}
		_iter_end_5298989632:;
	}
	jule::Str _10613_ppath = (*((*((*(_9539_s))._field_file))._field_file))._method_dir();
	if (_20a405ddd_has_prefix(_10613_ppath,_20ba03198_PATH_STDLIB)) {
		_10613_ppath=_10613_ppath.slice(_20ba03198_PATH_STDLIB.len());
		_10613_ppath=jule::Str("std", 3) + _20a405ddd_replace(_10613_ppath,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
		return _20d68a5ae_find_package_builtin_def(_10613_ppath,_9523_ident);
	}
	return jule::Any(nullptr);
}



inline jule::Bool _20d162d45_is_ok_for_shifting(jule::Ptr<_20d162d45_Data>& _12028_d) {
	jule::Ptr<_20d4a6c9e_Prim> _1219_prim = (*((*(_12028_d))._field_kind))._method_prim();
	if ((_1219_prim == nullptr) || (!(_20d853821_is_int((*(_1219_prim))._method_to_str())))) {
		return false;
	}
	if ((!((*(_12028_d))._method_is_const()))) {
		return true;
	}
	{
		
		if ((*((*(_12028_d))._field_constant))._method_is_i64()) {
			_case_begin_5299007776:;
			{
				return (*((*(_12028_d))._field_constant))._method_read_i64() >= 0LL;
			}
		}
		else if ((*((*(_12028_d))._field_constant))._method_is_u64()) {
			_case_begin_5299007872:;
			{
				return true;
			}
		}
		else {
			_case_begin_5299005216:;
			{
				return false;
			}
		}
		_match_end_5299005104:;
	}
}



inline jule::Bool _20d162d45_is_instanced_struct(jule::Ptr<_20c496047_StructIns> _13724_s) {
	return (*((*(_13724_s))._field_decl))._field_generics.len() == (*(_13724_s))._field_generics.len();
}



inline jule::Bool _20d162d45_is_ptr_arithmetic_compatible_int(jule::Ptr<_20d162d45_Data>& _14142_d) {
	if ((*(_14142_d))._method_is_const()) {
		return _20d058ca2_int_assignable(jule::Str("int", 3),_14142_d);
	}
	_20d058ca2_TypeCompatibilityChecker _14513_tcc = _20d058ca2_TypeCompatibilityChecker(jule::Ptr<_20cba60d6_Sema>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3)))),(*(_14142_d))._field_kind,_20c47803a_Token());
	return _14513_tcc._method_check();
}



inline void _20d162d45_normalize_bitsize(jule::Ptr<_20d162d45_Data>& _15227_d) {
	if ((!((*(_15227_d))._method_is_const()))) {
		return;
	}
	jule::Str _15713_kind = jule::Str();
	{
		
		if ((*((*(_15227_d))._field_constant))._method_is_i64()) {
			_case_begin_5299025744:;
			{
				jule::I64 _16013_x = (*((*(_15227_d))._field_constant))._method_read_i64();
				_15713_kind=_20d78c6b1_int_from_bits(static_cast<jule::U64>(_20d78c6b1_bitsize_of_int(_16013_x)));
			}
		}
		else if ((*((*(_15227_d))._field_constant))._method_is_u64()) {
			_case_begin_5299025840:;
			{
				jule::U64 _16413_x = (*((*(_15227_d))._field_constant))._method_read_u64();
				_15713_kind=_20d78c6b1_uint_from_bits(static_cast<jule::U64>(_20d78c6b1_bitsize_of_uint(_16413_x)));
			}
		}
		else {
			_case_begin_5299024752:;
			{
				return;
			}
		}
		_match_end_5299024512:;
	}
	if ((*((*(_15227_d))._field_kind))._method_enm() != nullptr) {
		return;
	}
	(*((*(_15227_d))._field_kind))._field_kind=_20d4a6c9e_build_prim_type(_15713_kind);
}



inline void _20d162d45_normalize_type(jule::Ptr<_20d162d45_Data>& _17924_d) {
	{
		
		if (_20d058ca2_int_assignable(jule::Str("int", 3),_17924_d)) {
			_case_begin_5299037392:;
			{
				(*((*(_17924_d))._field_kind))._field_kind=_20d4a6c9e_build_prim_type(jule::Str("int", 3));
				(*((*(_17924_d))._field_constant))._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*(_17924_d))._field_constant))._method_as_f64())));
			}
		}
		else if (_20d058ca2_int_assignable(jule::Str("uint", 4),_17924_d)) {
			_case_begin_5299037504:;
			{
				(*((*(_17924_d))._field_kind))._field_kind=_20d4a6c9e_build_prim_type(jule::Str("uint", 4));
				(*((*(_17924_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*((*(_17924_d))._field_constant))._method_as_f64())));
			}
		}
		_match_end_5299037232:;
	}
}



inline void _20d162d45_fit_type(jule::Ptr<_20d162d45_Data>& _19218_d) {
	if ((!((*(_19218_d))._method_is_const()))) {
		return;
	}
	jule::Ptr<_20d4a6c9e_Prim> _1979_p = (*((*(_19218_d))._field_kind))._method_prim();
	if (_1979_p == nullptr) {
		return;
	}
	jule::Str _2029_k = (*(_1979_p))._field_kind;
	{
		
		if (_20d853821_is_float(_2029_k)) {
			_case_begin_5299051632:;
			{
				(*((*(_19218_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_19218_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_20d853821_is_sig_int(_2029_k)) {
			_case_begin_5299051728:;
			{
				(*((*(_19218_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_19218_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_20d853821_is_unsig_int(_2029_k)) {
			_case_begin_5299051840:;
			{
				(*((*(_19218_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_19218_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_5299051440:;
	}
}



inline void _20d162d45_apply_cast_kind_model(jule::Ptr<_20d162d45_Data>& _21031_d) {
	(*(_21031_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_CastingExprModel>(new( std::nothrow ) _20ccedeed_CastingExprModel(_20c47803a_Token(),(*(_21031_d))._field_model,(*(_21031_d))._field_cast_kind,(*(_21031_d))._field_kind)));
}



inline void _20d162d45_apply_cast_kind(jule::Ptr<_20d162d45_Data>& _21825_d) {
	if ((*(_21825_d))._field_cast_kind == nullptr) {
		return;
	}
	_20d162d45_apply_cast_kind_model(_21825_d);
	(*(_21825_d))._field_kind=(*(_21825_d))._field_cast_kind;
	(*(_21825_d))._field_cast_kind=nullptr;
}



inline jule::Ptr<_20d162d45_Data> _20d162d45_build_void_data(void) {
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("void", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Str _20d162d45_check_data_for_integer_indexing(jule::Ptr<_20d162d45_Data>& _25841_d) {
	jule::Str _25853_err_fmt = jule::Str();
	if (_25841_d == nullptr) {
		_25853_err_fmt = jule::Str();
		return _25853_err_fmt;
	}
	{
		
		if ((*((*(_25841_d))._field_kind))._method_prim() == nullptr) {
			_case_begin_5299081504:;
			{
				_25853_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _25853_err_fmt;
			}
		}
		else if ((!(_20d853821_is_int((*((*((*(_25841_d))._field_kind))._method_prim()))._method_to_str())))) {
			_case_begin_5299082128:;
			{
				_25853_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _25853_err_fmt;
			}
		}
		else if ((*(_25841_d))._method_is_const()) {
			_case_begin_5299082224:;
			{
				if ((*((*(_25841_d))._field_constant))._method_as_f64() < 0LL) {
					_25853_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _25853_err_fmt;
				}
			}
		}
		else if ((*((*(_25841_d))._field_kind))._method_prim() == nullptr || (*(_25841_d))._method_is_const() || _20d78c6b1_real_kind_of((*((*((*(_25841_d))._field_kind))._method_prim()))._method_to_str()) != _20d78c6b1_real_kind_of(jule::Str("int", 3))) {
			_case_begin_5299082320:;
			{
				(*(_25841_d))._field_cast_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3))));
				_20d162d45_apply_cast_kind(_25841_d);
			}
		}
		_match_end_5299069184:;
	}
	_25853_err_fmt = jule::Str();
	return _25853_err_fmt;
}



inline jule::Bool _20d4a6c9e_has_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>& _3323_directives,jule::Str _3354_tag) {
	{
		auto &expr = _3323_directives;
		auto it = expr.begin();
		_iter_begin_5299096848:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> _20d4a6c9e_dr = *it;
			{
				if ((*(_20d4a6c9e_dr))._field_tag._field_kind == _3354_tag) {
					return true;
				}
			}
			_iter_next_5299096848:;
			++it;
			goto _iter_begin_5299096848;
		}
		_iter_end_5299096848:;
	}
	return false;
}



inline jule::Bool _20d4a6c9e_can_get_ptr(jule::Ptr<_20d162d45_Data>& _55721_d) {
	if ((!((*(_55721_d))._field_lvalue)) || (*(_55721_d))._method_is_const()) {
		return false;
	}
	{
		
		if (((*((*(_55721_d))._field_kind))._method_fnc() != nullptr) || ((*((*(_55721_d))._field_kind))._method_enm() != nullptr)) {
			_case_begin_5299103168:;
			{
				return false;
			}
		}
		else {
			_case_begin_5299101536:;
			{
				return true;
			}
		}
		_match_end_5299097840:;
	}
}



inline jule::Bool _20d4a6c9e_is_valid_for_sptr_type(jule::Ptr<_20d4a6c9e_TypeKind>& _57232_t) {
	jule::Ptr<_20c496047_StructIns> _57313_s = (*(_57232_t))._method_strct();
	if (((_57313_s != nullptr) && ((*(_57313_s))._field_decl != nullptr)) && (*((*(_57313_s))._field_decl))._field_cpp_linked) {
		return false;
	}
	return true;
}



inline jule::Bool _20d4a6c9e_is_valid_for_ref(jule::Ptr<_20d4a6c9e_TypeKind>& _58126_t) {
	return (*(_58126_t))._method_fnc() == nullptr;
}



inline jule::Bool _20d4a6c9e_is_builtin_str_convertable(jule::Ptr<_20d4a6c9e_TypeKind>& _58436_t) {
	return ((!((*(_58436_t))._method_void())) && ((*(_58436_t))._method_fnc() == nullptr)) && ((*(_58436_t))._method_tup() == nullptr);
}



inline jule::Str _20d4a6c9e_build_link_path_by_tokens(jule::Slice<_20c47803a_Token>& _58831_tokens) {
	jule::Str _58913_s = _58831_tokens[0LL]._field_kind;
	{
		auto expr = _58831_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_5299117344:;
		if (it != expr.end()) {
			_20c47803a_Token &_20d4a6c9e_token = *it;
			{
				_58913_s+=jule::Str("::", 2);
				_58913_s+=_20d4a6c9e_token._field_kind;
			}
			_iter_next_5299117344:;
			++it;
			goto _iter_begin_5299117344;
		}
		_iter_end_5299117344:;
	}
	return _58913_s;
}



inline jule::Ptr<_20d4a6c9e_Prim> _20d4a6c9e_build_prim_type(jule::Str _59720_kind) {
	return jule::new_struct_ptr<_20d4a6c9e_Prim>(new( std::nothrow ) _20d4a6c9e_Prim(_59720_kind));
}



inline jule::Ptr<_20c496047_Struct> _20d4a6c9e_get_struct_from_kind(jule::Ptr<_20d4a6c9e_TypeKind> _60329_k) {
	{
		
		if (_60329_k == nullptr) {
			_case_begin_5299122576:;
			{
				return nullptr;
			}
		}
		else if ((*(_60329_k))._method_strct() != nullptr) {
			_case_begin_5299122672:;
			{
				return (*((*(_60329_k))._method_strct()))._field_decl;
			}
		}
		else if ((*(_60329_k))._method_sptr() != nullptr) {
			_case_begin_5299122000:;
			{
				return _20d4a6c9e_get_struct_from_kind((*((*(_60329_k))._method_sptr()))._field_elem);
			}
		}
		else if ((*(_60329_k))._method_slc() != nullptr) {
			_case_begin_5299122096:;
			{
				return _20d4a6c9e_get_struct_from_kind((*((*(_60329_k))._method_slc()))._field_elem);
			}
		}
		else if ((*(_60329_k))._method_arr() != nullptr) {
			_case_begin_5299122192:;
			{
				return _20d4a6c9e_get_struct_from_kind((*((*(_60329_k))._method_arr()))._field_elem);
			}
		}
		else if ((*(_60329_k))._method_ptr() != nullptr) {
			_case_begin_5299121312:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_5299121008:;
			{
				return nullptr;
			}
		}
		_match_end_5299120576:;
	}
}



inline jule::Bool _20d4a6c9e_is_prim(jule::Str _63212_kind) {
	return (((((((((((((((_63212_kind == jule::Str("i8", 2)) || (_63212_kind == jule::Str("i16", 3))) || (_63212_kind == jule::Str("i32", 3))) || (_63212_kind == jule::Str("i64", 3))) || (_63212_kind == jule::Str("u8", 2))) || (_63212_kind == jule::Str("u16", 3))) || (_63212_kind == jule::Str("u32", 3))) || (_63212_kind == jule::Str("u64", 3))) || (_63212_kind == jule::Str("f32", 3))) || (_63212_kind == jule::Str("f64", 3))) || (_63212_kind == jule::Str("int", 3))) || (_63212_kind == jule::Str("uint", 4))) || (_63212_kind == jule::Str("uintptr", 7))) || (_63212_kind == jule::Str("bool", 4))) || (_63212_kind == jule::Str("str", 3))) || (_63212_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ptr<_20d0c86e5_SymbolTable>,jule::Slice<_20a25b99c_Log>> _20d5c9454_build_symbols(jule::Ptr<_20c476126_Ast>& _1523_ast,jule::Trait<_20cba58cc_Importer>& _1539_importer,jule::Ptr<_20caa3115_SymbolBuilder> _1563_owner) {
	jule::Ptr<_20caa3115_SymbolBuilder> _1613_sb = jule::new_struct_ptr<_20caa3115_SymbolBuilder>(new( std::nothrow ) _20caa3115_SymbolBuilder(_1563_owner,_1539_importer,jule::Slice<_20a25b99c_Log>(),_1523_ast,jule::Ptr<_20d0c86e5_SymbolTable>()));
	(*(_1613_sb))._method_build();
	if ((*(_1613_sb))._field_errors.len() == 0LL) {
		return std::make_tuple((*(_1613_sb))._field_table,nullptr);
	}
	return std::make_tuple(nullptr,(*(_1613_sb))._field_errors);
}



inline std::tuple<jule::Ptr<_20cba58cc_Package>,jule::Slice<_20a25b99c_Log>> _20d5c9454___analyze_package(jule::Slice<jule::Ptr<_20c476126_Ast>>& _2927_files,jule::Trait<_20cba58cc_Importer>& _2947_importer,jule::Int& _2968_flags) {
	jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>::alloc(0LL,static_cast<jule::I64>(_2927_files.len()));
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_5299152704:;
		if (it != expr.end()) {
			jule::Ptr<_20c476126_Ast> _20d5c9454_f = *it;
			{
				jule::Ptr<_20d0c86e5_SymbolTable> _3318_table;
				jule::Slice<_20a25b99c_Log> _3329_errors;
				std::tie(_3318_table,_3329_errors) = _20d5c9454_build_symbols(_20d5c9454_f,_2947_importer,nullptr);
				if (_3329_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_3329_errors);
				}
				_3113_tables.push(_3318_table);
			}
			_iter_next_5299152704:;
			++it;
			goto _iter_begin_5299152704;
		}
		_iter_end_5299152704:;
	}
	jule::Ptr<_20cba60d6_Sema> _4013_sema = jule::new_struct_ptr<_20cba60d6_Sema>(new( std::nothrow ) _20cba60d6_Sema(jule::Slice<_20a25b99c_Log>(),jule::Slice<jule::Ptr<_20d0c86e5_SymbolTable>>(),jule::Ptr<_20d0c86e5_SymbolTable>(),_2968_flags));
	(*(_4013_sema))._method_check(_3113_tables);
	if ((*(_4013_sema))._field_errors.len() > 0LL) {
		return std::make_tuple(nullptr,(*(_4013_sema))._field_errors);
	}
	jule::Ptr<_20cba58cc_Package> _4813_pkg = jule::new_struct<_20cba58cc_Package>(new( std::nothrow ) _20cba58cc_Package((*(_4013_sema))._field_files));
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_20cba58cc_Package>,jule::Slice<_20a25b99c_Log>> _20d5c9454_analyze_package(jule::Slice<jule::Ptr<_20c476126_Ast>> _7228_files,jule::Trait<_20cba58cc_Importer> _7247_importer,jule::Int _7267_flags) {
	if (_7228_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_20cba58cc_Package> _7714_package;
	jule::Slice<_20a25b99c_Log> _7727_logs;
	std::tie(_7714_package,_7727_logs) = _20d5c9454___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)> _20d68a5ae_find_builtin_caller(jule::U8 _7924_c) {
	{
		auto &_match_expr{ _7924_c };
		
		if (_match_expr == 1LLU) {
			_case_begin_5299179744:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_common);
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_5299180096:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_common_mut);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5299178880:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_common_plain);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_5299178976:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_out);
			}
		}
		else if (_match_expr == 5LLU) {
			_case_begin_5299179072:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_outln);
			}
		}
		else if (_match_expr == 6LLU) {
			_case_begin_5299179168:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_new);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5299179264:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_panic);
			}
		}
		else if (_match_expr == 8LLU) {
			_case_begin_5299180608:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_copy);
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_5299180704:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_make);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5299180800:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_append);
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_5299180896:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_clone);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_5299180992:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_assert);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_5299181088:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_mem_size_of);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_5299181184:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_mem_align_of);
			}
		}
		else if (_match_expr == 19LLU) {
			_case_begin_5299181280:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_mem_free);
			}
		}
		else if (_match_expr == 15LLU) {
			_case_begin_5299181376:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_jule_integrated_to_str);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_5299181488:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_jule_integrated_inline);
			}
		}
		else if (_match_expr == 17LLU) {
			_case_begin_5299181600:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_debug_out);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_5299181712:;
			{
				return jule::Fn<jule::Ptr<_20d162d45_Data>(jule::Ptr<_20d162d45_Eval>&,jule::Ptr<_20c476dc4_FnCallExpr>&,jule::Ptr<_20d162d45_Data>&)>(_20d68a5ae_builtin_caller_std_debug_outln);
			}
		}
		else {
			_case_begin_5299177104:;
			{
				jule::panic(jule::Str("builtin caller not exist", 24) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/jule/sema/builtin.jule:139:9"));;
			}
		}
		_match_end_5299178320:;
	}
}



inline jule::Ptr<_20c819332_FnIns> _20d68a5ae_find_builtin_fn(jule::Str _14320_ident) {
	{
		auto &_match_expr{ _14320_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_5299194640:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),4LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_5299194736:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),5LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_5299194832:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),6LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_5299195456:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),7LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_5299195552:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),9LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_5299195648:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),10LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_5299195744:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),8LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_5299195840:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),11LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_5299195936:;
			{
				return jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),12LLU,jule::Bool()));
			}
		}
		else {
			_case_begin_5299191328:;
			{
				return nullptr;
			}
		}
		_match_end_5299195184:;
	}
}



inline jule::Ptr<_20d4a6c9e_TypeAlias> _20d68a5ae_find_builtin_type_alias(jule::Str _15828_ident) {
	{
		auto &_match_expr{ _15828_ident };
		
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_5299207552:;
			{
				return _20d68a5ae_BUILTIN_TYPE_ALIAS_BYTE;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_5299207712:;
			{
				return _20d68a5ae_BUILTIN_TYPE_ALIAS_RUNE;
			}
		}
		else {
			_case_begin_5299198208:;
			{
				return nullptr;
			}
		}
		_match_end_5299196960:;
	}
}



inline jule::Ptr<_20cb471a9_Trait> _20d68a5ae_find_builtin_trait(jule::Str _16623_ident) {
	{
		auto &_match_expr{ _16623_ident };
		
		if (_match_expr == jule::Str("Dispose", 7)) {
			_case_begin_5299210496:;
			{
				return _20d68a5ae_BUILTIN_TRAIT_DISPOSE;
			}
		}
		else {
			_case_begin_5299207888:;
			{
				return nullptr;
			}
		}
		_match_end_5299208128:;
	}
}



inline jule::Any _20d68a5ae_find_builtin_def(jule::Str _17321_ident) {
	jule::Ptr<_20c819332_FnIns> _17413_f = _20d68a5ae_find_builtin_fn(_17321_ident);
	if (_17413_f != nullptr) {
		return jule::Any(_17413_f);
	}
	jule::Ptr<_20d4a6c9e_TypeAlias> _17913_ta = _20d68a5ae_find_builtin_type_alias(_17321_ident);
	if (_17913_ta != nullptr) {
		return jule::Any(_17913_ta);
	}
	jule::Ptr<_20cb471a9_Trait> _18413_t = _20d68a5ae_find_builtin_trait(_17321_ident);
	if (_18413_t != nullptr) {
		return jule::Any(_18413_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _20d68a5ae_find_builtin_def_std_debug(jule::Str _19231_ident) {
	{
		auto &_match_expr{ _19231_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_5299219360:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),17LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_5299218992:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),18LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_5299214096:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5299216112:;
	}
}



inline jule::Any _20d68a5ae_find_builtin_def_std_mem(jule::Str _20029_ident) {
	{
		auto &_match_expr{ _20029_ident };
		
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_5299224016:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),13LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_5299223648:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),14LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("free", 4)) {
			_case_begin_5299223744:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),19LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_5299222112:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5299220096:;
	}
}



inline jule::Any _20d68a5ae_find_builtin_def_std_jule_integrated(jule::Str _20941_ident) {
	{
		auto &_match_expr{ _20941_ident };
		
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_5299230160:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),15LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("inline", 6)) {
			_case_begin_5299229792:;
			{
				return jule::Any(jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),16LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_5299223840:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5299225104:;
	}
}



inline jule::Any _20d68a5ae_find_package_builtin_def(jule::Str _21729_link_path,jule::Str _21745_ident) {
	{
		auto &_match_expr{ _21729_link_path };
		
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_5299235280:;
			{
				return _20d68a5ae_find_builtin_def_std_debug(_21745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_5299234912:;
			{
				return _20d68a5ae_find_builtin_def_std_mem(_21745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_5299235008:;
			{
				return _20d68a5ae_find_builtin_def_std_jule_integrated(_21745_ident);
			}
		}
		else {
			_case_begin_5299231104:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5299233984:;
	}
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_common_plain(jule::Ptr<_20d162d45_Eval>& _22637_e,jule::Ptr<_20c476dc4_FnCallExpr>& _22652_fc,jule::Ptr<_20d162d45_Data>& _22674_d) {
	jule::Ptr<_20c819332_FnIns> _22713_f = (*((*(_22674_d))._field_kind))._method_fnc();
	_20d058ca2_FnCallArgChecker _22913_fcac = _20d058ca2_FnCallArgChecker(_22637_e,(*(_22652_fc))._field_args,(*(_22652_fc))._field_token,_22713_f,false,jule::Slice<jule::Any>());
	_22913_fcac._method_check();
	jule::Ptr<_20ccedeed_FnCallExprModel> _23813_model = jule::new_struct<_20ccedeed_FnCallExprModel>(new( std::nothrow ) _20ccedeed_FnCallExprModel(_20c47803a_Token(),_22713_f,jule::Bool(),(*(_22674_d))._field_model,_22913_fcac._field_arg_models,jule::Ptr<_20cb4d853_Scope>(),jule::Bool()));
	if ((*(_22713_f))._field_result == nullptr) {
		_22674_d=_20d162d45_build_void_data();
	} else {
		_22674_d=jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data((*(_22713_f))._field_result,jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
	}
	(*(_22674_d))._field_model=jule::Any(_23813_model);
	return _22674_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_common(jule::Ptr<_20d162d45_Eval>& _25631_e,jule::Ptr<_20c476dc4_FnCallExpr>& _25646_fc,jule::Ptr<_20d162d45_Data>& _25668_d) {
	if ((*(_25646_fc))._field_generics.len() > 0LL) {
		(*(_25631_e))._method_push_err((*(_25646_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	return _20d68a5ae_builtin_caller_common_plain(_25631_e,_25646_fc,_25668_d);
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_common_mut(jule::Ptr<_20d162d45_Eval>& _26435_e,jule::Ptr<_20c476dc4_FnCallExpr>& _26450_fc,jule::Ptr<_20d162d45_Data>& _26472_d) {
	if ((!((*(_26472_d))._field_mutable))) {
		(*(_26435_e))._method_push_err((*(_26450_fc))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	return _20d68a5ae_builtin_caller_common(_26435_e,_26450_fc,_26472_d);
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_error(jule::Ptr<_20d162d45_Eval>& _27130_e,jule::Ptr<_20c476dc4_FnCallExpr>& _27145_fc) {
	if ((*(_27145_fc))._field_generics.len() > 0LL) {
		(*(_27130_e))._method_push_err((*(_27145_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_27145_fc))._field_args.len() < 1LL) {
		(*(_27130_e))._method_push_err((*(_27145_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	}
	if ((*(_27145_fc))._field_args.len() > 1LL) {
		(*(_27130_e))._method_push_err((*((*(_27145_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _28213_expr = (*(_27130_e))._method_eval_expr((*(_27145_fc))._field_args[0LL]);
	if (_28213_expr == nullptr) {
		return nullptr;
	}
	if ((*(_28213_expr))._method_is_nil()) {
		(*(_27130_e))._method_push_err((*((*(_27145_fc))._field_args[0LL]))._field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _29113_d = _20d162d45_build_void_data();
	(*(_29113_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinErrorCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinErrorCallExprModel(jule::Ptr<_20c819332_FnIns>(),(*(_28213_expr))._field_model)));
	return _29113_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_out(jule::Ptr<_20d162d45_Eval>& _29928_e,jule::Ptr<_20c476dc4_FnCallExpr>& _29943_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_29943_fc))._field_generics.len() > 0LL) {
		(*(_29928_e))._method_push_err((*(_29943_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_29943_fc))._field_args.len() < 1LL) {
		(*(_29928_e))._method_push_err((*(_29943_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	}
	if ((*(_29943_fc))._field_args.len() > 1LL) {
		(*(_29928_e))._method_push_err((*((*(_29943_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _31113_expr = (*(_29928_e))._method_eval_expr((*(_29943_fc))._field_args[0LL]);
	if (_31113_expr == nullptr) {
		return nullptr;
	}
	if ((!(_20d4a6c9e_is_builtin_str_convertable((*(_31113_expr))._field_kind)))) {
		(*(_29928_e))._method_push_err((*((*(_29943_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _32113_d = _20d162d45_build_void_data();
	(*(_32113_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinOutCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinOutCallExprModel((*(_31113_expr))._field_model,jule::Bool())));
	return _32113_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_outln(jule::Ptr<_20d162d45_Eval>& _32630_e,jule::Ptr<_20c476dc4_FnCallExpr>& _32645_fc,jule::Ptr<_20d162d45_Data>& _32667_d) {
	_32667_d=_20d68a5ae_builtin_caller_out(_32630_e,_32645_fc,_32667_d);
	if (_32667_d == nullptr) {
		return nullptr;
	}
	(*(_32667_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinOutlnCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinOutlnCallExprModel((*((*(_32667_d))._field_model.operator jule::Ptr<_20ccedeed_BuiltinOutCallExprModel>()))._field_expr,jule::Bool())));
	return _32667_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_new(jule::Ptr<_20d162d45_Eval>& _33828_e,jule::Ptr<_20c476dc4_FnCallExpr>& _33843_fc,jule::Ptr<_20d162d45_Data>& _33865_d) {
	if ((*(_33843_fc))._field_generics.len() > 0LL) {
		(*(_33828_e))._method_push_err((*(_33843_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_33843_fc))._field_args.len() < 1LL) {
		(*(_33828_e))._method_push_err((*(_33843_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	}
	if ((*(_33843_fc))._field_args.len() > 2LL) {
		(*(_33828_e))._method_push_err((*((*(_33843_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _35013_t = (*(_33828_e))._method_eval_expr_kind((*((*(_33843_fc))._field_args[0LL]))._field_kind);
	if (_35013_t == nullptr) {
		return nullptr;
	}
	if ((!((*(_35013_t))._field_decl))) {
		(*(_33828_e))._method_push_err((*((*(_33843_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_20d4a6c9e_is_valid_for_sptr_type((*(_35013_t))._field_kind)))) {
		jule::Ptr<_20c496047_StructIns> _36117_s = (*((*(_35013_t))._field_kind))._method_strct();
		if (((_36117_s != nullptr) && ((*(_36117_s))._field_decl != nullptr)) && (*((*(_36117_s))._field_decl))._field_cpp_linked) {
			(*(_33828_e))._method_push_err((*((*(_33843_fc))._field_args[0LL]))._field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	(*(_33865_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_20d4a6c9e_Sptr>(new( std::nothrow ) _20d4a6c9e_Sptr((*(_35013_t))._field_kind))));
	if ((*(_33843_fc))._field_args.len() == 2LL) {
		jule::Ptr<_20d4a6c9e_TypeKind> _37117_old = (*(_33828_e))._field_prefix;
		(*(_33828_e))._field_prefix=(*(_35013_t))._field_kind;
		jule::Ptr<_20d162d45_Data> _37417_init = (*(_33828_e))._method_eval_expr((*(_33843_fc))._field_args[1LL]);
		(*(_33828_e))._field_prefix=_37117_old;
		if (_37417_init != nullptr) {
			_20c47803a_Token _37921_token = (*((*(_33843_fc))._field_args[1LL]))._field_token;
			
			(*((*(_33828_e))._field_s))._method_check_validity_for_init_expr((!((*(_33828_e))._field_immutable)),false,(*(_35013_t))._field_kind,_37417_init,_37921_token);
			(*((*(_33828_e))._field_s))._method_check_assign_type(false,(*(_35013_t))._field_kind,_37417_init,_37921_token);
			(*(_33865_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinNewCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinNewCallExprModel((*(_35013_t))._field_kind,(*(_37417_init))._field_model)));
		}
	} else {
		(*(_33865_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinNewCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinNewCallExprModel((*(_35013_t))._field_kind,jule::Any())));
	}
	return _33865_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_panic(jule::Ptr<_20d162d45_Eval>& _39730_e,jule::Ptr<_20c476dc4_FnCallExpr>& _39745_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_39745_fc))._field_generics.len() > 0LL) {
		(*(_39730_e))._method_push_err((*(_39745_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_39745_fc))._field_args.len() < 1LL) {
		(*(_39730_e))._method_push_err((*(_39745_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	}
	if ((*(_39745_fc))._field_args.len() > 1LL) {
		(*(_39730_e))._method_push_err((*((*(_39745_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _40913_expr = (*(_39730_e))._method_eval_expr((*(_39745_fc))._field_args[0LL]);
	if (_40913_expr == nullptr) {
		return nullptr;
	}
	if (((*((*(_40913_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_40913_expr))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_39730_e))._method_push_err((*(_39745_fc))._field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _41813_d = _20d162d45_build_void_data();
	(*(_41813_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinPanicCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinPanicCallExprModel((*(_39745_fc))._field_token,(*(_40913_expr))._field_model)));
	return _41813_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_make(jule::Ptr<_20d162d45_Eval>& _42629_e,jule::Ptr<_20c476dc4_FnCallExpr>& _42644_fc,jule::Ptr<_20d162d45_Data>& _42666_d) {
	if ((*(_42644_fc))._field_generics.len() > 0LL) {
		(*(_42629_e))._method_push_err((*(_42644_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_42644_fc))._field_args.len() < 2LL) {
		if ((*(_42644_fc))._field_args.len() == 1LL) {
			(*(_42629_e))._method_push_err((*(_42644_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		}
		(*(_42629_e))._method_push_err((*(_42644_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	}
	if ((*(_42644_fc))._field_args.len() > 3LL) {
		(*(_42629_e))._method_push_err((*((*(_42644_fc))._field_args[3LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _44213_t = (*(_42629_e))._method_eval_expr_kind((*((*(_42644_fc))._field_args[0LL]))._field_kind);
	if (_44213_t == nullptr) {
		return nullptr;
	}
	if ((!((*(_44213_t))._field_decl)) || ((*((*(_44213_t))._field_kind))._method_slc() == nullptr)) {
		(*(_42629_e))._method_push_err((*((*(_42644_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_42666_d))._field_kind=(*(_44213_t))._field_kind;
	jule::Ptr<_20d162d45_Data> _45413_len = (*((*((*(_42629_e))._field_s))._method_evalp((*(_42629_e))._field_lookup,(*(_44213_t))._field_kind)))._method_eval_expr((*(_42644_fc))._field_args[1LL]);
	if (_45413_len == nullptr) {
		return _42666_d;
	}
	(*(_42629_e))._method_check_integer_indexing_by_data(_45413_len,(*((*(_42644_fc))._field_args[1LL]))._field_token);
	if ((*(_42644_fc))._field_args.len() == 3LL) {
		jule::Ptr<_20d162d45_Data> _46217_cap = (*((*((*(_42629_e))._field_s))._method_evalp((*(_42629_e))._field_lookup,(*(_44213_t))._field_kind)))._method_eval_expr((*(_42644_fc))._field_args[2LL]);
		if (_46217_cap == nullptr) {
			return _42666_d;
		}
		(*(_42629_e))._method_check_integer_indexing_by_data(_46217_cap,(*((*(_42644_fc))._field_args[2LL]))._field_token);
		(*(_42666_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinMakeCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinMakeCallExprModel((*(_44213_t))._field_kind,(*(_45413_len))._field_model,(*(_46217_cap))._field_model)));
	} else {
		(*(_42666_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinMakeCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinMakeCallExprModel((*(_44213_t))._field_kind,(*(_45413_len))._field_model,jule::Any())));
	}
	return _42666_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_append(jule::Ptr<_20d162d45_Eval>& _48331_e,jule::Ptr<_20c476dc4_FnCallExpr>& _48346_fc,jule::Ptr<_20d162d45_Data>& _48368_d) {
	if ((*(_48346_fc))._field_generics.len() > 0LL) {
		(*(_48331_e))._method_push_err((*(_48346_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_48346_fc))._field_args.len() < 2LL) {
		if ((*(_48346_fc))._field_args.len() == 1LL) {
			(*(_48331_e))._method_push_err((*(_48346_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_48331_e))._method_push_err((*(_48346_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _49613_t = (*(_48331_e))._method_eval_expr((*(_48346_fc))._field_args[0LL]);
	if (_49613_t == nullptr) {
		return nullptr;
	}
	if ((*((*(_49613_t))._field_kind))._method_slc() == nullptr) {
		(*(_48331_e))._method_push_err((*((*(_48346_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20c819332_FnIns> _50613_f = jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>({jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str())),(*(_49613_t))._field_kind)),jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),true,true,jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str())),(*((*((*(_49613_t))._field_kind))._method_slc()))._field_elem))}),(*(_49613_t))._field_kind,jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),3LLU,jule::Bool()));
	(*(_48368_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_50613_f));
	(*(_48368_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_CommonIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonIdentExprModel(jule::Str("append", 6))));
	_48368_d=_20d68a5ae_builtin_caller_common_plain(_48331_e,_48346_fc,_48368_d);
	if (_48368_d != nullptr) {
		jule::Ptr<_20ccedeed_FnCallExprModel> _53017_model = (*(_48368_d))._field_model.operator jule::Ptr<_20ccedeed_FnCallExprModel>();
		(*(_48368_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinAppendCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinAppendCallExprModel((*(_53017_model))._field_args[0LL],(*(_53017_model))._field_args[1LL])));
	}
	return _48368_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_copy(jule::Ptr<_20d162d45_Eval>& _53929_e,jule::Ptr<_20c476dc4_FnCallExpr>& _53944_fc,jule::Ptr<_20d162d45_Data>& _53966_d) {
	if ((*(_53944_fc))._field_generics.len() > 0LL) {
		(*(_53929_e))._method_push_err((*(_53944_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_53944_fc))._field_args.len() < 2LL) {
		if ((*(_53944_fc))._field_args.len() == 1LL) {
			(*(_53929_e))._method_push_err((*(_53944_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_53929_e))._method_push_err((*(_53944_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	if ((*(_53944_fc))._field_args.len() > 2LL) {
		(*(_53929_e))._method_push_err((*((*(_53944_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _55513_t = (*(_53929_e))._method_eval_expr((*(_53944_fc))._field_args[0LL]);
	if (_55513_t == nullptr) {
		return nullptr;
	}
	if ((*((*(_55513_t))._field_kind))._method_slc() == nullptr) {
		(*(_53929_e))._method_push_err((*((*(_53944_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!((*(_55513_t))._field_mutable))) {
		(*(_53929_e))._method_push_err((*((*(_53944_fc))._field_args[0LL]))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20c819332_FnIns> _56913_f = jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>({jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param()),(*(_55513_t))._field_kind)),jule::new_struct<_20c819332_ParamIns>(new( std::nothrow ) _20c819332_ParamIns(jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str())),(*(_55513_t))._field_kind))}),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),3LLU,jule::Bool()));
	(*(_53966_d))._field_kind=jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_56913_f));
	(*(_53966_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_CommonIdentExprModel>(new( std::nothrow ) _20ccedeed_CommonIdentExprModel(jule::Str("copy", 4))));
	_53966_d=_20d68a5ae_builtin_caller_common_plain(_53929_e,_53944_fc,_53966_d);
	return _53966_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_clone(jule::Ptr<_20d162d45_Eval>& _59330_e,jule::Ptr<_20c476dc4_FnCallExpr>& _59345_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_59345_fc))._field_generics.len() > 0LL) {
		(*(_59330_e))._method_push_err((*(_59345_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_59345_fc))._field_args.len() < 1LL) {
		(*(_59330_e))._method_push_err((*(_59345_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_59345_fc))._field_args.len() > 1LL) {
		(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _60613_d = (*(_59330_e))._method_eval_expr_kind((*((*(_59345_fc))._field_args[0LL]))._field_kind);
	if (_60613_d == nullptr) {
		return nullptr;
	}
	jule::Fn<void(jule::Ptr<_20d4a6c9e_TypeKind>)> _6119_check_kind = jule::Fn<void(jule::Ptr<_20d4a6c9e_TypeKind>)>([=](jule::Ptr<_20d4a6c9e_TypeKind> _61129_k) mutable -> void {
		{
			
			if ((*(_61129_k))._method_slc() != nullptr) {
				_case_begin_5299522048:;
				{
					if ((!((*((*((*(_61129_k))._method_slc()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_map() != nullptr) {
				_case_begin_5299522144:;
				{
					jule::Ptr<_20d4a6c9e_Map> _62217_m = (*(_61129_k))._method_map();
					if ((!((*((*(_62217_m))._field_key))._method_supports_cloning())) || (!((*((*(_62217_m))._field_val))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_arr() != nullptr) {
				_case_begin_5299522240:;
				{
					if ((!((*((*((*(_61129_k))._method_arr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_sptr() != nullptr) {
				_case_begin_5299522336:;
				{
					if ((!((*((*((*(_61129_k))._method_sptr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_strct() != nullptr) {
				_case_begin_5299522544:;
				{
					jule::Ptr<_20c496047_StructIns> _64717_s = (*((*(_60613_d))._field_kind))._method_strct();
					if ((!((*(_64717_s))._field_mutable))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str())}));
						}
					}
					if ((((*(_64717_s))._field_decl == nullptr) || (*((*(_64717_s))._field_decl))._field_cpp_linked) || (!((*((*(_64717_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
						}
					}
				}
			}
			else {
				_case_begin_5299521744:;
				{
					{
						(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			_match_end_5299521568:;
		}
	});
	if ((!((*(_60613_d))._field_lvalue))) {
		(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("non-lvalue expressions cannot be clone", 38),jule::Slice<jule::Any>());
	}
	if ((*((*(_60613_d))._field_kind))._method_strct() != nullptr) {
		jule::Ptr<_20c496047_StructIns> _67617_s = (*((*(_60613_d))._field_kind))._method_strct();
		if (((*(_67617_s))._field_decl != nullptr) && (!((*((*(_67617_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
			(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
		}
	}
	if ((!((*((*(_60613_d))._field_kind))._method_supports_cloning()))) {
		_6119_check_kind((*(_60613_d))._field_kind);
	}
	(*(_60613_d))._field_mutable=true;
	(*(_60613_d))._field_model=jule::Any(jule::new_struct<_20ccedeed_BuiltinCloneCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinCloneCallExprModel((*(_60613_d))._field_model)));
	return _60613_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_assert(jule::Ptr<_20d162d45_Eval>& _69131_e,jule::Ptr<_20c476dc4_FnCallExpr>& _69146_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_69146_fc))._field_generics.len() > 0LL) {
		(*(_69131_e))._method_push_err((*(_69146_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_69146_fc))._field_args.len() < 1LL) {
		(*(_69131_e))._method_push_err((*(_69146_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_69146_fc))._field_args.len() > 2LL) {
		(*(_69131_e))._method_push_err((*((*(_69146_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _70313_expr = (*(_69131_e))._method_eval_expr((*(_69146_fc))._field_args[0LL]);
	if (_70313_expr == nullptr) {
		return nullptr;
	}
	if (((*((*(_70313_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_70313_expr))._field_kind))._method_prim()))._method_is_bool()))) {
		(*(_69131_e))._method_push_err((*(_69146_fc))._field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20ccedeed_BuiltinAssertCallExprModel> _71213_model = jule::new_struct<_20ccedeed_BuiltinAssertCallExprModel>(new( std::nothrow ) _20ccedeed_BuiltinAssertCallExprModel((*(_69146_fc))._field_token,(*(_70313_expr))._field_model,jule::Str("assertion failed", 16)));
	if ((*(_69146_fc))._field_args.len() == 2LL) {
		jule::Ptr<_20d162d45_Data> _72017_log = (*(_69131_e))._method_eval_expr((*(_69146_fc))._field_args[1LL]);
		if (_72017_log == nullptr) {
			return nullptr;
		}
		if (((!((*(_72017_log))._method_is_const())) || ((*((*(_72017_log))._field_kind))._method_prim() == nullptr)) || (!((*((*((*(_72017_log))._field_kind))._method_prim()))._method_is_str()))) {
			(*(_69131_e))._method_push_err((*((*(_69146_fc))._field_args[1LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("const str", 9)),jule::Any((*((*(_72017_log))._field_kind))._method_to_str())}));
			return nullptr;
		}
		(*(_71213_model))._field_log=(*((*(_72017_log))._field_constant))._method_read_str();
	}
	jule::Ptr<_20d162d45_Data> _73313_d = _20d162d45_build_void_data();
	(*(_73313_d))._field_model=jule::Any(_71213_model);
	return _73313_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_mem_size_of(jule::Ptr<_20d162d45_Eval>& _73840_e,jule::Ptr<_20c476dc4_FnCallExpr>& _73855_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_73855_fc))._field_generics.len() > 0LL) {
		(*(_73840_e))._method_push_err((*(_73855_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _74213_result = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
	if ((*(_73855_fc))._field_args.len() < 1LL) {
		(*(_73840_e))._method_push_err((*(_73855_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _74213_result;
	}
	if ((*(_73855_fc))._field_args.len() > 1LL) {
		(*(_73840_e))._method_push_err((*((*(_73855_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _75413_d = (*(_73840_e))._method_eval_expr_kind((*((*(_73855_fc))._field_args[0LL]))._field_kind);
	if (_75413_d == nullptr) {
		return _74213_result;
	}
	(*(_74213_result))._field_model=jule::Any(jule::new_struct<_20ccedeed_SizeofExprModel>(new( std::nothrow ) _20ccedeed_SizeofExprModel((*(_75413_d))._field_model)));
	return _74213_result;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_mem_align_of(jule::Ptr<_20d162d45_Eval>& _76341_e,jule::Ptr<_20c476dc4_FnCallExpr>& _76356_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_76356_fc))._field_generics.len() > 0LL) {
		(*(_76341_e))._method_push_err((*(_76356_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _76713_result = jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
	if ((*(_76356_fc))._field_args.len() < 1LL) {
		(*(_76341_e))._method_push_err((*(_76356_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _76713_result;
	}
	if ((*(_76356_fc))._field_args.len() > 1LL) {
		(*(_76341_e))._method_push_err((*((*(_76356_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _77913_d = (*(_76341_e))._method_eval_expr_kind((*((*(_76356_fc))._field_args[0LL]))._field_kind);
	if (_77913_d == nullptr) {
		return _76713_result;
	}
	(*(_76713_result))._field_model=jule::Any(jule::new_struct<_20ccedeed_AlignofExprModel>(new( std::nothrow ) _20ccedeed_AlignofExprModel((*(_77913_d))._field_model)));
	return _76713_result;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_mem_free(jule::Ptr<_20d162d45_Eval>& _78837_e,jule::Ptr<_20c476dc4_FnCallExpr>& _78852_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_78852_fc))._field_generics.len() > 0LL) {
		(*(_78837_e))._method_push_err((*(_78852_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_78852_fc))._field_args.len() < 1LL) {
		(*(_78837_e))._method_push_err((*(_78852_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("h", 1))}));
		return nullptr;
	}
	if ((*(_78852_fc))._field_args.len() > 1LL) {
		(*(_78837_e))._method_push_err((*((*(_78852_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _80113_d = (*(_78837_e))._method_eval_expr_kind((*((*(_78852_fc))._field_args[0LL]))._field_kind);
	if (_80113_d == nullptr) {
		return nullptr;
	}
	if ((!((*((*(_80113_d))._field_kind))._method_performs_rc()))) {
		(*(_78837_e))._method_push_err((*((*(_78852_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _81013_result = _20d162d45_build_void_data();
	(*(_81013_result))._field_model=jule::Any(jule::new_struct<_20ccedeed_FreeExprModel>(new( std::nothrow ) _20ccedeed_FreeExprModel((*(_80113_d))._field_model)));
	return _81013_result;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_20d162d45_Eval>& _81551_e,jule::Ptr<_20c476dc4_FnCallExpr>& _81566_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((*(_81566_fc))._field_generics.len() > 0LL) {
		(*(_81551_e))._method_push_err((*(_81566_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_81566_fc))._field_args.len() < 1LL) {
		(*(_81551_e))._method_push_err((*(_81566_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_81566_fc))._field_args.len() > 1LL) {
		(*(_81551_e))._method_push_err((*((*(_81566_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _82813_d = (*(_81551_e))._method_eval_expr_kind((*((*(_81566_fc))._field_args[0LL]))._field_kind);
	if (_82813_d == nullptr) {
		return nullptr;
	}
	if ((!(_20d4a6c9e_is_builtin_str_convertable((*(_82813_d))._field_kind)))) {
		(*(_81551_e))._method_push_err((*((*(_81566_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_20d162d45_Data>(new( std::nothrow ) _20d162d45_Data(jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_20ccedeed_IntegratedToStrExprModel>(new( std::nothrow ) _20ccedeed_IntegratedToStrExprModel((*(_82813_d))._field_model))),jule::Bool(),jule::Ptr<_20d78b3e6_Const>()));
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_jule_integrated_inline(jule::Ptr<_20d162d45_Eval>& _84651_e,jule::Ptr<_20c476dc4_FnCallExpr>& _84666_fc,jule::Ptr<_20d162d45_Data>& ) {
	if ((!((*(_84651_e))._method_is_unsafe()))) {
		(*(_84651_e))._method_push_err((*(_84666_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	if ((*(_84666_fc))._field_args.len() < 1LL) {
		(*(_84651_e))._method_push_err((*(_84666_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	}
	if ((*(_84666_fc))._field_args.len() > 1LL) {
		(*(_84651_e))._method_push_err((*((*(_84666_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_20d162d45_Data> _85913_d = (*(_84651_e))._method_eval_expr((*(_84666_fc))._field_args[0LL]);
	if (_85913_d == nullptr) {
		return nullptr;
	}
	if (((*((*(_85913_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_85913_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_84651_e))._method_push_err((*((*(_84666_fc))._field_args[0LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_85913_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	if ((!((*(_85913_d))._method_is_const())) || (!((*((*(_85913_d))._field_constant))._method_is_str()))) {
		(*(_84651_e))._method_push_err((*((*(_84666_fc))._field_args[0LL]))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_20d162d45_Data> _87413_r = _20d162d45_build_void_data();
	if ((*(_84666_fc))._field_generics.len() != 0LL) {
		if ((!((*((*(_84651_e))._field_s))._method_check_generic_quantity(1LL,static_cast<jule::I64>((*(_84666_fc))._field_generics.len()),(*(_84666_fc))._field_token)))) {
			return nullptr;
		}
		jule::Ptr<_20d4a6c9e_TypeSymbol> _88017_k = _20caa3115_build_type((*(_84666_fc))._field_generics[0LL]);
		if ((!((*((*(_84651_e))._field_s))._method_check_type(_88017_k,(*(_84651_e))._field_lookup)))) {
			return nullptr;
		}
		(*(_87413_r))._field_kind=(*(_88017_k))._field_kind;
	}
	(*(_87413_r))._field_model=jule::Any(jule::new_struct<_20ccedeed_BackendEmitExprModel>(new( std::nothrow ) _20ccedeed_BackendEmitExprModel((*((*(_85913_d))._field_constant))._method_read_str())));
	return _87413_r;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_debug_out(jule::Ptr<_20d162d45_Eval>& _89338_e,jule::Ptr<_20c476dc4_FnCallExpr>& _89353_fc,jule::Ptr<_20d162d45_Data>& _89375_d) {
	_89375_d=_20d68a5ae_builtin_caller_out(_89338_e,_89353_fc,_89375_d);
	if (_89375_d == nullptr) {
		return nullptr;
	}
	(*((*(_89375_d))._field_model.operator jule::Ptr<_20ccedeed_BuiltinOutCallExprModel>()))._field_debug=true;
	return _89375_d;
}



inline jule::Ptr<_20d162d45_Data> _20d68a5ae_builtin_caller_std_debug_outln(jule::Ptr<_20d162d45_Eval>& _90340_e,jule::Ptr<_20c476dc4_FnCallExpr>& _90355_fc,jule::Ptr<_20d162d45_Data>& _90377_d) {
	_90377_d=_20d68a5ae_builtin_caller_outln(_90340_e,_90355_fc,_90377_d);
	if (_90377_d == nullptr) {
		return nullptr;
	}
	(*((*(_90377_d))._field_model.operator jule::Ptr<_20ccedeed_BuiltinOutlnCallExprModel>()))._field_debug=true;
	return _90377_d;
}



inline std::tuple<jule::Bool,jule::Bool> _20c414092_check_os(jule::Str _1113_arg) {
	jule::Bool _1125_ok = jule::Bool();
	jule::Bool _1135_exist = jule::Bool();
	_1125_ok=false;
	_1135_exist=true;
	{
		auto &_match_expr{ _1113_arg };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_5306701184:;
			{
				_1125_ok=_20a314307_is_windows(_20a1b0aee_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_5306700368:;
			{
				_1125_ok=_20a314307_is_darwin(_20a1b0aee_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_5306700464:;
			{
				_1125_ok=_20a314307_is_linux(_20a1b0aee_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_5306700560:;
			{
				_1125_ok=_20a314307_is_unix(_20a1b0aee_OS);
			}
		}
		else {
			_case_begin_5306699888:;
			{
				_1125_ok=true;
				_1135_exist=false;
			}
		}
		_match_end_5306698960:;
	}
	return std::make_tuple(_1125_ok,_1135_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _20c414092_check_arch(jule::Str _2815_arg) {
	jule::Bool _2827_ok = jule::Bool();
	jule::Bool _2837_exist = jule::Bool();
	_2827_ok=false;
	_2837_exist=true;
	{
		auto &_match_expr{ _2815_arg };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_5306708848:;
			{
				_2827_ok=_20a314307_is_i386(_20a1b0aee_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_5306708032:;
			{
				_2827_ok=_20a314307_is_amd64(_20a1b0aee_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_5306708128:;
			{
				_2827_ok=_20a314307_is_arm64(_20a1b0aee_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_5306708224:;
			{
				_2827_ok=_20a314307_is_64bit(_20a1b0aee_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_5306708320:;
			{
				_2827_ok=_20a314307_is_32bit(_20a1b0aee_ARCH);
			}
		}
		else {
			_case_begin_5306707552:;
			{
				_2827_ok=true;
				_2837_exist=false;
			}
		}
		_match_end_5306706624:;
	}
	return std::make_tuple(_2827_ok,_2837_exist);
}



inline jule::Bool _20c414092_is_pass_file_annotation(jule::Str _4732_p) {
	_4732_p=_20a3911b9_base(_4732_p);
	jule::I64 _499_n = _4732_p.len();
	_4732_p=_4732_p.slice(0LL,_499_n - _20a3911b9_ext(_4732_p).len());
	jule::Str _5513_a1 = jule::Str();
	jule::Str _5813_a2 = jule::Str();
	jule::Int _6113_i = _20a405ddd_find_last_byte(_4732_p,'_');
	if (_6113_i == -1LL) {
		jule::Bool _6418_ok;
		jule::Bool _6426_exist;
		std::tie(_6418_ok,_6426_exist) = _20c414092_check_os(_4732_p);
		if (_6426_exist) {
			return _6418_ok;
		}
		std::tie(_6418_ok,_6426_exist) = _20c414092_check_arch(_4732_p);
		return (!(_6426_exist)) || _6418_ok;
	}
	if ((_6113_i + 1LL) >= _499_n) {
		return true;
	}
	_5513_a1=_4732_p.slice(_6113_i + 1LL);
	_4732_p=_4732_p.slice(0LL,_6113_i);
	_6113_i=static_cast<jule::Int>(_20a405ddd_find_last_byte(_4732_p,'_'));
	if (_6113_i != -1LL) {
		_5813_a2=_4732_p.slice(_6113_i + 1LL);
	}
	if (_5813_a2 == jule::Str()) {
		jule::Bool _8518_ok;
		jule::Bool _8526_exist;
		std::tie(_8518_ok,_8526_exist) = _20c414092_check_os(_5513_a1);
		if (_8526_exist) {
			return _8518_ok;
		}
		std::tie(_8518_ok,_8526_exist) = _20c414092_check_arch(_5513_a1);
		return (!(_8526_exist)) || _8518_ok;
	}
	jule::Bool _9314_ok;
	jule::Bool _9322_exist;
	std::tie(_9314_ok,_9322_exist) = _20c414092_check_arch(_5513_a1);
	if (_9322_exist) {
		if ((!(_9314_ok))) {
			return false;
		}
		jule::Bool _9814_ok;
		jule::Bool _9818_exist;
		std::tie(_9814_ok,_9818_exist) = _20c414092_check_os(_5813_a2);
		return (!(_9818_exist)) || _9814_ok;
	}
	std::tie(_9314_ok,_9322_exist) = _20c414092_check_os(_5513_a1);
	return (!(_9322_exist)) || _9314_ok;
}



inline void _20c414339_set_os_vars(void) {
	{
		auto &_match_expr{ _20a1b0aee_OS };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_5306719488:;
			{
				_20c414339_VARS.push(jule::Str("windows", 7));
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_5306737200:;
			{
				_20c414339_VARS.push(jule::Str("linux", 5));
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_5306732560:;
			{
				_20c414339_VARS.push(jule::Str("darwin", 6));
			}
		}
		_match_end_5306737648:;
	}
	if (_20a314307_is_unix(_20a1b0aee_OS)) {
		_20c414339_VARS.push(jule::Str("unix", 4));
	}
}



inline void _20c414339_set_arch_vars(void) {
	{
		auto &_match_expr{ _20a1b0aee_ARCH };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_5306738224:;
			{
				_20c414339_VARS.push(jule::Str("i386", 4));
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_5306741648:;
			{
				_20c414339_VARS.push(jule::Str("amd64", 5));
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_5306741744:;
			{
				_20c414339_VARS.push(jule::Str("arm64", 5));
			}
		}
		_match_end_5306738144:;
	}
	if (_20a314307_is_64bit(_20a1b0aee_ARCH)) {
		_20c414339_VARS.push(jule::Str("x64", 3));
	}
	if (_20a314307_is_32bit(_20a1b0aee_ARCH)) {
		_20c414339_VARS.push(jule::Str("x32", 3));
	}
}



inline void _20c414339_init_vars(void) {
	_20c414339_set_os_vars();
	_20c414339_set_arch_vars();
	if (_20a20bc9e_PRODUCTION) {
		_20c414339_VARS.push(jule::Str("production", 10));
	}
	if (_20a21965d_TEST) {
		_20c414339_VARS.push(jule::Str("test", 4));
	}
	{
		auto &_match_expr{ _20a21965d_COMPILER };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_5306749696:;
			{
				_20c414339_VARS.push(jule::Str("clang", 5));
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_5306749792:;
			{
				_20c414339_VARS.push(jule::Str("gcc", 3));
			}
		}
		_match_end_5306752544:;
	}
	{
		auto &_match_expr{ _20a21965d_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_5306749888:;
			{
				_20c414339_VARS.push(jule::Str("cpp14", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_5306755184:;
			{
				_20c414339_VARS.push(jule::Str("cpp17", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5306743728:;
			{
				_20c414339_VARS.push(jule::Str("cpp20", 5));
			}
		}
		_match_end_5306754832:;
	}
}



inline void _20c44b959_exit_err(jule::Str _2513_msg) {
	
	jule::outln(_2513_msg);
	_20ba48320_exit(1LL);
}



inline jule::Slice<jule::U8> _20c44b959_read_buff(jule::Str _3314_path) {
	return ({
		auto except = _20a284e6a_File::_static_method_read(_3314_path);
		(except.ok()) ? (except.result) : ({{
			_20c44b959_exit_err(jule::Str("error: file cannot read", 23));
			return nullptr;
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _20a25b99c_Log _20c44b959_flat_compiler_err(jule::Str _4222_text) {
	return _20a25b99c_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4222_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Bool,jule::Slice<_20a25b99c_Log>> _20c44b959_is_pass_build_directives(jule::Ptr<_20c476126_Ast>& _5034_file) {
	{
		auto &expr = (*(_5034_file))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_5306764112:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> _20c44b959_td = *it;
			{
				if ((*(_20c44b959_td))._field_tag._field_kind != jule::Str("build", 5)) {
					goto _iter_next_5306764112;
				}
				_20c41511a_DirectiveEval _5617_de = _20c41511a_DirectiveEval(jule::Slice<_20a25b99c_Log>(),_20c44b959_td);
				jule::Bool _5913_result = _5617_de._method_eval();
				if (_5617_de._field_logs.len() > 0LL) {
					return std::make_tuple(false,_5617_de._field_logs);
				}
				if ((!(_5913_result))) {
					return std::make_tuple(false,nullptr);
				}
			}
			_iter_next_5306764112:;
			++it;
			goto _iter_begin_5306764112;
		}
		_iter_end_5306764112:;
	}
	return std::make_tuple(true,nullptr);
}



inline void _20b6b28b3_push_passes(jule::Ptr<_20cba58cc_Package>& _8621_p,jule::Slice<jule::Str>& _8645_passes) {
	{
		auto &expr = (*(_8621_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5306925040:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20b6b28b3_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = (*(_20b6b28b3_f))._field_passes;
					auto it = expr.begin();
					_iter_begin_5306927264:;
					if (it != expr.end()) {
						_20caa3115_Pass &_20b6b28b3_pass = *it;
						{
							if (_20b6b28b3_pass._field_text == jule::Str()) {
								goto _iter_next_5306927264;
							}
							{
								auto &expr = _8645_passes;
								auto it = expr.begin();
								_iter_begin_5306929616:;
								if (it != expr.end()) {
									jule::Str &_20b6b28b3_cpass = *it;
									{
										if (_20b6b28b3_cpass == _20b6b28b3_pass._field_text) {
											goto _iter_next_5306927264;
										}
									}
									_iter_next_5306929616:;
									++it;
									goto _iter_begin_5306929616;
								}
								_iter_end_5306929616:;
							}
							_8645_passes.push(_20b6b28b3_pass._field_text);
						}
						_iter_next_5306927264:;
						++it;
						goto _iter_begin_5306927264;
					}
					_iter_end_5306927264:;
				}
			}
			_iter_next_5306925040:;
			++it;
			goto _iter_begin_5306925040;
		}
		_iter_end_5306925040:;
	}
}



inline jule::Slice<jule::Str> _20b6b28b3_get_all_unique_passes(jule::Ptr<_20cba58cc_Package>& _10331_pkg,jule::Slice<jule::Ptr<_20cba58cc_ImportInfo>> _10356_uses) {
	jule::Slice<jule::Str> _10413_passes = nullptr;
	_20b6b28b3_push_passes(_10331_pkg,_10413_passes);
	{
		auto &expr = _10356_uses;
		auto it = expr.begin();
		_iter_begin_5306934560:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20b6b28b3_u = *it;
			{
				if ((!((*(_20b6b28b3_u))._field_cpp_linked))) {
					_20b6b28b3_push_passes((*(_20b6b28b3_u))._field_package,_10413_passes);
				}
			}
			_iter_next_5306934560:;
			++it;
			goto _iter_begin_5306934560;
		}
		_iter_end_5306934560:;
	}
	return _10413_passes;
}



inline jule::Bool _20b6d50ab_is_exist(jule::Slice<jule::Any> _3013_arr,jule::Any _3025_t) {
	{
		auto &expr = _3013_arr;
		auto it = expr.begin();
		_iter_begin_5307035168:;
		if (it != expr.end()) {
			jule::Any &_20b6d50ab_ref = *it;
			{
				if (_3025_t == _20b6d50ab_ref) {
					return true;
				}
			}
			_iter_next_5307035168:;
			++it;
			goto _iter_begin_5307035168;
		}
		_iter_end_5307035168:;
	}
	return false;
}



inline jule::Bool _20b6d50ab_is_dead(jule::Any _4016_ref) {
	jule::Bool _4028_dead = jule::Bool();
	if (_20b6d50ab_is_exist(_20b6d50ab_deads,_4016_ref)) {
		_4028_dead = true;
		return _4028_dead;
	}
	{
		auto &_match_expr{ _4016_ref };
		
		if (_match_expr.type_is<jule::Ptr<_20c819332_FnIns>>()) {
			_case_begin_5307043088:;
			{
				if ((*((*(_4016_ref.operator jule::Ptr<_20c819332_FnIns>()))._field_decl))._method_is_init()) {
					goto _match_end_5307039168;
				}
				goto _case_begin_5307039712;
			}
		}
		else {
			_case_begin_5307039712:;
			{
				if ((_20b6d50ab_current == _4016_ref) || (_20b6d50ab_main_current == _4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
				if (_20b6d50ab_is_exist(_20b6d50ab_checking,_4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
			}
		}
		_match_end_5307039168:;
	}
	jule::Any _6113_old = _20b6d50ab_current;
	_20b6d50ab_current=_4016_ref;
	jule::I64 _639_len = _20b6d50ab_checking.len();
	_20b6d50ab_checking.push(_4016_ref);
	__JULE_DEFER({
		_20b6d50ab_current=_6113_old;
		_20b6d50ab_drop_ref(_20b6d50ab_checking,_639_len);
	});
	{
		auto &_match_expr{ _4016_ref };
		
		if (_match_expr.type_is<jule::Ptr<_20c819332_FnIns>>()) {
			_case_begin_5307049136:;
			{
				_4028_dead = _20b6d50ab_is_fn_dead(_4016_ref.operator jule::Ptr<_20c819332_FnIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5307049232:;
			{
				_4028_dead = _20b6d50ab_is_var_dead(_4016_ref.operator jule::Ptr<_20cdc725d_Var>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c496047_StructIns>>()) {
			_case_begin_5307048848:;
			{
				_4028_dead = _20b6d50ab_is_struct_dead(_4016_ref.operator jule::Ptr<_20c496047_StructIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb471a9_Trait>>()) {
			_case_begin_5307048944:;
			{
				_4028_dead = _20b6d50ab_is_trait_dead(_4016_ref.operator jule::Ptr<_20cb471a9_Trait>());
				return _4028_dead;
			}
		}
		else {
			_case_begin_5307044992:;
			{
				_4028_dead = false;
				return _4028_dead;
			}
		}
		_match_end_5307046928:;
	}
}



inline void _20b6d50ab_drop_ref(jule::Slice<jule::Any>& _9218_refs,jule::Int _9231_pos) {
	_9218_refs=_9218_refs.slice(0LL,_9231_pos);
}



inline jule::Bool _20b6d50ab_is_all_references_are_dead(jule::Ptr<_20caa3115_ReferenceStack> _10035_references) {
	jule::Int _10113_i = 0LL;
	for (; _10113_i < (*(_10035_references))._method_len(); (_10113_i)++) {
		{
			jule::Any _10317_ref = (*(_10035_references))._method_at(_10113_i);
			if (_10317_ref == _20b6d50ab_current) {
				goto _iter_next_5307057648;
			}
			if (_10317_ref == _20b6d50ab_main_current) {
				goto _iter_next_5307057648;
			}
			if ((!(_20b6d50ab_is_dead(_10317_ref)))) {
				return false;
			}
		}
	_iter_next_5307057648:;
	}
	_iter_end_5307057648:;
	return true;
}



inline jule::Bool _20b6d50ab_is_fn_dead(jule::Ptr<_20c819332_FnIns> _11719_f) {
	if ((*((*(_11719_f))._field_decl))._field_cpp_linked || (*(_11719_f))._field_anon) {
		return false;
	}
	if ((*((*(_11719_f))._field_decl))._method_is_entry_point() || (*((*(_11719_f))._field_decl))._method_is_init()) {
		return (!((*((*(_11719_f))._field_decl))._field_statically));
	}
	if ((*(_11719_f))._field_owner != nullptr) {
		if (_20b6d50ab_is_exist(_20b6d50ab_checking,jule::Any((*(_11719_f))._field_owner))) {
			return true;
		}
		return _20b6d50ab_is_dead(jule::Any((*(_11719_f))._field_owner));
	}
	return _20b6d50ab_is_all_references_are_dead((*(_11719_f))._field_references);
}



inline jule::Bool _20b6d50ab_is_var_dead(jule::Ptr<_20cdc725d_Var> _14320_v) {
	if ((*(_14320_v))._field_constant) {
		return true;
	}
	if ((*(_14320_v))._field_cpp_linked) {
		return false;
	}
	return _20b6d50ab_is_all_references_are_dead((*(_14320_v))._field_references);
}



inline jule::Bool _20b6d50ab_is_struct_dead(jule::Ptr<_20c496047_StructIns> _19323_s) {
	return false;
}



inline jule::Bool _20b6d50ab_is_trait_dead(jule::Ptr<_20cb471a9_Trait> _21022_t) {
	return false;
}



inline void _20b6d50ab_eliminate_dead_functions(jule::Slice<jule::Ptr<_20c819332_Fn>>& _22734_funcs) {
	jule::Int _22813_i = 0LL;
	while (_22813_i < _22734_funcs.len()) {
		{
			jule::Ptr<_20c819332_Fn> _23017_f = _22734_funcs[_22813_i];
			jule::Int _23117_j = 0LL;
			while (_23117_j < (*(_23017_f))._field_instances.len()) {
				{
					jule::Ptr<_20c819332_FnIns> _23321_ins = (*(_23017_f))._field_instances[_23117_j];
					_20b6d50ab_main_current=jule::Any(_23321_ins);
					if (_20b6d50ab_is_fn_dead(_23321_ins)) {
						_20b6d50ab_deads.push(jule::Any(_23321_ins));
						(*(_23017_f))._field_instances=jule::append((*(_23017_f))._field_instances.slice(0LL,_23117_j),(*(_23017_f))._field_instances.slice(_23117_j + 1LL));
					} else {
						(_23117_j)++;
					}
				}
			_iter_next_5307108576:;
			}
			_iter_end_5307108576:;
			if ((*(_23017_f))._field_instances.len() == 0LL) {
				_22734_funcs=jule::append(_22734_funcs.slice(0LL,_22813_i),_22734_funcs.slice(_22813_i + 1LL));
				goto _iter_next_5307106320;
			}
			(_22813_i)++;
		}
	_iter_next_5307106320:;
	}
	_iter_end_5307106320:;
}



inline void _20b6d50ab_eliminate_dead_globals(jule::Ptr<_20cba58cc_Package>& _25232_pkg) {
	{
		auto &expr = (*(_25232_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5307106752:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20b6d50ab_f = *it;
			{
				jule::Int _25417_i = 0LL;
				while (_25417_i < (*(_20b6d50ab_f))._field_vars.len()) {
					{
						jule::Ptr<_20cdc725d_Var> _25621_v = (*(_20b6d50ab_f))._field_vars[_25417_i];
						_20b6d50ab_main_current=jule::Any(_25621_v);
						if (_20b6d50ab_is_var_dead(_25621_v)) {
							_20b6d50ab_deads.push(jule::Any(_25621_v));
							(*(_20b6d50ab_f))._field_vars=jule::append((*(_20b6d50ab_f))._field_vars.slice(0LL,_25417_i),(*(_20b6d50ab_f))._field_vars.slice(_25417_i + 1LL));
						} else {
							(_25417_i)++;
						}
					}
				_iter_next_5307119632:;
				}
				_iter_end_5307119632:;
			}
			_iter_next_5307106752:;
			++it;
			goto _iter_begin_5307106752;
		}
		_iter_end_5307106752:;
	}
}



inline void _20b6d50ab_eliminate_dead_functions_package(jule::Ptr<_20cba58cc_Package>& _26842_pkg) {
	{
		auto &expr = (*(_26842_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5307119968:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20b6d50ab_f = *it;
			{
				_20b6d50ab_eliminate_dead_functions((*(_20b6d50ab_f))._field_funcs);
			}
			_iter_next_5307119968:;
			++it;
			goto _iter_begin_5307119968;
		}
		_iter_end_5307119968:;
	}
}



inline void _20b6d50ab_catch_alive_init(jule::Ptr<_20cba58cc_Package>& _31626_pkg) {
	
	
	jule::Ptr<_20c819332_Fn> _31913_f = (*(_31626_pkg))._method_find_fn(jule::Str("init", 4),false);
	if (_31913_f == nullptr) {
		return;
	}
	jule::I64 _3249_n = _20b6d50ab_deads.len();
	__JULE_DEFER({
		_20b6d50ab_deads=_20b6d50ab_deads.slice(0LL,_3249_n);
		_20b6d50ab_checking=nullptr;
		_20b6d50ab_current=jule::Any(nullptr);
	});
	jule::Ptr<_20c819332_FnIns> _33213_ins = (*(_31913_f))._field_instances[0LL];
	jule::Int _33313_i = 0LL;
	for (; _33313_i < (*((*(_33213_ins))._field_refers))._method_len(); (_33313_i)++) {
		{
			if ((!(_20b6d50ab_is_dead((*((*(_33213_ins))._field_refers))._method_at(_33313_i))))) {
				(*(_31913_f))._field_statically=true;
				return;
			}
		}
	_iter_next_5307153328:;
	}
	_iter_end_5307153328:;
}



inline void _20b6d50ab_eliminate_package(jule::Ptr<_20cba58cc_Package>& _34227_pkg) {
	_20b6d50ab_deads=jule::Slice<jule::Any>::alloc(0LL,2000LL);
	_20b6d50ab_catch_alive_init(_34227_pkg);
	_20b6d50ab_eliminate_dead_globals(_34227_pkg);
	_20b6d50ab_eliminate_dead_functions_package(_34227_pkg);
}



inline void _20b6d50ab_eliminate_defines(jule::Ptr<_20b6b28b3_IR>& _35431_ir) {
	jule::I64 _35513_i = (*(_35431_ir))._field_used.len() - 1LL;
	for (; _35513_i >= 0LL; (_35513_i)--) {
		{
			jule::Ptr<_20cba58cc_ImportInfo> _35717_u = (*(_35431_ir))._field_used[_35513_i];
			if ((!((*(_35717_u))._field_cpp_linked))) {
				_20b6d50ab_eliminate_package((*(_35717_u))._field_package);
			}
		}
	_iter_next_5307166304:;
	}
	_iter_end_5307166304:;
	_20b6d50ab_eliminate_package((*(_35431_ir))._field_main);
	_20b6d50ab_deads=nullptr;
	_20b6d50ab_checking=nullptr;
	_20b6d50ab_current=jule::Any(nullptr);
}



inline void _20b661752_eliminate_dead_code_of_scope(jule::Ptr<_20cb4d853_Scope> _7937_s) {
	jule::Ptr<_20b661752_ScopeDeadCode> _8013_sdc = jule::new_struct_ptr<_20b661752_ScopeDeadCode>(new( std::nothrow ) _20b661752_ScopeDeadCode(jule::Ptr<_20b661752_ScopeDeadCode>(),_7937_s,(&((*(_7937_s))._field_stmts)),jule::Int()));
	{
		(*(_8013_sdc))._method_optimize_stmts();
	}
}



inline void _20b661752_eliminate_scope_functions(jule::Slice<jule::Ptr<_20c819332_Fn>>& _8835_funcs) {
	{
		auto &expr = _8835_funcs;
		auto it = expr.begin();
		_iter_begin_5307177216:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20b661752_func = *it;
			{
				{
					auto &expr = (*(_20b661752_func))._field_instances;
					auto it = expr.begin();
					_iter_begin_5307180800:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_FnIns> _20b661752_ins = *it;
						{
							_20b661752_eliminate_dead_code_of_scope((*(_20b661752_ins))._field_scope);
						}
						_iter_next_5307180800:;
						++it;
						goto _iter_begin_5307180800;
					}
					_iter_end_5307180800:;
				}
			}
			_iter_next_5307177216:;
			++it;
			goto _iter_begin_5307177216;
		}
		_iter_end_5307177216:;
	}
}



inline void _20b661752_eliminate_functions_scope_package(jule::Ptr<_20cba58cc_Package>& _9643_pkg) {
	{
		auto &expr = (*(_9643_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5307181456:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20b661752_f = *it;
			{
				_20b661752_eliminate_scope_functions((*(_20b661752_f))._field_funcs);
			}
			_iter_next_5307181456:;
			++it;
			goto _iter_begin_5307181456;
		}
		_iter_end_5307181456:;
	}
}



inline void _20b661752_eliminate_scope_package(jule::Ptr<_20cba58cc_Package>& _10233_pkg) {
	_20b661752_eliminate_functions_scope_package(_10233_pkg);
}



inline void _20b661752_eliminate_scopes(jule::Ptr<_20b6b28b3_IR>& _10730_ir) {
	jule::I64 _10813_i = (*(_10730_ir))._field_used.len() - 1LL;
	for (; _10813_i >= 0LL; (_10813_i)--) {
		{
			jule::Ptr<_20cba58cc_ImportInfo> _11017_u = (*(_10730_ir))._field_used[_10813_i];
			if ((!((*(_11017_u))._field_cpp_linked))) {
				_20b661752_eliminate_scope_package((*(_11017_u))._field_package);
			}
		}
	_iter_next_5307186880:;
	}
	_iter_end_5307186880:;
	_20b661752_eliminate_scope_package((*(_10730_ir))._field_main);
}



inline jule::U64 _20dc14918_unix(void) {
	return static_cast<jule::U64>(static_cast<jule::U64>(time(nullptr)));
}



inline jule::U64 _20dc14918_unix_year_to_seconds(jule::Uint _25725_y,jule::Bool& _25743_leap) {
	if ((_25725_y - 2LL) <= 136LL) {
		jule::Uint _25917_leaps = (_25725_y - 68LL) >> 2LL;
		_25743_leap=((_25725_y - 68LL) & 3LL) == 0LL;
		if (_25743_leap) {
			(_25917_leaps)--;
		}
		return static_cast<jule::Uint>((31536000LL * (_25725_y - 70LL)) + (86400LL * _25917_leaps));
	}
	jule::Uint _26713_leaps = 0LLU;
	jule::Uint _26813_centuries = 0LLU;
	jule::Uint _26913_cycles = jule::unsafe_div(_25725_y - 100LL,400LL);
	jule::Uint _27013_rem = jule::unsafe_mod(_25725_y - 100LL,400LL);
	if (_27013_rem < 0LL) {
		(_26913_cycles)--;
		_27013_rem+=400LL;
	}
	if (_27013_rem == 0LL) {
		_25743_leap=true;
		_26813_centuries=0LL;
		_26713_leaps=0LL;
	} else {
		if (_27013_rem >= 200LL) {
			if (_27013_rem >= 300LL) {
				_26813_centuries=3LL;
				_27013_rem-=300LL;
			} else {
				_26813_centuries=2LL;
				_27013_rem-=200LL;
			}
		} else {
			if (_27013_rem >= 100LL) {
				_26813_centuries=1LL;
				_27013_rem-=100LL;
			} else {
				_26813_centuries=0LL;
			}
		}
		if (_27013_rem == 0LL) {
			_25743_leap=false;
			_26713_leaps=0LL;
		} else {
			_26713_leaps=static_cast<jule::Uint>(jule::unsafe_div(_27013_rem,4LL));
			_27013_rem = jule::unsafe_mod(_27013_rem,4LL);
			_25743_leap=_27013_rem == 0LL;
		}
	}
	_26713_leaps+=static_cast<jule::Uint>((97LL * _26913_cycles) + (24LL * _26813_centuries));
	if (_25743_leap) {
		(_26713_leaps)++;
	}
	return static_cast<jule::Uint>(((((_25725_y - 100LL) * 31536000LL) + (_26713_leaps * 86400LL)) + 946684800LL) + 86400LL);
}



inline jule::U64 _20dc14918_unix_month_to_seconds(jule::Uint _31426_m,jule::Bool _31439_leap) {
	jule::U64 _31613_t = 0LLU;
	{
		auto &_match_expr{ _31426_m };
		
		if (_match_expr == 1LL) {
			_case_begin_5307267632:;
			{
				_31613_t=2678400LL;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5307270736:;
			{
				_31613_t=5097600LL;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_5307270832:;
			{
				_31613_t=7776000LL;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_5307270928:;
			{
				_31613_t=10368000LL;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_5307271024:;
			{
				_31613_t=13046400LL;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_5307271120:;
			{
				_31613_t=15638400LL;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_5307271216:;
			{
				_31613_t=18316800LL;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_5307271328:;
			{
				_31613_t=20995200LL;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_5307271440:;
			{
				_31613_t=23587200LL;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_5307271552:;
			{
				_31613_t=26265600LL;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_5307271664:;
			{
				_31613_t=28857600LL;
			}
		}
		_match_end_5307270320:;
	}
	if (_31439_leap && (_31426_m >= 2LL)) {
		_31613_t+=86400LL;
	}
	return _31613_t;
}



inline jule::Bool _20b6cc6d0_iter_expr_is_copy_optimizable(jule::Ptr<_20d162d45_Data>& _3835_expr,jule::Ptr<_20cdc725d_Var>& _3849_v) {
	return ((!((*(_3835_expr))._field_lvalue)) && (!((*((*(_3835_expr))._field_kind))._method_mutable()))) || (!((*(_3849_v))._field_mutable));
}



inline jule::Str _20b6cc6d0_gen_range_index_iter(jule::Ptr<_20cb4d853_RangeIter>& _4230_it) {
	jule::Str _439_begin = _20da752c3_iter_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	jule::Str _449_next = _20da752c3_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	jule::Str _4613_obj = jule::Str("{\n", 2);
	_20da77946_add_indent();
	_4613_obj+=_20da77946_indent();
	_4613_obj+=jule::Str("auto ", 5);
	if (_20a20bc9e_OPT_COPY && (*((*(_4230_it))._field_expr))._field_lvalue) {
		_4613_obj+=jule::Str("&", 1);
	}
	_4613_obj+=jule::Str("expr = ", 7);
	_4613_obj+=_20c1ee047_gen_expr_model((*((*(_4230_it))._field_expr))._field_model);
	_4613_obj+=jule::Str(";\n", 2);
	_4613_obj+=_20da77946_indent();
	_4613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_4613_obj+=_20da77946_indent();
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_20da77946_indent();
	_4613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_20da77946_add_indent();
	_4613_obj+=_20da77946_indent();
	if ((*(_4230_it))._field_key_a != nullptr) {
		_4613_obj+=_20da77946_gen_var_init_expr((*(_4230_it))._field_key_a,jule::Str("it - expr.begin()", 17));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_20da77946_indent();
	}
	if ((*(_4230_it))._field_key_b != nullptr) {
		if (_20a20bc9e_OPT_COPY) {
			(*((*(_4230_it))._field_key_b))._field_reference=_20b6cc6d0_iter_expr_is_copy_optimizable((*(_4230_it))._field_expr,(*(_4230_it))._field_key_b);
		}
		_4613_obj+=_20da77946_gen_var_init_expr((*(_4230_it))._field_key_b,jule::Str("*it", 3));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_20da77946_indent();
	}
	_4613_obj+=_20b6cc6d0_gen_scope((*(_4230_it))._field_scope);
	_4613_obj+=jule::Str("\n", 1);
	_4613_obj+=_20da77946_indent();
	_4613_obj+=_449_next;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_20da77946_indent();
	_4613_obj+=jule::Str("++it;\n", 6);
	_4613_obj+=_20da77946_indent();
	if ((*(_4230_it))._field_key_a != nullptr) {
		_4613_obj+=_20da752c3_var_out_ident((*(_4230_it))._field_key_a);
		_4613_obj+=jule::Str("++;\n", 4);
		_4613_obj+=_20da77946_indent();
	}
	_4613_obj+=jule::Str("goto ", 5);
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(";\n", 2);
	_20da77946_done_indent();
	_4613_obj+=_20da77946_indent();
	_4613_obj+=jule::Str("}\n", 2);
	_4613_obj+=_20da77946_indent();
	_4613_obj+=_20da752c3_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	_4613_obj+=jule::Str(":;\n", 3);
	_20da77946_done_indent();
	_4613_obj+=_20da77946_indent();
	_4613_obj+=jule::Str("}", 1);
	return _4613_obj;
}



inline jule::Str _20b6cc6d0_gen_range_hashmap_iter(jule::Ptr<_20cb4d853_RangeIter>& _11232_it) {
	jule::Str _1139_begin = _20da752c3_iter_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	jule::Str _1149_next = _20da752c3_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	jule::Str _11613_obj = jule::Str("{\n", 2);
	_20da77946_add_indent();
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("auto ", 5);
	if (_20a20bc9e_OPT_COPY && (*((*(_11232_it))._field_expr))._field_lvalue) {
		_11613_obj+=jule::Str("&", 1);
	}
	_11613_obj+=jule::Str("expr = ", 7);
	_11613_obj+=_20c1ee047_gen_expr_model((*((*(_11232_it))._field_expr))._field_model);
	_11613_obj+=jule::Str(";\n", 2);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_20da77946_add_indent();
	_11613_obj+=_20da77946_indent();
	if ((*(_11232_it))._field_key_a != nullptr) {
		if (_20a20bc9e_OPT_COPY) {
			(*((*(_11232_it))._field_key_a))._field_reference=_20b6cc6d0_iter_expr_is_copy_optimizable((*(_11232_it))._field_expr,(*(_11232_it))._field_key_a);
		}
		_11613_obj+=_20da77946_gen_var_init_expr((*(_11232_it))._field_key_a,jule::Str("it->first", 9));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_20da77946_indent();
	}
	if ((*(_11232_it))._field_key_b != nullptr) {
		if (_20a20bc9e_OPT_COPY) {
			(*((*(_11232_it))._field_key_b))._field_reference=_20b6cc6d0_iter_expr_is_copy_optimizable((*(_11232_it))._field_expr,(*(_11232_it))._field_key_b);
		}
		_11613_obj+=_20da77946_gen_var_init_expr((*(_11232_it))._field_key_b,jule::Str("it->second", 10));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_20da77946_indent();
	}
	_11613_obj+=_20b6cc6d0_gen_scope((*(_11232_it))._field_scope);
	_11613_obj+=jule::Str("\n", 1);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=_1149_next;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("++it;\n", 6);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("goto ", 5);
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(";\n", 2);
	_20da77946_done_indent();
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("}\n", 2);
	_11613_obj+=_20da77946_indent();
	_11613_obj+=_20da752c3_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	_11613_obj+=jule::Str(":;\n", 3);
	_20da77946_done_indent();
	_11613_obj+=_20da77946_indent();
	_11613_obj+=jule::Str("}", 1);
	return _11613_obj;
}



inline jule::Str _20b6cc6d0_gen_if(jule::Ptr<_20cb4d853_If> _18015_i) {
	jule::Str _18113_obj = jule::Str();
	if ((*(_18015_i))._field_expr != nullptr) {
		_18113_obj+=jule::Str("if (", 4);
		_18113_obj+=_20c1ee047_gen_expr((*(_18015_i))._field_expr);
		_18113_obj+=jule::Str(") ", 2);
	}
	_18113_obj+=_20b6cc6d0_gen_scope((*(_18015_i))._field_scope);
	return _18113_obj;
}



inline jule::Str _20b6cc6d0_gen_conditional(jule::Ptr<_20cb4d853_Conditional> _19124_c) {
	jule::Str _19213_obj = jule::Str();
	{
		auto &expr = (*(_19124_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5307704656:;
		if (it != expr.end()) {
			jule::Ptr<_20cb4d853_If> _20b6cc6d0_elif = *it;
			{
				if (_20b6cc6d0_elif == nullptr) {
					goto _iter_next_5307704656;
				}
				if (_19213_obj.len() != 0LL) {
					_19213_obj+=jule::Str(" else ", 6);
				}
				_19213_obj+=_20b6cc6d0_gen_if(_20b6cc6d0_elif);
			}
			_iter_next_5307704656:;
			++it;
			goto _iter_begin_5307704656;
		}
		_iter_end_5307704656:;
	}
	if ((*(_19124_c))._field_default != nullptr) {
		if (_19213_obj.len() != 0LL) {
			_19213_obj+=jule::Str(" else ", 6);
		}
		_19213_obj+=_20b6cc6d0_gen_scope((*((*(_19124_c))._field_default))._field_scope);
	}
	return _19213_obj;
}



inline jule::Str _20b6cc6d0_gen_inf_iter(jule::Ptr<_20cb4d853_InfIter> _21421_it) {
	jule::Str _21513_obj = jule::Str("for (;;) {\n", 11);
	_20da77946_add_indent();
	_21513_obj+=_20da77946_indent();
	_21513_obj+=_20b6cc6d0_gen_scope((*(_21421_it))._field_scope);
	_20da77946_done_indent();
	jule::Str _2229_indent = _20da77946_indent();
	_21513_obj+=jule::Str("\n", 1);
	_21513_obj+=_2229_indent;
	_21513_obj+=_20da752c3_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_21421_it)));
	_21513_obj+=jule::Str(":;\n", 3);
	_21513_obj+=_2229_indent;
	_21513_obj+=jule::Str("}\n", 2);
	_21513_obj+=_2229_indent;
	_21513_obj+=_20da752c3_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_21421_it)));
	_21513_obj+=jule::Str(":;", 2);
	return _21513_obj;
}



inline jule::Str _20b6cc6d0_gen_while_iter(jule::Ptr<_20cb4d853_WhileIter> _23723_it) {
	jule::Str _23813_obj = jule::Str();
	if (((*(_23723_it))._field_expr != nullptr) && ((*(_23723_it))._field_next == nullptr)) {
		_23813_obj+=jule::Str("while (", 7);
		_23813_obj+=_20c1ee047_gen_expr((*(_23723_it))._field_expr);
		_23813_obj+=jule::Str(") {\n", 4);
	} else {
		_23813_obj+=jule::Str("for (; ", 7);
		if ((*(_23723_it))._field_expr != nullptr) {
			_23813_obj+=_20c1ee047_gen_expr((*(_23723_it))._field_expr);
		}
		_23813_obj+=jule::Str("; ", 2);
		if ((*(_23723_it))._field_next != nullptr) {
			jule::Str _25017_st = _20b6cc6d0_gen_st((*(_23723_it))._field_next);
			_23813_obj+=_25017_st.slice(0LL,_25017_st.len() - 1LL);
		}
		_23813_obj+=jule::Str(") {\n", 4);
	}
	_20da77946_add_indent();
	_23813_obj+=_20da77946_indent();
	_23813_obj+=_20b6cc6d0_gen_scope((*(_23723_it))._field_scope);
	_23813_obj+=jule::Str("\n", 1);
	_20da77946_done_indent();
	_23813_obj+=_20da77946_indent();
	_23813_obj+=_20da752c3_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_23723_it)));
	_23813_obj+=jule::Str(":;\n", 3);
	_23813_obj+=_20da77946_indent();
	_23813_obj+=jule::Str("}\n", 2);
	_23813_obj+=_20da77946_indent();
	_23813_obj+=_20da752c3_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_23723_it)));
	_23813_obj+=jule::Str(":;", 2);
	return _23813_obj;
}



inline jule::Str _20b6cc6d0_gen_range_iter(jule::Ptr<_20cb4d853_RangeIter> _27323_it) {
	{
		
		if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_slc() != nullptr) {
			_case_begin_5307737920:;
			{
				return _20b6cc6d0_gen_range_index_iter(_27323_it);
			}
		}
		else if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_arr() != nullptr) {
			_case_begin_5307737472:;
			{
				return _20b6cc6d0_gen_range_index_iter(_27323_it);
			}
		}
		else if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_map() != nullptr) {
			_case_begin_5307738288:;
			{
				return _20b6cc6d0_gen_range_hashmap_iter(_27323_it);
			}
		}
		else {
			_case_begin_5307731408:;
			{
				return _20b6cc6d0_gen_range_index_iter(_27323_it);
			}
		}
		_match_end_5307731280:;
	}
}



inline jule::Str _20b6cc6d0_gen_cont(jule::Ptr<_20cb4d853_ContSt> _28213_c) {
	jule::Str _28313_obj = jule::Str("goto ", 5);
	_28313_obj+=_20da752c3_iter_next_label_ident((*(_28213_c))._field_it);
	_28313_obj+=jule::Str(";", 1);
	return _28313_obj;
}



inline jule::Str _20b6cc6d0_gen_label(jule::Ptr<_20cb4d853_Label> _28914_l) {
	return _20da752c3_label_ident((*(_28914_l))._field_ident) + jule::Str(":;", 2);
}



inline jule::Str _20b6cc6d0_gen_goto(jule::Ptr<_20cb4d853_GotoSt> _29313_gt) {
	jule::Str _29413_obj = jule::Str("goto ", 5);
	_29413_obj+=_20da752c3_label_ident((*(_29313_gt))._field_ident);
	_29413_obj+=jule::Str(";", 1);
	return _29413_obj;
}



inline jule::Str _20b6cc6d0_gen_postfix(jule::Ptr<_20cb4d853_Postfix> _30020_p) {
	jule::Str _30113_obj = jule::Str("(", 1);
	_30113_obj+=_20c1ee047_gen_expr((*(_30020_p))._field_expr);
	_30113_obj+=jule::Str(")", 1);
	_30113_obj+=(*(_30020_p))._field_op;
	_30113_obj+=jule::Str(";", 1);
	return _30113_obj;
}



inline jule::Str _20b6cc6d0_gen_div_by_zero_assign(jule::Ptr<_20cb4d853_Assign> _30931_a) {
	jule::Str _31013_obj = _20c1ee047_gen_expr((*(_30931_a))._field_l);
	_31013_obj+=jule::Str(" = ", 3);
	_31013_obj+=_20c1ee047_gen_div_by_zero_binop_expr_model((*(_30931_a))._field_op,(*(_30931_a))._field_l,(*(_30931_a))._field_r);
	_31013_obj+=jule::Str(";", 1);
	return _31013_obj;
}



inline jule::Str _20b6cc6d0_gen_assign(jule::Ptr<_20cb4d853_Assign> _31719_a) {
	{
		auto &_match_expr{ (*(_31719_a))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_5307760096:;
			{
				return _20b6cc6d0_gen_div_by_zero_assign(_31719_a);
			}
		}
		_match_end_5307759952:;
	}
	jule::Str _32313_obj = _20c1ee047_gen_expr((*(_31719_a))._field_l);
	_32313_obj+=(*(_31719_a))._field_op._field_kind;
	if (_20a20bc9e_OPT_APPEND) {
		{
			auto &_match_expr{ (*(_31719_a))._field_r };
			
			if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>>()) {
				_case_begin_5307762400:;
				{
					jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel> _32821_model = (*(_31719_a))._field_r.operator jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>();
					jule::Str _32918_expr;
					jule::Bool _32924_optimized;
					std::tie(_32918_expr,_32924_optimized) = _20c1ee047_gen_builtin_append_call_expr_model_assign((*(_31719_a))._field_l,_32821_model);
					if (_32924_optimized) {
						return _32918_expr;
					}
					_32313_obj+=_32918_expr;
				}
			}
			else {
				_case_begin_5307764880:;
				{
					_32313_obj+=_20c1ee047_gen_expr((*(_31719_a))._field_r);
				}
			}
			_match_end_5307764752:;
		}
	} else {
		_32313_obj+=_20c1ee047_gen_expr((*(_31719_a))._field_r);
	}
	_32313_obj+=jule::Str(";", 1);
	return _32313_obj;
}



inline jule::Str _20b6cc6d0_gen_multi_assign(jule::Ptr<_20cb4d853_MultiAssign> _34525_a) {
	jule::Str _34613_obj = jule::Str("std::tie(", 9);
	{
		auto &expr = (*(_34525_a))._field_l;
		auto it = expr.begin();
		_iter_begin_5307773264:;
		if (it != expr.end()) {
			jule::Any _20b6cc6d0_l = *it;
			{
				if (_20b6cc6d0_l == nullptr) {
					_34613_obj+=jule::Str("std::ignore", 11);
					_34613_obj+=jule::Str(",", 1);
				} else {
					_34613_obj+=_20c1ee047_gen_expr(_20b6cc6d0_l);
					_34613_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_5307773264:;
			++it;
			goto _iter_begin_5307773264;
		}
		_iter_end_5307773264:;
	}
	_34613_obj=_34613_obj.slice(0LL,_34613_obj.len() - 1LL);
	_34613_obj+=jule::Str(") = ", 4);
	_34613_obj+=_20c1ee047_gen_expr((*(_34525_a))._field_r);
	_34613_obj+=jule::Str(";", 1);
	return _34613_obj;
}



inline jule::Str _20b6cc6d0_get_case_match_expr(jule::Ptr<_20cb4d853_Match>& _36729_m) {
	if ((!((*((*(_36729_m))._field_expr))._method_is_const()))) {
		return jule::Str("_match_expr", 11);
	}
	if ((!((*((*((*(_36729_m))._field_expr))._field_constant))._method_is_bool())) || (!((*((*((*(_36729_m))._field_expr))._field_constant))._method_read_bool()))) {
		return _20c1ee047_gen_expr_model((*((*(_36729_m))._field_expr))._field_model);
	}
	return jule::Str();
}



inline jule::Str _20b6cc6d0_gen_case(jule::Ptr<_20cb4d853_Match> _37717_m,jule::Ptr<_20cb4d853_Case> _37732_c) {
	jule::Str _37813_obj = jule::Str();
	if (((*(_37732_c))._field_exprs.len() != 0LL) && (!((*(_37717_m))._method_is_generic_type_match()))) {
		if (((*(_37717_m))._field_cases.len() > 0LL) && ((*(_37717_m))._field_cases[0LL] == _37732_c)) {
			_37813_obj+=jule::Str("if (", 4);
		} else {
			_37813_obj+=jule::Str("else if (", 9);
		}
		{
			auto &expr = (*(_37732_c))._field_exprs;
			auto it = expr.begin();
			_iter_begin_5307790512:;
			if (it != expr.end()) {
				jule::Int _20b6cc6d0_i = it - expr.begin();
				jule::Ptr<_20d162d45_Data> _20b6cc6d0_expr = *it;
				{
					{
						
						if ((!((*(_37717_m))._field_type_match))) {
							_case_begin_5307794176:;
							{
								jule::Str _38921_case_expr = _20b6cc6d0_get_case_match_expr(_37717_m);
								if ((*((*(_37717_m))._field_expr))._method_good_operand(_20b6cc6d0_expr)) {
									if (_38921_case_expr.len() != 0LL) {
										_37813_obj+=_38921_case_expr;
										_37813_obj+=jule::Str(" == ", 4);
									}
									_37813_obj+=_20c1ee047_gen_expr((*(_20b6cc6d0_expr))._field_model);
								} else {
									_37813_obj+=_20c1ee047_gen_expr((*(_20b6cc6d0_expr))._field_model);
									if (_38921_case_expr.len() != 0LL) {
										_37813_obj+=jule::Str(" == ", 4);
										_37813_obj+=_38921_case_expr;
									}
								}
							}
						}
						else {
							_case_begin_5307793376:;
							{
								_37813_obj+=jule::Str("_match_expr", 11);
								_37813_obj+=jule::Str(".type_is<", 9);
								_37813_obj+=_20c1ee047_gen_expr((*(_20b6cc6d0_expr))._field_model);
								_37813_obj+=jule::Str(">()", 3);
							}
						}
						_match_end_5307793200:;
					}
					if ((_20b6cc6d0_i + 1LL) < (*(_37732_c))._field_exprs.len()) {
						_37813_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_5307790512:;
				++it;
				_20b6cc6d0_i++;
				goto _iter_begin_5307790512;
			}
			_iter_end_5307790512:;
		}
		_37813_obj+=jule::Str(") ", 2);
	} else if (((*(_37717_m))._field_default == _37732_c) && ((*(_37717_m))._field_cases.len() != 0LL)) {
		_37813_obj+=_20da77946_indent();
		_37813_obj+=jule::Str("else ", 5);
	}
	_20da77946_add_indent();
	_37813_obj+=jule::Str("{\n", 2);
	_37813_obj+=_20da77946_indent();
	_37813_obj+=_20da752c3_case_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_37732_c)));
	_37813_obj+=jule::Str(":;\n", 3);
	if ((*((*(_37732_c))._field_scope))._field_stmts.len() > 0LL) {
		_37813_obj+=_20da77946_indent();
		_37813_obj+=_20b6cc6d0_gen_scope((*(_37732_c))._field_scope);
		_37813_obj+=jule::Str("\n", 1);
	}
	_20da77946_done_indent();
	_37813_obj+=_20da77946_indent();
	_37813_obj+=jule::Str("}", 1);
	return _37813_obj;
}



inline jule::Str _20b6cc6d0_gen_match(jule::Ptr<_20cb4d853_Match> _44218_m) {
	if (((*(_44218_m))._field_cases.len() == 0LL) && ((*(_44218_m))._field_default == nullptr)) {
		return jule::Str();
	}
	jule::Bool _4479_generic_type_match = (*(_44218_m))._method_is_generic_type_match();
	if (_4479_generic_type_match && (((*(_44218_m))._field_default == nullptr) || ((*((*((*(_44218_m))._field_default))._field_scope))._field_stmts.len() == 0LL))) {
		return jule::Str();
	}
	jule::Str _45213_obj = jule::Str("{\n", 2);
	_20da77946_add_indent();
	_45213_obj+=_20da77946_indent();
	if ((!(_4479_generic_type_match)) && (!((*((*(_44218_m))._field_expr))._method_is_const()))) {
		if ((*((*(_44218_m))._field_expr))._field_lvalue && _20a20bc9e_OPT_COPY) {
			_45213_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_45213_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_45213_obj+=_20c1ee047_gen_expr((*((*(_44218_m))._field_expr))._field_model);
		_45213_obj+=jule::Str(" };\n", 4);
		_45213_obj+=_20da77946_indent();
	}
	if ((*(_44218_m))._field_cases.len() > 0LL) {
		{
			auto &expr = (*(_44218_m))._field_cases;
			auto it = expr.begin();
			_iter_begin_5307827616:;
			if (it != expr.end()) {
				jule::Ptr<_20cb4d853_Case> _20b6cc6d0_c = *it;
				{
					if (_20b6cc6d0_c == nullptr) {
						goto _iter_next_5307827616;
					}
					_45213_obj+=jule::Str("\n", 1);
					_45213_obj+=_20da77946_indent();
					_45213_obj+=_20b6cc6d0_gen_case(_44218_m,_20b6cc6d0_c);
				}
				_iter_next_5307827616:;
				++it;
				goto _iter_begin_5307827616;
			}
			_iter_end_5307827616:;
		}
	}
	if ((*(_44218_m))._field_default != nullptr) {
		_45213_obj+=jule::Str("\n", 1);
		_45213_obj+=_20b6cc6d0_gen_case(_44218_m,(*(_44218_m))._field_default);
	}
	_45213_obj+=jule::Str("\n", 1);
	_45213_obj+=_20da77946_indent();
	_45213_obj+=_20da752c3_match_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_44218_m)));
	_45213_obj+=jule::Str(":;", 2);
	_45213_obj+=jule::Str("\n", 1);
	_20da77946_done_indent();
	_45213_obj+=_20da77946_indent();
	_45213_obj+=jule::Str("}", 1);
	return _45213_obj;
}



inline jule::Str _20b6cc6d0_gen_fall_st(jule::Ptr<_20cb4d853_FallSt> _50016_f) {
	jule::Str _50113_obj = jule::Str("goto ", 5);
	_50113_obj+=_20da752c3_case_begin_label_ident((*(_50016_f))._field_dest_case);
	_50113_obj+=jule::Str(";", 1);
	return _50113_obj;
}



inline jule::Str _20b6cc6d0_gen_break_st(jule::Ptr<_20cb4d853_BreakSt> _50717_b) {
	jule::Str _50813_obj = jule::Str("goto ", 5);
	if ((*(_50717_b))._field_it != 0LL) {
		_50813_obj+=_20da752c3_iter_end_label_ident((*(_50717_b))._field_it);
	} else {
		_50813_obj+=_20da752c3_match_end_label_ident((*(_50717_b))._field_mtch);
	}
	_50813_obj+=jule::Str(";", 1);
	return _50813_obj;
}



inline jule::Str _20b6cc6d0_gen_ret_vars(jule::Ptr<_20cb4d853_RetSt> _51921_r) {
	jule::Str _52013_obj = jule::Str();
	{
		auto &expr = (*(_51921_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_5307844560:;
		if (it != expr.end()) {
			jule::Ptr<_20cdc725d_Var> _20b6cc6d0_v = *it;
			{
				if (_20c47803a_is_ignore_ident((*(_20b6cc6d0_v))._field_ident)) {
					_52013_obj+=_20c1ee047_get_init_expr((*((*(_20b6cc6d0_v))._field_kind))._field_kind);
				} else {
					_52013_obj+=_20da752c3_var_out_ident(_20b6cc6d0_v);
				}
				_52013_obj+=jule::Str(",", 1);
			}
			_iter_next_5307844560:;
			++it;
			goto _iter_begin_5307844560;
		}
		_iter_end_5307844560:;
	}
	_52013_obj=_52013_obj.slice(0LL,_52013_obj.len() - 1LL);
	jule::Str _53213_oobj = jule::Str("return ", 7);
	if ((*((*((*(_51921_r))._field_func))._field_decl))._field_exceptional) {
		_53213_oobj+=jule::Str("jule::Exceptional<", 18);
		_53213_oobj+=_20da75aa9_gen_type_kind((*((*(_51921_r))._field_func))._field_result);
		_53213_oobj+=jule::Str(">(jule::Any(), ", 15);
	}
	if ((*(_51921_r))._field_vars.len() > 1LL) {
		_53213_oobj+=jule::Str("std::make_tuple(", 16);
		_53213_oobj+=_52013_obj;
		_53213_oobj+=jule::Str(")", 1);
	} else {
		_53213_oobj+=_52013_obj;
	}
	if ((*((*((*(_51921_r))._field_func))._field_decl))._field_exceptional) {
		_53213_oobj+=jule::Str(")", 1);
	}
	_53213_oobj+=jule::Str(";", 1);
	return _53213_oobj;
}



inline jule::Str _20b6cc6d0_gen_ret_expr_tuple(jule::Ptr<_20cb4d853_RetSt> _55627_r) {
	jule::Slice<jule::Ptr<_20d162d45_Data>> _55713_datas = (*((*(_55627_r))._field_expr.operator jule::Ptr<_20ccedeed_TupleExprModel>()))._field_datas;
	jule::Str _55813_obj = jule::Str();
	{
		auto &expr = (*(_55627_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_5307860336:;
		if (it != expr.end()) {
			jule::Int _20b6cc6d0_i = it - expr.begin();
			jule::Ptr<_20cdc725d_Var> _20b6cc6d0_v = *it;
			{
				if (_20c47803a_is_ignore_ident((*(_20b6cc6d0_v))._field_ident)) {
					goto _iter_next_5307860336;
				}
				jule::Any _56417_model = (*(_55713_datas[_20b6cc6d0_i]))._field_model;
				if (_56417_model == _20b6cc6d0_v) {
					goto _iter_next_5307860336;
				}
				jule::Str _56913_ident = _20da752c3_var_out_ident(_20b6cc6d0_v);
				_55813_obj+=_56913_ident;
				_55813_obj+=jule::Str(" = ", 3);
				_55813_obj+=_20c1ee047_gen_expr(_56417_model);
				_55813_obj+=jule::Str(";\n", 2);
				_55813_obj+=_20da77946_indent();
			}
			_iter_next_5307860336:;
			++it;
			_20b6cc6d0_i++;
			goto _iter_begin_5307860336;
		}
		_iter_end_5307860336:;
	}
	jule::Str _57713_oobj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _55713_datas;
		auto it = expr.begin();
		_iter_begin_5307863504:;
		if (it != expr.end()) {
			jule::Int _20b6cc6d0_i = it - expr.begin();
			jule::Ptr<_20d162d45_Data> _20b6cc6d0_d = *it;
			{
				jule::Ptr<_20cdc725d_Var> _57917_v = (*(_55627_r))._field_vars[_20b6cc6d0_i];
				if (_20c47803a_is_ignore_ident((*(_57917_v))._field_ident)) {
					_57713_oobj+=_20c1ee047_gen_expr((*(_20b6cc6d0_d))._field_model);
				} else {
					_57713_oobj+=_20da752c3_var_out_ident(_57917_v);
				}
				_57713_oobj+=jule::Str(",", 1);
			}
			_iter_next_5307863504:;
			++it;
			_20b6cc6d0_i++;
			goto _iter_begin_5307863504;
		}
		_iter_end_5307863504:;
	}
	_57713_oobj=_57713_oobj.slice(0LL,_57713_oobj.len() - 1LL);
	_57713_oobj+=jule::Str(")", 1);
	if ((*((*((*(_55627_r))._field_func))._field_decl))._field_exceptional) {
		_55813_obj+=jule::Str("return jule::Exceptional<", 25);
		_55813_obj+=_20da75aa9_gen_type_kind((*((*(_55627_r))._field_func))._field_result);
		_55813_obj+=jule::Str(">(jule::Any(),", 14);
		_55813_obj+=_57713_oobj;
		_55813_obj+=jule::Str(")", 1);
	} else {
		_55813_obj+=jule::Str("return ", 7);
		_55813_obj+=_57713_oobj;
	}
	_55813_obj+=jule::Str(";", 1);
	return _55813_obj;
}



inline jule::Str _20b6cc6d0_gen_ret_expr(jule::Ptr<_20cb4d853_RetSt> _60621_r) {
	if ((*(_60621_r))._field_vars.len() > 1LL) {
		return _20b6cc6d0_gen_ret_expr_tuple(_60621_r);
	}
	if ((*(_60621_r))._field_vars.len() > 0LL) {
		jule::Ptr<_20cdc725d_Var> _61317_v = (*(_60621_r))._field_vars[0LL];
		if ((!(_20c47803a_is_ignore_ident((*(_61317_v))._field_ident))) && ((*(_60621_r))._field_expr != _61317_v)) {
			jule::Str _61517_ident = _20da752c3_var_out_ident(_61317_v);
			jule::Str _61621_obj = _61517_ident;
			_61621_obj+=jule::Str(" = ", 3);
			_61621_obj+=_20c1ee047_gen_expr((*(_60621_r))._field_expr);
			_61621_obj+=jule::Str(";\n", 2);
			_61621_obj+=_20da77946_indent();
			if ((*((*((*(_60621_r))._field_func))._field_decl))._field_exceptional) {
				_61621_obj+=jule::Str("return jule::Exceptional<", 25);
				_61621_obj+=_20da75aa9_gen_type_kind((*((*(_60621_r))._field_func))._field_result);
				_61621_obj+=jule::Str(">(jule::Any(),", 14);
				_61621_obj+=_61517_ident;
				_61621_obj+=jule::Str(")", 1);
			} else {
				_61621_obj+=jule::Str("return ", 7);
				_61621_obj+=_61517_ident;
			}
			_61621_obj+=jule::Str(";", 1);
			return _61621_obj;
		}
	}
	if ((*((*((*(_60621_r))._field_func))._field_decl))._field_exceptional) {
		jule::Str _63717_obj = jule::Str("return jule::Exceptional<", 25);
		_63717_obj+=_20da75aa9_gen_type_kind((*((*(_60621_r))._field_func))._field_result);
		_63717_obj+=jule::Str(">(jule::Any(),", 14);
		_63717_obj+=_20c1ee047_gen_expr((*(_60621_r))._field_expr);
		_63717_obj+=jule::Str(")", 1);
		_63717_obj+=jule::Str(";", 1);
		return _63717_obj;
	}
	jule::Str _64613_obj = jule::Str("return ", 7);
	_64613_obj+=_20c1ee047_gen_expr((*(_60621_r))._field_expr);
	_64613_obj+=jule::Str(";", 1);
	return _64613_obj;
}



inline jule::Str _20b6cc6d0_gen_ret_st(jule::Ptr<_20cb4d853_RetSt> _65219_r) {
	if (((*(_65219_r))._field_expr == nullptr) && ((*(_65219_r))._field_vars.len() == 0LL)) {
		if ((*((*((*(_65219_r))._field_func))._field_decl))._field_exceptional) {
			return jule::Str("return jule::VoidExceptional();", 31);
		}
		return jule::Str("return;", 7);
	}
	if ((*(_65219_r))._field_expr == nullptr) {
		return _20b6cc6d0_gen_ret_vars(_65219_r);
	}
	return _20b6cc6d0_gen_ret_expr(_65219_r);
}



inline jule::Str _20b6cc6d0_gen_data_expr(jule::Ptr<_20d162d45_Data> _68522_d) {
	return _20c1ee047_gen_expr((*(_68522_d))._field_model) + jule::Str(";", 1);
}



inline jule::Str _20b6cc6d0_gen_scope_var(jule::Ptr<_20cdc725d_Var> _68922_v) {
	if ((*(_68922_v))._field_constant) {
		return jule::Str();
	}
	return _20da77946_gen_var(_68922_v);
}



inline jule::Str _20b6cc6d0_gen_st(jule::Any _69715_st) {
	if (_69715_st == nullptr) {
		return jule::Str();
	}
	{
		auto &_match_expr{ _69715_st };
		
		if (_match_expr.type_is<jule::Ptr<_20cb4d853_Scope>>()) {
			_case_begin_5307933952:;
			{
				return _20b6cc6d0_gen_scope(_69715_st.operator jule::Ptr<_20cb4d853_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5307935888:;
			{
				return _20b6cc6d0_gen_scope_var(_69715_st.operator jule::Ptr<_20cdc725d_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
			_case_begin_5307935984:;
			{
				return _20b6cc6d0_gen_data_expr(_69715_st.operator jule::Ptr<_20d162d45_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Conditional>>()) {
			_case_begin_5307935632:;
			{
				return _20b6cc6d0_gen_conditional(_69715_st.operator jule::Ptr<_20cb4d853_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_InfIter>>()) {
			_case_begin_5307935728:;
			{
				return _20b6cc6d0_gen_inf_iter(_69715_st.operator jule::Ptr<_20cb4d853_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_WhileIter>>()) {
			_case_begin_5307934416:;
			{
				return _20b6cc6d0_gen_while_iter(_69715_st.operator jule::Ptr<_20cb4d853_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RangeIter>>()) {
			_case_begin_5307934512:;
			{
				return _20b6cc6d0_gen_range_iter(_69715_st.operator jule::Ptr<_20cb4d853_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_ContSt>>()) {
			_case_begin_5307934608:;
			{
				return _20b6cc6d0_gen_cont(_69715_st.operator jule::Ptr<_20cb4d853_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Label>>()) {
			_case_begin_5307934704:;
			{
				return _20b6cc6d0_gen_label(_69715_st.operator jule::Ptr<_20cb4d853_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_GotoSt>>()) {
			_case_begin_5307936464:;
			{
				return _20b6cc6d0_gen_goto(_69715_st.operator jule::Ptr<_20cb4d853_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Postfix>>()) {
			_case_begin_5307936576:;
			{
				return _20b6cc6d0_gen_postfix(_69715_st.operator jule::Ptr<_20cb4d853_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Assign>>()) {
			_case_begin_5307936688:;
			{
				return _20b6cc6d0_gen_assign(_69715_st.operator jule::Ptr<_20cb4d853_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_MultiAssign>>()) {
			_case_begin_5307936800:;
			{
				return _20b6cc6d0_gen_multi_assign(_69715_st.operator jule::Ptr<_20cb4d853_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_Match>>()) {
			_case_begin_5307936912:;
			{
				return _20b6cc6d0_gen_match(_69715_st.operator jule::Ptr<_20cb4d853_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_FallSt>>()) {
			_case_begin_5307937024:;
			{
				return _20b6cc6d0_gen_fall_st(_69715_st.operator jule::Ptr<_20cb4d853_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_BreakSt>>()) {
			_case_begin_5307937136:;
			{
				return _20b6cc6d0_gen_break_st(_69715_st.operator jule::Ptr<_20cb4d853_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb4d853_RetSt>>()) {
			_case_begin_5307937248:;
			{
				return _20b6cc6d0_gen_ret_st(_69715_st.operator jule::Ptr<_20cb4d853_RetSt>());
			}
		}
		else {
			_case_begin_5307935312:;
			{
				return jule::Str("<unimplemented_stmt>", 20);
			}
		}
		_match_end_5307935072:;
	}
}



inline jule::Str _20b6cc6d0_gen_scope(jule::Ptr<_20cb4d853_Scope> _72518_s) {
	jule::Str _72613_obj = jule::Str("{\n", 2);
	_20da77946_add_indent();
	{
		auto &expr = (*(_72518_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_5307964960:;
		if (it != expr.end()) {
			jule::Any _20b6cc6d0_st = *it;
			{
				_72613_obj+=_20da77946_indent();
				_72613_obj+=_20b6cc6d0_gen_st(_20b6cc6d0_st);
				_72613_obj+=jule::Str("\n", 1);
			}
			_iter_next_5307964960:;
			++it;
			goto _iter_begin_5307964960;
		}
		_iter_end_5307964960:;
	}
	_20da77946_done_indent();
	_72613_obj+=_20da77946_indent();
	_72613_obj+=jule::Str("}", 1);
	if ((*(_72518_s))._field_deferred) {
		_72613_obj=(jule::Str("__JULE_DEFER(", 13) + _72613_obj) + jule::Str(");", 2);
	}
	return _72613_obj;
}



inline jule::Str _20b6cc6d0_gen_fn_scope(jule::Ptr<_20c819332_FnIns> _74721_f) {
	jule::Str _74813_obj = ((((*(_74721_f))._field_owner != nullptr)) ? (_20b6cc6d0_gen_method_scope(_74721_f)) : (_20b6cc6d0_gen_scope((*(_74721_f))._field_scope)));
	if ((*((*(_74721_f))._field_decl))._field_exceptional && (*((*(_74721_f))._field_decl))._method_is_void()) {
		_74813_obj=_74813_obj.slice(0LL,_74813_obj.len() - 2LL) + jule::Str(" return jule::VoidExceptional(); }", 34);
	}
	return _74813_obj;
}



inline jule::Str _20b6cc6d0_gen_method_scope(jule::Ptr<_20c819332_FnIns> _76025_f) {
	return _20b6cc6d0_gen_scope((*(_76025_f))._field_scope);
}



inline jule::Str _20c1ee047_concat_all_parts(jule::Slice<_20c47803a_Token> _8221_parts) {
	jule::Str _8313_s = jule::Str();
	{
		auto &expr = _8221_parts;
		auto it = expr.begin();
		_iter_begin_5307978480:;
		if (it != expr.end()) {
			_20c47803a_Token &_20c1ee047_part = *it;
			{
				_8313_s+=_20c1ee047_part._field_kind;
			}
			_iter_next_5307978480:;
			++it;
			goto _iter_begin_5307978480;
		}
		_iter_end_5307978480:;
	}
	return _8313_s;
}



inline jule::Str _20c1ee047_decompose_common_esq(jule::U8 _9025_b) {
	{
		auto &_match_expr{ _9025_b };
		
		if (_match_expr == '\\') {
			_case_begin_5307982176:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_5307982272:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_5307982368:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_5307981536:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_5307981632:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_5307981728:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_5307980976:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_5307981072:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_5307981168:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_5307981264:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_5307979584:;
			{
				return jule::Str();
			}
		}
		_match_end_5307979392:;
	}
}



inline jule::Str _20c1ee047_sbtoa(jule::U8 _10610_b) {
	if (_10610_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_10610_b <= 127LL) {
		jule::Str _11213_seq = _20c1ee047_decompose_common_esq(_10610_b);
		if (_11213_seq != jule::Str()) {
			return _11213_seq;
		}
		if ((32LL <= _10610_b) && (_10610_b <= 126LL)) {
			return static_cast<jule::Str>(_10610_b);
		}
	}
	jule::Str _1229_seq = _20bcb4a20_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_10610_b)),8LL);
	if (_1229_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1229_seq;
	}
	return jule::Str("\\", 1) + _1229_seq;
}



inline jule::Str _20c1ee047_get_cstr_model(jule::Slice<jule::U8> _12919_bytes) {
	jule::Str _13013_lit = jule::Str();
	{
		auto &expr = _12919_bytes;
		auto it = expr.begin();
		_iter_begin_5307997008:;
		if (it != expr.end()) {
			jule::U8 &_20c1ee047_b = *it;
			{
				_13013_lit+=_20c1ee047_sbtoa(_20c1ee047_b);
			}
			_iter_next_5307997008:;
			++it;
			goto _iter_begin_5307997008;
		}
		_iter_end_5307997008:;
	}
	return (jule::Str("\"", 1) + _13013_lit) + jule::Str("\"", 1);
}



inline jule::Str _20c1ee047_get_str_model(jule::Ptr<_20d78b3e6_Const>& _13819_c) {
	jule::Str _1399_content = (*(_13819_c))._method_read_str();
	if (_1399_content.len() == 0LL) {
		return _20da752c3_as_jt(jule::Str("str", 3)) + jule::Str("()", 2);
	}
	jule::Slice<jule::U8> _1449_bytes = static_cast<jule::Slice<jule::U8>>(_1399_content);
	jule::Str _1459_len = _20bcb4a20_fmt_int(static_cast<jule::I64>(_1449_bytes.len()),10LL);
	jule::Str _1469_lit = _20c1ee047_get_cstr_model(_1449_bytes);
	return ((((_20da752c3_as_jt(jule::Str("str", 3)) + jule::Str("(", 1)) + _1469_lit) + jule::Str(", ", 2)) + _1459_len) + jule::Str(")", 1);
}



inline jule::Str _20c1ee047_get_bool_model(jule::Ptr<_20d78b3e6_Const>& _15020_c) {
	if ((*(_15020_c))._method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _20c1ee047_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _20c1ee047_gen_float_special_cases(jule::F64& _15929_x) {
	{
		
		if (_20bda4d41_is_nan(_15929_x)) {
			_case_begin_5308013936:;
			{
				return jule::Str("NAN", 3);
			}
		}
		else if (_20bda4d41_is_inf(_15929_x,1LL)) {
			_case_begin_5308014144:;
			{
				return jule::Str("INFINITY", 8);
			}
		}
		else if (_20bda4d41_is_inf(_15929_x,-1LL)) {
			_case_begin_5308014240:;
			{
				return jule::Str("-INFINITY", 9);
			}
		}
		else {
			_case_begin_5308012496:;
			{
				return jule::Str();
			}
		}
		_match_end_5308012320:;
	}
}



inline jule::Str _20c1ee047_ftoa(jule::F64 _1689_f,jule::Int _16817_bitsize) {
	if (_16817_bitsize != 32LL) {
		if (_1689_f == static_cast<jule::F64>(static_cast<jule::I64>(_1689_f))) {
			return _20c1ee047_i64toa(static_cast<jule::I64>(static_cast<jule::I64>(_1689_f)));
		}
		if (_1689_f == static_cast<jule::F64>(static_cast<jule::U64>(_1689_f))) {
			return _20c1ee047_u64toa(static_cast<jule::U64>(static_cast<jule::U64>(_1689_f)));
		}
	}
	jule::Str _17813_m = _20b639c14_fmt_float(_1689_f,'f',-1LL,_16817_bitsize);
	if ((!(_20a405ddd_contains(_17813_m,jule::Str(".", 1))))) {
		_17813_m+=jule::Str(".0", 2);
	}
	return _17813_m;
}



inline jule::Str _20c1ee047_get_f32_model(jule::Ptr<_20d78b3e6_Const>& _18519_c) {
	jule::F64 _1869_x = (*(_18519_c))._method_as_f64();
	jule::Str _1899_f = _20c1ee047_gen_float_special_cases(_1869_x);
	if (_1899_f != jule::Str()) {
		return _1899_f;
	}
	{
		
		if (_1869_x == 340282346638528860000000000000000000000.0) {
			_case_begin_5308028208:;
			{
				return jule::Str("jule::MAX_F32", 13);
			}
		}
		else if (_1869_x == -340282346638528860000000000000000000000.0) {
			_case_begin_5308028304:;
			{
				return jule::Str("jule::MIN_F32", 13);
			}
		}
		_match_end_5308028560:;
	}
	return _20c1ee047_ftoa(_1869_x,32LL) + jule::Str("f", 1);
}



inline jule::Str _20c1ee047_get_f64_model(jule::Ptr<_20d78b3e6_Const>& _20219_c) {
	jule::F64 _2039_x = (*(_20219_c))._method_as_f64();
	jule::Str _2069_f = _20c1ee047_gen_float_special_cases(_2039_x);
	if (_2069_f != jule::Str()) {
		return _2069_f;
	}
	{
		
		if (_2039_x == jule::MAX_F64) {
			_case_begin_5308034976:;
			{
				return jule::Str("jule::MAX_F64", 13);
			}
		}
		else if (_2039_x == jule::MIN_F64) {
			_case_begin_5308035072:;
			{
				return jule::Str("jule::MIN_F64", 13);
			}
		}
		_match_end_5308035328:;
	}
	return _20c1ee047_ftoa(_2039_x,64LL);
}



inline jule::Str _20c1ee047_get_float_model(jule::Ptr<_20d162d45_Data>& _21925_d) {
	{
		
		if ((*((*((*(_21925_d))._field_kind))._method_prim()))._method_is_f32()) {
			_case_begin_5308041040:;
			{
				return _20c1ee047_get_f32_model((*(_21925_d))._field_constant);
			}
		}
		else {
			_case_begin_5308036704:;
			{
				return _20c1ee047_get_f64_model((*(_21925_d))._field_constant);
			}
		}
		_match_end_5308038112:;
	}
}



inline jule::Str _20c1ee047_i64toa(jule::I64 _22611_x) {
	{
		
		if (_22611_x == jule::MAX_I64) {
			_case_begin_5308042592:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if (_22611_x == jule::MIN_I64) {
			_case_begin_5308042688:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_5308042800:;
	}
	jule::Str _2329_fmt = _20bcb4a20_fmt_int(_22611_x,10LL);
	if (_20a314307_is_64bit(jule::Str("i386", 4))) {
		return _2329_fmt + jule::Str("LL", 2);
	}
	return _2329_fmt + jule::Str("L", 1);
}



inline jule::Str _20c1ee047_get_i64_model(jule::Ptr<_20d78b3e6_Const>& _23919_c) {
	return _20c1ee047_i64toa(static_cast<jule::I64>((*(_23919_c))._method_read_i64()));
}



inline jule::Str _20c1ee047_u64toa(jule::U64 _24311_x) {
	{
		
		if (_24311_x == jule::MAX_U64) {
			_case_begin_5308049280:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_5308049584:;
	}
	jule::Str _2499_fmt = _20bcb4a20_fmt_uint(_24311_x,10LL);
	if (_20a314307_is_64bit(jule::Str("i386", 4))) {
		return _2499_fmt + jule::Str("LLU", 3);
	}
	return _2499_fmt + jule::Str("LU", 2);
}



inline jule::Str _20c1ee047_get_u64_model(jule::Ptr<_20d78b3e6_Const> _25618_c) {
	return _20c1ee047_u64toa(static_cast<jule::U64>((*(_25618_c))._method_read_u64()));
}



inline jule::Str _20c1ee047_gen_const_expr(jule::Ptr<_20d162d45_Data> _26023_d) {
	{
		
		if ((*((*(_26023_d))._field_constant))._method_is_str()) {
			_case_begin_5308059168:;
			{
				return _20c1ee047_get_str_model((*(_26023_d))._field_constant);
			}
		}
		else if ((*((*(_26023_d))._field_constant))._method_is_bool()) {
			_case_begin_5308059264:;
			{
				return _20c1ee047_get_bool_model((*(_26023_d))._field_constant);
			}
		}
		else if ((*((*(_26023_d))._field_constant))._method_is_f64()) {
			_case_begin_5308059360:;
			{
				return _20c1ee047_get_float_model(_26023_d);
			}
		}
		else if ((*((*(_26023_d))._field_constant))._method_is_i64()) {
			_case_begin_5308058528:;
			{
				return _20c1ee047_get_i64_model((*(_26023_d))._field_constant);
			}
		}
		else if ((*((*(_26023_d))._field_constant))._method_is_u64()) {
			_case_begin_5308058624:;
			{
				return _20c1ee047_get_u64_model((*(_26023_d))._field_constant);
			}
		}
		else if ((*((*(_26023_d))._field_constant))._method_is_nil()) {
			_case_begin_5308058720:;
			{
				return _20c1ee047_get_nil_model();
			}
		}
		else {
			_case_begin_5308055936:;
			{
				return jule::Str();
			}
		}
		_match_end_5308055088:;
	}
}



inline jule::Str _20c1ee047_gen_const_expr_model(jule::Ptr<_20d78b3e6_Const> _27225_m) {
	{
		
		if ((*(_27225_m))._method_is_str()) {
			_case_begin_5308072720:;
			{
				return _20c1ee047_get_str_model(_27225_m);
			}
		}
		else if ((*(_27225_m))._method_is_bool()) {
			_case_begin_5308072816:;
			{
				return _20c1ee047_get_bool_model(_27225_m);
			}
		}
		else if ((*(_27225_m))._method_is_f64()) {
			_case_begin_5308072912:;
			{
				return _20c1ee047_get_f64_model(_27225_m);
			}
		}
		else if ((*(_27225_m))._method_is_i64()) {
			_case_begin_5308072080:;
			{
				return _20c1ee047_get_i64_model(_27225_m);
			}
		}
		else if ((*(_27225_m))._method_is_u64()) {
			_case_begin_5308072176:;
			{
				return _20c1ee047_get_u64_model(_27225_m);
			}
		}
		else if ((*(_27225_m))._method_is_nil()) {
			_case_begin_5308072272:;
			{
				return _20c1ee047_get_nil_model();
			}
		}
		else {
			_case_begin_5308068272:;
			{
				return jule::Str();
			}
		}
		_match_end_5308070800:;
	}
}



inline jule::Str _20c1ee047_gen_div_by_zero_binop_expr_model(_20c47803a_Token& _28438_op,jule::Any& _28454_l,jule::Any& _28473_r) {
	jule::Str _28513_op_func = jule::Str();
	{
		auto &_match_expr{ _28438_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("/=", 2)) {
			_case_begin_5308082976:;
			{
				_28513_op_func=jule::Str("div", 3);
			}
		}
		else if (_match_expr == jule::Str("%", 1) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_5308083072:;
			{
				_28513_op_func=jule::Str("mod", 3);
			}
		}
		_match_end_5308082896:;
	}
	if (_20a20bc9e_OPT_MATH) {
		{
			auto &_match_expr{ _28473_r };
			
			if (_match_expr.type_is<jule::Ptr<_20d78b3e6_Const>>()) {
				_case_begin_5308086512:;
				{
					_28513_op_func=jule::Str("unsafe_", 7) + _28513_op_func;
				}
			}
			_match_end_5308086432:;
		}
	}
	jule::Str _29813_obj = jule::Str("jule::", 6);
	_29813_obj+=_28513_op_func;
	_29813_obj+=jule::Str("(", 1);
	if ((!(_20a20bc9e_PRODUCTION))) {
		_29813_obj+=_20c1ee047_gen_loc_info(_28438_op);
		_29813_obj+=jule::Str(",", 1);
	}
	_29813_obj+=_20c1ee047_gen_expr(_28454_l);
	_29813_obj+=jule::Str(",", 1);
	_29813_obj+=_20c1ee047_gen_expr(_28473_r);
	_29813_obj+=jule::Str(")", 1);
	return _29813_obj;
}



inline jule::Str _20c1ee047_gen_binop_expr_model(jule::Ptr<_20ccedeed_BinopExprModel> _31229_m) {
	{
		auto &_match_expr{ (*(_31229_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_5308092384:;
			{
				return _20c1ee047_gen_div_by_zero_binop_expr_model((*(_31229_m))._field_op,(*(_31229_m))._field_left,(*(_31229_m))._field_right);
			}
		}
		_match_end_5308092272:;
	}
	jule::Str _31913_obj = jule::Str("(", 1);
	_31913_obj+=_20c1ee047_gen_expr_model((*(_31229_m))._field_left);
	_31913_obj+=jule::Str(" ", 1);
	_31913_obj+=(*(_31229_m))._field_op._field_kind;
	_31913_obj+=jule::Str(" ", 1);
	_31913_obj+=_20c1ee047_gen_expr_model((*(_31229_m))._field_right);
	_31913_obj+=jule::Str(")", 1);
	return _31913_obj;
}



inline jule::Str _20c1ee047_gen_var_expr_model(jule::Ptr<_20cdc725d_Var> _32927_m) {
	if ((*(_32927_m))._field_cpp_linked) {
		jule::Ptr<_20c476dc4_Directive> _33113_d = _20da75aa9_find_directive((*(_32927_m))._field_directives,jule::Str("namespace", 9));
		if (_33113_d != nullptr) {
			jule::Str _33321_obj = _20c1ee047_concat_all_parts((*(_33113_d))._field_args);
			_33321_obj+=jule::Str("::", 2);
			_33321_obj+=_20da752c3_var_out_ident(_32927_m);
			return _33321_obj;
		}
	}
	return _20da752c3_var_out_ident(_32927_m);
}



inline jule::Str _20c1ee047_gen_struct_expr_model(jule::Ptr<_20c496047_Struct> _34226_m) {
	return _20da75aa9_gen_struct_kind(_34226_m);
}



inline jule::Str _20c1ee047_gen_struct_ins_expr_model(jule::Ptr<_20c496047_StructIns> _34634_m) {
	return _20da75aa9_gen_struct_kind_ins(_34634_m);
}



inline jule::Str _20c1ee047_gen_unary_expr_model(jule::Ptr<_20ccedeed_UnaryExprModel> _35029_m) {
	if (_20a20bc9e_OPT_PTR && ((*(_35029_m))._field_op._field_kind == jule::Str("*", 1))) {
		{
			auto &_match_expr{ (*((*(_35029_m))._field_expr))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_20ccedeed_UnaryExprModel>>()) {
				_case_begin_5308109072:;
				{
					jule::Ptr<_20ccedeed_UnaryExprModel> _35421_um = (*((*(_35029_m))._field_expr))._field_model.operator jule::Ptr<_20ccedeed_UnaryExprModel>();
					if ((*(_35421_um))._field_op._field_kind == jule::Str("&", 1)) {
						return _20c1ee047_gen_expr_model((*((*(_35421_um))._field_expr))._field_model);
					}
				}
			}
			_match_end_5308108976:;
		}
	}
	{
		auto &_match_expr{ (*(_35029_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_5308109696:;
			{
				jule::Str _36317_obj = jule::Str("(~(", 3);
				_36317_obj+=_20c1ee047_gen_expr((*((*(_35029_m))._field_expr))._field_model);
				_36317_obj+=jule::Str("))", 2);
				return _36317_obj;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5308109792:;
			{
				if (_20a20bc9e_PRODUCTION || ((*((*((*(_35029_m))._field_expr))._field_kind))._method_sptr() == nullptr)) {
					goto _match_end_5308102048;
				}
				jule::Str _37317_obj = _20c1ee047_gen_expr((*((*(_35029_m))._field_expr))._field_model);
				_37317_obj+=jule::Str(".get(", 5);
				_37317_obj+=_20c1ee047_gen_loc_info((*(_35029_m))._field_op);
				_37317_obj+=jule::Str(")", 1);
				return _37317_obj;
			}
		}
		_match_end_5308102048:;
	}
	jule::Str _38013_obj = jule::Str("(", 1);
	_38013_obj+=(*(_35029_m))._field_op._field_kind;
	_38013_obj+=jule::Str("(", 1);
	_38013_obj+=_20c1ee047_gen_expr((*((*(_35029_m))._field_expr))._field_model);
	_38013_obj+=jule::Str("))", 2);
	return _38013_obj;
}



inline jule::Str _20c1ee047_gen_cpp_struct_lit_expr_model(jule::Ptr<_20ccedeed_StructLitExprModel> _38838_m) {
	jule::Str _38913_obj = jule::Str("(", 1) + _20da75aa9_gen_struct_kind_ins((*(_38838_m))._field_strct);
	_38913_obj+=jule::Str("){", 2);
	if ((*(_38838_m))._field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_38838_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_5308130560:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> _20c1ee047_f = *it;
				{
					if ((*((*((*(_38838_m))._field_strct))._field_decl))._field_cpp_linked) {
						{
							auto &expr = (*(_38838_m))._field_args;
							auto it = expr.begin();
							_iter_begin_5308133200:;
							if (it != expr.end()) {
								jule::Ptr<_20ccedeed_StructArgExprModel> _20c1ee047_arg = *it;
								{
									if ((*(_20c1ee047_arg))._field_field == _20c1ee047_f) {
										_38913_obj+=jule::Str(".", 1);
										_38913_obj+=_20da752c3_field_out_ident((*(_20c1ee047_f))._field_decl);
										_38913_obj+=jule::Str("=", 1);
										_38913_obj+=_20c1ee047_gen_expr((*(_20c1ee047_arg))._field_expr);
										_38913_obj+=jule::Str(",", 1);
										goto _iter_next_5308130560;
									}
								}
								_iter_next_5308133200:;
								++it;
								goto _iter_begin_5308133200;
							}
							_iter_end_5308133200:;
						}
						goto _iter_next_5308130560;
					}
					_38913_obj+=_20da752c3_field_out_ident((*(_20c1ee047_f))._field_decl);
					_38913_obj+=jule::Str(": ", 2);
					{
						auto &expr = (*(_38838_m))._field_args;
						auto it = expr.begin();
						_iter_begin_5308139232:;
						if (it != expr.end()) {
							jule::Ptr<_20ccedeed_StructArgExprModel> _20c1ee047_arg = *it;
							{
								if ((*(_20c1ee047_arg))._field_field == _20c1ee047_f) {
									_38913_obj+=_20c1ee047_gen_expr((*(_20c1ee047_arg))._field_expr);
									_38913_obj+=jule::Str(",", 1);
									goto _iter_next_5308130560;
								}
							}
							_iter_next_5308139232:;
							++it;
							goto _iter_begin_5308139232;
						}
						_iter_end_5308139232:;
					}
					_38913_obj+=_20c1ee047_get_init_expr((*(_20c1ee047_f))._field_kind);
					_38913_obj+=jule::Str(",", 1);
				}
				_iter_next_5308130560:;
				++it;
				goto _iter_begin_5308130560;
			}
			_iter_end_5308130560:;
		}
		_38913_obj=_38913_obj.slice(0LL,_38913_obj.len() - 1LL);
	}
	_38913_obj+=jule::Str("}", 1);
	return _38913_obj;
}



inline jule::Str _20c1ee047_gen_struct_lit_expr_model(jule::Ptr<_20ccedeed_StructLitExprModel> _42634_m) {
	if ((*((*((*(_42634_m))._field_strct))._field_decl))._field_cpp_linked) {
		return _20c1ee047_gen_cpp_struct_lit_expr_model(_42634_m);
	}
	jule::Str _43113_obj = _20da752c3_struct_ins_out_ident((*(_42634_m))._field_strct);
	_43113_obj+=jule::Str("(", 1);
	if ((*(_42634_m))._field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_42634_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_5308150608:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> _20c1ee047_f = *it;
				{
					{
						auto &expr = (*(_42634_m))._field_args;
						auto it = expr.begin();
						_iter_begin_5308152320:;
						if (it != expr.end()) {
							jule::Ptr<_20ccedeed_StructArgExprModel> _20c1ee047_arg = *it;
							{
								if ((*(_20c1ee047_arg))._field_field == _20c1ee047_f) {
									_43113_obj+=_20c1ee047_gen_expr((*(_20c1ee047_arg))._field_expr);
									_43113_obj+=jule::Str(",", 1);
									goto _iter_next_5308150608;
								}
							}
							_iter_next_5308152320:;
							++it;
							goto _iter_begin_5308152320;
						}
						_iter_end_5308152320:;
					}
					_43113_obj+=_20c1ee047_get_init_expr((*(_20c1ee047_f))._field_kind);
					_43113_obj+=jule::Str(",", 1);
				}
				_iter_next_5308150608:;
				++it;
				goto _iter_begin_5308150608;
			}
			_iter_end_5308150608:;
		}
		_43113_obj=_43113_obj.slice(0LL,_43113_obj.len() - 1LL);
	}
	_43113_obj+=jule::Str(")", 1);
	return _43113_obj;
}



inline jule::Str _20c1ee047_gen_alloc_struct_lit_expr_model(jule::Ptr<_20ccedeed_AllocStructLitExprModel> _45240_m) {
	jule::Str _45313_obj = jule::Str("jule::new_struct", 16);
	if ((*((*((*((*(_45240_m))._field_lit))._field_strct))._field_decl))._method_has_ref_accessible()) {
		_45313_obj+=jule::Str("_ptr", 4);
	}
	_45313_obj+=jule::Str("<", 1);
	_45313_obj+=_20da752c3_struct_ins_out_ident((*((*(_45240_m))._field_lit))._field_strct);
	_45313_obj+=jule::Str(">(", 2);
	if ((!(_20a20bc9e_PRODUCTION))) {
		_45313_obj+=_20c1ee047_gen_loc_info((*((*(_45240_m))._field_lit))._field_token);
		_45313_obj+=jule::Str(",", 1);
	}
	_45313_obj+=jule::Str("new( std::nothrow ) ", 20);
	_45313_obj+=_20c1ee047_gen_struct_lit_expr_model((*(_45240_m))._field_lit);
	_45313_obj+=jule::Str(")", 1);
	return _45313_obj;
}



inline jule::Str _20c1ee047_gen_casting_expr_model(jule::Ptr<_20ccedeed_CastingExprModel> _47031_m) {
	jule::Str _47113_obj = jule::Str();
	{
		
		if (((*((*(_47031_m))._field_kind))._method_prim() != nullptr) && (*((*((*(_47031_m))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5308169408:;
			{
				_47113_obj+=_20da75aa9_gen_type_kind((*(_47031_m))._field_kind);
				_47113_obj+=jule::Str("(", 1);
				_47113_obj+=_20c1ee047_gen_expr_model((*(_47031_m))._field_expr);
				_47113_obj+=jule::Str(")", 1);
			}
		}
		else if ((*((*(_47031_m))._field_expr_kind))._method_ptr() != nullptr || (*((*(_47031_m))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5308172128:;
			{
				_47113_obj+=jule::Str("((", 2);
				_47113_obj+=_20da75aa9_gen_type_kind((*(_47031_m))._field_kind);
				_47113_obj+=jule::Str(")(", 2);
				_47113_obj+=_20c1ee047_gen_expr((*(_47031_m))._field_expr);
				_47113_obj+=jule::Str("))", 2);
			}
		}
		else if ((*((*(_47031_m))._field_expr_kind))._method_trt() != nullptr || ((*((*(_47031_m))._field_expr_kind))._method_prim() != nullptr) && (*((*((*(_47031_m))._field_expr_kind))._method_prim()))._method_is_any()) {
			_case_begin_5308172400:;
			{
				_47113_obj+=_20c1ee047_gen_expr_model((*(_47031_m))._field_expr);
				_47113_obj+=jule::Str(".", 1);
				if (_20a20bc9e_PRODUCTION) {
					_47113_obj+=jule::Str("operator ", 9);
					_47113_obj+=_20da75aa9_gen_type_kind((*(_47031_m))._field_kind);
					_47113_obj+=jule::Str("()", 2);
				} else {
					if (((*((*(_47031_m))._field_expr_kind))._method_trt() != nullptr) && ((*((*(_47031_m))._field_kind))._method_sptr() != nullptr)) {
						_47113_obj+=jule::Str("cast_ptr<", 9);
						_47113_obj+=_20da75aa9_gen_type_kind((*((*((*(_47031_m))._field_kind))._method_sptr()))._field_elem);
					} else {
						_47113_obj+=jule::Str("cast<", 5);
						_47113_obj+=_20da75aa9_gen_type_kind((*(_47031_m))._field_kind);
					}
					_47113_obj+=jule::Str(">(", 2);
					_47113_obj+=_20c1ee047_gen_loc_info((*(_47031_m))._field_token);
					_47113_obj+=jule::Str(")", 1);
				}
			}
		}
		else {
			_case_begin_5308168608:;
			{
				_47113_obj+=jule::Str("static_cast<", 12);
				_47113_obj+=_20da75aa9_gen_type_kind((*(_47031_m))._field_kind);
				_47113_obj+=jule::Str(">(", 2);
				_47113_obj+=_20c1ee047_gen_expr((*(_47031_m))._field_expr);
				_47113_obj+=jule::Str(")", 1);
			}
		}
		_match_end_5308168496:;
	}
	return _47113_obj;
}



inline jule::Str _20c1ee047_gen_arg_expr_models(jule::Slice<jule::Any> _51828_models) {
	if (_51828_models.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _52313_obj = jule::Str();
	{
		auto &expr = _51828_models;
		auto it = expr.begin();
		_iter_begin_5308186608:;
		if (it != expr.end()) {
			jule::Any _20c1ee047_m = *it;
			{
				_52313_obj+=_20c1ee047_gen_expr(_20c1ee047_m);
				_52313_obj+=jule::Str(",", 1);
			}
			_iter_next_5308186608:;
			++it;
			goto _iter_begin_5308186608;
		}
		_iter_end_5308186608:;
	}
	_52313_obj=_52313_obj.slice(0LL,_52313_obj.len() - 1LL);
	return _52313_obj;
}



inline jule::Str _20c1ee047_gen_expr_model_for_call(jule::Any _53232_expr) {
	{
		auto &_match_expr{ _53232_expr };
		
		if (_match_expr.type_is<jule::Ptr<_20c819332_FnIns>>()) {
			_case_begin_5308199504:;
			{
				return _20c1ee047_gen_fn_ins_expr_model(_53232_expr.operator jule::Ptr<_20c819332_FnIns>());
			}
		}
		else {
			_case_begin_5308200992:;
			{
				return _20c1ee047_gen_expr_model(_53232_expr);
			}
		}
		_match_end_5308199024:;
	}
}



inline jule::Str _20c1ee047_gen_loc_info(_20c47803a_Token& _53918_t) {
	jule::Str _54013_loc = (*(_53918_t._field_file))._method_path();
	_54013_loc+=jule::Str(":", 1);
	_54013_loc+=_20bcb4a20_itoa(_53918_t._field_row);
	_54013_loc+=jule::Str(":", 1);
	_54013_loc+=_20bcb4a20_itoa(_53918_t._field_column);
	return _20c1ee047_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_54013_loc));
}



inline jule::Str _20c1ee047_gen_pure_fn_call_expr_model(jule::Ptr<_20ccedeed_FnCallExprModel>& _54837_m) {
	jule::Str _54913_obj = _20c1ee047_gen_expr_model_for_call((*(_54837_m))._field_expr);
	if ((!((*((*(_54837_m))._field_func))._method_is_builtin()))) {
		if ((*((*((*(_54837_m))._field_func))._field_decl))._field_cpp_linked && ((*((*(_54837_m))._field_func))._field_generics.len() > 0LL)) {
			if ((!(_20da75aa9_has_directive((*((*((*(_54837_m))._field_func))._field_decl))._field_directives,jule::Str("cdef", 4))))) {
				_54913_obj+=jule::Str("<", 1);
				{
					auto &expr = (*((*(_54837_m))._field_func))._field_generics;
					auto it = expr.begin();
					_iter_begin_5308213952:;
					if (it != expr.end()) {
						jule::Ptr<_20d4a6c9e_TypeKind> _20c1ee047_g = *it;
						{
							_54913_obj+=_20da75aa9_gen_type_kind(_20c1ee047_g);
							_54913_obj+=jule::Str(",", 1);
						}
						_iter_next_5308213952:;
						++it;
						goto _iter_begin_5308213952;
					}
					_iter_end_5308213952:;
				}
				_54913_obj=_54913_obj.slice(0LL,_54913_obj.len() - 1LL);
				_54913_obj+=jule::Str(">", 1);
			}
		}
	}
	if ((!(_20a20bc9e_PRODUCTION)) && (*((*(_54837_m))._field_func))._field_anon) {
		{
			auto &_match_expr{ (*(_54837_m))._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructSubIdentExprModel>>()) {
				_case_begin_5308224128:;
				{
					if ((*((*((*((*((*(_54837_m))._field_expr.operator jule::Ptr<_20ccedeed_StructSubIdentExprModel>()))._field_field))._field_decl))._field_owner))._field_cpp_linked) {
						_54913_obj+=jule::Str("(", 1);
						goto _match_end_5308220528;
					}
					goto _case_begin_5308220656;
				}
			}
			else {
				_case_begin_5308220656:;
				{
					_54913_obj+=jule::Str(".call(", 6);
					_54913_obj+=_20c1ee047_gen_loc_info((*(_54837_m))._field_token);
					if ((*(_54837_m))._field_args.len() != 0LL) {
						_54913_obj+=jule::Str(",", 1);
					}
				}
			}
			_match_end_5308220528:;
		}
	} else {
		_54913_obj+=jule::Str("(", 1);
	}
	_54913_obj+=_20c1ee047_gen_arg_expr_models((*(_54837_m))._field_args);
	_54913_obj+=jule::Str(")", 1);
	if ((*(_54837_m))._field_is_co) {
		_54913_obj=jule::Str("__JULE_CO(", 10) + _54913_obj;
		_54913_obj+=jule::Str(")", 1);
	}
	return _54913_obj;
}



inline jule::Bool _20c1ee047_is_forwarded(jule::Ptr<_20cb4d853_Scope>& _59318_s) {
	jule::Any _5949_last = (*(_59318_s))._field_stmts[(*(_59318_s))._field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _5949_last };
		
		if (_match_expr.type_is<jule::Ptr<_20d162d45_Data>>()) {
			_case_begin_5308228768:;
			{
				{
					auto &_match_expr{ (*(_5949_last.operator jule::Ptr<_20d162d45_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>>()) {
						_case_begin_5308236832:;
						{
							return true;
						}
					}
					else {
						_case_begin_5308235392:;
						{
							return false;
						}
					}
					_match_end_5308235312:;
				}
			}
		}
		else {
			_case_begin_5308232736:;
			{
				return true;
			}
		}
		_match_end_5308232656:;
	}
}



inline jule::Str _20c1ee047_gen_fn_call_expr_model(jule::Ptr<_20ccedeed_FnCallExprModel> _61031_m) {
	if (((*((*(_61031_m))._field_func))._method_is_builtin() || (!((*((*((*(_61031_m))._field_func))._field_decl))._field_exceptional))) || (((*(_61031_m))._field_except != nullptr) && ((*((*(_61031_m))._field_except))._field_stmts.len() == 0LL))) {
		return _20c1ee047_gen_pure_fn_call_expr_model(_61031_m);
	}
	jule::Str _61813_obj = jule::Str("({\n", 3);
	_20da77946_add_indent();
	_61813_obj+=_20da77946_indent();
	_61813_obj+=jule::Str("auto except = ", 14);
	_61813_obj+=_20c1ee047_gen_pure_fn_call_expr_model(_61031_m);
	_61813_obj+=jule::Str(";\n", 2);
	_61813_obj+=_20da77946_indent();
	if ((*(_61031_m))._field_except != nullptr) {
		if (((*((*(_61031_m))._field_func))._field_result == nullptr) || (!((*(_61031_m))._field_assigned))) {
			_61813_obj+=jule::Str("if (!except.ok()) ", 18);
			_61813_obj+=_20b6cc6d0_gen_scope((*(_61031_m))._field_except);
			_61813_obj+=jule::Str("\n", 1);
		} else {
			jule::Bool _63117_forwarded = _20c1ee047_is_forwarded((*(_61031_m))._field_except);
			_61813_obj+=jule::Str("(except.ok()) ? (except.result) : (", 35);
			if (_63117_forwarded) {
				_61813_obj+=jule::Str("{", 1);
			}
			_61813_obj+=_20b6cc6d0_gen_scope((*(_61031_m))._field_except);
			if (_63117_forwarded) {
				_61813_obj+=jule::Str(" ", 1);
				_61813_obj+=_20c1ee047_get_init_expr((*((*(_61031_m))._field_func))._field_result);
				_61813_obj+=jule::Str(";}", 2);
			}
			_61813_obj+=jule::Str(");\n", 3);
		}
		_20da77946_done_indent();
	} else {
		jule::Str _64617_path = _20c1ee047_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_61031_m))._field_token._field_file))._method_path()));
		_64617_path=_64617_path.slice(1LL,_64617_path.len() - 1LL);
		_61813_obj+=jule::Str("if (!except.ok()) jule::panic(jule::Str(\"", 41);
		_61813_obj+=jule::Str("unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 98);
		_61813_obj+=_64617_path;
		_61813_obj+=jule::Str(":", 1);
		_61813_obj+=_20bcb4a20_itoa((*(_61031_m))._field_token._field_row);
		_61813_obj+=jule::Str(":", 1);
		_61813_obj+=_20bcb4a20_itoa((*(_61031_m))._field_token._field_column);
		_61813_obj+=jule::Str("\"));\n", 5);
		if ((!((*((*((*(_61031_m))._field_func))._field_decl))._method_is_void()))) {
			_61813_obj+=_20da77946_indent();
			_61813_obj+=jule::Str("(except.result);\n", 17);
		}
		_20da77946_done_indent();
	}
	_61813_obj+=_20da77946_indent();
	_61813_obj+=jule::Str("})", 2);
	return _61813_obj;
}



inline jule::Str _20c1ee047_gen_slice_expr_model(jule::Ptr<_20ccedeed_SliceExprModel> _66929_m) {
	if ((*(_66929_m))._field_elems.len() == 0LL) {
		return _20da75aa9_as_slice_kind((*(_66929_m))._field_elem_kind) + jule::Str("()", 2);
	}
	jule::Str _67413_obj = _20da75aa9_as_slice_kind((*(_66929_m))._field_elem_kind);
	_67413_obj+=jule::Str("({", 2);
	_67413_obj+=_20c1ee047_gen_arg_expr_models((*(_66929_m))._field_elems);
	_67413_obj+=jule::Str("})", 2);
	return _67413_obj;
}



inline jule::Str _20c1ee047_gen_indexing_expr_model(jule::Ptr<_20ccedeed_IndexingExprModel> _68132_m) {
	jule::Str _68213_obj = _20c1ee047_gen_expr_model((*((*(_68132_m))._field_expr))._field_model);
	if (_20a20bc9e_OPT_ACCESS) {
		jule::Bool _68613_array = (*((*((*(_68132_m))._field_expr))._field_kind))._method_arr() != nullptr;
		if (_68613_array && (*((*(_68132_m))._field_index))._method_is_const()) {
			_68213_obj+=jule::Str(".__at(", 6);
			_68213_obj+=_20c1ee047_gen_expr((*((*(_68132_m))._field_index))._field_model);
			_68213_obj+=jule::Str(")", 1);
			return _68213_obj;
		}
		{
			auto &_match_expr{ (*((*(_68132_m))._field_index))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
				_case_begin_5308278960:;
				{
					jule::Ptr<_20cdc725d_Var> _69817_i = (*((*(_68132_m))._field_index))._field_model.operator jule::Ptr<_20cdc725d_Var>();
					if ((*(_69817_i))._field_mutable || ((*(_69817_i))._field_iter_relation == nullptr)) {
						goto _match_end_5308278848;
					}
					{
						auto &_match_expr{ (*((*(_68132_m))._field_expr))._field_model };
						
						if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
							_case_begin_5308284208:;
							{
								jule::Ptr<_20cdc725d_Var> _70421_r = (*((*(_68132_m))._field_expr))._field_model.operator jule::Ptr<_20cdc725d_Var>();
								if ((*((*(_69817_i))._field_iter_relation))._field_range == _70421_r) {
									_68213_obj+=jule::Str(".__at(", 6);
									_68213_obj+=_20c1ee047_gen_expr((*((*(_68132_m))._field_index))._field_model);
									_68213_obj+=jule::Str(")", 1);
									return _68213_obj;
								}
							}
						}
						_match_end_5308284096:;
					}
				}
			}
			_match_end_5308278848:;
		}
	}
	{
		
		if (_20a20bc9e_PRODUCTION || (*((*((*(_68132_m))._field_expr))._field_kind))._method_ptr() != nullptr || (*((*((*(_68132_m))._field_expr))._field_kind))._method_map() != nullptr) {
			_case_begin_5308279568:;
			{
				_68213_obj+=jule::Str("[", 1);
				_68213_obj+=_20c1ee047_gen_expr((*((*(_68132_m))._field_index))._field_model);
				_68213_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_5308290640:;
			{
				_68213_obj+=jule::Str(".at(", 4);
				_68213_obj+=_20c1ee047_gen_loc_info((*(_68132_m))._field_token);
				_68213_obj+=jule::Str(",", 1);
				_68213_obj+=_20c1ee047_gen_expr((*((*(_68132_m))._field_index))._field_model);
				_68213_obj+=jule::Str(")", 1);
			}
		}
		_match_end_5308290240:;
	}
	return _68213_obj;
}



inline jule::Str _20c1ee047_gen_anon_fn_expr_model(jule::Ptr<_20ccedeed_AnonFnExprModel> _73731_m) {
	jule::Str _73813_obj = _20da75aa9_gen_fn_kind((*(_73731_m))._field_func);
	_73813_obj+=jule::Str("([=]", 4);
	_73813_obj+=_20da77946_gen_params_ins((*((*(_73731_m))._field_func))._field_params);
	_73813_obj+=jule::Str(" mutable -> ", 12);
	_73813_obj+=_20da77946_gen_fn_ins_result((*(_73731_m))._field_func);
	_73813_obj+=jule::Str(" ", 1);
	_73813_obj+=_20b6cc6d0_gen_fn_scope((*(_73731_m))._field_func);
	_73813_obj+=jule::Str(")", 1);
	return _73813_obj;
}



inline jule::Str _20c1ee047_gen_map_expr_model(jule::Ptr<_20ccedeed_MapExprModel> _74927_m) {
	jule::Str _75013_obj = _20da752c3_as_jt(jule::Str("map", 3));
	_75013_obj+=jule::Str("<", 1);
	_75013_obj+=_20da75aa9_gen_type_kind((*(_74927_m))._field_key_kind);
	_75013_obj+=jule::Str(",", 1);
	_75013_obj+=_20da75aa9_gen_type_kind((*(_74927_m))._field_val_kind);
	_75013_obj+=jule::Str(">({", 3);
	if ((*(_74927_m))._field_entries.len() > 0LL) {
		{
			auto &expr = (*(_74927_m))._field_entries;
			auto it = expr.begin();
			_iter_begin_5308308352:;
			if (it != expr.end()) {
				jule::Ptr<_20ccedeed_KeyValPairExprModel> _20c1ee047_pair = *it;
				{
					jule::Str _75821_pair_obj = jule::Str("{", 1);
					_75821_pair_obj+=_20c1ee047_gen_expr((*(_20c1ee047_pair))._field_key);
					_75821_pair_obj+=jule::Str(",", 1);
					_75821_pair_obj+=_20c1ee047_gen_expr((*(_20c1ee047_pair))._field_val);
					_75821_pair_obj+=jule::Str("}", 1);
					_75013_obj+=_75821_pair_obj;
					_75013_obj+=jule::Str(",", 1);
				}
				_iter_next_5308308352:;
				++it;
				goto _iter_begin_5308308352;
			}
			_iter_end_5308308352:;
		}
		_75013_obj=_75013_obj.slice(0LL,_75013_obj.len() - 1LL);
	}
	_75013_obj+=jule::Str("})", 2);
	return _75013_obj;
}



inline jule::Str _20c1ee047_gen_slicing_expr_model(jule::Ptr<_20ccedeed_SlicingExprModel> _77231_m) {
	jule::Str _77313_obj = _20c1ee047_gen_expr_model((*(_77231_m))._field_expr);
	_77313_obj+=jule::Str(".slice(", 7);
	if ((!(_20a20bc9e_PRODUCTION))) {
		_77313_obj+=_20c1ee047_gen_loc_info((*(_77231_m))._field_token);
		_77313_obj+=jule::Str(",", 1);
	}
	_77313_obj+=_20c1ee047_gen_expr((*(_77231_m))._field_left);
	if ((*(_77231_m))._field_right != nullptr) {
		_77313_obj+=jule::Str(",", 1);
		_77313_obj+=_20c1ee047_gen_expr((*(_77231_m))._field_right);
	}
	_77313_obj+=jule::Str(")", 1);
	return _77313_obj;
}



inline jule::Str _20c1ee047_gen_trait_sub_ident_expr_model(jule::Ptr<_20ccedeed_TraitSubIdentExprModel> _78839_m) {
	jule::Str _78913_obj = _20c1ee047_gen_expr_model((*(_78839_m))._field_expr);
	_78913_obj+=jule::Str(".get(", 5);
	if ((!(_20a20bc9e_PRODUCTION))) {
		_78913_obj+=_20c1ee047_gen_loc_info((*(_78839_m))._field_token);
	}
	_78913_obj+=jule::Str(")._method_", 10);
	_78913_obj+=(*(_78839_m))._field_ident;
	return _78913_obj;
}



inline jule::Str _20c1ee047_gen_struct_sub_ident_expr_model(jule::Ptr<_20ccedeed_StructSubIdentExprModel> _79940_m) {
	jule::Str _80013_obj = _20c1ee047_gen_expr_model((*(_79940_m))._field_expr);
	_80013_obj+=jule::Str(".", 1);
	if ((*(_79940_m))._field_field != nullptr) {
		_80013_obj+=_20da752c3_field_out_ident((*((*(_79940_m))._field_field))._field_decl);
	} else {
		_80013_obj+=_20da752c3_fn_ins_out_ident((*(_79940_m))._field_method);
	}
	return _80013_obj;
}



inline jule::Str _20c1ee047_gen_common_ident_expr_model(jule::Ptr<_20ccedeed_CommonIdentExprModel> _81032_m) {
	return (*(_81032_m))._field_ident;
}



inline jule::Str _20c1ee047_gen_common_sub_ident_expr_model(jule::Ptr<_20ccedeed_CommonSubIdentExprModel> _81440_m) {
	jule::Str _81513_obj = _20c1ee047_gen_expr_model((*(_81440_m))._field_expr);
	_81513_obj+=jule::Str(".", 1);
	_81513_obj+=(*(_81440_m))._field_ident;
	return _81513_obj;
}



inline jule::Str _20c1ee047_gen_array_expr_model(jule::Ptr<_20ccedeed_ArrayExprModel> _82129_m) {
	if ((*(_82129_m))._field_elems.len() == 0LL) {
		return _20da75aa9_gen_array_kind((*(_82129_m))._field_kind) + jule::Str("()", 2);
	}
	jule::Str _82613_obj = _20da75aa9_gen_array_kind((*(_82129_m))._field_kind);
	if (((*(_82129_m))._field_elems.len() == 2LL) && ((*(_82129_m))._field_elems[1LL] == nullptr)) {
		_82613_obj+=jule::Str("(", 1);
		_82613_obj+=_20c1ee047_gen_expr((*(_82129_m))._field_elems[0LL]);
		_82613_obj+=jule::Str(")", 1);
		return _82613_obj;
	}
	_82613_obj+=jule::Str("({", 2);
	_82613_obj+=_20c1ee047_gen_arg_expr_models((*(_82129_m))._field_elems);
	_82613_obj+=jule::Str("})", 2);
	return _82613_obj;
}



inline jule::Str _20c1ee047_gen_fn_ins_expr_model_common(jule::Ptr<_20c819332_FnIns> _84437_m) {
	jule::Str _84513_obj = _20da75aa9_gen_fn_kind(_84437_m);
	_84513_obj+=jule::Str("(", 1);
	_84513_obj+=_20c1ee047_gen_fn_ins_expr_model(_84437_m);
	_84513_obj+=jule::Str(")", 1);
	return _84513_obj;
}



inline jule::Str _20c1ee047_gen_fn_ins_expr_model(jule::Ptr<_20c819332_FnIns> _85330_m) {
	if (((*(_85330_m))._field_decl != nullptr) && (*((*(_85330_m))._field_decl))._field_cpp_linked) {
		jule::Ptr<_20c476dc4_Directive> _85513_d = _20da75aa9_find_directive((*((*(_85330_m))._field_decl))._field_directives,jule::Str("namespace", 9));
		if (_85513_d != nullptr) {
			jule::Str _85721_obj = _20c1ee047_concat_all_parts((*(_85513_d))._field_args);
			_85721_obj+=jule::Str("::", 2);
			_85721_obj+=_20da752c3_fn_ins_out_ident(_85330_m);
			return _85721_obj;
		}
	}
	return _20da752c3_fn_ins_out_ident(_85330_m);
}



inline jule::Str _20c1ee047_gen_tuple_expr_model(jule::Ptr<_20ccedeed_TupleExprModel> _86629_m) {
	jule::Str _86713_obj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = (*(_86629_m))._field_datas;
		auto it = expr.begin();
		_iter_begin_5308354528:;
		if (it != expr.end()) {
			jule::Ptr<_20d162d45_Data> _20c1ee047_d = *it;
			{
				_86713_obj+=_20c1ee047_gen_expr((*(_20c1ee047_d))._field_model);
				_86713_obj+=jule::Str(",", 1);
			}
			_iter_next_5308354528:;
			++it;
			goto _iter_begin_5308354528;
		}
		_iter_end_5308354528:;
	}
	_86713_obj=_86713_obj.slice(0LL,_86713_obj.len() - 1LL);
	_86713_obj+=jule::Str(")", 1);
	return _86713_obj;
}



inline jule::Str _20c1ee047_gen_builtin_new_call_expr_model(jule::Ptr<_20ccedeed_BuiltinNewCallExprModel> _87740_m) {
	jule::Str _87813_obj = jule::Str("jule::new_ptr<", 14);
	_87813_obj+=_20da75aa9_gen_type_kind((*(_87740_m))._field_kind);
	_87813_obj+=jule::Str(">(", 2);
	if ((*(_87740_m))._field_init != nullptr) {
		_87813_obj+=_20c1ee047_gen_expr((*(_87740_m))._field_init);
	}
	_87813_obj+=jule::Str(")", 1);
	return _87813_obj;
}



inline jule::Str _20c1ee047_gen_builtin_out_call_expr_model(jule::Ptr<_20ccedeed_BuiltinOutCallExprModel> _88840_m) {
	if ((*(_88840_m))._field_debug && _20a20bc9e_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _89213_obj = jule::Str("jule::out(", 10);
	_89213_obj+=_20c1ee047_gen_expr((*(_88840_m))._field_expr);
	_89213_obj+=jule::Str(")", 1);
	return _89213_obj;
}



inline jule::Str _20c1ee047_gen_builtin_outln_call_expr_model(jule::Ptr<_20ccedeed_BuiltinOutlnCallExprModel> _89842_m) {
	if ((*(_89842_m))._field_debug && _20a20bc9e_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _90213_obj = jule::Str("jule::outln(", 12);
	_90213_obj+=_20c1ee047_gen_expr((*(_89842_m))._field_expr);
	_90213_obj+=jule::Str(")", 1);
	return _90213_obj;
}



inline jule::Str _20c1ee047_gen_builtin_panic_call_expr_model(jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel> _90842_m) {
	jule::Str _90913_path = _20c1ee047_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_90842_m))._field_token._field_file))._method_path()));
	_90913_path=_90913_path.slice(1LL,_90913_path.len() - 1LL);
	jule::Str _91213_obj = jule::Str("jule::panic(", 12);
	_91213_obj+=_20c1ee047_gen_expr((*(_90842_m))._field_expr);
	_91213_obj+=jule::Str(" + jule::Str(\"\\nlocation: ", 26);
	_91213_obj+=_90913_path;
	_91213_obj+=jule::Str(":", 1);
	_91213_obj+=_20bcb4a20_itoa((*(_90842_m))._field_token._field_row);
	_91213_obj+=jule::Str(":", 1);
	_91213_obj+=_20bcb4a20_itoa((*(_90842_m))._field_token._field_column);
	_91213_obj+=jule::Str("\"));", 4);
	return _91213_obj;
}



inline jule::Str _20c1ee047_gen_builtin_assert_call_expr_model(jule::Ptr<_20ccedeed_BuiltinAssertCallExprModel> _92443_m) {
	if (_20a20bc9e_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _92813_path = _20c1ee047_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_92443_m))._field_token._field_file))._method_path()));
	_92813_path=_92813_path.slice(1LL,_92813_path.len() - 1LL);
	jule::Str _93113_obj = jule::Str("if (!(", 6);
	_93113_obj+=_20c1ee047_gen_expr((*(_92443_m))._field_expr);
	_93113_obj+=jule::Str(")) jule::panic(jule::Str(", 25);
	_93113_obj+=_20c1ee047_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*(_92443_m))._field_log));
	_93113_obj+=jule::Str(") + jule::Str(\"\\nlocation: ", 27);
	_93113_obj+=_92813_path;
	_93113_obj+=jule::Str(":", 1);
	_93113_obj+=_20bcb4a20_itoa((*(_92443_m))._field_token._field_row);
	_93113_obj+=jule::Str(":", 1);
	_93113_obj+=_20bcb4a20_itoa((*(_92443_m))._field_token._field_column);
	_93113_obj+=jule::Str("\"));", 4);
	return _93113_obj;
}



inline jule::Str _20c1ee047_gen_builtin_error_call_expr_model(jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel> _94542_m) {
	jule::Str _94613_obj = jule::Str("return ", 7);
	if ((*((*((*(_94542_m))._field_func))._field_decl))._method_is_void()) {
		_94613_obj+=jule::Str("jule::VoidExceptional(", 22);
	} else {
		_94613_obj+=jule::Str("jule::Exceptional<", 18);
		_94613_obj+=_20da75aa9_gen_type_kind((*((*(_94542_m))._field_func))._field_result);
		_94613_obj+=jule::Str(">(", 2);
	}
	_94613_obj+=_20c1ee047_gen_expr((*(_94542_m))._field_err);
	_94613_obj+=jule::Str(")", 1);
	return _94613_obj;
}



inline jule::Str _20c1ee047_gen_builtin_make_call_expr_model(jule::Ptr<_20ccedeed_BuiltinMakeCallExprModel> _95941_m) {
	jule::Str _96013_obj = jule::Str();
	if ((*(_95941_m))._field_len != nullptr) {
		_96013_obj+=_20c1ee047_gen_expr((*(_95941_m))._field_len);
	} else {
		_96013_obj+=jule::Str("0", 1);
	}
	if ((*(_95941_m))._field_cap != nullptr) {
		_96013_obj+=jule::Str(",", 1) + _20c1ee047_gen_expr((*(_95941_m))._field_cap);
	}
	if ((*((*((*((*(_95941_m))._field_kind))._method_slc()))._field_elem))._method_enm() != nullptr) {
		_96013_obj+=jule::Str(",", 1);
		_96013_obj+=_20c1ee047_get_init_expr((*((*((*(_95941_m))._field_kind))._method_slc()))._field_elem);
		if ((*(_95941_m))._field_cap != nullptr) {
			_96013_obj=(_20da75aa9_gen_type_kind((*(_95941_m))._field_kind) + jule::Str("::alloc(", 8)) + _96013_obj;
		} else {
			_96013_obj=(_20da75aa9_gen_type_kind((*(_95941_m))._field_kind) + jule::Str("::alloc_def(", 12)) + _96013_obj;
		}
	} else {
		_96013_obj=(_20da75aa9_gen_type_kind((*(_95941_m))._field_kind) + jule::Str("::alloc(", 8)) + _96013_obj;
	}
	_96013_obj+=jule::Str(")", 1);
	return _96013_obj;
}



inline jule::Str _20c1ee047_gen_builtin_append_call_expr_model_assign_opt(jule::Bool _9875_same_dest,jule::Str& _9886_dest_expr,jule::Ptr<_20d4a6c9e_TypeKind>& _98910_dest_kind,jule::Ptr<_20ccedeed_SliceExprModel>& _99010_s,jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>& _99110_m) {
	jule::Str _99213_obj = jule::Str();
	if ((!(_9875_same_dest))) {
		_99213_obj+=_9886_dest_expr;
		_99213_obj+=jule::Str(" = jule::alloc_for_append(", 26);
		_99213_obj+=_20c1ee047_gen_expr_model((*(_99110_m))._field_dest);
		_99213_obj+=jule::Str(",", 1);
		_99213_obj+=_20bcb4a20_itoa(static_cast<jule::I64>((*(_99010_s))._field_elems.len()));
		_99213_obj+=jule::Str(");", 2);
	}
	{
		auto &expr = (*(_99010_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_5307837264:;
		if (it != expr.end()) {
			jule::Any _20c1ee047_e = *it;
			{
				_99213_obj+=_9886_dest_expr;
				_99213_obj+=jule::Str(".push(", 6);
				_99213_obj+=_20c1ee047_gen_expr_model(_20c1ee047_e);
				_99213_obj+=jule::Str(");", 2);
			}
			_iter_next_5307837264:;
			++it;
			goto _iter_begin_5307837264;
		}
		_iter_end_5307837264:;
	}
	return _99213_obj;
}



inline std::tuple<jule::Str,jule::Bool> _20c1ee047_gen_builtin_append_call_expr_model_assign(jule::Any _101050_dest,jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel> _101071_m) {
	jule::Bool _1010110_optimized = jule::Bool();
	{
		auto &_match_expr{ (*(_101071_m))._field_elements };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_SliceExprModel>>()) {
			_case_begin_5308420096:;
			{
				{
					auto &_match_expr{ _101050_dest };
					
					if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
						_case_begin_5308421600:;
						{
							jule::Ptr<_20ccedeed_SliceExprModel> _101521_s = (*(_101071_m))._field_elements.operator jule::Ptr<_20ccedeed_SliceExprModel>();
							jule::Str _101617_dest_expr = _20c1ee047_gen_expr_model(_101050_dest);
							jule::Ptr<_20cdc725d_Var> _101721_dest_var = _101050_dest.operator jule::Ptr<_20cdc725d_Var>();
							jule::Bool _101817_same_dest = (*(_101071_m))._field_dest == _101721_dest_var;
							_1010110_optimized = true;
							return std::make_tuple(_20c1ee047_gen_builtin_append_call_expr_model_assign_opt(_101817_same_dest,_101617_dest_expr,(*((*(_101721_dest_var))._field_kind))._field_kind,_101521_s,_101071_m),_1010110_optimized);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructSubIdentExprModel>>()) {
						_case_begin_5308421712:;
						{
							jule::Ptr<_20ccedeed_SliceExprModel> _102321_s = (*(_101071_m))._field_elements.operator jule::Ptr<_20ccedeed_SliceExprModel>();
							jule::Str _102417_dest_expr = _20c1ee047_gen_expr_model(_101050_dest);
							jule::Ptr<_20c496047_FieldIns> _102521_dest_field = (*(_101050_dest.operator jule::Ptr<_20ccedeed_StructSubIdentExprModel>()))._field_field;
							jule::Bool _102617_same_dest = (*(_101071_m))._field_dest == _102521_dest_field;
							_1010110_optimized = true;
							return std::make_tuple(_20c1ee047_gen_builtin_append_call_expr_model_assign_opt(_102617_same_dest,_102417_dest_expr,(*(_102521_dest_field))._field_kind,_102321_s,_101071_m),_1010110_optimized);
						}
					}
					_match_end_5308421328:;
				}
			}
		}
		_match_end_5308419984:;
	}
	_1010110_optimized = false;
	return std::make_tuple(_20c1ee047_gen_builtin_append_call_expr_model(_101071_m),_1010110_optimized);
}



inline jule::Str _20c1ee047_gen_builtin_append_call_expr_model(jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel> _103543_m) {
	jule::Str _103613_obj = jule::Str("jule::append(", 13);
	_103613_obj+=_20c1ee047_gen_expr_model((*(_103543_m))._field_dest);
	_103613_obj+=jule::Str(",", 1);
	_103613_obj+=_20c1ee047_gen_expr_model((*(_103543_m))._field_elements);
	_103613_obj+=jule::Str(")", 1);
	return _103613_obj;
}



inline jule::Str _20c1ee047_gen_builtin_clone_call_expr_model(jule::Ptr<_20ccedeed_BuiltinCloneCallExprModel> _104442_m) {
	jule::Str _104513_obj = jule::Str("jule::clone(", 12);
	_104513_obj+=_20c1ee047_gen_expr_model((*(_104442_m))._field_expr);
	_104513_obj+=jule::Str(")", 1);
	return _104513_obj;
}



inline jule::Str _20c1ee047_gen_sizeof_expr_model(jule::Ptr<_20ccedeed_SizeofExprModel> _105130_m) {
	jule::Str _105213_obj = jule::Str("sizeof(", 7);
	_105213_obj+=_20c1ee047_gen_expr((*(_105130_m))._field_expr);
	_105213_obj+=jule::Str(")", 1);
	return _105213_obj;
}



inline jule::Str _20c1ee047_gen_alignof_expr_model(jule::Ptr<_20ccedeed_AlignofExprModel> _105831_m) {
	jule::Str _105913_obj = jule::Str("alignof(", 8);
	_105913_obj+=_20c1ee047_gen_expr((*(_105831_m))._field_expr);
	_105913_obj+=jule::Str(")", 1);
	return _105913_obj;
}



inline jule::Str _20c1ee047_gen_rune_expr_model(jule::Ptr<_20ccedeed_RuneExprModel> _106524_m) {
	if ((*(_106524_m))._field_code <= 127LL) {
		jule::Str _106717_b = _20c1ee047_sbtoa(static_cast<jule::U8>(static_cast<jule::U8>((*(_106524_m))._field_code)));
		if (_106717_b == jule::Str("'", 1)) {
			_106717_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _106717_b) + jule::Str("'", 1);
	}
	return _20c1ee047_i64toa(static_cast<jule::I64>(static_cast<jule::I64>((*(_106524_m))._field_code)));
}



inline jule::Str _20c1ee047_gen_struct_static_ident_expr_model(jule::Ptr<_20ccedeed_StructStaticIdentExprModel> _107643_m) {
	jule::Str _107713_obj = _20da752c3_struct_ins_out_ident((*(_107643_m))._field_structure);
	_107713_obj+=jule::Str("::", 2);
	_107713_obj+=_20da752c3_fn_ins_out_ident((*(_107643_m))._field_method);
	return _107713_obj;
}



inline jule::Str _20c1ee047_gen_integrated_to_str_expr_model(jule::Ptr<_20ccedeed_IntegratedToStrExprModel> _108341_m) {
	jule::Str _108413_obj = jule::Str("jule::to_str(", 13);
	_108413_obj+=_20c1ee047_gen_expr_model((*(_108341_m))._field_expr);
	_108413_obj+=jule::Str(")", 1);
	return _108413_obj;
}



inline jule::Str _20c1ee047_gen_ternary_expr_model(jule::Ptr<_20ccedeed_TernaryExprModel> _109031_m) {
	jule::Str _109113_obj = jule::Str("((", 2);
	_109113_obj+=_20c1ee047_gen_expr_model((*(_109031_m))._field_condition);
	_109113_obj+=jule::Str(") ? (", 5);
	_109113_obj+=_20c1ee047_gen_expr_model((*(_109031_m))._field_true_expr);
	_109113_obj+=jule::Str(") : (", 5);
	_109113_obj+=_20c1ee047_gen_expr_model((*(_109031_m))._field_false_expr);
	_109113_obj+=jule::Str("))", 2);
	return _109113_obj;
}



inline jule::Str _20c1ee047_gen_backend_emit_expr_model(jule::Ptr<_20ccedeed_BackendEmitExprModel> _110136_m) {
	return (*(_110136_m))._field_code;
}



inline jule::Str _20c1ee047_gen_free_expr_model(jule::Ptr<_20ccedeed_FreeExprModel> _110528_m) {
	if (_20a21965d_RC) {
		return _20c1ee047_gen_expr((*(_110528_m))._field_expr) + jule::Str(".dealloc()", 10);
	}
	return _20c1ee047_gen_expr((*(_110528_m))._field_expr) + jule::Str(".__free()", 9);
}



inline jule::Str _20c1ee047_gen_expr_model(jule::Any _111223_m) {
	{
		auto &_match_expr{ _111223_m };
		
		if (_match_expr.type_is<jule::Ptr<_20d4a6c9e_TypeKind>>()) {
			_case_begin_5308469296:;
			{
				return _20da75aa9_gen_type_kind(_111223_m.operator jule::Ptr<_20d4a6c9e_TypeKind>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20d78b3e6_Const>>()) {
			_case_begin_5308472736:;
			{
				return _20c1ee047_gen_const_expr_model(_111223_m.operator jule::Ptr<_20d78b3e6_Const>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cdc725d_Var>>()) {
			_case_begin_5308472016:;
			{
				return _20c1ee047_gen_var_expr_model(_111223_m.operator jule::Ptr<_20cdc725d_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20cb471a9_Trait>>()) {
			_case_begin_5308472112:;
			{
				return _20da752c3_trait_out_ident(_111223_m.operator jule::Ptr<_20cb471a9_Trait>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c496047_Struct>>()) {
			_case_begin_5308472272:;
			{
				return _20c1ee047_gen_struct_expr_model(_111223_m.operator jule::Ptr<_20c496047_Struct>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c496047_StructIns>>()) {
			_case_begin_5308472368:;
			{
				return _20c1ee047_gen_struct_ins_expr_model(_111223_m.operator jule::Ptr<_20c496047_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20c819332_FnIns>>()) {
			_case_begin_5308472464:;
			{
				return _20c1ee047_gen_fn_ins_expr_model_common(_111223_m.operator jule::Ptr<_20c819332_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BinopExprModel>>()) {
			_case_begin_5308471504:;
			{
				return _20c1ee047_gen_binop_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_UnaryExprModel>>()) {
			_case_begin_5308471600:;
			{
				return _20c1ee047_gen_unary_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructLitExprModel>>()) {
			_case_begin_5308471696:;
			{
				return _20c1ee047_gen_struct_lit_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_AllocStructLitExprModel>>()) {
			_case_begin_5308471792:;
			{
				return _20c1ee047_gen_alloc_struct_lit_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_CastingExprModel>>()) {
			_case_begin_5308473568:;
			{
				return _20c1ee047_gen_casting_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_FnCallExprModel>>()) {
			_case_begin_5308473664:;
			{
				return _20c1ee047_gen_fn_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_SliceExprModel>>()) {
			_case_begin_5308473760:;
			{
				return _20c1ee047_gen_slice_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_ArrayExprModel>>()) {
			_case_begin_5308473856:;
			{
				return _20c1ee047_gen_array_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_IndexingExprModel>>()) {
			_case_begin_5308473952:;
			{
				return _20c1ee047_gen_indexing_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_AnonFnExprModel>>()) {
			_case_begin_5308474064:;
			{
				return _20c1ee047_gen_anon_fn_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_MapExprModel>>()) {
			_case_begin_5308474176:;
			{
				return _20c1ee047_gen_map_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_SlicingExprModel>>()) {
			_case_begin_5308474288:;
			{
				return _20c1ee047_gen_slicing_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_TraitSubIdentExprModel>>()) {
			_case_begin_5308474400:;
			{
				return _20c1ee047_gen_trait_sub_ident_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructSubIdentExprModel>>()) {
			_case_begin_5308474512:;
			{
				return _20c1ee047_gen_struct_sub_ident_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_CommonIdentExprModel>>()) {
			_case_begin_5308474624:;
			{
				return _20c1ee047_gen_common_ident_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_CommonSubIdentExprModel>>()) {
			_case_begin_5308474736:;
			{
				return _20c1ee047_gen_common_sub_ident_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_TupleExprModel>>()) {
			_case_begin_5308474848:;
			{
				return _20c1ee047_gen_tuple_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinOutCallExprModel>>()) {
			_case_begin_5308474960:;
			{
				return _20c1ee047_gen_builtin_out_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinOutlnCallExprModel>>()) {
			_case_begin_5308475072:;
			{
				return _20c1ee047_gen_builtin_outln_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinNewCallExprModel>>()) {
			_case_begin_5308475184:;
			{
				return _20c1ee047_gen_builtin_new_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>>()) {
			_case_begin_5308475296:;
			{
				return _20c1ee047_gen_builtin_panic_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinAssertCallExprModel>>()) {
			_case_begin_5308475408:;
			{
				return _20c1ee047_gen_builtin_assert_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>>()) {
			_case_begin_5308475520:;
			{
				return _20c1ee047_gen_builtin_error_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinMakeCallExprModel>>()) {
			_case_begin_5308475632:;
			{
				return _20c1ee047_gen_builtin_make_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>>()) {
			_case_begin_5308475744:;
			{
				return _20c1ee047_gen_builtin_append_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BuiltinCloneCallExprModel>>()) {
			_case_begin_5308475856:;
			{
				return _20c1ee047_gen_builtin_clone_call_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_SizeofExprModel>>()) {
			_case_begin_5308475968:;
			{
				return _20c1ee047_gen_sizeof_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_AlignofExprModel>>()) {
			_case_begin_5308476080:;
			{
				return _20c1ee047_gen_alignof_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_RuneExprModel>>()) {
			_case_begin_5308476192:;
			{
				return _20c1ee047_gen_rune_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_RuneExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_StructStaticIdentExprModel>>()) {
			_case_begin_5308476304:;
			{
				return _20c1ee047_gen_struct_static_ident_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_IntegratedToStrExprModel>>()) {
			_case_begin_5308476416:;
			{
				return _20c1ee047_gen_integrated_to_str_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_TernaryExprModel>>()) {
			_case_begin_5308476528:;
			{
				return _20c1ee047_gen_ternary_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_TernaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_BackendEmitExprModel>>()) {
			_case_begin_5308476640:;
			{
				return _20c1ee047_gen_backend_emit_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_BackendEmitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_20ccedeed_FreeExprModel>>()) {
			_case_begin_5308476752:;
			{
				return _20c1ee047_gen_free_expr_model(_111223_m.operator jule::Ptr<_20ccedeed_FreeExprModel>());
			}
		}
		else {
			_case_begin_5308470720:;
			{
				return jule::Str("<unimplemented_expression_model>", 32);
			}
		}
		_match_end_5308468624:;
	}
}



inline jule::Str _20c1ee047_gen_expr(jule::Any _124217_e) {
	jule::Str _124313_obj = _20c1ee047_gen_expr_model(_124217_e);
	if ((_124313_obj.len() == 0LL) || (_124313_obj[0LL] != '(')) {
		return _124313_obj;
	}
	{
		auto &_match_expr{ _124217_e };
		
		if (_match_expr.type_is<jule::Ptr<_20ccedeed_BinopExprModel>>()) {
			_case_begin_5308542144:;
			{
				_124313_obj=_124313_obj.slice(1LL,_124313_obj.len() - 1LL);
			}
		}
		_match_end_5308541264:;
	}
	return _124313_obj;
}



inline jule::Str _20c1ee047_gen_val(jule::Ptr<_20d162d45_Value> _125516_v) {
	if ((*((*(_125516_v))._field_data))._method_is_const()) {
		return _20c1ee047_gen_const_expr((*(_125516_v))._field_data);
	}
	return _20c1ee047_gen_expr((*((*(_125516_v))._field_data))._field_model);
}



inline jule::Str _20c1ee047_get_init_expr(jule::Ptr<_20d4a6c9e_TypeKind> _126222_t) {
	if ((*(_126222_t))._method_ptr() != nullptr) {
		return jule::Str("nullptr", 7);
	}
	jule::Ptr<_20cb4c70e_Enum> _126713_enm = (*(_126222_t))._method_enm();
	if (_126713_enm != nullptr) {
		return _20c1ee047_gen_val((*((*(_126713_enm))._field_items[0LL]))._field_value);
	}
	return _20da75aa9_gen_type_kind(_126222_t) + jule::Str("()", 2);
}



inline jule::Str _20cac28d7_get_derive_fn_decl_clone(jule::Ptr<_20c496047_Struct>& _730_s) {
	jule::Str _813_obj = _20da75aa9_gen_struct_kind(_730_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _20cac28d7_get_derive_fn_def_clone(jule::Ptr<_20c496047_Struct>& _1329_s) {
	jule::Str _1413_obj = _20da75aa9_gen_struct_kind(_1329_s);
	_1413_obj+=jule::Str(" ", 1) + _1413_obj;
	_1413_obj+=jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _20da752c3_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _20da752c3_as_jt(jule::Str _2814_id) {
	if ((97LL <= _2814_id[0LL]) && (_2814_id[0LL] <= 122LL)) {
		_2814_id[0LL]-=32LL;
	}
	return jule::Str("jule::", 6) + _2814_id;
}



inline jule::Str _20da752c3_get_addr_as_ident(jule::Uintptr _3622_addr) {
	return jule::Str("_", 1) + _20bcb4a20_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_3622_addr)),15LL);
}



inline jule::Str _20da752c3_as_out_ident(jule::Str _4517_ident,jule::Uintptr _4529_addr) {
	if (_4529_addr != 0LL) {
		jule::Str _4717_obj = _20da752c3_get_addr_as_ident(_4529_addr);
		_4717_obj+=jule::Str("_", 1);
		_4717_obj+=_4517_ident;
		return _4717_obj;
	}
	return _20da752c3_as_ident(_4517_ident);
}



inline jule::Str _20da752c3_as_local_ident(jule::Int _6119_row,jule::Int _6129_col,jule::Str _6139_ident) {
	jule::Str _6213_obj = _20bcb4a20_itoa(_6119_row);
	_6213_obj+=_20bcb4a20_itoa(_6129_col);
	_6213_obj+=jule::Str("_", 1);
	_6213_obj+=_6139_ident;
	return _20da752c3_as_ident(_6213_obj);
}



inline jule::Str _20da752c3_fn_out_ident(jule::Ptr<_20c819332_Fn>& _7018_f) {
	{
		
		if ((*(_7018_f))._field_cpp_linked) {
			_case_begin_5308575392:;
			{
				return (*(_7018_f))._field_ident;
			}
		}
		else if ((*(_7018_f))._field_ident == jule::Str("main", 4)) {
			_case_begin_5308575824:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if ((*(_7018_f))._method_is_method()) {
			_case_begin_5308573936:;
			{
				if ((*(_7018_f))._field_statically) {
					return jule::Str("_static_method_", 15) + (*(_7018_f))._field_ident;
				}
				return jule::Str("_method_", 8) + (*(_7018_f))._field_ident;
			}
		}
		else {
			_case_begin_5308571664:;
			{
				return _20da752c3_as_out_ident((*(_7018_f))._field_ident,static_cast<jule::Uintptr>((*((*(_7018_f))._field_token._field_file))._method_addr()));
			}
		}
		_match_end_5308571488:;
	}
}



inline jule::Str _20da752c3_fn_ins_out_ident(jule::Ptr<_20c819332_FnIns>& _9026_f) {
	if ((*(_9026_f))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*((*(_9026_f))._field_decl))._field_ident;
	}
	if ((*((*(_9026_f))._field_decl))._field_cpp_linked || ((*(_9026_f))._field_generics.len() == 0LL)) {
		return _20da752c3_fn_out_ident((*(_9026_f))._field_decl);
	}
	{
		auto &expr = (*((*(_9026_f))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_5308585936:;
		if (it != expr.end()) {
			jule::Int _20da752c3_i = it - expr.begin();
			jule::Ptr<_20c819332_FnIns> _20da752c3_ins = *it;
			{
				if ((*(_20da752c3_ins))._method_same(_9026_f)) {
					jule::Str _10121_obj = _20da752c3_fn_out_ident((*(_9026_f))._field_decl);
					_10121_obj+=jule::Str("_", 1);
					_10121_obj+=_20bcb4a20_itoa(_20da752c3_i);
					return _10121_obj;
				}
			}
			_iter_next_5308585936:;
			++it;
			_20da752c3_i++;
			goto _iter_begin_5308585936;
		}
		_iter_end_5308585936:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _20da752c3_trait_out_ident(jule::Ptr<_20cb471a9_Trait> _11220_t) {
	if ((*(_11220_t))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*(_11220_t))._field_ident;
	}
	return _20da752c3_as_out_ident((*(_11220_t))._field_ident,static_cast<jule::Uintptr>((*((*(_11220_t))._field_token._field_file))._method_addr()));
}



inline jule::Str _20da752c3_param_out_ident(jule::Ptr<_20c819332_Param>& _12021_p) {
	if (_20c47803a_is_anon_ident((*(_12021_p))._field_ident) || _20c47803a_is_ignore_ident((*(_12021_p))._field_ident)) {
		return jule::Str();
	}
	return _20da752c3_as_local_ident((*(_12021_p))._field_token._field_row,(*(_12021_p))._field_token._field_column,(*(_12021_p))._field_ident);
}



inline jule::Str _20da752c3_struct_out_ident(jule::Ptr<_20c496047_Struct>& _12822_s) {
	if ((*(_12822_s))._field_cpp_linked) {
		if (_20da75aa9_has_directive((*(_12822_s))._field_directives,jule::Str("typedef", 7))) {
			return (*(_12822_s))._field_ident;
		}
		return jule::Str("struct ", 7) + (*(_12822_s))._field_ident;
	}
	return _20da752c3_as_out_ident((*(_12822_s))._field_ident,static_cast<jule::Uintptr>((*((*(_12822_s))._field_token._field_file))._method_addr()));
}



inline jule::Str _20da752c3_struct_ins_out_ident(jule::Ptr<_20c496047_StructIns>& _13930_s) {
	if ((*((*(_13930_s))._field_decl))._field_cpp_linked || ((*(_13930_s))._field_generics.len() == 0LL)) {
		return _20da752c3_struct_out_ident((*(_13930_s))._field_decl);
	}
	{
		auto &expr = (*((*(_13930_s))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_5308607968:;
		if (it != expr.end()) {
			jule::Int _20da752c3_i = it - expr.begin();
			jule::Ptr<_20c496047_StructIns> _20da752c3_ins = *it;
			{
				if ((*(_20da752c3_ins))._method_same(_13930_s)) {
					jule::Str _14621_obj = _20da752c3_struct_out_ident((*(_13930_s))._field_decl);
					_14621_obj+=jule::Str("_", 1);
					_14621_obj+=_20bcb4a20_itoa(_20da752c3_i);
					return _14621_obj;
				}
			}
			_iter_next_5308607968:;
			++it;
			_20da752c3_i++;
			goto _iter_begin_5308607968;
		}
		_iter_end_5308607968:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _20da752c3_field_out_ident(jule::Ptr<_20c496047_Field>& _15721_f) {
	if ((*((*(_15721_f))._field_owner))._field_cpp_linked) {
		return (*(_15721_f))._field_ident;
	}
	return jule::Str("_field_", 7) + (*(_15721_f))._field_ident;
}



inline jule::Str _20da752c3_var_out_ident(jule::Ptr<_20cdc725d_Var> _16522_v) {
	{
		
		if ((*(_16522_v))._field_cpp_linked) {
			_case_begin_5308619568:;
			{
				return (*(_16522_v))._field_ident;
			}
		}
		else if ((*(_16522_v))._field_ident == jule::Str("error", 5)) {
			_case_begin_5308617744:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if ((*(_16522_v))._field_ident == jule::Str("self", 4)) {
			_case_begin_5308617488:;
			{
				if ((*((*((*(_16522_v))._field_kind))._field_kind))._method_sptr() != nullptr) {
					return jule::Str("this->self", 10);
				}
				return jule::Str("(*this)", 7);
			}
		}
		else if ((*(_16522_v))._field_scope != nullptr) {
			_case_begin_5308617120:;
			{
				return _20da752c3_as_local_ident((*(_16522_v))._field_token._field_row,(*(_16522_v))._field_token._field_column,(*(_16522_v))._field_ident);
			}
		}
		else {
			_case_begin_5308615248:;
			{
				return _20da752c3_as_out_ident((*(_16522_v))._field_ident,static_cast<jule::Uintptr>((*((*(_16522_v))._field_token._field_file))._method_addr()));
			}
		}
		_match_end_5308613504:;
	}
}



inline jule::Str _20da752c3_iter_begin_label_ident(jule::Uintptr _18827_it) {
	return jule::Str("_iter_begin_", 12) + _20bcb4a20_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_18827_it)));
}



inline jule::Str _20da752c3_iter_end_label_ident(jule::Uintptr _19325_it) {
	return jule::Str("_iter_end_", 10) + _20bcb4a20_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_19325_it)));
}



inline jule::Str _20da752c3_iter_next_label_ident(jule::Uintptr _19826_it) {
	return jule::Str("_iter_next_", 11) + _20bcb4a20_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_19826_it)));
}



inline jule::Str _20da752c3_label_ident(jule::Str _20316_ident) {
	return jule::Str("_julec_label_", 13) + _20316_ident;
}



inline jule::Str _20da752c3_match_end_label_ident(jule::Uintptr _20826_m) {
	return jule::Str("_match_end_", 11) + _20bcb4a20_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_20826_m)));
}



inline jule::Str _20da752c3_case_begin_label_ident(jule::Uintptr _21327_c) {
	return jule::Str("_case_begin_", 12) + _20bcb4a20_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_21327_c)));
}



inline jule::Ptr<_20c476dc4_Directive> _20da75aa9_find_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>& _2524_directives,jule::Str _2555_tag) {
	{
		auto &expr = _2524_directives;
		auto it = expr.begin();
		_iter_begin_5308635440:;
		if (it != expr.end()) {
			jule::Ptr<_20c476dc4_Directive> _20da75aa9_dr = *it;
			{
				if ((*(_20da75aa9_dr))._field_tag._field_kind == _2555_tag) {
					return _20da75aa9_dr;
				}
			}
			_iter_next_5308635440:;
			++it;
			goto _iter_begin_5308635440;
		}
		_iter_end_5308635440:;
	}
	return nullptr;
}



inline jule::Bool _20da75aa9_has_directive(jule::Slice<jule::Ptr<_20c476dc4_Directive>>& _3519_directives,jule::Str _3550_tag) {
	return _20da75aa9_find_directive(_3519_directives,_3550_tag) != nullptr;
}



inline jule::Str _20da75aa9_gen_prim_kind(jule::Ptr<_20d4a6c9e_Prim> _4018_p) {
	return _20da752c3_as_jt((*(_4018_p))._method_to_str());
}



inline jule::Str _20da75aa9_gen_tuple_kind(jule::Ptr<_20d4a6c9e_Tuple> _4523_t) {
	jule::Str _4613_obj = jule::Str("std::tuple<", 11);
	{
		auto &expr = (*(_4523_t))._field_types;
		auto it = expr.begin();
		_iter_begin_5308644864:;
		if (it != expr.end()) {
			jule::Ptr<_20d4a6c9e_TypeKind> _20da75aa9_tk = *it;
			{
				_4613_obj+=_20da75aa9_gen_type_kind(_20da75aa9_tk);
				_4613_obj+=jule::Str(",", 1);
			}
			_iter_next_5308644864:;
			++it;
			goto _iter_begin_5308644864;
		}
		_iter_end_5308644864:;
	}
	_4613_obj=_4613_obj.slice(0LL,_4613_obj.len() - 1LL);
	_4613_obj+=jule::Str(">", 1);
	return _4613_obj;
}



inline jule::Str _20da75aa9_as_sptr_kind(jule::Str _5717_elem) {
	jule::Str _5813_obj = _20da752c3_as_jt(jule::Str("ptr", 3));
	_5813_obj+=jule::Str("<", 1);
	_5813_obj+=_5717_elem;
	_5813_obj+=jule::Str(">", 1);
	return _5813_obj;
}



inline jule::Str _20da75aa9_gen_sptr_kind(jule::Ptr<_20d4a6c9e_Sptr> _6622_sptr) {
	return _20da75aa9_as_sptr_kind(_20da75aa9_gen_type_kind((*(_6622_sptr))._field_elem));
}



inline jule::Str _20da75aa9_gen_ptr_kind(jule::Ptr<_20d4a6c9e_Ptr> _7121_p) {
	
	if ((*(_7121_p))._method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _7713_elem = _20da75aa9_gen_type_kind((*(_7121_p))._field_elem);
	_7713_elem+=jule::Str("*", 1);
	return _7713_elem;
}



inline jule::Str _20da75aa9_gen_enum_kind(jule::Ptr<_20cb4c70e_Enum> _8322_e) {
	return _20da75aa9_gen_type_kind((*((*(_8322_e))._field_kind))._field_kind);
}



inline jule::Str _20da75aa9_as_slice_kind(jule::Ptr<_20d4a6c9e_TypeKind> _8722_elem) {
	jule::Str _8813_obj = _20da752c3_as_jt(jule::Str("slice", 5));
	_8813_obj+=jule::Str("<", 1);
	_8813_obj+=_20da75aa9_gen_type_kind(_8722_elem);
	_8813_obj+=jule::Str(">", 1);
	return _8813_obj;
}



inline jule::Str _20da75aa9_gen_slice_kind(jule::Ptr<_20d4a6c9e_Slc> _9623_s) {
	return _20da75aa9_as_slice_kind((*(_9623_s))._field_elem);
}



inline jule::Str _20da75aa9_gen_map_kind(jule::Ptr<_20d4a6c9e_Map> _10121_m) {
	jule::Str _10213_obj = _20da752c3_as_jt(jule::Str("map", 3));
	_10213_obj+=jule::Str("<", 1);
	_10213_obj+=_20da75aa9_gen_type_kind((*(_10121_m))._field_key);
	_10213_obj+=jule::Str(",", 1);
	_10213_obj+=_20da75aa9_gen_type_kind((*(_10121_m))._field_val);
	_10213_obj+=jule::Str(">", 1);
	return _10213_obj;
}



inline jule::Str _20da75aa9_gen_trait_kind_from_ident(jule::Str _11130_ident) {
	jule::Str _11213_obj = _20da752c3_as_jt(jule::Str("trait", 5));
	_11213_obj+=jule::Str("<", 1);
	_11213_obj+=_11130_ident;
	_11213_obj+=jule::Str(">", 1);
	return _11213_obj;
}



inline jule::Str _20da75aa9_gen_trait_kind(jule::Ptr<_20cb471a9_Trait> _12019_t) {
	jule::Str _1219_ident = _20da752c3_trait_out_ident(_12019_t);
	return _20da75aa9_gen_trait_kind_from_ident(_1219_ident);
}



inline jule::Str _20da75aa9_gen_struct_kind(jule::Ptr<_20c496047_Struct> _12620_s) {
	jule::Str _12713_rep = jule::Str();
	if ((*(_12620_s))._field_cpp_linked && (!(_20da75aa9_has_directive((*(_12620_s))._field_directives,jule::Str("typedef", 7))))) {
		_12713_rep+=jule::Str("struct ", 7);
	}
	_12713_rep+=_20da752c3_struct_out_ident(_12620_s);
	return _12713_rep;
}



inline jule::Str _20da75aa9_gen_struct_kind_ins(jule::Ptr<_20c496047_StructIns> _13728_s) {
	if ((*((*(_13728_s))._field_decl))._field_cpp_linked) {
		jule::Str _13917_ident = _20da752c3_struct_ins_out_ident(_13728_s);
		if ((*(_13728_s))._field_generics.len() > 0LL) {
			_13917_ident+=jule::Str("<", 1);
			{
				auto &expr = (*(_13728_s))._field_generics;
				auto it = expr.begin();
				_iter_begin_5308678080:;
				if (it != expr.end()) {
					jule::Ptr<_20d4a6c9e_TypeKind> _20da75aa9_g = *it;
					{
						_13917_ident+=_20da75aa9_gen_type_kind(_20da75aa9_g);
						_13917_ident+=jule::Str(",", 1);
					}
					_iter_next_5308678080:;
					++it;
					goto _iter_begin_5308678080;
				}
				_iter_end_5308678080:;
			}
			_13917_ident=_13917_ident.slice(0LL,_13917_ident.len() - 1LL);
			_13917_ident+=jule::Str(">", 1);
		}
		jule::Ptr<_20c476dc4_Directive> _14913_d = _20da75aa9_find_directive((*((*(_13728_s))._field_decl))._field_directives,jule::Str("namespace", 9));
		if (_14913_d != nullptr) {
			_13917_ident=(_20c1ee047_concat_all_parts((*(_14913_d))._field_args) + jule::Str("::", 2)) + _13917_ident;
		}
		return _13917_ident;
	}
	return _20da752c3_struct_ins_out_ident(_13728_s);
}



inline jule::Str _20da75aa9_gen_array_kind(jule::Ptr<_20d4a6c9e_Arr> _15923_a) {
	jule::Str _16013_obj = _20da752c3_as_jt(jule::Str("array", 5));
	_16013_obj+=jule::Str("<", 1);
	_16013_obj+=_20da75aa9_gen_type_kind((*(_15923_a))._field_elem);
	_16013_obj+=jule::Str(",", 1);
	_16013_obj+=_20bcb4a20_itoa((*(_15923_a))._field_n);
	_16013_obj+=jule::Str(">", 1);
	return _16013_obj;
}



inline jule::Str _20da75aa9_gen_fn_anon_decl(jule::Ptr<_20c819332_FnIns> _16925_f) {
	jule::Str _17013_decl = _20da77946_gen_fn_ins_result(_16925_f);
	_17013_decl+=jule::Str("(", 1);
	if ((*(_16925_f))._field_params.len() > 0LL) {
		{
			auto &expr = (*(_16925_f))._field_params;
			auto it = expr.begin();
			_iter_begin_5308692400:;
			if (it != expr.end()) {
				jule::Ptr<_20c819332_ParamIns> _20da75aa9_param = *it;
				{
					if ((*((*(_20da75aa9_param))._field_decl))._method_is_self()) {
						goto _iter_next_5308692400;
					}
					_17013_decl+=_20da77946_gen_param_ins_prototype(_20da75aa9_param);
					_17013_decl+=jule::Str(",", 1);
				}
				_iter_next_5308692400:;
				++it;
				goto _iter_begin_5308692400;
			}
			_iter_end_5308692400:;
		}
		_17013_decl=_17013_decl.slice(0LL,_17013_decl.len() - 1LL);
	} else {
		_17013_decl+=jule::Str("void", 4);
	}
	_17013_decl+=jule::Str(")", 1);
	return _17013_decl;
}



inline jule::Str _20da75aa9_gen_fn_kind(jule::Ptr<_20c819332_FnIns> _19220_f) {
	jule::Str _19313_obj = _20da752c3_as_jt(jule::Str("fn", 2));
	_19313_obj+=jule::Str("<", 1);
	_19313_obj+=_20da75aa9_gen_fn_anon_decl(_19220_f);
	_19313_obj+=jule::Str(">", 1);
	return _19313_obj;
}



inline jule::Str _20da75aa9_gen_type_kind(jule::Ptr<_20d4a6c9e_TypeKind> _20122_k) {
	{
		
		if ((*(_20122_k))._method_cpp_linked()) {
			_case_begin_5308702208:;
			{
				return (*(_20122_k))._field_cpp_ident;
			}
		}
		else if ((*(_20122_k))._method_prim() != nullptr) {
			_case_begin_5308702304:;
			{
				return _20da75aa9_gen_prim_kind((*(_20122_k))._method_prim());
			}
		}
		else if ((*(_20122_k))._method_tup() != nullptr) {
			_case_begin_5308701776:;
			{
				return _20da75aa9_gen_tuple_kind((*(_20122_k))._method_tup());
			}
		}
		else if ((*(_20122_k))._method_sptr() != nullptr) {
			_case_begin_5308701872:;
			{
				return _20da75aa9_gen_sptr_kind((*(_20122_k))._method_sptr());
			}
		}
		else if ((*(_20122_k))._method_ptr() != nullptr) {
			_case_begin_5308701408:;
			{
				return _20da75aa9_gen_ptr_kind((*(_20122_k))._method_ptr());
			}
		}
		else if ((*(_20122_k))._method_enm() != nullptr) {
			_case_begin_5308701504:;
			{
				return _20da75aa9_gen_enum_kind((*(_20122_k))._method_enm());
			}
		}
		else if ((*(_20122_k))._method_slc() != nullptr) {
			_case_begin_5308701600:;
			{
				return _20da75aa9_gen_slice_kind((*(_20122_k))._method_slc());
			}
		}
		else if ((*(_20122_k))._method_map() != nullptr) {
			_case_begin_5308700752:;
			{
				return _20da75aa9_gen_map_kind((*(_20122_k))._method_map());
			}
		}
		else if ((*(_20122_k))._method_trt() != nullptr) {
			_case_begin_5308700848:;
			{
				return _20da75aa9_gen_trait_kind((*(_20122_k))._method_trt());
			}
		}
		else if ((*(_20122_k))._method_strct() != nullptr) {
			_case_begin_5308700944:;
			{
				return _20da75aa9_gen_struct_kind_ins((*(_20122_k))._method_strct());
			}
		}
		else if ((*(_20122_k))._method_arr() != nullptr) {
			_case_begin_5308701040:;
			{
				return _20da75aa9_gen_array_kind((*(_20122_k))._method_arr());
			}
		}
		else if ((*(_20122_k))._method_fnc() != nullptr) {
			_case_begin_5308702416:;
			{
				return _20da75aa9_gen_fn_kind((*(_20122_k))._method_fnc());
			}
		}
		else {
			_case_begin_5308700400:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_5308700224:;
	}
}



inline void _20da77946_add_indent(void) {
	_20da77946_INDENT.push(9LLU);
}



inline void _20da77946_done_indent(void) {
	_20da77946_INDENT=_20da77946_INDENT.slice(0LL,_20da77946_INDENT.len() - 1LL);
}



inline jule::Str _20da77946_indent(void) {
	return static_cast<jule::Str>(_20da77946_INDENT);
}



inline jule::Bool _20da77946_is_cpp_header_file(jule::Str _6923_path) {
	jule::Int _709_offset = _20a405ddd_find_last_byte(_6923_path,'.');
	if (_709_offset == -1LL) {
		return false;
	}
	return _20a25878a_is_valid_header_ext(_6923_path.slice(_709_offset));
}



inline jule::Str _20da77946_gen_links(jule::Ptr<_20b6b28b3_IR>& _7819_ir) {
	jule::Str _7913_obj = jule::Str();
	{
		auto &expr = (*(_7819_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5308734752:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_pkg = *it;
			{
				{
					
					if ((!((*(_20da77946_pkg))._field_cpp_linked))) {
						_case_begin_5308736448:;
						{
							goto _iter_next_5308734752;
						}
					}
					else if (_20a25878a_is_std_header_path((*(_20da77946_pkg))._field_path)) {
						_case_begin_5308736560:;
						{
							_7913_obj+=jule::Str("#include ", 9);
							_7913_obj+=(*(_20da77946_pkg))._field_path;
							_7913_obj+=jule::Str("\n", 1);
						}
					}
					_match_end_5308736224:;
				}
			}
			_iter_next_5308734752:;
			++it;
			goto _iter_begin_5308734752;
		}
		_iter_end_5308734752:;
	}
	{
		auto &expr = (*(_7819_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5308740432:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_pkg = *it;
			{
				{
					
					if ((!((*(_20da77946_pkg))._field_cpp_linked))) {
						_case_begin_5308741216:;
						{
							goto _iter_next_5308740432;
						}
					}
					else if (_20da77946_is_cpp_header_file((*(_20da77946_pkg))._field_path)) {
						_case_begin_5308741328:;
						{
							_7913_obj+=jule::Str("#include \"", 10);
							_7913_obj+=(*(_20da77946_pkg))._field_path;
							_7913_obj+=jule::Str("\"\n", 2);
						}
					}
					_match_end_5308741056:;
				}
			}
			_iter_next_5308740432:;
			++it;
			goto _iter_begin_5308740432;
		}
		_iter_end_5308740432:;
	}
	return _7913_obj;
}



inline jule::Str _20da77946_gen_fn_result(jule::Ptr<_20c819332_Fn>& _10723_f) {
	if ((*(_10723_f))._method_is_void()) {
		if ((*(_10723_f))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*(_10723_f))._field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _20da75aa9_gen_type_kind((*((*((*(_10723_f))._field_result))._field_kind))._field_kind)) + jule::Str(">", 1);
	}
	return _20da75aa9_gen_type_kind((*((*((*(_10723_f))._field_result))._field_kind))._field_kind);
}



inline jule::Str _20da77946_gen_fn_ins_result(jule::Ptr<_20c819332_FnIns>& _12127_f) {
	if ((*((*(_12127_f))._field_decl))._method_is_void()) {
		if ((*((*(_12127_f))._field_decl))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*((*(_12127_f))._field_decl))._field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _20da75aa9_gen_type_kind((*(_12127_f))._field_result)) + jule::Str(">", 1);
	}
	return _20da75aa9_gen_type_kind((*(_12127_f))._field_result);
}



inline jule::Str _20da77946_gen_param_prototype(jule::Ptr<_20c819332_Param>& _13529_p) {
	jule::Str _13613_obj = jule::Str();
	if ((*(_13529_p))._field_variadic) {
		_13613_obj+=_20da752c3_as_jt(jule::Str("slice", 5));
		_13613_obj+=jule::Str("<", 1);
		_13613_obj+=_20da75aa9_gen_type_kind((*((*(_13529_p))._field_kind))._field_kind);
		_13613_obj+=jule::Str(">", 1);
	} else {
		_13613_obj+=_20da75aa9_gen_type_kind((*((*(_13529_p))._field_kind))._field_kind);
	}
	return _13613_obj;
}



inline jule::Str _20da77946_gen_param_ins(jule::Ptr<_20c819332_ParamIns>& _14923_p) {
	jule::Str _15013_obj = _20da77946_gen_param_ins_prototype(_14923_p);
	_15013_obj+=jule::Str(" ", 1);
	_15013_obj+=_20da752c3_param_out_ident((*(_14923_p))._field_decl);
	return _15013_obj;
}



inline jule::Str _20da77946_gen_param_ins_prototype(jule::Ptr<_20c819332_ParamIns>& _15733_p) {
	jule::Str _15813_obj = jule::Str();
	if ((*((*(_15733_p))._field_decl))._field_variadic) {
		_15813_obj+=_20da752c3_as_jt(jule::Str("slice", 5));
		_15813_obj+=jule::Str("<", 1);
		_15813_obj+=_20da75aa9_gen_type_kind((*(_15733_p))._field_kind);
		_15813_obj+=jule::Str(">", 1);
	} else {
		_15813_obj+=_20da75aa9_gen_type_kind((*(_15733_p))._field_kind);
	}
	if ((*((*(_15733_p))._field_decl))._field_reference) {
		_15813_obj+=jule::Str("&", 1);
	}
	return _15813_obj;
}



inline jule::Str _20da77946_gen_param(jule::Ptr<_20c819332_Param>& _17619_p) {
	jule::Str _17713_obj = _20da77946_gen_param_prototype(_17619_p);
	if ((((*(_17619_p))._field_ident != jule::Str()) && (!(_20c47803a_is_ignore_ident((*(_17619_p))._field_ident)))) && (!(_20c47803a_is_anon_ident((*(_17619_p))._field_ident)))) {
		_17713_obj+=jule::Str(" ", 1);
		_17713_obj+=_20da752c3_param_out_ident(_17619_p);
	}
	return _17713_obj;
}



inline jule::Str _20da77946_gen_params(jule::Slice<jule::Ptr<_20c819332_Param>>& _18620_params) {
	{
		
		if (_18620_params.len() == 0LL) {
			_case_begin_5308778016:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_18620_params.len() == 1LL) && (*(_18620_params[0LL]))._method_is_self()) {
			_case_begin_5308778112:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_5308777728:;
	}
	jule::Str _19513_obj = jule::Str("(", 1);
	{
		auto &expr = _18620_params;
		auto it = expr.begin();
		_iter_begin_5308781328:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Param> _20da77946_p = *it;
			{
				if ((!((*(_20da77946_p))._method_is_self()))) {
					_19513_obj+=_20da77946_gen_param(_20da77946_p) + jule::Str(",", 1);
				}
			}
			_iter_next_5308781328:;
			++it;
			goto _iter_begin_5308781328;
		}
		_iter_end_5308781328:;
	}
	_19513_obj=_19513_obj.slice(0LL,_19513_obj.len() - 1LL);
	return _19513_obj + jule::Str(")", 1);
}



inline jule::Str _20da77946_gen_params_ins(jule::Slice<jule::Ptr<_20c819332_ParamIns>>& _20724_params) {
	{
		
		if (_20724_params.len() == 0LL) {
			_case_begin_5308786560:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_20724_params.len() == 1LL) && (*((*(_20724_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_5308786672:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_5308784192:;
	}
	jule::Str _21613_obj = jule::Str("(", 1);
	{
		auto &expr = _20724_params;
		auto it = expr.begin();
		_iter_begin_5308790672:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> _20da77946_p = *it;
			{
				if ((!((*((*(_20da77946_p))._field_decl))._method_is_self()))) {
					_21613_obj+=_20da77946_gen_param_ins(_20da77946_p) + jule::Str(",", 1);
				}
			}
			_iter_next_5308790672:;
			++it;
			goto _iter_begin_5308790672;
		}
		_iter_end_5308790672:;
	}
	_21613_obj=_21613_obj.slice(0LL,_21613_obj.len() - 1LL);
	return _21613_obj + jule::Str(")", 1);
}



inline jule::Str _20da77946_gen_params_prototypes(jule::Slice<jule::Ptr<_20c819332_ParamIns>>& _22931_params) {
	{
		
		if (_22931_params.len() == 0LL) {
			_case_begin_5308796640:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_22931_params.len() == 1LL) && (*((*(_22931_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_5308796752:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_5308796240:;
	}
	jule::Str _23813_obj = jule::Str("(", 1);
	{
		auto &expr = _22931_params;
		auto it = expr.begin();
		_iter_begin_5308800640:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_ParamIns> _20da77946_p = *it;
			{
				if ((!((*((*(_20da77946_p))._field_decl))._method_is_self()))) {
					_23813_obj+=_20da77946_gen_param_ins_prototype(_20da77946_p);
					_23813_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_5308800640:;
			++it;
			goto _iter_begin_5308800640;
		}
		_iter_end_5308800640:;
	}
	_23813_obj=_23813_obj.slice(0LL,_23813_obj.len() - 1LL);
	return _23813_obj + jule::Str(")", 1);
}



inline jule::Str _20da77946_gen_trait(jule::Ptr<_20cb471a9_Trait>& _25219_t) {
	
	jule::Str _2549_outid = _20da752c3_trait_out_ident(_25219_t);
	jule::Str _25613_obj = jule::Str("struct ", 7);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str(" {\n", 3);
	_25613_obj+=jule::Str("\t", 1);
	_25613_obj+=jule::Str("virtual ~", 9);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto &expr = (*(_25219_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_5308810992:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20da77946_f = *it;
			{
				_25613_obj+=jule::Str("\t", 1);
				_25613_obj+=jule::Str("virtual ", 8);
				_25613_obj+=_20da77946_gen_fn_result(_20da77946_f);
				_25613_obj+=jule::Str(" _method_", 9);
				_25613_obj+=(*(_20da77946_f))._field_ident;
				_25613_obj+=_20da77946_gen_params((*(_20da77946_f))._field_params);
				_25613_obj+=jule::Str(" {", 2);
				if ((!((*(_20da77946_f))._method_is_void()))) {
					_25613_obj+=jule::Str(" return {}; ", 12);
				}
				_25613_obj+=jule::Str("}\n", 2);
			}
			_iter_next_5308810992:;
			++it;
			goto _iter_begin_5308810992;
		}
		_iter_end_5308810992:;
	}
	_25613_obj+=jule::Str("};", 2);
	return _25613_obj;
}



inline jule::Str _20da77946_gen_traits_tbl(jule::Ptr<_20d0c86e5_SymbolTable>& _28124_tbl) {
	jule::Str _28213_obj = jule::Str();
	{
		auto &expr = (*(_28124_tbl))._field_traits;
		auto it = expr.begin();
		_iter_begin_5308818272:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> _20da77946_t = *it;
			{
				_28213_obj+=_20da77946_gen_trait(_20da77946_t);
				_28213_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5308818272:;
			++it;
			goto _iter_begin_5308818272;
		}
		_iter_end_5308818272:;
	}
	return _28213_obj;
}



inline jule::Str _20da77946_gen_traits_pkg(jule::Ptr<_20cba58cc_Package>& _29124_pkg) {
	jule::Str _29213_obj = jule::Str();
	{
		auto &expr = (*(_29124_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5308821856:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20da77946_tbl = *it;
			{
				_29213_obj+=_20da77946_gen_traits_tbl(_20da77946_tbl);
			}
			_iter_next_5308821856:;
			++it;
			goto _iter_begin_5308821856;
		}
		_iter_end_5308821856:;
	}
	return _29213_obj;
}



inline jule::Str _20da77946_gen_traits(jule::Ptr<_20b6b28b3_IR>& _30020_ir) {
	jule::Str _30113_obj = jule::Str();
	{
		auto &expr = (*(_30020_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5308825216:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_u = *it;
			{
				if ((!((*(_20da77946_u))._field_cpp_linked))) {
					_30113_obj+=_20da77946_gen_traits_pkg((*(_20da77946_u))._field_package);
				}
			}
			_iter_next_5308825216:;
			++it;
			goto _iter_begin_5308825216;
		}
		_iter_end_5308825216:;
	}
	_30113_obj+=_20da77946_gen_traits_pkg((*(_30020_ir))._field_main);
	return _30113_obj;
}



inline jule::Str _20da77946_gen_trait_prototype(jule::Ptr<_20cb471a9_Trait>& _31225_t) {
	jule::Str _31313_obj = jule::Str("struct ", 7);
	_31313_obj+=_20da752c3_trait_out_ident(_31225_t);
	_31313_obj+=jule::Str(";", 1);
	return _31313_obj;
}



inline jule::Str _20da77946_gen_trait_prototypes(jule::Ptr<_20cba58cc_Package>& _32030_p) {
	jule::Str _32113_obj = jule::Str();
	{
		auto &expr = (*(_32030_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5308832848:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20da77946_f = *it;
			{
				{
					auto &expr = (*(_20da77946_f))._field_traits;
					auto it = expr.begin();
					_iter_begin_5308834688:;
					if (it != expr.end()) {
						jule::Ptr<_20cb471a9_Trait> &_20da77946_t = *it;
						{
							if ((*(_20da77946_t))._field_token._field_id != 0LLU) {
								_32113_obj+=_20da77946_gen_trait_prototype(_20da77946_t);
								_32113_obj+=jule::Str("\n", 1);
							}
						}
						_iter_next_5308834688:;
						++it;
						goto _iter_begin_5308834688;
					}
					_iter_end_5308834688:;
				}
			}
			_iter_next_5308832848:;
			++it;
			goto _iter_begin_5308832848;
		}
		_iter_end_5308832848:;
	}
	return _32113_obj;
}



inline jule::Str _20da77946_gen_struct_plain_prototype(jule::Ptr<_20c496047_Struct>& _33436_s) {
	jule::Str _33513_obj = jule::Str();
	{
		auto &expr = (*(_33436_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5308833776:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_StructIns> _20da77946_ins = *it;
			{
				_33513_obj+=jule::Str("\nstruct ", 8);
				_33513_obj+=_20da752c3_struct_ins_out_ident(_20da77946_ins);
				_33513_obj+=jule::Str(";", 1);
				_33513_obj+=jule::Str("\n", 1);
			}
			_iter_next_5308833776:;
			++it;
			goto _iter_begin_5308833776;
		}
		_iter_end_5308833776:;
	}
	return _33513_obj;
}



inline jule::Str _20da77946_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_20c496047_Struct>>& _34637_structs) {
	jule::Str _34713_obj = jule::Str();
	{
		auto &expr = _34637_structs;
		auto it = expr.begin();
		_iter_begin_5308842096:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20da77946_s = *it;
			{
				if ((!((*(_20da77946_s))._field_cpp_linked)) && ((*(_20da77946_s))._field_token._field_id != 0LLU)) {
					_34713_obj+=_20da77946_gen_struct_plain_prototype(_20da77946_s);
					_34713_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_5308842096:;
			++it;
			goto _iter_begin_5308842096;
		}
		_iter_end_5308842096:;
	}
	return _34713_obj;
}



inline jule::Str _20da77946_gen_struct_traits(jule::Ptr<_20c496047_Struct>& _35823_s) {
	if ((*(_35823_s))._field_implements.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _36313_obj = jule::Str(": ", 2);
	{
		auto &expr = (*(_35823_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_5308848592:;
		if (it != expr.end()) {
			jule::Ptr<_20cb471a9_Trait> &_20da77946_i = *it;
			{
				_36313_obj+=jule::Str("public ", 7);
				_36313_obj+=_20da752c3_trait_out_ident(_20da77946_i);
				_36313_obj+=jule::Str(",", 1);
			}
			_iter_next_5308848592:;
			++it;
			goto _iter_begin_5308848592;
		}
		_iter_end_5308848592:;
	}
	_36313_obj=_36313_obj.slice(0LL,_36313_obj.len() - 1LL);
	return _36313_obj;
}



inline jule::Str _20da77946_gen_field_decl(jule::Ptr<_20c496047_FieldIns>& _37424_f) {
	jule::Str _37513_obj = _20da75aa9_gen_type_kind((*(_37424_f))._field_kind);
	_37513_obj+=jule::Str(" ", 1);
	_37513_obj+=_20da752c3_field_out_ident((*(_37424_f))._field_decl);
	_37513_obj+=jule::Str(" = ", 3);
	if ((*(_37424_f))._field_default == nullptr) {
		_37513_obj+=_20c1ee047_get_init_expr((*(_37424_f))._field_kind);
	} else {
		_37513_obj+=_20c1ee047_gen_expr((*((*(_37424_f))._field_default))._field_model);
	}
	_37513_obj+=jule::Str(";", 1);
	return _37513_obj;
}



inline jule::Str _20da77946_gen_struct_self_field_type_kind(jule::Ptr<_20c496047_StructIns>& _39041_s) {
	return _20da75aa9_as_sptr_kind(_20da75aa9_gen_struct_kind_ins(_39041_s));
}



inline jule::Str _20da77946_gen_struct_self_field(jule::Ptr<_20c496047_StructIns>& _39531_s) {
	jule::Str _39613_obj = _20da77946_gen_struct_self_field_type_kind(_39531_s);
	_39613_obj+=jule::Str(" self;", 6);
	return _39613_obj;
}



inline jule::Str _20da77946_gen_struct_self_field_init_st(jule::Ptr<_20c496047_StructIns>& _40139_s) {
	jule::Str _40213_obj = jule::Str("this->self = ", 13);
	_40213_obj+=_20da77946_gen_struct_self_field_type_kind(_40139_s);
	_40213_obj+=jule::Str("::make(this, nullptr);", 22);
	return _40213_obj;
}



inline jule::Str _20da77946_gen_struct_constructor(jule::Ptr<_20c496047_StructIns>& _40832_s) {
	jule::Str _40913_obj = _20da752c3_struct_ins_out_ident(_40832_s);
	_40913_obj+=jule::Str("(", 1);
	if ((*(_40832_s))._field_fields.len() > 0LL) {
		{
			auto &expr = (*(_40832_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5308866752:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> _20da77946_f = *it;
				{
					_40913_obj+=_20da75aa9_gen_type_kind((*(_20da77946_f))._field_kind);
					_40913_obj+=jule::Str(" __param_", 9);
					_40913_obj+=(*((*(_20da77946_f))._field_decl))._field_ident;
					_40913_obj+=jule::Str(", ", 2);
				}
				_iter_next_5308866752:;
				++it;
				goto _iter_begin_5308866752;
			}
			_iter_end_5308866752:;
		}
		_40913_obj=_40913_obj.slice(0LL,_40913_obj.len() - 2LL);
	} else {
		_40913_obj+=jule::Str("void", 4);
	}
	_40913_obj+=jule::Str(")", 1);
	if ((*(_40832_s))._field_fields.len() > 0LL) {
		_40913_obj+=jule::Str(": ", 2);
		{
			auto &expr = (*(_40832_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5308872480:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> &_20da77946_f = *it;
				{
					_40913_obj+=_20da752c3_field_out_ident((*(_20da77946_f))._field_decl);
					_40913_obj+=jule::Str("(", 1);
					_40913_obj+=jule::Str("__param_", 8);
					_40913_obj+=(*((*(_20da77946_f))._field_decl))._field_ident;
					_40913_obj+=jule::Str("), ", 3);
				}
				_iter_next_5308872480:;
				++it;
				goto _iter_begin_5308872480;
			}
			_iter_end_5308872480:;
		}
		_40913_obj=_40913_obj.slice(0LL,_40913_obj.len() - 2LL);
	}
	_40913_obj+=jule::Str(" {", 2);
	if ((*((*(_40832_s))._field_decl))._method_has_ref_accessible()) {
		_40913_obj+=jule::Str("\n", 1);
		_20da77946_add_indent();
		_40913_obj+=_20da77946_indent();
		_40913_obj+=_20da77946_gen_struct_self_field_init_st(_40832_s);
		_40913_obj+=jule::Str("\n", 1);
		_20da77946_done_indent();
		_40913_obj+=jule::Str("\n", 1);
		_40913_obj+=_20da77946_indent();
	}
	_40913_obj+=jule::Str("}", 1);
	return _40913_obj;
}



inline jule::Str _20da77946_gen_struct_destructor(jule::Ptr<_20c496047_StructIns>& _45231_s) {
	jule::Bool _4539_disposed = (*((*(_45231_s))._field_decl))._method_is_implements(_20d68a5ae_BUILTIN_TRAIT_DISPOSE);
	jule::Bool _4549_ref_access = (*((*(_45231_s))._field_decl))._method_has_ref_accessible();
	if ((!(_4549_ref_access)) && (!(_4539_disposed))) {
		return jule::Str();
	}
	jule::Str _46013_obj = jule::Str("~", 1);
	_46013_obj+=_20da752c3_struct_ins_out_ident(_45231_s);
	_46013_obj+=jule::Str("(void) { ", 9);
	if (_4539_disposed) {
		jule::Ptr<_20c819332_Fn> _46513_dispose_method = (*(_45231_s))._method_find_method(jule::Str("dispose", 7),false);
		_46013_obj+=jule::Str("this->", 6);
		_46013_obj+=_20da752c3_fn_out_ident(_46513_dispose_method);
		_46013_obj+=jule::Str("(); ", 4);
	}
	if (_4549_ref_access) {
		_46013_obj+=jule::Str("this->self.ref = nullptr; ", 26);
	}
	_46013_obj+=jule::Str("}", 1);
	return _46013_obj;
}



inline jule::Str _20da77946_gen_struct_operators(jule::Ptr<_20c496047_StructIns>& _47930_s) {
	jule::Str _4809_out_ident = _20da752c3_struct_ins_out_ident(_47930_s);
	jule::Str _48113_obj = jule::Str();
	_48113_obj+=_20da77946_indent();
	if (_20a20bc9e_OPT_INLINE) {
		_48113_obj+=jule::Str("inline ", 7);
	}
	_48113_obj+=jule::Str("bool operator==(const ", 22);
	_48113_obj+=_4809_out_ident;
	_48113_obj+=jule::Str(" &_Src) const {", 15);
	if ((*(_47930_s))._field_fields.len() > 0LL) {
		_20da77946_add_indent();
		_48113_obj+=jule::Str("\n", 1);
		_48113_obj+=_20da77946_indent();
		_48113_obj+=jule::Str("return ", 7);
		_20da77946_add_indent();
		jule::Int _49617_n = 0LL;
		{
			auto &expr = (*(_47930_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5308900304:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> _20da77946_f = *it;
				{
					jule::Ptr<_20c496047_StructIns> _49917_strct = (*((*(_20da77946_f))._field_kind))._method_strct();
					if (((_49917_strct != nullptr) && ((*(_49917_strct))._field_decl != nullptr)) && (*((*(_49917_strct))._field_decl))._field_cpp_linked) {
						goto _iter_next_5308900304;
					}
					(_49617_n)++;
					_48113_obj+=jule::Str("\n", 1);
					_48113_obj+=_20da77946_indent();
					_48113_obj+=jule::Str("this->", 6);
					jule::Str _50817_f_ident = _20da752c3_field_out_ident((*(_20da77946_f))._field_decl);
					_48113_obj+=_50817_f_ident;
					_48113_obj+=jule::Str(" == _Src.", 9);
					_48113_obj+=_50817_f_ident;
					_48113_obj+=jule::Str(" &&", 3);
				}
				_iter_next_5308900304:;
				++it;
				goto _iter_begin_5308900304;
			}
			_iter_end_5308900304:;
		}
		_20da77946_done_indent();
		if (_49617_n > 0LL) {
			_48113_obj=_48113_obj.slice(0LL,_48113_obj.len() - 3LL);
		} else {
			_48113_obj+=jule::Str("true", 4);
		}
		_48113_obj+=jule::Str(";\n", 2);
		_20da77946_done_indent();
		_48113_obj+=_20da77946_indent();
		_48113_obj+=jule::Str("}", 1);
	} else {
		_48113_obj+=jule::Str(" return true; }", 15);
	}
	_48113_obj+=jule::Str("\n\n", 2);
	_48113_obj+=_20da77946_indent();
	if (_20a20bc9e_OPT_INLINE) {
		_48113_obj+=jule::Str("inline ", 7);
	}
	_48113_obj+=jule::Str("bool operator!=(const ", 22);
	_48113_obj+=_4809_out_ident;
	_48113_obj+=jule::Str(" &_Src) const { return !this->operator==(_Src); }", 49);
	return _48113_obj;
}



inline jule::Str _20da77946_gen_struct_derive_defs_prototypes(jule::Ptr<_20c496047_StructIns>& _53839_s) {
	jule::Str _53913_obj = jule::Str();
	if ((*((*(_53839_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_53913_obj+=_20da77946_indent();
		_53913_obj+=_20cac28d7_get_derive_fn_decl_clone((*(_53839_s))._field_decl);
		_53913_obj+=jule::Str(";\n\n", 3);
	}
	return _53913_obj;
}



inline jule::Str _20da77946_gen_struct_ins_prototype(jule::Ptr<_20c496047_StructIns>& _55034_s) {
	jule::Str _55113_obj = jule::Str("struct ", 7);
	jule::Str _5529_out_ident = _20da752c3_struct_ins_out_ident(_55034_s);
	_55113_obj+=_5529_out_ident;
	_55113_obj+=_20da77946_gen_struct_traits((*(_55034_s))._field_decl);
	_55113_obj+=jule::Str(" {\n", 3);
	jule::Bool _5589_ref_access = (*((*(_55034_s))._field_decl))._method_has_ref_accessible();
	_20da77946_add_indent();
	if (_5589_ref_access) {
		_55113_obj+=_20da77946_indent();
		_55113_obj+=_20da77946_gen_struct_self_field(_55034_s);
		_55113_obj+=jule::Str("\n\n", 2);
	}
	if ((*(_55034_s))._field_fields.len() > 0LL) {
		{
			auto &expr = (*(_55034_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5308927168:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> _20da77946_f = *it;
				{
					_55113_obj+=_20da77946_indent();
					_55113_obj+=_20da77946_gen_field_decl(_20da77946_f);
					_55113_obj+=jule::Str("\n", 1);
				}
				_iter_next_5308927168:;
				++it;
				goto _iter_begin_5308927168;
			}
			_iter_end_5308927168:;
		}
		_55113_obj+=jule::Str("\n\n", 2);
		_55113_obj+=_20da77946_indent();
		_55113_obj+=_20da77946_gen_struct_constructor(_55034_s);
		_55113_obj+=jule::Str("\n\n", 2);
	}
	_55113_obj+=_20da77946_indent();
	_55113_obj+=_20da77946_gen_struct_destructor(_55034_s);
	_55113_obj+=jule::Str("\n\n", 2);
	_55113_obj+=_20da77946_indent();
	_55113_obj+=_5529_out_ident;
	if (_5589_ref_access) {
		_55113_obj+=jule::Str("(void) { ", 9);
		_55113_obj+=_20da77946_gen_struct_self_field_init_st(_55034_s);
		_55113_obj+=jule::Str(" }\n\n", 4);
	} else {
		_55113_obj+=jule::Str("(void) = default;\n\n", 19);
	}
	{
		auto &expr = (*(_55034_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_5308924368:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20da77946_f = *it;
			{
				_55113_obj+=_20da77946_gen_fn_prototype(_20da77946_f,true);
				_55113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5308924368:;
			++it;
			goto _iter_begin_5308924368;
		}
		_iter_end_5308924368:;
	}
	_55113_obj+=_20da77946_gen_struct_derive_defs_prototypes(_55034_s);
	_55113_obj+=_20da77946_gen_struct_operators(_55034_s);
	_55113_obj+=jule::Str("\n", 1);
	_20da77946_done_indent();
	_55113_obj+=_20da77946_indent() + jule::Str("};", 2);
	return _55113_obj;
}



inline jule::Str _20da77946_gen_struct_prototype(jule::Ptr<_20c496047_Struct>& _60930_s) {
	jule::Str _61013_obj = jule::Str();
	{
		auto &expr = (*(_60930_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5308957184:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_StructIns> _20da77946_ins = *it;
			{
				_61013_obj+=_20da77946_gen_struct_ins_prototype(_20da77946_ins);
				_61013_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5308957184:;
			++it;
			goto _iter_begin_5308957184;
		}
		_iter_end_5308957184:;
	}
	return _61013_obj;
}



inline jule::Str _20da77946_gen_struct_prototypes(jule::Slice<jule::Ptr<_20c496047_Struct>>& _61931_structs) {
	jule::Str _62013_obj = jule::Str();
	{
		auto &expr = _61931_structs;
		auto it = expr.begin();
		_iter_begin_5308960352:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20da77946_s = *it;
			{
				if ((!((*(_20da77946_s))._field_cpp_linked)) && ((*(_20da77946_s))._field_token._field_id != 0LLU)) {
					_62013_obj+=_20da77946_gen_struct_prototype(_20da77946_s);
					_62013_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_5308960352:;
			++it;
			goto _iter_begin_5308960352;
		}
		_iter_end_5308960352:;
	}
	return _62013_obj;
}



inline jule::Str _20da77946_gen_fn_decl_head(jule::Ptr<_20c819332_FnIns>& _63026_f,jule::Bool _63037_method) {
	jule::Str _63113_obj = jule::Str();
	if (_63037_method && (*((*(_63026_f))._field_decl))._field_statically) {
		_63113_obj+=jule::Str("static ", 7);
	}
	if (_20a20bc9e_OPT_INLINE && (!((*((*(_63026_f))._field_decl))._method_is_entry_point()))) {
		_63113_obj+=jule::Str("inline ", 7);
	}
	_63113_obj+=_20da77946_gen_fn_ins_result(_63026_f) + jule::Str(" ", 1);
	if ((!(_63037_method)) && ((*((*(_63026_f))._field_decl))._field_owner != nullptr)) {
		_63113_obj+=_20da752c3_struct_ins_out_ident((*(_63026_f))._field_owner);
		_63113_obj+=jule::Str("::", 2);
	}
	_63113_obj+=_20da752c3_fn_ins_out_ident(_63026_f);
	return _63113_obj;
}



inline jule::Str _20da77946_gen_fn_prototype(jule::Ptr<_20c819332_Fn>& _65226_f,jule::Bool _65234_method) {
	jule::Str _65313_obj = jule::Str();
	{
		auto &expr = (*(_65226_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5308975328:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_FnIns> _20da77946_c = *it;
			{
				_65313_obj+=_20da77946_indent();
				_65313_obj+=_20da77946_gen_fn_decl_head(_20da77946_c,_65234_method);
				_65313_obj+=_20da77946_gen_params_prototypes((*(_20da77946_c))._field_params);
				_65313_obj+=jule::Str(";\n", 2);
			}
			_iter_next_5308975328:;
			++it;
			goto _iter_begin_5308975328;
		}
		_iter_end_5308975328:;
	}
	return _65313_obj;
}



inline jule::Str _20da77946_gen_fn_prototypes(jule::Ptr<_20cba58cc_Package>& _66427_pkg) {
	jule::Str _66513_obj = jule::Str();
	{
		auto &expr = (*(_66427_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5308980480:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20da77946_file = *it;
			{
				{
					auto &expr = (*(_20da77946_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5308982320:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Fn> _20da77946_f = *it;
						{
							if ((!((*(_20da77946_f))._field_cpp_linked)) && ((*(_20da77946_f))._field_token._field_id != 0LLU)) {
								_66513_obj+=_20da77946_gen_fn_prototype(_20da77946_f,false);
							}
						}
						_iter_next_5308982320:;
						++it;
						goto _iter_begin_5308982320;
					}
					_iter_end_5308982320:;
				}
			}
			_iter_next_5308980480:;
			++it;
			goto _iter_begin_5308980480;
		}
		_iter_end_5308980480:;
	}
	return _66513_obj;
}



inline jule::Str _20da77946_gen_prototypes(jule::Ptr<_20b6b28b3_IR>& _67724_ir) {
	jule::Str _67813_obj = jule::Str();
	{
		auto &expr = (*(_67724_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5308981392:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_u = *it;
			{
				if ((!((*(_20da77946_u))._field_cpp_linked))) {
					_67813_obj+=_20da77946_gen_trait_prototypes((*(_20da77946_u))._field_package);
				}
			}
			_iter_next_5308981392:;
			++it;
			goto _iter_begin_5308981392;
		}
		_iter_end_5308981392:;
	}
	_67813_obj+=_20da77946_gen_trait_prototypes((*(_67724_ir))._field_main);
	_67813_obj+=_20da77946_gen_struct_plain_prototypes((*(_67724_ir))._field_ordered._field_structs);
	_67813_obj+=_20da77946_gen_traits(_67724_ir);
	_67813_obj+=jule::Str("\n", 1);
	_67813_obj+=_20da77946_gen_struct_prototypes((*(_67724_ir))._field_ordered._field_structs);
	{
		auto &expr = (*(_67724_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5308992784:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_u = *it;
			{
				if ((!((*(_20da77946_u))._field_cpp_linked))) {
					_67813_obj+=_20da77946_gen_fn_prototypes((*(_20da77946_u))._field_package);
				}
			}
			_iter_next_5308992784:;
			++it;
			goto _iter_begin_5308992784;
		}
		_iter_end_5308992784:;
	}
	_67813_obj+=_20da77946_gen_fn_prototypes((*(_67724_ir))._field_main);
	return _67813_obj;
}



inline jule::Str _20da77946_gen_var_init_expr(jule::Ptr<_20cdc725d_Var>& _70627_v,jule::Str _70636_init) {
	jule::Str _70713_obj = jule::Str();
	if ((*(_70627_v))._field_statically) {
		_70713_obj+=jule::Str("static ", 7);
	}
	_70713_obj+=_20da75aa9_gen_type_kind((*((*(_70627_v))._field_kind))._field_kind);
	_70713_obj+=jule::Str(" ", 1);
	if ((*(_70627_v))._field_reference) {
		_70713_obj+=jule::Str("&", 1);
	}
	_70713_obj+=_20da752c3_var_out_ident(_70627_v);
	if (_70636_init != jule::Str()) {
		_70713_obj+=jule::Str(" = ", 3);
		_70713_obj+=_70636_init;
	}
	_70713_obj+=jule::Str(";", 1);
	return _70713_obj;
}



inline jule::Str _20da77946_gen_var(jule::Ptr<_20cdc725d_Var> _72716_v) {
	if (_20c47803a_is_ignore_ident((*(_72716_v))._field_ident)) {
		return jule::Str();
	}
	if (((*(_72716_v))._field_value != nullptr) && ((*((*(_72716_v))._field_value))._field_expr != nullptr)) {
		if ((*((*((*(_72716_v))._field_value))._field_data))._field_model != nullptr) {
			return _20da77946_gen_var_init_expr(_72716_v,_20c1ee047_gen_val((*(_72716_v))._field_value));
		}
		return _20da77946_gen_var_init_expr(_72716_v,jule::Str());
	}
	return _20da77946_gen_var_init_expr(_72716_v,_20c1ee047_get_init_expr((*((*(_72716_v))._field_kind))._field_kind));
}



inline jule::Str _20da77946_gen_pkg_globals(jule::Ptr<_20cba58cc_Package>& _74125_p,jule::Str& _74143_global_initializers) {
	jule::Str _74213_obj = jule::Str();
	{
		auto &expr = (*(_74125_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5309013776:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20da77946_f = *it;
			{
				{
					auto &expr = (*(_20da77946_f))._field_vars;
					auto it = expr.begin();
					_iter_begin_5309015616:;
					if (it != expr.end()) {
						jule::Ptr<_20cdc725d_Var> _20da77946_v = *it;
						{
							if ((((*(_20da77946_v))._field_token._field_id != 0LLU) && (!((*(_20da77946_v))._field_cpp_linked))) && (!((*(_20da77946_v))._field_constant))) {
								_74213_obj+=_20da75aa9_gen_type_kind((*((*(_20da77946_v))._field_kind))._field_kind);
								_74213_obj+=jule::Str(" ", 1);
								if ((*(_20da77946_v))._field_reference) {
									_74213_obj+=jule::Str("&", 1);
								}
								_74213_obj+=_20da752c3_var_out_ident(_20da77946_v);
								_74213_obj+=jule::Str(";\n", 2);
								_74143_global_initializers+=_20da77946_indent();
								_74143_global_initializers+=_20da752c3_var_out_ident(_20da77946_v);
								if (((*(_20da77946_v))._field_value != nullptr) && ((*((*(_20da77946_v))._field_value))._field_expr != nullptr)) {
									if ((*((*((*(_20da77946_v))._field_value))._field_data))._field_model != nullptr) {
										_74143_global_initializers+=jule::Str(" = ", 3);
										_74143_global_initializers+=_20c1ee047_gen_val((*(_20da77946_v))._field_value);
									}
								} else {
									_74143_global_initializers+=jule::Str(" = ", 3);
									_74143_global_initializers+=_20c1ee047_get_init_expr((*((*(_20da77946_v))._field_kind))._field_kind);
								}
								_74143_global_initializers+=jule::Str(";\n", 2);
							}
						}
						_iter_next_5309015616:;
						++it;
						goto _iter_begin_5309015616;
					}
					_iter_end_5309015616:;
				}
			}
			_iter_next_5309013776:;
			++it;
			goto _iter_begin_5309013776;
		}
		_iter_end_5309013776:;
	}
	return _74213_obj;
}



inline jule::Str _20da77946_gen_globals(jule::Ptr<_20b6b28b3_IR> _77320_ir,jule::Str& _77334_global_initializers) {
	jule::Str _77413_obj = jule::Str();
	_20da77946_add_indent();
	{
		auto &expr = (*(_77320_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5309030960:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_u = *it;
			{
				if ((!((*(_20da77946_u))._field_cpp_linked))) {
					_77413_obj+=_20da77946_gen_pkg_globals((*(_20da77946_u))._field_package,_77334_global_initializers);
				}
			}
			_iter_next_5309030960:;
			++it;
			goto _iter_begin_5309030960;
		}
		_iter_end_5309030960:;
	}
	_77413_obj+=_20da77946_gen_pkg_globals((*(_77320_ir))._field_main,_77334_global_initializers);
	_20da77946_done_indent();
	return _77413_obj;
}



inline jule::Str _20da77946_gen_fn(jule::Ptr<_20c819332_Fn>& _79116_f) {
	jule::Str _79213_obj = jule::Str();
	{
		auto &expr = (*(_79116_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5309036752:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_FnIns> _20da77946_ins = *it;
			{
				_79213_obj+=_20da77946_gen_fn_decl_head(_20da77946_ins,false);
				_79213_obj+=_20da77946_gen_params_ins((*(_20da77946_ins))._field_params);
				_79213_obj+=jule::Str(" ", 1);
				_79213_obj+=_20b6cc6d0_gen_fn_scope(_20da77946_ins);
				_79213_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5309036752:;
			++it;
			goto _iter_begin_5309036752;
		}
		_iter_end_5309036752:;
	}
	return _79213_obj;
}



inline jule::Str _20da77946_gen_pkg_fns(jule::Ptr<_20cba58cc_Package>& _80421_p) {
	jule::Str _80513_obj = jule::Str();
	{
		auto &expr = (*(_80421_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5309041824:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20da77946_f = *it;
			{
				{
					auto &expr = (*(_20da77946_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5309043664:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Fn> _20da77946_f = *it;
						{
							if ((!(_20a21965d_TEST)) && _20da75aa9_has_directive((*(_20da77946_f))._field_directives,jule::Str("test", 4))) {
								goto _iter_next_5309043664;
							}
							if ((!((*(_20da77946_f))._field_cpp_linked)) && ((*(_20da77946_f))._field_token._field_id != 0LLU)) {
								_80513_obj+=_20da77946_gen_fn(_20da77946_f);
								_80513_obj+=jule::Str("\n\n", 2);
							}
						}
						_iter_next_5309043664:;
						++it;
						goto _iter_begin_5309043664;
					}
					_iter_end_5309043664:;
				}
			}
			_iter_next_5309041824:;
			++it;
			goto _iter_begin_5309041824;
		}
		_iter_end_5309041824:;
	}
	return _80513_obj;
}



inline jule::Str _20da77946_gen_struct_method_defs(jule::Ptr<_20c496047_StructIns>& _82132_s) {
	jule::Str _82213_obj = jule::Str();
	{
		auto &expr = (*(_82132_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_5309042736:;
		if (it != expr.end()) {
			jule::Ptr<_20c819332_Fn> _20da77946_f = *it;
			{
				_82213_obj+=_20da77946_indent();
				_82213_obj+=_20da77946_gen_fn(_20da77946_f);
				_82213_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5309042736:;
			++it;
			goto _iter_begin_5309042736;
		}
		_iter_end_5309042736:;
	}
	return _82213_obj;
}



inline jule::Bool _20da77946_fn_is_to_str(jule::Ptr<_20c819332_Fn>& _83222_f) {
	if (((((((_83222_f == nullptr) || (!((*(_83222_f))._field_public))) || (*(_83222_f))._method_is_void()) || ((*(_83222_f))._field_generics.len() != 0LL)) || ((*(_83222_f))._field_params.len() != 1LL)) || (*((*(_83222_f))._field_params[0LL]))._field_mutable) || (*((*(_83222_f))._field_params[0LL]))._method_is_ref()) {
		return false;
	}
	jule::Ptr<_20c819332_FnIns> _84313_ins = (*(_83222_f))._field_instances[0LL];
	jule::Ptr<_20d4a6c9e_Prim> _8449_prim = (*((*(_84313_ins))._field_result))._method_prim();
	if (_8449_prim == nullptr) {
		return false;
	}
	return (*(_8449_prim))._method_is_str();
}



inline jule::Str _20da77946_gen_struct_ostream(jule::Ptr<_20c496047_StructIns>& _85228_s) {
	jule::Str _85313_obj = jule::Str();
	_85313_obj+=_20da77946_indent();
	_85313_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_85313_obj+=_20da752c3_struct_ins_out_ident(_85228_s);
	_85313_obj+=jule::Str(" &_Src) {\n", 10);
	_20da77946_add_indent();
	_85313_obj+=_20da77946_indent();
	jule::Ptr<_20c819332_Fn> _86113_fts = (*(_85228_s))._method_find_method(jule::Str("to_str", 6),false);
	if (_20da77946_fn_is_to_str(_86113_fts)) {
		_85313_obj+=jule::Str("_Stream << ((", 13);
		_85313_obj+=_20da752c3_struct_ins_out_ident(_85228_s);
		_85313_obj+=jule::Str(")(_Src)).", 9);
		_85313_obj+=_20da752c3_fn_out_ident(_86113_fts);
		_85313_obj+=jule::Str("();\n", 4);
	} else {
		_85313_obj+=jule::Str("_Stream << \"", 12);
		_85313_obj+=(*((*(_85228_s))._field_decl))._field_ident;
		_85313_obj+=jule::Str("{\";\n", 4);
		{
			auto &expr = (*(_85228_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5309073056:;
			if (it != expr.end()) {
				jule::Int _20da77946_i = it - expr.begin();
				jule::Ptr<_20c496047_FieldIns> _20da77946_f = *it;
				{
					_85313_obj+=_20da77946_indent();
					_85313_obj+=jule::Str("_Stream << \"", 12);
					_85313_obj+=(*((*(_20da77946_f))._field_decl))._field_ident;
					_85313_obj+=jule::Str(":", 1);
					jule::Ptr<_20c496047_StructIns> _88017_strct = (*((*(_20da77946_f))._field_kind))._method_strct();
					if (((_88017_strct != nullptr) && ((*(_88017_strct))._field_decl != nullptr)) && (*((*(_88017_strct))._field_decl))._field_cpp_linked) {
						_85313_obj+=jule::Str(" cpp.", 5);
						_85313_obj+=_20da752c3_field_out_ident((*(_20da77946_f))._field_decl);
						_85313_obj+=jule::Str("\"", 1);
					} else {
						_85313_obj+=jule::Str("\" << _Src.", 10);
						_85313_obj+=_20da752c3_field_out_ident((*(_20da77946_f))._field_decl);
					}
					if ((_20da77946_i + 1LL) < (*(_85228_s))._field_fields.len()) {
						_85313_obj+=jule::Str(" << \", \"", 8);
					}
					_85313_obj+=jule::Str(";\n", 2);
				}
				_iter_next_5309073056:;
				++it;
				_20da77946_i++;
				goto _iter_begin_5309073056;
			}
			_iter_end_5309073056:;
		}
		_85313_obj+=_20da77946_indent();
		_85313_obj+=jule::Str("_Stream << \"}\";\n", 16);
	}
	_85313_obj+=_20da77946_indent();
	_85313_obj+=jule::Str("return _Stream;\n", 16);
	_20da77946_done_indent();
	_85313_obj+=_20da77946_indent();
	_85313_obj+=jule::Str("}", 1);
	return _85313_obj;
}



inline jule::Str _20da77946_gen_struct_derive_defs(jule::Ptr<_20c496047_StructIns>& _90832_s) {
	jule::Str _90913_obj = jule::Str();
	if ((*((*(_90832_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_90913_obj+=_20da77946_indent();
		_90913_obj+=_20cac28d7_get_derive_fn_def_clone((*(_90832_s))._field_decl);
		_90913_obj+=jule::Str("{\n", 2);
		_20da77946_add_indent();
		_90913_obj+=_20da77946_indent();
		_90913_obj+=_20da75aa9_gen_struct_kind_ins(_90832_s);
		_90913_obj+=jule::Str(" clone;\n", 8);
		{
			auto &expr = (*(_90832_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5309088208:;
			if (it != expr.end()) {
				jule::Ptr<_20c496047_FieldIns> &_20da77946_f = *it;
				{
					jule::Str _92017_ident = _20da752c3_field_out_ident((*(_20da77946_f))._field_decl);
					_90913_obj+=_20da77946_indent();
					_90913_obj+=jule::Str("clone.", 6);
					_90913_obj+=_92017_ident;
					_90913_obj+=jule::Str(" = jule::clone(this->", 21);
					_90913_obj+=_92017_ident;
					_90913_obj+=jule::Str(");\n", 3);
				}
				_iter_next_5309088208:;
				++it;
				goto _iter_begin_5309088208;
			}
			_iter_end_5309088208:;
		}
		_90913_obj+=_20da77946_indent();
		_90913_obj+=jule::Str("return clone;\n", 14);
		_20da77946_done_indent();
		_90913_obj+=_20da77946_indent();
		_90913_obj+=jule::Str("}", 1);
	}
	return _90913_obj;
}



inline jule::Str _20da77946_gen_struct_ins(jule::Ptr<_20c496047_StructIns>& _94024_s) {
	jule::Str _94113_obj = _20da77946_gen_struct_method_defs(_94024_s);
	_94113_obj+=jule::Str("\n\n", 2);
	_94113_obj+=_20da77946_gen_struct_derive_defs(_94024_s);
	_94113_obj+=jule::Str("\n\n", 2);
	_94113_obj+=_20da77946_gen_struct_ostream(_94024_s);
	return _94113_obj;
}



inline jule::Str _20da77946_gen_struct(jule::Ptr<_20c496047_Struct>& _95020_s) {
	jule::Str _95113_obj = jule::Str();
	{
		auto &expr = (*(_95020_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5309103296:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_StructIns> _20da77946_ins = *it;
			{
				_95113_obj+=_20da77946_gen_struct_ins(_20da77946_ins);
				_95113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5309103296:;
			++it;
			goto _iter_begin_5309103296;
		}
		_iter_end_5309103296:;
	}
	return _95113_obj;
}



inline jule::Str _20da77946_gen_structs(jule::Slice<jule::Ptr<_20c496047_Struct>>& _96021_structs) {
	jule::Str _96113_obj = jule::Str();
	{
		auto &expr = _96021_structs;
		auto it = expr.begin();
		_iter_begin_5309106432:;
		if (it != expr.end()) {
			jule::Ptr<_20c496047_Struct> _20da77946_s = *it;
			{
				if ((!((*(_20da77946_s))._field_cpp_linked)) && ((*(_20da77946_s))._field_token._field_id != 0LLU)) {
					_96113_obj+=_20da77946_gen_struct(_20da77946_s);
					_96113_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_5309106432:;
			++it;
			goto _iter_begin_5309106432;
		}
		_iter_end_5309106432:;
	}
	return _96113_obj;
}



inline jule::Str _20da77946_gen_fns(jule::Ptr<_20b6b28b3_IR>& _97217_ir) {
	jule::Str _97313_obj = jule::Str();
	{
		auto &expr = (*(_97217_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5309111760:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_u = *it;
			{
				if ((!((*(_20da77946_u))._field_cpp_linked))) {
					_97313_obj+=_20da77946_gen_pkg_fns((*(_20da77946_u))._field_package);
				}
			}
			_iter_next_5309111760:;
			++it;
			goto _iter_begin_5309111760;
		}
		_iter_end_5309111760:;
	}
	_97313_obj+=_20da77946_gen_pkg_fns((*(_97217_ir))._field_main);
	return _97313_obj;
}



inline void _20da77946_push_init(jule::Ptr<_20cba58cc_Package>& _98519_pkg,jule::Str& _98539_obj) {
	
	
	jule::Ptr<_20c819332_Fn> _9899_f = (*(_98519_pkg))._method_find_fn(jule::Str("init", 4),false);
	if (_9899_f == nullptr) {
		return;
	}
	_98539_obj+=jule::Str("\n\t", 2);
	_98539_obj+=_20da752c3_fn_out_ident(_9899_f);
	_98539_obj+=jule::Str("();", 3);
}



inline jule::Str _20da77946_gen_init_caller(jule::Ptr<_20b6b28b3_IR>& _100025_ir,jule::Str& _100035_global_initializers) {
	jule::Str _100113_obj = jule::Str("void ", 5);
	_100113_obj+=jule::Str("__jule_call_initializers", 24);
	_100113_obj+=jule::Str("(void) {\n", 9);
	_100113_obj+=_100035_global_initializers;
	{
		auto &expr = (*(_100025_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5309124464:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_u = *it;
			{
				if ((!((*(_20da77946_u))._field_cpp_linked))) {
					_20da77946_push_init((*(_20da77946_u))._field_package,_100113_obj);
				}
			}
			_iter_next_5309124464:;
			++it;
			goto _iter_begin_5309124464;
		}
		_iter_end_5309124464:;
	}
	_20da77946_push_init((*(_100025_ir))._field_main,_100113_obj);
	_100113_obj+=jule::Str("\n}", 2);
	return _100113_obj;
}



inline jule::Ptr<_20cba58cc_ImportInfo> _20da77946_find_testing_package(jule::Ptr<_20b6b28b3_IR>& _101734_ir) {
	{
		auto &expr = (*(_101734_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5309129312:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> _20da77946_imp = *it;
			{
				if ((*(_20da77946_imp))._field_link_path == jule::Str("std::testing", 12)) {
					return _20da77946_imp;
				}
			}
			_iter_next_5309129312:;
			++it;
			goto _iter_begin_5309129312;
		}
		_iter_end_5309129312:;
	}
	return nullptr;
}



inline void _20da77946_append_test(jule::Str& _102625_obj,jule::Ptr<_20c819332_FnIns> _102639_f) {
	_102625_obj+=_20da77946_indent();
	_102625_obj+=jule::Str("_t->_method_reset();\n", 21);
	_102625_obj+=_20da77946_indent();
	_102625_obj+=jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35);
	_102625_obj+=_20da77946_indent();
	_102625_obj+=jule::Str("jule::outln(", 12);
	_102625_obj+=_20c1ee047_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_102639_f))._field_decl))._field_ident));
	_102625_obj+=jule::Str(");\n", 3);
	_102625_obj+=_20da77946_indent();
	_102625_obj+=_20da752c3_fn_ins_out_ident(_102639_f);
	_102625_obj+=jule::Str("(_t);\n", 6);
	_102625_obj+=_20da77946_indent();
	_102625_obj+=jule::Str("post_test();\n", 13);
}



inline void _20da77946_append_package_tests(jule::Str& _104234_obj,jule::Ptr<_20cba58cc_Package>& _104249_p) {
	{
		auto &expr = (*(_104249_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5309139168:;
		if (it != expr.end()) {
			jule::Ptr<_20d0c86e5_SymbolTable> _20da77946_file = *it;
			{
				{
					auto &expr = (*(_20da77946_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5309141040:;
					if (it != expr.end()) {
						jule::Ptr<_20c819332_Fn> _20da77946_f = *it;
						{
							if (_20da75aa9_has_directive((*(_20da77946_f))._field_directives,jule::Str("test", 4))) {
								_20da77946_append_test(_104234_obj,(*(_20da77946_f))._field_instances[0LL]);
							}
						}
						_iter_next_5309141040:;
						++it;
						goto _iter_begin_5309141040;
					}
					_iter_end_5309141040:;
				}
			}
			_iter_next_5309139168:;
			++it;
			goto _iter_begin_5309139168;
		}
		_iter_end_5309139168:;
	}
}



inline void _20da77946_append_test_point(jule::Str& _105231_obj,jule::Ptr<_20b6b28b3_IR>& _105246_ir) {
	_105231_obj+=jule::Str("\nvoid test_point(void) {\n", 25);
	_20da77946_add_indent();
	_105231_obj+=_20da77946_indent();
	jule::Ptr<_20cba58cc_ImportInfo> _105713_p = _20da77946_find_testing_package(_105246_ir);
	if (_105713_p == nullptr) {
		_105231_obj+=jule::Str("}", 1);
		_20da77946_done_indent();
		return;
	}
	jule::Ptr<_20c496047_StructIns> _106713_t = (*((*(_105713_p))._method_find_struct(jule::Str("T", 1),false)))._field_instances[0LL];
	_105231_obj+=_20da75aa9_as_sptr_kind(_20da75aa9_gen_struct_kind_ins(_106713_t));
	_105231_obj+=jule::Str(" _t = jule::new_struct<", 23);
	_105231_obj+=_20da75aa9_gen_struct_kind_ins(_106713_t);
	_105231_obj+=jule::Str(">(", 2);
	if ((!(_20a20bc9e_PRODUCTION))) {
		_105231_obj+=jule::Str("\"/jule/init\", ", 14);
	}
	_105231_obj+=jule::Str("new(std::nothrow) ", 18);
	_105231_obj+=_20da75aa9_gen_struct_kind_ins(_106713_t);
	_105231_obj+=jule::Str(");\n", 3);
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47);
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("auto post_test = [&](void) {\n", 29);
	_20da77946_add_indent();
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("++total;\n", 9);
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("if (_t->_method_failed()) { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 84);
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("else if (_t->_method_skipped()) { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 92);
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53);
	_20da77946_done_indent();
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("};\n", 3);
	_20da77946_append_package_tests(_105231_obj,(*(_105246_ir))._field_main);
	_105231_obj+=jule::Str("\n\n", 2);
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("std::cout << std::endl << std::endl << \"total tests: \" << total << \" skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 167);
	_20da77946_done_indent();
	_105231_obj+=_20da77946_indent();
	_105231_obj+=jule::Str("}\n", 2);
}



inline void _20da77946_append_standard(jule::Str& _110929_obj_code,jule::Str _110944_compiler,jule::Str _110959_compiler_cmd) {
	_20dc14918_AbsTime _11109_time = _20dc14918_Time::_static_method_now()._method_abs();
	jule::Str _111213_time_str = jule::Str();
	_111213_time_str+=_20bcb4a20_fmt_uint(_11109_time._field_day,10LL);
	_111213_time_str+=jule::Str("/", 1);
	_111213_time_str+=_20bcb4a20_fmt_uint(_11109_time._field_month,10LL);
	_111213_time_str+=jule::Str("/", 1);
	_111213_time_str+=_20bcb4a20_fmt_uint(_11109_time._field_year,10LL);
	_111213_time_str+=jule::Str(" ", 1);
	_111213_time_str+=_20bcb4a20_fmt_uint(_11109_time._field_hour,10LL);
	_111213_time_str+=jule::Str(".", 1);
	_111213_time_str+=_20bcb4a20_fmt_uint(_11109_time._field_minute,10LL);
	_111213_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM) UTC", 25);
	jule::Str _112413_s = jule::Str();
	_112413_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_112413_s+=jule::Str("// JuleC version: ", 18);
	_112413_s+=jule::Str("beta 0.0.7 @master", 18);
	_112413_s+=jule::Str("\n", 1);
	_112413_s+=jule::Str("// Date: ", 9);
	_112413_s+=_111213_time_str;
	_112413_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_112413_s+=_110944_compiler;
	_112413_s+=jule::Str(" ", 1);
	_112413_s+=_110959_compiler_cmd;
	_112413_s+=jule::Str("\n\n", 2);
	if (_20a20bc9e_PRODUCTION) {
		_112413_s+=jule::Str("#define __JULE_ENABLE__PRODUCTION\n", 34);
	}
	if ((!(_20a21965d_RC))) {
		_112413_s+=jule::Str("#define __JULE_DISABLE__REFERENCE_COUNTING\n", 43);
	}
	_112413_s+=jule::Str("\n\n#include \"", 12);
	_112413_s+=_20ba03198_PATH_API;
	_112413_s+=jule::Str("\"\n\n", 3);
	_112413_s+=_110929_obj_code;
	_112413_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 149);
	if (_20a21965d_TEST) {
		_112413_s+=jule::Str("test_point();", 13);
	} else {
		_112413_s+=jule::Str("entry_point();", 14);
	}
	_112413_s+=jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28);
	_110929_obj_code=_112413_s;
}



inline jule::Str _20da77946_gen(jule::Ptr<_20b6b28b3_IR>& _117217_ir) {
	jule::Str _117313_global_initializers = jule::Str();
	jule::Str _117413_obj = jule::Str();
	_117413_obj+=_20da77946_gen_links(_117217_ir);
	_117413_obj+=jule::Str("\n", 1);
	_117413_obj+=_20da77946_gen_prototypes(_117217_ir);
	_117413_obj+=jule::Str("\n\n", 2);
	_117413_obj+=_20da77946_gen_globals(_117217_ir,_117313_global_initializers);
	_117413_obj+=jule::Str("\n", 1);
	_117413_obj+=_20da77946_gen_structs((*(_117217_ir))._field_ordered._field_structs);
	_117413_obj+=_20da77946_gen_fns(_117217_ir);
	_117413_obj+=jule::Str("\n", 1);
	_117413_obj+=_20da77946_gen_init_caller(_117217_ir,_117313_global_initializers);
	_117413_obj+=jule::Str("\n", 1);
	return _117413_obj;
}



inline jule::Bool _20baa12ac_is_std_package(jule::Str _19519_f,jule::Str _19527_p) {
	return _20a405ddd_has_prefix(_19519_f,_20a3911b9_join(jule::Slice<jule::Str>({_20ba03198_PATH_STDLIB,_19527_p})));
}



inline jule::Bool _20baa12ac_is_constant_valid_conditional_case(jule::Ptr<_20cb4d853_If>& _19940_i) {
	{
		auto &_match_expr{ (*(_19940_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_20d78b3e6_Const>>()) {
			_case_begin_5309210304:;
			{
				jule::Ptr<_20d78b3e6_Const> _20213_c = (*(_19940_i))._field_expr.operator jule::Ptr<_20d78b3e6_Const>();
				return (*(_20213_c))._method_is_bool() && (*(_20213_c))._method_read_bool();
			}
		}
		_match_end_5309210224:;
	}
	return false;
}



inline jule::Bool _20baa12ac_is_constant_valid_match_case(jule::Ptr<_20cb4d853_Case>& _20934_case) {
	{
		auto &expr = (*(_20934_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5309212896:;
		if (it != expr.end()) {
			jule::Ptr<_20d162d45_Data> &_20baa12ac_expr = *it;
			{
				if (((*(_20baa12ac_expr))._method_is_const() && (*((*(_20baa12ac_expr))._field_constant))._method_is_bool()) && (*((*(_20baa12ac_expr))._field_constant))._method_read_bool()) {
					return true;
				}
			}
			_iter_next_5309212896:;
			++it;
			goto _iter_begin_5309212896;
		}
		_iter_end_5309212896:;
	}
	return false;
}



inline jule::Bool _20baa12ac_is_unreachable_conditional_case(jule::Ptr<_20cb4d853_If>& _21937_i) {
	{
		auto &_match_expr{ (*(_21937_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_20d78b3e6_Const>>()) {
			_case_begin_5309221536:;
			{
				jule::Ptr<_20d78b3e6_Const> _22213_c = (*(_21937_i))._field_expr.operator jule::Ptr<_20d78b3e6_Const>();
				return (*(_22213_c))._method_is_bool() && (!((*(_22213_c))._method_read_bool()));
			}
		}
		_match_end_5309221440:;
	}
	return false;
}



inline jule::Bool _20baa12ac_is_unreachable_match_case(jule::Ptr<_20cb4d853_Case>& _22931_case) {
	{
		auto &expr = (*(_22931_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5309222560:;
		if (it != expr.end()) {
			jule::Ptr<_20d162d45_Data> &_20baa12ac_expr = *it;
			{
				if (((*(_20baa12ac_expr))._method_is_const() && (*((*(_20baa12ac_expr))._field_constant))._method_is_bool()) && (!((*((*(_20baa12ac_expr))._field_constant))._method_read_bool()))) {
					return true;
				}
			}
			_iter_next_5309222560:;
			++it;
			goto _iter_begin_5309222560;
		}
		_iter_end_5309222560:;
	}
	return false;
}



inline void _20a1742ee_print_error_message(jule::Str _3424_msg) {
	jule::outln(_3424_msg);
}



inline void _20a1742ee_help(jule::Slice<jule::Str>& _3710_args) {
	if (_3710_args.len() > 2LL) {
		_20a1742ee_print_error_message(jule::Str("invalid command: ", 17) + _3710_args[2LL]);
		return;
	}
	jule::I64 _4313_max = _20a1742ee_HELP_MAP.__at(0LL).__at(0LL).len();
	{
		auto &expr = _20a1742ee_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_5309592144:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_20a1742ee_k = *it;
			{
				jule::I64 _4513_n = _20a1742ee_k.__at(0LL).len();
				if (_4513_n > _4313_max) {
					_4313_max=_4513_n;
				}
			}
			_iter_next_5309592144:;
			++it;
			goto _iter_begin_5309592144;
		}
		_iter_end_5309592144:;
	}
	jule::Str _5113_s = jule::Str();
	
	{
		auto &expr = _20a1742ee_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_5309593520:;
		if (it != expr.end()) {
			jule::Int _20a1742ee_i = it - expr.begin();
			jule::Array<jule::Str,2> &_20a1742ee_part = *it;
			{
				_5113_s+=_20a1742ee_part.__at(0LL);
				_5113_s+=_20a405ddd_repeat(jule::Str(" ", 1),static_cast<jule::I64>((_4313_max - _20a1742ee_part.__at(0LL).len()) + 5LL));
				_5113_s+=_20a1742ee_part.__at(1LL);
				if ((_20a1742ee_i + 1LL) < 5LL) {
					_5113_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_5309593520:;
			++it;
			_20a1742ee_i++;
			goto _iter_begin_5309593520;
		}
		_iter_end_5309593520:;
	}
	jule::outln(_5113_s);
}



inline void _20a1742ee_version(jule::Slice<jule::Str>& _6513_args) {
	if (_6513_args.len() > 2LL) {
		_20a1742ee_print_error_message(jule::Str("invalid command: ", 17) + _6513_args[2LL]);
		return;
	}
	jule::out(jule::Str("julec version ", 14));
	jule::outln(jule::Str("beta 0.0.7 @master", 18));
}



inline void _20a1742ee_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _20a314307_DISTOS;
		auto it = expr.begin();
		_iter_begin_5309607520:;
		if (it != expr.end()) {
			jule::Str &_20a1742ee_os = *it;
			{
				jule::out(_20a1742ee_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_5309607520:;
			++it;
			goto _iter_begin_5309607520;
		}
		_iter_end_5309607520:;
	}
	jule::outln(jule::Str());
}



inline void _20a1742ee_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _20a314307_DISTARCH;
		auto it = expr.begin();
		_iter_begin_5309609392:;
		if (it != expr.end()) {
			jule::Str &_20a1742ee_arch = *it;
			{
				jule::out(_20a1742ee_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_5309609392:;
			++it;
			goto _iter_begin_5309609392;
		}
		_iter_end_5309609392:;
	}
	jule::outln(jule::Str());
}



inline void _20a1742ee_tool(jule::Slice<jule::Str>& _9510_args) {
	if (_9510_args.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_9510_args.len() > 3LL) {
		_20a1742ee_print_error_message(jule::Str("invalid command: ", 17) + _9510_args[3LL]);
		return;
	}
	jule::Str _1069_cmd = _9510_args[2LL];
	{
		auto &_match_expr{ _1069_cmd };
		
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_5309618992:;
			{
				_20a1742ee_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_5309618080:;
			{
				_20a1742ee_tool_distarch();
			}
		}
		else {
			_case_begin_5309617600:;
			{
				_20a1742ee_print_error_message(jule::Str("undefined command: ", 19) + _1069_cmd);
			}
		}
		_match_end_5309617520:;
	}
}



inline void _20a1742ee_julenv(jule::Slice<jule::Str>& _11512_args) {
	if (_11512_args.len() > 2LL) {
		_20a1742ee_print_error_message(jule::Str("invalid command: ", 17) + _11512_args[2LL]);
		return;
	}
	jule::outln(jule::Str("julec version: beta 0.0.7 @master", 33));
	jule::outln(jule::Str("architecture: i386", 18));
	jule::outln(jule::Str("operating system: windows", 25));
	jule::outln(jule::Str("default compiler: ", 18) + _20a21965d_COMPILER);
	jule::outln(jule::Str("default C++ standard: ", 22) + _20a21965d_CPP_STD);
}



inline void _20a1742ee_mod(jule::Slice<jule::Str>& _1289_args) {
	if (_1289_args.len() == 2LL) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;
	}
	if (_1289_args.len() > 3LL) {
		_20a1742ee_print_error_message(jule::Str("invalid command: ", 17) + _1289_args[3LL]);
		return;
	}
	{
		auto &_match_expr{ _1289_args[2LL] };
		
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_5309632144:;
			{
				({
					auto except = _20a284e6a_File::_static_method_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_20a1742ee_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_5309631440:;
			{
				_20a1742ee_print_error_message(jule::Str("invalid command: ", 17) + _1289_args[2LL]);
			}
		}
		_match_end_5309629648:;
	}
}



inline jule::Bool _20a1742ee_process_command(jule::Slice<jule::Str>& _15221_args) {
	{
		auto &_match_expr{ _15221_args[1LL] };
		
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_5309638544:;
			{
				_20a1742ee_help(_15221_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_5309638640:;
			{
				_20a1742ee_version(_15221_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_5309636224:;
			{
				_20a1742ee_tool(_15221_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_5309636320:;
			{
				_20a1742ee_julenv(_15221_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_5309636416:;
			{
				_20a1742ee_mod(_15221_args);
			}
		}
		else {
			_case_begin_5309634800:;
			{
				return false;
			}
		}
		_match_end_5309635872:;
	}
	return true;
}



inline void _20a1742ee_exit_err(jule::Str _16513_msg) {
	jule::outln(_16513_msg);
	_20ba48320_exit(1LL);
}



inline void _20a1742ee_show_info(void) {
	jule::outln(jule::Str("JuleC is a tool for Jule source code and developers.\n\nCommands:\n    help          Show help,\n    version       Show version,\n    tool          Tools for effective Jule,\n    julenv        Show information about native jule environment\n    mod           Module management\n\nCompilation:\n    julec [OPTIONS] INPUT\n", 310));
}



void entry_point(void) {
	jule::Slice<jule::Str> _18713_args = _20a225bec_args();
	if (_18713_args.len() < 2LL) {
		_20a1742ee_show_info();
		return;
	}
	if (_20a1742ee_process_command(_18713_args)) {
		return;
	}
	_20a1b0cdb_compile_command(_18713_args);
}



inline void _20a1943c9___init_common(void) {
	_20a21965d_COMPILER=jule::Str("clang", 5);
	_20a21965d_COMPILER_PATH=jule::Str("clang++", 7);
}



inline void _20a1a970d___enable_vtp(void) {
	jule::Uintptr _199_h_out = _20a23834c_get_std_handle(static_cast<jule::Uintptr>(18446744073709551605LLU));
	if (_199_h_out == jule::MAX_U64) {
		return;
	}
	jule::Int _2413_dw_mode = 0LL;
	if ((!(_20a23834c_get_console_mode(_199_h_out,_2413_dw_mode)))) {
		return;
	}
	_2413_dw_mode|=4LL;
	_20a23834c_set_console_mode(_199_h_out,_2413_dw_mode);
}



inline void _20a1a970d_init(void) {
	_20a1a970d___enable_vtp();
	_20a1943c9___init_common();
}



inline void _20a1b0cdb_write_output(jule::Str _4317_path,jule::Str _4328_content) {
	jule::Str _449_dir = _20a3911b9_dir(_4317_path);
	({
		auto except = _20a252e5a_Status::_static_method_of(_449_dir);
		if (!except.ok()) {
			({
				auto except = _20a23944c_Directory::_static_method_create(_449_dir);
				if (!except.ok()) {
					_20a1742ee_exit_err(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	({
		auto except = _20a284e6a_File::_static_method_write(_4317_path,static_cast<jule::Slice<jule::U8>>(_4328_content),432LL);
		if (!except.ok()) {
			_20a1742ee_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	});
}



inline void _20a1b0cdb_clear_objects(void) {
	({
		auto except = _20a284e6a_File::_static_method_remove(_20a1b0cdb_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;
		}
	});
	_20a23944c_Directory::_static_method_remove(_20a1b0cdb_OUT_DIR);
}



inline void _20a1b0cdb_compile_ir(jule::Str _7115_compiler,jule::Str _7130_compiler_cmd) {
	jule::Ptr<_20ba2c513_Cmd> _7213_cmd = _20ba2c513_Cmd::_static_method_new(_7115_compiler);
	(*(_7213_cmd))._field_args=jule::Slice<jule::Str>({_7115_compiler});
	(*(_7213_cmd))._field_args=jule::append((*(_7213_cmd))._field_args,_20a405ddd_split(_7130_compiler_cmd,jule::Str(" ", 1),-1LL));
	({
		auto except = (*(_7213_cmd))._method_spawn();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/src/julec/compile.jule:75:5"));
	});
	jule::Int _769_status = ({
		auto except = (*(_7213_cmd))._method_wait();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/src/julec/compile.jule:76:18"));
		(except.result);
	});
	if (_769_status != 0LL) {
		jule::Str _7813_error_message = (jule::Str("\n>>> your backend compiler (", 28) + _20a21965d_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149);
		_20a19495c_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),_7813_error_message);
		_20a1742ee_exit_err(jule::Str());
	}
	_20a1b0cdb_clear_objects();
}



inline void _20a1b0cdb_do_spell(jule::Str _8913_obj,jule::Str _8923_compiler,jule::Str _8938_compiler_cmd) {
	jule::Str _909_path = _20a1b0cdb_get_compile_path();
	_20a1b0cdb_write_output(_909_path,_8913_obj);
	if ((!(_20a21965d_TRANSPILATION))) {
		_20a1b0cdb_compile_ir(_8923_compiler,_8938_compiler_cmd);
	}
}



inline jule::Bool _20a1b0cdb_is_cpp_source_file(jule::Str _9723_path) {
	jule::Int _989_offset = _20a405ddd_find_last_byte(_9723_path,'.');
	if (_989_offset == -1LL) {
		return false;
	}
	return _20a25878a_is_valid_cpp_ext(_9723_path.slice(_989_offset));
}



inline void _20a1b0cdb_push_comp_cmd_clang(jule::Str& _10529_cmd) {
	_10529_cmd+=jule::Str("-Wno-everything ", 16);
	_10529_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _20a21965d_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_5309688752:;
			{
				_10529_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_5309688848:;
			{
				_10529_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5309688976:;
			{
				_10529_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_5309687936:;
	}
	_10529_cmd+=jule::Str(" ", 1);
	if (_20a20bc9e_PRODUCTION) {
		_10529_cmd+=jule::Str("-O3 ", 4);
		_10529_cmd+=jule::Str("-flto ", 6);
		_10529_cmd+=jule::Str("-DNDEBUG ", 9);
		_10529_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_10529_cmd+=jule::Str("-O0 ", 4);
	}
}



inline void _20a1b0cdb_push_comp_cmd_gcc(jule::Str& _12827_cmd) {
	_12827_cmd+=jule::Str("-w ", 3);
	_12827_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _20a21965d_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_5309694608:;
			{
				_12827_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_5309694704:;
			{
				_12827_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5309694800:;
			{
				_12827_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_5309689072:;
	}
	_12827_cmd+=jule::Str(" ", 1);
	if (_20a20bc9e_PRODUCTION) {
		_12827_cmd+=jule::Str("-O3 ", 4);
		_12827_cmd+=jule::Str("-DNDEBUG ", 9);
		_12827_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_12827_cmd+=jule::Str("-O0 ", 4);
	}
}



inline std::tuple<jule::Str,jule::Str> _20a1b0cdb_gen_compile_cmd(jule::Str _15120_source_path,jule::Ptr<_20b6b28b3_IR>& _15139_ir) {
	jule::Str &_15210_compiler = _20a21965d_COMPILER_PATH;
	jule::Str _15413_cmd = jule::Str();
	{
		auto &_match_expr{ _20a21965d_COMPILER };
		
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_5309701776:;
			{
				_20a1b0cdb_push_comp_cmd_gcc(_15413_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_5309701872:;
			{
				_20a1b0cdb_push_comp_cmd_clang(_15413_cmd);
			}
		}
		_match_end_5309701696:;
	}
	{
		auto &expr = (*(_15139_ir))._field_passes;
		auto it = expr.begin();
		_iter_begin_5309704240:;
		if (it != expr.end()) {
			jule::Str &_20a1b0cdb_pass = *it;
			{
				_15413_cmd+=_20a1b0cdb_pass;
				_15413_cmd+=jule::Str(" ", 1);
			}
			_iter_next_5309704240:;
			++it;
			goto _iter_begin_5309704240;
		}
		_iter_end_5309704240:;
	}
	{
		auto &expr = (*(_15139_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5309707264:;
		if (it != expr.end()) {
			jule::Ptr<_20cba58cc_ImportInfo> &_20a1b0cdb_u = *it;
			{
				if ((*(_20a1b0cdb_u))._field_cpp_linked && _20a1b0cdb_is_cpp_source_file((*(_20a1b0cdb_u))._field_path)) {
					_15413_cmd+=(*(_20a1b0cdb_u))._field_path;
					_15413_cmd+=jule::Str(" ", 1);
				}
			}
			_iter_next_5309707264:;
			++it;
			goto _iter_begin_5309707264;
		}
		_iter_end_5309707264:;
	}
	if (_20a1b0cdb_OUT != jule::Str()) {
		_15413_cmd+=jule::Str("-o ", 3);
		_15413_cmd+=_20a1b0cdb_OUT;
		_15413_cmd+=jule::Str(" ", 1);
	}
	_15413_cmd+=_15120_source_path;
	return std::make_tuple(_15210_compiler,_15413_cmd);
}



inline jule::Str _20a1b0cdb_get_compile_path(void) {
	return _20a3911b9_join(jule::Slice<jule::Str>({_20a1b0cdb_OUT_DIR,_20a1b0cdb_OUT_NAME}));
}



inline void _20a1b0cdb_apply_target_independent_optimizations(jule::Ptr<_20b6b28b3_IR>& _19548_ir) {
	if (_20a20bc9e_OPT_DEADCODE) {
		_20b6d50ab_eliminate_defines(_19548_ir);
	}
	jule::Ptr<_20d5c851e_Optimizer> _20213_opt = _20d5c851e_Optimizer::_static_method_new(_19548_ir);
	(*(_20213_opt))._method_optimize();
	if (_20a20bc9e_OPT_DEADCODE) {
		_20b661752_eliminate_scopes(_19548_ir);
	}
}



inline void _20a1b0cdb_check_compiler_flag(void) {
	{
		auto &_match_expr{ _20a21965d_COMPILER };
		
		if (_match_expr == jule::Str()) {
			_case_begin_5309718448:;
			{
				_20a1742ee_exit_err(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_5309717952:;
			{
				_20a21965d_COMPILER_PATH=jule::Str("clang++", 7);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_5309718048:;
			{
				_20a21965d_COMPILER_PATH=jule::Str("g++", 3);
			}
		}
		else {
			_case_begin_5309717552:;
			{
				_20a1742ee_exit_err(jule::Str("invalid option value for --compiler: ", 37) + _20a21965d_COMPILER);
			}
		}
		_match_end_5309716400:;
	}
}



inline void _20a1b0cdb_check_target_arch(jule::Str _22722_arch) {
	{
		auto &expr = _20a314307_DISTARCH;
		auto it = expr.begin();
		_iter_begin_5309721104:;
		if (it != expr.end()) {
			jule::Str &_20a1b0cdb_distarch = *it;
			{
				if (_22722_arch == _20a1b0cdb_distarch) {
					return;
				}
			}
			_iter_next_5309721104:;
			++it;
			goto _iter_begin_5309721104;
		}
		_iter_end_5309721104:;
	}
	_20a1742ee_exit_err(jule::Str("--target: unsupported/undefined architecture: ", 46) + _22722_arch);
}



inline void _20a1b0cdb_check_target_os(jule::Str _23720_os) {
	{
		auto &expr = _20a314307_DISTOS;
		auto it = expr.begin();
		_iter_begin_5309725424:;
		if (it != expr.end()) {
			jule::Str &_20a1b0cdb_distos = *it;
			{
				if (_23720_os == _20a1b0cdb_distos) {
					return;
				}
			}
			_iter_next_5309725424:;
			++it;
			goto _iter_begin_5309725424;
		}
		_iter_end_5309725424:;
	}
	_20a1742ee_exit_err(jule::Str("--target: unsupported/undefined operating system: ", 50) + _23720_os);
}



inline void _20a1b0cdb_check_target_flag(jule::Str& _24723_target) {
	if (_24723_target == jule::Str()) {
		_20a1742ee_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _2529_parts = _20a405ddd_split(_24723_target,jule::Str("-", 1),-1LL);
	if (_2529_parts.len() != 2LL) {
		_20a1742ee_exit_err(jule::Str("--target: undefined platform target format: ", 44) + _24723_target);
	}
	jule::Str _25710_os = _2529_parts[0LL];
	jule::Str _25714_arch = _2529_parts[1LL];
	std::tie(_25710_os,_25714_arch) = std::make_tuple(_2529_parts[0LL],_2529_parts[1LL]);
	if (_25710_os != jule::Str("native", 6)) {
		_20a1b0cdb_check_target_os(_25710_os);
		_20a1b0aee_OS=_25710_os;
	}
	if (_25714_arch != jule::Str("native", 6)) {
		_20a1b0cdb_check_target_arch(_25714_arch);
		_20a1b0aee_ARCH=_25714_arch;
	}
}



inline void _20a1b0cdb_check_opt_flag(jule::Str& _27020_opt) {
	if (_27020_opt == jule::Str()) {
		_20a1742ee_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto &_match_expr{ _27020_opt };
		
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_5309741136:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_5309735312:;
			{
				_20a20bc9e_push_opt_level(1LLU);
			}
		}
		else {
			_case_begin_5309738368:;
			{
				_20a1742ee_exit_err(jule::Str("--opt: invalid optimization level: ", 35) + _27020_opt);
			}
		}
		_match_end_5309740128:;
	}
}



inline void _20a1b0cdb_check_cpp_std_flag(void) {
	{
		auto &_match_expr{ _20a21965d_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5) || _match_expr == jule::Str("cpp17", 5) || _match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5309742672:;
		}
		else {
			_case_begin_5309740384:;
			{
				_20a1742ee_exit_err(jule::Str("--cppstd: invalid optimization level: ", 38) + _20a21965d_CPP_STD);
			}
		}
		_match_end_5309743008:;
	}
}



inline jule::Slice<jule::Str> _20a1b0cdb_check_flags(jule::Slice<jule::Str>& _29417_args) {
	jule::Str _29513_opt = jule::Str("L0", 2);
	jule::Str _29613_target = jule::Str("native-native", 13);
	jule::Ptr<_20baa6c1e_FlagSet> _29813_fs = _20baa6c1e_FlagSet::_static_method_new();
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_29513_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_29613_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_20a1b0cdb_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a21965d_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Allow shadowing", 15));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a21965d_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_20a21965d_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a21965d_RC)))),jule::Str("disable-rc", 10),0LL,jule::Str("Disable reference counting", 26));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_20a21965d_CPP_STD)))),jule::Str("cppstd", 6),0LL,jule::Str("C++ standard", 12));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_20a20bc9e_OPT_COND)))),jule::Str("opt-cond", 8),0LL,jule::Str("Conditional optimizations", 25));
	jule::Slice<jule::Str> _31813_content = ({
		auto except = (*(_29813_fs))._method_parse(_29417_args);
		(except.ok()) ? (except.result) : ({
			_20a1742ee_exit_err(except.error.operator jule::Str());
			nullptr;
		});
	});
	_20a1b0cdb_check_compiler_flag();
	_20a1b0cdb_check_cpp_std_flag();
	_20a1b0cdb_check_target_flag(_29613_target);
	_20a1b0cdb_check_opt_flag(_29513_opt);
	return _31813_content;
}



inline void _20a1b0cdb_setup_sema_flags(jule::Int& _33126_flags) {
	if (_20a21965d_SHADOWING) {
		_33126_flags|=1LL;
	}
}



inline jule::Ptr<_20b6b28b3_IR> _20a1b0cdb_build_ir(jule::Slice<jule::Str>& _33714_args) {
	jule::Slice<jule::Str> _3389_content = _20a1b0cdb_check_flags(_33714_args);
	jule::Int _34013_sema_flags = 0LL;
	_20a1b0cdb_setup_sema_flags(_34013_sema_flags);
	if (_3389_content.len() == 0LL) {
		_20a1742ee_exit_err(_20a25b99c_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if (_3389_content.len() > 1LL) {
		_20a1742ee_exit_err(jule::Str("undefined content: ", 19) + _3389_content[1LL]);
	}
	jule::Str _34814_path;
	jule::Bool _34820_ok;
	std::tie(_34814_path,_34820_ok) = _20a3911b9_abs(_3389_content[0LL]);
	if ((!(_34820_ok))) {
		_20a1742ee_exit_err(jule::Str("compile path could not processed because of a problem", 53));
	}
	jule::Ptr<_20a252e5a_Status> _3549_inf = ({
		auto except = _20a252e5a_Status::_static_method_of(_20ba03198_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_20a1742ee_exit_err(_20a25b99c_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
			return nullptr;
		} jule::Ptr<_20a252e5a_Status>();});
	});
	if ((!((*(_3549_inf))._method_is_dir()))) {
		_20a1742ee_exit_err(_20a25b99c_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	}
	_20c414339_init_vars();
	jule::Ptr<_20b6b28b3_IR> _36514_ir;
	jule::Slice<_20a25b99c_Log> _36518_logs;
	std::tie(_36514_ir,_36518_logs) = _20b6b28b3_IR::_static_method_build(_34814_path,_34013_sema_flags);
	if ((_36514_ir == nullptr) && (_36518_logs == nullptr)) {
		_20a1742ee_exit_err(_20a25b99c_logf(jule::Str("there is no Jule source code in this package: @", 47),jule::Slice<jule::Any>({jule::Any(_34814_path)})));
	}
	if (_36518_logs != nullptr) {
		_20a19495c_Logger::_static_method_print_logs(_36518_logs);
		_20a1742ee_exit_err(jule::Str());
	}
	return _36514_ir;
}



inline void _20a1b0cdb_compile_command(jule::Slice<jule::Str>& _38025_args) {
	_38025_args=_38025_args.slice(1LL);
	if (_38025_args[0LL] == jule::Str("test", 4)) {
		_20a21965d_TEST=true;
		_38025_args=_38025_args.slice(1LL);
	}
	jule::Ptr<_20b6b28b3_IR> _38613_ir = _20a1b0cdb_build_ir(_38025_args);
	
	if ((!(_20a21965d_TEST))) {
		jule::Ptr<_20c819332_Fn> _39117_f = (*((*(_38613_ir))._field_main))._method_find_fn(jule::Str("main", 4),false);
		if (_39117_f == nullptr) {
			_20a1742ee_exit_err(_20a25b99c_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		}
		(*(_39117_f))._field_statically=true;
	}
	jule::Ptr<_20c819332_Fn> _39713_f = (*((*(_38613_ir))._field_main))._method_find_fn(jule::Str("init", 4),false);
	if (_39713_f != nullptr) {
		(*(_39713_f))._field_statically=true;
	}
	_20a1b0cdb_apply_target_independent_optimizations(_38613_ir);
	(*(_38613_ir))._method_order();
	jule::Str _40710_compiler;
	jule::Str _40720_compiler_cmd;
	std::tie(_40710_compiler,_40720_compiler_cmd) = _20a1b0cdb_gen_compile_cmd(_20a1b0cdb_get_compile_path(),_38613_ir);
	jule::Str _40913_obj = _20da77946_gen(_38613_ir);
	if (_20a21965d_TEST) {
		_20da77946_append_test_point(_40913_obj,_38613_ir);
	}
	_20da77946_append_standard(_40913_obj,_40710_compiler,_40720_compiler_cmd);
	_20a1b0cdb_do_spell(_40913_obj,_40710_compiler,_40720_compiler_cmd);
}




void __jule_call_initializers(void) {
	_20a23834c_STDIN = _20a23834c_get_std_handle(static_cast<jule::Uintptr>(18446744073709551606LLU));
	_20a23834c_STDOUT = _20a23834c_get_std_handle(static_cast<jule::Uintptr>(18446744073709551605LLU));
	_20a23834c_STDERR = _20a23834c_get_std_handle(static_cast<jule::Uintptr>(18446744073709551604LLU));
	_20a1b0aee_OS = jule::Str("windows", 7);
	_20a1b0aee_ARCH = jule::Str("i386", 4);
	_20a20bc9e_PRODUCTION = false;
	_20a20bc9e_OPT_COPY = false;
	_20a20bc9e_OPT_DEADCODE = false;
	_20a20bc9e_OPT_APPEND = false;
	_20a20bc9e_OPT_MATH = false;
	_20a20bc9e_OPT_ACCESS = false;
	_20a20bc9e_OPT_INLINE = false;
	_20a20bc9e_OPT_PTR = false;
	_20a20bc9e_OPT_COND = false;
	_20a21965d_COMPILER = jule::Str();
	_20a21965d_COMPILER_PATH = jule::Str();
	_20a21965d_CPP_STD = jule::Str("cpp17", 5);
	_20a21965d_SHADOWING = false;
	_20a21965d_TRANSPILATION = false;
	_20a21965d_TEST = false;
	_20a21965d_RC = true;
	_20a3472e6_FIRST = jule::Array<jule::U8,256>({});
	_20a3472e6_ACCEPT_RANGES = jule::Array<_20a3472e6_accept_range,16>({_20a3472e6_accept_range(128LLU,191LLU),_20a3472e6_accept_range(160LLU,191LLU),_20a3472e6_accept_range(128LLU,159LLU),_20a3472e6_accept_range(144LLU,191LLU),_20a3472e6_accept_range(128LLU,143LLU)});
	_20b09c05b__L = jule::new_struct<_20b0b06ce_RangeTable>(new( std::nothrow ) _20b0b06ce_RangeTable(jule::Slice<_20b0b06ce_Range16>({_20b0b06ce_Range16(65LLU,90LLU,1LLU),_20b0b06ce_Range16(97LLU,122LLU,1LLU),_20b0b06ce_Range16(170LLU,181LLU,11LLU),_20b0b06ce_Range16(186LLU,192LLU,6LLU),_20b0b06ce_Range16(193LLU,214LLU,1LLU),_20b0b06ce_Range16(216LLU,246LLU,1LLU),_20b0b06ce_Range16(248LLU,705LLU,1LLU),_20b0b06ce_Range16(710LLU,721LLU,1LLU),_20b0b06ce_Range16(736LLU,740LLU,1LLU),_20b0b06ce_Range16(748LLU,750LLU,2LLU),_20b0b06ce_Range16(880LLU,884LLU,1LLU),_20b0b06ce_Range16(886LLU,887LLU,1LLU),_20b0b06ce_Range16(890LLU,893LLU,1LLU),_20b0b06ce_Range16(895LLU,902LLU,7LLU),_20b0b06ce_Range16(904LLU,906LLU,1LLU),_20b0b06ce_Range16(908LLU,910LLU,2LLU),_20b0b06ce_Range16(911LLU,929LLU,1LLU),_20b0b06ce_Range16(931LLU,1013LLU,1LLU),_20b0b06ce_Range16(1015LLU,1153LLU,1LLU),_20b0b06ce_Range16(1162LLU,1327LLU,1LLU),_20b0b06ce_Range16(1329LLU,1366LLU,1LLU),_20b0b06ce_Range16(1369LLU,1376LLU,7LLU),_20b0b06ce_Range16(1377LLU,1416LLU,1LLU),_20b0b06ce_Range16(1488LLU,1514LLU,1LLU),_20b0b06ce_Range16(1519LLU,1522LLU,1LLU),_20b0b06ce_Range16(1568LLU,1610LLU,1LLU),_20b0b06ce_Range16(1646LLU,1647LLU,1LLU),_20b0b06ce_Range16(1649LLU,1747LLU,1LLU),_20b0b06ce_Range16(1749LLU,1765LLU,16LLU),_20b0b06ce_Range16(1766LLU,1774LLU,8LLU),_20b0b06ce_Range16(1775LLU,1786LLU,11LLU),_20b0b06ce_Range16(1787LLU,1788LLU,1LLU),_20b0b06ce_Range16(1791LLU,1808LLU,17LLU),_20b0b06ce_Range16(1810LLU,1839LLU,1LLU),_20b0b06ce_Range16(1869LLU,1957LLU,1LLU),_20b0b06ce_Range16(1969LLU,1994LLU,25LLU),_20b0b06ce_Range16(1995LLU,2026LLU,1LLU),_20b0b06ce_Range16(2036LLU,2037LLU,1LLU),_20b0b06ce_Range16(2042LLU,2048LLU,6LLU),_20b0b06ce_Range16(2049LLU,2069LLU,1LLU),_20b0b06ce_Range16(2074LLU,2084LLU,10LLU),_20b0b06ce_Range16(2088LLU,2112LLU,24LLU),_20b0b06ce_Range16(2113LLU,2136LLU,1LLU),_20b0b06ce_Range16(2144LLU,2154LLU,1LLU),_20b0b06ce_Range16(2160LLU,2183LLU,1LLU),_20b0b06ce_Range16(2185LLU,2190LLU,1LLU),_20b0b06ce_Range16(2208LLU,2249LLU,1LLU),_20b0b06ce_Range16(2308LLU,2361LLU,1LLU),_20b0b06ce_Range16(2365LLU,2384LLU,19LLU),_20b0b06ce_Range16(2392LLU,2401LLU,1LLU),_20b0b06ce_Range16(2417LLU,2432LLU,1LLU),_20b0b06ce_Range16(2437LLU,2444LLU,1LLU),_20b0b06ce_Range16(2447LLU,2448LLU,1LLU),_20b0b06ce_Range16(2451LLU,2472LLU,1LLU),_20b0b06ce_Range16(2474LLU,2480LLU,1LLU),_20b0b06ce_Range16(2482LLU,2486LLU,4LLU),_20b0b06ce_Range16(2487LLU,2489LLU,1LLU),_20b0b06ce_Range16(2493LLU,2510LLU,17LLU),_20b0b06ce_Range16(2524LLU,2525LLU,1LLU),_20b0b06ce_Range16(2527LLU,2529LLU,1LLU),_20b0b06ce_Range16(2544LLU,2545LLU,1LLU),_20b0b06ce_Range16(2556LLU,2565LLU,9LLU),_20b0b06ce_Range16(2566LLU,2570LLU,1LLU),_20b0b06ce_Range16(2575LLU,2576LLU,1LLU),_20b0b06ce_Range16(2579LLU,2600LLU,1LLU),_20b0b06ce_Range16(2602LLU,2608LLU,1LLU),_20b0b06ce_Range16(2610LLU,2611LLU,1LLU),_20b0b06ce_Range16(2613LLU,2614LLU,1LLU),_20b0b06ce_Range16(2616LLU,2617LLU,1LLU),_20b0b06ce_Range16(2649LLU,2652LLU,1LLU),_20b0b06ce_Range16(2654LLU,2674LLU,20LLU),_20b0b06ce_Range16(2675LLU,2676LLU,1LLU),_20b0b06ce_Range16(2693LLU,2701LLU,1LLU),_20b0b06ce_Range16(2703LLU,2705LLU,1LLU),_20b0b06ce_Range16(2707LLU,2728LLU,1LLU),_20b0b06ce_Range16(2730LLU,2736LLU,1LLU),_20b0b06ce_Range16(2738LLU,2739LLU,1LLU),_20b0b06ce_Range16(2741LLU,2745LLU,1LLU),_20b0b06ce_Range16(2749LLU,2768LLU,19LLU),_20b0b06ce_Range16(2784LLU,2785LLU,1LLU),_20b0b06ce_Range16(2809LLU,2821LLU,12LLU),_20b0b06ce_Range16(2822LLU,2828LLU,1LLU),_20b0b06ce_Range16(2831LLU,2832LLU,1LLU),_20b0b06ce_Range16(2835LLU,2856LLU,1LLU),_20b0b06ce_Range16(2858LLU,2864LLU,1LLU),_20b0b06ce_Range16(2866LLU,2867LLU,1LLU),_20b0b06ce_Range16(2869LLU,2873LLU,1LLU),_20b0b06ce_Range16(2877LLU,2908LLU,31LLU),_20b0b06ce_Range16(2909LLU,2911LLU,2LLU),_20b0b06ce_Range16(2912LLU,2913LLU,1LLU),_20b0b06ce_Range16(2929LLU,2947LLU,18LLU),_20b0b06ce_Range16(2949LLU,2954LLU,1LLU),_20b0b06ce_Range16(2958LLU,2960LLU,1LLU),_20b0b06ce_Range16(2962LLU,2965LLU,1LLU),_20b0b06ce_Range16(2969LLU,2970LLU,1LLU),_20b0b06ce_Range16(2972LLU,2974LLU,2LLU),_20b0b06ce_Range16(2975LLU,2979LLU,4LLU),_20b0b06ce_Range16(2980LLU,2984LLU,4LLU),_20b0b06ce_Range16(2985LLU,2986LLU,1LLU),_20b0b06ce_Range16(2990LLU,3001LLU,1LLU),_20b0b06ce_Range16(3024LLU,3077LLU,53LLU),_20b0b06ce_Range16(3078LLU,3084LLU,1LLU),_20b0b06ce_Range16(3086LLU,3088LLU,1LLU),_20b0b06ce_Range16(3090LLU,3112LLU,1LLU),_20b0b06ce_Range16(3114LLU,3129LLU,1LLU),_20b0b06ce_Range16(3133LLU,3160LLU,27LLU),_20b0b06ce_Range16(3161LLU,3162LLU,1LLU),_20b0b06ce_Range16(3165LLU,3168LLU,3LLU),_20b0b06ce_Range16(3169LLU,3200LLU,31LLU),_20b0b06ce_Range16(3205LLU,3212LLU,1LLU),_20b0b06ce_Range16(3214LLU,3216LLU,1LLU),_20b0b06ce_Range16(3218LLU,3240LLU,1LLU),_20b0b06ce_Range16(3242LLU,3251LLU,1LLU),_20b0b06ce_Range16(3253LLU,3257LLU,1LLU),_20b0b06ce_Range16(3261LLU,3293LLU,32LLU),_20b0b06ce_Range16(3294LLU,3296LLU,2LLU),_20b0b06ce_Range16(3297LLU,3313LLU,16LLU),_20b0b06ce_Range16(3314LLU,3332LLU,18LLU),_20b0b06ce_Range16(3333LLU,3340LLU,1LLU),_20b0b06ce_Range16(3342LLU,3344LLU,1LLU),_20b0b06ce_Range16(3346LLU,3386LLU,1LLU),_20b0b06ce_Range16(3389LLU,3406LLU,17LLU),_20b0b06ce_Range16(3412LLU,3414LLU,1LLU),_20b0b06ce_Range16(3423LLU,3425LLU,1LLU),_20b0b06ce_Range16(3450LLU,3455LLU,1LLU),_20b0b06ce_Range16(3461LLU,3478LLU,1LLU),_20b0b06ce_Range16(3482LLU,3505LLU,1LLU),_20b0b06ce_Range16(3507LLU,3515LLU,1LLU),_20b0b06ce_Range16(3517LLU,3520LLU,3LLU),_20b0b06ce_Range16(3521LLU,3526LLU,1LLU),_20b0b06ce_Range16(3585LLU,3632LLU,1LLU),_20b0b06ce_Range16(3634LLU,3635LLU,1LLU),_20b0b06ce_Range16(3648LLU,3654LLU,1LLU),_20b0b06ce_Range16(3713LLU,3714LLU,1LLU),_20b0b06ce_Range16(3716LLU,3718LLU,2LLU),_20b0b06ce_Range16(3719LLU,3722LLU,1LLU),_20b0b06ce_Range16(3724LLU,3747LLU,1LLU),_20b0b06ce_Range16(3749LLU,3751LLU,2LLU),_20b0b06ce_Range16(3752LLU,3760LLU,1LLU),_20b0b06ce_Range16(3762LLU,3763LLU,1LLU),_20b0b06ce_Range16(3773LLU,3776LLU,3LLU),_20b0b06ce_Range16(3777LLU,3780LLU,1LLU),_20b0b06ce_Range16(3782LLU,3804LLU,22LLU),_20b0b06ce_Range16(3805LLU,3807LLU,1LLU),_20b0b06ce_Range16(3840LLU,3904LLU,64LLU),_20b0b06ce_Range16(3905LLU,3911LLU,1LLU),_20b0b06ce_Range16(3913LLU,3948LLU,1LLU),_20b0b06ce_Range16(3976LLU,3980LLU,1LLU),_20b0b06ce_Range16(4096LLU,4138LLU,1LLU),_20b0b06ce_Range16(4159LLU,4176LLU,17LLU),_20b0b06ce_Range16(4177LLU,4181LLU,1LLU),_20b0b06ce_Range16(4186LLU,4189LLU,1LLU),_20b0b06ce_Range16(4193LLU,4197LLU,4LLU),_20b0b06ce_Range16(4198LLU,4206LLU,8LLU),_20b0b06ce_Range16(4207LLU,4208LLU,1LLU),_20b0b06ce_Range16(4213LLU,4225LLU,1LLU),_20b0b06ce_Range16(4238LLU,4256LLU,18LLU),_20b0b06ce_Range16(4257LLU,4293LLU,1LLU),_20b0b06ce_Range16(4295LLU,4301LLU,6LLU),_20b0b06ce_Range16(4304LLU,4346LLU,1LLU),_20b0b06ce_Range16(4348LLU,4680LLU,1LLU),_20b0b06ce_Range16(4682LLU,4685LLU,1LLU),_20b0b06ce_Range16(4688LLU,4694LLU,1LLU),_20b0b06ce_Range16(4696LLU,4698LLU,2LLU),_20b0b06ce_Range16(4699LLU,4701LLU,1LLU),_20b0b06ce_Range16(4704LLU,4744LLU,1LLU),_20b0b06ce_Range16(4746LLU,4749LLU,1LLU),_20b0b06ce_Range16(4752LLU,4784LLU,1LLU),_20b0b06ce_Range16(4786LLU,4789LLU,1LLU),_20b0b06ce_Range16(4792LLU,4798LLU,1LLU),_20b0b06ce_Range16(4800LLU,4802LLU,2LLU),_20b0b06ce_Range16(4803LLU,4805LLU,1LLU),_20b0b06ce_Range16(4808LLU,4822LLU,1LLU),_20b0b06ce_Range16(4824LLU,4880LLU,1LLU),_20b0b06ce_Range16(4882LLU,4885LLU,1LLU),_20b0b06ce_Range16(4888LLU,4954LLU,1LLU),_20b0b06ce_Range16(4992LLU,5007LLU,1LLU),_20b0b06ce_Range16(5024LLU,5109LLU,1LLU),_20b0b06ce_Range16(5112LLU,5117LLU,1LLU),_20b0b06ce_Range16(5121LLU,5740LLU,1LLU),_20b0b06ce_Range16(5743LLU,5759LLU,1LLU),_20b0b06ce_Range16(5761LLU,5786LLU,1LLU),_20b0b06ce_Range16(5792LLU,5866LLU,1LLU),_20b0b06ce_Range16(5873LLU,5880LLU,1LLU),_20b0b06ce_Range16(5888LLU,5905LLU,1LLU),_20b0b06ce_Range16(5919LLU,5937LLU,1LLU),_20b0b06ce_Range16(5952LLU,5969LLU,1LLU),_20b0b06ce_Range16(5984LLU,5996LLU,1LLU),_20b0b06ce_Range16(5998LLU,6000LLU,1LLU),_20b0b06ce_Range16(6016LLU,6067LLU,1LLU),_20b0b06ce_Range16(6103LLU,6108LLU,5LLU),_20b0b06ce_Range16(6176LLU,6264LLU,1LLU),_20b0b06ce_Range16(6272LLU,6276LLU,1LLU),_20b0b06ce_Range16(6279LLU,6312LLU,1LLU),_20b0b06ce_Range16(6314LLU,6320LLU,6LLU),_20b0b06ce_Range16(6321LLU,6389LLU,1LLU),_20b0b06ce_Range16(6400LLU,6430LLU,1LLU),_20b0b06ce_Range16(6480LLU,6509LLU,1LLU),_20b0b06ce_Range16(6512LLU,6516LLU,1LLU),_20b0b06ce_Range16(6528LLU,6571LLU,1LLU),_20b0b06ce_Range16(6576LLU,6601LLU,1LLU),_20b0b06ce_Range16(6656LLU,6678LLU,1LLU),_20b0b06ce_Range16(6688LLU,6740LLU,1LLU),_20b0b06ce_Range16(6823LLU,6917LLU,94LLU),_20b0b06ce_Range16(6918LLU,6963LLU,1LLU),_20b0b06ce_Range16(6981LLU,6988LLU,1LLU),_20b0b06ce_Range16(7043LLU,7072LLU,1LLU),_20b0b06ce_Range16(7086LLU,7087LLU,1LLU),_20b0b06ce_Range16(7098LLU,7141LLU,1LLU),_20b0b06ce_Range16(7168LLU,7203LLU,1LLU),_20b0b06ce_Range16(7245LLU,7247LLU,1LLU),_20b0b06ce_Range16(7258LLU,7293LLU,1LLU),_20b0b06ce_Range16(7296LLU,7304LLU,1LLU),_20b0b06ce_Range16(7312LLU,7354LLU,1LLU),_20b0b06ce_Range16(7357LLU,7359LLU,1LLU),_20b0b06ce_Range16(7401LLU,7404LLU,1LLU),_20b0b06ce_Range16(7406LLU,7411LLU,1LLU),_20b0b06ce_Range16(7413LLU,7414LLU,1LLU),_20b0b06ce_Range16(7418LLU,7424LLU,6LLU),_20b0b06ce_Range16(7425LLU,7615LLU,1LLU),_20b0b06ce_Range16(7680LLU,7957LLU,1LLU),_20b0b06ce_Range16(7960LLU,7965LLU,1LLU),_20b0b06ce_Range16(7968LLU,8005LLU,1LLU),_20b0b06ce_Range16(8008LLU,8013LLU,1LLU),_20b0b06ce_Range16(8016LLU,8023LLU,1LLU),_20b0b06ce_Range16(8025LLU,8031LLU,2LLU),_20b0b06ce_Range16(8032LLU,8061LLU,1LLU),_20b0b06ce_Range16(8064LLU,8116LLU,1LLU),_20b0b06ce_Range16(8118LLU,8124LLU,1LLU),_20b0b06ce_Range16(8126LLU,8130LLU,4LLU),_20b0b06ce_Range16(8131LLU,8132LLU,1LLU),_20b0b06ce_Range16(8134LLU,8140LLU,1LLU),_20b0b06ce_Range16(8144LLU,8147LLU,1LLU),_20b0b06ce_Range16(8150LLU,8155LLU,1LLU),_20b0b06ce_Range16(8160LLU,8172LLU,1LLU),_20b0b06ce_Range16(8178LLU,8180LLU,1LLU),_20b0b06ce_Range16(8182LLU,8188LLU,1LLU),_20b0b06ce_Range16(8305LLU,8319LLU,14LLU),_20b0b06ce_Range16(8336LLU,8348LLU,1LLU),_20b0b06ce_Range16(8450LLU,8455LLU,5LLU),_20b0b06ce_Range16(8458LLU,8467LLU,1LLU),_20b0b06ce_Range16(8469LLU,8473LLU,4LLU),_20b0b06ce_Range16(8474LLU,8477LLU,1LLU),_20b0b06ce_Range16(8484LLU,8490LLU,2LLU),_20b0b06ce_Range16(8491LLU,8493LLU,1LLU),_20b0b06ce_Range16(8495LLU,8505LLU,1LLU),_20b0b06ce_Range16(8508LLU,8511LLU,1LLU),_20b0b06ce_Range16(8517LLU,8521LLU,1LLU),_20b0b06ce_Range16(8526LLU,8579LLU,53LLU),_20b0b06ce_Range16(8580LLU,11264LLU,2684LLU),_20b0b06ce_Range16(11265LLU,11492LLU,1LLU),_20b0b06ce_Range16(11499LLU,11502LLU,1LLU),_20b0b06ce_Range16(11506LLU,11507LLU,1LLU),_20b0b06ce_Range16(11520LLU,11557LLU,1LLU),_20b0b06ce_Range16(11559LLU,11565LLU,6LLU),_20b0b06ce_Range16(11568LLU,11623LLU,1LLU),_20b0b06ce_Range16(11631LLU,11648LLU,17LLU),_20b0b06ce_Range16(11649LLU,11670LLU,1LLU),_20b0b06ce_Range16(11680LLU,11686LLU,1LLU),_20b0b06ce_Range16(11688LLU,11694LLU,1LLU),_20b0b06ce_Range16(11696LLU,11702LLU,1LLU),_20b0b06ce_Range16(11704LLU,11710LLU,1LLU),_20b0b06ce_Range16(11712LLU,11718LLU,1LLU),_20b0b06ce_Range16(11720LLU,11726LLU,1LLU),_20b0b06ce_Range16(11728LLU,11734LLU,1LLU),_20b0b06ce_Range16(11736LLU,11742LLU,1LLU),_20b0b06ce_Range16(11823LLU,12293LLU,470LLU),_20b0b06ce_Range16(12294LLU,12337LLU,43LLU),_20b0b06ce_Range16(12338LLU,12341LLU,1LLU),_20b0b06ce_Range16(12347LLU,12348LLU,1LLU),_20b0b06ce_Range16(12353LLU,12438LLU,1LLU),_20b0b06ce_Range16(12445LLU,12447LLU,1LLU),_20b0b06ce_Range16(12449LLU,12538LLU,1LLU),_20b0b06ce_Range16(12540LLU,12543LLU,1LLU),_20b0b06ce_Range16(12549LLU,12591LLU,1LLU),_20b0b06ce_Range16(12593LLU,12686LLU,1LLU),_20b0b06ce_Range16(12704LLU,12735LLU,1LLU),_20b0b06ce_Range16(12784LLU,12799LLU,1LLU),_20b0b06ce_Range16(13312LLU,19903LLU,1LLU),_20b0b06ce_Range16(19968LLU,42124LLU,1LLU),_20b0b06ce_Range16(42192LLU,42237LLU,1LLU),_20b0b06ce_Range16(42240LLU,42508LLU,1LLU),_20b0b06ce_Range16(42512LLU,42527LLU,1LLU),_20b0b06ce_Range16(42538LLU,42539LLU,1LLU),_20b0b06ce_Range16(42560LLU,42606LLU,1LLU),_20b0b06ce_Range16(42623LLU,42653LLU,1LLU),_20b0b06ce_Range16(42656LLU,42725LLU,1LLU),_20b0b06ce_Range16(42775LLU,42783LLU,1LLU),_20b0b06ce_Range16(42786LLU,42888LLU,1LLU),_20b0b06ce_Range16(42891LLU,42954LLU,1LLU),_20b0b06ce_Range16(42960LLU,42961LLU,1LLU),_20b0b06ce_Range16(42963LLU,42965LLU,2LLU),_20b0b06ce_Range16(42966LLU,42969LLU,1LLU),_20b0b06ce_Range16(42994LLU,43009LLU,1LLU),_20b0b06ce_Range16(43011LLU,43013LLU,1LLU),_20b0b06ce_Range16(43015LLU,43018LLU,1LLU),_20b0b06ce_Range16(43020LLU,43042LLU,1LLU),_20b0b06ce_Range16(43072LLU,43123LLU,1LLU),_20b0b06ce_Range16(43138LLU,43187LLU,1LLU),_20b0b06ce_Range16(43250LLU,43255LLU,1LLU),_20b0b06ce_Range16(43259LLU,43261LLU,2LLU),_20b0b06ce_Range16(43262LLU,43274LLU,12LLU),_20b0b06ce_Range16(43275LLU,43301LLU,1LLU),_20b0b06ce_Range16(43312LLU,43334LLU,1LLU),_20b0b06ce_Range16(43360LLU,43388LLU,1LLU),_20b0b06ce_Range16(43396LLU,43442LLU,1LLU),_20b0b06ce_Range16(43471LLU,43488LLU,17LLU),_20b0b06ce_Range16(43489LLU,43492LLU,1LLU),_20b0b06ce_Range16(43494LLU,43503LLU,1LLU),_20b0b06ce_Range16(43514LLU,43518LLU,1LLU),_20b0b06ce_Range16(43520LLU,43560LLU,1LLU),_20b0b06ce_Range16(43584LLU,43586LLU,1LLU),_20b0b06ce_Range16(43588LLU,43595LLU,1LLU),_20b0b06ce_Range16(43616LLU,43638LLU,1LLU),_20b0b06ce_Range16(43642LLU,43646LLU,4LLU),_20b0b06ce_Range16(43647LLU,43695LLU,1LLU),_20b0b06ce_Range16(43697LLU,43701LLU,4LLU),_20b0b06ce_Range16(43702LLU,43705LLU,3LLU),_20b0b06ce_Range16(43706LLU,43709LLU,1LLU),_20b0b06ce_Range16(43712LLU,43714LLU,2LLU),_20b0b06ce_Range16(43739LLU,43741LLU,1LLU),_20b0b06ce_Range16(43744LLU,43754LLU,1LLU),_20b0b06ce_Range16(43762LLU,43764LLU,1LLU),_20b0b06ce_Range16(43777LLU,43782LLU,1LLU),_20b0b06ce_Range16(43785LLU,43790LLU,1LLU),_20b0b06ce_Range16(43793LLU,43798LLU,1LLU),_20b0b06ce_Range16(43808LLU,43814LLU,1LLU),_20b0b06ce_Range16(43816LLU,43822LLU,1LLU),_20b0b06ce_Range16(43824LLU,43866LLU,1LLU),_20b0b06ce_Range16(43868LLU,43881LLU,1LLU),_20b0b06ce_Range16(43888LLU,44002LLU,1LLU),_20b0b06ce_Range16(44032LLU,55203LLU,1LLU),_20b0b06ce_Range16(55216LLU,55238LLU,1LLU),_20b0b06ce_Range16(55243LLU,55291LLU,1LLU),_20b0b06ce_Range16(63744LLU,64109LLU,1LLU),_20b0b06ce_Range16(64112LLU,64217LLU,1LLU),_20b0b06ce_Range16(64256LLU,64262LLU,1LLU),_20b0b06ce_Range16(64275LLU,64279LLU,1LLU),_20b0b06ce_Range16(64285LLU,64287LLU,2LLU),_20b0b06ce_Range16(64288LLU,64296LLU,1LLU),_20b0b06ce_Range16(64298LLU,64310LLU,1LLU),_20b0b06ce_Range16(64312LLU,64316LLU,1LLU),_20b0b06ce_Range16(64318LLU,64320LLU,2LLU),_20b0b06ce_Range16(64321LLU,64323LLU,2LLU),_20b0b06ce_Range16(64324LLU,64326LLU,2LLU),_20b0b06ce_Range16(64327LLU,64433LLU,1LLU),_20b0b06ce_Range16(64467LLU,64829LLU,1LLU),_20b0b06ce_Range16(64848LLU,64911LLU,1LLU),_20b0b06ce_Range16(64914LLU,64967LLU,1LLU),_20b0b06ce_Range16(65008LLU,65019LLU,1LLU),_20b0b06ce_Range16(65136LLU,65140LLU,1LLU),_20b0b06ce_Range16(65142LLU,65276LLU,1LLU),_20b0b06ce_Range16(65313LLU,65338LLU,1LLU),_20b0b06ce_Range16(65345LLU,65370LLU,1LLU),_20b0b06ce_Range16(65382LLU,65470LLU,1LLU),_20b0b06ce_Range16(65474LLU,65479LLU,1LLU),_20b0b06ce_Range16(65482LLU,65487LLU,1LLU),_20b0b06ce_Range16(65490LLU,65495LLU,1LLU),_20b0b06ce_Range16(65498LLU,65500LLU,1LLU)}),jule::Slice<_20b0b06ce_Range32>({_20b0b06ce_Range32(65536LLU,65547LLU,1LLU),_20b0b06ce_Range32(65549LLU,65574LLU,1LLU),_20b0b06ce_Range32(65576LLU,65594LLU,1LLU),_20b0b06ce_Range32(65596LLU,65597LLU,1LLU),_20b0b06ce_Range32(65599LLU,65613LLU,1LLU),_20b0b06ce_Range32(65616LLU,65629LLU,1LLU),_20b0b06ce_Range32(65664LLU,65786LLU,1LLU),_20b0b06ce_Range32(66176LLU,66204LLU,1LLU),_20b0b06ce_Range32(66208LLU,66256LLU,1LLU),_20b0b06ce_Range32(66304LLU,66335LLU,1LLU),_20b0b06ce_Range32(66349LLU,66368LLU,1LLU),_20b0b06ce_Range32(66370LLU,66377LLU,1LLU),_20b0b06ce_Range32(66384LLU,66421LLU,1LLU),_20b0b06ce_Range32(66432LLU,66461LLU,1LLU),_20b0b06ce_Range32(66464LLU,66499LLU,1LLU),_20b0b06ce_Range32(66504LLU,66511LLU,1LLU),_20b0b06ce_Range32(66560LLU,66717LLU,1LLU),_20b0b06ce_Range32(66736LLU,66771LLU,1LLU),_20b0b06ce_Range32(66776LLU,66811LLU,1LLU),_20b0b06ce_Range32(66816LLU,66855LLU,1LLU),_20b0b06ce_Range32(66864LLU,66915LLU,1LLU),_20b0b06ce_Range32(66928LLU,66938LLU,1LLU),_20b0b06ce_Range32(66940LLU,66954LLU,1LLU),_20b0b06ce_Range32(66956LLU,66962LLU,1LLU),_20b0b06ce_Range32(66964LLU,66965LLU,1LLU),_20b0b06ce_Range32(66967LLU,66977LLU,1LLU),_20b0b06ce_Range32(66979LLU,66993LLU,1LLU),_20b0b06ce_Range32(66995LLU,67001LLU,1LLU),_20b0b06ce_Range32(67003LLU,67004LLU,1LLU),_20b0b06ce_Range32(67072LLU,67382LLU,1LLU),_20b0b06ce_Range32(67392LLU,67413LLU,1LLU),_20b0b06ce_Range32(67424LLU,67431LLU,1LLU),_20b0b06ce_Range32(67456LLU,67461LLU,1LLU),_20b0b06ce_Range32(67463LLU,67504LLU,1LLU),_20b0b06ce_Range32(67506LLU,67514LLU,1LLU),_20b0b06ce_Range32(67584LLU,67589LLU,1LLU),_20b0b06ce_Range32(67592LLU,67594LLU,2LLU),_20b0b06ce_Range32(67595LLU,67637LLU,1LLU),_20b0b06ce_Range32(67639LLU,67640LLU,1LLU),_20b0b06ce_Range32(67644LLU,67647LLU,3LLU),_20b0b06ce_Range32(67648LLU,67669LLU,1LLU),_20b0b06ce_Range32(67680LLU,67702LLU,1LLU),_20b0b06ce_Range32(67712LLU,67742LLU,1LLU),_20b0b06ce_Range32(67808LLU,67826LLU,1LLU),_20b0b06ce_Range32(67828LLU,67829LLU,1LLU),_20b0b06ce_Range32(67840LLU,67861LLU,1LLU),_20b0b06ce_Range32(67872LLU,67897LLU,1LLU),_20b0b06ce_Range32(67968LLU,68023LLU,1LLU),_20b0b06ce_Range32(68030LLU,68031LLU,1LLU),_20b0b06ce_Range32(68096LLU,68112LLU,16LLU),_20b0b06ce_Range32(68113LLU,68115LLU,1LLU),_20b0b06ce_Range32(68117LLU,68119LLU,1LLU),_20b0b06ce_Range32(68121LLU,68149LLU,1LLU),_20b0b06ce_Range32(68192LLU,68220LLU,1LLU),_20b0b06ce_Range32(68224LLU,68252LLU,1LLU),_20b0b06ce_Range32(68288LLU,68295LLU,1LLU),_20b0b06ce_Range32(68297LLU,68324LLU,1LLU),_20b0b06ce_Range32(68352LLU,68405LLU,1LLU),_20b0b06ce_Range32(68416LLU,68437LLU,1LLU),_20b0b06ce_Range32(68448LLU,68466LLU,1LLU),_20b0b06ce_Range32(68480LLU,68497LLU,1LLU),_20b0b06ce_Range32(68608LLU,68680LLU,1LLU),_20b0b06ce_Range32(68736LLU,68786LLU,1LLU),_20b0b06ce_Range32(68800LLU,68850LLU,1LLU),_20b0b06ce_Range32(68864LLU,68899LLU,1LLU),_20b0b06ce_Range32(69248LLU,69289LLU,1LLU),_20b0b06ce_Range32(69296LLU,69297LLU,1LLU),_20b0b06ce_Range32(69376LLU,69404LLU,1LLU),_20b0b06ce_Range32(69415LLU,69424LLU,9LLU),_20b0b06ce_Range32(69425LLU,69445LLU,1LLU),_20b0b06ce_Range32(69488LLU,69505LLU,1LLU),_20b0b06ce_Range32(69552LLU,69572LLU,1LLU),_20b0b06ce_Range32(69600LLU,69622LLU,1LLU),_20b0b06ce_Range32(69635LLU,69687LLU,1LLU),_20b0b06ce_Range32(69745LLU,69746LLU,1LLU),_20b0b06ce_Range32(69749LLU,69763LLU,14LLU),_20b0b06ce_Range32(69764LLU,69807LLU,1LLU),_20b0b06ce_Range32(69840LLU,69864LLU,1LLU),_20b0b06ce_Range32(69891LLU,69926LLU,1LLU),_20b0b06ce_Range32(69956LLU,69959LLU,3LLU),_20b0b06ce_Range32(69968LLU,70002LLU,1LLU),_20b0b06ce_Range32(70006LLU,70019LLU,13LLU),_20b0b06ce_Range32(70020LLU,70066LLU,1LLU),_20b0b06ce_Range32(70081LLU,70084LLU,1LLU),_20b0b06ce_Range32(70106LLU,70108LLU,2LLU),_20b0b06ce_Range32(70144LLU,70161LLU,1LLU),_20b0b06ce_Range32(70163LLU,70187LLU,1LLU),_20b0b06ce_Range32(70207LLU,70208LLU,1LLU),_20b0b06ce_Range32(70272LLU,70278LLU,1LLU),_20b0b06ce_Range32(70280LLU,70282LLU,2LLU),_20b0b06ce_Range32(70283LLU,70285LLU,1LLU),_20b0b06ce_Range32(70287LLU,70301LLU,1LLU),_20b0b06ce_Range32(70303LLU,70312LLU,1LLU),_20b0b06ce_Range32(70320LLU,70366LLU,1LLU),_20b0b06ce_Range32(70405LLU,70412LLU,1LLU),_20b0b06ce_Range32(70415LLU,70416LLU,1LLU),_20b0b06ce_Range32(70419LLU,70440LLU,1LLU),_20b0b06ce_Range32(70442LLU,70448LLU,1LLU),_20b0b06ce_Range32(70450LLU,70451LLU,1LLU),_20b0b06ce_Range32(70453LLU,70457LLU,1LLU),_20b0b06ce_Range32(70461LLU,70480LLU,19LLU),_20b0b06ce_Range32(70493LLU,70497LLU,1LLU),_20b0b06ce_Range32(70656LLU,70708LLU,1LLU),_20b0b06ce_Range32(70727LLU,70730LLU,1LLU),_20b0b06ce_Range32(70751LLU,70753LLU,1LLU),_20b0b06ce_Range32(70784LLU,70831LLU,1LLU),_20b0b06ce_Range32(70852LLU,70853LLU,1LLU),_20b0b06ce_Range32(70855LLU,71040LLU,185LLU),_20b0b06ce_Range32(71041LLU,71086LLU,1LLU),_20b0b06ce_Range32(71128LLU,71131LLU,1LLU),_20b0b06ce_Range32(71168LLU,71215LLU,1LLU),_20b0b06ce_Range32(71236LLU,71296LLU,60LLU),_20b0b06ce_Range32(71297LLU,71338LLU,1LLU),_20b0b06ce_Range32(71352LLU,71424LLU,72LLU),_20b0b06ce_Range32(71425LLU,71450LLU,1LLU),_20b0b06ce_Range32(71488LLU,71494LLU,1LLU),_20b0b06ce_Range32(71680LLU,71723LLU,1LLU),_20b0b06ce_Range32(71840LLU,71903LLU,1LLU),_20b0b06ce_Range32(71935LLU,71942LLU,1LLU),_20b0b06ce_Range32(71945LLU,71948LLU,3LLU),_20b0b06ce_Range32(71949LLU,71955LLU,1LLU),_20b0b06ce_Range32(71957LLU,71958LLU,1LLU),_20b0b06ce_Range32(71960LLU,71983LLU,1LLU),_20b0b06ce_Range32(71999LLU,72001LLU,2LLU),_20b0b06ce_Range32(72096LLU,72103LLU,1LLU),_20b0b06ce_Range32(72106LLU,72144LLU,1LLU),_20b0b06ce_Range32(72161LLU,72163LLU,2LLU),_20b0b06ce_Range32(72192LLU,72203LLU,11LLU),_20b0b06ce_Range32(72204LLU,72242LLU,1LLU),_20b0b06ce_Range32(72250LLU,72272LLU,22LLU),_20b0b06ce_Range32(72284LLU,72329LLU,1LLU),_20b0b06ce_Range32(72349LLU,72368LLU,19LLU),_20b0b06ce_Range32(72369LLU,72440LLU,1LLU),_20b0b06ce_Range32(72704LLU,72712LLU,1LLU),_20b0b06ce_Range32(72714LLU,72750LLU,1LLU),_20b0b06ce_Range32(72768LLU,72818LLU,50LLU),_20b0b06ce_Range32(72819LLU,72847LLU,1LLU),_20b0b06ce_Range32(72960LLU,72966LLU,1LLU),_20b0b06ce_Range32(72968LLU,72969LLU,1LLU),_20b0b06ce_Range32(72971LLU,73008LLU,1LLU),_20b0b06ce_Range32(73030LLU,73056LLU,26LLU),_20b0b06ce_Range32(73057LLU,73061LLU,1LLU),_20b0b06ce_Range32(73063LLU,73064LLU,1LLU),_20b0b06ce_Range32(73066LLU,73097LLU,1LLU),_20b0b06ce_Range32(73112LLU,73440LLU,328LLU),_20b0b06ce_Range32(73441LLU,73458LLU,1LLU),_20b0b06ce_Range32(73474LLU,73476LLU,2LLU),_20b0b06ce_Range32(73477LLU,73488LLU,1LLU),_20b0b06ce_Range32(73490LLU,73523LLU,1LLU),_20b0b06ce_Range32(73648LLU,73728LLU,80LLU),_20b0b06ce_Range32(73729LLU,74649LLU,1LLU),_20b0b06ce_Range32(74880LLU,75075LLU,1LLU),_20b0b06ce_Range32(77712LLU,77808LLU,1LLU),_20b0b06ce_Range32(77824LLU,78895LLU,1LLU),_20b0b06ce_Range32(78913LLU,78918LLU,1LLU),_20b0b06ce_Range32(82944LLU,83526LLU,1LLU),_20b0b06ce_Range32(92160LLU,92728LLU,1LLU),_20b0b06ce_Range32(92736LLU,92766LLU,1LLU),_20b0b06ce_Range32(92784LLU,92862LLU,1LLU),_20b0b06ce_Range32(92880LLU,92909LLU,1LLU),_20b0b06ce_Range32(92928LLU,92975LLU,1LLU),_20b0b06ce_Range32(92992LLU,92995LLU,1LLU),_20b0b06ce_Range32(93027LLU,93047LLU,1LLU),_20b0b06ce_Range32(93053LLU,93071LLU,1LLU),_20b0b06ce_Range32(93760LLU,93823LLU,1LLU),_20b0b06ce_Range32(93952LLU,94026LLU,1LLU),_20b0b06ce_Range32(94032LLU,94099LLU,67LLU),_20b0b06ce_Range32(94100LLU,94111LLU,1LLU),_20b0b06ce_Range32(94176LLU,94177LLU,1LLU),_20b0b06ce_Range32(94179LLU,94208LLU,29LLU),_20b0b06ce_Range32(94209LLU,100343LLU,1LLU),_20b0b06ce_Range32(100352LLU,101589LLU,1LLU),_20b0b06ce_Range32(101632LLU,101640LLU,1LLU),_20b0b06ce_Range32(110576LLU,110579LLU,1LLU),_20b0b06ce_Range32(110581LLU,110587LLU,1LLU),_20b0b06ce_Range32(110589LLU,110590LLU,1LLU),_20b0b06ce_Range32(110592LLU,110882LLU,1LLU),_20b0b06ce_Range32(110898LLU,110928LLU,30LLU),_20b0b06ce_Range32(110929LLU,110930LLU,1LLU),_20b0b06ce_Range32(110933LLU,110948LLU,15LLU),_20b0b06ce_Range32(110949LLU,110951LLU,1LLU),_20b0b06ce_Range32(110960LLU,111355LLU,1LLU),_20b0b06ce_Range32(113664LLU,113770LLU,1LLU),_20b0b06ce_Range32(113776LLU,113788LLU,1LLU),_20b0b06ce_Range32(113792LLU,113800LLU,1LLU),_20b0b06ce_Range32(113808LLU,113817LLU,1LLU),_20b0b06ce_Range32(119808LLU,119892LLU,1LLU),_20b0b06ce_Range32(119894LLU,119964LLU,1LLU),_20b0b06ce_Range32(119966LLU,119967LLU,1LLU),_20b0b06ce_Range32(119970LLU,119973LLU,3LLU),_20b0b06ce_Range32(119974LLU,119977LLU,3LLU),_20b0b06ce_Range32(119978LLU,119980LLU,1LLU),_20b0b06ce_Range32(119982LLU,119993LLU,1LLU),_20b0b06ce_Range32(119995LLU,119997LLU,2LLU),_20b0b06ce_Range32(119998LLU,120003LLU,1LLU),_20b0b06ce_Range32(120005LLU,120069LLU,1LLU),_20b0b06ce_Range32(120071LLU,120074LLU,1LLU),_20b0b06ce_Range32(120077LLU,120084LLU,1LLU),_20b0b06ce_Range32(120086LLU,120092LLU,1LLU),_20b0b06ce_Range32(120094LLU,120121LLU,1LLU),_20b0b06ce_Range32(120123LLU,120126LLU,1LLU),_20b0b06ce_Range32(120128LLU,120132LLU,1LLU),_20b0b06ce_Range32(120134LLU,120138LLU,4LLU),_20b0b06ce_Range32(120139LLU,120144LLU,1LLU),_20b0b06ce_Range32(120146LLU,120485LLU,1LLU),_20b0b06ce_Range32(120488LLU,120512LLU,1LLU),_20b0b06ce_Range32(120514LLU,120538LLU,1LLU),_20b0b06ce_Range32(120540LLU,120570LLU,1LLU),_20b0b06ce_Range32(120572LLU,120596LLU,1LLU),_20b0b06ce_Range32(120598LLU,120628LLU,1LLU),_20b0b06ce_Range32(120630LLU,120654LLU,1LLU),_20b0b06ce_Range32(120656LLU,120686LLU,1LLU),_20b0b06ce_Range32(120688LLU,120712LLU,1LLU),_20b0b06ce_Range32(120714LLU,120744LLU,1LLU),_20b0b06ce_Range32(120746LLU,120770LLU,1LLU),_20b0b06ce_Range32(120772LLU,120779LLU,1LLU),_20b0b06ce_Range32(122624LLU,122654LLU,1LLU),_20b0b06ce_Range32(122661LLU,122666LLU,1LLU),_20b0b06ce_Range32(122928LLU,122989LLU,1LLU),_20b0b06ce_Range32(123136LLU,123180LLU,1LLU),_20b0b06ce_Range32(123191LLU,123197LLU,1LLU),_20b0b06ce_Range32(123214LLU,123536LLU,322LLU),_20b0b06ce_Range32(123537LLU,123565LLU,1LLU),_20b0b06ce_Range32(123584LLU,123627LLU,1LLU),_20b0b06ce_Range32(124112LLU,124139LLU,1LLU),_20b0b06ce_Range32(124896LLU,124902LLU,1LLU),_20b0b06ce_Range32(124904LLU,124907LLU,1LLU),_20b0b06ce_Range32(124909LLU,124910LLU,1LLU),_20b0b06ce_Range32(124912LLU,124926LLU,1LLU),_20b0b06ce_Range32(124928LLU,125124LLU,1LLU),_20b0b06ce_Range32(125184LLU,125251LLU,1LLU),_20b0b06ce_Range32(125259LLU,126464LLU,1205LLU),_20b0b06ce_Range32(126465LLU,126467LLU,1LLU),_20b0b06ce_Range32(126469LLU,126495LLU,1LLU),_20b0b06ce_Range32(126497LLU,126498LLU,1LLU),_20b0b06ce_Range32(126500LLU,126503LLU,3LLU),_20b0b06ce_Range32(126505LLU,126514LLU,1LLU),_20b0b06ce_Range32(126516LLU,126519LLU,1LLU),_20b0b06ce_Range32(126521LLU,126523LLU,2LLU),_20b0b06ce_Range32(126530LLU,126535LLU,5LLU),_20b0b06ce_Range32(126537LLU,126541LLU,2LLU),_20b0b06ce_Range32(126542LLU,126543LLU,1LLU),_20b0b06ce_Range32(126545LLU,126546LLU,1LLU),_20b0b06ce_Range32(126548LLU,126551LLU,3LLU),_20b0b06ce_Range32(126553LLU,126561LLU,2LLU),_20b0b06ce_Range32(126562LLU,126564LLU,2LLU),_20b0b06ce_Range32(126567LLU,126570LLU,1LLU),_20b0b06ce_Range32(126572LLU,126578LLU,1LLU),_20b0b06ce_Range32(126580LLU,126583LLU,1LLU),_20b0b06ce_Range32(126585LLU,126588LLU,1LLU),_20b0b06ce_Range32(126590LLU,126592LLU,2LLU),_20b0b06ce_Range32(126593LLU,126601LLU,1LLU),_20b0b06ce_Range32(126603LLU,126619LLU,1LLU),_20b0b06ce_Range32(126625LLU,126627LLU,1LLU),_20b0b06ce_Range32(126629LLU,126633LLU,1LLU),_20b0b06ce_Range32(126635LLU,126651LLU,1LLU),_20b0b06ce_Range32(131072LLU,173791LLU,1LLU),_20b0b06ce_Range32(173824LLU,177977LLU,1LLU),_20b0b06ce_Range32(177984LLU,178205LLU,1LLU),_20b0b06ce_Range32(178208LLU,183969LLU,1LLU),_20b0b06ce_Range32(183984LLU,191456LLU,1LLU),_20b0b06ce_Range32(194560LLU,195101LLU,1LLU),_20b0b06ce_Range32(196608LLU,201546LLU,1LLU),_20b0b06ce_Range32(201552LLU,205743LLU,1LLU)}),6LL));
	_20b09c05b_LETTER = _20b09c05b__L;
	_20b09c05b__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});
	_20a25878a_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
	_20a25878a_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
	_20a25878a_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
	_20a314307_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
	_20a314307_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
	_20ba03198_PATH_STDLIB = jule::Str();
	_20ba03198_PATH_EXEC = jule::Str();
	_20ba03198_PATH_WD = jule::Str();
	_20ba03198_PATH_API = jule::Str();
	_20c305aee_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
	_20c305aee_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
	_20b639c14_F32_INFO = _20b639c14_FloatInfo(23LLU,8LLU,-127LL);
	_20b639c14_F64_INFO = _20b639c14_FloatInfo(52LLU,11LLU,-1023LL);
	_20b6a031d_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
	_20b657ced_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
	_20b657ced_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
	_20b657ced_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
	_20bc275ba_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
	_20bcae960_LEFTCHEATS = jule::Slice<_20bcae960_LeftCheat>({_20bcae960_LeftCheat(0LL,jule::Str()),_20bcae960_LeftCheat(1LL,jule::Str("5", 1)),_20bcae960_LeftCheat(1LL,jule::Str("25", 2)),_20bcae960_LeftCheat(1LL,jule::Str("125", 3)),_20bcae960_LeftCheat(2LL,jule::Str("625", 3)),_20bcae960_LeftCheat(2LL,jule::Str("3125", 4)),_20bcae960_LeftCheat(2LL,jule::Str("15625", 5)),_20bcae960_LeftCheat(3LL,jule::Str("78125", 5)),_20bcae960_LeftCheat(3LL,jule::Str("390625", 6)),_20bcae960_LeftCheat(3LL,jule::Str("1953125", 7)),_20bcae960_LeftCheat(4LL,jule::Str("9765625", 7)),_20bcae960_LeftCheat(4LL,jule::Str("48828125", 8)),_20bcae960_LeftCheat(4LL,jule::Str("244140625", 9)),_20bcae960_LeftCheat(4LL,jule::Str("1220703125", 10)),_20bcae960_LeftCheat(5LL,jule::Str("6103515625", 10)),_20bcae960_LeftCheat(5LL,jule::Str("30517578125", 11)),_20bcae960_LeftCheat(5LL,jule::Str("152587890625", 12)),_20bcae960_LeftCheat(6LL,jule::Str("762939453125", 12)),_20bcae960_LeftCheat(6LL,jule::Str("3814697265625", 13)),_20bcae960_LeftCheat(6LL,jule::Str("19073486328125", 14)),_20bcae960_LeftCheat(7LL,jule::Str("95367431640625", 14)),_20bcae960_LeftCheat(7LL,jule::Str("476837158203125", 15)),_20bcae960_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_20bcae960_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_20bcae960_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_20bcae960_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_20bcae960_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_20bcae960_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_20bcae960_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_20bcae960_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_20bcae960_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_20bcae960_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_20bcae960_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_20bcae960_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_20bcae960_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_20bcae960_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_20bcae960_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_20bcae960_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_20bcae960_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_20bcae960_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_20bcae960_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_20bcae960_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_20bcae960_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_20bcae960_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_20bcae960_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_20bcae960_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_20bcae960_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_20bcae960_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_20bcae960_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_20bcae960_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_20bcae960_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_20bcae960_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_20bcae960_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_20bcae960_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_20bcae960_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_20bcae960_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_20bcae960_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_20bcae960_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_20bcae960_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_20bcae960_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_20bcae960_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
	_20c47803a_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
	_20c47803a_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
	_20c47803a_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
	_20c47803a_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
	_20c47803a_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
	_20c47ab20_KEYWORDS = jule::Array<_20c47ab20_KindPair,47>({_20c47ab20_KindPair(jule::Str("i8", 2),1LLU),_20c47ab20_KindPair(jule::Str("i16", 3),1LLU),_20c47ab20_KindPair(jule::Str("i32", 3),1LLU),_20c47ab20_KindPair(jule::Str("i64", 3),1LLU),_20c47ab20_KindPair(jule::Str("u8", 2),1LLU),_20c47ab20_KindPair(jule::Str("u16", 3),1LLU),_20c47ab20_KindPair(jule::Str("u32", 3),1LLU),_20c47ab20_KindPair(jule::Str("u64", 3),1LLU),_20c47ab20_KindPair(jule::Str("f32", 3),1LLU),_20c47ab20_KindPair(jule::Str("f64", 3),1LLU),_20c47ab20_KindPair(jule::Str("uint", 4),1LLU),_20c47ab20_KindPair(jule::Str("int", 3),1LLU),_20c47ab20_KindPair(jule::Str("uintptr", 7),1LLU),_20c47ab20_KindPair(jule::Str("bool", 4),1LLU),_20c47ab20_KindPair(jule::Str("str", 3),1LLU),_20c47ab20_KindPair(jule::Str("any", 3),1LLU),_20c47ab20_KindPair(jule::Str("true", 4),6LLU),_20c47ab20_KindPair(jule::Str("false", 5),6LLU),_20c47ab20_KindPair(jule::Str("nil", 3),6LLU),_20c47ab20_KindPair(jule::Str("const", 5),9LLU),_20c47ab20_KindPair(jule::Str("ret", 3),4LLU),_20c47ab20_KindPair(jule::Str("type", 4),10LLU),_20c47ab20_KindPair(jule::Str("for", 3),12LLU),_20c47ab20_KindPair(jule::Str("break", 5),13LLU),_20c47ab20_KindPair(jule::Str("continue", 8),14LLU),_20c47ab20_KindPair(jule::Str("in", 2),15LLU),_20c47ab20_KindPair(jule::Str("if", 2),16LLU),_20c47ab20_KindPair(jule::Str("else", 4),17LLU),_20c47ab20_KindPair(jule::Str("use", 3),19LLU),_20c47ab20_KindPair(jule::Str("pub", 3),21LLU),_20c47ab20_KindPair(jule::Str("goto", 4),22LLU),_20c47ab20_KindPair(jule::Str("enum", 4),24LLU),_20c47ab20_KindPair(jule::Str("struct", 6),25LLU),_20c47ab20_KindPair(jule::Str("co", 2),26LLU),_20c47ab20_KindPair(jule::Str("match", 5),27LLU),_20c47ab20_KindPair(jule::Str("self", 4),28LLU),_20c47ab20_KindPair(jule::Str("trait", 5),29LLU),_20c47ab20_KindPair(jule::Str("impl", 4),30LLU),_20c47ab20_KindPair(jule::Str("cpp", 3),31LLU),_20c47ab20_KindPair(jule::Str("fall", 4),32LLU),_20c47ab20_KindPair(jule::Str("fn", 2),33LLU),_20c47ab20_KindPair(jule::Str("let", 3),34LLU),_20c47ab20_KindPair(jule::Str("unsafe", 6),35LLU),_20c47ab20_KindPair(jule::Str("mut", 3),36LLU),_20c47ab20_KindPair(jule::Str("defer", 5),37LLU),_20c47ab20_KindPair(jule::Str("static", 6),38LLU),_20c47ab20_KindPair(jule::Str("error", 5),40LLU)});
	_20c47ab20_BASIC_OPS = jule::Array<_20c47ab20_KindPair,39>({_20c47ab20_KindPair(jule::Str("::", 2),23LLU),_20c47ab20_KindPair(jule::Str(":", 1),11LLU),_20c47ab20_KindPair(jule::Str(";", 1),5LLU),_20c47ab20_KindPair(jule::Str(",", 1),8LLU),_20c47ab20_KindPair(jule::Str("...", 3),7LLU),_20c47ab20_KindPair(jule::Str(".", 1),20LLU),_20c47ab20_KindPair(jule::Str("+=", 2),7LLU),_20c47ab20_KindPair(jule::Str("-=", 2),7LLU),_20c47ab20_KindPair(jule::Str("*=", 2),7LLU),_20c47ab20_KindPair(jule::Str("/=", 2),7LLU),_20c47ab20_KindPair(jule::Str("%=", 2),7LLU),_20c47ab20_KindPair(jule::Str("<<=", 3),7LLU),_20c47ab20_KindPair(jule::Str(">>=", 3),7LLU),_20c47ab20_KindPair(jule::Str("^=", 2),7LLU),_20c47ab20_KindPair(jule::Str("&=", 2),7LLU),_20c47ab20_KindPair(jule::Str("|=", 2),7LLU),_20c47ab20_KindPair(jule::Str("==", 2),7LLU),_20c47ab20_KindPair(jule::Str("!=", 2),7LLU),_20c47ab20_KindPair(jule::Str(">=", 2),7LLU),_20c47ab20_KindPair(jule::Str("<=", 2),7LLU),_20c47ab20_KindPair(jule::Str("&&", 2),7LLU),_20c47ab20_KindPair(jule::Str("||", 2),7LLU),_20c47ab20_KindPair(jule::Str("<<", 2),7LLU),_20c47ab20_KindPair(jule::Str(">>", 2),7LLU),_20c47ab20_KindPair(jule::Str("++", 2),7LLU),_20c47ab20_KindPair(jule::Str("--", 2),7LLU),_20c47ab20_KindPair(jule::Str("+", 1),7LLU),_20c47ab20_KindPair(jule::Str("-", 1),7LLU),_20c47ab20_KindPair(jule::Str("*", 1),7LLU),_20c47ab20_KindPair(jule::Str("/", 1),7LLU),_20c47ab20_KindPair(jule::Str("%", 1),7LLU),_20c47ab20_KindPair(jule::Str("&", 1),7LLU),_20c47ab20_KindPair(jule::Str("|", 1),7LLU),_20c47ab20_KindPair(jule::Str("^", 1),7LLU),_20c47ab20_KindPair(jule::Str("!", 1),7LLU),_20c47ab20_KindPair(jule::Str("<", 1),7LLU),_20c47ab20_KindPair(jule::Str(">", 1),7LLU),_20c47ab20_KindPair(jule::Str("=", 1),7LLU),_20c47ab20_KindPair(jule::Str("#", 1),39LLU)});
	_20d68a5ae_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias(jule::Ptr<_20c476dc4_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_20c47803a_Token(),jule::Str(),jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
	_20d68a5ae_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_20d4a6c9e_TypeAlias>(new( std::nothrow ) _20d4a6c9e_TypeAlias(jule::Ptr<_20c476dc4_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_20c47803a_Token(),jule::Str(),jule::new_struct<_20d4a6c9e_TypeSymbol>(new( std::nothrow ) _20d4a6c9e_TypeSymbol(jule::Ptr<_20c476dc4_TypeDecl>(),jule::new_struct_ptr<_20d4a6c9e_TypeKind>(new( std::nothrow ) _20d4a6c9e_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_20d4a6c9e_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
	_20d68a5ae_BUILTIN_TRAIT_DISPOSE = jule::new_struct_ptr<_20cb471a9_Trait>(new( std::nothrow ) _20cb471a9_Trait(_20c47803a_Token(),jule::Str("Dispose", 7),true,jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_20c819332_Fn>>({jule::new_struct_ptr<_20c819332_Fn>(new( std::nothrow ) _20c819332_Fn(jule::Ptr<_20cba60d6_Sema>(),_20c47803a_Token(),jule::Bool(),jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Str("dispose", 7),jule::Slice<jule::Ptr<_20c476dc4_Directive>>(),jule::Str(),jule::Ptr<_20c476dc4_ScopeTree>(),jule::Slice<jule::Ptr<_20c476dc4_GenericDecl>>(),jule::Ptr<_20c819332_RetType>(),jule::Slice<jule::Ptr<_20c819332_Param>>({jule::new_struct_ptr<_20c819332_Param>(new( std::nothrow ) _20c819332_Param(_20c47803a_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_20d4a6c9e_TypeSymbol>(),jule::Str("self", 4)))}),jule::Ptr<_20c496047_Struct>(),jule::Slice<jule::Ptr<_20c819332_FnIns>>({jule::new_struct_ptr<_20c819332_FnIns>(new( std::nothrow ) _20c819332_FnIns(jule::Ptr<_20c496047_StructIns>(),jule::Ptr<_20c819332_Fn>(),jule::Slice<jule::Ptr<_20d4a6c9e_TypeKind>>(),jule::Slice<jule::Ptr<_20c819332_ParamIns>>(),jule::Ptr<_20d4a6c9e_TypeKind>(),jule::Ptr<_20cb4d853_Scope>(),jule::Ptr<_20caa3115_ReferenceStack>(),jule::Bool(),jule::Ptr<_20caa3115_ReferenceStack>(),1LLU,jule::Bool()))})))}),jule::Slice<jule::Ptr<_20c496047_Struct>>()));
	_20c414339_VARS = nullptr;
	_20b6d50ab_deads = nullptr;
	_20b6d50ab_checking = nullptr;
	_20b6d50ab_current = jule::Any(nullptr);
	_20b6d50ab_main_current = jule::Any(nullptr);
	_20dc14918_MDAYS = jule::Array<jule::U8,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
	_20da77946_INDENT = nullptr;
	_20a1742ee_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,5>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)}),jule::Array<jule::Str,2>({jule::Str("mod", 3),jule::Str("Module management", 17)})});
	_20a1b0cdb_OUT_DIR = jule::Str("dist", 4);
	_20a1b0cdb_OUT_NAME = jule::Str("ir.cpp", 6);
	_20a1b0cdb_OUT = jule::Str();

	_20ba03198_init();
	_20a1a970d_init();
}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}